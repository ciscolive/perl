.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "HTML::Restrict 3"
.TH HTML::Restrict 3 "2019-03-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::Restrict \- Strip unwanted HTML tags and attributes
.SH "VERSION"
.IX Header "VERSION"
version v3.0.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use HTML::Restrict;
\&
\&    my $hr = HTML::Restrict\->new();
\&
\&    # use default rules to start with (strip away all HTML)
\&    my $processed = $hr\->process(\*(Aq  <b>i am bold</b>  \*(Aq);
\&
\&    # $processed now equals: \*(Aqi am bold\*(Aq
\&
\&    # Now, a less restrictive example:
\&    $hr = HTML::Restrict\->new(
\&        rules => {
\&            b   => [],
\&            img => [qw( src alt / )]
\&        }
\&    );
\&
\&    my $html = q[<body><b>hello</b> <img src="pic.jpg" alt="me" id="test" /></body>];
\&    $processed = $hr\->process( $html );
\&
\&    # $processed now equals: <b>hello</b> <img src="pic.jpg" alt="me" />
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module uses HTML::Parser to strip \s-1HTML\s0 from text in a restrictive
manner.  By default all \s-1HTML\s0 is restricted.  You may alter the default
behaviour by supplying your own tag rules.
.SH "CONSTRUCTOR AND STARTUP"
.IX Header "CONSTRUCTOR AND STARTUP"
.SS "\fBnew()\fP"
.IX Subsection "new()"
Creates and returns a new HTML::Restrict object.
.PP
.Vb 1
\&    my $hr = HTML::Restrict\->new()
.Ve
.PP
HTML::Restrict doesn't require any params to be passed to new.  If your goal is
to remove all \s-1HTML\s0 from text, then no further setup is required.  Just pass
your text to the \fBprocess()\fR method and you're done:
.PP
.Vb 1
\&    my $plain_text = $hr\->process( $html );
.Ve
.PP
If you need to set up specific rules, have a look at the params which
HTML::Restrict recognizes:
.IP "\(bu" 4
\&\f(CW\*(C`rules => \e%rules\*(C'\fR
.Sp
Sets the rules which will be used to process your data.  By default all \s-1HTML\s0
tags are off limits.  Use this argument to define the \s-1HTML\s0 elements and
corresponding attributes you'd like to use.  Essentially, consider the default
behaviour to be:
.Sp
.Vb 1
\&    rules => {}
.Ve
.Sp
Rules should be passed as a \s-1HASHREF\s0 of allowed tags.  Each hash value should
represent the allowed attributes for the listed tag.  For example, if you want
to allow a fair amount of \s-1HTML,\s0 you can try something like this:
.Sp
.Vb 10
\&    my %rules = (
\&        a       => [qw( href target )],
\&        b       => [],
\&        caption => [],
\&        center  => [],
\&        em      => [],
\&        i       => [],
\&        img     => [qw( alt border height width src style )],
\&        li      => [],
\&        ol      => [],
\&        p       => [qw(style)],
\&        span    => [qw(style)],
\&        strong  => [],
\&        sub     => [],
\&        sup     => [],
\&        table   => [qw( style border cellspacing cellpadding align )],
\&        tbody   => [],
\&        td      => [],
\&        tr      => [],
\&        u       => [],
\&        ul      => [],
\&    );
\&
\&    my $hr = HTML::Restrict\->new( rules => \e%rules )
.Ve
.Sp
Or, to allow only bolded text:
.Sp
.Vb 1
\&    my $hr = HTML::Restrict\->new( rules => { b => [] } );
.Ve
.Sp
Allow bolded text, images and some (but not all) image attributes:
.Sp
.Vb 5
\&    my %rules = (
\&        b   => [ ],
\&        img => [qw( src alt width height border / )
\&    );
\&    my $hr = HTML::Restrict\->new( rules => \e%rules );
.Ve
.Sp
Since HTML::Parser treats a closing slash as an attribute, you'll need to
add \*(L"/\*(R" to your list of allowed attributes if you'd like your tags to retain
closing slashes.  For example:
.Sp
.Vb 2
\&    my $hr = HTML::Restrict\->new( rules =>{ hr => [] } );
\&    $hr\->process( "<hr />"); # returns: <hr>
\&
\&    my $hr = HTML::Restrict\->new( rules =>{ hr => [qw( / )] } );
\&    $hr\->process( "<hr />"); # returns: <hr />
.Ve
.Sp
HTML::Restrict strips away any tags and attributes which are not explicitly
allowed. It also rebuilds your explicitly allowed tags and places their
attributes in the order in which they appear in your rules.
.Sp
So, if you define the following rules:
.Sp
.Vb 5
\&    my %rules = (
\&        ...
\&        img => [qw( src alt title width height id / )]
\&        ...
\&    );
.Ve
.Sp
then your image tags will all be built like this:
.Sp
.Vb 1
\&    <img src=".." alt="..." title="..." width="..." height="..." id=".." />
.Ve
.Sp
This gives you greater consistency in your tag layout.  If you don't care about
element order you don't need to pay any attention to this, but you should be
aware that your elements are being reconstructed rather than just stripped
down.
.Sp
As of 2.1.0, you can also specify a regex to be tested against the attribute
value. This feature should be considered experimental for the time being:
.Sp
.Vb 11
\&    my $hr = HTML::Restrict\->new(
\&        rules => {
\&            iframe => [
\&                qw( width height allowfullscreen ),
\&                {   src         => qr{^http://www\e.youtube\e.com},
\&                    frameborder => qr{^(0|1)$},
\&                }
\&            ],
\&            img => [ qw( alt ), { src => qr{^/my/images/} }, ],
\&        },
\&    );
\&
\&    my $html = \*(Aq<img src="http://www.example.com/image.jpg" alt="Alt Text">\*(Aq;
\&    my $processed = $hr\->process( $html );
\&
\&    # $processed now equals: <img alt="Alt Text">
.Ve
.Sp
As of 2.3.0, the value to be tested against can also be a code reference.  The
code reference will be passed the value of the attribute, and should return
either a string to use for the attribute value, or undef to remove the attribute.
.Sp
.Vb 12
\&    my $hr = HTML::Restrict\->new(
\&        rules => {
\&            span => [
\&                { style     => sub {
\&                    my $value = shift;
\&                    # all colors are orange
\&                    $value =~ s/\ebcolor\es*:\es*[^;]+/color: orange/g;
\&                    return $value;
\&                } }
\&            ],
\&        },
\&    );
\&
\&    my $html = \*(Aq<span style="color: #0000ff;">This is blue</span>\*(Aq;
\&    my $processed = $hr\->process( $html );
\&
\&    # $processed now equals: <span style="color: orange;">
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`trim => [0|1]\*(C'\fR
.Sp
By default all leading and trailing spaces will be removed when text is
processed.  Set this value to 0 in order to disable this behaviour.
.IP "\(bu" 4
\&\f(CW\*(C`uri_schemes => [undef, \*(Aqhttp\*(Aq, \*(Aqhttps\*(Aq, \*(Aqirc\*(Aq, ... ]\*(C'\fR
.Sp
As of version 1.0.3, \s-1URI\s0 scheme checking is performed on all href and src tag
attributes. The following schemes are allowed out of the box.  No action is
required on your part:
.Sp
.Vb 1
\&    [ undef, \*(Aqhttp\*(Aq, \*(Aqhttps\*(Aq ]
.Ve
.Sp
(undef represents relative URIs). These restrictions have been put in place to
prevent \s-1XSS\s0 in the form of:
.Sp
.Vb 1
\&    <a href="javascript:alert(document.cookie)">click for cookie!</a>
.Ve
.Sp
See \s-1URI\s0 for more detailed info on scheme parsing.  If, for example, you
wanted to filter out every scheme barring \s-1SSL,\s0 you would do it like this:
.Sp
.Vb 1
\&    uri_schemes => [\*(Aqhttps\*(Aq]
.Ve
.Sp
This feature is new in 1.0.3.  Previous to this, there was no schema checking
at all.  Moving forward, you'll need to whitelist explicitly all \s-1URI\s0 schemas
which are not supported by default.  This is in keeping with the whitelisting
behaviour of this module and is also the safest possible approach.  Keep in
mind that changes to uri_schemes are not additive, so you'll need to include
the defaults in any changes you make, should you wish to keep them:
.Sp
.Vb 2
\&    # defaults + irc + mailto
\&    uri_schemes => [ \*(Aqundef\*(Aq, \*(Aqhttp\*(Aq, \*(Aqhttps\*(Aq, \*(Aqirc\*(Aq, \*(Aqmailto\*(Aq ]
.Ve
.IP "\(bu" 4
allow_declaration => [0|1]
.Sp
Set this value to true if you'd like to allow/preserve \s-1DOCTYPE\s0 declarations in
your content.  Useful when cleaning up your own static files or templates. This
feature is off by default.
.Sp
.Vb 1
\&    my $html = q[<!doctype html><body>foo</body>];
\&
\&    my $hr = HTML::Restrict\->new( allow_declaration => 1 );
\&    $html = $hr\->process( $html );
\&    # $html is now: "<!doctype html>foo"
.Ve
.IP "\(bu" 4
allow_comments => [0|1]
.Sp
Set this value to true if you'd like to allow/preserve \s-1HTML\s0 comments in your
content.  Useful when cleaning up your own static files or templates. This
feature is off by default.
.Sp
.Vb 1
\&    my $html = q[<body><!\-\- comments! \-\->foo</body>];
\&
\&    my $hr = HTML::Restrict\->new( allow_comments => 1 );
\&    $html = $hr\->process( $html );
\&    # $html is now: "<!\-\- comments! \-\->foo"
.Ve
.IP "\(bu" 4
replace_img => [0|1|CodeRef]
.Sp
Set the value to true if you'd like to have img tags replaced with
\&\f(CW\*(C`[IMAGE: ...]\*(C'\fR containing the alt attribute text.  If you set it to a
code reference, you can provide your own replacement (which may
even contain \s-1HTML\s0).
.Sp
.Vb 4
\&    sub replacer {
\&        my ($tagname, $attr, $text) = @_; # from HTML::Parser
\&        return qq{<a href="$attr\->{src}">IMAGE: $attr\->{alt}</a>};
\&    }
\&
\&    my $hr = HTML::Restrict\->new( replace_img => \e&replacer );
.Ve
.Sp
This attribute will only take effect if the img tag is not included
in the allowed \s-1HTML.\s0
.IP "\(bu" 4
strip_enclosed_content => [0|1]
.Sp
The default behaviour up to 1.0.4 was to preserve the content between script
and style tags, even when the tags themselves were being deleted.  So, you'd be
left with a bunch of JavaScript or \s-1CSS,\s0 just with the enclosing tags missing.
This is almost never what you want, so starting at 1.0.5 the default will be to
remove any script or style info which is enclosed in these tags, unless they
have specifically been whitelisted in the rules.  This will be a sane default
when cleaning up content submitted via a web form.  However, if you're using
HTML::Restrict to purge your own \s-1HTML\s0 you can be more restrictive.
.Sp
.Vb 2
\&    # strip the head section, in addition to JS and CSS
\&    my $html = \*(Aq<html><head>...</head><body>...<script>JS here</script>foo\*(Aq;
\&
\&    my $hr = HTML::Restrict\->new(
\&        strip_enclosed_content => [ \*(Aqscript\*(Aq, \*(Aqstyle\*(Aq, \*(Aqhead\*(Aq ]
\&    );
\&
\&    $html = $hr\->process( $html );
\&    # $html is now \*(Aq<html><body>...foo\*(Aq;
.Ve
.Sp
The caveat here is that HTML::Restrict will not try to fix broken \s-1HTML.\s0 In the
above example, if you have any opening script, style or head tags which don't
also include matching closing tags, all following content will be stripped
away, regardless of any parent tags.
.Sp
Keep in mind that changes to strip_enclosed_content are not additive, so if you
are adding additional tags you'll need to include the entire list of tags whose
enclosed content you'd like to remove.  This feature strips script and style
tags by default.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.ie n .SS "process( $html )"
.el .SS "process( \f(CW$html\fP )"
.IX Subsection "process( $html )"
This is the method which does the real work.  It parses your data, removes any
tags and attributes which are not specifically allowed and returns the
resulting text.  Requires and returns a \s-1SCALAR.\s0
.SS "get_rules"
.IX Subsection "get_rules"
Accessor which returns a hash ref of the current rule set.
.SS "get_uri_schemes"
.IX Subsection "get_uri_schemes"
Accessor which returns an array ref of the current valid uri schemes.
.SH "CAVEATS"
.IX Header "CAVEATS"
Please note that all tag and attribute names passed via the rules param must be
supplied in lower case.
.PP
.Vb 2
\&    # correct
\&    my $hr = HTML::Restrict\->new( rules => { body => [\*(Aqonload\*(Aq] } );
\&
\&    # throws a fatal error
\&    my $hr = HTML::Restrict\->new( rules => { Body => [\*(AqonLoad\*(Aq] } );
.Ve
.SH "MOTIVATION"
.IX Header "MOTIVATION"
There are already several modules on the \s-1CPAN\s0 which accomplish much of the same
thing, but after doing a lot of poking around, I was unable to find a solution
with a simple setup which I was happy with.
.PP
The most common use case might be stripping \s-1HTML\s0 from user submitted data
completely or allowing just a few tags and attributes to be displayed.  With
the exception of \s-1URI\s0 scheme checking, this module doesn't do any validation on
the actual content of the tags or attributes.  If this is a requirement, you
can either mess with the parser object, post-process the text yourself or have
a look at one of the more feature-rich modules in the \s-1SEE ALSO\s0 section below.
.PP
My aim here is to keep things easy and, hopefully, cover a lot of the less
complex use cases with just a few lines of code and some brief documentation.
The idea is to be up and running quickly.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::TagFilter, HTML::Defang, MojoMojo::Declaw, HTML::StripScripts,
HTML::Detoxifier, HTML::Sanitizer, HTML::Scrubber
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to Raybec Communications <http://www.raybec.com> for funding my
work on this module and for releasing it to the world.
.PP
Thanks also to the following for patches, bug reports and assistance:
.PP
Mark Jubenville (ioncache)
.PP
Duncan Forsyth
.PP
Rick Moore
.PP
Arthur Axel 'fREW' Schmidt
.PP
perlpong
.PP
David Golden
.PP
Graham TerMarsch
.PP
Dagfinn Ilmari Mannsåker
.PP
Graham Knop
.PP
Carwyn Ellis
.SH "AUTHOR"
.IX Header "AUTHOR"
Olaf Alders <olaf@wundercounter.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013\-2017 by Olaf Alders.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
