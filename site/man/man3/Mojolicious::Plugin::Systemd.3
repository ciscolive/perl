.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Systemd 3"
.TH Mojolicious::Plugin::Systemd 3 "2020-01-10" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Systemd \- Configure your app from within systemd service file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Example application"
.IX Subsection "Example application"
.Vb 6
\&  package MyApp;
\&  use Mojo::Base "Mojolicious";
\&  sub startup {
\&    my $app = shift;
\&    $app\->plugin("Systemd");
\&  }
.Ve
.SS "Example systemd unit file"
.IX Subsection "Example systemd unit file"
.Vb 3
\&    [Unit]
\&    Description=MyApp service
\&    After=network.target
\&
\&    [Service]
\&    Environment=SYSTEMD_SERVICE_FILE=/etc/systemd/system/my_app.service
\&    Environment=MOJO_SERVER_PID_FILE=/var/run/my_app.pid
\&    Environment=MYAPP_HOME=/var/my_app
\&    EnvironmentFile=\-/etc/default/my_app
\&
\&    User=www
\&    Type=forking
\&    PIDFile=/var/run/my_app.pid
\&    ExecStart=/path/to/hypnotoad /home/myapp/script/my_app
\&    ExecReload=/path/to/hypnotoad /home/myapp/script/my_app
\&    KillMode=process
\&    SyslogIdentifier=my_app
\&
\&    [Install]
\&    WantedBy=multi\-user.target
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::Systemd is a Mojolicious plugin that allows your
application to read configuration from a Systemd service (unit) file.
.PP
It works by parsing the \f(CW\*(C`Environment\*(C'\fR, \f(CW\*(C`EnvironmentFile\*(C'\fR and
\&\f(CW\*(C`UnsetEnvironment\*(C'\fR statements in the service file and inject those environment
variables into your application. This is especially useful if your application
is run by Mojo::Server::Hypnotoad, since you cannot \*(L"inject\*(R" environment
variables into a running application, meaning \f(CW\*(C`SOME_VAR\*(C'\fR below won't change
anything in your already started application:
.PP
.Vb 1
\&  $ SOME_VAR=42 /path/to/hypnotoad /home/myapp/script/my_app
.Ve
.PP
See <http://manpages.ubuntu.com/manpages/cosmic/man5/systemd.exec.5.html#environment>
for more information about \f(CW\*(C`Environment\*(C'\fR, \f(CW\*(C`EnvironmentFile\*(C'\fR and \f(CW\*(C`UnsetEnvironment\*(C'\fR.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "config_map"
.IX Subsection "config_map"
.Vb 1
\&  $hash_ref = $self\->config_map;
.Ve
.PP
Returns a structure for how \*(L"config\*(R" in Mojolicious can be set from environment
variables. By default the environment variables below are supported:
.PP
.Vb 10
\&  $app\->config\->{hypnotoad}{accepts}            = $ENV{MOJO_SERVER_ACCEPTS}
\&  $app\->config\->{hypnotoad}{backlog}            = $ENV{MOJO_SERVER_BACKLOG}
\&  $app\->config\->{hypnotoad}{clients}            = $ENV{MOJO_SERVER_CLIENTS}
\&  $app\->config\->{hypnotoad}{graceful_timeout}   = $ENV{MOJO_SERVER_GRACEFUL_TIMEOUT}
\&  $app\->config\->{hypnotoad}{heartbeat_interval} = $ENV{MOJO_SERVER_HEARTBEAT_INTERVAL}
\&  $app\->config\->{hypnotoad}{heartbeat_timeout}  = $ENV{MOJO_SERVER_HEARTBEAT_TIMEOUT}
\&  $app\->config\->{hypnotoad}{inactivity_timeout} = $ENV{MOJO_SERVER_INACTIVITY_TIMEOUT}
\&  $app\->config\->{hypnotoad}{listen}             = [split /\es+/, $ENV{MOJO_LISTEN}];
\&  $app\->config\->{hypnotoad}{pid_file}           = $ENV{MOJO_SERVER_PID_FILE}
\&  $app\->config\->{hypnotoad}{proxy}              = $ENV{MOJO_SERVER_PROXY}
\&  $app\->config\->{hypnotoad}{requests}           = $ENV{MOJO_SERVER_REQUESTS}
\&  $app\->config\->{hypnotoad}{spare}              = $ENV{MOJO_SERVER_SPARE}
\&  $app\->config\->{hypnotoad}{upgrade_timeout}    = $ENV{MOJO_SERVER_UPGRADE_TIMEOUT}
\&  $app\->config\->{hypnotoad}{workers}            = $ENV{MOJO_SERVER_WORKERS}
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "register"
.IX Subsection "register"
.Vb 2
\&  $app\->plugin("Systemd");
\&  $app\->plugin("Systemd" => {config_map => {...}, service_file => "..."});
.Ve
.PP
Used to register the plugin in your application. The following options are
otional:
.IP "\(bu" 2
config_map
.Sp
The \f(CW\*(C`config_map\*(C'\fR must be a hash-ref and will be \fImerged\fR with the
\&\*(L"config_map\*(R" attribute. Example:
.Sp
.Vb 11
\&  $app\->plugin(Systemd => {
\&    config_map => {
\&      # Add your own custom environment variables. The empty quotes means
\&      # that the environment variable should be read as a string.
\&      database => {
\&        url => sub { (MYAPP_DB_URL => "") },
\&      },
\&      hypnotoad => {
\&        # Remove support for the default MOJO_SERVER_ACCEPTS environment
\&        # variable
\&        accepts => undef,
\&
\&        # Change the environment variable from MOJO_LISTEN and
\&        # the regexp to split the environment variable into a list
\&        listen  => sub { (MYAPP_LISTEN => [qr{[,\es]}]) },
\&      }
\&    }
\&  });
.Ve
.IP "\(bu" 2
service_file
.Sp
Defaults to the environment variable \f(CW\*(C`SYSTEMD_SERVICE_FILE\*(C'\fR and \fIis\fR required
if \f(CW\*(C`XDG_SESSION_ID\*(C'\fR is set. Must be a full path to where your service file is
located. See \*(L"Example systemd unit file\*(R" for example.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jan Henning Thorsen
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2019, Jan Henning Thorsen.
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Plugin::Syslog.
