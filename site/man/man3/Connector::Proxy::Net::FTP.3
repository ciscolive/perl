.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Connector::Proxy::Net::FTP 3"
.TH Connector::Proxy::Net::FTP 3 "2019-11-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
Connector::Proxy::Net::FTP
.SH "Description"
.IX Header "Description"
Read/Write files to/from a remote host using \s-1FTP.\s0
.PP
\&\s-1LOCATION\s0 is the only mandatory parameter, if neither file nor path is
set, the file is constructed from the arguments given to the method call.
.SH "Parameters"
.IX Header "Parameters"
.IP "\s-1LOCATION\s0" 4
.IX Item "LOCATION"
The \s-1DNS\s0 name or \s-1IP\s0 of the target host.
.IP "port" 4
.IX Item "port"
Port number (Integer), default is 21.
.IP "file" 4
.IX Item "file"
Pattern for Template Toolkit to build the filename. The connector path
components are available in the key \s-1ARGS.\s0 In set mode the unfiltered
data is also available in key \s-1DATA.\s0
For security reasons, only word, space, dash, underscore and dot are
allowed in the filename. If you want to include a directory, add the path
parameter instead!
.IP "path" 4
.IX Item "path"
Same as file, but allows the directory seperator (slash and backslash)
in the resulting filename. Use this for the full path including the
filename as the file parameter is not used, when path is set!
.IP "basedir" 4
.IX Item "basedir"
A basedir which is always prepended to the path.
.IP "content" 4
.IX Item "content"
Pattern for Template Toolkit to build the content. The data is passed
\&\*(L"as is\*(R". If data is a scalar, it is wrapped into a hash using \s-1DATA\s0 as key.
.IP "username" 4
.IX Item "username"
\&\s-1FTP\s0 username
.IP "password" 4
.IX Item "password"
\&\s-1FTP\s0 password
.IP "timeout" 4
.IX Item "timeout"
\&\s-1FTP\s0 connection timeout, default is 30 seconds
.IP "debug (Boolean)" 4
.IX Item "debug (Boolean)"
Set the debug flag for Net::FTP
.IP "active (Boolean)" 4
.IX Item "active (Boolean)"
Use \s-1FTP\s0 active transfer. The default is to use passive transfer mode.
.IP "binary (Boolean)" 4
.IX Item "binary (Boolean)"
Use binary or ascii transfer mode. Note that binary is the default!
.SH "Supported Methods"
.IX Header "Supported Methods"
.SS "set"
.IX Subsection "set"
Write data to a file.
.PP
.Vb 1
\&    $conn\->set(\*(Aqfilename\*(Aq, { NAME => \*(AqJohn Doe\*(Aq, \*(AqROLE\*(Aq => \*(AqAdministrator\*(Aq });
.Ve
.PP
See the file parameter how to control the filename.
.SS "get"
.IX Subsection "get"
Fetch data from a file. See the file parameter how to control the filename.
.PP
.Vb 1
\&    my $data = $conn\->set(\*(Aqfilename\*(Aq);
.Ve
.SS "get_keys"
.IX Subsection "get_keys"
.Vb 1
\&    Return the file names in the given directory.
.Ve
.SH "Example"
.IX Header "Example"
.Vb 6
\&    my $conn = Connector::Proxy::Net::FTP\->new({
\&       LOCATION => \*(Aqlocalhost\*(Aq,
\&       file => \*(Aq[% ARGS.0 %].txt\*(Aq,
\&       basedir => \*(Aq/var/data/\*(Aq,
\&       content => \*(Aq Hello [% NAME %]\*(Aq,
\&    });
\&
\&    $conn\->set(\*(Aqtest\*(Aq, { NAME => \*(AqJohn Doe\*(Aq });
.Ve
.PP
Results in a file \fI/var/data/test.txt\fR with the content \fIHello John Doe\fR.
.SH "A note on security"
.IX Header "A note on security"
To enable the scp transfer, the file is created on the local disk using
tempdir/tempfile. The directory is created with permissions only for the
current user, so no other user than root and yourself is able to see the
content. The tempfile is cleaned up immediatly, the directory is handled
by the internal garbage collection.
