.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::DMARC::Policy 3"
.TH Mail::DMARC::Policy 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::DMARC::Policy \- a DMARC policy in object format
.SH "VERSION"
.IX Header "VERSION"
version 1.20200214
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& my $pol = Mail::DMARC::Policy\->new(
\&    \*(Aqv=DMARC1; p=none; rua=mailto:dmarc@example.com\*(Aq
\&    );
\&
\& print "not a valid DMARC version!"    if $pol\->v ne \*(AqDMARC1\*(Aq;
\& print "take no action"                if $pol\->p eq \*(Aqnone\*(Aq;
\& print "reject that unaligned message" if $pol\->p eq \*(Aqreject\*(Aq;
\& print "do not send aggregate reports" if ! $pol\->rua;
\& print "do not send forensic reports"  if ! $pol\->ruf;
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
A \s-1DMARC\s0 record in \s-1DNS\s0 format looks like this:
.PP
.Vb 1
\&    v=DMARC1; p=reject; adkim=s; aspf=s; rua=mailto:dmarc@example.com; pct=100;
.Ve
.PP
\&\s-1DMARC\s0 records are stored in \s-1TXT\s0 resource records in the \s-1DNS,\s0 at _dmarc.example.com. To retrieve a \s-1DMARC\s0 record for a domain:
.SS "dig"
.IX Subsection "dig"
.Vb 1
\&    dig +short _dmarc.example.com TXT
.Ve
.SS "perlishly"
.IX Subsection "perlishly"
.Vb 2
\&    print $_\->txtdata."\en"
\&      for Net::DNS::Resolver\->new(dnsrch=>0)\->send(\*(Aq_dmarc.example.com\*(Aq,\*(AqTXT\*(Aq)\->answer;
.Ve
.SS "dmarc_lookup"
.IX Subsection "dmarc_lookup"
.Vb 1
\&    dmarc_lookup example.com
.Ve
.SH "METHODS"
.IX Header "METHODS"
All methods validate their input against the 2013 \s-1DMARC\s0 specification. Attempts to set invalid values will throw exceptions.
.SS "new"
.IX Subsection "new"
Create a new empty policy:
.PP
.Vb 1
\& my $pol = Mail::DMARC::Policy\->new;
.Ve
.PP
Create a new policy from named arguments:
.PP
.Vb 5
\& my $pol = Mail::DMARC::Policy\->new(
\&         v   => \*(AqDMARC1\*(Aq,
\&         p   => \*(Aqnone\*(Aq,
\&         pct => 50,
\&         );
.Ve
.PP
Create a new policy from a \s-1DMARC DNS\s0 resource record:
.PP
.Vb 3
\& my $pol = Mail::DMARC::Policy\->new(
\&         \*(Aqv=DMARC1; p=reject; rua=mailto:dmarc@example.com; pct=50;\*(Aq
\&         );
.Ve
.PP
If a policy is passed in (the latter two examples), the resulting policy object will be an exact representation of the record as returned from \s-1DNS.\s0
.SS "apply_defaults"
.IX Subsection "apply_defaults"
Several of the \s-1DMARC\s0 tags (adkim,aspf,fo,ri,rf) have default values when not specified in the published \s-1DNS\s0 record. Calling \fIapply_defaults\fR will apply those default values to the \s-1DMARC\s0 tags that were not specified in the \s-1DNS\s0 record. The resulting Policy object will be a perfect representation of the \s-1DMARC\s0 policy that is/was applied.
.SS "parse"
.IX Subsection "parse"
Accepts a string containing a \s-1DMARC\s0 Resource Record, as it would be retrieved
via \s-1DNS.\s0
.PP
.Vb 3
\&    my $pol = Mail::DMARC::Policy\->new;
\&    $pol\->parse( \*(Aqv=DMARC1; p=none; rua=mailto:dmarc@example.com\*(Aq );
\&    $pol\->parse( \*(Aqv=DMARC1\*(Aq );       # external reporting record
.Ve
.SH "Record Tags"
.IX Header "Record Tags"
.SS "Tag Overview"
.IX Subsection "Tag Overview"
.Vb 10
\& v=DMARC1;    (version)
\& p=none;      (disposition policy : reject, quarantine, none (monitor))
\& sp=reject;   (subdomain policy: same as p)
\& adkim=s;     (dkim alignment: s=strict, r=relaxed)
\& aspf=r;      (spf  alignment: s=strict, r=relaxed)
\& rua=mailto:dmarc\-feedback@example.com; (aggregate reports)
\& ruf=mailto:dmarc\-feedback@example.com; (forensic reports)
\& rf=afrf;     (report format: afrf, iodef)
\& ri=8400;     (report interval)
\& pct=50;      (percent of messages to filter)
.Ve
.SS "Tags in Detail"
.IX Subsection "Tags in Detail"
The descriptions of each \s-1DMARC\s0 record tag and its corresponding values is from the March 31, 2013 draft of the \s-1DMARC\s0 spec:
.PP
https://datatracker.ietf.org/doc/draft\-kucherawy\-dmarc\-base/?include_text=1
.PP
Each tag has a mutator that's a setter and getter. To set any of the tag values, pass in the new value. Examples:
.PP
.Vb 2
\&  $pol\->p(\*(Aqnone\*(Aq);                         set policy action to none
\&  print "do nothing" if $pol\->p eq \*(Aqnone\*(Aq; get policy action
.Ve
.SS "v"
.IX Subsection "v"
Version (plain-text; \s-1REQUIRED\s0).  Identifies the record retrieved
as a \s-1DMARC\s0 record.  It \s-1MUST\s0 have the value of \*(L"\s-1DMARC1\*(R".\s0  The value
of this tag \s-1MUST\s0 match precisely; if it does not or it is absent,
the entire retrieved record \s-1MUST\s0 be ignored.  It \s-1MUST\s0 be the first
tag in the list.
.SS "p"
.IX Subsection "p"
Requested Mail Receiver policy (plain-text; \s-1REQUIRED\s0 for policy
records).  Indicates the policy to be enacted by the Receiver at
the request of the Domain Owner.  Policy applies to the domain
queried and to sub-domains unless sub-domain policy is explicitly
described using the \*(L"sp\*(R" tag.  This tag is mandatory for policy
records only, but not for third-party reporting records (see
Section 8.2).
.SS "sp"
.IX Subsection "sp"
{R6} Requested Mail Receiver policy for subdomains (plain-text;
\&\s-1OPTIONAL\s0).  Indicates the policy to be enacted by the Receiver at
the request of the Domain Owner.  It applies only to subdomains of
the domain queried and not to the domain itself.  Its syntax is
identical to that of the \*(L"p\*(R" tag defined above.  If absent, the
policy specified by the \*(L"p\*(R" tag \s-1MUST\s0 be applied for subdomains.
.SS "adkim"
.IX Subsection "adkim"
(plain-text; \s-1OPTIONAL,\s0 default is \*(L"r\*(R".)  Indicates whether or
not strict \s-1DKIM\s0 identifier alignment is required by the Domain
Owner.  If and only if the value of the string is \*(L"s\*(R", strict mode
is in use.  See Section 4.3.1 for details.
.SS "aspf"
.IX Subsection "aspf"
(plain-text; \s-1OPTIONAL,\s0 default is \*(L"r\*(R".)  Indicates whether or
not strict \s-1SPF\s0 identifier alignment is required by the Domain
Owner.  If and only if the value of the string is \*(L"s\*(R", strict mode
is in use.  See Section 4.3.2 for details.
.SS "fo"
.IX Subsection "fo"
Failure reporting options (plain-text; \s-1OPTIONAL,\s0 default \*(L"0\*(R"))
Provides requested options for generation of failure reports.
Report generators \s-1MAY\s0 choose to adhere to the requested options.
This tag's content \s-1MUST\s0 be ignored if a \*(L"ruf\*(R" tag (below) is not
also specified.  The value of this tag is a colon-separated list
of characters that indicate failure reporting options as follows:
.PP
.Vb 3
\&  0: Generate a DMARC failure report if all underlying
\&     authentication mechanisms failed to produce an aligned "pass"
\&     result.
\&
\&  1: Generate a DMARC failure report if any underlying
\&     authentication mechanism failed to produce an aligned "pass"
\&     result.
\&
\&  d: Generate a DKIM failure report if the message had a signature
\&     that failed evaluation, regardless of its alignment.  DKIM\-
\&     specific reporting is described in [AFRF\-DKIM].
\&
\&  s: Generate an SPF failure report if the message failed SPF
\&     evaluation, regardless of its alignment. SPF\-specific
\&     reporting is described in [AFRF\-SPF].
.Ve
.SS "rua"
.IX Subsection "rua"
Addresses to which aggregate feedback is to be sent (comma\-
separated plain-text list of \s-1DMARC\s0 URIs; \s-1OPTIONAL\s0). {R11} A comma
or exclamation point that is part of such a \s-1DMARC URI MUST\s0 be
encoded per Section 2.1 of [\s-1URI\s0] so as to distinguish it from the
list delimiter or an \s-1OPTIONAL\s0 size limit.  Section 8.2 discusses
considerations that apply when the domain name of a \s-1URI\s0 differs
from that of the domain advertising the policy.  See Section 15.6
for additional considerations.  Any valid \s-1URI\s0 can be specified.  A
Mail Receiver \s-1MUST\s0 implement support for a \*(L"mailto:\*(R" \s-1URI,\s0 i.e. the
ability to send a \s-1DMARC\s0 report via electronic mail.  If not
provided, Mail Receivers \s-1MUST NOT\s0 generate aggregate feedback
reports.  URIs not supported by Mail Receivers \s-1MUST\s0 be ignored.
The aggregate feedback report format is described in Section 8.3.
.SS "ruf"
.IX Subsection "ruf"
Addresses to which message-specific failure information is to
be reported (comma-separated plain-text list of \s-1DMARC\s0 URIs;
\&\s-1OPTIONAL\s0). {R11} If present, the Domain Owner is requesting Mail
Receivers to send detailed failure reports about messages that
fail the \s-1DMARC\s0 evaluation in specific ways (see the \*(L"fo\*(R" tag
above).  The format of the message to be generated \s-1MUST\s0 follow
that specified in the \*(L"rf\*(R" tag.  Section 8.2 discusses
considerations that apply when the domain name of a \s-1URI\s0 differs
from that of the domain advertising the policy.  A Mail Receiver
\&\s-1MUST\s0 implement support for a \*(L"mailto:\*(R" \s-1URI,\s0 i.e. the ability to
send a \s-1DMARC\s0 report via electronic mail.  If not provided, Mail
Receivers \s-1MUST NOT\s0 generate failure reports.  See Section 15.6 for
additional considerations.
.SS "rf"
.IX Subsection "rf"
Format to be used for message-specific failure reports (comma\-
separated plain-text list of values; \s-1OPTIONAL\s0; default \*(L"afrf\*(R").
The value of this tag is a list of one or more report formats as
requested by the Domain Owner to be used when a message fails both
[\s-1SPF\s0] and [\s-1DKIM\s0] tests to report details of the individual
failure.  The values \s-1MUST\s0 be present in the registry of reporting
formats defined in Section 14; a Mail Receiver observing a
different value \s-1SHOULD\s0 ignore it, or \s-1MAY\s0 ignore the entire \s-1DMARC\s0
record.  Initial default values are \*(L"afrf\*(R" (defined in [\s-1AFRF\s0]) and
\&\*(L"iodef\*(R" (defined in [\s-1IODEF\s0]).  See Section 8.4 for details.
.SS "ri"
.IX Subsection "ri"
Interval requested between aggregate reports (plain-text, 32\-bit
unsigned integer; \s-1OPTIONAL\s0; default 86400). {R14} Indicates a
request to Receivers to generate aggregate reports separated by no
more than the requested number of seconds.  \s-1DMARC\s0 implementations
\&\s-1MUST\s0 be able to provide daily reports and \s-1SHOULD\s0 be able to
provide hourly reports when requested.  However, anything other
than a daily report is understood to be accommodated on a best\-
effort basis.
.SS "pct"
.IX Subsection "pct"
(plain-text integer between 0 and 100, inclusive; \s-1OPTIONAL\s0;
default is 100). {R8} Percentage of messages from the \s-1DNS\s0 domain's
mail stream to which the \s-1DMARC\s0 mechanism is to be applied.
However, this \s-1MUST NOT\s0 be applied to the DMARC-generated reports,
all of which must be sent and received unhindered.  The purpose of
the \*(L"pct\*(R" tag is to allow Domain Owners to enact a slow rollout
enforcement of the \s-1DMARC\s0 mechanism.  The prospect of \*(L"all or
nothing\*(R" is recognized as preventing many organizations from
experimenting with strong authentication-based mechanisms.  See
Section 7.1 for details.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Matt Simerson <msimerson@cpan.org>
.IP "\(bu" 4
Davide Migliavacca <shari@cpan.org>
.IP "\(bu" 4
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Matt Simerson.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
