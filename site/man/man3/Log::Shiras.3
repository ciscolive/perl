.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Log::Shiras 3"
.TH Log::Shiras 3 "2016-10-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Shiras \- A Moose based logging and reporting tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&        #!perl
\&        use Modern::Perl;
\&        use lib \*(Aqlib\*(Aq, \*(Aq../lib\*(Aq,;
\&        use Log::Shiras::Unhide qw( :debug);#
\&        use Log::Shiras::Switchboard;
\&        use Log::Shiras::Telephone;
\&        use Log::Shiras::Report::Stdout;
\&        $| = 1;
\&
\&        sub shout_at_me{
\&                my $telephone = Log::Shiras::Telephone\->new( report => \*(Aqrun\*(Aq );
\&                $telephone\->talk( carp_stack => 1, level => \*(Aqinfo\*(Aq, message =>[ @_ ] );
\&        }
\&
\&        ###LogSD warn "lets get ready to rumble...";
\&        my $operator = Log::Shiras::Switchboard\->get_operator(
\&                        name_space_bounds =>{
\&                                main =>{
\&                                        UNBLOCK =>{
\&                                                # UNBLOCKing the run reports (destinations)
\&                                                #       at the \*(Aqmain\*(Aq caller name_space and deeper
\&                                                run     => \*(Aqtrace\*(Aq,
\&                                        },
\&                                },
\&                        },
\&                        reports =>{
\&                                run =>[ Log::Shiras::Report::Stdout\->new, ],
\&                        },
\&                );
\&        ###LogSD warn "Getting a Telephone";
\&        my $telephone = Log::Shiras::Telephone\->new( report => \*(Aqrun\*(Aq );
\&        $telephone\->talk( message => \*(AqHello World 1\*(Aq );
\&        ###LogSD warn "message was sent to the report \*(Aqrun\*(Aq without sufficient permissions";
\&        $telephone\->talk( level => \*(Aqinfo\*(Aq, message => \*(AqHello World 2\*(Aq );
\&        ###LogSD warn "message sent with sufficient permissions";
\&        shout_at_me( \*(AqHello World 3\*(Aq );
\&
\&        #####################################################################################
\&        #       Synopsis screen output
\&        # 01: Using Log::Shiras::Unhide\-v0.29_1 strip_match string: (LogSD) at ../lib/Log/Shiras/Unhide.pm line 87.
\&        # 02: lets get ready to rumble... at log_shiras.pl line 15.
\&        # 03: Getting a Telephone at log_shiras.pl line 30.
\&        # 04: message was sent to the report \*(Aqrun\*(Aq without sufficient permissions at log_shiras.pl line 33.
\&        # 05: | level \- info   | name_space \- main
\&        # 06: | line  \- 0034   | file_name  \- log_shiras.pl
\&        # 07:   :(      Hello World 2 ):
\&        # 08: message sent with sufficient permissions at log_shiras.pl line 35.
\&        # 09: | level \- info   | name_space \- main::shout_at_me
\&        # 10: | line  \- 0012   | file_name  \- log_shiras.pl
\&        # 11:   :(      Hello World 3
\&        # 12:            at ..\elib\eLog\-Shiras\elib\eLog\eShiras\eTelephone.pm line 148.
\&        # 13:           Log::Shiras::Telephone::talk(Log::Shiras::Telephone=HASH(0x144cc18), "carp_stack", 1, "level", "info", "message", ARRAY(0xa14cd8)) called at log_shiras.pl line 12
\&        # 14:           main::shout_at_me("Hello World 3") called at log_shiras.pl line 36 ):
\&        #####################################################################################
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Shiras <http://en.wikipedia.org/wiki/Moose#Subspecies> \- A small subspecies of
Moose found in the western United States (of America).
.PP
This is one of many loggers <https://metacpan.org/search?q=Log> you can choose from in
\&\s-1CPAN.\s0  The ultimate goal of this package is to add name-space control to any of your
programs outputs that you want name-space control of.  As the package stands today there
are three relevant name-spaces.  First, the file name-space, file name-space is the
name-space that we apply to specific files (modules or scripts).  The file name-space in
this package is treated as flat (no heirarchy) and is managed using source code filters
\&.  File name-space filtering is therefore done at compile time with
no run time changes available.  The second name-space is a run time caller name-space that
can be adjusted as the program operates.  Caller name-space is applied to the source of the
output.  The caller namespace also allows for urgency levels to be assigend to each source
of information.  The caller namespace is hierarchical which allows filtering to be applied
lower in the hierarchy and remain in force farther out in the branch.  Caller name-space and
urgency can be changed during run-time.  Finally, there is a destination name-space.  Not all
sources will wish to call the same destination.  Destination name-space is flat and less flexible
but still somewhat editable at run time.  Caller name-space, caller urgency levels, and desination
name-space are all stiched together using permissions.  Permissions can also be changed at
run-time.  To sort of stich these concepts together mentally I have used terminology associated
with the old land line telephone system.  Caller name-space is managed through a telephone
 class.  Permissions are managed through a switchboard
 with switchboard operators.  And destinations are called reports
\&.  This last term does not follow the terminology of the old
land lines since communication through this package is one direction.  \fIReports cannot send
messages back on the same connection that they use to receive information.\fR
.PP
All in all this can create a complex name-space landscape.  For this package all name-spaces
in the run environment are shared and caution should be used to manage uniqueness.  I would
encourage starting simple and working out if you don't have a lot of logging experience.
This package is most related in concept to Log::Dispatch.
.SS "Acknowledgement"
.IX Subsection "Acknowledgement"
I was a strong user of Log::Log4perl and Smart::Comments prior to writing this package.
I borrowed heavily from them when writing this.
.SH "Differentiation"
.IX Header "Differentiation"
Why choose this Logger over one of the many other options?  Here are some implementation
decisions that I made that may or may not help that decision.  Many if not all of these
elements exist in other loggers.  I don't think they all exist together in any other
logger.
.SS "Buffer behavior"
.IX Subsection "Buffer behavior"
This package has a destination buffer in the switchboard (default off) for each report
name.  This allows for some messages to be discarded after they were collected based on
branches in the code.  A use case for this is when you are recursively parsing some logic
but only want to log the actions in the path that yielded results.  This is different than
a print buffer that always goes to the output but the send is just delayed.
.SS "A wrapper class for messages"
.IX Subsection "A wrapper class for messages"
Log::Shiras::Telephone is it's own class and can be used to customize how messages
are sent as well as allowing more flexibility in the format of sent messages.
.SS "Log::Shiras::Test2"
.IX Subsection "Log::Shiras::Test2"
A dedicated test module for testing logged messages that will capture messages at
the switchboard level rather than requiring the implementation of the final report
destination to test output.  Specifically, implementation of Telephone
 code can be tested without also implementing Report
 code.  This is done through a hook built into the Switchboard
\&. The test methods include several ways of checking for
output existence.  \fITesting report implementation should be done traditionally.\fR
.SS "Headers"
.IX Subsection "Headers"
The 'Report' class in this package for \s-1CSV\s0 files Log::Shiras::Report::CSVFile
only adds the header to a file when it is new.  If the file connection
is dropped and then reconnected the header will not be added again if the
file is not empty.  It will also manage (or at least warn) on header drift for the
first added row.
.SS "Custom formatting"
.IX Subsection "Custom formatting"
I wanted to be able to use method calls and code references when formatting
\&'Report' output.  The Log::Shiras::Report::MetaMessage Role for the 'Report'
class does just that.   This varies from Log::Log4perl's 'PatternLayout' as it
operates on an array ref or hashref rather than a string.  There may be a string
formatter in the future since I half wrote one but I talked myself out of it in
favor of an array ref manipulation scheme.
.SS "Moose"
.IX Subsection "Moose"
This package is Moose based.  You probably already have an opinion on Moose so this
may tip you one way or the other.
.SS "Multiple output paths"
.IX Subsection "Multiple output paths"
Allowing more than one destination using the same logging software in a script space
is helpful.  This means you can write your output to multiple sources without wiring
up the connection or finishing the destination definition until later.  See also
Log::Dispatch.
.SS "Source filtering"
.IX Subsection "Source filtering"
Excessive outputs for troubleshooting or outputs that are only used in rare
circumstances will overburden code.  Having a source filter will allow the code to
remain in source control (no retyping and deleting print statements) while still not
burdening run time operations generally (unless you need the outputs).  See also
Smart::Comments and Log::Log4perl::Resurrector
.SS "Custom urgency levels"
.IX Subsection "Custom urgency levels"
If you feel the need you can re-define the urgency level words
.SS "Re-routing print statements"
.IX Subsection "Re-routing print statements"
See Log::Shiras::TapPrint
.SS "Re-routing warn statements"
.IX Subsection "Re-routing warn statements"
See Log::Shiras::TapWarn
.SS "Message meta data"
.IX Subsection "Message meta data"
When messages are sent the switchboard bundles them with meta-data.  Mostly this
is basic stuff like where did I come from and when was I made.  For details
review \*(L"master_talk( \f(CW$args_ref\fR )\*(R" in Log::Shiras::Switchboard
.SH "Build/Install from Source"
.IX Header "Build/Install from Source"
.RS 4
\&\fB1.\fR Download a compressed file with the code
.Sp
\&\fB2.\fR Extract the code from the compressed file.
.Sp
.RS 4
If you are using tar this should work:
.Sp
.Vb 1
\&        tar \-zxvf Log\-Shiras\-v0.xx.tar.gz
.Ve
.RE
.RE
.RS 4
.Sp
\&\fB3.\fR Change (cd) into the extracted directory.
.Sp
\&\fB4.\fR Run the following
.Sp
(For Windows find what version of make was used to compile your perl)
.Sp
.Vb 1
\&        perl  \-V:make
.Ve
.Sp
(for Windows below substitute the correct make function (s/make/dmake/g)?)
.Sp
.Vb 1
\&        >perl Makefile.PL
\&
\&        >make
\&
\&        >make test
\&
\&        >make install # As sudo/root
\&
\&        >make clean
.Ve
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.IP "github Log::Shiras/issues <https://github.com/jandrew/Log-Shiras/issues>" 4
.IX Item "github Log::Shiras/issues <https://github.com/jandrew/Log-Shiras/issues>"
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Build a Database connection Report role
.Sp
\&\fB2.\fR Add TapFatal with a fatal gracefully feature
.Sp
\&\fB3.\fR Incorporate Tie::Scalar with logging? http://tinypig2.blogspot.com/2016/09/tattletale\-variables.html
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this package
.PP
This software is copyrighted (c) 2012, 2016 by Jed Lund
.SH "DEPENDANCIES"
.IX Header "DEPENDANCIES"
See individual modules
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Log::Log4perl" 4
.IX Item "Log::Log4perl"
.PD 0
.IP "Log::Dispatch" 4
.IX Item "Log::Dispatch"
.IP "Log::Report" 4
.IX Item "Log::Report"
.IP "Smart::Comments" 4
.IX Item "Smart::Comments"
.IP "Log::Log4perl::Resurrector" 4
.IX Item "Log::Log4perl::Resurrector"
