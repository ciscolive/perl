.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Admin::AdAuthService 3"
.TH Infoblox::Grid::Admin::AdAuthService 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Admin::AdAuthService \- Active Directory Authentication Service object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object allows you to specify an Active Directory (\s-1AD\s0) authentication method and the \s-1AD\s0 authentication servers that Infoblox uses to authenticate administrators.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 9
\& my $obj = Infoblox::Grid::Admin::AdAuthService\->new(
\&    ad_auth_server_list  => [$ad_server1, $ad_server2, ...],     #Required
\&    ad_domain            => $string,                             #Required
\&    name                 => $string,                             #Required
\&    nested_group_querying => "true" | "false",                   #Optional / Default is "false"
\&    comment              => $string,                             #Optional / Default is empty
\&    disabled             => "true" | "false",                    #Optional / Default is "false"
\&    timeout              => $num,                                #Optional / Default is 5
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to an object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& # Construct an object
\& my $ad_auth_server1 = Infoblox::Grid::Admin::AdAuthServer\->new(
\&     name       => "1.2.3.4",
\&     port       => 636,
\&     comment    => "domain controller in room 1"
\&     disabled   => "false",
\&     encryption => "SSL",
\&     mgmt_port  => "false",
\& );
\&
\& # Construct another object
\& my $ad_auth_server2 = Infoblox::Grid::Admin::AdAuthServer\->new(
\&     name       => "foo.com",
\&     port       => 389,
\&     comment    => "domain controller in room 2"
\&     disabled   => "false",
\&     encryption => "None",
\&     mgmt_port  => "false",
\& );
\&
\& # Construct an object
\& my $obj = Infoblox::Grid::Admin::AdAuthService\->new(
\&    ad_auth_server_list  => [$ad_auth_server1, $ad_auth_server2],
\&    ad_domain            => "authdhcptest.infoblox.com",
\&    comment              => "test comment",
\&    disabled             => "false",
\&    name                 => "Test AD Auth",
\&    timeout              => 333,
\&    nested_group_querying => "true",
\& );
\& # Submit for addition
\& my $response = $session\->add( $obj );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific object:
\&
\& name \- Required. AD authentication service name
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&   object => "Infoblox::Grid::Admin::AdAuthService",
\&     name => "Test AD Auth",
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Modify the comment
\& $obj\->comment("this is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $obj);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&   object => "Infoblox::Grid::Admin::AdAuthService",
\&     name => "Test AD Auth",
\& );
\& #Find the desired object from the retrieved list.
\& my $desired_obj = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_obj );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
Use the following methods to access the attributes of an Infoblox::Grid::Admin::AdAuthService object. Specify a parameter to set the attribute's value, or omit the parameter to get the attribute's value.
.SS "ad_auth_server_list( )"
.IX Subsection "ad_auth_server_list( )"
.RS 4
Use this method to set or retrieve the \s-1AD\s0 authentication server list.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains a list of Infoblox::Grid::Admin::AdAuthServer objects that describe the \s-1AD\s0 servers to which the appliance connects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ad_auth_server_list
\& my $val = $obj\->ad_auth_server_list();
\& #Modify ad_auth_server_list
\& $obj\->ad_auth_server_list([ $adauthserver1 ]);
.Ve
.RE
.RS 4
.RE
.SS "ad_domain( )"
.IX Subsection "ad_domain( )"
.RS 4
Use this method to set or retrieve the Active Directory Domain in which the user credentials are located.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid Active Directory Domain name
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ad_domain
\& my $val = $obj\->ad_domain();
\& #Modify ad_domain
\& $obj\->ad_domain("authdhcptest.infoblox.com");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve comments about the service.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Comments in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $val = $obj\->comment();
\& #Modify comment
\& $obj\->comment("head office");
.Ve
.RE
.RS 4
.RE
.SS "disabled( )"
.IX Subsection "disabled( )"
.RS 4
Use this method to disable the Active Directory authentication service.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to disable the service. Set the parameter to \*(L"false\*(R" to enable the service. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disabled
\& my $val = $obj\->disabled();
\& #Modify disabled
\& $obj\->disabled("true");
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of the \s-1AD\s0 authentication service.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The \s-1AD\s0 authentication service name.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $val = $obj\->name();
\& #Modify name
\& $obj\->name("AD service");
.Ve
.RE
.RS 4
.RE
.SS "nested_group_querying( )"
.IX Subsection "nested_group_querying( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether nested group querying is enabled or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParamter\fR" 4
.IX Item "Paramter"
Specify 'true' to enable nested group querying or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get nested_group_querying value 
\& my $val = $obj\->nested_group_querying();
\& #Modify nested_group_querying value
\& $obj\->nested_group_querying("true");
.Ve
.RE
.RS 4
.RE
.SS "timeout( )"
.IX Subsection "timeout( )"
.RS 4
Use this method to set or retrieve the timeout value, which is the number of seconds that the appliance waits for a response from the \s-1AD\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The number of seconds that the Infoblox appliance waits to connect to the server. The default value is 5.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get timeout
\& my $val = $obj\->timeout();
\& #Modify timeout
\& $obj\->timeout(22);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an Active Directory Authentication Service object, such as add, get, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to an \s-1AD\s0 Auth Service object insertion\fR
.PP
.Vb 2
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create an \s-1AD\s0 Auth Service object\fR
.PP
.Vb 9
\& # Construct an object
\& my $ad_auth_server1 = Infoblox::Grid::Admin::AdAuthServer\->new(
\&     name       => "1.2.3.4",
\&     port       => 636,
\&     comment    => "domain controller in room 1",
\&     disabled   => "false",
\&     encryption => "None",
\&     mgmt_port  => "false",
\& );
\&
\& # Construct another object
\& my $ad_auth_server2 = Infoblox::Grid::Admin::AdAuthServer\->new(
\&     name       => "foo.com",
\&     port       => 389,
\&     comment    => "domain controller in room 2",
\&     disabled   => "false",
\&     encryption => "SSL",
\&     mgmt_port  => "false",
\& );
\&
\& #Create an AD Auth Service object
\& my $ad_service = Infoblox::Grid::Admin::AdAuthService\->new(
\&     ad_auth_server_list => [ $ad_auth_server1, $ad_auth_server2 ],
\&     ad_domain           => "authdhcptest.infoblox.com",
\&     comment             => "test comment",
\&     disabled            => "false",
\&     name                => "Test AD Auth",
\&     timeout             => 333,
\& );
\& unless($ad_service) {
\&        die("Construct AD Auth Service object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "AD Auth Service object created successfully\en";
\&
\& #Add the AD Auth Service object into the Infoblox appliance through a session
\& $session\->add($ad_service)
\&     or die("Add AD Auth Service object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "AD Auth Service object added successfully\en";
.Ve
.PP
\&\fB#Get and modify an \s-1AD\s0 Auth Service\fR
.PP
.Vb 11
\& #Get an AD Auth Service through the session
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::Grid::Admin::AdAuthService",
\&     name => "Test AD Auth",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get AD Auth Service failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get AD Auth Service object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified AD Auth Service
\& $object\->comment ("modified comment");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify AD Auth Service failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "AD Auth Service object modified successfully \en";
.Ve
.PP
\&\fB#Remove an \s-1AD\s0 Auth Service\fR
.PP
.Vb 5
\& #Get an AD Auth Service through the session
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::Grid::Admin::AdAuthService",
\&     name       => "Test AD Auth"
\& );
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get AD Auth Service failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get AD Auth Service object found at least 1 matching entry\en";
\&
\& #submit the object for removal
\& $session\->remove($object)
\&     or die("Remove AD Auth Service failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "AD Auth Service object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::Admin::AdAuthServer, Infoblox::Session, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
