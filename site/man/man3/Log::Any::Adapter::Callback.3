.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Log::Any::Adapter::Callback 3"
.TH Log::Any::Adapter::Callback 3 "2020-01-14" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Any::Adapter::Callback \- (DEPRECATED) Send Log::Any logs to a subroutine
.SH "VERSION"
.IX Header "VERSION"
This document describes version 0.101 of Log::Any::Adapter::Callback (from Perl distribution Log-Any-Adapter-Callback), released on 2020\-01\-14.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& # say, let\*(Aqs POST each log message to an HTTP API server
\& use LWP::UserAgent;
\& my $ua = LWP::UserAgent\->new;
\&
\& use Log::Any::Adapter;
\& Log::Any::Adapter\->set(\*(AqCallback\*(Aq,
\&     min_level    => \*(Aqwarn\*(Aq,
\&     logging_cb   => sub {
\&         my ($method, $self, $format, @params) = @_;
\&         $ua\->post("https://localdomain/log", level=>$method, Content=>$format);
\&         sleep 1; # don\*(Aqt overload the server
\&     },
\&     detection_cb => sub { ... }, # optional, default is: sub { 1 }
\& );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1DEPRECATION NOTICE:\s0 Log::Any distribution since 1.708 comes with
Log::Any::Adapter::Capture which does the same thing. I'm deprecating this
adapter now.
.PP
This adapter lets you specify callback subroutine to be called by Log::Any's
logging methods (like \f(CW$log\fR\->\fBdebug()\fR, \f(CW$log\fR\->\fBerror()\fR, etc) and detection methods
(like \f(CW$log\fR\->\fBis_warning()\fR, \f(CW$log\fR\->\fBis_fatal()\fR, etc.).
.PP
This adapter is used for customized logging, and is mostly a convenient
construct to save a few lines of code. You could achieve the same effect by
creating a full Log::Any adapter class.
.PP
Your logging callback subroutine will be called with these arguments:
.PP
.Vb 1
\& ($method, $self, $format, @params)
.Ve
.PP
where \f(CW$method\fR is the name of method (like \*(L"debug\*(R") and ($self, \f(CW$format\fR, \f(CW@params\fR)
are given by Log::Any.
.SH "HOMEPAGE"
.IX Header "HOMEPAGE"
Please visit the project's homepage at <https://metacpan.org/release/Log\-Any\-Adapter\-Callback>.
.SH "SOURCE"
.IX Header "SOURCE"
Source repository is at <https://github.com/perlancar/perl\-Log\-Any\-Adapter\-Callback>.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website <https://rt.cpan.org/Public/Dist/Display.html?Name=Log\-Any\-Adapter\-Callback>
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Log::Any::Adapter::Capture
.PP
Log::Any
.SH "AUTHOR"
.IX Header "AUTHOR"
perlancar <perlancar@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020, 2014, 2013, 2012, 2011 by perlancar@cpan.org.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
