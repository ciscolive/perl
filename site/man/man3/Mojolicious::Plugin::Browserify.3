.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Browserify 3"
.TH Mojolicious::Plugin::Browserify 3 "2014-12-21" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Browserify \- An Mojolicious plugin for assetpack+browserify
.SH "VERSION"
.IX Header "VERSION"
0.06
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::Browserify is a plugin that will register
Mojolicious::Plugin::Browserify::Processor in
Mojolicious::Plugin::AssetPack.
.PP
browserify <http://browserify.org/> is a JavaScript preprocessor which will
allow you to use commonjs <http://nodejs.org/docs/latest/api/modules.html#modules_modules>'s
\&\f(CW\*(C`require()\*(C'\fR in your JavaScript files. Here is an example JavaScript file,
that use \f(CW\*(C`require()\*(C'\fR to pull in React <http://facebook.github.io/react>:
.PP
.Vb 1
\&  var React = require(\*(Aqreact\*(Aq);
\&
\&  module.exports = React.createClass({
\&    render: function() {
\&      return <div className="Bio"><p className="Bio\-text">{this.props.text}</p></div>;
\&    }
\&  });
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  use Mojolicious::Lite;
\&  plugin "Browserify" => {
\&    browserify_args => [\-g => "reactify"],
\&    environment => app\->mode, # default
\&    extensions => [qw( js jsx )], # default is "js"
\&  };
\&  app\->asset("app.js" => "/js/main.js");
\&
\&  get "/app" => "app_js_inlined";
\&  app\->start;
\&
\&  _\|_DATA_\|_
\&  @@ app_js_inlined.js.ep
\&  %= asset "app.js" => {inline => 1}
.Ve
.PP
Note! The \s-1SYNOPSIS\s0 require both \*(L"react\*(R" and \*(L"reactify\*(R" to be installed:
.PP
.Vb 3
\&  $ cd /home/projects/my\-project
\&  $ mojo browserify install react
\&  $ mojo browserify install reactify
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.IP "\(bu" 4
browserify
.Sp
This module require browserify <http://browserify.org/> to be installed. The
node based application can either be installed system wide or locally to
your project. To install it locally, you can use the
browserify Mojolicious command:
.Sp
.Vb 2
\&  # same as "npm install browserify"
\&  $ mojo browserify install
.Ve
.Sp
It is also possible to check installed versions using this command:
.Sp
.Vb 1
\&  $ mojo browserify version
.Ve
.IP "\(bu" 4
uglifyjs
.Sp
uglifyjs <https://github.com/mishoo/UglifyJS2> is a really good minifier.
The test \f(CW\*(C`react.t\*(C'\fR used to create a bundle that took 324K with
JavaScript::Minifier::XS. With \f(CW\*(C`uglifyjs\*(C'\fR the same code takes \f(CW\*(C`156K\*(C'\fR.
.Sp
What is the drawback? It takes a lot longer to run \f(CW\*(C`uglifyjs\*(C'\fR, but it's
worth it, since it will only be called in production mode. Get it with
this command:
.Sp
.Vb 1
\&  $ mojo browserify install uglify\-js
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "register"
.IX Subsection "register"
Used to register Mojolicious::Plugin::Browserify::Processor in the
\&\f(CW\*(C`Mojolicious\*(C'\fR application.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2014, Jan Henning Thorsen
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jan Henning Thorsen \- \f(CW\*(C`jhthorsen@cpan.org\*(C'\fR
