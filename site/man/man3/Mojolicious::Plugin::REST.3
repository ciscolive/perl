.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::REST 3"
.TH Mojolicious::Plugin::REST 3 "2014-07-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::REST \- Mojolicious Plugin for RESTful operations
.SH "VERSION"
.IX Header "VERSION"
version 0.006
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # In Mojolicious Application
\&    $self\->plugin( \*(AqREST\*(Aq => { prefix => \*(Aqapi\*(Aq, version => \*(Aqv1\*(Aq } );
\&
\&    $routes\->rest_routes( name => \*(AqAccount\*(Aq );
\&
\&    # Installs following routes:
\&
\&    # /api/v1/accounts             ....  GET     "Account::list_account()"    ^/api/v1/accounts(?:\e.([^/]+)$)?
\&    # /api/v1/accounts             ....  POST    "Account::create_account()"  ^/api/v1/accounts(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId  ....  DELETE  "Account::delete_account()"  ^/api/v1/accounts/([^\e/\e.]+)(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId  ....  GET     "Account::read_account()"    ^/api/v1/accounts/([^\e/\e.]+)(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId  ....  PUT     "Account::update_account()"  ^/api/v1/accounts/([^\e/\e.]+)(?:\e.([^/]+)$)?
\&
\&
\&    $routes\->rest_routes( name => \*(AqFeature\*(Aq, under => \*(AqAccount\*(Aq );
\&
\&    # Installs following routes:
\&
\&    # /api/v1/accounts/:accountId/features             B...  *       "Account::chained()"                 ^/api/v1/accounts/([^\e/\e.]+)/features
\&    #   +/                                             ....  GET     "Feature::list_account_feature()"    ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/features             B...  *       "Account::chained()"                 ^/api/v1/accounts/([^\e/\e.]+)/features
\&    #   +/                                             ....  POST    "Feature::create_account_feature()"  ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/features/:featureId  B...  *       "Account::chained()"                 ^/api/v1/accounts/([^\e/\e.]+)/features/([^\e/\e.]+)
\&    #   +/                                             ....  DELETE  "Feature::delete_account_feature()"  ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/features/:featureId  B...  *       "Account::chained()"                 ^/api/v1/accounts/([^\e/\e.]+)/features/([^\e/\e.]+)
\&    #   +/                                             ....  GET     "Feature::read_account_feature()"    ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/features/:featureId  B...  *       "Account::chained()"                 ^/api/v1/accounts/([^\e/\e.]+)/features/([^\e/\e.]+)
\&    #   +/                                             ....  PUT     "Feature::update_account_feature()"  ^(?:\e.([^/]+)$)?
\&
\&
\&    $routes\->rest_routes( name => \*(AqProduct\*(Aq, under => \*(AqAccount\*(Aq, types => [qw(ftp ssh)] );
\&
\&    # Installs following routes:
\&
\&    # /api/v1/accounts/:accountId/products      B...  *       "Account::chained()"                      ^/api/v1/accounts/([^\e/\e.]+)/products
\&    #   +/                                      ....  GET     "Product::list_account_product()"         ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/products      B...  *       "Account::chained()"                      ^/api/v1/accounts/([^\e/\e.]+)/products
\&    #   +/                                      ....  POST    "Product::create_account_product()"       ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/products/ftp  B...  *       "Account::chained()"                      ^/api/v1/accounts/([^\e/\e.]+)/products/ftp
\&    #   +/                                      ....  DELETE  "Product::Ftp::delete_account_product()"  ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/products/ssh  B...  *       "Account::chained()"                      ^/api/v1/accounts/([^\e/\e.]+)/products/ssh
\&    #   +/                                      ....  DELETE  "Product::Ssh::delete_account_product()"  ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/products/ftp  B...  *       "Account::chained()"                      ^/api/v1/accounts/([^\e/\e.]+)/products/ftp
\&    #   +/                                      ....  GET     "Product::Ftp::read_account_product()"    ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/products/ssh  B...  *       "Account::chained()"                      ^/api/v1/accounts/([^\e/\e.]+)/products/ssh
\&    #   +/                                      ....  GET     "Product::Ssh::read_account_product()"    ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/products/ftp  B...  *       "Account::chained()"                      ^/api/v1/accounts/([^\e/\e.]+)/products/ftp
\&    #   +/                                      ....  PUT     "Product::Ftp::update_account_product()"  ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/products/ssh  B...  *       "Account::chained()"                      ^/api/v1/accounts/([^\e/\e.]+)/products/ssh
\&    #   +/                                      ....  PUT     "Product::Ssh::update_account_product()"  ^(?:\e.([^/]+)$)?
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::REST adds various helpers for \s-1REST\s0 <http://en.wikipedia.org/wiki/Representational_state_transfer>ful
\&\s-1CRUD\s0 <http://en.wikipedia.org/wiki/Create,_read,_update_and_delete> operations via
\&\s-1HTTP\s0 <http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol> to your mojolicious application.
.PP
As much as possible, it tries to follow RESTful \s-1API\s0 Design <https://blog.apigee.com/detail/restful_api_design> principles from Apigee.
.PP
Used in conjuction with Mojolicious::Controller::REST, this module makes building RESTful application a breeze.
.PP
This module is inspired from Mojolicious::Plugin::RESTRoutes.
.SH "WARNING"
.IX Header "WARNING"
This module is still under development, and it's possible that things may change between releases without warning or deprecations.
.SH "MOJOLICIOUS HELPERS"
.IX Header "MOJOLICIOUS HELPERS"
.SS "rest_routes"
.IX Subsection "rest_routes"
A routes shortcut to easily add RESTful routes for a resource and associations.
.SH "MOJOLICIOUS HOOKS"
.IX Header "MOJOLICIOUS HOOKS"
This module installs an before_render application hook, which gurantees \s-1JSON\s0 output.
.PP
Refer Mojolicious::Controller::REST documentation for output format.
.PP
Hook installation can be disabled by passing hook => 0 in plugin options. For Example:
.PP
.Vb 1
\&    $self\->plugin( \*(AqREST\*(Aq, prefix => \*(Aqapi\*(Aq, version => \*(Aqv1\*(Aq, hook => 0 );
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
Following options can be used to control route creation:
.IP "methods" 4
.IX Item "methods"
This option can be used to control which methods are created for declared rest_route. Each character in the value of this option,
determined if corresponding route will be created or ommited. For Example:
.Sp
.Vb 1
\&    $routes\->rest_routes( name => \*(AqAccount\*(Aq, methods => \*(Aqcrudl\*(Aq );
.Ve
.Sp
This will install all the rest routes, value 'crudl' signifies:
.Sp
.Vb 5
\&    c \- create
\&    r \- read
\&    u \- update
\&    d \- delete
\&    l \- list.
.Ve
.Sp
Only methods whose first character is mentioned in the value for this option will be created. For Example:
.Sp
.Vb 1
\&    $routes\->rest_routes( name => \*(AqAccount\*(Aq, methods => \*(Aqcrd\*(Aq );
.Ve
.Sp
This will install only create, read and delete routes as below:
.Sp
.Vb 3
\&    # /api/v1/accounts             ....  POST    "Account::create_account()"  ^/api/v1/accounts(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId  ....  DELETE  "Account::delete_account()"  ^/api/v1/accounts/([^\e/\e.]+)(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId  ....  GET     "Account::read_account()"    ^/api/v1/accounts/([^\e/\e.]+)(?:\e.([^/]+)$)?
.Ve
.Sp
option value 'crd' signifies,
    c \- create,
    r \- read,
    d \- delete
.Sp
Old \fBreadonly\fR behaviour can thus be achieved using:
.Sp
.Vb 1
\&    $routes\->rest_routes( name => \*(AqAccount\*(Aq, methods => \*(Aqcl\*(Aq );
.Ve
.Sp
This will install only create and list routes as below:
.Sp
.Vb 2
\&    # /api/v1/accounts  ....  GET   "Account::list_account()"    ^/api/v1/accounts(?:\e.([^/]+)$)?
\&    # /api/v1/accounts  ....  POST  "Account::create_account()"  ^/api/v1/accounts(?:\e.([^/]+)$)?
.Ve
.IP "name" 4
.IX Item "name"
The name of the resource, e.g. 'User'. This name will be used to build the route url as well as the controller name.
.IP "controller" 4
.IX Item "controller"
By default, resource name will be converted to CamelCase controller name. You can change it by providing controller name.
.Sp
If customized, this options needs a full namespace of the controller class.
.IP "under" 4
.IX Item "under"
This option can be used for associations. If present, url's for named resource will be created under given under resource. The actions created,
will be bridged under 'method_chained' method of given under resouce. For Example:
.Sp
.Vb 1
\&    $routes\->rest_routes( name => \*(AqFeature\*(Aq, under => \*(AqAccount\*(Aq );
\&
\&    # will create following routes, where routes for feature are bridged under Account::chained()
\&
\&    # /api/v1/accounts/:accountId/features             B...  *       "Account::chained()"                 ^/api/v1/accounts/([^\e/\e.]+)/features
\&    #   +/                                             ....  GET     "Feature::list_account_feature()"    ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/features             B...  *       "Account::chained()"                 ^/api/v1/accounts/([^\e/\e.]+)/features
\&    #   +/                                             ....  POST    "Feature::create_account_feature()"  ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/features/:featureId  B...  *       "Account::chained()"                 ^/api/v1/accounts/([^\e/\e.]+)/features/([^\e/\e.]+)
\&    #   +/                                             ....  DELETE  "Feature::delete_account_feature()"  ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/features/:featureId  B...  *       "Account::chained()"                 ^/api/v1/accounts/([^\e/\e.]+)/features/([^\e/\e.]+)
\&    #   +/                                             ....  GET     "Feature::read_account_feature()"    ^(?:\e.([^/]+)$)?
\&    # /api/v1/accounts/:accountId/features/:featureId  B...  *       "Account::chained()"                 ^/api/v1/accounts/([^\e/\e.]+)/features/([^\e/\e.]+)
\&    #   +/                                             ....  PUT     "Feature::update_account_feature()"  ^(?:\e.([^/]+)$)?
.Ve
.Sp
Note that, The actual bridge code needs to return a true value or the dispatch chain will be broken. Please refer
Mojolicious Bridges Documentation <https://metacpan.org/pod/Mojolicious::Guides::Routing#Bridges> for more information on bridges in Mojolicious.
.IP "types" 4
.IX Item "types"
This option can be used to specify types of resources available in application.
.SH "PLUGIN OPTIONS"
.IX Header "PLUGIN OPTIONS"
.IP "method_chained" 4
.IX Item "method_chained"
If present, this value will be used as a method name for chained methods in route bridges.
.IP "prefix" 4
.IX Item "prefix"
If present, this value will be added as prefix to all routes created.
.IP "version" 4
.IX Item "version"
If present, this value will be added as prefix to all routes created but after prefix.
.IP "htt2crud" 4
.IX Item "htt2crud"
If present, given \s-1HTTP\s0 to \s-1CRUD\s0 mapping will be used to determine method names. Default mapping:
.Sp
.Vb 5
\&    {
\&        collection => {
\&            get  => \*(Aqlist\*(Aq,
\&            post => \*(Aqcreate\*(Aq,
\&        },
\&
\&        resource => {
\&            get    => \*(Aqread\*(Aq,
\&            put    => \*(Aqupdate\*(Aq,
\&            delete => \*(Aqdelete\*(Aq
\&        }
\&    }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Abhishek Shende <abhishekisnot@gmail.com>
.SH "CONTRIBUTOR"
.IX Header "CONTRIBUTOR"
Vincent \s-1HETRU\s0 <vincent.hetru@13pass.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Abhishek Shende.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
