.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::FilterRule::RelayAgent 3"
.TH Infoblox::DHCP::FilterRule::RelayAgent 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::FilterRule::RelayAgent \- DHCP RelayAgent Filter Rule object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A relay agent adds the circuit \s-1ID\s0 and Remote \s-1ID\s0 information to the client request and sends it to \s-1DHCP\s0 Server. Infoblox appliance uses Relay Agent Filter Rules to grant/deny the lease to a request that comes from those Relay Agents.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 4
\& my $ra_filter_rule = Infoblox::DHCP::FilterRule::RelayAgent\->new(
\&       filter_name   => $string,          #Required
\&       permission    => "grant" | "deny", #Required
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to apply to a \s-1DHCP\s0 RelayAgent Filter Rule object.
.SS "Infoblox::DHCP::Range\->filters( )"
.IX Subsection "Infoblox::DHCP::Range->filters( )"
.RS 4
Use this method to add a \s-1DHCP\s0 RelayAgent Filter Rule object to the \s-1DHCP\s0 Range on the Infoblox appliance. See Infoblox::DHCP::Range\->\fBfilters()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct a DHCP RelayAgent Filter Rule object
\& my $ra_filter_rule1 = Infoblox::DHCP::FilterRule::RelayAgent\->new(
\&       filter_name   => "filter1",
\&       permission    => "grant",
\& );
\&
\& #Add RelayAgent Filter Rule to the DHCP Range object.
\& my $response = $dhcp_range\->filters([$ra_filter_rule1]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to set and retrieve the attribute values of a \s-1DHCP\s0 RelayAgent Filter Rule object.
.SS "filter_name( )"
.IX Subsection "filter_name( )"
.RS 4
Use this method to set or retrieve the filter_name of a \s-1DHCP\s0 RelayAgent Filter Rule object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Name of the \s-1DHCP\s0 RelayAgent filter. Maximum length up to 1024 bytes is supported.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get filter_name
\& my $filter_name = $ra_filter_rule\->filter_name();
\& #Modify filter_name
\& $ra_filter_rule\->filter_name("filter2");
.Ve
.RE
.RS 4
.RE
.SS "permission( )"
.IX Subsection "permission( )"
.RS 4
Use this method to set or retrieve the permission of a \s-1DHCP\s0 RelayAgent Filter Rule object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the permission in string format. The permission can be either \*(L"grant\*(R" or \*(L"deny\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get permission
\& my $permission = $ra_filter_rule\->permission();
\& #Modify permission
\& $ra_filter_rule\->permission("deny");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as modify. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 RelayAgent Filter Rule object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the Network object
\& my $network = Infoblox::DHCP::Network\->new(
\&     network => "10.0.0.0/8",
\&     comment => "add network",
\& );
\& unless($network) {
\&        die("Construct Network object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network object created successfully\en";
\&
\& #Add the Network object into the Infoblox appliance through a session
\& $session\->add($network)
\&     or die("Add Network object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object added to Infoblox appliance successfully\en";
\&
\& #Construct a DHCP RelayAgent Filter object
\& my $ra_filter = Infoblox::DHCP::Filter::RelayAgent\->new(
\&        name            => "filter1",
\&        circuit_id_name => "circuit",
\&        remote_id_name  => "remote"
\& );
\&
\& unless ( $ra_filter ) {
\&        die("Construct RelayAgent Filter failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail() );
\& }
\& print "RelayAgent Filter object created successfully\en";
\&
\& #Add the RelayAgent Filter to the Infoblox appliance through a session
\& $session\->add($ra_filter)
\&     or die("Add RelayAgent Filter object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "RelayAgent Filter object added to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 RelayAgent Filter Rule object\fR
.PP
.Vb 5
\& #Construct a DHCP RelayAgent Filter Rule object
\& my $ra_filter_rule1 = Infoblox::DHCP::FilterRule::RelayAgent\->new(
\&       filter_name   => "filter1",
\&       permission    => "grant",
\& );
\&
\& unless ( $ra_filter_rule1 ) {
\&        die("Construct RelayAgent Filter Rule failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail() );
\& }
\& print "RelayAgent Filter Rule object created successfully\en";
\&
\& #Create the DHCP Range object with this RelayAgent Filter Rule.
\& my $dhcp_range = Infoblox::DHCP::Range\->new(
\&         end_addr   => "10.0.0.10",
\&         network    => "10.0.0.0/8",
\&         start_addr => "10.0.0.1",
\&         filters    => [ $ra_filter_rule1 ],
\& );
\& unless($dhcp_range) {
\&        die("Construct DHCP Range object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Range object created successfully\en";
\&
\& #Add the DHCP Range object into the Infoblox appliance through a session
\& $session\->add($dhcp_range)
\&     or die("Add DHCP Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range object added to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Get and modify a RelayAgent Filter Rule object\fR
.PP
.Vb 5
\& #Get RelayAgent Filter Rule object from the DHCP Range object through session
\& my @retrieved_objs = $session\->get(
\&     object      => "Infoblox::DHCP::Range",
\&     start_addr  => "10.0.0.1",
\& );
\&
\& my $object = $retrieved_objs[0];
\& my $filter = $object\->filters();
\&
\& my @filters = @{$filter};
\&
\& my $ra_filterrule = $filters[0];
\&
\& #Modify one of the attributes of the obtained RelayAgent Filter Rule object
\& $ra_filterrule\->permission("deny");
\& $object\->filters([$ra_filterrule]);
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify RelayAgent Filter Rule object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "RelayAgent Filter Rule object modified and added to the DHCP Range object successfully \en";
.Ve
.PP
\&\fB#Remove a RelayAgent Filter Rule object\fR
.PP
.Vb 1
\& $object\->filters([]);
\&
\& my $response = $session\->modify($object);
\& unless($response) {
\&        die("Remove RelayAgent Filter Rule failed: ",
\&                session\->status_code() . ":" . session\->status_detail() );
\& }
\& print "RelayAgent Filter Rule object removed successfully \en";
\&
\& #Submit the network object for removal
\& $session\->remove($network)
\&     or die("Remove Network object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object removed successfully \en";
\&
\& #Submit the relay agent filter object for removal
\& $session\->remove($ra_filter)
\&     or die("Remove RelayAgent Filter object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "RelayAgent Filter object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DHCP::MAC, Infoblox::DHCP::FilterRule::RelayAgent, Infoblox::DHCP::Network, Infoblox::DHCP::Range, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR,Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
