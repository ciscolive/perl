.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::Prereqs 3"
.TH Dist::Zilla::Prereqs 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::Prereqs \- the prerequisites of a Dist::Zilla distribution
.SH "VERSION"
.IX Header "VERSION"
version 6.017
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dist::Zilla::Prereqs is a subcomponent of Dist::Zilla.  The \f(CW\*(C`prereqs\*(C'\fR
attribute on your Dist::Zilla object is a Dist::Zilla::Prereqs object, and is
responsible for keeping track of the distribution's prerequisites.
.PP
In fact, a Dist::Zilla::Prereqs object is just a thin layer over a
CPAN::Meta::Prereqs object, stored in the \f(CW\*(C`cpan_meta_prereqs\*(C'\fR attribute.
.PP
Almost everything this object does is proxied to the CPAN::Meta::Prereqs
object, so you should really read how \fIthat\fR works.
.PP
Dist::Zilla::Prereqs proxies the following methods to the CPAN::Meta::Prereqs
object:
.IP "\(bu" 4
finalize
.IP "\(bu" 4
is_finalized
.IP "\(bu" 4
requirements_for
.IP "\(bu" 4
as_string_hash
.SH "METHODS"
.IX Header "METHODS"
.SS "register_prereqs"
.IX Subsection "register_prereqs"
.Vb 1
\&  $prereqs\->register_prereqs(%prereqs);
\&
\&  $prereqs\->register_prereqs(\e%arg, %prereqs);
.Ve
.PP
This method adds new minimums to the prereqs object.  If a hashref is the first
arg, it may have entries for \f(CW\*(C`phase\*(C'\fR and \f(CW\*(C`type\*(C'\fR to indicate what kind of
prereqs are being registered.  (For more information on phase and type, see
CPAN::Meta::Spec.)  For example, you might say:
.PP
.Vb 5
\&  $prereqs\->register_prereqs(
\&    { phase => \*(Aqtest\*(Aq, type => \*(Aqrecommends\*(Aq },
\&    \*(AqTest::Foo\*(Aq => \*(Aq1.23\*(Aq,
\&    \*(AqXML::YZZY\*(Aq => \*(Aq2.01\*(Aq,
\&  );
.Ve
.PP
If not given, phase and type default to runtime and requires, respectively.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 üòè <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
