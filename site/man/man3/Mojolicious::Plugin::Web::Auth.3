.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Web::Auth 3"
.TH Mojolicious::Plugin::Web::Auth 3 "2019-04-21" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Web::Auth \- Authentication plugin for Mojolicious
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  # Mojolicious
\&  $self\->plugin(\*(AqWeb::Auth\*(Aq,
\&      module      => \*(AqTwitter\*(Aq,
\&      key         => \*(AqTwitter consumer key\*(Aq,
\&      secret      => \*(AqTwitter consumer secret\*(Aq,
\&      on_finished => sub {
\&          my ( $c, $access_token, $access_secret ) = @_;
\&          ...
\&      },
\&  );
\&
\&  # Mojolicious::Lite
\&  plugin \*(AqWeb::Auth\*(Aq,
\&      module      => \*(AqTwitter\*(Aq,
\&      key         => \*(AqTwitter consumer key\*(Aq,
\&      secret      => \*(AqTwitter consumer secret\*(Aq,
\&      on_finished => sub {
\&          my ( $c, $access_token, $access_secret ) = @_;
\&          ...
\&      };
\&
\&
\&  ### default authentication endpoint: /auth/{moniker}/authenticate
\&  # e.g.)
\&  # /auth/twitter/authenticate
\&  # /auth/facebook/authenticate
\&  ### default callback endpoint: /auth/{moniker}/callback
\&  # e.g.)
\&  # /auth/twitter/callback
\&  # /auth/facebook/callback
\&
\&  # If, for example, your Instagram app needs more permissions than the
\&  # defaults allow:
\&
\&  # Mojolicious
\&  $self\->plugin(\*(AqWeb::Auth\*(Aq,
\&      module      => \*(AqInstagram\*(Aq,
\&      key         => \*(AqInstagram consumer key\*(Aq,
\&      secret      => \*(AqInstagram consumer secret\*(Aq,
\&      on_finished => sub {
\&          my ( $c, $access_token, $access_secret ) = @_;
\&          ...
\&      },
\&      authorize_url => \*(Aqhttps://api.instagram.com/oauth/authorize?scope=public_content\*(Aq,
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::Web::Auth is an authentication plugin for Mojolicious.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::Web::Auth inherits all methods from Mojolicious::Plugin.
.SH "OPTIONS"
.IX Header "OPTIONS"
Mojolicious::Plugin::Web::Auth supports the following options.
.ie n .SS """module"""
.el .SS "\f(CWmodule\fP"
.IX Subsection "module"
This is a module name for authentication plugins.
.PP
Dropbox, Facebook, Github, Google, Instagram, Twitter.
.ie n .SS """key"""
.el .SS "\f(CWkey\fP"
.IX Subsection "key"
Consumer key.
.ie n .SS """secret"""
.el .SS "\f(CWsecret\fP"
.IX Subsection "secret"
Consumer secret.
.ie n .SS """scope"""
.el .SS "\f(CWscope\fP"
.IX Subsection "scope"
Optional: OAuth 2.0 only.
.PP
.Vb 10
\&  # Facebook
\&  plugin \*(AqWeb::Auth\*(Aq,
\&      module      => \*(AqFacebook\*(Aq,
\&      key         => \*(AqFacebook App ID\*(Aq,
\&      secret      => \*(AqFacebook App Secret\*(Aq,
\&      scope       => \*(Aqemail,user_birthday\*(Aq,
\&      on_finished => sub {
\&          my ( $c, $access_token, $user_info ) = @_;
\&          ...
\&      };
.Ve
.ie n .SS """validate_state"""
.el .SS "\f(CWvalidate_state\fP"
.IX Subsection "validate_state"
Optional: OAuth 2.0 only. Default value is 1, see <http://tools.ietf.org/html/rfc6819#section\-5.3.5>.
.ie n .SS """on_finished"""
.el .SS "\f(CWon_finished\fP"
.IX Subsection "on_finished"
.Vb 9
\&  # Mojolicious::Lite
\&  plugin \*(AqWeb::Auth\*(Aq,
\&      module      => \*(AqTwitter\*(Aq,
\&      key         => \*(AqTwitter consumer key\*(Aq,
\&      secret      => \*(AqTwitter consumer secret\*(Aq,
\&      on_finished => sub {
\&          my ( $c, $access_token, $access_secret, $user_ino ) = @_;
\&          ...
\&      };
.Ve
.PP
This callback is run when authentication was finished.
.PP
\fIarguments\fR
.IX Subsection "arguments"
.IP "\(bu" 4
OAuth 1.0(A)
.Sp
Dropbox, Twitter, etc.
.RS 4
.IP "Mojolicious::Controller" 4
.IX Item "Mojolicious::Controller"
.PD 0
.IP "access_token" 4
.IX Item "access_token"
.IP "access_secret" 4
.IX Item "access_secret"
.IP "user_info ( enabled 'user_info' )" 4
.IX Item "user_info ( enabled 'user_info' )"
.RE
.RS 4
.RE
.IP "\(bu" 4
.PD
OAuth 2.0
.Sp
Facebook, Github, Google, Instagram, etc.
.RS 4
.IP "Mojolicious::Controller" 4
.IX Item "Mojolicious::Controller"
.PD 0
.IP "access_token" 4
.IX Item "access_token"
.IP "user_info ( enabled 'user_info' )" 4
.IX Item "user_info ( enabled 'user_info' )"
.IP "rest of the response data (\s-1HASHREF\s0)" 4
.IX Item "rest of the response data (HASHREF)"
.PD
id_token, expires, refresh_token, etc.
.RE
.RS 4
.RE
.ie n .SS """on_error"""
.el .SS "\f(CWon_error\fP"
.IX Subsection "on_error"
This is a callback is run on authentication errors.
.SH "AUTHOR"
.IX Header "AUTHOR"
hayajo <hayajo@cpan.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Many thanks to the contributors for their work.
.IP "\s-1FAYLAND\s0" 4
.IX Item "FAYLAND"
.PD 0
.IP "uzulla@github" 4
.IX Item "uzulla@github"
.IP "sachinjsk@github" 4
.IX Item "sachinjsk@github"
.IP "mala@github" 4
.IX Item "mala@github"
.IP "shohey1226@github" 4
.IX Item "shohey1226@github"
.IP "levonet@github" 4
.IX Item "levonet@github"
.IP "oalders@github" 4
.IX Item "oalders@github"
.IP "ccakes@github" 4
.IX Item "ccakes@github"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2013\- hayajo
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Amon2::Auth
