.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::IPValidationInfo 3"
.TH Infoblox::Grid::IPValidationInfo 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::IPValidationInfo \- IP Validation information
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When submitting add or modify requests that contain IPs returned by the next_available_ip functionality, this object can be passed to ensure that these IPs are unique and that concurrent additions and modifications containing the same IPs will fail.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 4
\& my $member = Infoblox::Grid::IPValidationInfo\->new(
\&     address       => $ipaddr,        #Required
\&     parent        => $obj,           #Required
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available for an \s-1IP\s0 validation info object.
.SS "Infoblox::Session\->add( ) and Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->add( ) and Infoblox::Session->modify( )"
.RS 4
The object can be passed in the ip_validation option. For usage information, see the sample code section.
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of an \s-1IP\s0 validation info object.
.SS "address( )"
.IX Subsection "address( )"
.RS 4
Use this method to set or retrieve the address.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an IPv4 or IPv6 address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get address 
\& my $address = $vip\->address();
\& #Modify address 
\& $vip\->address(\*(Aq10.0.0.1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "parent( )"
.IX Subsection "parent( )"
.RS 4
Use this method to set the parent object for the validation. This is the object from which the next available \s-1IP\s0 was retrieved, and it must be an object retrieved from the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::DHCP::Range, Infoblox::DHCP::IPv6Range, Infoblox::DHCP::Network, Infoblox::DHCP::IPv6Network
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get parent
\& my $net = $member\->vip();
\& #Modify vip
\& $member\->vip($net2);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to the insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $host_ip   = "192.168.1.2";
\& my $host_name = "infoblox.localdomain";
\&
\& my $session = Infoblox::Session\->new(
\&                master   => $host_ip,      #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS\s0 Zone object\fR
.PP
.Vb 1
\& my $default_view = Infoblox::DNS::View\->new(name => "default");
\&
\& my $memberns1 = Infoblox::DNS::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => $host_ip,
\&     lead     => "false",
\&     stealth  => "false"
\& );
\&
\& #To add zone test.com in the default view
\& my $firstzone = Infoblox::DNS::Zone\->new(
\&     name        => "test.com",
\&     views       => [$default_view],
\&     email       => "admin\e@infoblox.com",
\&     comment     => "add a zone test.com",
\&     primary     => $memberns1,
\&     );
\&
\& unless($firstzone){
\&        die("Construct test.com zone object failed: ",
\&                Infoblox::status_code(). ":" .Infoblox::status_detail());
\&        }
\& print "test.com zone object created successfully.\en";
\&
\& $session\->add($firstzone)
\&     or die("Add zone for test.com failed: ",
\&                $session\->status_code(). ":" .$session\->status_detail());
\& 
\& print"Zone test.com added successfully.\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 Network\fR
.PP
.Vb 4
\& my $memberdhcp = Infoblox::DHCP::Member\->new(
\&             name     => "infoblox.localdomain",
\&             ipv4addr => $host_ip,
\&            );  
\&
\& my  $network = Infoblox::DHCP::Network\->new(
\&             network => "10.0.0.0/8",
\&             comment => "add network",
\&             members => [$memberdhcp],
\&              );  
\& unless($network){
\&        die("Construct test.com zone object failed: ",
\&                Infoblox::status_code(). ":" .Infoblox::status_detail());
\&        }
\& print "Network created successfully\en";
\&
\& my $response = $session\->add($network)
\&        or die("Add Network failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& 
\& print "Network added successfully\en";
.Ve
.PP
\&\fB#Fetch a next available \s-1IP\s0 from the network\fR
.PP
.Vb 1
\& my $nip = $network\->next_available_ip();
.Ve
.PP
\&\fB#Create a validation object for this \s-1IP\s0\fR
.PP
.Vb 4
\& my $vip = Infoblox::Grid::IPValidationInfo\->new(
\&    parent  => $network,
\&    address => $nip,
\& );
.Ve
.PP
\&\fB#Add a \s-1DNS A\s0 record with this \s-1IP\s0 and validation\fR
.PP
.Vb 11
\& #Construct a DNS A object
\& my $bind_a = Infoblox::DNS::Record::A\->new(
\&     name     => "bind_a.test.com",
\&     comment  => " this is a demo bind_a record ",
\&     ipv4addr => $nip,
\& );
\& unless ($bind_a) {
\&    die("Construct DNS record A failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DNS A object created successfully\en";
\&
\& #Add the DNS A record object to Infoblox Appliance through a session
\& $session\->add($bind_a, ip_validation => [$vip])
\&     or die("Add record A failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS A object added to server successfully\en";
.Ve
.PP
\&\fB#Cleanup\fR
.PP
.Vb 3
\& $session\->remove($bind_a)
\&     or die("Remove record A failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&
\& $session\->remove($network)
\&     or die("Remove network failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&
\& $session\->remove($firstzone)
\&     or die("Remove zone failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
