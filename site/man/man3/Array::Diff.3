.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Array::Diff 3"
.TH Array::Diff 3 "2019-05-10" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Array::Diff \- Find the differences between two arrays
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    my @old = ( \*(Aqa\*(Aq, \*(Aqb\*(Aq, \*(Aqc\*(Aq );
\&    my @new = ( \*(Aqb\*(Aq, \*(Aqc\*(Aq, \*(Aqd\*(Aq );
\&
\&    my $diff = Array::Diff\->diff( \e@old, \e@new );
\&
\&    $diff\->count   # 2
\&    $diff\->added   # [ \*(Aqd\*(Aq ];
\&    $diff\->deleted # [ \*(Aqa\*(Aq ];
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module compares two \fBpre-sorted\fR arrays
and returns the added or deleted elements in two separate arrays.
It's a simple wrapper around Algorithm::Diff.
.PP
\&\fBNote\fR: the arrays must be sorted before you call \f(CW\*(C`diff\*(C'\fR.
.PP
And if you need more complex array tools, check Array::Compare.
.SH "METHODS"
.IX Header "METHODS"
.IP "new ()" 4
.IX Item "new ()"
Create a new \f(CW\*(C`Array::Diff\*(C'\fR object.
.IP "diff ( \s-1OLD, NEW\s0 )" 4
.IX Item "diff ( OLD, NEW )"
Compute the differences between two arrays.  The results are stored
in the \f(CW\*(C`added\*(C'\fR, \f(CW\*(C`deleted\*(C'\fR, and \f(CW\*(C`count\*(C'\fR properties that may be
examined using the corresponding methods.
.Sp
This method may be invoked as an object method, in which case it will
recalculate the differences and repopulate the \f(CW\*(C`count\*(C'\fR, \f(CW\*(C`added\*(C'\fR, and
\&\f(CW\*(C`removed\*(C'\fR properties, or as a static method, in which case it will
return a newly-created \f(CW\*(C`Array::Diff\*(C'\fR object with the properties
set appropriately.
.IP "added ( [\s-1VALUES\s0 ] )" 4
.IX Item "added ( [VALUES ] )"
Get or set the elements present in the \f(CW\*(C`NEW\*(C'\fR array and absent in
the \f(CW\*(C`OLD\*(C'\fR one at the comparison performed by the last \f(CW\*(C`diff()\*(C'\fR
invocation.
.IP "deleted ( [\s-1VALUES\s0] )" 4
.IX Item "deleted ( [VALUES] )"
Get or set the elements present in the \f(CW\*(C`OLD\*(C'\fR array and absent in
the \f(CW\*(C`NEW\*(C'\fR one at the comparison performed by the last \f(CW\*(C`diff()\*(C'\fR
invocation.
.IP "count ( [\s-1VALUE\s0] )" 4
.IX Item "count ( [VALUE] )"
Get or set the total number of added or deleted elements at
the comparison performed by the last \f(CW\*(C`diff()\*(C'\fR invocation.
This count should be equal to the sum of the number of elements in
the \f(CW\*(C`added\*(C'\fR and \f(CW\*(C`deleted\*(C'\fR properties.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Array::Compare \- performs the same function as this module,
but has options for controlling how it works.
.PP
List::Compare \- similar functionality, but again with more options.
.PP
Algorithm::Diff \- the underlying implementation of the diff algorithm.
If you've got Algorithm::Diff::XS installed, that will be used.
.PP
YAML::Diff \- find difference between two \s-1YAML\s0 documents.
.PP
HTML::Differences \- find difference between two \s-1HTML\s0 documents.
This uses a more sane approach than HTML::Diff.
.PP
XML::Diff \- find difference between two \s-1XML\s0 documents.
.PP
Hash::Diff \- find the differences between two Perl hashes.
.PP
Data::Diff \- find difference between two arbitrary data structures.
.PP
Text::Diff \- can find difference between two inputs, which can be
data structures or file names.
.SH "AUTHOR"
.IX Header "AUTHOR"
Daisuke Murase <typester@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2009 by Daisuke Murase.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
