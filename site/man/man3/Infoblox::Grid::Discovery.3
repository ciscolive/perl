.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Discovery 3"
.TH Infoblox::Grid::Discovery 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Discovery \- Grid discovery functions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The object provides access to the Grid discovery and Network Insight functions.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 3
\& my $discovery = Infoblox::Grid::Discovery\->new(
\&    \*(Aqsession\*(Aq => $session,      # Required
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The object does not support any session methods.
.SH "METHODS"
.IX Header "METHODS"
.SS "clear_network_port_assignment( )"
.IX Subsection "clear_network_port_assignment( )"
.RS 4
Use this method to clear network provision information on given router or switch-router device interfaces for given networks.
.Sp
Note that this function is always executed as part of scheduled task. Also the function goes through approval process if it is applicable.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
network_deprovision_info    \- Required. An array reference that contains Infoblox::Grid::Discovery::NetworkDeprovisionInfo objects.
scheduled_at                \- Required. Scheduled time in \s-1ISO 8601\s0 extended format for date and time (e.g. 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z) or 'now' which will set scheduled date and time to the current date and time.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when a scheduled task has been created successfully, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $res = $discovery\->clear_network_port_assignment(\*(Aqscheduled_at\*(Aq => $scheduled_time, \*(Aqnetwork_deprovision_info\*(Aq => [$deprovision_info1, $deprovision_info2]);
.Ve
.RE
.RS 4
.RE
.SS "control_ip_address( )"
.IX Subsection "control_ip_address( )"
.RS 4
Use this method to control multiple \s-1IP\s0 addresses.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
addresses      \- Required. An array reference that contains \s-1IP\s0 addresses.
network_view   \- Optional. The network view name.
exclude        \- Optional. The flag for exclude. Valid value is 'true' or 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $res = $discovery\->control_ip_address(\*(Aqaddresses\*(Aq => [\*(Aq10.0.0.1\*(Aq, \*(Aq10.0.0.2\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "control_switch_port( )"
.IX Subsection "control_switch_port( )"
.RS 4
Use this method to configure the interface of a given switch device.
.Sp
Note that this function is always executed as part of scheduled task. Also the function goes through approval process if it is applicable. This function is used for both \s-1IPAM IP\s0 address object port configuration and device interface port control.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
port_config     \- Required. An array reference that contains Infoblox::Grid::Discovery::Port::Control objects.
scheduled_at    \- Required. Scheduled time in \s-1ISO 8601\s0 extended format for date and time (e.g. 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z) or 'now' which will set scheduled date and time to the current date and time.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns \*(L"true\*(R" when a scheduled task has been created successfully, and returns \*(L"false\*(R" when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $res = $discovery\->control_switch_port(\*(Aqscheduled_at\*(Aq => $scheduled_time, \*(Aqport_configs\*(Aq => [$config1, $config2]);
.Ve
.RE
.RS 4
.RE
.SS "diagnostics( )"
.IX Subsection "diagnostics( )"
.RS 4
Use this method to execute discovery diagnostics for the \s-1IP\s0 address.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
address           \- Required. The \s-1IP\s0 address.
community_string  \- Optional. The communitry string.
force_test        \- Optional. The flag for force test. Valid value is 'true' or 'false'.
discovery_member  \- Optional. The discovery member name.
network_view      \- Optional. The network view name.
debug_snmp        \- Optional. The flag for enable/disable \s-1SNMP\s0 debug (enabled by default). Valid value is 'true' or 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a discovery diagnostic status \s-1ID\s0 in string format when the operations succeeds, and returns false when teh operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $id = $discovery\->diagnostics(\*(Aqaddress\*(Aq => \*(Aq10.0.0.1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "diagnostics_status( )"
.IX Subsection "diagnostics_status( )"
.RS 4
Use this method to retrieve the discovery diagnostic status.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
id     \- Required. The discovery diagnostic status \s-1ID.\s0
start  \- Optional. The start position of the text.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns an Infoblox::Grid::Discovery::DiagnosticsStatus object when the operation succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $object = $discovery\->diagnostics_status(\*(Aqid\*(Aq => $id);
.Ve
.RE
.RS 4
.RE
.SS "discovery_data_conversion( )"
.IX Subsection "discovery_data_conversion( )"
.RS 4
Use this method to convert discovery data to specified objects.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
type \- Required. The object type of the converted object. Valid value is one of the following object types: A_RECORD, \s-1AAAA_RECORD, PTR_RECORD, HOST_RECORD, FIXED_ADDRESS, IPV6_FIXED_ADDRESS.\s0
addresses \- Required. An array reference that contains Infoblox::IPAM::Address objects retrieved from the appliance.
attributes \- Optional. An Infoblox::Grid::Discovery::ConversionAttributes object.
extensible_attributes \- Optional. The list of extensible attributes associated with the created objects. Valid value is a hash reference containing the names of extensible attributes and their associated values (Infoblox::Grid::Extattr objects).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns an array reference that contains Infoblox::Grid::Discovery::DiscoveryDataConversionResult objects if the operation succeeds.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& my $address = $discovery\->get(\*(Aqobject\*(Aq => \*(AqInfoblox::IPAM::Address\*(Aq, \*(Aqip_address\*(Aq => \*(Aq10.0.0.31\*(Aq);
\& my $zone = $discovery\->get(\*(Aqobject\*(Aq => \*(AqInfoblox::DNS::Zone\*(Aq, \*(Aqname\*(Aq => \*(Aqpapi.com\*(Aq);
\& my $attrs = Infoblox::Grid::Discovery::ConversionAttributes\->new(
\&     \*(Aqconfigure_for_dns\*(Aq => \*(Aqtrue\*(Aq,
\&     \*(Aqconfigure_for_dhcp\*(Aq => \*(Aqtrue\*(Aq,
\&     \*(Aqcomment\*(Aq => \*(Aqconvert\*(Aq,
\&     \*(Aqdisabled\*(Aq => \*(Aqfalse\*(Aq,
\&     \*(Aqzone\*(Aq => $zone);
\& my $results = $discovery\->discovery_data_conversion(
\&     \*(Aqtype\*(Aq => \*(AqHOST_RECORD\*(Aq,
\&     \*(Aqattributes\*(Aq => $attrs,
\&     \*(Aqaddresses\*(Aq => [$address],
\&     \*(Aqextensible_attributes\*(Aq => {\*(AqSite\*(Aq => Infoblox::Grid::Extattr\->new(\*(Aqvalue\*(Aq => \*(Aqtest.com\*(Aq)});
.Ve
.RE
.RS 4
.RE
.SS "get_device_support_info( )"
.IX Subsection "get_device_support_info( )"
.RS 4
Use this method to retrieve such information about device as device support statuses and device support info.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
device \- Required. An Infoblox::Grid::Discovery::Device object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns an Infoblox::Grid::Discovery::DeviceSupportInfoResponse object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $res = $discovery\->get_device_support_info(\*(Aqdevice\*(Aq => $device);
.Ve
.RE
.RS 4
.RE
.SS "get_job_devices( )"
.IX Subsection "get_job_devices( )"
.RS 4
Use this method to get the list of devices on wich the network insight job is processing.
.Sp
This function should be called only if the task is related to network insight port control job.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
task            \- Required. An Infoblox::Grid::ScheduledTask object or a task \s-1ID.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns an array reference that contains Infoblox::Grid::Discovery::Device object if operation succeeds, and returns \*(L"false\*(R" when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get value by task_id
\& my $devices = $discovery\->get_job_devices(\*(Aqtask\*(Aq => $task_id);
\&
\& # Get value by scheduled_task object
\& my $devices = $discovery\->get_job_devices(\*(Aqtask\*(Aq => $scheduled_task);
.Ve
.RE
.RS 4
.RE
.SS "get_job_process_details( )"
.IX Subsection "get_job_process_details( )"
.RS 4
Use this method to get a network insight job processing logs related to a given task.
.Sp
This function should be called only if the task is related to network insight port control job.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
device          \- Required. An Infoblox::Grid::Discovery::Device object.
task            \- Required. An Infoblox::Grid::ScheduledTask object or a task \s-1ID.\s0
start_line      \- Optional. Valid value is unsigned integer representing starting line of a log stream. Default value is 0.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a Infoblox::Grid::Discovery::JobProcessDetails object if operation succeeds, and returns \*(L"false\*(R" if operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get job prcess details
\& my $job_process_details = $discovery\->get_job_process_details(\*(Aqdevice\*(Aq => $device, \*(Aqtask\*(Aq => $scheduled_task, \*(Aqstart_line\*(Aq => 10);
.Ve
.RE
.RS 4
.RE
.SS "provision_network_dhcp_relay( )"
.IX Subsection "provision_network_dhcp_relay( )"
.RS 4
Use this method to provision only \s-1DHCP\s0 relay information for given devices.
.Sp
Note that this function is always executed as part of scheduled task. Also the function goes through approval process if it is applicable.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
interfaces          \- Required. An array reference that contains Infoblox::Grid::Discovery::DeviceInterface objects.
network             \- Required. The \s-1IP\s0 address and netmask of a network in \s-1CIDR\s0 format.
scheduled_at        \- Required. Scheduled time in \s-1ISO 8601\s0 extended format for date and time (e.g. 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z) or 'now' which will set scheduled date and time to the current date and time.
enable_dhcp_relay   \- Optional. Enables \s-1DHCP\s0 relay. Valid value is 'true' and 'false'. Default value is 'false'.
network_view        \- Optional. The network view name.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns 'true' when a scheduled task has been created successfully, and returns 'false' when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $res = $discovery\->provision_network_dhcp_relay(\*(Aqscheduled_at\*(Aq => \*(Aqnow\*(Aq, \*(Aqinterfaces\*(Aq => \e@interfaces, \*(Aqnetwork\*(Aq => $network);
.Ve
.RE
.RS 4
.RE
.SS "provision_network_port( )"
.IX Subsection "provision_network_port( )"
.RS 4
Use this method to provision the network with interface and assign default router ip address on a device.
.Sp
Note that this function is always executed as part of scheduled task. Also the function goes through approval process if it is applicable.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
device              \- Optional. An Infoblox::Grid::Discovery::Device object. At least one of device or interface is required.
interface           \- Optional. An Infoblox::Grid::Discovery::DeviceInterface object. At least one of device or interface is required.
network             \- Required. The \s-1IP\s0 address and netmask of a network in \s-1CIDR\s0 format to operate on.
router_ip           \- Required. Router \s-1IP\s0 address to operate on.
scheduled_at        \- Required. Scheduled time in \s-1ISO 8601\s0 extended format for date and time (e.g. 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z) or 'now' which will set scheduled date and time to the current date and time.
enable_dhcp_relay   \- Optional. Enables \s-1DHCP\s0 relay. Valid value is 'true' and 'false'. Default value is 'false'.
network_view        \- Optional. An Infoblox::DHCP::View object.
vlan_info           \- Optional. An Infoblox::Grid::Discovery::VLANInfo object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns 'true' when a scheduled task has been created successfully, and returns 'false' when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $res = $discovery\->provision_network_port(\*(Aqscheduled_at\*(Aq => \*(Aq2008\-10\-21T10:56:00Z\*(Aq, \*(Aqdevice\*(Aq => $device, \*(Aqnetwork\*(Aq => \*(Aq10.0.0.0/8\*(Aq, router_ip => \*(Aq10.0.0.1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "start_discovery( )"
.IX Subsection "start_discovery( )"
.RS 4
Use this method to start discovery on specified objects.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
objects \- Required. An array reference that contains Infoblox::IPAM::Address, Infoblox::DHCP::Network, Infoblox::DHCP::IPv6Network, Infoblox::DHCP::NetworkContainer and Infoblox::DHCP::IPv6NetworkContainer objects that have been retrieved from the appliance.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& my @networks = $discovery\->get(\*(Aqobject\*(Aq => \*(AqInfoblox::DHCP::Network\*(Aq);
\& my $res = $discovery\->start_discovery(\*(Aqobjects\*(Aq => \e@networks);
.Ve
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::Discovery::DiagnosticsStatus, Infoblox::IPAM::Address, Infoblox::DHCP::Network, Infoblox::DHCP::IPv6Network, Infoblox::DHCP::NetworkContainer, Infoblox::DHCP::IPv6NetworkContainer, Infoblox::Grid::Discovery::NetworkDeprovisionInfo, Infoblox::Grid::Discovery::Port::Control, Infoblox::Grid::Discovery::Device, Infoblox::Grid::Discovery::JobProcessDetails, Infoblox::Grid::Discovery::DeviceInterface, Infoblox::Grid::Discovery::VLANInfo, Infoblox::Grid::Discovery::DiscoveryDataConversionResult, Infoblox::Grid::Discovery::ConversionAttributes, Infoblox::Grid::Discovery::DeviceSupportInfoResponse.
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
