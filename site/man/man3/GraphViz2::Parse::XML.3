.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "GraphViz2::Parse::XML 3"
.TH GraphViz2::Parse::XML 3 "2020-10-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GraphViz2::Parse::XML \- Visualize XML as a graph
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&        #!/usr/bin/env perl
\&
\&        use strict;
\&        use warnings;
\&
\&        use File::Spec;
\&
\&        use GraphViz2;
\&        use GraphViz2::Parse::XML;
\&
\&        my($graph) = GraphViz2 \-> new
\&                (
\&                 edge   => {color => \*(Aqgrey\*(Aq},
\&                 global => {directed => 1},
\&                 graph  => {rankdir => \*(AqTB\*(Aq},
\&                 node   => {color => \*(Aqblue\*(Aq, shape => \*(Aqoval\*(Aq},
\&                );
\&        my($g) = GraphViz2::Parse::XML \-> new(graph => $graph);
\&
\&        $g \-> create(file_name => File::Spec \-> catfile(\*(Aqt\*(Aq, \*(Aqsample.xml\*(Aq) );
\&
\&        my($format)      = shift || \*(Aqsvg\*(Aq;
\&        my($output_file) = shift || File::Spec \-> catfile(\*(Aqhtml\*(Aq, "parse.xml.pp.$format");
\&
\&        $graph \-> run(format => $format, output_file => $output_file);
.Ve
.PP
See scripts/parse.xml.pp.pl (\*(L"Scripts Shipped with this Module\*(R" in GraphViz2).
.SH "Description"
.IX Header "Description"
Takes an \s-1XML\s0 file and converts it into a graph, using the pure-Perl XML::Tiny.
.PP
You can write the result in any format supported by Graphviz <http://www.graphviz.org/>.
.PP
Here is the list of output formats <http://www.graphviz.org/content/output-formats>.
.SH "Constructor and Initialization"
.IX Header "Constructor and Initialization"
.SS "Calling \fBnew()\fP"
.IX Subsection "Calling new()"
\&\f(CW\*(C`new()\*(C'\fR is called as \f(CW\*(C`my($obj) = GraphViz2::Parse::XML \-> new(k1 => v1, k2 => v2, ...)\*(C'\fR.
.PP
It returns a new object of type \f(CW\*(C`GraphViz2::Parse::XML\*(C'\fR.
.PP
Key-value pairs accepted in the parameter list:
.ie n .IP "o graph => $graphviz_object" 4
.el .IP "o graph => \f(CW$graphviz_object\fR" 4
.IX Item "o graph => $graphviz_object"
This option specifies the GraphViz2 object to use. This allows you to configure it as desired.
.Sp
The default is GraphViz2 \-> new. The default attributes are the same as in the synopsis, above.
.Sp
This key is optional.
.SH "Methods"
.IX Header "Methods"
.ie n .SS "create(file_name => $file_name)"
.el .SS "create(file_name => \f(CW$file_name\fP)"
.IX Subsection "create(file_name => $file_name)"
Creates the graph, which is accessible via the \fBgraph()\fR method, or via the graph object you passed to \fBnew()\fR.
.PP
Returns \f(CW$self\fR for method chaining.
.PP
\&\f(CW$file_name\fR is the name of an \s-1XML\s0 file.
.SS "\fBgraph()\fP"
.IX Subsection "graph()"
Returns the graph object, either the one supplied to \fBnew()\fR or the one created during the call to \fBnew()\fR.
.SH "FAQ"
.IX Header "FAQ"
See \*(L"\s-1FAQ\*(R"\s0 in GraphViz2 and \*(L"Scripts Shipped with this Module\*(R" in GraphViz2.
.SH "Scripts Shipped with this Module"
.IX Header "Scripts Shipped with this Module"
.SS "scripts/parse.xml.pp.pl"
.IX Subsection "scripts/parse.xml.pp.pl"
Demonstrates using XML::Tiny to parse \s-1XML.\s0
.PP
Inputs from ./t/sample.xml, and outputs to ./html/parse.xml.pp.svg by default.
.SH "Thanks"
.IX Header "Thanks"
Many thanks are due to the people who chose to make Graphviz <http://www.graphviz.org/> Open Source.
.PP
And thanks to Leon Brocard <http://search.cpan.org/~lbrocard/>, who wrote GraphViz, and kindly gave me co-maint of the module.
.SH "Author"
.IX Header "Author"
GraphViz2 was written by Ron Savage \fI<ron@savage.net.au>\fR in 2011.
.PP
Home page: <http://savage.net.au/index.html>.
.SH "Copyright"
.IX Header "Copyright"
Australian copyright (c) 2011, Ron Savage.
.PP
.Vb 4
\&        All Programs of mine are \*(AqOSI Certified Open Source Software\*(Aq;
\&        you can redistribute them and/or modify them under the terms of
\&        The Perl License, a copy of which is available at:
\&        http://dev.perl.org/licenses/
.Ve
