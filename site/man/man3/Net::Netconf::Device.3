.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Netconf::Device 3"
.TH Net::Netconf::Device 3 "2018-12-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Netconf::Device \- Implements a remote Netconf device
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The Net::Netconf::Device module implements a remote Netconf device. It can be
used to connect and talk to a Netconf server.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Net::Netconf::Device module implements an object-oriented interface to the
Netconf \s-1API\s0 supported by Juniper Networks. Objects of this class represent the
local side of connection to a Juniper Networks device running \s-1JUNOS,\s0 over which
the Netconf protocol will be spoken.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
This example connects to a Netconf server, locks the candidate database, updates
the router's configuration, commits the changes and closes the Netconf session.
It also does error handling.
.PP
.Vb 1
\&    use Net::Netconf::Device;
\&
\&    # State information constants
\&    use constant STATE_CONNECTED => 0;
\&    use constant STATE_LOCKED => 1;
\&    use constant STATE_EDITED => 2;
\&
\&    # Variables used
\&    my $response;
\&
\&    my %deviceargs = (
\&      \*(Aqhostname\*(Aq => \*(Aqroutername\*(Aq,
\&      \*(Aqlogin\*(Aq => \*(Aqloginname\*(Aq,
\&      \*(Aqpassword\*(Aq => \*(Aqsecret\*(Aq,
\&      \*(Aqaccess\*(Aq => \*(Aqssh\*(Aq,
\&      \*(Aqserver\*(Aq => \*(Aqnetconf\*(Aq,
\&      \*(Aqdebug_level\*(Aq => 1,
\&      \*(Aqclient_capabilities\*(Aq => [
\&        \*(Aqurn:ietf:params:xml:ns:netconf:base:1.0\*(Aq,
\&        \*(Aqurn:ietf:params:xml:ns:netconf:capability:candidate:1.0\*(Aq,
\&        \*(Aqurn:ietf:params:xml:ns:netconf:capability:confirmed\-commit:1.0\*(Aq,
\&        \*(Aqurn:ietf:params:xml:ns:netconf:capability:validate:1.0\*(Aq,
\&        \*(Aqurn:ietf:params:xml:ns:netconf:capability:url:1.0?protocol=http,ftp,file\*(Aq,
\&        \*(Aqhttp://xml.juniper.net/netconf/junos/1.0\*(Aq,
\&          ]
\&    );
\&
\&    my $device = new Net::Netconf::Device(%deviceargs);
\&    print \*(AqCould not create Netconf device\*(Aq unless $device;
\&
\&    # Lock the configuration datastore
\&    $response = $device\->lock_config(target => \*(Aqcandidate\*(Aq);
\&    graceful_shutdown($device, STATE_CONNECTED) if ($device\->has_error);
\&
\&    # Edit the configuration
\&    my %editargs = (
\&        target => \*(Aqcandidate\*(Aq,
\&        config => \*(Aq<config>
\&                     <configuration>
\&                       <interfaces>
\&                         <interface>
\&                           <name>fe\-0/0/0</name>
\&                           <mtu>1200</mtu>
\&                         </interface>
\&                       </interfaces>
\&                     </configuration>
\&                   </config>\*(Aq
\&    );
\&
\&    $response = $device\->edit_config(%editargs);
\&    graceful_shutdown($device, STATE_LOCKED) if ($device\->has_error);
\&
\&    # Commit the changes
\&    $response = $device\->commit();
\&    graceful_shutdown($device, STATE_EDITED) if ($device\->has_error);
\&
\&    # Close the session
\&    $response = $device\->close_session();
\&    print \*(AqUnable to close the Netconf session\*(Aq if ($device\->has_error);
\&    # Disconnect
\&    $device\->disconnect();
\&
\&    sub graceful_shutdown
\&    {
\&        my ($device, $state) = @_;
\&
\&        # Could not commit
\&        if ($state >= STATE_EDITED) {
\&            print "Failed to commit changes..So, discarding the changes...\en";
\&            $device\->discard_changes();
\&        }
\&
\&        # Could not edit the config
\&        if ($state >= STATE_LOCKED) {
\&            print "Failed to edit the configuration...\en";
\&            $device\->unlock();
\&        }
\&
\&        # Could not lock the candidate config
\&        if ($state >= STATE_CONNECTED) {
\&            print "Failed to lock the candidate datastore...\en";
\&            $device\->close_session();
\&            $device\->disconnect();
\&        }
\&        exit 0;
\&    }
.Ve
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
new(%ARGS)
.PP
The constructor accepts a hash table \f(CW%ARGS\fR containing the following keys:
.IP "hostname" 4
.IX Item "hostname"
Name of Juniper box to connect to.
.IP "login" 4
.IX Item "login"
Username to log into box as.
.IP "password" 4
.IX Item "password"
Password for login username.
.IP "access" 4
.IX Item "access"
Access method \- can be 'ssh' only.
.IP "server" 4
.IX Item "server"
The server to connect to. Default is 'netconf'.
.IP "debug_level" 4
.IX Item "debug_level"
The debugging level. Debug level = 1, Trace level = 2, Information level = 3,
Warning level = 4, Error level = 5, Critical level = 6.
.IP "client_capabilities" 4
.IX Item "client_capabilities"
The capabilities supported by the client as an array reference.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBconnect()\fR" 4
.IX Item "connect()"
This is called by the constructor to connect to a Netconf server.
.IP "\fBdisconnect()\fR" 4
.IX Item "disconnect()"
Disconnects from a Netconf server and performs other clean-up operations.
.IP "has_error" 4
.IX Item "has_error"
Returns the number of <rpc\-error> tags seen in the Netconf server response.
.IP "get_first_error" 4
.IX Item "get_first_error"
Returns a hash containing the first <rpc\-error> message returned by the Netconf
server on the last request. The hash keys include error_severity, error_message
etc.
.IP "get_all_errors" 4
.IX Item "get_all_errors"
Returns a hash containing all the <rpc\-error> messages returned by the Netconf
server key-ed by the error number.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Net::Netconf::Manager
.IP "\(bu" 4
Net::Netconf:Trace
.PP
Juniper Networks Perl Team, send bug reports, hints, tips and suggestions to
netconf\-support@juniper.net.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 846:" 4
.IX Item "Around line 846:"
You forgot a '=back' before '=head1'
.IP "Around line 858:" 4
.IX Item "Around line 858:"
=back doesn't take any parameters, but you said =back  =head1 \s-1AUTHOR\s0
