.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Time::timegm 3"
.TH Time::timegm 3 "2020-07-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"Time::timegm" \- a UTC version of "mktime()"
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Time::timegm qw( timegm );
\&
\& my $epoch = timegm( 0, 0, 0, 14, 6\-1, 2012\-1900 );
\&
\& print "2012\-06\-14 00:00:00 UTC happened at ",
\&    scalar localtime($epoch), " localtime\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1POSIX\s0 standard provides three functions for converting between integer
epoch values and 6\-component \*(L"broken-down\*(R" time representations. \f(CW\*(C`localtime\*(C'\fR
and \f(CW\*(C`gmtime\*(C'\fR convert an epoch into the 6 components of seconds, minutes,
hours, day of month, month and year, in either local timezone or \s-1UTC.\s0 The
\&\f(CW\*(C`mktime\*(C'\fR function converts a local broken-down time into an epoch value.
However, \f(CW\*(C`POSIX\*(C'\fR does not provide a \s-1UTC\s0 version of this.
.PP
This module provides a function \f(CW\*(C`timegm\*(C'\fR which has this ability.
.PP
Unlike some other \s-1CPAN\s0 implementations of this behaviour, this version does
not re-implement the time handling logic internally. It reuses the \f(CW\*(C`mktime\*(C'\fR
and \f(CW\*(C`gmtime\*(C'\fR functions provided by the system to ensure its results are
always consistent with the other functions.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "$epoch = timegm( $sec, $min, $hour, $mday, $mon, $year )"
.el .SS "\f(CW$epoch\fP = timegm( \f(CW$sec\fP, \f(CW$min\fP, \f(CW$hour\fP, \f(CW$mday\fP, \f(CW$mon\fP, \f(CW$year\fP )"
.IX Subsection "$epoch = timegm( $sec, $min, $hour, $mday, $mon, $year )"
Returns the epoch integer value representing the time given by the 6
broken-down components.
.PP
As with \f(CW\*(C`POSIX::mktime\*(C'\fR it is \fInot\fR required that these values be within
their \*(L"valid\*(R" ranges. This function will normalise values out of range. For
example, the 25th hour of a day is normalised to the 1st hour of the following
day; or the 0th month is normalised to the 12th month of the preceeding year.
.SH "COMPARISON WITH Time::Local"
.IX Header "COMPARISON WITH Time::Local"
The Time::Local module also provides a function called \f(CW\*(C`timegm()\*(C'\fR with
similar behaviour to this one. The differences are:
.IP "\(bu" 2
\&\f(CW\*(C`Time::timegm::timegm()\*(C'\fR handles denormalised values (that is, seconds or
minutes outside of the range 0 to 59, hours outside 0 to 23, etc..) by
adjusting the next largest unit (such that 61 seconds is 1 second of the next
minute, etc). \f(CW\*(C`Time::Local::timegm()\*(C'\fR croaks on out-of-range input.
\&\f(CW\*(C`Time::Local\*(C'\fR also provides a function \f(CW\*(C`timegm_nocheck()\*(C'\fR which does not
croak but it is documented that the behavior is unspecified on out-of-range
values.
.IP "\(bu" 2
\&\f(CW\*(C`Time::timegm::timegm()\*(C'\fR is implemented by a light \s-1XS\s0 wrapper around the
\&\f(CWtimegm(3)\fR or \f(CW_mkgmtime(3)\fR function provided by the platform's C library
if such a function is provided, so its behaviour is consistent with the rest
of the platform. \f(CW\*(C`Time::Local\*(C'\fR re-implements the logic in perl code.
\&\f(CW\*(C`Time::timegm\*(C'\fR will fall back to a perl implementation only if the \s-1XS\s0 one
cannot be used.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Evans <leonerd@leonerd.org.uk>
