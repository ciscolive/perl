.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dancer::Plugin::Passphrase 3"
.TH Dancer::Plugin::Passphrase 3 "2014-02-09" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Plugin::Passphrase \- Passphrases and Passwords as objects for Dancer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This plugin manages the hashing of passwords for Dancer apps, allowing 
developers to follow cryptography best practices without having to 
become a cryptography expert.
.PP
It uses the bcrypt algorithm as the default, while also supporting any
hashing function provided by Digest
.SH "USAGE"
.IX Header "USAGE"
.Vb 3
\&    package MyWebService;
\&    use Dancer \*(Aq:syntax\*(Aq;
\&    use Dancer::Plugin::Passphrase;
\&
\&    post \*(Aq/login\*(Aq => sub {
\&        my $phrase = passphrase( param(\*(Aqmy password\*(Aq) )\->generate;
\&
\&        # $phrase is now an object that contains RFC 2307 representation
\&        # of the hashed passphrase, along with the salt, and other metadata
\&        
\&        # You should store $phrase\->rfc2307() for use later
\&    };
\&
\&    get \*(Aq/protected\*(Aq => sub {
\&        # Retrieve $stored_rfc_2307_string, like we created above.
\&        # IT MUST be a valid RFC 2307 string
\&
\&        if ( passphrase( param(\*(Aqmy password\*(Aq) )\->matches( $stored_rfc_2307 ) ) {
\&            # Passphrase matches!
\&        }
\&    };
\&
\&    get \*(Aq/generate_new_password\*(Aq => sub {
\&        return passphrase\->generate_random;
\&    };
.Ve
.SH "KEYWORDS"
.IX Header "KEYWORDS"
.SS "passphrase"
.IX Subsection "passphrase"
Given a plaintext password, it returns a Dancer::Plugin::Passphrase 
object that you can generate a new hash from, or match against a stored hash.
.SH "MAIN METHODS"
.IX Header "MAIN METHODS"
.SS "generate"
.IX Subsection "generate"
Generates an \s-1RFC 2307\s0 representation of the hashed passphrase
that is suitable for storage in a database.
.PP
.Vb 1
\&    my $pass = passphrase(\*(Aqmy passphrase\*(Aq)\->generate;
.Ve
.PP
You should store \f(CW\*(C`$phrase\-\*(C'\fR\fBrfc_2307()\fR> in your database. For convenience
the object will automagically return the \s-1RFC 2307\s0 representation when no
method is called on it.
.PP
Accepts a hashref of options to specify what kind of hash should be 
generated. All options settable in the config file are valid.
.PP
If you specify only the algorithm, the default settings for that algorithm will be used.
.PP
A cryptographically random salt is used if salt is not defined.
Only if you specify the empty string will an empty salt be used
This is not recommended, and should only be used to upgrade old insecure hashes
.PP
.Vb 5
\&    my $phrase = passphrase(\*(Aqmy password\*(Aq)\->generate({
\&        algorithm  => \*(Aq\*(Aq,   # What algorithm is used to generate the hash
\&        cost       => \*(Aq\*(Aq,   # Cost / Work Factor if using bcrypt
\&        salt       => \*(Aq\*(Aq,   # Manually specify salt if using a salted digest
\&    });
.Ve
.SS "matches"
.IX Subsection "matches"
Matches a plaintext password against a stored hash.
Returns 1 if the hash of the password matches the stored hash.
Returns undef if they don't match or if there was an error
Fail-Secure, rather than Fail-Safe.
.PP
.Vb 1
\&    passphrase(\*(Aqmy password\*(Aq)\->matches($stored_rfc_2307_string);
.Ve
.PP
\&\f(CW$stored_rfc_2307_string\fR \fB\s-1MUST\s0\fR be a valid \s-1RFC 2307\s0 string,
as created by \fBgenerate()\fR
.PP
An \s-1RFC 2307\s0 string is made up of a scheme identifier, followed by a
base64 encoded string. The base64 encoded string should contain
the password hash and the salt concatenated together \- in that order.
.PP
.Vb 1
\&    \*(Aq{\*(Aq.$scheme.\*(Aq}\*(Aq.encode_base64($hash . $salt, \*(Aq\*(Aq);
.Ve
.PP
Where \f(CW$scheme\fR can be any of the following and their unsalted variants,
which have the leading S removed. \s-1CRYPT\s0 will be Bcrypt.
.PP
.Vb 1
\&    SMD5 SSHA SSHA224 SSHA256 SSHA384 SSHA512 CRYPT
.Ve
.PP
A complete \s-1RFC2307\s0 string looks like this:
.PP
.Vb 1
\&    {SSHA}K3LAbIjRL5CpLzOlm3/HzS3qt/hUaGVTYWx0
.Ve
.PP
This is the format created by \fBgenerate()\fR
.SS "generate_random"
.IX Subsection "generate_random"
Generates and returns any number of cryptographically random
characters from the url-safe base64 charater set.
.PP
.Vb 1
\&    my $rand_pass = passphrase\->generate_random;
.Ve
.PP
The passwords generated are suitable for use as
temporary passwords or one-time authentication tokens.
.PP
You can configure the length and the character set
used by passing a hashref of options.
.PP
.Vb 4
\&    my $rand_pass = passphrase\->generate_random({
\&        length  => 32,
\&        charset => [\*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(AqA\*(Aq..\*(AqZ\*(Aq],
\&    });
.Ve
.SH "ADDITIONAL METHODS"
.IX Header "ADDITIONAL METHODS"
The methods are only applicable once you have called \f(CW\*(C`generate\*(C'\fR
.PP
.Vb 1
\&    passphrase( \*(Aqmy password\*(Aq )\->generate\->rfc2307; # CORRECT
\&
\&    passphrase( \*(Aqmy password\*(Aq )\->rfc2307;           # INCORRECT, Returns undef
.Ve
.SS "rfc2307"
.IX Subsection "rfc2307"
Returns the rfc2307 representation from a \f(CW\*(C`Dancer::Plugin::Passphrase\*(C'\fR object.
.PP
.Vb 1
\&    passphrase(\*(Aqmy password\*(Aq)\->generate\->rfc2307;
.Ve
.SS "scheme"
.IX Subsection "scheme"
Returns the scheme name from a \f(CW\*(C`Dancer::Plugin::Passphrase\*(C'\fR object.
.PP
This is the scheme name as used in the \s-1RFC 2307\s0 representation
.PP
.Vb 1
\&    passphrase(\*(Aqmy password\*(Aq)\->generate\->scheme;
.Ve
.PP
The scheme name can be any of the following, and will always be capitalized
.PP
.Vb 2
\&    SMD5  SSHA  SSHA224  SSHA256  SSHA384  SSHA512  CRYPT
\&    MD5   SHA   SHA224   SHA256   SHA384   SHA512
.Ve
.SS "algorithm"
.IX Subsection "algorithm"
Returns the algorithm name from a \f(CW\*(C`Dancer::Plugin::Passphrase\*(C'\fR object.
.PP
The algorithm name can be anything that is accepted by \f(CW\*(C`Digest\-\*(C'\fRnew($alg)>
This includes any modules in the \f(CW\*(C`Digest::\*(C'\fR Namespace
.PP
.Vb 1
\&    passphrase(\*(Aqmy password\*(Aq)\->generate\->algorithm;
.Ve
.SS "cost"
.IX Subsection "cost"
Returns the bcrypt cost from a \f(CW\*(C`Dancer::Plugin::Passphrase\*(C'\fR object.
Only works when using the bcrypt algorithm, returns undef for other algorithms
.PP
.Vb 1
\&    passphrase(\*(Aqmy password\*(Aq)\->generate\->cost;
.Ve
.SS "salt_raw"
.IX Subsection "salt_raw"
Returns the raw salt from a \f(CW\*(C`Dancer::Plugin::Passphrase\*(C'\fR object.
.PP
.Vb 1
\&    passphrase(\*(Aqmy password\*(Aq)\->generate\->salt_raw;
.Ve
.PP
Can be defined, but false \- The empty string is technically a valid salt.
.PP
Returns \f(CW\*(C`undef\*(C'\fR if there is no salt.
.SS "hash_raw"
.IX Subsection "hash_raw"
Returns the raw hash from a \f(CW\*(C`Dancer::Plugin::Passphrase\*(C'\fR object.
.PP
.Vb 1
\&    passphrase(\*(Aqmy password\*(Aq)\->generate\->hash_raw;
.Ve
.SS "salt_hex"
.IX Subsection "salt_hex"
Returns the hex-encoded salt from a \f(CW\*(C`Dancer::Plugin::Passphrase\*(C'\fR object.
.PP
Can be defined, but false \- The empty string is technically a valid salt.
Returns \f(CW\*(C`undef\*(C'\fR if there is no salt.
.PP
.Vb 1
\&    passphrase(\*(Aqmy password\*(Aq)\->generate\->salt_hex;
.Ve
.SS "hash_hex"
.IX Subsection "hash_hex"
Returns the hex-encoded hash from a \f(CW\*(C`Dancer::Plugin::Passphrase\*(C'\fR object.
.PP
.Vb 1
\&    passphrase(\*(Aqmy password\*(Aq)\->generate\->hash_hex;
.Ve
.SS "salt_base64"
.IX Subsection "salt_base64"
Returns the base64 encoded salt from a \f(CW\*(C`Dancer::Plugin::Passphrase\*(C'\fR object.
.PP
Can be defined, but false \- The empty string is technically a valid salt.
Returns \f(CW\*(C`undef\*(C'\fR if there is no salt.
.PP
.Vb 1
\&    passphrase(\*(Aqmy password\*(Aq)\->generate\->salt_base64;
.Ve
.SS "hash_base64"
.IX Subsection "hash_base64"
Returns the base64 encoded hash from a \f(CW\*(C`Dancer::Plugin::Passphrase\*(C'\fR object.
.PP
.Vb 1
\&    passphrase(\*(Aqmy password\*(Aq)\->generate\->hash_base64;
.Ve
.SS "plaintext"
.IX Subsection "plaintext"
Returns the plaintext password as originally supplied to the passphrase keyword.
.PP
.Vb 1
\&    passphrase(\*(Aqmy password\*(Aq)\->generate\->plaintext;
.Ve
.SH "MORE INFORMATION"
.IX Header "MORE INFORMATION"
.SS "Purpose"
.IX Subsection "Purpose"
The aim of this module is to help you store new passwords in a secure manner, 
whilst still being able to verify and upgrade older passwords.
.PP
Cryptography is a vast and complex field. Many people try to roll their own 
methods for securing user data, but succeed only in coming up with 
a system that has little real security.
.PP
This plugin provides a simple way of managing that complexity, allowing 
developers to follow crypto best practice without having to become an expert.
.SS "Rationale"
.IX Subsection "Rationale"
The module defaults to hashing passwords using the bcrypt algorithm, returning them
in \s-1RFC 2307\s0 format.
.PP
\&\s-1RFC 2307\s0 describes an encoding system for passphrase hashes, as used in the \*(L"userPassword\*(R"
attribute in \s-1LDAP\s0 databases. It encodes hashes as \s-1ASCII\s0 text, and supports several 
passphrase schemes by starting the encoding with an alphanumeric scheme identifier enclosed 
in braces.
.PP
\&\s-1RFC 2307\s0 only specifies the \f(CW\*(C`MD5\*(C'\fR, and \f(CW\*(C`SHA\*(C'\fR schemes \- however in real-world usage,
schemes that are salted are widely supported, and are thus provided by this module.
.PP
Bcrypt is an adaptive hashing algorithm that is designed to resist brute 
force attacks by including a cost (aka work factor). This cost increases 
the computational effort it takes to compute the hash.
.PP
\&\s-1SHA\s0 and \s-1MD5\s0 are designed to be fast, and modern machines compute a billion 
hashes a second. With computers getting faster every day, brute forcing 
\&\s-1SHA\s0 hashes is a very real problem that cannot be easily solved.
.PP
Increasing the cost of generating a bcrypt hash is a trivial way to make 
brute forcing ineffective. With a low cost setting, bcrypt is just as secure 
as a more traditional SHA+salt scheme, and just as fast. Increasing the cost
as computers become more powerful keeps you one step ahead
.PP
For a more detailed description of why bcrypt is preferred, see this article: 
<http://codahale.com/how\-to\-safely\-store\-a\-password/>
.SS "Configuration"
.IX Subsection "Configuration"
In your applications config file, you can set the default hashing algorithm,
and the default settings for every supported algorithm. Calls to
\&\fBgenerate()\fR will use the default settings
for that algorithm specified in here.
.PP
You can override these defaults when you call \fBgenerate()\fR.
.PP
If you do no configuration at all, the default is to bcrypt with a cost of 4, and 
a strong psuedo-random salt.
.PP
.Vb 3
\&    plugins:
\&        Passphrase:
\&            default: Bcrypt
\&
\&            Bcrypt:
\&                cost: 8
.Ve
.SS "Storage in a database"
.IX Subsection "Storage in a database"
You should be storing the \s-1RFC 2307\s0 string in your database, it's the easiest way
to use this module. You could store the \f(CW\*(C`raw_salt\*(C'\fR, \f(CW\*(C`raw_hash\*(C'\fR, and \f(CW\*(C`scheme\*(C'\fR
separately, but this strongly discouraged. \s-1RFC 2307\s0 strings are specifically
designed for storing hashed passwords, and should be used wherever possible.
.PP
The length of the string produced by \fBgenerate()\fR can
vary dependent on your settings. Below is a table of the lengths generated
using default settings.
.PP
You will need to make sure your database columns are at least this long.
If the string gets truncated, the password can \fInever\fR be validated.
.PP
.Vb 1
\&    ALGORITHM   LENGTH  EXAMPLE RFC 2307 STRING
\&    
\&    Bcrypt      68      {CRYPT}$2a$04$MjkMhQxasFQod1qq56DXCOvWu6YTWk9X.EZGnmSSIbbtyEBIAixbS
\&    SHA\-512     118     {SSHA512}lZG4dZ5EU6dPEbJ1kBPPzEcupFloFSIJjiXCwMVxJXOy/x5qhBA5XH8FiUWj7u59onQxa97xYdqje/fwY5TDUcW1Urplf3KHMo9NO8KO47o=
\&    SHA\-384     98      {SSHA384}SqZF5YYyk4NdjIM8YgQVfRieXDxNG0dKH4XBcM40Eblm+ribCzdyf0JV7i2xJvVHZsFSQNcuZPKtiTMzDyOU+w==
\&    SHA\-256     74      {SSHA256}xsJHNzPlNCpOZ41OkTfQOU35ZY+nRyZFaM8lHg5U2pc0xT3DKNlGW2UTY0NPYsxU
\&    SHA\-224     70      {SSHA224}FTHNkvKOdyX1d6f45iKLVxpaXZiHel8pfilUT1dIZ5u+WIUyhDGxLnx72X0=
\&    SHA\-1       55      {SSHA}Qsaao/Xi/bYTRMQnpHuD3y5nj02wbdcw5Cek2y2nLs3pIlPh
\&    MD5         51      {SMD5}bgfLiUQWgzUm36+nBhFx62bi0xdwTp+UpEeNKDxSLfM=
.Ve
.SS "Common Mistakes"
.IX Subsection "Common Mistakes"
Common mistakes people make when creating their own solution. If any of these 
seem familiar, you should probably be using this module
.IP "Passwords are stored as plain text for a reason" 4
.IX Item "Passwords are stored as plain text for a reason"
There is never a valid reason to store a password as plain text.
Passwords should be reset and not emailed to customers when they forget.
Support people should be able to login as a user without knowing the users password.
No-one except the user should know the password \- that is the point of authentication.
.IP "No-one will ever guess our super secret algorithm!" 4
.IX Item "No-one will ever guess our super secret algorithm!"
Unless you're a cryptography expert with many years spent studying 
super-complex maths, your algorithm is almost certainly not as secure 
as you think. Just because it's hard for you to break doesn't mean
it's difficult for a computer.
.ie n .IP "Our application-wide salt is ""Sup3r_S3cret_L0ng_Word"" \- No-one will ever guess that." 4
.el .IP "Our application-wide salt is ``Sup3r_S3cret_L0ng_Word'' \- No-one will ever guess that." 4
.IX Item "Our application-wide salt is Sup3r_S3cret_L0ng_Word - No-one will ever guess that."
This is common misunderstanding of what a salt is meant to do. The purpose of a 
salt is to make sure the same password doesn't always generate the same hash.
A fresh salt needs to be created each time you hash a password. It isn't meant 
to be a secret key.
.ie n .IP "We generate our random salt using ""rand""." 4
.el .IP "We generate our random salt using \f(CWrand\fR." 4
.IX Item "We generate our random salt using rand."
\&\f(CW\*(C`rand\*(C'\fR isn't actually random, it's a non-unform pseudo-random number generator, 
and not suitable for cryptographic applications. Whilst this module also defaults to 
a \s-1PRNG,\s0 it is better than the one provided by \f(CW\*(C`rand\*(C'\fR. Using a true \s-1RNG\s0 is a config
option away, but is not the default as it it could potentially block output if the
system does not have enough entropy to generate a truly random number
.ie n .IP "We use ""md5(pass.salt)"", and the salt is from ""/dev/random""" 4
.el .IP "We use \f(CWmd5(pass.salt)\fR, and the salt is from \f(CW/dev/random\fR" 4
.IX Item "We use md5(pass.salt), and the salt is from /dev/random"
\&\s-1MD5\s0 has been broken for many years. Commodity hardware can find a 
hash collision in seconds, meaning an attacker can easily generate 
the correct \s-1MD5\s0 hash without using the correct password.
.ie n .IP "We use ""sha(pass.salt)"", and the salt is from ""/dev/random""" 4
.el .IP "We use \f(CWsha(pass.salt)\fR, and the salt is from \f(CW/dev/random\fR" 4
.IX Item "We use sha(pass.salt), and the salt is from /dev/random"
\&\s-1SHA\s0 isn't quite as broken as \s-1MD5,\s0 but it shares the same theoretical 
weaknesses. Even without hash collisions, it is vulnerable to brute forcing.
Modern hardware is so powerful it can try around a billion hashes a second. 
That means every 7 chracter password in the range [A\-Za\-z0\-9] can be cracked 
in one hour on your average desktop computer.
.IP "If the only way to break the hash is to brute-force it, it's secure enough" 4
.IX Item "If the only way to break the hash is to brute-force it, it's secure enough"
It is unlikely that your database will be hacked and your hashes brute forced.
However, in the event that it does happen, or \s-1SHA512\s0 is broken, using this module
gives you an easy way to change to a different algorithm, while still allowing
you to validate old passphrases
.SH "KNOWN ISSUES"
.IX Header "KNOWN ISSUES"
If you see errors like this
.PP
.Vb 1
\&    Wide character in subroutine entry
.Ve
.PP
or
.PP
.Vb 1
\&    Input must contain only octets
.Ve
.PP
The \f(CW\*(C`MD5\*(C'\fR, \f(CW\*(C`bcrypt\*(C'\fR, and \f(CW\*(C`SHA\*(C'\fR algorithms can't handle chracters with an ordinal
value above 255, producing errors like this if they encounter them.
It is not possible for this plugin to automagically work out the correct
encoding for a given string.
.PP
If you see errors like this, then you probably need to use the Encode module
to encode your text as \s-1UTF\-8\s0 (or whatever encoding it is) before giving it 
to \f(CW\*(C`passphrase\*(C'\fR.
.PP
Text encoding is a bag of hurt, and errors like this are probably indicitive
of deeper problems within your app's code.
.PP
You will save yourself a lot of trouble if you read up on the
Encode module sooner rather than later.
.PP
For further reading on \s-1UTF\-8,\s0 unicode, and text encoding in perl,
see <http://training.perl.com/OSCON2011/index.html>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Dancer, Digest, Crypt::Eksblowfish::Bcrypt, Dancer::Plugin::Bcrypt
.SH "AUTHOR"
.IX Header "AUTHOR"
James Aitken <jaitken@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by James Aitken.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
