.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::mysql 3"
.TH Mojo::mysql 3 "2020-09-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::mysql \- Mojolicious and Async MySQL/MariaDB
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::mysql;
\&
\&  # Connect to a local database
\&  my $mysql = Mojo::mysql\->strict_mode(\*(Aqmysql://username@/test\*(Aq);
\&
\&  # Connect to a remote database
\&  my $mysql = Mojo::mysql\->strict_mode(\*(Aqmysql://username:password@hostname/test\*(Aq);
\&  # MySQL >= 8.0:
\&  my $mysql = Mojo::mysql\->strict_mode(\*(Aqmysql://username:password@hostname/test;mysql_ssl=1\*(Aq);
\&
\&  # Use DBD::MariaDB instead of DBD::mysql
\&  my $mysql = Mojo::mysql\->strict_mode(\*(Aqmariadb://username@/test\*(Aq);
\&
\&  # Create a table
\&  $mysql\->db\->query(
\&    \*(Aqcreate table names (id integer auto_increment primary key, name text)\*(Aq);
\&
\&  # Insert a few rows
\&  my $db = $mysql\->db;
\&  $db\->query(\*(Aqinsert into names (name) values (?)\*(Aq, \*(AqSara\*(Aq);
\&  $db\->query(\*(Aqinsert into names (name) values (?)\*(Aq, \*(AqStefan\*(Aq);
\&
\&  # Insert more rows in a transaction
\&  eval {
\&    my $tx = $db\->begin;
\&    $db\->query(\*(Aqinsert into names (name) values (?)\*(Aq, \*(AqBaerbel\*(Aq);
\&    $db\->query(\*(Aqinsert into names (name) values (?)\*(Aq, \*(AqWolfgang\*(Aq);
\&    $tx\->commit;
\&  };
\&  say $@ if $@;
\&
\&  # Insert another row and return the generated id
\&  say $db\->query(\*(Aqinsert into names (name) values (?)\*(Aq, \*(AqDaniel\*(Aq)
\&    \->last_insert_id;
\&
\&  # Use SQL::Abstract::mysql to generate queries for you
\&  $db\->insert(\*(Aqnames\*(Aq, {name => \*(AqIsabel\*(Aq});
\&  say $db\->select(\*(Aqnames\*(Aq, undef, {name => \*(AqIsabel\*(Aq})\->hash\->{id};
\&  $db\->update(\*(Aqnames\*(Aq, {name => \*(AqBel\*(Aq}, {name => \*(AqIsabel\*(Aq});
\&  $db\->delete(\*(Aqnames\*(Aq, {name => \*(AqBel\*(Aq});
\&
\&  # Select one row at a time
\&  my $results = $db\->query(\*(Aqselect * from names\*(Aq);
\&  while (my $next = $results\->hash) {
\&    say $next\->{name};
\&  }
\&
\&  # Select all rows blocking
\&  $db\->query(\*(Aqselect * from names\*(Aq)
\&    \->hashes\->map(sub { $_\->{name} })\->join("\en")\->say;
\&
\&  # Select all rows non\-blocking
\&  Mojo::IOLoop\->delay(
\&    sub {
\&      my $delay = shift;
\&      $db\->query(\*(Aqselect * from names\*(Aq => $delay\->begin);
\&    },
\&    sub {
\&      my ($delay, $err, $results) = @_;
\&      $results\->hashes\->map(sub { $_\->{name} })\->join("\en")\->say;
\&    }
\&  )\->wait;
\&
\&  # Concurrent non\-blocking queries (synchronized with promises)
\&  my $now   = $db\->query_p(\*(Aqselect now() as now\*(Aq);
\&  my $names = $db\->query_p(\*(Aqselect * from names\*(Aq);
\&  Mojo::Promise\->all($now, $names)\->then(sub {
\&    my ($now, $names) = @_;
\&    say $now\->[0]\->hash\->{now};
\&    say $_\->{name} for $names\->[0]\->hashes\->each;
\&  })\->catch(sub {
\&    my $err = shift;
\&    warn "Something went wrong: $err";
\&  })\->wait;
\&
\&  Mojo::IOLoop\->start unless Mojo::IOLoop\->is_running;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::mysql is a tiny wrapper around DBD::mysql and DBD::MariaDB that
makes MySQL <http://www.mysql.org> and MariaDB <https://mariadb.org/> a lot
of fun to use with the Mojolicious <http://mojolicio.us> real-time web
framework.
.PP
The two \s-1DBD\s0 drivers are compatible with both MySQL and MariaDB, but they offer
different \*(L"options\*(R". DBD::MariaDB should have better unicode support
though and might become the default in the future.
.PP
Database and handles are cached automatically, so they can be reused
transparently to increase performance. And you can handle connection timeouts
gracefully by holding on to them only for short amounts of time.
.PP
.Vb 2
\&  use Mojolicious::Lite;
\&  use Mojo::mysql;
\&
\&  helper mysql =>
\&    sub { state $mysql = Mojo::mysql\->strict_mode(\*(Aqmysql://sri:s3cret@localhost/db\*(Aq) };
\&
\&  get \*(Aq/\*(Aq => sub {
\&    my $c  = shift;
\&    my $db = $c\->mysql\->db;
\&    $c\->render(json => $db\->query(\*(Aqselect now() as time\*(Aq)\->hash);
\&  };
\&
\&  app\->start;
.Ve
.PP
While all I/O operations are performed blocking, you can wait for long running
queries asynchronously, allowing the Mojo::IOLoop event loop to perform
other tasks in the meantime. Since database connections usually have a very low
latency, this often results in very good performance.
.PP
Every database connection can only handle one active query at a time, this
includes asynchronous ones. So if you start more than one, they will be put on
a waiting list and performed sequentially. To perform multiple queries
concurrently, you have to use multiple connections.
.PP
.Vb 4
\&  # Performed sequentially (10 seconds)
\&  my $db = $mysql\->db;
\&  $db\->query(\*(Aqselect sleep(5)\*(Aq => sub {...});
\&  $db\->query(\*(Aqselect sleep(5)\*(Aq => sub {...});
\&
\&  # Performed concurrently (5 seconds)
\&  $mysql\->db\->query(\*(Aqselect sleep(5)\*(Aq => sub {...});
\&  $mysql\->db\->query(\*(Aqselect sleep(5)\*(Aq => sub {...});
.Ve
.PP
All cached database handles will be reset automatically if a new process has
been forked, this allows multiple processes to share the same Mojo::mysql
object safely.
.SH "EVENTS"
.IX Header "EVENTS"
Mojo::mysql inherits all events from Mojo::EventEmitter and can emit the
following new ones.
.SS "connection"
.IX Subsection "connection"
.Vb 4
\&  $mysql\->on(connection => sub {
\&    my ($mysql, $dbh) = @_;
\&    ...
\&  });
.Ve
.PP
Emitted when a new database connection has been established.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::mysql implements the following attributes.
.SS "abstract"
.IX Subsection "abstract"
.Vb 2
\&  $abstract = $mysql\->abstract;
\&  $mysql    = $mysql\->abstract(SQL::Abstract::mysql\->new);
.Ve
.PP
SQL::Abstract::mysql object used to generate \s-1CRUD\s0 queries for Mojo::mysql::Database.
.PP
.Vb 2
\&  # Generate statements and bind values
\&  my ($stmt, @bind) = $mysql\->abstract\->select(\*(Aqnames\*(Aq);
.Ve
.SS "auto_migrate"
.IX Subsection "auto_migrate"
.Vb 2
\&  my $bool = $mysql\->auto_migrate;
\&  $mysql   = $mysql\->auto_migrate($bool);
.Ve
.PP
Automatically migrate to the latest database schema with \*(L"migrations\*(R", as
soon as the first database connection has been established.
.PP
Defaults to false.
.SS "database_class"
.IX Subsection "database_class"
.Vb 2
\&  $class = $mysql\->database_class;
\&  $mysql = $mysql\->database_class("MyApp::Database");
.Ve
.PP
Class to be used by \*(L"db\*(R", defaults to Mojo::mysql::Database. Note that this
class needs to have already been loaded before \*(L"db\*(R" is called.
.SS "dsn"
.IX Subsection "dsn"
.Vb 2
\&  my $dsn = $mysql\->dsn;
\&  $mysql  = $mysql\->dsn(\*(Aqdbi:mysql:dbname=foo\*(Aq);
.Ve
.PP
Data Source Name, defaults to \f(CW\*(C`dbi:mysql:dbname=test\*(C'\fR.
.SS "max_connections"
.IX Subsection "max_connections"
.Vb 2
\&  my $max = $mysql\->max_connections;
\&  $mysql  = $mysql\->max_connections(3);
.Ve
.PP
Maximum number of idle database handles to cache for future use, defaults to
\&\f(CW5\fR.
.SS "migrations"
.IX Subsection "migrations"
.Vb 2
\&  my $migrations = $mysql\->migrations;
\&  $mysql         = $mysql\->migrations(Mojo::mysql::Migrations\->new);
.Ve
.PP
Mojo::mysql::Migrations object you can use to change your database schema more
easily.
.PP
.Vb 2
\&  # Load migrations from file and migrate to latest version
\&  $mysql\->migrations\->from_file(\*(Aq/Users/sri/migrations.sql\*(Aq)\->migrate;
.Ve
.PP
MySQL and MariaDB does not support nested transactions and \s-1DDL\s0 transactions.
\&\s-1DDL\s0 statements cause implicit \f(CW\*(C`COMMIT\*(C'\fR. \f(CW\*(C`ROLLBACK\*(C'\fR will be called if any step
of migration script fails, but only \s-1DML\s0 statements after the last implicit or
explicit \f(CW\*(C`COMMIT\*(C'\fR can be reverted. Not all storage engines (like \f(CW\*(C`MYISAM\*(C'\fR)
support transactions.
.PP
This means database will most likely be left in unknown state if migration script fails.
Use this feature with caution and remember to always backup your database.
.SS "options"
.IX Subsection "options"
.Vb 2
\&  my $options = $mysql\->options;
\&  $mysql      = $mysql\->options({mysql_use_result => 1});
.Ve
.PP
Options for database handles, defaults to activating \f(CW\*(C`mysql_enable_utf8\*(C'\fR (only
for DBD::mysql), \f(CW\*(C`AutoCommit\*(C'\fR, \f(CW\*(C`AutoInactiveDestroy\*(C'\fR as well as
\&\f(CW\*(C`RaiseError\*(C'\fR and deactivating \f(CW\*(C`PrintError\*(C'\fR. \f(CW\*(C`AutoCommit\*(C'\fR and \f(CW\*(C`RaiseError\*(C'\fR
are considered mandatory, so deactivating them would be very dangerous.
.PP
\&\f(CW\*(C`mysql_auto_reconnect\*(C'\fR is never enabled, Mojo::mysql takes care of dead connections.
.PP
\&\f(CW\*(C`AutoCommit\*(C'\fR cannot not be disabled, use \f(CW$db\fR\->begin to manage transactions.
.PP
\&\f(CW\*(C`RaiseError\*(C'\fR is enabled for blocking and disabled in event loop for non-blocking queries.
.PP
About \f(CW\*(C`mysql_enable_utf8\*(C'\fR:
.PP
.Vb 5
\&  The mysql_enable_utf8 sets the utf8 charset which only supports up to 3\-byte
\&  UTF\-8 encodings. mysql_enable_utf8mb4 (as of DBD::mysql 4.032) properly
\&  supports encoding unicode characters to up to 4 bytes, such as 𠜎. It means the
\&  connection charset will be utf8mb4 (supported back to at least mysql 5.5) and
\&  these unicode characters will be supported, but no other changes.
.Ve
.PP
See also <https://github.com/jhthorsen/mojo\-mysql/pull/32>
.SS "password"
.IX Subsection "password"
.Vb 2
\&  my $password = $mysql\->password;
\&  $mysql       = $mysql\->password(\*(Aqs3cret\*(Aq);
.Ve
.PP
Database password, defaults to an empty string.
.SS "pubsub"
.IX Subsection "pubsub"
.Vb 2
\&  my $pubsub = $mysql\->pubsub;
\&  $mysql     = $mysql\->pubsub(Mojo::mysql::PubSub\->new);
.Ve
.PP
Mojo::mysql::PubSub should be considered an \s-1EXPIREMENT\s0! See
\&\*(L"\s-1DESCRIPTION\*(R"\s0 in Mojo::mysql::PubSub for more information.
.SS "username"
.IX Subsection "username"
.Vb 2
\&  my $username = $mysql\->username;
\&  $mysql       = $mysql\->username(\*(Aqbatman\*(Aq);
.Ve
.PP
Database username, defaults to an empty string.
.SH "METHODS"
.IX Header "METHODS"
Mojo::mysql inherits all methods from Mojo::EventEmitter and implements the
following new ones.
.SS "close_idle_connections"
.IX Subsection "close_idle_connections"
.Vb 1
\&  $mysql = $mysql\->close_idle_connections($keep);
.Ve
.PP
Close all connections that are not currently active, or limit the
number of idle connections to \f(CW$keep\fR.
.SS "db"
.IX Subsection "db"
.Vb 1
\&  my $db = $mysql\->db;
.Ve
.PP
Get Mojo::mysql::Database object for a cached or newly created database
handle. The database handle will be automatically cached again when that
object is destroyed, so you can handle connection timeouts gracefully by
holding on to it only for short amounts of time.
.SS "from_string"
.IX Subsection "from_string"
.Vb 1
\&  $mysql = $mysql\->from_string(\*(Aqmysql://user@/test\*(Aq);
.Ve
.PP
Parse configuration from connection string.
.PP
.Vb 2
\&  # Just a database
\&  $mysql\->from_string(\*(Aqmysql:///db1\*(Aq);
\&
\&  # Username and database
\&  $mysql\->from_string(\*(Aqmysql://batman@/db2\*(Aq);
\&
\&  # Username, password, host and database
\&  $mysql\->from_string(\*(Aqmysql://batman:s3cret@localhost/db3\*(Aq);
\&
\&  # Username, domain socket and database
\&  $mysql\->from_string(\*(Aqmysql://batman@%2ftmp%2fmysql.sock/db4\*(Aq);
\&
\&  # Username, database and additional options
\&  $mysql\->from_string(\*(Aqmysql://batman@/db5?PrintError=1&RaiseError=0\*(Aq);
.Ve
.SS "new"
.IX Subsection "new"
.Vb 5
\&  my $mysql = Mojo::mysql\->new;
\&  my $mysql = Mojo::mysql\->new(%attrs);
\&  my $mysql = Mojo::mysql\->new(\e%attrs);
\&  my $mysql = Mojo::mysql\->new(\*(Aqmysql://user@/test\*(Aq);
\&  my $mysql = Mojo::mysql\->new(\*(Aqmariadb://user@/test\*(Aq);
.Ve
.PP
Construct a new Mojo::mysql object either from \*(L"\s-1ATTRIBUTES\*(R"\s0 and or parse
connection string with \*(L"from_string\*(R" if necessary.
.PP
Using the \*(L"mariadb\*(R" scheme requires the optional module DBD::MariaDB version
1.21 (or later) to be installed.
.SS "strict_mode"
.IX Subsection "strict_mode"
.Vb 2
\&  my $mysql = Mojo::mysql\->strict_mode(\*(Aqmysql://user@/test\*(Aq);
\&  my $mysql = $mysql\->strict_mode($boolean);
.Ve
.PP
This method can act as both a constructor and a method. When called as a
constructor, it will be the same as:
.PP
.Vb 1
\&  my $mysql = Mojo::mysql\->new(\*(Aqmysql://user@/test\*(Aq)\->strict_mode(1);
.Ve
.PP
Enabling strict mode will execute the following statement when a new connection
is created:
.PP
.Vb 2
\&  SET SQL_MODE = CONCAT(\*(AqANSI,TRADITIONAL,ONLY_FULL_GROUP_BY,\*(Aq, @@sql_mode)
\&  SET SQL_AUTO_IS_NULL = 0
.Ve
.PP
The idea is to set up a connection that makes it harder for MySQL to allow
\&\*(L"invalid\*(R" data to be inserted.
.PP
This method will not be removed, but the internal commands is subject to
change.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
You can set the \f(CW\*(C`DBI_TRACE\*(C'\fR environment variable to get some advanced
diagnostics information printed to \f(CW\*(C`STDERR\*(C'\fR by \s-1DBI\s0.
.PP
.Vb 5
\&  DBI_TRACE=1
\&  DBI_TRACE=15
\&  DBI_TRACE=15=dbitrace.log
\&  DBI_TRACE=SQL
\&  DBI_PROFILE=2
.Ve
.PP
See also <https://metacpan.org/pod/DBI#DBI_TRACE> and
<https://metacpan.org/pod/DBI#DBI_PROFILE>.
.SH "REFERENCE"
.IX Header "REFERENCE"
This is the class hierarchy of the Mojo::mysql distribution.
.IP "\(bu" 2
Mojo::mysql
.IP "\(bu" 2
Mojo::mysql::Database
.IP "\(bu" 2
Mojo::mysql::Migrations
.IP "\(bu" 2
Mojo::mysql::PubSub
.IP "\(bu" 2
Mojo::mysql::Results
.IP "\(bu" 2
Mojo::mysql::Transaction
.SH "AUTHOR"
.IX Header "AUTHOR"
Curt Hochwender \- \f(CW\*(C`hochwender@centurytel.net\*(C'\fR
.PP
Dan Book \- \f(CW\*(C`dbook@cpan.org\*(C'\fR
.PP
Jan Henning Thorsen \- \f(CW\*(C`jhthorsen@cpan.org\*(C'\fR
.PP
Mike Magowan
.PP
Rolf Stöckli \- \f(CW\*(C`tekki@cpan.org\*(C'\fR
.PP
This code started as a rip-off from Sebastian Riedel's Mojo::Pg.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2014\-2019, Jan Henning Thorsen.
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<https://github.com/jhthorsen/mojo\-mysql>,
.PP
Mojo::Pg Async Connector for PostgreSQL using DBD::Pg, <https://github.com/kraih/mojo\-pg>,
.PP
Mojo::MySQL5 Pure-Perl non-blocking I/O MySQL Connector, <https://github.com/harry\-bix/mojo\-mysql5>,
.PP
Mojolicious::Guides, <http://mojolicio.us>.
