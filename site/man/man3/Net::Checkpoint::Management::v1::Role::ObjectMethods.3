.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Checkpoint::Management::v1::Role::ObjectMethods 3"
.TH Net::Checkpoint::Management::v1::Role::ObjectMethods 3 "2020-09-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Checkpoint::Management::v1::Role::ObjectMethods \- Role for Checkpoint Management API version 1.x method generation
.SH "VERSION"
.IX Header "VERSION"
version 0.001008
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    package Net::Checkpoint::Management::v1;
\&    use Moo;
\&    use Net::Checkpoint::Management::v1::Role::ObjectMethods;
\&
\&    Net::Checkpoint::Management::v1::Role::ObjectMethods\->apply([
\&        {
\&            object   => \*(Aqpackages\*(Aq,
\&            singular => \*(Aqpackage\*(Aq,
\&            create   => \*(Aqadd\-package\*(Aq,
\&            list     => \*(Aqshow\-packages\*(Aq,
\&            get      => \*(Aqshow\-package\*(Aq,
\&            update   => \*(Aqset\-package\*(Aq,
\&            delete   => \*(Aqdelete\-package\*(Aq,
\&            list_key => \*(Aqpackages\*(Aq,
\&            id_keys  => [qw( uid name )],
\&        },
\&        {
\&            object   => \*(Aqaccessrules\*(Aq,
\&            singular => \*(Aqaccessrule\*(Aq,
\&            create   => \*(Aqadd\-access\-rule\*(Aq,
\&            list     => \*(Aqshow\-access\-rulebase\*(Aq,
\&            get      => \*(Aqshow\-access\-rule\*(Aq,
\&            update   => \*(Aqset\-access\-rule\*(Aq,
\&            delete   => \*(Aqdelete\-access\-rule\*(Aq,
\&            list_key => \*(Aqrulebase\*(Aq,
\&            id_keys  => [\*(Aquid\*(Aq, \*(Aqname\*(Aq, \*(Aqrule\-number\*(Aq],
\&        },
\&    ]);
\&
\&    1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This role adds methods for the commands of a specific object.
.SH "METHODS"
.IX Header "METHODS"
.SS "create_$singular"
.IX Subsection "create_$singular"
Takes a hashref of attributes.
.PP
Returns the created object as hashref.
.PP
Throws an exception on error.
.SS "list_$object"
.IX Subsection "list_$object"
Takes optional query parameters.
.PP
Returns a hashref similar to the Checkpoint Management \s-1API\s0 but without the
\&'from' and 'to' keys.
.PP
Throws an exception on error.
.PP
As the \s-1API\s0 only allows fetching 500 objects at a time it works around that by
making multiple \s-1API\s0 calls.
.SS "get_$singular"
.IX Subsection "get_$singular"
Takes an object id and optional query parameters.
.PP
Returns the object as hashref.
.PP
Throws an exception on error.
.SS "update_$singular"
.IX Subsection "update_$singular"
Takes an object and a hashref of attributes.
.PP
Returns the updated object as hashref.
.PP
Throws an exception on error.
.SS "delete_$singular"
.IX Subsection "delete_$singular"
Takes a hashref of attributes uniquely identifying the object.
For most objects the uid is sufficient, accessrule requires the layer uid too.
.PP
Returns true on success.
.PP
Throws an exception on error.
.SS "find_$singular"
.IX Subsection "find_$singular"
Takes search and optional query parameters.
.PP
Returns the object as hashref on success.
.PP
Throws an exception on error.
.PP
As there is no \s-1API\s0 for searching by all attributes this method emulates this
by fetching all objects using the \*(L"list_$object\*(R" method and performing the
search on the client.
.SH "AUTHOR"
.IX Header "AUTHOR"
Alexander Hartmaier <abraxxa@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Alexander Hartmaier.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
