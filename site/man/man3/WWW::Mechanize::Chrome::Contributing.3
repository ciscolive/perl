.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::Mechanize::Chrome::Contributing 3"
.TH WWW::Mechanize::Chrome::Contributing 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "WWW::Mechanize::Chrome::Contributing"
.IX Header "WWW::Mechanize::Chrome::Contributing"
Welcome!
.PP
This is the documentation for how to contribute to WWW::Mechanize::Chrome,
shamelessly copied from Zilla::Dist::Contributing.
.PP
This Project is targeted to ship to \s-1CPAN\s0 and uses a plain \f(CW\*(C` Makefile.PL \*(C'\fR setup
to do that.
This means that things are laid out mostly in the traditional way \*(L"normal\*(R" Perl
module repositories look. The distribution directory
looks like this at the top level:
.ie n .IP """Changes""" 4
.el .IP "\f(CWChanges\fR" 4
.IX Item "Changes"
A changelog history, formatted in a way that CPAN::Changes can read.
.ie n .IP """Contributing""" 4
.el .IP "\f(CWContributing\fR" 4
.IX Item "Contributing"
This file
.ie n .IP """README""" 4
.el .IP "\f(CWREADME\fR" 4
.IX Item "README"
A short file with installation instructions.
.ie n .IP """README.mkdn""" 4
.el .IP "\f(CWREADME.mkdn\fR" 4
.IX Item "README.mkdn"
Top level doc in a format for GitHub
.ie n .IP """runtests.pl""" 4
.el .IP "\f(CWruntests.pl\fR" 4
.IX Item "runtests.pl"
A helper to run the test suite across a set of Chrome versions.
.ie n .IP """.travis.yml""" 4
.el .IP "\f(CW.travis.yml\fR" 4
.IX Item ".travis.yml"
A Travis-CI instruction file for automatically running the test suite across
\&\s-1OSX\s0 and Ubuntu and various versions of Perl.
.ie n .IP """examples/""" 4
.el .IP "\f(CWexamples/\fR" 4
.IX Item "examples/"
A directory of Project examples.
.ie n .IP """lib/""" 4
.el .IP "\f(CWlib/\fR" 4
.IX Item "lib/"
Project library code.
.ie n .IP """t/""" 4
.el .IP "\f(CWt/\fR" 4
.IX Item "t/"
Project test suite.
.SH "Development"
.IX Header "Development"
This module uses \f(CW\*(C`git\*(C'\fR for development.
.SS "Installation"
.IX Subsection "Installation"
Installation for development is fairly straightforward:
.IP "1 Check out the repository" 4
.IX Item "1 Check out the repository"
.Vb 1
\&    git clone https://github.com/Corion/WWW\-Mechanize\-Chrome.git
.Ve
.IP "2 Install the prerequisites" 4
.IX Item "2 Install the prerequisites"
.Vb 2
\&    cd WWW\-Mechanize\-Chrome
\&    cpanm \-\-notest \-\-installdeps .
.Ve
.SS "Testing"
.IX Subsection "Testing"
The test suite can be run in two ways, depending on whether you want to
run a matrix of combinations of backends and browser versions or not.
.PP
\fIRunning a single test\fR
.IX Subsection "Running a single test"
.PP
To run a single test during development of a new feature, run
that test as follows:
.PP
.Vb 1
\&    perl \-Ilib \-w t/50\-form2.t
.Ve
.PP
\fIRunning the complete test suite\fR
.IX Subsection "Running the complete test suite"
.PP
To run the complete test suite, use \f(CW\*(C`make\*(C'\fR / \f(CW\*(C`gmake\*(C'\fR:
.PP
.Vb 2
\&    perl Makefile.PL
\&    make test
.Ve
.PP
Alternatively, you can use the \f(CW\*(C`prove\*(C'\fR tool:
.PP
.Vb 3
\&    perl Makefile.PL
\&    make
\&    prove \-wl
.Ve
.PP
\fIRunning tests with different transport backends\fR
.IX Subsection "Running tests with different transport backends"
.PP
To run a test program with the different backends, Mojolicious, AnyEvent
and IO::Async, use the \f(CW\*(C`runtests.pl\*(C'\fR program:
.PP
.Vb 2
\&    perl Makefile.PL
\&    perl \-w runtests.pl \-t t/50\-form2.t
.Ve
.SS "Author Tests"
.IX Subsection "Author Tests"
The author tests live in \f(CW\*(C` xt/ \*(C'\fR. These mostly cover problems that
I encountered when engineering a release. These must pass before making a
release.
.SS "Installing Dependencies"
.IX Subsection "Installing Dependencies"
There are no hard dependencies that need to be installed for development
outside of the normal dependencies picked up by the \s-1CPAN\s0 installation
process. Just run the following command in the \f(CW\*(C`git\*(C'\fR checkout
directory:
.PP
.Vb 1
\&    cpanm \-\-installdeps .
.Ve
.PP
\fI\s-1OSX\s0\fR
.IX Subsection "OSX"
.PP
The suggested environment for \s-1OSX\s0 is the Homebrew environment. This
environment provides a \f(CW\*(C`libpng\*(C'\fR libraries and Perl binary that are compatible
with each other. Using the system \f(CW\*(C`perl\*(C'\fR did not work out for me, as
Imager::File::PNG does not install for the system \f(CW\*(C`perl\*(C'\fR. If you
do not use any of the screenshot features, you can also develop using
the system \f(CW\*(C`perl\*(C'\fR with a local::lib setup for the dependencies.
.SS "Workflow"
.IX Subsection "Workflow"
The development workflow described here is mostly geared towards Github.
If you want to send your patches by mail or other means, they are still
very welcome.
.PP
\fICreate a new branch\fR
.IX Subsection "Create a new branch"
.PP
.Vb 1
\&    git checkout \-b my\-new\-feature
.Ve
.PP
\fIDevelop the new feature\fR
.IX Subsection "Develop the new feature"
.PP
The new feature ideally has at least one test file that exercises it.
The new feature should have documentation.
An entry in the \f(CW\*(C`Changes\*(C'\fR file is welcome so your feature doesn't get
lost in the mists of release engineering.
.PP
\fIRun the new feature test\fR
.IX Subsection "Run the new feature test"
.PP
Ideally the new feature test you added passes on your machine.
.PP
\fIRun the test suite\fR
.IX Subsection "Run the test suite"
.PP
Ideally the test suite passes without failure on your machine.
.PP
\fIRebase your changes to clean up your commit history\fR
.IX Subsection "Rebase your changes to clean up your commit history"
.PP
Not every commit is perfect, so here you get the chance to rewrite history
a bit.
.PP
.Vb 1
\&    git rebase \-i github/master
.Ve
.PP
Note that even if you pushed your changes to Github already, it's
still \s-1OK\s0 to rebase even published commits. That's why you do your development
in a separate feature branch.
.PP
Please don't make such changes to the \f(CW\*(C`master\*(C'\fR branch.
.PP
\fIPush the changes to Github\fR
.IX Subsection "Push the changes to Github"
.PP
.Vb 1
\&    git push github my\-new\-feature
.Ve
.PP
Push the changes to Github to enable Travis \s-1CI\s0 to run the test suite across
some other architectures and versions of Perl.
.PP
\fIRebase your changes to the master branch\fR
.IX Subsection "Rebase your changes to the master branch"
.PP
.Vb 2
\&    git rebase github/master
\&    git push github \-\-force my\-new\-feature
.Ve
.PP
Yes, this will ruin the \*(L"immutable\*(R" history of your branch. That's \s-1OK\s0 \- a
feature branch is allowed to have its history rewritten.
.PP
\fIOpen a Github pull request\fR
.IX Subsection "Open a Github pull request"
.PP
Opening the pull request will notify me, and Travis \s-1CI\s0 and AppVeyor will
automatically run the test suite for the change.
.PP
\fISend a change set via mail\fR
.IX Subsection "Send a change set via mail"
.PP
If you don't want to use Github, you can use git to send the changes
via mail:
.PP
.Vb 1
\&    git send\-email \-\-compose \-\-to corion@cpan.org
.Ve
.PP
If you want to use a separate mail client, just format your changes as files
and attach them to the mail manually:
.PP
.Vb 1
\&    git format\-patch master..my\-new\-feature
.Ve
.SH "Coding style"
.IX Header "Coding style"
Ideally your code mimics the existing style.
.PP
The important style points of this module are:
.IP "Perl Version" 4
.IX Item "Perl Version"
Be compatible with Perl 5.10.
.Sp
If you need features from a newer version of Perl, this should be discussed
before you invest too much work in it.
.IP "Use function signatures" 4
.IX Item "Use function signatures"
Use the function signatures feature, as provided by Filter::signatures.
.IP "Structure your code as testable units" 4
.IX Item "Structure your code as testable units"
Ideally, your code is not one huge method but a set of methods that can
be tested in isolation.
.IP "Strike a balance when introducing new dependencies" 4
.IX Item "Strike a balance when introducing new dependencies"
Ideally, your change only pulls in the bare dependencies necessary.
If you think you need an object system, Moo is already there, so any module
that relies on another object system should be avoided.
