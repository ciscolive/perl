.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::Auto::Document 3"
.TH Test::Auto::Document 3 "2020-05-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Auto::Document
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Documentation Generator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package main;
\&
\&  use Test::Auto;
\&  use Test::Auto::Parser;
\&  use Test::Auto::Document;
\&
\&  my $test = Test::Auto\->new(
\&    \*(Aqt/Test_Auto.t\*(Aq
\&  );
\&
\&  my $parser = Test::Auto::Parser\->new(
\&    source => $test
\&  );
\&
\&  my $doc = Test::Auto::Document\->new(
\&    parser => $parser
\&  );
\&
\&  # render documentation
\&
\&  # $doc\->render
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package use the Test::Auto::Parser object to generate a valid Perl 5
\&\s-1POD\s0 document.
.SH "LIBRARIES"
.IX Header "LIBRARIES"
This package uses type constraints from:
.PP
Test::Auto::Types
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
This package has the following attributes:
.SS "content"
.IX Subsection "content"
.Vb 1
\&  content(ArrayRef[Str])
.Ve
.PP
This attribute is read-only, accepts \f(CW\*(C`(ArrayRef[Str])\*(C'\fR values, and is optional.
.SS "parser"
.IX Subsection "parser"
.Vb 1
\&  parser(Parser)
.Ve
.PP
This attribute is read-only, accepts \f(CW\*(C`(Parser)\*(C'\fR values, and is required.
.SS "template"
.IX Subsection "template"
.Vb 1
\&  template(Maybe[Str])
.Ve
.PP
This attribute is read-only, accepts \f(CW\*(C`(Maybe[Str])\*(C'\fR values, and is optional.
.SH "METHODS"
.IX Header "METHODS"
This package implements the following methods:
.SS "render"
.IX Subsection "render"
.Vb 1
\&  render() : Str
.Ve
.PP
This method returns a string representation of a valid \s-1POD\s0 document. You can
also provide a template to wrap the generated document by passing it to the
constructor or specifying it in the \f(CW\*(C`TEST_AUTO_TEMPLATE\*(C'\fR environment variable.
.IP "render example #1" 4
.IX Item "render example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $rendered = $doc\->render;
.Ve
.IP "render example #2" 4
.IX Item "render example #2"
.Vb 1
\&  # given: synopsis
\&
\&  $ENV{TEST_AUTO_TEMPLATE} = \*(Aq./t/Test_Template.pod\*(Aq;
\&
\&  # where ./t/Test_Template.pod has a {content} placeholder
\&
\&  my $rendered = $doc\->render;
\&
\&  undef $ENV{TEST_AUTO_TEMPLATE};
\&
\&  $rendered;
.Ve
.IP "render example #3" 4
.IX Item "render example #3"
.Vb 1
\&  # given: synopsis
\&
\&  my $tmpl = Test::Auto::Document\->new(
\&    parser => $parser,
\&    template => \*(Aq./t/Test_Template.pod\*(Aq
\&  );
\&
\&  my $rendered = $tmpl\->render;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the
\&\*(L"license file\*(R" <https://github.com/iamalnewkirk/test-auto/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/test-auto/wiki>
.PP
Project <https://github.com/iamalnewkirk/test-auto>
.PP
Initiatives <https://github.com/iamalnewkirk/test-auto/projects>
.PP
Milestones <https://github.com/iamalnewkirk/test-auto/milestones>
.PP
Issues <https://github.com/iamalnewkirk/test-auto/issues>
