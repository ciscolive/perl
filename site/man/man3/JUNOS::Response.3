.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "JUNOS::Response 3"
.TH JUNOS::Response 3 "2003-03-02" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JUNOS::Response \- Response object from a remote Juniper box
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This example retrieves 'show chassis hardware' information and transforms
the input with \s-1XSLT.\s0  A JUNOS::Response object is returned by the
\&\f(CW$jnx\fR\->\fBget_chassis_inventory()\fR call.
.PP
.Vb 1
\&    use JUNOS::Device;
\&
\&    # connect TO the JUNOScript server
\&    $jnx = new JUNOS::Device(hostname => "router11",
\&                             login => "johndoe",
\&                             password => "secret",
\&                             access => "telnet");
\&    unless ( ref $jnx ) {
\&        die "ERROR: $deviceinfo{hostname}: can\*(Aqt connect.\en";
\&    }
\&
\&    # send the command and receive a XML::DOM object
\&    my $res = $jnx\->get_chassis_inventory(detail => 1);
\&    unless ( ref $res ) { 
\&        die "ERROR: $deviceinfo{hostname}: can\*(Aqt execute command $query.\en";   
\&    }
\&
\&    # Check and see if there were any errors in executing the command.
\&    # If all is well, output the response using XSLT.
\&    my $err = $res\->getFirstError();
\&    if ($err) {
\&        print STDERR "ERROR: $deviceinfo{\*(Aqhostname\*(Aq} \- ", $err\->{message}, "\en";
\&    } else {
\&        # 
\&        # Now do the transformation using XSLT.
\&        #
\&        my $xmlfile = "$deviceinfo{hostname}.xml";
\&        $res\->printToFile($xmlfile);
\&        my $nm = $res\->translateXSLtoRelease(\*(Aqxmlns:lc\*(Aq, $xslfile, "$xslfile.tmp");
\&        if ($nm) {
\&            my $command = "xsltproc $nm $deviceinfo{hostname}.xml";
\&            system($command);
\&        } else {
\&            print STDERR "ERROR: Invalid XSL File $xslfile\en";
\&        }
\&    }
\&    
\&    # always close the connection
\&    $jnx\->request_end_session();
\&    $jnx\->disconnect();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object encapsulates a response from a remote JUNOScript server.
It is returned from a JUNOS::Device::request, JUNOS::Device::command,
and all \s-1XML RPC\s0 methods within JUNOS::Device.  It is a subclass of
XML::DOM::Element.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
new($DOC)
.PP
The \s-1XML::DOM\s0 object ($DOC) returned from the JUNOScript server.
.SH "METHODS"
.IX Header "METHODS"
\&\fBgetFirstError()\fR
.PP
Returns a hash reference containing all of the errors
caused by the call this object was generated in response to.
Returns undef if no errors were encountered.
.PP
\&\fBtoString()\fR
.PP
Returns a string-ified representation of this object.
.PP
translateXSLtoRelease($NAMESPACE, \f(CW$XSLFILE\fR, \f(CW$TMPFILE\fR)
.PP
Returns the name of the xsl file to transform the response data.
.PP
\&\s-1XSLT 1.0\s0 requires that the xsl file must declare the a prefix
with the default namespace from the \s-1XML\s0 data it transforms.  
Because the default namespace in all JUNOScript responses 
contains version information, the xsl file will have to 
adapt to the default namespace from routers running different 
versions of \s-1JUNOS.\s0
.PP
This subroutine takes three input parameters: the prefix name ($NAMESPACE), 
xsl input file name ($XSLFILE) and xsl temp file name ($TMPFILE).  It replaces 
the value of the prefix attribute in the input xsl file with 
the default namespace from the JUNOScript response and puts 
the result in the output xsl file.  In some cases, it may
have to remove the prefix for default namespace from the
xsl input file because some JUNOScript responses from old versions
of \s-1JUNOS\s0 may not contain default namespace (e.g. response for
<get\-bgp\-neighbor\-information> from pre\-5.1 \s-1JUNOS\s0).
.PP
If all is well, the name of the xsl file for transformation 
is returned.  Otherwise, undef is returned.
Please note that the returned xsl file can be the xsl input file or the 
temp file depending whether any changes are made on the
xsl input file for transformation.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 2
\&    XML::DOM
\&    JUNOS::Device
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Juniper Junoscript Perl Team, send bug reports, hints, tips, and suggestions 
to support@juniper.net.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001 Juniper Networks, Inc.
All rights reserved.
