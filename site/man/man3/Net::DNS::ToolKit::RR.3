.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::DNS::ToolKit::RR 3"
.TH Net::DNS::ToolKit::RR 3 "2013-05-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::ToolKit::RR \- Resource Record class loader
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::DNS::ToolKit::RR;
\&
\&  ($get,$put,$parse) = new Net::DNS::ToolKit::RR;
\&        or
\&  ($get,$put,$parse) = Net::DNS::ToolKit::RR\->new;
\&
\&        retrieve the next record (type unknown)
\&  ($newoff,$name,$type,$class,$ttl,$rdlength,$rdata,...)
\&        = $get\->next(\e$buffer,$offset);
\&
\&        parse the current record (type in input fields)
\&  ($name,$typeTXT,$classTXT,$ttlTXT,$rdlength,$RDATA,...)
\&        = $parse\->RR($name,$type,$class,$ttl,$rdlength,
\&                        $rdata,...);
\&
\&  ($newoff,@dnptrs)=$put\->XYZ(\e$buffer,$offset,\e@dnptrs,
\&        $name,$type,$class,$ttl,$rdata,...);
\&
\&  The \*(Aqget\*(Aq and \*(Aqparse\*(Aq operations can also be done
\&  by specific record type...
\&  ...but why would you use them instead of \*(Aqnext\*(Aq & \*(AqRR\*(Aq?
\&
\&  ($newoff,$name,$type,$class,$ttl,$rdlength,$rdata,...)
\&        = $get\->XYZ(\e$buffer,$offset);
\&
\&  ($name,$typeTXT,$classTXT,$ttlTXT,$rdlength,$RDATA,...)
\&        = $parse\->XYZ($name,$type,$class,$ttl,$rdlength,
\&                        $rdata,...);
\&
\&        or you can use the individual methods 
\&        directly without calling "new"
\&
\&  @output=Net::DNS::ToolKit::RR::get\->next(@input);
\&  @output=Net::DNS::ToolKit::RR::get\->XYZ(@input);
\&  @output=Net::DNS::ToolKit::RR::put\->XYZ(@input);
\&  @output=Net::DNS::ToolKit::RR::parse\->RR(@input);
\&  @output=Net::DNS::ToolKit::RR::parse\->XYZ(@input);
.Ve
.PP
The Question section is a special case:
.PP
.Vb 7
\&  ($newoff,$name,type,class) = 
\&        $get\->Question(\e$buffer,$offset);
\&  ($newoff,@dnptrs) = 
\&        $put\->Question(\e$buffer,$offset,
\&        $name,$type,$class,\e@dnptrs);
\&  ($name,$typeTXT,$classTXT) =
\&        $parse\->Question($name,$type,$class);
.Ve
.SH "ALTERNATE PUT METHOD SYNOPSIS"
.IX Header "ALTERNATE PUT METHOD SYNOPSIS"
An alternate method for \fBput\fR is available for class specific
submissions. This eliminates the need to specify \s-1TYPE\s0 and \s-1CLASS\s0 when doing a
put. The generic form of a put command using this method is shown below but
\&\s-1NOT\s0 detailed in the method descriptions.
.PP
.Vb 3
\&  ($get,$put,$parse) = new Net::DNS::ToolKit::RR(class_type);
\&        or
\&  ($get,$put,$parse) = Net::DNS::ToolKit::RR\->new(C_IN);
.Ve
.PP
The generic form of a \f(CW\*(C`put\*(C'\fR operation then becomes:
.PP
.Vb 2
\&  ($newoff,@dnptrs)=$put\->XYZ(\e$buffer,$offset,\e@dnptrs,
\&        $name,$ttl,$rdate,...)
.Ve
.PP
The only class currently supported at this time is C_IN.
.PP
\&\s-1NOTE:\s0 the use of this alternate method changes the number of required
arguments to \s-1ALL\s0 put \s-1RR\s0 operations. These changes are \s-1NOT\s0 noted below in the
method descriptions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBNet::DNS::ToolKit::RR\fR is the class loader for Resource Record classes. 
It provides an extensible wrapper for existing
classes as well as the framework to easily add new \s-1RR\s0 classes. See:
\&\fBNet::DNS::ToolKit::RR::Template\fR
.PP
.Vb 1
\&  From RFC 1035
\&
\&  3.2.1. Format
\&
\&  All RRs have the same top level format shown below:
\&
\&                                    1  1  1  1  1  1
\&      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                      NAME                     |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                      TYPE                     |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                     CLASS                     |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                      TTL                      |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                   RDLENGTH                    |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-|
\&    |                     RDATA                     |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&
\&  NAME  an owner name, i.e., the name of the node to which this
\&        resource record pertains.
\&
\&  TYPE  two octets containing one of the RR TYPE codes.
\&
\&  CLASS two octets containing one of the RR CLASS codes.
\&
\&  TTL   a 32 bit signed integer that specifies the time interval
\&        that the resource record may be cached before the source
\&        of the information should again be consulted.  Zero
\&        values are interpreted to mean that the RR can only be
\&        used for the transaction in progress, and should not be
\&        cached.  For example, SOA records are always distributed
\&        with a zero TTL to prohibit caching.  Zero values can
\&        also be used for extremely volatile data.
\&
\&  RDLENGTH an unsigned 16 bit integer that specifies the length
\&        in octets of the RDATA field.
\&
\&  RDATA a variable length string of octets that describes the
\&        resource.  The format of this information varies
\&        according to the TYPE and CLASS of the resource record.
.Ve
.IP "\(bu" 4
($get,$put,$parse) = new Net::DNS::ToolKit::RR;
.Sp
Retrieves the method pointers to \fBget\fR, \fBput\fR, and \fBparse\fR for Queston
section and Resource Records of a particular type.
.IP "\(bu" 4
($newoff,@common,$rdata,...) =
	\f(CW$get\fR\->next(\e$buffer,$offset);
.Sp
Get the next Resource Record.
.Sp
.Vb 2
\&  input:        pointer to buffer,
\&                offset into buffer
\&
\&  returns:      offset to next RR or section,
\&                (items common to all RR\*(Aqs)
\&   i.e. $name,$type,$class,$ttl,$rdlength,
\&                $rdata,.... for this RR
\&            or  undef if the RR is unsupported.
.Ve
.Sp
\&\s-1HERE IS THE OPPORTUNITY FOR YOU TO ADD TO THIS PACKAGE.\s0
If your \s-1RR\s0 of interest is not supported, see:
.Sp
.Vb 2
\&  Net::DNS::ToolKit::RR::Template in:
\&  .../Net/DNS/ToolKit/Template/Template.pm
.Ve
.Sp
Build the support for your Resource Record and submit it to \s-1CPAN\s0 as an
extension to this package.
.Sp
UN-IMPLEMENTED methods: \f(CW$get\fR\->[unimplemented] returns a correct offset to
the following \s-1RR,\s0 correct \f(CW@common\fR data and a single \f(CW$rdata\fR element
containing a null ... \*(L"\e0\*(R" to be precise. This works as either a numeric 0
(zero) or an end of string.
.IP "\(bu" 4
($newoff,@dnptrs)=$put\->\s-1XYZ\s0(\e$buffer,$offset,\e@dnptrs,
        \f(CW$name\fR,$type,$class,$ttl,$rdata,...);
.Sp
Append a resource record of type \s-1XYZ\s0 to the current buffer. This is the
generic form of a \fBput\fR.
.Sp
.Vb 7
\&  input:        pointer to buffer,
\&                offset, [should be end of buffer]
\&                pointer to compressed name array,
\&                (items common to all RR\*(Aqs)
\&   i.e. $name,$type,$class,$ttl,
\&                $rdata,.... for this RR
\&                in binary form if appropriate
\&
\&  returns:      offset to end of RR,
\&                new pointer array,
\&           or   empty list if the RR type is
\&                unsupported
\&
\&  See: note above about writing new RR\*(Aqs
.Ve
.Sp
UN-IMPLEMENTED methods: \f(CW$put\fR\->[unimplemented] fails miserably with a \s-1DIE\s0
statement identifying the offending method.
.IP "\(bu" 4
(@COMMON,$RDATA) = \f(CW$parse\fR\->\s-1XYZ\s0(@common,$rdata,...);
.Sp
Convert non-printable and numeric data common to all records and the \s-1RR\s0
specific \fBrdata\fR into ascii text. In many cases this is a null
operation. i.e. for a \s-1TXT\s0 record. However, for a \s-1RR\s0 of type \fBA\fR, the
operation would be as follows:
.Sp
.Vb 2
\&        EXAMPLE
\&Common:
\&
\&  name       is already text.
\&  type       numeric to text
\&  class      numeric to text
\&  ttl        numeric to text
\&  rdlength   is a number
\&  rdata      RR specific conversion
.Ve
.Sp
Resource Record \fBA\fR returns \f(CW$rdata\fR containing a packed IPv4 network
address. The parse operation would be:
.Sp
input:
.Sp
.Vb 6
\&  name       foo.bar.com
\&  type       1
\&  class      1
\&  ttl        123
\&  rdlength   4
\&  rdata      a packed IPv4 address
.Ve
.Sp
output:
.Sp
.Vb 6
\&  name       foo.bar.com
\&  type       T_A
\&  class      C_IN
\&  ttl        123 # 2m 3s
\&  rdlength   4
\&  rdata      192.168.20.40
.Ve
.Sp
The rdata conversion is implemented internally as:
.Sp
.Vb 1
\&  $dotquad = inet_ntoa($networkaddress);
\&
\&  where $dotquad is a printable IP address like
\&        192.168.20.55
.Ve
.Sp
UN-IMPLEMENTED methods: \f(CW$parse\fR\->[unimplemented] returns correct \f(CW@common\fR
elements insofar as the type and class are present in Net::DNS::Codes.
Other elements are passed through unchanged. i.e. garbage-in, garbage-out.
.IP "\(bu" 4
($newoff,$name,type,class) =
	\f(CW$get\fR\->Question(\e$buffer,$offset);
.Sp
.Vb 1
\&  Get the Question.
\&
\&  input:        pointer to buffer,
\&                offset
\&  returns:      domain name,
\&                question type,
\&                question class
.Ve
.IP "\(bu" 4
($newoff,@dnptrs) =
	\f(CW$put\fR\->Question(\e$buffer,$offset,
	\f(CW$name\fR,$type,$class,\e@dnptrs);
.Sp
Append a question to the \f(CW$buffer\fR. Returns a new pointer array for compressed
names and the offset to the next \s-1RR.\s0
.Sp
\&\s-1NOTE:\s0 it is up to the user to update the question count. See: put_qdcount
.Sp
Since the \fBquestion\fR usually is the first record to be appended to the
buffer, \f(CW@dnptrs\fR may be ommitted. See the details at dn_comp.
.Sp
Usage: ($newoff,@dnptrs)=$put\->Question(\e$buffer,$offset,
	\f(CW$name\fR,$type,$class);
.Sp
.Vb 10
\&  input:        pointer to buffer,
\&                offset into buffer,
\&                domain name,
\&                question type,
\&                question class,
\&                pointer to array of
\&                  previously compressed names,
\&  returns:      offset to next record,
\&                updated array of offsets to
\&                  previous compressed names
.Ve
.IP "\(bu" 4
($name,$typeTXT,$classTXT) =
	\f(CW$parse\fR\->Question($name,$type,$class);
.Sp
Convert non-printable and numeric data
into ascii text.
.Sp
.Vb 6
\&  input:        domain name,
\&                question type (numeric)
\&                question class (numeric)
\&  returns:      domain name,
\&                type TEXT,
\&                class TEXT
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.Vb 1
\&        Net::DNS::ToolKit
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
.Vb 1
\&        none
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Robinton <michael@bizsystems.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&    Copyright 2003 \- 2011, Michael Robinton <michael@bizsystems.com>
.Ve
.PP
All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of either:
.PP
.Vb 3
\&  a) the GNU General Public License as published by the Free
\&  Software Foundation; either version 2, or (at your option) any
\&  later version, or
\&
\&  b) the "Artistic License" which comes with this distribution.
.Ve
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of 
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See either    
the \s-1GNU\s0 General Public License or the Artistic License for more details.
.PP
You should have received a copy of the Artistic License with this
distribution, in the file named \*(L"Artistic\*(R".  If not, I'll be glad to provide
one.
.PP
You should also have received a copy of the \s-1GNU\s0 General Public License
along with this program in the file named \*(L"Copying\*(R". If not, write to the
.PP
.Vb 3
\&        Free Software Foundation, Inc.                        
\&        59 Temple Place, Suite 330
\&        Boston, MA  02111\-1307, USA
.Ve
.PP
or visit their web page on the internet at:
.PP
.Vb 1
\&        http://www.gnu.org/copyleft/gpl.html.
.Ve
.SH "See also:"
.IX Header "See also:"
\&\fBNet::DNS::Codes\fR\|(3), \fBNet::DNS::ToolKit\fR\|(3), \fBNet::DNS::ToolKit::RR::Template\fR\|(3)
