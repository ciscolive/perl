.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::App::ParsedArgv 3"
.TH MooseX::App::ParsedArgv 3 "2019-05-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::App::ParsedArgv \- Parses @ARGV
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use MooseX::App::ParsedArgv;
\& my $argv = MooseX::App::ParsedArgv\->instance;
\& 
\& foreach my $option ($argv\->available(\*(Aqoption\*(Aq)) {
\&     say "Parsed ".$option\->key;
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a helper class that holds all options parsed from \f(CW@ARGV\fR. It is
implemented as a singleton. Unless you are developing a MooseX::App plugin
you usually do not need to interact with this class.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Create a new MooseX::App::ParsedArgv instance. Needs to be called as soon
as possible.
.SS "instance"
.IX Subsection "instance"
Get the current MooseX::App::ParsedArgv instance. If there is no instance
a new one will be created.
.SS "argv"
.IX Subsection "argv"
Accessor for the initinal \f(CW@ARGV\fR.
.SS "hints"
.IX Subsection "hints"
ArrayRef of attributes that tells the parser which attributes should be
regarded as flags without values.
.SS "first_argv"
.IX Subsection "first_argv"
Shifts the current first element from \f(CW@ARGV\fR.
.SS "available"
.IX Subsection "available"
.Vb 3
\& my @options = $self\->available($type);
\& OR
\& my @options = $self\->available();
.Ve
.PP
Returns an array of all parsed options or parameters that have not yet been consumed.
The array elements will be MooseX::App::ParsedArgv::Element objects.
.SS "consume"
.IX Subsection "consume"
.Vb 3
\& my $option = $self\->consume($type);
\& OR
\& my $option = $self\->consume();
.Ve
.PP
Returns the first option/parameter of the local \f(CW@ARGV\fR that has not yet been
consumed as a MooseX::App::ParsedArgv::Element object.
.SS "elements"
.IX Subsection "elements"
Returns all parsed options and parameters.
.SS "extra"
.IX Subsection "extra"
Returns an array reference of unconsumed positional parameters and
extra values.
