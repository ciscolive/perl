.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MIME::Detect 3"
.TH MIME::Detect 3 "2018-11-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MIME::Detect \- MIME file type identification
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $mime = MIME::Detect\->new();
\&
\&  for my $file (@ARGV) {
\&    print sprintf "%s: %s\en", $file, $_\->mime_type
\&        for $mime\->mime_types($file);
\&  };
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """MIME::Detect\->new( ... )"""
.el .SS "\f(CWMIME::Detect\->new( ... )\fP"
.IX Subsection "MIME::Detect->new( ... )"
.Vb 1
\&  my $mime = MIME::Detect\->new();
.Ve
.PP
Creates a new instance and reads the database distributed with this module.
.PP
.Vb 6
\&  my $mime = MIME::Detect\->new(
\&      files => [
\&          \*(Aq/usr/share/freedesktop.org/mimeinfo.xml\*(Aq,
\&          \*(Aqt/mimeinfo.xml\*(Aq,
\&      ],
\&  );
.Ve
.ie n .SS """$mime\->read_database %options"""
.el .SS "\f(CW$mime\->read_database %options\fP"
.IX Subsection "$mime->read_database %options"
.Vb 7
\&  $mime\->read_database(
\&      xml => MIME::Detect::FreeDesktopOrgDB\->get_xml,
\&      files => [
\&          \*(Aqmymime/mymime.xml\*(Aq,
\&          \*(Aq/usr/share/freedesktop.org/mime.xml\*(Aq,
\&      ],
\&  );
.Ve
.PP
If you want rules in addition to the default
database included with the distribution, you can load the rules from another file.
Passing in multiple filenames will join the multiple
databases. Duplicate file type definitions will not be detected
and will be returned as duplicates.
.PP
The rules will be sorted according to the priority specified in the database
file(s).
.PP
By default, the \s-1XML\s0 database stored alongside
MIME::Detect::FreeDesktopOrgDB
will be loaded after all custom files have been loaded.
To pass in a different fallback database, either pass in a reference
to the \s-1XML\s0 string or the name of a package that has an \f(CW\*(C`get_xml\*(C'\fR subroutine.
.PP
To prevent loading the default database, pass undef
for the \f(CW\*(C`xml\*(C'\fR key.
.ie n .SS """$mime\->mime_types"""
.el .SS "\f(CW$mime\->mime_types\fP"
.IX Subsection "$mime->mime_types"
.Vb 4
\&    my @types = $mime\->mime_types( \*(Aqsome/file\*(Aq );
\&    for( @types ) {
\&        print $type\->mime_type, "\en";
\&    };
.Ve
.PP
Returns the list of \s-1MIME\s0 types according to their priority.
The first type is the most likely. The returned objects
are of type MIME::Detect::Type.
.ie n .SS """$mime\->mime_type"""
.el .SS "\f(CW$mime\->mime_type\fP"
.IX Subsection "$mime->mime_type"
.Vb 3
\&    my $type = $mime\->mime_type( \*(Aqsome/file\*(Aq );
\&    print $type\->mime_type, "\en"
\&        if $type;
.Ve
.PP
Returns the most likely type of a file as MIME::Detect::Type. Returns
\&\f(CW\*(C`undef\*(C'\fR if no file type can be determined.
.ie n .SS """$mime\->mime_types_from_name"""
.el .SS "\f(CW$mime\->mime_types_from_name\fP"
.IX Subsection "$mime->mime_types_from_name"
.Vb 3
\&    my $type = $mime\->mime_types_from_name( \*(Aqsome/file.ext\*(Aq );
\&    print $type\->mime_type, "\en"
\&        if $type;
.Ve
.PP
Returns the list of \s-1MIME\s0 types for a file name based on the extension
according to their priority.
The first type is the most likely. The returned objects
are of type MIME::Detect::Type.
.ie n .SS """$mime\->mime_type_from_name"""
.el .SS "\f(CW$mime\->mime_type_from_name\fP"
.IX Subsection "$mime->mime_type_from_name"
.Vb 3
\&    my $type = $mime\->mime_type_from_name( \*(Aqsome/file.ext\*(Aq );
\&    print $type\->mime_type, "\en"
\&        if $type;
.Ve
.PP
Returns the most likely type of a file name as MIME::Detect::Type. Returns
\&\f(CW\*(C`undef\*(C'\fR if no file type can be determined.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<https://www.freedesktop.org/wiki/Software/shared\-mime\-info/> \- the website
where the \s-1XML\s0 file is distributed
.PP
File::MimeInfo \- module to read your locally installed and converted \s-1MIME\s0 database
.PP
File::LibMagic \- if you can install \f(CW\*(C`libmagic\*(C'\fR and the appropriate \f(CW\*(C`magic\*(C'\fR files
.PP
File::MMagic \- if you have the appropriate \f(CW\*(C`magic\*(C'\fR files
.PP
File::MMagic::XS \- if you have the appropriate \f(CW\*(C`magic\*(C'\fR files but want more speed
.PP
File::Type \- inlines its database, unsupported since 2004?
.PP
File::Type::WebImages \- if you're only interested in determining whether
a file is an image or not
.PP
MIME::Types \- for extension-based detection
.SH "REPOSITORY"
.IX Header "REPOSITORY"
The public repository of this module is 
<http://github.com/Corion/mime\-detect>.
.SH "SUPPORT"
.IX Header "SUPPORT"
The public support forum of this module is
<https://perlmonks.org/>.
.SH "BUG TRACKER"
.IX Header "BUG TRACKER"
Please report bugs in this module via the \s-1RT CPAN\s0 bug queue at
<https://rt.cpan.org/Public/Dist/Display.html?Name=MIME\-Detect>
or via mail to mime\-detect\-Bugs@rt.cpan.org.
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR
.SH "COPYRIGHT (c)"
.IX Header "COPYRIGHT (c)"
Copyright 2015\-2018 by Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
This module is released under the same terms as Perl itself.
