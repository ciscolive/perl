.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DTC::Object 3"
.TH Infoblox::DTC::Object 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DTC::Object \- An object for all managed objects on DNS traffic control devices.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a read-only object for all managed objects on \s-1DNS\s0 traffic control devices.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to an object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific object:
\&
\&  comment       \- Optional. The comment.
\&  name          \- Optional. The object name.
\&  type          \- Optional. The object type. The valid values are \*(AqLBDN\*(Aq, \*(AqPOOL\*(Aq and \*(AqSERVER\*(Aq.
\&  status_member \- Optional. Optional. The member that provides the health status for the object. The default is Grid.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&    object => \*(AqInfoblox::DTC::Object\*(Aq,
\&    name   => \*(Aqdtc_device\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search a specific object:
\&
\&  comment       \- Optional. The comment.
\&  name          \- Optional. The object name.
\&  type          \- Optional. The object type. The valid values are \*(AqLBDN\*(Aq, \*(AqPOOL\*(Aq and \*(AqSERVER\*(Aq.
\&  status_member \- Optional. The member that provides the health status for the object. The default is Grid.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->search(
\&    object => \*(AqInfoblox::DTC::Object\*(Aq,
\&    name   => \*(Aqdtc_device\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to retrieve the attribute values of an object.
.SS "abstract_type( )"
.IX Subsection "abstract_type( )"
.RS 4
Use this method to retrieve an abstract object type. This method does not support any argument because the attribute is read-only and is set by the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $value = $object\->abstract_type();
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to retrieve a descriptive comment. This method does not support any argument because the attribute is read-only and is set by the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $value = $object\->comment();
.Ve
.RE
.RS 4
.RE
.SS "display_type( )"
.IX Subsection "display_type( )"
.RS 4
Use this method to retrieve an object type. This method does not support any argument because the attribute is read-only and is set by the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $value = $object\->display_type();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to retrieve the extensible attributes associated with an object object. This attribute is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get extattrs
\& my $ref_extattrs = $object\->extattrs();
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to retrieve the extensible attributes associated with an object. This method does not support any argument because the attribute is read-only and is set by the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $value = $object\->extensible_attributes();
.Ve
.RE
.RS 4
.RE
.SS "ipv4_address_list( )"
.IX Subsection "ipv4_address_list( )"
.RS 4
Use this method to retrieve the IPv4 addresses for display. This method does not support any argument because the attribute is read-only and is set by the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $value = $object\->ipv4_address_list();
.Ve
.RE
.RS 4
.RE
.SS "ipv6_address_list( )"
.IX Subsection "ipv6_address_list( )"
.RS 4
Use this method to retrieve the IPv6 addresses for display. This method does not support any argument because the attribute is read-only and is set by the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $value = $object\->ipv6_address_list();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to retrieve an object name. This method does not support any argument because the attribute is read-only and is set by the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $value = $object\->name();
.Ve
.RE
.RS 4
.RE
.SS "object( )"
.IX Subsection "object( )"
.RS 4
Use this method to retrieve an object. This method does not support any argument because the attribute is read-only and is set by the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::DTC::Pool, Infoblox::DTC::Server or Infoblox::DTC::LBDN object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $value = $object\->object();
.Ve
.RE
.RS 4
.RE
.SS "status( )"
.IX Subsection "status( )"
.RS 4
Use this method to retrieve the current status of an object. This method does not support any argument because the attribute is read-only and is set by the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1BLUE\s0', '\s-1GRAY\s0', '\s-1GREEN\s0', '\s-1NONE\s0', '\s-1RED\s0' or '\s-1YELLOW\s0'.
.Sp
.Vb 10
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& |  GREEN        |  Working, OK                  |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& |  YELLOW       |  Warning                      |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& |  RED          |  Failed, Error                |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& |  BLUE         |  Transitional, Connecting     |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& |  GRAY         |  Disabled                     |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& |  NONE (BLACK) |  Inactive, Offline, Unknown   |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $value = $object\->status();
.Ve
.RE
.RS 4
.RE
.SS "status_time( )"
.IX Subsection "status_time( )"
.RS 4
Use this method to retrieve the timestamp of the object's current status. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $value = $object\->status_time();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,
Infoblox::DTC::Pool,
Infoblox::DTC::Server,
Infoblox::DTC::LBDN
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
