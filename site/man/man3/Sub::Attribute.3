.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Sub::Attribute 3"
.TH Sub::Attribute 3 "2018-10-31" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Sub::Attribute \- Reliable subroutine attribute handlers
.SH "VERSION"
.IX Header "VERSION"
This document describes Sub::Attribute version 0.05.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        package Attribute::Foo;
\&        use Sub::Attribute;
\&
\&        sub Foo :ATTR_SUB{
\&                my($class, $sym_ref, $code_ref, $attr_name, $attr_data) = @_;
\&
\&                # ...
\&        }
\&
\&        # and later
\&        package main;
\&        use parent qw(Attribute::Foo);
\&
\&        sub something :Foo(xyzzy){
\&                # ...
\&        }
\&        # apply: _\|_PACKAGE_\|_\->Foo(\e*something, \e&something, \*(AqFoo\*(Aq, \*(Aqxyzzy\*(Aq)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Sub::Attribute\*(C'\fR is a role to define attribute handlers for specific
subroutine attributes.
.PP
The feature of this module is similar to that of \f(CW\*(C`Attribute::Handlers\*(C'\fR, but
has less functionality and more reliability.
That is, while \f(CW\*(C`Attribute::Handlers\*(C'\fR provides many options for \f(CW\*(C`ATTR(CODE)\*(C'\fR,
\&\f(CW\*(C`Sub::Attribute\*(C'\fR provides no options for \f(CW\*(C`ATTR_SUB\*(C'\fR.
However, the attribute handlers defined by \f(CW\*(C`Sub::Attribute\*(C'\fR are always called
with informative arguments. \f(CW\*(C`Attribute::Handlers\*(C'\fR's \f(CW\*(C`ATTR(CODE)\*(C'\fR is not called
in run-time \f(CW\*(C`eval()\*(C'\fR, so \f(CW\*(C`ATTR(CODE)\*(C'\fR is not reliable.
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "The \fB\s-1ATTR_SUB\s0\fP meta attribute"
.IX Subsection "The ATTR_SUB meta attribute"
Defines a method as an subroutine attribute handler.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
.ie n .SS "$ENV{\s-1SUB_ATTRIBUTE_DEBUG\s0}"
.el .SS "\f(CW$ENV\fP{\s-1SUB_ATTRIBUTE_DEBUG\s0}"
.IX Subsection "$ENV{SUB_ATTRIBUTE_DEBUG}"
If true, reports how attributes are applied, using \f(CW\*(C`warn()\*(C'\fR function.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Perl 5.8.1 or later, and a C compiler.
.SH "BUGS"
.IX Header "BUGS"
No bugs have been reported.
.PP
Please report any bugs or feature requests to the author.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
attributes.
.PP
\&\*(L"Subroutine Attributes\*(R" in perlsub.
.PP
Attribute::Handlers.
.SH "AUTHOR"
.IX Header "AUTHOR"
Goro Fuji (gfx) <gfuji(at)cpan.org>.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2009\-20010, Goro Fuji (gfx). Some rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
