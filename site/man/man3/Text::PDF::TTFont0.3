.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::PDF::TTFont0 3"
.TH Text::PDF::TTFont0 3 "2016-08-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::PDF::TTFont0 \- Inherits from PDF::Dict and represents a TrueType Type 0
font within a PDF file.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A font consists of two primary parts in a \s-1PDF\s0 file: the header and the font
descriptor. Whilst two fonts may share font descriptors, they will have their
own header dictionaries including encoding and widhth information.
.SH "INSTANCE VARIABLES"
.IX Header "INSTANCE VARIABLES"
There are no instance variables beyond the variables which directly correspond
to entries in the appropriate \s-1PDF\s0 dictionaries.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "Text::PDF::TTFont\->new($parent, $fontfname. $pdfname)"
.el .SS "Text::PDF::TTFont\->new($parent, \f(CW$fontfname\fP. \f(CW$pdfname\fP)"
.IX Subsection "Text::PDF::TTFont->new($parent, $fontfname. $pdfname)"
Creates a new font resource for the given fontfile. This includes the font
descriptor and the font stream. The \f(CW$pdfname\fR is the name by which this font
resource will be known throughout a particular \s-1PDF\s0 file.
.PP
All font resources are full \s-1PDF\s0 objects.
.SS "out_text($text)"
.IX Subsection "out_text($text)"
Returns the string to be put into a content stream for text to be output in this font.
The text is assumed to be \s-1UTF8\s0 encoded and the return string is a glyph sequence for
the text. If subsetting is enabled, then all the glyphs returned are also marked for
output.
.SS "out_glyphs(@n)"
.IX Subsection "out_glyphs(@n)"
Marks the glyphs as being needed in the output font when subsetting. Returns a string
to render the glyphs as specified.
.SS "width($text)"
.IX Subsection "width($text)"
Returns the width of the string, assuming it to be \s-1UTF8\s0 encoded.
.ie n .SS "outobjdeep($fh, $pdf, %opts)"
.el .SS "outobjdeep($fh, \f(CW$pdf\fP, \f(CW%opts\fP)"
.IX Subsection "outobjdeep($fh, $pdf, %opts)"
Handles the creation of the font stream including subsetting at this point. So
if you get this far, that's it for subsetting.
.SS "ship_out($pdf)"
.IX Subsection "ship_out($pdf)"
Ship this font out to the given \f(CW$pdf\fR file context
.SS "empty"
.IX Subsection "empty"
Empty the font of as much as possible in order to save memory
