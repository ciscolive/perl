.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::MSServer 3"
.TH Infoblox::DNS::MSServer 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::MSServer \- Microsoft (r) DNS Server object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Microsoft \s-1DNS\s0 Server object is a Windows-based server that is running the \s-1DNS\s0 service and is synchronized with an Infoblox grid. As such, the Microsoft \s-1DNS\s0 server shares its \s-1DNS\s0 data with the Infoblox \s-1DNS\s0 servers in a grid.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 6
\& my $msserver = Infoblox::DNS::MSServer\->new(
\&     address       => $string,           #Required
\&     ipv4addr      => $string,           #Required
\&     name          => $string,           #Required
\&     stealth       => "true" | "false",  #Optional
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to a Microsoft \s-1DNS\s0 Server object.
.SS "Infoblox::DNS::Zone\->multiple_primaries( )"
.IX Subsection "Infoblox::DNS::Zone->multiple_primaries( )"
.RS 4
Use any of these functions to assign a Microsoft \s-1DNS\s0 server as the primary server of a zone. See Infoblox::DNS::Zone\->\fBmultiple_primaries()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& my $msserver1 = Infoblox::DNS::MSServer\->new(
\&     address        => "10.0.0.1",
\&     ipv4addr       => "10.0.0.1",
\&     name           => "hostname.com",
\& );
\&
\& unless($msserver1) {
\&      die("Construct msserver failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Msserver object created successfully\en";
\&
\& #Create the Zone object with this Microsoft DNS server
\& my $firstzone = Infoblox::DNS::Zone\->new(
\&     name        => "infoblox.com",
\&     multiple_primaries => [$msserver1],
\& );
\&
\& my $response = $session\->add($firstzone)
\& unless($response) {
\&      die("Add zone failed: ",
\&            session\->status_code() . ":" . session\->status_detail());
\& }
\& print "DNS MS Server object added to the zone successfully\en";
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DNS::Zone\->secondaries( )"
.IX Subsection "Infoblox::DNS::Zone->secondaries( )"
.RS 4
Use this function to specify an Microsoft \s-1DNS\s0 server as the secondary server to a zone. See Infoblox::DNS::Zone\->\fBsecondaries()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& my $msserver1 = Infoblox::DNS::MSServer\->new(
\&     address        => "10.0.0.1",
\&     ipv4addr       => "10.0.0.1",
\&     name           => "hostname.com",
\& );
\&
\& unless($msserver1) {
\&      die("Construct msserver failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Msserver object created successfully\en";
\&
\& #Create the Zone object with this member
\& my $firstzone = Infoblox::DNS::Zone\->new(
\&     name        => "infoblox.com",
\&     multiple_primaries => [$member1],
\&     secondaries => [ $msserver2 ] ,
\& );
\&
\& my $response = $session\->add($firstzone)
\& unless($response) {
\&      die("Add zone failed: ",
\&            session\->status_code() . ":" . session\->status_detail());
\& }
\&
\& print "DNS MS server member object added to the zone successfully\en";
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DNS::Zone\->stub_members( )"
.IX Subsection "Infoblox::DNS::Zone->stub_members( )"
.RS 4
Use this function to assign a Microsoft \s-1DNS\s0 server to a stub zone. See Infoblox::DNS::Zone\->\fBstub_members()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& my $msserver1 = Infoblox::DNS::MSServer\->new(
\&     address        => "10.0.0.1",
\&     ipv4addr       => "10.0.0.1",
\&     name           => "hostname.com",
\& );
\&
\& unless($msserver1) {
\&      die("Construct msserver failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Msserver object created successfully\en";
\&
\& #Create the Zone object with this member
\& my $firstzone = Infoblox::DNS::Zone\->new(
\&     name        => "infoblox.com",
\&     stub_members => [ $msserver2 ] ,
\& );
\&
\& my $response = $session\->add($firstzone)
\& unless($response) {
\&      die("Add zone failed: ",
\&            session\->status_code() . ":" . session\->status_detail());
\& }
\&
\& print "DNS MS server member object added to the zone successfully\en";
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a \s-1DNS\s0 Member object.
.SS "address( )"
.IX Subsection "address( )"
.RS 4
Use this method to set or retrieve the IPv4 address or \s-1FQDN\s0 of the member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
IPv4 address (32 bits) or \s-1FQDN\s0 of the member.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get address
\& my $address = $member\->address();
\& #Modify address
\& $member\->address("192.168.1.3");
.Ve
.RE
.RS 4
.RE
.SS "ipv4addr( )"
.IX Subsection "ipv4addr( )"
.RS 4
Use this method to set or retrieve the member IPv4 address that is published in the glue A record when setting this Microsoft \s-1DNS\s0 server as a name server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
IPv4 address (32 bits) of the member.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv4addr
\& my $ipv4addr = $member\->ipv4addr();
\& #Modify ipv4addr
\& $member\->ipv4addr("192.168.1.3");
.Ve
.RE
.RS 4
.RE
.SS "ms_parent_delegated( )"
.IX Subsection "ms_parent_delegated( )"
.RS 4
Use this method to retrieve the ms_parent_delegated flag. If the zone is a delegation and the primary server of the parent zone is a Microsoft server, this flag is set to \*(L"true\*(R" if the \s-1FQDN\s0 and \s-1IP\s0 address in the delegation zone's \s-1NS\s0 record matches the \s-1FQDN\s0 and \s-1IP\s0 address of its authoritative name server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_parent_delegated
\& my $ms_parent_delegated = $member\->ms_parent_delegated();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the member \s-1FQDN\s0 that is used when setting this Microsoft \s-1DNS\s0 server as a name server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The member's \s-1FQDN.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $member\->name();
\& #Modify name
\& $member\->name("hostname.com");
.Ve
.RE
.RS 4
.RE
.SS "stealth( )"
.IX Subsection "stealth( )"
.RS 4
Use this method to set or retrieve the \*(L"stealth\*(R" flag, which indicates whether this name server is in stealth or normal mode.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the stealth flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get stealth
\& my $stealth = $member\->stealth();
\& #Modify stealth
\& $member\->stealth("true");
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::TSIGKey, Infoblox::Session\->\fBadd()\fR,Infoblox::Session\->\fBmodify()\fR,Infoblox::Session\->\fBsearch()\fR,Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
