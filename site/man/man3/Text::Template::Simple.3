.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::Template::Simple 3"
.TH Text::Template::Simple 3 "2018-12-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Template::Simple
.SH "VERSION"
.IX Header "VERSION"
version 0.91
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&   use Text::Template::Simple;
\&   my $tts = Text::Template::Simple\->new();
\&   print $tts\->compile( $FILEHANDLE );
\&   print $tts\->compile(\*(AqHello, your perl is at <%= $^X %>\*(Aq);
\&   print $tts\->compile(
\&            \*(Aqhello.tts\*(Aq, # the template file
\&            [ name => \*(AqBurak\*(Aq, location => \*(AqIstanbul\*(Aq ]
\&         );
.Ve
.PP
Where \f(CW\*(C`hello.tts\*(C'\fR has this content:
.PP
.Vb 4
\&   <% my %p = @_; %>
\&   Hello <%= $p{name} %>,
\&   I hope it\*(Aqs sunny in <%= $p{location} %>.
\&   Local time is <%= scalar localtime time %>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple template module. There is no extra template/mini 
language. Instead, it uses Perl as the template language. Templates
can be cached on disk or inside the memory via the internal cache 
manager. It is also possible to use static/dynamic includes,
pass parameters to includes and apply filters on them.
Also see Text::Template::Simple::API for the full \f(CW\*(C`API\*(C'\fR reference.
.SH "NAME"
Text::Template::Simple \- Simple text template engine
.SH "SYNTAX"
.IX Header "SYNTAX"
Template syntax is very simple. There are few kinds of delimiters:
.IP "\(bu" 4
\&\f(CW\*(C`<% %>\*(C'\fR Code Blocks
.IP "\(bu" 4
\&\f(CW\*(C`<%= %>\*(C'\fR Self-printing Blocks
.IP "\(bu" 4
\&\f(CW\*(C`<%! %>\*(C'\fR Escaped Delimiters
.IP "\(bu" 4
\&\f(CW\*(C`<%+ %>\*(C'\fR Static Include Directives
.IP "\(bu" 4
\&\f(CW\*(C`<%* %>\*(C'\fR Dynamic include directives
.IP "\(bu" 4
\&\f(CW\*(C`<%# %>\*(C'\fR Comment Directives
.IP "\(bu" 4
\&\f(CW\*(C`<%| %>\*(C'\fR Blocks with commands
.PP
A simple example:
.PP
.Vb 3
\&   <% foreach my $x (@foo) { %>
\&      Element is <%= $x %>
\&   <% } %>
.Ve
.PP
Do not directly use \fBprint()\fR statements, since they'll break the template
compilation. Use the self printing \f(CW\*(C`<%= %>\*(C'\fR blocks.
.PP
It is also possible to alter the delimiters:
.PP
.Vb 3
\&   $tts = Text::Template::Simple\->new(
\&      delimiters => [qw/<?perl ?>/],
\&   );
.Ve
.PP
then you can use them inside templates:
.PP
.Vb 6
\&   <?perl
\&      my @foo = qw(bar baz);
\&      foreach my $x (@foo) {
\&   ?>
\&   Element is <?perl= $x ?>
\&   <?perl } ?>
.Ve
.PP
If you need to remove a code temporarily without deleting, or need to add
comments:
.PP
.Vb 8
\&   <%#
\&      This
\&      whole
\&      block
\&      will
\&      be
\&      ignored
\&   %>
.Ve
.PP
If you put a space before the pound sign, the block will be a code block:
.PP
.Vb 4
\&   <%
\&      # this is normal code not a comment directive
\&      my $foo = 42;
\&   %>
.Ve
.PP
If you want to include a text or \fI\s-1HTML\s0\fR file, you can use the
static include directive:
.PP
.Vb 2
\&   <%+ my_other.html %>
\&   <%+ my_other.txt  %>
.Ve
.PP
Included files won't be parsed and included statically. To enable
parsing for the included files, use the dynamic includes:
.PP
.Vb 2
\&   <%* my_other.html %>
\&   <%* my_other.txt  %>
.Ve
.PP
Interpolation is also supported with both kinds of includes, so the following
is valid code:
.PP
.Vb 2
\&   <%+ "/path/to/" . $txt    %>
\&   <%* "/path/to/" . $myfile %>
.Ve
.SS "Chomping"
.IX Subsection "Chomping"
Chomping is the removal of white space before and after your directives. This
can be useful if you're generating plain text (instead of \s-1HTML\s0 which will ignore
spaces most of the time). You can either remove all space or replace multiple
white space with a single space (collapse). Chomping can be enabled per
directive or globally via options to the constructor.
See \*(L"pre_chomp\*(R" in Text::Template::Simple::API and
\&\*(L"post_chomp\*(R" in Text::Template::Simple::API options to
\&\*(L"new\*(R" in Text::Template::Simple::API to globally enable chomping.
.PP
Chomping is enabled with second level commands for all directives. Here is
a list of commands:
.PP
.Vb 3
\&   \-   Chomp
\&   ~   Collapse
\&   ^   No chomp (override global)
.Ve
.PP
All directives can be chomped. Here are some examples:
.PP
Chomp:
.PP
.Vb 7
\&   raw content
\&   <%\- my $foo = 42; \-%>
\&   raw content
\&   <%=\- $foo \-%>
\&   raw content
\&   <%*\- /mt/dynamic.tts  \-%>
\&   raw content
.Ve
.PP
Collapse:
.PP
.Vb 7
\&   raw content
\&   <%~ my $foo = 42; ~%>
\&   raw content
\&   <%=~ $foo ~%>
\&   raw content
\&   <%*~ /mt/dynamic.tts  ~%>
\&   raw content
.Ve
.PP
No chomp:
.PP
.Vb 7
\&   raw content
\&   <%^ my $foo = 42; ^%>
\&   raw content
\&   <%=^ $foo ^%>
\&   raw content
\&   <%*^ /mt/dynamic.tts  ^%>
\&   raw content
.Ve
.PP
It is also possible to mix the chomping types:
.PP
.Vb 7
\&   raw content
\&   <%\- my $foo = 42; ^%>
\&   raw content
\&   <%=^ $foo ~%>
\&   raw content
\&   <%*^ /mt/dynamic.tts  \-%>
\&   raw content
.Ve
.PP
For example this template:
.PP
.Vb 3
\&   Foo
\&   <%\- $prehistoric = $] < 5.008 \-%>
\&   Bar
.Ve
.PP
Will become:
.PP
.Vb 1
\&   FooBar
.Ve
.PP
And this one:
.PP
.Vb 3
\&   Foo
\&   <%~ $prehistoric = $] < 5.008 \-%>
\&   Bar
.Ve
.PP
Will become:
.PP
.Vb 1
\&   Foo Bar
.Ve
.PP
Chomping is inspired by Template Toolkit (mostly the same functionality,
although \f(CW\*(C`TT\*(C'\fR seems to miss collapse/no\-chomp per directive option).
.SS "Accessing Template Names"
.IX Subsection "Accessing Template Names"
You can use \f(CW$0\fR to get the template path/name inside the template:
.PP
.Vb 1
\&   I am <%= $0 %>
.Ve
.SS "Escaping Delimiters"
.IX Subsection "Escaping Delimiters"
If you have to build templates like this:
.PP
.Vb 1
\&   Test: <%abc>
.Ve
.PP
or this:
.PP
.Vb 1
\&   Test: <%abc%>
.Ve
.PP
This will result with a template compilation error. You have to use the
delimiter escape command \f(CW\*(C`!\*(C'\fR:
.PP
.Vb 2
\&   Test: <%!abc>
\&   Test: <%!abc%>
.Ve
.PP
Those will be compiled as:
.PP
.Vb 2
\&   Test: <%abc>
\&   Test: <%abc%>
.Ve
.PP
Alternatively, you can change the default delimiters to solve this issue.
See the \*(L"delimiters\*(R" in Text::Template::Simple::API option for
\&\*(L"new\*(R" in Text::Template::Simple::API for more information on how to
do this.
.SS "Template Parameters"
.IX Subsection "Template Parameters"
You can fetch parameters (passed to compile) in the usual \f(CW\*(C`perl\*(C'\fR way:
.PP
.Vb 5
\&   <%
\&      my $foo = shift;
\&      my %bar = @_;
\&   %>
\&   Baz is <%= $bar{baz} %>
.Ve
.SS "\s-1INCLUDE COMMANDS\s0"
.IX Subsection "INCLUDE COMMANDS"
Include commands are separated by pipes in an include directive.
Currently supported parameters are:
.ie n .IP """PARAM""" 4
.el .IP "\f(CWPARAM\fR" 4
.IX Item "PARAM"
.PD 0
.IP "\s-1FILTER\s0" 4
.IX Item "FILTER"
.IP "\s-1SHARE\s0" 4
.IX Item "SHARE"
.PD
.PP
.Vb 2
\&   <%+ /path/to/static.tts  | FILTER: MyFilter %>
\&   <%* /path/to/dynamic.tts | FILTER: MyFilter | PARAM: test => 123 %>
.Ve
.PP
\&\f(CW\*(C`PARAM\*(C'\fR defines the parameter list to pass to the included file.
\&\f(CW\*(C`FILTER\*(C'\fR defines the list of filters to apply to the output of the include.
\&\f(CW\*(C`SHARE\*(C'\fR used to list the variables to share with the included template when
the monolith option is disabled.
.PP
\fI\s-1INCLUDE FILTERS\s0\fR
.IX Subsection "INCLUDE FILTERS"
.PP
Use the include command \f(CW\*(C`FILTER:\*(C'\fR (notice the colon in the command):
.PP
.Vb 2
\&   <%+ /path/to/static.tts  | FILTER: First, Second        %>
\&   <%* /path/to/dynamic.tts | FILTER: Third, Fourth, Fifth %>
.Ve
.PP
\s-1IMPLEMENTING INCLUDE FILTERS\s0
.IX Subsection "IMPLEMENTING INCLUDE FILTERS"
.PP
Define the filter inside \f(CW\*(C`Text::Template::Simple::Dummy\*(C'\fR with a \f(CW\*(C`filter_\*(C'\fR
prefix:
.PP
.Vb 9
\&   package Text::Template::Simple::Dummy;
\&   sub filter_MyFilter {
\&      # $tts is the current Text::Template::Simple object
\&      # $output_ref is the scalar reference to the output of
\&      #    the template.
\&      my($tts, $output_ref) = @_;
\&      $$output_ref .= "FILTER APPLIED"; # add to output
\&      return;
\&   }
.Ve
.PP
\fI\s-1INCLUDE PARAMETERS\s0\fR
.IX Subsection "INCLUDE PARAMETERS"
.PP
Just pass the parameters as described above and fetch them via \f(CW@_\fR inside
the included file.
.PP
\fI\s-1SHARED VARIABLES\s0\fR
.IX Subsection "SHARED VARIABLES"
.PP
\&\f(CW\*(C`Text::Template::Simple\*(C'\fR compiles every template individually with separate
scopes. A variable defined in the master template is not accessible from a
dynamic include. The exception to this rule is the \f(CW\*(C`monolith\*(C'\fR option to \f(CW\*(C`new\*(C'\fR.
If it is enabled; the master template and any includes it has will be compiled
into a single document, thus making every variable defined at the top available
to the includes below. But this method has several drawbacks, it disables cache
check for the sub files (includes) \-\-you'll need to edit the master template
to force a cache reload\*(-- and it can not be used with interpolated includes.
If you use an interpolated include with monolith enabled, you'll get an error.
.PP
If you don't use \f(CW\*(C`monolith\*(C'\fR (disabled by default), then you'll need to share
the variables somehow to don't repeat yourself. Variable sharing is demonstrated
in the below template:
.PP
.Vb 5
\&   <%
\&      my $foo = 42;
\&      my $bar = 23;
\&   %>
\&   <%* dyna.inc | SHARE: $foo, $bar %>
.Ve
.PP
And then you can access \f(CW$foo\fR and \f(CW$bar\fR inside \f(CW\*(C`dyna.inc\*(C'\fR. There is one
drawback by shared variables: only \f(CW\*(C`SCALARs\*(C'\fR can be shared. You can not share
anything else. If you want to share an array, use an array reference instead:
.PP
.Vb 5
\&   <%
\&      my @foo = (1..10);
\&      my $fooref = \e@foo;
\&   %>
\&   <%* dyna.inc | SHARE: $fooref %>
.Ve
.SS "\s-1BLOCKS\s0"
.IX Subsection "BLOCKS"
A block consists of a header part and the content.
.PP
.Vb 3
\&   <%| HEADER;
\&       BODY
\&   %>
.Ve
.PP
\&\f(CW\*(C`HEADER\*(C'\fR includes the commands and terminated with a semicolon. \f(CW\*(C`BODY\*(C'\fR is the
actual block content.
.PP
\fI\s-1BLOCK FILTERS\s0\fR
.IX Subsection "BLOCK FILTERS"
.PP
\&\fB\s-1WARNING\s0\fR Block filters are considered to be experimental. They may be changed
or completely removed in the future.
.PP
Identical to include filters, but works on blocks of text:
.PP
.Vb 3
\&   <%| FILTER: HTML, OtherFilter;
\&      <p>&FooBar=42</p>
\&   %>
.Ve
.PP
Note that you can not use any variables in these blocks. They are static.
.SH "METHODS & FUNCTIONS"
.IX Header "METHODS & FUNCTIONS"
.SS "new"
.IX Subsection "new"
.SS "cache"
.IX Subsection "cache"
.SS "class_id"
.IX Subsection "class_id"
.SS "compile"
.IX Subsection "compile"
.SS "connector"
.IX Subsection "connector"
.ie n .SS """io"""
.el .SS "\f(CWio\fP"
.IX Subsection "io"
.ie n .SS """tts"""
.el .SS "\f(CWtts\fP"
.IX Subsection "tts"
See Text::Template::Simple::API for the technical/gory details.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&   TODO
.Ve
.SH "ERROR HANDLING"
.IX Header "ERROR HANDLING"
You may need to \f(CW\*(C`eval\*(C'\fR your code blocks to trap exceptions. Some recoverable
failures are silently ignored, but you can display them as warnings 
if you enable debugging.
.SH "BUGS"
.IX Header "BUGS"
Contact the author if you find any bugs.
.SH "CAVEATS"
.IX Header "CAVEATS"
.SS "No mini language"
.IX Subsection "No mini language"
There is no mini-language. Only \f(CW\*(C`perl\*(C'\fR is used as the template
language. So, this may or may not be \fIsafe\fR from your point
of view. If this is a problem for you, just don't use this 
module. There are plenty of template modules with mini-languages
inside \f(CW\*(C`CPAN\*(C'\fR.
.SS "Speed"
.IX Subsection "Speed"
There is an initialization cost and this will show itself after
the first compilation process. The second and any following compilations
will be much faster. Using cache can also improve speed, since this will
eliminate the parsing phase. Also, using memory cache will make
the program run more faster under persistent environments. But the 
overall speed really depends on your environment.
.PP
Internal cache manager generates ids for all templates. If you supply 
your own id parameter, this will improve performance.
.SS "Optional Dependencies"
.IX Subsection "Optional Dependencies"
Some methods/functionality of the module needs these optional modules:
.PP
.Vb 3
\&   Devel::Size
\&   Text::Table
\&   Perl::Tidy
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Text::Template::Simple::API, Apache::SimpleTemplate, Text::Template,
Text::ScriptTemplate, Safe, Opcode.
.SS "\s-1MONOLITHIC VERSION\s0"
.IX Subsection "MONOLITHIC VERSION"
\&\f(CW\*(C`Text::Template::Simple\*(C'\fR consists of \f(CW\*(C`15+\*(C'\fR separate modules. If you are
after a single \f(CW\*(C`.pm\*(C'\fR file to ease deployment, download the distribution
from a \f(CW\*(C`CPAN\*(C'\fR mirror near you to get a monolithic \f(CW\*(C`Text::Template::Simple\*(C'\fR.
It is automatically generated from the separate modules and distributed in
the \f(CW\*(C`monolithic_version\*(C'\fR directory.
.PP
However, be aware that the monolithic version is \fBnot supported\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Burak Gursoy <burak@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Burak Gursoy.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
