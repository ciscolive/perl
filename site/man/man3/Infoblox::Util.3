.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Util 3"
.TH Infoblox::Util 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "SUMMARY"
.IX Header "SUMMARY"
.Vb 1
\& @dnssec_allowed_algorithms
\&
\& &ibap_i2o_dnssec_key_params
\& &ibap_o2i_dnssec_key_params
\& &dnssec_algorithm_size_accessor
.Ve
.SH "DNSSEC ALGORITHMS"
.IX Header "DNSSEC ALGORITHMS"
.Vb 4
\& algorithm mappings for dnssec KSK and ZSK  algorithms.
\& nst \- value of \*(Aqnext_secure_type\*(Aq. as per DNSSECENH FS
\& NSEC3RSASHA256  and NSEC3RSASHA512 should be  replaced
\& with NSEC analogs.
\&
\& %_alg_hash, %_rev_alg_hash  and  such  methods  as
\& _\|_algorithm_convert_helper_\|_, ibap_*_key_algorithm
\& methods  are  left  as  well  as  they are used by
\& Infoblox::DNS::DNSSecKeyRecord.
\&
\&                                table 1
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& |    algorithm   | maps       | nst   |
\& |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-|
\& | RSAMD5         | RSAMD5     | NSEC  |
\& | DSA            | DSA        | NSEC  |
\& | RSASHA1        | RSASHA1    | NSEC  |
\& | NSEC3DSA       | DSA        | NSEC3 |
\& | NSEC3RSASHA1   | RSASHA1    | NSEC3 |
\& | RSASHA256      | RSASHA256  | NSEC  |
\& | RSASHA512      | RSASHA512  | NSEC  |
\& | NSEC3RSASHA256 | RSASHA256  | NSEC3 |
\& | NSEC3RSASHA512 | RSASHA512  | NSEC3 |
\& | 1              | RSAMD5     | NSEC  |
\& | 3              | DSA        | NSEC  |
\& | 5              | RSASHA1    | NSEC  |
\& | 8              | RSASHA256  | NSEC  |
\& | 10             | RSASHA512  | NSEC  |
\& | 6              | DSA        | NSEC3 |
\& | 7              | RSASHA1    | NSEC3 |
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.SH "_\|_dnssec_algorithm_convert_helper_\|_( )"
.IX Header "__dnssec_algorithm_convert_helper__( )"
description:
.PP
.Vb 2
\& use this method to convert old algorithm names
\& to a new algorithm values as per table 1.
.Ve
.PP
parameters:
.PP
.Vb 2
\& value   \- required. one of @dnssec_allowed_algorithm
\& field   \- required. \*(Aqdnssec_(ksk|zsk)_algorithm\*(Aq
.Ve
.PP
returns:
.PP
.Vb 2
\& in array context both \*(Aqalgorithm\*(Aq and \*(Aqnext_secure_type\*(Aq
\& returned. in scalar context only \*(Aqnext_secure_type\*(Aq is returned
.Ve
.PP
example:
.PP
.Vb 1
\& my ($algorithm, $next_secure_type) = _\|_dnssec_algorithm_convert_helper_\|_(\*(AqNSEC3RSASHA256\*(Aq);
.Ve
