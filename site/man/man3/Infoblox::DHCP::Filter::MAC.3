.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::Filter::MAC 3"
.TH Infoblox::DHCP::Filter::MAC 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::Filter::MAC \- DHCP MAC Address Filter object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An Infoblox appliance can filter address requests by the \s-1MAC\s0 address and/or vendor prefix (i.e., the first 6 hexadecimal characters in \s-1MAC\s0 address) of a requesting host. The filter instructs the infoblox appliance either to grant or deny an address request if the requesting host matches the filter.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 11
\& my $mac_filter = Infoblox::DHCP::Filter::MAC\->new(
\&       name                           => $string,                   #Required
\&       comment                        => $string,                   #Optional / Default is empty
\&       default_mac_address_expiration => $num,                      #Optional / Default is 0 for never expire
\&       enforce_expiration_times       => "true" | "false",          #Optional / Default is "true"
\&       extattrs                       => { $string => $extattr, ... },      #Optional / Default is undefined
\&       extensible_attributes          => { $string => $string | $num, $string => [ $string | $num, ... ], ... }, #Optional / Default is undefined
\&       lease_time                     => $time,                     #Optional / Default is empty
\&       option_list                    => [$Option1, $Option2,...],  #Optional / Default is empty
\&       reserved_for_infoblox          => $string,                   #Optional / Default is empty
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that can be applied to a \s-1DHCP MAC\s0 Address Filter object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP MAC\s0 Address Filter object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Construct a DHCP MAC Address Filter object
\& my $mac_filter = Infoblox::DHCP::Filter::MAC\->new (
\&        name                           => "filter_script",
\&        comment                        => "Created through script",
\&        default_mac_address_expiration => "70",
\&        enforce_expiration_times       => "true",
\&        reserved_for_infoblox          => "This is reserved for infoblox",
\& );
\& #Submit for addition
\& my $response = $session\->add($mac_filter)
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP MAC Address Filter object:
\&
\&  name \- Required. Name of the MAC Address Filter.
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Get DHCP MAC Address Filter object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::Filter::MAC",
\&     name   => "filter_script",
\& );
\&
\& # get all objects with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object                => "Infoblox::DHCP::Filter::MAC",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP MAC\s0 Address Filter object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the default_mac_address_expiration
\& $mac_filter\->default_mac_address_expiration("1234");
\& #Submit modification
\& my $response = $session\->modify( $mac_filter );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1DHCP MAC\s0 Address Filter object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific \s-1DHCP MAC\s0 Address Filter object, then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get DHCP MAC Address Filter object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::Filter::MAC",
\&     name   => "filter_script",
\& );
\& #Find the desired object from the retrieved list.
\& my $desired_mac_filter = $retrieved_objs[0];
\& #Submit for removal
\& my $response = $session\->remove( $desired_mac_filter );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DHCP MAC\s0 Address Filter objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a specific DHCP MAC Address Filter object:
\&
\&  name \- Name of the MAC Address Filter (regular expression).
\&  comment \- Comment string for the MAC Address Filter (regular expression).
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&
\& Either name or comment must be specified.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all DHCP MAC Address Filter objects whose name starts with "filter".
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DHCP::Filter::MAC",
\&     name    => "filter.*",
\& );
\&
\& # search for all DHCP MAC Address Filter objects whose comment starts with "user1".
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DHCP::Filter::MAC",
\&     comment    => "user1.*",
\& );
\&
\& # search all DHCP MAC Address Filter associations with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DHCP::Filter::MAC",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to set and retrieve the attribute values of a \s-1DHCP MAC\s0 Address Filter object.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment of a \s-1DHCP MAC\s0 Address Filter object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $mac_filter\->comment();
\& #Modify comment
\& $mac_filter\->comment("Modified DHCP MAC Address Filter comment");
.Ve
.RE
.RS 4
.RE
.SS "default_mac_address_expiration( )"
.IX Subsection "default_mac_address_expiration( )"
.RS 4
Use this method to set or retrieve the default mac address expiration time of a \s-1DHCP MAC\s0 Address Filter object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
By default, the \s-1MAC\s0 address filter never expires; otherwise, it is the absolute interval when the \s-1MAC\s0 address filter expires. The maximum value can extend up to 4294967295 secs. The minimum value is 60 secs (1 min).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get default_mac_address_expiration
\& my $default_mac_address_expiration = $mac_filter\->default_mac_address_expiration();
\& #Modify default_mac_address_expiration
\& $mac_filter\->default_mac_address_expiration("1234");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DHCP MAC\s0 Address Filter object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is false.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $mac_filter\->disable();
\& #Modify disable
\& $mac_filter\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "enforce_expiration_times( )"
.IX Subsection "enforce_expiration_times( )"
.RS 4
Use this method to set or retrieve the enforce_expiration_times flag of a \s-1DHCP MAC\s0 Address Filter object.
.Sp
Determines whether lease requests will be denied from expired \s-1MAC\s0 Addresses.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the expired flag or \*(L"false\*(R" to deactivate/unset it. Default value is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enforce_expiration_times
\& my $enforce_expiration_times = $mac_filter\->enforce_expiration_times();
\& #Modify enforce_expiration_times
\& $mac_filter\->enforce_expiration_times("false");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP MAC\s0 Address Filter object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $mac_filter\->extattrs();
\& #Modify extattrs
\& $mac_filter\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP MAC\s0 Address Filter object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $mac_filter\->extensible_attributes();
\& #Modify extensible attributes
\& $mac_filter\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "lease_time( )"
.IX Subsection "lease_time( )"
.RS 4
Use this method to set or retrieve a lease_time attribute of a \s-1DHCP MAC\s0 address filter object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter appropriate values in seconds.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get lease_time
\& my $lease_time = $mac_filter\->lease_time();
\& # Modify lease_time
\& $mac_filter\->lease_time("7200");
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of a \s-1DHCP MAC\s0 Address Filter object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Name of the \s-1DHCP MAC\s0 Address filter. Maximum length up to 1024 bytes is supported.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $mac_filter\->name();
\& #Modify name
\& $mac_filter\->name("filter1");
.Ve
.RE
.RS 4
.RE
.SS "option_list( )"
.IX Subsection "option_list( )"
.RS 4
Use this method to set or retrieve the option_list of a \s-1DHCP MAC\s0 address filter object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains the Infoblox::DHCP::Option objects. The option list describes filter option configuration settings and various services.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get option_list
\& my $options = $mac_filter\->option_list();
\& #Modify option_list
\& $mac_filter\->option_list([$option1]);
.Ve
.RE
.RS 4
.RE
.SS "reserved_for_infoblox( )"
.IX Subsection "reserved_for_infoblox( )"
.RS 4
Set this flag to reserve the \s-1MAC\s0 address filter for an Infoblox appliance.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Reserved to write comment related to this particular \s-1MAC\s0 address filter. The length of comment cannot exceed 1024 bytes long.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get reserved_for_infoblox
\& my $reserved_for_infoblox = $mac_filter\->reserved_for_infoblox();
\& #Modify reserved_for_infoblox
\& $mac_filter\->reserved_for_infoblox("reserved for Infoblox");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, search, modify, and remove. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP MAC\s0 Address Filter object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP MAC\s0 Address Filter object\fR
.PP
.Vb 8
\& #Create a DHCP MAC Address Filter object
\& my $mac_filter = Infoblox::DHCP::Filter::MAC\->new (
\&        name                           => "script_filter",
\&        comment                        => "Create through script",
\&        default_mac_address_expiration => "70",
\&        enforce_expiration_times       => "true",
\&        reserved_for_infoblox          => "This is reserved for infoblox",
\& );
\&
\& unless($mac_filter) {
\&      die("Construct mac address filter failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "MAC Address Filter object created successfully\en";
\&
\& #Verify if the DHCP MAC Address Filter exists in the Infoblox appliance
\& my $object = $session\->get(object => "Infoblox::DHCP::Filter::MAC", name => "script_filter");
\& unless ($object) {
\&    print "Mac address filter does not exist on server, safe to add the mac address filter\en";
\&    $session\->add($mac_filter)
\&       or die("Add mac address filter failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "DHCP MAC Address Filter added successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DHCP MAC\s0 Address Filter object\fR
.PP
.Vb 5
\& #Search for all DHCP MAC address filter objects
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DHCP::Filter::MAC",
\&     name   => ".*" );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search for MAC Address Filter object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search MAC Address Filter object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1MAC\s0 Address Filter object\fR
.PP
.Vb 4
\& #Get MAC Address Filter object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::Filter::MAC",
\&     name   => "script_filter" );
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get MAC Address Filter object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get MAC Address Filter object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the obtained MAC Address Filter object
\& $object\->default_mac_address_expiration("1234");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify MAC Address Filter object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "MAC Address Filter object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1MAC\s0 Address Filter object\fR
.PP
.Vb 11
\& #Get MAC Address Filter object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::Filter::MAC",
\&     name   => "script_filter",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get MAC Address Filter object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get MAC Address Filter object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove MAC Address Filter object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "MAC Address Filter object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DHCP::MAC, Infoblox::DHCP::Filter::RelayAgent, Infoblox::DHCP::Lease,  Infoblox::Session,Infoblox::Session\->\fBget()\fR,Infoblox::Session\->\fBsearch()\fR,Infoblox::Session\->\fBmodify()\fR,Infoblox::Session\->\fBremove()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
