.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::Filter::Option 3"
.TH Infoblox::DHCP::Filter::Option 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::Filter::Option \- DHCP filter option object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Filter::Option defines a \s-1DHCP\s0 option filter. In the \s-1ISC DHCP\s0 terms, it defines a class of clients that match a particular (option, value) pair. To define an option filter, add Option to the \s-1DHCP\s0 Filter object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\&  my $optionFilter = Infoblox::DHCP::Filter::Option\->new(
\&                 name                   => $string,                           #Required
\&                 apply_as_class         => "true" | "false",                  #Optional / Default is "true"
\&                 comment                => $string,                           #Optional / Default is empty
\&                 boot_file              => $filename | undef,                 #Optional / Default is undefined
\&                 boot_server            => $fqdn | undef,                     #Optional / Default is undefined
\&                 extattrs               => { $string => $extattr, ... },      #Optional / Default is undefined
\&                 extensible_attributes  => { $string => $string | $num, $string => [ $string | $num, ... ], ... }, #Optional / Default is undefined
\&                 expression             => $string,                           #Optional / Default is empty
\&                 lease_time             => $time,                             #Optional / Default is empty
\&                 next_server            => $fqdn | undef,                     #Optional / Default is undefined
\&                 option_list            => [$Option1, $Option2,...],          #Optional / Default is empty
\&                 option_space           => $string,                           #Optional / Default is "DHCP"
\&                 pxe_lease_time         => $time,                             #Optional / Default is empty
\&                );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that can be applied to a \s-1DHCP\s0 filter option object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP\s0 filter option object to the Infoblox device. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& #Construct an object
\& my  $optionFilter = Infoblox::DHCP::Filter::Option\->new(
\&        name             => "option_filter",
\&
\&         );
\&
\& # Submit for adding a option Filter
\& my $response = $session\->add( $optionFilter );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching \s-1DHCP\s0 option filter objects from the Infoblox device. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP relayagent filter object:
\&
\& name \- Required. An option filter name in string format.
\& extattrs              \- Optional. A hash reference containing extensible attributes.
\& extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my  @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::Filter::Option" ,
\&     name   => "option_filter",
\& );
\&
\& # get all objects with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object                => "Infoblox::DHCP::Filter::Option",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 option filter object in the Infoblox device. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify boot_server method.
\& $object\->boot_server("myboot_server.com");
\& # Submit modification
\& my $response = $session\->modify( $object );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1DHCP\s0 option filter object from the Infoblox device. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Get the object under the same name
\& my @retrieved_objs = $session\->get(
\&            object  => "Infoblox::DHCP::Filter::Option" ,
\&            "name"  => "option_filter",
\&        );
\&
\& # find the desired object from retrieved list.
\& my $desired_obj = $retrieved_objs[0];
\&
\& # Submit for removal
\& my $response = $session\->remove( $desired_obj);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DHCP\s0 option filter object in the Infoblox device. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DHCP Network object:
\&
\&  name \- Required. An option filter name in string format (regular expression).
\&  comment \- Optional . A comment in string format (regular expression).
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all DHCP option filter objects
\&      my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DHCP::Filter::Option",
\&     name   => "option.*",
\& );
\&
\& # search all DHCP option filter associations with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DHCP::Filter::Option",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of \s-1DHCP\s0 option filter object
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of a \s-1DHCP\s0 option filter object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the name in string format. The default value for this field is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get name
\& my $name = $optionFilter\->name();
\& #Modify name
\& $optionFilter\->name("option_filter");
.Ve
.RE
.RS 4
.RE
.SS "apply_as_class( )"
.IX Subsection "apply_as_class( )"
.RS 4
Use this method to set or retrieve the \*(L"apply_as_class\*(R" flag of a \s-1DHCP\s0 filter option object. If this flag is set to \*(L"true\*(R" the filter is treated as global \s-1DHCP\s0 class, e.g it is written to dhcpd config file even if it is not present in any \s-1DHCP\s0 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the \*(L"apply_as_class\*(R" flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get apply_as_class flag
\& my $apply_as_class = $optionFilter\->apply_as_class();
\& #Modify apply_as_class flag
\& $optionFilter\->apply_as_class("true");
.Ve
.RE
.RS 4
.RE
.SS "boot_file( )"
.IX Subsection "boot_file( )"
.RS 4
Use this method to set or retrieve a boot_file attribute of a \s-1DHCP\s0 filter option object. If this attribute is not set, it will inherit the member level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the file that the client must download.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get boot_file
\& my $boot_file = $optionFilter\->boot_file();
\& # Modify boot_file
\& $optionFilter\->boot_file("bootfile1");
\& #Un\-override boot_file
\& $optionFilter\->boot_file(undef);
.Ve
.RE
.RS 4
.RE
.SS "boot_server( )"
.IX Subsection "boot_server( )"
.RS 4
Use this method to set or retrieve a bootserver attribute of a \s-1DHCP\s0 filter option object. You can specify the name and/or \s-1IP\s0 address
of the boot server that host needs to boot. If this attribute is not set, it will inherit the member level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The boot server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A boot server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get boot_server
\& my $bootserver = $optionFilter\->bootserver();
\& # Modify boot_server
\& $optionFilter\->boot_server("abc.domain.com");
\& #Un\-override boot_server
\& $optionFilter\->boot_server(undef);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment of a \s-1DHCP\s0 filter option object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $optionFilter\->comment();
\& #Modify comment
\& $optionFilter\->comment("Modified DHCP filter option object comment");
.Ve
.RE
.RS 4
.RE
.SS "expression( )"
.IX Subsection "expression( )"
.RS 4
Use this method to set or retrieve the conditional expression of a \s-1DHCP\s0 filter option object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An expression in string format, with a maximum of 4096 characters. The expression must comply with the option filter expression syntax.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting expression
\&   my $expression = $optionFilter\->expression( );
\&   #Modifying expression
\&   $optionFilter\->expression(\*(AqSophos.ComplianceState="PartialCompliant"\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Filter Option object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $optionFilter\->extattrs();
\& #Modify extattrs
\& $optionFilter\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Filter Option object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $optionFilter\->extensible_attributes();
\& #Modify extensible attributes
\& $optionFilter\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "lease_time( )"
.IX Subsection "lease_time( )"
.RS 4
Use this method to set or retrieve a lease_time attribute of a \s-1DHCP\s0 filter option object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter appropriate values in seconds.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get lease_time
\& my $lease_time = $optionFilter\->lease_time();
\& # Modify lease_time
\& $optionFilter\->lease_time("7200");
.Ve
.RE
.RS 4
.RE
.SS "next_server( )"
.IX Subsection "next_server( )"
.RS 4
Use this method to set or retrieve a next_server attribute of a \s-1DHCP\s0 filter option object. You can specify the name and/or \s-1IP\s0 address
of the next server that the host needs to boot. If this attribute is not set, it will inherit the member level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The next server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). The next server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get next_server
\& my $nextserver = $optionFilter\->next_server();
\& # Modify next_server
\& $optionFilter\->next_server("blue.domain.com");
\& #Un\-override next_server
\& $optionFilter\->next_server(undef);
.Ve
.RE
.RS 4
.RE
.SS "option_list( )"
.IX Subsection "option_list( )"
.RS 4
Use this method to set or retrieve the option_list of a \s-1DHCP\s0 filter option object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DHCP::Option objects. Option list describe filter option configuration settings and various services.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get option_list
\& my $options = $optionFilter\->option_list();
\& #Modify option_list
\& $optionFilter\->option_list([$option1]);
.Ve
.RE
.RS 4
.RE
.SS "option_space( )"
.IX Subsection "option_space( )"
.RS 4
Use this method to  retrieve the option_space of a \s-1DHCP\s0 filter option object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the option space value in string format. The default value of option_space is \s-1DHCP.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get option_space
\& my $options = $optionFilter\->option_space();
\& #Modify option_space
\& $optionFilter\->option_space("Infoblox_DHCP");
.Ve
.RE
.RS 4
.RE
.SS "pxe_lease_time( )"
.IX Subsection "pxe_lease_time( )"
.RS 4
Use this method to set or retrieve a pxe_lease_time attribute of a \s-1DHCP\s0 filter option object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter appropriate values in seconds.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get pxe_lease_time
\& my $pxe_lease_time = $optionFilter\->pxe_lease_time();
\& # Modify pxe_lease_time
\& $optionFilter\->pxe_lease_time("3600");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, search, modify, and remove. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 option filter object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox device
\&
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 Filter Option object\fR
.PP
.Vb 1
\& my  $optionfilter = Infoblox::DHCP::Filter::Option\->new(
\&
\&        name             => "option_filter",
\&        next_server      => "abc_server.com" ,
\&        boot_file        => "file1" ,
\&        boot_server      => "boot_server.com" ,
\&        lease_time       => "7200",
\&        pxe_lease_time   => "3600",
\&       );
\&
\& unless ($optionfilter) {
\&    die("Construct DHCP Filter::Option failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Filter::Option object created successfully\en";
\& my $response = $session\->add($optionfilter)
\&        or die("Add DHCP Filter Option failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP Filter Option added successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DHCP\s0 Filter Option\fR
.PP
.Vb 10
\& #Search the  DHCP Filter Option
\& my @retrieved_objs = $session\->search(
\&     object             => "Infoblox::DHCP::Filter::Option",
\&     name               => "option.*",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search DHCP Filter Option  failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Search DHCP Filter Option found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a  \s-1DHCP\s0 Filter Option attribute\fR
.PP
.Vb 2
\& #Get  DHCP Filter Option through the session
\& my  @retrieved_objs = $session\->get(
\&
\&               object      =>"Infoblox::DHCP::Filter::Option" ,
\&               name        => "option_filter",
\&         );
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get option filter object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Get DHCP Filter Option found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified DHCP Filter Option attribute
\&
\& $object\->boot_server("another_Server");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify DHCP Filter Option attribute failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP Filter Option object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DHCP\s0 Filter Option Object\fR
.PP
.Vb 2
\&  #Get object through the session
\&  my @retrieved_objs = $session\->get(
\&
\&            object  => "Infoblox::DHCP::Filter::Option" ,
\&            "name"  => "option_filter",
\&        );
\&
\&    my $object = $retrieved_objs[0];
\&
\&    unless ($object) {
\&     die("Get a DHCP Filter Optionobject failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Get a DHCP Filter Option object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove a DHCP Filter Option failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP Filter Option removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Grid::Extattr
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
