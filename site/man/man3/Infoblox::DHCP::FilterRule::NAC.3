.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::FilterRule::NAC 3"
.TH Infoblox::DHCP::FilterRule::NAC 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::FilterRule::NAC \- DHCP NAC Filter Rule object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1NAC\s0 Filter Rule object is used to grant or deny the lease of an \s-1IP\s0 address in a \s-1DHCP\s0 range based on whether the authentication response matches the \s-1NAC\s0 filter.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 4
\& my $nac_filter_rule = Infoblox::DHCP::FilterRule::NAC\->new(
\&       filter_name   => $string,          #Required
\&       permission    => "grant" | "deny", #Required
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to a \s-1DHCP NAC\s0 Filter Rule object.
.SS "Infoblox::DHCP::Range\->filters( )"
.IX Subsection "Infoblox::DHCP::Range->filters( )"
.RS 4
Use this method to add a \s-1DHCP NAC\s0 Filter Rule object to a \s-1DHCP\s0 range. See Infoblox::DHCP::Range\->\fBfilters()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct a DHCP NAC Filter Rule object
\& my $nac_filter_rule1 = Infoblox::DHCP::FilterRule::NAC\->new(
\&       filter_name   => "filter1",
\&       permission    => "grant",
\& );
\&
\& #Add a NAC Filter Rule to the DHCP Range object.
\& my $response = $dhcp_range\->filters([$nac_filter_rule1]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to set and retrieve the attribute values of a \s-1DHCP NAC\s0 Filter Rule object.
.SS "filter_name( )"
.IX Subsection "filter_name( )"
.RS 4
Use this method to set or retrieve the filter_name of a \s-1DHCP NAC\s0 Filter Rule object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the \s-1DHCP NAC\s0 filter. The maximum length supported is 1024 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get filter_name
\& my $filter_name = $nac_filter_rule\->filter_name();
\& #Modify filter_name
\& $nac_filter_rule\->filter_name("filter2");
.Ve
.RE
.RS 4
.RE
.SS "permission( )"
.IX Subsection "permission( )"
.RS 4
Use this method to set or retrieve the permission of a \s-1DHCP NAC\s0 Filter Rule object.
.Sp
The permission indicates whether a \s-1DHCP\s0 client whose \s-1NAC\s0 authentication response matches this \s-1NAC\s0 filter is allowed or denied a lease from the defined \s-1DHCP\s0 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The permission value can be either \*(L"grant\*(R" or \*(L"deny\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get permission
\& my $permission = $nac_filter_rule\->permission();
\& #Modify permission
\& $nac_filter_rule\->permission("deny");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different functions that can be applied to an object such as modify. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP NAC\s0 Filter Rule object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the Network object
\& my $network = Infoblox::DHCP::Network\->new(
\&     network => "10.0.0.0/8",
\&     comment => "add network",
\& );
\& unless($network) {
\&        die("Construct Network object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network object created successfully\en";
\&
\& #Add the Network object into the Infoblox appliance through a session
\& $session\->add($network)
\&     or die("Add Network object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object added to Infoblox appliance successfully\en";
\&
\& #Construct a DHCP NAC Filter object
\& my $nac_filter = Infoblox::DHCP::Filter::NAC\->new(
\&        name => "filter1",
\& );
\&
\& unless ( $nac_filter ) {
\&        die("Construct NAC Filter failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail() );
\& }
\& print "NAC Filter object created successfully\en";
\&
\& #Add the NAC Filter to the Infoblox appliance through a session
\& $session\->add($nac_filter)
\&     or die("Add NAC Filter object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "NAC Filter object added to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP NAC\s0 Filter Rule object\fR
.PP
.Vb 5
\& #Construct a DHCP NAC Filter Rule object
\& my $nac_filter_rule1 = Infoblox::DHCP::FilterRule::NAC\->new(
\&       filter_name   => "filter1",
\&       permission    => "grant",
\& );
\&
\& unless ( $nac_filter_rule1 ) {
\&        die("Construct NAC Filter Rule failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail() );
\& }
\& print "NAC Filter Rule object created successfully\en";
\&
\& #Create the DHCP Range object with this NAC Filter Rule.
\& my $dhcp_range = Infoblox::DHCP::Range\->new(
\&         end_addr   => "10.0.0.10",
\&         network    => "10.0.0.0/8",
\&         start_addr => "10.0.0.1",
\&         filters    => [ $nac_filter_rule1 ],
\& );
\& unless($dhcp_range) {
\&        die("Construct DHCP Range object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Range object created successfully\en";
\&
\& #Add the DHCP Range object through a session
\& $session\->add($dhcp_range)
\&     or die("Add DHCP Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range object added to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Get and modify a \s-1NAC\s0 Filter Rule object\fR
.PP
.Vb 5
\& #Get NAC Filter Rule object from the DHCP Range object through session
\& my @retrieved_objs = $session\->get(
\&     object      => "Infoblox::DHCP::Range",
\&     start_addr  => "10.0.0.1",
\& );
\&
\& my $object = $retrieved_objs[0];
\& my $filter = $object\->filters();
\&
\& my @filters = @{$filter};
\&
\& my $nac_filterrule = $filters[0];
\&
\& #Modify one of the attributes of the obtained NAC Filter Rule object
\& $nac_filterrule\->permission("deny");
\& $object\->filters([$nac_filterrule]);
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify NAC Filter Rule object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "NAC Filter Rule object modified and added to the DHCP Range object successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1NAC\s0 Filter Rule object\fR
.PP
.Vb 1
\& $object\->filters([]);
\&
\& my $response = $session\->modify($object);
\& unless($response) {
\&        die("Remove NAC Filter Rule failed: ",
\&                session\->status_code() . ":" . session\->status_detail() );
\& }
\& print "NAC Filter Rule object removed successfully \en";
\&
\& #Submit the network object for removal
\& $session\->remove($network)
\&     or die("Remove Network object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object removed successfully \en";
\&
\& #Submit the NAC Address Filter object for removal
\& $session\->remove($nac_filter)
\&     or die("Remove NAC Filter object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "NAC Filter object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DHCP::FilterRule::RelayAgent, Infoblox::DHCP::Network, Infoblox::DHCP::Range, Infoblox::Session\->\fBadd()\fR,Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR,Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
