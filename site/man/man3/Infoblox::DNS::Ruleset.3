.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Ruleset 3"
.TH Infoblox::DNS::Ruleset 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Ruleset \- Ruleset object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Represents a Ruleset object, which is a collection of rules that is used to match domain names.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
See Infoblox::DNS::Ruleset::Rule for details.
.PP
.Vb 10
\& my $rule1 = Infoblox::DNS::Ruleset::NxdomainRule\->new(
\&     pattern => $string,                                                        #Optional
\&     action => $string,                                                         #Optional
\& );
\& my $rule2 = Infoblox::DNS::Ruleset::NxdomainRule\->new(
\&     pattern => $string,                                                        #Optional
\&     action => $string,                                                         #Optional
\& );
\& my $ruleset = Infoblox::DNS::Ruleset\->new (
\&     name => $string,                                                           #Required
\&     type => <"NXDOMAIN" | "BLACKLIST">                                         #Required
\&     comment => $string,                                                        #Optional
\&     disabled => "true" | "false",                                              #Optional
\&     nxdomain_rules => [$rule1, $rule2]                                         #Optional, valid only when type is "NXDOMAIN"
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a Ruleset object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Create Rule 1 object
\& my $rule1 = Infoblox::DNS::Ruleset::NxdomainRule\->new(
\&     pattern => "www.a.zone.com",
\&     action => \*(AqPASS\*(Aq );
\&
\& #Create Rule 2 object
\& my $rule2 = Infoblox::DNS::Ruleset::NxdomainRule\->new(
\&     pattern=> "www.b.zone.com",
\&     action => \*(AqREDIRECT\*(Aq );
\&
\& my $ruleset = Infoblox::DNS::Ruleset\->new (
\&    name => $ruleset_name,
\&    type => "NXDOMAIN",
\&    comment=> "This is a demo ruleset",
\&    disabled=> "false",
\&    nxdomain_rules=> [$rule1, $rule2]);
\&
\&  #Submit for addition
\&  my $response = $session\->add( $nsg1 );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific Ruleset object:
\&
\& name \- Required. The name of the ruleset in string format.
\& disabled \- Optional. Indicates if the ruleset is disabled. The valid value is either "true" or "false".
\& comment \- Optional. The comment that was entered for the ruleset.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Ruleset",
\&     name   => "Ruleset 1",
\&     );
\&
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Ruleset",
\&     disabled   => "false",
\&     );
\&
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Ruleset",
\&     comment   => "Ruleset comment",
\&     );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Modify the comment
\& $ruleset\->comment("this is a modified comment");
\& #Submit the modification
\& my $response = $session\->modify( $ruleset );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the object, and then submit it for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
#Get the objects with the same name
 my \f(CW@retrieved_objs\fR = \f(CW$session\fR\->get(
     object => \*(L"Infoblox::DNS::Ruleset\*(R",
     name   => \*(L"Ruleset 1\*(R",
      );
#Find the desired object on the retrieved list
 my \f(CW$ruleset\fR= \f(CW$retrieved_objs\fR[0];
#Submit the object for removal
 my \f(CW$response\fR = \f(CW$session\fR\->remove( \f(CW$ruleset\fR );
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for Ruleset objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
Apply the following attributes to search for a Ruleset object:
.Sp
.Vb 3
\& name \- Required. The ruleset name in string format (regular expression).
\& disabled \- Optional. Indicates if the ruleset is disabled. The valid value is either "true" or "false".
\& comment \- Optional. The comment that was entered for the ruleset (regular expression).
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\& # Search for all Ruleset objects
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Ruleset",
\&     name   => ".*",
\&     );
.Ve
.Sp
# Search for all Ruleset objects with \*(L"false\*(R" as the value for the \*(L"disabled\*(R" attribute
 my \f(CW@retrieved_objs\fR = \f(CW$session\fR\->get(
     object => \*(L"Infoblox::DNS::Ruleset\*(R",
     disabled => \*(L"false\*(R");
.Sp
# Search for all Ruleset objects with \*(L"Ruleset Comm\*(R" as the value for the \*(L"comment\*(R" attribute
 my \f(CW@retrieved_objs\fR = \f(CW$session\fR\->get(
     object => \*(L"Infoblox::DNS::Ruleset\*(R",
     comment => \*(L"Ruleset Comm\*(R");
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a Ruleset object.
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of this Ruleset object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The ruleset name in string format, with a maximum of 256 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $ruleset\->name();
\& #Modify name
\& $ruleset\->name("rulset");
.Ve
.RE
.RS 4
.RE
.SS "type( )"
.IX Subsection "type( )"
.RS 4
Use this method to set or retrieve the type of this Ruleset object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The ruleset type. Supported values are \*(L"\s-1NXDOMAIN\*(R"\s0 or \*(L"\s-1BLACKLIST\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get type
\& my $type = $ruleset\->type();
\& #Modify type
\& $ruleset\->type("NXDOMAIN");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment about the Ruleset object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Comment in string format, with a maximum of 256 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $ruleset\->comment();
\& #Modify comment
\& $ruleset\->comment("This is Default Ruleset");
.Ve
.RE
.RS 4
.RE
.SS "disabled( )"
.IX Subsection "disabled( )"
.RS 4
Use this method to set or retrieve the flag that indicates if the Ruleset object is disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disabled flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disabled
\& my $disabled = $ruleset\->disabled();
\& #Modify disabled
\& $ruleset\->disabled("true");
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_rules( )"
.IX Subsection "nxdomain_rules( )"
.RS 4
Use this method to set or retrieve a list of Infoblox::DNS::Ruleset::NxdomainRule objects assigned to this Ruleset object. Rules can be set only when the ruleset type is set to \*(L"\s-1NXDOMAIN\*(R".\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains a list of Infoblox::DNS::Ruleset::NxdomainRule objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting rules
\& my $rules = $ruleset\->nxdomain_rules( );
\& #Modifying rules
\& $ruleset\->nxdomain_rules([$rule1]);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as modify and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a Ruleset object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a Ruleset object\fR
.PP
.Vb 7
\& my $rule1 = Infoblox::DNS::Ruleset::NxdomainRule\->new(
\&     pattern => "www.a.zone.com",
\&     action => \*(AqPASS\*(Aq );
\& unless ($rule1) {
\&    die("Construct Rule 1 failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& my $rule2 = Infoblox::DNS::Ruleset::NxdomainRule\->new(
\&     pattern=> "www.b.zone.com",
\&     action => \*(AqREDIRECT\*(Aq );
\& unless ($rule2) {
\&    die("Construct Rule 2 failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& my $ruleset = Infoblox::DNS::Ruleset\->new (
\&     name => "Ruleset 1",
\&     type => "NXDOMAIN",
\&     comment=> "This is demo ruleset",
\&     disabled=> "false",
\&     nxdomain_rules=> [$rule1, $rule2]);
\&
\& unless ($ruleset) {
\&    die("Construct Ruleset failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Ruleset object created successfully\en";
.Ve
.PP
\&\fB#Add the Ruleset object\fR
.PP
.Vb 5
\& my $resp = $session\->add($ruleset);
\& unless ($resp == 1) {
\&    die("Add Ruleset failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
.Ve
.PP
\&\fB#Modify the Ruleset object\fR
.PP
.Vb 6
\& my @result_array = $session\->get(
\&        object => "Infoblox::DNS::Ruleset",
\&        name => "Ruleset 1");
\& if( defined @result_array  and scalar( @result_array ) > 0 ){
\&        my $ruleset = $result_array[0];
\&        $ruleset\->name("Ruleset 2");
\&
\&        my $response = $session\->modify( $ruleset );
\&        print "Modify the Ruleset object success.\en" if ( $response );
\& }
.Ve
.PP
\&\fB#Remove a Ruleset object\fR
.PP
.Vb 1
\& my @result_array = $session\->get( "object" => "Infoblox::DNS::Ruleset" ,  "name" => "Ruleset 2" );
\&
\& if( defined @result_array  and scalar( @result_array ) > 0 ){
\&        my $ruleset = $result_array[0];
\&        if( ref( $ruleset ) eq "Infoblox::DNS::Ruleset" )
\&        {
\&
\&                my $response = $session\->remove($ruleset);
\&                print "Remove Ruleset success.\en" if ( $response );
\&
\&        }
\&
\&        unless ($ruleset) {
\&                die("Remove Ruleset failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\&        }
\& }
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR,Infoblox::Session\->\fBremove()\fR,Infoblox::Session\->\fBmodify()\fR,Infoblox::DNS,Infoblox::DNS::Ruleset::NxdomainRule
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
