.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBICx::TestDatabase::Subclass 3"
.TH DBICx::TestDatabase::Subclass 3 "2013-07-29" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBICx::TestDatabase::Subclass \- a DBICx::TestDatabase you can add your 
own methods to
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Your test database subclass:
.PP
.Vb 2
\&   package MyApp::TestDatabase
\&   use base qw(DBICx::TestDatabase::Subclass MyApp::Schema);
\&
\&   sub foo { 
\&      my $self = shift;
\&      return $self\->resultset(\*(AqFoo\*(Aq)\->create({ foo => \*(Aqbar\*(Aq });
\&   }
.Ve
.PP
Later:
.PP
.Vb 4
\&   use MyApp::TestDatabase;
\&   my $schema = MyApp::TestDatabase\->connect;
\&   my $foo_row = $schema\->foo; # MyApp::TestDatabase::foo
\&   my $bars = $schema\->resultset(\*(AqBar\*(Aq); # MyApp::Schema::resultset
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Sometimes DBICx::TestDatabase doesn't give you enough control over the
object returned.  This module lets you create a custom test database
class.
.SH "METHODS"
.IX Header "METHODS"
.SS "connect"
.IX Subsection "connect"
This method creates the temporary database and returns the connection.
If your subclass needs to change the way connect works, do something like
this:
.PP
.Vb 2
\&    sub connect {
\&        my ($class) = @_;
\&
\&        say \*(AqThis happens before we create the test database.\*(Aq;
\&        my $schema = $class\->next::method;
\&        say \*(Aq$schema is the temporary test database\*(Aq;
\&       
\&        return $schema;
\&    }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
If you want a simple test database based on a \s-1DBIC\s0 schema, just use
DBICx::TestDatabase.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonathan Rockway \f(CW\*(C`<jrockway@cpan.org>\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2007 Jonathan Rockway.
.PP
This program is free software.  You may use, modify, and redistribute
it under the same terms as Perl itself.
