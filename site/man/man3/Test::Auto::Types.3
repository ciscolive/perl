.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::Auto::Types 3"
.TH Test::Auto::Types 3 "2020-05-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Auto::Types
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Test-Auto Type Constraints
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package main;
\&
\&  use Test::Auto::Types;
\&
\&  1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides type constraints for Test::Auto.
.SH "INHERITS"
.IX Header "INHERITS"
This package inherits behaviors from:
.PP
Types::Standard
.SH "CONSTRAINTS"
.IX Header "CONSTRAINTS"
This package declares the following type constraints:
.SS "parser"
.IX Subsection "parser"
.Vb 1
\&  Parser
.Ve
.PP
This type is defined in the Test::Auto::Types library.
.IP "parser parent" 4
.IX Item "parser parent"
.Vb 1
\&  Object
.Ve
.IP "parser composition" 4
.IX Item "parser composition"
.Vb 1
\&  InstanceOf[\*(AqTest::Auto::Parser\*(Aq]
.Ve
.IP "parser example #1" 4
.IX Item "parser example #1"
.Vb 2
\&  require Test::Auto;
\&  require Test::Auto::Parser;
\&
\&  my $test = Test::Auto\->new(\*(Aqt/Test_Auto.t\*(Aq);
\&  my $parser = Test::Auto::Parser\->new(source => $test);
.Ve
.SS "source"
.IX Subsection "source"
.Vb 1
\&  Source
.Ve
.PP
This type is defined in the Test::Auto::Types library.
.IP "source parent" 4
.IX Item "source parent"
.Vb 1
\&  Object
.Ve
.IP "source composition" 4
.IX Item "source composition"
.Vb 1
\&  InstanceOf[\*(AqTest::Auto\*(Aq]
.Ve
.IP "source example #1" 4
.IX Item "source example #1"
.Vb 1
\&  require Test::Auto;
\&
\&  my $test = Test::Auto\->new(\*(Aqt/Test_Auto.t\*(Aq);
.Ve
.SS "strings"
.IX Subsection "strings"
.Vb 1
\&  Strings
.Ve
.PP
This type is defined in the Test::Auto::Types library.
.IP "strings composition" 4
.IX Item "strings composition"
.Vb 1
\&  ArrayRef[Str]
.Ve
.IP "strings example #1" 4
.IX Item "strings example #1"
.Vb 1
\&  [\*(Aqabc\*(Aq, 123]
.Ve
.SS "subtests"
.IX Subsection "subtests"
.Vb 1
\&  Subtests
.Ve
.PP
This type is defined in the Test::Auto::Types library.
.IP "subtests parent" 4
.IX Item "subtests parent"
.Vb 1
\&  Object
.Ve
.IP "subtests composition" 4
.IX Item "subtests composition"
.Vb 1
\&  InstanceOf[\*(AqTest::Auto::Subtests\*(Aq]
.Ve
.IP "subtests example #1" 4
.IX Item "subtests example #1"
.Vb 3
\&  require Test::Auto;
\&  require Test::Auto::Parser;
\&  require Test::Auto::Subtests;
\&
\&  my $test = Test::Auto\->new(\*(Aqt/Test_Auto.t\*(Aq);
\&  my $parser = Test::Auto::Parser\->new(source => $test);
\&  my $subs = Test::Auto::Subtests\->new(parser => $parser);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the
\&\*(L"license file\*(R" <https://github.com/iamalnewkirk/test-auto/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/test-auto/wiki>
.PP
Project <https://github.com/iamalnewkirk/test-auto>
.PP
Initiatives <https://github.com/iamalnewkirk/test-auto/projects>
.PP
Milestones <https://github.com/iamalnewkirk/test-auto/milestones>
.PP
Issues <https://github.com/iamalnewkirk/test-auto/issues>
