.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::IPAM::Address 3"
.TH Infoblox::IPAM::Address 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::IPAM::Address \- IPAM address object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1IPAM\s0 address object is used to view IPv4 and IPv6 address management information in an Infoblox appliance.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::IPAM::Address object is a read-only object and does not require manual construction.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session that can be applied to an \s-1IPAM\s0 address object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.Sp
Note that for IPv4 addresses, both used and unused addresses are returned unless 'status' is specified; but IPv6 addresses will only return used addresses.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to get the IPAM address object(s). Note that at least one of the following is required: address, start_addr, end_addr, or network.
.Ve
.Sp
address                               \- Optional. An IPv4 or IPv6 address. Get \s-1IPAM\s0 information for this address. All other optional arguments are ignored, except for network_view, if 'address' is present.
.Sp
network                               \- Optional. The IPv4 or IPv6 network, in \s-1CIDR\s0 notation (e.g 1.0.0.0/8 or 2000::/64), where the \s-1IPAM\s0 address is located.
.Sp
network_view                          \- Optional. The network view in which the network is located. The default is the system-defined default network view.
.Sp
start_addr                            \- Optional. An IPv4 or IPv6 address. Start address of an \s-1IPAM\s0 address scope. If the start address is not in the specified network, an error is returned.
.Sp
end_addr                              \- Optional. An IPv4 or IPv6 address. End address of an \s-1IPAM\s0 address scope. If the end address is not in the specified network, an error is returned.
.Sp
status                                \- Optional. The filter type of the \s-1IPAM\s0 address. Valid values are \*(L"used\*(R", \*(L"unused\*(R" and \*(L"all\*(R". Default value is \*(L"all\*(R". This argument applies to IPv4 addresses only. When the value is returned \*(L", Unmanaged\*(R" or \*(L", Conflict\*(R" might be appended to the status member when applicable.
.Sp
type                                  \- Optional. This is exactly the same as the 'status' argument, and is being deprecated in favor of the 'status' argument. This argument applies to IPv4 addresses only.
.Sp
extattrs                              \- Optional. A hash reference containing extensible attributes.
.Sp
extensible_attributes                 \- Optional. A hash reference containing extensible attributes.
.Sp
fingerprint                           \- Optional. \s-1DHCP\s0 fingerprint description.
.Sp
discovered_duid                       \- Optional. Discovered DHCPv6 \s-1UID.\s0
.Sp
discovered_name                       \- Optional. Discovered name.
.Sp
discoverer                            \- Optional. Discoverer name.
.Sp
first_discovered                      \- Optional. Time of the first discovery.
.Sp
last_discovered                       \- Optional. Time of the last discovery.
.Sp
netbios                               \- Optional. Discovered NetBIOS name.
.Sp
network_component_description         \- Optional. Discovered network component description.
.Sp
network_component_ip                  \- Optional. Discovered network component \s-1IP\s0 address.
.Sp
network_component_name                \- Optional. Discovered network component name.
.Sp
network_component_port_description    \- Optional. Discovered network component port description.
.Sp
network_component_port_name           \- Optional. Discovered network component port name.
.Sp
network_component_port_number         \- Optional. Discovered network component port number.
.Sp
network_component_type                \- Optional. Discovered network component type.
.Sp
os                                    \- Optional. Discovered \s-1OS.\s0
.Sp
port_duplex                           \- Optional. Discovered port duplex settings.
.Sp
port_link_status                      \- Optional. Discovered port link status.
.Sp
port_speed                            \- Optional. Discovered port speed settings.
.Sp
port_status                           \- Optional. Discovered port status settings.
.Sp
port_vlan_description                 \- Optional. Discovered port \s-1VLAN\s0 description.
.Sp
port_vlan_name                        \- Optional. Discovered port \s-1VLAN\s0 name.
.Sp
port_vlan_number                      \- Optional. Discovered port \s-1VLAN\s0 number.
.Sp
v_cluster                             \- Optional. Discovered VMware cluster name.
.Sp
v_datacenter                          \- Optional. Discovered VMware datacenter name.
.Sp
v_host                                \- Optional. Discovered VMware server name.
.Sp
v_name                                \- Optional. Discovered VMware host or virtual machine name.
.Sp
v_netadapter                          \- Optional. Discovered VMware physical network adapter name.
.Sp
v_switch                              \- Optional. Discovered VMware virtual switch name.
.Sp
v_type                                \- Optional. Discovered VMware entity type (possible values: \*(L"VirtualMachine\*(R", \*(L"HostSystem\*(R", \*(L"VirtualCenter\*(R").
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& # case 1
\& my @ipam_objects = $session\->get( \*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                   \*(Aqnetwork\*(Aq  => \*(Aq10.0.0.0/8\*(Aq);
\&
\& Since there are no start and end addresses specified, the appliance returns a maximum of 2000 IP addresses, which is the maximum page size of an administrator. If the total number of IP addresses in the network is less than 2000, then it returns all IP addresses.
\&
\& # case 2
\& my @ipam_objects = $session\->get( \*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                   \*(Aqnetwork\*(Aq    => \*(Aq10.0.0.0/8\*(Aq,
\&                                   \*(Aqstart_addr\*(Aq => \*(Aq10.0.0.100\*(Aq);
\&
\& This call returns a maximum of 2000 IPAM addresses starting from 10.0.0.100.
\&
\& # case 3
\& my @ipam_objects = $session\->get( \*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                   \*(Aqnetwork\*(Aq    => \*(Aq10.0.0.0/8\*(Aq,
\&                                   \*(Aqstart_addr\*(Aq => \*(Aq10.0.0.100\*(Aq
\&                                   \*(Aqend_addr\*(Aq   => \*(Aq10.0.0.200\*(Aq);
\&
\& This call returns 101 IPAM addresses from 10.0.0.100 to 10.0.0.200.
\&
\& # case 4
\& my @ipam_objects = $session\->get( \*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                   \*(Aqaddress\*(Aq    => \*(Aq10.0.0.10\*(Aq);
\&
\& This call returns the IPAM address object for 10.0.0.10.
\&
\& # case 5
\& my @ipam_objects = $session\->get( \*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                   \*(Aqnetwork\*(Aq  => \*(Aq10.0.0.0/8\*(Aq,
\&                                   \*(Aqstart_addr\*(Aq => \*(Aq10.0.0.100\*(Aq,
\&                                   \*(Aqend_addr\*(Aq  => \*(Aq10.0.0.200\*(Aq,
\&                                   \*(Aqstatus\*(Aq          => \*(Aqused\*(Aq );
\&
\& This call returns used IPAM addresses from 10.0.0.100 to 10.0.0.200. Note that the filter is applied to the specified scope. Therefore, the number of returned objects could be less than 101, if only a few IP addresses are used in this scope.
\&
\& # case 6
\& my @ipam_objects = $session\->get( \*(Aqobject        => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                   \*(Aqnetwork\*(Aq      => \*(Aq10.0.0.0/8\*(Aq,
\&                                   \*(Aqnetwork_view\*(Aq => \*(Aqmy_network_view\*(Aq);
\&
\& Same as case 1, but this uses the \*(Aqmy_network_view\*(Aq network view rather than the system\-defined default view.
\&
\& # case 7
\& my @ipam_objects = $session\->get( \*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                   \*(Aqaddress\*(Aq    => \*(Aq10.0.0.5\*(Aq);
\& # case 8
\& my @ipam_objects = $session\->get( \*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                   \*(Aqnetwork\*(Aq  => \*(Aq2000::/64\*(Aq);
\&
\& Since there are no start and end addresses specified, the appliance returns a maximum of 2000 used IP addresses, which is the maximum page size of an administrator. If the total number of IP addresses in the network is less than 2000, then it returns all IP addresses.
\&
\& # case 9
\& my @ipam_objects = $session\->get( \*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                   \*(Aqnetwork\*(Aq    => \*(Aq2000::/64\*(Aq,
\&                                   \*(Aqstart_addr\*(Aq => \*(Aq2000::11\*(Aq);
\&
\& This call returns a maximum of 2000 used IPv6 addresses starting from 2000::11.
\&
\& # case 10
\& my @ipam_objects = $session\->get( \*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                   \*(Aqnetwork\*(Aq    => \*(Aq2000::/64\*(Aq,
\&                                   \*(Aqstart_addr\*(Aq => \*(Aq2000::11\*(Aq,
\&                                   \*(Aqend_addr\*(Aq   => \*(Aq2000::31\*(Aq);
\&
\& This call returns used IPv6addresses from \*(Aq2000::11\*(Aq to \*(Aq2000::31\*(Aq.
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Get the object under the same name
\& my @result_array = $session\->get(
\&       object        => "Infoblox::IPAM::Address" ,
\&       network       => "2001::/64",
\& );
\&
\& # find the desired object from the retrieved list.
\& my $desired_ipam_address = $result_array[0];
\&
\& # Submit for removal
\& my $response = $session\->remove( $desired_ipam_address );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to retrieve the attribute values of an \s-1IPAM\s0 address object.
.SS "conflict_types( )"
.IX Subsection "conflict_types( )"
.RS 4
Use this method to retrieve a list of Discovery conflict types. This attribute is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get conflict_types
\& my $value = $ipam_address\->conflict_types();
.Ve
.RE
.RS 4
.RE
.SS "dhcp_client_identifier( )"
.IX Subsection "dhcp_client_identifier( )"
.RS 4
Use this method to retrieve the \s-1DHCP\s0 client identifier of an \s-1IPAM\s0 address object. This method applies to IPv4 addresses only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1DHCP\s0 client identifier attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get DHCP client identifier
\& my $identifier = $ipam_address\->dhcp_client_identifier();
.Ve
.RE
.RS 4
.RE
.SS "discovered_data( )"
.IX Subsection "discovered_data( )"
.RS 4
Use this method to retrieve the discovered data of an \s-1IPAM\s0 address object. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::Discovery::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_data value
\& my $discovered_data = $object\->discovered_data();
.Ve
.RE
.RS 4
.RE
.SS "discovered_name( )"
.IX Subsection "discovered_name( )"
.RS 4
Use this method to retrieve the discovered name of an \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discovered name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_name
\& my $discovered_name = $ipam_address\->discovered_name();
.Ve
.RE
.RS 4
.RE
.SS "discover_now_status( )"
.IX Subsection "discover_now_status( )"
.RS 4
Use this method to retrieve the current discovery status. This attribute is read-only.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1COMPLETE\s0', '\s-1FAILED\s0', '\s-1NONE\s0', '\s-1PENDING\s0' or '\s-1RUNNING\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discover_now_status
\& my $discover_now_status = $ipam_address\->discover_now_status();
.Ve
.RE
.RS 4
.RE
.SS "duid( )"
.IX Subsection "duid( )"
.RS 4
Use this method to retrieve the DHCPv6 Unique Identifier (\s-1DUID\s0) of an \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1DUID\s0 value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get mac address
\& my $duid = $ipam_address\->duid();
.Ve
.RE
.RS 4
.RE
.SS "discoverer( )"
.IX Subsection "discoverer( )"
.RS 4
Use this method to retrieve the discoverer of an \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discoverer value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discoverer
\& my $discoverer = $ipam_address\->discoverer();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to retrieve the extensible attributes associated with an \s-1IPAM\s0 address object. This attribute is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get extattrs
\& my $ref_extattrs = $ipam_address\->extattrs();
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to retrieve the extensible attributes associated with an \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a reference to a hash containing the extensible attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get extensible attributes
\& my $ref_extensible_attributes = $ipam_address\->extensible_attributes();
.Ve
.RE
.RS 4
.RE
.SS "fingerprint( )"
.IX Subsection "fingerprint( )"
.RS 4
Use this method to retrieve \s-1DHCP\s0 fingerprint description of an \s-1IPAM\s0 address object. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get fingerprint
\& my $fingerprint = $ipam_address\->fingerprint();
.Ve
.RE
.RS 4
.RE
.SS "first_discovered( )"
.IX Subsection "first_discovered( )"
.RS 4
Use this method to retrieve the date and time that the \s-1IPAM\s0 address object was first discovered.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the date and time that the \s-1IPAM\s0 address object was fisrt discovered.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get first_discovered
\& my $first_discovered = $ipam_address\->first_discovered();
.Ve
.RE
.RS 4
.RE
.SS "ip_address( )"
.IX Subsection "ip_address( )"
.RS 4
Use this method to retrieve the \s-1IP\s0 addresses of an \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1IP\s0 address value. The value can be an IPv4 or IPv6 address.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get IP address
\& my $ip_address = $ipam_address\->ip_address();
.Ve
.RE
.RS 4
.RE
.SS "is_conflict( )"
.IX Subsection "is_conflict( )"
.RS 4
Use this method to find out whether this \s-1IPAM\s0 address is in conflict with another \s-1IPAM\s0 address in the system. This method applies to IPv4 addresses only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true if the \s-1IPAM\s0 address is in conflict with another in the system, false otherwise.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get is_conflict
\& my $conflict = $ipam_address\->is_conflict();
.Ve
.RE
.RS 4
.RE
.SS "is_invalid_mac( )"
.IX Subsection "is_invalid_mac( )"
.RS 4
Use this method to retrieve the flag used to indicate whether an invalid \s-1MAC\s0 address is used. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get is_invalid_mac value
\& my $is_invalid_mac = $ipam_address\->is_invalid_mac();
.Ve
.RE
.RS 4
.RE
.SS "last_discovered( )"
.IX Subsection "last_discovered( )"
.RS 4
Use this method to retrieve the last discovered time of an \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the last discovered value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last discovered
\& my $last_discovered = $ipam_address\->last_discovered();
.Ve
.RE
.RS 4
.RE
.SS "lease_state( )"
.IX Subsection "lease_state( )"
.RS 4
Use this method to retrieve the lease state of an \s-1IPAM\s0 address object. This method applies to IPv4 addresses only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the lease state value. A valid state is any of the following string values: free, backup, active, expired, released, abandoned, and reset.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get lease state
\& my $lease_state = $ipam_address\->lease_state();
.Ve
.RE
.RS 4
.RE
.SS "mac_address( )"
.IX Subsection "mac_address( )"
.RS 4
Use this method to retrieve the \s-1MAC\s0 address of an \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1MAC\s0 address value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get mac address
\& my $mac_address = $ipam_address\->mac_address();
.Ve
.RE
.RS 4
.RE
.SS "ms_ad_user_data( )"
.IX Subsection "ms_ad_user_data( )"
.RS 4
Use this method to retrieve Microsoft Active Directory users related information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::MSServer::AdUser::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_ad_user_data
\& my $ms_ad_user_data = $ipam_address\->ms_ad_user_data();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to retrieve the name of an \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the name value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name
\& my $name = $ipam_address\->name();
.Ve
.RE
.RS 4
.RE
.SS "netbios_name( )"
.IX Subsection "netbios_name( )"
.RS 4
Use this method to retrieve the \s-1NETBIOS\s0 name of an \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1NETBIOS\s0 name value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get netbios name
\& my $netbios_name = $ipam_address\->netbios_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_description( )"
.IX Subsection "network_component_description( )"
.RS 4
Use this method to retrieve the description of the network device that is connected to the \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device description.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_description
\& my $network_component_description = $ipam_address\->network_component_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_ip( )"
.IX Subsection "network_component_ip( )"
.RS 4
Use this method to retrieve the \s-1IP\s0 address of the network device that is connected to the \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device \s-1IP\s0 address.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_ip
\& my $network_component_ip = $ipam_address\->network_component_ip();
.Ve
.RE
.RS 4
.RE
.SS "network_component_name( )"
.IX Subsection "network_component_name( )"
.RS 4
Use this method to retrieve the name of the network device that is connected to the \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_name
\& my $network_component_name = $ipam_address\->network_component_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_description( )"
.IX Subsection "network_component_port_description( )"
.RS 4
Use this method to retrieve the description of the network device port that is connected to the \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port description.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_description
\& my $network_component_port_description = $ipam_address\->network_component_port_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_name( )"
.IX Subsection "network_component_port_name( )"
.RS 4
Use this method to retrieve the name of the network device port that is connected to the \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_name
\& my $network_component_port_name = $ipam_address\->network_component_port_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_number( )"
.IX Subsection "network_component_port_number( )"
.RS 4
Use this method to retrieve the number of the network device port that is connected to the \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_number
\& my $network_component_port_number = $ipam_address\->network_component_port_number();
.Ve
.RE
.RS 4
.RE
.SS "network_component_type( )"
.IX Subsection "network_component_type( )"
.RS 4
Use this method to retrieve the type of the network device that is connected to the \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device type.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_type
\& my $network_component_type = $ipam_address\->network_component_type();
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to retrieve the network view name of an \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network view name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network view
\& my $nview_name = $ipam_address\->network_view();
.Ve
.RE
.RS 4
.RE
.SS "objects( )"
.IX Subsection "objects( )"
.RS 4
Use this method to retrieve the \s-1IPAM\s0 address object's associated objects.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a reference to an array of associated objects. Note that this method has to be explicitly requested via Infoblox::Session's return_methods member.
.Sp
Associated objects can be one or more of the following \s-1PAPI\s0 objects:
.Sp
.Vb 8
\& Infoblox::DHCP::FixedAddr
\& Infoblox::DHCP::IPv6FixedAddr
\& Infoblox::DHCP::Lease
\& Infoblox::DNS::BulkHost
\& Infoblox::DNS::Host
\& Infoblox::DNS::Record::A
\& Infoblox::DNS::Record::AAAA
\& Infoblox::DNS::Record::PTR
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& my @retrieved_obj = $session\->get(
\&                                   object     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                   start_addr => \*(Aq10.0.0.0\*(Aq,
\&                                   end_addr   => \*(Aq10.0.0.9\*(Aq,
\&                                   return_methods => [\*(Aq+objects\*(Aq],
\&                                  );
\&
\& # Get the associated objects (if any)
\& my $associated_ref = $retrieved_obj[0]\->objects();
.Ve
.RE
.RS 4
.RE
.SS "os( )"
.IX Subsection "os( )"
.RS 4
Use this method to retrieve the \s-1OS\s0 of an \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1OS\s0 value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get os
\& my $os = $ipam_address\->os();
.Ve
.RE
.RS 4
.RE
.SS "port_duplex( )"
.IX Subsection "port_duplex( )"
.RS 4
Use this method to retrieve the duplex setting of the network device port that is connected to the \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the port duplex setting. Returned values, if any, are one of the following:
.Sp
.Vb 2
\&  Full
\&  Half
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_duplex
\& my $port_duplex = $ipam_address\->port_duplex();
.Ve
.RE
.RS 4
.RE
.SS "port_link_status( )"
.IX Subsection "port_link_status( )"
.RS 4
Use this method to retrieve the link status of the network device port that is connected to the \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the port link status of the network device. Returned values, if any, are one of the following:
.Sp
.Vb 3
\&  Connected
\&  Not Connected
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_link_status
\& my $port_link_status = $ipam_address\->port_link_status();
.Ve
.RE
.RS 4
.RE
.SS "port_speed( )"
.IX Subsection "port_speed( )"
.RS 4
Use this method to retrieve the speed of the network device port that is connected to the \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the port speed. Returned values, if any, are one of the following:
.Sp
.Vb 6
\&  10M
\&  100M
\&  1G
\&  10G
\&  100G
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_speed
\& my $port_speed = $ipam_address\->port_speed();
.Ve
.RE
.RS 4
.RE
.SS "port_status( )"
.IX Subsection "port_status( )"
.RS 4
Use this method to retrieve the status of the network device port that is connected to the \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port status. Returned values, if any, are one of the following:
.Sp
.Vb 3
\&  Up
\&  Down
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_status
\& my $port_status = $ipam_address\->port_status();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_description( )"
.IX Subsection "port_vlan_description( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 description of the network device port that is connected to the \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port \s-1VLAN\s0 description.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_description
\& my $port_vlan_description = $ipam_address\->port_vlan_description();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_name( )"
.IX Subsection "port_vlan_name( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 name of the network device port that is connected to the \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port \s-1VLAN\s0 name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_name
\& my $port_vlan_name = $ipam_address\->port_vlan_name();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_number( )"
.IX Subsection "port_vlan_number( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 number of the network device port that is connected to the \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port \s-1VLAN\s0 number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_number
\& my $port_vlan_number = $ipam_address\->port_vlan_number();
.Ve
.RE
.RS 4
.RE
.SS "reserved_port( )"
.IX Subsection "reserved_port( )"
.RS 4
Use this method to retrieve the reserved port. This attribute is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get reserved_port
\& my $value = $ipam_address\->reserved_port();
.Ve
.RE
.RS 4
.RE
.SS "status( )"
.IX Subsection "status( )"
.RS 4
Use this method to retrieve the status of an \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the status value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get status
\& my $status = $ipam_address\->status();
.Ve
.RE
.RS 4
.RE
.SS "types( )"
.IX Subsection "types( )"
.RS 4
Use this method to retrieve the type of an \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the type value. A valid value is a comma-separated list that contains a subset of the following values: A, \s-1FA, RESERVATION, RANGE, LEASE, UNMANAGED, HOST, BULKHOST, PTR, NETWORK,\s0 and \s-1BROADCAST.\s0
Note that in the subset of values, \*(L"\s-1FA\*(R"\s0 refers to \*(L"fixed address\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get types
\& my $types= $ipam_address\->types();
.Ve
.RE
.RS 4
.RE
.SS "usage( )"
.IX Subsection "usage( )"
.RS 4
Use this method to retrieve the usage of an \s-1IPAM\s0 address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the usage value. A valid value is a comma-separated list that contains a subset of the following values: \s-1DNS, DHCP.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get usage
\& my $usage= $ipam_address\->usage();
.Ve
.RE
.RS 4
.RE
.SS "username( )"
.IX Subsection "username( )"
.RS 4
Use this method to retrieve the user name of an \s-1IPAM\s0 address object. This method applies to IPv4 addresses only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the user name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get username
\& my $username= $ipam_address\->username();
.Ve
.RE
.RS 4
.RE
.SS "v_cluster( )"
.IX Subsection "v_cluster( )"
.RS 4
Use this method to retrieve the name of the VMware cluster associated with the \s-1IPAM\s0 Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware cluster name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_cluster
\& my $v_cluster = $ipam_address\->v_cluster();
.Ve
.RE
.RS 4
.RE
.SS "v_datacenter( )"
.IX Subsection "v_datacenter( )"
.RS 4
Use this method to retrieve the name of the VMware datacenter associated with the \s-1IPAM\s0 Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware datacenter name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_datacenter
\& my $v_datacenter = $ipam_address\->v_datacenter();
.Ve
.RE
.RS 4
.RE
.SS "v_host( )"
.IX Subsection "v_host( )"
.RS 4
Use this method to retrieve the name of the VMware host associated with the \s-1IPAM\s0 Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware host name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_host
\& my $v_host = $ipam_address\->v_host();
.Ve
.RE
.RS 4
.RE
.SS "v_name( )"
.IX Subsection "v_name( )"
.RS 4
Use this method to retrieve the name of the VMware entity associated with the \s-1IPAM\s0 Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware entity name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_name
\& my $v_name = $ipam_address\->v_name();
.Ve
.RE
.RS 4
.RE
.SS "v_netadapter( )"
.IX Subsection "v_netadapter( )"
.RS 4
Use this method to retrieve the name of the physical network adapter through which the VMware entity is connected to the appliance. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the network adapter name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_netadapter
\& my $v_netadapter = $ipam_address\->v_netadapter();
.Ve
.RE
.RS 4
.RE
.SS "v_switch( )"
.IX Subsection "v_switch( )"
.RS 4
Use this method to retrieve the name of the virtual switch through which the VMware entity is connected to the appliance. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the virtual switch name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_switch
\& my $v_switch = $ipam_address\->v_switch();
.Ve
.RE
.RS 4
.RE
.SS "v_type( )"
.IX Subsection "v_type( )"
.RS 4
Use this method to retrieve the type of VMware entity associated with the \s-1IPAM\s0 Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware entity type. The default value is an empty string. The returned value, if any, can be one of the following:
.Sp
.Vb 3
\& VirtualMachine
\& HostSystem
\& VirtualCenter
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_type
\& my $v_type = $ipam_address\->v_type();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the get session method on an \s-1IPAM\s0 address object.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& my $host_ip = "192.168.1.2";
\& my $host_name = "localhost";
\& my $node_ip = "192.168.1.2";
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&                master   => $host_ip,
\&                username => "admin",
\&                password => "infoblox"
\&                );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& my $memberdhcp = Infoblox::DHCP::Member\->new(
\&           name     => $host_name,
\&           ipv4addr => $node_ip,
\&      );
\&
\& #Create a large network object
\& my $network_large = Infoblox::DHCP::Network\->new(
\&                                           "network" => "10.0.0.0/8",
\&                                           "members" => [$memberdhcp],
\&                                          );
\&
\& $session\->add($network_large)
\&    or die("Add network failed: " . $session\->status_code() . ": " . $session\->status_detail());
\&
\& #Create another member
\& my $new_member = Infoblox::Grid::Member\->new(
\&        grid      => "0",
\&        name      => "foo.com",
\&        ipv4addr  => "3.0.0.2",
\&        mask      => "255.255.255.0",
\&        gateway   => "3.0.0.1",
\&      );
\& $session\->add($new_member)
\&    or die("Add grid member failed: " . $session\->status_code() . ": " . $session\->status_detail());
\&
\& my $memberdhcp2 = Infoblox::DHCP::Member\->new(
\&           name     => "foo.com",
\&           ipv4addr => "3.0.0.2",
\&      );
\&
\& #Create a network view
\& my $nview = Infoblox::DHCP::View\->new(
\&                                   "name" => "my_network_view",
\&                                  );
\& $session\->add($nview)
\&    or die("Add network view failed: " . $session\->status_code() . ": " . $session\->status_detail());
\&
\& #Create a DNS view associated with the network view
\& my $view = Infoblox::DNS::View\->new(
\&   "name" => "my_dns_view",
\&   "network_view" => $nview,
\& );
\& $session\->add($view)
\&    or die("Add DNS view failed: " . $session\->status_code() . ": " . $session\->status_detail());
\&
\& #Create a DNS Zone in a non\-default DNS view
\& my $zone = Infoblox::DNS::Zone\->new(
\&   "name" => "test.com",
\&   "views" => [$view],
\& );
\& $session\->add($zone)
\&    or die("Add DNS Zone failed: " . $session\->status_code() . ": " . $session\->status_detail());
\&
\& #Create a small IPv4 network object with a non\-default network view
\& my $network_small = Infoblox::DHCP::Network\->new(
\&                                           "network" => "20.0.0.0/24",
\&                                           "members" => [$memberdhcp2],
\&                                           "network_view" => $nview,
\&                                          );
\&
\& $session\->add($network_small)
\&    or die("Add network failed: " . $session\->status_code() . ": " . $session\->status_detail());
\&
\& #Create an IPv6 network object with a non\-default network view
\& my $ipv6_network = Infoblox::DHCP::IPv6Network\->new(
\&     "network" => "2001::/64",
\&     "network_view" => $nview,
\& );
\& $session\->add($ipv6_network)
\&    or die("Add IPv6 network failed: " . $session\->status_code() . ": " . $session\->status_detail());
\&
\& #Construct an IPv4 DHCP range object
\& my $dhcp_range = Infoblox::DHCP::Range\->new(
\&         start_addr              => "10.0.0.1",
\&         end_addr                => "10.0.0.10",
\&         authority               => "true",
\&         bootfile                => "bootfile1.com",
\&         bootserver              => "someserver.com",
\&         comment                 => "add range",
\&         ddns_generate_hostname  => "true",
\&         deny_all_clients        => "true",
\&         deny_bootp              => "true",
\&         disable                 => "true",
\&         enable_ddns             => "true",
\&         member                  => $memberdhcp,
\&         nextserver              => "3.3.3.3",
\&         pxe_lease_time          => "3600",
\&         recycle_leases          => "true",
\& );
\&
\& $session\->add($dhcp_range)
\&    or die("Add DHCP range failed: " . $session\->status_code() . ": " . $session\->status_detail());
\&
\& #Construct an IPv4 DHCP fixed address object
\& my $fixed_addr = Infoblox::DHCP::FixedAddr\->new(
\&       "ipv4addr"       => "10.0.0.15",
\&       "mac"            => "11:11:11:11:11:11",
\&       "dhcp_client_identifier" => "",
\&       "client_identifier_prepend_zero"   => "false",
\&       "match_client"   => "MAC",
\&       "network"        => "10.0.0.0/8",
\&       "bootfile"       => "bootfile",
\&       "bootserver"     => "bootserver.com",
\&       "comment"        => "add fixed address",
\&       "deny_bootp"     => "false",
\&       "disable"        => "false",
\&       "dynamic"        => "false",
\&       "enable_ddns"    => "false",
\&       "nextserver"     => "3.3.3.3",
\&       "pxe_lease_time" => "3600",
\& );
\&
\& $session\->add($fixed_addr)
\&    or die("Add DHCP range failed: " . $session\->status_code() . ": " . $session\->status_detail());
\&
\& #Construct IPv6 Host and AAAA record objects in a non\-default DNS view
\& my $host = Infoblox::DNS::Host\->new(
\&       "name"           => "host1.test.com",
\&       "ipv6addrs"      => ["2001::1", "2001::2", "2001::5"],
\&       "views"          => [$view],
\& );
\&
\& $session\->add($host)
\&    or die("Add host failed: " . $session\->status_code() . ": " . $session\->status_detail());
\&
\& my $aaaa = Infoblox::DNS::Record::AAAA\->new(
\&       "name"           => "myhost1.test.com",
\&       "ipv6addr"       => "2001::1",
\&       "views"          => [$view],
\& );
\&
\& $session\->add($aaaa)
\&    or die("Add AAAA record failed: " . $session\->status_code() . ": " . $session\->status_detail());
\&
\&    # Case 1: Get IPAM address objects using \*(Aqnetwork\*(Aq
\&    # This should return 2000 IPAM addresses
\&    my @ipam_objects = $session\->get(\*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                     \*(Aqnetwork\*(Aq    => \*(Aq10.0.0.0/8\*(Aq);
\&    unless( scalar(@ipam_objects) == 2000) {
\&        die("Returned IPAM addresses number is not correct");
\&    }
\&    print("Returned IPAM addresses number correctly\en");
\&
\&    # Case 2: Get IPAM address objects using \*(Aqstart_addr\*(Aq
\&    # This should return 2000 IPAM addresses
\&    my @ipam_objects = $session\->get(\*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                     \*(Aqnetwork\*(Aq    => \*(Aq10.0.0.0/8\*(Aq,
\&                                     \*(Aqstart_addr\*(Aq => \*(Aq10.0.0.10\*(Aq);
\&    unless( scalar(@ipam_objects) == 2000) {
\&        die("Returned IPAM addresses number is not correct");
\&    }
\&    print("Returned IPAM addresses number correctly\en");
\&
\&    # Case 3: Get IPAM address objects using \*(Aqstart_addr\*(Aq and \*(Aqend_addr\*(Aq
\&   # This should return the specified number of IPAM addresses
\&    my @ipam_objects = $session\->get(\*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                     \*(Aqnetwork\*(Aq    => \*(Aq10.0.0.0/8\*(Aq,
\&                                     \*(Aqstart_addr\*(Aq => \*(Aq10.0.0.10\*(Aq,
\&                                     \*(Aqend_addr\*(Aq   => \*(Aq10.0.0.100\*(Aq);
\&
\&    unless( scalar(@ipam_objects) == 91 ) {
\&        die("Returned IPAM addresses number is not correct");
\&    }
\&    print("Returned IPAM addresses number correctly\en");
\&
\&    # Case 4: Get IPAM address objects using \*(Aqaddress\*(Aq
\&    # This should return one IPAM address
\&    my @ipam_objects = $session\->get(\*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                     \*(Aqaddress\*(Aq    => \*(Aq10.0.0.10\*(Aq);
\&    unless( scalar(@ipam_objects) == 1 ) {
\&        die("Returned IPAM addresses number is not correct");
\&    }
\&    print("Returned IPAM addresses number correctly\en");
\&
\&   # Case 5: Get IPAM address objects using a \*(Aqstart_addr\*(Aq that is close to the end of the network
\&   # This should return IPAM addresses from the start_addr to the end of the  network
\&    my @ipam_objects = $session\->get(\*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                     \*(Aqnetwork\*(Aq    => \*(Aq10.0.0.0/8\*(Aq,
\&                                     \*(Aqstart_addr\*(Aq => \*(Aq10.255.255.100\*(Aq);
\&
\&    unless( scalar(@ipam_objects) == 156 ) {
\&        die("Returned IPAM addresses number is not correct");
\&    }
\&    print("Returned IPAM addresses number correctly\en");
\&
\&    # Case 6: Get IPAM address objects using \*(Aqstart_addr\*(Aq and \*(Aqend_addr\*(Aq
\&   # but the total number of IP addresses in this scope is more than 2000.
\&   # This should return 2000 IPAM addresses starting with the start_addr.
\&    my @ipam_objects = $session\->get(\*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                     \*(Aqnetwork\*(Aq    => \*(Aq10.0.0.0/8\*(Aq,
\&                                     \*(Aqstart_addr\*(Aq => \*(Aq10.0.0.100\*(Aq,
\&                                     \*(Aqend_addr\*(Aq   => \*(Aq10.255.255.100\*(Aq);
\&
\&    unless( scalar(@ipam_objects) == 2000 ) {
\&        die("Returned IPAM addresses number is not correct");
\&    }
\&    print("Returned IPAM addresses number correctly\en");
\&
\&   # Case 7: Get IPAM address objects from a small network.
\&   # This should return all IP addresses in this network.
\&    my @ipam_objects = $session\->get(\*(Aqobject\*(Aq       => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                     \*(Aqnetwork\*(Aq      => \*(Aq20.0.0.0/24\*(Aq,
\&                                     \*(Aqnetwork_view\*(Aq => \*(Aqmy_network_view\*(Aq);
\&
\&    unless( scalar(@ipam_objects) == 256 ) {
\&        die("Returned IPAM addresses number is not correct");
\&    }
\&    print("Returned IPAM addresses number correctly\en");
\&
\&    # Case 8: Get IPAM address objects using \*(Aqtype = used\*(Aq
\&   # This should return a total of 11 IP addresses in this network
\&   # which includes 10 in the range and 1 fixed address
\&    my @ipam_objects = $session\->get(\*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                     \*(Aqnetwork\*(Aq    => \*(Aq10.0.0.0/8\*(Aq,
\&                                     \*(Aqstart_addr\*(Aq => \*(Aq10.0.0.0\*(Aq,
\&                                     \*(Aqend_addr\*(Aq   => \*(Aq10.0.0.100\*(Aq,
\&                                     \*(Aqtype\*(Aq       => \*(Aqused\*(Aq);
\&
\&    unless( scalar(@ipam_objects) == 11 ) {
\&        die("Returned IPAM addresses number is not correct");
\&    }
\&    print("Returned IPAM addresses number correctly\en");
\&
\&    # Case 9: Get IPAM address objects using \*(Aqtype = unused\*(Aq
\&   # This should return a total of 90 (101 \- 11 = 90) IP addresses in this network
\&   # which excludes 10 in the range and 1 fixed address
\&    my @ipam_objects = $session\->get(\*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                     \*(Aqnetwork\*(Aq    => \*(Aq10.0.0.0/8\*(Aq,
\&                                     \*(Aqstart_addr\*(Aq => \*(Aq10.0.0.0\*(Aq,
\&                                     \*(Aqend_addr\*(Aq   => \*(Aq10.0.0.100\*(Aq,
\&                                     \*(Aqtype\*(Aq       => \*(Aqunused\*(Aq);
\&
\&    unless( scalar(@ipam_objects) == 90 ) {
\&        die("Returned IPAM addresses number is not correct");
\&    }
\&    print("Returned IPAM addresses number correctly\en");
\&
\&    # Case 10: Get IPAM address objects using \*(Aqaddress\*(Aq
\&   # This should return one IPAM address object for later tests
\&    my @ipam_objects = $session\->get(\*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                     \*(Aqaddress\*(Aq    => \*(Aq10.0.0.15\*(Aq);
\&    unless( scalar(@ipam_objects) == 1 ) {
\&        die("Returned IPAM addresses number is not correct");
\&    }
\&    print("Returned IPAM addresses number correctly\en");
\&
\&    my $ipam_object = $ipam_objects[0];
\&
\&    unless($ipam_object\->status() eq "Used") {
\&        die("Returned IPAM address object\*(Aqs status is wrong");
\&    }
\&    print("Returned IPAM address object\*(Aqs status correctly\en");
\&
\&    unless($ipam_object\->usage() eq "DHCP") {
\&        die("Returned IPAM address object\*(Aqs usage is wrong");
\&    }
\&    print("Returned IPAM address object\*(Aqs usage correctly\en");
\&
\&    unless($ipam_object\->mac_address() eq $fixed_addr\->mac()) {
\&        die("Returned IPAM address object\*(Aqs mac address is wrong");
\&    }
\&    print("Returned IPAM address object\*(Aqs mac address correctly\en");
\&
\&    unless($ipam_object\->dhcp_client_identifier() eq $fixed_addr\->dhcp_client_identifier()) {
\&        die("Returned IPAM address object\*(Aqs dhcp client identifier is wrong");
\&    }
\&    print("Returned IPAM address object\*(Aqs dhcp client identifier correctly\en");
\&
\&    # Case 11: Get IPv6 IPAM address objects using \*(Aqnetwork\*(Aq
\&    # This should return 3 used IPAM addresses
\&    my @ipam_objects = $session\->get(\*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                     \*(Aqnetwork\*(Aq    => \*(Aq2001::/64\*(Aq,
\&                                     \*(Aqnetwork_view\*(Aq => \*(Aqmy_network_view\*(Aq);
\&    unless( scalar(@ipam_objects) == 3) {
\&        die("Returned IPAM addresses number is not correct");
\&    }
\&    print("Returned IPAM addresses number correctly\en");
\&
\&    # Case 12: Get IPv6 IPAM address objects using \*(Aqstart_addr\*(Aq
\&    # This should return 2 used IPAM addresses (2001::2, 2001::5)
\&    my @ipam_objects = $session\->get(\*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                     \*(Aqnetwork\*(Aq    => \*(Aq2001::/64\*(Aq,
\&                                     \*(Aqstart_addr\*(Aq => \*(Aq2001::2\*(Aq,
\&                                     \*(Aqnetwork_view\*(Aq => \*(Aqmy_network_view\*(Aq);
\&    unless( scalar(@ipam_objects) == 2) {
\&        die("Returned IPAM addresses number is not correct");
\&    }
\&    print("Returned IPAM addresses number correctly\en");
\&
\&    # Case 13: Get IPv6 IPAM address objects using \*(Aqstart_addr\*(Aq and \*(Aqend_addr\*(Aq
\&   # This should return 2 used IPAM addresses
\&    my @ipam_objects = $session\->get(\*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                     \*(Aqnetwork\*(Aq    => \*(Aq2001::/64\*(Aq,
\&                                     \*(Aqstart_addr\*(Aq => \*(Aq2001::1\*(Aq,
\&                                     \*(Aqend_addr\*(Aq   => \*(Aq2001::3\*(Aq,
\&                                     \*(Aqnetwork_view\*(Aq => \*(Aqmy_network_view\*(Aq);
\&    unless( scalar(@ipam_objects) == 2 ) {
\&        die("Returned IPAM addresses number is not correct");
\&    }
\&    print("Returned IPAM addresses number correctly\en");
\&
\&    # Case 14: Get IPv6 IPAM address objects using \*(Aqaddress\*(Aq
\&    # This should return one IPAM address
\&    my @ipam_objects = $session\->get(\*(Aqobject\*(Aq     => \*(AqInfoblox::IPAM::Address\*(Aq,
\&                                     \*(Aqaddress\*(Aq    => \*(Aq2001::5\*(Aq,
\&                                     \*(Aqnetwork_view\*(Aq => \*(Aqmy_network_view\*(Aq);
\&    unless( scalar(@ipam_objects) == 1 ) {
\&        die("Returned IPAM addresses number is not correct");
\&    }
\&    print("Returned IPAM addresses number correctly\en");
\&
\&    my $ipam_object = $ipam_objects[0];
\&
\&    unless($ipam_object\->ip_address() eq "2001::5") {
\&        die("Returned IPAM address object\*(Aqs address is wrong");
\&    }
\&    print("Returned IPAM address object\*(Aqs address correctly\en");
\&
\&    unless($ipam_object\->status() eq "Used") {
\&        die("Returned IPAM address object\*(Aqs status is wrong");
\&    }
\&    print("Returned IPAM address object\*(Aqs status correctly\en");
\&
\&    unless($ipam_object\->usage() eq "DNS") {
\&        die("Returned IPAM address object\*(Aqs usage is wrong");
\&    }
\&    print("Returned IPAM address object\*(Aqs usage correctly\en");
\&
\&  # Remove IPAM Address object
\&  unless($session\->remove($ipam_object)) {
\&          die("Remove IPAM Address object failed");
\&  }
\&  print "Removed IPAM Address correctly\en";
\&
\&  my @retrieved_objs = $session\->get(
\&       object       => "Infoblox::DHCP::Network" ,
\&       network      => "10.0.0.0/8",
\&  );
\&  my $network = $retrieved_objs[0];
\&
\&  unless($session\->remove($network)) {
\&          die("Remove Network object failed");
\&  }
\&  print "Removed network correctly\en";
\&
\&  @retrieved_objs = $session\->get(
\&       object       => "Infoblox::DHCP::Network" ,
\&       network      => "20.0.0.0/24",
\&       network_view => "my_network_view",
\&  );
\&
\&  $network = $retrieved_objs[0];
\&
\&  unless($session\->remove($network)) {
\&          die("Remove Network object failed");
\&  }
\&  print "Removed network correctly\en";
\&
\&  $view = $session\->get(
\&      object  => "Infoblox::DNS::View",
\&      name    => "my_dns_view",
\&  );
\&  unless($session\->remove($view)) {
\&          die("Remove DNS View object failed");
\&  }
\&  print "Removed DNS view correctly\en";
\&
\&  $nview = $session\->get(
\&      object  => "Infoblox::DHCP::View",
\&      name    => "my_network_view",
\&  );
\&  unless($session\->remove($nview)) {
\&          die("Remove Network View object failed");
\&  }
\&  print "Removed network view correctly\en";
\&
\&  $new_member = $session\->get(
\&      object  => "Infoblox::Grid::Member",
\&      name    => "foo.com",
\&  );
\&  unless($session\->remove($new_member)) {
\&          die("Remove Grid Member object failed");
\&  }
\&  print "Removed grid member correctly\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,
Infoblox::DHCP::Network,
Infoblox::DHCP::View,
Infoblox::DHCP::FixedAddr,
Infoblox::DHCP::Range,
Infoblox::Session\->\fBget()\fR,
Infoblox::Grid::MSServer::AdUser::Data,
Infoblox::Grid::Discovery::Data
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
