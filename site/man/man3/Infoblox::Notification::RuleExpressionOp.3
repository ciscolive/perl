.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Notification::RuleExpressionOp 3"
.TH Infoblox::Notification::RuleExpressionOp 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Notification::RuleExpressionOp \- A notification rule expression operand object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The expression operand object is used to build expression lists. The allowed values for the expression operand object depend on the object they appear to be a part of.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $expression = Infoblox::Notification::RuleExpressionOp\->new(
\&     op       => \*(AqAND\*(Aq | \*(AqOR\*(Aq | \*(AqENDLIST\*(Aq | \*(AqEQ\*(Aq | \*(AqREGEX\*(Aq |
\&                 | \*(AqMATCH_CIDR\*(Aq | \*(AqMATCH_RANGE\*(Aq | \*(AqLE\*(Aq | \*(AqGE\*(Aq | \*(AqCONTAINED_IN\*(Aq            # Required
\&     op1      => \*(AqADDRESS_TYPE\*(Aq | \*(AqDHCP_FINGERPRINT\*(Aq |
\&                 \*(AqDHCP_LEASE_STATE\*(Aq | \*(AqDHCP_IP_ADDRESS\*(Aq | \*(AqDISABLE\*(Aq |
\&                 \*(AqDNS_RPZ_ACTION_POLICY\*(Aq | \*(AqDNS_RPZ_NAME\*(Aq | \*(AqDNS_RPZ_RULE_NAME\*(Aq |
\&                 \*(AqDNS_RPZ_TYPE\*(Aq | \*(AqDUID\*(Aq | \*(AqHOST\*(Aq | \*(AqIPV4_ADDRESS\*(Aq |
\&                 \*(AqIPV6_ADDRESS\*(Aq | \*(AqIPV6_PREFIX\*(Aq | \*(AqIPV6_PREFIX_BITS\*(Aq | \*(AqMAC\*(Aq |
\&                 \*(AqNAME\*(Aq | \*(AqNETWORK\*(Aq | \*(AqNETWORK_VIEW\*(Aq | \*(AqSECURITY_ADP_RULE_MESSAGE\*(Aq |
\&                 \*(AqSECURITY_ADP_RULE_SEVERITY\*(Aq | \*(AqSECURITY_ADP_SID\*(Aq |
\&                 \*(AqSERVER_ASSOC_TYPE_IPV4\*(Aq, \*(AqSERVER_ASSOC_TYPE_IPV6\*(Aq | \*(AqSOURCE_IP\*(Aq,        # Optional / Default is undefined
\&     op2      => $string,                                                                 # Optional / Default is undefined
\&     op1_type => \*(AqFIELD\*(Aq | \*(AqLIST\*(Aq,                                                        # Optional / Default is undefined
\&     op2_type => \*(AqSTRING\*(Aq,                                                                # Optional / Default is undefined
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The object does not support any session methods.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
.SS "Infoblox::Notification::Rule\->expression_list( )"
.IX Subsection "Infoblox::Notification::Rule->expression_list( )"
.RS 4
Use this method to set or retrieve the notification rule condition expression.
See Infoblox::Notification::Rule\->\fBexpression_list()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get expression_list value
\& my $expression_list = $object\->expression_list();
\&
\& #Modify expression_list value
\& $object\->expression_list([$start_list, $op1, $op2, $end_list]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.SS "op( )"
.IX Subsection "op( )"
.RS 4
Use this method to set or retrieve the operation name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1AND\s0', '\s-1OR\s0', '\s-1ENDLIST\s0', '\s-1EQ\s0', '\s-1NOT_EQ\s0', '\s-1LE\s0', '\s-1REGEX\s0', '\s-1GE\s0', '\s-1CONTAINED_IN\s0', '\s-1MATCH_CIDR\s0' and '\s-1MATCH_RANGE\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get op value
\& my $op = $object\->op();
\&
\& #Modify op value
\& $object\->op(\*(AqOR\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "op1( )"
.IX Subsection "op1( )"
.RS 4
Use this method to set or retrieve the first operand value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1ADDRESS_TYPE\s0', '\s-1DHCP_FINGERPRINT\s0' , '\s-1DHCP_LEASE_STATE\s0', '\s-1DHCP_IP_ADDRESS\s0', '\s-1DISABLE\s0' , '\s-1DNS_RPZ_ACTION_POLICY\s0', '\s-1DNS_RPZ_NAME\s0', '\s-1DNS_RPZ_RULE_NAME\s0' , '\s-1DNS_RPZ_TYPE\s0', '\s-1DUID\s0', '\s-1HOST\s0', '\s-1IPV4_ADDRESS\s0' , '\s-1IPV6_ADDRESS\s0', '\s-1IPV6_PREFIX\s0', '\s-1IPV6_PREFIX_BITS\s0', '\s-1MAC\s0' , '\s-1NAME\s0', '\s-1NETWORK\s0', '\s-1NETWORK_VIEW\s0', '\s-1SECURITY_ADP_RULE_MESSAGE\s0' , '\s-1SECURITY_ADP_RULE_SEVERITY\s0', '\s-1SECURITY_ADP_SID\s0' , '\s-1SERVER_ASSOC_TYPE_IPV4\s0', '\s-1SERVER_ASSOC_TYPE_IPV6\s0', '\s-1SOURCE_IP\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get op1 value
\& my $op1 = $object\->op1();
\&
\& #Modify op1 value
\& $object\->op1(\*(AqSOURCE_IP\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "op1_type( )"
.IX Subsection "op1_type( )"
.RS 4
Use this method to set or retrieve the first operand type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1FIELD\s0', '\s-1LIST\s0' and '\s-1STRING\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get op1_type value
\& my $op1_type = $object\->op1_type();
\&
\& #Modify op1_type value
\& $object\->op1_type(\*(AqLIST\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "op2( )"
.IX Subsection "op2( )"
.RS 4
Use this method to set or retrieve the second operand value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string that contains the second operand value.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get op2 value
\& my $op2 = $object\->op2();
\&
\& #Modify op2 value
\& $object\->op2(\*(AqOP2_VAL\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "op2_type( )"
.IX Subsection "op2_type( )"
.RS 4
Use this method to set or retrieve the second operand type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is '\s-1STRING\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get op2_type value
\& my $op2_type = $object\->op2_type();
\&
\& #Modify op2_type value
\& $object\->op2_type(\*(AqSTRING\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Notification::Rule,
Infoblox::Notification::Rule\->\fBexpression_list()\fR,
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
