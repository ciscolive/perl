.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::Layer3::Timetra 3"
.TH SNMP::Info::Layer3::Timetra 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::Layer3::Timetra \- SNMP Interface to Alcatel\-Lucent SR
.SH "AUTHOR"
.IX Header "AUTHOR"
Bill Fenner
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\& # Let SNMP::Info determine the correct subclass for you.
\& my $alu = new SNMP::Info(
\&                        AutoSpecify => 1,
\&                        Debug       => 1,
\&                        # These arguments are passed directly to SNMP::Session
\&                        DestHost    => \*(Aqmyswitch\*(Aq,
\&                        Community   => \*(Aqpublic\*(Aq,
\&                        Version     => 2
\&                        )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class      = $alu\->class();
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Subclass for Alcatel-Lucent Service Routers
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.IP "SNMP::Info::Layer3" 4
.IX Item "SNMP::Info::Layer3"
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.PD 0
.IP "\fITIMETRA-GLOBAL-MIB\fR" 4
.IX Item "TIMETRA-GLOBAL-MIB"
.IP "\fITIMETRA-LLDP-MIB\fR" 4
.IX Item "TIMETRA-LLDP-MIB"
.IP "\fITIMETRA-PORT-MIB\fR" 4
.IX Item "TIMETRA-PORT-MIB"
.IP "\fITIMETRA-CHASSIS-MIB\fR" 4
.IX Item "TIMETRA-CHASSIS-MIB"
.IP "Inherited Classes' MIBs" 4
.IX Item "Inherited Classes' MIBs"
.PD
See \*(L"Required MIBs\*(R" in SNMP::Info::Layer3 for its own \s-1MIB\s0 requirements.
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP\s0
.ie n .IP "$alu\->\fBvendor()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBvendor()\fR" 4
.IX Item "$alu->vendor()"
Returns 'nokia'
.ie n .IP "$alu\->\fBos()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBos()\fR" 4
.IX Item "$alu->os()"
Returns 'TiMOS'
.ie n .IP "$alu\->\fBos_ver()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBos_ver()\fR" 4
.IX Item "$alu->os_ver()"
Grabs the version string from \f(CW\*(C`sysDescr\*(C'\fR.
.ie n .IP "$alu\->\fBmodel()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBmodel()\fR" 4
.IX Item "$alu->model()"
Tries to combine series and model extracted from \f(CW$alu\fR\->\fBid()\fR to one of the
product MIBs.
.Sp
Removes 'tmnxModel' from the name for readability.
.ie n .IP "$alu\->\fBfan()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBfan()\fR" 4
.IX Item "$alu->fan()"
Return the status of all fans from the \fITIMETRA-CHASSIS-MIB\fR. Returns
a string indicating the number of fans '\s-1OK\s0' or identification of any fan without
a 'Ok' operating status.
.ie n .IP "$alu\->\fBps1_status()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBps1_status()\fR" 4
.IX Item "$alu->ps1_status()"
Return the status of the first power supply in each chassis from
the \fITIMETRA-CHASSIS-MIB\fR.
.ie n .IP "$alu\->\fBps2_status()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBps2_status()\fR" 4
.IX Item "$alu->ps2_status()"
Return the status of the second power supply in each chassis from
the \fITIMETRA-CHASSIS-MIB\fR.
.SS "Globals imported from SNMP::Info::Layer3"
.IX Subsection "Globals imported from SNMP::Info::Layer3"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::Layer3 for details.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.ie n .IP "$alu\->\fBi_duplex()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBi_duplex()\fR" 4
.IX Item "$alu->i_duplex()"
Returns reference to map of IIDs to current link duplex.
.ie n .IP "$alu\->\fBi_duplex_admin()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBi_duplex_admin()\fR" 4
.IX Item "$alu->i_duplex_admin()"
Returns reference to hash of IIDs to admin duplex setting.
.ie n .IP "$alu\->\fBagg_ports()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBagg_ports()\fR" 4
.IX Item "$alu->agg_ports()"
Returns a \s-1HASH\s0 reference mapping from slave to master port for each member of
a port bundle on the device. Keys are ifIndex of the slave ports, Values are
ifIndex of the corresponding master ports.
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$alu\->\fBinterfaces()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBinterfaces()\fR" 4
.IX Item "$alu->interfaces()"
Returns \f(CW\*(C`ifName\*(C'\fR, since the default Layer3 \f(CW\*(C`ifDescr\*(C'\fR varies based
upon the transceiver inserted.
.ie n .IP "$alu\->\fBlldp_if()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBlldp_if()\fR" 4
.IX Item "$alu->lldp_if()"
Returns the mapping to the \s-1SNMP\s0 Interface Table. Utilizes (\f(CW\*(C`ifIndex\*(C'\fR)
from the (\f(CW\*(C`tmnxLldpRemEntry \*(C'\fR) index.
.ie n .SS "\s-1LLDP\s0 Remote Table (""lldpRemTable"") uses (""TIMETRA\-LLDP\-MIB::tmnxLldpRemTable"")"
.el .SS "\s-1LLDP\s0 Remote Table (\f(CWlldpRemTable\fP) uses (\f(CWTIMETRA\-LLDP\-MIB::tmnxLldpRemTable\fP)"
.IX Subsection "LLDP Remote Table (lldpRemTable) uses (TIMETRA-LLDP-MIB::tmnxLldpRemTable)"
.ie n .IP "$alu\->\fBlldp_rem_id_type()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBlldp_rem_id_type()\fR" 4
.IX Item "$alu->lldp_rem_id_type()"
(\f(CW\*(C`tmnxLldpRemChassisIdSubtype\*(C'\fR)
.ie n .IP "$alu\->\fBlldp_rem_id()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBlldp_rem_id()\fR" 4
.IX Item "$alu->lldp_rem_id()"
(\f(CW\*(C`tmnxLldpRemChassisId\*(C'\fR)
.ie n .IP "$alu\->\fBlldp_rem_pid_type()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBlldp_rem_pid_type()\fR" 4
.IX Item "$alu->lldp_rem_pid_type()"
(\f(CW\*(C`tmnxLldpRemPortIdSubtype\*(C'\fR)
.ie n .IP "$alu\->\fBlldp_rem_pid()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBlldp_rem_pid()\fR" 4
.IX Item "$alu->lldp_rem_pid()"
(\f(CW\*(C`tmnxLldpRemPortId\*(C'\fR)
.ie n .IP "$alu\->\fBlldp_rem_desc()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBlldp_rem_desc()\fR" 4
.IX Item "$alu->lldp_rem_desc()"
(\f(CW\*(C`tmnxLldpRemPortDesc\*(C'\fR)
.ie n .IP "$alu\->\fBlldp_rem_sysname()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBlldp_rem_sysname()\fR" 4
.IX Item "$alu->lldp_rem_sysname()"
(\f(CW\*(C`tmnxLldpRemSysName\*(C'\fR)
.ie n .IP "$alu\->\fBlldp_rem_sysdesc()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBlldp_rem_sysdesc()\fR" 4
.IX Item "$alu->lldp_rem_sysdesc()"
(\f(CW\*(C`tmnxLldpRemSysDesc\*(C'\fR)
.ie n .IP "$alu\->\fBlldp_rem_sys_cap()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBlldp_rem_sys_cap()\fR" 4
.IX Item "$alu->lldp_rem_sys_cap()"
(\f(CW\*(C`tmnxLldpRemSysCapEnabled\*(C'\fR)
.SS "Entity Table"
.IX Subsection "Entity Table"
.ie n .IP "$alu\->\fBe_index()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBe_index()\fR" 4
.IX Item "$alu->e_index()"
(\f(CW\*(C`tmnxHwIndex\*(C'\fR)
.ie n .IP "$alu\->\fBe_class()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBe_class()\fR" 4
.IX Item "$alu->e_class()"
Chassis, Module, Fan, Power Supply ...
.Sp
(\f(CW\*(C`tmnxHwClass\*(C'\fR)
.ie n .IP "$alu\->\fBe_descr()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBe_descr()\fR" 4
.IX Item "$alu->e_descr()"
Human Friendly
.Sp
(\f(CW\*(C`tmnxHwName\*(C'\fR)
.ie n .IP "$alu\->\fBe_fwver()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBe_fwver()\fR" 4
.IX Item "$alu->e_fwver()"
(\f(CW\*(C`tmnxHwFirmwareCodeVersion\*(C'\fR)
.ie n .IP "$alu\->\fBe_fru()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBe_fru()\fR" 4
.IX Item "$alu->e_fru()"
\&\s-1BOOLEAN.\s0 Is a Field Replaceable unit?
.Sp
(\f(CW\*(C`tmnxHwIsFRU\*(C'\fR)
.ie n .IP "$alu\->\fBe_model()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBe_model()\fR" 4
.IX Item "$alu->e_model()"
Model Name of Entity.
.Sp
(\f(CW\*(C`tmnxHwMfgBoardNumber\*(C'\fR)
.ie n .IP "$alu\->\fBe_name()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBe_name()\fR" 4
.IX Item "$alu->e_name()"
More computer friendly name of entity.
.Sp
(\f(CW\*(C`tmnxHwName\*(C'\fR)
.ie n .IP "$alu\->\fBe_parent()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBe_parent()\fR" 4
.IX Item "$alu->e_parent()"
0 if root.
.Sp
(\f(CW\*(C`tmnxHwContainedIn\*(C'\fR)
.ie n .IP "$alu\->\fBe_pos()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBe_pos()\fR" 4
.IX Item "$alu->e_pos()"
The relative position among all entities sharing the same parent.
.Sp
(\f(CW\*(C`tmnxHwParentRelPos\*(C'\fR)
.ie n .IP "$alu\->\fBe_serial()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBe_serial()\fR" 4
.IX Item "$alu->e_serial()"
(\f(CW\*(C`tmnxHwSerialNumber\*(C'\fR)
.ie n .IP "$alu\->\fBe_swver()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBe_swver()\fR" 4
.IX Item "$alu->e_swver()"
(\f(CW\*(C`tmnxHwSoftwareCodeVersion\*(C'\fR)
.SS "Table Methods imported from SNMP::Info::Layer3"
.IX Subsection "Table Methods imported from SNMP::Info::Layer3"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::Layer3 for details.
.SH "Data Munging Callback Subroutines"
.IX Header "Data Munging Callback Subroutines"
.ie n .IP "$alu\->\fBmunge_tmnx_state()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBmunge_tmnx_state()\fR" 4
.IX Item "$alu->munge_tmnx_state()"
Removes 'deviceState' or 'device' from \f(CW\*(C`TmnxDeviceState\*(C'\fR strings.
.ie n .IP "$alu\->\fBmunge_tmnx_e_class()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBmunge_tmnx_e_class()\fR" 4
.IX Item "$alu->munge_tmnx_e_class()"
Attempts to normalize \f(CW\*(C`tmnxHwClass\*(C'\fR to an \f(CW\*(C`IANAPhysicalClass\*(C'\fR.
.ie n .IP "$alu\->\fBmunge_tmnx_e_swver()\fR" 4
.el .IP "\f(CW$alu\fR\->\fBmunge_tmnx_e_swver()\fR" 4
.IX Item "$alu->munge_tmnx_e_swver()"
Extracts the software version from \f(CW\*(C`tmnxHwSoftwareCodeVersion\*(C'\fR string.
