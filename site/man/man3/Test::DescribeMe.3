.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::DescribeMe 3"
.TH Test::DescribeMe 3 "2013-04-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::DescribeMe \- Tell test runners what kind of test you are
.SH "VERSION"
.IX Header "VERSION"
version 0.004
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Maybe you're an author test and users shouldn't run you:
.PP
.Vb 1
\&  use Test::DescribeMe qw(author);
.Ve
.PP
Or maybe you are a really slow test you don't want to bother most people with:
.PP
.Vb 1
\&  use Test::DescribeMe qw(extended);
.Ve
.PP
Or perhaps you only want to run on smokers
.PP
.Vb 1
\&  use Test::DescribeMe qw(smoke);
.Ve
.PP
Or a combination there of
.PP
.Vb 1
\&  use Test::DescribeMe qw(smoke extended);
.Ve
.PP
Or you require user input
.PP
.Vb 1
\&  use Test::DescribeMe qw(interactive);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Sometimes you want to run (or not run) tests under certain conditions. This 
module provides a way to identify what kind of test a test is and will skip the 
test if the matching conditions aren't met. See \*(L"\s-1BACKGROUND\*(R"\s0 below for a 
longer description.
.SS "Usage"
.IX Subsection "Usage"
To describe what kind of test you are, you \f(CW\*(C`use()\*(C'\fR this module and pass test 
types to the import list. This \fB\s-1SHOULD\s0\fR be done before importing Test::More 
if you set explicit plans or tests will break!
.PP
Example:
.PP
.Vb 2
\&  use Test::DescribeMe qw(smoke);
\&  use Test::More tests => 5;
.Ve
.PP
(Although you probably want \*(L"done_testing\*(R" in Test::More without explicit plans).
.PP
The available test descriptions and effects are:
.IP "\(bu" 4
\&\fBsmoke\fR \- This test only wants to run on smoke boxes.
.IP "\(bu" 4
\&\fBinteractive\fR \- This test requires user interaction and should not be run 
in cases where this isn't wanted or available
.IP "\(bu" 4
\&\fBextended\fR \- This test should only be run if someone really wants to \- as it 
may take a long time or use lots of resources.
.IP "\(bu" 4
\&\fBauthor\fR \- This is an author test and should only be run during development 
time.
.IP "\(bu" 4
\&\fBrelease\fR \- This is a release test and should onyl be run pre-release to 
ensure a build is insane.
.SS "More Control"
.IX Subsection "More Control"
If this doesn't provide the control you're looking for \- for example, \s-1NOT\s0 
running a test if on a smoker, see Test::Settings.
.SH "BACKGROUND"
.IX Header "BACKGROUND"
With the Lancaster Consensus at the Perl \s-1QA\s0 Hackathon 2013, a 'new' system has 
been defined which provides two new test environment variables and reaffirms an 
existing one.
.PP
\&\fB\s-1AUTOMATED_TESTING\s0\fR was meant to be used by smokers, but has been abused to say 
things like \*(L"Only run this test on smokers since it takes a long time.\*(R" The 
problem with this is install tools want to say \*(L"Run all tests but don't prompt 
the user\*(R" and the only way to do that is with \fB\s-1AUTOMATED_TESTING\s0\fR, and so they 
end up running the long running tests and wasting time.
.PP
In order to support the other behaviors, \fB\s-1AUTOMATED_TESTING\s0\fR will once again mean 
\&\*(L"I am a smoker running these tests\*(R" and two new environmental variables 
\&\fB\s-1EXTENDED_TESTING\s0\fR and \fB\s-1NONINTERACTIVE_TESTING\s0\fR will handle the two other cases.
.PP
\&\fB\s-1EXTENDED_TESTING\s0\fR is for tests that may take a long time or require special 
configuration that is too complex for typical intalls \- like requiring other 
software for testing or internet connections.
.PP
\&\fB\s-1NONINTERACTIVE_TESTING\s0\fR can be used by a build system like App::cpanminus to say 
don't run tests that require user interaction.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::Settings \- Ask or tell when certain types of tests should be run
.PP
Test::Is \- Skip test in a declarative way, following the Lancaster Consensus
.PP
<https://github.com/Perl\-Toolchain\-Gang/toolchain\-site/blob/master/lancaster\-consensus.md> \-
The Annotated Lancaster Consensus
.SH "AUTHOR"
.IX Header "AUTHOR"
Matthew Horsfall (alh) \- <wolfsage@gmail.com>
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
