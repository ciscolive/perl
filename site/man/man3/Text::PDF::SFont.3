.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::PDF::SFont 3"
.TH Text::PDF::SFont 3 "2016-08-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::PDF::SFont \- PDF Standard inbuilt font resource object. Inherits from
Text::PDF::Dict
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "Text::PDF::SFont\->new($parent, $name, $pdfname)"
.el .SS "Text::PDF::SFont\->new($parent, \f(CW$name\fP, \f(CW$pdfname\fP)"
.IX Subsection "Text::PDF::SFont->new($parent, $name, $pdfname)"
Creates a new font object with given parent and name. The name must be from
one of the core 14 base fonts included with \s-1PDF.\s0 These are:
.PP
.Vb 4
\&    Courier,     Courier\-Bold,   Courier\-Oblique,   Courier\-BoldOblique
\&    Times\-Roman, Times\-Bold,     Times\-Italic,      Times\-BoldItalic
\&    Helvetica,   Helvetica\-Bold, Helvetica\-Oblique, Helvetica\-BoldOblique
\&    Symbol,      ZapfDingbats
.Ve
.PP
The \f(CW$pdfname\fR is the name that this particular font object will be referenced
by throughout the \s-1PDF\s0 file. If you want to play silly games with naming, then
you can write the code to do it!
.PP
All fonts in this system are full \s-1PDF\s0 objects.
.SH "BUGS"
.IX Header "BUGS"
Currently no width support for Symbol or ZapfDingbats, I haven't
got my head around the AFMs yet.
.PP
MacExpertEncoding not supported yet (I don't have the width info for any
of the fonts)
.ie n .SS "$f\->width($text)"
.el .SS "\f(CW$f\fP\->width($text)"
.IX Subsection "$f->width($text)"
Returns the width of the text in em.
.ie n .SS "$f\->trim($text, $len)"
.el .SS "\f(CW$f\fP\->trim($text, \f(CW$len\fP)"
.IX Subsection "$f->trim($text, $len)"
Trims the given text to the given length (in em) returning the trimmed
text
.ie n .SS "$f\->out_text($text)"
.el .SS "\f(CW$f\fP\->out_text($text)"
.IX Subsection "$f->out_text($text)"
Acknowledges the text to be output for subsetting purposes, etc.
