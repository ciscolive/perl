.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Generic::Boolean 3"
.TH Module::Generic::Boolean 3 "2020-05-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Generic::Boolean \- Boolean Representation Class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    my $bool = Module::Generic::Boolean\->true;
\&    # or
\&    my $bool = Module::Generic::Boolean::true;
\&    # Now I have a Module::Generic::Boolean object
\&
\&    # Returns 1
\&    if( $bool )
\&    {
\&        # Do something
\&    }
\&
\&    my $hash =
\&    {
\&        name => \*(AqJohn Doe\*(Aq,
\&        active => $bool,
\&    };
\&    # Converting to json
\&    print( JSON\->new\->encode( $hash ), "\en" );
\&    # Would result in
\&    {
\&        name: "Jogn Doe",
\&        active: true
\&    }
.Ve
.SH "VERSION"
.IX Header "VERSION"
.Vb 1
\&    v0.1.0
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This a class/package to represent boolean value and make sure they are recognised interchangeably as perl boolean, i.e. 1 or 0, or as \s-1JSON\s0 bool, i.e. \f(CW\*(C`true\*(C'\fR or \f(CW\*(C`false\*(C'\fR
.PP
The code is taken and adapted from part of \s-1JSON\s0 module.
.SH "METHODS"
.IX Header "METHODS"
.SS "true"
.IX Subsection "true"
This returns a perl true value i.e. 1 or \f(CW\*(C`true\*(C'\fR when added into \s-1JSON\s0
.SS "false"
.IX Subsection "false"
This returns a perl false value i.e. 0 or \f(CW\*(C`false\*(C'\fR when added into \s-1JSON\s0
.SS "is_bool"
.IX Subsection "is_bool"
Provided with a value and this returns true if it is a Module::Generic::Boolean object
.SS "is_true"
.IX Subsection "is_true"
Provided with a value and this returns true if it is a Module::Generic::Boolean object and this is true.
.SS "is_false"
.IX Subsection "is_false"
Provided with a value and this returns true if it is a Module::Generic::Boolean object and this is false.
.SS "\s-1TO_JSON\s0"
.IX Subsection "TO_JSON"
This is called by \s-1JSON\s0 to transform an object into json data format.
.PP
It returns \f(CW\*(C`\e1\*(C'\fR if true, or \f(CW\*(C`\e0\*(C'\fR otherwise. Those values are understood by \s-1JSON\s0 and transcoded accordingly.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jacques Deguest <\fIjack@deguest.jp\fR>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (c) 2000\-2020 \s-1DEGUEST\s0 Pte. Ltd.
.PP
You can use, copy, modify and redistribute this package and associated
files under the same terms as Perl itself.
