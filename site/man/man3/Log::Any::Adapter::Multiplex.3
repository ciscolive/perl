.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Log::Any::Adapter::Multiplex 3"
.TH Log::Any::Adapter::Multiplex 3 "2020-01-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Any::Adapter::Multiplex \- Adapter to use allow structured logging across other adapters
.SH "VERSION"
.IX Header "VERSION"
version 1.708
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&    Log::Any::Adapter\->set(
\&        \*(AqMultiplex\*(Aq,
\&        adapters => {
\&            \*(AqStdout\*(Aq => [],
\&            \*(AqStderr\*(Aq => [ log_level => \*(Aqwarn\*(Aq ],
\&            ...
\&            $adapter => \e@adapter_args
\&        },
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This built-in Log::Any adapter provides a simple means of routing logs to
multiple other Log::Any::Adapters.
.PP
Adapters receiving messages from this adapter can behave just like they are the
only recipient of the log message. That means they can, for example, use
\&\*(L"Structured logging\*(R" in Log::Any::Adapter::Development (or not).
.PP
\&\f(CW\*(C`adapters\*(C'\fR is a hashref whose keys should be adapters, and whose
values are the arguments to pass those adapters on initialization.
.PP
Note that this differs from other loggers like Log::Dispatch, which will
only provide its output modules a single string \f(CW$message\fR, and not the full
\&\*(L"Log context data\*(R" in Log::Any.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Log::Any, Log::Any::Adapter
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Jonathan Swartz <swartz@pobox.com>
.IP "\(bu" 4
David Golden <dagolden@cpan.org>
.IP "\(bu" 4
Doug Bell <preaction@cpan.org>
.IP "\(bu" 4
Daniel Pittman <daniel@rimspace.net>
.IP "\(bu" 4
Stephen Thirlwall <sdt@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2017 by Jonathan Swartz, David Golden, and Doug Bell.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
