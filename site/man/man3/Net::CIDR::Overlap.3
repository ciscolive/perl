.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::CIDR::Overlap 3"
.TH Net::CIDR::Overlap 3 "2019-11-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::CIDR::Overlap \- A utility module for helping make sure a list of CIDRs don't overlap.
.SH "VERSION"
.IX Header "VERSION"
Version 0.2.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $nco=Net::CIDR::Overlap\->new;
\&    
\&    # add some subnets
\&    eval{
\&        $nco\->add( \*(Aq127.0.0.0/24\*(Aq );
\&        $nco\->add( \*(Aq192.168.42.0/24\*(Aq );
\&        $nco\->add( \*(Aq10.10.0.0/16\*(Aq );
\&    }
\&    if ( $@ ){
\&        warn( $@ );
\&    }
\&    
\&    # this will fail as they have already been added
\&    eval{
\&        $nco\->add( \*(Aq127.0.0.0/25\*(Aq );
\&        $nco\->add( \*(Aq10.10.10/24\*(Aq );
\&    }
\&    if ( $@ ){
\&        warn( $@ );
\&    }
\&    
\&    # this will fail this is not a valid CIDR
\&    eval{
\&        $nco\->add( \*(Aqfoo\*(Aq );
\&    }
\&    if ( $@ ){
\&        warn( $@ );
\&    }
\&    
\&    # print the subnets we added with out issue
\&    my $list=$nco\->list;
\&    foreach my $cidr ( @${ $list } ){
\&        print $cidr."\en";
\&    }
.Ve
.PP
This works with eithe IPv4 or IPv6. Two instances of Net::CIDR::Set
are maintained, one for IPv4 and one for IPv6.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
This initates the object.
.PP
.Vb 1
\&    my $nco=Net::CIDR::Overlap\->new;
.Ve
.SS "add"
.IX Subsection "add"
This adds a subnet to the set being checked.
.PP
Net::CIDR::cidrvalidate is used to validate passed \s-1CIDR/IP.\s0
.PP
This will die if it is called with a undef value of if validation fails.
.PP
This does not check if what is being added overlaps with anything already
added.
.PP
.Vb 6
\&    eval{
\&        $nco\->add( $cidr );
\&    }
\&    if ( $@ ){
\&        warn( $@ );
\&    }
.Ve
.SS "available"
.IX Subsection "available"
This checks to see if the subnet is available.
.PP
There is one required argument and two optional.
.PP
The first and required is the \s-1CIDR/IP.\s0 This will be
validated using Net::CIDR::cidrvalidate.
.PP
The second is if to invert the check or not. If set to
true, it will only be added if overlap is found.
.PP
The third is if overlap should be any or all. This is boolean
and a value of true sets it to all. The default value is false,
meaning any overlap.
.PP
.Vb 10
\&    my $available;
\&    eval{
\&        $available=$nco\->available( $cidr );
\&    };
\&    if ( $@ ){
\&        # do something to handle the error
\&        die( \*(AqMost likely a bad CIDR...\*(Aq.$@ );
\&    }elsif( ! $available ){
\&        print "Some or all of the IPs in ".$cidr." are unavailable.\en";
\&    }
\&
\&    # this time invert the search and check if all of them are unavailable
\&    eval{
\&        $available==$nco\->available( $cidr, 1, 1 );
\&    };
\&    if ( $@ ){
\&        # do something to handle the error
\&        die( \*(AqMost likely a bad CIDR...\*(Aq.$@ );
\&    }elsif( $available ){
\&        print "All of the IPs in ".$cidr." are unavailable.\en";
\&    }
.Ve
.SS "compare_and_add"
.IX Subsection "compare_and_add"
This first checks for overlap and then adds it.
.PP
There is one required argument and two optional.
.PP
The first and required is the \s-1CIDR/IP.\s0 This will be
validated using Net::CIDR::cidrvalidate.
.PP
The second is if to invert the check or not. If set to
true, it will only be added if overlap is found.
.PP
The third is if overlap should be any or all. This is boolean
and a value of true sets it to all. The default value is false,
meaning any overlap.
.PP
.Vb 7
\&    # just add it if there is no overlap
\&    eval{
\&        $nco\->compare_and_add( $cidr );
\&    }
\&    if ( $@ ){
\&        warn( $@ );
\&    }
\&
\&    # this time invert it and use use any for the overlap check
\&    eval{
\&        $nco\->compare_and_add( $cidr, \*(Aq1\*(Aq, \*(Aq0\*(Aq );
\&    }
\&    if ( $@ ){
\&        warn( $@ );
\&    }
.Ve
.SS "exists"
.IX Subsection "exists"
This check if the specified value exists in the list or not.
.PP
One value is taken and that is a \s-1CIDR.\s0 If this is not defined,
it will die.
.PP
.Vb 5
\&    my $xists;
\&    eval{
\&        $nco\->exists( $cidr );
\&    };
\&    if ( $@ ){
\&
\&    }elsif( ! $exist ){
\&        print $cidr." does not exist in the list.\en";
\&    }else{
\&        print $cidr." does exist in the list.\en";
\&    }
.Ve
.SS "list"
.IX Subsection "list"
This returns a array of successfully added items.
.PP
.Vb 4
\&    my @list=$nco\->list;
\&    foreach my $cidr ( @list ){
\&        print $cidr."\en";
\&    }
.Ve
.SS "remove"
.IX Subsection "remove"
This removes the specified \s-1CIDR\s0 from the list.
.PP
One argument is taken and that is the \s-1CIDR\s0 to remove.
.PP
If the \s-1CIDR\s0 is not one that has been added, it will error.
.PP
Upon any errors, this method will die.
.PP
.Vb 6
\&    eval{
\&        $nco\->remove( $cidr );
\&    };
\&    if ( $@ ){
\&        die( \*(AqDid you make sure the $cidr was defined and added previously?\*(Aq );
\&    }
.Ve
.SS "ip_type"
.IX Subsection "ip_type"
This returns either 4 or 6 based on if it is IPv4 or IPv6.
.PP
Upon undef or invalid \s-1CIDR,\s0 this will die.
.PP
.Vb 6
\&    my $type=$nco\->ip_type( $cidr );
\&    if ( $type eq \*(Aq4\*(Aq ){
\&        print "It is IPv4\en";
\&    }else{
\&        print "It is IPv6\en";
\&    }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Zane C. Bowers-Hadley, \f(CW\*(C`<vvelox at vvelox.net>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-net\-cidr\-overlap at rt.cpan.org\*(C'\fR, or through
the web interface at <https://rt.cpan.org/NoAuth/ReportBug.html?Queue=Net\-CIDR\-Overlap>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Net::CIDR::Overlap
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<https://rt.cpan.org/NoAuth/Bugs.html?Dist=Net\-CIDR\-Overlap>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Net\-CIDR\-Overlap>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<https://cpanratings.perl.org/d/Net\-CIDR\-Overlap>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<https://metacpan.org/release/Net\-CIDR\-Overlap>
.IP "\(bu" 4
\&\s-1GIT\s0 Repository
.Sp
<https://github.com/VVelox/Net\-CIDR\-Overlap>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This software is Copyright (c) 2019 by Zane C. Bowers-Hadley.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
