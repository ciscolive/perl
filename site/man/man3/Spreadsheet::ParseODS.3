.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::ParseODS 3"
.TH Spreadsheet::ParseODS 3 "2020-10-06" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::ParseODS \- read SXC and ODS files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  my $parser = Spreadsheet::ParseODS\->new(
\&      line_separator => "\en", # for multiline values
\&  );
\&  my $workbook = $parser\->parse("$d/$file");
\&  my $sheet = $workbook\->worksheet(\*(AqSheet1\*(Aq);
.Ve
.SH "WARNING"
.IX Header "WARNING"
This module is not yet API-compatible with Spreadsheet::ParseXLSX
and Spreadsheet::ParseXLS. Method-level compatibility is planned, but there
always be differences in the values returned, for example for the cell
types.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """\->new"""
.el .SS "\f(CW\->new\fP"
.IX Subsection "->new"
\fIOptions\fR
.IX Subsection "Options"
.IP "\(bu" 4
\&\fBline_separator\fR \- the value to separate multi-line cell values with
.IP "\(bu" 4
\&\fBreadonly\fR \- create the sheet as readonly, sharing Cells between repeated
rows. This uses less memory at the cost of not being able to modify the data
structure.
.IP "\(bu" 4
\&\fBNoTruncate\fR \- legacy option not to truncate the sheets by stripping
empty columns from the right edge of a sheet. This option will likely be
renamed or moved.
.IP "\(bu" 4
\&\fBtwig\fR \- a premade XML::Twig::XPath instance
.ie n .SS """\->parse( %options )"""
.el .SS "\f(CW\->parse( %options )\fP"
.IX Subsection "->parse( %options )"
.Vb 1
\&    my $workbook = Spreadsheet::ParseODS\->new()\->parse( \*(Aqexample.ods\*(Aq );
.Ve
.PP
Reads the spreadsheet into memory and returns the data as a
Spreadsheet::ParseODS::Workbook object.
.PP
\fIOptions\fR
.IX Subsection "Options"
.IP "\(bu" 4
\&\fBinputtype\fR \- the type of file if passing a filehandle. Can be \f(CW\*(C`ods\*(C'\fR, \f(CW\*(C`sxc\*(C'\fR
, \f(CW\*(C`fods\*(C'\fR or \f(CW\*(C`xml\*(C'\fR.
.PP
This method also takes the same options as the constructor.
