.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "JSON::Util 3"
.TH JSON::Util 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JSON::Util \- easy and portable encode/decode of JSON
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    use JSON::Util;
\&    $data = JSON::Util\->decode(\*(Aq{"bar": "foo"}\*(Aq);
\&    $data = JSON::Util\->decode(\*(Aqsome.json\*(Aq);
\&    JSON::Util\->encode({ \*(Aqfoo\*(Aq => \*(Aqbar\*(Aq }, \*(Aqsomeother.json\*(Aq);
\&
\&    $data = JSON::Util\->decode([\*(Aq..\*(Aq, \*(Aqfolder\*(Aq, some.json]);
\&    JSON::Util\->encode([123,321], [\*(Aq..\*(Aq, \*(Aqfolder\*(Aq, someother.json]);
\&
\&    print JSON::Util\->encode([987,789]), "\en";
\&    print JSON::Util\->encode({987 => 789}), "\en";
\&
\&    my $json = JSON::Util\->new(pretty => 0, convert_blessed => 1);
\&    print $json\->encode([ $object, $object2 ]);
\&
\&    # with file locking
\&    $data = JSON::Util\->decode([\*(Aq..\*(Aq, \*(Aqfolder\*(Aq, some.json], { \*(AqLOCK_SH\*(Aq => 1 });
\&    $data = JSON::Util\->decode([\*(Aq..\*(Aq, \*(Aqfolder\*(Aq, some.json], { \*(AqLOCK_SH\*(Aq => 1, LOCK_NB => 1 });
\&    JSON::Util\->encode([123,321], [\*(Aq..\*(Aq, \*(Aqfolder\*(Aq, someother.json], { \*(AqLOCK_EX\*(Aq => 1 });
\&    JSON::Util\->encode([123,321], [\*(Aq..\*(Aq, \*(Aqfolder\*(Aq, someother.json], { \*(AqLOCK_EX\*(Aq => 1, LOCK_NB => 1 });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBnew()\fP"
.IX Subsection "new()"
Object constructor. Needed only when the \*(L"default_json\*(R" configuration
needs to be changed. Any key/value passed as parameter will be called on
\&\f(CW\*(C`<JSON::MaybeXS\-\*(C'\fR\fBnew()\fR>> as \f(CW\*(C`<$json\-\*(C'\fR\f(CW$ke\fRy($value)>>.
.SS "default_json"
.IX Subsection "default_json"
Returns \f(CW\*(C`<JSON::MaybeXS\-\*(C'\fR\fBnew()\fR>> with:
.PP
.Vb 3
\&        \*(Aqutf8\*(Aq            => 1,
\&        \*(Aqpretty\*(Aq          => 1,
\&        \*(Aqconvert_blessed\*(Aq => 1,
.Ve
.SS "json"
.IX Subsection "json"
Returns current JSON::MaybeXS object.
.SS "decode($what, [$opt])"
.IX Subsection "decode($what, [$opt])"
Return ref with decoded \f(CW$what\fR. See IO::Any for \f(CW$where\fR and \f(CW$opt\fR
description.
.SS "encode($data, [$where], [$opt])"
.IX Subsection "encode($data, [$where], [$opt])"
Returns encoded \f(CW$data\fR. If \f(CW$where\fR is passed then the result is
written there. See IO::Any for \f(CW$where\fR and \f(CW$opt\fR description.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jozef Kutej, \f(CW\*(C`<jkutej at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-json\-util at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=JSON\-Util>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc JSON::Util
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=JSON\-Util>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/JSON\-Util>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/JSON\-Util>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/JSON\-Util>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
The following people have contributed to the Sys::Path by committing their
code, sending patches, reporting bugs, asking questions, suggesting useful
advises, nitpicking, chatting on \s-1IRC\s0 or commenting on my blog (in no particular
order):
.PP
.Vb 1
\&    John SJ Anderson
.Ve
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2009 Jozef Kutej, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
