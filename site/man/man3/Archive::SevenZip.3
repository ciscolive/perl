.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Archive::SevenZip 3"
.TH Archive::SevenZip 3 "2020-05-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Archive::SevenZip \- Read/write 7z , zip , ISO9960 and other archives
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  my $ar = Archive::SevenZip\->new(
\&      find => 1,
\&      archivename => $archivename,
\&      verbose => $verbose,
\&  );
\&
\&  for my $entry ( $ar\->list ) {
\&      my $target = join "/", "$target_dir", $entry\->basename;
\&      $ar\->extractMember( $entry\->fileName, $target );
\&  };
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """Archive::SevenZip\->find_7z_executable"""
.el .SS "\f(CWArchive::SevenZip\->find_7z_executable\fP"
.IX Subsection "Archive::SevenZip->find_7z_executable"
.Vb 3
\&    my $version = Archive::SevenZip\->find_7z_executable()
\&        or die "No 7z found.";
\&    print "Found 7z version \*(Aq$version\*(Aq";
.Ve
.PP
Finds the 7z executable in the path or in \f(CW$ENV{ProgramFiles}\fR
or \f(CW$ENV{ProgramFiles(x86)}\fR. This is called
when a \f(CW\*(C`Archive::SevenZip\*(C'\fR instance is created with the \f(CW\*(C`find\*(C'\fR
parameter set to 1.
.PP
If \f(CW$ENV{PERL_ARCHIVE_SEVENZIP_BIN}\fR is set, this value will be used as
the 7z executable and the path will not be searched.
.ie n .SS """Archive::SevenZip\->new"""
.el .SS "\f(CWArchive::SevenZip\->new\fP"
.IX Subsection "Archive::SevenZip->new"
.Vb 1
\&  my $ar = Archive::SevenZip\->new( $archivename );
\&
\&  my $ar = Archive::SevenZip\->new(
\&      archivename => $archivename,
\&      find => 1,
\&  );
.Ve
.PP
Creates a new class instance.
.PP
\&\f(CW\*(C`find\*(C'\fR \- will try to find the executable using \f(CW\*(C`\->find_7z_executable\*(C'\fR
.ie n .SS """$ar\->open"""
.el .SS "\f(CW$ar\->open\fP"
.IX Subsection "$ar->open"
.Vb 4
\&  my @entries = $ar\->open;
\&  for my $entry (@entries) {
\&      print $entry\->fileName, "\en";
\&  };
.Ve
.PP
Lists the entries in the archive. A fresh archive which does not
exist on disk yet has no entries. The returned entries
are Archive::SevenZip::Entry instances.
.PP
This method will one day move to the Path::Class\-compatibility
\&\s-1API.\s0
.ie n .SS """$ar\->memberNamed"""
.el .SS "\f(CW$ar\->memberNamed\fP"
.IX Subsection "$ar->memberNamed"
.Vb 2
\&  my $entry = $ar\->memberNamed(\*(Aqhello_world.txt\*(Aq);
\&  print $entry\->fileName, "\en";
.Ve
.PP
The path separator must be a forward slash (\*(L"/\*(R")
.PP
This method will one day move to the Archive::Zip\-compatibility
\&\s-1API.\s0
.ie n .SS """$ar\->openMemberFH"""
.el .SS "\f(CW$ar\->openMemberFH\fP"
.IX Subsection "$ar->openMemberFH"
.Vb 4
\&  my $fh = $ar\->openMemberFH(\*(Aqtest.txt\*(Aq);
\&  while( <$fh> ) {
\&      print "test.txt: $_";
\&  };
.Ve
.PP
Reads the uncompressed content of the member from the archive.
.PP
This method will one day move to the Archive::Zip\-compatibility
\&\s-1API.\s0
.ie n .SS """$ar\->extractMember"""
.el .SS "\f(CW$ar\->extractMember\fP"
.IX Subsection "$ar->extractMember"
.Vb 1
\&  $ar\->extractMember(\*(Aqtest.txt\*(Aq => \*(Aqextracted_test.txt\*(Aq);
.Ve
.PP
Extracts the uncompressed content of the member from the archive.
.PP
This method will one day move to the Archive::Zip\-compatibility
\&\s-1API.\s0
.ie n .SS """$ar\->removeMember"""
.el .SS "\f(CW$ar\->removeMember\fP"
.IX Subsection "$ar->removeMember"
.Vb 1
\&  $ar\->removeMember(\*(Aqtest.txt\*(Aq);
.Ve
.PP
Removes the member from the archive.
.ie n .SS """$ar\->add_scalar"""
.el .SS "\f(CW$ar\->add_scalar\fP"
.IX Subsection "$ar->add_scalar"
.Vb 1
\&    $ar\->add_scalar( "Some name.txt", "This is the content" );
.Ve
.PP
Adds a scalar as an archive member.
.PP
Unfortunately, 7zip only reads archive members from \s-1STDIN\s0
for  xz, lzma, tar, gzip and bzip2 archives.
In the other cases, the scalar will be written to a tempfile, added to the
archive and then renamed in the archive.
.PP
This requires 7zip version 9.30+
.ie n .SS """$ar\->add_directory"""
.el .SS "\f(CW$ar\->add_directory\fP"
.IX Subsection "$ar->add_directory"
.Vb 1
\&    $ar\->add_directory( "real_etc", "etc" );
.Ve
.PP
Adds an empty directory
.PP
This currently ignores the directory date and time if the directory
exists
.ie n .SS """\->archiveZipApi"""
.el .SS "\f(CW\->archiveZipApi\fP"
.IX Subsection "->archiveZipApi"
.Vb 6
\&  my $ar = Archive::SevenZip\->archiveZipApi(
\&      find => 1,
\&      archivename => $archivename,
\&      verbose => $verbose,
\&  );
\&  print "$_\en" for $ar\->list_files;
.Ve
.PP
This is an alternative constructor that gives you an \s-1API\s0
that is somewhat compatible with the \s-1API\s0 of Archive::Zip.
See also Archive::SevenZip::API::ArchiveZip.
.ie n .SS """\->archiveTarApi"""
.el .SS "\f(CW\->archiveTarApi\fP"
.IX Subsection "->archiveTarApi"
.Vb 6
\&  my $ar = Archive::SevenZip\->archiveTarApi(
\&      find => 1,
\&      archivename => $archivename,
\&      verbose => $verbose,
\&  );
\&  print "$_\en" for $ar\->list_files;
.Ve
.PP
This is an alternative constructor that gives you an \s-1API\s0
that is somewhat compatible with the \s-1API\s0 of Archive::Tar.
See also Archive::SevenZip::API::ArchiveTar.
.SH "NAME"
Path::Class::Archive \- treat archives as directories
.SH "CAUTION"
.IX Header "CAUTION"
This module tries to mimic the \s-1API\s0 of Archive::Zip in some cases
and in other cases, the \s-1API\s0 of Path::Class. It is also a very rough
draft that just happens to be doing what I need, mostly extracting
files.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::Unpack \- also supports unpacking from 7z archives
.PP
Compress::unLZMA \- uncompressor for the \s-1LZMA\s0 compression method used by 7z
.PP
Archive::Libarchive::Any
.PP
Archive::Any
.SH "REPOSITORY"
.IX Header "REPOSITORY"
The public repository of this module is
<https://github.com/Corion/archive\-sevenzip>.
.SH "SUPPORT"
.IX Header "SUPPORT"
The public support forum of this module is
<https://perlmonks.org/>.
.SH "BUG TRACKER"
.IX Header "BUG TRACKER"
Please report bugs in this module via the \s-1RT CPAN\s0 bug queue at
<https://rt.cpan.org/Public/Dist/Display.html?Name=Archive\-SevenZip>
or via mail to archive\-sevenzip\-Bugs@rt.cpan.org.
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR
.SH "COPYRIGHT (c)"
.IX Header "COPYRIGHT (c)"
Copyright 2015\-2019 by Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
This module is released under the same terms as Perl itself.
