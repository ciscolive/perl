.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "POE::Filter::Map 3"
.TH POE::Filter::Map 3 "2020-02-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
POE::Filter::Map \- transform input and/or output within a filter stack
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #!perl
\&
\&  use POE qw(
\&    Wheel::FollowTail
\&    Filter::Line Filter::Map Filter::Stackable
\&  );
\&
\&  POE::Session\->create(
\&    inline_states => {
\&      _start => sub {
\&        my $parse_input_as_lines = POE::Filter::Line\->new();
\&
\&        my $redact_some_lines = POE::Filter::Map\->new(
\&          Code => sub {
\&            my $input = shift;
\&            $input = "[REDACTED]" unless $input =~ /sudo\e[\ed+\e]/i;
\&            return $input;
\&          },
\&        );
\&
\&        my $filter_stack = POE::Filter::Stackable\->new(
\&          Filters => [
\&            $parse_input_as_lines, # first on get, last on put
\&            $redact_some_lines, # first on put, last on get
\&          ]
\&        );
\&
\&        $_[HEAP]{tailor} = POE::Wheel::FollowTail\->new(
\&          Filename => "/var/log/system.log",
\&          InputEvent => "got_log_line",
\&          Filter => $filter_stack,
\&        );
\&      },
\&      got_log_line => sub {
\&        print "Log: $_[ARG0]\en";
\&      }
\&    }
\&  );
\&
\&  POE::Kernel\->run();
\&  exit;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
POE::Filter::Map transforms data inside the filter stack.  It may be
used to transform input, output, or both depending on how it is
constructed.  This filter is named and modeled after Perl's built-in
\&\fBmap()\fR function.
.PP
POE::Filter::Map is designed to be combined with other filters through
POE::Filter::Stackable.  In the \*(L"\s-1SYNOPSIS\*(R"\s0 example, a filter stack
is created to parse logs as lines and redact all entries that don't
pertain to a sudo process.
.SH "PUBLIC FILTER METHODS"
.IX Header "PUBLIC FILTER METHODS"
In addition to the usual POE::Filter methods, POE::Filter::Map also
supports the following.
.SS "new"
.IX Subsection "new"
\&\fBnew()\fR constructs a new POE::Filter::Map object.  It must either be
called with a single Code parameter, or both a Put and a Get
parameter.  The values for Code, Put and Get are code references that,
when invoked, return transformed versions of their sole parameters.  A
Code function will be used for both input and output, while Get and Put
functions allow input and output to be filtered in different ways.
.PP
.Vb 6
\&  # Decrypt rot13.
\&  sub decrypt_rot13 {
\&    my $encrypted = shift;
\&    $encrypted =~ tr[a\-zA\-Z][n\-za\-mN\-ZA\-M];
\&    return $encrypted;
\&  }
\&
\&  # Encrypt rot13.
\&  sub encrypt_rot13 {
\&    my $plaintext = shift;
\&    $plaintext =~ tr[a\-zA\-Z][n\-za\-mN\-ZA\-M];
\&    return $plaintext;
\&  }
\&
\&  # Decrypt rot13 on input, and encrypt it on output.
\&  my $rot13_transcrypter = POE::Filter::Map\->new(
\&    Get => \e&decrypt_rot13,
\&    Put => \e&encrypt_rot13,
\&  );
.Ve
.PP
Rot13 is symmetric, so the above example can be simplified to use a
single Code function.
.PP
.Vb 7
\&  my $rot13_transcrypter = POE::Filter::Map\->new(
\&    Code => sub {
\&      local $_ = shift;
\&      tr[a\-zA\-Z][n\-za\-mN\-ZA\-M];
\&      return $_;
\&    }
\&  );
.Ve
.SS "modify"
.IX Subsection "modify"
\&\fBmodify()\fR changes a POE::Filter::Map object's behavior at run-time.  It
accepts the same parameters as \fBnew()\fR, and it replaces the existing
transforms with new ones.
.PP
.Vb 4
\&  # Switch to "reverse" encryption for testing.
\&  $rot13_transcrypter\->modify(
\&    Code => sub { return scalar reverse shift }
\&  );
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
POE::Filter for more information about filters in general.
.PP
POE::Filter::Stackable for more details on stacking filters.
.SH "BUGS"
.IX Header "BUGS"
None known.
.SH "AUTHORS & COPYRIGHTS"
.IX Header "AUTHORS & COPYRIGHTS"
The Map filter was contributed by Dieter Pearcey.  Documentation is
provided by Rocco Caputo.
.PP
Please see the \s-1POE\s0 manpage for more information about authors and
contributors.
