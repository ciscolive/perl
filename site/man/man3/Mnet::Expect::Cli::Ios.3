.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mnet::Expect::Cli::Ios 3"
.TH Mnet::Expect::Cli::Ios 3 "2020-08-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mnet::Expect::Cli::Ios \- Expect sessions to cisco ios devices
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # refer also to Mnet::Expect::Cli
\&    use Mnet::Expect::Cli::Ios
\&
\&    # Mnet::Expect::Cli has example with ssh host/key checks disabled
\&    my $expect = Mnet::Expect::Cli::Ios\->new({
\&        spawn => "ssh user@1.2.3.4", password_in => 1
\&    });
\&
\&    # ensure we are in ios enable mode
\&    $expect\->enable() or die "enable failed";
\&
\&    # get output from command on connected ios device
\&    my $output = $expect\->command("show version");
\&
\&    # gracefully end/exit ios session
\&    $expect\->close;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mnet::Expect::Cli::Ios can be used to spawn Expect processes which can
be used to programmatically control command line sessions to cisco ios devices,
with support for Mnet options, logging, caching, and testing.
.PP
Refer to the perl Expect module for more information. Also refer to the
Mnet::Expect and Mnet::Expect::Cli modules.
.SH "METHODS"
.IX Header "METHODS"
Mnet::Expect::Cli::Ios implements the methods listed below.
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $expect = Mnet::Expect::Cli::Ios\->new(\e%opts)
.Ve
.PP
This method can be used to create new Mnet::Expect::Cli::Ios objects.
.PP
The following input opts may be specified, in addition to options from
the Mnet::Expect::Cli and Mnet::Expect modules:
.PP
.Vb 7
\&    enable          set to password for enable mode during login
\&    enable_in       stderr prompt for stdin entry of enable if not set
\&    enable_user     default enable username set from username option
\&    failed_re       default recognizes lines starting w/ios % error char
\&    paging_key      default space key to send for ios pagination prompts
\&    paging_re       default recognizes ios pagination prompt \-\-more\-\-
\&    prompt_re       defaults to ios user or enable mode prompts
.Ve
.PP
An error is issued if there are login problems.
.PP
For example, the following call will start an ssh expect session to a device
with host key checking disabled:
.PP
.Vb 4
\&    # refer to SYNOPSIS example and Mnet::Expect::Cli for more info
\&    my $expect = Mnet::Expect::Cli::Ios\->new({
\&        spawn => "ssh user@1.2.3.4", password_in => 1
\&    });
.Ve
.PP
Set failed_re to detect failed logins faster, as long as there's no conflict
with text that appears in login banners. For example:
.PP
.Vb 1
\&    (?i)(^\es*%|closed|error|denied|fail|incorrect|invalid|refused|sorry)
.Ve
.PP
Refer to the Mnet::Expect::Cli and Mnet::Expect modules for more
information.
.SS "enable"
.IX Subsection "enable"
.Vb 1
\&    $boolean = $expect\->enable($password)
.Ve
.PP
Use this method to check if an ios device session is currently in enable mode,
and/or to enter enable mode on the device.
.PP
The input password argument will be used if there is an enable password prompt,
otherwise the enable option set for the current object will be used, or the
user will be prompted if the enable_in option is set.
.PP
A fatal error is issued if an enable password is required and none is set.
.PP
A value of true is returned if the ios device is at an enable mode command
prompt, otherwise a value of false is returned.
.SS "close"
.IX Subsection "close"
.Vb 1
\&    $expect\->close
.Ve
.PP
This method sends the end and exit ios commands before closing the current
expect session. Timeouts are gracefully handled. Refer to the close method
in the Mnet::Expect::Cli module for more information.
.SH "TESTING"
.IX Header "TESTING"
Mnet::Test \-\-record and \-\-replay functionality are supported. Refer to the
\&\s-1TESTING\s0 perldoc section of Mnet::Expect::Cli module for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Expect
.PP
Mnet
.PP
Mnet::Expect
.PP
Mnet::Expect::Cli
.PP
Mnet::Log
.PP
Mnet::Opts::Cli
.PP
Mnet::Test
