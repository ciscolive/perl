.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::AllRPZRecords 3"
.TH Infoblox::DNS::AllRPZRecords 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::AllRPZRecords \- A synthetic object used to return record object types that belong to a Response Policy Zone.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
By searching on this object, all record objects associated with a specific zone can be retrieved.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DNS\s0 AllRPZRecords object.
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for record objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DNS AllRPZRecords object:
\&
\&  zone       \- Required. A Response Policy Zone name in FQDN format.
\&  view       \- Optional. The DNS view in which the records are located. By default, the default DNS view is searched.
\&  name       \- Optional. The name of the matched record. (regular expression).
\&  type       \- Optional. The type of record to search for. By default, all record types are searched. Following is the list of valid values for this search field:
\&
\&                 \*(AqAll Records\*(Aq,
\&                 \*(AqAll A Records\*(Aq,
\&                 \*(AqAll AAAA Records\*(Aq,
\&                 \*(AqAll CNAME Records\*(Aq,
\&                 \*(AqAll IP Address Record\*(Aq,
\&                 \*(AqAll MX Record\*(Aq,
\&                 \*(AqAll NAPTR Record\*(Aq,
\&                 \*(AqAll PTR Record\*(Aq,
\&                 \*(AqAll SRV Record\*(Aq,
\&                 \*(AqAll TXT Record\*(Aq,
\&                 \*(AqAll A IP Address Record\*(Aq,
\&                 \*(AqAll AAAA IP Address Record\*(Aq
\&
\&  rpz_rule  \- Optional. The Response Policy Zone rule type of record to search for. By default, all rule types are searched. Following is the list of valid values for this search field:
\&
\&                 \*(AqPASSTHRUIPADDR\*(Aq,
\&                 \*(AqPASSTHRUDOMAIN\*(Aq,
\&                 \*(AqBLOCKNXDOMAINIPADDR\*(Aq,
\&                 \*(AqBLOCKNXDOMAINDOMAIN\*(Aq,
\&                 \*(AqBLOCKNODATAIPADDR\*(Aq,
\&                 \*(AqBLOCKNODATADOMAIN\*(Aq,
\&                 \*(AqSUBSTITUTE_CNAME\*(Aq,
\&                 \*(AqSUBSTITUTE_A_RECORD\*(Aq,
\&                 \*(AqSUBSTITUTE_AAAA_RECORD\*(Aq,
\&                 \*(AqSUBSTITUTE_MX_RECORD\*(Aq,
\&                 \*(AqSUBSTITUTE_PTR_RECORD\*(Aq,
\&                 \*(AqSUBSTITUTE_NAPTR_RECORD\*(Aq,
\&                 \*(AqSUBSTITUTE_SRV_RECORD\*(Aq,
\&                 \*(AqSUBSTITUTE_TXT_RECORD\*(Aq,
\&                 \*(AqSUBSTITUTE_IPV4ADDRESS_RECORD\*(Aq,
\&                 \*(AqSUBSTITUTE_IPV6ADDRESS_RECORD\*(Aq
\&                 \*(AqSUBSTITUTE_IPADDR_CNAME\*(Aq
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all RPZ records in the "rpz.com" zone in the default DNS view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::AllRPZRecords",
\&     zone   => \*(Aqrpz.com\*(Aq,
\& );
\&
\& # search for all TXT records that match the \*(Aqrec\*(Aq name in the "rpz.com" zone in the default DNS view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::AllRPZRecords",
\&     zone   => \*(Aqrpz.com\*(Aq,
\&     type   => \*(AqAll TXT Records\*(Aq,
\&     name   => \*(Aqrec\*(Aq,
\& );
\&
\& # search for all PASSTHRUDOMAIN Response Policy Rule type in the "rpz.com" zone in the default DNS view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::AllRPZRecords",
\&     zone   => \*(Aqrpz.com\*(Aq,
\&     rpz_rule   => \*(AqPASSTHRUDOMAIN\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to retrieve the attribute values of an AllRPZRecords object. All methods are read-only and cannot be set.
.SS "alert_type( )"
.IX Subsection "alert_type( )"
.RS 4
Use this method to retrieve the alert type of the record associated with the AllRPZRecords object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get alert_type
\& my $alert_type = $allrpzrecord\->alert_type();
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to retrieve the descriptive comment of the record associated with the AllRPZRecords object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get comment
\& my $comment = $allrpzrecord\->comment();
.Ve
.RE
.RS 4
.RE
.SS "expiration_time( )"
.IX Subsection "expiration_time( )"
.RS 4
Use this method to retrieve expiration time of the record associated with the AllRPZRecords object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get expiration_time
\& my $expiration_time = $allrpzrecord\->expiration_time();
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to retrieve the disable flag of the record associated with the AllRPZRecords object (if present).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get disable
\& my $disable = $allrpzrecord\->disable();
.Ve
.RE
.RS 4
.RE
.SS "last_updated( )"
.IX Subsection "last_updated( )"
.RS 4
Use this method to retrieve the time the record associated with the AllRPZRecords object was last updated at.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_updated
\& my $last_updated = $allrpzrecord\->last_updated();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to retrieve the name of of the record associated with the AllRPZRecords object. Note that this value could differ from the value of the associated record's name field.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name
\& my $name = $allrpzrecord\->name();
.Ve
.RE
.RS 4
.RE
.SS "record( )"
.IX Subsection "record( )"
.RS 4
Use this method to retrieve the record object associated with the AllRPZRecords object.
.Sp
This object is considered a 'partial' object. See Infoblox::Session\->\fBfill_partial_object()\fR for more information on how
it can be converted to a 'full' \s-1API\s0 object.
.Sp
If the AllRPZRecords object refers to a record not currently supported in the Perl \s-1API,\s0 the member value will be undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get record
\& my $record = $allrpzrecord\->record();
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to retrieve the \s-1TTL\s0 value of the record associated with the AllRPZRecords object (if present).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ttl
\& my $ttl = $allrpzrecord\->ttl();
.Ve
.RE
.RS 4
.RE
.SS "type( )"
.IX Subsection "type( )"
.RS 4
Use this method to retrieve the type of record associated with the AllRPZRecords object. This is a descriptive string
that identifies the record to which this AllRPZRecords object refers. (For example, 'A record', '\s-1MX\s0 record', ...)
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get type
\& my $type = $allrpzrecord\->type();
.Ve
.RE
.RS 4
.RE
.SS "view( )"
.IX Subsection "view( )"
.RS 4
Use this method to retrieve the \s-1DNS\s0 view name of the record associated with the AllRPZRecords object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get view
\& my $view = $allrpzrecord\->view();
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the Response Policy Zone name of the record associated with the AllRPZRecords object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get zone
\& my $zone = $allrpzrecord\->zone();
.Ve
.RE
.RS 4
.RE
.SS "rpz_rule( )"
.IX Subsection "rpz_rule( )"
.RS 4
Use this method to retrieve the Response Policy Zone rule type of the record associated with the AllRPZRecords object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get rule type
\& my $rpz_rule = $allrpzrecord\->rpz_rule();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
.Vb 2
\& In cases where a large number of matching records exist on the appliance, only a limited number will be returned
\& at a time. If all of the matching records are required, please consider using the paging support via Infoblox::Cursor.
\&
\& #Code sample fragment Starts:
\&
\&    $cursor=$session\->new_cursor(
\&                                 fetch_size => 100,
\&                                 object => "Infoblox::DNS::AllRPZRecords",
\&                                 zone   => \*(Aqrpz.com\*(Aq,
\&                                 view   => \*(Aqdefault\*(Aq,
\&                                );
\&
\&    while ($current_record = $cursor\->fetch()) {
\&        # $current_record will contain a matching AllRPZRecords object
\&    }
\&
\&    # All matching AllRPZRecords will be returned
\&    # when the cycle ends.
\&
\& If you want full record objects for some of the above, you can add the following code
\&
\& #Code sample fragment Starts:
\&
\&     if( ... some criteria ...) {
\&         push @temp, $current_record\->record();
\&     }
\&
\& ####Code Fragment Ends####
\&
\& inside the while() cycle and afterwards call
\&
\& #Code sample fragment Starts:
\&
\& @full_record_objects=$session\->fill_partial_object(\e@temp);
\&
\& ####Code Fragment Ends####
\&
\& to fill the wanted objects.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBsearch()\fR/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
