.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Tools::QuickDB 3"
.TH Test2::Tools::QuickDB 3 "2020-08-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Tools::QuickDB \- Quickly spin up temporary Database servers for tests.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a test library build around DBIx::QuickDB.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Test2::V0 \-target => DBIx::QuickDB::Driver::PostgreSQL;
\&    use Test2::Tools::QuickDB;
\&
\&    skipall_unless_can_db(driver => \*(AqPostgreSQL\*(Aq);
\&
\&    my $db = get_db(driver => \*(AqPostgreSQL\*(Aq, load_sql => \*(Aqt/schema/postgresql.sql\*(Aq});
\&
\&    ...
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
.ie n .IP "$driver = skipall_unless_can_db('MyDriver')" 4
.el .IP "\f(CW$driver\fR = skipall_unless_can_db('MyDriver')" 4
.IX Item "$driver = skipall_unless_can_db('MyDriver')"
.PD 0
.ie n .IP "$driver = skipall_unless_can_db(['MyDriver', 'OurDriver'])" 4
.el .IP "\f(CW$driver\fR = skipall_unless_can_db(['MyDriver', 'OurDriver'])" 4
.IX Item "$driver = skipall_unless_can_db(['MyDriver', 'OurDriver'])"
.ie n .IP "$driver = skipall_unless_can_db(%spec)" 4
.el .IP "\f(CW$driver\fR = skipall_unless_can_db(%spec)" 4
.IX Item "$driver = skipall_unless_can_db(%spec)"
.PD
This will look for a usable driver. If no usable driver is found, this will
issue a skip_all to skip the current test or subtest. If at least one suable
driver is found then the first one found will be returned.
.Sp
If you pass in 1 argument it should either be a driver to try, or an arrayref
of drivers to try.
.Sp
If you passing multiple argument then you should follow the specifications in
\&\*(L"\s-1SPEC HASH\*(R"\s0 in DBIx::QuickDB.
.Sp
Feel free to ignore the return value.
.ie n .IP "$db = get_db" 4
.el .IP "\f(CW$db\fR = get_db" 4
.IX Item "$db = get_db"
.PD 0
.ie n .IP "$db = get_db($name)" 4
.el .IP "\f(CW$db\fR = get_db($name)" 4
.IX Item "$db = get_db($name)"
.ie n .IP "$db = get_db(\e%spec)" 4
.el .IP "\f(CW$db\fR = get_db(\e%spec)" 4
.IX Item "$db = get_db(%spec)"
.ie n .IP "$db = get_db($name, \e%spec)" 4
.el .IP "\f(CW$db\fR = get_db($name, \e%spec)" 4
.IX Item "$db = get_db($name, %spec)"
.ie n .IP "$db = get_db $name => \e%spec" 4
.el .IP "\f(CW$db\fR = get_db \f(CW$name\fR => \e%spec" 4
.IX Item "$db = get_db $name => %spec"
.PD
Get a database.
.Sp
With no arguments it will give you an instance of the first working driver it
finds.
.Sp
You can provide a name for the db, the same instance can then be retrieved
anywhere \fB\s-1GLOBALLY\s0\fR using the same name.
.Sp
You can provide a spec hashref which can contain any arguments documented in
\&\*(L"\s-1SPEC HASH\*(R"\s0 in DBIx::QuickDB.
.ie n .IP "$db = get_db_or_skipall $name => \e%spec" 4
.el .IP "\f(CW$db\fR = get_db_or_skipall \f(CW$name\fR => \e%spec" 4
.IX Item "$db = get_db_or_skipall $name => %spec"
.PD 0
.ie n .IP "$db = get_db_or_skipall($name, \e%spec)" 4
.el .IP "\f(CW$db\fR = get_db_or_skipall($name, \e%spec)" 4
.IX Item "$db = get_db_or_skipall($name, %spec)"
.ie n .IP "$db = get_db_or_skipall($name)" 4
.el .IP "\f(CW$db\fR = get_db_or_skipall($name)" 4
.IX Item "$db = get_db_or_skipall($name)"
.ie n .IP "$db = get_db_or_skipall(\e%spec)" 4
.el .IP "\f(CW$db\fR = get_db_or_skipall(\e%spec)" 4
.IX Item "$db = get_db_or_skipall(%spec)"
.PD
This combines \f(CW\*(C`get_db()\*(C'\fR and \f(CW\*(C`skipall_unless_can_db()\*(C'\fR. The arguments
supported are identical to \f(CW\*(C`get_db()\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for DBIx-QuickDB can be found at
\&\fIhttps://github.com/exodist/DBIx\-QuickDB/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
