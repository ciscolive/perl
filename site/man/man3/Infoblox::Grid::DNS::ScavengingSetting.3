.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::DNS::ScavengingSetting 3"
.TH Infoblox::Grid::DNS::ScavengingSetting 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::DNS::ScavengingSetting \- A DNS scavenging settings object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1DNS\s0 scavenging settings object provides information about \s-1DNS\s0 records scavenging configuration such as the conditions under which records can be reclaimed and periodicity of the scavening operations.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 11
\& my $reclamation_setting = Infoblox::Grid::DNS::ScavengingSetting\->new(
\&     ea_expression_list          => [$ea_expr1, $ea_expr2, ...], # Optional / Default is undefined
\&     enable_auto_reclamation     => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,            # Optional / Default is \*(Aqfalse\*(Aq
\&     enable_recurrent_scavenging => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,            # Optional / Default is \*(Aqfalse\*(Aq
\&     enable_rr_last_queried      => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,            # Optional / Default is \*(Aqfalse\*(Aq
\&     enable_scavenging           => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,            # Optional / Default is \*(Aqfalse\*(Aq
\&     enable_zone_last_queried    => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,            # Optional / Default is \*(Aqfalse\*(Aq
\&     expression_list             => [$expr1, $expr2, ...],       # Optional / Default is undefined
\&     reclaim_associated_records  => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,            # Optional / Default is \*(Aqfalse\*(Aq
\&     scavenging_schedule         => $sched_setting,              # Optional / Default is undefined
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The object does not support any session methods.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
.SS "Infoblox::Grid::DNS\->scavenging_settings( )"
.IX Subsection "Infoblox::Grid::DNS->scavenging_settings( )"
.RS 4
Use this method to set or retrieve the Grid-level scavenging settings.
See Infoblox::Grid::DNS\->\fBscavenging_settings()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get scavenging_settings value
\& my $scavenging_settings = $object\->scavenging_settings();
\&
\& #Modify scavenging_settings value
\& $object\->scavenging_settings($scavenging_settings);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DNS::View\->scavenging_settings( )"
.IX Subsection "Infoblox::DNS::View->scavenging_settings( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 view-level scavenging settings.
See Infoblox::DNS::View\->\fBscavenging_settings()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get scavenging_settings value
\& my $scavenging_settings = $object\->scavenging_settings();
\&
\& #Modify scavenging_settings value
\& $object\->scavenging_settings($scavenging_settings);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DNS::Zone\->scavenging_settings( )"
.IX Subsection "Infoblox::DNS::Zone->scavenging_settings( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 zone-level scavenging settings.
See Infoblox::DNS::Zone\->\fBscavenging_settings()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get scavenging_settings value
\& my $scavenging_settings = $object\->scavenging_settings();
\&
\& #Modify scavenging_settings value
\& $object\->scavenging_settings($scavenging_settings);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a \s-1DNS\s0 scavenging settings object.
.SS "ea_expression_list( )"
.IX Subsection "ea_expression_list( )"
.RS 4
Use this method to set or retrieve the extensible attributes expression list.
.Sp
The particular record is treated as reclaimable if the extensible attribute expression condition evaluates to 'true' and scavenging is not manually disabled on the given record.
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of Infoblox::Grid::EAExpressionOp objects.
.Sp
The following is a table of allowed expression operand parameters:
.Sp
.Vb 8
\&  +\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&  | op1_type | op1                                                    | op2_type  | op2                                             |  op                            |
\&  +\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&  | FIELD    | Infoblox::Grid::ExtensibleAttributeDef                 | STRING    | $value                                          | EQ, NOT_EQ                     |
\&  |          | Infoblox::Grid::ExtensibleAttributeDef                 | undef     | undef                                           | EXISTS, NOT_EXISTS             |
\&  +\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&  | LIST     | undef                                                  | undef     | undef                                           | AND, OR, ENDLIST               |
\&  +\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ea_expression_list value
\& my $ea_expression_list = $object\->ea_expression_list();
\&
\& #Construct expression (Site == LA OR Site == CA) 
\&
\& my $ead = Infoblox::Grid::ExtensibleAttributeDef\->new(
\&     name => \*(AqSite\*(Aq,
\& );
\&
\& my $start_list = Infoblox::Grid::EAExpressionOp\->new(
\&     op1_type => \*(AqLIST\*(Aq,
\&     op       => \*(AqOR\*(Aq,
\& );
\&
\& my $ea_op1 = Infoblox::Grid::EAExpressionOp\->new(
\&     op1_type => \*(AqFIELD\*(Aq,
\&     op1      => $ead,
\&     op2_type => \*(AqSTRING\*(Aq,
\&     op2      => \*(AqLA\*(Aq,
\&     op       => \*(AqEQ\*(Aq,
\& );
\&
\& my $ea_op2 = Infoblox::Grid::EAExpressionOp\->new(
\&     op1_type => \*(AqFIELD\*(Aq,
\&     op1      => $ead,
\&     op2_type => \*(AqSTRING\*(Aq,
\&     op2      => \*(AqCA\*(Aq,
\&     op       => \*(AqEQ\*(Aq,
\& );
\&
\& my $end_list = Infoblox::Grid::EAExpressionOp\->new(
\&     op1_type => \*(AqLIST\*(Aq,
\&     op       => \*(AqENDLIST\*(Aq,
\& );
\&
\& #Modify ea_expression_list value
\& $object\->ea_expression_list([$start_list, $ea_op1, $ea_op2, $end_list]);
.Ve
.RE
.RS 4
.RE
.SS "enable_scavenging( )"
.IX Subsection "enable_scavenging( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the resource record scavenging is enabled or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable the resource record reclamation or 'false' to disable it. The default value is 'false'.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_scavenging value
\& my $enable_scavenging = $object\->enable_scavenging();
\&
\& #Modify enable_scavenging value
\& $object\->enable_scavenging(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_recurrent_scavenging( )"
.IX Subsection "enable_recurrent_scavenging( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the recurrent resource record scavenging is enabled or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable the recurrent resource record scavenging or 'false' to disable it. The default value is 'false'.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_recurrent_scavenging value
\& my $enable_recurrent_scavenging = $object\->enable_recurrent_scavenging();
\&
\& #Modify enable_recurrent_scavenging value
\& $object\->enable_recurrent_scavenging(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_rr_last_queried( )"
.IX Subsection "enable_rr_last_queried( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the resource record last queried monitoring in affected zones is enabled or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable the resource record last queried monitoring or 'false' to disable it. The default value is 'false'.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_rr_last_queried value
\& my $enable_rr_last_queried = $object\->enable_rr_last_queried();
\&
\& #Modify enable_rr_last_queried value
\& $object\->enable_rr_last_queried(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_zone_last_queried( )"
.IX Subsection "enable_zone_last_queried( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the last queried monitoring for affected zones is enabled or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable the last queried monitoring for affected zones or 'false' to disable it. The default value is 'false'.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_zone_last_queried value
\& my $enable_zone_last_queried = $object\->enable_zone_last_queried();
\&
\& #Modify enable_zone_last_queried value
\& $object\->enable_zone_last_queried(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_auto_reclamation( )"
.IX Subsection "enable_auto_reclamation( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the automatic resource record reclamation is enabled or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable the automatic resource record reclamation or 'false' to disable it. The default value is 'false'.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_auto_reclamation value
\& my $enable_auto_reclamation = $object\->enable_auto_reclamation();
\&
\& #Modify enable_auto_reclamation value
\& $object\->enable_auto_reclamation(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "reclaim_associated_records( )"
.IX Subsection "reclaim_associated_records( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the associated resource record reclamation is enabled or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable the associated resource record reclamation or 'false' to disable it. The default value is 'false'.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
G #Get reclaim_associated_records value
 my \f(CW$reclaim_associated_records\fR = \f(CW$object\fR\->\fBreclaim_associated_records()\fR;
.Sp
.Vb 2
\& #Modify reclaim_associated_records value
\& $object\->reclaim_associated_records(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "expression_list( )"
.IX Subsection "expression_list( )"
.RS 4
Use this method to set or retrieve the expression list.
.Sp
The particular record is treated as reclaimable if expression condition evaluates to 'true' for given record if reclamation hasn't been manually disabled on a given resource record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of Infoblox::Grid::ExpressionOp objects.
.Sp
The following is a table of allowed expression operand parameters:
.Sp
.Vb 12
\&  +\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&  | op1_type | op1                                                    | op2_type  | op2                                             |  op                            |
\&  +\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&  |          | rtype    \- the resource record type                    | STRING    | A, AAAA, CNAME, DNAME, MX, NAPTR, PTR, SRV, TXT | EQ, NOT_EQ                     |
\&  |          | ctime    \- the resource record creation time           | STRING    | $uint                                           | GT (in days)                   |
\&  |          | qtime    \- the resource record last queried time       | STRING    | $uint                                           | GT (in days)                   |
\&  | FIELD    | stime    \- the resource record last seen time          | STRING    | $uint                                           | GT (in days)                   |
\&  |          | rcreator \- the resource record creator                 | STRING    | STATIC, DYNAMIC                                 | EQ                             |
\&  |          | assocr   \- the resource record associated record       | undef     | undef                                           | EXISTS, NOT_EXISTS             |
\&  +\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&  | LIST     | undef                                                  | undef     | undef                                           | AND, OR, ENDLIST               |
\&  +\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get expression_list value
\& my $expression_list = $object\->expression_list();
\&
\& #Construct expression (rcreator == DYNAMIC AND ctime > 10)
\&
\& my $start_list = Infoblox::Grid::ExpressionOp\->new(
\&     op1_type => \*(AqLIST\*(Aq,
\&     op       => \*(AqAND\*(Aq,
\& );
\&
\& my $op1 = Infoblox::Grid::ExpressionOp\->new(
\&     op1_type => \*(AqFIELD\*(Aq,
\&     op1      => \*(Aqrcreator\*(Aq,
\&     op2_type => \*(AqSTRING\*(Aq,
\&     op2      => \*(AqDYNAMIC\*(Aq,
\&     op       => \*(AqEQ\*(Aq,
\& );
\&
\& my $op2 = Infoblox::Grid::ExpressionOp\->new(
\&     op1_type => \*(AqFIELD\*(Aq,
\&     op1      => \*(Aqctime\*(Aq,
\&     op2_type => \*(AqSTRING\*(Aq,
\&     op2      => \*(Aq10\*(Aq,
\&     op       => \*(AqGT\*(Aq,
\& );
\&
\& my $end_list = Infoblox::Grid::ExpressionOp\->new(
\&     op1_type => \*(AqLIST\*(Aq,
\&     op       => \*(AqENDLIST\*(Aq,
\& );
\&
\& #Modify expression_list value
\& $object\->expression_list([$start_list, $op1, $op2, $end_list]);
.Ve
.RE
.RS 4
.RE
.SS "scavenging_schedule( )"
.IX Subsection "scavenging_schedule( )"
.RS 4
Use this method to set or retrieve the scavenging schedule settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::ScheduleSetting object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get scavenging_schedule value
\& my $scavenging_schedule = $object\->scavenging_schedule();
\&
\& #Modify scavenging_schedule value
\& $object\->scavenging_schedule($schedule);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::DNS, 
Infoblox::Grid::DNS\->\fBscavenging_settings()\fR, 
Infoblox::DNS::View, 
Infoblox::DNS::View\->\fBscavenging_settings()\fR, 
Infoblox::DNS::Zone, 
Infoblox::DNS::Zone\->\fBscavenging_settings()\fR, 
Infoblox::Grid::ScheduleSetting, 
Infoblox::Grid::ExpressionOp, 
Infoblox::Grid::EAExpressionOp,
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
