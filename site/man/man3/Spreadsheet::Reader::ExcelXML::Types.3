.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::ExcelXML::Types 3"
.TH Spreadsheet::Reader::ExcelXML::Types 3 "2017-04-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::ExcelXML::Types \- A type library for the ExcelXML reader
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation is written to explain ways to use this module.  To use the general
package for excel parsing out of the box please review the documentation for Workbooks
, Worksheets
, and
Cells.
.PP
This is a Type::Library for this package.  There are no
real tricks here outside of the standard Type::Tiny stuf.  For the cool number and date
formatting implementation see Spreadsheet::Reader::Format::ParseExcelFormatStrings.
.SH "TYPES"
.IX Header "TYPES"
.SS "XMLFile"
.IX Subsection "XMLFile"
This type checks that the value is a readable file (full path \- no file find magic
used) with an \e.xml extention
.PP
\fIcoercions\fR
.IX Subsection "coercions"
.PP
none
.SS "XLSXFile"
.IX Subsection "XLSXFile"
This type checks that the value is a readable file (full path \- no file find magic
used)  with an \e.xlsx, \e.xlsm, or \e.xml extention
.PP
\fIcoercions\fR
.IX Subsection "coercions"
.PP
none
.SS "IOFileType"
.IX Subsection "IOFileType"
This is set as an instance of 'IO::File'
.PP
\fIcoercions\fR
.IX Subsection "coercions"
.Sp
.RS 4
\&\fBGlobRef:\fR  by blessing it into an IO::File instance 'via{  bless \f(CW$_\fR, 'IO::File' }'
.Sp
\&\fBXLSXFile:\fR  by opening it as an IO::File instance 'via{  IO::File\->new( \f(CW$_\fR, 'r' ); }'
.Sp
\&\fBXMLFile:\fR  by opening it as an IO::File instance 'via{  IO::File\->new( \f(CW$_\fR, 'r' ); }'
.RE
.SS "ParserType"
.IX Subsection "ParserType"
For now this type checks that the parser type string == 'reader'.  As future parser
types are added to the package I will update this type.
.PP
\fIcoercions\fR
.IX Subsection "coercions"
.Sp
.RS 4
\&\fBStr:\fR this will lower case any other version of the string 'reader' (Reader| \s-1READER\s0)
to get it to pass
.RE
.SS "PositiveNum"
.IX Subsection "PositiveNum"
This type checks that the value is a number and is greater than 0
.PP
\fIcoercions\fR
.IX Subsection "coercions"
.PP
none
.SS "NegativeNum"
.IX Subsection "NegativeNum"
This type checks that the value is a number and is less than 0
.PP
\fIcoercions\fR
.IX Subsection "coercions"
.PP
none
.SS "ZeroOrUndef"
.IX Subsection "ZeroOrUndef"
This type allows the value to be the number 0 or undef
.PP
\fIcoercions\fR
.IX Subsection "coercions"
.PP
none
.SS "NotNegativeNum"
.IX Subsection "NotNegativeNum"
This type checks that the value is a number and that the number is greater than
or equal to 0
.PP
\fIcoercions\fR
.IX Subsection "coercions"
.PP
none
.SS "CellID"
.IX Subsection "CellID"
this is a value that passes the following regular expression test; qr/^[A\-Z]{1,3}[1\-9]\ed*$/
.PP
\fIcoercions\fR
.IX Subsection "coercions"
.PP
none
.SS "SubString"
.IX Subsection "SubString"
This is a precurser type to ErrorString.  It is used to perform the first layer of coersions
so that error objects can be consumed as-is in this package when a subcomponent throws an
object rather than a string as an error.
.PP
\fIcoercions\fR
.IX Subsection "coercions"
.Sp
.RS 4
\&\fBObject:\fR  it will test the object for two methods and if either one is present it will use
the results of that method as the string.  The methods in order are; 'as_string' and 'message'
.RE
.SS "ErrorString"
.IX Subsection "ErrorString"
This is a string that can't match the following sequence /\e)\en;/
#I don't even remember why that sequence is bad but it is
.PP
\fIcoercions\fR
.IX Subsection "coercions"
.Sp
.RS 4
\&\fBSubString:\fR by using the following substitution on the string; s/\e)\en;/\e);/g
.RE
.SH "NAMED COERCIONS"
.IX Header "NAMED COERCIONS"
.SS "Excel_number_0"
.IX Subsection "Excel_number_0"
This is essentially a pass through coercion used as a convenience rather than writing the
pass through each time a coercion is needed but no actual work should be performed on the
value
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::XLSX::Reader::LibXML/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR The ErrorString type tests still needs a 'fail' case
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Spreadsheet::Reader::ExcelXML \- the package
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::Read \- generic Spreadsheet reader
.Sp
Spreadsheet::ParseExcel \- Excel binary version 2003 and earlier (.xls files)
.Sp
Spreadsheet::XLSX \- Excel version 2007 and later
.Sp
Spreadsheet::ParseXLSX \- Excel version 2007 and later
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
