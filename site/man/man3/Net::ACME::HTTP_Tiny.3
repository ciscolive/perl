.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::ACME::HTTP_Tiny 3"
.TH Net::ACME::HTTP_Tiny 3 "2018-07-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::ACME::HTTP_Tiny \- HTTP client for Net::ACME
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::ACME::HTTP_Tiny;
\&
\&    my $http = Net::ACME::HTTP_Tiny\->new();
\&
\&    #NOTE: Unlike HTTP::Tinyâ€™s method, this will die() if the HTTP
\&    #session itself fails\-\-for example, if the network connection was
\&    #interrupted. These will be Net::ACME::X::HTTP::Network instances.
\&    #
\&    #This also fails on HTTP errors (4xx and 5xx). The errors are
\&    #instances of Net::ACME::X::HTTP::Protocol.
\&    #
\&    my $resp_obj = $http\->post_form( $the_url, \e%the_form_post );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module largely duplicates the work of \f(CW\*(C`HTTP::Tiny::UA\*(C'\fR, just without the
dependency on \f(CW\*(C`superclass.pm\*(C'\fR (which brings in a mess of other undesirables).
.PP
The chief benefit is that \f(CW\*(C`request()\*(C'\fR and related methods will return
instances of \f(CW\*(C`HTTP::Tiny::UA::Response\*(C'\fR rather than simple hashes.
.PP
This also always verifies remote \s-1SSL\s0 connections and always \f(CW\*(C`die()\*(C'\fRs if
either the network connection fails or the protocol indicates an error
(4xx or 5xx).
