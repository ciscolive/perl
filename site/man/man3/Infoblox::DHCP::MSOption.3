.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::MSOption 3"
.TH Infoblox::DHCP::MSOption 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::MSOption \- Microsoft (r) Server DHCP Option object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1DHCP\s0 options describe network configuration settings and various services available on the network. These options occur as variable-length fields at the end of \s-1DHCP\s0 messages.
.PP
You can add or change only \s-1DHCP\s0 options that are in the Microsoft server and \s-1NIOS\s0 predefined list of options. Options that are not common to both are read-only.
.PP
Following are the options that the Microsoft server and the \s-1NIOS\s0 predefined list of options have in common:
.PP
.Vb 10
\& code    name
\& =======================================================
\&   2    \*(AqTime Offset\*(Aq
\&   4    \*(AqTime Server\*(Aq
\&   5    \*(AqName Servers\*(Aq
\&   7    \*(AqLog Servers\*(Aq
\&   8    \*(AqCookie Servers\*(Aq
\&   9    \*(AqLPR Servers\*(Aq
\&   10   \*(AqImpress Servers\*(Aq
\&   11   \*(AqResource Location Servers\*(Aq
\&   12   \*(AqHost Name\*(Aq
\&   13   \*(AqBoot File Size\*(Aq
\&   14   \*(AqMerit Dump File\*(Aq
\&   16   \*(AqSwap Server\*(Aq
\&   17   \*(AqRoot Path\*(Aq
\&   18   \*(AqExtensions Path\*(Aq
\&   19   \*(AqIP Layer Forwarding\*(Aq
\&   20   \*(AqNonlocal Source Routing\*(Aq
\&   21   \*(AqPolicy Filter Masks\*(Aq
\&   22   \*(AqMax DG Reassembly Size\*(Aq
\&   23   \*(AqDefault IP Time\-to\-live\*(Aq
\&   24   \*(AqPath MTU Aging Timeout\*(Aq
\&   25   \*(AqPath MTU Plateau Table\*(Aq
\&   26   \*(AqMTU Option\*(Aq
\&   27   \*(AqAll subnets are local\*(Aq
\&   29   \*(AqPerform Mask Discovery\*(Aq
\&   30   \*(AqMask Supplier Option\*(Aq
\&   31   \*(AqPerform Router Discovery\*(Aq
\&   32   \*(AqRouter Solicitation Address\*(Aq
\&   33   \*(AqStatic Route Option\*(Aq
\&   34   \*(AqTrailer Encapsulation\*(Aq
\&   35   \*(AqARP Cache Timeout\*(Aq
\&   36   \*(AqEthernet Encapsulation\*(Aq
\&   37   \*(AqTCP Default Time\-to\-live\*(Aq
\&   38   \*(AqKeepalive Interval\*(Aq
\&   39   \*(AqKeepalive Garbage\*(Aq
\&   40   \*(AqNIS Domain Name\*(Aq
\&   41   \*(AqNIS Servers\*(Aq
\&   42   \*(AqNTP Servers\*(Aq
\&   43   \*(AqVendor Specific Info\*(Aq
\&   44   \*(AqWINS/NBNS Servers\*(Aq
\&   45   \*(AqNetBIOS over TCP/IP NBDD\*(Aq
\&   46   \*(AqWINS/NBT Node Type\*(Aq
\&   47   \*(AqNetBIOS Scope ID\*(Aq
\&   48   \*(AqX Window System Font\*(Aq
\&   49   \*(AqX Window System Display\*(Aq
\&   64   \*(AqNIS+ Domain Name\*(Aq
\&   65   \*(AqNIS+ Servers\*(Aq
\&   66   \*(AqBoot Server Host Name\*(Aq
\&   67   \*(AqBootfile Name\*(Aq
\&   68   \*(AqMobile IP Home Agents\*(Aq
\&   69   \*(AqSimple Mail Transport Protocol (SMTP) Servers\*(Aq
\&   70   \*(AqPost Office Protocol (POP3) Servers\*(Aq
\&   71   \*(AqNetwork News Transport Protocol (NNTP) Servers\*(Aq
\&   72   \*(AqWorld Wide Web (WWW) Servers\*(Aq
\&   73   \*(AqFinger Servers\*(Aq
\&   74   \*(AqInternet Relay Chat (IRC) Servers\*(Aq
\&   75   \*(AqStreetTalk Servers\*(Aq
\&   76   \*(AqStreetTalk Directory Assistance (STDA) Servers\*(Aq
.Ve
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 8
\&  my $option = Infoblox::DHCP::MSOption\->new(
\&     code         => $int,                           #Required
\&     value        => $num | $string |"true"|"false", #Required
\&     name         => $string,                        #Optional
\&     type         => $string,                        #Optional
\&     vendor_class => $string,                        #Optional / If not specified, it uses the default Microsoft vendor class
\&     user_class   => $string,                        #Optional / If not specified, it uses the default Microsoft user class
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to a \s-1DHCP\s0 Option object.
.SS "Infoblox::Grid::MSServer::DHCP\->ms_options( )"
.IX Subsection "Infoblox::Grid::MSServer::DHCP->ms_options( )"
.RS 4
Use this function to specify \s-1DHCP\s0 options at the Microsoft server level. See Infoblox::Grid::MSServer::DHCP\->\fBms_options()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& #Construct a DHCP Option object
\& my $opt1 = Infoblox::DHCP::MSOption\->new(
\&                                          name         => \*(AqTime Offset\*(Aq,
\&                                          code         => 2,
\&                                          type         => \*(Aqlong\*(Aq,
\&                                          value        => 50,
\&                                          vendor_class => \*(AqDHCP Standard Options\*(Aq,
\&                                          user_class   => \*(AqDefault User Class\*(Aq,
\&                                         );
\& # Configure a DHCP option for a Microsoft DHCP server
\& my $response = $MSServer_DHCP\->ms_options([$opt1]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DHCP::Range\->ms_options( )"
.IX Subsection "Infoblox::DHCP::Range->ms_options( )"
.RS 4
Use this function to specify Microsoft \s-1DHCP\s0 options at the range level. See Infoblox::DHCP::Range\->\fBms_options()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& my $opt1 = Infoblox::DHCP::MSOption\->new(
\&                                          name         => \*(AqLPR Servers\*(Aq,
\&                                          code         => 9,
\&                                          type         => \*(Aqarray of ip address\*(Aq,
\&                                          value        => \*(Aq10.4.1.0,10.4.1.1,10.4.1.2\*(Aq,
\&                                          vendor_class => \*(AqDHCP Standard Options\*(Aq,
\&                                          user_class   => \*(AqDefault User Class\*(Aq,
\&                                         );
\& # Configure a Microsoft DHCP option for a range
\& my $response = $Range\->ms_options([$opt1]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DHCP::FixedAddr\->ms_options( )"
.IX Subsection "Infoblox::DHCP::FixedAddr->ms_options( )"
.RS 4
Use this function to specify \s-1DHCP\s0 options at the fixed address level. See Infoblox::DHCP::FixedAddr\->\fBms_options()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& my $opt1 = Infoblox::DHCP::MSOption\->new(
\&                                          name         => \*(AqStatic Route Option\*(Aq,
\&                                          code         => 33,
\&                                          type         => \*(Aqarray of ip address pair\*(Aq,
\&                                          value        => \*(Aq10.5.1.0 10.5.1.1,10.5.1.2 10.5.1.3\*(Aq,
\&                                         );
\& # Configure a DHCP option for a network
\& my $response = $FixedAddr\->ms_options([$opt1]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 option.
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of the \s-1DHCP\s0 option.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the name of the Microsoft \s-1DHCP\s0 option in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $option\->name();
\& #Modify name
\& $option\->name("Static Route Option");
.Ve
.RE
.RS 4
.RE
.SS "code( )"
.IX Subsection "code( )"
.RS 4
Use this method to set or retrieve the code value of the \s-1DHCP\s0 option.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the code of the \s-1DHCP\s0 option. It must be an integer from 1 to 254.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get code
\& my $code = $option\->code();
\& #Modify code
\& $option\->code("12");
.Ve
.RE
.RS 4
.RE
.SS "type( )"
.IX Subsection "type( )"
.RS 4
Use this method to set or retrieve the type value of the \s-1DHCP\s0 option.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the type of the \s-1DHCP\s0 option. It must be one of the following values:
.Sp
.Vb 10
\& \*(Aqbinary\*(Aq
\& \*(Aqbyte\*(Aq
\& \*(Aqarray of byte\*(Aq
\& \*(Aqarray of ip address pair\*(Aq
\& \*(Aqip address\*(Aq
\& \*(Aqarray of ip address\*(Aq
\& \*(Aqlong integer\*(Aq
\& \*(Aqarray of long integer\*(Aq
\& \*(Aqlong\*(Aq
\& \*(Aqarray of long\*(Aq
\& \*(Aqarray of string\*(Aq
\& \*(Aqarray of word\*(Aq
\& \*(Aqencapsulated\*(Aq
\& \*(Aqstring\*(Aq
\& \*(Aqword\*(Aq
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get type
\& my $type = $option\->type();
\& #Modify type
\& $option\->type("string");
.Ve
.RE
.RS 4
.RE
.SS "value( )"
.IX Subsection "value( )"
.RS 4
Use this method to set or retrieve the custom value of the \s-1DHCP\s0 option.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the data type of the \s-1DHCP\s0 option. If the type is set to 'array of...', the accepted type is a list of the specified types.
.Sp
.Vb 1
\&  "binary"                            \- Binary data.
\&
\&  "byte"                              \- Specify a numeric value between 0 and 255.
\&
\&  "encapsulated"                      \- Encapsulated data.
\&
\&  "ip address"                        \- Specify an IPv4 address.
\&
\&  "ip address pair"                   \- Specify a pair of IPv4 addresses separated by a space.
\&
\&  "long"                              \- Specify a numeric value between 0 and 4294967295.
\&
\&  "long integer"                      \- Specify a numeric value between 0 and 1.84467441 * 10^19
\&
\&  "string"                            \- Specify either a value in ASCII text string or
\&                                        a list of hexadecimal characters (0\-9, a\-f, or A\-F) without spaces and separated by colons.
\&
\&  "word"                              \- Specify a numeric value between 0 and 65535.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get value
\& my $value = $option\->value();
\& #Modify value
\& $option\->value("abc.com");
.Ve
.RE
.RS 4
.RE
.SS "user_class( )"
.IX Subsection "user_class( )"
.RS 4
Use this method to set an option space name as the user class value of a \s-1DHCP\s0 option or to retrieve an option space name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the defined option space name in string format. The default user class name is \*(L"Default User Class\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get user_class
\& my $name = $option\->user_class();
\& #Modify user_class
\& $option\->user_class("Default User Class");
.Ve
.RE
.RS 4
.RE
.SS "vendor_class( )"
.IX Subsection "vendor_class( )"
.RS 4
Use this method to set an option space name as the vendor class value of a \s-1DHCP\s0 option or to retrieve an option space name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the defined option space name in string format. The default vendor space name is \*(L"\s-1DHCP\s0 Standard Options\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get vendor_class
\& my $name = $option\->vendor_class();
\& #Modify vendor_class
\& $option\->vendor_class("DHCP Standard Options");
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR,Infoblox::Grid::MSServer::DHCP, Infoblox::DHCP::Range, Infoblox::DHCP::FixedAddr
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
