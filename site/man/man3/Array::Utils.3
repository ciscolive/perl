.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Utils 3"
.TH Utils 3 "2010-05-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Array::Utils \- small utils for array manipulation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Array::Utils qw(:all);
\&        
\&        my @a = qw( a b c d );
\&        my @b = qw( c d e f );
\&
\&        # symmetric difference
\&        my @diff = array_diff(@a, @b);
\&
\&        # intersection
\&        my @isect = intersect(@a, @b);
\&        
\&        # unique union
\&        my @unique = unique(@a, @b);
\&        
\&        # check if arrays contain same members
\&        if ( !array_diff(@a, @b) ) {
\&                # do something
\&        }
\&        
\&        # get items from array @a that are not in array @b
\&        my @minus = array_minus( @a, @b );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A small pure-perl module containing list manipulation routines. The module
emerged because I was tired to include same utility routines in numerous projects.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .IP """unique""" 4
.el .IP "\f(CWunique\fR" 4
.IX Item "unique"
Returns an array of unique items in the arguments list.
.ie n .IP """intersect""" 4
.el .IP "\f(CWintersect\fR" 4
.IX Item "intersect"
Returns an intersection of two arrays passed as arguments, keeping the order of the
second parameter. A nice side effect of this function can be exploited in situations as:
.Sp
.Vb 3
\&        @atreides = qw( Leto Paul Alia \*(AqLeto II\*(Aq );
\&        @mylist = qw( Alia Leto );
\&        @mylist = intersect( @mylist, @atreides );  # and @mylist is ordered as Leto,Alia
.Ve
.ie n .IP """array_diff""" 4
.el .IP "\f(CWarray_diff\fR" 4
.IX Item "array_diff"
Return symmetric difference of two arrays passed as arguments.
.ie n .IP """array_minus""" 4
.el .IP "\f(CWarray_minus\fR" 4
.IX Item "array_minus"
Returns the difference of the passed arrays A and B (only those 
array elements that exist in A and do not exist in B). 
If an empty array is returned, A is subset of B.
.Sp
Function was proposed by Laszlo Forro <salmonix@gmail.com>.
.SH "BUGS"
.IX Header "BUGS"
None known yet
.SH "AUTHOR"
.IX Header "AUTHOR"
Sergei A. Fedorov <zmij@cpan.org>
.PP
I will be happy to have your feedback about the module.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is Copyright (c) 2007 Sergei A. Fedorov.
All rights reserved.
.PP
You may distribute under the terms of either the \s-1GNU\s0 General Public
License or the Artistic License, as specified in the Perl \s-1README\s0 file.
.SH "WARRANTY"
.IX Header "WARRANTY"
This is free software. \s-1IT COMES WITHOUT WARRANTY OF ANY KIND.\s0
