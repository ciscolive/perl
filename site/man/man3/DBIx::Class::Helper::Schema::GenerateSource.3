.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Helper::Schema::GenerateSource 3"
.TH DBIx::Class::Helper::Schema::GenerateSource 3 "2020-03-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Helper::Schema::GenerateSource \- Generate sources directly from your Schema
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package MyApp::Schema;
\&
\& _\|_PACKAGE_\|_\->load_components(\*(AqHelper::Schema::GenerateSource\*(Aq);
\&
\& _\|_PACKAGE_\|_\->generate_source(User => \*(AqMyCompany::BaseResult::User\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This helper allows you to handily and correctly add new result sources to your
schema based on existing result sources.  Typically this would be done with
something like:
.PP
.Vb 1
\& package MyApp::Schema::Result::MessegeQueue;
\&
\& use parent \*(AqMyCo::Schema::Result::MessageQueue\*(Aq;
\&
\& _\|_PACKAGE_\|_\->table(_\|_PACKAGE_\|_\->table);
\&
\& 1;
.Ve
.PP
which clearly is in its own file.  This should still be done when you need to
add columns or really do \fBanything\fR other than just basic addition of the
result source to your schema.
.PP
\&\fBNote\fR: This component correctly generates an \*(L"anonymous\*(R" subclass of the given
base class.  Do not depend on the name of the subclass as it is currently
considered unstable.
.SH "METHODS"
.IX Header "METHODS"
.SS "generate_source"
.IX Subsection "generate_source"
.Vb 1
\& $schema\->generate_source(User => \*(AqMyCompany::BaseResult::User\*(Aq)
.Ve
.PP
The first argument to \f(CW\*(C`generate_source\*(C'\fR is the \f(CW\*(C`moniker\*(C'\fR to register the
class as, the second argument is the base class for the new result source.
.SH "AUTHOR"
.IX Header "AUTHOR"
Arthur Axel \*(L"fREW\*(R" Schmidt <frioux+cpan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Arthur Axel \*(L"fREW\*(R" Schmidt.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
