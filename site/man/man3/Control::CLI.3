.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Control::CLI 3"
.TH Control::CLI 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Control::CLI \- Command Line Interface I/O over either Telnet or SSH (IPv4 & IPv6) or Serial port
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Telnet access"
.IX Subsection "Telnet access"
.Vb 10
\&        use Control::CLI;
\&        # Create the object instance for Telnet
\&        $cli = new Control::CLI(\*(AqTELNET\*(Aq);
\&        # Connect to host
\&        $cli\->connect(  Host            => \*(Aqhostname\*(Aq,
\&                        Terminal_type   => \*(Aqvt100\*(Aq,     # Optional
\&                     );
\&        # Perform login
\&        $cli\->login(    Username        => $username,
\&                        Password        => $password,
\&                   );
\&        # Send a command and read the resulting output
\&        $output = $cli\->cmd("command");
\&        print $output;
\&        $cli\->disconnect;
.Ve
.SS "\s-1SSH\s0 access"
.IX Subsection "SSH access"
.Vb 10
\&        use Control::CLI;
\&        # Create the object instance for SSH
\&        $cli = new Control::CLI(\*(AqSSH\*(Aq);
\&        # Connect to host \- Note that with SSH,
\&        #  authentication is normally part of the connection process
\&        $cli\->connect(  Host            => \*(Aqhostname\*(Aq,
\&                        Username        => $username,
\&                        Password        => $password,
\&                        PublicKey       => \*(Aq.ssh/id_dsa.pub\*(Aq,
\&                        PrivateKey      => \*(Aq.ssh/id_dsa\*(Aq,
\&                        Passphrase      => $passphrase,
\&                        Terminal_type   => \*(Aqvt100\*(Aq,     # Optional
\&                     );
\&        # In some rare cases, may need to use login
\&        #  if remote device accepted an SSH connection without any authentication
\&        #  and expects an interactive login/password authentication
\&        $cli\->login(Password => $password);
\&        # Send a command and read the resulting output
\&        $output = $cli\->cmd("command");
\&        print $output;
\&        $cli\->disconnect;
.Ve
.SS "Serial port access"
.IX Subsection "Serial port access"
.Vb 10
\&        use Control::CLI;
\&        # Create the object instance for Serial port e.g. /dev/ttyS0 or COM1
\&        $cli = new Control::CLI(\*(Aq/dev/ttyS0\*(Aq);
\&        # Connect to host
\&        $cli\->connect(  BaudRate        => 9600,
\&                        Parity          => \*(Aqnone\*(Aq,
\&                        DataBits        => 8,
\&                        StopBits        => 1,
\&                        Handshake       => \*(Aqnone\*(Aq,
\&                     );
\&        # Send some character sequence to wake up the other end, e.g. a carriage return
\&        $cli\->print;
\&        # Perform login
\&        $cli\->login(    Username        => $username,
\&                        Password        => $password,
\&                   );
\&        # Send a command and read the resulting output
\&        $output = $cli\->cmd("command");
\&        print $output;
\&        $cli\->disconnect;
.Ve
.SS "Driving multiple Telnet/SSH connections simultaneously in non-blocking mode"
.IX Subsection "Driving multiple Telnet/SSH connections simultaneously in non-blocking mode"
.Vb 1
\&        use Control::CLI qw(poll);                      # Export class poll method
\&
\&        sub hostError { # Prepend hostname before error its cli object generated
\&                my ($host, $errmsg) = @_;
\&                die "\en$host \-> $errmsg"; 
\&        }
\&
\&        sub bulkDo { # Repeat for all hosts
\&                my ($cliHashRef, $method, $argsRef) = @_;
\&        
\&                foreach my $host (keys %$cliHashRef) { # Call $method for every object
\&                        my $codeRef = $cliHashRef\->{$host}\->can($method);
\&                        $codeRef\->($cliHashRef\->{$host}, @$argsRef);
\&                }
\&                poll(   # Poll all objects for completion of $method
\&                        Object_list     =>      $cliHashRef,
\&                        Poll_code       =>      sub { local $| = 1; print \*(Aq.\*(Aq },
\&                );
\&                print " done!\en";
\&        }
\&
\&        # Create and Connect all the object instances
\&        foreach my $host (@DeviceIPs) {
\&                $cli{$host} = new Control::CLI(
\&                        Use             => \*(AqSSH\*(Aq,               # or TELNET (or lots of serial ports!)
\&                        Blocking        => 0,                   # Use non\-blocking mode
\&                        Errmode         => [\e&hostError, $host],# Error handler will add host\-ip to msg
\&                );
\&                $cli{$host}\->connect(
\&                        Host            =>      $host,
\&                        Username        =>      $username,
\&                        Password        =>      $password,
\&                );
\&        }
\&        print "Connecting to all hosts ";
\&        poll(   # Poll all objects for completion of connect
\&                Object_list     =>      \e%cli,
\&                Poll_code       =>      sub { local $| = 1; print \*(Aq.\*(Aq },
\&        );
\&        print " done!\en";
\&
\&        print "Performing login on all hosts ";
\&        bulkDo(\e%cli, \*(Aqlogin\*(Aq, [Password => $password]);        # Not strictly necessary with SSH
\&
\&        print "Entering PrivExec on all hosts ";
\&        bulkDo(\e%cli, \*(Aqcmd\*(Aq, [\*(Aqenable\*(Aq]);
\&
\&        print "Entering Config mode on all hosts ";
\&        bulkDo(\e%cli, \*(Aqcmd\*(Aq, [\*(Aqconfig terminal\*(Aq]);
\&
\&        print "Pushing config command on all hosts ";
\&        bulkDo(\e%cli, \*(Aqcmd\*(Aq, [\*(Aqsnmp\-server contact Jack\*(Aq]);
\&
\&        print "Disconnecting from all hosts ";
\&        bulkDo(\e%cli, \*(Aqdisconnect\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Command Line Interface (\s-1CLI\s0) is an interface where the user is presented with a command prompt and has to enter \s-1ASCII\s0 commands to drive or control or configure that device.
That interface could be the shell on a unix system or some other command interpreter on a device such as an ethernet switch or an \s-1IP\s0 router or some kind of security appliance.
.PP
Control::CLI allows \s-1CLI\s0 connections to be made over any of Telnet, \s-1SSH\s0 or Serial port.
Connection and basic I/O can be performed in a consistent manner regardless of the underlying connection type thus allowing \s-1CLI\s0 based scripts to be easily converted between or operate over any of Telnet, \s-1SSH\s0 or Serial port connection.
Control::CLI relies on these underlying modules:
.IP "\(bu" 2
Net::Telnet for Telnet access
.IP "\(bu" 2
Net::SSH2 for \s-1SSH\s0 access
.IP "\(bu" 2
IO::Socket::IP for IPv6 support
.IP "\(bu" 2
Win32::SerialPort or Device::SerialPort for Serial port access respectively on Windows and Unix systems
.PP
Since all of the above are Perl standalone modules (which do not rely on external binaries) scripts using Control::CLI can easily be ported to any \s-1OS\s0 platform (where either Perl is installed or by simply packaging the Perl script into an executable with PAR::Packer's pp). In particular this is a big advantage for portability to Windows platforms where using Expect scripts is usually not possible.
.PP
All the above modules are optional, however if one of the modules is missing then no access of that type will be available.
For instance if Win32::SerialPort is not installed (on a Windows system) but both Net::Telnet and Net::SSH2 are, then Control::CLI will be able to operate over both Telnet and \s-1SSH,\s0 but not Serial port. There has to be, however, at least one of the Telnet/SSH/SerialPort modules installed, otherwise Control::CLI's constructor will throw an error.
.PP
Net::Telnet and Net::SSH2 both natively use IO::Socket::INET which only provides IPv4 support; if however IO::Socket::IP is installed, this class will use it as a drop in replacement to IO::Socket::INET and allow both Telnet and \s-1SSH\s0 connections to operate over IPv6 as well as IPv4.
.PP
For both Telnet and \s-1SSH\s0 this module allows setting of terminal type (e.g. vt100 or other) and windows size, which are not easy to achieve with Net::Telnet as they rely on Telnet option negotiation. Being able to set the terminal type is important with some devices which might otherwise refuse the connection if a specific virtual terminal type is not negotiated from the outset.
.PP
Note that Net::SSH2 only supports SSHv2 and this class will always and only use Net::SSH2 to establish a channel over which an interactive shell is established with the remote host. Authentication methods supported are 'publickey', 'password' and 'keyboard\-interactive'.
.PP
As of version 2.00, this module offers non-blocking capability on all of its methods (in the case of connect method, IO::Socket::IP is required). Scripts using this class can now drive multiple hosts simultaneusly without resorting to Perl threads. See the non-blocking example section at the end.
.PP
In the syntax layout below, square brackets \fB[]\fR represent optional parameters.
All Control::CLI method arguments are case insensitive.
.SH "OBJECT CONSTRUCTOR"
.IX Header "OBJECT CONSTRUCTOR"
Used to create an object instance of Control::CLI
.IP "\fB\fBnew()\fB\fR \- create a new Control::CLI object" 4
.IX Item "new() - create a new Control::CLI object"
.Vb 1
\&  $obj = new Control::CLI (\*(AqTELNET\*(Aq|\*(AqSSH\*(Aq|\*(Aq<COM_port_name>\*(Aq);
\&
\&  $obj = new Control::CLI (
\&        Use                      => \*(AqTELNET\*(Aq|\*(AqSSH\*(Aq|\*(Aq<COM_port_name>\*(Aq,
\&        [Timeout                 => $secs,]
\&        [Connection_timeout      => $secs,]
\&        [Errmode                 => $errmode,]
\&        [Errmsg_format           => $msgFormat,]
\&        [Return_reference        => $flag,]
\&        [Prompt                  => $prompt,]
\&        [Username_prompt         => $usernamePrompt,]
\&        [Password_prompt         => $passwordPrompt,]
\&        [Input_log               => $fhOrFilename,]
\&        [Output_log              => $fhOrFilename,]
\&        [Dump_log                => $fhOrFilename,]
\&        [Blocking                => $flag,]
\&        [Prompt_credentials      => $flag,]
\&        [Read_attempts           => $numberOfReadAttemps,]
\&        [Readwait_timer          => $millisecs,]
\&        [Data_with_error         => $flag,]
\&        [Read_block_size         => $bytes,]
\&        [Output_record_separator => $ors,]
\&        [Terminal_type           => $string,]
\&        [Window_size             => [$width, $height],]
\&        [Report_query_status     => $flag,]
\&        [Debug                   => $debugFlag,]
\&  );
.Ve
.Sp
This is the constructor for Control::CLI objects. A new object is returned on success. On failure the error mode action defined by \*(L"errmode\*(R" argument is performed. If the \*(L"errmode\*(R" argument is not specified the default is to croak. See \fBerrmode()\fR for a description of valid settings.
The first parameter, or \*(L"use\*(R" argument, is required and should take value either \*(L"\s-1TELNET\*(R"\s0 or \*(L"\s-1SSH\*(R"\s0 (case insensitive) or the name of the Serial port such as \*(L"\s-1COM1\*(R"\s0 or \*(L"/dev/ttyS0\*(R". In the second form, the other arguments are optional and are just shortcuts to methods of the same name.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
Methods which can be run on a previously created Control::CLI object instance
.SS "Main I/O Object Methods"
.IX Subsection "Main I/O Object Methods"
.IP "\fB\fBconnect()\fB & \fBconnect_poll()\fB\fR \- connect to host" 4
.IX Item "connect() & connect_poll() - connect to host"
.Vb 1
\&  $ok = $obj\->connect($host [$port]);
\&
\&  $ok = $obj\->connect($host[:$port]); # Deprecated
\&
\&  $ok = $obj\->connect(
\&        [Host                   => $host,]
\&        [Port                   => $port,]
\&        [Username               => $username,]
\&        [Password               => $password,]
\&        [PublicKey              => $publicKey,]
\&        [PrivateKey             => $privateKey,]
\&        [Passphrase             => $passphrase,]
\&        [Prompt_credentials     => $flag,]
\&        [BaudRate               => $baudRate,]
\&        [ForceBaud              => $flag,]
\&        [Parity                 => $parity,]
\&        [DataBits               => $dataBits,]
\&        [StopBits               => $stopBits,]
\&        [Handshake              => $handshake,]
\&        [Connection_timeout     => $secs,]
\&        [Blocking               => $flag,]
\&        [Errmode                => $errmode,]
\&        [Terminal_type          => $string,]
\&        [Window_size            => [$width, $height],]
\&        [Callback               => \e&codeRef,]
\&        [Atomic_connect         => $flag,]
\&  );
\&
\&  $ok = $obj\->connect_poll();   # Only applicable in non\-blocking mode
.Ve
.Sp
This method connects to the host device. The connection will use either Telnet, \s-1SSH\s0 or Serial port, depending on how the object was created with the \fBnew()\fR constructor.
On success a true (1) value is returned.
In non-blocking mode (blocking disabled) the \fBconnect()\fR method will immediately return with a false, but defined, value of 0. You will then need to call the \fBconnect_poll()\fR method at regular intervals until it returns a true (1) value indicating that the connection is complete. Note that for this method to work in non-blocking mode IO::Socket::IP needs to be installed (IO::Socket:INET will always produce a blocking connection call).
On connection timeout or other connection failures the error mode action is performed. See \fBerrmode()\fR.
The deprecated shorthand syntax is still accepted but it will not work if \f(CW$host\fR is an IPv6 address.
The optional \*(L"errmode\*(R", \*(L"connection_timeout\*(R" and \*(L"blocking\*(R" arguments are provided to override the global setting of the corresponding object parameter.
When a \*(L"connection_timeout\*(R" is defined, this will be used to enforce a connection timeout for Telnet and \s-1SSH TCP\s0 socket connections.
The \*(L"terminal_type\*(R" and \*(L"window_size\*(R" arguments are not overrides, they will change the object parameter as these settings are only applied during a connection.
Which arguments are used depends on the whether the object was created for Telnet, \s-1SSH\s0 or Serial port. The \*(L"host\*(R" argument is required by both Telnet and \s-1SSH.\s0 The other arguments are optional.
.RS 4
.IP "\(bu" 4
For Telnet, these forms are allowed with the following arguments:
.Sp
.Vb 1
\&  $ok = $obj\->connect($host [$port]);
\&
\&  $ok = $obj\->connect($host[:$port]); # Deprecated
\&
\&  $ok = $obj\->connect(
\&        Host                    => $host,
\&        [Port                   => $port,]
\&        [Connection_timeout     => $secs,]
\&        [Blocking               => $flag,]
\&        [Errmode                => $errmode,]
\&        [Terminal_type          => $string,]
\&        [Window_size            => [$width, $height],]
\&        [Atomic_connect         => $flag,]
\&  );
.Ve
.Sp
If not specified, the default port number for Telnet is 23.
Arguments \*(L"terminal_type\*(R" and \*(L"window_size\*(R" are negotiated via Telnet options; to debug telnet option negotiation use Net::Telnet's own \fBoption_log()\fR method.
.IP "\(bu" 4
For \s-1SSH,\s0 these forms are allowed with the following arguments:
.Sp
.Vb 1
\&  $ok = $obj\->connect($host [$port]);
\&
\&  $ok = $obj\->connect($host[:$port]); # Deprecated
\&
\&  $ok = $obj\->connect(
\&        Host                    => $host,
\&        [Port                   => $port,]
\&        [Username               => $username,]
\&        [Password               => $password,]
\&        [PublicKey              => $publicKey,]
\&        [PrivateKey             => $privateKey,]
\&        [Passphrase             => $passphrase,]
\&        [Prompt_credentials     => $flag,]
\&        [Connection_timeout     => $secs,]
\&        [Blocking               => $flag,]
\&        [Errmode                => $errmode,]
\&        [Terminal_type          => $string,]
\&        [Window_size            => [$width, $height],]
\&        [Callback               => \e&codeRef,]
\&        [Atomic_connect         => $flag,]
\&  );
.Ve
.Sp
If not specified, the default port number for \s-1SSH\s0 is 22.
A username must always be provided for all \s-1SSH\s0 connections. If not provided and prompt_credentials is true then this method will prompt for it.
Once the \s-1SSH\s0 connection is established, this method will attempt one of two possible authentication types, based on the accepted authentications of the remote host:
.RS 4
.IP "\(bu" 4
\&\fBPublickey authentication\fR : If the remote host accepts it and the method was supplied with public/private keys. The public/private keys need to be in OpenSSH format. If the private key is protected by a passphrase then this must also be provided or, if prompt_credentials is true, this method will prompt for the passphrase. If publickey authentication fails for any reason and password authentication is possible, then password authentication is attempted next; otherwise the error mode action is performed. See \fBerrmode()\fR.
.IP "\(bu" 4
\&\fBPassword authentication\fR : If the remote host accepts either 'password' or 'keyboard\-interactive' authentication methods. A password must be provided or, if prompt_credentials is true, this method will prompt for the password. If password authentication fails for any reason the error mode action is performed. See \fBerrmode()\fR. The \s-1SSH\s0 'keyboard\-interactive' authentication method is supported to match the functionality of 'password' authentication on hosts where the latter is not accepted. Use of either of these \s-1SSH\s0 authentication methods (which both ultimately provide username & password credentials to the \s-1SSH\s0 server) remains completely transparent to the code using this class.
.RE
.RS 4
.Sp
There are some devices, with a crude \s-1SSH\s0 implementation, which will accept an \s-1SSH\s0 connection without any \s-1SSH\s0 authentication, and then perform an interactive login, like Telnet does. In this case, the \fBconnect()\fR method, will not perform any \s-1SSH\s0 authentication and will return success after simply bringing up the \s-1SSH\s0 connection; but in this case you will most likely have to complete the login authentication by calling the \fBlogin()\fR method as you would do with Telnet and Serial port connections.
.Sp
The optional \*(L"prompt_credentials\*(R" argument is provided to override the global setting of the parameter by the same name which is by default false. See \fBprompt_credentials()\fR.
.Sp
If a code reference is provided via the 'callback' argument, that code will be called immediately after setting up the \s-1SSH\s0 connection and before attempting any authentication. You can use this callback to check the key of the remote host against a list of known host keys so as to determine whether or not the connection should proceed. A code reference will be called with as argument this class object id, from which the underlying Net::SSH2 object id can be obtained, which is required in order to call Net::SSH2's remote_hostkey and known_hosts methods.
An example on how to verify the host key against your known hosts is provided in the documentation of Net::SSH2::KnownHosts.
Note that Net::SSH2 methods remote_hostkey and known_hosts methods only exists as of version 0.54. This class does not require a minimum version of Net::SSH2 but your code will need to require a version of 0.54, or verify the availability of those methods, if you intend to use those methods in your callback.
Instead of a code reference, an array reference can also be used provided that the first element in the array is a code reference. In this case the remainder of the array elements will be inserted as arguments to the code being called to which this class object id will be appended as last argument.
.Sp
.Vb 1
\&  $ok = &$codeRef($netSsh2Obj);
\&
\&  ($ok, [$error_message]) = &$codeRef($netSsh2Obj);
\&
\&  $ok = &{$codeRef\->[0]}($codeRef\->[1], $codeRef\->[2], $codeRef\->[3], ..., $controlCliObj);
\&
\&  ($ok, [$error_message]) = &{$codeRef\->[0]}($codeRef\->[1], $codeRef\->[2], $codeRef\->[3], ..., $controlCliObj);
.Ve
.Sp
Your callback should return a true value (for \f(CW$ok\fR) if the \s-1SSH\s0 connection is to proceed.
Whereas a false/undefined value indicates that the connection should not go ahead; in this case an optional error message can be provided which will be used to perform the error mode action of this class. Otherwise a standard error message will be used.
.Sp
The \*(L"atomic_connect\*(R" argument is only useful if using the \fBconnect()\fR method in non-blocking mode across many objects of this class and using the Control::CLI \fBpoll()\fR method to poll progress across all of them. Since \s-1SSH\s0 authentication is not handled in non-blocking fashion in Net::SSH2, polling many \s-1SSH\s0 connections would result in all of them setting up the socket at the first poll cycles, and then one by one would have to go through \s-1SSH\s0 authentication; however the far end \s-1SSH\s0 server will typically timeout the socket if it sees no \s-1SSH\s0 authentication within the next 10 secs or so. Setting the \*(L"atomic_connect\*(R" argument will ensure that the \fBconnect()\fR method will treat socket setup + \s-1SSH\s0 authentication as one single poll action and avoid the problem. The same argument can also work with Telnet by treating socket setup + hand-over to Telnet as one single poll action, however Telnet does not suffer from the same problem.
.RE
.IP "\(bu" 4
For Serial port, these arguments are used:
.Sp
.Vb 10
\&  $ok = $obj\->connect(
\&        [BaudRate               => $baudRate,]
\&        [ForceBaud              => $flag,]
\&        [Parity                 => $parity,]
\&        [DataBits               => $dataBits,]
\&        [StopBits               => $stopBits,]
\&        [Handshake              => $handshake,]
\&        [Blocking               => $flag,]      # Ignored
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
If arguments are not specified, the defaults are: Baud Rate = 9600, Data Bits = 8, Parity = none, Stop Bits = 1, Handshake = none.
Allowed values for these arguments are the same allowed by underlying Win32::SerialPort / Device::SerialPort:
.RS 4
.IP "\(bu" 4
\&\fBBaud Rate\fR : Any legal value
.IP "\(bu" 4
\&\fBParity\fR : One of the following: \*(L"none\*(R", \*(L"odd\*(R", \*(L"even\*(R", \*(L"mark\*(R", \*(L"space\*(R"
.IP "\(bu" 4
\&\fBData Bits\fR : An integer from 5 to 8
.IP "\(bu" 4
\&\fBStop Bits\fR : Legal values are 1, 1.5, and 2. But 1.5 only works with 5 databits, 2 does not work with 5 databits, and other combinations may not work on all hardware if parity is also used
.IP "\(bu" 4
\&\fBHandshake\fR : One of the following: \*(L"none\*(R", \*(L"rts\*(R", \*(L"xoff\*(R", \*(L"dtr\*(R"
.RE
.RS 4
.Sp
On Windows systems the underlying Win32::SerialPort module can have issues with some serial ports, and fail to set the desired baudrate (see bug report https://rt.cpan.org/Ticket/Display.html?id=120068); if hitting that problem (and no official Win32::SerialPort fix is yet available) set the ForceBaud argument; this will force Win32::SerialPort into setting the desired baudrate even if it does not think the serial port supports it.
.Sp
Remember that when connecting over the serial port, the device at the far end is not necessarily alerted that the connection is established. So it might be necessary to send some character sequence (usually a carriage return) over the serial connection to wake up the far end. This can be achieved with a simple \fBprint()\fR immediately after \fBconnect()\fR.
.RE
.RE
.RS 4
.Sp
If using the \fBconnect()\fR method in non-blocking mode, the following example illustrates how this works:
.Sp
.Vb 2
\&        $ok = $obj\->connect(Host => $ip\-address, Blocking => 0);
\&        until ($ok) { # This loop will be executed while $ok = 0
\&                
\&                <do other stuff here..>
\&        
\&                $ok = $obj\->connect_poll;
\&        }
.Ve
.Sp
Or, if you have set an error mode action of 'return':
.Sp
.Vb 3
\&        $ok = $obj\->connect(Host => $ip\-address, Blocking => 0, Errmode => \*(Aqreturn\*(Aq);
\&        die $obj\->errmsg unless defined $ok;    # Error connecting
\&        until ($ok) { # This loop will be executed while $ok = 0
\&                
\&                <do other stuff here..>
\&        
\&                $ok = $obj\->connect_poll;
\&                die $obj\->errmsg unless defined $ok;    # Error or timeout connecting
\&        }
.Ve
.Sp
Some considerations on using \fBconnect()\fR in non-blocking mode:
.IP "\(bu" 4
There is no delay in establishing a serial port connection, so setting non-blocking mode has no effect on serial port connections and the connection will be established after the first call to \fBconnect()\fR
.IP "\(bu" 4
For Telnet and \s-1SSH\s0 connections, if you provided \f(CW$host\fR as a hostname which needs to resolve via \s-1DNS,\s0 the \s-1DNS\s0 lookup will still be blocking. You will either need to supply \f(CW$host\fR as a direct \s-1IP\s0 addresses or else write your own non-blocking \s-1DNS\s0 lookup code (an example is offered in the IO::Socket::IP documentation & examples)
.IP "\(bu" 4
For \s-1SSH\s0 connections, only the \s-1TCP\s0 socket connection is treated in a true non-blocking fashion. \s-1SSH\s0 authentication will call Net::SSH2's \fBauth_list()\fR, \fBauth_publickey()\fR and/or \fBauth_password()\fR or \fBauth_keyboard()\fR which all behave in a blocking fashion; to alleviate this the \fBconnect()\fR method will return between each of those \s-1SSH\s0 authentication steps
.RE
.RS 4
.RE
.IP "\fB\fBread()\fB\fR \- read block of data from object" 4
.IX Item "read() - read block of data from object"
.Vb 6
\&  $data || $dataref = $obj\->read(
\&        [Blocking               => $flag,]
\&        [Timeout                => $secs,]
\&        [Return_reference       => $flag,]
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
This method reads a block of data from the object. If blocking is enabled \- see \fBblocking()\fR \- and no data is available, then the read method will wait for data until expiry of timeout \- see \fBtimeout()\fR \-, then will perform the error mode action. See \fBerrmode()\fR. If blocking is disabled and no data is available then the read method will return immediately (in this case the timeout and errmode arguments are not applicable).
.Sp
In blocking mode, if no error or timeout, this method will always return a defined non-empty string.
.Sp
In non-blocking mode, if no error and nothing was read, this method will always return a defined empty string.
.Sp
In case of an error, and the error mode is 'return', this method will always return an undefined value.
.Sp
The optional arguments are provided to override the global setting of the parameters by the same name for the duration of this method. Note that setting these arguments does not alter the global setting for the object. See also \fBtimeout()\fR, \fBblocking()\fR, \fBerrmode()\fR, \fBreturn_reference()\fR.
Returns either a hard reference to any data read or the data itself, depending on the applicable setting of \*(L"return_reference\*(R". See \fBreturn_reference()\fR.
.IP "\fB\fBreadwait()\fB\fR \- read in data initially in blocking mode, then perform subsequent non-blocking reads for more" 4
.IX Item "readwait() - read in data initially in blocking mode, then perform subsequent non-blocking reads for more"
.Vb 9
\&  $data || $dataref = $obj\->readwait(
\&        [Read_attempts          => $numberOfReadAttemps,]
\&        [Readwait_timer         => $millisecs,]
\&        [Data_with_error        => $flag,]
\&        [Blocking               => $flag,]
\&        [Timeout                => $secs,]
\&        [Return_reference       => $flag,]
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
If blocking is enabled \- see \fBblocking()\fR \- this method implements an initial blocking read followed by a number of non-blocking reads. The intention is that we expect to receive at least some data and then we wait a little longer to make sure we have all the data. This is useful when the input data stream has been fragmented into multiple packets; in this case the normal \fBread()\fR method (in blocking mode) will immediately return once the data from the first packet is received, while the \fBreadwait()\fR method will return once all packets have been received. 
For the initial blocking read, if no data is available, the method will wait until expiry of timeout. If a timeout occurs, then the error mode action is performed as with the regular \fBread()\fR method in blocking mode. See \fBerrmode()\fR.
If blocking is disabled then no initial blocking read is performed, instead the method will move directly to the non-blocking reads (in this case the \*(L"timeout\*(R" and \*(L"errmode\*(R" arguments are not applicable).
Once some data has been read or blocking is disabled, then the method will perform a number of non-blocking reads at certain time intervals to ensure that any subsequent data is also read before returning.
The time interval is by default 100 milliseconds and can be either set via the \fBreadwait_timer()\fR method or by specifying the optional \*(L"readwait_timer\*(R" argument which will override whatever value is globally set for the object. See \fBreadwait_timer()\fR.
The number of non-blocking reads is dependent on whether more data is received or not but a certain number of consecutive reads with no more data received will make the method return. By default that number is 5 and can be either set via the \fBread_attempts()\fR method or by specifying the optional \*(L"read_attempts\*(R" argument which will override whatever value is globally set for the object. See \fBread_attempts()\fR.
Therefore note that this method will always introduce a delay of \*(L"readwait_timer\*(R" milliseconds times the value of \*(L"read_attempts\*(R" and faster response times can be obtained using the regular \fBread()\fR method.
In the event that some data was initially read, but a read error occured while trying to read in subsequent data (for example the connection was lost), the \*(L"data_with_error\*(R" flag will determine how the readwait method behaves. If the \*(L"data_with_error\*(R" flag is not set, as per default, then the readwait method will immediately perform the error mode action. If instead the \*(L"data_with_error\*(R" flag is set, then the error is masked and the readwait method will immediately return the data which was read without attempting any further reads. Note that in the latter case, any subsequent read will most likely produce the same error condition. See also \fBdata_with_error()\fR.
Returns either a hard reference to data read or the data itself, depending on the applicable setting of return_reference. See \fBreturn_reference()\fR.
.Sp
In blocking mode, if no error or timeout, this method will always return a defined non-empty string.
.Sp
In non-blocking mode, if no error and nothing was read, this method will always return a defined empty string.
.Sp
In case of an error, and the error mode is 'return', this method will always return an undefined value.
.Sp
The optional arguments are provided to override the global setting of the parameters by the same name for the duration of this method. Note that setting these arguments does not alter the global setting for the object. See also \fBread_attempts()\fR, \fBtimeout()\fR, \fBerrmode()\fR, \fBreturn_reference()\fR.
.IP "\fB\fBwaitfor()\fB & \fBwaitfor_poll()\fB\fR \- wait for pattern in the input stream" 4
.IX Item "waitfor() & waitfor_poll() - wait for pattern in the input stream"
Backward compatble syntax:
.Sp
.Vb 1
\&  $data || $dataref = $obj\->waitfor($matchpat);
\&
\&  ($data || $dataref, $match || $matchref) = $obj\->waitfor($matchpat);
\&
\&  $data || $dataref = $obj\->waitfor(
\&        [Match                  => $matchpattern1,
\&         [Match                 => $matchpattern2,
\&          [Match                => $matchpattern3,
\&            ... ]]]
\&        [Match_list             => \e@arrayRef,]
\&        [Blocking               => $flag,]
\&        [Timeout                => $secs,]
\&        [Return_reference       => $flag,]
\&        [Errmode                => $errmode,]
\&  );
\&
\&  ($data || $dataref, $match || $matchref) = $obj\->waitfor(
\&        [Match                  => $matchpattern1,
\&         [Match                 => $matchpattern2,
\&          [Match                => $matchpattern3,
\&            ... ]]]
\&        [Match_list             => \e@arrayRef,]
\&        [Blocking               => $flag,]
\&        [Timeout                => $secs,]
\&        [Return_reference       => $flag,]
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
New syntax (for non-blocking use):
.Sp
.Vb 12
\&  $ok = $obj\->waitfor(
\&        Poll_syntax             => 1,
\&        [Match                  => $matchpattern1,
\&         [Match                 => $matchpattern2,
\&          [Match                => $matchpattern3,
\&            ... ]]]
\&        [Match_list             => \e@arrayRef,]
\&        [Blocking               => $flag,]
\&        [Timeout                => $secs,]
\&        [Return_reference       => $flag,]
\&        [Errmode                => $errmode,]
\&  );
\&
\&  ($ok, $data || $dataref, $match) = $obj\->waitfor(
\&        Poll_syntax             => 1,
\&        [Match                  => $matchpattern1,
\&         [Match                 => $matchpattern2,
\&          [Match                => $matchpattern3,
\&            ... ]]]
\&        [Match_list             => \e@arrayRef,]
\&        [Blocking               => $flag,]
\&        [Timeout                => $secs,]
\&        [Return_reference       => $flag,]
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
Polling method (only applicable in non-blocking mode):
.Sp
.Vb 1
\&  $ok = $obj\->waitfor_poll();
\&
\&  ($ok, $data || $dataref, $match) = $obj\->waitfor_poll();
.Ve
.Sp
This method reads until a pattern match or string is found in the input stream, or will timeout if no further data can be read.
For backwards compatibility this method preserves the original syntax from Net::Telnet (as well as in versions prior to 2.00 of this class) where in scalar context returns any data read up to but excluding the matched string, while list context returns the same data read as well as the actual string which was matched.
With the new syntax, in scalar context returns the poll status while in list context the poll status is returned together with the data read up to but excluding the matched string and actual string which was matched; in non-blocking mode the latter 2 will most likely be undefined and will need to be recovered by subsequent calling of \fBwaitfor_poll()\fR method. To use the new syntax on the \fBwaitfor()\fR method, the 'poll_syntax' argument needs to be set to 1; the \fBwaitfor_poll()\fR method only uses the new syntax.
On timeout or other failure the error mode action is performed. See \fBerrmode()\fR.
In the first two forms a single pattern match string can be provided; in the other forms any number of pattern match strings can be provided (using \*(L"match\*(R" and \*(L"match_list\*(R" arguments) and the method will wait until a match is found against any of those patterns. In all cases the pattern match can be a simple string or any valid perl regular expression match string (in the latter case use single quotes when building the string).
The optional arguments are provided to override the global setting of the parameters by the same name for the duration of this method. Note that setting these arguments does not alter the global setting for the object. See also \fBtimeout()\fR, \fBerrmode()\fR, \fBreturn_reference()\fR.
Returns either hard reference or the data itself, depending on the applicable setting of return_reference. See \fBreturn_reference()\fR. In the legacy syntax this applied to both \f(CW$data\fR and \f(CW$match\fR strings. In the new poll sysntax this now only applies to the \f(CW$data\fR output while the \f(CW$match\fR string is always returned as a scalar.
This method is similar (but not identical) to the method of the same name provided in Net::Telnet.
.Sp
In non-blocking mode (blocking disabled) the \fBwaitfor()\fR method will most likely immediately return with a false, but defined, value of 0. You will then need to call the \fBwaitfor_poll()\fR method at regular intervals until it returns a true (1) value indicating that the match pattern has been hit. The following example illustrates:
.Sp
.Vb 2
\&        $ok = $obj\->waitfor(Poll_syntax => 1, Match => "seeked regex patterns", Blocking => 0);
\&        until ($ok) { # This loop will be executed while $ok = 0
\&                
\&                <do other stuff here..>
\&        
\&                $ok = $obj\->waitfor_poll;
\&        }
\&        print "Output data up to but excluding match string:", ($obj\->waitfor_poll)[1];
\&        print "Matched string:", ($obj\->waitfor_poll)[2];
\&        # In this order, otherwise output [1] would get flushed while reading just [2]
.Ve
.IP "\fB\fBput()\fB\fR \- write data to object" 4
.IX Item "put() - write data to object"
.Vb 1
\&  $ok = $obj\->put($string);
\&
\&  $ok = $obj\->put(
\&        String                  => $string,
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
This method writes \f(CW$string\fR to the object and returns a true (1) value if all data was successfully written.
On failure the error mode action is performed. See \fBerrmode()\fR.
This method is like print($string) except that no trailing character (usually a newline \*(L"\en\*(R") is appended.
.IP "\fB\fBprint()\fB\fR \- write data to object with trailing output_record_separator" 4
.IX Item "print() - write data to object with trailing output_record_separator"
.Vb 1
\&  $ok = $obj\->print($line);
\&
\&  $ok = $obj\->print(
\&        [Line                   => $line,]
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
This method writes \f(CW$line\fR to the object followed by the output record separator which is usually a newline \*(L"\en\*(R" \- see \fBoutput_record_separator()\fR \-  and returns a true (1) value if all data was successfully written. If the method is called with no \f(CW$line\fR string then only the output record separator is sent.
On failure the error mode action is performed. See \fBerrmode()\fR.
To avoid printing a trailing \*(L"\en\*(R" use \fBput()\fR instead.
.IP "\fB\fBprintlist()\fB\fR \- write multiple lines to object each with trailing output_record_separator" 4
.IX Item "printlist() - write multiple lines to object each with trailing output_record_separator"
.Vb 1
\&  $ok = $obj\->printlist(@list);
.Ve
.Sp
This method writes every element of \f(CW@list\fR to the object followed by the output record separator which is usually a newline \*(L"\en\*(R" \- see \fBoutput_record_separator()\fR \-  and returns a true (1) value if all data was successfully written.
On failure the error mode action is performed. See \fBerrmode()\fR.
.Sp
Note that most devices have a limited input buffer and if you try and send too many commands in this manner you risk losing some of them at the far end. It is safer to send commands one at a time using the \fBcmd()\fR method which will acknowledge each command as \fBcmd()\fR waits for a prompt after each command.
.IP "\fB\fBlogin()\fB & \fBlogin_poll()\fB\fR \- handle login for Telnet / Serial port" 4
.IX Item "login() & login_poll() - handle login for Telnet / Serial port"
.Vb 11
\&  $ok = $obj\->login(
\&        [Username               => $username,]
\&        [Password               => $password,]
\&        [Prompt_credentials     => $flag,]
\&        [Prompt                 => $prompt,]
\&        [Username_prompt        => $usernamePrompt,]
\&        [Password_prompt        => $passwordPrompt,]
\&        [Blocking               => $flag,]
\&        [Timeout                => $secs,]
\&        [Errmode                => $errmode,]
\&  );
\&
\&  ($ok, $output || $outputRef) = $obj\->login(
\&        [Username               => $username,]
\&        [Password               => $password,]
\&        [Prompt_credentials     => $flag,]
\&        [Prompt                 => $prompt,]
\&        [Username_prompt        => $usernamePrompt,]
\&        [Password_prompt        => $passwordPrompt,]
\&        [Blocking               => $flag,]
\&        [Timeout                => $secs,]
\&        [Return_reference       => $flag,]
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
Polling method (only applicable in non-blocking mode):
.Sp
.Vb 1
\&  $ok = $obj\->login_poll();
\&
\&  ($ok, $output || $outputRef) = $obj\->login_poll();
.Ve
.Sp
This method handles login authentication for Telnet and Serial port access on a generic host.
If a login/username prompt is seen, the supplied username is sent; if a password prompt is seen, the supplied password is sent; and once a valid \s-1CLI\s0 prompt is seen this method completes and returns a true (1) value.
This method is usually not required for \s-1SSH,\s0 where authentication is part of the connection process, however there are some devices where the \s-1SSH\s0 connection is allowed without any \s-1SSH\s0 authentication and you might then need to handle an interactive authentication in the \s-1SSH\s0 channel data stream, in which case you would use \fBlogin()\fR also for \s-1SSH\s0 and only the password needs to be supplied as the username will have already have been supplied, and cached, in \fBconnect()\fR. In any case calling \fBlogin()\fR on an \s-1SSH\s0 connection will allow the script to lock onto the very first \s-1CLI\s0 prompt received from the host.
In the first form only a success/failure value is returned in scalar context, while in the second form, in list context, both the success/failure value is returned as well as any output received from the host device during the login sequence; the latter is either the output itself or a reference to that output, depending on the object setting of return_reference or the argument override provided in this method.
For this method to succeed the username & password prompts from the remote host must match the default prompts defined for the object or the overrides specified via the optional \*(L"username_prompt\*(R" & \*(L"password_prompt\*(R" arguments. By default these regular expressions are set to:
.Sp
.Vb 2
\&        \*(Aq(?i:user(?: ?name)?|login)[: ]+$\*(Aq
\&        \*(Aq(?i)password[: ]+$\*(Aq
.Ve
.Sp
Following a successful authentication, if a valid \s-1CLI\s0 prompt is received, the method will return a true (1) value. The expected \s-1CLI\s0 prompt is either the globally set prompt \- see \fBprompt()\fR \- or the local override specified with the optional \*(L"prompt\*(R" argument. By default, the following prompt is expected:
.Sp
.Vb 1
\&        \*(Aq.*[\e?\e$%#>]\es?$\*(Aq
.Ve
.Sp
On timeout or failure or if the remote host prompts for the username a second time (the method assumes that the credentials provided were invalid) then the error mode action is performed. See \fBerrmode()\fR.
If username/password are not provided but are required and prompt_credentials is true, the method will automatically prompt the user for them interactively; otherwise the error mode action is performed.
The optional \*(L"prompt_credentials\*(R" argument is provided to override the global setting of the parameter by the same name which is by default false. See \fBprompt_credentials()\fR.
.Sp
In non-blocking mode (blocking disabled) the \fBlogin()\fR method will most likely immediately return with a false, but defined, value of 0. You will then need to call the \fBlogin_poll()\fR method at regular intervals until it returns a true (1) value indicating that the login is complete.
If using the \fBlogin()\fR method in non-blocking mode, the following examples illustrate how this works:
.RS 4
.IP "\(bu" 4
If you do not care to retrieve the login sequence output:
.Sp
.Vb 2
\&        $ok = $obj\->login(Username => "admin", Password => "pwd", Blocking => 0);
\&        until ($ok) { # This loop will be executed while $ok = 0
\&                
\&                <do other stuff here..>
\&        
\&                $ok = $obj\->login_poll;
\&        }
.Ve
.IP "\(bu" 4
If you want to retrieve the login output sequence along the way (even in case of error/timeout):
.Sp
.Vb 3
\&        ($ok, $output) = $obj\->login(Username => "admin", Password => "pwd", Blocking => 0, Errmode => \*(Aqreturn\*(Aq);
\&        die $obj\->errmsg unless defined $ok;    # Login failed
\&        until ($ok) {
\&                
\&                <do other stuff here..>
\&        
\&                ($ok, $partialOutput) = $obj\->login_poll;
\&                die $obj\->errmsg unless defined $ok;    # Login failed or timeout
\&                $output .= $partialOutput;
\&        }
\&        print "Complete login sequence output:\en", $output;
.Ve
.IP "\(bu" 4
If you only want to retrieve the full login sequence output at the end:
.Sp
.Vb 2
\&        $ok = $obj\->login(Username => "admin", Password => "pwd", Blocking => 0);
\&        until ($ok) {
\&                
\&                <do other stuff here..>
\&        
\&                $ok = $obj\->login_poll;
\&        }
\&        print "Complete login sequence output:\en", ($obj\->login_poll)[1];
.Ve
.RE
.RS 4
.RE
.IP "\fB\fBcmd()\fB & \fBcmd_poll()\fB\fR \- Sends a \s-1CLI\s0 command to host and returns output data" 4
.IX Item "cmd() & cmd_poll() - Sends a CLI command to host and returns output data"
Backward compatible syntax:
.Sp
.Vb 1
\&  $output || $outputRef = $obj\->cmd($cliCommand);
\&
\&  $output || $outputRef = $obj\->cmd(
\&        [Command                => $cliCommand,]
\&        [Prompt                 => $prompt,]
\&        [Blocking               => $flag,]
\&        [Timeout                => $secs,]
\&        [Return_reference       => $flag,]
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
New syntax (for non-blocking use):
.Sp
.Vb 8
\&  $ok = $obj\->cmd(
\&        Poll_syntax             => 1,
\&        [Command                => $cliCommand,]
\&        [Prompt                 => $prompt,]
\&        [Blocking               => $flag,]
\&        [Timeout                => $secs,]
\&        [Errmode                => $errmode,]
\&  );
\&
\&  ($ok, $output || $outputRef) = $obj\->cmd($cliCommand);
\&
\&  ($ok, $output || $outputRef) = $obj\->cmd(
\&        [Poll_syntax            => 1,]
\&        [Command                => $cliCommand,]
\&        [Prompt                 => $prompt,]
\&        [Blocking               => $flag,]
\&        [Timeout                => $secs,]
\&        [Return_reference       => $flag,]
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
Polling method (only applicable in non-blocking mode):
.Sp
.Vb 1
\&  $ok = $obj\->cmd_poll();
\&
\&  ($ok, $output || $outputRef) = $obj\->cmd_poll();
.Ve
.Sp
This method sends a \s-1CLI\s0 command to the host and returns once a new \s-1CLI\s0 prompt is received from the host. The output record separator \- which is usually a newline \*(L"\en\*(R"; see \fBoutput_record_separator()\fR \- is automatically appended to the command string. If no command string is provided then this method will simply send the output record separator and expect a new prompt back.
Before sending the command to the host, any pending input data from host is read and flushed.
The \s-1CLI\s0 prompt expected by the \fBcmd()\fR method is either the prompt defined for the object \- see \fBprompt()\fR \- or the override defined using the optional \*(L"prompt\*(R" argument.
For backwards compatibility, in scalar context the output data from the command is returned.
The new syntax, in scalar context returns the poll status, while in list context, both the poll status together with the output data are returned. Note that to disambiguate the new scalar context syntax the 'poll_syntax' argument needs to be set (while this is not strictly necessary in list context).
In non-blocking mode, the poll status will most likely immediately return with a false, but defined, value of 0. You will then need to call the \fBcmd_poll()\fR method at regular intervals until it returns a true (1) value indicating that the command has completed.
.Sp
The output data returned is either a hard reference to the output or the output itself, depending on the setting of return_reference; see \fBreturn_reference()\fR.
The echoed command is automatically stripped from the output as well as the terminating \s-1CLI\s0 prompt (the last prompt received from the host device can be obtained with the \fBlast_prompt()\fR method).
This means that when sending a command which generates no output, either a null string or a reference pointing to a null string will be returned.
On I/O failure to the host device, the error mode action is performed. See \fBerrmode()\fR.
If output is no longer received from the host and no valid \s-1CLI\s0 prompt has been seen, the method will timeout \- see \fBtimeout()\fR \- and will then perform the error mode action.
The \fBcmd()\fR method is equivalent to the following combined methods:
.Sp
.Vb 3
\&        $obj\->read(Blocking => 0);
\&        $obj\->print($cliCommand);
\&        $output = $obj\->waitfor($obj\->prompt);
.Ve
.Sp
In non-blocking mode (blocking disabled) the \fBcmd()\fR method will most likely immediately return with a false, but defined, value of 0. You will then need to call the \fBcmd_poll()\fR method at regular intervals until it returns a true (1) value indicating that the command is complete. The following example illustrates:
.RS 4
.IP "\(bu" 4
If you do not care to retrieve any output from the command:
.Sp
.Vb 2
\&        $ok = $obj\->cmd(Poll_syntax => 1, Command => "set command", Blocking => 0);
\&        until ($ok) { # This loop will be executed while $ok = 0
\&                
\&                <do other stuff here..>
\&        
\&                $ok = $obj\->cmd_poll;
\&        }
.Ve
.IP "\(bu" 4
If you want to retrieve the command output sequence along the way:
.Sp
.Vb 3
\&        ($ok, $output) = $obj\->cmd(Command => "show command", Blocking => 0, Errmode => \*(Aqreturn\*(Aq);
\&        die $obj\->errmsg unless defined $ok;    # Sending command failed
\&        until ($ok) {
\&                
\&                <do other stuff here..>
\&        
\&                ($ok, $partialOutput) = $obj\->cmd_poll;
\&                die $obj\->errmsg unless defined $ok;    # Timeout
\&                $output .= $partialOutput;
\&        }
\&        print "Complete command output:\en", $output;
.Ve
.Sp
Note that \f(CW$partialOutput\fR returned will always terminate at output line boundaries (i.e. you can be sure that the last line is complete and not a fragment waiting for more output from device) so the output can be safely parsed for any seeked informaton.
.IP "\(bu" 4
If you only want to retrieve the command output at the end:
.Sp
.Vb 2
\&        $ok = $obj\->cmd(Poll_syntax => 1, Command => "show command", Blocking => 0);
\&        until ($ok) {
\&                
\&                <do other stuff here..>
\&        
\&                $ok = $obj\->cmd_poll;
\&        }
\&        print "Complete command output:\en", ($obj\->cmd_poll)[1];
.Ve
.RE
.RS 4
.RE
.IP "\fB\fBchange_baudrate()\fB & \fBchange_baudrate_poll()\fB\fR \- Change baud rate or other serial port parameter on current serial connection" 4
.IX Item "change_baudrate() & change_baudrate_poll() - Change baud rate or other serial port parameter on current serial connection"
.Vb 1
\&  $ok = $obj\->change_baudrate($baudRate);
\&
\&  $ok = $obj\->change_baudrate(
\&        [BaudRate               => $baudRate,]
\&        [ForceBaud              => $flag,]
\&        [Parity                 => $parity,]
\&        [DataBits               => $dataBits,]
\&        [StopBits               => $stopBits,]
\&        [Handshake              => $handshake,]
\&        [Blocking               => $flag,]
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
Polling method (only applicable in non-blocking mode):
.Sp
.Vb 1
\&  $ok = $obj\->change_baudrate_poll();
.Ve
.Sp
This method is only applicable to an already established Serial port connection and will return an error if the connection type is Telnet or \s-1SSH\s0 or if the object type is for Serial but no connection is yet established.
The serial connection is restarted with the new baudrate (in the background, the serial connection is actually disconnected and then re-connected) without losing the current \s-1CLI\s0 session. This method will introduce a 100 millisec delay between tearing down and re-establishing the serial port connection, hence it is polling enabled should it be used in non-blocking mode. As well as (or instead of) the baudrate, any of Parity, Databits, Stopbits or Handshake can also be changed for the active connection at the same time.
If there is a problem restarting the serial port connection with the new settings then the error mode action is performed \- see \fBerrmode()\fR.
If the baudrate (or other parameter) was successfully changed a true (1) value is returned.
Note that you have to change the baudrate on the far end device before calling this method to change the connection's baudrate. Follows an example:
.Sp
.Vb 10
\&        use Control::CLI;
\&        # Create the object instance for Serial port
\&        $cli = new Control::CLI(\*(AqCOM1\*(Aq);
\&        # Connect to host at default baudrate
\&        $cli\->connect( BaudRate => 9600 );
\&        # Send some character sequence to wake up the other end, e.g. a carriage return
\&        $cli\->print;
\&        # Perform login (or just lock onto 1st prompt)
\&        $cli\->login( Username => $username, Password => $password );
\&        # Set the new baudrate on the far end device
\&        # NOTE use print as you won\*(Aqt be able to read the prompt at the new baudrate right now
\&        $cli\->print("term speed 38400");
\&        # Now change baudrate for the connection
\&        $cli\->change_baudrate(38400);
\&        # Send a carriage return and expect to get a new prompt back
\&        $cli\->cmd; #If no prompt is seen at the new baudrate, we will timeout here
\&        # Send a command and read the resulting output
\&        $outref = $cli\->cmd("command which generates lots of output...");
\&        print $$outerf;
\&        # Restore baudrate before disconnecting
\&        $cli\->print("term speed 9600");
\&        # Safe to wait a little, to give time to host to process command before disconnecting
\&        sleep 1;
\&
\&        $cli\->disconnect;
.Ve
.IP "\fB\fBinput_log()\fB\fR \- log all input sent to host" 4
.IX Item "input_log() - log all input sent to host"
.Vb 1
\&  $fh = $obj\->input_log;
\&
\&  $fh = $obj\->input_log($fh);
\&
\&  $fh = $obj\->input_log($filename);
.Ve
.Sp
This method starts or stops logging of all input received from host (e.g. via any of \fBread()\fR, \fBreadwait()\fR, \fBwaitfor()\fR, \fBcmd()\fR, \fBlogin()\fR methods).
This is useful when debugging. Because most command interpreters echo back commands received, it's likely all output sent to the host will also appear in the input log. See also \fBoutput_log()\fR.
If no argument is given, the log filehandle is returned. An empty string indicates logging is off. If an open filehandle is given, it is used for logging and returned. Otherwise, the argument is assumed to be the name of a file, the file is opened for logging and a filehandle to it is returned. If the file can't be opened for writing, the error mode action is performed.
To stop logging, use an empty string as the argument.
.IP "\fB\fBoutput_log()\fB\fR \- log all output received from host" 4
.IX Item "output_log() - log all output received from host"
.Vb 1
\&  $fh = $obj\->output_log;
\&
\&  $fh = $obj\->output_log($fh);
\&
\&  $fh = $obj\->output_log($filename);
.Ve
.Sp
This method starts or stops logging of output sent to host (e.g. via any of \fBput()\fR, \fBprint()\fR, \fBprintlist()\fR, \fBcmd()\fR, \fBlogin()\fR methods).
This is useful when debugging.
If no argument is given, the log filehandle is returned. An empty string indicates logging is off. If an open filehandle is given, it is used for logging and returned. Otherwise, the argument is assumed to be the name of a file, the file is opened for logging and a filehandle to it is returned. If the file can't be opened for writing, the error mode action is performed.
To stop logging, use an empty string as the argument.
.IP "\fB\fBdump_log()\fB\fR \- log hex and ascii for both input and output stream" 4
.IX Item "dump_log() - log hex and ascii for both input and output stream"
.Vb 1
\&  $fh = $obj\->dump_log;
\&
\&  $fh = $obj\->dump_log($fh);
\&
\&  $fh = $obj\->dump_log($filename);
.Ve
.Sp
This method starts or stops logging of both input and output. The information is displayed both as a hex dump as well as in printable ascii. This is useful when debugging.
If no argument is given, the log filehandle is returned. An empty string indicates logging is off. If an open filehandle is given, it is used for logging and returned. Otherwise, the argument is assumed to be the name of a file, the file is opened for logging and a filehandle to it is returned. If the file can't be opened for writing, the error mode action is performed.
To stop logging, use an empty string as the argument.
.IP "\fBeof\fR \- end-of-file indicator" 4
.IX Item "eof - end-of-file indicator"
.Vb 1
\&  $eof = $obj\->eof;
.Ve
.Sp
This method returns a true (1) value if the end of file has been read. When this is true, the general idea is that you can still read but you won't be able to write.
This method simply exposes the method by the same name provided by Net::Telnet.
Net::SSH2::Channel also has an eof method but this was not working properly (always returns 0) at the time of implementing the Control::CLI::eof method; so this method adds some logic to eof for \s-1SSH\s0 connections: if the \s-1SSH\s0 eof method returns 1, then that value is returned, otherwise a check is performed on Net::SSH::error and if this returns either \s-1LIBSSH2_ERROR_SOCKET_NONE\s0 or \s-1LIBSSH2_ERROR_SOCKET_RECV\s0 then we return an eof of 1; otherwise we return an eof of 0.
In the case of a serial connection this module simply returns eof true before a connection is established and after the connection is closed or breaks.
.IP "\fB\fBbreak()\fB\fR \- send the break signal" 4
.IX Item "break() - send the break signal"
.Vb 1
\&  $ok = $obj\->break([$millisecs]);
.Ve
.Sp
This method generates the break signal on the underlying connection. The break signal is outside the \s-1ASCII\s0 character set but has local meaning on some end systems.
The \f(CW$millisecs\fR argument, if provided, is only used over Serial connections and is ignored for Telnet and \s-1SSH.\s0
Over a Serial connection this method calls the underlying pulse_break_on($millisecs) method and if \f(CW$millisecs\fR argument is not specified the duration timer is set to 300ms which is the most commonly used duration for signalling a break signal. Over a Telnet connection this method simply uses the method by the same name provided by Net::Telnet. Over an \s-1SSH\s0 connection this method sends '~B' over the open channel though it is not clear whether Net::SSH2 or the libssh2 libraries actually support this; it is hoped that the receiving end accepts this as a break signal.
.IP "\fBdisconnect\fR \- disconnect from host" 4
.IX Item "disconnect - disconnect from host"
.Vb 1
\&  $ok = $obj\->disconnect;
\&
\&  $ok = $obj\->disconnect($close_logs_flag);
\&
\&  $ok = $obj\->disconnect(
\&        [Close_logs             => $flag,]
\&  );
.Ve
.Sp
This method closes the connection. Always returns true.
If the close_logs flag is set and any of the logging methods \fBinput_log()\fR or \fBoutput_log()\fR or \fBdump_log()\fR or even Net::Telnet's \fBoption_log()\fR are active then their respective filehandle is closed and the logging is disabled.
.IP "\fBclose\fR \- disconnect from host" 4
.IX Item "close - disconnect from host"
.Vb 1
\&  $ok = $obj\->close;
.Ve
.Sp
This method closes the connection. It is an alias to \fBdisconnect()\fR method. Always returns true.
.IP "\fBpoll\fR \- poll object(s) for completion" 4
.IX Item "poll - poll object(s) for completion"
.Vb 5
\&  $ok = $obj\->poll(
\&        [Poll_code              => \e&codeRef,]
\&        [Poll_timer             => $millisecs,]
\&        [Errmode                => $errmode,]
\&  );
\&
\&  $running = Control::CLI::poll(\e%hash_of_objects | \e%array_of_objects);
\&
\&  ($running, $completed, $failed, \e@lastCompleted, \e@lastFailed) = Control::CLI::poll(\e%hash_of_objects | \e%array_of_objects);
\&
\&  $running = Control::CLI::poll(
\&        Object_list             => \e%hash_of_objects | \e%array_of_objects,
\&        [Poll_code              => \e&codeRef,]
\&        [Object_complete        => \*(Aqall\*(Aq | \*(Aqnext\*(Aq,]
\&        [Object_error           => \*(Aqreturn\*(Aq | \*(Aqignore\*(Aq,]
\&        [Poll_timer             => $millisecs,]
\&        [Errmode                => $errmode,]
\&        [Errmsg_format          => $msgFormat,]
\&  );
\&
\&  ($running, $completed, $failed, \e@lastCompleted, \e@lastFailed) = Control::CLI::poll(
\&        Object_list             => \e%hash_of_objects | \e%array_of_objects,
\&        [Poll_code              => \e&codeRef,]
\&        [Object_complete        => \*(Aqall\*(Aq | \*(Aqnext\*(Aq,]
\&        [Object_error           => \*(Aqreturn\*(Aq | \*(Aqignore\*(Aq,]
\&        [Poll_timer             => $millisecs,]
\&        [Errmode                => $errmode,]
\&        [Errmsg_format          => $msgFormat,]
\&  );
.Ve
.Sp
This is a convenience method to help polling one or more Control::CLI (or inherited) objects for completion.
In the first form this method can be called as an object method, alas it will report back the poll status of that single object. The \f(CW$ok\fR status reported will be either true (1) if the current polled method for the object has comleted, or undef if it failed with an error (and the errmode was set to 'return'). The advantage of this form is that the same \fBpoll()\fR method can be used instead of the corresponding <methodName>\fB_poll()\fR method for which you would have to build your own polling loop.
.Sp
In the second form, this method is called as a class method (not an object method) and the 1st argument is either a hash or an array structure holding multiple Control::CLI (or inherited) objects. Now the \fBpoll()\fR method will cycle through all the objects and verify their corresponding status. There are multiple ways in which this method can be configured to return:
.RS 4
.IP "\(bu" 4
object_complete = 'all' \s-1AND\s0 object_error = 'ignore' : Method will only return once all objects have completed whether they completed successfully or failed with an error (and the errmode was set to 'return'); this is the default mode if arguments 'object_complete' and 'object_error' are not specified
.IP "\(bu" 4
object_complete = 'all' \s-1AND\s0 object_error = 'return' : Method will only return once all objects have completed successfully or as soon as one of the objects fails with an error (and the errmode was set to 'return')
.IP "\(bu" 4
object_complete = 'next' \s-1AND\s0 object_error = 'ignore' : Method will return as soon as one (or some) of the objects has/have completed successfully; the method will not return if an object fails with an error (and the errmode was set to 'return')
.IP "\(bu" 4
object_complete = 'next' \s-1AND\s0 object_error = 'return' : Method will return as soon as one (or some) of the objects has/have completed successfully or failed with an error (and the errmode was set to 'return')
.RE
.RS 4
.Sp
Since the \s-1SSH\s0 \fBconnect()\fR method is not truly non-blocking (during the authentication phase) and in order to avoid this class from timing out all objects when polling many, the poll method keeps track of cycle durations (for each object, time taken to poll other objects) and at every cycle re-credits the amount on each object timeout. Still, \s-1SSH\s0 connections polled in this way are still likely to fail beyond 10 objects due to the far end host timing out the incomming \s-1SSH\s0 connection; in which case you will need to stagger the jobs or make use of the \fBconnect()\fR \*(L"atomic_connect\*(R" flag.
.Sp
When the method returns it will provide the number of objects still running ($running), those that have completed successfully ($completed) and those that have failed with an error ($failed) as well as an array reference of last objects that completed (\e@lastCompleted) and one of last objects that failed (\e@lastFailed). If the poll method was called with a hash structure, these arrays will hold the keys which completed/failed; if instead a list of objects was supplied then these arrays will hold the indexes which completed/failed.
.Sp
By default the polling is done every 100 millisecs against all objects. A different timer can be used by specifying the poll_timer argument.
If a code reference is provided via the 'poll_code' argument, that code will be called at every polling cycle with arguments ($running, \f(CW$completed\fR, \f(CW$failed\fR, \e@lastCompleted, \e@lastFailed); you may use this to print out some form of activity indication (e.g. print dots). Examples on how to use this method can be found in the examples directory. Instead of a code reference, an array reference can be used provided that the first element in the array is a code reference; in this case the remainder of the array elements will be inserted as arguments to the code being called to which arguments ($running, \f(CW$completed\fR, \f(CW$failed\fR, \e@lastCompleted, \e@lastFailed) will be appended.
.Sp
If an error mode is set using the 'errmode' argument, this will be used for errors in the class method (which is not tied to a specific object) but will also be used to override whatever the relevant object error method was, for the duration of the \fBpoll()\fR method. If instead no error mode argument is specified then the object(s) will use whatever error mode was set for them (or set when the initial poll capable method was called) while errors in the class method (which is not tied to a specific object) will use the class default error mode of 'croak'.
.Sp
Note that to call poll, as a class method, without specifying the fully qualified package name, it will need to be expressly imported when loading this module:
.Sp
.Vb 1
\&        use Control::CLI qw(poll);
.Ve
.RE
.SS "Error Handling Methods"
.IX Subsection "Error Handling Methods"
.IP "\fB\fBerrmode()\fB\fR \- define action to be performed on error/timeout" 4
.IX Item "errmode() - define action to be performed on error/timeout"
.Vb 1
\&  $mode = $obj\->errmode;
\&
\&  $prev = $obj\->errmode($mode);
.Ve
.Sp
This method gets or sets the action used when errors are encountered using the object. The first calling sequence returns the current error mode. The second calling sequence sets it to \f(CW$mode\fR and returns the previous mode. Valid values for \f(CW$mode\fR are 'die', 'croak' (the default), 'return', a \f(CW$coderef\fR, or an \f(CW$arrayref\fR.
When mode is 'die' or 'croak' and an error is encountered using the object, then an error message is printed to standard error and the program dies. The difference between 'die' and 'croak' is that 'die' will report the line number in this class while 'croak' will report the line in the calling program using this class.
When mode is 'return' the method in this class generating the error places an error message in the object and returns an undefined value in a scalar context and an empty list in list context. The error message may be obtained using \fBerrmsg()\fR. 
When mode is a \f(CW$coderef\fR, then when an error is encountered &$coderef is called with the error message as its first argument. Using this mode you may have your own subroutine handle errors. If &$coderef itself returns then the method generating the error returns undefined or an empty list depending on context.
When mode is an \f(CW$arrayref\fR, the first element of the array must be a &$coderef. Any elements that follow are the arguments to &$coderef. When an error is encountered, the &$coderef is called with its arguments and the error message appended as the last argument. Using this mode you may have your own subroutine handle errors. If the &$coderef itself returns then the method generating the error returns undefined or an empty list depending on context.
A warning is printed to \s-1STDERR\s0 when attempting to set this attribute to something that's not 'die', 'croak', 'return', a \f(CW$coderef\fR, or an \f(CW$arrayref\fR whose first element isn't a \f(CW$coderef\fR.
.IP "\fB\fBerrmsg()\fB\fR \- last generated error message for the object" 4
.IX Item "errmsg() - last generated error message for the object"
.Vb 1
\&  $msg = $obj\->errmsg();
\&
\&  $msg = $obj\->errmsg(
\&        [Errmsg_format           => $msgFormat,]
\&  );
\&
\&  $prev = $obj\->errmsg($msg);
\&
\&  $prev = $obj\->errmsg(
\&        [Set_message             => $msg,]
\&        [Errmsg_format           => $msgFormat,]
\&  );
.Ve
.Sp
The first calling sequences return the error message associated with the object. If no error has been encountered yet an undefined value is returned. The last two calling sequences set the error message for the object.
Normally, error messages are set internally by a method when an error is encountered.
The 'errmsg_format' argument can be used as an override of the object's same setting; see \fBerrmsg_format()\fR.
.IP "\fB\fBerrmsg_format()\fB\fR \- set the format to be used for object error messages" 4
.IX Item "errmsg_format() - set the format to be used for object error messages"
.Vb 1
\&  $format = $obj\->errmsg_format;
\&
\&  $prev = $obj\->errmsg_format($format);
.Ve
.Sp
This class supports three different error message formats which can be set via this method.
The first calling sequence returns the current format in use. The second calling sequence sets it to \f(CW$format\fR and returns the previous format.
Valid values for \f(CW$format\fR are (non-case sensitive):
.RS 4
.IP "\(bu" 4
\&'verbose': The error message is returned with the Control::CLI method name pre-pended to it, and in some cases it is appened with an upstream error message. For example:
.Sp
.Vb 1
\&  "Control::CLI::login: Failed reading login prompt // Control::CLI::read: Received eof from connection"
.Ve
.IP "\(bu" 4
\&'default': The error message is returned with the Control::CLI method name pre-pended to it. For example:
.Sp
.Vb 1
\&  "Control::CLI::login: Failed reading login prompt"
.Ve
.IP "\(bu" 4
\&'terse': Just the error message is returned, without any Control::CLI method name pre-pended. For example:
.Sp
.Vb 1
\&  "Failed reading login prompt"
.Ve
.RE
.RS 4
.Sp
In all cases above, an error message is always a single line of text.
.RE
.IP "\fB\fBerror()\fB\fR \- perform the error mode action" 4
.IX Item "error() - perform the error mode action"
.Vb 1
\&  $obj\->error($msg);
.Ve
.Sp
This method sets the error message via \fBerrmsg()\fR.
It then performs the error mode action.  See \fBerrmode()\fR.
If the error mode doesn't cause the program to die/croak, then an undefined value or an empty list is returned depending on the context.
.Sp
This method is primarily used by this class or a sub-class to perform the user requested action when an error is encountered.
.SS "Methods to set/read Object variables"
.IX Subsection "Methods to set/read Object variables"
.IP "\fB\fBtimeout()\fB\fR \- set I/O time-out interval" 4
.IX Item "timeout() - set I/O time-out interval"
.Vb 1
\&  $secs = $obj\->timeout;
\&
\&  $prev = $obj\->timeout($secs);
.Ve
.Sp
This method gets or sets the timeout value that's used when reading input from the connected host. This applies to the \fBread()\fR method in blocking mode as well as the \fBreadwait()\fR, \fBwaitfor()\fR, \fBlogin()\fR and \fBcmd()\fR methods. When a method doesn't complete within the timeout interval then the error mode action is performed. See \fBerrmode()\fR.
The default timeout value is 10 secs.
.IP "\fB\fBconnection_timeout()\fB\fR \- set Telnet and \s-1SSH\s0 connection time-out interval" 4
.IX Item "connection_timeout() - set Telnet and SSH connection time-out interval"
.Vb 1
\&  $secs = $obj\->connection_timeout;
\&
\&  $prev = $obj\->connection_timeout($secs);
.Ve
.Sp
This method gets or sets the Telnet and \s-1SSH TCP\s0 connection timeout value used when the connection is made in \fBconnect()\fR.
For backwards compatibility with earlier versions of this module, by default no connection timeout is set which results in the following behaviour:
.RS 4
.IP "\(bu" 4
In blocking mode, the underlying \s-1OS\s0's \s-1TCP\s0 connection timeout is used, and this can vary.
.IP "\(bu" 4
In non-blocking mode, this module enforces the timeout and if no connection-timeout has been defined then a hard coded value of 20 seconds will be used.
.RE
.RS 4
.Sp
To have a consistent behaviour in blocking and non-blocking modes as well as across different underlying OSes, simply set your own connection timeout value, either via this method or from the object constructor.
.RE
.IP "\fB\fBread_block_size()\fB\fR \- set read_block_size for either \s-1SSH\s0 or Serial port" 4
.IX Item "read_block_size() - set read_block_size for either SSH or Serial port"
.Vb 1
\&  $bytes = $obj\->read_block_size;
\&
\&  $prev = $obj\->read_block_size($bytes);
.Ve
.Sp
This method gets or sets the read_block_size for either \s-1SSH\s0 or Serial port access (not applicable to Telnet).
This is the read buffer size used on the underlying Net::SSH2 and Win32::SerialPort / Device::SerialPort \fBread()\fR methods.
The default read_block_size is 4096 for \s-1SSH, 1024\s0 for Win32::SerialPort and 255 for Device::SerialPort.
.IP "\fB\fBblocking()\fB\fR \- set blocking mode for read methods and polling capable methods" 4
.IX Item "blocking() - set blocking mode for read methods and polling capable methods"
.Vb 1
\&  $flag = $obj\->blocking;
\&
\&  $prev = $obj\->blocking($flag);
.Ve
.Sp
On the one hand, determines whether the \fBread()\fR, \fBreadwait()\fR or \fBwaitfor()\fR methods will wait for data to be received (until expiry of timeout) or return immediately if no data is available.
On the other hand determines whether polling capable methods \fBconnect()\fR, \fBwaitfor()\fR, \fBlogin()\fR and \fBcmd()\fR operate in non-blocking polling mode or not.
By default blocking is enabled (1). This method also returns the current or previous setting of the blocking mode.
Note that to enable non-blocking mode this method needs to be called with a defined false value (i.e. 0); if called with an undefined value this method will only return the current blocking mode which is by default enabled.
.IP "\fB\fBread_attempts()\fB\fR \- set number of read attempts used in \fBreadwait()\fR method" 4
.IX Item "read_attempts() - set number of read attempts used in readwait() method"
.Vb 1
\&  $numberOfReadAttemps = $obj\->read_attempts;
\&
\&  $prev = $obj\->read_attempts($numberOfReadAttemps);
.Ve
.Sp
In the \fBreadwait()\fR method, determines how many non-blocking read attempts are made to see if there is any further input data coming in after the initial blocking read. By default 5 read attempts are performed, each at \fBreadwait_timer()\fR seconds apart.
This method also returns the current or previous value of the setting.
.IP "\fB\fBreadwait_timer()\fB\fR \- set the polling timer used in \fBreadwait()\fR method" 4
.IX Item "readwait_timer() - set the polling timer used in readwait() method"
.Vb 1
\&  $millisecs = $obj\->readwait_timer;
\&
\&  $prev = $obj\->readwait_timer($millisecs);
.Ve
.Sp
In the \fBreadwait()\fR method, determines how long to wait between consecutive reads for more data. By default this is set to 100 milliseconds.
This method also returns the current or previous value of the setting.
.IP "\fB\fBdata_with_error()\fB\fR \- set the \fBreadwait()\fR method behaviour in case a read error occurs after some data was read" 4
.IX Item "data_with_error() - set the readwait() method behaviour in case a read error occurs after some data was read"
.Vb 1
\&  $flag = $obj\->data_with_error;
\&
\&  $prev = $obj\->data_with_error($flag);
.Ve
.Sp
In the \fBreadwait()\fR method, if some data was initially read but an error occurs while trying to read in subsequent data this flag determines the behaviour for the method.
By default data_with_error is not set, and this will result in \fBreadwait()\fR performing the error mode action regardless of whether some data was already read in or not.
If however data_with_error is set, then the \fBreadwait()\fR method will hold off from performing the error mode action (only if some data was already read) and will instead return that data without completing any further read_attempts.
This method also returns the current or previous value of the setting.
.IP "\fB\fBreturn_reference()\fB\fR \- set whether read methods should return a hard reference or not" 4
.IX Item "return_reference() - set whether read methods should return a hard reference or not"
.Vb 1
\&  $flag = $obj\->return_reference;
\&
\&  $prev = $obj\->return_reference($flag);
.Ve
.Sp
This method gets or sets the setting for return_reference for the object.
This applies to the \fBread()\fR, \fBreadwait()\fR, \fBwaitfor()\fR, \fBcmd()\fR and \fBlogin()\fR methods and determines whether these methods should return a hard reference to any output data or the data itself. By default return_reference is false (0) and the data itself is returned by the read methods, which is a more intuitive behaviour.
However, if reading large amounts of data via the above mentioned read methods, using references will result in faster and more efficient code.
.IP "\fB\fBoutput_record_separator()\fB\fR \- set the Output Record Separator automatically appended by print & cmd methods" 4
.IX Item "output_record_separator() - set the Output Record Separator automatically appended by print & cmd methods"
.Vb 1
\&  $ors = $obj\->output_record_separator;
\&
\&  $prev = $obj\->output_record_separator($ors);
.Ve
.Sp
This method gets or sets the Output Record Separator character (or string) automatically appended by \fBprint()\fR, \fBprintlist()\fR and \fBcmd()\fR methods when sending a command string to the host.
By default the Output Record Separator is a new line character \*(L"\en\*(R".
If you do not want a new line character automatically appended consider using \fBput()\fR instead of \fBprint()\fR.
Alternatively (or if a different character than newline is required) modify the Output Record Separator for the object via this method.
.IP "\fB\fBprompt_credentials()\fB\fR \- set whether \fBconnect()\fR and \fBlogin()\fR methods should be able to prompt for credentials" 4
.IX Item "prompt_credentials() - set whether connect() and login() methods should be able to prompt for credentials"
.Vb 1
\&  $flag = $obj\->prompt_credentials;
\&
\&  $prev = $obj\->prompt_credentials($flag | \e&codeRef | \e@arrayRef);
.Ve
.Sp
This method gets or sets the setting for prompt_credentials for the object.
This applies to the \fBconnect()\fR and \fBlogin()\fR methods and determines whether these methods can interactively prompt for username/password/passphrase information if these are required but not already provided. Note that enabling prompt_credentials is incompatible with using the object in non-blocking mode.
.Sp
Prompt_credentials may be set to a code reference or an array reference (provided that the first element of the array is a code reference); in this case if the user needs to be prompted for a credential, the code reference provided will be called, followed by any arguments in the array (if prompt_credentials was set to an array reference) to which these arguments will be appended:
.RS 4
.IP "\(bu" 4
\&\f(CW$privacy\fR : Will be set to either 'Clear' or 'Hide', depending on whether a username or password/passphrase is requested
.IP "\(bu" 4
\&\f(CW$credential\fR : This will contain the text of what information is seeked from user; e.g. \*(L"Username\*(R", \*(L"Password\*(R", \*(L"Passphrase\*(R", etc.
.RE
.RS 4
.Sp
The ability to use a code reference is also true on the prompt_credentials argument override that \fBconnect()\fR and \fBlogin()\fR offer.
.Sp
If prompt_credentials is set to a true value (which is not a reference) then the object will make use of class methods \fBpromptClear()\fR and \fBpromptHide()\fR which both make use of Term::ReadKey. By default prompt_credentials is false (0).
.RE
.IP "\fBflush_credentials\fR \- flush the stored username, password and passphrase credentials" 4
.IX Item "flush_credentials - flush the stored username, password and passphrase credentials"
.Vb 1
\&  $obj\->flush_credentials;
.Ve
.Sp
The \fBconnect()\fR and \fBlogin()\fR methods, if successful in authenticating, will automatically store the username/password or \s-1SSH\s0 passphrase supplied to them.
These can be retrieved via the username, password and passphrase methods. If you do not want these to persist in memory once the authentication has completed, use this method to flush them. This method always returns 1.
.IP "\fB\fBprompt()\fB\fR \- set the \s-1CLI\s0 prompt match pattern for this object" 4
.IX Item "prompt() - set the CLI prompt match pattern for this object"
.Vb 1
\&  $string = $obj\->prompt;
\&
\&  $prev = $obj\->prompt($string);
.Ve
.Sp
This method sets the \s-1CLI\s0 prompt match pattern for this object. In the first form the current pattern match string is returned. In the second form a new pattern match string is set and the previous setting returned.
The default prompt match pattern used is:
.Sp
.Vb 1
\&        \*(Aq.*[\e?\e$%#>]\es?$\*(Aq
.Ve
.Sp
The object \s-1CLI\s0 prompt match pattern is only used by the \fBlogin()\fR and \fBcmd()\fR methods.
.IP "\fB\fBusername_prompt()\fB\fR \- set the \fBlogin()\fR username prompt match pattern for this object" 4
.IX Item "username_prompt() - set the login() username prompt match pattern for this object"
.Vb 1
\&  $string = $obj\->username_prompt;
\&
\&  $prev = $obj\->username_prompt($string);
.Ve
.Sp
This method sets the \fBlogin()\fR username prompt match pattern for this object. In the first form the current pattern match string is returned. In the second form a new pattern match string is set and the previous setting returned.
The default prompt match pattern used is:
.Sp
.Vb 1
\&        \*(Aq(?i:user(?: ?name)?|login)[: ]+$\*(Aq
.Ve
.IP "\fB\fBpassword_prompt()\fB\fR \- set the \fBlogin()\fR password prompt match pattern for this object" 4
.IX Item "password_prompt() - set the login() password prompt match pattern for this object"
.Vb 1
\&  $string = $obj\->password_prompt;
\&
\&  $prev = $obj\->password_prompt($string);
.Ve
.Sp
This method sets the \fBlogin()\fR password prompt match pattern for this object. In the first form the current pattern match string is returned. In the second form a new pattern match string is set and the previous setting returned.
The default prompt match pattern used is:
.Sp
.Vb 1
\&        \*(Aq(?i)password[: ]*$\*(Aq
.Ve
.IP "\fB\fBterminal_type()\fB\fR \- set the terminal type for the connection" 4
.IX Item "terminal_type() - set the terminal type for the connection"
.Vb 1
\&  $string = $obj\->terminal_type;
\&
\&  $prev = $obj\->terminal_type($string);
.Ve
.Sp
This method sets the terminal type which will be setup/negotiated during connection. In the first form the current setting is returned.
Currently a terminal type is only negotiated with a \s-1SSH\s0 or \s-1TELNET\s0 connection, and only at connection time.
By default no terminal type is defined which results in \s-1TELNET\s0 simply not negotiating any terminal type while \s-1SSH\s0 will default to 'vt100'.
Once a terminal type is set via this method, both \s-1TELNET\s0 and \s-1SSH\s0 will negotiate that terminal type.
Use an empty string to undefine the terminal type.
.IP "\fB\fBwindow_size()\fB\fR \- set the terminal window size for the connection" 4
.IX Item "window_size() - set the terminal window size for the connection"
.Vb 1
\&  ($width, $height) = $obj\->window_size;
\&
\&  ($prevWidth, $prevHeight) = $obj\->window_size($width, $height);
.Ve
.Sp
This method sets the terminal window size which will be setup/negotiated during connection. In the first form the current window size is returned.
Currently a terminal window size is only negotiated with a \s-1SSH\s0 or \s-1TELNET\s0 connection, and only at connection time.
By default no terminal window size is set which results in \s-1TELNET\s0 simply not negotiating any window size while \s-1SSH\s0 will default to 80 x 24.
Once a terminal window size is set via this method, both \s-1TELNET\s0 and \s-1SSH\s0 will negotiate that window size during \fBconnect()\fR.
To undefine the window size call the method with either or both \f(CW$width\fR and \f(CW$height\fR set to 0 (or empty string).
.IP "\fB\fBreport_query_status()\fB\fR \- set if read methods should automatically respond to Query Device Status escape sequences" 4
.IX Item "report_query_status() - set if read methods should automatically respond to Query Device Status escape sequences"
.Vb 1
\&  $flag = $obj\->report_query_status;
\&
\&  $prev = $obj\->report_query_status($flag);
.Ve
.Sp
Some devices use the \s-1ANSI/VT100\s0 Query Device Status escape sequence \- <\s-1ESC\s0>[5n \- to check whether a terminal is still connected. A real \s-1VT100\s0 terminal will automatically respond to these with a Report Device \s-1OK\s0 escape sequence \- <\s-1ESC\s0>[0n \- otherwise the connection is reset. This is sometimes done on serial port connections to detect when the terminal is disconnected (serial cable removed) so as to reset the connection. The Query Device Status sequence can be sent as often as every second. While this is uncommon on Telnet and \s-1SSH\s0 connections, it can happen when \s-1SSH\s0 or Telnet accessing serial connections via some terminal server device. In order to successfully script such connections using this class it is necessary for the script to be able to generate the appropriate Report Device \s-1OK\s0 escape sequence in a timely manner.
This method activates the ability for the read methods of this class to (a) detect a Query Device Status escape sequence within the received data stream, (b) remove it from the data stream which they ultimately return and (c) automatically send a Report Device \s-1OK\s0 escape sequence back to the connected device. This functionality, by default disabled, is embedded within the read methods of this class and is active for all of the following methods in both blocking and non blocking modes: \fBread()\fR, \fBreadwait()\fR, \fBwaitfor()\fR, \fBlogin()\fR, \fBcmd()\fR. However the script will need to interact with the connection (using the above mentioned methods) on a regular basis otherwise the connection will get reset. If you don't need to read the connection for more than a couple of seconds or you are just doing \fBprint()\fR or \fBprintlist()\fR to the connection, you will have to ensure that some non-blocking reads are done at regular intervals, either via a thread or within your mainloop.
.IP "\fB\fBdebug()\fB\fR \- set debugging" 4
.IX Item "debug() - set debugging"
.Vb 1
\&  $debugLevel = $obj\->debug;
\&
\&  $prev = $obj\->debug($debugLevel);
.Ve
.Sp
Enables debugging for the object methods and on underlying modules.
In the first form the current debug level is returned; in the second form a debug level is configured and the previous setting returned.
By default debugging is disabled. To disable debugging set the debug level to 0.
The debug levels defined in this class are tied to bits 1 & 2 only. Higher bit orders are available for sub-classing modules.
The following debug levels are defined:
.RS 4
.IP "\(bu" 4
0 : No debugging
.IP "\(bu" 4
bit 1 : Debugging activated for for polling methods + \fBreadwait()\fR and enables carping on Win32/Device::SerialPort. This level also resets Win32/Device::SerialPort constructor \f(CW$quiet\fR flag only when supplied in \fBControl::CLI::new()\fR
.IP "\(bu" 4
bit 2 : Debugging is activated on underlying Net::SSH2 and Win32::SerialPort / Device::SerialPort; there is no actual debugging for Net::Telnet
.RE
.RS 4
.Sp
To enable both debug flags set a debug level of 3.
.RE
.SS "Methods to access Object read-only variables"
.IX Subsection "Methods to access Object read-only variables"
.IP "\fBparent\fR \- return parent object" 4
.IX Item "parent - return parent object"
.Vb 1
\&  $parent_obj = $obj\->parent;
.Ve
.Sp
Since there are discrepancies in the way that parent Net::Telnet, Net::SSH2 and Win32/Device::SerialPort bless their object in their respective constructors, the Control::CLI class blesses its own object. The actual parent object is thus stored internally in the Control::CLI class. Normally this should not be a problem since the Control::CLI class is supposed to provide a common layer regardless of whether the underlying class is either Net::Telnet, Net::SSH2 and Win32/Device::SerialPort and there should be no need to access any of the parent class methods directly.
However, exceptions exist. If there is a need to access a parent method directly then the parent object is required. This method returns the parent object.
So, for instance, if you wanted to change the Win32::SerialPort read_interval (by default set to 100 in Control::CLI) and which is not implemented in Device::SerialPort:
.Sp
.Vb 5
\&        use Control::CLI;
\&        # Create the object instance for Serial
\&        $cli = new Control::CLI(\*(AqCOM1\*(Aq);
\&        # Connect to host
\&        $cli\->connect( BaudRate => 9600 );
\&
\&        # Set Win32::SerialPort\*(Aqs own read_interval method
\&        $cli\->parent\->read_interval(300);
\&
\&        # Send a command and read the resulting output
\&        $outref = $cli\->cmd("command");
\&        print $$outerf;
\&
\&        [...]
\&
\&        $cli\->disconnect;
.Ve
.IP "\fBsocket\fR \- return socket object" 4
.IX Item "socket - return socket object"
.Vb 1
\&  $parent_obj = $obj\->socket;
.Ve
.Sp
Returns the socket object created either with IO::Socket::INET or IO::Socket::IP. Returns undef if the socket has not yet been setup or if the connection is over Serial port.
Use this to access any of the socket methods. For example to obtain the local \s-1IP\s0 address and peer host \s-1IP\s0 address (in case you provided a \s-1DNS\s0 hostname to the \fBconnect()\fR method) for the Telnet or \s-1SSH\s0 connection:
.Sp
.Vb 1
\&        $localIP = $cli\->socket\->sockhost;
\&
\&        $peerhostIP = $cli\->socket\->peerhost;
.Ve
.IP "\fBssh_channel\fR \- return ssh channel object" 4
.IX Item "ssh_channel - return ssh channel object"
.Vb 1
\&  $channel_obj = $obj\->ssh_channel;
.Ve
.Sp
When running an \s-1SSH\s0 connection a Net::SSH2 object is created as well as a channel object. Both are stored internally in the Control::CLI class. The \s-1SSH2\s0 object can be obtained using the above parent method. This method returns the \s-1SSH\s0 channel object.
An undefined value is returned if no \s-1SSH\s0 connection is established.
.IP "\fBssh_authentication\fR \- return ssh authentication type performed" 4
.IX Item "ssh_authentication - return ssh authentication type performed"
.Vb 1
\&  $auth_mode = $obj\->ssh_authentication;
.Ve
.Sp
If an \s-1SSH\s0 connection is established, returns the authentication mode which was used, which will take one of these values: 'publickey', 'password' or 'keyboard\-interactive'.
An undefined value is returned if no \s-1SSH\s0 connection is established.
.IP "\fBconnection_type\fR \- return connection type for object" 4
.IX Item "connection_type - return connection type for object"
.Vb 1
\&  $type = $obj\->connection_type;
.Ve
.Sp
Returns the connection type of the method: either '\s-1TELNET\s0', '\s-1SSH\s0' or '\s-1SERIAL\s0'
.IP "\fBhost\fR \- return the host for the connection" 4
.IX Item "host - return the host for the connection"
.Vb 1
\&  $host = $obj\->host;
.Ve
.Sp
Returns the hostname or \s-1IP\s0 supplied to \fBconnect()\fR for Telnet and \s-1SSH\s0 modes and undef if no connection exists or if in Serial port mode.
Note that the host returned might still be defined if the connection failed to establish.
To test that a connection is active, use the connected method instead.
.IP "\fBport\fR \- return the \s-1TCP\s0 port / \s-1COM\s0 port for the connection" 4
.IX Item "port - return the TCP port / COM port for the connection"
.Vb 1
\&  $port = $obj\->port;
.Ve
.Sp
Returns the \s-1TCP\s0 port in use for Telnet and \s-1SSH\s0 modes and undef if no connection exists.
Returns the \s-1COM\s0 port for Serial port mode.
Note that the port returned might still be defined if the connection failed to establish.
To test that a connection is active, use the connected method instead.
.IP "\fBconnected\fR \- returns status of connection" 4
.IX Item "connected - returns status of connection"
.Vb 1
\&  $port = $obj\->connected;
.Ve
.Sp
Returns a true (1) value if a connection is established and a false (0) value if not.
Note that this method is simply implemented by negating the status of eof method.
.IP "\fBlast_prompt\fR \- returns the last \s-1CLI\s0 prompt received from host" 4
.IX Item "last_prompt - returns the last CLI prompt received from host"
.Vb 1
\&  $string = $obj\->last_prompt;
.Ve
.Sp
This method returns the last \s-1CLI\s0 prompt received from the host device or an undefined value if no prompt has yet been seen. The last \s-1CLI\s0 prompt received is updated in both \fBlogin()\fR and \fBcmd()\fR methods.
.IP "\fBusername\fR \- read username provided" 4
.IX Item "username - read username provided"
.Vb 1
\&  $username = $obj\->username;
.Ve
.Sp
Returns the last username which was successfully used in either \fBconnect()\fR or \fBlogin()\fR, or undef otherwise.
.IP "\fBpassword\fR \- read password provided" 4
.IX Item "password - read password provided"
.Vb 1
\&  $password = $obj\->password;
.Ve
.Sp
Returns the last password which was successfully used in either \fBconnect()\fR or \fBlogin()\fR, or undef otherwise.
.IP "\fBpassphrase\fR \- read passphrase provided" 4
.IX Item "passphrase - read passphrase provided"
.Vb 1
\&  $passphrase = $obj\->passphrase;
.Ve
.Sp
Returns the last passphrase which was successfully used in \fBconnect()\fR, or undef otherwise.
.IP "\fBhandshake\fR \- read handshake used by current serial connection" 4
.IX Item "handshake - read handshake used by current serial connection"
.Vb 1
\&  $handshake = $obj\->handshake;
.Ve
.Sp
Returns the handshake setting used for the current serial connection; undef otherwise.
.IP "\fBbaudrate\fR \- read baudrate used by current serial connection" 4
.IX Item "baudrate - read baudrate used by current serial connection"
.Vb 1
\&  $baudrate = $obj\->baudrate;
.Ve
.Sp
Returns the baudrate setting used for the current serial connection; undef otherwise.
.IP "\fBparity\fR \- read parity used by current serial connection" 4
.IX Item "parity - read parity used by current serial connection"
.Vb 1
\&  $parity = $obj\->parity;
.Ve
.Sp
Returns the parity setting used for the current serial connection; undef otherwise.
.IP "\fBdatabits\fR \- read databits used by current serial connection" 4
.IX Item "databits - read databits used by current serial connection"
.Vb 1
\&  $databits = $obj\->databits;
.Ve
.Sp
Returns the databits setting used for the current serial connection; undef otherwise.
.IP "\fBstopbits\fR \- read stopbits used by current serial connection" 4
.IX Item "stopbits - read stopbits used by current serial connection"
.Vb 1
\&  $stopbits = $obj\->stopbits;
.Ve
.Sp
Returns the stopbits setting used for the current serial connection; undef otherwise.
.SS "Methods for modules sub-classing Control::CLI"
.IX Subsection "Methods for modules sub-classing Control::CLI"
.IP "\fB\fBpoll_struct()\fB\fR \- sets up the polling data structure for non-blocking polling capable methods" 4
.IX Item "poll_struct() - sets up the polling data structure for non-blocking polling capable methods"
.Vb 1
\&  $obj\->poll_struct($methodName, $codeRef, $blocking, $timeout, $errmode, $outputType, $outputRequested, $returnReference, $returnList);
.Ve
.Sp
Sets up the \f(CW$self\fR\->{\s-1POLL\s0} structure with the following key values:
.Sp
.Vb 10
\&        method                  =>      $methodName,
\&        coderef                 =>      \e&codeRef,
\&        cache                   =>      [],
\&        blocking                =>      $blocking,
\&        timeout                 =>      $timeout,
\&        endtime                 =>      undef,
\&        waittime                =>      undef,
\&        errmode                 =>      $errmode,
\&        complete                =>      0,
\&        return_reference        =>      $returnReference,
\&        return_list             =>      $returnList,
\&        output_requested        =>      $outputRequested,
\&        output_type             =>      $outputType,
\&        output_result           =>      undef,
\&        output_buffer           =>      \*(Aq\*(Aq,
\&        local_buffer            =>      \*(Aq\*(Aq,
\&        read_buffer             =>      undef,
\&        already_polled          =>      undef,
\&        socket                  =>      undef,
.Ve
.Sp
These keys represent common method storage values when a method is being called again and again using its poll method.
Method specific storage values should be stored under nested hash \f(CW$self\fR\->{\s-1POLL\s0}{$class::$methodName}.
This data structure must be setup before a polling method can make use of any of the poll_<name>() methods below.
.Sp
\&\f(CW$outputType\fR should be set to 0 if no output, 1 if output will be stored in key output_buffer, 2 if result will be stored in key output_result and 3 if both an output and a result are to be returned respectively in keys output_buffer & output_result.
.Sp
\&\f(CW$returnReference\fR only applies to output stored in output_buffer key. \f(CW$returnList\fR only applies to data in output_result key, if it is an \s-1ARRAY\s0 reference.
If key output_result will be used to store an array reference, \f(CW$returnList\fR will determine how that array will be returned: (1) as a list of values; (0/undef) as a single array reference.
.IP "\fB\fBpoll_struct_cache()\fB\fR \- caches selected poll structure keys, if a nested polled method is called" 4
.IX Item "poll_struct_cache() - caches selected poll structure keys, if a nested polled method is called"
.Vb 1
\&  $obj\->poll_struct_cache($methodName [, $timeout]);
.Ve
.Sp
This method is used within the internal polled method, if called directly, from within an externally called polled method.
For example a more complex \fBlogin()\fR method is written in a sub class, which is also written to support polling (non-blocking mode), and withing this new \fBlogin()\fR method we want to call \fBpoll_waitfor()\fR directly from this class (without having to use the \fBwaitfor()\fR and \fBwaitfor_poll()\fR methods which would otherwise trample on the poll structure setup by the new \fBlogin()\fR method).
The \fBpoll_waitfor()\fR method can tell if it was called directly (without a polling structure for waitfor already in place) and in this case will use this method to cache the poll structure keys that it has to use, so that their values can be restored by poll_struct_restore once the \fBpoll_waitfor()\fR method has completed.
.IP "\fBpoll_struct_restore\fR \- restores previously cached poll structure keys, if a nested polled method was called" 4
.IX Item "poll_struct_restore - restores previously cached poll structure keys, if a nested polled method was called"
.Vb 1
\&  $obj\->poll_struct_restore;
.Ve
.Sp
If an internally polled method was called, and at that time \fBpoll_struct_cache()\fR was called, whenever that method has completed this method is automatically triggered inside \fBpoll_return()\fR to automatically restore the polling keys used by the externally polled method.
.IP "\fBpoll_reset\fR \- resets poll structure" 4
.IX Item "poll_reset - resets poll structure"
.Vb 1
\&  $ok = $obj\->poll_reset;
.Ve
.Sp
Once a polling capable method is called, in non-blocking mode, a polling structure is put in place. The expectation is that the method is polled to completion (or until an error is encountered) before a new polling capable method is called. If a new method is called before the previous has completed, the new method will carp warning messages about the existing polling structure being trampled on before having completed. To avoid that, the poll_reset method can be called once to reset and clear the polling structure before calling the new method. Here is an example:
.Sp
.Vb 4
\&        $ok = $obj\->cmd(Command => "show command", Blocking => 0, Poll_syntax => 1);
\&        until ($ok) {
\&                ($ok, $partialOutput) = $obj\->cmd_poll;
\&                if ($partialOutput =~ /<seeked information>/) {
\&
\&                        < do whatever with information... >
\&
\&                        $obj\->poll_reset; # Reset structure as we are going to quit the loop
\&                        last;
\&                }
\&        }
\&        # Make sure we have prompt in stream
\&        $obj\->waitfor($obj\->prompt); # Now we don\*(Aqt get any carps here
.Ve
.IP "\fB\fBpoll_return()\fB\fR \- return status and optional output while updating poll structure" 4
.IX Item "poll_return() - return status and optional output while updating poll structure"
.Vb 1
\&  $ok = $obj\->poll_return($ok);
\&
\&  ($ok, $output1 [, $output2]) = $obj\->poll_return($ok);
.Ve
.Sp
Takes the desired exit status, \f(CW$ok\fR (which could be set to 1, 0 or undef), updates the poll structure \*(L"complete\*(R" key with it and returns the same value. If the poll structure \*(L"output_requested\*(R" key is true then the exit status is returned in list context together with any available output. The poll structure \*(L"output_type\*(R" key bits 0 and 1 determine what type of output is returned in the list; if bit 0 is set, the contents of poll structure \*(L"output_buffer\*(R" key are returned (either as direct output or as a reference, depending on whether key \*(L"return_reference\*(R" is set or not) and at the same time the contents of the \*(L"output_buffer\*(R" key are deleted to ensure that the same output is not returned again at the next non-blocking call; if bit 1 is set, the contents of poll structure \*(L"output_result\*(R" key is returned added to the list (the \*(L"output_result\*(R" key can hold either a scalar value or an array reference or a hash reference; in the case of an array reference either the array reference or the actual array list can be returned depnding on whether the poll structure \*(L"return_list\*(R" key is set or not); if both bit 0 and bit 1 are set then both output types are added to the returned list.
Note, a polled method should \s-1ALWAYS\s0 use this poll_return method to come out; whether it has completed successfully, non-blocking not ready, or encountered an error. Otherwise the calling method's <method>\fB_poll()\fR will not be able to behave correctly.
.Sp
In the case of an internally called poll method, \fBpoll_struct_restore()\fR is automatically invoked and output1 & \f(CW$output2\fR are only returned on success ($ok true), as references respectively to output_buffer and output_result poll structure keys; on failure ($ok undef) or not ready ($ok == 0) then output1 & \f(CW$output2\fR remain undefined.
.IP "\fB\fBpoll_sleep()\fB\fR \- performs a sleep in blocking or non-blocking mode" 4
.IX Item "poll_sleep() - performs a sleep in blocking or non-blocking mode"
.Vb 1
\&  $ok = $obj\->poll_sleep($pkgsub, $seconds);
.Ve
.Sp
In blocking mode this method is no different from a regular Time::HiRes::sleep.
In non-blocking mode it will only return a true (1) value once the \f(CW$seconds\fR have expired while it will return a false (0) value otherwise.
.IP "\fB\fBpoll_open_socket()\fB\fR \- opens \s-1TCP\s0 socket in blocking or non-blocking mode" 4
.IX Item "poll_open_socket() - opens TCP socket in blocking or non-blocking mode"
.Vb 1
\&  ($ok, $socket) = $obj\->poll_open_socket($pkgsub, $host, $port);
.Ve
.Sp
Uses IO::Socket::IP, if installed, to open a \s-1TCP\s0 socket in non-blocking or blocking mode while enforcing the connection timeout defined under poll structure key 'timeout'. If no connection timeout is defined then, in blocking mode the system's own \s-1TCP\s0 timeouts will apply while in non-blocking mode a default 20 sec timeout is used.
If IO::Socket::IP is not installed will use IO::Socket::INET instead but this will only work in blocking mode.
The \f(CW$socket\fR is defined and returned only on success ($ok true).
.IP "\fB\fBpoll_read()\fB\fR \- performs a non-blocking poll read and handles timeout in non-blocking polling mode" 4
.IX Item "poll_read() - performs a non-blocking poll read and handles timeout in non-blocking polling mode"
.Vb 1
\&  $ok = $obj\->poll_read($pkgsub [, \*(AqTimeout error string\*(Aq]);
.Ve
.Sp
In blocking mode this method is no different from a regular blocking \fBread()\fR.
In non-blocking mode this method will allow the calling loop to either quit immediately (if nothing can be read) or to cycle once only (in case something was read) and come out immediately at the next iteration.
.Sp
If nothing was read then a check is made to see if we have passed the timeout or not; the method will return 0 if the timeout has not expired or \f(CW$obj\fR\->error($pkgsub.'Timeout error string') in case of timeout which, depending on the error mode action may or may not return. If you want the method to always return regardless of the error mode action (because you want the calling loop to handle this) then simply do not provide any timeout string to this method, then in case of timeout this method will always return with an undefined value. In all these above cases the return value from this method is not true and the calling loop should pass this return value (0 or undef) to \fBpoll_return()\fR method to come out.
.Sp
In the case that some output was read, this method will return a true (1) value indicating that the calling loop can process the available output stored in the poll structure \*(L"read_buffer\*(R" key. When the calling loop comes round to calling this method again, this method will simply immediately return 0, thus forcing the calling loop to come out via \fBpoll_return()\fR. The poll structure \*(L"already_polled\*(R" key is used to keep track of this behaviour and is always reset by \fBpoll_return()\fR.
.Sp
Follows an example on how to use this method:
.Sp
.Vb 3
\&        do {
\&                my $ok = $self\->poll_read($pkgsub, \*(AqTimeout <custom message>\*(Aq);
\&                return $self\->poll_return($ok) unless $ok; # Come out if error (if errmode=\*(Aqreturn\*(Aq), or if nothing to read in non\-blocking mode
\&
\&                < process data in $self\->{POLL}{read_buffer}>
\&
\&        } until <loop stisfied condition>;
.Ve
.IP "\fB\fBpoll_readwait()\fB\fR \- performs a non-blocking poll readwait and handles timeout in non-blocking polling mode" 4
.IX Item "poll_readwait() - performs a non-blocking poll readwait and handles timeout in non-blocking polling mode"
.Vb 1
\&  $ok = $obj\->poll_readwait($pkgsub, $firstReadRequired [, $readAttempts , $readwaitTimer , \*(AqTimeout error string\*(Aq, $dataWithError]);
.Ve
.Sp
In blocking mode this method is no different from a regular blocking readwait(Read_attempts => \f(CW$readAttempts\fR, Blocking => \f(CW$firstReadRequired\fR).
In non-blocking mode the same behaviour is emulated by allowing the calling loop to either quit immediately (if nothing can be read, or if the readwait timer has not yet expired) or to cycle once only (in case something was read and the readwait timer has expired) and come out immediately at the next iteration.
.Sp
The \f(CW$firstReadRequired\fR argument determines whether an initial read of data is required (and if we don't get any, then we timeout; just like the \fBreadwait()\fR method in blocking mode) or whether we just wait the wait timer and return any data received during this time (without any timeout associated; just like the \fBreadwait()\fR method in non-blocking mode).
.Sp
If some output was read during the 1st call, the poll structure \*(L"waittime\*(R" is set to the waitread behaviour where we wait a certain amount of time before making the output available. Subsequent poll calls to this function will only make the output available for processing once the waittime has expired. Before that happens this method will continue returning a 0 value. Once that happens this method will return a true (1) value and the calling loop can then process the output in the poll structure \*(L"read_buffer\*(R".
.Sp
If instead no data has yet been read (and \f(CW$firstReadRequired\fR was true) then a check is made to see if we have passed the timeout or not; the method will return 0 if the timeout has not expired yet, or \f(CW$obj\fR\->error($pkgsub.'Timeout error string') in case of timeout which, depending on the error mode action may or may not return. If you want the method to always return regardless of the error mode action (because you want the calling loop to handle this) then simply do not provide any timeout string to this method, then in case of timeout this method will always return with an undefined value. For any of the above cases where the return value from this method is not true, the calling loop should pass this return value (0 or undef) to \fBpoll_return()\fR method to come out.
.Sp
The \f(CW$dataWithError\fR flag can be set to obtain the equivalent behaviuor of \fBreadwait()\fR when some data has been read and a read error occurs during subsequent reads.
.Sp
Follows an example on how to use this method:
.Sp
.Vb 3
\&        do {
\&                my $ok = $self\->poll_readwait($pkgsub, 1, $readAttempts, $readwaitTimer, \*(AqTimeout <custom message>\*(Aq);
\&                return $self\->poll_return($ok) unless $ok; # Come out if error (if errmode=\*(Aqreturn\*(Aq), or if nothing to read in non\-blocking mode
\&
\&                < process data in $self\->{POLL}{read_buffer}>
\&
\&        } until <loop stisfied condition>;
.Ve
.IP "\fB\fBpoll_waitfor()\fB\fR \- performs a non-blocking poll for \fBwaitfor()\fR" 4
.IX Item "poll_waitfor() - performs a non-blocking poll for waitfor()"
.Vb 5
\&  ($ok, $dataref, $matchref) = $obj\->poll_waitfor($pkgsub,
\&        [Match                  => $matchpattern | \e@matchpatterns
\&        [Timeout                => $secs,]
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
Normally this is the internal method used by \fBwaitfor()\fR and \fBwaitfor_poll()\fR methods.
It is exposed so that sub classing modules can leverage the functionality within new methods themselves implementing polling.
These newer methods would have already set up a polling structure of their own.
When calling \fBpoll_waitfor()\fR directly for the 1st time, it will detect an already existing poll structure and add itself to it (as well as caching some of it's keys; see poll_struct_cache). It will also read in the arguments provided at this point.
On subsequent calls, the arguments provided are ignored and the method simply polls the progress of the current task.
.Sp
Follows an example on how to use this method:
.Sp
.Vb 1
\&        < processing previous stages >
\&
\&        if ($newMethod\->{stage} < X) { # stage X
\&                my ($ok, $dataref, $matchref) = $self\->poll_waitfor(
\&                                                                Match   => \*(AqLogin: $\*(Aq,
\&                                                                Timeout => [$timeout],
\&                                                                Errmode => [$errmode]
\&                                                        );
\&                return $self\->poll_return($ok) unless $ok;
\&                $newMethod\->{stage}++; # Move to next stage X+1
\&        }
\&
\&        < processing of next stages here >
.Ve
.IP "\fB\fBpoll_connect()\fB\fR \- performs a non-blocking poll for \fBconnect()\fR" 4
.IX Item "poll_connect() - performs a non-blocking poll for connect()"
.Vb 10
\&  $ok = $obj\->poll_connect($pkgsub,
\&        [Host                   => $host,]
\&        [Port                   => $port,]
\&        [Username               => $username,]
\&        [Password               => $password,]
\&        [PublicKey              => $publicKey,]
\&        [PrivateKey             => $privateKey,]
\&        [Passphrase             => $passphrase,]
\&        [Prompt_credentials     => $flag,]
\&        [BaudRate               => $baudRate,]
\&        [Parity                 => $parity,]
\&        [DataBits               => $dataBits,]
\&        [StopBits               => $stopBits,]
\&        [Handshake              => $handshake,]
\&        [Connection_timeout     => $secs,]
\&        [Errmode                => $errmode,]
\&        [Terminal_type          => $string,]
\&        [Window_size            => [$width, $height],]
\&  );
.Ve
.Sp
Normally this is the internal method used by \fBconnect()\fR and \fBconnect_poll()\fR methods.
It is exposed so that sub classing modules can leverage the functionality within new methods themselves implementing polling.
These newer methods would have already set up a polling structure of their own.
When calling \fBpoll_connect()\fR directly for the 1st time, it will detect an already existing poll structure and add itself to it (as well as caching some of it's keys; see poll_struct_cache). It will also read in the arguments provided at this point.
On subsequent calls, the arguments provided are ignored and the method simply polls the progress of the current task.
.IP "\fB\fBpoll_login()\fB\fR \- performs a non-blocking poll for \fBlogin()\fR" 4
.IX Item "poll_login() - performs a non-blocking poll for login()"
.Vb 10
\&  ($ok, $outputref) = $obj\->poll_login($pkgsub,
\&        [Username               => $username,]
\&        [Password               => $password,]
\&        [Prompt_credentials     => $flag,]
\&        [Prompt                 => $prompt,]
\&        [Username_prompt        => $usernamePrompt,]
\&        [Password_prompt        => $passwordPrompt,]
\&        [Timeout                => $secs,]
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
Normally this is the internal method used by \fBlogin()\fR and \fBlogin_poll()\fR methods.
It is exposed so that sub classing modules can leverage the functionality within new methods themselves implementing polling.
These newer methods would have already set up a polling structure of their own.
When calling \fBpoll_login()\fR directly for the 1st time, it will detect an already existing poll structure and add itself to it (as well as caching some of it's keys; see poll_struct_cache). It will also read in the arguments provided at this point.
On subsequent calls, the arguments provided are ignored and the method simply polls the progress of the current task.
Return values after \f(CW$ok\fR will only be defined if \f(CW$ok\fR is \fBtrue\fR\|(1).
.IP "\fB\fBpoll_cmd()\fB\fR \- performs a non-blocking poll for \fBcmd()\fR" 4
.IX Item "poll_cmd() - performs a non-blocking poll for cmd()"
.Vb 6
\&  ($ok, $outputref) = $obj\->poll_cmd($pkgsub,
\&        [Command                => $cliCommand,]
\&        [Prompt                 => $prompt,]
\&        [Timeout                => $secs,]
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
Normally this is the internal method used by \fBcmd()\fR and \fBcmd_poll()\fR methods.
It is exposed so that sub classing modules can leverage the functionality within new methods themselves implementing polling.
These newer methods would have already set up a polling structure of their own.
When calling \fBpoll_cmd()\fR directly for the 1st time, it will detect an already existing poll structure and add itself to it (as well as caching some of it's keys; see poll_struct_cache). It will also read in the arguments provided at this point.
On subsequent calls, the arguments provided are ignored and the method simply polls the progress of the current task.
Return values after \f(CW$ok\fR will only be defined if \f(CW$ok\fR is \fBtrue\fR\|(1).
.IP "\fB\fBpoll_change_baudrate()\fB\fR \- performs a non-blocking poll for \fBchange_baudrate()\fR" 4
.IX Item "poll_change_baudrate() - performs a non-blocking poll for change_baudrate()"
.Vb 8
\&  $ok = $obj\->poll_change_baudrate($pkgsub,
\&        [BaudRate               => $baudRate,]
\&        [Parity                 => $parity,]
\&        [DataBits               => $dataBits,]
\&        [StopBits               => $stopBits,]
\&        [Handshake              => $handshake,]
\&        [Errmode                => $errmode,]
\&  );
.Ve
.Sp
Normally this is the internal method used by \fBchange_baudrate()\fR method.
It is exposed so that sub classing modules can leverage the functionality within new methods themselves implementing polling.
These newer methods would have already set up a polling structure of their own.
When calling \fBpoll_change_baudrate()\fR directly for the 1st time, it will detect an already existing poll structure and add itself to it (as well as caching some of it's keys; see poll_struct_cache). It will also read in the arguments provided at this point.
On subsequent calls, the arguments provided are ignored and the method simply polls the progress of the current task.
.IP "\fB\fBdebugMsg()\fB\fR \- prints out a debug message" 4
.IX Item "debugMsg() - prints out a debug message"
.Vb 1
\&  $obj\->debugMsg($msgLevel, $string1 [, $stringRef [,$string2]]);
.Ve
.Sp
A logical \s-1AND\s0 is performed between \f(CW$msgLevel\fR and the object debug level \- see \fBdebug()\fR; if the result is true, then the message is printed.
The message can be provided in 3 chunks: \f(CW$string1\fR is always present, followed by an optional string reference (to dump large amout of data) and \f(CW$string2\fR.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
Class Methods which are not tied to an object instance.
By default the Control::CLI class does not import anything since it is object oriented.
The following class methods should therefore be called using their fully qualified package name or else they can be expressly imported when loading this module:
.PP
.Vb 2
\&        # Import all class methods listed in this section
\&        use Control::CLI qw(:all);
\&
\&        # Import useTelnet, useSsh, useSerial & useIPv6
\&        use Control::CLI qw(:use);
\&
\&        # Import promptClear, promptHide & promptCredential
\&        use Control::CLI qw(:prompt);
\&
\&        # Import parseMethodArgs suppressMethodArgs
\&        use Control::CLI qw(:args);
\&
\&        # Import validCodeRef callCodeRef
\&        use Control::CLI qw(:coderef);
\&
\&        # Import just passphraseRequired
\&        use Control::CLI qw(passphraseRequired);
\&
\&        # Import just parse_errmode
\&        use Control::CLI qw(parse_errmode);
\&
\&        # Import just stripLastLine
\&        use Control::CLI qw(stripLastLine);
\&
\&        # Import just poll()
\&        use Control::CLI qw(poll);
.Ve
.IP "\fBuseTelnet\fR \- can Telnet be used ?" 4
.IX Item "useTelnet - can Telnet be used ?"
.Vb 1
\&  $yes = Control::CLI::useTelnet;
.Ve
.Sp
Returns a true (1) value if Net::Telnet is installed and hence Telnet access can be used with this class.
.IP "\fBuseSsh\fR \- can \s-1SSH\s0 be used ?" 4
.IX Item "useSsh - can SSH be used ?"
.Vb 1
\&  $yes = Control::CLI::useSsh;
.Ve
.Sp
Returns a true (1) value if Net::SSH2 is installed and hence \s-1SSH\s0 access can be used with this class.
.IP "\fBuseSerial\fR \- can Serial port be used ?" 4
.IX Item "useSerial - can Serial port be used ?"
.Vb 1
\&  $yes = Control::CLI::useSerial;
.Ve
.Sp
Returns a true (1) value if Win32::SerialPort (on Windows) or Device::SerialPort (on non-Windows) is installed and hence Serial port access can be used with this class.
.IP "\fBuseIPv6\fR \- can IPv6 be used with Telnet or \s-1SSH\s0 ?" 4
.IX Item "useIPv6 - can IPv6 be used with Telnet or SSH ?"
.Vb 1
\&  $yes = Control::CLI::useIPv6;
.Ve
.Sp
Returns a true (1) value if IO::Socket::IP is installed and hence both Telnet and \s-1SSH\s0 can operate on IPv6 as well as IPv4.
.IP "\fB\fBpoll()\fB\fR \- poll objects for completion" 4
.IX Item "poll() - poll objects for completion"
This method has a double identity, as object method or class method. It was already covered under the Object Methods section.
.PP
The remainder of these class methods is exposed with the intention to make these available to modules sub-classing Control::CLI.
.IP "\fB\fBpromptClear()\fB\fR \- prompt for username in clear text" 4
.IX Item "promptClear() - prompt for username in clear text"
.Vb 1
\&  $username = Control::CLI::promptClear($prompt);
.Ve
.Sp
This method prompts (using \f(CW$prompt\fR) user to enter a value/string, typically a username.
User input is visible while typed in.
.IP "\fB\fBpromptHide()\fB\fR \- prompt for password in hidden text" 4
.IX Item "promptHide() - prompt for password in hidden text"
.Vb 1
\&  $password = Control::CLI::promptHide($prompt);
.Ve
.Sp
This method prompts (using \f(CW$prompt\fR) user to enter a value/string, typically a password or passphrase.
User input is hidden while typed in.
.IP "\fB\fBpromptCredential()\fB\fR \- prompt for credential using either prompt class methods or code reference" 4
.IX Item "promptCredential() - prompt for credential using either prompt class methods or code reference"
.Vb 1
\&  $credential = Control::CLI::promptCredential($prompt_credentials, $privacy, $credentialNeeded);
.Ve
.Sp
This method should only be called when prompt_credentials is set and the value of prompt_credentials should be passed as the first argument. If prompt_credentials is not a reference and is set to a true value and privacy is 'Clear' then promptClear($credentialNeeded) is called; whereas if privacy is 'Hide' then promptHide($credentialNeeded) is called. If instead prompt_credentials is a valid reference (verified by validCodeRef) then the code reference is called with \f(CW$privacy\fR and \f(CW$credentialNeeded\fR as arguments.
.IP "\fB\fBpassphraseRequired()\fB\fR \- check if private key requires passphrase" 4
.IX Item "passphraseRequired() - check if private key requires passphrase"
.Vb 1
\&  $yes = Control::CLI::passphraseRequired($privateKey);
.Ve
.Sp
This method opens the private key provided (\s-1DSA\s0 or \s-1RSA\s0) and verifies whether the key requires a passphrase to be used.
Returns a true (1) value if the key requires a passphrase and false (0) if not.
On failure to open/find the private key provided an undefined value is returned.
.IP "\fB\fBparseMethodArgs()\fB\fR \- parse arguments passed to a method against list of valid arguments" 4
.IX Item "parseMethodArgs() - parse arguments passed to a method against list of valid arguments"
.Vb 1
\&  %args = Control::CLI::parseMethodArgs($methodName, \e@inputArgs, \e@validArgs, $noCarpFlag);
.Ve
.Sp
This method checks all input arguments against a list of valid arguments and generates a warning message if an invalid argument is found. The warning message will contain the \f(CW$methodName\fR passed to this function. The warning message can be suppressed by setting the \f(CW$noCarpFlag\fR argument.
Additionally, all valid input arguments are returned as a hash where the hash key (the argument) is set to lowercase.
.IP "\fB\fBsuppressMethodArgs()\fB\fR \- parse arguments passed to a method and suppress selected arguments" 4
.IX Item "suppressMethodArgs() - parse arguments passed to a method and suppress selected arguments"
.Vb 1
\&  %args = Control::CLI::suppressMethodArgs(\e@inputArgs, \e@suppressArgs);
.Ve
.Sp
This method checks all input arguments against a list of arguments to be suppressed. Remaining arguments are returned as a hash where the hash key (the argument) is set to lowercase.
.IP "\fB\fBparse_errmode()\fB\fR \- parse a new value for the error mode and return it if valid or undef otherwise" 4
.IX Item "parse_errmode() - parse a new value for the error mode and return it if valid or undef otherwise"
.Vb 1
\&  $errmode = Control::CLI::parse_errmode($inputErrmode);
.Ve
.Sp
This method will check the input error mode supplied to it to ensure that it is a valid error mode.
If one of the valid strings 'die', 'croak' or 'return' it will ensure that the returned \f(CW$errmode\fR has the string all in lowercase.
For an array ref it will ensure that the first element of the array ref is a code ref.
If the input errmode is found to be invalid in any way, a warning message is printed with carp and an undef value is returned.
.IP "\fB\fBstripLastLine()\fB\fR \- strip and return last incomplete line from string reference provided" 4
.IX Item "stripLastLine() - strip and return last incomplete line from string reference provided"
.Vb 1
\&  $lastLine = Control::CLI::stripLastLine(\e$stringRef);
.Ve
.Sp
This method will take a reference to a string and remove and return the last incomplete line, if any. An incomplete line is constituted by any text not followed by a newline (\en).
If the string terminates with a newline (\en) then this method will return an empty string.
.IP "\fB\fBvalidCodeRef()\fB\fR \- validates reference as either a code ref or an array ref where first element is a code ref" 4
.IX Item "validCodeRef() - validates reference as either a code ref or an array ref where first element is a code ref"
.Vb 1
\&  $ok = Control::CLI::validCodeRef($value);
.Ve
.Sp
This method will verify that the value provided is either a code reference or an array reference where the first element is a code reference and if so will return a true value.
If not, it will return an undefined value.
.IP "\fB\fBcallCodeRef()\fB\fR \- calls the code ref provided (which should be a code ref or an array ref where first element is a code ref)" 4
.IX Item "callCodeRef() - calls the code ref provided (which should be a code ref or an array ref where first element is a code ref)"
.Vb 1
\&  $ok = Control::CLI::callCodeRef($codeOrArrayRef, @arguments);
.Ve
.Sp
If provided with a code reference, this method will call that code reference together with the provided arguments.
If provided with an array reference, it will shift the first element of the array and call that as a code reference. The arguments provided to code being called will be the remainder of the elements of the array reference to which the provided arguments are appended. Note that this method does not do any checks on the validy of the reference it is provided with; use the \fBvalidCodeRef()\fR class method to verify the validity of the reference before calling this method with it.
.SH "NON BLOCKING POLLING MODE"
.IX Header "NON BLOCKING POLLING MODE"
Non-blocking mode is useful if you want your Perl code to do something else while waiting for a connection to establish or a command to complete instead of just waiting.
It also allows the same (single thread) script to drive the \s-1CLI\s0 of many host devices in a parallel fashion rather than in a time consuming sequential fashion.
But why not use threads instead ?
The following bullets are from the author's experience with dealing with both approaches:
.IP "\(bu" 4
Writing code with threads is easier than trying to achieve the same thing using a single thread using non-blocking mode
.IP "\(bu" 4
But code written with threads is harder to troubleshoot
.IP "\(bu" 4
Code using threads will use a larger memory footprint than a single thread
.IP "\(bu" 4
Code written using threads can be faster than a single thread in non-blocking mode; however if you have to provide a result at the end, you will have to wait for the slowest thread to complete anyway
.IP "\(bu" 4
If you need interaction (e.g. sharing variables) or synchronisation (doing the same step across all \s-1CLI\s0 objects at the same time) then a single thread non-blocking approach is easier to implement. A thread approach would require the use of threads::shared which adds more complexity for sharing variables as well as attempting to keep the child threads synchronized with one another
.IP "\(bu" 4
If you have ~10\-30 threads chances are your code will work well; if you have hundreds of threads then things start to go wrong; some threads will then die unexpectedly and it becomes hell to troubleshoot; your code will then need to become more complex to handle failed threads... (author's experience here is mostly on Windows systems using either ActiveState or Strawberry)
.IP "\(bu" 4
The Perl distribution you find on most Unix distributions is not always compiled for thread use
.IP "\(bu" 4
Some Perl modules do not work properly with threads; if you need to use such a module, you will either have to abandon the threads approach or try and fix that module
.PP
This class distribution includes a number of examples on how to achieve the same job using both approaches: (a) using threads & (b) using a single thread in non-blocking mode. You can find these under the examples directory.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ludovico Stevens <lstevens@cpan.org>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-control\-cli at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Control\-CLI>.  I will be notified, and then you'll automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Control::CLI
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Control\-CLI>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Control\-CLI>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Control\-CLI>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Control\-CLI/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
A lot of the methods and functionality of this class, as well as some code, is directly inspired from the popular Net::Telnet class. I used Net::Telnet extensively until I was faced with adapting my scripts to run not just over Telnet but \s-1SSH\s0 as well. At which point I started working on my own class as a way to extend the rich functionality of Net::Telnet over to Net::SSH2 while at the same time abstracting it from the underlying connection type. From there, adding serial port support was pretty straight forward.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2020 Ludovico Stevens.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
