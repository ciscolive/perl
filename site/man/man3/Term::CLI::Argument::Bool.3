.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::CLI::Argument::Bool 3"
.TH Term::CLI::Argument::Bool 3 "2019-11-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::CLI::Argument::Bool \- class for "boolean" arguments in Term::CLI
.SH "VERSION"
.IX Header "VERSION"
version 0.051007
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Term::CLI::Argument::Bool;
\&
\& # Case\-insensitive booleans (default)
\& my $arg = Term::CLI::Argument::Bool\->new(
\&     name => \*(Aqarg1\*(Aq,
\&     ignore_case => 1, # default
\& );
\&
\& $arg\->validate( \*(Aqtrue\*(Aq );  # \-> returns 1
\& $arg\->validate( \*(AqtRuE\*(Aq );  # \-> returns 1
\& $arg\->validate( \*(Aq1\*(Aq );     # \-> returns 1
\&
\& $arg\->validate( \*(Aqfalse\*(Aq ); # \-> returns 0
\& $arg\->validate( \*(AqFaLsE\*(Aq ); # \-> returns 0
\& $arg\->validate( \*(Aq0\*(Aq );     # \-> returns 0
\&
\& $arg\->validate( \*(Aqnever\*(Aq ); # \-> returns undef, sets error.
\&
\& # Case\-sensitive booleans
\& $arg = Term::CLI::Argument::Bool\->new(
\&     name => \*(Aqarg1\*(Aq,
\&     ignore_case => 0,
\& );
\&
\& $arg\->validate( \*(AqtRuE\*(Aq );  # \-> returns undef, sets error.
\& $arg\->validate( \*(AqFaLsE\*(Aq ); # \-> returns undef, sets error.
\&
\& # Alternative booleans
\& $arg = Term::CLI::Argument::Bool\->new(
\&     name => \*(Aqarg1\*(Aq,
\&     true_values => [\*(Aqon\*(Aq, \*(Aqyes\*(Aq],
\&     false_values => [\*(Aqoff\*(Aq, \*(Aqno\*(Aq],
\& );
\&
\& $arg\->validate( \*(Aqon\*(Aq );    # \-> returns 1
\& $arg\->validate( \*(Aqoff\*(Aq );   # \-> returns 0
\&
\& # Abbreviation
\& $arg\->validate( \*(Aqy\*(Aq );     # \-> returns 1
\& $arg\->validate( \*(Aqn\*(Aq );     # \-> returns 0
\& $arg\->validate( \*(Aqo\*(Aq );     # ambiguous \-> returns undef, sets error.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Class for \*(L"boolean\*(R" string arguments in Term::CLI(3p).
.PP
This class inherits from
the Term::CLI::Argument(3p) class.
.PP
By default, the valid strings for a boolean are:
.ie n .IP """true"", 1" 4
.el .IP "\f(CWtrue\fR, \f(CW1\fR" 4
.IX Item "true, 1"
A true value.
.ie n .IP """false"", 0" 4
.el .IP "\f(CWfalse\fR, \f(CW0\fR" 4
.IX Item "false, 0"
A false value.
.SS "Case-Insensitive Matching"
.IX Subsection "Case-Insensitive Matching"
By default, the object's \fBvalidate()\fR and
\&\fBcomplete()\fR methods ignore case, so \f(CW\*(C`FAlsE\*(C'\fR
validates as \*(L"false\*(R", and \f(CW\*(C`TR\*(C'\fR will have a completion of
\&\f(CW\*(C`TRue\*(C'\fR.
.PP
Set the ignore_case flag to 0 to do
case-sensitive matching.
.SS "Abbreviations"
.IX Subsection "Abbreviations"
The validate method accepts abbreviations
as long as they are uniquely identifying either one or more
\&\*(L"true\*(R" values \fIor\fR one or more \*(L"false\*(R" values.
.PP
For example, if you specify the following:
.ie n .IP "\fBtrue_values\fR => [ \fB""on""\fR, \fB""yes""\fR ]" 4
.el .IP "\fBtrue_values\fR => [ \fB``on''\fR, \fB``yes''\fR ]" 4
.IX Item "true_values => [ on, yes ]"
.PD 0
.ie n .IP "\fBfalse_values\fR => [ \fB""off""\fR, \fB""never""\fR, \fB""no""\fR ]" 4
.el .IP "\fBfalse_values\fR => [ \fB``off''\fR, \fB``never''\fR, \fB``no''\fR ]" 4
.IX Item "false_values => [ off, never, no ]"
.PD
.PP
Then the string \f(CW\*(C`o\*(C'\fR will not validate since it matches both a \*(L"true\*(R"
value (\f(CW\*(C`on\*(C'\fR) \fIand\fR a \*(L"false\*(R" value (\f(CW\*(C`off\*(C'\fR). On the other hand, the
string \f(CW\*(C`n\*(C'\fR \fIwill\fR validate, for although it matches both \f(CW\*(C`never\*(C'\fR
and \f(CW\*(C`no\*(C'\fR, those values are both \*(L"false\*(R" values, so there is no ambiguity.
.SH "CLASS STRUCTURE"
.IX Header "CLASS STRUCTURE"
.SS "Inherits from:"
.IX Subsection "Inherits from:"
Term::CLI::Argument(3p).
.SS "Consumes:"
.IX Subsection "Consumes:"
None.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.IP "\fBnew\fR ( \fBname\fR => \fI\s-1STRING\s0\fR, ... )" 4
.IX Item "new ( name => STRING, ... )"
See also Term::CLI::Argument(3p).
.Sp
Additional attributes:
.RS 4
.IP "\fBtrue_values\fR => \fIArrayRef\fR[\fIStr\fR]" 4
.IX Xref "true_values"
.IX Item "true_values => ArrayRef[Str]"
List of values that are considered to be \*(L"true\*(R". Default
is \f(CW\*(C`[\*(Aqtrue\*(Aq, \*(Aq1\*(Aq]\*(C'\fR.
.IP "\fBfalse_values\fR => \fIArrayRef\fR[\fIStr\fR]" 4
.IX Xref "false_values"
.IX Item "false_values => ArrayRef[Str]"
List of values that are considered to be \*(L"false\*(R". Default
is \f(CW\*(C`[\*(Aqfalse\*(Aq, \*(Aq0\*(Aq]\*(C'\fR.
.IP "\fBignore_case\fR => \fIBool\fR" 4
.IX Xref "ignore_case"
.IX Item "ignore_case => Bool"
Whether or not matching should ignore case. Default is 1 (so \f(CW\*(C`True\*(C'\fR
and \f(CW\*(C`FALSE\*(C'\fR are valid as well).
.RE
.RS 4
.RE
.SH "ACCESSORS"
.IX Header "ACCESSORS"
See also Term::CLI::Argument(3p).
.IP "\fBignore_case\fR ( [ \fIBool\fR ] )" 4
.IX Xref "ignore_case"
.IX Item "ignore_case ( [ Bool ] )"
Get or set the \f(CW\*(C`ignore_case\*(C'\fR flag.
.IP "\fBtrue_values\fR ( [ \fIArrayRef\fR[\fIStr\fR] ] )" 4
.IX Xref "true_values"
.IX Item "true_values ( [ ArrayRef[Str] ] )"
Get or set the list of strings that denote a \*(L"true\*(R" value.
.IP "\fBfalse_values\fR ( [ \fIArrayRef\fR[\fIStr\fR] ] )" 4
.IX Xref "false_values"
.IX Item "false_values ( [ ArrayRef[Str] ] )"
Get or set the list of strings that denote a \*(L"false\*(R" value.
.SH "METHODS"
.IX Header "METHODS"
See also Term::CLI::Argument(3p).
.PP
The following methods are added or overloaded:
.IP "\fBvalidate\fR ( \fIStr\fR )" 4
.IX Item "validate ( Str )"
Validate \fIStr\fR to see if it is a uniquely \*(L"true\*(R" or \*(L"false\*(R" value. Return
1 if it is a \*(L"true\*(R" value, 0 if it is a \*(L"false\*(R" value.
.Sp
If the true/false validity cannot be determined, the object's \f(CW\*(C`error\*(C'\fR
attribute is set and \f(CW\*(C`undef\*(C'\fR is returned.
.IP "\fBcomplete\fR ( \fIStr\fR )" 4
.IX Item "complete ( Str )"
Return a list of possible completions for \fIStr\fR. If \f(CW\*(C`ignore_case\*(C'\fR is true,
then values like \f(CW\*(C`FA\*(C'\fR will result in \f(CW\*(C`(\*(AqFAlse\*(Aq)\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Term::CLI::Argument(3p),
Term::CLI(3p).
.SH "AUTHOR"
.IX Header "AUTHOR"
Steven Bakker <sbakker@cpan.org>, 2018.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2018 Steven Bakker
.PP
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See \*(L"perldoc perlartistic.\*(R"
.PP
This software is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
