.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::Yath::Command::start 3"
.TH App::Yath::Command::start 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::Yath::Command::start \- Start the persistent test runner
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This command is used to start a persistant instance of yath. A persistant
instance is useful because it allows you to preload modules in advance,
reducing start time for any tests you decide to run as you work.
.PP
A running instance will watch for changes to any preloaded files, and restart
itself if anything changes. Changed files are blacklisted for subsequent
reloads so that reloading is not a frequent occurence when editing the same
file over and over again.
.SH "USAGE"
.IX Header "USAGE"
.Vb 1
\&    $ yath [YATH OPTIONS] start [COMMAND OPTIONS]
.Ve
.SS "\s-1YATH OPTIONS\s0"
.IX Subsection "YATH OPTIONS"
\fIDeveloper\fR
.IX Subsection "Developer"
.IP "\-\-dev\-lib" 4
.IX Item "--dev-lib"
.PD 0
.IP "\-\-dev\-lib=lib" 4
.IX Item "--dev-lib=lib"
.IP "\-D" 4
.IX Item "-D"
.IP "\-D=lib" 4
.IX Item "-D=lib"
.IP "\-Dlib" 4
.IX Item "-Dlib"
.IP "\-\-no\-dev\-lib" 4
.IX Item "--no-dev-lib"
.PD
Add paths to \f(CW@INC\fR before loading \s-1ANYTHING.\s0 This is what you use if you are developing yath or yath plugins to make sure the yath script finds the local code instead of the installed versions of the same code. You can provide an argument (\-Dfoo) to provide a custom path, or you can just use \-D without and arg to add lib, blib/lib and blib/arch.
.Sp
Can be specified multiple times
.PP
\fIEnvironment\fR
.IX Subsection "Environment"
.IP "\-\-persist\-dir \s-1ARG\s0" 4
.IX Item "--persist-dir ARG"
.PD 0
.IP "\-\-persist\-dir=ARG" 4
.IX Item "--persist-dir=ARG"
.IP "\-\-no\-persist\-dir" 4
.IX Item "--no-persist-dir"
.PD
Where to find persistence files.
.IP "\-\-persist\-file \s-1ARG\s0" 4
.IX Item "--persist-file ARG"
.PD 0
.IP "\-\-persist\-file=ARG" 4
.IX Item "--persist-file=ARG"
.IP "\-\-pfile \s-1ARG\s0" 4
.IX Item "--pfile ARG"
.IP "\-\-pfile=ARG" 4
.IX Item "--pfile=ARG"
.IP "\-\-no\-persist\-file" 4
.IX Item "--no-persist-file"
.PD
Where to find the persistence file. The default is /{system\-tempdir}/project\-yath\-persist.json. If no project is specified then it will fall back to the current directory. If the current directory is not writable it will default to /tmp/yath\-persist.json which limits you to one persistent runner on your system.
.IP "\-\-project \s-1ARG\s0" 4
.IX Item "--project ARG"
.PD 0
.IP "\-\-project=ARG" 4
.IX Item "--project=ARG"
.IP "\-\-project\-name \s-1ARG\s0" 4
.IX Item "--project-name ARG"
.IP "\-\-project\-name=ARG" 4
.IX Item "--project-name=ARG"
.IP "\-\-no\-project" 4
.IX Item "--no-project"
.PD
This lets you provide a label for your current project/codebase. This is best used in a .yath.rc file. This is necessary for a persistent runner.
.PP
\fIHelp and Debugging\fR
.IX Subsection "Help and Debugging"
.IP "\-\-show\-opts" 4
.IX Item "--show-opts"
.PD 0
.IP "\-\-no\-show\-opts" 4
.IX Item "--no-show-opts"
.PD
Exit after showing what yath thinks your options mean
.IP "\-\-version" 4
.IX Item "--version"
.PD 0
.IP "\-V" 4
.IX Item "-V"
.IP "\-\-no\-version" 4
.IX Item "--no-version"
.PD
Exit after showing a helpful usage message
.PP
\fIPlugins\fR
.IX Subsection "Plugins"
.IP "\-\-no\-scan\-plugins" 4
.IX Item "--no-scan-plugins"
.PD 0
.IP "\-\-no\-no\-scan\-plugins" 4
.IX Item "--no-no-scan-plugins"
.PD
Normally yath scans for and loads all App::Yath::Plugin::* modules in order to bring in command-line options they may provide. This flag will disable that. This is useful if you have a naughty plugin that it loading other modules when it should not.
.IP "\-\-plugins \s-1PLUGIN\s0" 4
.IX Item "--plugins PLUGIN"
.PD 0
.IP "\-\-plugins +App::Yath::Plugin::PLUGIN" 4
.IX Item "--plugins +App::Yath::Plugin::PLUGIN"
.IP "\-\-plugins PLUGIN=arg1,arg2,..." 4
.IX Item "--plugins PLUGIN=arg1,arg2,..."
.IP "\-\-plugin \s-1PLUGIN\s0" 4
.IX Item "--plugin PLUGIN"
.IP "\-\-plugin +App::Yath::Plugin::PLUGIN" 4
.IX Item "--plugin +App::Yath::Plugin::PLUGIN"
.IP "\-\-plugin PLUGIN=arg1,arg2,..." 4
.IX Item "--plugin PLUGIN=arg1,arg2,..."
.IP "\-pPLUGIN" 4
.IX Item "-pPLUGIN"
.IP "\-\-no\-plugins" 4
.IX Item "--no-plugins"
.PD
Load a yath plugin.
.Sp
Can be specified multiple times
.SS "\s-1COMMAND OPTIONS\s0"
.IX Subsection "COMMAND OPTIONS"
\fIGit Options\fR
.IX Subsection "Git Options"
.IP "\-\-git\-change\-base master" 4
.IX Item "--git-change-base master"
.PD 0
.IP "\-\-git\-change\-base HEAD^" 4
.IX Item "--git-change-base HEAD^"
.IP "\-\-git\-change\-base df22abe4" 4
.IX Item "--git-change-base df22abe4"
.IP "\-\-no\-git\-change\-base" 4
.IX Item "--no-git-change-base"
.PD
Find files changed by all commits in the current branch from most recent stopping when a commit is found that is also present in the history of the branch/commit specified as the change base.
.PP
\fIHelp and Debugging\fR
.IX Subsection "Help and Debugging"
.IP "\-\-dummy" 4
.IX Item "--dummy"
.PD 0
.IP "\-d" 4
.IX Item "-d"
.IP "\-\-no\-dummy" 4
.IX Item "--no-dummy"
.PD
Dummy run, do not actually execute anything
.Sp
Can also be set with the following environment variables: \f(CW\*(C`T2_HARNESS_DUMMY\*(C'\fR
.IP "\-\-help" 4
.IX Item "--help"
.PD 0
.IP "\-h" 4
.IX Item "-h"
.IP "\-\-no\-help" 4
.IX Item "--no-help"
.PD
exit after showing help information
.IP "\-\-keep\-dirs" 4
.IX Item "--keep-dirs"
.PD 0
.IP "\-\-keep_dir" 4
.IX Item "--keep_dir"
.IP "\-k" 4
.IX Item "-k"
.IP "\-\-no\-keep\-dirs" 4
.IX Item "--no-keep-dirs"
.PD
Do not delete directories when done. This is useful if you want to inspect the directories used for various commands.
.PP
\fIPersistent Runner Options\fR
.IX Subsection "Persistent Runner Options"
.IP "\-\-quiet" 4
.IX Item "--quiet"
.PD 0
.IP "\-q" 4
.IX Item "-q"
.IP "\-\-no\-quiet" 4
.IX Item "--no-quiet"
.PD
Be very quiet.
.Sp
Can be specified multiple times
.PP
\fIRunner Options\fR
.IX Subsection "Runner Options"
.IP "\-\-blib" 4
.IX Item "--blib"
.PD 0
.IP "\-b" 4
.IX Item "-b"
.IP "\-\-no\-blib" 4
.IX Item "--no-blib"
.PD
(Default: include if it exists) Include 'blib/lib' and 'blib/arch' in your module path
.IP "\-\-cover" 4
.IX Item "--cover"
.PD 0
.IP "\-\-cover=\-silent,1,+ignore,^t/,+ignore,^t2/,+ignore,^xt,+ignore,^test.pl" 4
.IX Item "--cover=-silent,1,+ignore,^t/,+ignore,^t2/,+ignore,^xt,+ignore,^test.pl"
.IP "\-\-no\-cover" 4
.IX Item "--no-cover"
.PD
Use Devel::Cover to calculate test coverage. This disables forking. If no args are specified the following are used: \-silent,1,+ignore,^t/,+ignore,^t2/,+ignore,^xt,+ignore,^test.pl
.IP "\-\-daemon" 4
.IX Item "--daemon"
.PD 0
.IP "\-\-no\-daemon" 4
.IX Item "--no-daemon"
.PD
Start the runner as a daemon (Default: True)
.IP "\-\-event\-timeout \s-1SECONDS\s0" 4
.IX Item "--event-timeout SECONDS"
.PD 0
.IP "\-\-et \s-1SECONDS\s0" 4
.IX Item "--et SECONDS"
.IP "\-\-no\-event\-timeout" 4
.IX Item "--no-event-timeout"
.PD
Kill test if no output is received within timeout period. (Default: 60 seconds). Add the \*(L"# HARNESS-NO-TIMEOUT\*(R" comment to the top of a test file to disable timeouts on a per-test basis. This prevents a hung test from running forever.
.IP "\-\-include \s-1ARG\s0" 4
.IX Item "--include ARG"
.PD 0
.IP "\-\-include=ARG" 4
.IX Item "--include=ARG"
.IP "\-I \s-1ARG\s0" 4
.IX Item "-I ARG"
.IP "\-I=ARG" 4
.IX Item "-I=ARG"
.IP "\-\-no\-include" 4
.IX Item "--no-include"
.PD
Add a directory to your include paths
.Sp
Can be specified multiple times
.IP "\-\-job\-count \s-1ARG\s0" 4
.IX Item "--job-count ARG"
.PD 0
.IP "\-\-job\-count=ARG" 4
.IX Item "--job-count=ARG"
.IP "\-\-jobs \s-1ARG\s0" 4
.IX Item "--jobs ARG"
.IP "\-\-jobs=ARG" 4
.IX Item "--jobs=ARG"
.IP "\-j \s-1ARG\s0" 4
.IX Item "-j ARG"
.IP "\-j=ARG" 4
.IX Item "-j=ARG"
.IP "\-\-no\-job\-count" 4
.IX Item "--no-job-count"
.PD
Set the number of concurrent jobs to run (Default: 1)
.Sp
Can also be set with the following environment variables: \f(CW\*(C`YATH_JOB_COUNT\*(C'\fR, \f(CW\*(C`T2_HARNESS_JOB_COUNT\*(C'\fR, \f(CW\*(C`HARNESS_JOB_COUNT\*(C'\fR
.IP "\-\-lib" 4
.IX Item "--lib"
.PD 0
.IP "\-l" 4
.IX Item "-l"
.IP "\-\-no\-lib" 4
.IX Item "--no-lib"
.PD
(Default: include if it exists) Include 'lib' in your module path
.IP "\-\-nytprof" 4
.IX Item "--nytprof"
.PD 0
.IP "\-\-no\-nytprof" 4
.IX Item "--no-nytprof"
.PD
Use Devel::NYTProf on tests. This will set addpid=1 for you. This works with or without fork.
.IP "\-\-post\-exit\-timeout \s-1SECONDS\s0" 4
.IX Item "--post-exit-timeout SECONDS"
.PD 0
.IP "\-\-pet \s-1SECONDS\s0" 4
.IX Item "--pet SECONDS"
.IP "\-\-no\-post\-exit\-timeout" 4
.IX Item "--no-post-exit-timeout"
.PD
Stop waiting post-exit after the timeout period. (Default: 15 seconds) Some tests fork and allow the parent to exit before writing all their output. If Test2::Harness detects an incomplete plan after the test exits it will monitor for more events until the timeout period. Add the \*(L"# HARNESS-NO-TIMEOUT\*(R" comment to the top of a test file to disable timeouts on a per-test basis.
.IP "\-\-preload\-threshold \s-1ARG\s0" 4
.IX Item "--preload-threshold ARG"
.PD 0
.IP "\-\-preload\-threshold=ARG" 4
.IX Item "--preload-threshold=ARG"
.IP "\-\-Pt \s-1ARG\s0" 4
.IX Item "--Pt ARG"
.IP "\-\-Pt=ARG" 4
.IX Item "--Pt=ARG"
.IP "\-W \s-1ARG\s0" 4
.IX Item "-W ARG"
.IP "\-W=ARG" 4
.IX Item "-W=ARG"
.IP "\-\-no\-preload\-threshold" 4
.IX Item "--no-preload-threshold"
.PD
Only do preload if at least N tests are going to be run. In some cases a full preload takes longer than simply running the tests, this lets you specify a minimum number of test jobs that will be run for preload to happen. This has no effect for a persistent runner. The default is 0, and it means always preload.
.IP "\-\-preloads \s-1ARG\s0" 4
.IX Item "--preloads ARG"
.PD 0
.IP "\-\-preloads=ARG" 4
.IX Item "--preloads=ARG"
.IP "\-\-preload \s-1ARG\s0" 4
.IX Item "--preload ARG"
.IP "\-\-preload=ARG" 4
.IX Item "--preload=ARG"
.IP "\-P \s-1ARG\s0" 4
.IX Item "-P ARG"
.IP "\-P=ARG" 4
.IX Item "-P=ARG"
.IP "\-\-no\-preloads" 4
.IX Item "--no-preloads"
.PD
Preload a module before running tests
.Sp
Can be specified multiple times
.IP "\-\-resource Port" 4
.IX Item "--resource Port"
.PD 0
.IP "\-\-resource +Test2::Harness::Runner::Resource::Port" 4
.IX Item "--resource +Test2::Harness::Runner::Resource::Port"
.IP "\-R Port" 4
.IX Item "-R Port"
.IP "\-\-no\-resource" 4
.IX Item "--no-resource"
.PD
Use a resource module to assign resource assignments to individual tests
.Sp
Can be specified multiple times
.IP "\-\-switch \s-1ARG\s0" 4
.IX Item "--switch ARG"
.PD 0
.IP "\-\-switch=ARG" 4
.IX Item "--switch=ARG"
.IP "\-S \s-1ARG\s0" 4
.IX Item "-S ARG"
.IP "\-S=ARG" 4
.IX Item "-S=ARG"
.IP "\-\-no\-switch" 4
.IX Item "--no-switch"
.PD
Pass the specified switch to perl for each test. This is not compatible with preload.
.Sp
Can be specified multiple times
.IP "\-\-tlib" 4
.IX Item "--tlib"
.PD 0
.IP "\-\-no\-tlib" 4
.IX Item "--no-tlib"
.PD
(Default: off) Include 't/lib' in your module path
.IP "\-\-unsafe\-inc" 4
.IX Item "--unsafe-inc"
.PD 0
.IP "\-\-no\-unsafe\-inc" 4
.IX Item "--no-unsafe-inc"
.PD
perl is removing '.' from \f(CW@INC\fR as a security concern. This option keeps things from breaking for now.
.Sp
Can also be set with the following environment variables: \f(CW\*(C`PERL_USE_UNSAFE_INC\*(C'\fR
.IP "\-\-use\-fork" 4
.IX Item "--use-fork"
.PD 0
.IP "\-\-fork" 4
.IX Item "--fork"
.IP "\-\-no\-use\-fork" 4
.IX Item "--no-use-fork"
.PD
(default: on, except on windows) Normally tests are run by forking, which allows for features like preloading. This will turn off the behavior globally (which is not compatible with preloading). This is slower, it is better to tag misbehaving tests with the '# \s-1HARNESS\-NO\-PRELOAD\s0' comment in their header to disable forking only for those tests.
.Sp
Can also be set with the following environment variables: \f(CW\*(C`!T2_NO_FORK\*(C'\fR, \f(CW\*(C`T2_HARNESS_FORK\*(C'\fR, \f(CW\*(C`!T2_HARNESS_NO_FORK\*(C'\fR, \f(CW\*(C`YATH_FORK\*(C'\fR, \f(CW\*(C`!YATH_NO_FORK\*(C'\fR
.IP "\-\-use\-timeout" 4
.IX Item "--use-timeout"
.PD 0
.IP "\-\-timeout" 4
.IX Item "--timeout"
.IP "\-\-no\-use\-timeout" 4
.IX Item "--no-use-timeout"
.PD
(default: on) Enable/disable timeouts
.PP
\fIWorkspace Options\fR
.IX Subsection "Workspace Options"
.IP "\-\-clear" 4
.IX Item "--clear"
.PD 0
.IP "\-C" 4
.IX Item "-C"
.IP "\-\-no\-clear" 4
.IX Item "--no-clear"
.PD
Clear the work directory if it is not already empty
.IP "\-\-tmp\-dir \s-1ARG\s0" 4
.IX Item "--tmp-dir ARG"
.PD 0
.IP "\-\-tmp\-dir=ARG" 4
.IX Item "--tmp-dir=ARG"
.IP "\-\-tmpdir \s-1ARG\s0" 4
.IX Item "--tmpdir ARG"
.IP "\-\-tmpdir=ARG" 4
.IX Item "--tmpdir=ARG"
.IP "\-t \s-1ARG\s0" 4
.IX Item "-t ARG"
.IP "\-t=ARG" 4
.IX Item "-t=ARG"
.IP "\-\-no\-tmp\-dir" 4
.IX Item "--no-tmp-dir"
.PD
Use a specific temp directory (Default: use system temp dir)
.Sp
Can also be set with the following environment variables: \f(CW\*(C`T2_HARNESS_TEMP_DIR\*(C'\fR, \f(CW\*(C`YATH_TEMP_DIR\*(C'\fR, \f(CW\*(C`TMPDIR\*(C'\fR, \f(CW\*(C`TEMPDIR\*(C'\fR, \f(CW\*(C`TMP_DIR\*(C'\fR, \f(CW\*(C`TEMP_DIR\*(C'\fR
.IP "\-\-workdir \s-1ARG\s0" 4
.IX Item "--workdir ARG"
.PD 0
.IP "\-\-workdir=ARG" 4
.IX Item "--workdir=ARG"
.IP "\-w \s-1ARG\s0" 4
.IX Item "-w ARG"
.IP "\-w=ARG" 4
.IX Item "-w=ARG"
.IP "\-\-no\-workdir" 4
.IX Item "--no-workdir"
.PD
Set the work directory (Default: new temp directory)
.Sp
Can also be set with the following environment variables: \f(CW\*(C`T2_WORKDIR\*(C'\fR, \f(CW\*(C`YATH_WORKDIR\*(C'\fR
.PP
\fIYathUI Options\fR
.IX Subsection "YathUI Options"
.IP "\-\-yathui\-api\-key \s-1ARG\s0" 4
.IX Item "--yathui-api-key ARG"
.PD 0
.IP "\-\-yathui\-api\-key=ARG" 4
.IX Item "--yathui-api-key=ARG"
.IP "\-\-no\-yathui\-api\-key" 4
.IX Item "--no-yathui-api-key"
.PD
Yath-UI \s-1API\s0 key. This is not necessary if your Yath-UI instance is set to single-user
.IP "\-\-yathui\-grace" 4
.IX Item "--yathui-grace"
.PD 0
.IP "\-\-no\-yathui\-grace" 4
.IX Item "--no-yathui-grace"
.PD
If yath cannot connect to yath-ui it normally throws an error, use this to make it fail gracefully. You get a warning, but things keep going.
.IP "\-\-yathui\-long\-duration 10" 4
.IX Item "--yathui-long-duration 10"
.PD 0
.IP "\-\-no\-yathui\-long\-duration" 4
.IX Item "--no-yathui-long-duration"
.PD
Minimum duration length (seconds) before a test goes from \s-1MEDIUM\s0 to \s-1LONG\s0
.IP "\-\-yathui\-medium\-duration 5" 4
.IX Item "--yathui-medium-duration 5"
.PD 0
.IP "\-\-no\-yathui\-medium\-duration" 4
.IX Item "--no-yathui-medium-duration"
.PD
Minimum duration length (seconds) before a test goes from \s-1SHORT\s0 to \s-1MEDIUM\s0
.IP "\-\-yathui\-mode summary" 4
.IX Item "--yathui-mode summary"
.PD 0
.IP "\-\-yathui\-mode qvf" 4
.IX Item "--yathui-mode qvf"
.IP "\-\-yathui\-mode qvfd" 4
.IX Item "--yathui-mode qvfd"
.IP "\-\-yathui\-mode complete" 4
.IX Item "--yathui-mode complete"
.IP "\-\-no\-yathui\-mode" 4
.IX Item "--no-yathui-mode"
.PD
Set the upload mode (default 'qvfd')
.IP "\-\-yathui\-project \s-1ARG\s0" 4
.IX Item "--yathui-project ARG"
.PD 0
.IP "\-\-yathui\-project=ARG" 4
.IX Item "--yathui-project=ARG"
.IP "\-\-no\-yathui\-project" 4
.IX Item "--no-yathui-project"
.PD
The Yath-UI project for your test results
.IP "\-\-yathui\-retry" 4
.IX Item "--yathui-retry"
.PD 0
.IP "\-\-no\-yathui\-retry" 4
.IX Item "--no-yathui-retry"
.PD
How many times to try an operation before giving up
.Sp
Can be specified multiple times
.IP "\-\-yathui\-url http://my\-yath\-ui.com/..." 4
.IX Item "--yathui-url http://my-yath-ui.com/..."
.PD 0
.IP "\-\-uri http://my\-yath\-ui.com/..." 4
.IX Item "--uri http://my-yath-ui.com/..."
.IP "\-\-no\-yathui\-url" 4
.IX Item "--no-yathui-url"
.PD
Yath-UI url
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
