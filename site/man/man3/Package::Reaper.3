.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Package::Reaper 3"
.TH Package::Reaper 3 "2013-12-29" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Package::Reaper \- pseudo\-garbage\-collection for packages
.SH "VERSION"
.IX Header "VERSION"
version 1.106
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Package::Generator;
\&    use Package::Reaper;
\&
\&    {
\&      my $package = Package::Generator\->new_package;
\&      my $reaper  = Package::Reaper\->new($package);
\&      ...
\&    }
\&
\&    # at this point, $package stash has been deleted
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module allows you to create simple objects which, when destroyed, delete a
given package.  This lets you approximate lexically scoped packages.
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $reaper = Package::Reaper\->new($package);
.Ve
.PP
This returns the newly generated package reaper.  When the reaper goes out of
scope and is garbage collected, it will delete the symbol table entry for the
package.
.SS "package"
.IX Subsection "package"
.Vb 1
\&  my $package = $reaper\->package;
.Ve
.PP
This method returns the package which will be reaped.
.SS "is_armed"
.IX Subsection "is_armed"
.Vb 1
\&  if ($reaper\->is_armed) { ... }
.Ve
.PP
This method returns true if the reaper is armed and false otherwise.  Reapers
always start out armed.  A disarmed reaper will not actually reap when
destroyed.
.SS "disarm"
.IX Subsection "disarm"
.Vb 1
\&  $reaper\->disarm;
.Ve
.PP
This method disarms the reaper, so that it will not reap the package when it is
destroyed.
.SS "arm"
.IX Subsection "arm"
.Vb 1
\&  $reaper\->arm;
.Ve
.PP
This method arms the reaper, so that it will reap its package when it is
destroyed.  By default, new reapers are armed.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2005 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
