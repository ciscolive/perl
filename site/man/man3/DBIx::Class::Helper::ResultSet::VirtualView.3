.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Helper::ResultSet::VirtualView 3"
.TH DBIx::Class::Helper::ResultSet::VirtualView 3 "2020-03-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Helper::ResultSet::VirtualView \- Clean up your SQL namespace (DEPRECATED)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& # note that this is normally a component for a ResultSet
\& package MySchema::ResultSet::Bar;
\&
\& use strict;
\& use warnings;
\&
\& use parent \*(AqDBIx::Class::ResultSet\*(Aq;
\&
\& _\|_PACKAGE_\|_\->load_components(\*(AqHelper::ResultSet::VirtualView\*(Aq);
\&
\& # and then in code that uses the ResultSet Join with relation x
\& my $rs = $schema\->resultset(\*(AqBar\*(Aq)\->search({\*(Aqx.name\*(Aq => \*(Aqabc\*(Aq},{ join => \*(Aqx\*(Aq });
\&
\& # \*(Aqx\*(Aq now pollutes the query namespace
\&
\& # So the following works as expected
\& my $ok_rs = $rs\->search({\*(Aqx.other\*(Aq => 1});
\&
\& # But this doesn\*(Aqt: instead of finding a \*(AqBar\*(Aq related to two x rows (abc and
\& # def) we look for one row with contradictory terms and join in another table
\& # (aliased \*(Aqx_2\*(Aq) which we never use
\& my $broken_rs = $rs\->search({\*(Aqx.name\*(Aq => \*(Aqdef\*(Aq});
\&
\& my $rs2 = $rs\->as_virtual_view;
\&
\& # doesn\*(Aqt work \- \*(Aqx\*(Aq is no longer accessible in $rs2, having been sealed away
\& my $not_joined_rs = $rs2\->search({\*(Aqx.other\*(Aq => 1});
\&
\& # works as expected: finds a \*(Aqtable\*(Aq row related to two x rows (abc and def)
\& my $correctly_joined_rs = $rs2\->search({\*(Aqx.name\*(Aq => \*(Aqdef\*(Aq});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This component is will allow you to clean up your \s-1SQL\s0 namespace.  See
\&\*(L"\s-1NOTE\*(R"\s0 in DBIx::Class::Helper::ResultSet for a nice way to apply it to your
entire schema.
.SH "DEPRECATED"
.IX Header "DEPRECATED"
This component has been suplanted by
DBIx::Class::ResultSet::as_subselect_rs.  In the next major version
(3) we will begin issuing a warning on it's use.  In the major version after
that (4) we will remove it entirely.
.SH "METHODS"
.IX Header "METHODS"
.SS "as_virtual_view"
.IX Subsection "as_virtual_view"
Act as a barrier to \s-1SQL\s0 symbols.  The resultset provided will be made into a
\&\*(L"virtual view\*(R" by including it as a subquery within the from clause.  From this
point on, any joined tables are inaccessible to \->search on the resultset (as if
it were simply where-filtered without joins).  See \*(L"\s-1SYNOPSIS\*(R"\s0 for example.
.SH "NOTE"
.IX Header "NOTE"
You don't \fIhave\fR to use this as a Component.  If you prefer you can use it
in the following manner:
.PP
.Vb 2
\& # in code using ResultSet:
\& use DBIx::Class:Helper::VirtualView;
\&
\& my $new_rs = DBIx::Class::Helper::VirtualView::as_virtual_view($rs);
.Ve
.SH "THANKS"
.IX Header "THANKS"
Thanks to ijw from #dbix\-class for the idea for this helper (originally called
seal), most of the code, and most of the documentation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Arthur Axel \*(L"fREW\*(R" Schmidt <frioux+cpan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Arthur Axel \*(L"fREW\*(R" Schmidt.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
