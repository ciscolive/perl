.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::OnFork 3"
.TH Mojolicious::Plugin::OnFork 3 "2017-05-08" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::OnFork \- Do Something Whenever a Worker Starts
.SH "VERSION"
.IX Header "VERSION"
Version 0.006
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # Mojolicious
\&  $self\->plugin(\*(AqOnFork\*(Aq => sub { srand })
\&    if $ENV{HYPNOTOAD_APP};
\&
\&  # Mojolicious::Lite
\&  plugin OnFork => sub { srand }
\&    if $ENV{HYPNOTOAD_APP};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::OnFork is a plugin to easily define code, that
is executed whenever a new worker process of the web server forks.
.PP
All this plugin actually does is
.PP
.Vb 1
\&  Mojo::IOLoop\->timer(0 => $code)
.Ve
.PP
The motivation for this plugin was, that hypnotoad does not guarantee
to call \*(L"srand\*(R" in perlfunc after a \*(L"fork\*(R" in perlfunc, so worker processes
might all get the same sequence of \*(L"random\*(R" numbers from \*(L"rand\*(R" in perlfunc.
.PP
Starting with Mojolicious 5.76 \f(CW\*(C`srand\*(C'\fR is actually called after a fork,
but this fact is not officially documented and according to the author can
be removed in the future without any previous notice.
.PP
As a consequence depending on the Mojolicious version and for this use
case \f(CW\*(C`srand\*(C'\fR might be called twice after a worker starts.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::OnFork inherits all methods from
Mojolicious::Plugin and implements the following new ones.
.ie n .SS """register"""
.el .SS "\f(CWregister\fP"
.IX Subsection "register"
Register plugin hooks in Mojolicious application.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious,
<https://github.com/kraih/mojo/issues/402>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bernhard Graf <graf(a)cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2012 \- 2017 Bernhard Graf
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
