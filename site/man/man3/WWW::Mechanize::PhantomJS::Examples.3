.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::Mechanize::PhantomJS::Examples 3"
.TH WWW::Mechanize::PhantomJS::Examples 3 "2020-09-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Examples \- WWW::Mechanize::PhantomJS example programs.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a documentation only module showing the examples that are
included in the WWW::Mechanize::PhantomJS distribution.
.PP
This file was auto-generated via the \f(CW\*(C`gen_examples_pod.pl\*(C'\fR
program that is also included in the examples directory.
.SH "Example programs"
.IX Header "Example programs"
The following is a list of the 4 example programs that are included in the WWW::Mechanize::PhantomJS distribution.
.IP "\(bu" 4
\&\*(L"Example: url\-to\-image.pl\*(R" Take a screenshot of a website
.IP "\(bu" 4
\&\*(L"Example: html\-to\-pdf.pl\*(R" Convert \s-1HTML\s0 to \s-1PDF\s0
.IP "\(bu" 4
\&\*(L"Example: dump\-links.pl\*(R" Dump links on a webpage
.IP "\(bu" 4
\&\*(L"Example: javascript.pl\*(R" Execute Javascript in the webpage context
.SS "Example: url\-to\-image.pl"
.IX Subsection "Example: url-to-image.pl"
.Vb 4
\&    use strict;
\&    use File::Spec;
\&    use File::Basename \*(Aqdirname\*(Aq;
\&    use WWW::Mechanize::PhantomJS;
\&    
\&    my $mech = WWW::Mechanize::PhantomJS\->new(
\&        launch_arg => [\*(Aqghostdriver/src/main.js\*(Aq ],
\&    );
\&    
\&    sub show_screen() {
\&        my $page_png = $mech\->content_as_png();
\&    
\&        my $fn= File::Spec\->rel2abs(dirname($0)) . "/screen.png";
\&        open my $fh, \*(Aq>\*(Aq, $fn
\&            or die "Couldn\*(Aqt create \*(Aq$fn\*(Aq: $!";
\&        binmode $fh, \*(Aq:raw\*(Aq;
\&        print $fh $page_png;
\&        close $fh;
\&        
\&        #system(qq(start "Progress" "$fn"));
\&    };
\&    
\&    $mech\->get(\*(Aqhttp://act.yapc.eu/gpw2014\*(Aq);
\&    
\&    show_screen;
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-PhantomJS\-0.24/examples/url\-to\-image.pl>
.SS "Example: html\-to\-pdf.pl"
.IX Subsection "Example: html-to-pdf.pl"
.Vb 3
\&    #!perl \-w
\&    use strict;
\&    use WWW::Mechanize::PhantomJS;
\&    
\&    my $mech = WWW::Mechanize::PhantomJS\->new(
\&        launch_arg => [\*(Aqghostdriver/src/main.js\*(Aq ],
\&    );
\&    
\&    for my $url (@ARGV) {
\&        print "Loading $url";
\&        $mech\->get($url);
\&    
\&        my $fn= \*(Aqscreen.pdf\*(Aq;
\&        my $page_pdf = $mech\->content_as_pdf(
\&            filename => $fn,
\&        );
\&        print "\enSaved $url as $fn\en";
\&    };
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-PhantomJS\-0.24/examples/html\-to\-pdf.pl>
.SS "Example: dump\-links.pl"
.IX Subsection "Example: dump-links.pl"
.Vb 2
\&    use strict;
\&    use WWW::Mechanize::PhantomJS;
\&    
\&    my $mech = WWW::Mechanize::PhantomJS\->new(
\&        launch_arg => [\*(Aqghostdriver/src/main.js\*(Aq ],
\&    );
\&    
\&    $mech\->get_local(\*(Aqlinks.html\*(Aq);
\&    
\&    sleep 5;
\&    
\&    print $_\->get_attribute(\*(Aqhref\*(Aq), "\en\et\-> ", $_\->get_attribute(\*(AqinnerHTML\*(Aq), "\en"
\&      for $mech\->selector(\*(Aqa.download\*(Aq);
\&    
\&    =head1 NAME
\&    
\&    dump\-links.pl \- Dump links on a webpage
\&    
\&    =head1 SYNOPSIS
\&    
\&    dump\-links.pl
\&    
\&    =head1 DESCRIPTION
\&    
\&    This program demonstrates how to read elements out of the PhantomJS
\&    DOM and how to get at text within nodes.
\&    
\&    =cut
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-PhantomJS\-0.24/examples/dump\-links.pl>
.SS "Example: javascript.pl"
.IX Subsection "Example: javascript.pl"
.Vb 3
\&    #!perl \-w
\&    use strict;
\&    use WWW::Mechanize::PhantomJS;
\&    
\&    my $mech = WWW::Mechanize::PhantomJS\->new(
\&        launch_arg => [\*(Aqghostdriver/src/main.js\*(Aq ],
\&    );
\&    
\&    
\&    $mech\->get_local(\*(Aqlinks.html\*(Aq);
\&    
\&    print $mech\->eval_in_page(<<\*(AqJS\*(Aq);
\&        ["Just","another","Perl","Hacker"].join(" ");
\&    JS
\&    
\&    =head1 NAME
\&    
\&    javascript.pl \- execute Javascript in a page
\&    
\&    =head1 SYNOPSIS
\&    
\&    javascript.pl
\&    
\&    =head1 DESCRIPTION
\&    
\&    B<This program> demonstrates how to execute simple
\&    Javascript in a page.
\&    
\&    =cut
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-PhantomJS\-0.24/examples/javascript.pl>
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR
.PP
Contributed examples contain the original author's name.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2009\-2020 by Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR.
.PP
All Rights Reserved. This module is free software. It may be used, redistributed and/or modified under the same terms as Perl itself.
