.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::App::Command::build 3"
.TH Dist::Zilla::App::Command::build 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::App::Command::build \- build your dist
.SH "VERSION"
.IX Header "VERSION"
version 6.017
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  dzil build [ \-\-trial ] [ \-\-tgz | \-\-no\-tgz ] [ \-\-in /path/to/build/dir ]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This command is a very thin layer over the Dist::Zilla \f(CW\*(C`build\*(C'\fR method, which
does all the things required to build your distribution.  By default, it will
also archive your distribution and leave you with a complete, ready-to-release
distribution tarball.
.PP
To go a bit further in depth, the \f(CW\*(C`build\*(C'\fR command will do two things:
.IP "\(bu" 4
Generate a directory containing your module, \f(CW\*(C`Foo\-0.100\*(C'\fR. This directory is
complete. You could create a gzipped tarball from this directory and upload it
directly to \f(CW\*(C`PAUSE\*(C'\fR if you so desired. You could \f(CW\*(C`cd\*(C'\fR into this directory and
test your module on Perl installations where you don't have \f(CW\*(C`Dist::Zilla\*(C'\fR, for
example.
.Sp
This is a default behavior of the \f(CW\*(C`build\*(C'\fR command. You can alter where it puts
the directory with \f(CW\*(C`\-\-in /path/to/build/dir\*(C'\fR.
.IP "\(bu" 4
Generate a gzipped tarball of your module, \f(CW\*(C`Foo\-0.100.tar.gz\*(C'\fR. This file
could be uploaded directly to \f(CW\*(C`PAUSE\*(C'\fR to make a release of your module if you
wanted. Or, you can test your module: \f(CW\*(C`cpanm \-\-test\-only Foo\-0.100.tar.gz\*(C'\fR.
This is the same thing you would get if you compressed the directory described
above.
.Sp
The gzipped tarball is generated by default, but if you don't want it to be
generated, you can pass the \f(CW\*(C`\-\-no\-tgz\*(C'\fR option. In that case, it would only
generate the directory described above.
.PP
Once you're done testing or publishing your build, you can clean up everything
with a \f(CW\*(C`dzil clean\*(C'\fR.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 3
\&  $ dzil build
\&  $ dzil build \-\-no\-tgz
\&  $ dzil build \-\-in /path/to/build/dir
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "\-\-trial"
.IX Subsection "--trial"
This will build a trial distribution.  Among other things, it will generally
mean that the built tarball's basename ends in \fI\-TRIAL\fR.
.SS "\-\-tgz | \-\-no\-tgz"
.IX Subsection "--tgz | --no-tgz"
Builds a .tar.gz in your project directory after building the distribution.
.PP
\&\-\-tgz behaviour is by default, use \-\-no\-tgz to disable building an archive.
.SS "\-\-in"
.IX Subsection "--in"
Specifies the directory into which the distribution should be built.  If
necessary, the directory will be created.  An archive will not be created.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 üòè <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
