.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Browserify::Processor 3"
.TH Mojolicious::Plugin::Browserify::Processor 3 "2014-12-21" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Browserify::Processor \- An AssetPack processor for browserify
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::Browserify::Processor is a
Mojolicious::Plugin::AssetPack preprocessor.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojolicious::Lite;
\&
\&  plugin "AssetPack";
\&  app\->asset\->preprocessors\->remove($_) for qw( js jsx );
\&
\&  my $browserify = Mojolicious::Plugin::Browserify::Processor\->new;
\&  app\->asset\->preprocessors\->add($browserify);
\&  app\->asset("app.js" => "/js/main.js");
\&
\&  get "/app" => "app_js_inlined";
\&  app\->start;
\&
\&  _\|_DATA_\|_
\&  @@ app_js_inlined.js.ep
\&  %= asset "app.js" => {inline => 1}
.Ve
.PP
See also Mojolicious::Plugin::Browserify for a simpler \s-1API.\s0
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "browserify_args"
.IX Subsection "browserify_args"
.Vb 2
\&  $array_ref = $self\->browserify_args;
\&  $self= $self\->browserify_args([ \-g => "reactify" ]);
.Ve
.PP
Command line arguments that will be passed on to \f(CW\*(C`browserify\*(C'\fR.
.SS "environment"
.IX Subsection "environment"
.Vb 2
\&  $str = $self\->environment;
\&  $self = $self\->environment($str);
.Ve
.PP
Should be either \*(L"production\*(R" or \*(L"development\*(R" (default). This variable will
be passed on as \f(CW\*(C`NODE_ENV\*(C'\fR to \f(CW\*(C`browserify\*(C'\fR.
.SS "extensions"
.IX Subsection "extensions"
.Vb 2
\&  $array_ref = $self\->extensions;
\&  $self = $self\->extensions([qw( js jsx )]);
.Ve
.PP
Specifies the extensions browserify should look for.
.SS "executable"
.IX Subsection "executable"
.Vb 1
\&  $path = $self\->executable;
.Ve
.PP
Holds the path to the \*(L"browserify\*(R" executable. Default to just \*(L"browserify\*(R".
\&\f(CW\*(C`browserify\*(C'\fR can also be found in \f(CW\*(C`./node_modules/.bin/browserify\*(C'\fR, in the
current project directory.
.SH "METHODS"
.IX Header "METHODS"
.SS "can_process"
.IX Subsection "can_process"
.Vb 1
\&  $bool = $self\->can_process;
.Ve
.PP
Returns true if browserify can be executed.
.SS "checksum"
.IX Subsection "checksum"
.Vb 1
\&  $str = $self\->checksum($text, $path);
.Ve
.PP
Returns the checksum for a given chunk of \f(CW$text\fR. \f(CW$text\fR is a
scalar ref containing the text from the asset. The default is
to use \*(L"md5_sum\*(R" in Mojo::Util.
.SS "process"
.IX Subsection "process"
Used to process the JavaScript using \f(CW\*(C`browserify\*(C'\fR.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2014, Jan Henning Thorsen
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jan Henning Thorsen \- \f(CW\*(C`jhthorsen@cpan.org\*(C'\fR
