.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::CLI::Command 3"
.TH Term::CLI::Command 3 "2019-11-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::CLI::Command \- Class for (sub\-)commands in Term::CLI
.SH "VERSION"
.IX Header "VERSION"
version 0.051007
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Term::CLI::Command;
\& use Term::CLI::Argument::Filename;
\& use Data::Dumper;
\&
\& my $copy_cmd = Term::CLI::Command\->new(
\&    name => \*(Aqcopy\*(Aq,
\&    options => [ \*(Aqverbose!\*(Aq ],
\&    arguments => [
\&        Term::CLI::Argument::Filename\->new(name => \*(Aqsrc\*(Aq),
\&        Term::CLI::Argument::Filename\->new(name => \*(Aqdst\*(Aq),
\&    ],
\&    callback => sub {
\&        my ($self, %args) = @_;
\&        print Data::Dumper\->Dump([\e%args], [\*(Aqargs\*(Aq]);
\&        return (%args, status => 0);
\&    }
\& );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Class for command elements in Term::CLI(3p).
.SH "CLASS STRUCTURE"
.IX Header "CLASS STRUCTURE"
.SS "Inherits from:"
.IX Subsection "Inherits from:"
Term::CLI::Element(3p).
.SS "Consumes:"
.IX Subsection "Consumes:"
Term::CLI::Role::ArgumentSet(3p),
Term::CLI::Role::CommandSet(3p),
Term::CLI::Role::HelpText(3p).
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.IP "\fBnew\fR ( \fBname\fR => \fI\s-1VARNAME\s0\fR ... )" 4
.IX Xref "new"
.IX Item "new ( name => VARNAME ... )"
Create a new \f(CW\*(C`Term::CLI::Command\*(C'\fR object and return a reference
to it.
.Sp
The \fBname\fR attribute is required.
.Sp
Other attributes are:
.RS 4
.IP "\fBarguments\fR => \fIArrayRef\fR" 4
.IX Item "arguments => ArrayRef"
Reference to an array containing Term::CLI::Argument(3p) object
instances that describe the parameters that the command takes,
or \f(CW\*(C`undef\*(C'\fR.
.Sp
See also Term::CLI::Role::ArgumentSet.
.IP "\fBcallback\fR => \fICodeRef\fR" 4
.IX Item "callback => CodeRef"
Reference to a subroutine that should be called when the command
is executed, or \f(CW\*(C`undef\*(C'\fR.
.IP "\fBcommands\fR => \fIArrayRef\fR" 4
.IX Item "commands => ArrayRef"
Reference to an array containing \f(CW\*(C`Term::CLI::Command\*(C'\fR object
instances that describe the sub-commands that the command takes,
or \f(CW\*(C`undef\*(C'\fR.
.Sp
See also Term::CLI::Role::ArgumentSet.
.IP "\fBoptions\fR => \fIArrayRef\fR" 4
.IX Item "options => ArrayRef"
Reference to an array containing command options in
Getopt::Long(3p) style, or \f(CW\*(C`undef\*(C'\fR.
.IP "\fBdescription\fR => \fIStr\fR" 4
.IX Item "description => Str"
Extended description of the command.
.Sp
See also Term::CLI::Role::HelpText.
.IP "\fBsummary\fR => \fIStr\fR" 4
.IX Item "summary => Str"
Short description of the command.
.Sp
See also Term::CLI::Role::HelpText.
.IP "\fBusage\fR => \fIStr\fR" 4
.IX Item "usage => Str"
Static usage summary of the command.
.Sp
See also Term::CLI::Role::HelpText.
.Sp
(\fB\s-1NOTE:\s0\fR You will rarely have to specify this, as it can be determined
automatically.)
.RE
.RS 4
.RE
.SH "INHERITED METHODS"
.IX Header "INHERITED METHODS"
This class inherits all the attributes and accessors of
Term::CLI::Element(3p),
Term::CLI::Role::CommandSet(3p),
Term::CLI::Role::HelpText(3p),
and
Term::CLI::Role::ArgumentSet(3p),
most notably:
.SS "Accessors"
.IX Subsection "Accessors"
.IP "\fBhas_arguments\fR" 4
.IX Xref "has_arguments"
.IX Item "has_arguments"
See
has_arguments in Term::CLI::Role::ArgumentSet.
.IP "\fBhas_callback\fR" 4
.IX Xref "has_callback"
.IX Item "has_callback"
See
has_callback in Term::CLI::Role::CommandSet.
.IP "\fBhas_commands\fR" 4
.IX Xref "has_commands"
.IX Item "has_commands"
See
has_commands in Term::CLI::Role::CommandSet.
.IP "\fBarguments\fR" 4
.IX Xref "arguments"
.IX Item "arguments"
See
arguments in Term::CLI::Role::ArgumentSet.
.Sp
Returns a list of \f(CW\*(C`Term::CLI::Argument\*(C'\fR object instances.
.IP "\fBcommands\fR" 4
.IX Xref "commands"
.IX Item "commands"
See
commands in Term::CLI::Role::CommandSet.
.Sp
Returns a list of \f(CW\*(C`Term::CLI::Command\*(C'\fR object instances.
.IP "\fBcallback\fR ( [ \fICodeRef\fR ] )" 4
.IX Xref "callback"
.IX Item "callback ( [ CodeRef ] )"
See
callback in Term::CLI::Role::CommandSet.
.IP "\fBdescription\fR ( [ \fIStr\fR ] )" 4
.IX Xref "description"
.IX Item "description ( [ Str ] )"
See
description in Term::CLI::Role::HelpText.
.IP "\fBsummary\fR ( [ \fIStr\fR ] )" 4
.IX Xref "summary"
.IX Item "summary ( [ Str ] )"
See
summary in Term::CLI::Role::HelpText.
.IP "\fBusage\fR ( [ \fIStr\fR ] )" 4
.IX Xref "usage"
.IX Item "usage ( [ Str ] )"
See
description in Term::CLI::Role::HelpText.
.SS "Others"
.IX Subsection "Others"
.IP "\fBargument_names\fR" 4
.IX Xref "argument_names"
.IX Item "argument_names"
Return the list of argument names, in the original order.
.IP "\fBcommand_names\fR" 4
.IX Xref "command_names"
.IX Item "command_names"
Return the list of (sub\-)command names, sorted alphabetically.
.IP "\fBfind_command\fR ( \fI\s-1CMD\s0\fR )" 4
.IX Xref "find_command"
.IX Item "find_command ( CMD )"
Check whether \fI\s-1CMD\s0\fR is a sub-command of this command. If so,
return the appropriate \f(CW\*(C`Term::CLI::Command\*(C'\fR reference; otherwise,
return \f(CW\*(C`undef\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.SS "Accessors"
.IX Subsection "Accessors"
.IP "\fBhas_options\fR" 4
.IX Xref "has_options"
.IX Item "has_options"
Predicate functions that return whether or not the associated
attribute has been set.
.IP "\fBoptions\fR ( [ \fIArrayRef\fR ] )" 4
.IX Xref "options"
.IX Item "options ( [ ArrayRef ] )"
\&\fIArrayRef\fR with command-line options in Getopt::Long(3p) format.
.SS "Others"
.IX Subsection "Others"
.IP "\fBcomplete_line\fR ( \fI\s-1CLI\s0\fR, \fI\s-1WORD\s0\fR, ... )" 4
.IX Xref "complete_line"
.IX Item "complete_line ( CLI, WORD, ... )"
\&\fI\s-1CLI\s0\fR is a reference to the top-level Term::CLI instance.
.Sp
The \fI\s-1WORD\s0\fR arguments make up the parameters to this command.
Given those, this method attempts to generate possible completions
for the last \fI\s-1WORD\s0\fR in the list.
.Sp
The method can complete options, sub-commands, and arguments.
Completions of commands and arguments is delegated to the appropriate
Term::CLI::Command and Term::CLI::Argument instances, resp.
.IP "\fBoption_names\fR" 4
.IX Xref "option_names"
.IX Item "option_names"
Return a list of all command line options for this command.
Long options are prefixed with \f(CW\*(C`\-\-\*(C'\fR, and one-letter options
are prefixed with \f(CW\*(C`\-\*(C'\fR.
.Sp
Example:
.Sp
.Vb 3
\&    $cmd\->options( [ \*(Aqverbose|v+\*(Aq, \*(Aqdebug|d\*(Aq, \*(Aqhelp|h|?\*(Aq ] );
\&    say join(\*(Aq \*(Aq, $cmd\->option_names);
\&    # output: \-\-debug \-\-help \-\-verbose \-? \-d \-h \-v
.Ve
.IP "\fBexecute\fR ( \fI\s-1ARGS\s0\fR )" 4
.IX Item "execute ( ARGS )"
This method is called by Term::CLI::execute. It
should not be called directly.
.Sp
It accepts the same list of parameters as the 
command callback
function (see
Term::CLI::Role::CommandSet), and returns the same structure.
.Sp
The \f(CW\*(C`arguments\*(C'\fR \fIArrayRef\fR should contain the words on the command line
that have not been parsed yet.
.Sp
Depending on whether the object has sub-commands or arguments, the rest of
the line is parsed (possibly handing off to another sub-command), and the
results are passed to the
command's callback
function.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Term::CLI::Argument(3p),
Term::CLI::Element(3p),
Term::CLI::Role::ArgumentSet(3p),
Term::CLI::Role::CommandSet(3p),
Term::CLI::Role::HelpText(3p),
Term::CLI(3p),
Getopt::Long(3p).
.SH "AUTHOR"
.IX Header "AUTHOR"
Steven Bakker <sbakker@cpan.org>, 2018.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2018 Steven Bakker
.PP
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See \*(L"perldoc perlartistic.\*(R"
.PP
This software is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
