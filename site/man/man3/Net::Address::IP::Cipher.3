.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Address::IP::Cipher 3"
.TH Net::Address::IP::Cipher 3 "2018-05-24" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Address::IP::Cipher \- IPv6 / IPv4 address encryption to a valid
address, for pseudo anonymization.
.SH "VERSION"
.IX Header "VERSION"
Version 0.4
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Net::Address::IP::Cipher encrypts and decrypts IPv6 and IPv4 addresses
to another valid IPv6/v4 address, using a secret key, in a way that's
impossible to guess the original \s-1IP\s0 without the key.
.PP
.Vb 1
\&    use Net::Address::IP::Cipher;
\&
\&    my $ipcipher = Net::Address::IP::Cipher\->new(
\&        password => \*(Aqsuper secret\*(Aq
\&    );
\&    my $enc = $ipcipher\->enc(\*(Aq::1\*(Aq);
\&    print $enc; # 3a3e:7137:6e36:5ecd:4d31:e516:cf47:ec1b
.Ve
.PP
It's intended use is to pseudo-anonymize IPs from logs, packet captures,
and other analysis. By this way you benefit of having still valid \s-1IP\s0
addresses and be able to group streams of several messagess, but without
revealing the source.
.PP
This module implements in native perl language the \*(L"ipcipher\*(R"
specification from:
   <https://github.com/PowerDNS/ipcipher>
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
This module requires Net::IP for v6/v4 handling and CryptX for
all crypto stuff (Crypt::KeyDerivation, Crypt::Cipher::AES).
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Creates a new Net::Address::IP::Cipher object. You must indicate
the secret key for encryption/decryption:
.PP
.Vb 1
\&  my $ipcipher = Net::Address::IP::Cipher\->new(password => \*(Aqsuper secret\*(Aq);
.Ve
.PP
The key should be declared in either one of two formats:
.PP
.Vb 1
\&  password => \*(Aqsuper secret\*(Aq
.Ve
.PP
for any string used as a password, or
.PP
.Vb 1
\&  barekey => \*(Aqbb8dcd7be9a6f43b3304c640d7d7103c\*(Aq
.Ve
.PP
for an hexadecimal representation of a 128\-bit key.
.PP
If you provide both, just the 'password' format will be used.
.SS "enc"
.IX Subsection "enc"
Receive an IPv6 or IPv4 string address, in any valid format
for Net::IP, and returns the encrypted version as string.
.PP
.Vb 2
\&    my $enc = $ipcipher\->enc(\*(Aq::1\*(Aq);
\&    print $enc;  # b733:fb7:c957:82fc:3d67:e7c3:a667:28da
.Ve
.SS "dec"
.IX Subsection "dec"
Receive and IPv6 or IPv4 string address in its encrypted version,
and returns the decrypted \s-1IP\s0 string.
.PP
.Vb 2
\&    my $dec = $ipcipher\->dec(\*(Aqb733:fb7:c957:82fc:3d67:e7c3:a667:28da\*(Aq);
\&    print $dec;  # ::1
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Hugo Salgado, \f(CW\*(C`<hsalgado at vulcano.cl>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-net\-address\-ip\-cipher at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Net\-Address\-IP\-Cipher>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Net::Address::IP::Cipher
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Net\-Address\-IP\-Cipher>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Net\-Address\-IP\-Cipher>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Net\-Address\-IP\-Cipher>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Net\-Address\-IP\-Cipher/>
.SH "REPOSITORY"
.IX Header "REPOSITORY"
<https://github.com/huguei/p5\-Net\-Address\-IP\-Cipher>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
The v4 version is based on the original ipcrypt python version from
Jean-Philippe Aumasson:
   <https://github.com/veorq/ipcrypt>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2018 Hugo Salgado.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS\s0' \s-1AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR\s0 NON-INFRINGEMENT \s-1ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
