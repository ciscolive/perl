.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "JUNOS::Access 3"
.TH JUNOS::Access 3 "2003-03-02" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JUNOS::Access \- Implement the Access Method superclass.  All Access Method
classes must subclass from JUNOS::Access.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This example is extracted from Device.pm.  It creates an Access object
based on the access method type specified in \f(CW$self\fR (a reference to
a hash table containing information such as login, password, access
method type and destination hostname).  Then it starts a session with
the JUNOScript server at the destination host by calling the connect
method in the access object.  After the session is established, it 
goes on to perform the initial handshake with the JUNOScript server.
.PP
.Vb 1
\&    my $conn = new JUNOS::Access($self);
\&
\&    # Need better error handling here....
\&    ref($conn) || die "Could not open connection";
\&
\&    # Record the connection; connect it, mark it
\&    $self\->{JUNOS_Conn} = $conn;
\&    $conn\->connect() || die "Could not connect";
\&    $self\->{JUNOS_Connected} = 1;
\&
\&    # Kick off the XML parser
\&    $self\->parse_start();
\&    
\&    trace("Trace", "starting connect::\en");
\&
\&    # We need to receive the server side of the initial handshake first
\&    # (at least the <?xml?> part), so that we can avoid sending our
\&    # handshake to the ssh processes initial prompts (password/etc).
\&
\&    # So we wait til we see the start of the real XML data flow....
\&    until ($self\->{JUNOS_Active}) {
\&        my $in = $conn\->recv();
\&    
\&        my $waiting = \*(Aqwaiting for xml\*(Aq;
\&        if( $conn\->{seen_xml} ) { $waiting = \*(Aqfound xml\*(Aq; }
\&        trace("IO", "during connect \- ($waiting) input:\en\et$in\en" );
\&
\&        if ($conn\->{seen_xml}) {
\&            # After we\*(Aqve seen xml, parse anything
\&        } elsif ($in =~ /<\es*\e?/) {
\&            $in =~ s/^[\ed\eD]*(<\es*\e?)/$1/;
\&            $conn\->{seen_xml} = 1;
\&        } else {
\&            if (not $conn\->incoming($in) or $conn\->eof) {
\&                $self\->disconnect;
\&                return undef;
\&            }
\&            next;
\&        }
\&
\&        if ($conn\->eof) {
\&            $self\->parse_done($in);
\&            last;
\&        } else {
\&            $self\->parse_more($in);
\&        }
\&    }
\&
\&    # Send our half of the initial handshake
\&    my $xml_decl = \*(Aq<?xml version="1.0" encoding="us\-ascii"?>\*(Aq;
\&    my $junoscript = \*(Aq<junoscript version="1.0" os="perl\-api">\*(Aq;
\&
\&    $conn\->send($xml_decl . "\en" . $junoscript . "\en");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an internal class used by JUNOS::Device only.  Its constructor
returns an access method class based on the access method specified by
JUNOS::Device.  If the access method 'telnet' is selected, an object
of class JUNOS::Access::telnet will be returned.  Once JUNOS::Device
has the reference to the new access method object, it uses it to 
make connection, and exchange information with the destination.
.PP
All access method classes (e.g. JUNOS::Access::telnet) must subclass
from JUNOS::Access.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
new($ARGS)
.PP
The constructor of JUNOS::Access simply looks at the access method type
and creates and returns an object of class JUNOS::Access::<access_method> 
(e.g. JUNOS::Access::telnet).  \f(CW$CLASS\fR is the prefix for the access
method class, \*(L"$CLASS::$access\*(R".  \f(CW$ARGS\fR is the reference to a hash 
table containing the type of the access method, this hash table is 
supplied by the application while calling the constructor of JUNOS::Device.
.SH "METHODS"
.IX Header "METHODS"
connect(%ARGS)
.PP
This method is called to start a session with the destination host.
Internally, this method simplies calls the start method which is
always overloaded by the subclass.
.PP
\&\s-1ARGS\s0 is a hash table containing additional input parameters to 
establish the session.  See the individual access method subclass
to see if additional iput parameters are accepted.
.PP
\&\fBdisconnect()\fR
.PP
shutdown the underlying mechanics and free/destory them.  This
method should be overloaded by the subclass.  If not overloaded,
it simplies kill the process that it started for the current 
session, which works for telnet and rsh.
.PP
\&\fBeof()\fR
.PP
Has the end-of-file been seen?
.PP
\&\fBincoming()\fR
.PP
Feed data back to the access method when JUNOS::Device finds something 
that it doesn't understand.  This is to have the access method object
parse the connection specific messages, such as 'Host not found'.
These messages are specific to the access method type so the incoming
method is always overridden by the subclass.  If the underlying code
used by the subclass already deals with errors in \fBconnect()\fR, \fBrecv()\fR
or \fBsend()\fR, then this can be a \s-1NOP\s0 method.
.PP
\&\fBrecv()\fR
.PP
read the next chunk of data.
.PP
send($DATA)
.PP
send data to the JUNOScript server.
.PP
start(%ARGS)
.PP
To be overloaded by subclass to start the underlaying mechanics
to open a session with the JUNOScript server at the destination.
.PP
\&\s-1ARGS\s0 is a hash table containing additional input parameters to 
establish the session.  See the individual access method subclass
to see if additional iput parameters are accepted.
.PP
start_command($ACCESS, \f(CW@FLAGS\fR, \f(CW$WHO\fR, \f(CW$EXEC\fR)
.PP
This method is called by the subclass of JUNOS::Access to start
a telnet or rsh session.
.PP
\&\fBstart_command_sockets()\fR
.PP
This method is called by the subclass to start a command using 
unix-domain socket pairs; it is currently not used.
.PP
The following hash keys are used by JUNOS::Device.
.PP
seen_xml
.PP
Whether the <xml> element has been received.
.PP
seen_eof
.PP
Whether eof has been received.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 5
\&    JUNOS::Device
\&    JUNOS::Access::rsh
\&    JUNOS::Access::ssh
\&    JUNOS::Access::ssl
\&    JUNOS::Access::telnet
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Juniper Junoscript Perl Team, send bug reports, hints, tips, and suggestions 
to support@juniper.net.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001 Juniper Networks, Inc.  All rights reserved.
