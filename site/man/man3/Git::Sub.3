.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Git::Sub 3"
.TH Git::Sub 3 "2016-11-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Git::Sub \- git commands imported as System::Sub subs in the git:: namespace
.SH "VERSION"
.IX Header "VERSION"
version 0.163320
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Git::Sub qw(clone tag push);
\&
\&    # Git commands are now Perl subs
\&    git::clone \*(Aqgit://github.com/dolmen/p5\-Git\-Sub.git\*(Aq;
\&
\&    git::tag \-a => \-m => "Release v$version", "v$version";
\&
\&    git::push qw(\-\-tags origin master);
\&
\&    # Commands names with \*(Aq\-\*(Aq are imported with \*(Aq_\*(Aq
\&    my $master = git::rev_parse \*(Aqrelease\*(Aq;
\&
\&    # Return in list context is lines (see System::Sub)
\&    say for git::ls_tree \*(Aqmaster\*(Aq;
\&
\&    # Process lines using a callback
\&    git::ls_tree \*(Aqmaster\*(Aq => sub {
\&        my ($mode, $type, $object, $file) = split;
\&        say $file;
\&    };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Use git <http://www.git-scm.com> commands easily from your Perl program. Each
git command is imported as a System::Sub \s-1DWIM\s0 sub.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "\(bu" 4
The release script <https://github.com/dolmen/angel-PS1/blob/devel/dist> of
my angel\-PS1 <https://github.com/dolmen/angel-PS1> project.
.SH "AUTHOR"
.IX Header "AUTHOR"
Olivier Mengué, \f(CW\*(C`dolmen@cpan.org\*(C'\fR.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright © 2016 Olivier Mengué.
.PP
This library is free software; you can redistribute it and/or modify it under
the same terms as Perl 5 itself.
