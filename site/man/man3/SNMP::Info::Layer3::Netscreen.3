.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::Layer3::Netscreen 3"
.TH SNMP::Info::Layer3::Netscreen 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::Layer3::Netscreen \- SNMP Interface to Juniper Netscreen Devices
.SH "AUTHOR"
.IX Header "AUTHOR"
Kent Hamilton
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    #Let SNMP::Info determine the correct subclass for you.
\&
\&    my $netscreen = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\&    my $class = $netscreen\->class();
\&    print "SNMP::Info determined this device to fall under subclass : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides abstraction to the configuration information obtainable from a
Juniper Netscreen device through \s-1SNMP.\s0
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.IP "SNMP::Info::Layer3" 4
.IX Item "SNMP::Info::Layer3"
.PD 0
.IP "SNMP::Info::IEEE802dot11" 4
.IX Item "SNMP::Info::IEEE802dot11"
.PD
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fINETSCREEN-SMI\fR" 4
.IX Item "NETSCREEN-SMI"
.PD 0
.IP "\fINETSCREEN-PRODUCTS-MIB\fR" 4
.IX Item "NETSCREEN-PRODUCTS-MIB"
.IP "\fINETSCREEN-INTERFACE-MIB\fR" 4
.IX Item "NETSCREEN-INTERFACE-MIB"
.IP "\fINETSCREEN-SET-GEN-MIB\fR" 4
.IX Item "NETSCREEN-SET-GEN-MIB"
.IP "\fINETSCREEN-IP-ARP-MIB\fR" 4
.IX Item "NETSCREEN-IP-ARP-MIB"
.IP "Inherited Classes' MIBs" 4
.IX Item "Inherited Classes' MIBs"
.PD
See \*(L"Required MIBs\*(R" in SNMP::Info::Layer3 for its \s-1MIB\s0 requirements.
.Sp
See \*(L"Required MIBs\*(R" in SNMP::Info::IEEE802dot11 for its \s-1MIB\s0 requirements.
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP\s0
.ie n .IP "$netscreen\->\fBmodel()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBmodel()\fR" 4
.IX Item "$netscreen->model()"
Tries to reference \f(CW$netscreen\fR\->\fBid()\fR to \fINETSCREEN-PRODUCTS-MIB\fR
.ie n .IP "$netscreen\->\fBvendor()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBvendor()\fR" 4
.IX Item "$netscreen->vendor()"
Returns \f(CW\*(Aqjuniper\*(Aq\fR
.ie n .IP "$netscreen\->\fBos()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBos()\fR" 4
.IX Item "$netscreen->os()"
Returns \f(CW\*(Aqscreenos\*(Aq\fR
.ie n .IP "$netscreen\->\fBos_ver()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBos_ver()\fR" 4
.IX Item "$netscreen->os_ver()"
Extracts the \s-1OS\s0 version from the description string.
.ie n .IP "$netscreen\->\fBserial()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBserial()\fR" 4
.IX Item "$netscreen->serial()"
Returns serial number.
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$netscreen\->\fBlayers()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBlayers()\fR" 4
.IX Item "$netscreen->layers()"
Returns 01001110.  Device doesn't report layers properly, modified to reflect
Layer 2 and 3 functionality.
.SS "Globals imported from SNMP::Info::Layer3"
.IX Subsection "Globals imported from SNMP::Info::Layer3"
See \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::Layer3 for details.
.SS "Globals imported from SNMP::Info::IEEE802dot11"
.IX Subsection "Globals imported from SNMP::Info::IEEE802dot11"
See \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::IEEE802dot11 for details.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.SS "Overrides"
.IX Subsection "Overrides"
\fIInterface Information\fR
.IX Subsection "Interface Information"
.ie n .IP "$netscreen\->\fBinterfaces()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBinterfaces()\fR" 4
.IX Item "$netscreen->interfaces()"
Creates a map between the interface identifier (iid) and the physical port
name.
.Sp
Defaults to \f(CW\*(C`insIfDescr\*(C'\fR if available, uses \f(CW\*(C`nsIfName\*(C'\fR if not.
.ie n .IP "$netscreen\->\fBi_description()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBi_description()\fR" 4
.IX Item "$netscreen->i_description()"
Description of the interface. Uses \f(CW\*(C`insIfDescr\*(C'\fR if available, \f(CW\*(C`nsIfName\*(C'\fR
if not.
.ie n .IP "$netscreen\->\fBi_ignore()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBi_ignore()\fR" 4
.IX Item "$netscreen->i_ignore()"
Returns without defining any interfaces to ignore.
.ie n .IP "$netscreen\->\fBi_index()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBi_index()\fR" 4
.IX Item "$netscreen->i_index()"
Default \s-1SNMP IID\s0 to Interface index.
.Sp
(\f(CW\*(C`nsIfIndex\*(C'\fR)
.ie n .IP "$netscreen\->\fBi_lastchange()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBi_lastchange()\fR" 4
.IX Item "$netscreen->i_lastchange()"
The value of \f(CW\*(C`sysUpTime\*(C'\fR when this port last changed states (up,down),
maps from \f(CW\*(C`ifIndex\*(C'\fR to \f(CW\*(C`nsIfIndex\*(C'\fR.
.Sp
(\f(CW\*(C`ifLastChange\*(C'\fR)
.ie n .IP "$netscreen\->\fBi_mac()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBi_mac()\fR" 4
.IX Item "$netscreen->i_mac()"
\&\s-1MAC\s0 address of the interface.  Note this is just the \s-1MAC\s0 of the port, not
anything connected to it.  Uses \f(CW\*(C`nsIfMAC\*(C'\fR if available, \f(CW\*(C`ifPhysAddress\*(C'\fR
if not.
.ie n .IP "$netscreen\->\fBi_mtu()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBi_mtu()\fR" 4
.IX Item "$netscreen->i_mtu()"
\&\s-1INTEGER.\s0 Interface \s-1MTU\s0 value, maps from \f(CW\*(C`ifIndex\*(C'\fR to \f(CW\*(C`nsIfIndex\*(C'\fR.
.Sp
(\f(CW\*(C`ifMtu\*(C'\fR)
.ie n .IP "$netscreen\->\fBi_name()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBi_name()\fR" 4
.IX Item "$netscreen->i_name()"
Interface Name field.
.Sp
(\f(CW\*(C`nsIfName\*(C'\fR)
.ie n .IP "$netscreen\->\fBi_speed()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBi_speed()\fR" 4
.IX Item "$netscreen->i_speed()"
Speed of the link, maps from \f(CW\*(C`ifIndex\*(C'\fR to \f(CW\*(C`nsIfIndex\*(C'\fR.
.ie n .IP "$netscreen\->\fBi_type()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBi_type()\fR" 4
.IX Item "$netscreen->i_type()"
Interface type.  Maps from \f(CW\*(C`ifIndex\*(C'\fR to \f(CW\*(C`nsIfIndex\*(C'\fR.
.Sp
(\f(CW\*(C`ifType\*(C'\fR)
.ie n .IP "$netscreen\->\fBi_up()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBi_up()\fR" 4
.IX Item "$netscreen->i_up()"
Link Status of the interface.  Typical values are 'up' and 'down'.
.Sp
(\f(CW\*(C`nsIfStatus\*(C'\fR)
.ie n .IP "$netscreen\->\fBi_up_admin()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBi_up_admin()\fR" 4
.IX Item "$netscreen->i_up_admin()"
Administrative status of the port.  Checks both \f(CW\*(C`ifAdminStatus\*(C'\fR and
\&\f(CW\*(C`nsIfStatus\*(C'\fR.
.PP
\fI\s-1IP\s0 Address Table\fR
.IX Subsection "IP Address Table"
.PP
Each entry in this table is an \s-1IP\s0 address in use on this device.
.ie n .IP "$netscreen\->\fBip_index()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBip_index()\fR" 4
.IX Item "$netscreen->ip_index()"
Maps the \s-1IP\s0 Table to the \s-1IID\s0
.ie n .IP "$netscreen\->\fBip_table()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBip_table()\fR" 4
.IX Item "$netscreen->ip_table()"
Maps the Table to the \s-1IP\s0 address
.Sp
(\f(CW\*(C`nsIfIp\*(C'\fR)
.ie n .IP "$netscreen\->\fBip_netmask()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBip_netmask()\fR" 4
.IX Item "$netscreen->ip_netmask()"
Gives netmask setting for \s-1IP\s0 table entry.
.Sp
(\f(CW\*(C`nsIfNetmask\*(C'\fR)
.PP
\fIForwarding Table\fR
.IX Subsection "Forwarding Table"
.PP
Uses \f(CW\*(C`nsIpArpTable\*(C'\fR to emulate the forwarding table.
.ie n .IP "$netscreen\->\fBfw_index()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBfw_index()\fR" 4
.IX Item "$netscreen->fw_index()"
Maps the Forwarding Table to the \s-1IID\s0
.ie n .IP "$netscreen\->\fBfw_mac()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBfw_mac()\fR" 4
.IX Item "$netscreen->fw_mac()"
Returns reference to hash of forwarding table \s-1MAC\s0 Addresses.
.ie n .IP "$netscreen\->\fBfw_port()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBfw_port()\fR" 4
.IX Item "$netscreen->fw_port()"
Returns reference to hash of forwarding table entries port interface
identifier (\s-1IID\s0).
.ie n .IP "$netscreen\->\fBbp_index()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBbp_index()\fR" 4
.IX Item "$netscreen->bp_index()"
Returns reference to hash of bridge port table entries map back to interface
identifier (\s-1IID\s0).
.SS "Arp Cache Table"
.IX Subsection "Arp Cache Table"
.ie n .IP "$netscreen\->\fBat_index()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBat_index()\fR" 4
.IX Item "$netscreen->at_index()"
Returns reference to hash.  Maps \s-1ARP\s0 table entries to Interface IIDs
.Sp
If the device doesn't support \f(CW\*(C`ipNetToMediaIfIndex\*(C'\fR, this will try
the proprietary \f(CW\*(C`nsIpArpIfIdx\*(C'\fR.
.ie n .IP "$netscreen\->\fBat_paddr()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBat_paddr()\fR" 4
.IX Item "$netscreen->at_paddr()"
Returns reference to hash.  Maps \s-1ARP\s0 table entries to \s-1MAC\s0 addresses.
.Sp
If the device doesn't support \f(CW\*(C`ipNetToMediaPhysAddress\*(C'\fR, this will try
the proprietary \f(CW\*(C`nsIpArpMac\*(C'\fR.
.ie n .IP "$netscreen\->\fBat_netaddr()\fR" 4
.el .IP "\f(CW$netscreen\fR\->\fBat_netaddr()\fR" 4
.IX Item "$netscreen->at_netaddr()"
Returns reference to hash.  Maps \s-1ARP\s0 table entries to \s-1IP\s0 addresses.
.Sp
If the device doesn't support \f(CW\*(C`ipNetToMediaNetAddress\*(C'\fR, this will try
the proprietary \f(CW\*(C`nsIpArpIp\*(C'\fR.
.PP
\fIWireless Information\fR
.IX Subsection "Wireless Information"
.ie n .IP "$dot11\->\fBi_ssidlist()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBi_ssidlist()\fR" 4
.IX Item "$dot11->i_ssidlist()"
Returns reference to hash.  \s-1SSID\s0's recognized by the radio interface.
Remaps from \f(CW\*(C`ifIndex\*(C'\fR to \f(CW\*(C`nsIfIndex\*(C'\fR.
.Sp
(\f(CW\*(C`dot11DesiredSSID\*(C'\fR)
.ie n .IP "$dot11\->\fBi_80211channel()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBi_80211channel()\fR" 4
.IX Item "$dot11->i_80211channel()"
Returns reference to hash.  Current operating frequency channel of the radio
interface.  Remaps from \f(CW\*(C`ifIndex\*(C'\fR to \f(CW\*(C`nsIfIndex\*(C'\fR.
.SS "Table Methods imported from SNMP::Info::Layer3"
.IX Subsection "Table Methods imported from SNMP::Info::Layer3"
See \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::Layer3 for details.
.SS "Table Methods imported from SNMP::Info::IEEE802dot11"
.IX Subsection "Table Methods imported from SNMP::Info::IEEE802dot11"
See \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::IEEE802dot11 for details.
