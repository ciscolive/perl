.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mnet::Test 3"
.TH Mnet::Test 3 "2020-08-09" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mnet::Test \- Record, replay, and test script inputs and outputs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    # sample test script
\&    #
\&    #   first create an Mnet::Test file with \-\-record <file>
\&    #   next replay the test with \-\-test \-\-replay <file>
\&    #   add a print statement to cause test replay to fail
\&
\&    # required for this sample
\&    #   refer to TESTING perldoc in other Mnet modules
\&    use Mnet::Expect::Cli;
\&    use Mnet::Opts::Cli;
\&    use Mnet::Test;
\&
\&    # other cli options could be defined and recorded in tests
\&    my $cli = Mnet::Opts::Cli\->new;
\&
\&    # the Mnet::Expect::Cli modules can record session command outputs
\&    my $expect = Mnet::Expect::Cli({ spawn => "ssh 1.2.3.4" });
\&    my $output = $expect\->command("whoami");
\&
\&    # stdout and stderr are captures for tests
\&    print "$output\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mnet::Test can be used to allow script inputs and output to be recorded to a
file, which can be replayed later to show any changes.
.PP
Other Mnet modules are designed to detect and make use of Mnet::Test, if it
is being used by a script. Refer to the perldoc \s-1TESTING\s0 sections of the other
modules for explanations of how each module supports Mnet::Test usage. Also
refer to the \-\-test, \-\-record, and \-\-replay options for more information.
.PP
Scripts or modules that need to save additional data to \-\-record test data
files can call the Mnet::Test::data function to get a referenced hash key that
can be used to store data for the current script or module. The \-\-record option
will save this data to a file at the end of script execution, and the \-\-replay
option can be used to load that data back from the file into the
Mnet::Test::data hash.
.PP
Also note that the Mnet::Test::time function can be used to return repeatable
sequences of outputs from the perl time command during \-\-test execution. This
helps to avoid changing timestamps causing test failures. The Mnet::Log
module automatically normalizes timestamps when running tests.
.PP
Scripts that do not use Mnet::Opts::Cli to parse command line options can
pass the replay file as an argument to the Mnet::Test::data function and call
the Mnet::Test::done function at the end of script execution.
.PP
Note that the optional environment variable that can be specified when creating
a new  Mnet::Opts::Cli object is not parsed if the \-\-test option is set on
the command line, since the value of this envrionment variable may change over
time, between users, systems, etc.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Mnet::Test implements the functions listed below.
.SH "Mnet::Test::data"
.IX Header "Mnet::Test::data"
.Vb 1
\&    \e%data = Mnet::Test::data(\e%opts);
.Ve
.PP
This function returns a hash reference containing test/record/replay data for
the calling module or the main script. It is up to the calling module or main
script to manage its own test/record/replay data.
.PP
The opts hash ref argument is optional, and may be used if desired to specify
a replay file. Otherwise the \-\-replay cli option will be checked if the
Mnet::Opts::Cli module is used to parse command line options.
.PP
Note that care must be taken to use the hash reference returned from this
function properly. You want to save data in the returned hash reference, not
accidently create a new hash reference. For example:
.PP
.Vb 2
\&    ok:     my $data = Mnet::Test::data();
\&            $data\->{sub_hash}\->{key} = $value;
\&
\&    ok:     my $data = Mnet::Test::data();
\&            my $sub_hash = \e%{$data\->{sub_hash}};
\&            $sub_hash\->{key} = $value;
\&
\&    ok:     my $sub_hash = \e%{Mnet::Test::data()\->{sub_hash}};
\&            $sub_hash\->{key} = $value;
\&
\&    bad:    Mnet::Test::data()\->{sub_hash}\->{key} = $value;
\&
\&    bad:    my $data = Mnet::Test::data();
\&            my $sub_hash = $data\->{sub_hash};
\&            $sub_hash\->{key} = $value;
.Ve
.PP
Refer to the \s-1DESCRIPTION\s0 section of this document for more information on how
modules or scripts should use this function for test/record/replay data.
.SS "Mnet::Test::done"
.IX Subsection "Mnet::Test::done"
.Vb 1
\&    $diff = Mnet::Test::done(\e%opts)
.Ve
.PP
This function does one or two things, depending on the how the record, replay,
and test options are set.
.PP
If the \-\-replay and \-\-test options are set a diff of test output will be
returned, or a value of undefined if there was no replay data.
.PP
If the \-\-record option is set then the Mnet::Test data captured from the
current script execution will be saved to the specified file.
.PP
This function is called automatically at script exit using the \-\-record,
\&\-\-replay, and \-\-test options parsed from a prior Mnet::Opts::Cli\->new
call. You do not need to call this function unless you are not using
Mnet::Opts::Cli to parse command line options or if you want to examine
your own test diff data.
.PP
If the test output has changed a diff will be presented using the Text::Diff
module.
.PP
Refer to the \s-1DESCRIPTION\s0 section of this document for more information.
.SS "Mnet::Test::time"
.IX Subsection "Mnet::Test::time"
.Vb 2
\&    $unixtime = Mnet::Test::time($incrememt)
\&    or $unixtime = Mnet::Test::time(\e%opts, $increment)
.Ve
.PP
This function can be used by project scripts to get repeatable unixtime output
during executions with the \-\-test, \-\-record, or \-\-replay cli options set, and
real time from the perl time command otherwise.
.PP
An optional incrememnt value can be specified in seconds, and defauls to the
returned time being incremented by one second for each call to this function.
.PP
This function can be called with an opts hash ref, which can have record and
replay keys set to indicate test output is needed. Otherwise these options are
expected to be set via the Mnet::Opts::Cli module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mnet
.PP
Mnet::Expect::Cli
.PP
Mnet::Log
.PP
Mnet::Opts::Cli
.PP
Mnet::Report::Table
.PP
Text::Diff
