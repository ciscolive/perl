.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Scalar::Compare 3"
.TH Scalar::Compare 3 "2013-08-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Scalar::Compare \- Dynamically use comparison operators
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  my $scalar1  = \*(Aqwaffle\*(Aq;
\&  my $scalar2  = \*(Aqpirate\*(Aq;
\&  my $operator = \*(Aqne\*(Aq;
\&  if (scalar_compare($scalar1, $operator, $scalar2)) {
\&      warn "Proceed normally.";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Simple syntax sugar around Perl's comparison operators that allows you to arbitrarily compare scalars using Perl's comparison operators.
.PP
This is useful, for instance, if you want to support arbitrary comparison criteria in your application without lines and lines of if/else blocks.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "scalar_compare"
.IX Subsection "scalar_compare"
Given a scalar, an operator, and another scalar, returns the result of that operator on the provided values.
.PP
For instance:
.PP
.Vb 1
\&  my $ret = scalar_compare($s1, \*(Aq==\*(Aq, $s2)
.Ve
.PP
is equivalent to:
.PP
.Vb 1
\&  my $ret = $s1 == $s2;
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Bizowie <http://bizowie.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2013 Bizowie
.PP
This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
