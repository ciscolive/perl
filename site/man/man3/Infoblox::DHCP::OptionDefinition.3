.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::OptionDefinition 3"
.TH Infoblox::DHCP::OptionDefinition 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::OptionDefinition \- DHCP  option definition object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An OptionDefinition defines a \s-1DHCP\s0 option within a specific option space. A custom option can be defined in the predefined \s-1DHCP\s0 option space or in the user-defined vendor option space. To define an option, add the option definition to the required option space.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 6
\&  my $option_definition1 = Infoblox::DHCP::OptionDefinition\->new(
\&                                 name  => $string, #Required
\&                                 code  => $num,    #Required
\&                                 space => $string, #Optional / Default is DHCP
\&                                 type  => $string, #Optional / Default is string
\&                                );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that can be applied to a \s-1DHCP\s0 option definition object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a option definition object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Create a DHCP OptionDefinition object.
\& my $option_definition1 = Infoblox::DHCP::OptionDefinition\->new(
\&                                   space => "SUNW",
\&                                   name  => "JumpStart\-server",
\&                                   code  => "6",
\&                                   type  => "text"
\&                                   );
\& # Submit for adding
\& my $response = $session\->add( $option_definition1 );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching \s-1DHCP\s0 option definition objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP option definition object:
\&
\&  name \- A name for the option definition in string format (regular expression).
\&  code \- Option number. Either a name or code is required.
\&  space\- Optional. The option space in which the option is defined. The default is the DHCP option space.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&  #Getting option by name
\&  my  @result_array = $session\->get(
\&                        object   => "Infoblox::DHCP::OptionDefinition",
\&                        space    => "SUNW",
\&                        name     => "JumpStart\-server",
\&                        );
\&
\&  #Getting option by code
\&  my @result_array = $session\->get(
\&                        object   => "Infoblox::DHCP::OptionDefinition",
\&                        space    => "DHCP",
\&                        code     => 176,
\&                        );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 option definition object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify code
\& $object\->code(20);
\& # Submit modification
\& my $response = $session\->modify($object);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve all the matching \s-1DHCP\s0 option definition objects from the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP option definition object:
\&
\&  name \- A name for the option definition in string format (regular expression).
\&  code \- Option number. Either a name or code is required.
\&  space\- Optional. The option space in which the option is defined. The default is the DHCP option space.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&  #Getting option by name
\&  my  @result_array = $session\->search(
\&                        object   => "Infoblox::DHCP::OptionDefinition",
\&                        space    => "SUNW",
\&                        name     => "JumpStart\-server",
\&                        );
\&
\&  #Getting option by code
\&  my @result_array = $session\->search(
\&                        object   => "Infoblox::DHCP::OptionDefinition",
\&                        space    => "DHCP",
\&                        code     => 176,
\&                        );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1DHCP\s0 option definition object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& my  @result_array = $session\->get(
\&                        object   => "Infoblox::DHCP::OptionDefinition",
\&                        space    => "SUNW",
\&                        name     => "JumpStart\-server",
\&                        );
\&
\& # find the desired object from retrieved list.
\& my $desired_obj = $result_array[0];
\&
\& # Submit for removal
\& my $response = $session\->remove($desired_obj);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 option definition object.
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of a \s-1DHCP\s0 option definition object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired name in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get name
\& my $option_definitionname = $option_definition1 \->name();
\& # Modify name
\& $option_definition1 \->name("Start\-server");
.Ve
.RE
.RS 4
.RE
.SS "code( )"
.IX Subsection "code( )"
.RS 4
Use this method to set or retrieve the code of a \s-1DHCP\s0 option definition object. An option code number is used to identify the \s-1DHCP\s0 option.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Number for the option code. Value must be between 1 and 254. Values 1\-79, 81\-82, 85\-87, 89, 91\-92, 98, 112\-114, 118\-119, 124\-125 are predefined.
These option codes have corresponding predefined Types. Therefore, you cannot change the predefined Types.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get code
\& my $option_definitionname = $option_definition1 \->code();
\& # Modify code
\& $option_definition1 \->code(14);
.Ve
.RE
.RS 4
.RE
.SS "space( )"
.IX Subsection "space( )"
.RS 4
Use this method to set or retrieve the space of a \s-1DHCP\s0 option definition object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the space name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get space
\& my $option_space = $option_definition1 \->space();
\& # Modify space
\& $option_definition1 \->space("SUNW");
.Ve
.RE
.RS 4
.RE
.SS "type( )"
.IX Subsection "type( )"
.RS 4
Use this method to set or retrieve the data type of the grid \s-1DHCP\s0 option.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The accepted types are the following:
.Sp
.Vb 1
\&  "boolean"                 \- For "true" or "false" boolean values.
\&
\&  "ip\-address"              \- For a single IPv4 address. An IPv4 address is a 32\-bit number in dotted decimal notation.
\&                              It consists of four 8\-bit groups of decimal digits separated
\&                              by decimal points (example: "192.168.1.2").
\&
\&  "array of ip\-address"     \- For a list of IPv4 addresses, each separated by a comma.
\&                              (example: "192.168.1.2, 10.11.12.13, 79.2.3.1")
\&
\&  "string"                  \- For value in ASCII text string or
\&                              a list of hexadecimal characters (0\-9, a\-f, or A\-F) without spaces and separated by colons.
\&
\&  "text"                    \- For value in ASCII text string.
\&
\&  "domain\-name"             \- For domain name in ASCII text format
\&
\&  "domain\-list"             \- For a list of domain names, each separated by a comma.
\&
\&  "8\-bit unsigned integer"  \- For numeric value between 0 and 255.
\&
\&  "16\-bit unsigned integer" \- For numeric value between 0 and 65535.
\&
\&  "32\-bit unsigned integer" \- For numeric value between 0 and 4294967295.
\&
\&  "8\-bit signed integer"    \- For numeric value between \-128 and 127.
\&
\&  "16\-bit signed integer"   \- For numeric value between \-32768 and 32767.
\&
\&  "32\-bit signed integer"   \- For numeric value between \-2147483648 and 2147483647.
\&
\&  "array of 8\-bit unsigned integer"  \- For a list of numeric values between 0 and 255, each separated by a comma.
\&
\&  "array of 16\-bit unsigned integer" \- For a list of numeric values between 0 and 65535, each separated by a comma.
\&
\&  "array of 32\-bit unsigned integer" \- For a list of numeric values between 0 and 4294967295, each separated by a comma.
\&
\&  "array of 8\-bit integer"           \- For a list of numeric values between \-128 and 127, each separated by a comma.
\&
\&  "array of 16\-bit integer"          \- For a list of numeric values between \-32768 and 32767, each separated by a comma.
\&
\&  "array of 32\-bit integer"          \- For a list of numeric values between \-2147483648 and 2147483647, each separated by a comma.
.Ve
.Sp
The following types are valid only for Microsoft(r) server options
.Sp
.Vb 1
\&  "binary"
\&
\&  "encapsulated"
\&
\&  "array of string"
\&
\&  "array of 64\-bit unsigned integer" \- For a list of numeric values between 0 and 1.8446744 * 10^19
\&
\&  "64\-bit unsigned integer"          \- For a list of numeric values between 0 and 1.8446744 * 10^19, each separated by a comma.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get type
\& my $option_definitiontype = $option_definition1 \->type();
\& # Modify type
\& $option_definition1 \->type("string");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, modify, and remove. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 Network insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& my $option_space1 = Infoblox::DHCP::OptionSpace\->new(
\&                                                "name" => "SUNW"
\&                                                );
\& my $response = $session\->add( $option_space1);
\& print "Add option space operation success \en" if ($response );
\& print "Add option space operation failed  \en" if ( not $response );
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 OptionDefinition object.\fR
.PP
.Vb 11
\& my $option_definition1 = Infoblox::DHCP::OptionDefinition\->new(
\&                                  space => "SUNW",
\&                                  name  => "JumpStart\-server",
\&                                  code  => "6",
\&                                  type  => "text"
\&                               );
\&         unless ($option_definition1) {
\&         die("Construct DHCP OptionDefinition failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\&   }
\&  print "DHCP OptionDefinition object created successfully\en";
\&
\&  #Add the DHCP OptionDefinition object to Infoblox appliance through a session
\&        my $response = $session\->add( $option_definition1 )
\&        or die("Add a DHCP  OptionDefinition object failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Add a DHCP  OptionDefinition object successfully\en";
.Ve
.PP
\&\fB#Get and modify a  \s-1DHCP\s0 OptionDefinition object attribute\fR
.PP
.Vb 6
\& #Get Network through the session
\& my  @retrieved_objs = $session\->get(
\&                object   => "Infoblox::DHCP::OptionDefinition",
\&                space  => "SUNW",
\&                name   => "JumpStart\-server",
\&             );
\&
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Get DHCP OptionDefinition object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP OptionDefinition object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified Network attribute
\&
\&  $object\->code(20);    #Apply the changes
\&
\& $session\->modify($object)
\&     or die("Modify DHCP OptionDefinition attribute failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP OptionDefinition object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DHCP\s0 OptionDefinition Object\fR
.PP
.Vb 6
\&  #Get DHCP OptionDefinition object through the session
\&  my  @retrieved_objs = $session\->get(
\&                    object =>"Infoblox::DHCP::OptionDefinition",
\&                    space  => "SUNW",
\&                    name   => "JumpStart\-server",
\&             );
\&
\&    my $object = $retrieved_objs[0];
\&
\&    unless ($object) {
\&     die("Get DHCP OptionDefinition object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Get DHCP OptionDefinition object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Submit the object for removal\fR
.PP
.Vb 3
\& $session\->remove($object)
\&     or die("Remove Network failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP OptionDefinition removed successfully \en";
\&
\& #Remove option space.
\&
\& my $response = $session\->remove( object => "Infoblox::DHCP::OptionSpace" ,
\&                                  name   => "SUNW",
\&                               );
\& print "Remove option space success \en" if ($response );
\& print "Remove option space failed  \en" if ( not $response );
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DHCP::OptionSpace, Infoblox::DHCP::Option, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
