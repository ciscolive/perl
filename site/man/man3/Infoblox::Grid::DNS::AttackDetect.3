.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::DNS::AttackDetect 3"
.TH Infoblox::Grid::DNS::AttackDetect 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::DNS::AttackDetect \- a DNS Attack Detect object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1DNS\s0 Attack Detect object provides information about \s-1DNS\s0 attack detection settings.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 8
\& my $attack_detect = Infoblox::Grid::DNS::AttackDetect\->new(
\&    enable        => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq, # Optional
\&    high          => $uint,            # Optional
\&    interval_max  => $uint,            # Optional
\&    interval_min  => $uint,            # Optional
\&    interval_time => $uint,            # Optional
\&    low           => $uint,            # Optional
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The object does not support any session methods.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
.SS "Infoblox::Grid::DNS::AttackMitigation\->detect_chr( )"
.IX Subsection "Infoblox::Grid::DNS::AttackMitigation->detect_chr( )"
.RS 4
Use this method to set or retrieve configuration for the Cache Hit Ratio (\s-1CHR\s0) changes detection. See Infoblox::Grid::DNS::AttackMitigation\->\fBdetect_chr()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get detect_chr value
\& my $detect_chr = $attack_mitigation\->detect_chr();
\& #Modify detect_chr 
\& $attack_mitigation\->detect_chr($detect_chr);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::DNS::AttackMitigation\->detect_nxdomain_responses( )"
.IX Subsection "Infoblox::Grid::DNS::AttackMitigation->detect_nxdomain_responses( )"
.RS 4
Use this method to set or retrieve configuration for the recursive queries \s-1NXDOMAIN\s0 responses detection. See Infoblox::Grid::DNS::AttackMitigation\->\fBdetect_nxdomain_responses()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get detect_nxdomain_responses value
\& my $detect_nxdomain_responses = $attack_mitigation\->detect_nxdomain_responses();
\& #Modify detect_nxdomain_responses 
\& $attack_mitigation\->detect_nxdomain_responses($detect_nxdomain_responses);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::DNS::AttackMitigation\->detect_udp_drop( )"
.IX Subsection "Infoblox::Grid::DNS::AttackMitigation->detect_udp_drop( )"
.RS 4
Use this method to set or retrieve configuration for the \s-1UDP\s0 packet drop rate detection. See Infoblox::Grid::DNS::AttackMitigation\->\fBdetect_udp_drop()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get detect_udp_drop value
\& my $detect_udp_drop = $attack_mitigation\->detect_udp_drop();
\& #Modify detect_udp_drop 
\& $attack_mitigation\->detect_udp_drop($detect_udp_drop);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.SS "enabled( )"
.IX Subsection "enabled( )"
.RS 4
Use this method to enable or disable \s-1DNS\s0 attack detection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DNS\s0 attack detection or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable value
\& my $enable = $attack_detect\->enable();
\& #Modify enable 
\& $attack_detect\->enable(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "high( )"
.IX Subsection "high( )"
.RS 4
Use this method to set or retrieve the high threshold value (in percentage) for starting \s-1DNS\s0 attack detection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 0 and 100.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get high value
\& my $high = $attack_detect\->high();
\& #Modify high 
\& $attack_detect\->high(90);
.Ve
.RE
.RS 4
.RE
.SS "interval_max( )"
.IX Subsection "interval_max( )"
.RS 4
Use this method to set or retrieve the maximum number of events that have occurred before processing \s-1DNS\s0 attack detection.
.Sp
Note that detection processing occurs each time when interval_max events have occurred or at least interval_min events have occurred and at least interval_time seconds have elapsed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get interval_max value
\& my $interval_max = $attack_detect\->interval_max();
\& #Modify interval_max 
\& $attack_detect\->interval_max(100000);
.Ve
.RE
.RS 4
.RE
.SS "interval_min( )"
.IX Subsection "interval_min( )"
.RS 4
Use this method to set or retrieve the minimum number of events that have occurred before processing \s-1DNS\s0 attack detection.
.Sp
Note that detection processing occurs each time when interval_max events have occurred or at least interval_min events have occurred and at least interval_time seconds have elapsed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get interval_min value
\& my $interval_min = $attack_detect\->interval_min();
\& #Modify interval_min 
\& $attack_detect\->interval_min(1000);
.Ve
.RE
.RS 4
.RE
.SS "interval_time( )"
.IX Subsection "interval_time( )"
.RS 4
Use this method to set or retrieve the time interval between detection processing.
.Sp
Note that detection processing occurs each time when interval_max events have occurred or at least interval_min events have occurred and at least interval_time seconds have elapsed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get interval_time value
\& my $interval_time = $attack_detect\->interval_time();
\& #Modify interval_time 
\& $attack_detect\->interval_time(10);
.Ve
.RE
.RS 4
.RE
.SS "low( )"
.IX Subsection "low( )"
.RS 4
Use this method to set or retrieve the low threshold value (in percentage) for starting \s-1DNS\s0 attack detection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 0 and 100.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get low value
\& my $low = $attack_detect\->low();
\& #Modify low 
\& $attack_detect\->low(40);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::DNS::AttackMitigation, Infoblox::Grid::DNS::AttackMitigation\->\fBdetect_chr()\fR, Infoblox::Grid::DNS::AttackMitigation\->\fBdetect_nxdomain_responses()\fR, Infoblox::Grid::DNS::AttackMitigation\->\fBdetect_udp_drop()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
