.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::ValidateTiny 3"
.TH Mojolicious::Plugin::ValidateTiny 3 "2018-03-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::ValidateTiny \- Lightweight validator for Mojolicious
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Validate::Tiny \*(Aq:all\*(Aq;
\&
\&    # Mojolicious
\&    $self\->plugin(\*(AqValidateTiny\*(Aq);
\&
\&    # Mojolicious::Lite
\&    plugin \*(AqValidateTiny\*(Aq;
\&
\&    sub action {
\&        my $self = shift;
\&        my $validate_rules = [
\&             # All of these are required
\&             [qw/name email pass pass2/] => is_required(),
\&
\&             # pass2 must be equal to pass
\&             pass2 => is_equal(\*(Aqpass\*(Aq),
\&
\&             # custom sub validates an email address
\&             email => sub {
\&                my ( $value, $params ) = @_;
\&                Email::Valid\->address($value) ? undef : \*(AqInvalid email\*(Aq;
\&             }
\&        ];
\&        return unless $self\->do_validation($validate_rules);
\&
\&        ... Do something ...
\&    }
\&
\&
\&    sub action2 {
\&        my $self = shift;
\&
\&        my $validate_rules = {
\&            checks  => [...],
\&            fields  => [...],
\&            filters => [...]
\&        };
\&        if ( my $filtered_params =  $self\->do_validation($validate_rules) ) {
\&            # all $params are validated and filters are applyed
\&            ... do your action ...
\&
\&
\&        } else {
\&            my $errors     = $self\->validator_error;             # hash with errors
\&            my $pass_error = $self\->validator_error(\*(Aqpassword\*(Aq); # password error text
\&            my $any_error  = $self\->validator_any_error;         # any error text
\&
\&            $self\->render( status => \*(Aq403\*(Aq, text => $any_error );
\&        }
\&
\&    }
\&
\&    _\|_DATA_\|_
\&
\&    @@ user.html.ep
\&    % if (validator_has_errors) {
\&        <div class="error">Please, correct the errors below.</div>
\&    % }
\&    %= form_for \*(Aquser\*(Aq => begin
\&        <label for="username">Username</label><br />
\&        <%= input_tag \*(Aqusername\*(Aq %><br />
\&        <%= validator_error \*(Aqusername\*(Aq %><br />
\&
\&        <%= submit_button %>
\&    % end
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::ValidateTiny is a Validate::Tiny support for Mojolicious.
.SH "OPTIONS"
.IX Header "OPTIONS"
.ie n .SS """explicit"" (default 0)"
.el .SS "\f(CWexplicit\fP (default 0)"
.IX Subsection "explicit (default 0)"
If \*(L"explicit\*(R" is true then for every field must be provided check rule
.ie n .SS """autofields"" (default 1)"
.el .SS "\f(CWautofields\fP (default 1)"
.IX Subsection "autofields (default 1)"
If \*(L"autofields\*(R" then validator will automatically create fields list based on checks passed to validator.
So, you can pass:
    [
        user => \fBis_required()\fR,
        pass => \fBis_required()\fR,
    ]
.PP
instead of
.PP
.Vb 7
\&    {
\&        fields => [\*(Aquser\*(Aq, \*(Aqpass\*(Aq],
\&        checks => [
\&            user => is_required(),
\&            pass => is_required(),
\&        ]
\&    }
.Ve
.ie n .SS """exclude"" (default [])"
.el .SS "\f(CWexclude\fP (default [])"
.IX Subsection "exclude (default [])"
Is an arrayref with a list of fields (names or regexps) that will not be affected by \f(CW\*(C`explicit\*(C'\fR option.
.PP
For example, if you use \*(L"Mojolicious::Plugin::CSRFProtect\*(R" then you should add \*(L"csrftoken\*(R" to exclude list.
.SH "HELPERS"
.IX Header "HELPERS"
.ie n .SS """do_validation"""
.el .SS "\f(CWdo_validation\fP"
.IX Subsection "do_validation"
Validates parameters with provided rules and automatically set errors.
.PP
\&\f(CW$VALIDATE_RULES\fR \- Validate::Tiny rules in next form
.PP
.Vb 5
\&    {
\&        checks  => $CHECKS, # Required
\&        fields  => [],      # Optional (will check all GET+POST parameters)
\&        filters => [],      # Optional
\&    }
.Ve
.PP
You can pass only \*(L"checks\*(R" arrayref to \*(L"do_validation\*(R".
In this case validator will take all \s-1GET+POST\s0 parameters as \*(L"fields\*(R"
.PP
returns false if validation failed
returns true  if validation succeded
.PP
.Vb 2
\&    $self\->do_validation($VALIDATE_RULES)
\&    $self\->do_validation($CHECKS);
.Ve
.ie n .SS """validator_has_errors"""
.el .SS "\f(CWvalidator_has_errors\fP"
.IX Subsection "validator_has_errors"
Check if there are any errors.
.PP
.Vb 3
\&    if ($self\->validator_has_errors) {
\&        $self\->render_text( $self\->validator_any_error );
\&    }
\&
\&    % if (validator_has_errors) {
\&        <div class="error">Please, correct the errors below.</div>
\&    % }
.Ve
.ie n .SS """validator_error"""
.el .SS "\f(CWvalidator_error\fP"
.IX Subsection "validator_error"
Returns the appropriate error.
.PP
.Vb 2
\&    my $errors_hash = $self\->validator_error();
\&    my $username_error = $self\->validator_error(\*(Aqusername\*(Aq);
\&
\&    <%= validator_error \*(Aqusername\*(Aq %>
.Ve
.ie n .SS """validator_error_string"""
.el .SS "\f(CWvalidator_error_string\fP"
.IX Subsection "validator_error_string"
Returns a string with all errors (an empty string in case of no errors).
Helper maps directly to Validate::Tiny::error_string method ( see \*(L"error_string\*(R" in Validate::Tiny )
.PP
.Vb 1
\&    my $error_str = $self\->validator_error_string();
\&
\&    <%= validator_error_string %>
.Ve
.ie n .SS """validator_any_error"""
.el .SS "\f(CWvalidator_any_error\fP"
.IX Subsection "validator_any_error"
Returns any of the existing errors. This method is usefull if you want return only one error.
.SH "AUTHOR"
.IX Header "AUTHOR"
Viktor Turskyi <koorchik@cpan.org>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to Github <https://github.com/koorchik/Mojolicious\-Plugin\-ValidateTiny>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Validate::Tiny, Mojolicious, Mojolicious::Plugin::Validator
