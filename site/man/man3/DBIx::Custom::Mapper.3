.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Custom::Mapper 3"
.TH DBIx::Custom::Mapper 3 "2020-04-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Custom::Mapper \- Mapper of parameter
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 6
\&  my $mapper = $dbi\->mapper(param => $param);
\&  my $new_param = $mapper\->map(
\&    title => \*(Aqbook.title\*(Aq, # Key
\&    author => sub { \*(Aq%\*(Aq . $_[0] . \*(Aq%\*(Aq} # Value
\&    price => [\*(Aqbook.price\*(Aq => sub { \*(Aq%\*(Aq . $_[0] . \*(Aq%\*(Aq }], # Key and value
\&  );
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "param"
.IX Subsection "param"
.Vb 2
\&  my $param = $mapper\->param;
\&  $mapper = $mapper\->param({title => \*(AqPerl\*(Aq, author => \*(AqKen\*(Aq});
.Ve
.PP
Parameter.
.SS "pass"
.IX Subsection "pass"
.Vb 2
\&  my $pass = $mapper\->pass;
\&  $mapper = $mapper\->pass([qw/title author/]);
.Ve
.PP
the key and value is copied without change when \f(CW\*(C`map\*(C'\fR method is executed.
.SS "condition"
.IX Subsection "condition"
.Vb 2
\&  my $condition = $mapper\->condition;
\&  $mapper = $mapper\->condition(\*(Aqexists\*(Aq);
.Ve
.PP
Mapping condtion, default to \f(CW\*(C`length\*(C'\fR.
.PP
You can set the following values to \f(CW\*(C`condition\*(C'\fR.
.IP "\(bu" 4
exists
.Sp
.Vb 1
\&  condition => \*(Aqexists\*(Aq
.Ve
.Sp
If key exists, key and value is mapped.
.IP "\(bu" 4
defined
.Sp
.Vb 1
\&  condition => \*(Aqdefined\*(Aq;
.Ve
.Sp
If value is defined, key and value is mapped.
.IP "\(bu" 4
length
.Sp
.Vb 1
\&  condition => \*(Aqlength\*(Aq;
.Ve
.Sp
If value is defined and has length, key and value is mapped.
.IP "\(bu" 4
code reference
.Sp
.Vb 1
\&  condition => sub { defined $_[0] }
.Ve
.Sp
You can set code reference to \f(CW\*(C`condtion\*(C'\fR.
The subroutine return true, key and value is mapped.
.SH "METHODS"
.IX Header "METHODS"
DBIx::Custom::Mapper inherits all methods from Object::Simple
and implements the following new ones.
.SS "map"
.IX Subsection "map"
.Vb 5
\&  my $new_param = $mapper\->map(
\&    price => {key => \*(Aqbook.price\*(Aq}
\&    title => {value => \*(Aq%<value>%\*(Aq}
\&    author => [\*(Aqbook.author\*(Aq => \*(Aq%<value>%\*(Aq]
\&  );
\&
\&  my $new_param = $mapper\->map(
\&    price => {key => \*(Aqbook.price\*(Aq}
\&    title => {value => sub { \*(Aq%\*(Aq . shift . \*(Aq%\*(Aq}}
\&    author => [\*(Aqbook.author\*(Aq => sub { \*(Aq%\*(Aq . shift . \*(Aq%\*(Aq}]
\&  );
.Ve
.PP
Map parameter in \f(CW\*(C`param\*(C'\fR attribute into new parameter.
.PP
For example, if \f(CW\*(C`param\*(C'\fR is set to
.PP
.Vb 6
\&  {
\&    price => 1900,
\&    title => \*(AqPerl\*(Aq,
\&    author => \*(AqKen\*(Aq,
\&    issue_date => \*(Aq2010\-11\-11\*(Aq
\&  }
.Ve
.PP
The following hash reference is returned.
.PP
.Vb 5
\&  {
\&    \*(Aqbook.price\*(Aq => 1900,
\&    title => \*(Aq%Perl%\*(Aq,
\&    \*(Aqbook.author\*(Aq => \*(Aq%Ken%\*(Aq,
\&  }
.Ve
.Sp
.RS 2
\&\fBSyntax:\fR
.Sp
* String => Hash reference
.Sp
.Vb 4
\&  # String => Hash reference
\&  price => {key => \*(Aqbook.price\*(Aq}
\&  title => {value => \*(Aq%<value>%\*(Aq}
\&  title => {value => sub { \*(Aq%\*(Aq . shift . \*(Aq%\*(Aq}}
.Ve
.Sp
If \f(CW\*(C`key\*(C'\fR is used, only key name is mapped to new parameter
.Sp
.Vb 6
\&  # Rule
\&  price => {key => \*(Aqbook.price\*(Aq}
\&  # Parameter
\&  price => 1900,
\&  # New parameter
\&  \*(Aqbook.price\*(Aq => 1900,
.Ve
.Sp
If \f(CW\*(C`value\*(C'\fR is used, only value is mapped to new parameter
.Sp
.Vb 3
\&  # Rule
\&  title => {value => \*(Aq%<value>%\*(Aq}
\&  title => {value => sub { \*(Aq%\*(Aq . shift . \*(Aq%\*(Aq}}
\&  
\&  # Parameter
\&  title => \*(AqPerl\*(Aq,
\&  # New parameter
\&  title => \*(Aq%Perl%\*(Aq,
.Ve
.Sp
\&\f(CW\*(C`<\*(C'\fRvalue>> is replaced by original value.
You can use code reference to convert original value.
.Sp
* String => Array reference
.Sp
.Vb 2
\&  # String => Array reference
\&  author => [\*(Aqbook.author\*(Aq => \*(Aq%<value>%\*(Aq]
.Ve
.Sp
Both key name and value is mapped to new parameter.
This is same as the following syntax.
.Sp
.Vb 2
\&  # Rule
\&  {key => \*(Aqbook.author\*(Aq, value => \*(Aq%<value>%\*(Aq}
.Ve
.RE
.PP
By default, If the value has length, key and value is mapped.
.PP
.Vb 4
\&  title => \*(AqPerl\*(Aq  # Mapped
\&  {title => \*(Aq\*(Aq }   # Not mapped
\&  {title => undef} # Not mapped
\&  {}               # Not mapped
.Ve
.PP
You can set change mapping condition by \f(CW\*(C`condition\*(C'\fR attribute.
.PP
.Vb 1
\&  $mapper\->condition(\*(Aqdefined\*(Aq);
.Ve
.PP
Or you can set \f(CW\*(C`condition\*(C'\fR option for each key.
.PP
.Vb 5
\&  my $new_param = $mapper\->map(
\&    price => {key => \*(Aqbook.price\*(Aq, condition => \*(Aqdefined\*(Aq}]
\&    title => {value => sub { \*(Aq%\*(Aq . $_[0] . \*(Aq%\*(Aq}, condition => \*(Aqdefined\*(Aq}
\&    author => [\*(Aqbook.author\*(Aq, sub { \*(Aq%\*(Aq . $_[0] . \*(Aq%\*(Aq}, \*(Aqexists\*(Aq]
\&  );
.Ve
.PP
If \f(CW\*(C`pass\*(C'\fR attribute is set, the keys and value is copied without change.
.PP
.Vb 2
\&  $mapper\->pass([qw/title author/]);
\&  my $new_param = $mapper\->map(price => {key => \*(Aqbook.price\*(Aq});
.Ve
.PP
The following hash reference
.PP
.Vb 1
\&  {title => \*(AqPerl\*(Aq, author => \*(AqKen\*(Aq, price => 1900}
.Ve
.PP
is mapped to
.PP
.Vb 1
\&  {title => \*(AqPerl\*(Aq, author => \*(AqKen\*(Aq, \*(Aqbook.price\*(Aq => 1900}
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 201:" 4
.IX Item "Around line 201:"
You forgot a '=back' before '=head1'
.IP "Around line 239:" 4
.IX Item "Around line 239:"
You can't have =items (as at line 243) unless the first thing after the =over is an =item
