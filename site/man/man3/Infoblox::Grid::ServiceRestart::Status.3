.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::ServiceRestart::Status 3"
.TH Infoblox::Grid::ServiceRestart::Status 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::ServiceRestart::Status \- A Grid Service Restart Status object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Grid Service Restart Status object provides information and statistics about restart service routine of the Grid or Restart Service Group.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in a Session module that you can apply to a Grid Service Restart Status object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attribute to get a specific object:
\&
\& parent  \- Optional. A Grid Service Restart Group or Grid object.
\& grouped \- Optional. A grouping type of the status which can be either \*(AqGRID\*(Aq or \*(AqGROUP\*(Aq.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object  => \*(AqInfoblox::Grid::ServiceRestart::Status\*(Aq,
\&     parent  => $test_group,
\&     grouped => \*(AqGROUP\*(Aq,
\&
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attribute to search for a specific object:
\&
\& parent  \- Optional. A Grid Service Restart Group or Grid object.
\& grouped \- Optional. A grouping type of the status which can be either \*(AqGRID\*(Aq or \*(AqGROUP\*(Aq.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object  => \*(AqInfoblox::Grid::ServiceRestart::Status\*(Aq,
\&     parent  => $test_group,
\&     grouped => \*(AqGROUP\*(Aq,
\&
\& );
.Ve
.RE
.RS 4
.RE
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to apply to a Grid Service Restart Status object.
.SS "Infoblox::Grid::ServiceRestart::Group\->status( )"
.IX Subsection "Infoblox::Grid::ServiceRestart::Group->status( )"
.RS 4
Use this method to retrieve the Grid Service Restart restart status. This is a read-only attribute. See Infoblox::Grid::ServiceRestart::Group\->\fBstatus()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get status
\& my $status = $svcrst_group\->status();
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid\->restart_status( )"
.IX Subsection "Infoblox::Grid->restart_status( )"
.RS 4
Use this method to retrieve the Grid restart status. This is a read-only attribute. See Infoblox::Grid\->\fBrestart_status()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get status
\& my $status = $grid\->restart_status();
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of the object.
.SS "failures( )"
.IX Subsection "failures( )"
.RS 4
Use this method to retrieve the number of failed service restart requests. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get failures
\& my $failures = $svcrst_status\->failures();
.Ve
.RE
.RS 4
.RE
.SS "finished( )"
.IX Subsection "finished( )"
.RS 4
Use this method to retrieve the number of completed service restart requests. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get finished
\& my $finished = $svcrst_status\->finished();
.Ve
.RE
.RS 4
.RE
.SS "parent( )"
.IX Subsection "parent( )"
.RS 4
Use this method to retrieve the Grid or Grid Service Restart Group objects. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value can be either Infoblox::Grid or Infoblox::Grid::ServiceRestart::Group object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get group
\& my $group = $svcrst_status\->group();
.Ve
.RE
.RS 4
.RE
.SS "grouped( )"
.IX Subsection "grouped( )"
.RS 4
Use this method to retrieve the grouping type of the status which can be either '\s-1GRID\s0' or '\s-1GROUP\s0'. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get failures
\& my $failures = $svcrst_status\->failures();
.Ve
.RE
.RS 4
.RE
.SS "needed_restart( )"
.IX Subsection "needed_restart( )"
.RS 4
Use this method to retrieve the number of created but unprocessed restart requests. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get no_restart
\& my $needed_restart = $svcrst_status\->needed_restart();
.Ve
.RE
.RS 4
.RE
.SS "no_restart( )"
.IX Subsection "no_restart( )"
.RS 4
Use this method to retrieve the number of service restarts that are not required. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get no_restart
\& my $no_restart = $svcrst_status\->no_restart();
.Ve
.RE
.RS 4
.RE
.SS "pending( )"
.IX Subsection "pending( )"
.RS 4
Use this method to retrieve the number of pending service restart requests. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get pending
\& my $pending = $svcrst_status\->pending();
.Ve
.RE
.RS 4
.RE
.SS "pending_restart( )"
.IX Subsection "pending_restart( )"
.RS 4
Use this method to retrieve the number of required force restart requests that are still pending. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get pending_restart
\& my $pending_restart = $svcrst_status\->pending_restart();
.Ve
.RE
.RS 4
.RE
.SS "processing( )"
.IX Subsection "processing( )"
.RS 4
Use this method to retrieve the number of pending restart requests that are not required and not forced. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get processing
\& my $processing = $svcrst_status\->processing();
.Ve
.RE
.RS 4
.RE
.SS "restarting( )"
.IX Subsection "restarting( )"
.RS 4
Use this method to retrieve the number of restarting services. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get restarting
\& my $restarting = $svcrst_status\->restarting();
.Ve
.RE
.RS 4
.RE
.SS "success( )"
.IX Subsection "success( )"
.RS 4
Use this method to retrieve the number of successful service restart requests. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get success
\& my $success = $svcrst_status\->success();
.Ve
.RE
.RS 4
.RE
.SS "timeouts( )"
.IX Subsection "timeouts( )"
.RS 4
Use this method to retrieve the number of timeouts for service restart requests. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get timeouts
\& my $timeouts = $svcrst_status\->timeouts();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Grid::ServiceRestart::Group, Infoblox::Grid::ServiceRestart::Group\->\fBstatus()\fR, Infoblox::Grid, Infoblox::Grid\->\fBrestart_status()\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
