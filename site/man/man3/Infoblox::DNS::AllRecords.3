.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::AllRecords 3"
.TH Infoblox::DNS::AllRecords 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::AllRecords \- A synthetic object used to return all record object types belonging to a zone.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
By searching on this object, all the record objects associated with a specific zone can be retrieved
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DNS\s0 AllRecords object.
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for record objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DNS AllRecords object:
\&
\&  zone           \- Required. A zone name in FQDN format.
\&  creator        \- Optional. The creator of the record. The valid values are \*(AqSYSTEM\*(Aq, \*(AqDYNAMIC\*(Aq and \*(AqSTATIC\*(Aq.
\&  ddns_principal \- Optional. The GSS\-TSIG principal that owns the record.
\&  view           \- Optional. The DNS view in which the records are located. By default, the default DNS views is searched.
\&  name           \- Optional. The name of the matched record. (regular expression).
\&  reclaimable    \- Optional. The flag that indicates whether the record is reclaimable or not.
\&  type           \- Optional. The type of record to search for. By default, all record types are searched. Following is the list of valid values for this search field:
\&
\&                 \*(AqAll A Records\*(Aq,
\&                 \*(AqAll AAAA Records\*(Aq,
\&                 \*(AqAll Bulk Host\*(Aq,
\&                 \*(AqAll CNAME Records\*(Aq,
\&                 \*(AqAll DNAME Records\*(Aq,
\&                 \*(AqAll DNSKEY Records\*(Aq,
\&                 \*(AqAll DS Records\*(Aq,
\&                 \*(AqAll DTCLBDN Records\*(Aq,
\&                 \*(AqAll Host Address\*(Aq,
\&                 \*(AqAll Host Alias\*(Aq,
\&                 \*(AqAll Host Records\*(Aq,
\&                 \*(AqAll IPV6 Host Address\*(Aq,
\&                 \*(AqAll LBDN Records\*(Aq,
\&                 \*(AqAll MX Records\*(Aq,
\&                 \*(AqAll NAPTR Records\*(Aq,
\&                 \*(AqAll NS Records\*(Aq,
\&                 \*(AqAll NSEC Records\*(Aq,
\&                 \*(AqAll NSEC3 Parameter Records\*(Aq,
\&                 \*(AqAll NSEC3 Records\*(Aq,
\&                 \*(AqAll PTR Records\*(Aq,
\&                 \*(AqAll RSIG Records\*(Aq,
\&                 \*(AqAll Records\*(Aq,
\&                 \*(AqAll SEC Records\*(Aq,
\&                 \*(AqAll SOA Records\*(Aq,
\&                 \*(AqAll SRV Records\*(Aq,
\&                 \*(AqAll TLSA Records\*(Aq,
\&                 \*(AqAll Shared A Records\*(Aq,
\&                 \*(AqAll Shared AAAA Records\*(Aq,
\&                 \*(AqAll Shared MX Records\*(Aq,
\&                 \*(AqAll Shared SRV Records\*(Aq,
\&                 \*(AqAll Shared TXT Records\*(Aq,
\&                 \*(AqAll TXT Records\*(Aq,
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all records in the "domain.com" zone in the default DNS view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::AllRecords",
\&     zone   => \*(Aqdomain.com\*(Aq,
\& );
\&
\& # search for all TXT records that match the \*(Aqrec\*(Aq name in the "domain.com" zone in the default DNS view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::AllRecords",
\&     zone   => \*(Aqdomain.com\*(Aq,
\&     type   => \*(AqAll TXT Records\*(Aq,
\&     name   => \*(Aqrec\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to retrieve the attribute values of an AllRecords object. All methods are read-only and cannot be set.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to retrieve the descriptive comment of the record associated with the AllRecords object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get comment
\& my $comment = $allrecord\->comment();
.Ve
.RE
.RS 4
.RE
.SS "creator( )"
.IX Subsection "creator( )"
.RS 4
Use this method to retrieve the resource record creator.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get creator
\& my $creator = $allrecord\->creator();
.Ve
.RE
.RS 4
.RE
.SS "ddns_principal( )"
.IX Subsection "ddns_principal( )"
.RS 4
Use this method to retrieve the GSS-TSIG principal that owns the record.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ddns_principal
\& my $ddns_principal = $allrecord\->ddns_principal();
.Ve
.RE
.RS 4
.RE
.SS "ddns_protected( )"
.IX Subsection "ddns_protected( )"
.RS 4
Use this method to retrieve the flag that indicates whether this record is protected from \s-1DDNS\s0 updates or not.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ddns_protected
\& my $ddns_protected = $allrecord\->ddns_protected();
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to retrieve the disable flag of of the record associated with the AllRecords object (if present).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get disable
\& my $disable = $allrecord\->disable();
.Ve
.RE
.RS 4
.RE
.SS "dtc_obscured( )"
.IX Subsection "dtc_obscured( )"
.RS 4
Use this method to retrieve the \s-1LBDN\s0 object that obscures this record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dtc_obscured
\& my $dtc_obscured = $allrecord\->dtc_obscured();
.Ve
.RE
.RS 4
.RE
.SS "last_queried( )"
.IX Subsection "last_queried( )"
.RS 4
Use this method to retrieve the time the associated record was last queried on.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value, the number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_queried
\& my $last_queried = $allrecord\->last_queried();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to retrieve the name of of the record associated with the AllRecords object. Note that this value could differ from the value of the associated record's name field.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name
\& my $name = $allrecord\->name();
.Ve
.RE
.RS 4
.RE
.SS "reclaimable( )"
.IX Subsection "reclaimable( )"
.RS 4
Use this method to retrieve the flag that indicates whether the record is reclaimable or not.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get reclaimable
\& my $reclaimable = $object\->reclaimable();
.Ve
.RE
.RS 4
.RE
.SS "record( )"
.IX Subsection "record( )"
.RS 4
Use this method to retrieve the record object associated with the AllRecords object.
.Sp
This object is considered a 'partial' object. See Infoblox::Session\->\fBfill_partial_object()\fR for more information on how
it can be converted to a 'full' \s-1API\s0 object.
.Sp
If the AllRecords object refers to a record not currently supported in the Perl \s-1API,\s0 the member value will be undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get record
\& my $record = $allrecord\->record();
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to retrieve the \s-1TTL\s0 value of of the record associated with the AllRecords object (if present).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ttl
\& my $ttl = $allrecord\->ttl();
.Ve
.RE
.RS 4
.RE
.SS "type( )"
.IX Subsection "type( )"
.RS 4
Use this method to retrieve the type of the record associated with the AllRecords object. This is a descriptive string
that identifies the record to which this AllRecords object refers. (For example, 'A record', '\s-1MX\s0 record', ...)
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get type
\& my $type = $allrecord\->type();
.Ve
.RE
.RS 4
.RE
.SS "view( )"
.IX Subsection "view( )"
.RS 4
Use this method to retrieve the \s-1DNS\s0 view name of the record associated with the AllRecords object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get view
\& my $view = $allrecord\->view();
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of the record associated with the AllRecords object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get zone
\& my $zone = $allrecord\->zone();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
.Vb 2
\& In cases where a large number of matching records exist on the appliance, only a limited number will be returned
\& at a time. If all of the matching records are required, please consider using the paging support via Infoblox::Cursor.
\&
\& #Code sample fragment Starts:
\&
\&    $cursor=$session\->new_cursor(
\&                                 fetch_size => 100,
\&                                 object => "Infoblox::DNS::AllRecords",
\&                                 zone   => \*(Aqdomain.com\*(Aq,
\&                                 view   => \*(Aqdefault\*(Aq,
\&                                );
\&
\&    while ($current_record = $cursor\->fetch()) {
\&        # $current_record will contain a matching AllRecords object
\&    }
\&
\&    # All matching AllRecords will be returned
\&    # when the cycle ends.
\&
\& If you want full record objects for some of the above, you can add the following code
\&
\& #Code sample fragment Starts:
\&
\&     if( ... some criteria ...) {
\&         push @temp, $current_record\->record();
\&     }
\&
\& ####Code Fragment Ends####
\&
\& inside the while() cycle and afterwards call
\&
\& #Code sample fragment Starts:
\&
\& @full_record_objects=$session\->fill_partial_object(\e@temp);
\&
\& ####Code Fragment Ends####
\&
\& to fill the wanted objects.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBsearch()\fR/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
