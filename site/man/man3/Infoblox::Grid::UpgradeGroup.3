.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::UpgradeGroup 3"
.TH Infoblox::Grid::UpgradeGroup 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::UpgradeGroup \- Upgrade Group object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object enables the configuration of upgrade groups for the Infoblox Grid.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 11
\& my $group = Infoblox::Grid::UpgradeGroup\->new(
\&         name                         => $string, #Required
\&         comment                      => $string, #Optional / Default is undefined
\&         distribution_policy          => "simultaneously" | "sequentially", #Optional / Default is simultaneously
\&         upgrade_policy               => "simultaneously" | "sequentially", #Optional / Default is simultaneously
\&         distribution_dependent_group => $string, #Optional / Default is undefined
\&         upgrade_dependent_group      => $string, #Optional / Default is undefined
\&         distribution_time            => $timestamp, #See below
\&         upgrade_time                 => $timestamp, #See below
\&         members                      => [$m1, $m2, ...], #Optional / Default is undefined
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to an Upgrade Group object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& my $member1 = Infoblox::Grid::UpgradeGroup::Member\->new(
\&                                                        member => \*(Aq192.168.1.2\*(Aq,
\&                                                       );
\& unless($member1) {
\&      die("Construct member failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Member object created successfully\en";
\&
\& #Create the upgrade group object with this member
\& my $sgu = Infoblox::Grid::UpgradeGroup\->new(
\&                                             name                         => "groupname1",
\&                                             comment                      => "group name 1 comment",
\&                                             distribution_policy          => "sequentially",
\&                                             upgrade_policy               => "simultaneously",
\&                                             distribution_dependent_group => \*(Aqdistgroup1\*(Aq,
\&                                             upgrade_dependent_group      => \*(Aqdistgroup2\*(Aq,
\&                                             distribution_time            => \*(Aq2020\-12\-22T11:22:33Z\*(Aq,
\&                                             upgrade_time                 => \*(Aq2021\-12\-22T11:22:33Z\*(Aq,
\&                                             members                      => [$member1],
\&                                             );
\&
\& my $response = $session\->add($sgu)
\& unless($response) {
\&      die("Add upgrade group failed: ",
\&            session\->status_code() . ":" . session\->status_detail());
\& }
\& print "Upgrade group created successfully\en";
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific Upgrade Group object:
\&
\&  name          \- Optional. Group name in string format.
\&  comment       \- Optional. Comment in string format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&     object      => "Infoblox::Grid::UpgradeGroup",
\&     name        => "testgroup" );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify the comment.
\& $upgradegroup\->comment("This is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $upgradegroup );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, use \fBget()\fR or \fBsearch()\fR to retrieve the specific object first, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Get the group object
\& my @retrieved_objs = $session\->get(
\&     object      => "Infoblox::Grid::UpgradeGroup",
\&     name        => "testgroup" );
\& # Find the desired object from the retrieved list.
\& my $desired_group = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_group );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for Upgrade Group objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a specific Upgrade Group object:
\&
\&  name          \- Optional. Group name in string format (regular expression).
\&  comment       \- Optional. Comment in string format (regular expression).
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Search for all Upgrade Group objects that start with "test"
\& my @retrieved_objs = $session\->search(
\&     object      => "Infoblox::Grid::UpgradeGroup",
\&     name        => "test.*",
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::UpgradeSchedule\->groups( )"
.IX Subsection "Infoblox::Grid::UpgradeSchedule->groups( )"
.RS 4
Use this function to specify the groups that belong to this upgrade schedule. See Infoblox::Grid::UpgradeSchedule\->\fBgroups()\fR for parameters and return values.
.RE
.SS "Infoblox::Grid::DistributionSchedule\->groups( )"
.IX Subsection "Infoblox::Grid::DistributionSchedule->groups( )"
.RS 4
Use this function to specify the groups that belong to this distribution schedule. See Infoblox::Grid::DistributionSchedule\->\fBgroups()\fR for parameters and return values.
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of an upgrade group object.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Comment in string format with a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $upgradegroup\->comment();
\& #Modify comment
\& $upgradegroup\->comment("descriptive comment");
.Ve
.RE
.RS 4
.RE
.SS "distribution_policy( )"
.IX Subsection "distribution_policy( )"
.RS 4
Use this method to set or retrieve the distribution policy of this Upgrade Group.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The distribution policy. Valid values are \*(L"sequentially\*(R" and \*(L"simultaneously\*(R". The default is \*(L"simultaneously\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get distribution_policy
\& my $distribution_policy = $upgradegroup\->distribution_policy();
\& #Modify distribution_policy
\& $upgradegroup\->distribution_policy("sequentially");
.Ve
.RE
.RS 4
.RE
.SS "distribution_dependent_group( )"
.IX Subsection "distribution_dependent_group( )"
.RS 4
Use this method to set or retrieve the distribution dependent group.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the distribution dependent group.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get distribution_dependent_group
\& my $distribution_dependent_group = $upgradegroup\->distribution_dependent_group();
\& #Modify distribution_dependent_group
\& $upgradegroup\->distribution_dependent_group("group2");
.Ve
.RE
.RS 4
.RE
.SS "distribution_time( )"
.IX Subsection "distribution_time( )"
.RS 4
Use this method to set or retrieve the distribution time.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note this member is inserted only if the Upgrade Group is submitted for modification as part of an Infoblox::Grid::DistributionSchedule update, this member will not be changed if the Upgrade Group is submitted for modification as a stand-alone object.
.Sp
Note that if distribution_dependent_group is set, distribution_time will be ignored.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The start time of the distribution in \s-1ISO 8601\s0 extended format (e.g. 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get distribution_time
\& my $distribution_time = $upgradegroup\->distribution_time();
\& #Modify distribution_time
\& $upgradegroup\->distribution_time("2008\-10\-21T10:56:00.001Z");
.Ve
.RE
.RS 4
.RE
.SS "members( )"
.IX Subsection "members( )"
.RS 4
Use this method to set or retrieve the members of this upgrade group.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference that contains Infoblox::Grid::UpgradeGroup::Member object. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get members
\& my $members = $upgradegroup\->members();
\& #Modify members
\& $upgradegroup\->members([$ug1, $ug2, $ug3]);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of this upgrade group.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $upgradegroup\->name();
\& #Modify name
\& $upgradegroup\->name("group2");
.Ve
.RE
.RS 4
.RE
.SS "time_zone( )"
.IX Subsection "time_zone( )"
.RS 4
Use this method to retrieve the time_zone for this upgrade group.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get time_zone
\& my $time_zone = $upgradegroup\->time_zone();
.Ve
.RE
.RS 4
.RE
.SS "upgrade_dependent_group( )"
.IX Subsection "upgrade_dependent_group( )"
.RS 4
Use this method to set or retrieve the upgrade dependent group.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the upgrade dependent group.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get upgrade_dependent_group
\& my $upgrade_dependent_group = $upgradegroup\->upgrade_dependent_group();
\& #Modify upgrade_dependent_group
\& $upgradegroup\->upgrade_dependent_group("group2");
.Ve
.RE
.RS 4
.RE
.SS "upgrade_policy( )"
.IX Subsection "upgrade_policy( )"
.RS 4
Use this method to set or retrieve the upgrade_policy.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The upgrade policy. Valid values are \*(L"sequentially\*(R" and \*(L"simultaneously\*(R". The default is \*(L"simultaneously\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get upgrade_policy
\& my $upgrade_policy = $upgradegroup\->upgrade_policy();
\& #Modify upgrade_policy
\& $upgradegroup\->upgrade_policy("sequentially");
.Ve
.RE
.RS 4
.RE
.SS "upgrade_time( )"
.IX Subsection "upgrade_time( )"
.RS 4
Use this method to set or retrieve the upgrade time.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note this member is inserted only if the Upgrade Group is submitted for modification as part of an Infoblox::Grid::UpgradeSchedule update, this member will not be changed if the Upgrade Group is submitted for modification as a stand-alone object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The start time of the upgrade in \s-1ISO 8601\s0 extended format (e.g. 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get upgrade_time
\& my $upgrade_time = $upgradegroup\->upgrade_time();
\& #Modify upgrade_time
\& $upgradegroup\->upgrade_time("2008\-10\-21T10:56:00.001Z");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to an Upgrade Group insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "127.0.0.1", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\&                );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a few Upgrade Group objects\fR
.PP
.Vb 3
\& my $group1 = Infoblox::Grid::UpgradeGroup\->new(
\&                                             name => "group1",
\&                                            );
\&
\& unless ($group1) {
\&        die("Construct group object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Group object created successfully\en";
\&
\& my $group2 = Infoblox::Grid::UpgradeGroup\->new(
\&                                             name => "group2",
\&                                            );
\&
\& $session\->add($group1)
\&        or die("Add Upgrade Group object failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "Upgrade Group object added to server successfully\en";
\&
\& unless ($group2) {
\&        die("Construct group object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Group object created successfully\en";
\&
\& $session\->add($group2)
\&        or die("Add Upgrade Group object failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "Upgrade Group object added to server successfully\en";
\&
\& # Note that this has to be a valid Grid member name
\& my $member = Infoblox::Grid::UpgradeGroup::Member\->new(
\&                                                        member      => \*(Aqgrid_member.com\*(Aq,
\&                                                       );
\&
\& my $group3 = Infoblox::Grid::UpgradeGroup\->new(
\&                                             name                         => "group3",
\&                                             comment                      => "descriptive comment",
\&                                             distribution_policy          => "sequentially",
\&                                             upgrade_policy               => "simultaneously",
\&                                             distribution_dependent_group => \*(Aqgroup1\*(Aq,
\&                                             upgrade_dependent_group      => \*(Aqgroup2\*(Aq,
\&                                             distribution_time            => \*(Aq2020\-12\-22T11:22:33Z\*(Aq,
\&                                             upgrade_time                 => \*(Aq2021\-12\-22T11:22:33Z\*(Aq,
\&                                             members                      => [$member],
\&                                            );
\&
\& unless ($group3) {
\&        die("Construct group object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Group object created successfully\en";
\&
\& #Add the upgrade group object to the Infoblox appliance through a session
\& $session\->add($group3)
\&        or die("Add Upgrade Group object failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "Upgrade Group object added to server successfully\en";
.Ve
.PP
\&\fB#Search for all groups\fR
.PP
.Vb 5
\& my @retrieved_objs = $session\->search(
\&                object      => "Infoblox::Grid::UpgradeGroup",
\&                name        => "group.*",
\&               );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search Group object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Upgrade Group objects found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a Group object\fR
.PP
.Vb 6
\& #Get the object from an Infoblox appliance through a session
\& my @retrieved_objs = $session\->get(
\&             object      => "Infoblox::Grid::UpgradeGroup",
\&             name        => "group3",
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Get Group object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Upgrade Group object found at least 1 matching entry\en";
\&
\& #Modify the upgrade policy of the Group object
\& $object\->upgrade_policy("sequentially");
\&
\& #Apply the changes.
\& $session\->modify($object)
\&        or die("Modify Group object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Group object modified successfully \en";
.Ve
.PP
\&\fB#Remove the Group object\fR
.PP
.Vb 11
\& #Get the Group object through the session
\& my @retrieved_objs = $session\->get(
\&             object      => "Infoblox::Grid::UpgradeGroup",
\&             name        => "group3",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Group object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Group object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&        or die("Remove Group object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Upgrade Group object removed successfully \en";
.Ve
.PP
\&\fB#Remove the other created objects\fR
.PP
.Vb 3
\& $session\->remove($group2)
\&        or die("Remove Group object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\&
\& $session\->remove($group1)
\&        or die("Remove Group object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::UpgradeGroup::Member,Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
