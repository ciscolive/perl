.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::IP::LPM 3"
.TH Net::IP::LPM 3 "2015-08-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::IP::LPM \- Perl implementation of Longest Prefix Match algorithm
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::IP::LPM;
\&
\&  my $lpm = Net::IP::LPM\->new();
\&
\&  # add prefixes 
\&  $lpm\->add(\*(Aq0.0.0.0/0\*(Aq, \*(Aqdefault\*(Aq);
\&  $lpm\->add(\*(Aq::/0\*(Aq, \*(Aqdefaultv6\*(Aq);
\&  $lpm\->add(\*(Aq147.229.0.0/16\*(Aq, \*(Aqnet1\*(Aq);
\&  $lpm\->add(\*(Aq147.229.3.0/24\*(Aq, \*(Aqnet2\*(Aq);
\&  $lpm\->add(\*(Aq147.229.3.10/32\*(Aq, \*(Aqhost3\*(Aq);
\&  $lpm\->add(\*(Aq147.229.3.11\*(Aq, \*(Aqhost4\*(Aq);
\&  $lpm\->add(\*(Aq2001:67c:1220::/32\*(Aq, \*(Aqnet16\*(Aq);
\&  $lpm\->add(\*(Aq2001:67c:1220:f565::/64\*(Aq, \*(Aqnet26\*(Aq);
\&  $lpm\->add(\*(Aq2001:67c:1220:f565::1235/128\*(Aq, \*(Aqhost36\*(Aq);
\&  $lpm\->add(\*(Aq2001:67c:1220:f565::1236\*(Aq, \*(Aqhost46\*(Aq);
\&
\&
\&  printf $lpm\->lookup(\*(Aq147.229.100.100\*(Aq); # returns net1
\&  printf $lpm\->lookup(\*(Aq147.229.3.10\*(Aq);    # returns host3
\&  printf $lpm\->lookup(\*(Aq2001:67c:1220::1\*(Aq);# returns net16
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module Net::IP::LPM implements the Longest Prefix Match algorithm 
to both protocols, IPv4 and IPv6.  The module uses Trie algo.
.SH "PERFORMANCE"
.IX Header "PERFORMANCE"
The module is able to match  ~ 1 mln. lookups  
per second to a complete Internet \s-1BGP\s0 table (approx. 500,000 prefixes) using a common 
hardware (2.4GHz Xeon \s-1CPU\s0). For more detail, make a test on the module source
to check its performance on your system. Module supports both, IPv4 and IPv6 protocols.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "new \- Class Constructor"
.IX Subsection "new - Class Constructor"
.Vb 1
\&  $lpm = Net::IP::LPM\->new( );
.Ve
.PP
Constructs a new Net::IP::LPM object.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.SS "add \- Add Prefix"
.IX Subsection "add - Add Prefix"
.Vb 1
\&   $code = $lpm\->add( $prefix, $value );
.Ve
.PP
Adds a prefix \fB\f(CB$prefix\fB\fR into the database with value \fB\f(CB$value\fB\fR. Returns 1 if 
the prefix was added successfully. Returns 0 when an error occurs (typically the wrong address formating).
.SS "lookup \- Lookup Address"
.IX Subsection "lookup - Lookup Address"
.Vb 1
\&  $value = $lpm\->$lookup( $address );
.Ve
.PP
Looks up the prefix in the database and returns the value. If the prefix is
not found or an error occured, the undef value is returned.
.PP
Before lookups are performed the database has to be rebuilt by \f(CW\*(C`$lpm\->rebuild()\*(C'\fR operation.
.SS "lookup_raw \- Lookup Address in raw format"
.IX Subsection "lookup_raw - Lookup Address in raw format"
.Vb 1
\&  $value = $lpm\->lookup_raw( $address );
.Ve
.PP
The same case as \f(CW\*(C`$lpm\->lookup\*(C'\fR but it takes \f(CW$address\fR in raw format (result of the inet_ntop function). It is 
more effective than \f(CW\*(C`$lpm\->lookup\*(C'\fR, because the conversion from text format is not 
necessary.
.SS "info \- Returns information about the built trie"
.IX Subsection "info - Returns information about the built trie"
.Vb 1
\&  $ref = $lpm\->info();
.Ve
.PP
Returns following items
.PP
.Vb 4
\&  ipv4_nodes_total \- total number of allocated nodes in trie
\&  ipv4_nodes_value \- number of allocated nodes in trie that have stored some value 
\&  ipv4_trie_bytes \- number of bytes allocated for trie nodes (without data)
\&  ipv6_ \- the same for IPv6
.Ve
.SS "dump \- Return hash array reference containg all stored prefixes in the trie"
.IX Subsection "dump - Return hash array reference containg all stored prefixes in the trie"
.Vb 1
\&  $ref = $lpm\->dump();
.Ve
.SS "finish \- Release all data in object"
.IX Subsection "finish - Release all data in object"
.Vb 1
\&  $lpm\->finish();
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There are also other implementations of the Longest Prefix Match in Perl. However, 
most of them have some disadvantages (poor performance, lack of support for IPv6
or require a lot of time for initial database building). However, in some cases 
it might be usefull:
.PP
Net::IPTrie
.PP
Net::IP::Match
.PP
Net::IP::Match::Trie
.PP
Net::IP::Match\-XS
.PP
Net::CIDR::Lookup
.PP
Net::CIDR::Compare
.SH "AUTHOR"
.IX Header "AUTHOR"
Tomas Podermanski <tpoder@cis.vutbr.cz>, Martin Ministr <leadersmash@email.cz>, Brno University of Technology
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2012, Brno University of Technology
.PP
This library is a free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
