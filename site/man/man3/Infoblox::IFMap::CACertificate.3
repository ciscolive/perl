.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::IFMap::CACertificate 3"
.TH Infoblox::IFMap::CACertificate 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::IFMap::CACertificate \- IF\-MAP CA Certificate object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You can configure the Infoblox appliance as a metadata access point (\s-1MAP\s0) and implement the IF-MAP protocol defined by the Trusted Computing Group (\s-1TCG,\s0 www.trustedcomputinggroup.com). This module provides an interface for configuring \s-1CA\s0 certificates that the IF-MAP server uses to authenticate IF-MAP clients.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 3
\& my $ca_cert=Infoblox::IFMap::CACertificate\->new(
\&     certificate      => $string, #Required
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to an IF-MAP \s-1CA\s0 Certificate object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a new \s-1CA\s0 certificate for the IF-MAP server. See Infoblox::Session\->add( ) for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& # Read the certificate contents from the file
\& open CERTFILE "<cert.pem" or die "Unable to open certificate file";
\& my $pem_cert = join(\*(Aq\*(Aq, <CERTFILE>);
\&
\& # Create a new CA certificate object
\& my $cacert = Infoblox::IFMap::CACertificate\->new(
\& certificate => $pem_cert
\& );
\&
\& # Add the CA certificate
\& my $response = $session\->add( $cacert );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the \s-1CA\s0 certificates configured for the IF-MAP server. See Infoblox::Session\->get( ) for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
Apply the following attributes to get a specific IF-MAP \s-1CA\s0 certificate object:
.Sp
.Vb 4
\& subject                \- Optional. String that contains a certificate subject.
\& issuer                 \- Optional. String that contains a certificate issuer.
\& valid_not_after        \- Optional. String that contains a desired value of the certificate expiration date in ISO 8601 format.
\& valid_not_before       \- Optional. String that contains a desired value of the certificate start date in ISO 8601 format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Retrieve CA certificate with the subject = "/CN=verisign.com/OU=Verisign"
\& my @retrieved_objs = $session\->get(
\& object => "Infoblox::IFMap::CACertificate",
\& subject => "/CN=verisign.com/OU=Verisign"
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1CA\s0 certificate.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\& # Get the CA certificate
\& my @retrieved_objs = $session\->get(
\& object => "Infoblox::IFMap::CACertificate",
\& subject   => "/CN=verisign.com/OU=Verisign"
\& );
\&
\& # Find the desired object from the retrieved list.
\& my $desired_cert = $retrieved_objs[0];
\&
\& # Submit for removal
\& my $response = $session\->remove( $desired_cert );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for the \s-1CA\s0 certificates configured for the IF-MAP server. You can specify the following attributes in a search: subject, issuer, valid_not_before, and valid_not_after.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
Apply the following attributes to search for a specific IF-MAP \s-1CA\s0 certificate object:
.Sp
.Vb 4
\& subject                \- Optional. Regex for the certificate subject.
\& issuer                 \- Optional. Regex for the certificate issuer.
\& valid_not_after        \- Optional. String that contains the desired certificate expiration date in ISO 8601 format. This method supports searching with limit parameters  (see below).
\& valid_not_before       \- Optional. String that contains the desired certificate start date in ISO 8601 format. This method supports searching with limit parameters  (see below).
.Ve
.Sp
See Infoblox::Session/search with limit parameters for more information on this functionality.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 7
\& # Search for IF\-MAP CA certificates issued by Verisign
\& # and with valid not before time in 2010
\& my @retrieved_objs = $session\->search(
\& object => "Infoblox::IFMap::CACertificate",
\& issuer => ".*verisign.*",
\& valid_not_before => ">=< 2010\-01\-01T00:00:00Z,2011\-01\-01T00:00:00Z",
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.SS "certificate( )"
.IX Subsection "certificate( )"
.RS 4
Use this method to retrieve or set the value of the certificate attribute. If no argument is passed, the method returns the current attribute value. The value must be a single certificate in \s-1PEM\s0 format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string that contains the certificate in \s-1PEM\s0 format. This is a required attribute.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 2
\& # Get certificate
\& my $pem_cert = $cert_object\->certificate( );
\&
\& # Set certificate
\& open CERTFILE "<cert.pem" or die "Unable to open certificate file";
\& my $pem_cert = join(\*(Aq\*(Aq, <CERTFILE>);
\& $cert_object\->certificate( $pem_cert );
.Ve
.RE
.RS 4
.RE
.SS "subject( )"
.IX Subsection "subject( )"
.RS 4
Use this method to retrieve the value of the subject attribute. This method does not support any argument because the attribute is read-only and is set by the server. It has a value only when it reads an existing certificate from the Infoblox::IFMap::CACertificate object retrieved from the appliance.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.Sp
This is a read-only attribute. If you specify a parameter, the method returns an error.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 2
\& # Get subject
\& my $subject = $certificate\->subject( );
.Ve
.RE
.RS 4
.RE
.SS "issuer( )"
.IX Subsection "issuer( )"
.RS 4
Use this method to retrieve the value of the =issuer= attribute. This method does not support any argument because the attribute is read-only and is set by the server. It has a value only when it reads an existing certificate from the =Infoblox::IFMap::CACertificate= object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.Sp
This is a read-only attribute. If you specify a parameter, the method returns an error.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 2
\& # Get subject
\& my $issuer = $certificate\->issuer( );
.Ve
.RE
.RS 4
.RE
.SS "valid_not_before( )"
.IX Subsection "valid_not_before( )"
.RS 4
Use this method to retrieve the value of the valid_not_before attribute. This method does not support any argument because the attribute is read-only and is set by the server. It has a value only when it reads an existing certificate from the Infoblox::IFMap::CACertificate object. The returned value is the date before the certificate becomes invalid in \s-1ISO 8601\s0 format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.Sp
This is a read-only attribute. If you specify a parameter, the method returns an error.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 2
\& # Get valid_not_before attribute
\& my $valid_not_before = $certificate\->valid_not_before( );
.Ve
.RE
.RS 4
.RE
.SS "valid_not_after( )"
.IX Subsection "valid_not_after( )"
.RS 4
Use this method to retrieve the value of the valid_not_after attribute. This method does not support any argument because it is read-only and is set by the server. It has a value only when it reads an existing certificate from the Infoblox::IFMap::CACertificate object. The returned value is the date after the certificate becomes invalid in the \s-1ISO 8601\s0 format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.Sp
This is a read-only attribute. If you specify a parameter, the method returns an error.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 2
\& # Get operation
\& my $valid_not_after = $certificate\->valid_not_after( );
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparations\fR
.PP
.Vb 10
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&             Infoblox::status_code( ) . ":" . Infoblox::status_detail( ));
\& }
\& print "Session created successfully\en";
\&
\& #Get a certificate from the external file
\& local *CERTFILE;
\& open CERTFILE, "<API_unit_test_sample_code/ca_cert.pem" or die "Unable to open certificate file";
\& my $pem_cert = join(\*(Aq\*(Aq, <CERTFILE>);
\& close(CERTFILE);
.Ve
.PP
\&\fB#Create \s-1CA\s0 certificate object\fR
.PP
.Vb 8
\& my $ca_certificate= Infoblox::IFMap::CACertificate\->new(
\&                                                          certificate => $pem_cert
\&                                                        );
\& unless($ca_certificate) {
\&        die("Construct CA certificate object failed: ",
\&                Infoblox::status_code( ) . ":" . Infoblox::status_detail( ));
\& }
\& print "IFMap CA Certificate object created successfully\en";
.Ve
.PP
\&\fB#Add the \s-1CA\s0 Certificate object to the Infoblox appliance through a session\fR
.PP
.Vb 4
\& $session\->add($ca_certificate)
\&     or die("Add IFMap CA certificate object failed: ",
\&                        $session\->status_code( ) . ":" . $session\->status_detail( ));
\& print "IFMap CA Certificate object added to server successfully\en";
\&
\& #Get the IFMap CA Certificate object using subject attribute
\& my @retrieved_objs=$session\->get(
\&                                  object => "Infoblox::IFMap::CACertificate",
\&                                  subject => \*(AqCN="Test CA 2",OU="Engineering",O="Infoblox",L="Santa Clara",ST="CA",C="US"\*(Aq
\&                                );
\& my $object = $retrieved_objs[0];
\& unless($object){
\&     die("Get IFMap CA Certificate object failed: ",
\&                 $session\->status_code( ) . ":" . $session\->status_detail( ));
\& }
\& print "Get IFMap CA Certificate object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Search for IFMap \s-1CA\s0 certificate objects\fR
.PP
.Vb 11
\& my @retrieved_objs=$session\->search(
\&                                  object => "Infoblox::IFMap::CACertificate",
\&                                  subject => \*(Aq.*Engineering.*\*(Aq,
\&                                  valid_not_before => \*(Aq>=< 2010\-01\-01T08:00:00Z,2010\-10\-01T00:00:00Z\*(Aq
\&                                );
\& my $object = $retrieved_objs[0];
\& unless($object){
\&     die("Search for IFMap CA Certificate object failed: ",
\&                 $session\->status_code( ) . ":" . $session\->status_detail( ));
\& }
\& print "Searching IFMap CA Certificate object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Remove IFMap \s-1CA\s0 Certificate object\fR
.PP
.Vb 11
\& #Get IFMap CA Certificate object
\& my @retrieved_objs=$session\->get(
\&                                  object => "Infoblox::IFMap::CACertificate",
\&                                  subject => \*(AqCN="Test CA 2",OU="Engineering",O="Infoblox",L="Santa Clara",ST="CA",C="US"\*(Aq
\&                                );
\& my $object = $retrieved_objs[0];
\& unless($object){
\&     die("Get IFMap CA certificate object failed: ",
\&                 $session\->status_code( ) . ":" . $session\->status_detail( ));
\& }
\& print "Get IFMap CA certificate object found at least 1 matching entry\en";
\&
\& #submit the object for removal
\& $session\->remove($object)
\&     or die("Remove IFMap CA certificate failed: ",
\&             $session\->status_code( ) . ":" . $session\->status_detail( ));
\& print "IFMap CA certificate object removed successfully \en";
.Ve
.PP
\&\fB####PROGRAM ENDS####\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,Infoblox::Session\->add( ),Infoblox::Session\->get( ),Infoblox::Session\->remove( ),Infoblox::Session\->search( )
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
