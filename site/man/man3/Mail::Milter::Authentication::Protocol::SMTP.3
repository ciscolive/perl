.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Milter::Authentication::Protocol::SMTP 3"
.TH Mail::Milter::Authentication::Protocol::SMTP 3 "2020-09-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Milter::Authentication::Protocol::SMTP \- SMTP protocol handling
.SH "VERSION"
.IX Header "VERSION"
version 2.20200930.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Subclass of Net::Server::PreFork for bringing up the main server process for authentication_milter.
.PP
Please see Net::Server docs for more detail of the server code.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Perl implenmetation of email authentication standards rolled up into a single easy to use milter.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fIcommand_param( \f(CI$command\fI, \f(CI$index\fI )\fR" 4
.IX Item "command_param( $command, $index )"
Extract parameters from a \s-1SMTP\s0 command line.
.SH "METHODS"
.IX Header "METHODS"
.IP "register_metrics" 4
.IX Item "register_metrics"
Return details of the metrics this module exports.
.IP "\fIprotocol_process_request( \f(CI$command\fI, \f(CI$buffer\fI )\fR" 4
.IX Item "protocol_process_request( $command, $buffer )"
Process the command from the \s-1SMTP\s0 protocol stream.
.IP "\fI\f(BIget_smtp_config()\fI\fR" 4
.IX Item "get_smtp_config()"
Return the \s-1SMTP\s0 config for the given connection, or
the default config if no connection specific config
exists.
.IP "\fI\f(BIqueue_type()\fI\fR" 4
.IX Item "queue_type()"
Return the smtp queue type, either before or after
A before queue will not have an upstream queue id, an
after queue will.
.IP "\fIsend_smtp_packet( \f(CI$socket\fI, \f(CI$send\fI, \f(CI$expect\fI )\fR" 4
.IX Item "send_smtp_packet( $socket, $send, $expect )"
Send an \s-1SMTP\s0 command to the protocol stream.
Expecting a response \f(CW$expect\fR.
.IP "\fIsmtp_command_data( \f(CI$command\fI )\fR" 4
.IX Item "smtp_command_data( $command )"
Process the \s-1SMTP DATA\s0 command.
.IP "\fIsmtp_command_ehlo( \f(CI$command\fI )\fR" 4
.IX Item "smtp_command_ehlo( $command )"
Process the \s-1SMTP EHLO\s0 command.
.IP "\fIsmtp_command_helo( \f(CI$command\fI )\fR" 4
.IX Item "smtp_command_helo( $command )"
Process the \s-1SMTP HELO\s0 command.
.IP "\fIsmtp_command_lhlo( \f(CI$command\fI )\fR" 4
.IX Item "smtp_command_lhlo( $command )"
Process the \s-1LMTP LHLO\s0 command.
.IP "\fIsmtp_command_mailfrom( \f(CI$command\fI )\fR" 4
.IX Item "smtp_command_mailfrom( $command )"
Process the \s-1SMTP MAIL FROM\s0 command.
.IP "\fIsmtp_command_rcptto( \f(CI$command\fI )\fR" 4
.IX Item "smtp_command_rcptto( $command )"
Process the \s-1SMTP RCPT TO\s0 command.
.IP "\fIsmtp_command_rset( \f(CI$command\fI )\fR" 4
.IX Item "smtp_command_rset( $command )"
Process the \s-1SMTP RSET\s0 command.
.IP "\fIsmtp_command_xforward( \f(CI$command\fI )\fR" 4
.IX Item "smtp_command_xforward( $command )"
Process the \s-1SMTP XFORWARD\s0 command.
.IP "\fI\f(BIsmtp_forward_to_destination()\fI\fR" 4
.IX Item "smtp_forward_to_destination()"
Send the received \s-1SMTP\s0 transaction on to its destination
with authentication results headers (etc) added.
.IP "\fI\f(BIclose_destination_socket()\fI\fR" 4
.IX Item "close_destination_socket()"
\&\s-1QUIT\s0 and close the destination socket if open.
.IP "\fI\f(BIsmtp_init()\fI\fR" 4
.IX Item "smtp_init()"
Initialise transaction data as/when required.
.IP "\fI\f(BIsmtp_insert_received_header()\fI\fR" 4
.IX Item "smtp_insert_received_header()"
Insert a \s-1SMTP\s0 Received header into the email.
.IP "\fI\f(BIsmtp_queue_id()\fI\fR" 4
.IX Item "smtp_queue_id()"
Return a generated Queue \s-1ID\s0 for the email.
This can include the received \s-1ID\s0 from \s-1XFORWARD.\s0
.IP "\fIadd_header( \f(CI$header\fI, \f(CI$value\fI )\fR" 4
.IX Item "add_header( $header, $value )"
Add a header
.IP "\fIchange_header( \f(CI$header\fI, \f(CI$index\fI, \f(CI$value\fI )\fR" 4
.IX Item "change_header( $header, $index, $value )"
Change a header
.IP "\fIinsert_header( \f(CI$index\fI, \f(CI$key\fI, \f(CI$value\fI )\fR" 4
.IX Item "insert_header( $index, $key, $value )"
Insert a header
.IP "\fIsmtp_status( \f(CI$status\fI )\fR" 4
.IX Item "smtp_status( $status )"
Update the process name status line
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Marc Bradshaw.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
