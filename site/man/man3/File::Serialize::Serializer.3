.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "File::Serialize::Serializer 3"
.TH File::Serialize::Serializer 3 "2019-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Serialize::Serializer \- Role for defining File::Serialize serializers
.SH "VERSION"
.IX Header "VERSION"
version 1.3.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package File::Serialize::Serializer::MySerializer;
\&
\&    use Module::Runtime qw/ use_module /;
\&
\&    use Moo;
\&
\&    with \*(AqFile::Serialize::Serializer\*(Aq;
\&
\&    sub extensions { \*(Aqmys\*(Aq }
\&
\&    sub init { use_module(\*(AqSomeThing\*(Aq) }
\&
\&    sub serialize { ...}
\&    sub deserialize { ...}
\&
\&    1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This role is used to define serializers for File::Serialize.
.PP
As all the serializer plugins are typically loaded to figure out which one
should be used to serialize/deserialize a specific file, it's important that
the modules on which the serializer depends are not just \f(CW\*(C`use\*(C'\fRd, but are rather
marked for import via the \f(CW\*(C`required_modules\*(C'\fR and \f(CW\*(C`init\*(C'\fR functions.
.SS "Required methods"
.IX Subsection "Required methods"
A serializer should implement the following class methods:
.IP "extensions" 4
.IX Item "extensions"
Required. Must return a list of all extensions that this serializer can deal with.
.Sp
The first
extension of the list will be considered the canonical extension.
.IP "required_modules" 4
.IX Item "required_modules"
Returns the list of modules that this serializer needs to operate.
.Sp
If not provided, the required module will be extracted from the package name.
I.e., the serializer File::Serialize::Serializer::YAML::Tiny will assume
that it requires YAML::Tiny.
.ie n .IP "serialize( $data, $options )" 4
.el .IP "serialize( \f(CW$data\fR, \f(CW$options\fR )" 4
.IX Item "serialize( $data, $options )"
Required. Returns the serialized \f(CW$data\fR.
.IP "deserialize" 4
.IX Item "deserialize"
Required. Returns the deserialized \f(CW$data\fR.
.ie n .IP "groom_options( $options )" 4
.el .IP "groom_options( \f(CW$options\fR )" 4
.IX Item "groom_options( $options )"
Takes in the generic serializer options and groom them for 
this specific one.
.ie n .IP "groom_serialize_options( $options )" 4
.el .IP "groom_serialize_options( \f(CW$options\fR )" 4
.IX Item "groom_serialize_options( $options )"
Groom the options for this specific serializer. If not
provided, \f(CW\*(C`groom_options\*(C'\fR is used.
.ie n .IP "groom_deserialize_options( $options )" 4
.el .IP "groom_deserialize_options( \f(CW$options\fR )" 4
.IX Item "groom_deserialize_options( $options )"
Groom the options for this specific serializer. If not
provided, \f(CW\*(C`groom_options\*(C'\fR is used.
.SS "Provided methods"
.IX Subsection "Provided methods"
The role provides the following attributes / methods:
.IP "precedence" 4
.IX Item "precedence"
Returns the serializer's precedence, used to determine which one of the available
serializer for a format to use. Default to \f(CW100\fR. A value of \f(CW0\fR means \*(L"don't use\*(R".
.SH "AUTHOR"
.IX Header "AUTHOR"
Yanick Champoux <yanick@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2019, 2017, 2016, 2015 by Yanick Champoux.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
