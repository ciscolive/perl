.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::IPv6NetworkTemplate 3"
.TH Infoblox::DHCP::IPv6NetworkTemplate 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::IPv6NetworkTemplate \- DHCP IPv6 Network Template object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You can use a template to create IPv6 networks in a quick and consistent way. Networks created from a network template inherit all the properties defined in the network template, except for the comment and cidr if they are defined in the network.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $ipv6network_template = Infoblox::DHCP::IPv6NetworkTemplate\->new(
\&          name                                   => $string,                                        #Required
\&          allow_any_netmask                      => "true" | "false",                               #Optional / Default is "false"
\&          auto_create_reversezone                => "true" | "false",                               #Optional / Default is "false"
\&          cidr                                   => $num,                                           #Optional / Default is undefined
\&          comment                                => $string,                                        #Optional / Default is empty
\&          ddns_domainname                        => $fqdn,                                          #Optional / Default is undefined
\&          ddns_enable_option_fqdn                => "true" | "false" ,                              #Optional / Default is "false"
\&          ddns_generate_hostname                 => "true" | "false" | undef,                       #Optional / Default is undefined
\&          ddns_server_always_updates             => "true" | "false",                               #Optional / Default is "true"
\&          ddns_ttl                               => $num,                                           #Optional / Default is 0
\&          domain_name                            => $fqdn,                                          #Optional / Default is undefined
\&          domain_name_servers                    => "$ipv6addr1,$ipv6addr2,...",                    #Optional / Default is undefined
\&          enable_ddns                            => "true" | "false" | undef,                       #Optional / Default is undefined
\&          extattrs                               => { $string => $extattr, ... },                   #Required if \*(Aqrir_organization\*(Aq attribute is defined
\&                                                                                                    #Otherwise is optional
\&          extensible_attributes                  => { $string => $string | $num, $string => [ $string | $num, ... ], ... },
\&                                                                                                    #Required if \*(Aqrir_organization\*(Aq attribute is defined
\&                                                                                                    #Otherwise is optional
\&
\&          fixed_address_templates                => [$DhcpTemplate1,$DhcpTemplate2,...],            #Optional / Default is empty
\&          ipv6prefix                             => $ipv6prefix,                                    #Optional / Default is undefined
\&          members                                => [$Member1, $Member2, ...],                      #Optional / Default is empty
\&          options                                => [$Option1, $Option2, ...],                      #Optional / Default is empty list
\&          override_ddns_domainname               => "true" | "false",                               #Optional / Default is "false"
\&          override_ddns_enable_option_fqdn       => "true" | "false",                               #Optional / Default is "false"
\&          override_ddns_generate_hostname        => "true" | "false",                               #Optional / Default is "false"
\&          override_ddns_ttl                      => "true" | "false",                               #Optional / Default is "false"
\&          override_domain_name                   => "true" | "false",                               #Optional / Default is "false"
\&          override_domain_name_servers           => "true" | "false",                               #Optional / Default is "false"
\&          override_enable_ddns                   => "true" | "false",                               #Optional / Default is "false"
\&          override_options                       => "true" | "false",                               #Optional / Default is "false"
\&          override_preferred_lifetime            => "true" | "false",                               #Optional / Default is "false"
\&          override_recycle_leases                => "true" | "false",                               #Optional / Default is "false"
\&          override_update_dns_on_lease_renewal   => "true" | "false",                               #Optional / Default is "false"
\&          override_valid_lifetime                => "true" | "false",                               #Optional / Default is "false"
\&          preferred_lifetime                     => $num,                                           #Optional / Default is 27000
\&          range_templates                        => [$RangeTemplate1,$RangeTemplate2,...],          #Optional / Default is empty
\&          recycle_leases                         => "true" | "false" | undef,                       #Optional / Default is undefined
\&          rir_organization                       => $rir_org,                                       #Optional / An Infoblox::Grid::RIR::Organization object
\&          rir_registration_action                => \*(AqNONE\*(Aq | \*(AqCREATE\*(Aq,                              #Optional / Default is \*(AqNONE\*(Aq
\&          rir_registration_status                => \*(AqNOT_REGISTERED\*(Aq | \*(AqREGISTERED\*(Aq,                #Optional / Default is \*(AqNOT_REGISTERED\*(Aq
\&          send_rir_request                       => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                               #Optional / Default is \*(Aqfalse\*(Aq
\&          update_dns_on_lease_renewal            => "true" | "false",                               #Optional / Default is "false"
\&          valid_lifetime                         => $num,                                           #Optional / Default is 43200
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a \s-1DHCP\s0 IPv6 network template object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an IPv6 network template object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\&     #Construct an object
\&     my $ipv6network_template = Infoblox::DHCP::IPv6NetworkTemplate\->new(
\&            name              => "custom_network_template",
\&            allow_any_netmask => "true",
\&     );
\&
\&     # Submit for addition
\&     my $response = $session\->add( $ipv6network_template );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the matching IPv6 network template objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\&     Apply the following attributes to get a specific DHCP IPv6 network template object:
\&
\&      name \- Required. The name of network template.
\&      extattrs     \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&      my  @result_array = $session\->get(
\&           object  => "Infoblox::DHCP::IPv6NetworkTemplate" ,
\&           name    => "custom_network_template"
\&      );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve all the matching IPv6 network template objects from the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\&     Apply the following attributes to search for a specific DHCP IPv6 network template object:
\&
\&      name    \- Optional. The name of the network template (regular
\&                expression).
\&      comment \- Optional. The comment of the network template (regular
\&                expression).
\&      extattrs     \- Optional. A hash reference containing extensible attributes.
\&      extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\&      my  @result_array = $session\->search(
\&           object  => "Infoblox::DHCP::IPv6NetworkTemplate" ,
\&           name    => "custom_network_template"
\&       comment => ".*",
\&      );
\&
\&      # search all Network Templates with a given extensible attribute \*(AqSite\*(Aq
\&      my @retrieved_objs = $session\->search(
\&        object => "Infoblox::DHCP::IPv6NetworkTemplate",
\&        extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an IPv6 network template in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Modify enable_ddns method
\&     $object\->enable_ddns("true");
\&     # Submit modification
\&     my $response = $session\->modify( $object );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve it, and then submit it for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&     # Get the object under the same name
\&     my  @result_array = $session\->get(
\&
\&           object => "Infoblox::DHCP::IPv6NetworkTemplate" ,
\&           name   => "custom_network_template"
\&      );
\&
\&     # Find the desired object in the retrieved list
\&     my $desired_network_template = $result_array[0];
\&
\&     # Submit for removal
\&     my $response = $session\->remove( $desired_network_template );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 IPv6 network template object.
.SS "allow_any_netmask( )"
.IX Subsection "allow_any_netmask( )"
.RS 4
Use this method to set or retrieve the allow_any_netmask parameter of a \s-1DHCP\s0 IPv6 network template object. If you set this parameter to \*(L"true\*(R", then the template allows any netmask. A user must specify a netmask when creating a network using this template. If you set this parameter to false, you must specify the \*(L"netmask\*(R" property for the network template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the allow_any_netmask parameter or specify \*(L"false\*(R" if you want to specify a particular netmask. The default value is false.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     # Get allow_any_netmask
\&     my $allow_any_netmask = $ipv6network_template\->allow_any_netmask()
\&     # Modify allow_any_netmask
\&     $ipv6network_template\->allow_any_netmask("true");
.Ve
.RE
.RS 4
.RE
.SS "auto_create_reversezone( )"
.IX Subsection "auto_create_reversezone( )"
.RS 4
Use this method to set or retrieve the auto_create_reversezone flag of a \s-1DHCP\s0 IPv6 network template object. This flag indicates whether the appliance must automatically create the corresponding reverse zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to create a reverse zone automatically or \*(L"false\*(R" to disable the automatic creation of a reverse zone.The default value for this field is false.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     # Get auto_create_reversezone
\&     my $auto_create_reversezone = $ipv6network_template\->auto_create_reversezone();
\&     # Modify auto_create_reversezone
\&     $ipv6network_template\->auto_create_reversezone("true");
.Ve
.RE
.RS 4
.RE
.SS "cidr( )"
.IX Subsection "cidr( )"
.RS 4
Use this method to set or retrieve the \s-1CIDR\s0 for the IPv6 network template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the \s-1CIDR\s0 as a number from 1 to 128.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get CIDR
\& my $cidr = $ipv6network_template\->cidr();
\& #Modify CIDR
\& $ipv6network_template\->cidr("68");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment about a \s-1DHCP\s0 IPv6 network template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter a descriptive comment for the network template in string format and with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     # Get comment
\&     my $comment = $ipv6network_template\->comment();
\&     # Modify comment
\&     $ipv6network_template\->comment("add a network");
.Ve
.RE
.RS 4
.RE
.SS "ddns_domainname( )"
.IX Subsection "ddns_domainname( )"
.RS 4
Use this method to set or retrieve the ddns_domainname value of a \s-1DHCP\s0 IPv6 Network Tempate object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_domainname method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_ddns_domainname attribute to \*(L"false\*(R".
.Sp
Note that when ddns_domainname is set to a defined value and override_ddns_domainname is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); will set override_ddns_domainname to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); will result in override_ddns_domainname=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The dynamic \s-1DNS\s0 domain name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ddns_domainname
\& my $ddns_domainname = $ipv6network_template\->ddns_domainname();
\& #Modify ddns_domainname
\& $ipv6network_template\->ddns_domainname("test_domain.com");
.Ve
.RE
.RS 4
.RE
.SS "ddns_enable_option_fqdn( )"
.IX Subsection "ddns_enable_option_fqdn( )"
.RS 4
Use this method to set or retrieve the ddns_enable_option_fqdn flag of a \s-1DHCP\s0 IPv6 network template object. This method controls whether the \s-1FQDN\s0 option sent by the client is to be used, or if the server can automatically generate the \s-1FQDN.\s0 This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_enable_option_fqdn method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level setting and automatically resets the override_ddns_enable_option_fqdn attribute to \*(L"false\*(R".
.Sp
Note that when ddns_enable_option_fqdn is set to a defined value and override_ddns_enable_option_fqdn is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_enable_option_fqdn(\*(L"true\*(R"); \f(CW$object\fR\->override_ddns_enable_option_fqdn(\*(L"false\*(R"); will set override_ddns_enable_option_fqdn to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_enable_option_fqdn(\*(L"false\*(R"); \f(CW$object\fR\->ddns_enable_option_fqdn(\*(L"true\*(R"); will result in override_ddns_enable_option_fqdn=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to generate the hostname or \*(L"false\*(R" to deactivate/unset it. The default value is undefined, which indicates that this attribute inherits the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     # Get ddns_enable_option_fqdn
\&     my $ddns_enable_option_fqdn = $ipv6network_template\->ddns_enable_option_fqdn()
\&     # Modify ddns_enable_option_fqdn
\&     $ipv6network_template\->ddns_enable_option_fqdn("true");
\&     #Remove override
\&     $network_template\->ddns_enable_option_fqdn(undef);
.Ve
.RE
.RS 4
.RE
.SS "ddns_generate_hostname( )"
.IX Subsection "ddns_generate_hostname( )"
.RS 4
Use this method to set or retrieve the ddns_generate_hostname flag of a \s-1DHCP\s0 IPv6 network template object. Set this flag to allow only the \s-1DHCP\s0 server to generate a hostname. This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_generate_hostname method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level setting and automatically resets the override_ddns_generate_hostname attribute to \*(L"false\*(R".
.Sp
Note that when ddns_generate_hostname is set to a defined value and override_ddns_generate_hostname is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_generate_hostname(\*(L"true\*(R"); \f(CW$object\fR\->override_ddns_generate_hostname(\*(L"false\*(R"); will set override_ddns_generate_hostname to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_generate_hostname(\*(L"false\*(R"); \f(CW$object\fR\->ddns_generate_hostname(\*(L"true\*(R"); will result in override_ddns_generate_hostname=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to generate the hostname or \*(L"false\*(R" to deactivate/unset it. The default value is undefined, which indicates that this attribute inherits the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     # Get ddns_generate_hostname
\&     my $ddns_generate_hostname = $ipv6network_template\->ddns_generate_hostname()
\&     # Modify ddns_generate_hostname
\&     $ipv6network_template\->ddns_generate_hostname("true");
\&     #Remove override
\&     $network_template\->ddns_generate_hostname(undef);
.Ve
.RE
.RS 4
.RE
.SS "ddns_server_always_updates( )"
.IX Subsection "ddns_server_always_updates( )"
.RS 4
Use this method to set or retrieve the ddns_server_always_updates flag of a \s-1DHCP\s0 IPv6 network template object. Set this flag to allow the \s-1DHCP\s0 server only to update \s-1DNS,\s0 regardless of the requests from \s-1DHCP\s0 clients.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set this flag and allow only the \s-1DHCP\s0 server to update \s-1DNS\s0 or \*(L"false\*(R" to deactivate/unset the flag. The default value is true.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     # Get ddns_server_always_updates
\&     my $ddns_server_always_updates = $ipv6network_template\->ddns_server_always_updates()
\&     # Modify ddns_server_always_updates
\&     $ipv6network_template\->ddns_server_always_updates("true");
.Ve
.RE
.RS 4
.RE
.SS "ddns_ttl( )"
.IX Subsection "ddns_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 update Time to Live (\s-1TTL\s0) value of a \s-1DHCP\s0 IPv6 network template object. The \s-1TTL\s0 value indicates the number of seconds the Infoblox appliance caches a \s-1DDNS\s0 update.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_ttl method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_ddns_ttl attribute to \*(L"false\*(R".
.Sp
Note that when ddns_ttl is set to a defined value and override_dddns_ttl is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_ttl(12); \f(CW$object\fR\->override_ddns_ttl(\*(L"false\*(R"); will set override_ddns_ttl to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_ttl(\*(L"false\*(R"); \f(CW$object\fR\->ddns_ttl(12); will result in override_ddns_ttl=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer, from 0 to 4294967295, that represents the duration, in seconds, that the update is cached. Zero indicates that the update will not be cached. The default value is 0.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get DNS Update TTL
\&     my $dns_ttl = $ipv6network_template\->ddns_ttl();
\&     #Modify DNS Update TTL
\&     $ipv6network_template\->ddns_ttl(1200);
.Ve
.RE
.RS 4
.RE
.SS "domain_name( )"
.IX Subsection "domain_name( )"
.RS 4
Use this method to set or retrieve the domain_name value of a \s-1DHCP\s0 IPv6 network template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_domain_name method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_domain_name attribute to \*(L"false\*(R".
.Sp
Note that when domain_name is set to a defined value and override_domain_name is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->domain_name(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_domain_name(\*(L"false\*(R"); will set override_domain_name to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_domain_name(\*(L"false\*(R"); \f(CW$object\fR\->domain_name(\*(L"testdomain\*(R"); will result in override_domain_name=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The client's domain name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get domain_name
\& my $domain_name = $ipv6network_template\->domain_name();
\& #Modify domain_name
\& $ipv6network_template\->domain_name("test_domain.com");
.Ve
.RE
.RS 4
.RE
.SS "domain_name_servers( )"
.IX Subsection "domain_name_servers( )"
.RS 4
Use this method to set or retrieve the domain_name_servers value of a \s-1DHCP\s0 IPv6 network template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_domain_name_servers method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_domain_name_servers attribute to \*(L"false\*(R".
.Sp
Note that when domain_name_servers is set to a defined value and override_domain_name_servers is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->domain_name_servers(\*(L"2001::1,2001::2\*(R"); \f(CW$object\fR\->override_domain_name_servers(\*(L"false\*(R"); will set override_domain_name_servers to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_domain_name_servers(\*(L"false\*(R"); \f(CW$object\fR\->domain_name_servers(\*(L"2001::1,2001::2\*(R"); will result in override_domain_name_servers=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The domain name server addresses in IPv6 address format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get domain_name_servers
\& my $domain_name_servers = $ipv6network_template\->domain_name_servers();
\& #Modify domain_name_servers
\& $ipv6network_template\->domain_name_servers("2001::1,2001::2");
.Ve
.RE
.RS 4
.RE
.SS "enable_ddns( )"
.IX Subsection "enable_ddns( )"
.RS 4
Use this method to set or retrieve the dynamic \s-1DNS\s0 updates flag of a \s-1DHCP\s0 IPv6 network template object. The \s-1DHCP\s0 server can send \s-1DDNS\s0 updates to \s-1DNS\s0 servers in the same grid and to external \s-1DNS\s0 servers. This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_enable_ddns method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_enable_ddns attribute to \*(L"false\*(R".
.Sp
Note that when enable_ddns is set to a defined value and override_enable_ddns is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->enable_ddns(\*(L"true\*(R"); \f(CW$object\fR\->override_enable_ddns(\*(L"false\*(R"); will set override_enable_ddns to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_enable_ddns(\*(L"false\*(R"); \f(CW$object\fR\->enable_ddns(\*(L"true\*(R"); will result in override_enable_ddns=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the dynamic \s-1DNS\s0 updates flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined, which indicates that this attribute inherits the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     # Get enable_ddns
\&     my $enable_ddns = $ipv6network_template\->enable_ddns()
\&     # Modify enable_ddns
\&     $ipv6network_template\->enable_ddns("true");
\&     # Remove the enable_ddns override
\&     $ipv6network_template\->enable_ddns(undef);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with an IPv6 network template object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $ipv6network_template\->extattrs();
\& #Modify extattrs
\& $ipv6network_template\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with an IPv6 network template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $ipv6network_template\->extensible_attributes();
\& #Modify extensible attributes
\& $ipv6network_template\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "fixed_address_templates( )"
.IX Subsection "fixed_address_templates( )"
.RS 4
Use this method to set or retrieve the IPv6 fixed address template that is assigned to this IPv6 network template. When you create a network based on a network template that includes a fixed address template, the fixed addresses are created based on the associated fixed address template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference of  Infoblox::DHCP::Template objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\&     # Get fixed_address_templates
\&     my $fixed_address_templates = $ipv6network_template\->fixed_address_templates();
\&     # Modify fixed_address_templates
\&     my $tmpl = Infoblox::DHCP::Template\->new(
\&        name => "custom_fixed_address_template"
\&     );
\&     $network_template\->fixed_address_templates([$tmpl]);
.Ve
.RE
.RS 4
.RE
.SS "ipv6prefix( )"
.IX Subsection "ipv6prefix( )"
.RS 4
Use this method to set or retrieve the IPv6 prefix of a \s-1DHCP\s0 IPv6 network template object. The prefix must belong to the list of global prefixes defined in the Infoblox::Grid::DHCP object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
IPv6 prefix from the list of global IPv6 prefixes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
ls.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6prefix
\& my $ipv6prefix = $ipv6network_template\->ipv6prefix();
\& #Modify ipv6prefix
\& $griddhcp\->ipv6prefix("2001::");
.Ve
.RE
.RS 4
.RE
.SS "members( )"
.IX Subsection "members( )"
.RS 4
Use this method to set or retrieve the member assigned to the IPv6 network template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DHCP::Member objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my $member1 = Infoblox::DHCP::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => "192.168.1.2",
\& );
\&
\& #Create a network template with this member
\& my $ipv6network_template = Infoblox::DHCP::IPv6NetworkTemplate\->new(
\&     name    => "custom_network_template",
\&     members => [$member1],
\& );
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of the \s-1DHCP\s0 IPv6 network template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The network template name in string format and with a maximum of 64 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get name
\&     my $name = $ipv6network_template\->name();
\&     #Modify name
\&     $ipv6network_template\->name("custom_network_template");
.Ve
.RE
.RS 4
.RE
.SS "options( )"
.IX Subsection "options( )"
.RS 4
Use this method to set or retrieve the options value of an IPv6 network template object. \s-1DHCP\s0 options provide network configuration settings and various services available on the network for \s-1DHCP.\s0 This setting overrides the upper-level setting. The default value is undefined which indicates that this attribute inherit the upper-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_options method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_options attribute to \*(L"false\*(R".
.Sp
Note that when the options method is set to a defined value and override_options is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->options([ \f(CW$opt\fR ]); \f(CW$object\fR\->override_options(\*(L"false\*(R"); will set override_options to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_options(\*(L"false\*(R"); \f(CW$object\fR\->options([ \f(CW$opt\fR ]); will result in override_options=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DHCP::Option objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\&     #Get options
\&     my $options = $ipv6network_template\->options();
\&     #Modify options
\&     my $option1 = Infoblox::DHCP::Option\->new(
\&         name   => "dhcp6.rapid\-commit",
\&         value  => "true"
\&     );
\&     $ipv6network_template\->options([$option1]);
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_domainname( )"
.IX Subsection "override_ddns_domainname( )"
.RS 4
The override_ddns_domainname attribute controls whether the ddns_domainname value in the \s-1DHCP\s0 IPv6 Network Template is used, instead of the grid default.
.Sp
The override_ddns_domainname attribute can be specified explicitly. It is also set implicitly when ddns_domainname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for ddns_domainname. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for ddns_domainname.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_domainname
\&    my $override_ddns_domainname=$ipv6network_template\->override_ddns_domainname( );
\&    #Modifying override_ddns_domainname
\&    $ipv6network_template\->override_ddns_domainname("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_enable_option_fqdn( )"
.IX Subsection "override_ddns_enable_option_fqdn( )"
.RS 4
The override_ddns_enable_option_fqdn attribute controls whether the ddns_enable_option_fqdn value in the \s-1DHCP\s0 IPv6 network template is used, instead of the grid default.
.Sp
The override_ddns_enable_option_fqdn attribute can be specified explicitly. It is also set implicitly when ddns_domainname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for ddns_enable_option_fqdn. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for ddns_enable_option_fqdn.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get override_ddns_enable_option_fqdn
\&    my $override_ddns_enable_option_fqdn=$ipv6network_template\->override_ddns_enable_option_fqdn( );
\&    #Modify override_ddns_enable_option_fqdn
\&    $ipv6network_template\->override_ddns_enable_option_fqdn("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_generate_hostname( )"
.IX Subsection "override_ddns_generate_hostname( )"
.RS 4
The override_ddns_generate_hostname attribute controls whether the ddns_generate_hostname value in the \s-1DHCP\s0 IPv6 network template is used, instead of the grid default.
.Sp
The override_ddns_generate_hostname attribute can be specified explicitly. It is also set implicitly when ddns_domainname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for ddns_generate_hostname. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for ddns_generate_hostname.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get override_ddns_generate_hostname
\&    my $override_ddns_generate_hostname=$ipv6network_template\->override_ddns_generate_hostname( );
\&    #Modify override_ddns_generate_hostname
\&    $ipv6network_template\->override_ddns_generate_hostname("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_ttl( )"
.IX Subsection "override_ddns_ttl( )"
.RS 4
The override_ddns_ttl attribute controls whether the ddns_ttl value in the \s-1DHCP\s0 IPv6 network template object is used, instead of the grid default.
.Sp
The override_ddns_ttl attribute can be specified explicitly. It is also set implicitly when ddns_ttl is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for ddns_ttl. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for ddns_ttl.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get override_ddns_ttl
\&    my $override_ddns_ttl=$ipv6network_template\->override_ddns_ttl( );
\&    #Modify override_ddns_ttl
\&    $ipv6network_template\->override_ddns_ttl("true");
.Ve
.RE
.RS 4
.RE
.SS "override_domain_name( )"
.IX Subsection "override_domain_name( )"
.RS 4
The override_domain_name attribute controls whether the domain_name value in the \s-1DHCP\s0 IPv6 network template is used, instead of the grid default.
.Sp
The override_domain_name attribute can be specified explicitly. It is also set implicitly when domain_name is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for domain_name. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for domain_name.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_domain_name
\&    my $override_domain_name=$ipv6network_template\->override_domain_name( );
\&    #Modifying override_domain_name
\&    $ipv6network_template\->override_domain_name("true");
.Ve
.RE
.RS 4
.RE
.SS "override_domain_name_servers( )"
.IX Subsection "override_domain_name_servers( )"
.RS 4
The override_domain_name_servers attribute controls whether the domain_name_servers value in the \s-1DHCP\s0 IPv6 network template is used, instead of the grid default.
.Sp
The override_domain_name_servers attribute can be specified explicitly. It is also set implicitly when domain_name_servers is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for domain_name_servers. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for domain_name_servers.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get override_domain_name_servers
\&    my $override_domain_name_servers=$ipv6network_template\->override_domain_name_servers( );
\&    #Modify override_domain_name_servers
\&    $ipv6network_template\->override_domain_name_servers("true");
.Ve
.RE
.RS 4
.RE
.SS "override_enable_ddns( )"
.IX Subsection "override_enable_ddns( )"
.RS 4
The override_enable_ddns attribute controls whether the enable_ddns value in the \s-1DHCP\s0 IPv6 network template is used, instead of the grid default.
.Sp
The override_enable_ddns attribute can be specified explicitly. It is also set implicitly when enable_ddns is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for enable_ddns. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for enable_ddns.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get override_enable_ddns
\&    my $override_enable_ddns=$ipv6network_template\->override_enable_ddns( );
\&    #Modify override_enable_ddns
\&    $ipv6network_template\->override_enable_ddns("true");
.Ve
.RE
.RS 4
.RE
.SS "override_options( )"
.IX Subsection "override_options( )"
.RS 4
The override_options attribute controls whether the options in the \s-1DHCP\s0 IPv6 network template are used, instead of the grid default.
.Sp
The override_options attribute can be specified explicitly. It is also set implicitly when options is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for options. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for options.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get override_options
\&    my $override_options=$ipv6network_template\->override_options( );
\&    #Modify override_options
\&    $ipv6network_template\->override_options("true");
.Ve
.RE
.RS 4
.RE
.SS "override_preferred_lifetime( )"
.IX Subsection "override_preferred_lifetime( )"
.RS 4
The override_preferred_lifetime attribute controls whether the preferred_lifetime value in the \s-1DHCP\s0 IPv6 network template is used, instead of the grid default.
.Sp
The override_preferred_lifetime attribute can be specified explicitly. It is also set implicitly when preferred_lifetime is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for options. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for options.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get override_preferred_lifetime
\&    my $override_preferred_lifetime=$ipv6network_template\->override_preferred_lifetime( );
\&    #Modify override_preferred_lifetime
\&    $ipv6network_template\->override_preferred_lifetime("true");
.Ve
.RE
.RS 4
.RE
.SS "override_recycle_leases( )"
.IX Subsection "override_recycle_leases( )"
.RS 4
The override_recycle_leases attribute controls whether the recycle_leases value in the \s-1DHCP\s0 IPv6 network template is used, instead of the grid default.
.Sp
The override_recycle_leases attribute can be specified explicitly. It is also set implicitly when recycle_leases is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for options. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for options.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get override_recycle_leases
\&    my $override_recycle_leases=$ipv6network_template\->override_recycle_leases( );
\&    #Modify override_recycle_leases
\&    $ipv6network_template\->override_recycle_leases("true");
.Ve
.RE
.RS 4
.RE
.SS "override_update_dns_on_lease_renewal( )"
.IX Subsection "override_update_dns_on_lease_renewal( )"
.RS 4
The override_update_dns_on_lease_renewal attribute controls whether the update_dns_on_lease_renewal value in the \s-1DHCP\s0 IPv6 network template is used, instead of the grid default.
.Sp
The override_update_dns_on_lease_renewal attribute can be specified explicitly. It is also set implicitly when update_dns_on_lease_renewal is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for update_dns_on_lease_renewal. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for update_dns_on_lease_renewal.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get override_update_dns_on_lease_renewal
\&    my $override_update_dns_on_lease_renewal=$ipv6network_template\->override_update_dns_on_lease_renewal( );
\&    #Modify override_update_dns_on_lease_renewal
\&    $ipv6network_template\->override_update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SS "override_valid_lifetime( )"
.IX Subsection "override_valid_lifetime( )"
.RS 4
The override_valid_lifetime attribute controls whether the valid_lifetime value in the \s-1DHCP\s0 IPv6 network template object is used, instead of the upper-level default.
.Sp
The override_valid_lifetime attribute can be specified explicitly. It is also set implicitly when valid_lifetime is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for valid_lifetime. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for valid_lifetime.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get override_valid_lifetime
\&    my $override_valid_lifetime=$ipv6network_template\->override_valid_lifetime( );
\&    #Modify override_valid_lifetime
\&    $ipv6network_template\->override_valid_lifetime("true");
.Ve
.RE
.RS 4
.RE
.SS "preferred_lifetime( )"
.IX Subsection "preferred_lifetime( )"
.RS 4
Use this method to set or retrieve the valid lifetime of the \s-1DHCP\s0 IPv6 network template object.
.Sp
Setting this method to a defined value implicitly sets the override_preferred_lifetime method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_preferred_lifetime attribute to \*(L"false\*(R".
.Sp
Note that when preferred_lifetime is set to a defined value and override_preferred_lifetime is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->preferred_lifetime(20000); \f(CW$object\fR\->override_preferred_lifetime(\*(L"false\*(R"); will set override_preferred_lifetime to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_preferred_lifetime(\*(L"false\*(R"); \f(CW$object\fR\->preferred_lifetime(20000); will result in override_preferred_lifetime=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Preferred lifetime value in seconds. The default value is 27000. Note that the preferred lifetime cannot be greater than the valid lifetime.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get preferred_lifetime
\& my $preferred_lifetime = $ipv6network_template\->preferred_lifetime();
\& #Modify preferred_lifetime
\& $ipv6network_template\->preferred_lifetime(12345);
.Ve
.RE
.RS 4
.RE
.SS "range_templates( )"
.IX Subsection "range_templates( )"
.RS 4
Use this method to set or retrieve the IPv6 address range template assigned to this IPv6 network template object.  When you create a network based on a network template object with a range template, the IPv6 address ranges are created based on the associated  IPv6 address range template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference of Infoblox::DHCP::Template objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\&     #Get range_templates
\&     my $range_templates = $ipv6network_template\->range_templates();
\&     #Modify range_templates
\&     my $tmpl = Infoblox::DHCP::Template\->new(
\&        name => "custom_range_template"
\&     );
\&     $ipv6network_template\->range_templates([ $tmpl ]);
.Ve
.RE
.RS 4
.RE
.SS "recycle_leases( )"
.IX Subsection "recycle_leases( )"
.RS 4
Use this method to set or retrieve the recycle_leases flag for an IPv6 network template object.
.Sp
If the flag is enabled, the leases are kept in the recycle bin until one week after expiration. When the flag is disabled, the leases are irrecoverably deleted.
.Sp
Setting this method to a defined value implicitly sets the override_recycle_leases method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_recycle_leases attribute to \*(L"false\*(R".
.Sp
Note that when recycle_leases is set to a defined value and override_recycle_leases is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->recycle_leases(\*(L"true\*(R"); \f(CW$object\fR\->override_recycle_leases(\*(L"false\*(R"); will set override_recycle_leases to \*(L"false\*(R", and the sequence \f(CW$objct\fR\->override_recycle_leases(\*(L"false\*(R"); \f(CW$object\fR\->recycle_leases(\*(L"true\*(R"); will result in override_recycle_leases=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the recycle_leases flag or \*(L"false\*(R" to disable it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get recycle_leases
\& my $recycle_leases = $ipv6network_template\->recycle_leases();
\& #Modify recycle_leases
\& $ipv6network_template\->recycle_leases("false");
.Ve
.RE
.RS 4
.RE
.SS "rir( )"
.IX Subsection "rir( )"
.RS 4
Use this method to retrieve the name of the Regional Internet Registry (\s-1RIR\s0) that allocated this address space. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1RIPE\s0' or '\s-1NONE\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get rir
\& my $rir = $ipv6network_template\->rir();
.Ve
.RE
.RS 4
.RE
.SS "rir_organization( )"
.IX Subsection "rir_organization( )"
.RS 4
Use this method to set or retrieve the Regional Internet Registry (\s-1RIR\s0) organization object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An Infoblox::Grid::RIR::Organization object.
.Sp
You must enable support for \s-1RIR/SWIP\s0 at the Grid level before you can set attribute values. See Infoblox::Grid\->\fBenable_rir_swip()\fR method.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get rir_organization
\& my $rir_organization = $ipv6network_template\->rir_organization();
\& #Modify rir_organization
\& $ipv6network_template\->rir_organization($rir_org);
.Ve
.RE
.RS 4
.RE
.SS "rir_registration_action( )"
.IX Subsection "rir_registration_action( )"
.RS 4
Use this method to set or retrieve the registration action of Regional Internet Registry (\s-1RIR\s0).
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1NONE\s0', '\s-1CREATE\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get rir_registration_action
\& my $rir_registration_action = $ipv6network_template\->rir_registration_action();
\& #Modify rir_registration_action
\& $ipv6network_template\->rir_registration_action(\*(AqCREATE\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "rir_registration_status( )"
.IX Subsection "rir_registration_status( )"
.RS 4
Use this method to set or retrieve the registration status of Regional Internet Registry (\s-1RIR\s0).
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The registration status of Regional Internet Registry (\s-1RIR\s0), which can be '\s-1REGISTERED\s0' or '\s-1NOT_REGISTERED\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get rir_registration_status
\& my $rir_registration_status = $ipv6network_template\->rir_registration_status();
\& #Modify rir_registration_status
\& $ipv6network_template\->rir_registration_status(\*(AqNOT_REGISTERED\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "send_rir_request( )"
.IX Subsection "send_rir_request( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the appliance should send an \s-1API\s0 or email request for Regional Internet Registry (\s-1RIR\s0).
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the send_rir_request flag or \*(L"false\*(R" to unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get send_rir_request
\& my $send_rir_request = $ipv6network_template\->send_rir_request();
\& #Modify send_rir_request
\& $ipv6network_template\->send_rir_request(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "update_dns_on_lease_renewal( )"
.IX Subsection "update_dns_on_lease_renewal( )"
.RS 4
The update_dns_on_lease_renewal attribute controls whether the \s-1DHCP\s0 server updates \s-1DNS\s0 when a \s-1DHCP\s0 lease is renewed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_update_dns_on_lease_renewal method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_update_dns_on_lease_renewal attribute to \*(L"false\*(R".
.Sp
Note that when update_dns_on_lease_renewal is set to a defined value and override_update_dns_on_lease_renewal is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); will set override_update_dns_on_lease_renewal to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); will result in override_update_dns_on_lease_renewal=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the update_dns_on_lease_renewal flag or \*(L"false\*(R" to deactivate/unset it.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get update_dns_on_lease_renewal
\&    my $update_dns_on_lease_renewal=$ipv6network_template\->update_dns_on_lease_renewal( );
\&    #Modify update_dns_on_lease_renewal
\&    $ipv6network_template\->update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SS "valid_lifetime( )"
.IX Subsection "valid_lifetime( )"
.RS 4
Use this method to set or retrieve the valid lifetime of the \s-1DHCP\s0 IPv6 network template object.
.Sp
Setting this method to a defined value implicitly sets the override_valid_lifetime method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_valid_lifetime attribute to \*(L"false\*(R".
.Sp
Note that when valid_lifetime is set to a defined value and override_valid_lifetime is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->valid_lifetime(20000); \f(CW$object\fR\->override_valid_lifetime(\*(L"false\*(R"); will set override_valid_lifetime to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_valid_lifetime(\*(L"false\*(R"); \f(CW$object\fR\->valid_lifetime(20000); will result in override_valid_lifetime=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid lifetime value in seconds. The default value is 43200.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get valid_lifetime
\& my $valid_lifetime = $ipv6network_template\->valid_lifetime();
\& #Modify valid_lifetime
\& $ipv6network_template\->valid_lifetime(12345);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
.Vb 1
\& #Preparation prior to a DHCP IPv6 network template object insertion
.Ve
.PP
\&\fB#PROGRAM \s-1STARTS\s0\fR: Include all the modules that will be used
 use strict;
 use Infoblox;
\&\fB#Create a session to the Infoblox DNSone appliance\fR
 my \f(CW$session\fR = Infoblox::Session\->new(
     master   => \*(L"192.168.1.2\*(R",
     username => \*(L"admin\*(R",
     password => \*(L"infoblox\*(R"
 );
.PP
.Vb 5
\& unless ($session) {
\&     die("Construct session failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& my $memberdhcp = Infoblox::DHCP::Member\->new(
\&     name     => $host_name,
\&     ipv4addr => $node_ip
\& );
.Ve
.PP
\&\fB#Add IPv6 network template object\fR
.PP
.Vb 1
\& #Create a DHCP network template object
\&
\& my $network_template = Infoblox::DHCP::IPv6NetworkTemplate\->new(
\&     name                    => "custom_network_template",
\&     cidr                    => 64,
\&     comment                 => "add IPv6 network template",
\&     members                 => [ $memberdhcp ],
\&     enable_ddns             => "false",
\&     valid_lifetime          => 99999,
\&     auto_create_reversezone => "true",
\& );
\&
\& my $response = $session\->add($network_template)
\&     or die("Add Network template failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network template added successfully\en";
.Ve
.PP
\&\fB#Get and modify an IPv6 network template attribute\fR
.PP
.Vb 5
\& #Get Network template through the session
\& my  @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::IPv6NetworkTemplate",
\&     name   => "custom_network_template"
\& );
\&
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Get Network template object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Network template found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Search an IPv6 network template attribute\fR
.PP
.Vb 5
\& #Search Network template through the session
\& my  @retrieved_objs = $session\->search(
\&     object => "Infoblox::DHCP::IPv6NetworkTemplate",
\&     name   => "custom_network_template"
\& );
\&
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Search Network template object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Network template found at least 1 matching entry\en";
\&
\& #Modify attributes of the specified IPv6 network template
\&
\& $object\->enable_ddns("true"); #Apply the changes
\&
\& $session\->modify($object)
\&     or die("Modify Network template attribute failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network template object modified successfully \en";
.Ve
.PP
\&\fB#Remove an IPv6 network template object\fR
.PP
.Vb 1
\& #Get IPv6 Network Template object through the session
\&
\& my @retrieved_objs = $session\->get(
\&     object  => "Infoblox::DHCP::IPv6NetworkTemplate",
\&     name    => "custom_network_template"
\& );
\&
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Get IPv6 Network Template object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Get IPv6 Network Template object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\&
\& $session\->remove($object)
\&     or die("Remove IPv6 Network Template failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "IPv6 Network Template removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,  Infoblox::DHCP::IPv6Network, Infoblox::Grid::DHCP, Infoblox::DHCP::Template, Infoblox::DHCP::Member, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
