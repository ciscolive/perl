.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::PublicSuffixList 3"
.TH Net::PublicSuffixList 3 "2020-01-08" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::PublicSuffixList \- The Mozilla Public Suffix List
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Net::PublicSuffixList;
\&
\&        my $psl = Net::PublicSuffixList\->new;
\&
\&        my $host = \*(Aqamazon.co.uk\*(Aq;
\&
\&        # get all the suffixes in host (like, uk and co.uk)
\&        my $suffixes = $psl\->suffixes_in( $host );
\&
\&        # get the longest suffix
\&        my $suffix   = $psl\->longest_suffix_in( $host );
\&
\&        my $hash     = $psl\->split_host( $host );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
I mostly wrote this because I was working on App::url and needed a
way to figure out which part of a \s-1URL\s0 was the registered part and with
was the top-level domain.
.PP
The Public Suffix List is essentially a self-reported collection of the
top-level, generic, country code, or whatever domains.
.IP "new" 4
.IX Item "new"
Create the new object and specify how you'd like to get the data. The
network file is about 220Kb, so you might want to fetch it once, store
it, and then use \f(CW\*(C`local_path\*(C'\fR to use it.
.Sp
The constructor first tries to use a local file. If you've disabled
that with \f(CW\*(C`no_local\*(C'\fR or the file doesn't exist, it moves on to trying
the network. If you've disabled the network with \f(CW\*(C`no_net\*(C'\fR, then it
complains but still returns the object. You can still construct your
own list with \f(CW\*(C`add_suffix\*(C'\fR.
.Sp
Possible keys:
.Sp
.Vb 5
\&        list_url    # the URL for the suffix list
\&        local_path  # the path to a local file that has the suffix list
\&        no_net      # do not use the network
\&        no_local    # do not use a local file
\&        cache_dir   # location to save the fetched file
.Ve
.IP "defaults" 4
.IX Item "defaults"
A hash of the default values for everything.
.IP "parse_list( \s-1STRING_REF\s0 )" 4
.IX Item "parse_list( STRING_REF )"
Take a scalar reference to the contents of the public suffix list,
find all the suffices and add them to the object.
.IP "add_suffix( \s-1STRING\s0 )" 4
.IX Item "add_suffix( STRING )"
Add \s-1STRING\s0 to the known public suffices. This returns the object itself.
.Sp
Before this adds the suffix, it strips off leading \f(CW\*(C`*\*(C'\fR and \f(CW\*(C`.*\*(C'\fR
characters. Some sources specify \f(CW\*(C`*.foo.bar\*(C'\fR, but this adds \f(CW\*(C`foo.bar\*(C'\fR.
.IP "remove_suffix( \s-1STRING\s0 )" 4
.IX Item "remove_suffix( STRING )"
Remove the \s-1STRING\s0 as a known public suffices. This returns the object
itself.
.IP "suffix_exists( \s-1STRING\s0 )" 4
.IX Item "suffix_exists( STRING )"
Return the invocant if the suffix exists, and the empty list otherwise.
.IP "suffixes_in( \s-1HOST\s0 )" 4
.IX Item "suffixes_in( HOST )"
Return an array reference of the publix suffixes in \s-1HOST,\s0 sorted from
shortest to longest.
.IP "longest_suffix_in( \s-1HOST\s0 )" 4
.IX Item "longest_suffix_in( HOST )"
Return the longest public suffix in \s-1HOST.\s0
.IP "split_host( \s-1HOST\s0 )" 4
.IX Item "split_host( HOST )"
Returns a hash reference with these keys:
.Sp
.Vb 4
\&        host    the input value
\&        suffix  the longest public suffix
\&    short   the input value with the public suffix
\&              (and leading dot) removed
.Ve
.IP "fetch_list_from_local" 4
.IX Item "fetch_list_from_local"
Fetch the public suffix list plaintext file from the path returned
by \f(CW\*(C`local_path\*(C'\fR. Returns a scalar reference to the text of the raw
\&\s-1UTF\-8\s0 octets.
.IP "fetch_list_from_net" 4
.IX Item "fetch_list_from_net"
Fetch the public suffix list plaintext file from the \s-1URL\s0 returned
by \f(CW\*(C`url\*(C'\fR. Returns a scalar reference to the text of the raw
\&\s-1UTF\-8\s0 octets.
.Sp
If you've set \f(CW\*(C`cache_dir\*(C'\fR in the object, this method attempts to
cache the response in that directory using \f(CW\*(C`default_local_file\*(C'\fR as
the filename. This cache is different than \f(CW\*(C`local_file\*(C'\fR although you
can use it as \f(CW\*(C`local_file\*(C'\fR.
.IP "url" 4
.IX Item "url"
Return the configured \s-1URL\s0 for the public suffix list.
.IP "default_url" 4
.IX Item "default_url"
Return the default \s-1URL\s0 for the public suffix list.
.IP "local_path" 4
.IX Item "local_path"
Return the configured local path for the public suffix list.
.IP "default_local_path" 4
.IX Item "default_local_path"
Return the default local path for the public suffix list.
.IP "local_file" 4
.IX Item "local_file"
Return the configured filename for the public suffix list.
.IP "default_local_file" 4
.IX Item "default_local_file"
Return the default filename for the public suffix list.
.SH "TO DO"
.IX Header "TO DO"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Domain::PublicSuffix, Mozilla::PublicSuffix, IO::Socket::SSL::PublicSuffix
.SH "SOURCE AVAILABILITY"
.IX Header "SOURCE AVAILABILITY"
This source is in Github:
.PP
.Vb 1
\&        http://github.com/briandfoy/net\-publicsuffixlist
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
brian d foy, \f(CW\*(C`<bdfoy@cpan.org>\*(C'\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2020, brian d foy, All Rights Reserved.
.PP
You may redistribute this under the terms of the Artistic License 2.0.
