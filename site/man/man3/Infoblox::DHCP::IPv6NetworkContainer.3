.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::IPv6NetworkContainer 3"
.TH Infoblox::DHCP::IPv6NetworkContainer 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::IPv6NetworkContainer \- DHCP IPv6 Network Container object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A network can contain child networks. The network that contains the child network is called a network container. This object encapsulates an IPv6 network container object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\&  my $network = Infoblox::DHCP::IPv6NetworkContainer\->new(
\&                  network                         => $ipv6_subnet/prefix,               #Required, when creating a network container
\&                  auto_create_reversezone         => "true" | "false",                  #Optional / Default is "false"
\&                  comment                         => $string| undef,                    #Optional / Default is undefined
\&                  remove_subnets                  => "true" | "false",                  #Optional / Default is undefined
\&                  rir_organization                => $rir_org,                          #Optional / An Infoblox::Grid::RIR::Organization object
\&                  rir_registration_action         => \*(AqNONE\*(Aq | \*(AqCREATE\*(Aq | \*(AqMODIFY\*(Aq | \*(AqDELETE\*(Aq,  # Optional / write\-only
\&                  rir_registration_status         => \*(AqNOT_REGISTERED\*(Aq | \*(AqREGISTERED\*(Aq,   #Optional / Default is \*(AqNOT_REGISTERED\*(Aq
\&                  send_rir_request                => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                  #Optional / write\-only
\&                  delete_reason                   => $string,                           #Optional / write\-only
\&                                                                                        #Required only if \*(Aqrir_registration_action\*(Aq is specified as \*(AqDELETE\*(Aq
\&                  mgm_private                     => "true" | "false",                  #Optional / Default is "false"
\&                  network_container               => $ipv6_subnet/prefix,               #Optional / Default is "/"
\&                  network_view                    => $NetworkView,                      #Optional / Default is the system\-defined default network view
\&                  zone_associations               => [$zone1, $zone2, ... ] | undef,    #Optional / Default is an empty list
\&                  extattrs                        => { $string => $extattr, ... },      #Required if \*(Aqrir_organization\*(Aq attribute is defined
\&                                                                                        #Otherwise is optional
\&                  extattrs                        => { $string => $extattr, ... },      #Required if \*(Aqrir_organization\*(Aq attribute is defined
\&                                                                                        #Otherwise is optional
\&                  extensible_attributes           => { $string => $string | $num, $string => [ $string | $num, ... ], ... } #Required if \*(Aqrir_organization\*(Aq attribute is defined
\&                                                                                                                            #Otherwise is optional
\&                  discovery_blackout_setting      => $blackout,                         #Optional
\&                  port_control_blackout_setting   => $blackout,                         #Optional
\&                  override_blackout_setting       => "true" | "false",                  #Optional / Default value is "false"
\&                  same_port_control_discovery_blackout => "true" | "false",             #Optional / Default value is "false"
\&
\&                  ddns_domainname                       => $string| undef,                    #Optional / Default is undefined
\&                  ddns_enable_option_fqdn               => "true" | "false" ,                 #Optional / Default is "false"
\&                  ddns_generate_hostname                => "true" | "false" | undef,          #Optional / Default is undefined
\&                  ddns_server_always_updates            => "true" | "false",                  #Optional / Default is "true"
\&                  ddns_ttl                              => $num,                              #Optional / Default is "0"
\&                  domain_name                           => $string,                           #Optional / Default is undefined
\&                  domain_name_servers                   => "$ipv6addr,$ipv6addr,...",         #Optional / Default is undefined
\&                  enable_ddns                           => "true" | "false" | undef,          #Optional / Default is undefined
\&                  options                               => [$Option1,$Option2,...],           #Optional / Default is empty list
\&                  override_ddns_domainname              => "true" | "false",                  #Optional / Default value is "false"
\&                  override_ddns_enable_option_fqdn      => "true" | "false",                  #Optional / Default value is "false"
\&                  override_ddns_generate_hostname       => "true" | "false",                  #Optional / Default value is "false"
\&                  override_ddns_ttl                     => "true" | "false",                  #Optional / Default value is "false"
\&                  override_domain_name                  => "true" | "false",                  #Optional / Default value is "false"
\&                  override_domain_name_servers          => "true" | "false",                  #Optional / Default value is "false"
\&                  override_enable_ddns                  => "true" | "false",                  #Optional / Default value is "false"
\&                  override_mgm_private                  => "true" | "false",                  #Optional / Default value is "false"
\&                  override_options                      => "true" | "false",                  #Optional / Default value is "false"
\&                  override_preferred_lifetime           => "true" | "false",                  #Optional / Default value is "false"
\&                  override_recycle_leases               => "true" | "false",                  #Optional / Default value is "false"
\&                  override_update_dns_on_lease_renewal  => "true" | "false",                  #Optional / Default value is "false"
\&                  override_valid_lifetime               => "true" | "false",                  #Optional / Default value is "false"
\&                  preferred_lifetime                    => $num,                              #Optional / Default is "27000"
\&                  recycle_leases                        => "true" | "false" | undef,          #Optional / Default is undefined
\&                  update_dns_on_lease_renewal           => "true" | "false",                  #Optional / Default value is "false"
\&                  valid_lifetime                        => $num,                              #Optional / Default is "43200"
\&                  subscribe_settings          => $subscribe_settings,                         #Optional / Default is undefined
\&                  override_subscribe_settings => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                            #Optional / Default is \*(Aqfalse\*(Aq
\&                  discovery_engine_type       => \*(AqNETMRI\*(Aq | \*(AqNETWORK_INSIGHT\*(Aq | \*(AqVDISCOVERY\*(Aq | \*(AqUNKNOWN\*(Aq | \*(AqNONE\*(Aq, #Optional / Default is \*(AqNONE\*(Aq
\&               );
.Ve
.PP
You cannot set both extattrs and extensible_attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a \s-1DHCP\s0 IPv6 Network Container object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP\s0 IPv6 Network Container object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Adding an IPv6 network container.
\& #Construct an object
\& my $network_container = Infoblox::DHCP::IPv6NetworkContainer\->new(
\&        network => "2001::/64",
\& );
\&
\& # Submit for adding a network container
\& my $response = $session\->add( $network_container );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching \s-1DHCP\s0 IPv6 Network Container objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP IPv6 Network Container object:
\&
\&  network               \- Optional. The IPv6 address and netmask of a network in CIDR format.
\&  network_view          \- Optional. The network view in which the network is located. By default, all network views are searched.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&  comment               \- Optional. A comment in string format.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\&  my  @result_array = $session\->get(
\&       object        => "Infoblox::DHCP::IPv6NetworkContainer",
\&       network       => "2001::/64",
\&       network_view  => "default"
\&  );
\&
\&  my  @result_array = $session\->get(
\&       object                => "Infoblox::DHCP::IPv6NetworkContainer",
\&       extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\&  );
\&
\&  my  @result_array = $session\->get(
\&       object  => "Infoblox::DHCP::IPv6NetworkContainer",
\&       comment => "my\-comment",
\&  );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 IPv6 Network Container object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify comment.
\& $network_container\->comment("modified comment");
\& # Submit modification
\& my $response = $session\->modify( $network_container );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& remove_options \- Optional. A hash reference containing the following attributes:
\&
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | reason             \- Optional. The reason for removing the network container in string   |
\& |                      format with a maximum of 256 bytes.                                 |
\& |                      Used when \*(Aqrir_organization\*(Aq attribute has been defined.            |
\& | send_rir_request   \- Optional. Boolean flag that indicates whether the appliance should  |
\& |                      send an API or email request for Regional Internet Registry (RIR).  |
\& |                      Used when \*(Aqrir_organization\*(Aq attribute has been defined.            |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get the object under the same name
\&my  @result_array = $session\->get(
\&
\&       object        => "Infoblox::DHCP::IPv6NetworkContainer" ,
\&       network       => "2001::/64",
\&       network_view  => "default"
\&  );
\&
\& # Find the desired object in the retrieved list.
\& my $network_container = $result_array[0];
\&
\& # Submit for removal
\& my $response = $session\->remove(
\&     $network_container,
\&     remove_options => {\*(Aqreason\*(Aq => \*(AqMoved to B3\*(Aq, send_rir_request => \*(Aqtrue\*(Aq} );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for a \s-1DHCP\s0 IPv6 Network Container object in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DHCP IPv6 Network Container object:
\&
\&  network               \- Optional. The IPv6 address and netmask of a network in CIDR format (regular expression).
\&  network_view          \- Optional. The network view in which the network is located. By default, all network views are searched.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&  comment               \- Optional. A comment in string format (regular expression).
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 6
\& # search for all DHCP IPv6 Network Container objects
\&     my @retrieved_objs = $session\->search(
\&       object       => "Infoblox::DHCP::IPv6NetworkContainer",
\&       network      => "2001.*",
\&       network_view => "default"
\&     );
\&
\& # search network by comment
\&     my @retrieved_objs = $session\->search(
\&       object    => "Infoblox::DHCP::IPv6NetworkContainer",
\&       comment   => "my\-comment",
\&     );
\&
\& # search for all DHCP IPv6 Network Container objects defining "Santa Clara" for "Site" extensible attribute
\&     my @retrieved_objs = $session\->search(
\&       object                => "Infoblox::DHCP::IPv6NetworkContainer",
\&       extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\&     );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 IPv6 Network Container object.
.SS "auto_create_reversezone( )"
.IX Subsection "auto_create_reversezone( )"
.RS 4
Use this method to set the auto_create_reversezone flag of a \s-1DHCP\s0 IPv6 Network Container object.
.Sp
Include the specified parameter to set the attribute value. This is a write-only attribute and cannot be retrieved after it is set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the auto_create_reversezone flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Modify auto_create_reversezone
\& $network_container\->auto_create_reversezone("true");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment for a \s-1DHCP\s0 IPv6 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter a descriptive comment for the network container in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get comment
\& my $comment = $network_container\->comment();
\& # Modify comment
\& $network_container\->comment("add a network");
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to set or retrieve cloud \s-1API\s0 related information for the Infoblox::DHCP::IPv6NetworkContainer object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a Infoblox::Grid::CloudAPI::Info object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get cloud_info
\& my $cloud_info = $network_view\->cloud_info();
\& # Modify cloud_info
\& $network_view\->cloud_info($cloud_info_object);
.Ve
.RE
.RS 4
.RE
.SS "ddns_domainname( )"
.IX Subsection "ddns_domainname( )"
.RS 4
Use this method to set or retrieve the ddns_domainname value of a \s-1DHCP\s0 IPv6 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_domainname method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_ddns_domainname attribute to \*(L"false\*(R".
.Sp
Note that when ddns_domainname is set to a defined value and override_ddns_domainname is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); will set override_ddns_domainname to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); will result in override_ddns_domainname=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The dynamic \s-1DNS\s0 domain name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ddns_domainname
\& my $ddns_domainname = $network_container\->ddns_domainname();
\& #Modify ddns_domainname
\& $network_container\->ddns_domainname("test_domain.com");
.Ve
.RE
.RS 4
.RE
.SS "ddns_enable_option_fqdn( )"
.IX Subsection "ddns_enable_option_fqdn( )"
.RS 4
Use this method to set or retrieve the ddns_enable_option_fqdn flag of a \s-1DHCP\s0 IPv6 Network Container object. This method controls whether the \s-1FQDN\s0 option sent by the client is to be used, or if the server can automatically generate the \s-1FQDN.\s0 This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_enable_option_fqdn method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level setting and automatically resets the override_ddns_enable_option_fqdn attribute to \*(L"false\*(R".
.Sp
Note that when ddns_enable_option_fqdn is set to a defined value and override_ddns_enable_option_fqdn is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_enable_option_fqdn(\*(L"true\*(R"); \f(CW$object\fR\->override_ddns_enable_option_fqdn(\*(L"false\*(R"); will set override_ddns_enable_option_fqdn to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_enable_option_fqdn(\*(L"false\*(R"); \f(CW$object\fR\->ddns_enable_option_fqdn(\*(L"true\*(R"); will result in override_ddns_enable_option_fqdn=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to generate hostname or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined, which indicates that this attribute inherits the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ddns_enable_option_fqdn
\& my $ddns_enable_option_fqdn = $network_container\->ddns_enable_option_fqdn()
\& # Modify ddns_enable_option_fqdn
\& $network_container\->ddns_enable_option_fqdn("true");
\& #Un\-override
\& $network_container\->ddns_enable_option_fqdn(undef);
.Ve
.RE
.RS 4
.RE
.SS "ddns_generate_hostname( )"
.IX Subsection "ddns_generate_hostname( )"
.RS 4
Use this method to set or retrieve the ddns_generate_hostname flag of a \s-1DHCP\s0 IPv6 Network Container object. Enable this method to allow only the \s-1DHCP\s0 server for generating hostname. This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_generate_hostname method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level setting and automatically resets the override_ddns_generate_hostname attribute to \*(L"false\*(R".
.Sp
Note that when ddns_generate_hostname is set to a defined value and override_ddns_generate_hostname is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_generate_hostname(\*(L"true\*(R"); \f(CW$object\fR\->override_ddns_generate_hostname(\*(L"false\*(R"); will set override_ddns_generate_hostname to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_generate_hostname(\*(L"false\*(R"); \f(CW$object\fR\->ddns_generate_hostname(\*(L"true\*(R"); will result in override_ddns_generate_hostname=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to generate a hostname or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined, which indicates that this attribute inherits the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ddns_generate_hostname
\& my $ddns_generate_hostname = $network_container\->ddns_generate_hostname()
\& # Modify ddns_generate_hostname
\& $network_container\->ddns_generate_hostname("true");
\& #Un\-override
\& $network_container\->ddns_generate_hostname(undef);
.Ve
.RE
.RS 4
.RE
.SS "ddns_server_always_updates( )"
.IX Subsection "ddns_server_always_updates( )"
.RS 4
Use this method to set or retrieve the ddns_server_always_updates flag of a \s-1DHCP\s0 IPv6 Network Container object. Enable this method to allow only the \s-1DHCP\s0 server to update \s-1DNS,\s0 regardless of the requests from the \s-1DHCP\s0 clients.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the flag that enables the \s-1DHCP\s0 server to always updates \s-1DNS\s0 or \*(L"false\*(R" to deactivate/unset it.The default value for this field is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get ddns_server_always_updates
\& my $ddns_server_always_updates = $network_container\->ddns_server_always_updates()
\& # Modify ddns_server_always_updates
\& $network_container\->ddns_server_always_updates("true");
.Ve
.RE
.RS 4
.RE
.SS "ddns_ttl( )"
.IX Subsection "ddns_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 update Time to Live (\s-1TTL\s0) value of a \s-1DHCP\s0 IPv6 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_ttl method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_ddns_ttl attribute to \*(L"false\*(R".
.Sp
Note that when ddns_ttl is set to a defined value and override_ddns_ttl is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_ttl(12); \f(CW$object\fR\->override_ddns_ttl(\*(L"false\*(R"); will set override_ddns_ttl to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_ttl(\*(L"false\*(R"); \f(CW$object\fR\->ddns_ttl(12); will result in override_ddns_ttl=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration, in seconds, the update is cached. Zero indicates that the update is not cached. The default value is 0.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get DNS Update ttl
\& my $dns_ttl = $network_container\->ddns_ttl();
\& #Modify DNS Update ttl
\& $network_container\->ddns_ttl(1200);
.Ve
.RE
.RS 4
.RE
.SS "discovery_basic_poll_setting( )"
.IX Subsection "discovery_basic_poll_setting( )"
.RS 4
Use this method to set or retrieve the discovery_basic_poll_setting value of a \s-1DHCP\s0 IPv6 Network Container object.
.Sp
Include the specified parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is object of Infoblox::Grid::Discovery::BasicPollSettings.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get discovery_basic_poll_setting
\& my $discovery_basic_poll_setting = $network\->discovery_basic_poll_setting();
\& #Modify discovery_basic_poll_setting
\& $network\->discovery_basic_poll_setting($poll_setting);
.Ve
.RE
.RS 4
.RE
.SS "discovery_member( )"
.IX Subsection "discovery_member( )"
.RS 4
Use this method to set or retrieve the discovery_member value of a \s-1DHCP\s0 IPv6 Network Container object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The discovery member name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get discovery_member
\& my $discovery_member = $network\->discovery_member();
\& #Modify discovery_member
\& $network\->discovery_member("test.localdomain");
.Ve
.RE
.RS 4
.RE
.SS "discover_now_status( )"
.IX Subsection "discover_now_status( )"
.RS 4
Use this method to retrieve the current discovery status. This attribute is read-only.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1COMPLETE\s0', '\s-1FAILED\s0', '\s-1NONE\s0', '\s-1PENDING\s0' or '\s-1RUNNING\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discover_now_status
\& my $discover_now_status = $network\->discover_now_status();
.Ve
.RE
.RS 4
.RE
.SS "discovery_blackout_setting( )"
.IX Subsection "discovery_blackout_setting( )"
.RS 4
Use this method to set or retrieve the discovery blackout setting.
.Sp
Setting this method to a defined value implicitly sets the override_blackout_setting method to \*(L"true\*(R". If port_control_blackout_setting is undefined, setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_blackout_setting attribute to \*(L"false\*(R".
.Sp
Note that when discovery_blackout_setting is set to a defined value and override_blackout_setting is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$network\fR\->discovery_blackout_setting($blackout); \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); will set override_blackout_setting to \*(L"false\*(R", and the sequence \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); \f(CW$network\fR\->discovery_blackout_setting($blackout); will result in override_blackout_setting=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::Properties::BlackoutSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get discovery_blackout_setting
\& my $discovery_blackout_setting = $network\->discovery_blackout_setting();
\& #Modify discovery_blackout_setting
\& $network\->discovery_blackout_setting($blackout);
.Ve
.RE
.RS 4
.RE
.SS "discovery_engine_type( )"
.IX Subsection "discovery_engine_type( )"
.RS 4
Use this method to retrieve the \s-1DHCP\s0 IPv6 Network Container discovery engine type. This attribute is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1NETMRI\s0', '\s-1NETWORK_INSIGHT\s0', '\s-1VDISCOVERY\s0', '\s-1UNKNOWN\s0' or '\s-1NONE\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovery_engine_type
\& my $discovery_engine_type = $network_container\->discovery_engine_type();
.Ve
.RE
.RS 4
.RE
.SS "domain_name( )"
.IX Subsection "domain_name( )"
.RS 4
Use this method to set or retrieve the domain_name value of a \s-1DHCP\s0 IPv6 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_domain_name method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_domain_name attribute to \*(L"false\*(R".
.Sp
Note that when domain_name is set to a defined value and override_domain_name is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->domain_name(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_domain_name(\*(L"false\*(R"); will set override_domain_name to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_domain_name(\*(L"false\*(R"); \f(CW$object\fR\->domain_name(\*(L"testdomain\*(R"); will result in override_domain_name=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the client domain in string format for resolving names in \s-1DNS.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get domain_name
\& my $domain_name = $network_container\->domain_name();
\& #Modify domain_name
\& $network_container\->domain_name("test_domain.com");
.Ve
.RE
.RS 4
.RE
.SS "domain_name_servers( )"
.IX Subsection "domain_name_servers( )"
.RS 4
Use this method to set or retrieve the domain_name_servers value of a \s-1DHCP\s0 IPv6 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_domain_name_servers method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_domain_name_servers attribute to \*(L"false\*(R".
.Sp
Note that when domain_name_servers is set to a defined value and override_domain_name_servers is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->domain_name_servers(\*(L"2001::1,2001::2\*(R"); \f(CW$object\fR\->override_domain_name_servers(\*(L"false\*(R"); will set override_domain_name_servers to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_domain_name_servers(\*(L"false\*(R"); \f(CW$object\fR\->domain_name_servers(\*(L"2001::1,2001::2\*(R"); will result in override_domain_name_servers=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The IPv6 addresses of the domain name servers.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get domain_name_servers
\& my $domain_name_servers = $network_container\->domain_name_servers();
\& #Modify domain_name_servers
\& $network_container\->domain_name_servers("2001::1,2001::2");
.Ve
.RE
.RS 4
.RE
.SS "enable_ddns( )"
.IX Subsection "enable_ddns( )"
.RS 4
Use this method to set or retrieve the dynamic \s-1DNS\s0 updates flag of a \s-1DHCP\s0 IPv6 Network Container object. The \s-1DHCP\s0 server can send \s-1DDNS\s0 updates to \s-1DNS\s0 servers in the same Grid and to external \s-1DNS\s0 servers. This setting overrides the member-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_enable_ddns method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_enable_ddns attribute to \*(L"false\*(R".
.Sp
Note that when enable_ddns is set to a defined value and override_enable_ddns is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->enable_ddns(\*(L"true\*(R"); \f(CW$object\fR\->override_enable_ddns(\*(L"false\*(R"); will set override_enable_ddns to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_enable_ddns(\*(L"false\*(R"); \f(CW$object\fR\->enable_ddns(\*(L"true\*(R"); will result in override_enable_ddns=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the dynamic \s-1DNS\s0 updates flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined, which indicates that this attribute inherits the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get enable_ddns
\& my $enable_ddns = $network_container\->enable_ddns()
\& # Modify enable_ddns
\& $network_container\->enable_ddns("true");
\& # Un\-override enable_ddns
\& $network_container\->enable_ddns(undef);
.Ve
.RE
.RS 4
.RE
.SS "enable_discovery( )"
.IX Subsection "enable_discovery( )"
.RS 4
Use this method to set or retrieve the enable_discovery value of a \s-1DHCP\s0 IPv6 Network Container object.  This setting overrides the member level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_enable_discovery method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_enable_discovery attribute to \*(L"false\*(R".
.Sp
Enable this flag if you want to set discovery for this object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_discovery flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_discovery
\& my $enable_discovery = $network\->enable_discovery();
\& #Modify enable_discovery
\& $network\->enable_discovery("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_immediate_discovery( )"
.IX Subsection "enable_immediate_discovery( )"
.RS 4
Use this method to set or retrieve enable_immediate_discovery value of a \s-1DHCP\s0 IPv6 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_immediate_discovery flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_immediate_discovery
\& my $enable_immediate_discovery = $network\->enable_immediate_discovery();
\& #Modify enable_immediate_discovery
\& $network\->enable_immediate_discovery("false");
.Ve
.RE
.RS 4
.RE
.SS "endpoint_sources( )"
.IX Subsection "endpoint_sources( )"
.RS 4
Use this method to retrieve the list of endpoints that provide object data. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an array of Infoblox::CiscoISE::Endpoint objects.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get endpoint_sources value
\& my $endpoint_sources = $object\->endpoint_sources();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 IPv6 Network Container object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $network_container\->extattrs();
\& #Modify extattrs
\& $network_container\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 IPv6 Network Container object
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $network_container\->extensible_attributes();
\& #Modify extensible attributes
\& $network_container\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "mgm_private( )"
.IX Subsection "mgm_private( )"
.RS 4
Use this method to set or retrieve the flag that controls whether the object should be synced to the \s-1MGM\s0 or not.
.Sp
Setting this method to a defined value implicitly sets the override_blackout_setting method to \*(L"true\*(R". If discovery_blackout_setting is undefined, setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_blackout_setting attribute to \*(L"false\*(R".
.Sp
Note that when mgm_private is set to a defined value and override_mgm_private is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$network\fR\->mgm_private(\*(L"true\*(R"); \f(CW$network\fR\->override_mgm_private(\*(L"false\*(R"); will set override_mgm_private to \*(L"false\*(R", and the sequence \f(CW$network\fR\->override_mgm_private(\*(L"false\*(R"); \f(CW$network\fR\->mgm_private(\*(L"true\*(R"); will result in override_mgm_private=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable synchronization of the managed Grid with the \s-1MGM\s0 or 'false' to forbid it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.Sp
Note that this member is loaded on on-demand basis, so to retrieve the value the object must have been retrieved from the session first.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get mgm_private value
\& my $value = $object\->mgm_private();
\&
\& #Modify mgm_private value
\& $object\->mgm_private(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "mgm_private_overridable( )"
.IX Subsection "mgm_private_overridable( )"
.RS 4
Use this method to retrieve the flag that indicates whether the overriding of 'mgm_private' flag is allowed or not. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.Sp
Note that this member is loaded on on-demand basis, so to retrieve the value the object must have been retrieved from the session first.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get mgm_private_overridable value
\& my $value = $object\->mgm_private_overridable();
.Ve
.RE
.RS 4
.RE
.SS "ms_ad_user_data( )"
.IX Subsection "ms_ad_user_data( )"
.RS 4
Use this method to retrieve Microsoft Active Directory users related information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::MSServer::AdUser::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_ad_user_data
\& my $ms_ad_user_data = $v6network_container\->ms_ad_user_data();
.Ve
.RE
.RS 4
.RE
.SS "network( )"
.IX Subsection "network( )"
.RS 4
Use this method to retrieve the network attribute of a \s-1DHCP\s0 IPv6 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the address and netmask of the network in \s-1CIDR\s0 format (example: 2001::/64).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network
\& my $network = $network_container\->network();
.Ve
.RE
.RS 4
.RE
.SS "network_container( )"
.IX Subsection "network_container( )"
.RS 4
Use this method to set or retrieve the network container of a \s-1DHCP\s0 IPv6 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the address and netmask of the network in \s-1CIDR\s0 format (example: 2001::/64).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network container
\& my $network_container = $network\->network_container();
\& #Modify network container
\& $network\->network_container("2001::/64");
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the network view of the \s-1DHCP\s0 IPv6 network container.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the system-defined default network view, which means the network is in the default network view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a defined Infoblox::DHCP::View object. The default network view value is the system-defined default network view object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network view
\& my $nview = $network_container\->network_view();
\& #Modify network view, with an Infoblox::DHCP::View object
\& $network_container\->network_view($nview);
.Ve
.RE
.RS 4
.RE
.SS "next_available_network( )"
.IX Subsection "next_available_network( )"
.RS 4
Use this method to retrieve the next available IPv6 network(s) in the network container. Note that to use this method, the object \s-1MUST\s0 be retrieved through a get or search call, or it must have been created with an add call.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The method accepts the following parameters:
.Sp
.Vb 3
\&  cidr \- (required) The CIDR of the requested networks. It must be a number between 3 and 128, inclusive.
\&  requested_num \- (optional) The number of networks requested. It must be a number between 1 and 20, inclusive.
\&  excluded \- (optional) A reference to an array of networks to be excluded from the results.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns the next available IPv6 network(s) in the network container. If requested_num is not specified, a string with the next available network will be returned; otherwise, the method will return a reference to an array of networks.
.Sp
A network cannot be returned as the next available network if it cannot be inserted; such as when any of the following conditions exist:
.Sp
\&\- It's parent network has a \s-1DHCP\s0 configuration assigned and therefore cannot be converted to a network container.
.Sp
\&\- It overlaps with an existing network or network container, regardless of whether the existing network has a greater or smaller \s-1CIDR\s0 than the requested \s-1CIDR.\s0
.Sp
\&\- Its network address or broadcast address is used by a fixed address or a host configured for \s-1DHCP.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Retrieve a particular network container
\& my @retrieved_objs = $session\->get(
\&                           object   => "Infoblox::DHCP::IPv6NetworkContainer",
\&                           network  => "2001::/64"
\& );
\&
\& $network_container = $retrieved_objs[0];
\&
\& # Print the next available IPv6 network in the network container
\& print $network_container\->next_available_network(cidr => 68) . "\en";
\&
\& # This will retrieve the next 10 available networks and print the first one.
\& my $addressesref = $network_container\->next_available_network(requested_num => 10, cidr => 68);
\& print @$addressesref[0] . "\en";
\&
\& # This will retrieve the next 10 available networks and exclude two.
\& my $addressesref = $network_container\->next_available_network(requested_num => 10, cidr => 72, excluded => [\*(Aq2001::100:0:0:0/72\*(Aq,\*(Aq2001::300:0:0:0/72\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "options( )"
.IX Subsection "options( )"
.RS 4
Use this method to set or retrieve the option values for a member \s-1DHCP\s0 server. \s-1DHCP\s0 options provide Network Container configuration settings and various services available for the Network Container.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_options method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_options attribute to \*(L"false\*(R".
.Sp
Note that when the options method is set to a defined value and override_options is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->options([ \f(CW$opt\fR ]); \f(CW$object\fR\->override_options(\*(L"false\*(R"); will set override_options to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_options(\*(L"false\*(R"); \f(CW$object\fR\->options([ \f(CW$opt\fR ]); will result in override_options=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DHCP::Option objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Get options
\& my $options = $network_container\->options();
\& #Modify options
\& my $option1 = Infoblox::DHCP::Option\->new(
\&     name => "dhcp6.info\-refresh\-time",
\&     value => 60
\& );
\&
\& $network_container\->options([$option1]);
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_domainname( )"
.IX Subsection "override_ddns_domainname( )"
.RS 4
The override_ddns_domainname attribute controls whether the ddns_domainname value in the \s-1DHCP\s0 IPv6 Network Container is used, instead of the Grid default.
.Sp
The override_ddns_domainname attribute can be specified explicitly. It is also set implicitly when ddns_domainname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for ddns_domainname. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for ddns_domainname.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_domainname
\&    my $override_ddns_domainname=$network_container\->override_ddns_domainname( );
\&    #Modifying override_ddns_domainname
\&    $network_container\->override_ddns_domainname("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_enable_option_fqdn( )"
.IX Subsection "override_ddns_enable_option_fqdn( )"
.RS 4
The override_ddns_enable_option_fqdn attribute controls whether the ddns_enable_option_fqdn value in the \s-1DHCP\s0 IPv6 Network Container is used, instead of the Grid default.
.Sp
The override_ddns_enable_option_fqdn attribute can be specified explicitly. It is also set implicitly when ddns_domainname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for ddns_enable_option_fqdn. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for ddns_enable_option_fqdn.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_enable_option_fqdn
\&    my $override_ddns_enable_option_fqdn=$network_container\->override_ddns_enable_option_fqdn( );
\&    #Modifying override_ddns_enable_option_fqdn
\&    $network_container\->override_ddns_enable_option_fqdn("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_generate_hostname( )"
.IX Subsection "override_ddns_generate_hostname( )"
.RS 4
The override_ddns_generate_hostname attribute controls whether the ddns_generate_hostname value in the \s-1DHCP\s0 IPv6 Network Container is used, instead of the Grid default.
.Sp
The override_ddns_generate_hostname attribute can be specified explicitly. It is also set implicitly when ddns_generate_hostname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for ddns_generate_hostname. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for ddns_generate_hostname.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_generate_hostname
\&    my $override_ddns_generate_hostname=$network_container\->override_ddns_generate_hostname( );
\&    #Modifying override_ddns_generate_hostname
\&    $network_container\->override_ddns_generate_hostname("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_ttl( )"
.IX Subsection "override_ddns_ttl( )"
.RS 4
The override_ddns_ttl attribute controls whether the ddns_ttl value in the \s-1DHCP\s0 IPv6 Network Container is used, instead of the Grid default.
.Sp
The override_ddns_ttl attribute can be specified explicitly. It is also set implicitly when ddns_ttl is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for ddns_ttl. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for ddns_ttl.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_ttl
\&    my $override_ddns_ttl=$network_container\->override_ddns_ttl( );
\&    #Modifying override_ddns_ttl
\&    $network_container\->override_ddns_ttl("true");
.Ve
.RE
.RS 4
.RE
.SS "override_domain_name( )"
.IX Subsection "override_domain_name( )"
.RS 4
The override_domain_name attribute controls whether the domain_name value in the \s-1DHCP\s0 IPv6 Network Container is used, instead of the Grid default.
.Sp
The override_domain_name attribute can be specified explicitly. It is also set implicitly when domain_name is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for domain_name. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for domain_name.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_domain_name
\&    my $override_domain_name=$network_container\->override_domain_name( );
\&    #Modifying override_domain_name
\&    $network_container\->override_domain_name("true");
.Ve
.RE
.RS 4
.RE
.SS "override_domain_name_servers( )"
.IX Subsection "override_domain_name_servers( )"
.RS 4
The override_domain_name_servers attribute controls whether the domain_name_servers value in the \s-1DHCP\s0 IPv6 Network Container is used, instead of the Grid default.
.Sp
The override_domain_name_servers attribute can be specified explicitly. It is also set implicitly when domain_name_servers is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for domain_name_servers. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for domain_name_servers.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_domain_name_servers
\&    my $override_domain_name_servers=$network_container\->override_domain_name_servers( );
\&    #Modifying override_domain_name_servers
\&    $network_container\->override_domain_name_servers("true");
.Ve
.RE
.RS 4
.RE
.SS "override_blackout_setting( )"
.IX Subsection "override_blackout_setting( )"
.RS 4
The override_blackout_setting attribute controls whether the discovery_blackout_setting and port_control_blackout_setting values in the object are used, instead of the Grid default.
.Sp
The override_blackout_setting attribute can be specified explicitly. It is also set implicitly when discovery_blackout_setting or port_control_blackout_setting is set to a defined value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_blackout_setting flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $network\->override_blackout_setting();
\& # Modify attribute value
\& $network\->override_blackout_setting(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_enable_ddns( )"
.IX Subsection "override_enable_ddns( )"
.RS 4
The override_enable_ddns attribute controls whether the enable_ddns value in the \s-1DHCP\s0 IPv6 Network Container is used, instead of the Grid default.
.Sp
The override_enable_ddns attribute can be specified explicitly. It is also set implicitly when enable_ddns is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for enable_ddns. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for enable_ddns.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_enable_ddns
\&    my $override_enable_ddns=$network_container\->override_enable_ddns( );
\&    #Modifying override_enable_ddns
\&    $network_container\->override_enable_ddns("true");
.Ve
.RE
.RS 4
.RE
.SS "override_options( )"
.IX Subsection "override_options( )"
.RS 4
The override_options attribute controls whether the options value in the \s-1DHCP\s0 IPv6 Network Container is used, instead of the Grid default.
.Sp
The override_options attribute can be specified explicitly. It is also set implicitly when options is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for options. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for options.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_options
\&    my $override_options=$network_container\->override_options( );
\&    #Modifying override_options
\&    $network_container\->override_options("true");
.Ve
.RE
.RS 4
.RE
.SS "override_preferred_lifetime( )"
.IX Subsection "override_preferred_lifetime( )"
.RS 4
The override_preferred_lifetime attribute controls whether the preferred_lifetime value in the \s-1DHCP\s0 IPv6 Network Container is used, instead of the Grid default.
.Sp
The override_preferred_lifetime attribute can be specified explicitly. It is also set implicitly when preferred_lifetime is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for options. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for options.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_preferred_lifetime
\&    my $override_preferred_lifetime=$network_container\->override_preferred_lifetime( );
\&    #Modifying override_preferred_lifetime
\&    $network_container\->override_preferred_lifetime("true");
.Ve
.RE
.RS 4
.RE
.SS "override_recycle_leases( )"
.IX Subsection "override_recycle_leases( )"
.RS 4
The override_recycle_leases attribute controls whether the recycle_leases value in the \s-1DHCP\s0 IPv6 Network Container is used, instead of the Grid default.
.Sp
The override_recycle_leases attribute can be specified explicitly. It is also set implicitly when recycle_leases is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for options. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for options.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_recycle_leases
\&    my $override_recycle_leases=$network_container\->override_recycle_leases( );
\&    #Modifying override_recycle_leases
\&    $network_container\->override_recycle_leases("true");
.Ve
.RE
.RS 4
.RE
.SS "override_mgm_private( )"
.IX Subsection "override_mgm_private( )"
.RS 4
The override_mgm_private attribute controls whether the mgm_private value in the object is used, instead of the parent-level default.
.Sp
The override_mgm_private attribute can be specified explicitly. It is also set implicitly when mgm_private is set to a defined value.
.Sp
Note that setting override_mgm_private to 'false' sets the original 'mgm_private' value to 'false'.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to 'true' to override the parent-level setting for mgm_private. Set the parameter to 'false' to inherit the parent-level setting for mgm_private.
.Sp
The default value of this parameter is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.Sp
Note that this member is loaded on on-demand basis, so to retrieve the value the object must have been retrieved from the session first.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get override_mgm_private value
\& my $value = $object\->override_mgm_private( );
\&
\& #Modify override_mgm_private value
\& $object\->override_mgm_private(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_subscribe_settings( )"
.IX Subsection "override_subscribe_settings( )"
.RS 4
The override_subscribe_settings attribute controls whether the subscribe_settings method values of the member are used, instead of the Grid default.
.Sp
The override_subscribe_settings attribute can be specified explicitly. It is also set implicitly when subscribe_settings is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for subscribe_settings. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for subscribe_settings.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_subscribe_settings value
\& my $override_subscribe_settings = $object\->override_subscribe_settings( );
\& #Modify override_subscribe_settings value
\& $object\->override_subscribe_settings("true");
.Ve
.RE
.RS 4
.RE
.SS "override_update_dns_on_lease_renewal( )"
.IX Subsection "override_update_dns_on_lease_renewal( )"
.RS 4
The override_update_dns_on_lease_renewal attribute controls whether the update_dns_on_lease_renewal value in the \s-1DHCP\s0 IPv6 Network Container is used, instead of the Grid default.
.Sp
The override_update_dns_on_lease_renewal attribute can be specified explicitly. It is also set implicitly when update_dns_on_lease_renewal is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for update_dns_on_lease_renewal. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for update_dns_on_lease_renewal.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_update_dns_on_lease_renewal
\&    my $override_update_dns_on_lease_renewal=$network_container\->override_update_dns_on_lease_renewal( );
\&    #Modifying override_update_dns_on_lease_renewal
\&    $network_container\->override_update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SS "override_valid_lifetime( )"
.IX Subsection "override_valid_lifetime( )"
.RS 4
The override_valid_lifetime attribute controls whether the valid_lifetime value in the \s-1DHCP\s0 IPv6 Network Container is used, instead of the Grid default.
.Sp
The override_valid_lifetime attribute can be specified explicitly. It is also set implicitly when valid_lifetime is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for options. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for options.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_valid_lifetime
\&    my $override_valid_lifetime=$network_container\->override_valid_lifetime( );
\&    #Modifying override_valid_lifetime
\&    $network_container\->override_valid_lifetime("true");
.Ve
.RE
.RS 4
.RE
.SS "preferred_lifetime ( )"
.IX Subsection "preferred_lifetime ( )"
.RS 4
Use this method to set or retrieve the preferred lifetime value of a \s-1DHCP\s0 IPv6 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_preferred_lifetime method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_preferred_lifetime attribute to \*(L"false\*(R".
.Sp
Note that when preferred_lifetime is set to a defined value and override_preferred_lifetime is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->preferred_lifetime(691200); \f(CW$object\fR\->override_preferred_lifetime(\*(L"false\*(R"); will set override_preferred_lifetime to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_preferred_lifetime(\*(L"false\*(R"); \f(CW$object\fR\->preferred_lifetime(691200); will result in override_preferred_lifetime=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (valid range from 1 to 4294967295) that represents the lifetime, in seconds. The default value is 27000.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get Preferred lifetime
\& my $preferred_lifetime = $network_container\->preferred_lifetime();
\& #Modify Preferred lifetime
\& $network_container\->preferred_lifetime(864000);
.Ve
.RE
.RS 4
.RE
.SS "port_control_blackout_setting"
.IX Subsection "port_control_blackout_setting"
.RS 4
Use this method to set or retrieve the port control blackout setting.
.Sp
Setting this method to a defined value implicitly sets the override_blackout_setting method to \*(L"true\*(R". If discovery_blackout_setting is undefined, setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_blackout_setting attribute to \*(L"false\*(R".
.Sp
Note that when port_control_blackout_setting is set to a defined value and override_blackout_setting is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$network\fR\->port_control_blackout_setting($blackout); \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); will set override_blackout_setting to \*(L"false\*(R", and the sequence \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); \f(CW$network\fR\->port_control_blackout_setting($blackout); will result in override_blackout_setting=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::Properties::BlackoutSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get port_control_blackout_setting
\& my $port_control_blackout_setting = $network\->port_control_blackout_setting();
\& #Modify port_control_blackout_setting
\& $network\->port_control_blackout_setting($blackout);
.Ve
.RE
.RS 4
.RE
.SS "recycle_leases( )"
.IX Subsection "recycle_leases( )"
.RS 4
Use this method to set or retrieve the recycle_leases flag at the network container level.
.Sp
If the flag is enabled, the leases are kept in the recycle bin until one week after expiration. When the flag is disabled, the leases are irrecoverably deleted.
.Sp
Setting this method to a defined value implicitly sets the override_recycle_leases method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_recycle_leases attribute to \*(L"false\*(R".
.Sp
Note that when recycle_leases is set to a defined value and override_recycle_leases is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->recycle_leases(\*(L"true\*(R"); \f(CW$object\fR\->override_recycle_leases(\*(L"false\*(R"); will set override_recycle_leases to \*(L"false\*(R", and the sequence \f(CW$objct\fR\->override_recycle_leases(\*(L"false\*(R"); \f(CW$object\fR\->recycle_leases(\*(L"true\*(R"); will result in override_recycle_leases=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the recycle_leases flag or \*(L"false\*(R" to disable it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get recycle_leases
\& my $recycle_leases = $network_container\->recycle_leases();
\& #Modify recycle_leases
\& $network_container\->recycle_leases("false");
.Ve
.RE
.RS 4
.RE
.SS "remove_subnets( )"
.IX Subsection "remove_subnets( )"
.RS 4
Use this method to set or retrieve the remove_subnets flag of a \s-1DHCP\s0 IPv6 Network Container object.
.Sp
You can set this flag to false, if you want to remove the network, but keep all subnets under it. This flag is used only when removing \s-1DHCP\s0 IPv6 Network Container objects. It is not retrieved or used for any other operation.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"false\*(R" to keep the subnets, or \*(L"true\*(R" to remove them. The default value is undefined, which is to remove all subnets.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Set remove_subnets before submitting for removal
\& $network_container\->remove_subnets("false");
\& #Remove the container of the subnets
\& $session\->remove($network_container);
.Ve
.RE
.RS 4
.RE
.SS "restart_if_needed( )"
.IX Subsection "restart_if_needed( )"
.RS 4
Use this method to set the flag that indicates whether \s-1DHCP\s0 service should be restarted on a member that is serving \s-1DHCP\s0 for the changed object referenced in a cloud \s-1API\s0 request.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify true to restart the \s-1DHCP\s0 service.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
None
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Modify
\& $network\->restart_if_needed(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "rir( )"
.IX Subsection "rir( )"
.RS 4
Use this method to retrieve the name of the Regional Internet Registry (\s-1RIR\s0) that allocated this address space. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1RIPE\s0' or '\s-1NONE\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get rir
\& my $rir = $network_container\->rir();
.Ve
.RE
.RS 4
.RE
.SS "rir_organization( )"
.IX Subsection "rir_organization( )"
.RS 4
Use this method to set or retrieve the Regional Internet Registry (\s-1RIR\s0) organization object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An Infoblox::Grid::RIR::Organization object.
.Sp
You must enable support for \s-1RIR/SWIP\s0 at the Grid level before you can set attribute values. See Infoblox::Grid\->\fBenable_rir_swip()\fR method.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get rir_organization
\& my $rir_organization = $network_container\->rir_organization();
\& #Modify rir_organization
\& $network_container\->rir_organization($rir_org);
.Ve
.RE
.RS 4
.RE
.SS "rir_registration_action( )"
.IX Subsection "rir_registration_action( )"
.RS 4
Use this method to set the registration action of Regional Internet Registry (\s-1RIR\s0). This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1NONE\s0', '\s-1CREATE\s0', '\s-1MODIFY\s0' or '\s-1DELETE\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set rir_registration_action
\& $network_container\->rir_registration_action(\*(AqCREATE\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "rir_registration_status( )"
.IX Subsection "rir_registration_status( )"
.RS 4
Use this method to set or retrieve the registration status of Regional Internet Registry (\s-1RIR\s0).
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The registration status of Regional Internet Registry (\s-1RIR\s0), which can be '\s-1REGISTERED\s0' or '\s-1NOT_REGISTERED\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get rir_registration_status
\& my $rir_registration_status = $network_container\->rir_registration_status();
\& #Modify rir_registration_status
\& $network_container\->rir_registration_status(\*(AqNOT_REGISTERED\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "last_rir_registration_update_sent( )"
.IX Subsection "last_rir_registration_update_sent( )"
.RS 4
Use this method to retrieve the last registration update timestamp of Regional Internet Registry (\s-1RIR\s0). This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_rir_registration_update_sent
\& my $last_rir_registration_update_sent = $network_container\->last_rir_registration_update_sent();
.Ve
.RE
.RS 4
.RE
.SS "last_rir_registration_update_status( )"
.IX Subsection "last_rir_registration_update_status( )"
.RS 4
Use this method to retrieve the last registration update status of Regional Internet Registry (\s-1RIR\s0). This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_rir_registration_update_status
\& my $last_rir_registration_update_status = $network_container\->last_rir_registration_update_status();
.Ve
.RE
.RS 4
.RE
.SS "same_port_control_discovery_blackout( )"
.IX Subsection "same_port_control_discovery_blackout( )"
.RS 4
Use this method to set or retrieve the flag that enables using the same discovery blackout for port control blackout.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to use same discovery blackout for port control blackout or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $network_container\->same_port_control_discovery_blackout();
\& # Modify attribute value
\& $network_container\->same_port_control_discovery_blackout(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "send_rir_request( )"
.IX Subsection "send_rir_request( )"
.RS 4
Use this method to set the flag that indicates whether the appliance should send an \s-1API\s0 or email request for Regional Internet Registry (\s-1RIR\s0). This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the send_rir_request flag or \*(L"false\*(R" to unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set send_rir_request
\& $network_container\->send_rir_request(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "subscribe_settings( )"
.IX Subsection "subscribe_settings( )"
.RS 4
Use this method to set or retrieve the Cisco \s-1ISE\s0 subscribe settings.
.Sp
Setting this method to a defined value implicitly sets the override_subscribe_settings method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Cisco \s-1ISE\s0 endpoint default and automatically resets the override_subscribe_settings method to \*(L"false\*(R".
.Sp
Note that when subscribe_settings is set to a defined value and override_subscribe_settings is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->subscribe_settings($value); \f(CW$object\fR\->override_subscribe_settings(\*(L"false\*(R"); will set override_subscribe_settings to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_subscribe_settings(\*(L"false\*(R"); \f(CW$object\fR\->subscribe_settings($value); will result in override_subscribe_settings=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::CiscoISE::SubscribeSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get subscribe_settings value
\& my $subscribe_settings = $object\->subscribe_settings();
\& #Modify subscribe_settings value
\& $object\->subscribe_settings($settings);
.Ve
.RE
.RS 4
.RE
.SS "delete_reason( )"
.IX Subsection "delete_reason( )"
.RS 4
Use this method to specify the reason for deleting the Regional Internet Registry (\s-1RIR\s0) registration request. This is a write-only attribute. This field is required only if 'rir_registration_action' is specified as '\s-1DELETE\s0'
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The reason for deleting the \s-1RIR\s0 registration request in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set delete_reason
\& $network_container\->delete_reason(\*(Aqinvalid\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "unmanaged( )"
.IX Subsection "unmanaged( )"
.RS 4
Use this method to set or retrieve the network status, which indicates whether the network is unmanaged or not.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify true to mark the network as unmanaged or false as managed.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get network status
\& $unmanaged = $network_container\->unmanaged();
\& # Modify network status
\& $network_container\->unmanaged(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "update_dns_on_lease_renewal( )"
.IX Subsection "update_dns_on_lease_renewal( )"
.RS 4
The update_dns_on_lease_renewal attribute controls whether the \s-1DHCP\s0 server updates \s-1DNS\s0 when a \s-1DHCP\s0 lease is renewed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_update_dns_on_lease_renewal method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_update_dns_on_lease_renewal attribute to \*(L"false\*(R".
.Sp
Note that when update_dns_on_lease_renewal is set to a defined value and override_update_dns_on_lease_renewal is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); will set override_update_dns_on_lease_renewal to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); will result in override_update_dns_on_lease_renewal=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the update_dns_on_lease_renewal flag or \*(L"false\*(R" to deactivate/unset it.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get update_dns_on_lease_renewal
\&    my $update_dns_on_lease_renewal=$network_container\->update_dns_on_lease_renewal( );
\&    #Modify update_dns_on_lease_renewal
\&    $network_container\->update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SS "valid_lifetime ( )"
.IX Subsection "valid_lifetime ( )"
.RS 4
Use this method to set or retrieve the valid lifetime value of a \s-1DHCP\s0 IPv6 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_valid_lifetime method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_valid_lifetime attribute to \*(L"false\*(R".
.Sp
Note that when valid_lifetime is set to a defined value and override_valid_lifetime is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->valid_lifetime(691200); \f(CW$object\fR\->override_valid_lifetime(\*(L"false\*(R"); will set override_valid_lifetime to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_valid_lifetime(\*(L"false\*(R"); \f(CW$object\fR\->valid_lifetime(691200); will result in override_valid_lifetime=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (valid range from 1 to 4294967295) that represents the valid lifetime, in seconds. The default value is 43200.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get valid lifetime
\& my $valid_lifetime = $network_container\->valid_lifetime();
\& #Modify valid lifetime
\& $network_container\->valid_lifetime(864000);
.Ve
.RE
.RS 4
.RE
.SS "zone_associations( )"
.IX Subsection "zone_associations( )"
.RS 4
Use this method to set or retrieve the associated zone information.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DNS::Zone object(s). The default value is an empty list. If the network container has a parent, it is possible to use the zone associations of the parent by setting the parameter to undef.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails. If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 10
\& #Getting zone associations
\& my $zone_associations = $network_container\->zone_associations();
\& my $zone1 = Infoblox::DNS::Zone\->new(
\&        name     => "test1.com",
\& );
\& my $zone2 = Infoblox::DNS::Zone\->new(
\&        name     => "test2.com",
\&    );
\& #Modifying zone_associations
\& $network_container\->zone_associations([$zone1, $zone2]);
\& #Clear zone_assocations
\& $network_container\->zone_associations([]);
\& ##Remove the override for zone_associations
\& $network_container\->zone_associations(undef)
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 IPv6 Network Container object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 IPv6 Network Container object\fR
.PP
.Vb 4
\& my $network_container = Infoblox::DHCP::IPv6NetworkContainer\->new(
\&             network => "2001::/64",
\&             comment => "add network container",
\&              );
\&
\& my $response = $session\->add($network_container)
\&        or die("Add Network Container failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network Container added successfully\en";
\&
\& #Search for a specific Network Container
\&
\& #Search the network container
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DHCP::IPv6NetworkContainer",
\&     network => "2001.*"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search Network Container failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Network Container found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify an IPv6 Network Container attribute\fR
.PP
.Vb 5
\& #Get Network Container through the session
\& my @retrieved_objs = $session\->get(
\&            object =>"Infoblox::DHCP::IPv6NetworkContainer" ,
\&            network => "2001::/64"
\&         );
.Ve
.PP
my \f(CW$object\fR = \f(CW$retrieved_objs\fR[0];
.PP
.Vb 5
\& unless ($object) {
\&     die("Get Network Container object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Network Container found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Modify one of the attributes of the specified IPv6 network container attribute\fR
.PP
.Vb 1
\& $object\->comment("modified comment"); #Apply the changes
\&
\& $session\->modify($object)
\&     or die("Modify Network Container attribute failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network Container object modified successfully \en";
.Ve
.PP
\&\fB#Remove a Network Container Object\fR
.PP
.Vb 5
\&  #Get Network Container object through the session
\&  my @retrieved_objs = $session\->get(
\&            object  => "Infoblox::DHCP::IPv6NetworkContainer" ,
\&            network => "2001::"
\&        );
\&
\&    my $object = $retrieved_objs[0];
\&
\&    unless ($object) {
\&     die("Get Network Container object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Get Network Container object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Submit the object for removal\fR
.PP
.Vb 3
\& $session\->remove($object)
\&     or die("Remove Network Container failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network Container removed successfully \en";
.Ve
.PP
####PROGRAM ENDS####
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DHCP::View, Infoblox::DHCP::IPv6Network, Infoblox::DHCP::Network, Infoblox::DHCP::NetworkContainer, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Grid::MSServer::AdUser::Data
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
