.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::Code 3"
.TH Data::Object::Code 3 "2020-04-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::Code
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Code Class for Perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package main;
\&
\&  use Data::Object::Code;
\&
\&  my $code = Data::Object::Code\->new(sub { $_[0] + 1 });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides methods for manipulating code data.
.SH "INHERITS"
.IX Header "INHERITS"
This package inherits behaviors from:
.PP
Data::Object::Kind
.SH "INTEGRATES"
.IX Header "INTEGRATES"
This package integrates behaviors from:
.PP
Data::Object::Role::Dumpable
.PP
Data::Object::Role::Proxyable
.PP
Data::Object::Role::Throwable
.SH "LIBRARIES"
.IX Header "LIBRARIES"
This package uses type constraints from:
.PP
Data::Object::Types
.SH "METHODS"
.IX Header "METHODS"
This package implements the following methods:
.SS "call"
.IX Subsection "call"
.Vb 1
\&  call(Any $arg1) : Any
.Ve
.PP
The call method executes and returns the result of the code.
.IP "call example #1" 4
.IX Item "call example #1"
.Vb 1
\&  my $code = Data::Object::Code\->new(sub { ($_[0] // 0) + 1 });
\&
\&  $code\->call; # 1
.Ve
.IP "call example #2" 4
.IX Item "call example #2"
.Vb 1
\&  my $code = Data::Object::Code\->new(sub { ($_[0] // 0) + 1 });
\&
\&  $code\->call(0); # 1
.Ve
.IP "call example #3" 4
.IX Item "call example #3"
.Vb 1
\&  my $code = Data::Object::Code\->new(sub { ($_[0] // 0) + 1 });
\&
\&  $code\->call(1); # 2
.Ve
.IP "call example #4" 4
.IX Item "call example #4"
.Vb 1
\&  my $code = Data::Object::Code\->new(sub { ($_[0] // 0) + 1 });
\&
\&  $code\->call(2); # 3
.Ve
.SS "compose"
.IX Subsection "compose"
.Vb 1
\&  compose(CodeRef $arg1, Any $arg2) : CodeLike
.Ve
.PP
The compose method creates a code reference which executes the first argument
(another code reference) using the result from executing the code as it's
argument, and returns a code reference which executes the created code
reference passing it the remaining arguments when executed.
.IP "compose example #1" 4
.IX Item "compose example #1"
.Vb 1
\&  my $code = Data::Object::Code\->new(sub { [@_] });
\&
\&  $code\->compose($code, 1,2,3);
\&
\&  # $code\->(4,5,6); # [[1,2,3,4,5,6]]
.Ve
.SS "conjoin"
.IX Subsection "conjoin"
.Vb 1
\&  conjoin(CodeRef $arg1) : CodeLike
.Ve
.PP
The conjoin method creates a code reference which execute the code and the
argument in a logical \s-1AND\s0 operation having the code as the lvalue and the
argument as the rvalue.
.IP "conjoin example #1" 4
.IX Item "conjoin example #1"
.Vb 1
\&  my $code = Data::Object::Code\->new(sub { $_[0] % 2 });
\&
\&  $code = $code\->conjoin(sub { 1 });
\&
\&  # $code\->(0); # 0
\&  # $code\->(1); # 1
\&  # $code\->(2); # 0
\&  # $code\->(3); # 1
\&  # $code\->(4); # 0
.Ve
.SS "curry"
.IX Subsection "curry"
.Vb 1
\&  curry(CodeRef $arg1) : CodeLike
.Ve
.PP
The curry method returns a code reference which executes the code passing it
the arguments and any additional parameters when executed.
.IP "curry example #1" 4
.IX Item "curry example #1"
.Vb 1
\&  my $code = Data::Object::Code\->new(sub { [@_] });
\&
\&  $code = $code\->curry(1,2,3);
\&
\&  # $code\->(4,5,6); # [1,2,3,4,5,6]
.Ve
.SS "defined"
.IX Subsection "defined"
.Vb 1
\&  defined() : Num
.Ve
.PP
The defined method returns true if the object represents a value that meets the
criteria for being defined, otherwise it returns false.
.IP "defined example #1" 4
.IX Item "defined example #1"
.Vb 1
\&  my $code = Data::Object::Code\->new;
\&
\&  $code\->defined; # 1
.Ve
.SS "disjoin"
.IX Subsection "disjoin"
.Vb 1
\&  disjoin(CodeRef $arg1) : CodeRef
.Ve
.PP
The disjoin method creates a code reference which execute the code and the
argument in a logical \s-1OR\s0 operation having the code as the lvalue and the
argument as the rvalue.
.IP "disjoin example #1" 4
.IX Item "disjoin example #1"
.Vb 1
\&  my $code = Data::Object::Code\->new(sub { $_[0] % 2 });
\&
\&  $code = $code\->disjoin(sub { \-1 });
\&
\&  # $code\->(0); # \-1
\&  # $code\->(1); #  1
\&  # $code\->(2); # \-1
\&  # $code\->(3); #  1
\&  # $code\->(4); # \-1
.Ve
.SS "next"
.IX Subsection "next"
.Vb 1
\&  next(Any $arg1) : Any
.Ve
.PP
The next method is an alias to the call method. The naming is especially useful
(i.e. helps with readability) when used with closure-based iterators.
.IP "next example #1" 4
.IX Item "next example #1"
.Vb 1
\&  my $code = Data::Object::Code\->new(sub { $_[0] * 2 });
\&
\&  $code\->next(72); # 144
.Ve
.SS "rcurry"
.IX Subsection "rcurry"
.Vb 1
\&  rcurry(Any $arg1) : CodeLike
.Ve
.PP
The rcurry method returns a code reference which executes the code passing it
the any additional parameters and any arguments when executed.
.IP "rcurry example #1" 4
.IX Item "rcurry example #1"
.Vb 1
\&  my $code = Data::Object::Code\->new(sub { [@_] });
\&
\&  $code = $code\->rcurry(1,2,3);
\&
\&  # $code\->(4,5,6); # [4,5,6,1,2,3]
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/data-object/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/data-object/wiki>
.PP
Project <https://github.com/iamalnewkirk/data-object>
.PP
Initiatives <https://github.com/iamalnewkirk/data-object/projects>
.PP
Milestones <https://github.com/iamalnewkirk/data-object/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/data-object/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/data-object/issues>
