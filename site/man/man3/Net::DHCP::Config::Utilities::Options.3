.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::DHCP::Config::Utilities::Options 3"
.TH Net::DHCP::Config::Utilities::Options 3 "2019-10-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DHCP::Config::Utilities::Options \- Helper utilities for working with DHCP options.
.SH "VERSION"
.IX Header "VERSION"
Version 0.0.1
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::DHCP::Config::Utilities::Options;
\&    
\&    my $dhcp_options=Net::DHCP::Config::Utilities::Options\->new;
\&    
\&    my $options=$dhcp_options\->get_options;
\&    use Data::Dumper;
\&    print Dumper( $options );
\&
\&    my $error=$dhcp_options\->validate_option( \*(Aqdns\*(Aq, \*(Aq192.168.0.1 , 10.10.10.10\*(Aq );
\&    if ( defined( $error ) ){
\&        die( $error );
\&    }
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Initiates the object.
.PP
.Vb 1
\&    my $dhcp_options=Net::DHCP::Config::Utilities::Options\->new;
.Ve
.SS "get_code"
.IX Subsection "get_code"
Returns the \s-1DHCP\s0 code value for a option.
.PP
One option is taken and that is the option name.
.PP
If the option name is not found or is undef,
then undef is returned.
.PP
.Vb 4
\&    # you can use the long name
\&    print \*(Aqsubnet\-mask: \*(Aq.$dhcp_options\->get_code(\*(Aqsubnet\-mask\*(Aq)."\en";
\&    # or the easier to remember short name
\&    print \*(Aqmask: \*(Aq.$dhcp_options\->get_code(\*(Aqmask\*(Aq)."\en";
.Ve
.SS "get_long"
.IX Subsection "get_long"
Returns the long option name for the specified option.
.PP
One argument is taken and that is the option name.
.PP
If the option name is not found or is undef,
then undef is returned.
.PP
.Vb 4
\&    print \*(Aqroot: \*(Aq.$dhcp_options\->get_long(\*(Aqroot\*(Aq)."\en";
\&    print \*(Aqmask: \*(Aq.$dhcp_options\->get_long(\*(Aqmask\*(Aq)."\en";
\&    print \*(Aqmtu: \*(Aq.$dhcp_options\->get_long(\*(Aqmtu\*(Aq)."\en";
\&    print \*(Aqrouters: \*(Aq.$dhcp_options\->get_long(\*(Aqrouters\*(Aq)."\en";
.Ve
.SS "get_multiple"
.IX Subsection "get_multiple"
Returns if multiple values are supported by this option.
.PP
.Vb 2
\&    0 = single value
\&    1 = multiple values
.Ve
.PP
One option is taken and that is the option name.
.PP
If the option name is not found or is undef,
then undef is returned.
.PP
.Vb 4
\&    # you can use the long name
\&    print \*(Aqsubnet\-mask: \*(Aq.$dhcp_options\->get_multiple(\*(Aqsubnet\-mask\*(Aq)."\en";
\&    # or the easier to remember short name
\&    print \*(Aqmask: \*(Aq.$dhcp_options\->get_multiple(\*(Aqmask\*(Aq)."\en";
\&
\&    if ( $dhcp_options\->get_multiple(\*(Aqdns\*(Aq) ){
\&        print "Multiple values are supported... exanple\en".
\&              "10.10.10.1 , 10.10.10.2\en";
\&    }
.Ve
.SS "get_options"
.IX Subsection "get_options"
Returns a hash ref with the various options.
.PP
.Vb 9
\&    my $options=$dhcp_options\->get_options;
\&    foreach my $opt ( keys( %{ $options } ) ){
\&        print "\-\-\-\-\en".
\&              "option: ".$opt."\en".
\&              "code: ".$options\->{$opt}{\*(Aqcode\*(Aq}."\en".
\&              "multiple: ".$options\->{$opt}{\*(Aqmultiple\*(Aq}."\en".
\&              "type: ".$options\->{$opt}{\*(Aqtype\*(Aq}."\en".
\&              "long: ".$options\->{$opt}{\*(Aqlong\*(Aq}."\en".
\&    }
.Ve
.SS "get_type"
.IX Subsection "get_type"
Returns the data type that the option in question is.
.PP
.Vb 3
\&    ip  = IP address
\&    int = integer
\&    txt = text field that must be defined
.Ve
.PP
One option is taken and that is the option name.
.PP
If the option name is not found or is undef,
then undef is returned.
.PP
.Vb 3
\&    print \*(Aqroot: \*(Aq.$dhcp_options\->get_type(\*(Aqroot\*(Aq)."\en";
\&    print \*(Aqmask: \*(Aq.$dhcp_options\->get_type(\*(Aqmask\*(Aq)."\en";
\&    print \*(Aqmtu: \*(Aq.$dhcp_options\->get_type(\*(Aqmtu\*(Aq)."\en";
.Ve
.SS "valid_option_name"
.IX Subsection "valid_option_name"
This checks if the option name is valid.
.PP
This checks for possible long and short forms.
.PP
.Vb 3
\&    if ( ! $dhcp_options\->valid_option_name( $option ) ){
\&        die( $option.\*(Aq is not a valid option\*(Aq );
\&    }
.Ve
.SS "validate_options"
.IX Subsection "validate_options"
This validates a option and the value for it.
.PP
Twu arguments are taken. The first is the option name
and the third is the value.
.PP
If any issues are found a string is returned that describes it.
.PP
If there are no issues undef is returned.
.PP
This should not be mistaken for sanity checking. This just
makes sure that the data is the correct type for the option.
.PP
.Vb 4
\&    my $error=$dhcp_options\->validate_option( $option, $value );
\&    if ( defined( $error ) ){
\&        die( $error );
\&    }
.Ve
.SH "SUPPORT OPTIONS"
.IX Header "SUPPORT OPTIONS"
This only supports the more commonly used one for now and avoids the out of date ones.
.PP
.Vb 10
\&    | Code | Name             | Multi | Type | Long Name           |
\&    |\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-|\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
\&    | 0    | mask             | 0     | IP   | subnet\-mask         |
\&    | 1    | time\-offset      | 0     | INT  | time\-offset         |
\&    | 3    | routers          | 1     | IP   | routers             |
\&    | 4    | ntp              | 1     | IP   | time\-servers        |
\&    | 6    | dns              | 1     | IP   | domain\-name\-servers |
\&    | 17   | root             | 0     | TXT  | root\-path           |
\&    | 26   | mtu              | 0     | INT  | interface\-mtu       |
\&    | 28   | broadcast        | 0     | IP   | broadcast\-address   |
\&    | 51   | lease\-time       | 0     | INT  | dhcp\-lease\-time     |
\&    | 66   | tfp\-server       | 0     | TXT  | next\-server         |
\&    | 67   | bootfile         | 0     | TXT  | filename            |
\&    | 213  | v4\-access\-domain | 0     | TXT  | v4\-access\-domain    |
\&    | 252  | web\-proxy        | 0     | TXT  | web\-proxy           |
.Ve
.PP
For options that can take multiple values, /\e *\e,\e */ is used for the split.
.PP
Validation is done as below.
.PP
.Vb 3
\&    INT = /^[0\-9]+$/
\&    IP  = If Net::CIDR::addr2cidr can make sense of it.
\&    TXT = defined
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Zane C. Bowers-Hadley, \f(CW\*(C`<vvelox at vvelox.net>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-net\-dhcp\-config\-utilities at rt.cpan.org\*(C'\fR, or through
the web interface at <https://rt.cpan.org/NoAuth/ReportBug.html?Queue=Net\-DHCP\-Config\-Utilities>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Net::DHCP::Config::Utilities
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<https://rt.cpan.org/NoAuth/Bugs.html?Dist=Net\-DHCP\-Config\-Utilities>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Net\-DHCP\-Config\-Utilities>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<https://cpanratings.perl.org/d/Net\-DHCP\-Config\-Utilities>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<https://metacpan.org/release/Net\-DHCP\-Config\-Utilities>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This software is Copyright (c) 2019 by Zane C. Bowers-Hadley.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
