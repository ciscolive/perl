.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CPAN::Testers::Common::Client::History 3"
.TH CPAN::Testers::Common::Client::History 3 "2015-04-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPAN::Testers::Common::Client::History \- read/write CPAN Testers' history file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
You should not call this module directly. Instead, use the public interface
available via CPAN::Testers::Common::Client:
.PP
.Vb 1
\&    use CPAN::Testers::Common::Client;
\&
\&    my $client = CPAN::Testers::Common::Client\->new(
\&        distname => \*(AqClass\-Load\-0.22\*(Aq,
\&        author   => \*(AqKaren Etheridge\*(Aq,
\&        grade    => \*(Aqpass\*(Aq,
\&    );
\&
\&    if (! $client\->is_duplicate ) {
\&        $client\->record_history;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This modules provides a common interface for interacting with the
\&\s-1CPAN\s0 Tester's history file used by compatible clients.
.PP
Most methods are private for use only within CPAN::Testers::Common::Client
itself, through the \fB\s-1API\s0 provided in the \s-1SYNOPSIS\s0\fR. However, if you really
want/need to fiddle with the history file, we do provide a few helper
functions. Just keep reading.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
This module provides the following interface.
\&\fBNo functions are exported by default\fR.
.SS "is_duplicate( \e%data )"
.IX Subsection "is_duplicate( %data )"
.Vb 5
\&    my $data = {
\&        dist_name => \*(AqClass\-Load\-0.22\*(Aq,
\&        phase     => \*(Aqtest\*(Aq,
\&        grade     => \*(AqPASS\*(Aq
\&    };
\&
\&    if (CPAN::Testers::Common::Client::History::is_duplicate( $data )) {
\&        # don\*(Aqt send duplicate reports!
\&    }
.Ve
.PP
From a simple hash reference with some testing data, returns true if there
is a record of this report on the history file, and false otherwise.
.SS "record_history( \e%data )"
.IX Subsection "record_history( %data )"
.Vb 5
\&    CPAN::Testers::Common::Client::History::record_history({
\&        dist_name => \*(AqClone\*(Aq,
\&        phase     => \*(Aqtest\*(Aq,
\&        grade     => \*(AqNA\*(Aq
\&    });
.Ve
.PP
Writes to the history file, adding the entry provided by the given hashref.
.ie n .SS "have_tested( $type => $value )"
.el .SS "have_tested( \f(CW$type\fP => \f(CW$value\fP )"
.IX Subsection "have_tested( $type => $value )"
.Vb 2
\&    # all reports for Foo\-Bar\-1.23
\&    @results = have_tested( dist => \*(AqFoo\-Bar\-1.23\*(Aq );
\& 
\&    # all NA reports
\&    @results = have_tested( grade => \*(AqNA\*(Aq );
\& 
\&    # all reports on the current Perl/platform
\&    @results = have_tested();
.Ve
.PP
Searches the \s-1CPAN\s0 Testers' history file for records exactly matching
the search criteria, given as pairs of field-names and desired values.
.PP
Ordinary search criteria include:
.IP "\(bu" 4
\&\f(CW\*(C`dist\*(C'\fR \*(-- the distribution tarball name without any filename
suffix; from a \f(CW\*(C`CPAN::Distribution\*(C'\fR object, this is provided by
the base_id method.
.IP "\(bu" 4
\&\f(CW\*(C`phase\*(C'\fR \*(-- phase the report was generated during: either
\&'\s-1PL\s0', 'make' or 'test'.
.IP "\(bu" 4
\&\f(CW\*(C`grade\*(C'\fR \*(-- \s-1CPAN\s0 Testers grade: '\s-1PASS\s0', '\s-1FAIL\s0', '\s-1NA\s0' or '\s-1UNKNOWN\s0';
Also may be '\s-1DISCARD\s0' for any failing reports not sent due to
missing prerequisites.
.PP
Without additional criteria, a search will be limited to the current version
of Perl and the current architecture and \s-1OS\s0 version. Additional criteria may
be specified explicitly or, by specifying the empty string, \f(CW\*(C`q{}\*(C'\fR, will
match that field for \fIany\fR record.
.PP
.Vb 3
\&    # all reports for Foo\-Bar\-1.23 on any version of perl
\&    # on the current architecture and OS version
\&    @results = have_tested( dist => \*(AqFoo\-Bar\-1.23\*(Aq, perl => q{} );
.Ve
.PP
These additional criteria include:
.IP "\(bu" 4
\&\f(CW\*(C`perl\*(C'\fR \*(-- perl version and possible patchlevel; this will be dotted
decimal (5.6.2) starting with version 5.6, or will be numeric style as given
by \f(CW$]\fR for older versions; if a patchlevel exists, it must be specified
similar to \*(L"5.11.0 patch 12345\*(R".
.IP "\(bu" 4
\&\f(CW\*(C`archname\*(C'\fR \*(-- platform architecture name as given by
\&\f(CW$Config{archname}\fR.
.IP "\(bu" 4
\&\f(CW\*(C`osvers\*(C'\fR \*(-- operating system version as given by \f(CW$Config{osvers}\fR.
.Sp
The function returns an array of hashes representing each test result, with
all of the fields listed above.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CPAN::Testers::Common::Client
