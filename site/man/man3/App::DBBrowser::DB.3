.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::DBBrowser::DB 3"
.TH App::DBBrowser::DB 3 "2020-09-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::DBBrowser::DB \- Database plugin documentation.
.SH "VERSION"
.IX Header "VERSION"
Version 2.253
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A database plugin provides the database specific methods. \f(CW\*(C`App::DBBrowser\*(C'\fR considers a module whose name matches
\&\f(CW\*(C`/^App::DBBrowser::DB::[^:\*(Aq]+\ez/\*(C'\fR and which is located in one of the \f(CW@INC\fR directories as a database plugin.
.PP
The user can add an installed database plugin to the available plugins in the options menu (\f(CW\*(C`db\-browser \-h\*(C'\fR) by
selecting \fI\s-1DB\s0 Options\fR and then \fI\s-1DB\s0 Plugins\fR.
.PP
A suitable database plugin provides the methods named in this documentation.
.SH "METHODS"
.IX Header "METHODS"
.SS "Required methods"
.IX Subsection "Required methods"
\fInew( \f(CI$info\fI, \f(CI$opt\fI )\fR
.IX Subsection "new( $info, $opt )"
.PP
The constructor method.
.PP
When \f(CW\*(C`db\-browser\*(C'\fR calls the plugin constructor it passes tow arguments:
.PP
.Vb 8
\&    sub new {
\&        my ( $class, $info, $opt ) = @_;
\&        my $self = {
\&            info => $info,
\&            opt  => $opt
\&        };
\&        return bless $self, $class;
\&    }
\&
\&    # $info\->{app_dir}        \-> path to the configuration directoriy of the app
\&    # $info\->{sqlite_search}  \-> true if C<db\-browser> was called with the argument C<\-s|\-\-search>
\&    # $opt\->{G}{metadata}     \-> Options/Sql/Metadata
.Ve
.PP
Returns the created object.
.PP
\fI\f(BIget_db_driver()\fI\fR
.IX Subsection "get_db_driver()"
.PP
Returns the name of the \f(CW\*(C`DBI\*(C'\fR database driver used by the plugin.
.PP
\fI\f(BIget_databases()\fI;\fR
.IX Subsection "get_databases();"
.PP
Returns two array references: the first reference refers to the array of user-databases the second refers to the array
of system-databases. The second array reference is optional.
.PP
If the option \fImetadata\fR is true, user-databases and system-databases are used else only the user-databases are
used.
.PP
\fIget_db_handle( \f(CI$database\fI )\fR
.IX Subsection "get_db_handle( $database )"
.PP
Returns the database handle.
.PP
\&\f(CW\*(C`db\-browser\*(C'\fR expects a \f(CW\*(C`DBI\*(C'\fR database handle with the attribute \fIRaiseError\fR enabled.
.SS "Optional methods"
.IX Subsection "Optional methods"
get_schemas( \f(CW$dbh\fR, \f(CW$database\fR )
.IX Subsection "get_schemas( $dbh, $database )"
.PP
\&\f(CW$dbh\fR is the database handle returned by the method \f(CW\*(C`db_hanlde\*(C'\fR.
.PP
Returns the user-schemas as an array-reference and the system-schemas as an array-reference (if any).
.PP
If the option \fImetadata\fR is true, user-schemas and system-schemas are used else only the user-schemas are used.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 3
\&    package App::DBBrowser::DB::MyPlugin;
\&    use strict;
\&    use DBI;
\&
\&    sub new {
\&        my ( $class ) = @_;
\&        return bless {}, $class;
\&    }
\&
\&    sub get_db_driver {
\&        my ( $self ) = @_;
\&        return \*(AqPg\*(Aq;
\&    }
\&
\&    sub get_db_handle {
\&        my ( $self, $db ) = @_;
\&        my $dbh = DBI\->connect( "DBI:Pg:dbname=$db", \*(Aquser\*(Aq, \*(Aqpassword\*(Aq, {
\&            RaiseError => 1,
\&            PrintError => 0,
\&        }) or die $DBI::errstr;
\&        return $dbh;
\&    }
\&
\&    sub get_databases {
\&        my ( $self ) = @_;
\&        return [ \*(AqMy_DB_1\*(Aq, \*(AqMy_DB_2\*(Aq ];
\&    }
\&
\&    1;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Matthäus Kiem <cuer2s@gmail.com>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2012\-2020 Matthäus Kiem.
.PP
\&\s-1THIS SOFTWARE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE
IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
.PP
This program is free software; you can redistribute it and/or modify it under the same terms as Perl 5.10.0. For
details, see the full text of the licenses in the file \s-1LICENSE.\s0
