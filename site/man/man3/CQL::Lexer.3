.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CQL::Lexer 3"
.TH CQL::Lexer 3 "2012-11-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CQL::Lexer \- a lexical analyzer for CQL
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    my $lexer = CQL::Lexer\->new();
\&    $lexer\->tokenize( \*(Aqfoo and bar\*(Aq );
\&    my @tokens = $lexer\->getTokens();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
CQL::Lexer is lexical analyzer for a string of \s-1CQL.\s0 Once you've
got a CQL::Lexer object you can tokenize a \s-1CQL\s0 string into CQL::Token
objects. Ordinarily you'll never want to do this yourself since
CQL::Parser calls CQL::Lexer for you.
.PP
CQL::Lexer uses Stevan Little's lovely String::Tokenizer in the background,
and does a bit of analysis afterwards to handle some peculiarities of 
\&\s-1CQL:\s0 double quoted strings, <, <=, etc.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBnew()\fP"
.IX Subsection "new()"
The constructor.
.SS "\fBtokenize()\fP"
.IX Subsection "tokenize()"
Pass in a string of \s-1CQL\s0 to tokenize. This initializes the lexer with 
data so that you can retrieve tokens.
.SS "\fBgetTokens()\fP"
.IX Subsection "getTokens()"
Returns a list of all the tokens.
.SS "\fBtoken()\fP"
.IX Subsection "token()"
Returns the current token.
.SS "\fBnextToken()\fP"
.IX Subsection "nextToken()"
Returns the next token, or undef if there are more tokens to retrieve
from the lexer.
.SS "\fBprevToken()\fP"
.IX Subsection "prevToken()"
Returns the previous token, or undef if there are no tokens prior
to the current token.
.SS "\fBreset()\fP"
.IX Subsection "reset()"
Resets the iterator to start reading tokens from the beginning.
