.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Authen::Simple::Adapter 3"
.TH Authen::Simple::Adapter 3 "2012-04-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Authen::Simple::Adapter \- Adapter class for implementations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package Authenticate::Simple::Larry;
\&    
\&    use strict;
\&    use base \*(AqAuthen::Simple::Adapter\*(Aq;
\&    
\&    _\|_PACKAGE_\|_\->options({
\&        secret => {
\&            type     => Params::Validate::SCALAR,
\&            default  => \*(Aqwall\*(Aq,
\&            optional => 1
\&        }
\&    });
\&    
\&    sub check {
\&        my ( $self, $username, $password ) = @_;
\&        
\&        if ( $username eq \*(Aqlarry\*(Aq && $password eq $self\->secret ) {
\&            
\&            $self\->log\->debug( qq/Successfully authenticated user \*(Aq$username\*(Aq./ )
\&              if $self\->log;
\&            
\&            return 1;
\&        }
\&        
\&        $self\->log\->debug( qq/Failed to authenticate user \*(Aq$username\*(Aq. Reason: \*(AqInvalid credentials\*(Aq/ )
\&          if $self\->log;
\&        
\&        return 0;
\&    }
\&    
\&    1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Adapter class for implementations.
.SH "METHODS"
.IX Header "METHODS"
.IP "\(bu" 4
new ( \f(CW%parameters\fR )
.Sp
If overloaded, this method should take a hash of parameters. The following 
options should be valid:
.RS 4
.IP "\(bu" 8
cache ( $ )
.Sp
Any object that supports \f(CW\*(C`get\*(C'\fR, \f(CW\*(C`set\*(C'\fR. Only successful authentications are cached.
.Sp
.Vb 1
\&    cache => Cache::FastMmap\->new
.Ve
.IP "\(bu" 8
callback ( \e& )
.Sp
A subref that gets called with two scalar references, username and password.
.Sp
.Vb 2
\&    callback = sub {
\&        my ( $username, $password ) = @_;
\&        
\&        if ( length($$password) < 6 ) {
\&            return 0; # abort, invalid credintials
\&        }
\&        
\&        if ( $$password eq \*(Aqsecret\*(Aq ) {
\&            return 1; # abort, successful authentication
\&        }
\&        
\&        return; # proceed;
\&    }
.Ve
.IP "\(bu" 8
log ( $ )
.Sp
Any object that supports \f(CW\*(C`debug\*(C'\fR, \f(CW\*(C`info\*(C'\fR, \f(CW\*(C`error\*(C'\fR and \f(CW\*(C`warn\*(C'\fR.
.Sp
.Vb 3
\&    log => Log::Log4perl\->get_logger(\*(AqAuthen::Simple\*(Aq)
\&    log => $r\->log
\&    log => $r\->server\->log
.Ve
.RE
.RS 4
.RE
.IP "\(bu" 4
init ( \e%parameters )
.Sp
This method is called after construction. It should assign parameters and return 
the instance.
.Sp
.Vb 2
\&    sub init {
\&        my ( $self, $parameters ) = @_;
\&        
\&        # mock with parameters
\&        
\&        return $self\->SUPER::init($parameters);
\&    }
.Ve
.IP "\(bu" 4
authenticate ( \f(CW$username\fR, \f(CW$password\fR )
.Sp
End user method. Applies callback, checks cache and calls \f(CW\*(C`check\*(C'\fR unless 
aborted by callback or a cache hit.
.IP "\(bu" 4
check ( \f(CW$username\fR, \f(CW$password\fR )
.Sp
Must be implemented in sublcass, should return true on success and false on failure.
.IP "\(bu" 4
check_password( \f(CW$password\fR, \f(CW$encrypted\fR )
.IP "\(bu" 4
options ( \e%options )
.Sp
Must be set in subclass, should be a valid Params::Validate specification. 
Accessors for options will be created unless defined in sublcass.
.Sp
.Vb 11
\&    _\|_PACKAGE_\|_\->options({
\&        host => {
\&            type     => Params::Validate::SCALAR,
\&            optional => 0
\&        },
\&        port => {
\&            type     => Params::Validate::SCALAR,
\&            default  => 80,
\&            optional => 1
\&        }
\&    });
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Authen::Simple
.PP
Authen::Simple::Password
.PP
Params::Validate
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian Hansen \f(CW\*(C`chansen@cpan.org\*(C'\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software, you can redistribute it and/or modify 
it under the same terms as Perl itself.
