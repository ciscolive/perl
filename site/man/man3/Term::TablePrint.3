.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::TablePrint 3"
.TH Term::TablePrint 3 "2020-10-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::TablePrint \- Print a table to the terminal and browse it interactively.
.SH "VERSION"
.IX Header "VERSION"
Version 0.123
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    my $table = [ [ \*(Aqid\*(Aq, \*(Aqname\*(Aq ],
\&                  [    1, \*(AqRuth\*(Aq ],
\&                  [    2, \*(AqJohn\*(Aq ],
\&                  [    3, \*(AqMark\*(Aq ],
\&                  [    4, \*(AqNena\*(Aq ], ];
\&
\&    use Term::TablePrint qw( print_table );
\&
\&    print_table( $table );
\&
\&    # or OO style:
\&
\&    use Term::TablePrint;
\&
\&    my $pt = Term::TablePrint\->new();
\&    $pt\->print_table( $table );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`print_table\*(C'\fR shows a table and lets the user interactively browse it. It provides a cursor which highlights the row
on which it is located. The user can scroll through the table with the different cursor keys \- see \*(L"\s-1KEYS\*(R"\s0.
.PP
If the table has more rows than the terminal, the table is divided up on as many pages as needed automatically. If the
cursor reaches the end of a page, the next page is shown automatically until the last page is reached. Also if the
cursor reaches the topmost line, the previous page is shown automatically if it is not already the first one.
.PP
If the terminal is too narrow to print the table, the columns are adjusted to the available width automatically.
.PP
If the option table_expand is enabled and a row is selected with Return, each column of that row is output in its own
line preceded by the column name. This might be useful if the columns were cut due to the too low terminal width.
.PP
The following modifications are made (at a copy of the original data) to the table elements before the output.
.PP
Tab characters (\f(CW\*(C`\et\*(C'\fR) are replaces with a space.
.PP
Vertical spaces (\f(CW\*(C`\ev\*(C'\fR) are squashed to two spaces
.PP
Control characters, code points of the surrogate ranges and non-characters are removed.
.PP
If the option \fIsquash_spaces\fR is enabled leading and trailing spaces are removed from the array elements and spaces
are squashed to a single space.
.PP
If an element looks like a number it is left-justified, else it is right-justified.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
The \f(CW\*(C`new\*(C'\fR method returns a \f(CW\*(C`Term::TablePrint\*(C'\fR object. As an argument it can be passed a reference to a hash which
holds the options \- the available options are listed in \*(L"\s-1OPTIONS\*(R"\s0.
.PP
.Vb 1
\&    my $tp = Term::TablePrint\->new( [ \e%options ] );
.Ve
.SS "print_table"
.IX Subsection "print_table"
The \f(CW\*(C`print_table\*(C'\fR method prints the table passed with the first argument.
.PP
.Vb 1
\&    $tp\->print_table( $array_ref, [ \e%options ] );
.Ve
.PP
The first argument is a reference to an array of arrays. The first array of these arrays holds the column names. The
following arrays are the table rows where the elements are the field values.
.PP
As a second and optional argument a hash reference can be passed which holds the options \- the available options are
listed in \*(L"\s-1OPTIONS\*(R"\s0.
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
.SS "print_table"
.IX Subsection "print_table"
The \f(CW\*(C`print_table\*(C'\fR subroutine prints the table passed with the first argument.
.PP
.Vb 1
\&    print_table( $array_ref, [ \e%options ] );
.Ve
.PP
The subroutine \f(CW\*(C`print_table\*(C'\fR takes the same arguments as the method \*(L"print_table\*(R".
.SH "USAGE"
.IX Header "USAGE"
.SS "\s-1KEYS\s0"
.IX Subsection "KEYS"
Keys to move around:
.IP "\(bu" 4
the \f(CW\*(C`ArrowDown\*(C'\fR key (or the \f(CW\*(C`j\*(C'\fR key) to move down and  the \f(CW\*(C`ArrowUp\*(C'\fR key (or the \f(CW\*(C`k\*(C'\fR key) to move up.
.IP "\(bu" 4
the \f(CW\*(C`PageUp\*(C'\fR key (or \f(CW\*(C`Ctrl\-B\*(C'\fR) to go back one page, the \f(CW\*(C`PageDown\*(C'\fR key (or \f(CW\*(C`Ctrl\-F\*(C'\fR) to go forward one page.
.IP "\(bu" 4
the \f(CW\*(C`Insert\*(C'\fR key to go back 25 pages, the \f(CW\*(C`Delete\*(C'\fR key to go forward 25 pages.
.IP "\(bu" 4
the \f(CW\*(C`Home\*(C'\fR key (or \f(CW\*(C`Ctrl\-A\*(C'\fR) to jump to the first row of the table, the \f(CW\*(C`End\*(C'\fR key (or \f(CW\*(C`Ctrl\-E\*(C'\fR) to jump to the last
row of the table.
.PP
With \fIkeep_header\fR disabled the \f(CW\*(C`Return\*(C'\fR key closes the table if the cursor is on the header row.
.PP
If \fIkeep_header\fR is enabled and \fItable_expand\fR is set to \f(CW0\fR, the \f(CW\*(C`Return\*(C'\fR key closes the table if the cursor is on
the first row.
.PP
If \fIkeep_header\fR and \fItable_expand\fR are enabled and the cursor is on the first row, pressing \f(CW\*(C`Return\*(C'\fR three times in
succession closes the table. If \fItable_expand\fR is set to \f(CW1\fR and the cursor is auto-jumped to the first row, it is
required only one \f(CW\*(C`Return\*(C'\fR to close the table.
.PP
If the cursor is not on the first row:
.IP "\(bu" 4
with the option \fItable_expand\fR disabled the cursor jumps to the table head if \f(CW\*(C`Return\*(C'\fR is pressed.
.IP "\(bu" 4
with the option \fItable_expand\fR enabled each column of the selected row is output in its own line preceded by the
column name if \f(CW\*(C`Return\*(C'\fR is pressed. Another \f(CW\*(C`Return\*(C'\fR closes this output and goes back to the table output. If a row is
selected twice in succession, the pointer jumps to the head of the table or to the first row if \fIkeep_header\fR is
enabled.
.PP
If the size of the window is changed, the screen is rewritten as soon as the user presses a key.
.PP
If the option \fIchoose_columns\fR is enabled, the \f(CW\*(C`SpaceBar\*(C'\fR key (or the right mouse key) can be used to select columns \-
see option \*(L"choose_columns\*(R".
.SS "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
Defaults may change in a future release.
.PP
\fIprompt\fR
.IX Subsection "prompt"
.PP
String displayed above the table.
.PP
\fIbinary_filter\fR
.IX Subsection "binary_filter"
.PP
If \fIbinary_filter\fR is set to 1, \*(L"\s-1BNRY\*(R"\s0 is printed instead of arbitrary binary data.
.PP
If the data matches the repexp \f(CW\*(C`/[\ex00\-\ex08\ex0B\-\ex0C\ex0E\-\ex1F]/\*(C'\fR, it is considered arbitrary binary data.
.PP
Printing arbitrary binary data could break the output.
.PP
Default: 0
.PP
\fIchoose_columns\fR
.IX Subsection "choose_columns"
.PP
If \fIchoose_columns\fR is set to 1, the user can choose which columns to print. Columns can be added (with the
\&\f(CW\*(C`SpaceBar\*(C'\fR and the \f(CW\*(C`Return\*(C'\fR key) until the user confirms with the \fI\-ok\-\fR menu entry.
.PP
Confirming without any selected columns selects all columns.
.PP
Default: 0
.PP
\fIdecimal_separator\fR
.IX Subsection "decimal_separator"
.PP
Set the decimal separator. Numbers with a decimal separator are formatted as number if this option is set to the right
value.
.PP
Allowed values: a character with a print width of \f(CW1\fR. If an invalid values is passed, \fIdecimal_separator\fR falls back
to the default value.
.PP
Default: . (dot)
.PP
\fIcodepage_mapping\fR
.IX Subsection "codepage_mapping"
.PP
This option has only meaning if the operating system is MSWin32.
.PP
If the \s-1OS\s0 is MSWin32, Win32::Console::ANSI is used. By default \f(CW\*(C`Win32::Console::ANSI\*(C'\fR converts the characters from
Windows code page to \s-1DOS\s0 code page (the so-called \s-1ANSI\s0 to \s-1OEM\s0 conversion). This conversation is disabled by default in
\&\f(CW\*(C`Term::Choose\*(C'\fR but one can enable it by setting this option.
.PP
Setting this option to \f(CW1\fR enables the codepage mapping offered by Win32::Console::ANSI.
.PP
0 \- disable automatic codepage mapping
.PP
1 \- keep automatic codepage mapping
.PP
Default: 0
.PP
\fIcolor\fR
.IX Subsection "color"
.PP
Setting \fIcolor\fR to \f(CW1\fR enables the support for color and text formatting escape sequences except for the current
selected element. If set to \f(CW2\fR, also for the current selected element the color support is enabled (inverted colors).
.PP
Default: 0
.PP
\fIgrid\fR
.IX Subsection "grid"
.PP
If \fIgrid\fR is set to 0, the table is shown with no grid.
.PP
If \fIgrid\fR is set to 1, lines separate the columns from each other and the header from the body.
.PP
.Vb 12
\&    .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-.
\&    |col1 | col2   | col3 | col3 |
\&    |\-\-\-\-\-|\-\-\-\-\-\-\-\-|\-\-\-\-\-\-|\-\-\-\-\-\-|
\&    |.... | ...... | .... | .... |
\&    |.... | ...... | .... | .... |
\&    |.... | ...... | .... | .... |
\&    |.... | ...... | .... | .... |
\&    |.... | ...... | .... | .... |
\&    |.... | ...... | .... | .... |
\&    |.... | ...... | .... | .... |
\&    |.... | ...... | .... | .... |
\&    \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
.Ve
.PP
\&\fIgrid\fR set to 2 is like \fIgrid\fR set to 1 plus a separator line on top of the header row.
.PP
Default: 1
.PP
\fIkeep-header\fR
.IX Subsection "keep-header"
.PP
If \fIkeep-header\fR is set to 0, the table header is shown on top of the first page.
.PP
If \fIkeep-header\fR is set to 1, the table header is shown on top of each page.
.PP
Default: 1
.PP
\fIsquash_spaces\fR
.IX Subsection "squash_spaces"
.PP
If \fIsquash_spaces\fR is enabled, consecutive spaces are squashed to one space and leading and trailing spaces are
removed.
.PP
Default: 0
.PP
\fImax_rows\fR
.IX Subsection "max_rows"
.PP
Set the maximum number of used table rows. The used table rows are kept in memory.
.PP
To disable the automatic limit set \fImax_rows\fR to 0.
.PP
If the number of table rows is equal to or higher than \fImax_rows\fR, the last row of the output tells that the limit has
been reached.
.PP
Default: 200_000
.PP
\fImin_col_width\fR
.IX Subsection "min_col_width"
.PP
The columns with a width below or equal \fImin_col_width\fR are only trimmed if it is still required to lower the row width
despite all columns wider than \fImin_col_width\fR have been trimmed to \fImin_col_width\fR.
.PP
Default: 30
.PP
\fImouse\fR
.IX Subsection "mouse"
.PP
Set the \fImouse\fR mode (see option \f(CW\*(C`mouse\*(C'\fR in \*(L"\s-1OPTIONS\*(R"\s0 in Term::Choose).
.PP
Default: 0
.PP
\fIprogress_bar\fR
.IX Subsection "progress_bar"
.PP
Set the progress bar threshold. If the number of fields (rows x columns) is higher than the threshold, a progress bar is
shown while preparing the data for the output.
.PP
Default: 40_000
.PP
\fItab_width\fR
.IX Subsection "tab_width"
.PP
Set the number of spaces between columns.
.PP
Default: 2
.PP
\fItable_expand\fR
.IX Subsection "table_expand"
.PP
If the option \fItable_expand\fR is set to \f(CW1\fR or \f(CW2\fR and \f(CW\*(C`Return\*(C'\fR is pressed, the selected table row is printed with
each column in its own line. Exception: if \fItable_expand\fR is set to \f(CW1\fR and the cursor auto-jumped to the first row,
the first row will not be expanded.
.PP
If \fItable_expand\fR is set to 0, the cursor jumps to the to first row (if not already there) when \f(CW\*(C`Return\*(C'\fR is pressed.
.PP
Default: 1
.PP
\fItable_name\fR
.IX Subsection "table_name"
.PP
If set (string), \fItable_name\fR is added in the bottom line.
.PP
\fIundef\fR
.IX Subsection "undef"
.PP
Set the string that will be shown on the screen instead of an undefined field.
.PP
Default: "" (empty string)
.SH "ERROR HANDLING"
.IX Header "ERROR HANDLING"
\&\f(CW\*(C`print_table\*(C'\fR dies
.IP "\(bu" 4
if an invalid number of arguments is passed.
.IP "\(bu" 4
if an invalid argument is passed.
.IP "\(bu" 4
if an unknown option name is passed.
.IP "\(bu" 4
if an invalid option value is passed.
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
.SS "Perl version"
.IX Subsection "Perl version"
Requires Perl version 5.8.3 or greater.
.SS "Decoded strings"
.IX Subsection "Decoded strings"
\&\f(CW\*(C`print_table\*(C'\fR expects decoded strings.
.SS "Encoding layer for \s-1STDOUT\s0"
.IX Subsection "Encoding layer for STDOUT"
For a correct output it is required to set an encoding layer for \f(CW\*(C`STDOUT\*(C'\fR matching the terminal's character set.
.SS "Monospaced font"
.IX Subsection "Monospaced font"
It is required a terminal that uses a monospaced font which supports the printed characters.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Term::TablePrint
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
App::DBBrowser
.SH "CREDITS"
.IX Header "CREDITS"
Thanks to the Perl\-Community.de <http://www.perl-community.de> and the people form
stackoverflow <http://stackoverflow.com> for the help.
.SH "AUTHOR"
.IX Header "AUTHOR"
Matthäus Kiem <cuer2s@gmail.com>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013\-2020 Matthäus Kiem.
.PP
This library is free software; you can redistribute it and/or modify it under the same terms as Perl 5.10.0. For
details, see the full text of the licenses in the file \s-1LICENSE.\s0
