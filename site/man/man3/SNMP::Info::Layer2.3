.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::Layer2 3"
.TH SNMP::Info::Layer2 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::Layer2 \- SNMP Interface to network devices serving Layer2 only.
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Baker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& # Let SNMP::Info determine the correct subclass for you.
\& my $l2 = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class      = $l2\->class();
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
\&
\& # Let\*(Aqs get some basic Port information
\& my $interfaces = $l2\->interfaces();
\& my $i_up       = $l2\->i_up();
\& my $i_speed    = $l2\->i_speed();
\& foreach my $iid (keys %$interfaces) {
\&    my $port  = $interfaces\->{$iid};
\&    my $up    = $i_up\->{$iid};
\&    my $speed = $i_speed\->{$iid}
\&    print "Port $port is $up. Port runs at $speed.\en";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is usually used as a superclass for more specific device classes
listed under SNMP::Info::Layer2::*   Please read all docs under SNMP::Info
first.
.PP
Provides abstraction to the configuration information obtainable from a
Layer2 device through \s-1SNMP.\s0  Information is stored in a number of MIBs.
.PP
For speed or debugging purposes you can call the subclass directly, but not
after determining a more specific class using the method above.
.PP
.Vb 1
\& my $l2 = new SNMP::Info::Layer2(...);
.Ve
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.IP "SNMP::Info" 4
.IX Item "SNMP::Info"
.PD 0
.IP "SNMP::Info::Bridge" 4
.IX Item "SNMP::Info::Bridge"
.IP "SNMP::Info::DocsisHE" 4
.IX Item "SNMP::Info::DocsisHE"
.IP "SNMP::Info::Entity" 4
.IX Item "SNMP::Info::Entity"
.IP "SNMP::Info::LLDP" 4
.IX Item "SNMP::Info::LLDP"
.IP "SNMP::Info::PowerEthernet" 4
.IX Item "SNMP::Info::PowerEthernet"
.PD
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "Inherited Classes" 4
.IX Item "Inherited Classes"
MIBs required by the inherited classes listed above.
.PP
MIBs can be found in netdisco-mibs package.
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP\s0
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$l2\->\fBmodel()\fR" 4
.el .IP "\f(CW$l2\fR\->\fBmodel()\fR" 4
.IX Item "$l2->model()"
Cross references \f(CW$l2\fR\->\fBid()\fR with product IDs in the
Cisco MIBs.
.Sp
For \s-1HP\s0 devices, removes \f(CW\*(Aqhpswitch\*(Aq\fR from the name
.Sp
For Cisco devices, removes c<'sysid'> from the name
.ie n .IP "$l2\->\fBvendor()\fR" 4
.el .IP "\f(CW$l2\fR\->\fBvendor()\fR" 4
.IX Item "$l2->vendor()"
Tries to discover the vendor from \f(CW$l2\fR\->\fBmodel()\fR and \f(CW$l2\fR\->\fBdescription()\fR
.ie n .IP "$l2\->\fBserial()\fR" 4
.el .IP "\f(CW$l2\fR\->\fBserial()\fR" 4
.IX Item "$l2->serial()"
Returns a serial number if found from \fIENTITY-MIB\fR and \fI\s-1OLD\-CISCO\-\s0\fR... \s-1MIB.\s0
.SS "Globals imported from SNMP::Info"
.IX Subsection "Globals imported from SNMP::Info"
See documentation in \*(L"\s-1USAGE\*(R"\s0 in SNMP::Info for details.
.SS "Globals imported from SNMP::Info::Bridge"
.IX Subsection "Globals imported from SNMP::Info::Bridge"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::Bridge for details.
.SS "Globals imported from SNMP::Info::Entity"
.IX Subsection "Globals imported from SNMP::Info::Entity"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::Entity for details.
.SS "Globals imported from SNMP::Info::LLDP"
.IX Subsection "Globals imported from SNMP::Info::LLDP"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::LLDP for details.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$l2\->\fBinterfaces()\fR" 4
.el .IP "\f(CW$l2\fR\->\fBinterfaces()\fR" 4
.IX Item "$l2->interfaces()"
Creates a map between the interface identifier (iid) and the physical port
name.
.Sp
Defaults to \f(CW\*(C`ifDescr\*(C'\fR but checks and overrides with \f(CW\*(C`ifName\*(C'\fR
.SS "Table Methods imported from SNMP::Info"
.IX Subsection "Table Methods imported from SNMP::Info"
See documentation in \*(L"\s-1USAGE\*(R"\s0 in SNMP::Info for details.
.SS "Table Methods imported from SNMP::Info::Bridge"
.IX Subsection "Table Methods imported from SNMP::Info::Bridge"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::Bridge for details.
.SS "Table Methods imported from SNMP::Info::Entity"
.IX Subsection "Table Methods imported from SNMP::Info::Entity"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::Entity for details.
.SS "Table Methods imported from SNMP::Info::LLDP"
.IX Subsection "Table Methods imported from SNMP::Info::LLDP"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::LLDP for details.
