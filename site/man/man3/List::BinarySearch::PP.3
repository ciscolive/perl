.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "List::BinarySearch::PP 3"
.TH List::BinarySearch::PP 3 "2014-12-02" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
List::BinarySearch::PP \- Pure\-Perl Binary Search functions.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module is a plugin for List::BinarySearch providing a graceful fallback to
a pure-Perl binary search implementation in case the optional (but default)
List::BinarySearch::XS dependency cannot be built on a target system.  It is
provided by the List::BinarySearch distribution.
.PP
Examples:
.PP
.Vb 1
\&    use List::BinarySearch qw( binsearch  binsearch_pos  binsearch_range );
\&
\&    # Find the lowest index of a matching element.
\&    $index = binsearch {$a <=> $b} 300, @{[ 100, 200, 300, 400 ]};
\&    $index = binsearch {$a cmp $b} \*(AqMozart\*(Aq, @{[ qw/ Bach Brahms Mozart / ]};
\&    $index = binsearch {$a <=> $b} 42, @{[ 10, 20, 30 ]}      # not found: undef
\&
\&    # Find the lowest index of a matching element, or best insert point.
\&    $index = binsearch_pos {$a cmp $b} \*(AqChopin\*(Aq, @{[ qw/ Bach Brahms Mozart/ ]};  # Insert at [2].
\&    $index = binsearch_pos {$a <=> $b} 60, @{[ 10, 20, 30, 40, 50, 70 ]}; # Insert at [5].
\&    $index = binsearch_pos {$a <=> $b} 20, @{[ 10, 20, 30 ]}; # Matched at [1]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is intended to be used by List::BinarySearch, and shouldn't need
to be used directly in user-code.
.PP
This module provides pure-Perl implementations of the \f(CW\*(C`binsearch\*(C'\fR and
\&\f(CW\*(C`binsearch_pos\*(C'\fR functions for use by List::BinarySearch.  Please refer to
the documentation for List::BinarySearch for a full description of those
functions.  What follows is a very brief overview.
.PP
These pure-Perl functions will be overridden by \s-1XS\s0 code when used via
List::BinarySearch if List::BinarySearch::XS is installed (the default,
and recommended). The pure-Perl functions exist as a gracefull downgrade in case
users aren't able to use \s-1XS\s0 modules.
.SH "EXPORT"
.IX Header "EXPORT"
List::BinarySearch::PP exports by default \f(CW\*(C`binsearch\*(C'\fR and \f(CW\*(C`binsearch_pos\*(C'\fR.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "binsearch \s-1CODE NEEDLE ARRAY_HAYSTACK\s0"
.IX Subsection "binsearch CODE NEEDLE ARRAY_HAYSTACK"
.Vb 1
\&    $first_found_ix = binsearch { $a cmp $b } $needle, @haystack;
.Ve
.PP
Uses the supplied code block as a comparator to search for \f(CW$needle\fR within
\&\f(CW@haystack\fR.  If \f(CW$needle\fR is found, return value will be the lowest index of
a matching element, or \f(CW\*(C`undef\*(C'\fR if the needle isn't found.
.SS "binsearch_pos \s-1CODE NEEDLE ARRAY_HAYSTACK\s0"
.IX Subsection "binsearch_pos CODE NEEDLE ARRAY_HAYSTACK"
.Vb 1
\&    $first_found_ix = binsearch_pos { $a cmp $b } $needle, @haystack;
.Ve
.PP
Uses the supplied code block as a comparator to search for \f(CW$needle\fR within
\&\f(CW@haystack\fR. If \f(CW$needle\fR is found, return value will be the lowest index of
a matching element, or the index of the best insertion point for the needle if
it isn't found.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
Perl 5.8 or newer required.  This module is part of the List::BinarySearch
distribution, and is intended for use by the \f(CW\*(C`List::BinarySearch\*(C'\fR module.
Though the user interface is unlikely to change, it shouldn't be directly used
by code outside of this distribution.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Perl 5.8.
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
Perl versions prior to 5.8 aren't supported by this distribution.  See the
\&\s-1POD\s0 from List::BinarySearch for a more detailed explanation.
.SH "AUTHOR"
.IX Header "AUTHOR"
David Oswald, \f(CW\*(C`<davido at cpan.org>\*(C'\fR
.PP
If the documentation fails to answer your question, or if you have a comment
or suggestion, send me an email.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs or feature requests to
<https://github.com/daoswald/List\-BinarySearch/issues>.  I will
be notified, and then you'll automatically be notified of progress on your bug
as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc List::BinarySearch
.Ve
.PP
This module is maintained in a public repo at Github.  You may look for
information at:
.IP "\(bu" 4
Github: Development is hosted on Github at:
.Sp
<http://www.github.com/daoswald/List\-BinarySearch>
.IP "\(bu" 4
GitHub Issue tracker (report bugs here)
.Sp
<https://github.com/daoswald/List\-BinarySearch/issues>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/List\-BinarySearch>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/List\-BinarySearch>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/List\-BinarySearch/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Mastering Algorithms with Perl <http://shop.oreilly.com/product/9781565923980.do>,
from O'Reilly <http://www.oreilly.com>: much of the code behind the positional
search.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 David Oswald.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
