.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DateTime::Format::CLDR 3"
.TH DateTime::Format::CLDR 3 "2017-06-02" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTime::Format::CLDR \- Parse and format CLDR time patterns
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use DateTime::Format::CLDR;
\&
\&    # 1. Basic example
\&    my $cldr1 = DateTime::Format::CLDR\->new(
\&        pattern     => \*(AqHH:mm:ss\*(Aq,
\&        locale      => \*(Aqde_AT\*(Aq,
\&        time_zone   => \*(AqEurope/Vienna\*(Aq,
\&    );
\&
\&    my $dt1 = $cldr1\->parse_datetime(\*(Aq23:16:42\*(Aq);
\&
\&    print $cldr1\->format_datetime($dt1);
\&    # 23:16:42
\&
\&    # 2. Get pattern from selected locale
\&    # pattern is taken from \*(Aqdate_format_medium\*(Aq in DateTime::Locale::de_AT
\&    my $cldr2 = DateTime::Format::CLDR\->new(
\&        locale      => \*(Aqde_AT\*(Aq,
\&    );
\&
\&    print $cldr2\->parse_datetime(\*(Aq23.11.2007\*(Aq);
\&    # 2007\-11\-23T00:00:00
\&
\&    # 3. Croak when things go wrong
\&    my $cldr3 = DateTime::Format::CLDR\->new(
\&        locale      => \*(Aqde_AT\*(Aq,
\&        on_error    => \*(Aqcroak\*(Aq,
\&    );
\&
\&    $cldr3\->parse_datetime(\*(Aq23.33.2007\*(Aq);
\&    # Croaks
\&
\&    # 4. Use DateTime::Locale
\&    my $locale = DateTime::Locale\->load(\*(Aqen_GB\*(Aq);
\&    my $cldr4 = DateTime::Format::CLDR\->new(
\&        pattern     => $locale\->datetime_format_medium,
\&        locale      => $locale,
\&    );
\&
\&    print $cldr4\->parse_datetime(\*(Aq22 Dec 1995 09:05:02\*(Aq);
\&    # 1995\-12\-22T09:05:02
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a parser (and also a formater) for datetime strings
using patterns as defined by the Unicode \s-1CLDR\s0 Project
(Common Locale Data Repository). <http://unicode.org/cldr/>.
.PP
\&\s-1CLDR\s0 format is supported by DateTime and DateTime::Locale starting with
version 0.40.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructor"
.IX Subsection "Constructor"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 1
\& DateTime::Format::CLDR\->new(%PARAMS);
.Ve
.PP
The following parameters are used by DateTime::Format::CLDR:
.IP "\(bu" 4
locale
.Sp
Locale.
.Sp
See locale accessor.
.IP "\(bu" 4
pattern (optional)
.Sp
\&\s-1CLDR\s0 pattern. If you don't provide a pattern the \f(CW\*(C`date_format_medium\*(C'\fR
pattern from DateTime::Local for the selected locale will be used.
.Sp
See pattern accessor.
.IP "\(bu" 4
time_zone (optional)
.Sp
Timezone that should be used by default. If your pattern contains
timezone information this attribute will be ignored.
.Sp
See time_zone accessor.
.IP "\(bu" 4
on_error (optional)
.Sp
Set the error behaviour.
.Sp
See on_error accessor.
.IP "\(bu" 4
incomplete (optional)
.Sp
Set the behaviour how to handle incomplete date information.
.Sp
See incomplete accessor.
.SS "Accessors"
.IX Subsection "Accessors"
\fIpattern\fR
.IX Subsection "pattern"
.PP
Get/set \s-1CLDR\s0 pattern. See \*(L"\s-1CLDR PATTERNS\*(R"\s0 or \*(L"\s-1CLDR\s0 Patterns\*(R" in DateTime
for details about patterns.
.PP
.Vb 1
\& $cldr\->pattern(\*(Aqd MMM y HH:mm:ss\*(Aq);
.Ve
.PP
It is possible to retrieve patterns from DateTime::Locale
.PP
.Vb 2
\& $dl = DateTime::Locale\->load(\*(Aqes_AR\*(Aq);
\& $cldr\->pattern($dl\->datetime_format_full);
.Ve
.PP
\fItime_zone\fR
.IX Subsection "time_zone"
.PP
Get/set time_zone. Returns a \f(CW\*(C`DateTime::TimeZone\*(C'\fR object.
.PP
Accepts either a timezone name or a \f(CW\*(C`DateTime::TimeZone\*(C'\fR object.
.PP
.Vb 4
\& $cldr\->time_zone(\*(AqAmerica/Argentina/Mendoza\*(Aq);
\& OR
\& my $tz = DateTime::TimeZone\->new(name => \*(AqAmerica/Argentina/Mendoza\*(Aq);
\& $cldr\->time_zone($tz);
.Ve
.PP
\fIlocale\fR
.IX Subsection "locale"
.PP
Get/set a locale. Returns a \f(CW\*(C`DateTime::Locale\*(C'\fR object.
.PP
Accepts either a locale name or a \f(CW\*(C`DateTime::Locale::*\*(C'\fR object.
.PP
.Vb 4
\& $cldr\->locale(\*(Aqfr_CA\*(Aq);
\& OR
\& $dl = DateTime::Locale\->load(\*(Aqfr_CA\*(Aq);
\& $cldr\->locale($dl);
.Ve
.PP
\fIon_error\fR
.IX Subsection "on_error"
.PP
Get/set the error behaviour.
.PP
Accepts the following values
.IP "\(bu" 4
\&'undef' (Literal) (default)
.Sp
Returns undef on error and sets errmsg
.IP "\(bu" 4
\&'croak'
.Sp
Croak on error
.IP "\(bu" 4
\&\s-1CODEREF\s0
.Sp
Run the given coderef on error.
.PP
\fIincomplete\fR
.IX Subsection "incomplete"
.PP
Set the behaviour how to handle incomplete Date information.
.PP
Accepts the following values
.IP "\(bu" 4
\&'1' (default)
.Sp
Sets the missing values to '1'. Thus if you only parse a time sting you would
get '0001\-01\-01' as the date.
.IP "\(bu" 4
\&'incomplete'
.Sp
Create a DateTime::Incomplete object instead.
.IP "\(bu" 4
\&\s-1CODEREF\s0
.Sp
Run the given coderef on incomplete values. The code reference will be
called with the \f(CW\*(C`DateTime::Format::CLDR\*(C'\fR object and a hash of parsed values
as supplied to \f(CW\*(C`DateTime\->new\*(C'\fR. It should return a modified hash which
will be passed to \f(CW\*(C`DateTime\->new\*(C'\fR.
.SS "Public Methods"
.IX Subsection "Public Methods"
\fIparse_datetime\fR
.IX Subsection "parse_datetime"
.PP
.Vb 1
\& my $datetime = $cldr\->parse_datetime($string);
.Ve
.PP
Parses a string and returns a \f(CW\*(C`DateTime\*(C'\fR object on success (If you provide
incomplete data and set the incomplete attribute accordingly it will
return a \f(CW\*(C`DateTime::Incomplete\*(C'\fR object). If the string cannot be parsed
an error will be thrown (depending on the \f(CW\*(C`on_error\*(C'\fR attribute).
.PP
\fIformat_datetime\fR
.IX Subsection "format_datetime"
.PP
.Vb 1
\& my $string = $cldr\->format_datetime($datetime);
.Ve
.PP
Formats a \f(CW\*(C`DateTime\*(C'\fR object using the set locale and pattern. (not the
time_zone)
.PP
\fIerrmsg\fR
.IX Subsection "errmsg"
.PP
.Vb 1
\& my $string = $cldr\->errmsg();
.Ve
.PP
Stores the last error message. Especially useful if the on_error behavior of the
object is 'undef', so you can work out why things went wrong.
.SS "Exportable functions"
.IX Subsection "Exportable functions"
There are no methods exported by default, however the following are available:
.PP
\fIcldr_format\fR
.IX Subsection "cldr_format"
.PP
.Vb 2
\& use DateTime::Format::CLDR qw(cldr_format);
\& &cldr_format($pattern,$datetime);
.Ve
.PP
\fIcldr_parse\fR
.IX Subsection "cldr_parse"
.PP
.Vb 4
\& use DateTime::Format::CLDR qw(cldr_parse);
\& &cldr_parse($pattern,$string);
\& OR
\& &cldr_parse($pattern,$string,$locale);
.Ve
.PP
Default locale is 'en'.
.SH "CLDR PATTERNS"
.IX Header "CLDR PATTERNS"
.SS "Parsing"
.IX Subsection "Parsing"
Some patterns like day of week, quarter, ect. cannot be used to construct
a date. However these patterns can be parsed, and a warning will be
issued if they do not match the parsed date.
.PP
Ambigous patterns (eg. narrow day of week formats for many locales) will
be parsed but ignored in datetime calculation.
.SS "Supported \s-1CLDR\s0 Patterns"
.IX Subsection "Supported CLDR Patterns"
See \*(L"\s-1CLDR\s0 Patterns\*(R" in DateTime.
.PP
\&\s-1CLDR\s0 provides the following patterns:
.IP "\(bu" 4
G{1,3}
.Sp
The abbreviated era (\s-1BC, AD\s0).
.IP "\(bu" 4
\&\s-1GGGG\s0
.Sp
The wide era (Before Christ, Anno Domini).
.IP "\(bu" 4
\&\s-1GGGGG\s0
.Sp
The narrow era, if it exists (and it mostly doesn't).
.Sp
Not used to construct a date.
.IP "\(bu" 4
y and y{3,}
.Sp
The year, zero-prefixed as needed.
.IP "\(bu" 4
yy
.Sp
This is a special case. It always produces a two-digit year, so \*(L"1976\*(R"
becomes \*(L"76\*(R".
.IP "\(bu" 4
Y{1,}
.Sp
The week of the year, from \f(CW\*(C`$dt\->week_year()\*(C'\fR.
.IP "\(bu" 4
u{1,}
.Sp
Same as \*(L"y\*(R" except that \*(L"uu\*(R" is not a special case.
.IP "\(bu" 4
Q{1,2}
.Sp
The quarter as a number (1..4).
.Sp
Not used to construct a date.
.IP "\(bu" 4
\&\s-1QQQ\s0
.Sp
The abbreviated format form for the quarter.
.Sp
Not used to construct a date.
.IP "\(bu" 4
\&\s-1QQQQ\s0
.Sp
The wide format form for the quarter.
.Sp
Not used to construct a date.
.IP "\(bu" 4
q{1,2}
.Sp
The quarter as a number (1..4).
.Sp
Not used to construct a date.
.IP "\(bu" 4
qqq
.Sp
The abbreviated stand-alone form for the quarter.
.Sp
Not used to construct a date.
.IP "\(bu" 4
qqqq
.Sp
The wide stand-alone form for the quarter.
.Sp
Not used to construct a date.
.IP "\(bu" 4
M{1,2}
.Sp
The numerical month.
.IP "\(bu" 4
\&\s-1MMM\s0
.Sp
The abbreviated format form for the month.
.IP "\(bu" 4
\&\s-1MMMM\s0
.Sp
The wide format form for the month.
.IP "\(bu" 4
\&\s-1MMMMM\s0
.Sp
The narrow format form for the month.
.IP "\(bu" 4
L{1,2}
.Sp
The numerical month.
.IP "\(bu" 4
\&\s-1LLL\s0
.Sp
The abbreviated stand-alone form for the month.
.IP "\(bu" 4
\&\s-1LLLL\s0
.Sp
The wide stand-alone form for the month.
.IP "\(bu" 4
\&\s-1LLLLL\s0
.Sp
The narrow stand-alone form for the month.
.IP "\(bu" 4
w{1,2}
.Sp
The week of the year, from \f(CW\*(C`$dt\->week_number()\*(C'\fR.
.Sp
Not used to construct a date.
.IP "\(bu" 4
W
.Sp
The week of the month, from \f(CW\*(C`$dt\->week_of_month()\*(C'\fR.
.Sp
Not used to construct a date.
.IP "\(bu" 4
d{1,2}
.Sp
The numeric day of of the month.
.IP "\(bu" 4
D{1,3}
.Sp
The numeric day of of the year.
.Sp
Not used to construct a date.
.IP "\(bu" 4
F
.Sp
The day of the week in the month, from \f(CW\*(C`$dt\->weekday_of_month()\*(C'\fR.
.Sp
Not used to construct a date.
.IP "\(bu" 4
g{1,}
.Sp
The modified Julian day, from \f(CW\*(C`$dt\->mjd()\*(C'\fR.
.Sp
Not supported by DateTime::Format::CLDR
.IP "\(bu" 4
E{1,3}
.Sp
The abbreviated format form for the day of the week.
.Sp
Not used to construct a date.
.IP "\(bu" 4
\&\s-1EEEE\s0
.Sp
The wide format form for the day of the week.
.Sp
Not used to construct a date.
.IP "\(bu" 4
\&\s-1EEEEE\s0
.Sp
The narrow format form for the day of the week.
.Sp
Not used to construct a date.
.IP "\(bu" 4
e{1,2}
.Sp
The \fIlocal\fR day of the week, from 1 to 7. This number depends on what
day is considered the first day of the week, which varies by
locale. For example, in the \s-1US,\s0 Sunday is the first day of the week,
so this returns 2 for Monday.
.Sp
Not used to construct a date.
.IP "\(bu" 4
eee
.Sp
The abbreviated format form for the day of the week.
.Sp
Not used to construct a date.
.IP "\(bu" 4
eeee
.Sp
The wide format form for the day of the week.
.Sp
Not used to construct a date.
.IP "\(bu" 4
eeeee
.Sp
The narrow format form for the day of the week.
.Sp
Not used to construct a date.
.IP "\(bu" 4
c
.Sp
The numeric day of the week (not localized).
.Sp
Not used to construct a date.
.IP "\(bu" 4
ccc
.Sp
The abbreviated stand-alone form for the day of the week.
.Sp
Not used to construct a date.
.IP "\(bu" 4
cccc
.Sp
The wide stand-alone form for the day of the week.
.Sp
Not used to construct a date.
.IP "\(bu" 4
ccccc
.Sp
The narrow format form for the day of the week.
.Sp
Not used to construct a date.
.IP "\(bu" 4
a
.Sp
The localized form of \s-1AM\s0 or \s-1PM\s0 for the time.
.IP "\(bu" 4
h{1,2}
.Sp
The hour from 1\-12.
.IP "\(bu" 4
H{1,2}
.Sp
The hour from 0\-23.
.IP "\(bu" 4
K{1,2}
.Sp
The hour from 0\-11.
.IP "\(bu" 4
k{1,2}
.Sp
The hour from 1\-24. Note that hour 24 is equivalent to midnight on the date
being parsed, not midnight of the next day.
.IP "\(bu" 4
j{1,2}
.Sp
The hour, in 12 or 24 hour form, based on the preferred form for the
locale. In other words, this is equivalent to either \*(L"h{1,2}\*(R" or
\&\*(L"H{1,2}\*(R".
.IP "\(bu" 4
m{1,2}
.Sp
The minute.
.IP "\(bu" 4
s{1,2}
.Sp
The second.
.IP "\(bu" 4
S{1,}
.Sp
The fractional portion of the seconds, rounded based on the length of the
specifier. This returned without a leading decimal point, but may have
leading or trailing zeroes.
.IP "\(bu" 4
A{1,}
.Sp
The millisecond of the day, based on the current time. In other words, if it
is 12:00:00.00, this returns 43200000.
.Sp
Not supported by DateTime::Format::CLDR
.IP "\(bu" 4
z{1,3}
.Sp
The time zone short name.
.IP "\(bu" 4
zzzz
.Sp
The time zone long name.
.IP "\(bu" 4
Z{1,3}
.Sp
The time zone offset.
.IP "\(bu" 4
\&\s-1ZZZZ\s0
.Sp
The time zone short name and the offset as one string, so something like
\&\*(L"\s-1CDT\-0500\*(R".\s0
.IP "\(bu" 4
v{1,3}
.Sp
The time zone short name.
.IP "\(bu" 4
vvvv
.Sp
The time zone long name.
.IP "\(bu" 4
V{1,3}
.Sp
The time zone short name.
.IP "\(bu" 4
\&\s-1VVVV\s0
.Sp
The time zone long name.
.SH "CAVEATS"
.IX Header "CAVEATS"
Patterns without separators (like 'dMy' or 'yMd') are ambigous for some
dates and might fail.
.PP
Quote from the Author of \f(CW\*(C`DateTime::Format::Strptime\*(C'\fR which also applies to
this module:
.PP
.Vb 4
\& "If your module uses this module to parse a known format: stop it. This module
\& is clunky and slow because it can parse almost anything. Parsing a known
\& format is not so difficult, is it? You\*(Aqll make your module faster if you do.
\& And you\*(Aqre not left at the whim of my potentially broken code."
.Ve
.SH "SUPPORT"
.IX Header "SUPPORT"
Please report any bugs or feature requests to
\&\f(CW\*(C`datetime\-format\-cldr@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/Public/Bug/Report.html?Queue=DateTime::Format::CLDR>.
I will be notified and then you'll automatically be notified of the progress
on your report as I make changes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
datetime@perl.org mailing list
.PP
<http://datetime.perl.org/>
.PP
DateTime, DateTime::Locale, DateTime::TimeZone
and DateTime::Format::Strptime
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&    Maroš Kollár
\&    CPAN ID: MAROS
\&    maros [at] k\-1.com
\&
\&    http://www.k\-1.com
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
DateTime::Format::CLDR is Copyright (c) 2008\-2012 Maroš Kollár
\&\- <http://www.k\-1.com>
.SH "LICENCE"
.IX Header "LICENCE"
This library is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.
