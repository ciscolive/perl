.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::Plugin::Encoding 3"
.TH Dist::Zilla::Plugin::Encoding 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::Plugin::Encoding \- set the encoding of arbitrary files
.SH "VERSION"
.IX Header "VERSION"
version 6.017
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This plugin allows you to explicitly set the encoding on some files in your
distribution. You can either specify the exact set of files (with the
\&\*(L"filenames\*(R" parameter) or provide the regular expressions to check (using
\&\*(L"match\*(R").
.PP
In your \fIdist.ini\fR:
.PP
.Vb 2
\&  [Encoding]
\&  encoding = Latin\-3
\&
\&  filename = t/esperanto.t  ; this file is Esperanto
\&  match     = ^t/urkish/    ; these are all Turkish
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "encoding"
.IX Subsection "encoding"
This is the encoding to set on the selected files. The special value \*(L"bytes\*(R"
can be used to indicate raw files that should not be encoded.
.SS "filenames"
.IX Subsection "filenames"
This is an arrayref of filenames to have their encoding set.
.SS "matches"
.IX Subsection "matches"
This is an arrayref of regular expressions.  Any file whose name matches one of
these regex will have its encoding set.
.SS "ignore"
.IX Subsection "ignore"
This is an arrayref of regular expressions.  Any file whose name matches one of
these regex will \fBnot\fR have its encoding set. Useful to ignore a few files
that would otherwise be selected by \f(CW\*(C`matches\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 üòè <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
