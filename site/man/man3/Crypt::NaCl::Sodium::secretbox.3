.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::NaCl::Sodium::secretbox 3"
.TH Crypt::NaCl::Sodium::secretbox 3 "2015-12-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::NaCl::Sodium::secretbox \- Secret\-key authenticated encryption (XSalsa20/Poly1305 MAC)
.SH "VERSION"
.IX Header "VERSION"
version 1.0.8.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Crypt::NaCl::Sodium qw( :utils );
\&
\&    my $crypto_secretbox = Crypt::NaCl::Sodium\->secretbox();
\&
\&    my ($key, $nonce, $decrypted_msg, $msg, $secret);
\&
\&    ## Alice
\&    ########
\&
\&    # Alice generates secret key
\&    $key = $crypto_secretbox\->keygen();
\&
\&    # ... and shares it with Bob
\&    send_to( Bob => { key => $key } );
\&
\&    # now Alice and Bob can start communicating
\&
\&    # Alice generates random nonce
\&    $nonce = $crypto_secretbox\->nonce();
\&
\&    send_to( Bob => { nonce => $nonce } );
\&
\&    # Alice\*(Aqs message to Bob
\&    $msg = "Hi Bob!";
\&
\&    # encrypts using combined mode
\&    $secret = $crypto_secretbox\->encrypt( $msg, $nonce, $key );
\&
\&    # message is ready for Bob
\&    send_to( Bob => { secret => $secret } );
\&
\&    ## Bob
\&    ########
\&
\&    # Bob receives the secret key from Alice
\&    $key = receive_for( Bob => \*(Aqkey\*(Aq );
\&
\&    # and random nonce
\&    $nonce = receive_for( Bob => \*(Aqnonce\*(Aq );
\&
\&    # Bob is now ready to receive first message from Alice
\&    $secret = receive_for( Bob => \*(Aqsecret\*(Aq );
\&
\&    # we have now all information required to decrypt message
\&    $decrypted_msg = $crypto_secretbox\->decrypt( $secret, $nonce, $key );
\&
\&    # time to reply
\&    $msg = "Hello Alice!";
\&
\&    # generates new nonce
\&    $nonce = $crypto_secretbox\->nonce();
\&
\&    # this time we use detached mode
\&    ($mac, $secret) = $crypto_secretbox\->encrypt( $msg, $nonce, $key );
\&
\&    # Alice needs all pieces to verify and decrypt Bob\*(Aqs message
\&    send_to( Alice => { nonce => $nonce } );
\&    send_to( Alice => { mac => $mac } );
\&    send_to( Alice => { secret => $secret } );
\&
\&    ## Alice
\&    ########
\&
\&    # Bob used the detached mode
\&    $nonce  = receive_for( Alice => \*(Aqnonce\*(Aq );
\&    $mac    = receive_for( Alice => \*(Aqmac\*(Aq );
\&    $secret = receive_for( Alice => \*(Aqsecret\*(Aq );
\&
\&    # we have now all information required to decrypt message
\&    $decrypted_msg = $crypto_secretbox\->decrypt_detached( $mac, $secret, $nonce, $key );
\&
\&    # NOTE: send_to() and receive_for() and user functions providing transport of
\&    # messages
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Secret-key (also known as symmetric-key) cryptography can be compared to
combination lock safe \- only those who know the correct lock code can open it.
.PP
Therefore the generated key must be distributed in secret.
.PP
Nonce (number used once) does not have to be protected, but it is crucial that
the same nonce has not been ever reused with the same key.
.PP
The authentication tag confirms that the encrypted data has not been tampered
with before decrypting it.
.SH "METHODS"
.IX Header "METHODS"
.SS "keygen"
.IX Subsection "keygen"
.Vb 1
\&    my $key = $crypto_secretbox\->keygen();
.Ve
.PP
Helper method to generate a random key to be used by \f(CW$crypto_secretbox\fR.
.PP
The length of the \f(CW$key\fR equals \*(L"\s-1KEYBYTES\*(R"\s0.
.PP
\&\fB\s-1NOTE:\s0\fR keep the key confidential.
.PP
Returns Data::BytesLocker object.
.SS "nonce"
.IX Subsection "nonce"
.Vb 1
\&    my $nonce = $crypto_secretbox\->nonce();
.Ve
.PP
Helper method to generate a random nonce to be used by \f(CW$crypto_secretbox\fR.
.PP
The length of the nonce equals \*(L"\s-1NONCEBYTES\*(R"\s0.
.PP
If initial value has been passed as the argument, it will then padded with
\&\f(CW\*(C`null\*(C'\fR bytes.
.PP
.Vb 3
\&    my $counter = 121;
\&    my $nonce = $crypto_secretbox\->nonce($counter);
\&    $nonce =~ /^121\e0+$/ or die;
.Ve
.PP
\&\fB\s-1NOTE:\s0\fR nonce does not have to be random nor confidential, but it must never
be reused with the same key. It is large enough that the randomly
generated nonces have negligible risk of collision.
.PP
If random nonce is being used it needs to be provided to the other party to
allow decryption.
.PP
If counter is being used store it alongside the key to avoid accidental reuse on
the next session. In connection-oriented protocols counter-based nonce could help
rejecting duplicate messages.
.PP
Returns Data::BytesLocker object.
.SS "encrypt"
.IX Subsection "encrypt"
.Vb 2
\&    # combined mode \- MAC and encrypted message stored together
\&    my $secret = $crypto_secretbox\->encrypt($msg, $nonce, $key);
\&
\&    # detached mode \- MAC and encrypted message returned separate
\&    my ($mac, $ciphertext) = $crypto_secretbox\->encrypt($msg, $nonce, $key);
.Ve
.PP
Encrypts the plaintext message using given \f(CW$nonce\fR and \f(CW$key\fR.
.PP
In scalar context works in combined mode, where \s-1MAC\s0 and encrypted message are stored
together.
The length of the \f(CW$secret\fR is equal to the length of \f(CW$msg\fR + \*(L"\s-1MACBYTES\*(R"\s0.
.PP
In list context the \f(CW$mac\fR and \f(CW$ciphertext\fR are returned separately.
The length of the \f(CW$ciphertext\fR is equal to the length of \f(CW$msg\fR, while length
of \f(CW$mac\fR is \*(L"\s-1MACBYTES\*(R"\s0.
.PP
Returns Data::BytesLocker object.
.SS "decrypt"
.IX Subsection "decrypt"
.Vb 9
\&    my $msg;
\&    eval {
\&        $msg = $crypto_secretbox\->decrypt($secret, $nonce, $key);
\&    };
\&    if ( $@ ) {
\&        warn "Message forged!";
\&    } else {
\&        print "Decrypted message: $msg\en";
\&    }
.Ve
.PP
Verifies and decrypts the secret message using given \f(CW$nonce\fR and \f(CW$key\fR.
.PP
Function croaks if the verification fails. Otherwise returns the decrypted message.
.PP
The length of the \f(CW$msg\fR is equal to the length of \f(CW$secret\fR \- \*(L"\s-1MACBYTES\*(R"\s0.
.PP
Returns Data::BytesLocker object.
.SS "decrypt_detached"
.IX Subsection "decrypt_detached"
.Vb 9
\&    my $msg;
\&    eval {
\&        $msg = $crypto_secretbox\->decrypt_detached($mac, $ciphertext, $nonce, $key);
\&    };
\&    if ( $@ ) {
\&        warn "Message forged!";
\&    } else {
\&        print "Decrypted message: $msg\en";
\&    }
.Ve
.PP
Verifies and decrypts the secret message \f(CW$ciphertext\fR authenticated with \f(CW$mac\fR
using given \f(CW$nonce\fR and \f(CW$key\fR.
.PP
Function croaks if the verification fails. Otherwise returns the decrypted message.
.PP
The length of the \f(CW$msg\fR equals the length of \f(CW$ciphertext\fR.
.PP
Returns Data::BytesLocker object.
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.SS "\s-1NONCEBYTES\s0"
.IX Subsection "NONCEBYTES"
.Vb 1
\&    my $nonce_length = $crypto_secretbox\->NONCEBYTES;
.Ve
.PP
Returns the length of nonce.
.SS "\s-1KEYBYTES\s0"
.IX Subsection "KEYBYTES"
.Vb 1
\&    my $key_length = $crypto_secretbox\->KEYBYTES;
.Ve
.PP
Returns the length of key.
.SS "\s-1MACBYTES\s0"
.IX Subsection "MACBYTES"
.Vb 1
\&    my $mac_length = $crypto_secretbox\->MACBYTES;
.Ve
.PP
Returns the length of \s-1MAC.\s0
.SH "ALGORITHM DETAILS"
.IX Header "ALGORITHM DETAILS"
\&\f(CW\*(C`crypto_secretbox\*(C'\fR for encryption uses XSalsa20 stream cipher (which is based
on Salsa20, but with much longer nonce) and Poly1305 \s-1MAC\s0 for authentication.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Data::BytesLocker \- guarded data storage
.IP "\(bu" 4
Extending the Salsa20 nonce <http://cr.yp.to/snuffle/xsalsa-20110204.pdf>
\&\- the paper introducing XSalsa20
.IP "\(bu" 4
The Poly1305\-AES message-authentication code <http://cr.yp.to/mac/poly1305-20050329.pdf>
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex J. G. Burzyński <ajgb@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2015 by Alex J. G. Burzyński <ajgb@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
