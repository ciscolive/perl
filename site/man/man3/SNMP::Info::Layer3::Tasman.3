.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::Layer3::Tasman 3"
.TH SNMP::Info::Layer3::Tasman 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::Layer3::Tasman \- SNMP Interface to Avaya Secure Routers
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Miller
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\& # Let SNMP::Info determine the correct subclass for you.
\& my $tasman = new SNMP::Info(
\&                        AutoSpecify => 1,
\&                        Debug       => 1,
\&                        # These arguments are passed directly to SNMP::Session
\&                        DestHost    => \*(Aqmyswitch\*(Aq,
\&                        Community   => \*(Aqpublic\*(Aq,
\&                        Version     => 2
\&                        )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class      = $tasman\->class();
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Subclass for Avaya Secure Routers
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.IP "SNMP::Info::Layer3" 4
.IX Item "SNMP::Info::Layer3"
.PD 0
.IP "SNMP::Info::MAU" 4
.IX Item "SNMP::Info::MAU"
.PD
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fINT-ENTERPRISE-DATA-MIB\fR" 4
.IX Item "NT-ENTERPRISE-DATA-MIB"
.PD 0
.IP "\fISYSTEM-MIB\fR" 4
.IX Item "SYSTEM-MIB"
.IP "\fICHASSIS-MIB\fR" 4
.IX Item "CHASSIS-MIB"
.IP "\fIENVIRONMENT-MIB\fR" 4
.IX Item "ENVIRONMENT-MIB"
.IP "Inherited Classes' MIBs" 4
.IX Item "Inherited Classes' MIBs"
.PD
See \*(L"Required MIBs\*(R" in SNMP::Info::Layer3 for its own \s-1MIB\s0 requirements.
.Sp
See \*(L"Required MIBs\*(R" in SNMP::Info::MAU for its own \s-1MIB\s0 requirements.
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar values from \s-1SNMP\s0
.ie n .IP "$tasman\->\fBvendor()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBvendor()\fR" 4
.IX Item "$tasman->vendor()"
Returns \f(CW\*(Aqavaya\*(Aq\fR
.ie n .IP "$tasman\->\fBmodel()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBmodel()\fR" 4
.IX Item "$tasman->model()"
Tries to get the model from \f(CW\*(C`nnchassisModel\*(C'\fR and if not available
cross references \f(CW$tasman\fR\->\fBid()\fR to \fINT-ENTERPRISE-DATA-MIB\fR.
.Sp
Substitutes '\s-1SR\s0' for \f(CW\*(AqntSecureRouter\*(Aq\fR in the name for readability.
.ie n .IP "$tasman\->\fBos()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBos()\fR" 4
.IX Item "$tasman->os()"
Returns \f(CW\*(Aqtasman\*(Aq\fR
.ie n .IP "$tasman\->\fBos_ver()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBos_ver()\fR" 4
.IX Item "$tasman->os_ver()"
Grabs the os version from \f(CW\*(C`nnsysVersion\*(C'\fR
.ie n .IP "$tasman\->\fBps1_type()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBps1_type()\fR" 4
.IX Item "$tasman->ps1_type()"
(\f(CW\*(C`nnenvPwrsupType.1\*(C'\fR)
.ie n .IP "$tasman\->\fBps1_status()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBps1_status()\fR" 4
.IX Item "$tasman->ps1_status()"
(\f(CW\*(C`nnenvPwrsupStatus.1\*(C'\fR)
.ie n .IP "$tasman\->\fBps2_type()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBps2_type()\fR" 4
.IX Item "$tasman->ps2_type()"
(\f(CW\*(C`nnenvPwrsupType.2\*(C'\fR)
.ie n .IP "$tasman\->\fBps2_status()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBps2_status()\fR" 4
.IX Item "$tasman->ps2_status()"
(\f(CW\*(C`nnenvPwrsupStatus.2\*(C'\fR)
.ie n .IP "$tasman\->\fBnn_sys_ver()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBnn_sys_ver()\fR" 4
.IX Item "$tasman->nn_sys_ver()"
(\f(CW\*(C`nnsysVersion.0\*(C'\fR)
.ie n .IP "$tasman\->\fBnn_ch_model()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBnn_ch_model()\fR" 4
.IX Item "$tasman->nn_ch_model()"
(\f(CW\*(C`nnchassisModel.0\*(C'\fR)
.ie n .IP "$tasman\->\fBnn_ch_op_stat()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBnn_ch_op_stat()\fR" 4
.IX Item "$tasman->nn_ch_op_stat()"
(\f(CW\*(C`nnchassisOperStatus.0\*(C'\fR)
.ie n .IP "$tasman\->\fBnn_ch_serial()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBnn_ch_serial()\fR" 4
.IX Item "$tasman->nn_ch_serial()"
(\f(CW\*(C`nnchassisSerialNumber.0\*(C'\fR)
.ie n .IP "$tasman\->\fBserial()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBserial()\fR" 4
.IX Item "$tasman->serial()"
Tries both (\f(CW\*(C`nnchassisOperStatus\*(C'\fR) and (\f(CW\*(C`nnchassisSerialNumber\*(C'\fR) as oid
was redefined between versions.
.SS "Global Methods imported from SNMP::Info::Layer3"
.IX Subsection "Global Methods imported from SNMP::Info::Layer3"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::Layer3 for details.
.SS "Global Methods imported from SNMP::Info::MAU"
.IX Subsection "Global Methods imported from SNMP::Info::MAU"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::MAU for details.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.ie n .IP "$tasman\->\fBi_duplex_admin()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBi_duplex_admin()\fR" 4
.IX Item "$tasman->i_duplex_admin()"
Returns reference to hash of iid to administrative duplex setting.
.Sp
First checks for fixed gigabit ports which are always full duplex. Next checks
the port administrative speed (\f(CW\*(C`portAdminSpeed\*(C'\fR) which if set to
autonegotiate then the duplex will also autonegotiate, otherwise it uses the
reported port duplex (\f(CW\*(C`portDuplex\*(C'\fR).
.ie n .IP "$tasman\->\fBi_speed_admin()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBi_speed_admin()\fR" 4
.IX Item "$tasman->i_speed_admin()"
Returns reference to hash of iid to administrative speed setting.
.Sp
\&\f(CW\*(C`portAdminSpeed\*(C'\fR
.SS "Pseudo \fIENTITY-MIB\fP information"
.IX Subsection "Pseudo ENTITY-MIB information"
These methods emulate \fIENTITY-MIB\fR Physical Table methods using
\&\fICHASSIS-MIB\fR.
.ie n .IP "$tasman\->\fBe_index()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBe_index()\fR" 4
.IX Item "$tasman->e_index()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Integer.
.ie n .IP "$tasman\->\fBe_class()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBe_class()\fR" 4
.IX Item "$tasman->e_class()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: General hardware type.
.ie n .IP "$tasman\->\fBe_descr()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBe_descr()\fR" 4
.IX Item "$tasman->e_descr()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Human friendly name
.ie n .IP "$tasman\->\fBe_vendor()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBe_vendor()\fR" 4
.IX Item "$tasman->e_vendor()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: avaya
.ie n .IP "$tasman\->\fBe_serial()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBe_serial()\fR" 4
.IX Item "$tasman->e_serial()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Serial number
.ie n .IP "$tasman\->\fBe_pos()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBe_pos()\fR" 4
.IX Item "$tasman->e_pos()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: The relative position among all
entities sharing the same parent.
.ie n .IP "$tasman\->\fBe_type()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBe_type()\fR" 4
.IX Item "$tasman->e_type()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Type of component/sub\-component.
.ie n .IP "$tasman\->\fBe_parent()\fR" 4
.el .IP "\f(CW$tasman\fR\->\fBe_parent()\fR" 4
.IX Item "$tasman->e_parent()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: The value of \fBe_index()\fR for the
entity which 'contains' this entity.  A value of zero indicates	this entity
is not contained in any other entity.
.ie n .IP "$entity\->\fBe_fru()\fR" 4
.el .IP "\f(CW$entity\fR\->\fBe_fru()\fR" 4
.IX Item "$entity->e_fru()"
\&\s-1BOOLEAN.\s0 Is a Field Replaceable unit?
.SS "Table Methods imported from SNMP::Info::Layer3"
.IX Subsection "Table Methods imported from SNMP::Info::Layer3"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::Layer3 for details.
.SS "Table Methods imported from SNMP::Info::MAU"
.IX Subsection "Table Methods imported from SNMP::Info::MAU"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::MAU for details.
