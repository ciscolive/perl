.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MozRepl 3"
.TH MozRepl 3 "2007-07-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MozRepl \- Perl interface of MozRepl
.SH "VERSION"
.IX Header "VERSION"
version 0.06
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use strict;
\&    use warnings;
\&
\&    use MozRepl;
\&
\&    my $repl = MozRepl\->new;
\&    $repl\->setup; ### You must write it.
\&
\&    $repl\->execute(q|window.alert("Internet Explorer:<")|);
\&
\&    print $repl\->repl_inspect({ source => "window" });
\&    print $repl\->repl_search({ pattern => "^getElement", source => "document"});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MozRepl is accessing and control firefox using telnet, provided MozLab extension.
This module is perl interface of MozRepl.
.PP
Additionaly this is enable to extend by writing plugin module.
You want to write plugin, see MozRepl::Plugin::Base or other plugins.
.SS "For cygwin users"
.IX Subsection "For cygwin users"
In cygwin, please add binmode param as 1 in client args.
.PP
.Vb 7
\&    $repl\->setup({
\&        client => {
\&            extra_client_args => {
\&                binmode => 1
\&            }
\&        }
\&    });
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new($args)"
.IX Subsection "new($args)"
Create MozRepl instance.
One argument, and it must be hash reference.
.IP "search" 4
.IX Item "search"
Module::Pluggable::Fast's arguments.
If you want to search modules has not prefix like 'MozRepl::Plugin', 
then you are set this value like below.
.Sp
.Vb 1
\&  my $repl = MozRepl\->new({ search => [qw/MyRepl::Plugin OtherRepl::Plugin/] });
.Ve
.SS "setup($args)"
.IX Subsection "setup($args)"
Setup logging, client, plugins.
One argument, must be hash reference.
.IP "log" 4
.IX Item "log"
Hash reference or undef.
See \*(L"setup_log($args)\*(R" in MozRepl, \*(L"new($args)\*(R" in MozRepl::Log.
.IP "client" 4
.IX Item "client"
Hash reference or undef.
See \*(L"setup_client($args)\*(R" in MozRepl, \*(L"new($ctx, \f(CW$args\fR)\*(R" in MozRepl::Client.
.IP "plugins" 4
.IX Item "plugins"
Hash reference or undef
See \*(L"setup_plugins($args)\*(R" in MozRepl.
.SS "setup_log($args)"
.IX Subsection "setup_log($args)"
Create logging instance. default class is MozRepl::Log.
If you want to change log class, then set class name using \*(L"log_class($class)\*(R" in MozRepl.
.PP
This method is only called in \*(L"setup($args)\*(R" in MozRepl.
.PP
One arguments, array reference.
If you want to limit log levels, specify levels like below.
.PP
.Vb 1
\&    $repl\->setup_log([qw/info warn error fatal/]);
.Ve
.PP
See \*(L"new($args)\*(R" in MozRepl::Log.
.PP
If you want to use another log class, and already instanciate it, 
then you should call and set the instance before \fBsetup()\fR method process.
.PP
Example,
.PP
.Vb 3
\&    my $repl = MozRepl\->new;
\&    $repl\->log($another_log_instance);
\&    $repl\->setup($config);
.Ve
.SS "setup_client($args)"
.IX Subsection "setup_client($args)"
Create (telnet) client instance. default class is MozRepl::Client.
If you want to change client class, then set class name using \*(L"client_class($class)\*(R" in MozRepl.
.PP
This method is only called in \*(L"setup($args)\*(R" in MozRepl.
.PP
One arguments, hash reference.
See \*(L"new($ctx, \f(CW$args\fR)\*(R" in MozRepl::Client.
.SS "setup_plugins($args)"
.IX Subsection "setup_plugins($args)"
Setup plugins.
One argument, must be hash reference, it will be passed each plugin's as new method arguments.
And \*(L"load_plugins($args)\*(R" in MozRepl too.
.PP
This method is only called in \*(L"setup($args)\*(R" in MozRepl.
.ie n .SS "setup_plugin($plugin, $args)"
.el .SS "setup_plugin($plugin, \f(CW$args\fP)"
.IX Subsection "setup_plugin($plugin, $args)"
Create plugin instance, and mixin method to self.
Method name is detect by plugin's package, see \*(L"plugin_to_method($plugin, \f(CW$search\fR)\*(R" in MozRepl::Util.
.SS "load_plugins"
.IX Subsection "load_plugins"
Load available plugins.
One argument, must be hash reference or undef.
.IP "plugins" 4
.IX Item "plugins"
Array reference.
Specify only plugins you want to use.
.Sp
.Vb 1
\&    $repl\->load_plugins({ plugins => [qw/Repl::Print Repl::Inspect/] });
.Ve
.IP "except_plugins" 4
.IX Item "except_plugins"
Array reference.
Specify except plugins you want to use.
.Sp
.Vb 1
\&    $repl\->load_plugins({ except_plugins => [qw/JSON/] });
.Ve
.SS "enable_plugin($plugin)"
.IX Subsection "enable_plugin($plugin)"
Return whether the specified plugin is enabled or not.
.SS "execute($command)"
.IX Subsection "execute($command)"
Execute command and return result string.
See \*(L"execute($command)\*(R" in MozRepl::Client.
.SS "\fBfinalize()\fP"
.IX Subsection "finalize()"
Finalize connection.
.SS "client($client)"
.IX Subsection "client($client)"
Accessor of client object. See MozRepl::Client.
.SS "log($log)"
.IX Subsection "log($log)"
Accessor of log object. See MozRepl::Log.
.SS "plugins($plugins)"
.IX Subsection "plugins($plugins)"
Accessor of plugin table, key is plugin class name, value is plugin instance.
.SS "repl($repl)"
.IX Subsection "repl($repl)"
Accessor of \*(L"repl\*(R" object name.
If two or more connection to MozRepl, this name is added number on postfix like 'repl1'.
.SS "search($search)"
.IX Subsection "search($search)"
Accessor of search pathes. See \*(L"new($args)\*(R" in MozRepl.
.SS "log_class($class)"
.IX Subsection "log_class($class)"
Logging class name. default value is "MozRepl::Log"
.SS "client_class($class)"
.IX Subsection "client_class($class)"
Client class name. default value is "MozRepl::Client"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "MozRepl::Util" 4
.IX Item "MozRepl::Util"
.PD 0
.IP "MozRepl::Plugin::Base" 4
.IX Item "MozRepl::Plugin::Base"
.IP "http://dev.hyperstruct.net/mozlab" 4
.IX Item "http://dev.hyperstruct.net/mozlab"
.IP "http://dev.hyperstruct.net/mozlab/wiki/MozRepl" 4
.IX Item "http://dev.hyperstruct.net/mozlab/wiki/MozRepl"
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Toru Yamaguchi, \f(CW\*(C`<zigorou@cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-mozrepl@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.  I will be notified, and then you'll automatically be
notified of progress on your bug as I make changes.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2007 Toru Yamaguchi, All Rights Reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
