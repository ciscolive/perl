.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::CleanFragment 3"
.TH Text::CleanFragment 3 "2019-08-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::CleanFragment \- clean up text to use as URL fragment or filename
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  my $title = "Do p\ex{00FC}t <this> into/URL\*(Aqs?";
\&  my $id = 42;
\&  my $url = join "/",
\&              $id,
\&              clean_fragment( $title );
\&  # 42/Do_put_this_into_URLs
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module downgrades strings of text to match
.PP
.Vb 1
\&  /^[\-._A\-Za\-z0\-9]*$/
.Ve
.PP
or, to be more exact
.PP
.Vb 1
\&  /^([A\-Za\-z0\-9]([\-._A\-Za\-z0\-9]*[A\-Za\-z0\-9])?$/
.Ve
.PP
This makes the return values safe to be used as \s-1URL\s0 fragments
or as file names on many file systems where whitespace
and characters outside of the Latin alphabet are undesired
or problematic.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS """clean_fragment( @fragments )"""
.el .SS "\f(CWclean_fragment( @fragments )\fP"
.IX Subsection "clean_fragment( @fragments )"
.Vb 2
\&    my $url_title = join("_", clean_fragment("Ümloud vs. ß",\*(Aqby\*(Aq,"Grégory"));
\&    # Umloud_vs._ss_by_Gregory
.Ve
.PP
Returns a cleaned up list of elements. The input elements
are expected to be encoded as Unicode strings. Decode them using
Encode if you read the fragments as file names from the filesystem.
.PP
The operations performed are:
.IP "\(bu" 4
Use Text::Unidecode to downgrade the text from Unicode to 7\-bit \s-1ASCII.\s0
.IP "\(bu" 4
Eliminate single and double quotes, apostrophes.
.IP "\(bu" 4
Replace all non-letters, non-digits by underscores, including whitespace
and control characters.
.IP "\(bu" 4
Squash dashes to a single dash
.IP "\(bu" 4
Squash \f(CW\*(C`_\-_\*(C'\fR and \f(CW\*(C`_\-_(\-_)+\*(C'\fR to \-
.IP "\(bu" 4
Eliminate leading underscores
.IP "\(bu" 4
Eliminate trailing underscores
.IP "\(bu" 4
Eliminate underscores before \- or .
.PP
In scalar context, returns the first element of the cleaned up list.
.SH "REPOSITORY"
.IX Header "REPOSITORY"
The public repository of this module is
<https://github.com/Corion/text\-cleanfragment>.
.SH "SUPPORT"
.IX Header "SUPPORT"
The public support forum of this module is
<https://perlmonks.org/>.
.SH "BUG TRACKER"
.IX Header "BUG TRACKER"
Please report bugs in this module via the \s-1RT CPAN\s0 bug queue at
<https://rt.cpan.org/Public/Dist/Display.html?Name=Text\-CleanFragment>
or via mail to text\-cleanfragment\-Bugs@rt.cpan.org.
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR
.SH "COPYRIGHT (c)"
.IX Header "COPYRIGHT (c)"
Copyright 2012\-2019 by Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
This module is released under the same terms as Perl itself.
