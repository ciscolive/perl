.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Promises::Cookbook::ScalaFuturesComparison 3"
.TH Promises::Cookbook::ScalaFuturesComparison 3 "2020-02-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Promises::Cookbook::ScalaFuturesComparison \- A comparison of Scala Futures with Promises
.SH "VERSION"
.IX Header "VERSION"
version 1.04
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Here is the example Scala code, it assumes a function called \f(CW\*(C`fetch\*(C'\fR 
which when given a \s-1URL\s0 will return a Future.
.PP
.Vb 10
\&    def getThumbnail(url: String): Future[Webpage] = {
\&        val promise = new Promise[Webpage]
\&        fetch(url) onSuccess { page =>
\&            fetch(page.imageLinks(0)) onSuccess { p =>
\&                promise.setValue(p)
\&            } onFailure { exc =>
\&                promise.setException(exc)
\&            }
\&        } onFailure { exc =>
\&            promise.setException(exc)
\&        }
\&        promise
\&    }
.Ve
.PP
If we take this and translate this into Perl code using the 
Mojo::UserAgent library, the \f(CW\*(C`fetch\*(C'\fR function would look 
like this:
.PP
.Vb 10
\&    sub fetch {
\&        state $ua = Mojo::UserAgent\->new;
\&        my $url   = shift;
\&        my $d     = deferred;
\&        $ua\->get($url => sub {
\&            my ($ua, $tx) = @_;
\&            $d\->resolve( $tx );
\&        });
\&        $d\->promise;
\&    }
.Ve
.PP
And if we were to take the \f(CW\*(C`get_thumbnail\*(C'\fR function and 
translate it exactly, we would end up with this:
.PP
.Vb 10
\&    sub get_thumbnail {
\&        my $url = shift;
\&        my $d   = deferred;
\&        fetch( $url )\->then(
\&            sub {
\&                my $tx = shift;
\&                fetch( $tx\->res\->dom\->find(\*(Aqimg\*(Aq)\->[0]\->{\*(Aqsrc\*(Aq} )\->then(
\&                    sub { $d\->resolve( $_[0] ) },
\&                    sub { $d\->reject( $_[0] ) },                
\&                )
\&            },
\&            sub { $d\->reject( $_[0] ) }
\&        );
\&        $d\->promise;
\&    }
.Ve
.PP
Scala Futures have a method called \f(CW\*(C`flatMap\*(C'\fR, which takes a 
function that given value will return another Future. Here is 
an example of how the \f(CW\*(C`getThumbnail\*(C'\fR method can be simplified
by using it.
.PP
.Vb 4
\&    def getThumbnail(url: String): Future[Webpage] =
\&        fetch(url) flatMap { page =>
\&             fetch(page.imageLinks(0))
\&        }
.Ve
.PP
But since our \f(CW\*(C`then\*(C'\fR method actually creates a new promise 
and wraps the callbacks to chain to that promise, we don't 
need this \f(CW\*(C`flatMap\*(C'\fR combinator and so this, Just Works.
.PP
.Vb 9
\&    sub get_thumbnail {
\&        my $url = shift;
\&        fetch( $url )\->then(
\&            sub {
\&                my $tx = shift;
\&                fetch( $tx\->res\->dom\->find(\*(Aqimg\*(Aq)\->[0]\->{\*(Aqsrc\*(Aq} );
\&            }        
\&        );
\&    }
.Ve
.PP
Scala Futures also have a \f(CW\*(C`rescue\*(C'\fR method which can serve as 
a kind of catch block that potentially will return another 
Future.
.PP
.Vb 4
\&    val f = fetch(url) rescue {
\&        case ConnectionFailed =>
\&          fetch(url)
\&    }
.Ve
.PP
Just as with \f(CW\*(C`flatMap\*(C'\fR, since our callbacks are wrapped and 
chained with a new Promise, we can do a rescue just by using 
the error callback The Promise returned by \f(CW\*(C`fetch\*(C'\fR will get 
chained and so this will depend on it.
.PP
.Vb 10
\&    sub get_thumbnail {
\&        my $url = shift;
\&        fetch( $url )\->then(
\&            sub {
\&                my $page = shift;
\&                fetch( $page\->image_links\->[0] );
\&            },
\&            sub {
\&                given ( $_[0] ) {
\&                    when (\*(Aqconnection_failed\*(Aq) {
\&                        return fetch( $url );
\&                    }
\&                    default {
\&                        return "failed";
\&                    }
\&                }
\&            }
\&        );
\&    }
.Ve
.PP
\&\s-1TODO ...\s0 figure out how retry can be generic ...
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Systems Programming at Twitter \- <http://monkey.org/~marius/talks/twittersystems/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Stevan Little <stevan.little@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020, 2019, 2017, 2014, 2012 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
