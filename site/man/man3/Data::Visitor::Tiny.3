.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Visitor::Tiny 3"
.TH Data::Visitor::Tiny 3 "2018-02-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Visitor::Tiny \- Recursively walk data structures
.SH "VERSION"
.IX Header "VERSION"
version 0.001
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Data::Visitor::Tiny;
\&
\&    my $hoh = {
\&        a => { b => 1, c => 2 },
\&        d => { e => 3, f => 4 },
\&    };
\&
\&    # print leaf (non\-ref) values on separate lines (1 2 3 4)
\&    visit( $hoh, sub { return if ref; say } );
\&
\&    # transform leaf value for a given key
\&    visit(
\&        $hoh,
\&        sub {
\&            my ( $key, $valueref ) = @_;
\&            $$valueref = "replaced" if $key eq \*(Aqe\*(Aq;
\&        }
\&    );
\&    say $hoh\->{d}{e}; # "replaced"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a simple framework for recursively iterating over a
data structure of hashrefs and/or arrayrefs.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "visit"
.IX Subsection "visit"
.Vb 1
\&    visit( $ref, sub { ... } );
.Ve
.PP
The \f(CW\*(C`visit\*(C'\fR function takes a hashref or arrayref and recursively visits
all values via pre-order traversal, calling the provided callback for each
value.  Only hashrefs and arrayrefs are traversed; objects, even if they
override hash or array dereference, are only ever treated as values.  Hash
keys are sorted lexicographically before iteration, ensuring consistent
visitation order in the face of Perl's hash order randomization.
.PP
Within the callback, the \f(CW$_\fR variable is set to the value of the node.
The callback also receives three arguments: \f(CW$key\fR, \f(CW$valueref\fR, and
\&\f(CW$context\fR.  The \f(CW$key\fR is the hash key or array index of the value.  The
\&\f(CW$valueref\fR is a scalar reference to the value; use it to modify the value
in place.  The \f(CW$context\fR is a hashref for tracking state throughout the
visiting process.  Context keys beginning with '_' are reserved for
\&\f(CW\*(C`Data::Visitor::Tiny\*(C'\fR; you may store whatever other keys/values you need.
The only key provided currently is \f(CW\*(C`_depth\*(C'\fR, which starts at 0 and
reflects how deep the visitor has recursed.
.PP
The \f(CW\*(C`visit\*(C'\fR function returns the context object.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Data::Visitor
.IP "\(bu" 4
Data::Visitor::Lite
.IP "\(bu" 4
Data::Rmap
.IP "\(bu" 4
Data::Traverse
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker
at <https://github.com/dagolden/Data\-Visitor\-Tiny/issues>.
You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software.  The code repository is available for
public review and contribution under the terms of the license.
.PP
<https://github.com/dagolden/Data\-Visitor\-Tiny>
.PP
.Vb 1
\&  git clone https://github.com/dagolden/Data\-Visitor\-Tiny.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
David Golden <dagolden@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2018 by David Golden.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
