.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Record::PTR 3"
.TH Infoblox::DNS::Record::PTR 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Record::PTR \- DNS PTR record object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In a forward-mapping zone, a \s-1PTR\s0 (pointer) record maps a domain name to another domain name. In a reverse-mapping zone, a \s-1PTR\s0 (pointer) record maps an address to a domain name. To define a specific address-to-name mapping, add a \s-1PTR\s0 record to a previously defined authoritative reverse-mapping zone.
.PP
To create a \s-1PTR\s0 record, you need to specify a domain name and host name.
.PP
Note that you must specify only one view for the attribute \*(L"views\*(R".
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& #Constructor for an IPv4 PTR object
\& my $bind_ptr = Infoblox::DNS::Record::PTR\->new (
\&         ipv4addr              => $ipv4addr,                                                         # Required
\&         ptrdname              => $fqdn,                                                             # Required
\&         comment               => $string,                                                           # Optional / Default is empty
\&         disable               => "true" | "false"                                                   # Optional / Default "false"
\&         extattrs              => { $string => $extattr, ... },                                      # Optional / Default is undefined
\&         extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, # Optional / Default is undefined
\&         last_discovered       => $string,                                                           # Optional / Default is empty
\&         name                  => $fqdn,                                                             # Optional
\&         ttl                   => $num | undef,                                                      # Optional / Default is undefined
\&         views                 => [$View1],                                                          # Optional / Default is "default" view
\&         creator               => "DYNAMIC" | "STATIC",                                              # Optional / Default is "STATIC"
\&         ddns_protected        => "true" | "false",                                                  # Optional / Default is "false"
\&         ddns_principal        => $string,                                                           # Optional / Default is undefined
\&         forbid_reclamation    => "true" | "false",                                                  # Optional / Default is "false"
\&     );
\&
\& #Constructor for an IPv6 PTR object
\& my $bind_ptr = Infoblox::DNS::Record::PTR\->new (
\&         ipv6addr              => $ipv6addr,                                                         # Required
\&         ptrdname              => $fqdn,                                                             # Required
\&         comment               => $string,                                                           # Optional / Default is empty
\&         disable               => "true" | "false"                                                   # Optional / Default "false"
\&         extattrs              => { $string => $extattr, ... },                                      # Optional / Default is undefined
\&         extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, # Optional / Default is undefined
\&         name                  => $fqdn,                                                             # Optional
\&         ttl                   => $nun | undef,                                                      # Optional / Default is undefined
\&         views                 => [$View1],                                                          # Optional / Default is "default" view
\&         creator               => "DYNAMIC" | "STATIC",                                              # Optional / Default is "STATIC"
\&         ddns_protected        => "true" | "false",                                                  # Optional / Default is "false"
\&         ddns_principal        => $string,                                                           # Optional / Default is undefined
\&         forbid_reclamation    => "true" | "false",                                                  # Optional / Default is "false"
\&     );
\&
\& #Constructor for an PTR object in Forward Mapping Zone
\& #Both ipv4addr and ipv6addr must be undefined
\& my $bind_ptr = Infoblox::DNS::Record::PTR\->new (
\&         name                  => $fqdn,                                                             # Required
\&         ptrdname              => $fqdn,                                                             # Required
\&         comment               => $string,                                                           # Optional / Default is empty
\&         disable               => "true" | "false"                                                   # Optional / Default "false"
\&         extattrs              => { $string => $extattr, ... },                                      # Optional / Default is undefined
\&         extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, # Optional / Default is undefined
\&         ttl                   => $nun | undef,                                                      # Optional / Default is undefined
\&         views                 => [$View1],                                                          # Optional / Default is "default" view
\&         creator               => "DYNAMIC" | "STATIC",                                              # Optional / Default is "STATIC"
\&         ddns_protected        => "true" | "false",                                                  # Optional / Default is "false"
\&         ddns_principal        => $string,                                                           # Optional / Default is undefined
\&         forbid_reclamation    => "true" | "false",                                                  # Optional / Default is "false"
\&     );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session that you can apply to a \s-1DNS PTR\s0 record object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Constructor for an IPv4 PTR object
\& my $bind_ptr = Infoblox::DNS::Record::PTR\->new (
\&     ipv4addr => "10.0.0.1",
\&     ptrdname => "bind_ptr.domain.com",
\&     comment => "this is a demo bind_ptr record",
\&     disable => "true",
\&     ttl => "33",
\&     views => [$view1]  );
\&  # Submit for addition
\&  my $response = $session\->add( $bind_ptr );
\&
\& #Constructor for an IPv6 PTR object
\& my $bind_ptr = Infoblox::DNS::Record::PTR\->new(
\&     ptrdname     => "ip6host.this.com",
\&     comment  => " this is a demo ipv6 bind_ptr record ",
\&     disable => "true",
\&     ttl => "333",
\&     ipv6addr => "1234:5678:9abc:1000::1");
\&  # Submit for addition
\&  my $response = $session\->add( $bind_ptr );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve existing objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to get a specific DNS PTR object:
\&
\& name | ipv4addr | ipv6addr | ptrdname \- Optional. name/ptrdname is in FQDN format. ipv4addr is an IPv4 address with a 32\-bit number in dotted decimal notation. ipv6addr is the IPv6 (128 bits) address of the DNS PTR record. ptrdname is the domain name of the DNS PTR record.
\& view                                  \- Optional. The DNS view in which the PTR record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\& zone                                  \- Optional. A zone name in FQDN format.
\& creator                               \- Optional. Record creator.
\& ddns_principal                        \- Optional. GSS\-TSIG principal that owns the record.
\& reclaimable                           \- Optional. The flag that indicates whether the record is reclaimable or not.
\& extattrs                              \- Optional. A hash reference containing extensible attributes.
\& extensible_attributes                 \- Optional. A hash reference containing extensible attributes.
\& discovered_duid                       \- Optional. Discovered DHCPv6 UID.
\& discovered_name                       \- Optional. Discovered name.
\& discoverer                            \- Optional. Discoverer name.
\& first_discovered                      \- Optional. Time of the first discovery.
\& last_discovered                       \- Optional. Time of the last discovery.
\& netbios                               \- Optional. Discovered NetBIOS name.
\& network_component_description         \- Optional. Discovered network component description.
\& network_component_ip                  \- Optional. Discovered network component IP address.
\& network_component_name                \- Optional. Discovered network component name.
\& network_component_port_description    \- Optional. Discovered network component port description.
\& network_component_port_name           \- Optional. Discovered network component port name.
\& network_component_port_number         \- Optional. Discovered network component port number.
\& network_component_type                \- Optional. Discovered network component type.
\& os                                    \- Optional. Discovered OS.
\& port_duplex                           \- Optional. Discovered port duplex settings.
\& port_link_status                      \- Optional. Discovered port link status.
\& port_speed                            \- Optional. Discovered port speed settings.
\& port_status                           \- Optional. Discovered port status settings.
\& port_vlan_description                 \- Optional. Discovered port VLAN description.
\& port_vlan_name                        \- Optional. Discovered port VLAN name.
\& port_vlan_number                      \- Optional. Discovered port VLAN number.
\& v_cluster                             \- Optional. Discovered VMware cluster name.
\& v_datacenter                          \- Optional. Discovered VMware datacenter name.
\& v_host                                \- Optional. Discovered VMware server name.
\& v_name                                \- Optional. Discovered VMware host or virtual machine name.
\& v_netadapter                          \- Optional. Discovered VMware physical network adapter name.
\& v_switch                              \- Optional. Discovered VMware virtual switch name.
\& v_type                                \- Optional. Discovered VMware entity type (possible values: "VirtualMachine", "HostSystem", "VirtualCenter").
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #To get an IPv4 PTR object by name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::PTR",
\&     name   => "1.0.0.10.in\-addr.arpa",
\&     view   => "default" );
\&
\& #To get an IPv4 PTR object by ipv4addr
\& my @retrieved_objs = $session\->get(
\&     object   => "Infoblox::DNS::Record::PTR",
\&     ipv4addr => "10.0.0.1",
\&     view     => "default" );
\&
\& #To get an IPv4 PTR object by ptrdname
\& my @retrieved_objs = $session\->get(
\&     object   => "Infoblox::DNS::Record::PTR",
\&     ptrdname => "bind_ptr.domain.com",
\&     view     => "default" );
\&
\& #To get an IPv6 PTR object by name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::PTR",
\&     name   => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa",
\&     view   => "default" );
\&
\& #To get an IPv6 PTR object by ipv6addr
\& my @retrieved_objs = $session\->get(
\&     object   => "Infoblox::DNS::Record::PTR",
\&     ipv6addr => "1234:5678:9abc:1000::1",
\&     view     => "default" );
\&
\& #To get an IPv6 PTR object by ptrdname
\& my @retrieved_objs = $session\->get(
\&     object   => "Infoblox::DNS::Record::PTR",
\&     ptrdname => "ip6host.this.com",
\&     view     => "default" );
\&
\& # get all PTR object in zone "10.10.10.in\-addr.arpa" of default view
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::PTR",
\&     zone   => "10.10.10.in\-addr.arpa",
\&     view   => "default"
\&     );
\&
\& # get all PTR objects with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::PTR",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
\&
\& # get all PTR objects with a given v_type:
\& my @retrieved_objs = $session\->get(
\&   object    => "Infoblox::DNS::Record::PTR",
\&   v_type    => "VirtualMachine");
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify objects in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use method to modify the comment for IPv4 or IPv6 object.
\& $bind_ptr\->comment("this is a modified comment for bind PTR");
\& # Submit modification
\& my $response = $session\->modify( $bind_ptr );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this function to submit to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
\&\fB#Remove an object with a unique name\fR
.Sp
.Vb 9
\& # Get the object with the same name for IPv4 object
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::PTR",
\&     name   => "1.0.0.10.in\-addr.arpa",
\&     view   => "default" );
\& # find the desired object from retrieved list.
\& my $desired_ptr = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_ptr );
\&
\& # Get the object with the same name for an IPv6 object
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::PTR",
\&     name   => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa",
\&     view   => "default" );
\& # find the desired object from retrieved list.
\& my $desired_ptr = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_ptr );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for existing \s-1DNS PTR\s0 record object in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to search for a DNS PTR record object:
\&
\& name | ipv4addr | ipv6addr | ptrdname \- Optional. The IPv4 or IPv6 address of the PTR record, or the domain name in FQDN (Fully Qualified Domain Name) format (regular expression).
\& view                                  \- Optional. The DNS view in which the PTR record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\& comment                               \- Optional. A comment in string format (regular expression).
\& creator                               \- Optional. Record creator.
\& ddns_principal                        \- Optional. GSS\-TSIG principal that owns the record.
\& reclaimable                           \- Optional. The flag that indicates whether the record is reclaimable or not.
\& extattrs                              \- Optional. A hash reference containing extensible attributes.
\& extensible_attributes                 \- Optional. A hash reference containing extensible attributes.
\& discovered_duid                       \- Optional. Discovered DHCPv6 UID (exact search only).
\& discovered_name                       \- Optional. Discovered name(regex).
\& discoverer                            \- Optional. Discoverer name(regex).
\& first_discovered                      \- Optional. Time of the first discovery (in the ISO format, exact search only).
\& last_discovered                       \- Optional. Time of the last discovery (in the ISO format, exact search only).
\& netbios                               \- Optional. Discovered NetBIOS name(regex).
\& network_component_description         \- Optional. Discovered network component description(regex).
\& network_component_ip                  \- Optional. Discovered network component IP address(regex).
\& network_component_name                \- Optional. Discovered network component name(regex).
\& network_component_port_description    \- Optional. Discovered network component port description(regex).
\& network_component_port_name           \- Optional. Discovered network component port name(regex).
\& network_component_port_number         \- Optional. Discovered network component port number (exact search only).
\& network_component_type                \- Optional. Discovered network component type(regex).
\& os                                    \- Optional. Discovered OS (regex).
\& port_duplex                           \- Optional. Discovered port duplex settings (exact search only).
\& port_link_status                      \- Optional. Discovered port link status (exact search only).
\& port_speed                            \- Optional. Discovered port speed settings (exact search only).
\& port_status                           \- Optional. Discovered port status settings (exact search only).
\& port_vlan_description                 \- Optional. Discovered port VLAN description(regex).
\& port_vlan_name                        \- Optional. Discovered port VLAN name(regex).
\& port_vlan_number                      \- Optional. Discovered port VLAN number(exact search only).
\& v_cluster                             \- Optional. Discovered VMware cluster name (regular expression).
\& v_datacenter                          \- Optional. Discovered VMware datacenter name (regular expression).
\& v_host                                \- Optional. Discovered VMware server name (regular expression).
\& v_name                                \- Optional. Discovered VMware host or virtual machine name (regular expression).
\& v_netadapter                          \- Optional. Discovered VMware physical network adapter name (regular expression).
\& v_switch                              \- Optional. Discovered VMware virtual switch name (regular expression).
\& v_type                                \- Optional. Discovered VMware entity type (possible values: "VirtualMachine", "HostSystem", "VirtualCenter").
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # search for all DNS IPv4 PTR objects in the default DNS view that match 10.0.0.0/8 and that contain "bind" in the comment field
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DNS::Record::PTR",
\&     name    => "10.in\-addr.arpa",
\&     comment => "bind*",
\&     view    => "default" );
\&
\& my @retrieved_objs = $session\->search(
\&     object   => "Infoblox::DNS::Record::PTR",
\&     ipv4addr => \*(Aq10\e..*\e..*\e..*\*(Aq,
\&     comment  => "bind*",
\&     view     => "default" );
\&
\& my @retrieved_objs = $session\->search(
\&     object   => "Infoblox::DNS::Record::PTR",
\&     ptrdname => "bind_ptr.domain.com",
\&     comment  => "bind*",
\&     view     => "default" );
\&
\& # search for all DNS IPv6 PTR objects under 1234:5678:9abc::/48 which have bind in comment field in default view
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DNS::Record::PTR",
\&     name    => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa",
\&     comment => "bind*",
\&     view    => "default" );
\&
\& my @retrieved_objs = $session\->search(
\&     object   => "Infoblox::DNS::Record::PTR",
\&     ipv6addr => "1234:5678:9abc:1000::1",
\&     comment  => "bind*",
\&     view     => "default" );
\&
\& my @retrieved_objs = $session\->search(
\&     object   => "Infoblox::DNS::Record::PTR",
\&     ptrdname => "ip6host.this.com",
\&     comment  => "bind*",
\&     view     => "default" );
\&
\& # search for all PTR objects in the "10.10.10.in\-addr.arpa" zone of the default view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::PTR",
\&     zone   => "10.10.10.in\-addr.arpa",
\&     view   => "default"
\&     );
\&
\& # search all PTR records with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DNS::Record::MX",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
\&
\& # search all PTR records by v_datacenter:
\& my @retrieved_objs = $session\->search(
\&    object       => "Infoblox::DNS::Record::PTR",
\&    v_datacenter => "test.*");
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute value of a \s-1PTR\s0 record.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $bindptr\->comment();
\& #Modify comment
\& $bindptr\->comment("Modifying the DNS PTR comment");
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to retrieve cloud \s-1API\s0 related information for the Infoblox::DNS::Record::PTR object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get cloud_info
\& my $cloud_info = $object\->cloud_info();
.Ve
.RE
.RS 4
.RE
.SS "creator( )"
.IX Subsection "creator( )"
.RS 4
Use this method to set or retrieve the record creator.
.Sp
Note that changing creator from or to '\s-1SYSTEM\s0' value is not allowed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParamter\fR" 4
.IX Item "Paramter"
The valid values are '\s-1STATIC\s0' and '\s-1DYNAMIC\s0'. The default value is '\s-1STATIC\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get creator value
\& my $creator = $object\->creator();
\&
\& #Modify creator value
\& $object\->creator("DYNAMIC");
.Ve
.RE
.RS 4
.RE
.SS "creation_time( )"
.IX Subsection "creation_time( )"
.RS 4
Use this method to retrieve the creation time for the record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is a number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get creation_time value
\& my $creation_time = $object\->creation_time();
.Ve
.RE
.RS 4
.RE
.SS "ddns_principal( )"
.IX Subsection "ddns_principal( )"
.RS 4
Use this method to set or retrive the GSS-TSIG principal that owns this record.
.Sp
Note that you cannot set ddns_principal for '\s-1STATIC\s0' and '\s-1SYSTEM\s0' records.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParamter\fR" 4
.IX Item "Paramter"
The GSS-TSIG principal \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the hostname followed by the domain name (example: abc.com). A hostname can have a maximum of 256 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ddns_principal value
\& my $ddns_principal = $object\->ddns_principal();
\&
\& #Modify ddns_principal value
\& $object\->ddns_principal(\*(Aqfoo.com\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_protected( )"
.IX Subsection "ddns_protected( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether \s-1DDNS\s0 updates for this record are allowed or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to protect record from \s-1DDNS\s0 updates and 'false' to allow \s-1DDNS\s0 updates for the specified record.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ddns_protected value
\& my $ddns_protected = $object\->ddns_protected();
\&
\& #Modify ddns_protected value
\& $object\->ddns_protected(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DNS\s0 record.
.Sp
Include the specific parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false, therefore the \s-1DNS\s0 record is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $bindptr\->disable();
\& #Modify disable
\& $bindptr\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "discovered_data( )"
.IX Subsection "discovered_data( )"
.RS 4
Use this method to retrieve the discovered data of a \s-1PTR\s0 Record object. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::Discovery::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_data value
\& my $discovered_data = $object\->discovered_data();
.Ve
.RE
.RS 4
.RE
.SS "discovered_duid( )"
.IX Subsection "discovered_duid( )"
.RS 4
Use this method to retrieve the discovered DHCPv6 \s-1UID\s0 (\s-1DUID\s0) of a \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discovered name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_duid
\& my $discovered_duid = $bindptr\->discovered_duid();
.Ve
.RE
.RS 4
.RE
.SS "discovered_name( )"
.IX Subsection "discovered_name( )"
.RS 4
Use this method to retrieve the discovered name of a \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discovered name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_name
\& my $discovered_name = $bindptr\->discovered_name();
.Ve
.RE
.RS 4
.RE
.SS "discoverer( )"
.IX Subsection "discoverer( )"
.RS 4
Use this method to retrieve the discoverer of a \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discoverer value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discoverer
\& my $discoverer = $bindptr\->discoverer();
.Ve
.RE
.RS 4
.RE
.SS "dns_name( )"
.IX Subsection "dns_name( )"
.RS 4
Use this method to retrieve the \s-1FQDN,\s0 in punycode format, of the \s-1PTR\s0 record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $bindptr\->dns_name();
.Ve
.RE
.RS 4
.RE
.SS "dns_ptrdname( )"
.IX Subsection "dns_ptrdname( )"
.RS 4
Use this method to retrieve the \s-1PTR\s0 domain name in punycode format. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $bindptr\->ptrdname();
.Ve
.RE
.RS 4
.RE
.SS "first_discovered( )"
.IX Subsection "first_discovered( )"
.RS 4
Use this method to retrieve the date and time that the \s-1PTR\s0 record object was first discovered.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the date and time that the \s-1PTR\s0 record object was first discovered.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get first_discovered
\& my $first_discovered = $bindptr\->first_discovered();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $bindptr\->extattrs();
\& #Modify extattrs
\& $bindptr\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1PTR\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $bindptr\->extensible_attributes();
\& #Modify extensible attributes
\& $bindptr\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "forbid_reclamation( )"
.IX Subsection "forbid_reclamation( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the reclamation is allowed for the record or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to forbid reclamation for the record and 'false' to allow it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get forbid_reclamation
\& my $forbid_reclamation = $object\->forbid_reclamation();
\& #Modify forbid_reclamation
\& $object\->forbid_reclamation(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ipv4addr( )"
.IX Subsection "ipv4addr( )"
.RS 4
Use this method to set or retrieve the IPv4 address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv4addr
\& my $ipv4addr = $bindptr\->ipv4addr();
\& #Modify ipv4addr
\& $bind_ptr\->ipv4addr("10.0.0.2");
.Ve
.RE
.RS 4
.RE
.SS "ipv6addr( )"
.IX Subsection "ipv6addr( )"
.RS 4
Use this method to set or retrieve the IPv6 address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The IPv6 (128 bits) of the \s-1DNS PTR\s0 record (example: aaaa:bbbb:cccc:dddd:eeee:ffff:0000:1111).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6addr
\& my $ipv6addr = $bindptr\->ipv6addr();
\& #Modify ipv6addr
\& $bind_ptr\->ipv6addr("1234:5678:9abc:1000::2");
.Ve
.RE
.RS 4
.RE
.SS "last_discovered( )"
.IX Subsection "last_discovered( )"
.RS 4
Use this method to retrieve the time this object was last seen by a discovery job.
.Sp
The default value for this field is empty.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_discovered
\& my $last_discovered = $bind_ptr\->last_discovered();
.Ve
.RE
.RS 4
.RE
.SS "last_queried( )"
.IX Subsection "last_queried( )"
.RS 4
Use this method to retrieve the time when the associated record was last queried. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. The number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_queried
\& my $last_queried = $bind_ptr\->last_queried();
.Ve
.RE
.RS 4
.RE
.SS "mac_address( )"
.IX Subsection "mac_address( )"
.RS 4
Use this method to retrieve the discovered \s-1MAC\s0 address of this object.
.Sp
The default value for this field is empty.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get mac_address
\& my $mac_address = $bind_ptr\->mac_address();
.Ve
.RE
.RS 4
.RE
.SS "ms_ad_user_data( )"
.IX Subsection "ms_ad_user_data( )"
.RS 4
Use this method to retrieve Microsoft Active Directory users related information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::MSServer::AdUser::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_ad_user_data
\& my $ms_ad_user_data = $bind_ptr\->ms_ad_user_data();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the \s-1FQDN\s0 of the \s-1PTR\s0 record.
.Sp
Include the specified parameter to set the attribute value if both ipv4addr and ipv6addr are undefined: \s-1PTR\s0 in Forward Mapping Zone. Otherwise use ipv4addr or ipv6addr methods.
.Sp
Omit the parameter to retrieve the attribute value.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
\&\s-1FQDN\s0 of the \s-1PTR\s0 record
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $bindptr\->name();
\& #Modify name
\& $bindptr\->name(\*(Aqbindptr.domain.com\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "netbios( )"
.IX Subsection "netbios( )"
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.Sp
Use this method to retrieve the name in the NetBIOS reply that responded to a NetBIOS query.
.RS 4
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get netbios
\& my $netbios = $bind_ptr\->netbios();
.Ve
.RE
.RS 4
.RE
.SS "network_component_description( )"
.IX Subsection "network_component_description( )"
.RS 4
Use this method to retrieve the description of the network device that is connected to the \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the description of the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_description
\& my $network_component_description = $bindptr\->network_component_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_ip( )"
.IX Subsection "network_component_ip( )"
.RS 4
Use this method to retrieve the \s-1IP\s0 address of the network device that is connected to the \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device \s-1IP\s0 address.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_ip
\& my $network_component_ip = $bindptr\->network_component_ip();
.Ve
.RE
.RS 4
.RE
.SS "network_component_name( )"
.IX Subsection "network_component_name( )"
.RS 4
Use this method to retrieve the name of the network device that is connected to the \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_name
\& my $network_component_name = $bindptr\->network_component_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_description( )"
.IX Subsection "network_component_port_description( )"
.RS 4
Use this method to retrieve the description of the network device port that is connected to the \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the description of the network device port.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_description
\& my $network_component_port_description = $bindptr\->network_component_port_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_name( )"
.IX Subsection "network_component_port_name( )"
.RS 4
Use this method to retrieve the name of the network device port that is connected to the \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_name
\& my $network_component_port_name = $bindptr\->network_component_port_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_number( )"
.IX Subsection "network_component_port_number( )"
.RS 4
Use this method to retrieve the number of the network device port that is connected to the \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port number value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_number
\& my $network_component_port_number = $bindptr\->network_component_port_number();
.Ve
.RE
.RS 4
.RE
.SS "network_component_type( )"
.IX Subsection "network_component_type( )"
.RS 4
Use this method to retrieve the type of the network device that is connected to the \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device type.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_type
\& my $network_component_type = $bindptr\->network_component_type();
.Ve
.RE
.RS 4
.RE
.SS "os( )"
.IX Subsection "os( )"
.RS 4
Use this method to retrieve the operating system associated with this \s-1PTR\s0 record.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get os
\& my $os = $bind_ptr\->os();
\& #Modify os
\& $bind_ptr\->os("os\-name");
.Ve
.RE
.RS 4
.RE
.SS "port_duplex( )"
.IX Subsection "port_duplex( )"
.RS 4
Use this method to retrieve the duplex setting of the network device port that is connected to the \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port duplex setting. Returned values, if any, are one of the following:
.Sp
.Vb 2
\&  Full
\&  Half
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_duplex
\& my $port_duplex = $bindptr\->port_duplex();
.Ve
.RE
.RS 4
.RE
.SS "port_link_status( )"
.IX Subsection "port_link_status( )"
.RS 4
Use this method to retrieve the link status of the network device port that is connected to the \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port link status. Returned values, if any, are one of the following:
.Sp
.Vb 3
\&  Connected
\&  Not Connected
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_link_status
\& my $port_link_status = $bindptr\->port_link_status();
.Ve
.RE
.RS 4
.RE
.SS "port_speed( )"
.IX Subsection "port_speed( )"
.RS 4
Use this method to retrieve the speed of the network device port that is connected to the \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port speed value. Returned values, if any, are one of the following:
.Sp
.Vb 6
\&  10M
\&  100M
\&  1G
\&  10G
\&  100G
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_speed
\& my $port_speed = $bindptr\->port_speed();
.Ve
.RE
.RS 4
.RE
.SS "port_status( )"
.IX Subsection "port_status( )"
.RS 4
Use this method to retrieve the status of the network device port that is connected to the \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port status. Returned values, if any, are one of the following:
.Sp
.Vb 3
\&  Up
\&  Down
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_status
\& my $port_status = $bindptr\->port_status();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_description( )"
.IX Subsection "port_vlan_description( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 description of the network device port that is connected to the \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1VLAN\s0 description of the network device port that is connected to the \s-1PTR\s0 record object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_description
\& my $port_vlan_description = $bindptr\->port_vlan_description();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_name( )"
.IX Subsection "port_vlan_name( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 name of the network device port that is connected to the \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1VLAN\s0 name of the network device port.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_name
\& my $port_vlan_name = $bindptr\->port_vlan_name();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_number( )"
.IX Subsection "port_vlan_number( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 number of the network device port that is connected to the \s-1PTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the port \s-1VLAN\s0 number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_number
\& my $port_vlan_number = $bindptr\->port_vlan_number();
.Ve
.RE
.RS 4
.RE
.SS "ptrdname( )"
.IX Subsection "ptrdname( )"
.RS 4
Use this method to set or retrieve the \s-1PTR\s0 domain name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the domain name for the \s-1DNS PTR\s0 record.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ptrdname
\& my $ptrdname = $bindptr\->ptrdname();
\& #Modify ptrdname
\& $bindptr\->ptrdname("new domain name");
.Ve
.RE
.RS 4
.RE
.SS "reclaimable( )"
.IX Subsection "reclaimable( )"
.RS 4
Use this method to retrieve the flag that indicates whether the record is reclaimable or not.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get reclaimable
\& my $reclaimable = $object\->reclaimable();
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to configure or retrieve the Time to Live (\s-1TTL\s0) value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is undefined; therefore the record inherits the \s-1TTL\s0 value from the zone level.
.Sp
With a specified \s-1TTL\s0 value, the method overrides the zone values with the specified \s-1TTL\s0 value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration ,in seconds, that the record is cached. Zero indicates that the record should not be cached.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get ttl
\& my $ttl = $bindptr\->ttl();
\& #Modify ttl
\& $bindptr\->ttl(1800);
\& #Un\-override ttl
\& $bindptr\->ttl(undef);
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to specify or retrieve the view in which the \s-1PTR\s0 record is located.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the default view therefore the \s-1PTR\s0 record is referenced under the default view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference of defined Infoblox::DNS::View objects.
.Sp
Note that the array size must be 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get views
\& my $ref_views = $bindptr\->views();
\& #Modify views, list of Infoblox::DNS::View objects
\& $bindptr\->views([$view1]);
.Ve
.RE
.RS 4
.RE
.SS "v_cluster( )"
.IX Subsection "v_cluster( )"
.RS 4
Use this method to retrieve the name of the VMware cluster associated with the \s-1PTR\s0 Record object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware cluster name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_cluster
\& my $v_cluster = $bindptr\->v_cluster();
.Ve
.RE
.RS 4
.RE
.SS "v_datacenter( )"
.IX Subsection "v_datacenter( )"
.RS 4
Use this method to retrieve the name of the VMware datacenter associated with the \s-1PTR\s0 Record object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware datacenter name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_datacenter
\& my $v_datacenter = $bindptr\->v_datacenter();
.Ve
.RE
.RS 4
.RE
.SS "v_host( )"
.IX Subsection "v_host( )"
.RS 4
Use this method to retrieve the name of the VMware host associated with the \s-1PTR\s0 Record object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware host name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_host
\& my $v_host = $bindptr\->v_host();
.Ve
.RE
.RS 4
.RE
.SS "v_name( )"
.IX Subsection "v_name( )"
.RS 4
Use this method to retrieve the name of the VMware entity associated with the \s-1PTR\s0 Record object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware entity name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_name
\& my $v_name = $bindptr\->v_name();
.Ve
.RE
.RS 4
.RE
.SS "v_netadapter( )"
.IX Subsection "v_netadapter( )"
.RS 4
Use this method to retrieve the name of the physical network adapter through which the VMware entity is connected to the appliance. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the network adapter name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_netadapter
\& my $v_netadapter = $bindptr\->v_netadapter();
.Ve
.RE
.RS 4
.RE
.SS "v_switch( )"
.IX Subsection "v_switch( )"
.RS 4
Use this method to retrieve the name of the virtual switch through which the VMware entity is connected to the appliance. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the virtual switch name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_switch
\& my $v_switch = $bindptr\->v_switch();
.Ve
.RE
.RS 4
.RE
.SS "v_type( )"
.IX Subsection "v_type( )"
.RS 4
Use this method to retrieve the type of VMware entity associated with the \s-1PTR\s0 Record object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware entity name. The default value is an empty string. The returend value, if any, can be one of the following:
.Sp
.Vb 3
\& VirtualMachine
\& HostSystem
\& VirtualCenter
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_type
\& my $v_type = $bindptr\->v_type();
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of a \s-1DNS PTR\s0 record. This method is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get zone
\& my $zone = $bindptr\->zone();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to an object, such as create, search, modify, and remove an object. This sample code also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS\s0 IPv4 \s-1PTR\s0 record insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the zone prior to a PTR record insertion
\& my $zone = Infoblox::DNS::Zone\->new(name => "10.0.0.0/8");
\& unless ($zone) {
\&    die("Construct zone failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& #Verify if the zone exists
\& my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "10.in\-addr.arpa");
\& unless ($object) {
\&    print "Zone does not exist on server, safe to add the zone\en";
\&    $session\->add($zone)
\&       or die("Add zone failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Zone added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS\s0 IPv4 \s-1PTR\s0 record\fR
.PP
.Vb 10
\& my $bind_ptr = Infoblox::DNS::Record::PTR\->new(
\&    ptrdname     => "bind_ptr.domain.com",
\&    comment  => " this is a demo bind_ptr record ",
\&    ipv4addr => "10.0.0.1"
\&  );
\&  unless ($bind_ptr) {
\&     die("Construct DNS record PTR failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\&  }
\& print "DNS PTR object created successfully\en";
\&
\& #Add the DNS PTR record object to the Infoblox appliance through a session
\& $session\->add($bind_ptr)
\&     or die("Add record PTR failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS PTR object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS\s0 IPv4 \s-1PTR\s0 record\fR
.PP
.Vb 11
\& #Search for all PTR records that match "10.in\-addr.arpa"
\& my @retrieved_objs = $session\->search(
\&     "object" => "Infoblox::DNS::Record::PTR",
\&     "name" => \*(Aq10\e.in\-addr.arpa\*(Aq,
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search record PTR failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS PTR object found at least 1 matching entry\en";
\&
\& #Search all PTR records that have "bind" in the comment
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::PTR",
\&     name   => \*(Aq10\e.*\e.in\-addr.arpa\*(Aq,
\&     comment => "bind*"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search record PTR failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS PTR object using regexp found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS\s0 IPv4 \s-1PTR\s0 record\fR
.PP
.Vb 10
\& #Get a PTR record through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::PTR",
\&     name   => "1.0.0.10.in\-addr.arpa",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get record PTR failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS PTR object found at least 1 matching entry\en";
\&#Modify one of the attributes of the specified PTR record
\& $object\->comment ("modified comment");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify record PTR failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS PTR object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DNS\s0 IPv4 \s-1PTR\s0 record\fR
.PP
.Vb 5
\& #Get a PTR record through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::PTR",
\&     name   => "1.0.0.10.in\-addr.arpa",
\& );
\&
\&  my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get record PTR failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS PTR object found at least 1 matching entry\en";
\&
\& #submit the object for removal
\& $session\->remove($object)
\&     or die("Remove record PTR failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS PTR object removed successfully \en";
.Ve
.PP
\&\fB#Preparation prior to a \s-1DNS\s0 IPv6 \s-1PTR\s0 record insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the zone prior to a PTR record insertion
\& my $zone = Infoblox::DNS::Zone\->new(name => "1234:5678:9abc::/48");
\& unless ($zone) {
\&    die("Construct zone failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& #Verify if the zone exists
\& my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa");
\& unless ($object) {
\&    print "Zone does not exist on server, safe to add the zone\en";
\&    $session\->add($zone)
\&       or die("Add zone failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Zone added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS\s0 IPv6 \s-1PTR\s0 record\fR
.PP
.Vb 10
\& my $bind_ptr = Infoblox::DNS::Record::PTR\->new(
\&    ptrdname     => "ip6host.this.com",
\&    comment  => " this is a demo bind_ptr record ",
\&    ipv6addr => "1234:5678:9abc:1000::1"
\&  );
\&  unless ($bind_ptr) {
\&     die("Construct DNS record PTR failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\&  }
\& print "DNS PTR object created successfully\en";
\& #Add the DNS PTR record object to the Infoblox  appliance through a session
\&        $session\->add($bind_ptr)
\&            or die("Add record PTR failed: ",
\&                   $session\->status_code() . ":" . $session\->status_detail());
\&        print "DNS PTR object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS\s0 IPv6 \s-1PTR\s0 record\fR
.PP
.Vb 11
\& #Search for a PTR record in the zone
\& my @retrieved_objs = $session\->search(
\&     "object" => "Infoblox::DNS::Record::PTR",
\&     "name" => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search record PTR failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS PTR object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS\s0 IPv6 \s-1PTR\s0 record\fR
.PP
.Vb 11
\& #Get PTR record through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::PTR",
\&     name   => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get record PTR failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS PTR object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified PTR record
\& $object\->comment ("modified comment");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify record PTR failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS PTR object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DNS\s0 IPv6 \s-1PTR\s0 record\fR
.PP
.Vb 11
\& #Get PTR record through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::PTR",
\&     name   => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get record PTR failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS PTR object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove record PTR failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS PTR object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::View,
Infoblox::DNS::Zone,
Infoblox::Session,
Infoblox::Session\->\fBget()\fR,
Infoblox::Session\->\fBsearch()\fR,
Infoblox::Session\->\fBadd()\fR,
Infoblox::Session\->\fBremove()\fR,
Infoblox::Session\->\fBmodify()\fR,
Infoblox::Grid::MSServer::AdUser::Data,
Infoblox::Grid::Discovery::Data
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
