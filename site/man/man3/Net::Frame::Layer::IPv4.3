.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Frame::Layer::IPv4 3"
.TH Net::Frame::Layer::IPv4 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Frame::Layer::IPv4 \- Internet Protocol v4 layer object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use Net::Frame::Layer::IPv4 qw(:consts);
\&
\&   # Build a layer
\&   my $layer = Net::Frame::Layer::IPv4\->new(
\&      version  => 4,
\&      tos      => 0,
\&      id       => getRandom16bitsInt(),
\&      length   => NF_IPv4_HDR_LEN,
\&      hlen     => 5,
\&      flags    => 0,
\&      offset   => 0,
\&      ttl      => 128,
\&      protocol => NF_IPv4_PROTOCOL_TCP,
\&      checksum => 0,
\&      src      => \*(Aq127.0.0.1\*(Aq,
\&      dst      => \*(Aq127.0.0.1\*(Aq,
\&      options  => \*(Aq\*(Aq,
\&      noFixLen => 0,
\&   );
\&   $layer\->pack;
\&
\&   print \*(AqRAW: \*(Aq.$layer\->dump."\en";
\&
\&   # Read a raw layer
\&   my $layer = Net::Frame::Layer::IPv4\->new(raw => $raw);
\&
\&   print $layer\->print."\en";
\&   print \*(AqPAYLOAD: \*(Aq.unpack(\*(AqH*\*(Aq, $layer\->payload)."\en"
\&      if $layer\->payload;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This modules implements the encoding and decoding of the IPv4 layer.
.PP
\&\s-1RFC:\s0 ftp://ftp.rfc\-editor.org/in\-notes/rfc791.txt
.PP
See also \fBNet::Frame::Layer\fR for other attributes and methods.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "\fBid\fR" 4
.IX Item "id"
\&\s-1IP ID\s0 of the datagram.
.IP "\fBttl\fR" 4
.IX Item "ttl"
Time to live.
.IP "\fBsrc\fR" 4
.IX Item "src"
.PD 0
.IP "\fBdst\fR" 4
.IX Item "dst"
.PD
Source and destination \s-1IP\s0 addresses.
.IP "\fBprotocol\fR" 4
.IX Item "protocol"
Of which type the layer 4 is.
.IP "\fBchecksum\fR" 4
.IX Item "checksum"
\&\s-1IP\s0 checksum.
.IP "\fBflags\fR" 4
.IX Item "flags"
\&\s-1IP\s0 Flags.
.IP "\fBoffset\fR" 4
.IX Item "offset"
\&\s-1IP\s0 fragment offset.
.IP "\fBversion\fR" 4
.IX Item "version"
\&\s-1IP\s0 version, here it is 4.
.IP "\fBtos\fR" 4
.IX Item "tos"
Type of service flag.
.IP "\fBlength\fR" 4
.IX Item "length"
Total length in bytes of the packet, including \s-1IP\s0 headers (that is, layer 3 + layer 4 + layer 7).
.IP "\fBhlen\fR" 4
.IX Item "hlen"
Header length in number of words, including \s-1IP\s0 options.
.IP "\fBoptions\fR" 4
.IX Item "options"
\&\s-1IP\s0 options, as a hexadecimal string.
.IP "\fBnoFixLen\fR" 4
.IX Item "noFixLen"
Since the byte ordering of \fBlength\fR attribute varies from system to system, a subroutine inside this module detects which byte order to use. Sometimes, like when you build \fBNet::Frame::Layer::8021Q\fR layers, you may have the need to avoid this. So set it to 1 in order to avoid fixing. Default is 0 (that is to fix).
.PP
The following are inherited attributes. See \fBNet::Frame::Layer\fR for more information.
.IP "\fBraw\fR" 4
.IX Item "raw"
.PD 0
.IP "\fBpayload\fR" 4
.IX Item "payload"
.IP "\fBnextLayer\fR" 4
.IX Item "nextLayer"
.PD
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
.PD 0
.IP "\fBnew\fR (hash)" 4
.IX Item "new (hash)"
.PD
Object constructor. You can pass attributes that will overwrite default ones. See \fB\s-1SYNOPSIS\s0\fR for default values.
.IP "\fBgetHeaderLength\fR" 4
.IX Item "getHeaderLength"
Returns the header length in bytes, not including \s-1IP\s0 options.
.IP "\fBgetOptionsLength\fR" 4
.IX Item "getOptionsLength"
Returns the length in bytes of \s-1IP\s0 options. 0 if none.
.IP "\fBcomputeLengths\fR ({ payloadLength => \s-1VALUE\s0 })" 4
.IX Item "computeLengths ({ payloadLength => VALUE })"
In order to compute lengths attributes within IPv4 header, you need to pass via a hashref the number of bytes contained in IPv4 payload (that is, the sum of all layers after the IPv4 one).
.IP "\fBcomputeChecksums\fR" 4
.IX Item "computeChecksums"
Computes the IPv4 checksum.
.PP
The following are inherited methods. Some of them may be overridden in this layer, and some others may not be meaningful in this layer. See \fBNet::Frame::Layer\fR for more information.
.IP "\fBlayer\fR" 4
.IX Item "layer"
.PD 0
.IP "\fBcomputeLengths\fR" 4
.IX Item "computeLengths"
.IP "\fBcomputeChecksums\fR" 4
.IX Item "computeChecksums"
.IP "\fBpack\fR" 4
.IX Item "pack"
.IP "\fBunpack\fR" 4
.IX Item "unpack"
.IP "\fBencapsulate\fR" 4
.IX Item "encapsulate"
.IP "\fBgetLength\fR" 4
.IX Item "getLength"
.IP "\fBgetPayloadLength\fR" 4
.IX Item "getPayloadLength"
.IP "\fBprint\fR" 4
.IX Item "print"
.IP "\fBdump\fR" 4
.IX Item "dump"
.PD
.SH "CONSTANTS"
.IX Header "CONSTANTS"
Load them: use Net::Frame::Layer::IPv4 qw(:consts);
.IP "\fBNF_IPv4_PROTOCOL_ICMPv4\fR" 4
.IX Item "NF_IPv4_PROTOCOL_ICMPv4"
.PD 0
.IP "\fBNF_IPv4_PROTOCOL_IGMP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_IGMP"
.IP "\fBNF_IPv4_PROTOCOL_IPIP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_IPIP"
.IP "\fBNF_IPv4_PROTOCOL_TCP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_TCP"
.IP "\fBNF_IPv4_PROTOCOL_EGP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_EGP"
.IP "\fBNF_IPv4_PROTOCOL_IGRP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_IGRP"
.IP "\fBNF_IPv4_PROTOCOL_CHAOS\fR" 4
.IX Item "NF_IPv4_PROTOCOL_CHAOS"
.IP "\fBNF_IPv4_PROTOCOL_UDP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_UDP"
.IP "\fBNF_IPv4_PROTOCOL_IDP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_IDP"
.IP "\fBNF_IPv4_PROTOCOL_DCCP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_DCCP"
.IP "\fBNF_IPv4_PROTOCOL_IPv6\fR" 4
.IX Item "NF_IPv4_PROTOCOL_IPv6"
.IP "\fBNF_IPv4_PROTOCOL_IPv6ROUTING\fR" 4
.IX Item "NF_IPv4_PROTOCOL_IPv6ROUTING"
.IP "\fBNF_IPv4_PROTOCOL_IPv6FRAGMENT\fR" 4
.IX Item "NF_IPv4_PROTOCOL_IPv6FRAGMENT"
.IP "\fBNF_IPv4_PROTOCOL_IDRP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_IDRP"
.IP "\fBNF_IPv4_PROTOCOL_RSVP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_RSVP"
.IP "\fBNF_IPv4_PROTOCOL_GRE\fR" 4
.IX Item "NF_IPv4_PROTOCOL_GRE"
.IP "\fBNF_IPv4_PROTOCOL_ESP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_ESP"
.IP "\fBNF_IPv4_PROTOCOL_AH\fR" 4
.IX Item "NF_IPv4_PROTOCOL_AH"
.IP "\fBNF_IPv4_PROTOCOL_ICMPv6\fR" 4
.IX Item "NF_IPv4_PROTOCOL_ICMPv6"
.IP "\fBNF_IPv4_PROTOCOL_EIGRP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_EIGRP"
.IP "\fBNF_IPv4_PROTOCOL_OSPF\fR" 4
.IX Item "NF_IPv4_PROTOCOL_OSPF"
.IP "\fBNF_IPv4_PROTOCOL_ETHERIP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_ETHERIP"
.IP "\fBNF_IPv4_PROTOCOL_PIM\fR" 4
.IX Item "NF_IPv4_PROTOCOL_PIM"
.IP "\fBNF_IPv4_PROTOCOL_VRRP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_VRRP"
.IP "\fBNF_IPv4_PROTOCOL_STP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_STP"
.IP "\fBNF_IPv4_PROTOCOL_SCTP\fR" 4
.IX Item "NF_IPv4_PROTOCOL_SCTP"
.IP "\fBNF_IPv4_PROTOCOL_UDPLITE\fR" 4
.IX Item "NF_IPv4_PROTOCOL_UDPLITE"
.PD
Various protocol type constants.
.IP "\fBNF_IPv4_MORE_FRAGMENT\fR" 4
.IX Item "NF_IPv4_MORE_FRAGMENT"
.PD 0
.IP "\fBNF_IPv4_DONT_FRAGMENT\fR" 4
.IX Item "NF_IPv4_DONT_FRAGMENT"
.IP "\fBNF_IPv4_RESERVED_FRAGMENT\fR" 4
.IX Item "NF_IPv4_RESERVED_FRAGMENT"
.PD
Various possible flags.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Frame::Layer
.SH "AUTHOR"
.IX Header "AUTHOR"
Patrice <GomoR> Auffret
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2006\-2019, Patrice <GomoR> Auffret
.PP
You may distribute this module under the terms of the Artistic license.
See \s-1LICENSE\s0.Artistic file in the source distribution archive.
