.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Sys::Path 3"
.TH Sys::Path 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Sys::Path \- supply autoconf style installation directories
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Paths for basic Unix installation when Perl is in /usr/bin:
.PP
.Vb 1
\&    use Sys::Path;
\&
\&    print Sys::Path\->sysconfdir, "\en";
\&    # /etc
\&    print Sys::Path\->datadir, "\en";
\&    # /usr/share
\&    print Sys::Path\->logdir, "\en";
\&    # /var/log
\&    print Sys::Path\->sharedstatedir, "\en";
\&    # /var/lib
.Ve
.PP
Paths for Unix when Perl is in home folder /home/daxim/local/bin:
.PP
.Vb 8
\&    print Sys::Path\->sysconfdir, "\en";
\&    # /home/daxim/local/etc
\&    print Sys::Path\->datadir, "\en";
\&    # /home/daxim/local/share
\&    print Sys::Path\->logdir, "\en";
\&    # /home/daxim/local/log
\&    print Sys::Path\->sharedstatedir, "\en";
\&    # /home/daxim/local/lib
.Ve
.PP
Paths for \s-1MS\s0 Windows Strawberry Perl when installed to C:\eStrawberry\e
.PP
.Vb 8
\&    print Sys::Path\->sysconfdir, "\en";
\&    # C:\eStrawberry\eetc
\&    print Sys::Path\->datadir, "\en";
\&    # C:\eStrawberry\eshare
\&    print Sys::Path\->logdir, "\en";
\&    # C:\eStrawberry\elog
\&    print Sys::Path\->sharedstatedir, "\en";
\&    # C:\eStrawberry\elib
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The goal is that Sys::Path provides autoconf style system paths.
.PP
The default paths for file locations are based on <http://www.pathname.com/fhs/>
(Filesystem Hierarchy Standard) if the Perl was installed in \fI/usr\fR. For
all other non-standard Perl installations or systems the default prefix is
the prefix of Perl it self. Still those are just defaults and can be changed
during \f(CW\*(C`perl Build.PL\*(C'\fR prompting. After Sys::Path is configured and installed
all programs using it can just read/use the paths.
.PP
In addition Sys::Path includes some functions that are related to modules
build or installation. For now there is only Module::Build based Module::Build::SysPath
that uses Sys::Path.
.SH "BUILD TIME CONFIGURATION"
.IX Header "BUILD TIME CONFIGURATION"
.Vb 4
\&    PERL_MM_USE_DEFAULT=1 perl Build.PL \e
\&        \-\-sp\-prefix=/usr/local \e
\&        \-\-sp\-sysconfdir=/usr/local/etc \e
\&        \-\-sp\-localstatedir=/var/local
.Ve
.SH "NOTE"
.IX Header "NOTE"
This is an experiment and lot of questions and concerns can come out about
the paths configuration. Distributions build systems integration and the naming.
And as this is early version things may change. For these purposes there
is a mailing list <http://lists.meon.sk/mailman/listinfo/sys\-path>.
.SS "\s-1WHY\s0?"
.IX Subsection "WHY?"
The filesystem standard has been designed to be used by Unix distribution developers,
package developers, and system implementors. However, it is primarily intended
to be a reference and is not a tutorial on how to manage a Unix filesystem or directory
hierarchy.
.PP
Sys::Path follows this standard when it is possible. Or when Perl follows.
Perl can be installed in many places. Most Linux distributions place Perl
in \fI/usr/bin/perl\fR where \s-1FHS\s0 suggest. In this case the \s-1FHS\s0 folders are
suggested in prompt when doing `\f(CW\*(C`perl Build.PL\*(C'\fR`. In other cases for
other folders or home-folder Perl distributions Sys::Path will suggest
folders under Perl install prefix. (ex. \fIc:\estrawerry\e\fR for the ones using
Windows).
.SS "\s-1PATHS\s0"
.IX Subsection "PATHS"
Here is the list of paths. First the default \s-1FHS\s0 path, then (to compare)
a suggested path when Perl is not installed in \fI/usr\fR.
.PP
\fIprefix\fR
.IX Subsection "prefix"
.PP
\&\fI/usr\fR \- \f(CW$Config::Config{\*(Aqprefix\*(Aq}\fR
.PP
Is a helper function and should not be used directly.
.PP
\fIlocalstatedir\fR
.IX Subsection "localstatedir"
.PP
\&\fI/var\fR \- \f(CW$Config::Config{\*(Aqprefix\*(Aq}\fR
.PP
Is a helper function and should not be used directly.
.PP
\fIsysconfdir\fR
.IX Subsection "sysconfdir"
.PP
\&\fI/etc\fR \- \f(CW$prefix\fR/etc
.PP
The /etc hierarchy contains configuration files.
See <http://www.pathname.com/fhs/pub/fhs\-2.3.html#ETCHOSTSPECIFICSYSTEMCONFIGURATION>.
.PP
\fIdatadir\fR
.IX Subsection "datadir"
.PP
\&\fI/usr/share\fR \- \f(CW$prefix\fR/share
.PP
The /usr/share hierarchy is for all read-only architecture independent data files.
See <http://www.pathname.com/fhs/pub/fhs\-2.3.html#USRSHAREARCHITECTUREINDEPENDENTDATA>.
.PP
\fIdocdir\fR
.IX Subsection "docdir"
.PP
\&\fI/usr/share/doc\fR \- \f(CW$prefix\fR/share/doc
.PP
See \*(L"datadir\*(R"
.PP
\fIlocaledir\fR
.IX Subsection "localedir"
.PP
\&\fI/usr/share/locale\fR \- \f(CW$prefix\fR/share/locale
.PP
See \*(L"datadir\*(R"
.PP
\fIcachedir\fR
.IX Subsection "cachedir"
.PP
\&\fI/var/cache\fR \- \f(CW$localstatedir\fR/cache
.PP
/var/cache is intended for cached data from applications.
See <http://www.pathname.com/fhs/pub/fhs\-2.3.html#VARCACHEAPPLICATIONCACHEDATA>.
.PP
\fIlogdir\fR
.IX Subsection "logdir"
.PP
\&\fI/var/log\fR \- \f(CW$localstatedir\fR/logdir
.PP
This directory contains miscellaneous log files. Most logs must be written to this directory or an appropriate subdirectory.
See <http://www.pathname.com/fhs/pub/fhs\-2.3.html#VARLOGLOGFILESANDDIRECTORIES>.
.PP
\fIspooldir\fR
.IX Subsection "spooldir"
.PP
\&\fI/var/spool\fR \- \f(CW$localstatedir\fR/spool
.PP
Contains data which is awaiting some kind of later processing.
See <http://www.pathname.com/fhs/pub/fhs\-2.3.html#VARSPOOLAPPLICATIONSPOOLDATA>.
.PP
\fIrundir\fR
.IX Subsection "rundir"
.PP
\&\fI/var/run\fR \- \f(CW$localstatedir\fR/rundir
.PP
This directory contains system information data describing the system since it was booted.
See <http://www.pathname.com/fhs/pub/fhs\-2.3.html#VARRUNRUNTIMEVARIABLEDATA>.
.PP
\fIlockdir\fR
.IX Subsection "lockdir"
.PP
\&\fI/var/lock\fR \- \f(CW$localstatedir\fR/lock
.PP
Lock files folder.
See <http://www.pathname.com/fhs/pub/fhs\-2.3.html#VARLOCKLOCKFILES>.
.PP
\fIsharedstatedir\fR
.IX Subsection "sharedstatedir"
.PP
\&\fI/var/lib\fR \- \f(CW$localstatedir\fR/lib
.PP
The directory for installing modifiable architecture-independent data.
See <http://www.pathname.com/fhs/pub/fhs\-2.3.html#VARLIBVARIABLESTATEINFORMATION>.
.PP
\fIsrvdir\fR
.IX Subsection "srvdir"
.PP
\&\fI/srv\fR \- \f(CW$prefix\fR/srv
.PP
Data for services provided by system.
See <http://www.pathname.com/fhs/pub/fhs\-2.3.html#SRVDATAFORSERVICESPROVIDEDBYSYSTEM>.
.PP
\fIwebdir\fR
.IX Subsection "webdir"
.PP
\&\fI/var/www\fR \- \f(CW$localstatedir\fR/www
.PP
Directory where distribution put static web files.
.SS "\s-1HOW IT WORKS\s0"
.IX Subsection "HOW IT WORKS"
The heart of Sys::Path is just:
.PP
.Vb 2
\&    use Config;
\&    if ($Config::Config{\*(Aqprefix\*(Aq} eq \*(Aq/usr\*(Aq) { ... do stuff ... }
.Ve
.PP
The idea is that if the Perl was installed to \fI/usr\fR it is \s-1FHS\s0 type
installation and all path defaults are made based on \s-1FHS.\s0 For the
rest of the installations \f(CW\*(C`prefix\*(C'\fR and \f(CW\*(C`localstatedir\*(C'\fR is set exactly
to \f(CW$Config::Config{\*(Aqprefix\*(Aq}\fR which is the prefix of Perl that was used
to install. In this case \f(CW\*(C`sysconfdir\*(C'\fR is set to \f(CW\*(C`prefix+\*(Aqetc\*(Aq\*(C'\fR.
See Sys::Path::SPc for the implementation.
.SH "METHODS"
.IX Header "METHODS"
.Vb 10
\&    prefix
\&    localstatedir
\&    sysconfdir
\&    datadir
\&    docdir
\&    localedir
\&    cachedir
\&    logdir
\&    spooldir
\&    rundir
\&    lockdir
\&    sharedstatedir
\&    webdir
\&    srvdir
.Ve
.SH "BUILDERS/INSTALLERS helper methods"
.IX Header "BUILDERS/INSTALLERS helper methods"
.SS "find_distribution_root(_\|_PACKAGE_\|_)"
.IX Subsection "find_distribution_root(__PACKAGE__)"
Find the root folder of a modules distribution by going up the
folder structure.
.ie n .SS "prompt_cfg_file_changed($src_file, $dst_file, $prompt_function)"
.el .SS "prompt_cfg_file_changed($src_file, \f(CW$dst_file\fP, \f(CW$prompt_function\fP)"
.IX Subsection "prompt_cfg_file_changed($src_file, $dst_file, $prompt_function)"
Will prompt if to overwrite \f(CW$dst_file\fR with \f(CW$src_file\fR. Returns
true for \*(L"yes\*(R" and false for \*(L"no\*(R".
.ie n .SS "changed_since_install($dest_file, $file)"
.el .SS "changed_since_install($dest_file, \f(CW$file\fP)"
.IX Subsection "changed_since_install($dest_file, $file)"
Return if \f(CW$dest_file\fR changed since install. If optional \f(CW$file\fR is
set then this one is compared against install \f(CW$dest_file\fR checksum.
.SS "install_checksums(%filenames_with_checksums)"
.IX Subsection "install_checksums(%filenames_with_checksums)"
Getter and setter for files checksums recording.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Module::Build::SysPath
.SH "AUTHOR"
.IX Header "AUTHOR"
Jozef Kutej, \f(CW\*(C`<jkutej at cpan.org>\*(C'\fR
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
The following people have contributed to the Sys::Path by committing their
code, sending patches, reporting bugs, asking questions, suggesting useful
advises, nitpicking, chatting on \s-1IRC\s0 or commenting on my blog (in no particular
order):
.PP
.Vb 7
\&    Lars DXXXXXX XXX
\&    Emmanuel Rodriguez
\&    Salve J. Nilsen
\&    Daniel Perrett
\&    Jose Luis Perez Diez
\&    Petr Pi\*'saX
\&    Mohammad S Anwar
.Ve
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2009 Jozef Kutej, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
