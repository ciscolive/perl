.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::RoamingHost 3"
.TH Infoblox::DHCP::RoamingHost 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::RoamingHost \- DHCP Roaming Host object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Roaming Host is a specific host that a \s-1DHCP\s0 server always assigns when a lease request comes from a particular \s-1MAC\s0 address of the client.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $roaming_host = Infoblox::DHCP::RoamingHost \-> new(
\&       name                            => $string,                     #Required
\&       address_type                    => "ipv4" | "ipv6" | "both",    #Optional / Default is "ipv4"
\&       bootfile                        => $filename,                   #Optional / Default is empty
\&       bootserver                      => $ipv4addr,                   #Optional / Default is empty
\&       client_identifier_prepend_zero  => "true" | "false",            #Optional / Default is "false"
\&       comment                         => $string,                     #Optional / Default is empty
\&       ddns_domainname                 => $string,                     #Optional / Default is empty
\&       ddns_hostname                   => $string,                     #Optional / Default is empty
\&       deny_bootp                      => "true" | "false",            #Optional / Default is "false"
\&       dhcp_client_identifier          => $string,                     #Optional / Default is empty
\&       disable                         => "true" | "false",            #Optional / Default is "false"
\&       enable_ddns                     => "true" | "false",            #Optional / Default is "false"
\&       extattrs                        => { $string => $extattr, ... },      #Optional / Default is undefined
\&       extensible_attributes           => { $string => $string | $num, $string => [ $string | $num, ... ], ... }, #Optional / Default is undefined
\&       force_roaming_hostname          => "true" | "false",            #Optional / Default is "false"
\&       ignore_dhcp_option_list_request => "true" | "false" | undef,    #Optional / Default is "false"
\&       ipv6_ddns_domainname            => $string,                     #Optional / Default is undefined
\&       ipv6_ddns_hostname              => $string,                     #Optional / Default is empty
\&       ipv6_domain_name_servers        => $string,                     #Optional / Default is undefined
\&       ipv6_domain_name                => $string,                     #Optional / Default is undefined
\&       ipv6_duid                       => $duid,                       #Optional / Default is undefined
\&       ipv6_enable_ddns                => "true" | "false" | undef,    #Optional / Default is undefined
\&       ipv6_force_roaming_hostname     => "true" | "false",            #Optional / Default is "false"
\&       ipv6_match_option               => "duid" | undef,              #Optional / Default is undefined
\&       ipv6_options                    => [$option1, $option2,...],    #Optional / Default is undefined
\&       ipv6_template                   => $string,                     #Optional / Default is undefined
\&       last_discovered                 => $string,                     #Optional / Default is empty
\&       mac                             => $mac_addr,                   #Optional / Default is empty
\&       match_client                    => "MAC" | "CLIENT_IDENTIFIER", #Optional / Default is "MAC"
\&       network_view                    => $NetworkView,                #Optional / Default is "default" network view
\&       nextserver                      => $ipv4addr,                   #Optional / Default is empty
\&       options                         => [$option1, $option2, ...],   #Optional / Default is undefined
\&       override_ddns_domainname        => "true" | "false",            #Optional / Default value is "false"
\&       override_ipv6_ddns_domainname   => "true" | "false",            #Optional / Default is "false"
\&       override_ipv6_domain_name_servers => "true" | "false",          #Optional / Default is "false"
\&       override_ipv6_domain_name       => "true" | "false",            #Optional / Default is "false"
\&       override_ipv6_enable_ddns       => "true" | "false",            #Optional / Default is "false"
\&       override_ipv6_options           => "true" | "false",            #Optional / Default is "false"
\&       override_preferred_lifetime     => "true" | "false",            #Optional / Default is "false"
\&       override_valid_lifetime         => "true" | "false",            #Optional / Default is "false"
\&       preferred_lifetime              => $num,                        #Optional / Default is 27000
\&       pxe_lease_time                  => $time,                       #Optional / Default is empty
\&       template                        => $string,                     #Optional / Default is undefined
\&       valid_lifetime                  => $num,                        #Optional / Default is 43200
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DHCP\s0 Roaming Host object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP\s0 Roaming Host object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Construct a DHCP Roaming Host object
\& my $roaming_host = Infoblox::DHCP::RoamingHost\->new(
\&        "name"                             => "JohnSmith",
\&        "bootfile"                         => "bootfile",
\&        "bootserver"                       => "bootserver.com",
\&        "client_identifier_prepend_zero"   => "true",
\&        "comment"                          => "add roaming host using uid",
\&        "ddns_domainname"                  => "ddns.domain.com",
\&        "ddns_hostname"                    => "ddns.host.domain.com",
\&        "deny_bootp"                       => "false",
\&        "dhcp_client_identifier"           => "foo",
\&        "disable"                          => "false",
\&        "enable_ddns"                      => "false",
\&        "match_client"                     => "MAC",
\&        "network_view"                     => $nview,
\&        "nextserver"                       => "3.3.3.3",
\&        "options"                          => [ $option1,  $option2, $option3,  $option4, $option5, $option6 ],
\&        "pxe_lease_time"                   => "3600",
\& );
\&
\& #Submit for addition
\& my $response = $session\->add($roaming_host)
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
Apply the following attributes to get a specific \s-1DHCP\s0 Roaming Host object:
.Sp
.Vb 6
\&  name                    \- Optional. The roaming host name.
\&  mac                     \- Optional. MAC address of the roaming host.
\&  dhcp_client_identifier  \- Optional, DHCP option 61 client identifier.
\&  network_view            \- Optional. Network view in which the roaming host is located. By default, all network views are searched.
\&  extattrs                \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes   \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 10
\& #Get DHCP Roaming Host object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::RoamingHost",
\&     mac    => "11:11:11:11:11.11",
\& );
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::RoamingHost",
\&     dhcp_client_identifier => "foo",
\& );
\& my @retrieved_objs = $session\->get(
\&     object       => "Infoblox::DHCP::RoamingHost",
\&     name     => "JohnSmith",
\&     network_view => "default",
\& );
\&
\& my @retrieved_objs = $session\->get(
\&    object                => "Infoblox::DHCP::RoamingHost",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 Roaming Host object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the pxe_lease_time
\& $roaming_host\->pxe_lease_time("1234");
\& #Submit modification
\& my $response = $session\->modify( $roaming_host );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1DHCP\s0 Roaming Host object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific \s-1DHCP\s0 Roaming Host, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get DHCP Roaming Host object through the session
\& my @retrieved_objs = $session\->get(
\&     object       => "Infoblox::DHCP::RoamingHost",
\&     mac          => "11:11:11:11:11:11",
\&     network_view => "default"
\& );
\& #Find the desired object from the retrieved list.
\& my $desired_roaming_host = $retrieved_objs[0];
\& #Submit for removal
\& my $response = $session\->remove( $desired_roaming_host );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DHCP\s0 Roaming Host object and matching Host object with \s-1MAC\s0 address in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
Apply the following attributes to search for a specific \s-1DHCP\s0 Roaming Host object:
.Sp
.Vb 5
\&  name          \- Optional. The roaming host name (regular expression).
\&  mac           \- Optional. MAC address of the roaming host (regular expression).
\&  network_view  \- Optional. Network view in which the roaming host is located. By default, all network views are searched.
\&  extattrs      \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 6
\& # Search for all DHCP Roaming Host objects that are specified in the network "10.0.0.0/8" in the "default" network view.
\& my @retrieved_objs = $session\->search(
\&     object       => "Infoblox::DHCP::RoamingHost",
\&     mac          => "11:11:11:11:11.*",
\&     network_view => "default"
\& );
\&
\& # Search for all DHCP Roaming Host objects with "Santa Clara" for the "Site" extensible attribute
\& my @retrieved_objs = $session\->search(
\&     object                => "Infoblox::DHCP::RoamingHost",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a \s-1DHCP\s0 Roaming Host object.
.SS "address_type( )"
.IX Subsection "address_type( )"
.RS 4
Use this method to set or retrieve the address_type field.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The possible values for address_type are the following:
 ipv4  \- Roaming hosts are set up for IPv4 addresses only.
 ipv6  \- Roaming hosts are set up for IPv6 addresses only.
 both  \- Both types of addresses are set up.
.Sp
The default value of the parameter is \*(L"ipv4\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get address_type
\& my $address_type = $roaminghost\->address_type();
\& #Modify address_type
\& $roaminghost\->address_type("both");
.Ve
.RE
.RS 4
.RE
.SS "bootfile( )"
.IX Subsection "bootfile( )"
.RS 4
Use this method to set or retrieve the bootfile value of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the file the client must download.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get bootfile
\& my $bootfile = $roaming_host\->bootfile();
\& #Modify bootfile
\& $roaming_host\->bootfile("boot_file");
.Ve
.RE
.RS 4
.RE
.SS "bootserver( )"
.IX Subsection "bootserver( )"
.RS 4
Use this method to set or retrieve the bootserver of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the server on which the boot file is stored.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get bootserver
\& my $bootserver = $roaming_host\->bootserver();
\& #Modify bootserver
\& $roaming_host\->bootserver("bootserver2.com");
.Ve
.RE
.RS 4
.RE
.SS "client_identifier_prepend_zero( )"
.IX Subsection "client_identifier_prepend_zero( )"
.RS 4
Use this method to prepend \*(L"\e000\*(R" to the dhcp-client-identifier of a roaming host.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
When you set the client_identifier_prepend_zero parameter to \*(L"true\*(R", it prefixes a 0 (zero) to the \s-1DHCP\s0 client identifier whenever option 61 is used to assign roaming hosts. The following is an excerpt from \*(L"man dhcp-options\*(R":
.Sp
Please be aware that some \s-1DHCP\s0 clients, when configured with client identifiers that are \s-1ASCII\s0 text, will prepend a zero to the \s-1ASCII\s0 text. So you may need to write: option dhcp-client-identifier \*(L"\e000foo\*(R"; rather than: option dhcp-client-identifier \*(L"foo\*(R";
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get client_identifier_prepend_zero
\& my $client_identifier_prepend_zero = $roaming_host\->client_identifier_prepend_zero();
\& #Modify dhcp_client_identifier
\& $roaming_host\->client_identifier_prepend_zero("true");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $roaming_host\->comment();
\& #Modify comment
\& $roaming_host\->comment("Modified DHCP Roaming Host object comment");
.Ve
.RE
.RS 4
.RE
.SS "ddns_domainname( )"
.IX Subsection "ddns_domainname( )"
.RS 4
Use this method to set or retrieve the \s-1DDNS\s0 domain name value of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_domainname method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_ddns_domainname attribute to \*(L"false\*(R".
.Sp
Note that when ddns_domainname is set to a defined value and override_dddns_domainname is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); will set override_ddns_domainname to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); will result in override_ddns_domainname=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the \s-1DDNS\s0 domain name.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the DDNS domain name
\& my $ddns_domainname = $roaming_host\->ddns_domainname();
\& #Modify the DDNS domain name
\& $roaming_host\->ddns_domainname("ddns.domain.com");
.Ve
.RE
.RS 4
.RE
.SS "ddns_hostname( )"
.IX Subsection "ddns_hostname( )"
.RS 4
Use this method to set or retrieve the \s-1DDNS\s0 host name value of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the \s-1DDNS\s0 host name.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the DDNS host name
\& my $ddns_hostname = $roaming_host\->ddns_hostname();
\& #Modify the DDNS host name
\& $roaming_host\->ddns_hostname("host.ddns.domain.com");
.Ve
.RE
.RS 4
.RE
.SS "deny_bootp( )"
.IX Subsection "deny_bootp( )"
.RS 4
Use this method to set or retrieve the deny_bootp flag of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the deny_bootp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get deny_bootp
\& my $deny_bootp = $roaming_host\->deny_bootp();
\& #Modify deny_bootp
\& $roaming_host\->deny_bootp("true");
.Ve
.RE
.RS 4
.RE
.SS "dhcp_client_identifier( )"
.IX Subsection "dhcp_client_identifier( )"
.RS 4
Use this method to set or retrieve the dhcp-client-identifier value of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Use the dhcp_client_identifier or uid to assign roaming hosts if the \s-1DHCP\s0 clients send option 61. A \s-1DHCP\s0 client identifier can be a string or a \s-1MAC\s0 address. Set the \*(L"match_client\*(R" field to \*(L"\s-1CLIENT_IDENTIFIER\*(R"\s0 for roaming hosts to use the dhcp_client_identifier instead of the mac_address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get dhcp_client_identifier
\& my $uid = $roaming_host\->dhcp_client_identifier();
\& #Modify dhcp_client_identifier
\& $roaming_host\->dhcp_client_identifier("foo");
\& or
\& $roaming_host\->dhcp_client_identifier("1:11::11::11::11::11::12");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $roaming_host\->disable();
\& #Modify disable
\& $roaming_host\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "discovered_name( )"
.IX Subsection "discovered_name( )"
.RS 4
Use this method to retrieve the discovered name of a \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discovered name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_name
\& my $discovered_name = $roaming_host\->discovered_name();
.Ve
.RE
.RS 4
.RE
.SS "discoverer( )"
.IX Subsection "discoverer( )"
.RS 4
Use this method to retrieve the discoverer of a \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discoverer value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discoverer
\& my $discoverer = $roaming_host\->discoverer();
.Ve
.RE
.RS 4
.RE
.SS "enable_ddns( )"
.IX Subsection "enable_ddns( )"
.RS 4
Use this method to set or retrieve the enable_ddns flag of a \s-1DHCP\s0 Roaming Host object.
.Sp
If enable_ddns value is specified as \*(L"true\*(R", then the A and \s-1PTR\s0 records corresponding to the Roaming Host object will be placed on the \s-1DNS\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_ddns flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_ddns
\& my $enable_ddns = $roaming_host\->enable_ddns();
\& #Modify enable_ddns
\& $roaming_host\->enable_ddns("true");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $roaming_host\->extattrs();
\& #Modify extattrs
\& $roaming_host\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Roaming Host object
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $roaming_host\->extensible_attributes();
\& #Modify extensible attributes
\& $roaming_host\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "first_discovered( )"
.IX Subsection "first_discovered( )"
.RS 4
Use this method to retrieve the date and time that the \s-1DHCP\s0 Roaming Host object was first discovered.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the date and time that the \s-1DHCP\s0 Roaming Host object was first discovered.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get first_discovered
\& my $first_discovered = $roaming_host\->first_discovered();
.Ve
.RE
.RS 4
.RE
.SS "force_roaming_hostname( )"
.IX Subsection "force_roaming_hostname( )"
.RS 4
Use this method to set or retrieve the force_roaming_hostname flag of a \s-1DHCP\s0 Roaming Host object.
.Sp
If the force_roaming_hostname value is \*(L"true\*(R", then the roaming host name is used as the ddns_hostname.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the force_roaming_hostname flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get force_roaming_hostname
\& my $force_roaming_hostname = $roaming_host\->force_roaming_hostname();
\& #Modify force_roaming_hostname
\& $roaming_host\->force_roaming_hostname("true");
.Ve
.RE
.RS 4
.RE
.SS "ignore_dhcp_option_list_request( )"
.IX Subsection "ignore_dhcp_option_list_request( )"
.RS 4
Use this method to set or retrieve the ignore_dhcp_option_list_request flag of a \s-1DHCP\s0 roaming host object. If this flag is set to false all the defined \s-1DHCP\s0 options will be returned to the client.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the ignore_dhcp_option_list_request flag or \*(L"false\*(R" to deactivate/unset it. The default value is false which indicates that this attribute inherit the member level setting..
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ignore_dhcp_option_list_request
\& my $ignore_dhcp_option_list_request = $roaming_host\->ignore_dhcp_option_list_request();
\& # Un\-override ignore_dhcp_option_list_request
\& $roaming_host\->ignore_dhcp_option_list_request(undef);
\& # Modify ignore_dhcp_option_list_request
\& $roaming_host\->ignore_dhcp_option_list_request("true");
.Ve
.RE
.RS 4
.RE
.SS "ipv6_client_hostname( )"
.IX Subsection "ipv6_client_hostname( )"
.RS 4
Use this method to retrieve the ipv6_client_hostname of a \s-1DHCP\s0 Roaming Host object. This method specifies the host name that the \s-1DHCP\s0 client sends to the Infoblox appliance using \s-1DHCP\s0 option 12. The method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ipv6_client_hostname
\& my $ipv6_client_hostname = $roaming_host\->ipv6_client_hostname();
.Ve
.RE
.RS 4
.RE
.SS "ipv6_ddns_domainname( )"
.IX Subsection "ipv6_ddns_domainname( )"
.RS 4
Use this method to set or retrieve the IPv6 \s-1DDNS\s0 domain name value for the roaming host.
.Sp
Setting this method to a defined value implicitly sets the override_ipv6_ddns_domainname method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_ipv6_ddns_domainname attribute to \*(L"false\*(R".
.Sp
Note that when ipv6_ddns_domainname is set to a defined value and override_ipv6_ddns_domainname is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ipv6_ddns_domainname(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_ipv6_ddns_domainname(\*(L"false\*(R"); will set override_ipv6_ddns_domainname to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ipv6_ddns_domainname(\*(L"false\*(R"); \f(CW$object\fR\->ipv6_ddns_domainname(\*(L"testdomain\*(R"); will result in override_ipv6_ddns_domainname=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The \s-1DDNS\s0 domain name in \s-1FQDN\s0 (Fully Qualified Domain Name) format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6_ddns_domainname
\& my $ipv6_ddns_domainname = $roaming_host\->ipv6_ddns_domainname();
\& #Modify ipv6_ddns_domainname
\& $roaming_host\->ipv6_ddns_domainname("domain.com");
.Ve
.RE
.RS 4
.RE
.SS "ipv6_ddns_hostname( )"
.IX Subsection "ipv6_ddns_hostname( )"
.RS 4
Use this method to set or retrieve the IPv6 \s-1DDNS\s0 host name value of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the IPv6 \s-1DDNS\s0 host name.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the IPv6 DDNS host name
\& my $ipv6_ddns_hostname = $roaming_host\->ipv6_ddns_hostname();
\& #Modify the IPv6 DDNS host name
\& $roaming_host\->ipv6_ddns_hostname("host.ddns.domain.com");
.Ve
.RE
.RS 4
.RE
.SS "ipv6_domain_name( )"
.IX Subsection "ipv6_domain_name( )"
.RS 4
Use this method to set or retrieve the ipv6_domain_name value of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ipv6_domain_name method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper level default and automatically resets the override_ipv6_domain_name attribute to \*(L"false\*(R".
.Sp
Note that when ipv6_domain_name is set to a defined value and override_ipv6_domain_name is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ipv6_domain_name(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_ipv6_domain_name(\*(L"false\*(R"); will set override_ipv6_domain_name to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ipv6_domain_name(\*(L"false\*(R"); \f(CW$object\fR\->ipv6_domain_name(\*(L"testdomain\*(R"); will result in override_ipv6_domain_name=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name, in string format, of the client's domain for resolving names in \s-1DNS.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6_domain_name
\& my $ipv6_domain_name = $roaming_host\->ipv6_domain_name();
\& #Modify ipv6_domain_name
\& $roaming_host\->ipv6_domain_name("test_domain.com");
.Ve
.RE
.RS 4
.RE
.SS "ipv6_domain_name_servers( )"
.IX Subsection "ipv6_domain_name_servers( )"
.RS 4
Use this method to set or retrieve the ipv6_domain_name_servers value of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ipv6_domain_name_servers method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_ipv6_domain_name_servers attribute to \*(L"false\*(R".
.Sp
Note that when ipv6_domain_name_servers is set to a defined value and override_ipv6_domain_name_servers is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ipv6_domain_name_servers(\*(L"2001::1,2001::2\*(R"); \f(CW$object\fR\->override_ipv6_domain_name_servers(\*(L"false\*(R"); will set override_ipv6_domain_name_servers to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ipv6_domain_name_servers(\*(L"false\*(R"); \f(CW$object\fR\->ipv6_domain_name_servers(\*(L"2001::1,2001::2\*(R"); will result in override_ipv6_domain_name_servers=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The IPv6 addresses of the \s-1DNS\s0 servers.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6_domain_name_servers
\& my $ipv6_domain_name_servers = $roaming_host\->ipv6_domain_name_servers();
\& #Modify ipv6_domain_name_servers
\& $roaming_host\->ipv6_domain_name_servers("2001::1,2001::2");
.Ve
.RE
.RS 4
.RE
.SS "ipv6_duid( )"
.IX Subsection "ipv6_duid( )"
.RS 4
Use this method to set or retrieve the DHCPv6 Unique Identifier (\s-1DUID\s0) of the Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The \s-1DUID\s0 of the matching client in hexadecimal format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6_duid
\& my $ipv6_duid = $roaming_host\->ipv6_duid();
\& #Modify ipv6_duid
\& $roaming_host\->ipv6_duid("1c2edfaa");
.Ve
.RE
.RS 4
.RE
.SS "ipv6_enable_ddns( )"
.IX Subsection "ipv6_enable_ddns( )"
.RS 4
Use this method to set or retrieve the ipv6_enable_ddns flag for the roaming host. Set this flag to enable DHCPv6 dynamic \s-1DNS\s0 updates.
.Sp
Setting this method to a defined value implicitly sets the override_ipv6_enable_ddns method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_ipv6_enable_ddns attribute to \*(L"false\*(R".
.Sp
Note that when ipv6_enable_ddns is set to a defined value and override_ipv6_enable_ddns is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ipv6_enable_ddns(\*(L"false\*(R"); \f(CW$object\fR\->override_ipv6_enable_ddns(\*(L"false\*(R"); will set override_ipv6_enable_ddns to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ipv6_enable_ddns(\*(L"false\*(R"); \f(CW$object\fR\->ipv6_enable_ddns(\*(L"false\*(R"); will result in override_ipv6_enable_ddns=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable this feature or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6_enable_ddns
\& my $ipv6_enable_ddns = $roaming_host\->ipv6_enable_ddns();
\& #Modify ipv6_enable_ddns
\& $roaming_host\->ipv6_enable_ddns("true");
.Ve
.RE
.RS 4
.RE
.SS "ipv6_force_roaming_hostname( )"
.IX Subsection "ipv6_force_roaming_hostname( )"
.RS 4
Use this method to set or retrieve the ipv6_force_roaming_hostname flag of a \s-1DHCP\s0 Roaming Host object.
.Sp
If the ipv6_force_roaming_hostname value is \*(L"true\*(R", then the roaming host name is used as the ddns_hostname. This flag applies to IPv6 roaming hosts.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the ipv6_force_roaming_hostname flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6_force_roaming_hostname
\& my $ipv6_force_roaming_hostname = $roaming_host\->ipv6_force_roaming_hostname();
\& #Modify ipv6_force_roaming_hostname
\& $roaming_host\->ipv6_force_roaming_hostname("true");
.Ve
.RE
.RS 4
.RE
.SS "ipv6_match_option( )"
.IX Subsection "ipv6_match_option( )"
.RS 4
Use this method to set or retrieve the ipv6_match_option value of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
This field specifies the identification method for an IPv6 or mixed IPv4/IPv6 roaming host. Currently, the only supported value for this field is \*(L"duid\*(R", which corresponds to identification by DHCPv6 unique \s-1ID.\s0 The default value of this parameter is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6_match_option
\& my $ipv6_match_option = $roaming_host\->ipv6_match_option();
\& #Modify ipv6_match_option
\& $roaming_host\->ipv6_match_option("duid");
.Ve
.RE
.RS 4
.RE
.SS "ipv6_options( )"
.IX Subsection "ipv6_options( )"
.RS 4
Use this method to set or retrieve the IPv6 options of a \s-1DHCP\s0 Roaming Host object.
.Sp
Setting this method to a defined value implicitly sets the override_ipv6_options method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_ipv6_options attribute to \*(L"false\*(R".
.Sp
Note that when ipv6_options is set to a defined value and override_ipv6_options is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ipv6_options([$option1]); \f(CW$object\fR\->override_ipv6_options(\*(L"false\*(R"); will set override_ipv6_options to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ipv6_options(\*(L"false\*(R"); \f(CW$object\fR\->ipv6_options([$option1]); will result in override_ipv6_options=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DHCP::Option object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get ipv6_options
\& my $ipv6_options = $roaming_host\->ipv6_options();
\& #Modify ipv6_options
\& my $option1 = Infoblox::DHCP::Option\->new(
\&     name   => "dhcp6.info\-refresh\-time",
\&     value  => "1000"
\& );
\& $roaming_host\->ipv6_options([$option1]);
.Ve
.RE
.RS 4
.RE
.SS "ipv6_template( )"
.IX Subsection "ipv6_template( )"
.RS 4
Use this method to set or retrieve the fixed address ipv6_template name for a \s-1DHCP\s0 Roaming Host object.
.Sp
Specify the IPv6 fixed address template that is used to create the \s-1DHCP\s0 roaming host.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The IPv6 fixed address template name in sting format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
The ipv6_template parameter can be used only to add a new \s-1DHCP\s0 roaming host. It cannot be used to modify an object or return an object during a get operation.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6_template
\& my $ipv6_template = $roaming_host\->ipv6_template();
\& #Modify ipv6_template
\& $roaming_host\->ipv6_template("Template_Name");
.Ve
.RE
.RS 4
.RE
.SS "last_discovered( )"
.IX Subsection "last_discovered( )"
.RS 4
Use this method to retrieve the time this object was last seen by a discovery job.
.Sp
The default value for this field is empty.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_discovered
\& my $last_discovered = $roaming_host\->last_discovered();
.Ve
.RE
.RS 4
.RE
.SS "mac( )"
.IX Subsection "mac( )"
.RS 4
Use this method to set or retrieve the \s-1MAC\s0 address value of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
\&\s-1MAC\s0 Address of the \s-1DHCP\s0 roaming host object. Format for the hexadecimal strings for \s-1MAC\s0 addresses and vendor prefixes with colons or dashes. Both of the following formats are acceptable: 11:11:11:11:11:11 and 11\-11\-11\-11\-11\-11.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get mac
\& my $mac = $roaming_host\->mac();
\& #Modify mac
\& $roaming_host\->mac("11::11::11::11::11::12");
.Ve
.RE
.RS 4
.RE
.SS "match_client( )"
.IX Subsection "match_client( )"
.RS 4
Use this method to set or retrieve the match_client value of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
.RS 4
.PD 0
.ie n .IP "match_client ""\s-1MAC"":\s0 The fixed \s-1IP\s0 address is leased to the matching \s-1MAC\s0 address." 4
.el .IP "match_client ``\s-1MAC'':\s0 The fixed \s-1IP\s0 address is leased to the matching \s-1MAC\s0 address." 4
.IX Item "match_client MAC: The fixed IP address is leased to the matching MAC address."
.ie n .IP "match_client ""\s-1CLIENT_IDENTIFIER"":\s0 The fixed \s-1IP\s0 address is leased to the matching \s-1DHCP\s0 client identifier" 4
.el .IP "match_client ``\s-1CLIENT_IDENTIFIER'':\s0 The fixed \s-1IP\s0 address is leased to the matching \s-1DHCP\s0 client identifier" 4
.IX Item "match_client CLIENT_IDENTIFIER: The fixed IP address is leased to the matching DHCP client identifier"
.RE
.RS 4
.RE
.IP "\fBReturns\fR" 4
.IX Item "Returns"
.PD
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get match_client
\& my $match_client = $roaming_host\->match_client();
\& #Modify match_client
\& $roaming_host\->match_client("CLIENT_IDENTIFIER");
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the roaming host name associated with the \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
\&\s-1NOTE:\s0 To enable using roaming hosts, you must allow roaming hosts at the grid level by setting \f(CW$griddhcp\fR\->enable_roaming_hosts(\*(L"true\*(R");
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired roaming host name in string format with a maximum of 64 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get roaming host name
\& my $roaming_host_name = $roaming_host\->name();
\& #Modify roaming host name
\& $roaming_host\->name("JimmyJaz");
.Ve
.RE
.RS 4
.RE
.SS "netbios( )"
.IX Subsection "netbios( )"
.RS 4
Use this method to retrieve the name in the NetBIOS reply that responded to a NetBIOS query.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get netbios
\& my $netbios = $roaming_host\->netbios();
.Ve
.RE
.RS 4
.RE
.SS "network_component_description( )"
.IX Subsection "network_component_description( )"
.RS 4
Use this method to retrieve the description of the network device that is connected to the \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device description.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_description
\& my $network_component_description = $roaming_host\->network_component_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_ip( )"
.IX Subsection "network_component_ip( )"
.RS 4
Use this method to retrieve the \s-1IP\s0 address of the network device that is connected to the \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1IP\s0 address of the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_ip
\& my $network_component_ip = $roaming_host\->network_component_ip();
.Ve
.RE
.RS 4
.RE
.SS "network_component_name( )"
.IX Subsection "network_component_name( )"
.RS 4
Use this method to retrieve the name of the network device that is connected to the \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_name
\& my $network_component_name = $roaming_host\->network_component_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_description( )"
.IX Subsection "network_component_port_description( )"
.RS 4
Use this method to retrieve the description of the network device port that is connected to the \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the description of the port on the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_description
\& my $network_component_port_description = $roaming_host\->network_component_port_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_name( )"
.IX Subsection "network_component_port_name( )"
.RS 4
Use this method to retrieve the name of the network device port that is connected to the \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the name of the port on the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_name
\& my $network_component_port_name = $roaming_host\->network_component_port_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_number( )"
.IX Subsection "network_component_port_number( )"
.RS 4
Use this method to retrieve the number of the network device port that is connected to the \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_number
\& my $network_component_port_number = $roaming_host\->network_component_port_number();
.Ve
.RE
.RS 4
.RE
.SS "network_component_type( )"
.IX Subsection "network_component_type( )"
.RS 4
Use this method to retrieve the type of the network device that is connected to \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device type.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_type
\& my $network_component_type = $roaming_host\->network_component_type();
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the network view of the \s-1DHCP\s0 roaming host
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" network view, which means the roaming host is in the default network view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a defined Infoblox::DHCP::View object. The default network view value is the system-defined default network view object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network view
\& my $nview = $roaming_host\->network_view();
\& #Modify network view, with an Infoblox::DHCP::View object
\& $roaming_host\->network_view($nview);
.Ve
.RE
.RS 4
.RE
.SS "nextserver( )"
.IX Subsection "nextserver( )"
.RS 4
Use this method to set or retrieve the nextserver value of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
\&\s-1IP\s0 address of the boot file server on which the boot file is stored.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get nextserver
\& my $nextserver = $roaming_host\->nextserver();
\& #Modify nextserver
\& $roaming_host\->nextserver("3.3.3.4");
.Ve
.RE
.RS 4
.RE
.SS "options( )"
.IX Subsection "options( )"
.RS 4
Use this method to set or retrieve the options of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
See Infoblox::DHCP::Option for parameters and methods available for this object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Options describe network configuration settings and various services available on the network. These options occur as variable-length fields at the end of \s-1DHCP\s0 messages.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get options
\& my $options = $roaming_host\->options();
\& #Modify options
\& $roaming_host\->options([$option1, $option2]);
.Ve
.RE
.RS 4
.RE
.SS "os( )"
.IX Subsection "os( )"
.RS 4
Use this method to retrieve the operating system associated with this roaming host.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get os
\& my $os = $roaming_host\->os();
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_domainname( )"
.IX Subsection "override_ddns_domainname( )"
.RS 4
The override_ddns_domainname attribute controls whether the ddns_domainname value in the \s-1DHCP\s0 Roaming Host is used, instead of the grid default.
.Sp
The override_ddns_domainname attribute can be specified explicitly. It is also set implicitly when ddns_domainname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for ddns_domainname. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for ddns_domainname.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_domainname
\&    my $override_ddns_domainname=$roaming_host\->override_ddns_domainname( );
\&    #Modifying override_ddns_domainname
\&    $roaming_host\->override_ddns_domainname("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ipv6_ddns_domainname( )"
.IX Subsection "override_ipv6_ddns_domainname( )"
.RS 4
The override_ipv6_ddns_domainname attribute controls whether the ddns_domainname value in the \s-1DHCP\s0 Roaming Host object is used, instead of the upper-level default.
.Sp
The override_ipv6_ddns_domainname attribute can be specified explicitly. It is also set implicitly when ipv6_ddns_domainname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ddns_domainname. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ipv6_ddns_domainname.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ipv6_ddns_domainname
\&    my $override_ipv6_ddns_domainname=$roaming_host\->override_ipv6_ddns_domainname( );
\&    #Modifying override_ipv6_ddns_domainname
\&    $roaming_host\->override_ipv6_ddns_domainname("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ipv6_domain_name( )"
.IX Subsection "override_ipv6_domain_name( )"
.RS 4
Use this method to set or retrieve the override_ipv6_domain_name value of a \s-1DHCP\s0 Roaming Host object.
.Sp
The override_ipv6_domain_name attribute can be specified explicitly. It is also set implicitly when ipv6_domain_name is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ipv6_domain_name. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ipv6_domain_name.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_ipv6_domain_name
\& my $override_ipv6_domain_name = $roaming_host\->override_ipv6_domain_name();
\& #Modify override_ipv6_domain_name
\& $roaming_host\->override_ipv6_domain_name("test_domain.com");
.Ve
.RE
.RS 4
.RE
.SS "override_ipv6_domain_name_servers( )"
.IX Subsection "override_ipv6_domain_name_servers( )"
.RS 4
Use this method to set or retrieve the override_ipv6_domain_name_servers value of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ipv6_domain_name_servers. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ipv6_domain_name_servers.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_ipv6_domain_name_servers
\& my $override_ipv6_domain_name_servers = $roaming_host\->override_ipv6_domain_name_servers();
\& #Modify override_ipv6_domain_name_servers
\& $roaming_host\->override_ipv6_domain_name_servers("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ipv6_enable_ddns( )"
.IX Subsection "override_ipv6_enable_ddns( )"
.RS 4
The override_ipv6_enable_ddns attribute controls whether the ipv6_enable_ddns value in the \s-1DHCP\s0 Roaming Host object is used, instead of the upper-level default.
.Sp
The override_ipv6_enable_ddns attribute can be specified explicitly. It is also set implicitly when ipv6_enable_ddns is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ipv6_enable_ddns. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ipv6_enable_ddns.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ipv6_enable_ddns
\&    my $override_ipv6_enable_ddns=$roaming_host\->override_ipv6_enable_ddns( );
\&    #Modifying override_ipv6_enable_ddns
\&    $roaming_host\->override_ipv6_enable_ddns("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ipv6_options( )"
.IX Subsection "override_ipv6_options( )"
.RS 4
The override_ipv6_options attribute controls whether the ipv6_options value in the \s-1DHCP\s0 Roaming Host object is used, instead of the upper-level default.
.Sp
The override_ipv6_options attribute can be specified explicitly. It is also set implicitly when ipv6_options is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ipv6_options. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ipv6_options.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ipv6_options
\&    my $override_ipv6_options=$roaming_host\->override_ipv6_options( );
\&    #Modifying override_ipv6_options
\&    $roaming_host\->override_ipv6_options("true");
.Ve
.RE
.RS 4
.RE
.SS "override_preferred_lifetime( )"
.IX Subsection "override_preferred_lifetime( )"
.RS 4
The override_preferred_lifetime attribute controls whether the preferred_lifetime value in the \s-1DHCP\s0 Roaming Host object is used, instead of the upper-level default.
.Sp
The override_preferred_lifetime attribute can be specified explicitly. It is also set implicitly when preferred_lifetime is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for preferred_lifetime. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for preferred_lifetime.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_preferred_lifetime
\&    my $override_preferred_lifetime=$roaming_host\->override_preferred_lifetime( );
\&    #Modifying override_preferred_lifetime
\&    $roaming_host\->override_preferred_lifetime("true");
.Ve
.RE
.RS 4
.RE
.SS "override_valid_lifetime( )"
.IX Subsection "override_valid_lifetime( )"
.RS 4
The override_valid_lifetime attribute controls whether the valid_lifetime value in the \s-1DHCP\s0 Roaming Host object is used, instead of the upper-level default.
.Sp
The override_valid_lifetime attribute can be specified explicitly. It is also set implicitly when valid_lifetime is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for valid_lifetime. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for valid_lifetime.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_valid_lifetime
\&    my $override_valid_lifetime=$roaming_host\->override_valid_lifetime( );
\&    #Modifying override_valid_lifetime
\&    $roaming_host\->override_valid_lifetime("true");
.Ve
.RE
.RS 4
.RE
.SS "port_duplex( )"
.IX Subsection "port_duplex( )"
.RS 4
Use this method to retrieve the duplex setting of the network device port that is connected to the \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the port duplex setting. Returned values, if any, are one of the following:
.RS 4
.IP "Full" 4
.IX Item "Full"
.PD 0
.IP "Half" 4
.IX Item "Half"
.RE
.RS 4
.RE
.IP "\fBExample\fR" 4
.IX Item "Example"
.PD
.Vb 2
\& #Get port_duplex
\& my $port_duplex = $roaming_host\->port_duplex();
.Ve
.RE
.RS 4
.RE
.SS "port_link_status( )"
.IX Subsection "port_link_status( )"
.RS 4
Use this method to retrieve the link status of the network device port that is connected to the \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port link status. Returned values, if any, are one of the following:
        Connected
        Not Connected
        Unknown
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_link_status
\& my $port_link_status = $roaming_host\->port_link_status();
.Ve
.RE
.RS 4
.RE
.SS "port_speed( )"
.IX Subsection "port_speed( )"
.RS 4
Use this method to retrieve the speed of the network device port that is connected to the \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port speed. Returned values, if any, are one of the following:
.RS 4
.IP "\fB\fR 10 M" 4
.IX Item " 10 M"
.PD 0
.IP "\fB\fR 100 M" 4
.IX Item " 100 M"
.IP "\fB\fR 1G" 4
.IX Item " 1G"
.IP "\fB\fR 10G" 4
.IX Item " 10G"
.IP "\fB\fR 100G" 4
.IX Item " 100G"
.IP "\fB\fR Unknown" 4
.IX Item " Unknown"
.RE
.RS 4
.RE
.IP "\fBExample\fR" 4
.IX Item "Example"
.PD
.Vb 2
\& #Get port_speed
\& my $port_speed = $roaming_host\->port_speed();
.Ve
.RE
.RS 4
.RE
.SS "port_status( )"
.IX Subsection "port_status( )"
.RS 4
Use this method to retrieve the status of the network device port that is connected to the \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port status. Returned values, if any, are one of the following:
.RS 4
.IP "Up" 4
.IX Item "Up"
.PD 0
.IP "Down" 4
.IX Item "Down"
.IP "Unknown" 4
.IX Item "Unknown"
.RE
.RS 4
.RE
.IP "\fBExample\fR" 4
.IX Item "Example"
.PD
.Vb 2
\& #Get port_status
\& my $port_status = $roaming_host\->port_status();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_description( )"
.IX Subsection "port_vlan_description( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 description of the network device port that is connected to the \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1VLAN\s0 description of the network device port.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_description
\& my $port_vlan_description = $roaming_host\->port_vlan_description();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_name( )"
.IX Subsection "port_vlan_name( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 name of the network device port that is connected to the \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port \s-1VLAN\s0 name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_name
\& my $port_vlan_name = $roaming_host\->port_vlan_name();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_number( )"
.IX Subsection "port_vlan_number( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 number of the network device port that is connected to the \s-1DHCP\s0 Roaming Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the port \s-1VLAN\s0 number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_number
\& my $port_vlan_number = $roaming_host\->port_vlan_number();
.Ve
.RE
.RS 4
.RE
.SS "preferred_lifetime( )"
.IX Subsection "preferred_lifetime( )"
.RS 4
Use this method to set or retrieve the preferred lifetime of the roaming host.
.Sp
Setting this method to a defined value implicitly sets the override_preferred_lifetime method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_preferred_lifetime attribute to \*(L"false\*(R".
.Sp
Note that when preferred_lifetime is set to a defined value and override_preferred_lifetime is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->preferred_lifetime(20000); \f(CW$object\fR\->override_preferred_lifetime(\*(L"false\*(R"); will set override_preferred_lifetime to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_preferred_lifetime(\*(L"false\*(R"); \f(CW$object\fR\->preferred_lifetime(20000); will result in override_preferred_lifetime=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Preferred lifetime value in seconds. The default value is 27000. Note that the preferred lifetime cannot be greater than the valid lifetime.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get preferred_lifetime
\& my $preferred_lifetime = $roaming_host\->preferred_lifetime();
\& #Modify preferred_lifetime
\& $roaming_host\->preferred_lifetime(12345);
.Ve
.RE
.RS 4
.RE
.SS "pxe_lease_time( )"
.IX Subsection "pxe_lease_time( )"
.RS 4
Use this method to set or retrieve the pxe_lease_time value of a \s-1DHCP\s0 Roaming Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter appropriate values in the Days, Hours, Mins and Secs fields. Users can specify the duration of time it takes a host to connect to a boot server, such as a \s-1TFTP\s0 server, and download the file it needs to boot.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get pxe_lease_time
\& my $pxe_lease_time = $roaming_host\->pxe_lease_time();
\& #Modify pxe_lease_time
\& $roaming_host\->pxe_lease_time("369");
.Ve
.RE
.RS 4
.RE
.SS "template( )"
.IX Subsection "template( )"
.RS 4
Use this method to set the fixed address template name for a \s-1DHCP\s0 Roaming Host object.
.Sp
Template is the name of a \s-1DHCP\s0 Fixed Address template which will be used to create the \s-1DHCP\s0 Roaming Host.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
The template parameter can be used to only add a new \s-1DHCP\s0 Roaming Host and cannot be used during object modify or returned during object get.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Add RoamingHost with template
\& my $roaming_host = Infoblox::DHCP::RoamingHost\->new(
\&        "name"  => "JohnSmith",
\&        "template"  => "Template_Name",
\& );
\& #Submit for addition
\& my $response = $session\->add($roaming_host)
.Ve
.RE
.RS 4
.RE
.SS "valid_lifetime( )"
.IX Subsection "valid_lifetime( )"
.RS 4
Use this method to set or retrieve the preferred lifetime of the roaming host.
.Sp
Setting this method to a defined value implicitly sets the override_valid_lifetime method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_valid_lifetime attribute to \*(L"false\*(R".
.Sp
Note that when valid_lifetime is set to a defined value and override_valid_lifetime is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->valid_lifetime(20000); \f(CW$object\fR\->override_valid_lifetime(\*(L"false\*(R"); will set override_valid_lifetime to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_valid_lifetime(\*(L"false\*(R"); \f(CW$object\fR\->valid_lifetime(20000); will result in override_valid_lifetime=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid lifetime value in seconds. The default value is 43200.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get valid_lifetime
\& my $valid_lifetime = $roaming_host\->valid_lifetime();
\& #Modify valid_lifetime
\& $roaming_host\->valid_lifetime(12345);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
.Vb 1
\& #Preparation prior to a DHCP Fixed Address object insertion
\&
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Modify Grid \s-1DHCP\s0 object to enable support of the Roaming Hosts\fR
.PP
.Vb 9
\& my $grid_dhcp=$session\->get(
\&                             object => "Infoblox::Grid::DHCP",
\&                             name=>"Infoblox"
\&                             );
\& unless ($grid_dhcp) {
\&     die("Get Grid DHCP object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Grid DHCP object found at least 1 matching entry\en";
\&
\& my $save_grid_rh_status=$grid_dhcp\->enable_roaming_hosts();
\& $grid_dhcp\->enable_roaming_hosts("true");
\& unless($session\->modify($grid_dhcp)) {
\&     die("Modifying Grid DHCP object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Roaming Hosts enabled at Grid level successfuly\en";
\&
\& #Adding DHCP options
\& my $option1 = Infoblox::DHCP::Option\->new(
\&                                           "name"  => "lease\-time",
\&                                           "value" => "50"
\&                                          );
\&
\& unless($option1) {
\&      die("Construct option1 object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "option1 object created successfully\en";
\&
\& my $option2 = Infoblox::DHCP::Option\->new(
\&                                           "type"      => "routers",
\&                                           "ipv4addrs" => ["10.0.0.1","10.0.0.255"],
\&                                          );
\&
\& unless($option2) {
\&      die("Construct option2 object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "option2 object created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 Roaming Host object\fR
.PP
.Vb 10
\& #Create a DHCP Roaming Host object
\& my $roaming_host = Infoblox::DHCP::RoamingHost\->new(
\&        "name"       => "JohnSmith",
\&        "mac"            => "00:00:00:11:11:11",
\&        "comment"        => "add roaming host",
\&        "enable_ddns"    => "true",
\&        "pxe_lease_time" => "3600",
\&        "bootserver"     => "someserver.com",
\&        "nextserver"     => "3.3.3.3",
\&        "bootfile"       => "bootfile.com",
\&        "options"        => [ $option1 , $option2 ],
\&        );
\& unless($roaming_host) {
\&      die("Construct roaming host failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Roaming Host object created successfully\en";
\&
\& #Verify if the DHCP Roaming Host exists in the Infoblox appliance
\& my $object = $session\->get(object => "Infoblox::DHCP::RoamingHost", mac => "00:00:00:11:11:11");
\& unless ($object) {
\&    print "roaming host does not exist on server, safe to add the roaming host\en";
\&    $session\->add($roaming_host)
\&       or die("Add roaming host failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "DHCP Roaming Host added successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DHCP\s0 Roaming Host object\fR
.PP
.Vb 6
\& #Search for all DHCP Roaming Host objects with a given mac address
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DHCP::RoamingHost",
\&     mac     => "00:00:00:11:11.*",
\&      );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search for Roaming Host object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Roaming Host object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DHCP\s0 Roaming Host object\fR
.PP
.Vb 11
\& #Get DHCP Roaming Host object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::RoamingHost",
\&     mac    => "00:00:00:11:11:11",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Roaming Host object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Roaming Host object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the obtained Roaming Host object
\& $object\->pxe_lease_time("1234");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify Roaming Host object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Roaming Host object modified successfully \en";
.Ve
.PP
\&\fB#Remove a Roaming Host object\fR
.PP
.Vb 11
\& #Get Roaming Host object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::RoamingHost",
\&     mac    => "00:00:00:11:11:11",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Roaming Host object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Roaming Host object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove Roaming Host object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Roaming Host object removed successfully \en";
\&
\& #Restore Grid DHCP
\& $grid_dhcp\->enable_roaming_hosts($save_grid_rh_status);
\& print "Grid DHCP setting restored successfully\en" if($session\->modify($grid_dhcp));
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session, Infoblox::Grid::MSServer::AdUser::Data
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
