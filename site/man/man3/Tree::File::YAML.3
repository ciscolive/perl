.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tree::File::YAML 3"
.TH Tree::File::YAML 3 "2013-01-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tree::File::YAML \- (DEPRECATED) store a data structure in a file tree (using YAML)
.SH "VERSION"
.IX Header "VERSION"
version 0.112
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Tree::File::YAML;
\&
\& my $tree = Tree::File::YAML\->new($treerot);
\&
\& die "death mandated" if $tree\->get("/master/die")
\&
\& print "Hello, ", $tree\->get("/login/user/name");
\&
\& $tree\->set("/login/user/lastlogin", time);
\& $tree\->write;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module stores configuration in a series of \s-1YAML\s0 files spread across a
directory tree, and provides uniform access to the data structure.
.PP
It can load a single \s-1YAML\s0 file or a directory tree containing \s-1YAML\s0 files as
leaves.  The tree's branches can be returned as data structures or \s-1YAML\s0
documents, and the tree can be modified and rewritten.  Directory-based
branches can be collapsed back into files and file-based branches can be
exploded into directories.
.PP
For more information, see Tree::File.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """$tree\->load_file($filename)"""
.el .SS "\f(CW$tree\->load_file($filename)\fP"
.IX Subsection "$tree->load_file($filename)"
This method loads the given filename as \s-1YAML,\s0 croaks if it contains more than
one section, and otherwise returns the contained data.
.ie n .SS """$tree\->as_yaml()"""
.el .SS "\f(CW$tree\->as_yaml()\fP"
.IX Subsection "$tree->as_yaml()"
This method returns the entire tree of data (returned by the \f(CW\*(C`data\*(C'\fR method),
serialized into \s-1YAML.\s0
.ie n .SS """$tree\->write_file($filename, $data)"""
.el .SS "\f(CW$tree\->write_file($filename, $data)\fP"
.IX Subsection "$tree->write_file($filename, $data)"
This method writes the given data, as \s-1YAML,\s0 to the given filename.
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
symlinks and references
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES,\s0 \f(CW\*(C`<rjbs@cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-tree\-file@rt.cpan.org\*(C'\fR, or
through the web interface at <http://rt.cpan.org>.  I will be notified, and
then you'll automatically be notified of progress on your bug as I make
changes.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2005 Ricardo Signes, All Rights Reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
