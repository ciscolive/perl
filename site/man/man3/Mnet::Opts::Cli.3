.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mnet::Opts::Cli 3"
.TH Mnet::Opts::Cli 3 "2020-08-09" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mnet::Opts::Cli \- Define and parse command line options
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # required to use this module
\&    use Mnet::Opts::Cli;
\&
\&    # define \-\-sample cli option
\&    Mnet::Opts::Cli::define({
\&        getopt      => "sample=s",
\&        default     => "",
\&        help_tip    => "set to input string",
\&        help_text   => "
\&            use \-\-sample to set an input string
\&            refer to perldoc for more information
\&        ",
\&    });
\&
\&    # optional environment variable can also be parsed for options
\&    my $env = "Mnet";
\&
\&    # call in list context for cli opts object and any extra args
\&    my ($cli, @extras) = Mnet::Opts::Cli\->new($env);
\&
\&    # call in scalar context to disallow extra args
\&    $cli = Mnet::Opts::Cli\->new($env);
\&
\&    # access parsed cli options using method calls
\&    my $value = $cli\->sample;
.Ve
.SH "DESCRIPTIONS"
.IX Header "DESCRIPTIONS"
Mnet::Opts::Cli can be used by scripts to define and parse command line
options, as shown in the example above.
.PP
An optional environment variable can be used to set options, as shown in the
example above.  This can be to secure passwords so they don't appear in system
process table, as below:
.PP
.Vb 2
\&    export Mnet="\-\-password secret"
\&    script.pl
.Ve
.PP
Note that the specified environment variable is not parsed if the \-\-test option
is set on the command line. Refer to Mnet::Test for more information.
.SH "METHODS"
.IX Header "METHODS"
Mnet::Opts::Cli implements the methods listed below.
.SS "Mnet::Opts::Cli::define"
.IX Subsection "Mnet::Opts::Cli::define"
.Vb 1
\&    Mnet::Opts::Cli::define(\e%specs)
.Ve
.PP
This function may be used during initialization to define cli options which can
be parsed by the Mnet::Opts\->cli class method in this module, as in the example
which follows that define a \-\-sample string option:
.PP
.Vb 2
\&    use Mnet::Cli::Opts;
\&    Mnet::Opts::Cli::define({ getopt => \*(Aqsample=s\*(Aq });
.Ve
.PP
An error is issued if an option with the same name has already been defined.
.PP
Note that getopt option names defined with this function must start with a
letter and contain only letters, numbers, and the dash character. Dashes are
replaced with underscores after the options are parsed, so they may be referred
to more easily in script code.
.PP
The following Getopt::Long option specification types are supported:
.PP
.Vb 6
\&    opt    \-\-opt       boolean option, set true if \-\-opt is set
\&    opt!   \-\-[no]opt   negatable option, returns false if \-\-noopt is set
\&    opt=i  \-\-opt <i>   required integer, error if input value is not set
\&    opt:i  \-\-opt [i]   optional integer, returns null if value not set
\&    opt=s  \-\-opt <s>   required string, error if input value is not set
\&    opt:s  \-\-opt [s]   optional string, returns null if value not set
.Ve
.PP
The following keys in the specs input hash reference argument are supported:
.PP
.Vb 7
\&    getopt      required option name and type, see perldoc Getopt::Long
\&    default     default value for option, defaults to undefined
\&    help_hide   set to hide option in \-\-help list of available options
\&    help_tip    short tip text for \-\-help list of available options
\&    help_text   longer help text to show in \-\-help for specific options
\&    record      set so option is saved in Mnet::Test record/replay files
\&    redact      set to prevent option value showing in Mnet::Log output
.Ve
.PP
Refer to Getopt::Long for more information.
.SS "new"
.IX Subsection "new"
.Vb 2
\&    $opts = Mnet::Opts::Cli\->new($env_var)
\&    or ($cli, @extras) = Mnet::Opts::Cli\->new($env_var)
.Ve
.PP
The new class method may be used to retrieve an options object containing
defined options parsed from the command line and an array contining any extra
command line arguments.
.PP
The env_var argument is optional, and can be set to the name of an environment
variable where additional command line options can be securely set.
.PP
If called in list context this method will return an opts object containing
values for defined options parsed from the command line followed by a list of
any other extra arguments that were present on the command line.
.PP
.Vb 2
\&    use Mnet::Opts::Cli;
\&    my ($cli, @extras) = Mnet::Opts::Cli\->new();
.Ve
.PP
If not called in list context an error will be issued if extra command line
arguments exist.
.PP
.Vb 2
\&    use Mnet::Opts::Cli;
\&    my $cli = Mnet::Opts::Cli\->new();
.Ve
.PP
Options are applied in the following order:
.PP
.Vb 6
\&    child Mnet::Batch command lines
\&    command line
\&    replayed command line
\&    optional environment variable
\&    Mnet::Opts::Set use pragmas
\&    Mnet::Opts::Cli::define default key
.Ve
.PP
Note that errors are not issued for unknown options that may be set for other
scripts in the optional env_var environment variable. Also note that this
environment variable is not parsed if the \-\-test option is set on the command
line.
.PP
The perl \s-1ARGV\s0 array is not modified by this module.
.SH "TESTING"
.IX Header "TESTING"
When used with the Mnet::Test \-\-record option this module will save all
cli options to the specified file if they were defined with the record option
attribute set true. Any extra arguments specified on the command line will also
be saved. For more info about enabling the recording of individual options
refer to the define function in this module and the \-\-test\-reset option.
.PP
When the \-\-replay option is used this module will load all cli options saved
in the specified Mnet::Test file then apply options specified on the command
line on top of the replayed options.
.PP
When the \-\-replay option is used for an Mnet::Test file which was recorded
with extra arguments the extra arguments from the replay file will be used
unless there were extra arguments on the command line, in which case the
command line arguments will replace the arguments read from the replay file.
.PP
The \-\-record option can be used to re-save the current \-\-replay file after
applying new command line options and/or extra arguments.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Getopt::Long
.PP
Mnet
.PP
Mnet::Opts
.PP
Mnet::Test
