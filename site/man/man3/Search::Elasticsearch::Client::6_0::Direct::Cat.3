.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search::Elasticsearch::Client::6_0::Direct::Cat 3"
.TH Search::Elasticsearch::Client::6_0::Direct::Cat 3 "2020-06-26" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Search::Elasticsearch::Client::6_0::Direct::Cat \- A client for running cat debugging requests
.SH "VERSION"
.IX Header "VERSION"
version 6.81
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`cat\*(C'\fR \s-1API\s0 in Elasticsearch provides information about your
cluster and indices in a simple, easy to read text format, intended
for human consumption.
.PP
These APIs have a number of parameters in common:
.IP "\(bu" 4
\&\f(CW\*(C`help\*(C'\fR
.Sp
Returns help about the \s-1API,\s0 eg:
.Sp
.Vb 1
\&    say $e\->cat\->allocation(help => 1);
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`v\*(C'\fR
.Sp
Includes the column headers in the output:
.Sp
.Vb 1
\&    say $e\->cat\->allocation(v => 1);
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`h\*(C'\fR
.Sp
Accepts a list of column names to be output, eg:
.Sp
.Vb 1
\&    say $e\->cat\->indices(h => [\*(Aqhealth\*(Aq,\*(Aqindex\*(Aq]);
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`bytes\*(C'\fR
.Sp
Formats byte-based values as bytes (\f(CW\*(C`b\*(C'\fR), kilobytes (\f(CW\*(C`k\*(C'\fR), megabytes
(\f(CW\*(C`m\*(C'\fR) or gigabytes (\f(CW\*(C`g\*(C'\fR)
.PP
It does Search::Elasticsearch::Role::Client::Direct.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """help()"""
.el .SS "\f(CWhelp()\fP"
.IX Subsection "help()"
.Vb 1
\&    say $e\->cat\->help;
.Ve
.PP
Returns the list of supported \f(CW\*(C`cat\*(C'\fR APIs
.ie n .SS """aliases()"""
.el .SS "\f(CWaliases()\fP"
.IX Subsection "aliases()"
.Vb 3
\&    say $e\->cat\->aliases(
\&        name => \*(Aqname\*(Aq | \e@names    # optional
\&    );
.Ve
.PP
Returns information about index aliases, optionally limited to the specified
index/alias names.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat aliases docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-aliases.html>
for more information.
.ie n .SS """allocation()"""
.el .SS "\f(CWallocation()\fP"
.IX Subsection "allocation()"
.Vb 3
\&    say $e\->cat\->allocation(
\&        node_id => \*(Aqnode\*(Aq | \e@nodes    # optional
\&    );
.Ve
.PP
Provides a snapshot of how shards have located around the cluster and the
state of disk usage.
.PP
Query string parameters:
    \f(CW\*(C`bytes\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat allocation docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-allocation.html>
for more information.
.ie n .SS """count()"""
.el .SS "\f(CWcount()\fP"
.IX Subsection "count()"
.Vb 3
\&    say $e\->cat\->count(
\&        index => \*(Aqindex\*(Aq | \e@indices    # optional
\&    );
.Ve
.PP
Provides quick access to the document count of the entire cluster, or
individual indices.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat count docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-count.html>
for more information.
.ie n .SS """fielddata()"""
.el .SS "\f(CWfielddata()\fP"
.IX Subsection "fielddata()"
.Vb 3
\&    say $e\->cat\->fielddata(
\&        fields => \*(Aqfield\*(Aq | \e@fields    # optional
\&    );
.Ve
.PP
Shows the amount of memory used by each of the specified `fields` (or all
fields) loaded into fielddata.
.PP
Query string parameters:
    \f(CW\*(C`bytes\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat fielddata docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-fielddata.html>
for more information.
.ie n .SS """health()"""
.el .SS "\f(CWhealth()\fP"
.IX Subsection "health()"
.Vb 1
\&    say $e\->cat\->health();
.Ve
.PP
Provides a snapshot of how shards have located around the cluster and the
state of disk usage.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`ts\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat health docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-health.html>
for more information.
.ie n .SS """indices()"""
.el .SS "\f(CWindices()\fP"
.IX Subsection "indices()"
.Vb 3
\&    say $e\->cat\->indices(
\&        index => \*(Aqindex\*(Aq | \e@indices    # optional
\&    );
.Ve
.PP
Provides a summary of index size and health for the whole cluster
or individual indices
.PP
Query string parameters:
    \f(CW\*(C`bytes\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`health\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`pri\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat indices docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-indices.html>
for more information.
.ie n .SS """master()"""
.el .SS "\f(CWmaster()\fP"
.IX Subsection "master()"
.Vb 1
\&    say $e\->cat\->master();
.Ve
.PP
Displays the masterâ€™s node \s-1ID,\s0 bound \s-1IP\s0 address, and node name.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat master docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-master.html>
for more information.
.ie n .SS """nodeattrs()"""
.el .SS "\f(CWnodeattrs()\fP"
.IX Subsection "nodeattrs()"
.Vb 1
\&    say $e\->cat\->nodeattrs();
.Ve
.PP
Returns the node attributes set per node.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat nodeattrs docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-nodeattrs.html>
for more information.
.ie n .SS """nodes()"""
.el .SS "\f(CWnodes()\fP"
.IX Subsection "nodes()"
.Vb 1
\&    say $e\->cat\->nodes();
.Ve
.PP
Provides a snapshot of all of the nodes in your cluster.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat nodes docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-nodes.html>
for more information.
.ie n .SS """pending_tasks()"""
.el .SS "\f(CWpending_tasks()\fP"
.IX Subsection "pending_tasks()"
.Vb 1
\&    say $e\->cat\->pending_tasks();
.Ve
.PP
Returns any cluster-level tasks which are queued on the master.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat pending-tasks docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-pending-tasks.html>
for more information.
.ie n .SS """plugins()"""
.el .SS "\f(CWplugins()\fP"
.IX Subsection "plugins()"
.Vb 1
\&    say $e\->cat\->plugins();
.Ve
.PP
Returns information about plugins installed on each node.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat plugins docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-plugins.html>
for more information.
.ie n .SS """recovery()"""
.el .SS "\f(CWrecovery()\fP"
.IX Subsection "recovery()"
.Vb 3
\&    say $e\->cat\->recovery(
\&        index => \*(Aqindex\*(Aq | \e@indices    # optional
\&    );
.Ve
.PP
Provides a view of shard replication. It will show information
anytime data from at least one shard is copying to a different node.
It can also show up on cluster restarts. If your recovery process seems
stuck, try it to see if thereâ€™s any movement using \f(CW\*(C`recovery()\*(C'\fR.
.PP
Query string parameters:
    \f(CW\*(C`bytes\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat recovery docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-recovery.html>
for more information.
.ie n .SS """repositories()"""
.el .SS "\f(CWrepositories()\fP"
.IX Subsection "repositories()"
.Vb 1
\&    say $e\->cat\->repositories()
.Ve
.PP
Provides a list of registered snapshot repositories.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat repositories docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-repositories.html>
for more information.
.ie n .SS """segments()"""
.el .SS "\f(CWsegments()\fP"
.IX Subsection "segments()"
.Vb 3
\&    say $e\->cat\->segments(
\&        index => \*(Aqindex\*(Aq | \e@indices    # optional
\&    );
.Ve
.PP
Provides low level information about the segments in the shards of an index.
.PP
Query string parameters:
    \f(CW\*(C`bytes\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat shards docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-segments.html>
for more information.
.ie n .SS """shards()"""
.el .SS "\f(CWshards()\fP"
.IX Subsection "shards()"
.Vb 3
\&    say $e\->cat\->shards(
\&        index => \*(Aqindex\*(Aq | \e@indices    # optional
\&    );
.Ve
.PP
Provides a detailed view of what nodes contain which shards, the state and
size of each shard.
.PP
Query string parameters:
    \f(CW\*(C`bytes\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat shards docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-shards.html>
for more information.
.ie n .SS """snapshots()"""
.el .SS "\f(CWsnapshots()\fP"
.IX Subsection "snapshots()"
.Vb 3
\&    say $e\->cat\->snapshots(
\&        repository => \*(Aqrepository\*(Aq | \e@repositories # optional
\&    )
.Ve
.PP
Provides a list of all snapshots that belong to the specified repositories.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`ignore_unavailable\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat snapshots docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-snapshots.html>
for more information.
.ie n .SS """tasks()"""
.el .SS "\f(CWtasks()\fP"
.IX Subsection "tasks()"
.Vb 1
\&    say $e\->cat\->tasks()
.Ve
.PP
Provides a list of node-level tasks.
.PP
Query string parameters:
    \f(CW\*(C`actions\*(C'\fR,
    \f(CW\*(C`detailed\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`node_id\*(C'\fR,
    \f(CW\*(C`parent_node\*(C'\fR,
    \f(CW\*(C`parent_task\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat tasks docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html>
for more information.
.ie n .SS """templates()"""
.el .SS "\f(CWtemplates()\fP"
.IX Subsection "templates()"
.Vb 3
\&    say $e\->cat\->templates(
\&        name => $name # optional
\&    )
.Ve
.PP
Provides a list of index templates.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat templates docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/templates.html>
for more information.
.ie n .SS """thread_pool()"""
.el .SS "\f(CWthread_pool()\fP"
.IX Subsection "thread_pool()"
.Vb 3
\&    say $e\->cat\->thread_pool(
\&        index => \*(Aqindex\*(Aq | \e@indices    # optional
\&    );
.Ve
.PP
Shows cluster wide thread pool statistics per node. By default the \f(CW\*(C`active\*(C'\fR,
\&\f(CW\*(C`queue\*(C'\fR and \f(CW\*(C`rejected\*(C'\fR statistics are returned for the \f(CW\*(C`bulk\*(C'\fR, \f(CW\*(C`index\*(C'\fR and
\&\f(CW\*(C`search\*(C'\fR thread pools.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`h\*(C'\fR,
    \f(CW\*(C`help\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`local\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`size\*(C'\fR,
    \f(CW\*(C`s\*(C'\fR,
    \f(CW\*(C`v\*(C'\fR
.PP
See the cat thread_pool docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-thread-pool.html>
for more information.
.SH "AUTHOR"
.IX Header "AUTHOR"
Enrico Zimuel <enrico.zimuel@elastic.co>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Elasticsearch \s-1BV.\s0
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
