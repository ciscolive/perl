.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Generic::Iterator::Element 3"
.TH Module::Generic::Iterator::Element 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Generic::Iterator::Element \- An Array Iterator Element Object Class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\&    my $i = Module::Generic::Iterator\->new( [qw( Joe John Mary )] );
\&    # or also:
\&    my $a = Module::Generic::Array\->new( [qw( Joe John Mary )] );
\&    my $i = $a\->iterator;
\&    while( $i\->has_next )
\&    {
\&        my $elem = $i\->next;
\&        my $value = $elem\->value;
\&        # Get the next element relative to our element
\&        printf( "Next value is: %s at offset %d\en", $elem\->next, $elem\->next\->pos  );
\&    }
.Ve
.SH "VERSION"
.IX Header "VERSION"
.Vb 1
\&    v0.1.0
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an object class for Module::Generic::Iterator::Element objects as returned by various methods of Module::Generic::Iterator.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Provided with an array value (whatever that may be) and an optional hash reference of parameters, and this will create a new iterator and return it.
.PP
Typical parameters are:
.IP "\fIparent\fR" 4
.IX Item "parent"
This is the Module::Generic::Iterator object and it is required.
.SS "has_next"
.IX Subsection "has_next"
Returns true if there is another item after the current one.
.SS "has_prev"
.IX Subsection "has_prev"
Returns true if there is another item before the current one.
.SS "next"
.IX Subsection "next"
Returns the next Module::Generic::Iterator::Element object relative to this object or undef if there are no more element.
.SS "parent"
.IX Subsection "parent"
Sets or gets a Module::Generic::Iterator object as the parent object for this array element.
.SS "pos"
.IX Subsection "pos"
Returns the position of the object inside the parent array. This is read-only and returns an integer.
.SS "prev"
.IX Subsection "prev"
Returns the previous Module::Generic::Iterator::Element object relative to this object or undef if there are no more previous element.
.SS "value"
.IX Subsection "value"
Return the value of the Module::Generic::Iterator::Element object, whatever that may be.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Module::Generic::Iterator::Element, Module::Generic::Array
.SH "AUTHOR"
.IX Header "AUTHOR"
Jacques Deguest <\fIjack@deguest.jp\fR>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (c) 2000\-2020 \s-1DEGUEST\s0 Pte. Ltd.
.PP
You can use, copy, modify and redistribute this package and associated
files under the same terms as Perl itself.
