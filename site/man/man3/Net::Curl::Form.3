.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Curl::Form 3"
.TH Net::Curl::Form 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Curl::Form \- Form builder for Net::Curl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Net::Curl::Form qw(:constants);
\&
\& my $form = Net::Curl::Form\->new();
\& $form\->add(
\&     CURLFORM_COPYNAME() => $name,
\&     CURLFORM_COPYCONTENTS() => $data
\& );
\& $form\->add(
\&     CURLFORM_COPYNAME() => $filename,
\&     CURLFORM_FILE() => $filename
\& );
\&
\&
\& # most likely use:
\& $easy\->setopt( CURLOPT_HTTPPOST() => $form );
\&
\& # serialize
\& my $serial = $form\->get();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module lets you build multipart/form\-data \s-1HTTP POST.\s0 When finished it can
be either supplied to Net::Curl::Easy handle or serialized manually.
Net::Curl::Form does not export by default anything, but constants can be
exported upon request.
.PP
.Vb 1
\& use Net::Curl::Form qw(:constants);
.Ve
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "new( [\s-1BASE\s0] )" 4
.IX Item "new( [BASE] )"
Creates new Net::Curl::Form object. If \s-1BASE\s0 is specified it will be used
as object base, otherwise an empty hash will be used. \s-1BASE\s0 must be a valid
reference which has not been blessed already. It will not be used by the
object.
.Sp
.Vb 1
\& my $form = Net::Curl::Form\->new( [qw(my very private data)] );
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "add( CURLFORM_option => \s-1DATA, ...\s0 )" 4
.IX Item "add( CURLFORM_option => DATA, ... )"
Adds new section to form object. See \fBcurl_formadd\fR\|(3) <https://curl.haxx.se/libcurl/c/curl_formadd.html> for more info.
.Sp
Unlike in libcurl function, there is no need to add \s-1CURLFORM_END\s0 as the last
argument.
.Sp
On error this method dies with \*(L"Net::Curl::Form::Code\*(R" error object.
.Sp
Buffer and name options automatibally set their length values
so there is no need to set length even if there is a \s-1NUL\s0
character in the data. If you want to shorten the buffer CURLFORM_*LENGTH
options must be set inmediatelly after their buffer option, otherwise
an \s-1CURL_FORMADD_OPTION_TWICE\s0 exception will occur.
.Sp
.Vb 10
\& $form\->add(
\&     CURLFORM_COPYNAME() => "name",
\&     CURLFORM_COPYCONTENTS() => "content\e0binary"
\& );
\& $form\->add(
\&     CURLFORM_PTRNAME() => "name",
\&     CURLFORM_NAMELENGTH() => 2,
\&     CURLFORM_PTRCONTENTS() => "content",
\&     CURLFORM_CONTENTSLENGTH() => 4,
\& );
\& $form\->add(
\&     CURLFORM_COPYNAME, "htmlcode",
\&     CURLFORM_COPYCONTENTS, "<HTML></HTML>",
\&     CURLFORM_CONTENTTYPE, "text/html"
\& );
\& $form\->add(
\&     CURLFORM_COPYNAME, "picture",
\&     CURLFORM_FILE, "my\-face.jpg"
\& );
\& $form\->add(
\&     CURLFORM_COPYNAME, "picture",
\&     CURLFORM_FILE, "my\-face.jpg",
\&     CURLFORM_CONTENTTYPE, "image/jpeg"
\& );
\& $form\->add(
\&     CURLFORM_COPYNAME, "picture",
\&     CURLFORM_FILE, "my\-face.jpg",
\&     CURLFORM_FILE, "your\-face.jpg",
\& );
\& $form\->add(
\&     CURLFORM_COPYNAME, "filecontent",
\&     CURLFORM_FILECONTENT, ".bashrc"
\& );
.Ve
.IP "get( [\s-1BUFFER / FH / USERDATA\s0], [\s-1CALLBACK\s0] )" 4
.IX Item "get( [BUFFER / FH / USERDATA], [CALLBACK] )"
Use it to serialize the form object. Normally there is no need to use it
because Net::Curl::Easy will serialize it while uploading data.
.Sp
There are multiple ways to perform serialization:
.RS 4
.IP "direct" 4
.IX Item "direct"
With no arguments a scalar is returned.
.Sp
.Vb 1
\& my $serial = $form\->get();
.Ve
.IP "write to file handle" 4
.IX Item "write to file handle"
If there is only one argument and it is a \s-1GLOB\s0 or a \s-1GLOB\s0 reference,
serialized contents will be written to that file handle.
.Sp
.Vb 2
\& open my $file, ">", "post.txt";
\& $form\->get( $file );
.Ve
.IP "write to buffer" 4
.IX Item "write to buffer"
If there is only one argument and it is writable, serialized contents
will be concatenated to it.
.Sp
.Vb 2
\& my $serial;
\& $form\->get( $serial );
\&
\& # same as above
\& $form\->get( \e$serial );
.Ve
.IP "use a callback" 4
.IX Item "use a callback"
With two arguments, second one must be a function that will be called for
serialization. First argument is a user data that will be passed to that
function.
.Sp
The callback will receive three arguments: form object, data buffer and
user data. It must return the length of the data buffer, otherwise
serialization will be aborted.
.Sp
.Vb 3
\& sub cb_serial
\& {
\&     my ( $form, $data, $uservar ) = @_;
\&
\&     # do anything you want
\&
\&     return length $data;
\& }
\& $form\->get( "userdata", \e&cb_serial );
.Ve
.RE
.RS 4
.Sp
Calls \fBcurl_formget\fR\|(3) <https://curl.haxx.se/libcurl/c/curl_formget.html>. Rethrows exceptions from callbacks.
.RE
.SS "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
None of those functions are exported, you must use fully qualified names.
.IP "strerror( [\s-1WHATEVER\s0], \s-1CODE\s0 )" 4
.IX Item "strerror( [WHATEVER], CODE )"
Return a string for error code \s-1CODE.\s0
String is extracted from error constant name.
.Sp
.Vb 3
\& my $message = Net::Curl::Form\->strerror(
\&     Net::Curl::Form::CURL_FORMADD_OPTION_TWICE
\& );
.Ve
.SS "\s-1CONSTANTS\s0"
.IX Subsection "CONSTANTS"
.IP "CURLFORM_*" 4
.IX Item "CURLFORM_*"
Most of those constants can be used in \fBadd()\fR method. Currently \s-1CURLFORM_STREAM\s0
and \s-1CURLFORM_ARRAY\s0 are not supported. Others will behave in the way described
in \fBcurl_formadd\fR\|(3) <https://curl.haxx.se/libcurl/c/curl_formadd.html>.
.IP "CURL_FORMADD_*" 4
.IX Item "CURL_FORMADD_*"
If \fBadd()\fR fails it will return one of those values.
.SS "\s-1CALLBACKS\s0"
.IX Subsection "CALLBACKS"
Callback for \fBget()\fR is described already in \*(L"use a callback\*(R" subsection.
.SS "Net::Curl::Form::Code"
.IX Subsection "Net::Curl::Form::Code"
Net::Curl::Form \fBadd()\fR method on failure throws a Net::Curl::Form::Code error
object. It has both numeric value and, when used as string, it calls \fBstrerror()\fR
function to display a nice message.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Curl
Net::Curl::Easy
\&\fBcurl_formadd\fR\|(3) <https://curl.haxx.se/libcurl/c/curl_formadd.html>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2011\-2015 Przemyslaw Iskra <sparky at pld\-linux.org>.
.PP
You may opt to use, copy, modify, merge, publish, distribute and/or sell
copies of the Software, and permit persons to whom the Software is furnished
to do so, under the terms of the \s-1MPL\s0 or the MIT/X\-derivate licenses. You may
pick one of these licenses.
