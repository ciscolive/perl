.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Device::Modem::Log::File 3"
.TH Device::Modem::Log::File 3 "2020-06-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Device::Modem::Log::File \- Text files logging plugin for Device::Modem class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Device::Modem;
\&
\&  my $box = Device::Modem\->new( log => \*(Aqfile\*(Aq, ... );
\&  my $box = Device::Modem\->new( log => \*(Aqfile,name=/tmp/mymodem.log\*(Aq, ... );
\&  ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is meant for an example log class to be hooked to \f(CW\*(C`Device::Modem\*(C'\fR
to provide one's favourite logging mechanism.
You just have to implement your own \f(CW\*(C`new()\*(C'\fR, \f(CW\*(C`write()\*(C'\fR and \f(CW\*(C`close()\*(C'\fR methods.
.PP
Default text file is \f(CW\*(C`/tmp/modem.log\*(C'\fR. On Windows platforms, this
goes into \f(CW\*(C`%TEMP%/modem.log\*(C'\fR or \f(CW\*(C`%TMP%/modem.log\*(C'\fR, whichever is defined.
By default, if the folder of the log file does not exist, it is created.
.PP
This class is loaded automatically by \f(CW\*(C`Device::Modem\*(C'\fR class when an object
is instantiated, and it is the \fBdefault\fR logging mechanism for
\&\f(CW\*(C`Device::Modem\*(C'\fR class.
.PP
Normally, you should \fBnot\fR need to use this class directly, because there
are many other zillions of modules that do logging better than this.
.PP
Also, it should be pondered whether to replace \f(CW\*(C`Device::Modem::Log::File\*(C'\fR
and mates with those better classes in a somewhat distant future.
.SS "\s-1REQUIRES\s0"
.IX Subsection "REQUIRES"
Device::Modem
.SS "\s-1EXPORTS\s0"
.IX Subsection "EXPORTS"
None
.SH "AUTHOR"
.IX Header "AUTHOR"
Cosimo Streppone, cosimo@cpan.org
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(C) 2002 Cosimo Streppone, <cosimo@cpan.org>
.PP
This library is free software; you can only redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Device::Modem
Device::Modem::Log::Syslog
