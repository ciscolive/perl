.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::ExpandNetwork 3"
.TH Infoblox::DHCP::ExpandNetwork 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::ExpandNetwork \- Join or Expand an existing network
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Expanding/Joining multiple networks into a larger network is the opposite of spliting a network. You can select a network and expand it into a larger network with smaller netmask.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 7
\& #Constructor a DHCP Expand Network object
\& my $expand_network = Infoblox::DHCP::ExpandNetwork\->new (
\&        network                 => $Network|$IPv6Network, #Required
\&        prefix                  => $num,                  #Required
\&        auto_create_reversezone => "true" | "false",      #Optional / Default is "false"
\&        option_delete_ea        => "RETAIN" | "REMOVE",   #Optional / Default is "REMOVE"
\&     );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session that you can apply to a \s-1DHCP\s0 ExpandNetwork object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to expand an existing network on the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # construct the network to be expanded
\& my $network = Infoblox::DHCP::Network\->new(
\&          network => "123.0.0.0/16",
\&            );
\&
\& # construct a Expand Network object
\& my $expand_network = Infoblox::DHCP::ExpandNetwork\->new (
\&         network                 => $network,
\&         prefix                  => "13",
\&         auto_create_reversezone => "false"
\& );
\&
\& # Submit the Expand network operation.
\& $session\->add($expand_network);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute value of a Expand Network.
.SS "auto_create_reversezone( )"
.IX Subsection "auto_create_reversezone( )"
.RS 4
Use this method to set the auto_create_reversezone flag. When set, this flag will automatically create reverse-mapping zones for the subnet.
.Sp
Include the specified parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set auto_create_reversezone flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set auto_create_reversezone
\& $split_network\->auto_create_reversezone("true");
.Ve
.RE
.RS 4
.RE
.SS "network( )"
.IX Subsection "network( )"
.RS 4
Use this method to specify the network to be expanded.
.Sp
Include the specified parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are either Infoblox::DHCP::Network or Infoblox::DHCP::IPv6Network objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Specify network
\& my $network = Infoblox::DHCP::Network\->new(
\&                      network => "123.0.0.0/16",
\&                      );
\& $expand_network\->network($network);
\&
\& #Specify IPv6 network
\& my $network = Infoblox::DHCP::IPv6Network\->new(
\&                      network => "12::/68",
\&                      );
\& $expand_network\->network($network);
.Ve
.RE
.RS 4
.RE
.SS "option_delete_ea( )"
.IX Subsection "option_delete_ea( )"
.RS 4
Use this method to specify the action for inheritable extensible attributes that exist on descendants if a parent network is deleted.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is \*(L"\s-1RETAIN\*(R"\s0 or \*(L"\s-1REMOVE\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Specify option_delete_ea
\& $expand_network\->option_delete_ea(\*(AqRETAIN\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "prefix( )"
.IX Subsection "prefix( )"
.RS 4
Use this method to specify the appropriate subnet mask to be expanded on the network.
.Sp
Include the specified parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Number with the subnet mask value. This value must be 1 smaller then the subnet mask of the network to be expanded. The minimuim value is 8.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Specify prefix
\& $expand_network\->prefix(13);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to an object such as create, modify, and remove an object. This sample code also includes error handling for the operations.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
#Create network prior to splitting the network
 my \f(CW$network\fR = Infoblox::DHCP::Network\->new(
                             network => \*(L"123.0.0.0/16\*(R",
                             comment => \*(L"add network\*(R",
                             );
 unless($network){
        die(\*(L"Construct network object fail: \*(R",
                \fBInfoblox::status_code()\fR. \*(L":\*(R" .\fBInfoblox::status_detail()\fR);
        }
.PP
.Vb 1
\& print"Network object created successfully.\en";
\&
\& #Verify if the network exists
\& my $object = $session\->get(
\&                object  => "Infoblox::DHCP::Network",
\&                network => "123.0.0.0/16"
\&                );
\& unless($object){
\&        print"Network does not exist on server, safe to add the network.\en";
\&        $session\->add($network)
\&                or die("Add network failed: ",
\&                        $session\->status_code(). ":" .$session\->status_detail());
\&        }
\&
\& print"Network added successfully.\en";
.Ve
.PP
\&\fB#Expand the network\fR
.PP
.Vb 9
\& my $expand_network = Infoblox::DHCP::ExpandNetwork\->new (
\&                         network                 => $network,
\&                         prefix                  => "13",
\&                         auto_create_reversezone => "false",
\&                       );
\& unless($expand_network){
\&        die("Construct expand network object fail: ",
\&                Infoblox::status_code(). ":" .Infoblox::status_detail());
\&        }
\&
\& print"Expand network object created successfully.\en";
\&
\& #Expand the network
\& $session\->add( $expand_network )
\&          or die("Expand network fail:",
\&                     $session\->status_code(). ":" .$session\->status_detail());
\&
\& print "Expand network successfully.\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBadd()\fR, Infoblox::DHCP::Network
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
