.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::DHCP::Info::Obj 3"
.TH Net::DHCP::Info::Obj 3 "2009-03-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DHCP::Info::Obj \- Storage module for dhcp\-information
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains methods that can access the data \f(CW\*(C`Net::DHCP::Info\*(C'\fR
has extracted. It inherits from \f(CW\*(C`NetAddr::IP\*(C'\fR, so it provides all the methods
from that package as well.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::DHCP::Info::Obj;
\&
\&    my $ip  = "127.0.0.1";
\&    my $obj = Net::DHCP::Info::Obj\->new($ip);
\&
\&    $obj\->mac("aa:b:02:3d:0:01");
\&
\&    print $obj\->mac; # prints the above mac
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "binding"
.IX Subsection "binding"
Returns the dhcp leases binding.
.SS "circuit_id"
.IX Subsection "circuit_id"
Returns the dhcp leases circuit id.
.SS "hostname"
.IX Subsection "hostname"
Returns the client-hostname
.SS "mac"
.IX Subsection "mac"
Returns the dhcp leases mac.
.SS "range"
.IX Subsection "range"
Returns a list of ranges in a subnet in this format:
.PP
[$low_ip, \f(CW$high_ip\fR]
.SS "remote_id"
.IX Subsection "remote_id"
Returns the dhcp leases remote id.
.SS "routers"
.IX Subsection "routers"
Returns a list of routers in a subnet.
.SS "add_range"
.IX Subsection "add_range"
.SS "starts"
.IX Subsection "starts"
.SS "starts_datetime"
.IX Subsection "starts_datetime"
Returns the dhcp leases start time as string / DateTime object.
.SS "ends"
.IX Subsection "ends"
.SS "ends_datetime"
.IX Subsection "ends_datetime"
Returns the dhcp leases end time as string / DateTime object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jan Henning Thorsen, \f(CW\*(C`<pm at flodhest.net>\*(C'\fR
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2007 Jan Henning Thorsen, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
