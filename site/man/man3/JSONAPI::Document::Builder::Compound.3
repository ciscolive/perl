.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "JSONAPI::Document::Builder::Compound 3"
.TH JSONAPI::Document::Builder::Compound 3 "2019-01-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JSONAPI::Document::Builder::Compound \- Compound Resource Document builder
.SH "VERSION"
.IX Header "VERSION"
version 2.4
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Builds a compound resource document, which is essentially a resource
document with all of its relationships and attributes.
.SS "relationships"
.IX Subsection "relationships"
ArrayRef of relationships to include. This
is populated by the \f(CW\*(C`include\*(C'\fR param of
a \s-1JSON API\s0 request.
.SS "primary_relationships, nested_relationships"
.IX Subsection "primary_relationships, nested_relationships"
Primary relationships are those belonging directly to \f(CW\*(C`row\*(C'\fR,
while nested relationships is an ArrayRef of HashRefs as follows:
.PP
.Vb 1
\& [ { primary_related => [qw/primary relationships for primary_related/] }, { ... } ]
.Ve
.PP
Where primary_related is the relationship for \f(CW\*(C`row\*(C'\fR, and
its associated ArrayRef contains relationships for it.
.SS "build_document : HashRef"
.IX Subsection "build_document : HashRef"
Builds a HashRef for the primary resource document.
.PP
When \f(CW\*(C`relationships\*(C'\fR is populated, will include
a relationships entry in the document, populated
with related links and identifiers.
.SS "build_relationships : ArrayRef"
.IX Subsection "build_relationships : ArrayRef"
Builds an ArrayRef containing all given relationships.
These relationships are built with their attributes.
.ie n .SS "build_nested_relationship(Str $primary, Str $relationship, ArrayRef $fields, HashRef $options?) : Array"
.el .SS "build_nested_relationship(Str \f(CW$primary\fP, Str \f(CW$relationship\fP, ArrayRef \f(CW$fields\fP, HashRef \f(CW$options\fP?) : Array"
.IX Subsection "build_nested_relationship(Str $primary, Str $relationship, ArrayRef $fields, HashRef $options?) : Array"
Uses build_relationship with the rows related resource as
the \f(CW\*(C`row\*(C'\fR argument so the builder can find the relationship.
