.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::View 3"
.TH Infoblox::DNS::View 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::View \- DNS View object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1DNS\s0 views provide the ability to serve one version of \s-1DNS\s0 data to one set of clients and another version to another set of clients. With \s-1DNS\s0 views, the Infoblox appliance can provide a different answer to the same \s-1DNS\s0 query, depending on the source of the query. When the \s-1DNS\s0 view is not specified, all objects are automatically associated with the default \s-1DNS\s0 view.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $view = Infoblox::DNS::View\->new(
\&     name                     => $string,                                                                            #Required
\&     blacklist_action         => "REDIRECT" | "REFUSE",                                                              #Optional / Default is "REFUSE"
\&     blacklist_log_query      => "true" | "false",                                                                   #Optional / Default is "false"
\&     blacklist_redirect_addresses => [$ipv4addr, ... ],                                                              #Optional / Default is undefined
\&     blacklist_redirect_ttl   => $num,                                                                               #Optional / Default is 60
\&     blacklist_rulesets       => [ $rulesetname1, $rulesetname2, ...],                                               #Optional / Default is undefined
\&     comment                  => $string,                                                                            #Optional / Default is empty
\&     custom_root_name_servers => [$RootNameServer1, $RootNameServer2, ...],                                          #Optional / Default is undefined
\&     disable                  => "true" | "false",                                                                   #Optional / Default "false"
\&     dns64_groups             => [$group1, $group2, ... ],                                                           #Optional / Default is undefined
\&     dnssec_enabled           => "true" | "false" | undef,                                                           #Optional / Default is undefined
\&     dnssec_expired_signatures_enabled => "true" | "false",                                                          #Optional / Default is "false"
\&     dnssec_validation_enabled         => "true" | "false",                                                          #Optional / Default is "true"
\&     dnssec_blacklist_enabled => "true" | "false",                                                                   #Optional / Default is "false"
\&     dnssec_negative_trust_anchors => $strig_array                                                                   #Optional / Default value is undefined
\&     dnssec_dns64_enabled     => "true" | "false",                                                                   #Optional / Default is "false"
\&     dnssec_nxdomain_enabled  => "true" | "false",                                                                   #Optional / Default is "false"
\&     dnssec_rpz_enabled       => "true" | "false",                                                                   #Optional / Default is "false"
\&     dnssec_trusted_keys               => [$key1, $key2, ...]                                                        #Optional / Default is undefined
\&     enable_blacklist         => "true" | "false" | undef,                                                           #Optional / Default is undefined
\&     enable_dns64             => "true" | "false" | undef,                                                           #Optional / Default is undefined
\&     enable_match_recursive_only => "true" | "false"                                                                 #Optional / Default is "false"
\&     enable_fixed_rrset_order_fqdns => "true" | "false" | undef,                                                     #Optional / Default is undefined
\&     extattrs                 => { $string => $extattr, ... },                                                       #Optional / Default is undefined
\&     extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... },                     #Optional / Default is undefined
\&     filter_aaaa              => "YES" | "NO" | "BREAK_DNSSEC",                                                      #Optional / Default is "NO"
\&     filter_aaaa_list         => [$ipv4addr | $ipv4_subnet/prefix | ...] | $nacl,                                    #Optional / Default is undefined
\&     fixed_rrset_order_fqdns  => [$fqdn1, $fqdn2],                                                                   #Optional / Default is undefined
\&     forwarders               => [ $ipv4addr, ...],                                                                  #Optional / Default is undefined
\&     forward_only             => "true" | "false" | undef,                                                           #Optional / Default is undefined
\&     match_clients            => [$ipv4addr | $ipv4_subnet/prefix | $ipv6addr |
\&                                  $ipv6_subnet/prefix | "any" | $TSIGKey ...] | $nacl,                               #Optional / Default is undefined
\&     match_destinations       => [$ipv4addr | $ipv4_subnet/prefix | $ipv6addr |
\&                                  $ipv6_subnet/prefix | "any" | $TSIGKey ...] | $nacl,                               #Optional / Default is undefined
\&     max_cache_ttl            => $uint,                                                                              #Optional / Default is 604800 seconds
\&     max_ncache_ttl           => $uint,                                                                              #Optional / Default is 10800 seconds
\&     network_view             => $Object,                                                                            #Optional / Default is "default" network view
\&     notify_delay             => $num,                                                                               #Optional / Default is undefined
\&     override_dnssec          => "true"| "false",                                                                    #Optional / Default is "false"
\&     override_blacklist       => "true" | "false",                                                                   #Optional / Default is "false"
\&     override_dns64           => "true" | "false",                                                                   #Optional / Default is "false"
\&     override_filter_aaaa     => "true" | "false",                                                                   #Optional / Default is "false"
\&     override_fixed_rrset_order_fqdns => "true", "false",                                                            #Optional / Default is "false"
\&     override_forwarders      => "true" | "false",                                                                   #Optional / Default is "false"
\&     override_max_cache_ttl   => "true" | "false",                                                                   #Optional / Default is "false"
\&     override_max_ncache_ttl  => "true" | "false",                                                                   #Optional / Default is "false"
\&     override_nxdomain_redirect => "true"| "false",                                                                  #Optional / Default is "false"
\&     override_rpz_qname_wait_recurse => "true" | "false",                                                            #Optional / Default is "false"
\&     override_sortlist        => "true"| "false",                                                                    #Optional / Default is "false"
\&     recursion                => "true" | "false",                                                                   #Optional / Default "false"
\&     rpz_qname_wait_recurse   => "true" | "false",                                                                   #Optional / Default is undefined
\&     scavenging_settings     => $scavenging_settings,                                                              #Optional
\&     sortlist                 => [ $sortlist1, $sortlist2, ...],                                                     #Optional / Default is undefined
\&     use_root_name_servers    => "true" | "false",                                                                   #Optional / Default "false"
\&     nxdomain_redirect        => "true" | "false",                                                                   #Optional / Default is "false"
\&     nxdomain_redirect_addresses => [$ipv4addr, ...],                                                                #Optional / Default is undefined
\&     nxdomain_redirect_addresses_ipv6 => [$ipv6addr, ...],                                                                #Optional / Default is undefined
\&     nxdomain_redirect_ttl    => $num                                                                                #Optional / Default is 60
\&     nxdomain_log_query       => "true" | "false",                                                                   #Optional / Default is "false"
\&     nxdomain_rulesets        => [$reulesetname1, $reulesetname2, ...]                                               #Optional / Default is undefined
\&     lame_ttl                 => $uint,                                                                              #Optional / Default is 600
\&     override_lame_ttl        => "true" | "false",                                                                   #Optional / Default is "false"
\&     response_rate_limiting   => $response_rate_limiting                                                             #Optional / Default is undefined
\&     ddns_restrict_patterns_list        => [$string, $string, ...],                                                  #Optional / Default is undefined
\&     ddns_restrict_patterns             => "true" | "false",                                                         #Optional / Default is \*(Aqfalse\*(Aq
\&     ddns_restrict_static               => "true" | "false",                                                         #Optional / Default is \*(Aqfalse\*(Aq
\&     ddns_restrict_protected            => "true" | "false",                                                         #Optional / Default is \*(Aqfalse\*(Aq
\&     ddns_restrict_secure               => "true" | "false",                                                         #Optional / Default is \*(Aqfalse\*(Aq
\&     ddns_principal_tracking            => "true" | "false",                                                         #Optional / Default is \*(Aqfalse\*(Aq
\&     ddns_principal_group               => $principal_group,                                                         #Optional / Default is undefined
\&     ddns_force_creation_timestamp_update     => "true" | "false",                                                         #Optional / Default is \*(Aqfalse\*(Aq   
\&     override_ddns_patterns_restriction => "true" | "false",                                                         #Optional / Default is \*(Aqfalse\*(Aq
\&     override_ddns_restrict_static      => "true" | "false",                                                         #Optional / Default is \*(Aqfalse\*(Aq
\&     override_ddns_restrict_protected   => "true" | "false",                                                         #Optional / Default is \*(Aqfalse\*(Aq
\&     override_ddns_principal_security   => "true" | "false",                                                         #Optional / Default is \*(Aqfalse\*(Aq
\&     override_ddns_force_creation_timestamp_update => "true" | "false",                                                    #Optional / Default is \*(Aqfalse\*(Aq
\&     override_scavenging_settings                  => "true" | "false",                                                    #Optional / Default is \*(Aqfalse\*(Aq
\&     override_rpz_drop_ip_rule                     => "true" | "false" | undef,                                            #Optional / Default is "false"
\&     rpz_drop_ip_rule_enabled                      => "true" | "false" | undef,                                            #Optional / Default is "false"
\&     rpz_drop_ip_rule_min_prefix_length_ipv4       => $uint | undef,                                                       #Optional / Default is 29
\&     rpz_drop_ip_rule_min_prefix_length_ipv6       => $uint | undef,                                                       #Optional / Default is 112
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session that you can apply to a \s-1DNS\s0 view object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DNS\s0 view object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.Sp
If you have applied an access control list to an object, you must restart services after you update the access control list for the changes to take effect. See Infoblox::Session\->\fBrestart()\fR method.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #create member
\& my $member1 = Infoblox::DNS::Member\->new(
\&     name     => "member.com",
\&     ipv4addr => "192.168.1.2",
\&     lead     => "false",
\&     stealth  => "false"
\& );
\&
\& #create keys
\& my $key1 = Infoblox::DNS::TSIGKey\->new(
\&     name => "tsig_xfer",
\&     key  => ":2xCOMPAT"
\& );
\&
\& my $tsig_key2 = $session\->gen_tsig_key();
\&
\& my $key2 = Infoblox::DNS::TSIGKey\->new(
\&     name => "key2",
\&     key  => $tsig_key2
\& );
\&
\& #create view object using members
\& my $firstview = Infoblox::DNS::View\->new(
\&     name              => "internal",
\&     match_clients     => ["1.1.1.1", $key1 , "10.0.0.0/8", $key2],
\&     recursion         => "true",
\&     disable           => "false",
\&     comment           => "new Internal view"
\&     )
\&     or die(qq(constructor for view internal failed: ),
\&     join(":", Infoblox::status_code(), Infoblox::status_detail()));
\&
\& #Add a  View through session
\& $session\->add($firstview);
\& unless ($firstview) {
\&           die("add view internal failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve an existing \s-1DNS\s0 view object from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
Apply the following attributes to get a specific \s-1DNS\s0 view object:
.Sp
.Vb 3
\& name \- Optional. A name in string format.
\& extattrs     \- Optional. A hash reference containing extensible attributes.
\& extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #get view object from session
\& my @result = $session\->get(
\&     object => "Infoblox::DNS::View",
\&     name   => "internal"
\& );
\&
\& my $firstview = $result[0];
\&
\& # get all DNS view objects with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::View",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DNS\s0 view object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.Sp
If you have applied an access control list to an object, you must restart services after you update the access control list for the changes to take effect. See Infoblox::Session\->\fBrestart()\fR method.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use method to modify the comment for view object.
\& $firstview\->comment("new comment internal view");
\& # Submit modification
\& my $response = $session\->modify($firstview);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this function to submit to remove a \s-1DNS\s0 view object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
\&\fB#Remove an object with a unique name\fR
.Sp
.Vb 4
\&  my @result = $session\->search(object => "Infoblox::DNS::View", name => "^internal\e$");
\&  my $firstview = $result[0];
\&  #Submit for removal
\&  my $response = $session\->remove($firstview);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for an existing \s-1DNS\s0 view object in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
Apply the following attributes to search for a \s-1DNS\s0 view object:
.Sp
.Vb 3
\& name    \- Optional. A name in string format (regular expression).
\& extattrs     \- Optional. A hash reference containing extensible attributes.
\& extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Search for a DNS view by name
\& my @result = $session\->search(object => "Infoblox::DNS::View", name => "^internal\e$");
\&
\& # search for DNS views with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DNS::View",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute value of a \s-1DNS\s0 view object.
.SS "blacklist_action( )"
.IX Subsection "blacklist_action( )"
.RS 4
Use this method to specify the action to perform when a domain name matches the pattern defined in a rule that is specified by the blacklist_ruleset method.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1REDIRECT\*(R"\s0 or \*(L"\s-1REFUSE\*(R".\s0 The default value is \*(L"\s-1REFUSE\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 4
\&  #Get blacklist_action
\&  my $blacklist_action = $firstview\->blacklist_action();
\&  #Modify blacklist_action
\&  $firstview\->blacklist_action("REDIRECT");
.Ve
.RE
.RS 4
.RE
.SS "blacklist_log_query( )"
.IX Subsection "blacklist_log_query( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether blacklist redirection queries are logged.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable logging, or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get blacklist_log_query
\&   my $blacklist_log_query = $firstview\->nxdomain_log_query( );
\&   #Modify blacklist_log_query
\&   $firstview\->blacklist_log_query("true");
.Ve
.RE
.RS 4
.RE
.SS "blacklist_redirect_addresses( )"
.IX Subsection "blacklist_redirect_addresses( )"
.RS 4
Use this method to specify the \s-1IP\s0 addresses the appliance includes in the response it sends in place of a blacklisted \s-1IP\s0 address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of IPv4 addresses. The default value is undefined.
.Sp
Setting this parameter to [\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"] or [], implicitly sets the override_blacklist_redirect attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the member-level blacklist redirection settings and automatically sets the override_blacklist_redirect attribute to \*(L"false\*(R" if \*(L"enable_blacklist_redirect\*(R" is also undefined. But if \*(L"enable_blacklist_redirect\*(R" contains a value, then the override_blacklist_redirect attribute is set to \*(L"true\*(R".
.Sp
Note that when blacklist_redirect_addresses contains a valid array reference and override_blacklist_redirect is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->blacklist_redirect_addresses([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); \f(CW$firstview\fR\->override_blacklist_redirect(\*(L"false\*(R"); sets override_blacklist_redirect to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_blacklist_redirect(\*(L"false\*(R"); \f(CW$firstview\fR\->blacklist_redirect_addresses([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); sets override_blacklist_redirect to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get blacklist_redirect_addresses
\&   my $blacklist_redirect_addresses = $firstview\->blacklist_redirect_addresses( );
\&   #Modify blacklist_redirect_addresses
\&   $firstview\->blacklist_redirect_addresses(["10.0.0.10", "10.0.0.20"]);
.Ve
.RE
.RS 4
.RE
.SS "blacklist_redirect_ttl( )"
.IX Subsection "blacklist_redirect_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1TTL\s0 value of the synthetic \s-1DNS\s0 responses that result from blacklist redirection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer, from 0 to 4294967295, that represents the \s-1TTL\s0 in seconds. The default value is 60.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get blacklist_redirect_ttl
\&   my $blacklist_redirect_ttl = $firstview\->blacklist_redirect_ttl( );
\&   #Modify blacklist_redirect_ttl
\&   $firstview\->blacklist_redirect_ttl(60);
.Ve
.RE
.RS 4
.RE
.SS "blacklist_rulesets( )"
.IX Subsection "blacklist_rulesets( )"
.RS 4
Use this method to specify or retrieve Infoblox::DNS::Ruleset object names assigned at the grid level for blacklist redirection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains the names of the Infoblox::DNS::Ruleset objects assigned to the grid. The names must be in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get blacklist_rulesets
\&   my $blacklist_rulesets = $firstview\->blacklist_rulesets();
\&   #Modify blacklist_rulesets
\&   $firstview\->blacklist_rulesets(["ruleset1", "ruleset2"]);
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to retrieve cloud \s-1API\s0 related information for the Infoblox::DNS::View object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get cloud_info
\& my $cloud_info = $object\->cloud_info();
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $firstview\->comment();
\& #Modify comment
\& $firstview\->comment("modifying the internal view comment");
.Ve
.RE
.RS 4
.RE
.SS "custom_root_name_servers( )"
.IX Subsection "custom_root_name_servers( )"
.RS 4
Use this method to set or retrieve the list of customized root name servers. You can either select and use Internet root name servers or specify custom root name servers by providing a host name and \s-1IP\s0 address to which the Infoblox appliance can send queries.Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::DNS::RootNameServer object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specify a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get custom_root_name_servers
\& my $rootNS_list = $firstview\->custom_root_name_servers();
\& #Modify the root nameserver list
\& #Creating RootNameServer objects.
\& my $rootns1 = Infoblox::DNS::RootNameServer\->new(
\&     ipv4addr  => "4.4.4.4",
\&     host_name => "rns1.test.com",
\&     );
\&
\& my $rootns2 = Infoblox::DNS::RootNameServer\->new(
\&     ipv4addr  => "5.5.5.5",
\&     host_name => "rns2.test.com",
\&     );
\&
\& $firstview\->custom_root_name_servers([$rootns1, $rootns2]);
.Ve
.RE
.RS 4
.RE
.SS "ddns_force_creation_timestamp_update( )"
.IX Subsection "ddns_force_creation_timestamp_update( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the creation timestamp of resource records (\s-1RR\s0) should be updated when \s-1DDNS\s0 update happens even if there is no change to the \s-1RR.\s0
.Sp
Setting this parameter to defined value, implicitly sets the override_ddns_force_creation_timestamp_update attribute to \*(L"true\*(R".
Setting this parameter to undefined causes the appliance to use the Grid-level ddns_force_creation_timestamp_update flag and
automatically sets the override_ddns_force_creation_timestamp_update attribute to \*(L"false\*(R".
.Sp
Note that when ddns_force_creation_timestamp_update contains a value and override_ddns_force_creation_timestamp_update is set to \*(L"false\*(R",
the last operation takes precedence. Thus the sequence
\&\f(CW$object\fR\->ddns_force_creation_timestamp_update(\*(L"true\*(R");
\&\f(CW$object\fR\->override_ddns_force_creation_timestamp_update(\*(L"false\*(R");
sets override_ddns_force_creation_timestamp_update to \*(L"false\*(R", and the sequence
\&\f(CW$object\fR\->override_ddns_force_creation_timestamp_update(\*(L"false\*(R");
\&\f(CW$object\fR\->ddns_force_creation_timestamp_update(\*(L"true\*(R");
sets override_ddns_force_creation_timestamp_update to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to update the creation timestamp of \s-1RR\s0 on every \s-1DDNS\s0 update, and 'false' to update the creation timestamp only when \s-1RR\s0 changes during a \s-1DDNS\s0 update.
The default is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ddns_force_creation_timestamp_update value
\& $value = $object\->ddns_force_creation_timestamp_update();
\&
\& #modify ddns_force_creation_timestamp_update value
\& $object\->ddns_force_creation_timestamp_update(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_patterns_list( )"
.IX Subsection "ddns_restrict_patterns_list( )"
.RS 4
Use this method to set or retrieve an unordered list of restriction patterns for an option of to restrict \s-1DDNS\s0 updates based on \s-1FQDN\s0 patterns.
.Sp
Setting this parameter to any list, implicitly sets the override_ddns_patterns_restriction attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DDNS\s0 update restrictions and automatically sets the override_ddns_patterns_restriction attribute to \*(L"false\*(R" if \*(L"ddns_restrict_patterns\*(R" is also undefined. But if \*(L"ddns_restrict_patterns\*(R" contains a value, then the override_ddns_patterns_restriction attribute is set to \*(L"true\*(R".
.Sp
Note that when ddns_restrict_patterns_list contains a valid array reference and override_ddns_patterns_restriction is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->ddns_restrict_patterns_list([$pattern1, \f(CW$pattern2\fR]); \f(CW$firstview\fR\->override_ddns_patterns_restriction(\*(L"false\*(R"); sets override_ddns_patterns_restriction to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_ddns_patterns_restriction(\*(L"false\*(R"); \f(CW$firstview\fR\->ddns_restrict_patterns_list([$pattern1, \f(CW$pattern2\fR]); sets override_ddns_patterns_restriction to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of FQDNs in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_patterns_list value
\& $ddns_restrict_patterns_list = $firstview\->ddns_restrict_patterns_list();
\&
\& #modify ddns_restrict_patterns_list value
\& $firstview\->ddns_restrict_patterns_list([\*(Aqfoo.com\*(Aq, \*(Aqbar.com\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_patterns( )"
.IX Subsection "ddns_restrict_patterns( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether an option to restrict \s-1DDNS\s0 update request based on \s-1FQDN\s0 patterns is enabled or disabled.
.Sp
Setting this parameter to defined value, implicitly sets the override_ddns_patterns_restriction attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DDNS\s0 update restrictions and automatically sets the override_ddns_patterns_restriction attribute to \*(L"false\*(R" if \*(L"ddns_restrict_patterns_list\*(R" is also undefined. But if \*(L"ddns_restrict_patterns_list\*(R" contains a value, then the override_ddns_patterns_restriction attribute is set to \*(L"true\*(R".
.Sp
Note that when ddns_restrict_patterns contains a value and override_ddns_patterns_restriction is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->ddns_restrict_patterns(\*(L"true\*(R"); \f(CW$firstview\fR\->override_ddns_patterns_restriction(\*(L"false\*(R"); sets override_ddns_patterns_restriction to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_ddns_patterns_restriction(\*(L"false\*(R"); \f(CW$firstview\fR\->ddns_restrict_patterns(\*(L"true\*(R"); sets override_ddns_patterns_restriction to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 update request restriction base on \s-1FQDN\s0 patterns and 'false to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_patterns value
\& $ddns_restrict_patterns = $firstview\->ddns_restrict_patterns();
\&
\& #modify ddns_restrict_patterns value
\& $firstview\->ddns_restrict_patterns(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_static( )"
.IX Subsection "ddns_restrict_static( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether an option to restrict \s-1DDNS\s0 update request to resource records which are marked as '\s-1STATIC\s0' is enabled or disabled.
.Sp
Setting this parameter to defined value, implicitly sets the override_ddns_restrict_static attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the Grid-level ddns_restrict_static flag and automatically sets the override_ddns_restrict_static attribute to \*(L"false\*(R".
.Sp
Note that when ddns_restrict_static contains a value and override_ddns_restrict_static is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->ddns_restrict_static(\*(L"true\*(R"); \f(CW$firstview\fR\->override_ddns_restrict_static(\*(L"false\*(R"); sets override_ddns_restrict_static to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_ddns_restrict_static(\*(L"false\*(R"); \f(CW$firstview\fR\->ddns_restrict_static(\*(L"true\*(R"); sets override_ddns_restrict_static to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 update requests to resource records which are marked as '\s-1STATIC\s0' and 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_static value
\& $ddns_restrict_static = $firstview\->ddns_restrict_static();
\&
\& #modify ddns_restrict_static value
\& $firstview\->ddns_restrict_static(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_protected( )"
.IX Subsection "ddns_restrict_protected( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether an option to restrict \s-1DDNS\s0 update request to protected resource records is enabled or disabled.
.Sp
Setting this parameter to defined value, implicitly sets the override_ddns_restrict_protected attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the Grid-level ddns_restrict_protected flag and automatically sets the override_ddns_restrict_protected attribute to \*(L"false\*(R".
.Sp
Note that when ddns_restrict_protected contains a value and override_ddns_restrict_protected is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->ddns_restrict_protected(\*(L"true\*(R"); \f(CW$firstview\fR\->override_ddns_restrict_protected(\*(L"false\*(R"); sets override_ddns_restrict_protected to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_ddns_restrict_protected(\*(L"false\*(R"); \f(CW$firstview\fR\->ddns_restrict_protected(\*(L"true\*(R"); sets override_ddns_restrict_protected to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 update requests to protected resource records and 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_protected value
\& $ddns_restrict_protected = $firstview\->ddns_restrict_protected();
\&
\& #modify ddns_restrict_protected value
\& $firstview\->ddns_restrict_protected(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_secure( )"
.IX Subsection "ddns_restrict_secure( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether \s-1DDNS\s0 update request for principal other than target resource record's principal is restricted.
.Sp
Setting this parameter to a defined value, implicitly sets the override_ddns_principal_security attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DDNS\s0 principal security setting and automatically sets the override_ddns_principal_security attribute to \*(L"false\*(R" if \*(L"ddns_principal_tracking\*(R" and \*(L"ddns_principal_group\*(R" are also undefined. But if \*(L"ddns_principal_tracking\*(R" or \*(L"ddns_principal_group\*(R" contains a value, then the override_ddns_principal_security attribute is set to \*(L"true\*(R".
.Sp
Note that when ddns_restrict_secure contains a value and override_ddns_principal_security is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->ddns_restrict_secure(\*(L"true\*(R"); \f(CW$firstview\fR\->override_ddns_principal_security(\*(L"false\*(R"); sets override_ddns_principal_security to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_ddns_principal_security(\*(L"false\*(R"); \f(CW$firstview\fR\->ddns_restrict_secure(\*(L"true\*(R"); sets override_ddns_principal_security to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 update requests restriction for principal other than target resource record's principal and 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_secure value
\& $ddns_restrict_secure = $firstview\->ddns_restrict_secure();
\&
\& #modify ddns_restrict_secure value
\& $firstview\->ddns_restrict_secure(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_principal_tracking( )"
.IX Subsection "ddns_principal_tracking( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether the \s-1DDNS\s0 principal track is enabled or disabled.
.Sp
\&\s-1DDNS\s0 principal tracking includes putting principal name into resource record affected by update.
.Sp
Setting this parameter to a defined value, implicitly sets the override_ddns_principal_security attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DDNS\s0 principal security setting and automatically sets the override_ddns_principal_security attribute to \*(L"false\*(R" if \*(L"ddns_restrict_secure\*(R" and \*(L"ddns_principal_group\*(R" are also undefined. But if \*(L"ddns_restrict_secure\*(R" or \*(L"ddns_principal_group\*(R" contains a value, then the override_ddns_principal_security attribute is set to \*(L"true\*(R".
.Sp
Note that when ddns_principal_tracking contains a value and override_ddns_principal_security is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->ddns_principal_tracking(\*(L"true\*(R"); \f(CW$firstview\fR\->override_ddns_principal_security(\*(L"false\*(R"); sets override_ddns_principal_security to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_ddns_principal_security(\*(L"false\*(R"); \f(CW$firstview\fR\->ddns_principal_tracking(\*(L"true\*(R"); sets override_ddns_principal_security to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 principal tracking and 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_principal_tracking value
\& $ddns_principal_tracking = $firstview\->ddns_principal_tracking();
\&
\& #modify ddns_principal_tracking value
\& $firstview\->ddns_principal_tracking(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_principal_group( )"
.IX Subsection "ddns_principal_group( )"
.RS 4
Use this method to set or retrieve the \s-1DDNS\s0 principal group.
.Sp
Setting this parameter to a defined value, implicitly sets the override_ddns_principal_security attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DDNS\s0 principal security setting and automatically sets the override_ddns_principal_security attribute to \*(L"false\*(R" if \*(L"ddns_restrict_secure\*(R" and \*(L"ddns_principal_tracking\*(R" are also undefined. But if \*(L"ddns_restrict_secure\*(R" or \*(L"ddns_principal_tracking\*(R" contains a value, then the override_ddns_principal_security attribute is set to \*(L"true\*(R".
.Sp
Note that when ddns_principal_group contains a value and override_ddns_principal_security is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->ddns_principal_group($principal_group); \f(CW$firstview\fR\->override_ddns_principal_security(\*(L"false\*(R"); sets override_ddns_principal_security to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_ddns_principal_security(\*(L"false\*(R"); \f(CW$firstview\fR\->ddns_principal_group($principal_group); sets override_ddns_principal_security to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::DNS::DDNS::PrincipalCluster::Group object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_principal_group value
\& $ddns_principal_group = $firstview\->ddns_principal_group();
\&
\& #modify ddns_principal_group value
\& $firstview\->ddns_principal_group($principal_group);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DNS\s0 view object.
.Sp
Include the specific parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false; therefore, the \s-1DNS\s0 view is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $firstview\->disable();
\& #Modify disable
\& $firstview\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "dns64_groups( )"
.IX Subsection "dns64_groups( )"
.RS 4
Use this method to set or retrieve the list of \s-1DNS64\s0 synthesis groups associated with this \s-1DNS\s0 view.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_dns64 method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid \s-1DNS\s0 default and automatically resets the override_dns64 method to \*(L"false\*(R".
.Sp
Note that when dns64_groups is set to a defined value and override_dns64_groups is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->dns64_groups([$group1]); \f(CW$object\fR\->override_dns64(\*(L"false\*(R"); will set override_dns64 to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_dns64([$group1]); \f(CW$object\fR\->dns64_groups(\*(L"testdomain\*(R"); will result in override_dns64=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::Grid::DNS::DNS64Group objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the list of DNS64 synthesis groups
\& my $dns64_groups_list = $firstview\->dns64_groups();
\&
\& #Modify it
\& my $group = $session\->get(
\&                         object => "Infoblox::Grid::DNS::DNS64Group"),
\&                         name => "groupname",
\&                         prefix => "groupprefix",
\&                       );
\& $firstview\->dns64_groups([$group]);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_enabled( )"
.IX Subsection "dnssec_enabled( )"
.RS 4
Use this method to enable/disable the \s-1DNS\s0 security extension.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to enable the \s-1DNS\s0 security extension. Set it to \*(L"false\*(R" to disable the feature.
.Sp
Setting this parameter to \*(L"true\*(R"/\*(L"false\*(R" implicitly sets the override_dnssec attribute to \*(L"true\*(R".
Setting the parameter to undefined causes the appliance to use the member-level \s-1DNS\s0 security settings and automatically resets the override_dnssec attribute to \*(L"false\*(R".
.Sp
Note that in the case when dnssec_enabled is set to \*(L"true\*(R"/\*(L"false\*(R" and override_dnssec is set to \*(L"false\*(R" simultaneously,
the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->dnssec_enabled(\*(L"false\*(R"); \f(CW$firstview\fR\->override_dnssec(\*(L"false\*(R");
will set override_dnssec to \*(L"false\*(R", and the sequence   \f(CW$firstview\fR\->override_dnssec(\*(L"false\*(R"); \f(CW$firstview\fR\->dnssec_enabled(\*(L"false\*(R"); will result in override_dnssec=\*(L"true\*(R".
.Sp
The default value of the parameter is undefined, which means the \s-1DNS\s0 view inherits the member-level settings.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get dnssec_enabled
\& my $dnssec_enabled = $firstview\->dnssec_enabled();
\& #Modify dnssec_enabled
\& $firstview\->dnssec_enabled("true");
\& #Set the value to undefined to inherit the member\-level settings.
\& $firstview\->dnssec_enabled(undef);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_expired_signatures_enabled( )"
.IX Subsection "dnssec_expired_signatures_enabled( )"
.RS 4
Use this method to control whether \s-1DNS\s0 accepts expired signatures.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to accept expired signatures. Set it to \*(L"false\*(R" to reject expired signatures.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_expired_signatures_enabled
\& my $dnssec_expired_signatures_enabled = $firstview\->dnssec_expired_signatures_enabled();
\& #Modify dnssec_expired_signatures_enabled
\& $firstview\->dnssec_expired_signatures_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_validation_enabled( )"
.IX Subsection "dnssec_validation_enabled( )"
.RS 4
Use this method to enable/disable \s-1DNS\s0 security validation.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to enable the validation. Set the parameter to \*(L"false\*(R" to disable the validation.
.Sp
The default value of the parameter is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_validation_enabled
\& my $dnssec_validation_enabled = $firstview\->dnssec_validation_enabled();
\& #Modify dnssec_validation_enabled
\& $firstview\->dnssec_validation_enabled("false");
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_blacklist_enabled()\fP"
.IX Subsection "dnssec_blacklist_enabled()"
.RS 4
Use this method to enable and disable blacklist rules for DNSSEC-enabled clients.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to apply blacklist rules for DNSSEC-enabled clients. Set to \*(L"false\*(R" to disable them.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_blacklist_enabled
\& my $dnssec_blacklist_enabled = $firstview\->dnssec_blacklist_enabled();
\& #Modify dnssec_blacklist_enabled
\& $firstview\->dnssec_blacklist_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_negative_trust_anchors( )"
.IX Subsection "dnssec_negative_trust_anchors( )"
.RS 4
Use this method to set or retrieve the list of zone for which the appliance does not perform \s-1DNSSEC\s0 validation.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of strings that contains the list of zone for which the appliance does not perform \s-1DNSSEC\s0 validation.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_negative_trust_anchors value
\& my $value = $view\->dnssec_negative_trust_anchors();
\& #Modify dnssec_negative_trust_anchors value
\& $view\->dnssec_negative_trust_anchors($zones);
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_dns64_enabled()\fP"
.IX Subsection "dnssec_dns64_enabled()"
.RS 4
Use this method to enable and disable \s-1DNS64\s0 groups for DNSSEC-enabled clients.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to apply \s-1DNS64\s0 groups for DNSSEC-enabled clients. Set to \*(L"false\*(R" to disable them.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_dns64_enabled
\& my $dnssec_dns64_enabled = $grid_dns\->dnssec_dns64_enabled();
\& #Modify dnssec_dns64_enabled
\& $grid_dns\->dnssec_dns64_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_nxdomain_enabled()\fP"
.IX Subsection "dnssec_nxdomain_enabled()"
.RS 4
Use this method to enable and disable \s-1NXDOMAIN\s0 rules for DNSSEC-enabled clients.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to apply \s-1NXDOMAIN\s0 rules for DNSSEC-enabled clients. Set to \*(L"false\*(R" to disable them.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_nxdomain_enabled
\& my $dnssec_nxdomain_enabled = $firstview\->dnssec_nxdomain_enabled();
\& #Modify dnssec_nxdomain_enabled
\& $firstview\->dnssec_nxdomain_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_rpz_enabled()\fP"
.IX Subsection "dnssec_rpz_enabled()"
.RS 4
Use this method to enable and disable \s-1RPZ\s0 policies for DNSSEC-enabled clients.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to apply \s-1RPZ\s0 policies for DNSSEC-enabled clients. Set to \*(L"false\*(R" to disable them.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_rpz_enabled
\& my $dnssec_rpz_enabled = $firstview\->dnssec_rpz_enabled();
\& #Modify dnssec_rpz_enabled
\& $firstview\->dnssec_rpz_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_trusted_keys( )"
.IX Subsection "dnssec_trusted_keys( )"
.RS 4
Use this method to specify the list of trusted keys for the \s-1DNS\s0 security extension.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference that contains a list of Infoblox::DNS::DnssecTrustedKey objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns a reference to a list of the trusted keys.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get dnssec_trusted_keys
\& my $dnssec_trusted_keys = $firstview\->dnssec_trusted_keys();
\& #Modify dnssec_trusted_keys
\& my $key1=Infoblox::DNS::DnssecTrustedKey\->new(
\&    fqdn => "myzone.com",
\&    algorithm => "RSAMD5",
\&    key       => "c2ltcGxlIGtleQo="
\&    );
\& $firstview\->dnssec_trusted_keys([$key1]);
.Ve
.RE
.RS 4
.RE
.SS "enable_blacklist( )"
.IX Subsection "enable_blacklist( )"
.RS 4
Use this method to enable or disable a blacklist in a \s-1DNS\s0 view.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_blacklist flag or \*(L"false\*(R" to deactivate/unset it. The default is \*(L"false\*(R".
.Sp
Setting this parameter to \*(L"true\*(R" or \*(L"false\*(R" implicitly sets the override_blacklist attribute to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the member-level blacklist settings and automatically sets the override_blacklist attribute to \*(L"false\*(R" if \*(L"blacklist_redirect_addresses\*(R" is also undefined.
.Sp
Note that when enable_blacklist is set to \*(L"true\*(R"/\*(L"false\*(R" and override_blacklist is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->enable_blacklist(\*(L"false\*(R"); \f(CW$firstview\fR\->override_blacklist(\*(L"false\*(R"); sets override_blacklist to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_blacklist(\*(L"false\*(R"); \f(CW$firstview\fR\->enable_blacklist(\*(L"false\*(R"); sets override_blacklist to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting enable_blacklist
\&   my $enable_blacklist = $firstview\->enable_blacklist( );
\&   #Modifying enable_blacklist
\&   $firstview\->enable_blacklist("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_dns64( )"
.IX Subsection "enable_dns64( )"
.RS 4
Use this method to enable/disable \s-1DNS64\s0 support for this view.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_dns64 method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid \s-1DNS\s0 default and automatically resets the override_dns64 method to \*(L"false\*(R".
.Sp
Note that when enable_dns64 is set to a defined value and override_enable_dns64 is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->enable_dns64(\*(L"true\*(R"); \f(CW$object\fR\->override_dns64(\*(L"false\*(R"); will set override_dns64 to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_dns64(\*(L"true\*(R"); \f(CW$object\fR\->enable_dns64(\*(L"testdomain\*(R"); will result in override_dns64=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_dns64 flag or \*(L"false\*(R" to deactivate and unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the enable_dns64 flag
\& my $enable_dns64 = $firstview\->enable_dns64();
\& #Modify the enable_dns64 flag
\& $firstview\->enable_dns64("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_match_recursive_only( )"
.IX Subsection "enable_match_recursive_only( )"
.RS 4
Use this method to enable or disable the match-recursive-only setting for a \s-1DNS\s0 View on the member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable 'match\-recursive\-only' setting or 'false' to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get enable_match_recursive_only value
\& my $enable_match_recursive_only = $firstview\->enable_match_recursive_only();
\&
\& #modify enable_match_recursive_only value
\& $firstview\->enable_match_recursive_only(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_fixed_rrset_order_fqdns( )"
.IX Subsection "enable_fixed_rrset_order_fqdns( )"
.RS 4
Use this method to enable or disable fixed RRset order for specified FQDNs.
.Sp
Setting this method to a defined value implicitly sets the override_fixed_rrset_order_fqdns method to \*(L"true\*(R".
.Sp
Note that when enable_fixed_rrset_order_fqdns is set to a defined value and override_fixed_rrset_order_fqdns is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->enable_fixed_rrset_order_fqdns(\*(L"true\*(R"); \f(CW$object\fR\->override_fixed_rrset_order_fqdns(\*(L"false\*(R"); will set override_fixed_rrset_order_fqdns to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_fixed_rrset_order_fqdns(\*(L"false\*(R"); \f(CW$object\fR\->enable_fixed_rrset_order_fqdns(\*(L"true\*(R"); will result in override_fixed_rrset_order_fqdns=\*(L"true\*(R".
.Sp
The enable_fixed_rrset_order_fqdns attribute can be specified explicitly. It is also set implicitly when fixed_rrset_order_fqdns is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable fixed RRset order for specified FQDNs or \*(L"false\*(R" to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_fixed_rrset_order_fqdns flag
\& my $enable_fixed_rrset_order_fqdns = $firstview\->enable_fixed_rrset_order_fqdns();
\& #Modify enable_fixed_rrset_order_fqdns flag
\& $firstview\->enable_fixed_rrset_order_fqdns("true");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS\s0 view object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $firstview\->extattrs();
\& #Modify extattrs
\& $firstview\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS\s0 view object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $firstview\->extensible_attributes();
\& #Modify extensible attributes
\& $firstview\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "filter_aaaa( )"
.IX Subsection "filter_aaaa( )"
.RS 4
Use this method to set or retrieve the type of \s-1AAAA\s0 filtering for this \s-1DNS\s0 view object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Specifying values in this parameter, such as \*(L"\s-1YES\*(R",\s0 implicitly sets the override_filter_aaaa attribute to \*(L"true\*(R". Setting this parameter and the \*(L"filter_aaaa\*(R" attribute to undefined causes the appliance to use the grid-level filter_aaaa settings and automatically sets the override_filter_aaaa attribute to \*(L"false\*(R". But if the \*(L"filter_aaaa\*(R" attribute contains a value, then the override_filter_aaaa attribute is set to \*(L"true\*(R".
.Sp
Note that when filter_aaaa contains a valid value and override_filter_aaaa is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->filter_aaaa(\*(L"\s-1YES\*(R"\s0); \f(CW$firstview\fR\->override_filter_aaaa(\*(L"false\*(R"); sets override_filter_aaaa to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_filter_aaaa(\*(L"false\*(R"); \f(CW$firstview\fR\->filter_aaaa(\*(L"true\*(R"); sets override_filter_aaaa to \*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1YES\*(R", \*(L"NO\*(R"\s0 and \*(L"\s-1BREAK_DNSSEC\*(R".\s0 The default value is \*(L"\s-1NO\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the filter aaaa type
\& my $filter_aaaa = $firstview\->filter_aaaa();
\& #Modify the filtering
\& $firstview\->filter_aaaa("YES");
.Ve
.RE
.RS 4
.RE
.SS "filter_aaaa_list( )"
.IX Subsection "filter_aaaa_list( )"
.RS 4
Use this method to set or retrieve the list of IPv4 addresses and networks from which queries are received. \s-1AAAA\s0 filtering is applied to these addresses. This setting overrides the grid filter_aaaa_list if override_filter_aaaa is set to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Specifying values in this parameter, such as [\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"] or [], implicitly sets the override_filter_aaaa attribute to \*(L"true\*(R". Setting this parameter and the \*(L"filter_aaaa\*(R" attribute to undefined causes the appliance to use the grid-level filter_aaaa settings and automatically sets the override_filter_aaaa attribute to \*(L"false\*(R". But if the \*(L"filter_aaaa\*(R" attribute contains a value, then the override_filter_aaaa attribute is set to \*(L"true\*(R".
.Sp
Note that when filter_aaaa_list contains a valid array reference and override_filter_aaaa is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->filter_aaaa_list([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); \f(CW$firstview\fR\->override_filter_aaaa(\*(L"false\*(R"); sets override_filter_aaaa to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_filter_aaaa(\*(L"false\*(R"); \f(CW$firstview\fR\->filter_aaaa_list([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); sets override_filter_aaaa to \*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4 \s-1IP\s0 addresses and networks. To return \s-1AAAA\s0 records for queries received from an IPv4 client, add \*(L"!\*(R" as the prefix to the \s-1IP\s0 addresses and networks. Specify \*(L"any\*(R" to allow \s-1AAAA\s0 records to be returned for any query received by an IPv4 client.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\&    #Getting filter_aaaa_list
\&    my $filter_aaaa_list = $firstview\->filter_aaaa_list( );
\&    #Modifying filter_aaaa_list
\&    $firstview\->filter_aaaa_list(["any"]);
\&    #Modifying filter_aaaa_list
\&    $firstview\->filter_aaaa_list(["10.0.0.10", "20.0.0.0/24", "!"."30.0.0.30", "!"."40.10.0.0/24"]);
\&    #Use Grid::DNS level filter_aaaa_list
\&    $firstview\->filter_aaaa_list(undef);
\&    $firstview\->enable_filter_aaaa(undef);
\&    #Use Infoblox::Grid::NamedACL object
\&    $firstview\->filter_aaaa_list($nacl);
.Ve
.RE
.RS 4
.RE
.SS "fixed_rrset_order_fqdns( )"
.IX Subsection "fixed_rrset_order_fqdns( )"
.RS 4
Use this method to set or retrieve configuration for fixed \s-1RRSET\s0 order for specified FQDNs.
.Sp
Setting this method to a defined value implicitly sets the enable_fixed_rrset_order_fqdns and override_fixed_rrset_order_fqdns methods to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to disable fixed RRset order of FQDNs and automatically resets the enable_fixed_rrset_order_fqdns method to \*(L"false\*(R".
.Sp
Note that when fixed_rrset_order_fqdns is set to a defined value and enable_fixed_rrset_order_fqdns is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->fixed_rrset_order_fqdns($fqdns); \f(CW$object\fR\->enable_fixed_rrset_order_fqdns(\*(L"false\*(R"); will set enable_fixed_rrset_order_fqdns to \*(L"false\*(R", and the sequence \f(CW$object\fR\->enable_fixed_rrset_order_fqdns(\*(L"false\*(R"); \f(CW$object\fR\->fixed_rrset_order_fqdns($fqdns); will result in enable_fixed_rrset_order_fqdns=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::Grid::DNS::FixedRRSetOrderFQDN objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the fixed_rrset_order_fqdns list
\& my $fixed_rrset_order_fqdns = $firstview\->fixed_rrset_order_fqdns();
\& #Modify the fixed_rrset_order_fqdns list
\& $firstview\->fixed_rrset_order_fqdns([$fqdn1, $fqdn2]);
.Ve
.RE
.RS 4
.RE
.SS "forwarders( )"
.IX Subsection "forwarders( )"
.RS 4
Use this method to specify forwarders for the \s-1DNS\s0 view. A forwarder is essentially a name server to which other name servers first send all of their off-site queries. The forwarder builds up a cache of information, avoiding the need for the other name servers to send queries off-site. This setting overrides the grid-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::DNS::Member, Infoblox::DNS::Nameserver object(s), or \s-1IP\s0 addresses.
.Sp
Specifying values in this parameter, for example [\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"] or [], implicitly sets the override_forwarders attribute to \*(L"true\*(R". Setting this parameter and the \*(L"forward_only\*(R" attribute to undefined causes the appliance to use the member-level forwarders setting and automatically sets the override_forwarders attribute to \*(L"false\*(R". But if the \*(L"forward_only\*(R" attribute contains a value, then the override_forwarders attribute is set to \*(L"true\*(R".
.Sp
Note that when forwarders_redirect_addresses contains a valid array reference and override_forwarders is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->forwarders([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); \f(CW$firstview\fR\->override_forwarders(\*(L"false\*(R"); sets override_forwarders to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_forwarders(\*(L"false\*(R"); \f(CW$firstview\fR\->forwarders([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); sets override_forwarders to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting forwarders
\&   $firstview\->forwarders( );
\&   #Modifying forwarders
\&   $firstview\->forwarders( [ "10.0.0.10" ] );
.Ve
.RE
.RS 4
.RE
.SS "forward_only( )"
.IX Subsection "forward_only( )"
.RS 4
Use this method to configure this view to send queries to forwarders only. When the value is \*(L"true\*(R", the queries are sent to forwarders only, and not to other internal or Internet root servers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to use forwarders only or \*(L"false\*(R" to use forwarders and root servers.  The default is \*(L"false\*(R"
.Sp
Setting this parameter to \*(L"true\*(R" or \*(L"false\*(R" implicitly sets the override_forwarders attribute to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the member-level forwarders settings and automatically sets the override_forwarders attribute to \*(L"false\*(R" if \*(L"forwarders\*(R" is also undefined.
.Sp
Note that when forward_only is set to \*(L"true\*(R"/\*(L"false\*(R" and override_forwarders is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->forward_only(\*(L"false\*(R"); \f(CW$firstview\fR\->override_forwarders(\*(L"false\*(R"); sets override_forwarders to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_forwarders(\*(L"false\*(R"); \f(CW$firstview\fR\->forward_only(\*(L"false\*(R"); sets override_forwarders to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get forward_only
\&   $firstview\->forward_only( );
\&   #Modify forward_only
\&   $firstview\->forward_only("true");
.Ve
.RE
.RS 4
.RE
.SS "match_clients( )"
.IX Subsection "match_clients( )"
.RS 4
Use this method to set or retrieve the  match_clients list. This list specifies \s-1IP\s0 addresses, networks and/or \s-1TSIG\s0 keys of the clients that are allowed or denied access to the \s-1DNS\s0 view.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses or networks. To deny access to \s-1IP\s0 addresses and/or networks, add \*(L"!\*(R" as a prefix to \s-1IP\s0 addresses and/or networks. Specify \*(L"any\*(R" to allow access to any client. To allow access to a client authorized by a \s-1TSIG\s0 key, use Infoblox::DNS::TSIGKey objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get match_clients
\& my $clients = $firstview\->match_clients();
\& #Modify match_clients
\& $firstview\->match_clients(["any"]);
\&
\& #Specifying TSIG keys
\& my $tsig_key3 = $session\->gen_tsig_key();
\& my $key3 = Infoblox::DNS::TSIGKey\->new(
\&     name => "key3",
\&     key  => $tsig_key3
\& );
\& #Modify match_clients
\& $firstview\->match_clients(["10.0.0.10" , $key3, "20.0.0.0/24" ,"2001::123a","2003::222/64","!"."30.0.0.30" , "!"."40.10.0.0/24","!"."2004::125b","!"."2006::34bc"]);
\& #Use Infoblox::Grid::NamedACL
\& $firstview\->match_clients($nacl);
.Ve
.RE
.RS 4
.RE
.SS "match_destinations( )"
.IX Subsection "match_destinations( )"
.RS 4
Use this method to set or retrieve the  match_destinations list. This list specifies \s-1IP\s0 addresses, networks and/or \s-1TSIG\s0 keys of the clients that are allowed or denied access to the \s-1DNS\s0 view.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses or networks. To deny access to \s-1IP\s0 addresses and/or networks, add \*(L"!\*(R" as a prefix to \s-1IP\s0 addresses and/or networks. Specify \*(L"any\*(R" to allow access to any client. To allow access to a client authorized by a \s-1TSIG\s0 key, use Infoblox::DNS::TSIGKey objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get match_destinations
\& my $clients = $firstview\->match_destinations();
\& #Modify match_destinations
\& $firstview\->match_destinations(["any"]);
\&
\& #Specifying TSIG keys
\& my $tsig_key3 = $session\->gen_tsig_key();
\& my $key3 = Infoblox::DNS::TSIGKey\->new(
\&     name => "key3",
\&     key  => $tsig_key3
\& );
\& #Modify match_destinations
\& $firstview\->match_destinations(["10.0.0.10" , $key3, "20.0.0.0/24" ,"2001::123a","2003::222/64","!"."30.0.0.30" , "!"."40.10.0.0/24","!"."2004::125b","!"."2006::34bc"]);
\& #Use Infoblox::Grid::NamedACL
\& $firstview\->match_destinations($nacl);
.Ve
.RE
.RS 4
.RE
.SS "max_cache_ttl( )"
.IX Subsection "max_cache_ttl( )"
.RS 4
Use this method to set or retrieve the maximum time (in seconds) for which the server will cache positive answers.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The maximum time is specified in seconds. The default value is 604800.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get max_cache_ttl
\& my $max_cache_ttl = $firstview\->max_cache_ttl();
\& #Modify max_cache_ttl
\& $firstview\->max_cache_ttl(400);
.Ve
.RE
.RS 4
.RE
.SS "max_ncache_ttl( )"
.IX Subsection "max_ncache_ttl( )"
.RS 4
Use this method to set or retrieve the maximum time (in seconds) for which the server will cache negative (\s-1NXDOMAIN\s0) responses.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The maximum time is specified in seconds. The default value is 10800. The maximum allowed value is 604800.
.Sp
Setting this parameter implicitle sets the override_max_ncache_ttl attribute to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid-level settings and automatically sets the override_max_ncache_ttl attribute to \*(L"false\*(R".
.Sp
Note that when max_ncache_ttl is set and override_max_ncache_ttl is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->max_ncache_ttl(10800); \f(CW$firstview\fR\->override_max_ncache_ttl(\*(L"false\*(R"); sets override_max_ncache_ttl to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_max_ncache_ttl(\*(L"false\*(R"); \f(CW$firstview\fR\->max_ncache_ttl(30600); sets override_max_ncache_ttl to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get max_ncache_ttl
\& my $max_ncache_ttl = $firstview\->max_ncache_ttl();
\& #Modify max_ncache_ttl
\& $firstview\->max_ncache_ttl(400);
.Ve
.RE
.RS 4
.RE
.SS "lame_ttl( )"
.IX Subsection "lame_ttl( )"
.RS 4
Use this method to set or retrieve the number of seconds to cache lame delegations or lame servers.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The number of seconds to cache lame delegations or lame servers. The default value is 600.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lame_ttl
\& my $lame_ttl = $firstview\->lame_ttl();
\& #Modify lame_ttl
\& $firstview\->lame_ttl(700);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to configure or retrieve the name of a \s-1DNS\s0 view.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Name of the \s-1DNS\s0 view in string format. It has a maximum of 64 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $firstview\->name();
\& #Modify name
\& $firstview\->name("external");
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the network view object associated with this \s-1DNS\s0 view object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The value should be a reference of defined Infoblox::DHCP::View objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specify a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get network_view
\&   my $useRootNS = $firstview\->network_view( );
\&   #Modify network_view
\&   $firstview\->use_root_name_servers($network_view);
.Ve
.RE
.RS 4
.RE
.SS "notify_delay( )"
.IX Subsection "notify_delay( )"
.RS 4
Use this method to specify with how many seconds of delay the notify messages are sent to secondaries.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integer between 5 and 86400, inclusive. Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting notify_delay
\&   my $notify_delay = $firstview\->notify_delay( );
\&   #Modifying notify_delay
\&   $firstview\->notify_delay(5);
.Ve
.RE
.RS 4
.RE
.SS "override_blacklist( )"
.IX Subsection "override_blacklist( )"
.RS 4
The \*(L"override_blacklist\*(R" attribute controls whether the \*(L"enable_blacklist\*(R", \*(L"blacklist_redirect_addresses\*(R", \*(L"blacklist_redirect_ttl\*(R", \*(L"blacklist_log_query\*(R", and \*(L"blacklist_rulesets\*(R" values in the database are used.
.Sp
The \*(L"override_blacklist\*(R" attribute can be specified explicitly. It is also set implicitly as follows: \*(L"enable_blacklist\*(R" => \*(L"true\*(R"|\*(L"false\*(R" or \*(L"blacklist_redirect_addresses\*(R" => [\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]|[] results in \*(L"override_blacklist\*(R" => \*(L"true\*(R", \*(L"enable_blacklist\*(R" => undef and \*(L"blacklist_redirect_addresses\*(R" => undef results in \*(L"override_blacklist\*(R" => \*(L"false\*(R". If \*(L"override_blacklist\*(R" is specified explicitly as \*(L"true\*(R", and \*(L"enable_blacklist\*(R" => undef or \*(L"blacklist_redirect_addresses\*(R" => undef, then the explicit value takes precedence. Therefore, \*(L"override_blacklist\*(R"=>\*(L"true\*(R", \*(L"enable_blacklist\*(R"=>undef, and \*(L"blacklist_redirect_addresses\*(R"=>undef remain unchanged in the database.
.Sp
Specifying the \*(L"blacklist_redirect_ttl\*(R", \*(L"blacklist_log_query\*(R", or \*(L"blacklist_rulesets\*(R" attributes does not affect the \*(L"override_blacklist\*(R" value. It is implicitly set only by \*(L"enable_blacklist\*(R" and \*(L"blacklist_redirect_addresses\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the member-level settings of the blacklist redirect attributes. Set the parameter to \*(L"false\*(R" to inherit the member-level settings. The default is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get override_blacklist
\&   my $override_blacklist=$firstview\->override_blacklist( );
\&   #Modify override_blacklist
\&   $firstview\->override_blacklist("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_force_creation_timestamp_update( )"
.IX Subsection "override_ddns_force_creation_timestamp_update( )"
.RS 4
The override_ddns_force_creation_timestamp_update attribute controls whether the ddns_force_creation_timestamp_update method value of the \s-1DNS\s0 View is used, instead of the Grid default.
.Sp
The override_ddns_force_creation_timestamp_update attribute can be specified explicitly. It is also set implicitly when ddns_force_creation_timestamp_update is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for ddns_force_creation_timestamp_update. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for ddns_force_creation_timestamp_update.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get override_ddns_force_creation_timestamp_update value
\& my $value = $object\->override_ddns_force_creation_timestamp_update();
\&
\& #Modify override_ddns_force_creation_timestamp_update value
\& $object\->override_ddns_force_creation_timestamp_update("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_patterns_restriction( )"
.IX Subsection "override_ddns_patterns_restriction( )"
.RS 4
The override_ddns_patterns_restriction attribute controls whether the ddns_restrict_patterns_list and ddns_restrict_patterns methods values of the \s-1DNS\s0 View are used, instead of the Grid default.
.Sp
The override_ddns_patterns_restriction attribute can be specified explicitly. It is also set implicitly when ddns_restrict_patterns_list or ddns_restrict_patterns is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for ddns_restrict_patterns_list and ddns_restrict_patterns. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for ddns_restrict_patterns_list and ddns_restrict_patterns.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_ddns_patterns_restriction
\& my $override_ddns_patterns_restriction = $firstview\->override_ddns_patterns_restriction();
\& #Modify override_ddns_patterns_restriction
\& $firstview\->override_ddns_patterns_restriction("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_restrict_static( )"
.IX Subsection "override_ddns_restrict_static( )"
.RS 4
The override_ddns_restrict_static attribute controls whether the ddns_restrict_static method value of the \s-1DNS\s0 View is used, instead of the Grid default.
.Sp
The override_ddns_restrict_static attribute can be specified explicitly. It is also set implicitly when ddns_restrict_static is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for ddns_restrict_static. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for ddns_restrict_static.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_ddns_restrict_static
\& my $override_ddns_restrict_static = $firstview\->override_ddns_restrict_static();
\& #Modify override_ddns_restrict_static
\& $firstview\->override_ddns_restrict_static("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_restrict_protected( )"
.IX Subsection "override_ddns_restrict_protected( )"
.RS 4
The override_ddns_restrict_protected attribute controls whether the ddns_restrict_protected method value of the \s-1DNS\s0 View is used, instead of the Grid default.
.Sp
The override_ddns_restrict_protected attribute can be specified explicitly. It is also set implicitly when ddns_restrict_protected is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for ddns_restrict_protected. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for ddns_restrict_protected.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_ddns_restrict_protected
\& my $override_ddns_restrict_protected = $firstview\->override_ddns_restrict_protected();
\& #Modify override_ddns_restrict_protected
\& $firstview\->override_ddns_restrict_protected("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_principal_security( )"
.IX Subsection "override_ddns_principal_security( )"
.RS 4
The override_ddns_principal_security attribute controls whether the ddns_restrict_secure, ddns_principal_tracking and ddns_principal_group methods values of the \s-1DNS\s0 View are used, instead of the Grid default.
.Sp
The override_ddns_principal_security attribute can be specified explicitly. It is also set implicitly when ddns_restrict_secure, ddns_principal_tracking or ddns_principal_group is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for ddns_restrict_secure, ddns_principal_tracking and ddns_principal_group. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for ddns_restrict_secure, ddns_principal_tracking and ddns_principal_group.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_ddns_principal_security
\& my $override_ddns_principal_security = $firstview\->override_ddns_principal_security();
\& #Modify override_ddns_principal_security
\& $firstview\->override_ddns_principal_security("true");
.Ve
.RE
.RS 4
.RE
.SS "override_dns64( )"
.IX Subsection "override_dns64( )"
.RS 4
The override_dns64 attribute controls whether the \s-1DNS64\s0 method values in this \s-1DNS\s0 view are used, instead of the grid default.
.Sp
The override_dns64 attribute can be specified explicitly. It is also set implicitly when enable_dns64 or dns64_groups are set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for enable_dns64 and dns64_groups. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for enable_dns64 and dns64_groups.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_dns64
\&    my $override_dns64=$firstview\->override_dns64( );
\&    #Modifying override_dns64
\&    $firstview\->override_dns64("true");
.Ve
.RE
.RS 4
.RE
.SS "override_dnssec( )"
.IX Subsection "override_dnssec( )"
.RS 4
The override_dnssec attribute controls whether the dnssec_enabled, dnssec_validation_enabled,
dnssec_expired_signatures_enabled, and dnssec_trusted_keys values in the
database are used.
.Sp
The override_dnssec attribute can be specified explicitly. It is also established
implicitly as follows:
    \*(L"dnssec_enabled\*(R" => \*(L"true\*(R"|\*(L"false\*(R" results in \*(L"override_dnssec\*(R" => \*(L"true\*(R"
    \*(L"dnssec_enabled\*(R" => undef results in \*(L"override_dnssec\*(R" => \*(L"false\*(R"
If the override_dnssec attribute is specified explicitly as \*(L"true\*(R", while dnssec_enabled=>undef,
the explicit value takes precedence, and override_dnssec=>\*(L"true\*(R" while
dnssec_enabled remains unchanged in the \s-1DB.\s0
.Sp
Supplying the dnssec_validation_enabled, dnssec_expired_signatures_enabled, or
dnssec_trusted_keys attributes does not affect the override_dnssec value. It is
implicitly affected only by dnssec_enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the member-level setting of the \s-1DNSSEC\s0 attributes. Set the parameter to \*(L"false\*(R" to inherit the grid-member level settings of DNSSec.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_dnssec
\&    my $override_dnssec=$firstview\->override_dnssec( );
\&    #Modifying override_dnssec
\&    $firstview\->override_dnssec("true");
.Ve
.RE
.RS 4
.RE
.SS "override_filter_aaaa( )"
.IX Subsection "override_filter_aaaa( )"
.RS 4
The override_filter_aaaa attribute controls whether the \s-1AAAA\s0 filter method values of the view are used, instead of the grid default.
.Sp
The override_filter_aaaa attribute can be specified explicitly. It is also set implicitly when filter_aaaa or filter_aaaa_list are set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for filter_aaaa and filter_aaaa_list. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for filter_aaaa and filter_aaaa_list.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_filter_aaaa
\&    my $override_filter_aaaa=$firstview\->override_filter_aaaa( );
\&    #Modifying override_filter_aaaa
\&    $firstview\->override_filter_aaaa("true");
.Ve
.RE
.RS 4
.RE
.SS "override_fixed_rrset_order_fqdns( )"
.IX Subsection "override_fixed_rrset_order_fqdns( )"
.RS 4
The override_fixed_rrset_order_fqdns controls whether the enable_fixed_rrset_order_fqdns and fixed_rrset_order_fqdns values in the database are used.
.Sp
The override_fixed_rrset_order_fqdns can be specified explicitly. It is also set implicitly as follows: enable_fixed_rrset_order_fqdns => \*(L"true\*(R" | \*(L"false\*(R" or fixed_rrset_order_fqdns => \f(CW$fqdns\fR results in override_fixed_rrset_order_fqdns => \*(L"true\*(R";
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-leval fixed RRset order settings. Set the parameter to \*(L"false\*(R" to inherit the Grid-level settings. The default is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_fixed_rrset_order_fqdns flag
\& my $override_fixed_rrset_order_fqdns = $firstview\->override_fixed_rrset_order_fqdns();
\& #Modify override_fixed_rrset_order_fqdns flag
\& $firstview\->override_fixed_rrset_order_fqdns("true");
.Ve
.RE
.RS 4
.RE
.SS "override_forwarders( )"
.IX Subsection "override_forwarders( )"
.RS 4
The \*(L"override_forwarders\*(R" attribute controls whether the \*(L"forward_only\*(R" and \*(L"forwarders\*(R" values in the database are used.
.Sp
The \*(L"override_forwarders\*(R" attribute can be specified explicitly. It is also set implicitly as follows: \*(L"forward_only\*(R" => \*(L"true\*(R"|\*(L"false\*(R" or \*(L"forwarders\*(R" => [\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]|[] results in \*(L"override_forwarders\*(R" => \*(L"true\*(R"; \*(L"forward_only\*(R" => undef and \*(L"forwarders\*(R" => undef result in \*(L"override_forwarders\*(R" => \*(L"false\*(R". If \*(L"override_forwarders\*(R" is specified explicitly as \*(L"true\*(R", and \*(L"forward_only\*(R" => undef or \*(L"forwarders\*(R" => undef, then the explicit value takes precedence. Therefore, \*(L"override_forwarders\*(R"=>\*(L"true\*(R", \*(L"forward_only\*(R"=>undef, and \*(L"forwarders\*(R"=>undef remain unchanged in the database.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the member-level settings of the forwarders attributes. Set the parameter to \*(L"false\*(R" to inherit the member-level settings. The default is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get override_forwarders
\&   my $override_forwarders=$firstview\->override_forwarders( );
\&   #Modify override_forwarders
\&   $firstview\->override_forwarders("true");
.Ve
.RE
.RS 4
.RE
.SS "override_lame_ttl( )"
.IX Subsection "override_lame_ttl( )"
.RS 4
Use this method to set or retrieve the override_lame_ttl attribute that controls whether the lame_ttl method values of the view are used, instead of the Grid default
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for lame_ttl. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for lame_ttl. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_lame_ttl
\& my $override_lame_ttl = $firstview\->override_lame_ttl();
\& #Modify override_lame_ttl
\& $firstview\->override_lame_ttl(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_max_cache_ttl( )"
.IX Subsection "override_max_cache_ttl( )"
.RS 4
The override_max_cache_ttl attribute controls whether the max_cache_ttl method values of the member are used, instead of the grid default.
.Sp
The override_max_cache_ttl attribute can be specified explicitly. It is also set implicitly when max_cache_ttl is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for max_cache_ttl. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for max_cache_ttl.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_max_cache_ttl
\& my $override_max_cache_ttl = $firstview\->override_max_cache_ttl( );
\& #Modifying override_max_cache_ttl
\& $firstview\->override_max_cache_ttl("true");
.Ve
.RE
.RS 4
.RE
.SS "override_max_ncache_ttl( )"
.IX Subsection "override_max_ncache_ttl( )"
.RS 4
The override_max_ncache_ttl attribute controls whether the max_ncache_ttl method values of the member are used, instead of the Grid default.
.Sp
The override_max_ncache_ttl attribute can be specified explicitly. It is also set implicitly when max_ncache_ttl is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for max_ncache_ttl. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for max_ncache_ttl.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_max_ncache_ttl
\& my $override_max_ncache_ttl = $firstview\->override_max_ncache_ttl( );
\& #Modifying override_max_ncache_ttl
\& $firstview\->override_max_ncache_ttl("true");
.Ve
.RE
.RS 4
.RE
.SS "scavenging_settings( )"
.IX Subsection "scavenging_settings( )"
.RS 4
Use this method to set or retrieve the view-level scavenging settings.
.Sp
Setting this parameter implicitle sets the override_scavenging_settings attribute to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid-level settings and automatically sets the override_scavenging_settings attribute to \*(L"false\*(R".
.Sp
Note that when scavenging_settings is set and override_scavenging_settings is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->scavenging_settings($recl_settings); \f(CW$object\fR\->override_scavenging_settings(\*(L"false\*(R"); sets override_scavenging_settings to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_scavenging_settings(\*(L"false\*(R"); \f(CW$object\fR\->scavenging_settings($recl_settings); sets override_scavenging_settings to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::ScavengingSetting object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get scavenging_settings value
\& my $scavenging_settings = $object\->scavenging_settings();
\&
\& #Modify scavenging_settings value
\& $object\->scavenging_settings($scavenging_settings);
.Ve
.RE
.RS 4
.RE
.SS "override_scavenging_settings( )"
.IX Subsection "override_scavenging_settings( )"
.RS 4
The override_scavenging_settings attribute controls whether the scavenging_settings method values of the \s-1DNS\s0 View are used, instead of the Grid default.
.Sp
The override_scavenging_settings attribute can be specified explicitly. It is also set implicitly when scavenging_settings is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for scavenging_settings. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for scavenging_settings.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get override_scavenging_settings value
\& my $override_scavenging_settings = $object\->override_scavenging_settings( );
\&
\& #Modify override_scavenging_settings value
\& $object\->override_scavenging_settings("true");
.Ve
.RE
.RS 4
.RE
.SS "recursion( )"
.IX Subsection "recursion( )"
.RS 4
Use this method to enable/disable recursion.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the recursion flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get recursion
\& my $recursion = $firstview\->recursion();
\& #Modify recursion
\& $firstview\->recursion("false");
.Ve
.RE
.RS 4
.RE
.SS "rpz_drop_ip_rule_enabled( )"
.IX Subsection "rpz_drop_ip_rule_enabled( )"
.RS 4
Use this method to set or retreive the flag that indicates whether the \s-1DNS\s0 server ignores RPZ-IP triggers with large prefix lengths or not.
.Sp
Setting this method to a defined value implicitly sets the override_rpz_drop_ip_rule method to \*(L"true\*(R". Setting the parameter to undefined if rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 are undefined causes the appliance to use the Grid default and automatically resets the override_rpz_drop_ip_rule attribute to \*(L"false\*(R".
.Sp
Note that when rpz_drop_ip_rule_enabled is set to a defined value and override_rpz_drop_ip_rule is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->rpz_drop_ip_rule_enabled(\*(L"true\*(R"); \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); will set override_rpz_drop_ip_rule to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); \f(CW$object\fR\->rpz_drop_ip_rule_enabled(\*(L"true\*(R"); will result in override_rpz_drop_ip_rule=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable ignoring of RPZ-IP triggers with large prefix lengths or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $firstview\->rpz_drop_ip_rule_enabled();
\& # Modify attribute value
\& $firstview\->rpz_drop_ip_rule_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "rpz_drop_ip_rule_min_prefix_length_ipv4( )"
.IX Subsection "rpz_drop_ip_rule_min_prefix_length_ipv4( )"
.RS 4
Use this method to set or retreive minimum prefix length for IPv4 RPZ-IP triggers.
.Sp
Setting this method to a defined value implicitly sets the override_rpz_drop_ip_rule method to \*(L"true\*(R". Setting the parameter to undefined if rpz_drop_ip_rule_enabled and rpz_drop_ip_rule_min_prefix_length_ipv6 are undefined causes the appliance to use the Grid default and automatically resets the override_rpz_drop_ip_rule attribute to \*(L"false\*(R".
.Sp
Note that when rpz_drop_ip_rule_min_prefix_length_ipv4 is set to a defined value and override_rpz_drop_ip_rule is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->rpz_drop_ip_rule_min_prefix_length_ipv4(\*(L"20\*(R"); \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); will set override_rpz_drop_ip_rule to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); \f(CW$object\fR\->rpz_drop_ip_rule_min_prefix_length_ipv4(\*(L"20\*(R"); will result in override_rpz_drop_ip_rule=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 31 that represents prefix length (in bits) for IPv4 RPZ-IP triggers.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $firstview\->rpz_drop_ip_rule_min_prefix_length_ipv4();
\& # Modify attribute value
\& $firstview\->rpz_drop_ip_rule_min_prefix_length_ipv4("16");
.Ve
.RE
.RS 4
.RE
.SS "rpz_drop_ip_rule_min_prefix_length_ipv6( )"
.IX Subsection "rpz_drop_ip_rule_min_prefix_length_ipv6( )"
.RS 4
Use this method to set or retreive minimum prefix length for IPv6 RPZ-IP triggers.
.Sp
Setting this method to a defined value implicitly sets the override_rpz_drop_ip_rule method to \*(L"true\*(R". Setting the parameter to undefined if rpz_drop_ip_rule_enabled and rpz_drop_ip_rule_min_prefix_length_ipv4 are undefined causes the appliance to use the Grid default and automatically resets the override_rpz_drop_ip_rule attribute to \*(L"false\*(R".
.Sp
Note that when rpz_drop_ip_rule_min_prefix_length_ipv6 is set to a defined value and override_rpz_drop_ip_rule is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->rpz_drop_ip_rule_min_prefix_length_ipv6(\*(L"20\*(R"); \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); will set override_rpz_drop_ip_rule to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); \f(CW$object\fR\->rpz_drop_ip_rule_min_prefix_length_ipv6(\*(L"20\*(R"); will result in override_rpz_drop_ip_rule=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 127 that represents prefix length (in bits) for IPv6 RPZ-IP triggers.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $firstview\->rpz_drop_ip_rule_min_prefix_length_ipv6();
\& # Modify attribute value
\& $firstview\->rpz_drop_ip_rule_min_prefix_length_ipv6("120");
.Ve
.RE
.RS 4
.RE
.SS "rpz_qname_wait_recurse( )"
.IX Subsection "rpz_qname_wait_recurse( )"
.RS 4
Use this method to enable or disable recursive \s-1RPZ\s0 lookups.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable recursive \s-1RPZ\s0 lookups or \*(L"false\*(R" to disable them. The default value is \*(L"false\*(R".
.Sp
Note that if both rpz_qname_wait_recurse and override_rpz_qname_wait_recurse are set to some values, the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->rpz_qname_wait_recurse(\*(L"true\*(R"); \f(CW$firstview\fR\->override_rpz_qname_wait_recurse(\*(L"false\*(R"); results in inheriting rpz_qname_wait_recurse value from the Grid. And the sequence \f(CW$firstview\fR\->override_rpz_qname_wait_recurse(\*(L"false\*(R"); \f(CW$firstview\fR\->rpz_qname_wait_recurse(\*(L"true\*(R"); sets override_rpz_qname_wait_recurse to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $firstview\->rpz_qname_wait_recurse();
\& # Modify attribute value
\& $firstview\->rpz_qname_wait_recurse("true");
.Ve
.RE
.RS 4
.RE
.SS "response_rate_limiting( )"
.IX Subsection "response_rate_limiting( )"
.RS 4
Use this method to set or retrieve response rate limiting settings for the \s-1DNS\s0 view.
.Sp
Setting this method to a defined value implicitly sets the override_response_rate_limiting method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Member \s-1DNS\s0 default and automatically resets the override_response_rate_limiting method to \*(L"false\*(R".
.Sp
Note that when response_rate_limiting is set to a defined value and override_response_rate_limiting is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->response_rate_limiting($response_rate_limiting); \f(CW$object\fR\->override_response_rate_limiting(\*(L"false\*(R"); will set override_response_rate_limiting to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_response_rate_limiting(\*(L"false\*(R"); \f(CW$object\fR\->response_rate_limiting($response_rate_limiting); will result in override_response_rate_limiting=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::ResponseRateLimiting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get response_rate_limiting
\& my $response_rate_limiting = $firstview\->response_rate_limiting();
\& #Modify response_rate_limiting
\& $firstview\->response_rate_limiting($response_rate_limiting);
.Ve
.RE
.RS 4
.RE
.SS "use_root_name_servers( )"
.IX Subsection "use_root_name_servers( )"
.RS 4
Use this method to enable/disable custom or Internet root name servers. This setting overrides grid root name server settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable custom root name servers. Specify \*(L"false\*(R" to use Internet root name servers.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specify a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get use_root_name_servers
\&   my $useRootNS = $firstview\->use_root_name_servers( );
\&   #Modify use_root_name_servers
\&   $firstview\->use_root_name_servers("false");
.Ve
.RE
.RS 4
.RE
.SS "override_nxdomain_redirect( )"
.IX Subsection "override_nxdomain_redirect( )"
.RS 4
The \*(L"override_nxdomain_redirect\*(R" attribute controls whether the \*(L"nxdomain_redirect\*(R", \*(L"nxdomain_redirect_addresses\*(R", \*(L"nxdomain_redirect_addresses_ipv6\*(R", \*(L"nxdomain_redirect_ttl\*(R", \*(L"nxdomain_log_query\*(R", and \*(L"nxdomain_rulesets\*(R" values for this \s-1DNS\s0 view are used.
.Sp
The \*(L"override_nxdomain_redirect\*(R" attribute can be specified explicitly. It is also set implicitly as follows:
\&\*(L"nxdomain_redirect\*(R" => \*(L"true\*(R"|\*(L"false\*(R" or \*(L"nxdomain_redirect_addresses\*(R" => [\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]|[] or \*(L"nxdomain_redirect_addresses\*(R" => [\*(L"2001:db8::1\*(R", \*(L"2002:ffff::1\*(R"]|[] result in \*(L"override_nxdomain_redirect\*(R" => \*(L"true\*(R", \*(L"nxdomain_redirect\*(R" => undef and \*(L"nxdomain_redirect_addresses\*(R" => undef and \*(L"nxdomain_redirect_addresses_ipv6\*(R" => undef result in \*(L"override_nxdomain_redirect\*(R" => \*(L"false\*(R".
If \*(L"override_nxdomain_redirect\*(R" is specified explicitly as \*(L"true\*(R", and \*(L"nxdomain_redirect\*(R" => undef, \*(L"nxdomain_redirect_addresses\*(R" => undef and \*(L"nxdomain_redirect_addresses_ipv6\*(R" => undef, then the explicit value takes precedence; and \*(L"override_nxdomain_redirect\*(R"=>\*(L"true\*(R", \*(L"nxdomain_redirect\*(R", \*(L"nxdomain_redirect_addresses\*(R", and \*(L"nxdomain_redirect_addresses\*(R" remain unchanged in the database.
.Sp
Specifying the \*(L"nxdomain_redirect_ttl\*(R", \*(L"nxdomain_log_query\*(R", or \*(L"nxdomain_rulesets\*(R" attributes does not affect the \*(L"override_nxdomain_redirect\*(R" value. It is implicitly set only by \*(L"nxdomain_redirect\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the member-level settings of the \s-1NXDOMAIN\s0 redirect attributes. Set the parameter to \*(L"false\*(R" to inherit the member-level settings. The default is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get override_nxdomain_redirect
\&   my $override_nxdomain_redirect=$firstview\->override_nxdomain_redirect( );
\&   #Modify override_nxdomain_redirect
\&   $firstview\->override_nxdomain_redirect("true");
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_redirect( )"
.IX Subsection "nxdomain_redirect( )"
.RS 4
Use this method to enable or disable \s-1NXDOMAIN\s0 redirection in a \s-1DNS\s0 view.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the nxdomain_redirect flag or \*(L"false\*(R" to deactivate/unset it. The default is \*(L"false\*(R".
.Sp
Setting this parameter to \*(L"true\*(R" or \*(L"false\*(R" implicitly sets the override_nxdomain_redirect attribute to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid-level \s-1NXDOMAIN\s0 redirection settings and automatically sets the override_nxdomain_redirect attribute to \*(L"false\*(R" if nxdomain_redirect_addresses or nxdomain_redirect_addresses_ipv6 is also undefined. But if nxdomain_redirect_addresses or nxdomain_redirect_addresses_ipv6 contains a value, then the override_nxdomain_redirect attribute is set to true.
.Sp
Note that when nxdomain_redirect is set to \*(L"true\*(R"/\*(L"false\*(R" and override_nxdomain_redirect is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->nxdomain_redirect(\*(L"false\*(R"); \f(CW$firstview\fR\->override_nxdomain_redirect(\*(L"false\*(R"); sets override_nxdomain_redirect to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_nxdomain_redirect(\*(L"false\*(R"); \f(CW$firstview\fR\->nxdomain_redirect(\*(L"false\*(R"); sets override_nxdomain_redirect to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting nxdomain_redirect
\&   my $nxdomain_redirect = $firstview\->nxdomain_redirect( );
\&   #Modifying nxdomain_redirect
\&   $firstview\->nxdomain_redirect("true");
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_redirect_addresses( )"
.IX Subsection "nxdomain_redirect_addresses( )"
.RS 4
Use this method to specify the \s-1IP\s0 addresses the appliance includes in the response it sends in place of an \s-1NXDOMAIN\s0 response.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of IPv4 addresses. The default value is undefined.
.Sp
Setting this parameter to a defined value implicitly sets the override_nxdomain_redirect attribute to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid-level \s-1NXDOMAIN\s0 redirection settings and automatically sets the override_nxdomain_redirect attribute to \*(L"false\*(R" if nxdomain_redirect and nxdomain_redirect_addresses_ipv6 is also undefined. But if nxdomain_redirect or nxdomain_redirect_addresses_ipv6 contains a value, then the override_nxdomain_redirect attribute is set to true.
.Sp
Note that when nxdomain_redirect_addresses contains a valid array reference and override_nxdomain_redirect is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->nxdomain_redirect_addresses([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); \f(CW$firstview\fR\->override_nxdomain_redirect(\*(L"false\*(R"); sets override_nxdomain_redirect to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_nxdomain_redirect(\*(L"false\*(R"); \f(CW$firstview\fR\->nxdomain_redirect_addresses([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); sets override_nxdomain_redirect to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_redirect_addresses
\&   my $nxdomain_redirect_addresses = $firstview\->nxdomain_redirect_addresses( );
\&   #Modify nxdomain_redirect_addresses
\&   $firstview\->nxdomain_redirect_addresses(["10.0.0.10", "10.0.0.20"]);
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_redirect_addresses_ipv6( )"
.IX Subsection "nxdomain_redirect_addresses_ipv6( )"
.RS 4
Use this method to specify the \s-1IP\s0 addresses the appliance includes in the response it sends in place of an \s-1NXDOMAIN\s0 response.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of IPv6 addresses. The default value is undefined.
.Sp
Setting this parameter to a defined value implicitly sets the override_nxdomain_redirect attribute to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid-level \s-1NXDOMAIN\s0 redirection settings and automatically sets the override_nxdomain_redirect attribute to \*(L"false\*(R" if nxdomain_redirect and nxdomain_redirect_addresses is also undefined. But if nxdomain_redirect or nxdomain_redirect_addresses contains a value, then the override_nxdomain_redirect attribute is set to true.
.Sp
Note that when nxdomain_redirect_addresses_ipv6 contains a valid array reference and override_nxdomain_redirect is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->nxdomain_redirect_addresses_ipv6([\*(L"2001:db8::1\*(R", \*(L"2002:ffff::1\*(R"]); \f(CW$firstview\fR\->override_nxdomain_redirect(\*(L"false\*(R"); sets override_nxdomain_redirect to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_nxdomain_redirect(\*(L"false\*(R"); \f(CW$firstview\fR\->nxdomain_redirect_addresses_ipv6([\*(L"2001:db8::1\*(R", \*(L"2002:ffff::1\*(R"]); sets override_nxdomain_redirect to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_redirect_addresses_ipv6
\&   my $nxdomain_redirect_addresses_ipv6 = $firstview\->nxdomain_redirect_addresses_ipv6( );
\&   #Modify nxdomain_redirect_addresses_ipv6
\&   $firstview\->nxdomain_redirect_addresses_ipv6(["2001:db8::1", "2002:ffff::1"]);
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_redirect_ttl( )"
.IX Subsection "nxdomain_redirect_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1TTL\s0 value of the synthetic \s-1DNS\s0 responses that result from \s-1NXDOMAIN\s0 redirection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer, from 0 to 4294967295, that represents the \s-1TTL\s0 in seconds. The default value is 60.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_redirect_ttl
\&   my $nxdomain_redirect_ttl = $firstview\->nxdomain_redirect_ttl( );
\&   #Modify nxdomain_redirect_ttl
\&   $firstview\->nxdomain_redirect_ttl(60);
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_log_query( )"
.IX Subsection "nxdomain_log_query( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether \s-1NXDOMAIN\s0 redirection queries are logged.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable logging, or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_log_query
\&   my $nxdomain_log_query = $firstview\->nxdomain_log_query( );
\&   #Modify nxdomain_log_query
\&   $firstview\->nxdomain_log_query("true");
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_rulesets( )"
.IX Subsection "nxdomain_rulesets( )"
.RS 4
Use this method to specify or retrieve Infoblox::DNS::Ruleset object names assigned at the grid level for \s-1NXDOMAIN\s0 redirection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains the names of the Infoblox::DNS::Ruleset objects assigned to the grid. The names must be in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_rulesets
\&   my $nxdomain_rulesets = $firstview\->nxdomain_rulesets();
\&   #Modify nxdomain_rulesets
\&   $firstview\->nxdomain_rulesets(["ruleset1", "ruleset2"]);
.Ve
.RE
.RS 4
.RE
.SS "override_rpz_drop_ip_rule( )"
.IX Subsection "override_rpz_drop_ip_rule( )"
.RS 4
The override_rpz_drop_ip_rule attribute controls whether the rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 method values of the member are used, instead of the Grid default.
.Sp
The override_rpz_drop_ip_rule attribute can be specified explicitly. It is also set implicitly when one of rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 or rpz_drop_ip_rule_min_prefix_length_ipv6 methods is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 methods. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 methods.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_rpz_drop_ip_rule
\&    my $override_rpz_drop_ip_rule = $firstview\->override_rpz_drop_ip_rule( );
\&    #Modifying override_rpz_drop_ip_rule
\&    $firstview\->override_rpz_drop_ip_rule("true");
.Ve
.RE
.RS 4
.RE
.SS "override_rpz_qname_wait_recurse( )"
.IX Subsection "override_rpz_qname_wait_recurse( )"
.RS 4
The override_rpz_qname_wait_recurse attribute controls whether the rpz_qname_wait_recurse method value for the member is used, instead of the Grid default.
.Sp
The \*(L"override_rpz_qname_wait_recurse\*(R" attribute can be specified explicitly. It is also established implicitly as follows: \*(L"rpz_qname_wait_recurse\*(R" => \*(L"true\*(R"|\*(L"false\*(R" results in \*(L"override_rpz_qname_wait_recurse\*(R" => \*(L"true\*(R"; \*(L"rpz_qname_wait_recurse\*(R" => undef results in \*(L"override_rpz_qname_wait_recurse\*(R" => \*(L"false\*(R"; If \*(L"override_rpz_qname_wait_recurse\*(R" is specified explicitly as \*(L"true\*(R", while \*(L"rpz_qname_wait_recurse\*(R"=>undef, the explicit value takes precedence, and \*(L"override_rpz_qname_wait_recurse\*(R"=>\*(L"true\*(R" while \*(L"rpz_qname_wait_recurse\*(R" remains unchanged in the database.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for rpz_qname_wait_recurse. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for rpz_qname_wait_recurse value.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_rpz_qname_wait_recurse
\& my $override_rpz_qname_wait_recurse = $firstview\->override_rpz_qname_wait_recurse();
\& #Modyfying override_rpz_qname_wait_recurse
\& $firstview\->override_rpz_qname_wait_recurse("true");
.Ve
.RE
.RS 4
.RE
.SS "override_response_rate_limiting( )"
.IX Subsection "override_response_rate_limiting( )"
.RS 4
The override_response_rate_limiting attribute controls whether the response_rate_limiting method values of the member are used, instead of the Grid Member default.
.Sp
The override_response_rate_limiting attribute can be specified explicitly. It is also set implicitly when response_rate_limiting is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the member-level setting for response_rate_limiting. Set the parameter to \*(L"false\*(R" to inherit the member-level setting for response_rate_limiting.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_response_rate_limiting
\& my $override_response_rate_limiting = $firstview\->override_response_rate_limiting( );
\& #Modify override_response_rate_limiting
\& $firstview\->override_response_rate_limiting("true");
.Ve
.RE
.RS 4
.RE
.SS "override_sortlist( )"
.IX Subsection "override_sortlist( )"
.RS 4
The override_sortlist attribute controls whether the sort list value in this \s-1DNS\s0 view is used, instead of the member default.
.Sp
The override_sortlist attribute can be specified explicitly. It is also set implicitly when the sort list is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the member-level setting for the sort list. Set the parameter to \*(L"false\*(R" to inherit the member-level setting for the sort list.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_sortlist
\&    my $override_sortlist=$firstview\->override_sortlist( );
\&    #Modifying override_sortlist
\&    $firstview\->override_sortlist("true");
.Ve
.RE
.RS 4
.RE
.SS "sortlist( )"
.IX Subsection "sortlist( )"
.RS 4
Use this method to create a sort list.
.Sp
A sort list determines the order of addresses in responses made to \s-1DNS\s0 queries.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_sortlist method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the member default and automatically resets the override_sortlist attribute to \*(L"false\*(R".
.Sp
Note that when the sort list is set to a defined value and override_sortlist is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->sortlist([$s1,$s2]); \f(CW$object\fR\->override_sortlist(\*(L"false\*(R"); will set override_sortlist to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_sortlist(\*(L"false\*(R"); \f(CW$object\fR\->sortlist([$s1,$s2]); will result in override_sortlist=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::DNS::Sortlist object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\&   my $sort1 = Infoblox::DNS::Sortlist\->new (
\&                           "source_ipv4addr" => "1.2.3.4",
\&                           "match_list"      => [ "10.20.1.0/24" , "10.20.2.0/24"]
\&                );
\&   $firstview\->sortlist( [ $sort1 ] );
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to an object, such as create, search, modify, and remove. This sample code also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS\s0 view insertion\fR
.PP
.Vb 2
\&  use strict;
\&  use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS\s0 view\fR
.PP
.Vb 7
\& #create member
\& my $member1 = Infoblox::DNS::Member\->new(
\&     name     => "member.com",
\&     ipv4addr => "192.168.1.2",
\&     lead     => "false",
\&     stealth  => "false"
\& );
\&
\& #create keys
\& my $key1 = Infoblox::DNS::TSIGKey\->new(
\&     name => "tsig_xfer",
\&     key  => ":2xCOMPAT"
\& );
\&
\& my $tsig_key2 = $session\->gen_tsig_key();
\&
\& my $key2 = Infoblox::DNS::TSIGKey\->new(
\&     name => "key2",
\&     key  => $tsig_key2
\& );
\&
\& #create View object using members
\& my $firstview = Infoblox::DNS::View\->new(
\&     name              => "internal",
\&     match_clients     => ["1.1.1.1", $key1, "10.0.0.0/8", $key2],
\&     recursion         => "true",
\&     disable           => "false",
\&     comment           => "new Internal view"
\&     );
\&  unless ($firstview) {
\&           die("constructor for view internal failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\&      }
\&
\& #put View into session
\& $session\->add($firstview);
\& unless ($firstview) {
\&       die("add view internal failed: ",
\&       $session\->status_code() . ":" . $session\->status_detail());
\& }
.Ve
.PP
\&\fB#Search for a specific view\fR
.PP
.Vb 8
\& #Searching the internal view
\& my @result = $session\->search(object => "Infoblox::DNS::View", name => "^internal\e$");
\& my $object = $result[0];
\& unless ($object) {
\&           die("Search view failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\&      }
\& print "Search view object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS\s0 view\fR
.PP
.Vb 4
\& my @result = $session\->get(
\&     object => "Infoblox::DNS::View",
\&     name   => "internal"
\& );
\&
\& my $firstview = $result[0];
\& unless ($firstview) {
\&          die("Get view failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get view found at least 1 matching entry\en";
\& $firstview\->comment("new comment internal view");
\&
\& #Apply the changes
\& $session\->modify($firstview);
\& unless ($firstview) {
\&           die("Modify view failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\&      }
\& print "View object modified successfully \en";
.Ve
.PP
\&\fB#Remove a view\fR
.PP
.Vb 4
\& my @result = $session\->get(
\&     object => "Infoblox::DNS::View",
\&     name   => "internal"
\& );
\&
\& my $firstview = $result[0];
\& unless ($firstview) {
\&          die("Get view failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get view found at least 1 matching entry\en";
\&
\& #submit the object for removal
\& $session\->remove($firstview);
\& unless ($firstview) {
\&          die("Remove view failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "View object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::View, Infoblox::DHCP::View, Infoblox::DNS::Zone,  Infoblox::DNS::DnssecTrustedKey, Infoblox::DNS::Ruleset, Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::DNS::Sortlist, Infoblox::Grid::NamedACL, Infoblox::Grid::DNS::FixedRRSetOrderFQDN,
Infoblox::Grid::DNS::ResponseRateLimiting
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
