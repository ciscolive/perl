.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::FixedAddr 3"
.TH Infoblox::DHCP::FixedAddr 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::FixedAddr \- DHCP Fixed Address object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Fixed Address is a specific \s-1IP\s0 address that a \s-1DHCP\s0 server always assigns when a lease request comes from a particular \s-1MAC\s0 address of the client.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $fixed_addr = Infoblox::DHCP::FixedAddr \-> new(
\&       ipv4addr                        => $ipv4addr,                   #Required
\&       agent_circuit_id                => $circuit_id,                 #Optional / Default is undefined
\&       agent_remote_id                 => $remote_id,                  #Optional / Default is undefined
\&       always_update_dns               => "true" | "false",            #Optional / Default is "false"
\&       bootfile                        => $filename | undef,           #Optional / Default is undefined
\&       bootserver                      => $ipv4addr | $fqdn | undef,   #Optional / Default is undefined
\&       client_identifier_prepend_zero  => "true" | "false",            #Optional / Default is "false"
\&       comment                         => $string,                     #Optional / Default is empty
\&       configure_for_dhcp              => "true" | "false",            #Optional / Default is "false"
\&                                                                       # When both the IP address and MAC address are present, the default value is "true"
\&                                                                       # Applicable only when adding this fixed address to a host
\&       ddns_domainname                 => $string,                     #Optional / Default is empty
\&       ddns_hostname                   => $string,                     #Optional / Default is empty
\&       deny_bootp                      => "true" | "false" | undef,    #Optional / Default is undefined
\&       dhcp_client_identifier          => $string,                     #Optional / Default is empty
\&       disable                         => "true" | "false",            #Optional / Default is "false"
\&       enable_ddns                     => "true" | "false",            #Optional / Default is "false"
\&       extattrs                        => { $string => $extattr, ... },  #Optional / Default is undefined
\&       extensible_attributes           => { $string => $string | $num, $string => [ $string | $num, ... ], ... } #Optional / Default is undefined
\&       ignore_dhcp_option_list_request => "true" | "false" | undef,    #Optional / Default is "false"
\&       last_discovered                 => $string,                     #Optional / Default is empty
\&       mac                             => $mac_addr,                   #Optional / Default is empty
\&       match_client                    => $string,                     #Optional / Default is "MAC"
\&                                                                       #Possible values are:
\&                                                                       # "MAC","CLIENT_IDENTIFIER","RESERVED",
\&                                                                       # "CIRCUIT_ID", "REMOTE_ID"
\&       member                          => $msmember,                   #Optional
\&       ms_options                      => [$msopt1, $msopt2, ...]      #Optional / Default is empty
\&       name                            => $name,                       #Optional
\&       network                         => $network,                    #Optional
\&       network_view                    => $NetworkView,                #Optional / Default is "default" network view
\&       nextserver                      => $ipv4addr | $fqdn | undef,   #Optional / Default is undefined
\&       options                         => [$option1, $option2, ...]    #Optional / Default is empty
\&       override_ddns_domainname        => "true" | "false",            #Optional / Default value is "false"
\&       pxe_lease_time                  => $time,                       #Optional / Default is empty
\&       template                        => $string,                     #Optional / Default is undefined
\&       cli_credentials                 => [$cli1, ...],                #Optional
\&       override_cli_credentials        => "true" | "false",            #Optional / Default is "false"
\&       reserved_interface              => $interface,                  #Optional
\&       device_type                     => $string,                     #Optional
\&       device_vendor                   => $string,                     #Optional
\&       device_location                 => $string,                     #Optional
\&       device_description              => $string,                     #Optional
\&       allow_telnet                    => "true" | "false",            #Optional / Default is "false"
\&       logic_filters                   => [ $filter_name | $filter_obj, ...], # Optional / Default is undefined
\&       override_logic_filters          => "true\*(Aq | \*(Aqfalse",                   # Optional / Default value is "false"
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DHCP\s0 Fixed Address object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP\s0 Fixed Address object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Construct a DHCP Fixed Address object
\& my $fixed_addr = Infoblox::DHCP::FixedAddr\->new(
\&        "ipv4addr"                         => "10.0.0.5",
\&        "bootfile"                         => "bootfile",
\&        "bootserver"                       => "bootserver.com",
\&        "client_identifier_prepend_zero"   => "true",
\&        "comment"                          => "add fixed address using uid",
\&        "ddns_domainname"                  => "ddns.domain.com",
\&        "ddns_hostname"                    => "ddns.host.domain.com",
\&        "deny_bootp"                       => "false",
\&        "dhcp_client_identifier"           => "foo",
\&        "disable"                          => "false",
\&        "enable_ddns"                      => "false",
\&        "match_client"                     => "MAC",
\&        "network"                          => "10.0.0.0/8",
\&        "network_view"                     => $nview,
\&        "nextserver"                       => "3.3.3.3",
\&        "options"                          => [ $option1,  $option2, $option3,  $option4, $option5, $option6 ],
\&        "pxe_lease_time"                   => "3600",
\& );
\&
\& #Submit for addition
\& my $response = $session\->add($fixed_addr)
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP Fixed Address object:
\&
\&  ipv4addr                \- Optional. IPV4 address of the fixed address.
\&  mac                     \- Optional. MAC address of the fixed address.
\&  dhcp_client_identifier  \- Optional, DHCP option 61 client identifier.
\&  network                 \- Optional. Network address of the fixed address.
\&  network_view            \- Optional. Network view in which the fixed address is located. By default, all network views are searched.
\&  extattrs                \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes   \- Optional. A hash reference containing extensible attributes.
\&  v_cluster               \- Optional. Discovered VMware cluster name.
\&  v_datacenter            \- Optional. Discovered VMware datacenter name.
\&  v_host                  \- Optional. Discovered VMware server name.
\&  v_name                  \- Optional. Discovered VMware host or virtual machine name.
\&  v_netadapter            \- Optional. Discovered VMware physical network adapter name.
\&  v_switch                \- Optional. Discovered VMware virtual switch name.
\&  v_type                  \- Optional. Discovered VMware entity type (possible values: "VirtualMachine", "HostSystem", "VirtualCenter").
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 10
\& #Get DHCP Fixed Address object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::FixedAddr",
\&     mac    => "11:11:11:11:11.11",
\& );
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::FixedAddr",
\&     dhcp_client_identifier => "foo",
\& );
\& my @retrieved_objs = $session\->get(
\&     object       => "Infoblox::DHCP::FixedAddr",
\&     ipv4addr     => "10.0.0.4",
\&     network_view => "default",
\& );
\&
\& my @retrieved_objs = $session\->get(
\&    object                => "Infoblox::DHCP::FixedAddr",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
\&
\&  # get FixedAddr by v_type:
\&  my @retrieved_objs = $session\->get(
\&    object    => \*(AqInfoblox::DHCP::FixedAddr\*(Aq,
\&    v_type    => \*(AqVirtualMachine\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 Fixed Address object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the pxe_lease_time
\& $fixed_address\->pxe_lease_time("1234");
\& #Submit modification
\& my $response = $session\->modify( $fixed_address );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1DHCP\s0 Fixed Address object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific \s-1DHCP\s0 Fixed Address object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get DHCP Fixed Address object through the session
\& my @retrieved_objs = $session\->get(
\&     object       => "Infoblox::DHCP::FixedAddr",
\&     mac          => "11:11:11:11:11:11",
\&     network_view => "default"
\& );
\& #Find the desired object from the retrieved list.
\& my $desired_fixed_addr = $retrieved_objs[0];
\& #Submit for removal
\& my $response = $session\->remove( $desired_fixed_addr );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DHCP\s0 Fixed Address object and matching Host object with \s-1MAC\s0 address in the Infoblox appliance (see below). See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.Sp
Note that if the Infoblox library is invoked with the :hostaddress option, only \s-1DHCP\s0 Fixed Address objects are searched.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a specific DHCP Fixed Address object:
\&
\&  name          \- Optional. Name of the fixed address. If name is passed it implies no_hostaddresses
\&  ipv4addr      \- Optional. IPV4 address of the fixed address (regular expression).
\&  mac           \- Optional. MAC address of the fixed address (regular expression).
\&  network       \- Optional. Network address of the fixed address.
\&  network_view  \- Optional. Network view in which the fixed address is located. By default, all network views are searched.
\&  extattrs      \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&  v_cluster     \- Optional. Discovered VMware cluster name (regular expression).
\&  v_datacenter  \- Optional. Discovered VMware datacenter name (regular expression).
\&  v_host        \- Optional. Discovered VMware server name (regular expression).
\&  v_name        \- Optional. Discovered VMware host or virtual machine name (regular expression).
\&  v_netadapter  \- Optional. Discovered VMware physical network adapter name (regular expression).
\&  v_switch      \- Optional. Discovered VMware virtual switch name (regular expression).
\&  v_type        \- Optional. Discovered VMware entity type (possible values: "VirtualMachine", "HostSystem", "VirtualCenter").
\&  no_hostaddresses \- Optional. If specified and set to "true", only Fixed Address objects will be returned by the search.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 7
\& # Search for all DHCP Fixed Address objects that are specified in the network "10.0.0.0/8" in the "default" network view.
\& my @retrieved_objs = $session\->search(
\&     object       => "Infoblox::DHCP::FixedAddr",
\&     mac          => "11:11:11:11:11.*",
\&     network      => "10.0.0.0/8",
\&     network_view => "default"
\& );
\&
\& # Search for all DHCP Fixed Address objects with "Santa Clara" for the "Site" extensible attribute
\& my @retrieved_objs = $session\->search(
\&     object                => "Infoblox::DHCP::FixedAddr",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\& );
\&
\& # search FixedAddr by v_datacenter:
\& my @retrieved_objs = $session\->search(
\&    object                 => \*(AqInfoblox::DHCP::FixedAddr\*(Aq,
\&    v_datacenter => \*(Aqtest.*\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a \s-1DHCP\s0 Fixed Address object.
.SS "allow_telnet( )"
.IX Subsection "allow_telnet( )"
.RS 4
Use this method to set or retrieve the flag that enables copying \s-1SSH\s0 credential to \s-1TELNET.\s0
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to copy \s-1SSH\s0 credential to \s-1TELNET\s0 or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $fixed_addr\->allow_telnet();
\& # Modify attribute value
\& $fixed_addr\->allow_telnet(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "bootfile( )"
.IX Subsection "bootfile( )"
.RS 4
Use this method to set or retrieve the bootfile value of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::FixedAddr\->\fBbootserver()\fR and Infoblox::DHCP::FixedAddr\->\fBnextserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the file that the client must download. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get bootfile
\& my $bootfile = $fixed_addr\->bootfile();
\& #Modify bootfile
\& $fixed_addr\->bootfile("boot_file");
\& #Un\-override bootfile
\& $fixed_addr\->bootfile(undef);
.Ve
.RE
.RS 4
.RE
.SS "agent_circuit_id( )"
.IX Subsection "agent_circuit_id( )"
.RS 4
Use this method to set or retrieve the agent circuit \s-1ID\s0 of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Use the agent_circuit_id to assign fixed addresses to \s-1DHCP\s0 clients from whom the member \s-1DHCP\s0 server receives \s-1DHCPDISCOVER\s0 and \s-1DHCPREQUEST\s0 messages that include option 82. To enable the member \s-1DHCP\s0 server to match the agent circuit \s-1ID,\s0 set the \*(L"match_client\*(R" field to \*(L"\s-1CIRCUIT_ID\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get agent_circuit_id
\& my $uid = $fixed_addr\->agent_circuit_id();
\& #Modify agent_circuit_id
\& $fixed_addr\->agent_circuit_id("foo");
.Ve
.RE
.RS 4
.RE
.SS "agent_remote_id( )"
.IX Subsection "agent_remote_id( )"
.RS 4
Use this method to set or retrieve the agent remote \s-1ID\s0 of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Use the agent_remote_id to assign fixed addresses to \s-1DHCP\s0 clients from whom the member \s-1DHCP\s0 server receives \s-1DHCPDISCOVER\s0 and \s-1DHCPREQUEST\s0 messages that include option 82. To enable the member \s-1DHCP\s0 server to match the agent remote \s-1ID,\s0 set the \*(L"match_client\*(R" field to \*(L"\s-1REMOTE_ID\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get agent_remote_id
\& my $uid = $fixed_addr\->agent_remote_id();
\& #Modify agent_remote_id
\& $fixed_addr\->agent_remote_id("foo");
.Ve
.RE
.RS 4
.RE
.SS "always_update_dns( )"
.IX Subsection "always_update_dns( )"
.RS 4
Use this method to set or retrieve the always_update_dns flag of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This flag only applies if the fixed address is associated with a Microsoft (r) server. If it is set to \*(L"true\*(R", the \s-1DHCP\s0 server will always update \s-1DNS,\s0 regardless of the requests from the \s-1DHCP\s0 clients. If this flag is set to false, clients will be allowed to update \s-1DNS\s0 when they request it.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the always_update_dns flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get always_update_dns
\& my $always_update_dns = $fixed_addr\->always_update_dns();
\& #Modify always_update_dns
\& $fixed_addr\->always_update_dns("false");
.Ve
.RE
.RS 4
.RE
.SS "bootserver( )"
.IX Subsection "bootserver( )"
.RS 4
Use this method to set or retrieve the bootserver of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::FixedAddr\->\fBbootfile()\fR and Infoblox::DHCP::FixedAddr\->\fBnextserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The boot server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A boot server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get bootserver
\& my $bootserver = $fixed_addr\->bootserver();
\& #Modify bootserver
\& $fixed_addr\->bootserver("bootserver2.com");
\& #Un\-override bootserver
\& $fixed_addr\->bootserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "client_identifier_prepend_zero( )"
.IX Subsection "client_identifier_prepend_zero( )"
.RS 4
Use this method prepend \*(L"\e000\*(R" to the dhcp-client-identifier of a fixed address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
When you set the client_identifier_prepend_zero parameter to \*(L"true\*(R", it
prefixes a 0 (zero) to the \s-1DHCP\s0 client identifier whenever option 61 is used
to assign fixed addresses. The following is an excerpt from \*(L"man dhcp-options\*(R":
.Sp
Please be aware that some \s-1DHCP\s0 clients, when configured with client
identifiers that are \s-1ASCII\s0 text, will prepend a zero to the \s-1ASCII\s0 text. So you
may need to write:
.Sp
.Vb 1
\&  option dhcp\-client\-identifier "\e000foo"
.Ve
.Sp
rather than:
.Sp
.Vb 1
\&  option dhcp\-client\-identifier "foo".
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get client_identifier_prepend_zero
\& my $client_identifier_prepend_zero = $fixed_addr\->client_identifier_prepend_zero();
\& #Modify dhcp_client_identifier
\& $fixed_addr\->client_identifier_prepend_zero("true");
.Ve
.RE
.RS 4
.RE
.SS "cli_credentials( )"
.IX Subsection "cli_credentials( )"
.RS 4
Use this method to set or retrieve the discovery \s-1CLI\s0 credentials.
.Sp
Setting this method to a defined value implicitly sets the override_cli_credentials method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_cli_credentials attribute to \*(L"false\*(R".
.Sp
Note that when cli_credentials is set to a defined value and override_cli_credentials is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$fixed_addr\fR\->cli_credentials([$cli]); \f(CW$fixed_addr\fR\->override_cli_credentials(\*(L"false\*(R"); will set override_cli_credentials to \*(L"false\*(R", and the sequence \f(CW$fixed_addr\fR\->override_cli_credentials(\*(L"false\*(R"); \f(CW$fixed_addr\fR\->cli_credentials([$cli]); will result in override_cli_credentials=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::Grid::Discovery::CLICredential objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get cli_credentials
\& my $cli_credentials = $fixed_addr\->cli_credentials();
\& #Modify cli_credentials
\& $fixed_addr\->cli_credentials([$cli1, $cli2]);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $fixed_addr\->comment();
\& #Modify comment
\& $fixed_addr\->comment("Modified DHCP Fixed Address object comment");
.Ve
.RE
.RS 4
.RE
.SS "configure_for_dhcp( )"
.IX Subsection "configure_for_dhcp( )"
.RS 4
Use this method to set or retrieve the configure_for_dhcp flag of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the configure_for_dhcp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get configure_for_dhcp
\& my $configure_for_dhcp = $fixed_addr\->configure_for_dhcp();
\& #Modify configure_for_dhcp
\& $fixed_addr\->configure_for_dhcp("true");
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to retrieve cloud \s-1API\s0 related information for the Infoblox::DHCP::FixedAddr object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get cloud_info
\& my $cloud_info = $object\->cloud_info();
.Ve
.RE
.RS 4
.RE
.SS "ddns_domainname( )"
.IX Subsection "ddns_domainname( )"
.RS 4
Use this method to set or retrieve the \s-1DDNS\s0 domain name value of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_domainname method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_ddns_domainname attribute to \*(L"false\*(R".
.Sp
Note that when ddns_domainname is set to a defined value and override_dddns_domainname is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); will set override_ddns_domainname to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); will result in override_ddns_domainname=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the \s-1DDNS\s0 domain name.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the DDNS domain name
\& my $ddns_domainname = $fixed_addr\->ddns_domainname();
\& #Modify the DDNS domain name
\& $fixed_addr\->ddns_domainname("ddns.domain.com");
.Ve
.RE
.RS 4
.RE
.SS "ddns_hostname( )"
.IX Subsection "ddns_hostname( )"
.RS 4
Use this method to set or retrieve the \s-1DDNS\s0 host name value of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the \s-1DDNS\s0 host name.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the DDNS host name
\& my $ddns_hostname = $fixed_addr\->ddns_hostname();
\& #Modify the DDNS host name
\& $fixed_addr\->ddns_hostname("host.ddns.domain.com");
.Ve
.RE
.RS 4
.RE
.SS "deny_bootp( )"
.IX Subsection "deny_bootp( )"
.RS 4
Use this method to set or retrieve the deny_bootp flag of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the deny_bootp flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined which indicates that this attribute inherits the upper-level setting
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get deny_bootp
\& my $deny_bootp = $fixed_addr\->deny_bootp();
\& #Modify deny_bootp
\& $fixed_addr\->deny_bootp("true");
.Ve
.RE
.RS 4
.RE
.SS "device_description( )"
.IX Subsection "device_description( )"
.RS 4
Use this method to set or retrieve the description of the discovery device.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The device description in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get device_description
\& my $device_description = $fixed_addr\->device_description();
\& #Modify device_description
\& $fixed_addr\->device_description(\*(Aqexample\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "device_location( )"
.IX Subsection "device_location( )"
.RS 4
Use this method to set or retrieve the location of the discovery device.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The device location in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get device_location
\& my $device_location = $fixed_addr\->device_location();
\& #Modify device_location
\& $fixed_addr\->device_location(\*(Aqexample\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "device_type( )"
.IX Subsection "device_type( )"
.RS 4
Use this method to set or retrieve the type of the discovery device.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The device type in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get device_type
\& my $device_type = $fixed_addr\->device_type();
\& #Modify device_type
\& $fixed_addr\->device_type(\*(Aqexample\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "device_vendor( )"
.IX Subsection "device_vendor( )"
.RS 4
Use this method to set or retrieve the vendor name of the discovery device.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The device vendor name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get device_vendor
\& my $device_vendor = $fixed_addr\->device_vendor();
\& #Modify device_vendor
\& $fixed_addr\->device_vendor(\*(Aqexample\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "dhcp_client_identifier( )"
.IX Subsection "dhcp_client_identifier( )"
.RS 4
Use this method to set or retrieve the dhcp-client-identifier value of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Use the dhcp_client_identifier or uid to assign fixed addresses if the \s-1DHCP\s0 clients send option 61. A \s-1DHCP\s0 client identifier can be a string or a \s-1MAC\s0 address. Set the \*(L"match_client\*(R" field to \*(L"\s-1CLIENT_IDENTIFIER\*(R"\s0 for fixed addresses to use the dhcp_client_identifier instead of the mac_address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get dhcp_client_identifier
\& my $uid = $fixed_addr\->dhcp_client_identifier();
\& #Modify dhcp_client_identifier
\& $fixed_addr\->dhcp_client_identifier("foo");
\& or
\& $fixed_addr\->dhcp_client_identifier("1:11::11::11::11::11::12");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $fixed_addr\->disable();
\& #Modify disable
\& $fixed_addr\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "discover_now_status( )"
.IX Subsection "discover_now_status( )"
.RS 4
Use this method to retrieve the current discovery status. This attribute is read-only.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1COMPLETE\s0', '\s-1FAILED\s0', '\s-1NONE\s0', '\s-1PENDING\s0' or '\s-1RUNNING\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discover_now_status
\& my $discover_now_status = $fixed_addr\->discover_now_status();
.Ve
.RE
.RS 4
.RE
.SS "discovered_data( )"
.IX Subsection "discovered_data( )"
.RS 4
Use this method to retrieve the discovered data of a \s-1DHCP\s0 Fixed Address object. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::Discovery::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_data value
\& my $discovered_data = $object\->discovered_data();
.Ve
.RE
.RS 4
.RE
.SS "discovered_mac( )"
.IX Subsection "discovered_mac( )"
.RS 4
Use this method to retrieve the discovered \s-1MAC\s0 address of a \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discovered \s-1MAC\s0 address.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_mac
\& my $discovered_mac = $fixed_addr\->discovered_mac();
.Ve
.RE
.RS 4
.RE
.SS "discovered_name( )"
.IX Subsection "discovered_name( )"
.RS 4
Use this method to retrieve the discovered name of a \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discovered name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_name
\& my $discovered_name = $fixed_addr\->discovered_name();
.Ve
.RE
.RS 4
.RE
.SS "discoverer( )"
.IX Subsection "discoverer( )"
.RS 4
Use this method to retrieve the discoverer of a \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discoverer value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discoverer
\& my $discoverer = $fixed_addr\->discoverer();
.Ve
.RE
.RS 4
.RE
.SS "enable_ddns( )"
.IX Subsection "enable_ddns( )"
.RS 4
Use this method to set or retrieve the enable_ddns flag of a \s-1DHCP\s0 Fixed Address object.
.Sp
If enable_ddns value is specified as \*(L"true\*(R", then the A and \s-1PTR\s0 records corresponding to the Fixed Address object will be placed on the \s-1DNS\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_ddns flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_ddns
\& my $enable_ddns = $fixed_addr\->enable_ddns();
\& #Modify enable_ddns
\& $fixed_addr\->enable_ddns("true");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $fixed_addr\->extattrs();
\& #Modify extattrs
\& $fixed_addr\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Fixed Address object
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $fixed_addr\->extensible_attributes();
\& #Modify extensible attributes
\& $fixed_addr\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "first_discovered( )"
.IX Subsection "first_discovered( )"
.RS 4
Use this method to retrieve the date and time that the \s-1DHCP\s0 Fixed Address object was first discovered.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the date and time that the \s-1DHCP\s0 Fixed Address object was first discovered.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get first_discovered
\& my $first_discovered = $fixed_addr\->first_discovered();
.Ve
.RE
.RS 4
.RE
.SS "ignore_dhcp_option_list_request( )"
.IX Subsection "ignore_dhcp_option_list_request( )"
.RS 4
Use this method to set or retrieve the ignore_dhcp_option_list_request flag of a \s-1DHCP\s0 Fixed address object. If this flag is set to false all the defined \s-1DHCP\s0 options will be returned to the client.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the  ignore_dhcp_option_list_request flag or \*(L"false\*(R" to deactivate/unset it. The default value is false which indicates that this attribute inherit the member level setting..
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ignore_dhcp_option_list_request
\& my $ignore_dhcp_option_list_request = $fixed_addr\->ignore_dhcp_option_list_request();
\& # Un\-override ignore_dhcp_option_list_request
\& $fixed_addr\->ignore_dhcp_option_list_request(undef);
\& # Modify ignore_dhcp_option_list_request
\& $fixed_addr\->ignore_dhcp_option_list_request("true");
.Ve
.RE
.RS 4
.RE
.SS "ipv4addr( )"
.IX Subsection "ipv4addr( )"
.RS 4
Use this method to set or retrieve the ipv4addr value of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv4addr
\& my $ipv4addr = $fixed_addr\->ipv4addr();
\& #Modify ipv4addr
\& $fixed_addr\->ipv4addr("10.0.0.5");
.Ve
.RE
.RS 4
.RE
.SS "is_invalid_mac( )"
.IX Subsection "is_invalid_mac( )"
.RS 4
Use this method to retrieve the flag used to indicate whether an invalid \s-1MAC\s0 address is used. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get is_invalid_mac value
\& my $is_invalid_mac = $fixed_addr\->is_invalid_mac();
.Ve
.RE
.RS 4
.RE
.SS "last_discovered( )"
.IX Subsection "last_discovered( )"
.RS 4
Use this method to retrieve the time this object was last seen by a discovery job.
.Sp
The default value for this field is empty.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_discovered
\& my $last_discovered = $fixed_addr\->last_discovered();
.Ve
.RE
.RS 4
.RE
.SS "logic_filters( )"
.IX Subsection "logic_filters( )"
.RS 4
Use this method to set or retrieve all the logic (ordered) filters associated with the \s-1DHCP\s0 Fixed Address.
.Sp
Filters are used to screen address assignments for the \s-1DHCP\s0 Fixed Address if the addresses are to be assigned to specific hosts.
.Sp
Setting this method to a defined value implicitly sets the override_logic_filters method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_logic_filters attribute to \*(L"false\*(R".
.Sp
Note that when logic_filters is set to a defined value and override_dlogic_filters is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->logic_filters($filters); \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); will set override_logic_filters to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); \f(CW$object\fR\->logic_filters($filters); will result in override_logic_filters=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains either the Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC, Infoblox::DHCP::Filter::Option objects or the names of the corresponding filters. The filters in the list must satisfy the following conditions:
.RS 4
.IP "Filter name must be globally unique." 4
.IX Item "Filter name must be globally unique."
.PD 0
.IP "Filters without expressions must be at the end of the list." 4
.IX Item "Filters without expressions must be at the end of the list."
.IP "The filters should not be disabled." 4
.IX Item "The filters should not be disabled."
.RE
.RS 4
.PD
.Sp
The default value of the parameter is undefined.
.RE
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get logic_filters
\& my $ref_logic_filters = $fixed_addr\->logic_filters();
\& #Modify logic_filters
\& $fixed_addr\->logic_filters(["filter_1","filter_2",$exl1]); #$exl1 is an Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC or Infoblox::DHCP::Filter::Option object.
.Ve
.RE
.RS 4
.RE
.SS "mac( )"
.IX Subsection "mac( )"
.Vb 1
\& Use this method to set or retrieve the MAC address value of a DHCP Fixed Address object.
.Ve
.Sp
.RS 4
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
\&\s-1MAC\s0 Address of the \s-1DHCP\s0 Fixed address object. Format for the hexadecimal strings for \s-1MAC\s0 addresses and vendor prefixes with colons or dashes. Both of the following formats are acceptable: 11:11:11:11:11:11 and 11\-11\-11\-11\-11\-11.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get mac
\& my $mac = $fixed_addr\->mac();
\& #Modify mac
\& $fixed_addr\->mac("11::11::11::11::11::12");
.Ve
.RE
.RS 4
.RE
.SS "match_client( )"
.IX Subsection "match_client( )"
.RS 4
Use this method to set or retrieve the match_client value of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
.Vb 1
\&    match_client "MAC": The fixed IP address is leased to the matching MAC address.
\&
\&    match_client "CLIENT_IDENTIFIER": The fixed IP address is leased to the matching DHCP client identifier
\&
\&    match_client "RESERVED": The fixed IP address is reserved for later use with a MAC address that only has zeros.
\&
\&    match_client "CIRCUIT_ID": The fixed IP address is leased to the DHCP client with a matching circuit ID. Note that
\&                 the "agent_circuit_id" field must be set in this case.
\&
\&    match_client "REMOTE_ID": The fixed IP address is leased to the DHCP client with a matching remote ID. Note that
\&                 the "agent_remote_id" field must be set in this case.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
.Vb 1
\&    If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
\&
\&    If you did not specify a parameter, the method returns the attribute value.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get match_client
\& my $match_client = $fixed_addr\->match_client();
\& #Modify match_client
\& $fixed_addr\->match_client("CLIENT_IDENTIFIER");
.Ve
.RE
.RS 4
.RE
.SS "member( )"
.IX Subsection "member( )"
.RS 4
Use this method to set or retrieve the Microsoft server associated with this fixed address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a defined Infoblox::DHCP::MSServer object. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get member
\& my $ref_member = $dhcp_fixedaddr\->member();
\& #Modify member
\& $dhcp_fixedaddr\->member($member1); #$member1 is an Infoblox::DHCP::MSServer object
.Ve
.RE
.RS 4
.RE
.SS "ms_ad_user_data( )"
.IX Subsection "ms_ad_user_data( )"
.RS 4
Use this method to retrieve Microsoft Active Directory users related information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::MSServer::AdUser::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_ad_user_data
\& my $ms_ad_user_data = $dhcp_fixedaddr\->ms_ad_user_data();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.Vb 1
\& Use this method to set or retrieve the name of a DHCP Fixed Address object.
.Ve
.Sp
.RS 4
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A string specifying the name of the fixed address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $fixed_addr\->name();
\& #Modify name
\& $fixed_addr\->name("fxname");
.Ve
.RE
.RS 4
.RE
.SS "netbios( )"
.IX Subsection "netbios( )"
.RS 4
Use this method to retrieve the name in the NetBIOS reply that responded to a NetBIOS query.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get netbios
\& my $netbios = $fixed_addr\->netbios();
.Ve
.RE
.RS 4
.RE
.SS "ms_options( )"
.IX Subsection "ms_options( )"
.RS 4
Use this method to set or retrieve the Microsoft server custom \s-1DHCP\s0 options associated with this \s-1DHCP\s0 fixed address.
.Sp
Note: You can set only options that are specified in both the Microsoft server and \s-1NIOS\s0 option definitions. Options that are not common to both the Microsoft server and \s-1NIOS\s0 cannot be modified.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains defined Infoblox::DHCP::MSOption objects. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get options
\& my $ref_options = $dhcp_fixedaddr\->ms_options();
\& #Modify options
\& $dhcp_fixedaddr\->ms_options([$option12]); #$option12 is an Infoblox::DHCP::MSOption object
.Ve
.RE
.RS 4
.RE
.SS "network( )"
.IX Subsection "network( )"
.RS 4
Use this method to retrieve the network value of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An network is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points followed by prefix (example: 1.0.0.0/8).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network
\& my $network = $fixed_addr\->network();
.Ve
.RE
.RS 4
.RE
.SS "network_component_description( )"
.IX Subsection "network_component_description( )"
.RS 4
Use this method to retrieve the description of the network device that is connected to the \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device description.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_description
\& my $network_component_description = $fixed_addr\->network_component_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_ip( )"
.IX Subsection "network_component_ip( )"
.RS 4
Use this method to retrieve the \s-1IP\s0 address of the network device that is connected to the \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1IP\s0 address of the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_ip
\& my $network_component_ip = $fixed_addr\->network_component_ip();
.Ve
.RE
.RS 4
.RE
.SS "network_component_name( )"
.IX Subsection "network_component_name( )"
.RS 4
Use this method to retrieve the name of the network device that is connected to the \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_name
\& my $network_component_name = $fixed_addr\->network_component_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_description( )"
.IX Subsection "network_component_port_description( )"
.RS 4
Use this method to retrieve the description of the network device port that is connected to the \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the description of the port on the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_description
\& my $network_component_port_description = $fixed_addr\->network_component_port_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_name( )"
.IX Subsection "network_component_port_name( )"
.RS 4
Use this method to retrieve the name of the network device port that is connected to the \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the name of the port on the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_name
\& my $network_component_port_name = $fixed_addr\->network_component_port_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_number( )"
.IX Subsection "network_component_port_number( )"
.RS 4
Use this method to retrieve the number of the network device port that is connected to the \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_number
\& my $network_component_port_number = $fixed_addr\->network_component_port_number();
.Ve
.RE
.RS 4
.RE
.SS "network_component_type( )"
.IX Subsection "network_component_type( )"
.RS 4
Use this method to retrieve the type of the network device that is connected to \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device type.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_type
\& my $network_component_type = $fixed_addr\->network_component_type();
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the network view of the \s-1DHCP\s0 fixed address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" network view, which means the fixed address is in the default network view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a defined Infoblox::DHCP::View object. The default network view value is the system-defined default network view object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network view
\& my $nview = $fixed_addr\->network_view();
\& #Modify network view, with an Infoblox::DHCP::View object
\& $fixed_addr\->network_view($nview);
.Ve
.RE
.RS 4
.RE
.SS "nextserver( )"
.IX Subsection "nextserver( )"
.RS 4
Use this method to set or retrieve the nextserver value of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::FixedAddr\->\fBbootfile()\fR and Infoblox::DHCP::FixedAddr\->\fBbootserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The next server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A next server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get nextserver
\& my $nextserver = $fixed_addr\->nextserver();
\& #Modify nextserver
\& $fixed_addr\->nextserver("3.3.3.4");
\& #Un\-override nextserver
\& $fixed_addr\->nextserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "options( )"
.IX Subsection "options( )"
.RS 4
Use this method to set or retrieve the options of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
See Infoblox::DHCP::Option for parameters and methods available for this object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Options describe network configuration settings and various services available on the network. These options occur as variable-length fields at the end of \s-1DHCP\s0 messages.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get options
\& my $options = $fixed_addr\->options();
\& #Modify options
\& $fixed_addr\->options([$option1, $option2]);
.Ve
.RE
.RS 4
.RE
.SS "os( )"
.IX Subsection "os( )"
.RS 4
Use this method to retrieve the operating system associated with this fixed address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get os
\& my $os = $fixed_addr\->os();
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_domainname( )"
.IX Subsection "override_ddns_domainname( )"
.RS 4
The override_ddns_domainname attribute controls whether the ddns_domainname value in the \s-1DHCP\s0 Fixed Address is used, instead of the grid default.
.Sp
The override_ddns_domainname attribute can be specified explicitly. It is also set implicitly when ddns_domainname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for ddns_domainname. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for ddns_domainname.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_domainname
\&    my $override_ddns_domainname=$fixed_addr\->override_ddns_domainname( );
\&    #Modifying override_ddns_domainname
\&    $fixed_addr\->override_ddns_domainname("true");
.Ve
.RE
.RS 4
.RE
.SS "override_cli_credentials( )"
.IX Subsection "override_cli_credentials( )"
.RS 4
The override_cli_credentials attribute controls whether the cli_credentials value in the object is used, instead of the grid default.
.Sp
The override_cli_credentials attribute can be specified explicitly. It is also set implicitly when cli_credentials is set to a defined value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_cli_credentials flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $fixed_addr\->override_cli_credentials();
\& # Modify attribute value
\& $fixed_addr\->override_cli_credentials(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_logic_filters( )"
.IX Subsection "override_logic_filters( )"
.RS 4
The override_logic_filters attribute controls whether the logic_filters value of the \s-1DHCP\s0 Fixed Address is used, instead of the Grid default.
.Sp
The override_logic_filters attribute can be specified explicitly. It is also set implicitly when logic_filters is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for logic_filters. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for logic_filters.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_logic_filters
\& my $override_logic_filters=$fixed_addr\->override_logic_filters( );
\& #Modifying override_logic_filters
\& $fixed_addr\->override_logic_filters("true");
.Ve
.RE
.RS 4
.RE
.SS "port_duplex( )"
.IX Subsection "port_duplex( )"
.RS 4
Use this method to retrieve the duplex setting of the network device port that is connected to the \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the port duplex setting. Returned values, if any, are one of the following:
.Sp
.Vb 2
\&  Full
\&  Half
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_duplex
\& my $port_duplex = $fixed_addr\->port_duplex();
.Ve
.RE
.RS 4
.RE
.SS "port_link_status( )"
.IX Subsection "port_link_status( )"
.RS 4
Use this method to retrieve the link status of the network device port that is connected to the \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port link status. Returned values, if any, are one of the following:
.Sp
.Vb 3
\&  Connected
\&  Not Connected
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_link_status
\& my $port_link_status = $fixed_addr\->port_link_status();
.Ve
.RE
.RS 4
.RE
.SS "port_speed( )"
.IX Subsection "port_speed( )"
.RS 4
Use this method to retrieve the speed of the network device port that is connected to the \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port speed. Returned values, if any, are one of the following:
.Sp
.Vb 6
\&  10M
\&  100M
\&  1G
\&  10G
\&  100G
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_speed
\& my $port_speed = $fixed_addr\->port_speed();
.Ve
.RE
.RS 4
.RE
.SS "port_status( )"
.IX Subsection "port_status( )"
.RS 4
Use this method to retrieve the status of the network device port that is connected to the \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port status. Returned values, if any, are one of the following:
.Sp
.Vb 3
\&  Up
\&  Down
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_status
\& my $port_status = $fixed_addr\->port_status();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_description( )"
.IX Subsection "port_vlan_description( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 description of the network device port that is connected to the \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1VLAN\s0 description of the network device port.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_description
\& my $port_vlan_description = $fixed_addr\->port_vlan_description();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_name( )"
.IX Subsection "port_vlan_name( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 name of the network device port that is connected to the \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port \s-1VLAN\s0 name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_name
\& my $port_vlan_name = $fixed_addr\->port_vlan_name();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_number( )"
.IX Subsection "port_vlan_number( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 number of the network device port that is connected to the \s-1DHCP\s0 Fixed Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the port \s-1VLAN\s0 number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_number
\& my $port_vlan_number = $fixed_addr\->port_vlan_number();
.Ve
.RE
.RS 4
.RE
.SS "pxe_lease_time( )"
.IX Subsection "pxe_lease_time( )"
.RS 4
Use this method to set or retrieve the pxe_lease_time value of a \s-1DHCP\s0 Fixed Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter appropriate values in the Days, Hours, Mins and Secs fields.
User can specify the duration of time it takes a host to connect to a boot server, such as a \s-1TFTP\s0 server, and download the file it needs to boot.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get pxe_lease_time
\& my $pxe_lease_time = $fixed_addr\->pxe_lease_time();
\& #Modify pxe_lease_time
\& $fixed_addr\->pxe_lease_time("369");
.Ve
.RE
.RS 4
.RE
.SS "reserved_interface( )"
.IX Subsection "reserved_interface( )"
.RS 4
Use this method to set or retrieve the reserved discovery interface.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get reserved_interface
\& my $reserved_interface = $fixed_addr\->reserved_interface();
\& #Modify reserved_interface
\& $fixed_addr\->reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "template( )"
.IX Subsection "template( )"
.RS 4
Use this method to set or retrieve the fixed address template name for a \s-1DHCP\s0 Fixed Address object.
.Sp
Template is the name of a \s-1DHCP\s0 Fixed Address template which will be used to create the \s-1DHCP\s0 Fixed Address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid name in sting format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
The template parameter can be used to only add a new \s-1DHCP\s0 Fixed Address and cannot be used during object modify or returned during object get.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get template
\& my $template = $fixed_addr\->template();
\& #Modify template
\& $fixed_addr\->template("Template_Name");
.Ve
.RE
.RS 4
.RE
.SS "v_cluster( )"
.IX Subsection "v_cluster( )"
.RS 4
Use this method to retrieve the name of the VMware cluster associated with the \s-1DHCP\s0 Fixed Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware cluster name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_cluster
\& my $v_cluster = $fixed_addr\->v_cluster();
.Ve
.RE
.RS 4
.RE
.SS "v_datacenter( )"
.IX Subsection "v_datacenter( )"
.RS 4
Use this method to retrieve the name of the VMware datacenter associated with the \s-1DHCP\s0 Fixed Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware datacenter name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_datacenter
\& my $v_datacenter = $fixed_addr\->v_datacenter();
.Ve
.RE
.RS 4
.RE
.SS "v_host( )"
.IX Subsection "v_host( )"
.RS 4
Use this method to retrieve the name of the VMware host associated with the \s-1DHCP\s0 Fixed Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware host name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_host
\& my $v_host = $fixed_addr\->v_host();
.Ve
.RE
.RS 4
.RE
.SS "v_name( )"
.IX Subsection "v_name( )"
.RS 4
Use this method to retrieve the name of the VMware entity associated with the \s-1DHCP\s0 Fixed Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware entity name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_name
\& my $v_name = $fixed_addr\->v_name();
.Ve
.RE
.RS 4
.RE
.SS "v_netadapter( )"
.IX Subsection "v_netadapter( )"
.RS 4
Use this method to retrieve the name of the physical network adapter through which the VMware entity is connected to the appliance. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the network adapter name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_netadapter
\& my $v_netadapter = $fixed_addr\->v_netadapter();
.Ve
.RE
.RS 4
.RE
.SS "v_switch( )"
.IX Subsection "v_switch( )"
.RS 4
Use this method to retrieve the name of the virtual switch through which the VMware entity is connected to the appliance. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the virtual switch name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_switch
\& my $v_switch = $fixed_addr\->v_switch();
.Ve
.RE
.RS 4
.RE
.SS "v_type( )"
.IX Subsection "v_type( )"
.RS 4
Use this method to retrieve the type of VMware entity associated with the \s-1DHCP\s0 Fixed Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware entity type. The default value is an empty string. The returned value, if any, can be one of the following:
.Sp
.Vb 3
\& VirtualMachine
\& HostSystem
\& VirtualCenter
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_type
\& my $v_type = $fixed_addr\->v_type();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 Fixed Address object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create a network object
\& my $network = Infoblox::DHCP::Network\->new(
\&                                            "network" => "10.0.0.0/8",
\&                                           );
\& unless($network) {
\&      die("Construct Network object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network object created successfully\en";
\&
\& $session\->add($network)
\&     or die("Add network failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Network added successfully\en";
\&
\& my $option1 = Infoblox::DHCP::Option\->new(
\&                                           "name"  => "lease\-time",
\&                                           "value" => "50"
\&                                          );
\& unless($option1) {
\&      die("Construct option1 object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "option1 object created successfully\en";
\&
\& my $option2 = Infoblox::DHCP::Option\->new(
\&                                           "type"      => "routers",
\&                                           "ipv4addrs" => [ "10.0.0.1", "10.0.0.255" ],
\&                                          );
\& unless($option2) {
\&      die("Construct option2 object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "option2 object created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 Fixed address object\fR
.PP
.Vb 10
\& #Create a DHCP Fixed Address object
\& my $fixed_addr = Infoblox::DHCP::FixedAddr\->new(
\&     "ipv4addr"       => "10.0.0.6",
\&     "mac"            => "00:00:00:11:11:11",
\&     "network"        => "10.0.0.0/8",
\&     "comment"        => "add fixed address",
\&     "enable_ddns"    => "true",
\&     "pxe_lease_time" => "3600",
\&     "bootserver"     => "someserver.com",
\&     "nextserver"     => "3.3.3.3",
\&     "bootfile"       => "bootfile.com",
\&     "options"        => [ $option1 ,  $option2 ],
\& );
\& unless($fixed_addr) {
\&      die("Construct fixed address failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Fixed address object created successfully\en";
\&
\& #Verify if the DHCP Fixed Address exists in the Infoblox appliance
\& my $object = $session\->get(
\&        object => "Infoblox::DHCP::FixedAddr",
\&        mac    => "00:00:00:11:11:11"
\& );
\& unless ($object) {
\&    print "fixed address does not exist on server, safe to add the fixed address\en";
\&    $session\->add($fixed_addr)
\&       or die("Add fixed address failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "DHCP Fixed address added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 Fixed Address object using a template\fR
.PP
.Vb 10
\& #Create a DHCP Fixed Address template object
\& my $fixed_addr_template = Infoblox::DHCP::FixedAddrTemplate\->new(
\&     "name"                  => "custom_fa_template",
\&     "offset"                => "10",
\&     "number_of_addresses"   => "1",
\&     "comment"               => "add fixed address template",
\&     "enable_ddns"           => "TRUE",
\& );
\& unless($fixed_addr_template) {
\&      die("Construct fixed address failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Fixed address template object created successfully\en";
\&
\& $session\->add($fixed_addr_template)
\&       or die("Add fixed address template failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "DHCP Fixed address template added successfully\en";
\&
\& #Create a DHCP Fixed Address object
\& my $fixed_addr = Infoblox::DHCP::FixedAddr\->new(
\&     "network"        => "10.0.0.0/8",
\&     "ipv4addr"       => "10.0.0.7",
\&     "match_client"   => "RESERVED",
\&     "template"       => "custom_fa_template"
\& );
\& unless($fixed_addr) {
\&      die("Construct fixed address failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Fixed address object created successfully\en";
\&
\& $session\->add($fixed_addr)
\&       or die("Add fixed address failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "DHCP Fixed address added successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DHCP\s0 Fixed Address object\fR
.PP
.Vb 6
\& #Search for all DHCP Fixed address objects under the network 10.0.0.0/8
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DHCP::FixedAddr",
\&     mac     => "00:00:00:11:11.*",
\&     network => "10.0.0.0/8" );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search for Fixed Address object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Fixed Address object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DHCP\s0 Fixed Address object\fR
.PP
.Vb 11
\& #Get DHCP Fixed Address object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::FixedAddr",
\&     mac    => "00:00:00:11:11:11",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Fixed Address object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Fixed Address object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the obtained Fixed Address object
\& $object\->pxe_lease_time("1234");
\&
\& #Un\-override bootfile
\& $object\->bootfile(undef);
\&
\& #Un\-override bootserver
\& $object\->bootserver(undef);
\&
\& #Un\-override nextserver
\& $object\->nextserver(undef);
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify Fixed Address object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Fixed Address object modified successfully \en";
.Ve
.PP
\&\fB#Remove a Fixed Address object\fR
.PP
.Vb 11
\& #Get Fixed Address object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::FixedAddr",
\&     mac    => "00:00:00:11:11:11",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Fixed Address object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Fixed Address object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove Fixed Address object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Fixed Address object removed successfully \en";
\&
\& #Submit the Network object for removal
\& $session\->remove($network)
\&     or die("Remove Network object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object removed successfully \en";
\&
\& #Submit the Fixed Address Template object for removal
\& $session\->remove($fixed_addr_template)
\&     or die("Remove Fixed Address Template object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Fixed Address Template object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DHCP::Network,
Infoblox::DHCP::View,
Infoblox::DHCP::Range,
Infoblox::DHCP::Lease,
Infoblox::Session\->\fBadd()\fR,
Infoblox::Session\->\fBget()\fR,
Infoblox::Session\->\fBmodify()\fR,
Infoblox::Session\->\fBremove()\fR,
Infoblox::Session\->\fBsearch()\fR,
Infoblox::Session,
Infoblox::DHCP::FixedAddrTemplate,
Infoblox::Grid::Discovery::Data
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
