.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::CiscoVTP 3"
.TH SNMP::Info::CiscoVTP 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::CiscoVTP \- SNMP Interface to Cisco's VLAN Management MIBs
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Baker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& # Let SNMP::Info determine the correct subclass for you.
\& my $vtp = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class = $vtp\->class();
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SNMP::Info::CiscoVTP is a subclass of SNMP::Info that provides
information about a Cisco device's \s-1VLAN\s0 and \s-1VTP\s0 Domain membership.
.PP
Use or create in a subclass of SNMP::Info.  Do not use directly.
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
None.
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fICISCO-VTP-MIB\fR" 4
.IX Item "CISCO-VTP-MIB"
.PD 0
.IP "\fICISCO-VLAN-MEMBERSHIP-MIB\fR" 4
.IX Item "CISCO-VLAN-MEMBERSHIP-MIB"
.IP "\fICISCO-VLAN-IFTABLE-RELATIONSHIP-MIB\fR" 4
.IX Item "CISCO-VLAN-IFTABLE-RELATIONSHIP-MIB"
.PD
.SH "GLOBALS"
.IX Header "GLOBALS"
.ie n .IP "$vtp\->\fBvtp_version()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_version()\fR" 4
.IX Item "$vtp->vtp_version()"
(\f(CW\*(C`vtpVersion\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_maxstore()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_maxstore()\fR" 4
.IX Item "$vtp->vtp_maxstore()"
(\f(CW\*(C`vtpMaxVlanStorage\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_notify()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_notify()\fR" 4
.IX Item "$vtp->vtp_notify()"
(\f(CW\*(C`vtpNotificationsEnabled\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_notify_create()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_notify_create()\fR" 4
.IX Item "$vtp->vtp_notify_create()"
(\f(CW\*(C`vtpVlanCreatedNotifEnabled\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_notify_delete()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_notify_delete()\fR" 4
.IX Item "$vtp->vtp_notify_delete()"
(\f(CW\*(C`vtpVlanDeletedNotifEnabled\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_trunk_set_serial()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_trunk_set_serial()\fR" 4
.IX Item "$vtp->vtp_trunk_set_serial()"
(\f(CW\*(C`vlanTrunkPortSetSerialNo\*(C'\fR)
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
Your device will only implement a subset of these methods.
.ie n .IP "$vtp\->\fBi_vlan()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBi_vlan()\fR" 4
.IX Item "$vtp->i_vlan()"
Returns a mapping between \f(CW\*(C`ifIndex\*(C'\fR and assigned \s-1VLAN ID\s0 for access ports
and the default \s-1VLAN ID\s0 for trunk ports.
.ie n .IP "$vtp\->\fBi_untagged()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBi_untagged()\fR" 4
.IX Item "$vtp->i_untagged()"
An alias for \f(CW\*(C`i_vlan\*(C'\fR.
.ie n .IP "$vtp\->\fBi_vlan_membership()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBi_vlan_membership()\fR" 4
.IX Item "$vtp->i_vlan_membership()"
Returns reference to hash of arrays: key = \f(CW\*(C`ifIndex\*(C'\fR, value = array of \s-1VLAN\s0
IDs.  These are the VLANs which are members of enabled \s-1VLAN\s0 list for the port.
.Sp
.Vb 3
\&  Example:
\&  my $interfaces = $vtp\->interfaces();
\&  my $vlans      = $vtp\->i_vlan_membership();
\&
\&  foreach my $iid (sort keys %$interfaces) {
\&    my $port = $interfaces\->{$iid};
\&    my $vlan = join(\*(Aq,\*(Aq, sort(@{$vlans\->{$iid}}));
\&    print "Port: $port VLAN: $vlan\en";
\&  }
.Ve
.ie n .IP "$vtp\->\fBi_vlan_membership_untagged()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBi_vlan_membership_untagged()\fR" 4
.IX Item "$vtp->i_vlan_membership_untagged()"
Returns reference to hash of arrays: key = \f(CW\*(C`ifIndex\*(C'\fR, value = array of \s-1VLAN\s0
IDs.  These are the VLANs which are members of the untagged egress list for
the port.
.ie n .SS "\s-1VLAN\s0 Table (""CISCO\-VTP\-MIB::vtpVlanTable"")"
.el .SS "\s-1VLAN\s0 Table (\f(CWCISCO\-VTP\-MIB::vtpVlanTable\fP)"
.IX Subsection "VLAN Table (CISCO-VTP-MIB::vtpVlanTable)"
See <ftp://ftp.cisco.com/pub/mibs/supportlists/wsc5000/wsc5000\-communityIndexing.html>
for a good treaty of how to connect to the VLANs
.ie n .IP "$vtp\->\fBv_index()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_index()\fR" 4
.IX Item "$vtp->v_index()"
(\f(CW\*(C`vtpVlanIndex\*(C'\fR)
.ie n .IP "$vtp\->\fBv_state()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_state()\fR" 4
.IX Item "$vtp->v_state()"
(\f(CW\*(C`vtpVlanState\*(C'\fR)
.ie n .IP "$vtp\->\fBv_type()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_type()\fR" 4
.IX Item "$vtp->v_type()"
(\f(CW\*(C`vtpVlanType\*(C'\fR)
.ie n .IP "$vtp\->\fBv_name()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_name()\fR" 4
.IX Item "$vtp->v_name()"
(\f(CW\*(C`vtpVlanName\*(C'\fR)
.ie n .IP "$vtp\->\fBv_mtu()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_mtu()\fR" 4
.IX Item "$vtp->v_mtu()"
(\f(CW\*(C`vtpVlanMtu\*(C'\fR)
.ie n .IP "$vtp\->\fBv_said()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_said()\fR" 4
.IX Item "$vtp->v_said()"
(\f(CW\*(C`vtpVlanDot10Said\*(C'\fR)
.ie n .IP "$vtp\->\fBv_ring()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_ring()\fR" 4
.IX Item "$vtp->v_ring()"
(\f(CW\*(C`vtpVlanRingNumber\*(C'\fR)
.ie n .IP "$vtp\->\fBv_bridge()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_bridge()\fR" 4
.IX Item "$vtp->v_bridge()"
(\f(CW\*(C`vtpVlanBridgeNumber\*(C'\fR)
.ie n .IP "$vtp\->\fBv_stp()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_stp()\fR" 4
.IX Item "$vtp->v_stp()"
(\f(CW\*(C`vtpVlanStpType\*(C'\fR)
.ie n .IP "$vtp\->\fBv_parent()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_parent()\fR" 4
.IX Item "$vtp->v_parent()"
(\f(CW\*(C`vtpVlanParentVlan\*(C'\fR)
.ie n .IP "$vtp\->\fBv_trans1()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_trans1()\fR" 4
.IX Item "$vtp->v_trans1()"
(\f(CW\*(C`vtpVlanTranslationalVlan1\*(C'\fR)
.ie n .IP "$vtp\->\fBv_trans2()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_trans2()\fR" 4
.IX Item "$vtp->v_trans2()"
(\f(CW\*(C`vtpVlanTranslationalVlan2\*(C'\fR)
.ie n .IP "$vtp\->\fBv_btype()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_btype()\fR" 4
.IX Item "$vtp->v_btype()"
(\f(CW\*(C`vtpVlanBridgeType\*(C'\fR)
.ie n .IP "$vtp\->\fBv_hop_are()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_hop_are()\fR" 4
.IX Item "$vtp->v_hop_are()"
(\f(CW\*(C`vtpVlanAreHopCount\*(C'\fR)
.ie n .IP "$vtp\->\fBv_hop_ste()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_hop_ste()\fR" 4
.IX Item "$vtp->v_hop_ste()"
(\f(CW\*(C`vtpVlanSteHopCount\*(C'\fR)
.ie n .IP "$vtp\->\fBv_crf()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_crf()\fR" 4
.IX Item "$vtp->v_crf()"
(\f(CW\*(C`vtpVlanIsCRFBackup\*(C'\fR)
.ie n .IP "$vtp\->\fBv_type_ext()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_type_ext()\fR" 4
.IX Item "$vtp->v_type_ext()"
(\f(CW\*(C`vtpVlanTypeExt\*(C'\fR)
.ie n .IP "$vtp\->\fBv_if()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBv_if()\fR" 4
.IX Item "$vtp->v_if()"
(\f(CW\*(C`vtpVlanIfIndex\*(C'\fR)
.ie n .SS "\s-1VLAN\s0 Membership Table (""CISCO\-VLAN\-MEMBERSHIP\-MIB::vmMembershipTable"")"
.el .SS "\s-1VLAN\s0 Membership Table (\f(CWCISCO\-VLAN\-MEMBERSHIP\-MIB::vmMembershipTable\fP)"
.IX Subsection "VLAN Membership Table (CISCO-VLAN-MEMBERSHIP-MIB::vmMembershipTable)"
.ie n .IP "$vtp\->\fBi_vlan_type()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBi_vlan_type()\fR" 4
.IX Item "$vtp->i_vlan_type()"
Static, Dynamic, or multiVlan.
.Sp
(\f(CW\*(C`vmVlanType\*(C'\fR)
.ie n .IP "$vtp\->\fBi_vlan2()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBi_vlan2()\fR" 4
.IX Item "$vtp->i_vlan2()"
The \s-1VLAN\s0 that an access port is assigned to.
.Sp
(\f(CW\*(C`vmVlan\*(C'\fR)
.ie n .IP "$vtp\->\fBi_vlan_stat()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBi_vlan_stat()\fR" 4
.IX Item "$vtp->i_vlan_stat()"
Inactive, active, shutdown.
.Sp
(\f(CW\*(C`vmPortStatus\*(C'\fR)
.ie n .IP "$vtp\->\fBi_vlan_1()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBi_vlan_1()\fR" 4
.IX Item "$vtp->i_vlan_1()"
Each bit represents a \s-1VLAN.\s0  This is 0 through 1023
.Sp
(\f(CW\*(C`vmVlans\*(C'\fR)
.ie n .IP "$vtp\->\fBi_vlan_2()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBi_vlan_2()\fR" 4
.IX Item "$vtp->i_vlan_2()"
Each bit represents a \s-1VLAN.\s0  This is 1024 through 2047
.Sp
(\f(CW\*(C`vmVlans2k\*(C'\fR)
.ie n .IP "$vtp\->\fBi_vlan_3()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBi_vlan_3()\fR" 4
.IX Item "$vtp->i_vlan_3()"
Each bit represents a \s-1VLAN.\s0  This is 2048 through 3071
.Sp
(\f(CW\*(C`vmVlans3k\*(C'\fR)
.ie n .IP "$vtp\->\fBi_vlan_4()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBi_vlan_4()\fR" 4
.IX Item "$vtp->i_vlan_4()"
Each bit represents a \s-1VLAN.\s0  This is 3072 through 4095
.Sp
(\f(CW\*(C`vmVlans4k\*(C'\fR)
.ie n .SS "\s-1VLAN\s0 Membership Voice \s-1VLAN\s0 Table (""CISCO\-VLAN\-MEMBERSHIP\-MIB::vmVoiceVlanTable"")"
.el .SS "\s-1VLAN\s0 Membership Voice \s-1VLAN\s0 Table (\f(CWCISCO\-VLAN\-MEMBERSHIP\-MIB::vmVoiceVlanTable\fP)"
.IX Subsection "VLAN Membership Voice VLAN Table (CISCO-VLAN-MEMBERSHIP-MIB::vmVoiceVlanTable)"
.ie n .IP "$vtp\->\fBi_voice_vlan()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBi_voice_vlan()\fR" 4
.IX Item "$vtp->i_voice_vlan()"
(\f(CW\*(C`vmVoiceVlanId\*(C'\fR)
.ie n .SS "Management Domain Table (""CISCO\-VTP\-MIB::managementDomainTable"")"
.el .SS "Management Domain Table (\f(CWCISCO\-VTP\-MIB::managementDomainTable\fP)"
.IX Subsection "Management Domain Table (CISCO-VTP-MIB::managementDomainTable)"
.ie n .IP "$vtp\->\fBvtp_d_name()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_d_name()\fR" 4
.IX Item "$vtp->vtp_d_name()"
(\f(CW\*(C`managementDomainName\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_d_mode()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_d_mode()\fR" 4
.IX Item "$vtp->vtp_d_mode()"
(\f(CW\*(C`managementDomainLocalMode\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_d_rev()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_d_rev()\fR" 4
.IX Item "$vtp->vtp_d_rev()"
(\f(CW\*(C`managementDomainConfigRevNumber\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_d_updater()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_d_updater()\fR" 4
.IX Item "$vtp->vtp_d_updater()"
(\f(CW\*(C`managementDomainLastUpdater\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_d_last()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_d_last()\fR" 4
.IX Item "$vtp->vtp_d_last()"
(\f(CW\*(C`managementDomainLastChange\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_d_status()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_d_status()\fR" 4
.IX Item "$vtp->vtp_d_status()"
(\f(CW\*(C`managementDomainRowStatus\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_d_tftp()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_d_tftp()\fR" 4
.IX Item "$vtp->vtp_d_tftp()"
(\f(CW\*(C`managementDomainTftpServer\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_d_tftp_path()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_d_tftp_path()\fR" 4
.IX Item "$vtp->vtp_d_tftp_path()"
(\f(CW\*(C`managementDomainTftpPathname\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_d_pruning()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_d_pruning()\fR" 4
.IX Item "$vtp->vtp_d_pruning()"
(\f(CW\*(C`managementDomainPruningState\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_d_ver()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_d_ver()\fR" 4
.IX Item "$vtp->vtp_d_ver()"
(\f(CW\*(C`managementDomainVersionInUse\*(C'\fR)
.ie n .SS "\s-1VLAN\s0 Trunk Port Table (""CISCO\-VTP\-MIB::vlanTrunkPortTable"")"
.el .SS "\s-1VLAN\s0 Trunk Port Table (\f(CWCISCO\-VTP\-MIB::vlanTrunkPortTable\fP)"
.IX Subsection "VLAN Trunk Port Table (CISCO-VTP-MIB::vlanTrunkPortTable)"
.ie n .IP "$vtp\->\fBvtp_trunk_mgmt_dom()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_trunk_mgmt_dom()\fR" 4
.IX Item "$vtp->vtp_trunk_mgmt_dom()"
(\f(CW\*(C`vlanTrunkPortManagementDomain\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_trunk_encaps_t()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_trunk_encaps_t()\fR" 4
.IX Item "$vtp->vtp_trunk_encaps_t()"
(\f(CW\*(C`vlanTrunkPortEncapsulationType\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_trunk_vlans()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_trunk_vlans()\fR" 4
.IX Item "$vtp->vtp_trunk_vlans()"
(\f(CW\*(C`vlanTrunkPortVlansEnabled\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_trunk_vlans_2k()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_trunk_vlans_2k()\fR" 4
.IX Item "$vtp->vtp_trunk_vlans_2k()"
(\f(CW\*(C`vlanTrunkPortVlansEnabled2k\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_trunk_vlans_3k()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_trunk_vlans_3k()\fR" 4
.IX Item "$vtp->vtp_trunk_vlans_3k()"
(\f(CW\*(C`vlanTrunkPortVlansEnabled3k\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_trunk_vlans_4k()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_trunk_vlans_4k()\fR" 4
.IX Item "$vtp->vtp_trunk_vlans_4k()"
(\f(CW\*(C`vlanTrunkPortVlansEnabled4k\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_trunk_native()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_trunk_native()\fR" 4
.IX Item "$vtp->vtp_trunk_native()"
(\f(CW\*(C`vlanTrunkPortNativeVlan\*(C'\fR)
.ie n .IP "$vtp\->\fBi_pvid()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBi_pvid()\fR" 4
.IX Item "$vtp->i_pvid()"
(\f(CW\*(C`vlanTrunkPortNativeVlan\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_trunk_rstat()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_trunk_rstat()\fR" 4
.IX Item "$vtp->vtp_trunk_rstat()"
(\f(CW\*(C`vlanTrunkPortRowStatus\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_trunk_dyn()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_trunk_dyn()\fR" 4
.IX Item "$vtp->vtp_trunk_dyn()"
(\f(CW\*(C`vlanTrunkPortDynamicState\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_trunk_dyn_stat()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_trunk_dyn_stat()\fR" 4
.IX Item "$vtp->vtp_trunk_dyn_stat()"
(\f(CW\*(C`vlanTrunkPortDynamicStatus\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_trunk_vtp()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_trunk_vtp()\fR" 4
.IX Item "$vtp->vtp_trunk_vtp()"
(\f(CW\*(C`vlanTrunkPortVtpEnabled\*(C'\fR)
.ie n .IP "$vtp\->\fBvtp_trunk_encaps()\fR" 4
.el .IP "\f(CW$vtp\fR\->\fBvtp_trunk_encaps()\fR" 4
.IX Item "$vtp->vtp_trunk_encaps()"
(\f(CW\*(C`vlanTrunkPortEncapsulationOperType\*(C'\fR)
.SH "SET METHODS"
.IX Header "SET METHODS"
These are methods that provide \s-1SNMP\s0 set functionality for overridden methods
or provide a simpler interface to complex set operations.  See
\&\*(L"\s-1SETTING DATA VIA SNMP\*(R"\s0 in SNMP::Info for general information on set
operations.
.ie n .IP "$vtp\->set_i_vlan ( vlan, ifIndex )" 4
.el .IP "\f(CW$vtp\fR\->set_i_vlan ( vlan, ifIndex )" 4
.IX Item "$vtp->set_i_vlan ( vlan, ifIndex )"
Changes an access (untagged) port \s-1VLAN,\s0 must be supplied with the numeric
\&\s-1VLAN ID\s0 and port \f(CW\*(C`ifIndex\*(C'\fR.  This method should only be used on end station
(non-trunk) ports.
.Sp
.Vb 4
\&  Example:
\&  my %if_map = reverse %{$vtp\->interfaces()};
\&  $vtp\->set_i_vlan(\*(Aq2\*(Aq, $if_map{\*(AqFastEthernet0/1\*(Aq})
\&    or die "Couldn\*(Aqt change port VLAN. ",$vtp\->error(1);
.Ve
.ie n .IP "$vtp\->set_i_pvid ( pvid, ifIndex )" 4
.el .IP "\f(CW$vtp\fR\->set_i_pvid ( pvid, ifIndex )" 4
.IX Item "$vtp->set_i_pvid ( pvid, ifIndex )"
Sets port default \s-1VLAN,\s0 must be supplied with the numeric \s-1VLAN ID\s0 and
port \f(CW\*(C`ifIndex\*(C'\fR.  This method should only be used on trunk ports.
.Sp
.Vb 4
\&  Example:
\&  my %if_map = reverse %{$vtp\->interfaces()};
\&  $vtp\->set_i_pvid(\*(Aq2\*(Aq, $if_map{\*(AqFastEthernet0/1\*(Aq})
\&    or die "Couldn\*(Aqt change port default VLAN. ",$vtp\->error(1);
.Ve
.ie n .IP "$vtp\->set_i_untagged ( vlan, ifIndex )" 4
.el .IP "\f(CW$vtp\fR\->set_i_untagged ( vlan, ifIndex )" 4
.IX Item "$vtp->set_i_untagged ( vlan, ifIndex )"
This method attempts to work out whether the port referenced by ifIndex is
trunking, and if so will return the value of \f(CW\*(C`set_i_pvid\*(C'\fR. Otherwise, the
value of \f(CW\*(C`set_i_vlan\*(C'\fR is returned.
.ie n .IP "$vtp\->set_add_i_vlan_tagged ( vlan, ifIndex )" 4
.el .IP "\f(CW$vtp\fR\->set_add_i_vlan_tagged ( vlan, ifIndex )" 4
.IX Item "$vtp->set_add_i_vlan_tagged ( vlan, ifIndex )"
Adds the \s-1VLAN\s0 to the enabled VLANs list of the port, must be supplied with the
numeric \s-1VLAN ID\s0 and port \f(CW\*(C`ifIndex\*(C'\fR.
.Sp
.Vb 4
\&  Example:
\&  my %if_map = reverse %{$vtp\->interfaces()};
\&  $vtp\->set_add_i_vlan_tagged(\*(Aq2\*(Aq, $if_map{\*(AqFastEthernet0/1\*(Aq})
\&    or die "Couldn\*(Aqt add port to egress list. ",$vtp\->error(1);
.Ve
.ie n .IP "$vtp\->set_remove_i_vlan_tagged ( vlan, ifIndex )" 4
.el .IP "\f(CW$vtp\fR\->set_remove_i_vlan_tagged ( vlan, ifIndex )" 4
.IX Item "$vtp->set_remove_i_vlan_tagged ( vlan, ifIndex )"
Removes the \s-1VLAN\s0 from the enabled VLANs list of the port, must be supplied
with the numeric \s-1VLAN ID\s0 and port \f(CW\*(C`ifIndex\*(C'\fR.
.Sp
.Vb 4
\&  Example:
\&  my %if_map = reverse %{$vtp\->interfaces()};
\&  $vtp\->set_remove_i_vlan_tagged(\*(Aq2\*(Aq, $if_map{\*(AqFastEthernet0/1\*(Aq})
\&    or die "Couldn\*(Aqt add port to egress list. ",$vtp\->error(1);
.Ve
