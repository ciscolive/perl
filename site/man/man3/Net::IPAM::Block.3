.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::IPAM::Block 3"
.TH Net::IPAM::Block 3 "2020-08-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::IPAM::Block \- A library for reading, formatting, sorting and converting IP\-blocks.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::IPAM::Block;
\&
\&  # parse and normalize
\&  $cidr  = Net::IPAM::Block\->new(\*(Aq10.0.0.0/255.0.0.0\*(Aq) // die \*(Aqwrong format,\*(Aq;
\&  $cidr  = Net::IPAM::Block\->new(\*(Aq10.0.0.0/8\*(Aq)         // die \*(Aqwrong format,\*(Aq;
\&  $range = Net::IPAM::Block\->new(\*(Aqfe80::2\-fe80::e\*(Aq)    // die \*(Aqwrong format,\*(Aq;
\&  $host  = Net::IPAM::Block\->new(\*(Aq2001:db8::1\*(Aq)        // die \*(Aqwrong format,\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A block is an IP-network or IP-range, e.g.
.PP
.Vb 5
\& 192.168.0.1/255.255.255.0   # network, with IP mask
\& 192.168.0.1/24              # network, with CIDR mask
\& ::1/128                     # network, with CIDR mask
\& 10.0.0.3\-10.0.17.134        # range
\& 2001:db8::1\-2001:db8::f6    # range
.Ve
.PP
The parsed block is represented as an object with:
.PP
.Vb 3
\& base
\& last
\& mask    # if block is a CIDR, otherwise undef
.Ve
.PP
This representation is fast sortable without conversions to/from the different \s-1IP\s0 versions.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  $b = Net::IPAM::Block\->new(\*(Aqfe80::/10\*(Aq);
.Ve
.PP
\&\fBnew()\fR parses the input as \s-1CIDR,\s0 range or address (or \s-1IP\s0 object, see below) and returns the Net::IPAM::Block object.
.PP
Example for valid input strings:
.PP
.Vb 3
\& 2001:db8:dead::/38
\& 10.0.0.0/8
\& 10.0.0.0/255.0.0.0
\&
\& 2001:db8::1\-2001:db8::ff00:35
\& 192.168.2.3\-192.168.7.255
.Ve
.PP
If a begin-end range can be represented as a \s-1CIDR,\s0 \fBnew()\fR calculates the netmask and returns the range as \s-1CIDR\s0 block with a proper mask.
.PP
Plain \s-1IP\s0 addresses as input strings or objects are converted to /32 or /128 CIDRs.
.PP
.Vb 4
\&  0.0.0.0                       => 0.0.0.0/32
\&  ::ffff:127.0.0.1              => 127.0.0.1/32
\&  ::                            => ::/128
\&  Net::IPAM::IP\->new(\*(Aq1.2.3.4\*(Aq) => 1.2.3.4/32
\&
\&
\&  $range = Net::IPAM::Block\->new(\*(Aq10.2.0.17\-10.3.67.255\*(Aq) // die \*(Aqwrong block format,\*(Aq;
\&  $range = Net::IPAM::Block\->new(\*(Aqfe80::\-fe80::1234\*(Aq)     // die \*(Aqwrong block format,\*(Aq;
\&
\&  $cidr_24  = Net::IPAM::Block\->new(\*(Aq10.0.0.0/24\*(Aq) // die \*(Aqwrong block format,\*(Aq;
\&  $cidr_32  = Net::IPAM::Block\->new(\*(Aq192.168.0.1\*(Aq) // die \*(Aqwrong block format,\*(Aq;
\&  $cidr_128 = Net::IPAM::Block\->new(\*(Aq2001:db8::1\*(Aq) // die \*(Aqwrong block format,\*(Aq;
\&
\&  $cidr_128 = Net::IPAM::Block\->new( Net::IPAM::IP\->new(\*(Aq2001:db8::1\*(Aq) // die \*(Aqwrong IP format,\*(Aq );
.Ve
.PP
Returns undef on illegal input.
.SS "version"
.IX Subsection "version"
.Vb 1
\&  $v = $b\->version
.Ve
.PP
Returns 4 or 6.
.SS "to_string"
.IX Subsection "to_string"
Returns the block in canonical form.
.PP
.Vb 3
\&  say Net::IPAM::Block\->new(\*(Aqfe80::aa/10\*(Aq)\->to_string;        # fe80::/10
\&  say Net::IPAM::Block\->new(\*(Aq1.2.3.4\-1.2.3.36\*(Aq)\->to_string;   # 1.2.3.4\-1.2.3.36
\&  say Net::IPAM::Block\->new(\*(Aq127.0.0.1\*(Aq)\->to_string;          # 127.0.0.1/32
.Ve
.PP
Stringification is overloaded with \*(L"to_string\*(R"
.PP
.Vb 2
\&  my $b = Net::IPAM::Block\->new(\*(Aqfe80::/10\*(Aq);
\&  say $b;                                      # fe80::/10
.Ve
.SS "is_cidr"
.IX Subsection "is_cidr"
.Vb 1
\&  $b\->is_cidr
.Ve
.PP
Returns true if the block is a \s-1CIDR.\s0
.PP
.Vb 2
\&  Net::IPAM::Block\->new(\*(Aqfe80::aa/10\*(Aq)\->is_cidr        # true
\&  Net::IPAM::Block\->new(\*(Aq1.2.3.1\-1.2.3.2\*(Aq)\->is_cidr    # false
.Ve
.SS "cidrsplit"
.IX Subsection "cidrsplit"
.Vb 1
\&  @cidrs = $b\->cidrsplit
.Ve
.PP
Returns the next 2 cidrs splitted from block.
.PP
.Vb 2
\&  Net::IPAM::Block\->new(\*(Aq0.0.0.0/7\*(Aq)\->cidrsplit    # 0.0.0.0/8  1.0.0.0/8
\&  Net::IPAM::Block\->new(\*(Aqfe80::/12\*(Aq)\->cidrsplit    # fe80::/13  fe88::/13
.Ve
.PP
Returns undef if cidr mask is at maximum or if block is no \s-1CIDR.\s0
.SS "to_cidrs"
.IX Subsection "to_cidrs"
.Vb 1
\&  @cidrs = $b\->to_cidrs
.Ve
.PP
Returns a list of Net::IPAM::Block objects as true CIDRs, representing the range.
.PP
.Vb 3
\&  Net::IPAM::Block\->new(\*(Aq17.0.0.1\-17.0.0.2\*(Aq)\->to_cidrs  # 17.0.0.1/32 17.0.0.2/32
\&  Net::IPAM::Block\->new(\*(Aqfe80::aa\-fe80::ac\*(Aq)\->to_cidrs  # fe80::aa/127 fe80::ac/128
\&  Net::IPAM::Block\->new(\*(Aq1.2.3.0\-1.2.3.101\*(Aq)\->to_cidrs  # 1.2.3.0/26 1.2.3.64/27 1.2.3.96/30 1.2.3.100/31
.Ve
.PP
If the range is a \s-1CIDR,\s0 just returns the \s-1CIDR:\s0
.PP
.Vb 2
\&  Net::IPAM::Block\->new(\*(Aq10.0.0.0/8\*(Aq)\->to_cidrs         # 10.0.0.0/8
\&  Net::IPAM::Block\->new(\*(Aq::1\*(Aq)\->to_cidrs                # ::1/128
.Ve
.SS "base"
.IX Subsection "base"
.Vb 1
\&  $ip = $b\->base
.Ve
.PP
Returns the base \s-1IP,\s0 as Net::IPAM::IP object.
.PP
.Vb 2
\&  $b = Net::IPAM::Block\->new(\*(Aqfe80::ffff/10\*(Aq);
\&  say $b\->base;  # fe80::/10
.Ve
.SS "last"
.IX Subsection "last"
.Vb 1
\&  $ip = $b\->last
.Ve
.PP
Returns the last \s-1IP,\s0 as Net::IPAM::IP object.
.PP
.Vb 2
\&  $b = Net::IPAM::Block\->new(\*(Aq10.0.0.0/30\*(Aq)
\&  say $b\->last;  # 10.0.0.3
.Ve
.SS "mask"
.IX Subsection "mask"
.Vb 1
\&  $ip = $b\->mask
.Ve
.PP
Returns the netmask as Net::IPAM::IP object.
.PP
.Vb 2
\&  $b = Net::IPAM::Block\->new(\*(Aq10.0.0.0/24\*(Aq)
\&  say $b\->mask if defined $b\->mask;  # 255.255.255.0
.Ve
.PP
The mask is only defined for real \s-1CIDR\s0 blocks.
.PP
Example:
.PP
.Vb 2
\&  1.2.3.4            => mask is /32  = 255.255.255.255
\&  ::1                => mask is /128 = ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
\&
\&  10.0.0.0\-10.0.0.15 => mask is /28  = 255.255.255.240
\&  ::\-::f             => mask is /124 = ffff:ffff:ffff:ffff:ffff:ffff:ffff:fff0
\&
\&  10.0.0.0/24        => mask is /24  = 255.255.255.0
\&  fe80::/10          => mask is /10  = ffc0:0000:0000:0000:0000:0000:0000:0000
\&
\&  10.0.0.0\-10.0.0.13 => mask is undef
\&  ::\-::5             => mask is undef
.Ve
.SS "hostmask"
.IX Subsection "hostmask"
.Vb 1
\&  $ip = $b\->hostmask
.Ve
.PP
Returns the hostmask as Net::IPAM::IP object.
.PP
.Vb 3
\&  $b = Net::IPAM::Block\->new(\*(Aq10.0.0.0/24\*(Aq)
\&  say $b\->mask;      # 255.255.255.0
\&  say $b\->hostmask;  # 0.0.0.255
\&
\&  $b = Net::IPAM::Block\->new(\*(Aqfe80::/10\*(Aq)
\&  say $b\->mask;      # ffc0::
\&  say $b\->hostmask;  #   3f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
.Ve
.PP
The hostmask is only defined for real \s-1CIDR\s0 blocks.
.SS "bitlen"
.IX Subsection "bitlen"
\&\f(CW\*(C`bitlen\*(C'\fR returns the minimum number of bits to represent a range from base to last
.PP
.Vb 1
\&  $n = $b\->bitlen
.Ve
.PP
obvious for \s-1CIDR\s0 blocks:
.PP
.Vb 2
\&  $b = Net::IPAM::Block\->new(\*(Aq10.0.0.0/24\*(Aq)
\&  say $b\->bitlen;     # 32 \- 24 = 8 bit
\&
\&  $b = Net::IPAM::Block\->new(\*(Aq::/0\*(Aq);
\&  say $b\->bitlen;     # 128 \- 0 = 128 bit
.Ve
.PP
not so obvious for ranges:
.PP
.Vb 2
\&  $b = Net::IPAM::Block\->new(\*(Aq2001:db8::affe\-2001:db8::cafe\*(Aq);
\&  say $b\->bitlen;     # 15 bit (at least)
.Ve
.SS "iter"
.IX Subsection "iter"
\&\f(CW\*(C`iter\*(C'\fR returns the next \s-1IP\s0 in block, starting with base and stopping at last. Returns undef after last.
.PP
.Vb 4
\&  $b = Net::IPAM::Block\->new(\*(Aq2001:db8::affe\-2001:db8::cafe\*(Aq);
\&  while ( my $ip = $b\->iter ) {
\&    say $ip;
\&  }
\&
\&  OUTPUT:
\&
\&  2001:db8::affe
\&  2001:db8::afff
\&  2001:db8::b000
\&  2001:db8::b001
\&  ...
\&  2001:db8::cafb
\&  2001:db8::cafc
\&  2001:db8::cafd
\&  2001:db8::cafe
.Ve
.SS "cmp"
.IX Subsection "cmp"
.Vb 1
\&  $a\->cmp($b)
.Ve
.PP
Compares two \s-1IP\s0 blocks:
.PP
.Vb 2
\&  print $this\->cmp($other);
\&  @sorted_blocks = sort { $a\->cmp($b) } @unsorted_blocks;
.Ve
.PP
\&\fBcmp()\fR returns \-1, 0, +1:
.PP
.Vb 1
\&   0 if $a == $b,
\&
\&  \-1 if $a is v4 and $b is v6
\&  +1 if $a is v6 and $b is v4
\&
\&  \-1 if $a\->base < $b\->base
\&  +1 if $a\->base > $b\->base
\&
\&  \-1 if $a\->base == $b\->base and $a\->last > $b\->last # $a is super\-set of $b
\&  +1 if $a\->base == $b\->base and $a\->last < $b\->last # $a is sub\-set of $b
.Ve
.SS "is_disjunct_with"
.IX Subsection "is_disjunct_with"
.Vb 1
\&  $a\->is_disjunct_with($b)
.Ve
.PP
Returns true if the blocks are disjunct
.PP
.Vb 2
\&  a       |\-\-\-\-\-\-\-\-\-\-|
\&  b |\-\-\-|
\&
\&  a |\-\-\-\-\-\-|
\&  b          |\-\-\-|
\&
\&  print "a and b are disjunct" if $a\->is_disjunct_with($b)
.Ve
.SS "overlaps_with"
.IX Subsection "overlaps_with"
.Vb 1
\&  $a\->overlaps_with($b)
.Ve
.PP
Returns true if the blocks overlap.
.PP
.Vb 2
\&  a    |\-\-\-\-\-\-\-|
\&  b |\-\-\-\-\-\-|
\&  
\&  a |\-\-\-\-\-\-|
\&  b    |\-\-\-\-\-\-\-|
\&  
\&  a |\-\-\-\-|
\&  b      |\-\-\-\-\-\-\-\-\-|
\&  
\&  a      |\-\-\-\-\-\-\-\-\-|
\&  b |\-\-\-\-|
.Ve
.SS "contains"
.IX Subsection "contains"
.Vb 1
\&  $a\->contains($b)
.Ve
.PP
Returns true if block a contains block b. a and b may \s-1NOT\s0 coincide.
.PP
.Vb 3
\&  if ( $a\->contains($b) ) {
\&    print "block a contains block b\en";
\&  }
\&
\&  a |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-| |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-| |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
\&  b   |\-\-\-\-\-\-\-\-\-\-\-\-|    |\-\-\-\-\-\-\-\-\-\-\-\-|           |\-\-\-\-\-\-\-\-\-\-\-\-|
.Ve
.PP
The argument may also be a Net::IPAM::IP address object.
.PP
.Vb 3
\&  if ( $a\->contains($ip) ) {
\&    print "block a contains ip\en";
\&  }
.Ve
.SS "diff"
.IX Subsection "diff"
.Vb 1
\&  @diff = $outer\->diff(@inner)
.Ve
.PP
Returns all blocks in outer block, minus the inner blocks.
.PP
.Vb 5
\&  my $outer = Net::IPAM::Block\->new("192.168.2.0/24");
\&  my @inner = (
\&    Net::IPAM::Block\->new("192.168.2.0/26"),
\&    Net::IPAM::Block\->new("192.168.2.240\-192.168.2.249"),
\&  );
\&
\&  my @diff = $outer\->diff(@inner);
\&
\&  # diff: [192.168.2.64\-192.168.2.239, 192.168.2.250\-192.168.2.255]
.Ve
.SS "find_free_cidrs"
.IX Subsection "find_free_cidrs"
.Vb 1
\&  DEPRECATED: find_free_cidrs() is deprecated in favor of diff(), maybe followed by to_cidrs()
\&
\&  @free = $outer\->find_free_cidrs(@inner)
.Ve
.PP
Returns all free cidrs within given block, minus the inner blocks.
.PP
.Vb 5
\&  my $outer = Net::IPAM::Block\->new("192.168.2.0/24");
\&  my @inner = (
\&        Net::IPAM::Block\->new("192.168.2.0/26"),
\&        Net::IPAM::Block\->new("192.168.2.240\-192.168.2.249"),
\&  );
\&
\&  my @free = $outer\->find_free_cidrs(@inner);
\&
\&  # outer: 192.168.2.0/24 \- inner: [192.168.2.0/26 192.168.2.240\-192.168.2.249]
\&  # free: [192.168.2.64/26 192.168.2.128/26 192.168.2.192/27 192.168.2.224/28 192.168.2.250/31 192.168.2.252/30]
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "aggregate"
.IX Subsection "aggregate"
.Vb 1
\&  @agg = aggregate(@blocks)
.Ve
.PP
Returns the minimal number of blocks spanning the range of input blocks.
.PP
If CIDRs are required, use the following idiom:
.PP
.Vb 1
\&  @cidrs = map { $_\->to_cidrs } aggregate(@blocks);
.Ve
.SH "OPERATORS"
.IX Header "OPERATORS"
Net::IPAM::Block overloads the following operators.
.SS "bool"
.IX Subsection "bool"
.Vb 1
\&  my $bool = !!$block;
.Ve
.PP
Always true.
.SS "stringify"
.IX Subsection "stringify"
.Vb 1
\&  my $str = "$block";
.Ve
.PP
Alias for \*(L"to_string\*(R".
.SH "AUTHOR"
.IX Header "AUTHOR"
Karl Gaissmaier, \f(CW\*(C`<karl.gaissmaier(at)uni\-ulm.de>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-net\-ipam\-block at rt.cpan.org\*(C'\fR, or through
the web interface at <https://rt.cpan.org/NoAuth/ReportBug.html?Queue=Net\-IPAM\-Block>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Net::IPAM::Block
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
on github
.Sp
\&\s-1TODO\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::IPAM::IP
Net::IPAM::Tree
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This software is copyright (c) 2020 by Karl Gaissmaier.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
