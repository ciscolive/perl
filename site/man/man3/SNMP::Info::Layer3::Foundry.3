.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::Layer3::Foundry 3"
.TH SNMP::Info::Layer3::Foundry 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::Layer3::Foundry \- SNMP Interface to Brocade (Foundry) Network
Devices
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Baker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& # Let SNMP::Info determine the correct subclass for you.
\& my $foundry = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class = $foundry\->class();
\&
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides abstraction to information obtainable from Brocade (Foundry) Networks
devices through \s-1SNMP.\s0 See inherited classes' documentation for inherited methods.
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.IP "SNMP::Info::Layer3;" 4
.IX Item "SNMP::Info::Layer3;"
.PD 0
.IP "SNMP::Info::FDP;" 4
.IX Item "SNMP::Info::FDP;"
.PD
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fIBROCADE-PRODUCTS-MIB\fR" 4
.IX Item "BROCADE-PRODUCTS-MIB"
.PD 0
.IP "\fIFOUNDRY-SN-ROOT-MIB\fR" 4
.IX Item "FOUNDRY-SN-ROOT-MIB"
.IP "\fIFOUNDRY-SN-AGENT-MIB\fR" 4
.IX Item "FOUNDRY-SN-AGENT-MIB"
.IP "\fIFOUNDRY-SN-SWITCH-GROUP-MIB\fR" 4
.IX Item "FOUNDRY-SN-SWITCH-GROUP-MIB"
.IP "\fIFOUNDRY-SN-STACKING-MIB\fR" 4
.IX Item "FOUNDRY-SN-STACKING-MIB"
.IP "\fIFOUNDRY-POE-MIB\fR" 4
.IX Item "FOUNDRY-POE-MIB"
.IP "Inherited Classes' MIBs" 4
.IX Item "Inherited Classes' MIBs"
.PD
See \*(L"Required MIBs\*(R" in SNMP::Info::Layer3 for its own \s-1MIB\s0 requirements.
.Sp
See \*(L"Required MIBs\*(R" in SNMP::Info::FDP for its own \s-1MIB\s0 requirements.
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP\s0
.ie n .IP "$foundry\->\fBmodel()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBmodel()\fR" 4
.IX Item "$foundry->model()"
Returns model type.  Checks \f(CW$foundry\fR\->\fBid()\fR against the \fIFOUNDRY-SN-ROOT-MIB\fR
and removes '\f(CW\*(C`sn\*(C'\fR' and '\f(CW\*(C`Switch\*(C'\fR'.  EdgeIron models determined
through \fIENTITY-MIB\fR.
.ie n .IP "$foundry\->\fBvendor()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBvendor()\fR" 4
.IX Item "$foundry->vendor()"
Returns 'brocade'
.ie n .IP "$foundry\->\fBos()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBos()\fR" 4
.IX Item "$foundry->os()"
Returns 'brocade'
.ie n .IP "$foundry\->\fBos_ver()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBos_ver()\fR" 4
.IX Item "$foundry->os_ver()"
Returns the software version
.ie n .IP "$foundry\->\fBmac()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBmac()\fR" 4
.IX Item "$foundry->mac()"
Returns \s-1MAC\s0 Address of root port.
.Sp
(\f(CW\*(C`ifPhysAddress.1\*(C'\fR)
.ie n .IP "$foundry\->\fBchassis()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBchassis()\fR" 4
.IX Item "$foundry->chassis()"
Returns Chassis type.
.Sp
(\f(CW\*(C`entPhysicalDescr.1\*(C'\fR)
.ie n .IP "$foundry\->\fBserial()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBserial()\fR" 4
.IX Item "$foundry->serial()"
Returns serial number of device.
.ie n .IP "$foundry\->\fBtemp()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBtemp()\fR" 4
.IX Item "$foundry->temp()"
Returns the chassis temperature
.Sp
(\f(CW\*(C`snChasActualTemperature\*(C'\fR)
.ie n .IP "$foundry\->\fBps1_type()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBps1_type()\fR" 4
.IX Item "$foundry->ps1_type()"
Returns the Description for the power supply
.Sp
(\f(CW\*(C`snChasPwrSupplyDescription.1\*(C'\fR)
.ie n .IP "$foundry\->\fBps1_status()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBps1_status()\fR" 4
.IX Item "$foundry->ps1_status()"
Returns the status of the power supply.
.Sp
(\f(CW\*(C`snChasPwrSupplyOperStatus.1\*(C'\fR)
.ie n .IP "$foundry\->\fBfan()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBfan()\fR" 4
.IX Item "$foundry->fan()"
Returns the status of the chassis fan.
.Sp
(\f(CW\*(C`snChasFanOperStatus.1\*(C'\fR)
.ie n .IP "$foundry\->\fBimg_ver()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBimg_ver()\fR" 4
.IX Item "$foundry->img_ver()"
Returns device image version.
.Sp
(\f(CW\*(C`snAgImgVer.0\*(C'\fR)
.ie n .IP "$foundry\->\fBch_serial()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBch_serial()\fR" 4
.IX Item "$foundry->ch_serial()"
Returns chassis serial number.
.Sp
(\f(CW\*(C`snChasSerNum.0\*(C'\fR)
.SS "Global Methods imported from SNMP::Info::Layer3"
.IX Subsection "Global Methods imported from SNMP::Info::Layer3"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::Layer3 for details.
.SS "Global Methods imported from SNMP::Info::FDP"
.IX Subsection "Global Methods imported from SNMP::Info::FDP"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::FDP for details.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a
reference to a hash.
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$foundry\->\fBinterfaces()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBinterfaces()\fR" 4
.IX Item "$foundry->interfaces()"
Returns reference to hash of interface names to iids.
.ie n .IP "$foundry\->\fBi_ignore()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBi_ignore()\fR" 4
.IX Item "$foundry->i_ignore()"
Returns reference to hash of interfaces to be ignored.
.Sp
Ignores interfaces with descriptions of  tunnel,loopback,null
.ie n .IP "$foundry\->\fBi_duplex()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBi_duplex()\fR" 4
.IX Item "$foundry->i_duplex()"
Returns reference to hash of interface link duplex status.
.Sp
Crosses \f(CW$foundry\fR\->\fBsw_duplex()\fR with \f(CW$foundry\fR\->\fBsw_index()\fR
.ie n .IP "$foundry\->\fBi_stp_state()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBi_stp_state()\fR" 4
.IX Item "$foundry->i_stp_state()"
Returns the mapping of (\f(CW\*(C`dot1dStpPortState\*(C'\fR) to the interface
index (iid).
.ie n .IP "$foundry\->\fBagg_ports()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBagg_ports()\fR" 4
.IX Item "$foundry->agg_ports()"
Returns a \s-1HASH\s0 reference mapping from slave to master port for each member of
a port bundle on the device. Keys are ifIndex of the slave ports, Values are
ifIndex of the corresponding master ports.
.SS "\fIENTITY-MIB\fP Information"
.IX Subsection "ENTITY-MIB Information"
\&\fIENTITY-MIB\fR is supported on the Brocade NetIron \s-1XMR,\s0 NetIron \s-1MLX,\s0 MLXe,
NetIron \s-1CES,\s0 NetIron \s-1CER,\s0 and older EdgeIron series devices.  For other
devices which do not support it, these methods emulate Physical Table methods
using \fIFOUNDRY-SN-AGENT-MIB\fR.  See Pseudo \fIENTITY-MIB\fR information below
for details on brcd_e_* methods.
.ie n .IP "$foundry\->\fBe_index()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBe_index()\fR" 4
.IX Item "$foundry->e_index()"
If the device doesn't support \f(CW\*(C`entPhysicalDescr\*(C'\fR, this will
try \fBbrcd_e_index()\fR.
.Sp
Note that this is based on \f(CW\*(C`entPhysicalDescr\*(C'\fR due to implementation
details of \fBSNMP::Info::Entity::e_index()\fR.
.ie n .IP "$foundry\->\fBe_class()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBe_class()\fR" 4
.IX Item "$foundry->e_class()"
If the device doesn't support \f(CW\*(C`entPhysicalClass\*(C'\fR, this will try
\&\fBbrcd_e_class()\fR.
.ie n .IP "$foundry\->\fBe_descr()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBe_descr()\fR" 4
.IX Item "$foundry->e_descr()"
If the device doesn't support \f(CW\*(C`entPhysicalDescr\*(C'\fR, this will try
\&\fBbrcd_e_descr()\fR.
.ie n .IP "$foundry\->\fBe_name()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBe_name()\fR" 4
.IX Item "$foundry->e_name()"
If the device doesn't support \f(CW\*(C`entPhysicalName\*(C'\fR, this will try
\&\fBbrcd_e_name()\fR.
.ie n .IP "$foundry\->\fBe_parent()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBe_parent()\fR" 4
.IX Item "$foundry->e_parent()"
If the device doesn't support \f(CW\*(C`entPhysicalContainedIn\*(C'\fR, this will try
\&\fBbrcd_e_parent()\fR.
.ie n .IP "$foundry\->\fBe_pos()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBe_pos()\fR" 4
.IX Item "$foundry->e_pos()"
If the device doesn't support \f(CW\*(C`entPhysicalParentRelPos\*(C'\fR, this will try
\&\fBbrcd_e_pos()\fR.
.ie n .IP "$foundry\->\fBe_serial()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBe_serial()\fR" 4
.IX Item "$foundry->e_serial()"
If the device doesn't support \f(CW\*(C`entPhysicalSerialNum\*(C'\fR, this will try
\&\fBbrcd_e_serial()\fR.
.ie n .IP "$foundry\->\fBe_type()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBe_type()\fR" 4
.IX Item "$foundry->e_type()"
If the device doesn't support \f(CW\*(C`entPhysicalVendorType\*(C'\fR, this will try
\&\fBbrcd_e_type()\fR.
.ie n .IP "$foundry\->\fBe_vendor()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBe_vendor()\fR" 4
.IX Item "$foundry->e_vendor()"
If the device doesn't support \f(CW\*(C`entPhysicalMfgName\*(C'\fR, this will try
\&\fBbrcd_e_vendor()\fR.
.SS "Pseudo \fIENTITY-MIB\fP information"
.IX Subsection "Pseudo ENTITY-MIB information"
These methods emulate \fIENTITY-MIB\fR Physical Table methods using
\&\fIFOUNDRY-SN-AGENT-MIB\fR.
.ie n .IP "$foundry\->\fBbrcd_e_index()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBbrcd_e_index()\fR" 4
.IX Item "$foundry->brcd_e_index()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Integer, Indices are combined
into an integer, each index is two digits padded with leading zero if
required.
.ie n .IP "$foundry\->\fBbrcd_e_class()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBbrcd_e_class()\fR" 4
.IX Item "$foundry->brcd_e_class()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: General hardware type.
.Sp
Returns 'stack' for the stack master in an active stack, 'chassis' for
base switches that contain modules, and 'module' for others.
.ie n .IP "$foundry\->\fBbrcd_e_descr()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBbrcd_e_descr()\fR" 4
.IX Item "$foundry->brcd_e_descr()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Human friendly name
.Sp
(\f(CW\*(C`snAgentConfigModule2Description\*(C'\fR) or
(\f(CW\*(C`snAgentConfigModuleDescription\*(C'\fR)
.ie n .IP "$foundry\->\fBbrcd_e_name()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBbrcd_e_name()\fR" 4
.IX Item "$foundry->brcd_e_name()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Human friendly name
.ie n .IP "$foundry\->\fBbrcd_e_vendor()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBbrcd_e_vendor()\fR" 4
.IX Item "$foundry->brcd_e_vendor()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: brocade
.ie n .IP "$foundry\->\fBbrcd_e_serial()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBbrcd_e_serial()\fR" 4
.IX Item "$foundry->brcd_e_serial()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Serial number
.Sp
Serial number is \f(CW$foundry\fR\->\fBserial()\fR for a stack master unit and
(\f(CW\*(C`snAgentConfigModule2SerialNumber\*(C'\fR) or
(\f(CW\*(C`snAgentConfigModuleSerialNumber\*(C'\fR) for all others.
.ie n .IP "$foundry\->\fBbrcd_e_type()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBbrcd_e_type()\fR" 4
.IX Item "$foundry->brcd_e_type()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Type of component/sub\-component
as defined under \f(CW\*(C`snAgentConfigModule2Type\*(C'\fR or \f(CW\*(C`snAgentConfigModule2Type\*(C'\fR
in \fIFOUNDRY-SN-AGENT-MIB\fR.
.ie n .IP "$foundry\->\fBbrcd_e_pos()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBbrcd_e_pos()\fR" 4
.IX Item "$foundry->brcd_e_pos()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: The relative position among all
entities sharing the same parent.
.Sp
(\f(CW\*(C`s5ChasComSubIndx\*(C'\fR)
.ie n .IP "$foundry\->\fBbrcd_e_parent()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBbrcd_e_parent()\fR" 4
.IX Item "$foundry->brcd_e_parent()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: The value of \fBbrcd_e_index()\fR
for the entity which 'contains' this entity.  A value of zero indicates
this entity is not contained in any other entity.
.ie n .SS "Foundry Switch Port Information Table (""snSwPortIfTable"")"
.el .SS "Foundry Switch Port Information Table (\f(CWsnSwPortIfTable\fP)"
.IX Subsection "Foundry Switch Port Information Table (snSwPortIfTable)"
.ie n .IP "$foundry\->\fBsw_index()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBsw_index()\fR" 4
.IX Item "$foundry->sw_index()"
Returns reference to hash.  Maps Table to Interface \s-1IID.\s0
.Sp
(\f(CW\*(C`snSwPortIfIndex\*(C'\fR)
.ie n .IP "$foundry\->\fBsw_duplex()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBsw_duplex()\fR" 4
.IX Item "$foundry->sw_duplex()"
Returns reference to hash.   Current duplex status for switch ports.
.Sp
(\f(CW\*(C`snSwPortInfoChnMode\*(C'\fR)
.ie n .IP "$foundry\->\fBsw_type()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBsw_type()\fR" 4
.IX Item "$foundry->sw_type()"
Returns reference to hash.  Current Port Type .
.Sp
(\f(CW\*(C`snSwPortInfoMediaType\*(C'\fR)
.ie n .IP "$foundry\->\fBsw_speed()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBsw_speed()\fR" 4
.IX Item "$foundry->sw_speed()"
Returns reference to hash.  Current Port Speed.
.Sp
(\f(CW\*(C`snSwPortInfoSpeed\*(C'\fR)
.SS "Power Over Ethernet Port Table"
.IX Subsection "Power Over Ethernet Port Table"
These methods emulate the \fIPOWER-ETHERNET-MIB\fR Power Source Entity (\s-1PSE\s0)
Port Table \f(CW\*(C`pethPsePortTable\*(C'\fR methods using the \fIFOUNDRY-POE-MIB\fR Power
over Ethernet Port Table \f(CW\*(C`snAgentPoePortTable\*(C'\fR.
.ie n .IP "$foundry\->\fBpeth_port_ifindex()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBpeth_port_ifindex()\fR" 4
.IX Item "$foundry->peth_port_ifindex()"
Creates an index of module.port to align with the indexing of the
\&\f(CW\*(C`pethPsePortTable\*(C'\fR with a value of \f(CW\*(C`ifIndex\*(C'\fR.  The module defaults 1
if otherwise unknown.
.ie n .IP "$foundry\->\fBpeth_port_admin()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBpeth_port_admin()\fR" 4
.IX Item "$foundry->peth_port_admin()"
Administrative status: is this port permitted to deliver power?
.Sp
\&\f(CW\*(C`pethPsePortAdminEnable\*(C'\fR
.ie n .IP "$foundry\->\fBpeth_port_status()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBpeth_port_status()\fR" 4
.IX Item "$foundry->peth_port_status()"
Current status: is this port delivering power.
.ie n .IP "$foundry\->\fBpeth_port_class()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBpeth_port_class()\fR" 4
.IX Item "$foundry->peth_port_class()"
Device class: if status is delivering power, this represents the 802.3af
class of the device being powered.
.ie n .IP "$foundry\->\fBpeth_port_neg_power()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBpeth_port_neg_power()\fR" 4
.IX Item "$foundry->peth_port_neg_power()"
The power, in milliwatts, that has been committed to this port.
This value is derived from the 802.3af class of the device being
powered.
.ie n .IP "$foundry\->\fBpeth_port_power()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBpeth_port_power()\fR" 4
.IX Item "$foundry->peth_port_power()"
The power, in milliwatts, that the port is delivering.
.SS "Power Over Ethernet Module Table"
.IX Subsection "Power Over Ethernet Module Table"
These methods emulate the \fIPOWER-ETHERNET-MIB\fR Main Power Source Entity
(\s-1PSE\s0) Table \f(CW\*(C`pethMainPseTable\*(C'\fR methods using the \fIFOUNDRY-POE-MIB\fR Power
over Ethernet Port Table \f(CW\*(C`snAgentPoeModuleTable \*(C'\fR.
.ie n .IP "$foundry\->\fBpeth_power_watts()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBpeth_power_watts()\fR" 4
.IX Item "$foundry->peth_power_watts()"
The power supply's capacity, in watts.
.ie n .IP "$foundry\->\fBpeth_power_status()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBpeth_power_status()\fR" 4
.IX Item "$foundry->peth_power_status()"
The power supply's operational status.
.ie n .IP "$foundry\->\fBpeth_power_consumption()\fR" 4
.el .IP "\f(CW$foundry\fR\->\fBpeth_power_consumption()\fR" 4
.IX Item "$foundry->peth_power_consumption()"
How much power, in watts, this power supply has been committed to
deliver.
.SS "Table Methods imported from SNMP::Info::Layer3"
.IX Subsection "Table Methods imported from SNMP::Info::Layer3"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::Layer3 for details.
.SS "Table Methods imported from SNMP::Info::FDP"
.IX Subsection "Table Methods imported from SNMP::Info::FDP"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::FDP for details.
