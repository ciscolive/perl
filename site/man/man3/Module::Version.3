.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Version 3"
.TH Module::Version 3 "2019-02-24" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Version \- Get module versions
.SH "VERSION"
.IX Header "VERSION"
version 0.201
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module fetches the version of any other module.
.PP
It comes with a \s-1CLI\s0 program \f(CW\*(C`mversion\*(C'\fR which does the same.
.PP
.Vb 1
\&    use Module::Version \*(Aqget_version\*(Aq;
\&
\&    print get_version(\*(AqSearch::GIN\*(Aq), "\en";
.Ve
.PP
Or using \f(CW\*(C`mversion\*(C'\fR:
.PP
.Vb 2
\&    $ mversion Search::GIN
\&    0.04
\&
\&    $ mversion Doesnt::Exist
\&    Warning: module \*(AqDoesnt::Exist\*(Aq does not seem to be installed.
\&
\&    $ mversion \-\-quiet Doesnt::Exist
\&    (no output)
\&
\&    $ mversion \-\-full Search::GIN Moose
\&    Search::GIN 0.04
\&    Moose 1.01
\&
\&    $ mversion \-\-input modules.txt
\&    Search::GIN 0.04
\&    Data::Collector 0.03
\&    Moose 1.01
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
.SS "get_version"
.IX Subsection "get_version"
\&\f(CW\*(C`get_version\*(C'\fR will be exported if explicitly specified.
.PP
.Vb 1
\&    use Module::Version \*(Aqget_version\*(Aq;
.Ve
.PP
\&\fBNothing\fR is exported by default.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "get_version"
.IX Subsection "get_version"
Accepts a module name and fetches the version of the module.
.PP
If the module doesn't exist, returns undef.
.SH "BUGS"
.IX Header "BUGS"
Please report bugs and other issues on the bugtracker:
.PP
<http://github.com/xsawyerx/module\-version/issues>
.SH "SUPPORT"
.IX Header "SUPPORT"
This module sports 100% test coverage, but in case you have more issues, please
see \fI\s-1BUGS\s0\fR above.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sawyer X
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010\-2018 by Sawyer X.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
