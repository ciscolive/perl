.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Radius 3"
.TH Data::Radius 3 "2020-10-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Radius \- module to encode/decode RADIUS messages
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 2
\&    use Data::Radius::Constants qw(:all);
\&    use Data::Radius::Packet;
\&
\&    my $dictionary = Data::Radius::Dictionary\->load_file(\*(Aq./radius/dictionary\*(Aq);
\&    my $packet = Data::Radius::Packet\->new(secret => \*(Aqtop\-secret\*(Aq, dict => $dictionary);
\&
\&    # build request packet:
\&    my ($request, $req_id, $authenticator) = $packet\->build(
\&        type => ACCESS_REQUEST,
\&        av_list => [
\&            { Name => \*(AqUser\-Name\*(Aq, Value => \*(AqJonSnow\*(Aq},
\&            { Name => \*(AqUser\-Password\*(Aq, Value => \*(AqCastle Black\*(Aq },
\&            { Name => \*(AqMessage\-Authenticator\*(Aq, Value => \*(Aq\*(Aq },
\&        ],
\&    );
\&
\&    # ... send $request and read $reply binary packets from RADIUS server
\&
\&    # parse reply packet:
\&    my ($reply_type, $reply_id, $reply_authenticator, $av_list) = $packet\->parse($reply, $authenticator);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Data::Radius::Packet
.SH "AUTHOR"
.IX Header "AUTHOR"
Sergey Leschenko <sergle.ua at gmail.com>
.PP
PortaOne Development Team <perl\-radius at portaone.com> is the current module's maintainer at \s-1CPAN.\s0
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2016 PortaOne Inc., all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
