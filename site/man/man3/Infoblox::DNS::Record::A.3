.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Record::A 3"
.TH Infoblox::DNS::Record::A 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Record::A \- DNS A record object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An A (address) record maps a domain name to an IPv4 address. To define a specific name-to-address mapping, add an A record to a previously defined authoritative forward-mapping zone.
.PP
Note that you must specify only one view for the attribute \*(L"views\*(R".
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $bind_a = Infoblox::DNS::Record::A\->new (
\&     ipv4addr              => $ipv4addr,                                                              # Required
\&     name                  => $fqdn,                                                                  # Required
\&     comment               => $string,                                                                # Optional / Default is empty
\&     disable               => "true" | "false"                                                        # Optional / Default "false"
\&     extattrs              => { $string => $extattr, ... },                                           # Optional / Default is undefined
\&     extensible_attributes => { $string => $string | $num, $string => [ $string | $num, ... ], ... }, # Optional / Default is undefined
\&     last_discovered       => $string,                                                                # Optional / Default is empty
\&     ttl                   => $num | undef,                                                           # Optional / Default is undefined
\&     views                 => [$View1],                                                               # Optional / Default is "default" view
\&     creator               => "DYNAMIC" | "STATIC",                                                   # Optional / Default is "STATIC"
\&     ddns_protected        => "true" | "false",                                                       # Optional / Default is "false"
\&     ddns_principal        => $string,                                                                # Optional / Default is undefined
\&     forbid_reclamation    => "true" | "false",                                                       # Optional / Default is "false"
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DNS A\s0 object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Construct an object
\& my $bind_a = Infoblox::DNS::Record::A\->new (
\&     ipv4addr => "1.1.1.1",
\&     name     => "bind_a.domain.com",
\&     comment  => "this is a demo bind_a record",
\&     disable  => "true",
\&     ttl      => "33",
\&     views    => [$view1]  );
\& # Submit for addition
\& my $response = $session\->add( $bind_a );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DNS A object:
\&
\&  name                  \- Optional. A host name in string format.
\&  view                  \- Optional. The DNS view in which the A record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&  zone                  \- Optional. A zone name in FQDN format.
\&  ipv4addr              \- Optional. The address of the host record.
\&  reclaimable           \- Optional. The flag that indicates whether the record is reclaimable or not.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&  creator               \- Optional. Record creator.
\&  ddns_principal        \- Optional. GSS\-TSIG principal that owns the record.
\&  v_cluster             \- Optional. Discovered VMware cluster name.
\&  v_datacenter          \- Optional. Discovered VMware datacenter name.
\&  v_host                \- Optional. Discovered VMware server name.
\&  v_name                \- Optional. Discovered VMware host or virtual machine name.
\&  v_netadapter          \- Optional. Discovered VMware physical network adapter name.
\&  v_switch              \- Optional. Discovered VMware virtual switch name.
\&  v_type                \- Optional. Discovered VMware entity type (possible values: "VirtualMachine", "HostSystem", "VirtualCenter").
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::A",
\&     name   => "bind_a.domain.com",
\&     view   => "default" );
\&
\& #get all DNS A recods with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->get(
\&    object => "Infoblox::DNS::Record::A",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
\&
\& # get DNS A records by v_type:
\& my @retrieved_objs = $session\->get(
\&    object    => \*(AqInfoblox::DNS::Record::A\*(Aq,
\&    v_type    => \*(AqVirtualMachine\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use method to modify the comment.
\& $bind_a\->comment("this is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $bind_a );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to submit to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& remove_options \- Optional. A hash reference containing the following attributes:
\&
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | remove_associated_ptr \- Optional. Boolean flag that indicates whether the associated PTR    |
\& |                         record should be removed while deleting the specified A record.     |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& # Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::A",
\&     name   => "bind_a.domain.com",
\&     view   => "default" );
\& # Find the desired object from the retrieved list.
\& my $desired_a = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove(
\&     $desired_a,
\&     remove_options => {\*(Aqremove_associated_ptr\*(Aq => \*(Aqtrue\*(Aq} );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DNS A\s0 record objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for para
meters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DNS A record object:
\&
\&  name                  \- Optional. A host name in string format (regular expression).
\&  view                  \- Optional. The DNS view in which the A record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&  zone                  \- Optional. A zone name in FQDN format.
\&  comment               \- Optional. A comment in string format (regular expression).
\&  ipv4addr              \- Optional. The address of the host record (regular expression).
\&  reclaimable           \- Optional. The flag that indicates whether the record is reclaimable or not.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&  creator               \- Optional. Record creator.
\&  ddns_principal        \- Optional. GSS\-TSIG principal that owns the record.
\&  v_cluster             \- Optional. Discovered VMware cluster name (regular expression).
\&  v_datacenter          \- Optional. Discovered VMware datacenter name (regular expression).
\&  v_host                \- Optional. Discovered VMware server name (regular expression).
\&  v_name                \- Optional. Discovered VMware host or virtual machine name (regular expression).
\&  v_netadapter          \- Optional. Discovered VMware physical network adapter name (regular expression).
\&  v_switch              \- Optional. Discovered VMware virtual switch name (regular expression).
\&  v_type                \- Optional. Discovered VMware entity type (possible values: "VirtualMachine", "HostSystem", "VirtualCenter").
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all DNS A objects that match "domain.com" in the default DNS view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::A",
\&     name   => \*(Aqdomain\e.com\*(Aq,
\&     view   => "default" );
\&
\& # search for all DNS A records in the "domain.com" zone of the default view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::A",
\&     zone   => "domain.com",
\&     view   => "default" );
\&
\& #get all DNS A recods with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&   object => "Infoblox::DNS::Record::A",
\&   extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
\&
\& # search DNS A records by v_datacenter:
\& my @retrieved_objs = $session\->search(
\&    object       => "Infoblox::DNS::Record::A",
\&    v_datacenter => "test.*");
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of an A record
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $bind_a\->comment();
\& #Modify comment
\& $bind_a\->comment("Modifying the DNS A comment");
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to retrieve cloud \s-1API\s0 related information for the Infoblox::DNS::Record::A object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get cloud_info
\& my $cloud_info = $object\->cloud_info();
.Ve
.RE
.RS 4
.RE
.SS "creator( )"
.IX Subsection "creator( )"
.RS 4
Use this method to set or retrieve the record creator.
.Sp
Note that changing creator from or to '\s-1SYSTEM\s0' value is not allowed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParamter\fR" 4
.IX Item "Paramter"
The valid values are '\s-1STATIC\s0' and '\s-1DYNAMIC\s0'. The default value is '\s-1STATIC\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get creator value
\& my $creator = $object\->creator();
\&
\& #Modify creator value
\& $object\->creator("DYNAMIC");
.Ve
.RE
.RS 4
.RE
.SS "creation_time( )"
.IX Subsection "creation_time( )"
.RS 4
Use this method to retrieve the creation time for the record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is a number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get creation_time value
\& my $creation_time = $object\->creation_time();
.Ve
.RE
.RS 4
.RE
.SS "ddns_principal( )"
.IX Subsection "ddns_principal( )"
.RS 4
Use this method to set or retrive the GSS-TSIG principal that owns this record.
.Sp
Note that you cannot set ddns_principal for '\s-1STATIC\s0' and '\s-1SYSTEM\s0' records.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParamter\fR" 4
.IX Item "Paramter"
The GSS-TSIG principal \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the hostname followed by the domain name (example: abc.com). A hostname can have a maximum of 256 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ddns_principal value
\& my $ddns_principal = $object\->ddns_principal();
\&
\& #Modify ddns_principal value
\& $object\->ddns_principal(\*(Aqfoo.com\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_protected( )"
.IX Subsection "ddns_protected( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether \s-1DDNS\s0 updates for this record are allowed or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to protect record from \s-1DDNS\s0 updates and 'false' to allow \s-1DDNS\s0 updates for the specified record.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ddns_protected value
\& my $ddns_protected = $object\->ddns_protected();
\&
\& #Modify ddns_protected value
\& $object\->ddns_protected(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DNS\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false. The \s-1DNS\s0 record is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $bind_a\->disable();
\& #Modify disable
\& $bind_a\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "discovered_data( )"
.IX Subsection "discovered_data( )"
.RS 4
Use this method to retrieve the discovered data of an A Record object. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::Discovery::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_data value
\& my $discovered_data = $object\->discovered_data();
.Ve
.RE
.RS 4
.RE
.SS "discovered_name( )"
.IX Subsection "discovered_name( )"
.RS 4
Use this method to retrieve the discovered name of an A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discovered name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_name
\& my $discovered_name = $bind_a\->discovered_name();
.Ve
.RE
.RS 4
.RE
.SS "discoverer( )"
.IX Subsection "discoverer( )"
.RS 4
Use this method to retrieve the discoverer of an A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discoverer value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discoverer
\& my $discoverer = $bind_a\->discoverer();
.Ve
.RE
.RS 4
.RE
.SS "dns_name( )"
.IX Subsection "dns_name( )"
.RS 4
Use this method to retrieve the host name in punycode format. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $bind_a\->dns_name();
.Ve
.RE
.RS 4
.RE
.SS "first_discovered( )"
.IX Subsection "first_discovered( )"
.RS 4
Use this method to retrieve the date and time that the A Record object was first discovered.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the date and time when the A Record object was first discovered.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get first_discovered
\& my $first_discovered = $bind_a\->first_discovered();
.Ve
.RE
.RS 4
.RE
.SS "forbid_reclamation( )"
.IX Subsection "forbid_reclamation( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the reclamation is allowed for the record or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to forbid reclamation for the record and 'false' to allow it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get forbid_reclamation
\& my $forbid_reclamation = $object\->forbid_reclamation();
\& #Modify forbid_reclamation
\& $object\->forbid_reclamation(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS A\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $bind_a\->extattrs();
\& #Modify extattrs
\& $bind_a\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS A\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $bind_a\->extensible_attributes();
\& #Modify extensible attributes
\& $bind_a\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "ipv4addr( )"
.IX Subsection "ipv4addr( )"
.RS 4
Use this method to set or retrieve the the IPv4 address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.
168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv4addr
\& my $ipv4addr = $bind_a\->ipv4addr();
\& #Modify ipv4addr
\& $bind_a\->ipv4addr("2.2.2.2");
.Ve
.RE
.RS 4
.RE
.SS "last_discovered( )"
.IX Subsection "last_discovered( )"
.RS 4
Use this method to retrieve the time this object was last seen by a discovery job.
.Sp
The default value for this field is empty.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_discovered
\& my $last_discovered = $bind_a\->last_discovered();
.Ve
.RE
.RS 4
.RE
.SS "last_queried( )"
.IX Subsection "last_queried( )"
.RS 4
Use this method to retrieve the time when the associated record was last queried. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. The number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_queried
\& my $last_queried = $bind_a\->last_queried();
.Ve
.RE
.RS 4
.RE
.SS "mac_address( )"
.IX Subsection "mac_address( )"
.RS 4
Use this method to retrieve the discovered \s-1MAC\s0 address of this object.
.Sp
The default value for this field is empty.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get mac_address
\& my $mac_address = $bind_a\->mac_address();
.Ve
.RE
.RS 4
.RE
.SS "ms_ad_user_data( )"
.IX Subsection "ms_ad_user_data( )"
.RS 4
Use this method to retrieve Microsoft Active Directory users related information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::MSServer::AdUser::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_ad_user_data
\& my $ms_ad_user_data = $bind_a\->ms_ad_user_data();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the host name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Hostname in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the hostname followed by the domain name (example: abc.com). A hostname can have
 a maximum of 256 bytes.
.Sp
Infoblox also supports wildcard A records. A wildcard A record maps all the hostnames in a domain to a single \s-1IP\s0 address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $bind_a\->name();
\& #Modify name
\& $bind_a\->name("bind_a.domain.com");
.Ve
.RE
.RS 4
.RE
.SS "netbios( )"
.IX Subsection "netbios( )"
.RS 4
Use this method to retrieve the name in the NetBIOS reply that responded to a NetBIOS query.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get netbios
\& my $netbios = $bind_a\->netbios();
.Ve
.RE
.RS 4
.RE
.SS "network_component_description( )"
.IX Subsection "network_component_description( )"
.RS 4
Use this method to retrieve the description of the network device that is connected to the A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device description.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_description
\& my $network_component_description = $bind_a\->network_component_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_ip( )"
.IX Subsection "network_component_ip( )"
.RS 4
Use this method to retrieve the \s-1IP\s0 address of the network device that is connected to the A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device \s-1IP\s0 address.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_ip
\& my $network_component_ip = $bind_a\->network_component_ip();
.Ve
.RE
.RS 4
.RE
.SS "network_component_name( )"
.IX Subsection "network_component_name( )"
.RS 4
Use this method to retrieve the name of the network device that is connected to the A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_name
\& my $network_component_name = $bind_a\->network_component_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_description( )"
.IX Subsection "network_component_port_description( )"
.RS 4
Use this method to retrieve the description of the network device port that is connected to the A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port description.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_description
\& my $network_component_port_description = $bind_a\->network_component_port_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_name( )"
.IX Subsection "network_component_port_name( )"
.RS 4
Use this method to retrieve the name of the network device port that is connected to the A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the name of the port on the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_name
\& my $network_component_port_name = $bind_a\->network_component_port_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_number( )"
.IX Subsection "network_component_port_number( )"
.RS 4
Use this method to retrieve the number of the network device port that is connected to the A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_number
\& my $network_component_port_number = $bind_a\->network_component_port_number();
.Ve
.RE
.RS 4
.RE
.SS "network_component_type( )"
.IX Subsection "network_component_type( )"
.RS 4
Use this method to retrieve the type of the network device that is connected to the A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device type.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_type
\& my $network_component_type = $bind_a\->network_component_type();
.Ve
.RE
.RS 4
.RE
.SS "os( )"
.IX Subsection "os( )"
.RS 4
Use this method to retrieve the operating system associated with this A record.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get os
\& my $os = $bind_a\->os();
.Ve
.RE
.RS 4
.RE
.SS "port_duplex( )"
.IX Subsection "port_duplex( )"
.RS 4
Use this method to retrieve the duplex setting of the network device port that is connected to the A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port duplex setting. Returned values, if any, are one of the following:
.Sp
.Vb 2
\&  Full
\&  Half
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_duplex
\& my $port_duplex = $bind_a\->port_duplex();
.Ve
.RE
.RS 4
.RE
.SS "port_link_status( )"
.IX Subsection "port_link_status( )"
.RS 4
Use this method to retrieve the link status of the network device port that is connected to the A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the port link status. Returned values, if any, are one of the following:
.Sp
.Vb 3
\&  Connected
\&  Not Connected
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_link_status
\& my $port_link_status = $bind_a\->port_link_status();
.Ve
.RE
.RS 4
.RE
.SS "port_speed( )"
.IX Subsection "port_speed( )"
.RS 4
Use this method to retrieve the speed of the network device port that is connected to the A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port speed value. Returned values, if any, are one of the following:
.Sp
.Vb 6
\&  10M
\&  100M
\&  1G
\&  10G
\&  100G
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_speed
\& my $port_speed = $bind_a\->port_speed();
.Ve
.RE
.RS 4
.RE
.SS "port_status( )"
.IX Subsection "port_status( )"
.RS 4
Use this method to retrieve the status of the network device port that is connected to the A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port status. Returned values, if any, are one of the following:
.Sp
.Vb 3
\&  Up
\&  Down
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_status
\& my $port_status = $bind_a\->port_status();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_description( )"
.IX Subsection "port_vlan_description( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 description of the network device port that is connected to the A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1VLAN\s0 description of the network device port.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_description
\& my $port_vlan_description = $bind_a\->port_vlan_description();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_name( )"
.IX Subsection "port_vlan_name( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 name of the network device port that is connected to the A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1VLAN\s0 name of the network device port.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_name
\& my $port_vlan_name = $bind_a\->port_vlan_name();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_number( )"
.IX Subsection "port_vlan_number( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 number of the network device port that is connected to the A Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port \s-1VLAN\s0 number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_number
\& my $port_vlan_number = $bind_a\->port_vlan_number();
.Ve
.RE
.RS 4
.RE
.SS "reclaimable( )"
.IX Subsection "reclaimable( )"
.RS 4
Use this method to retrieve the flag that indicates whether the record is reclaimable or not.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get reclaimable
\& my $reclaimable = $object\->reclaimable();
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to set or retrieve the Time to Live (\s-1TTL\s0) value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is undefined which indicates that the record inherits the \s-1TTL\s0 value of the zone.
.Sp
Specify a \s-1TTL\s0 value to override the \s-1TTL\s0 value at the zone level.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration in seconds that the record is cached. Zero indicates that the record should not be cached.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get ttl
\& my $ttl = $bind_a\->ttl();
\& #Modify ttl
\& $bind_a\->ttl(1800);
\& #Un\-override ttl
\& $bind_a\->ttl(undef);
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to set or retrieve the view of the A record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" view, which means the A record is located under the default view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference of defined Infoblox::DNS::View objects.
.Sp
Note that the array size must be 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get views
\& my $ref_views = $bind_a\->views();
\& #Modify views, list of Infoblox::DNS::View objects
\& $bind_a\->views([$view1]);
.Ve
.RE
.RS 4
.RE
.SS "v_cluster( )"
.IX Subsection "v_cluster( )"
.RS 4
Use this method to retrieve the name of the VMware cluster associated with the A Record object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware cluster name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_cluster
\& my $v_cluster = $bind_a\->v_cluster();
.Ve
.RE
.RS 4
.RE
.SS "v_datacenter( )"
.IX Subsection "v_datacenter( )"
.RS 4
Use this method to retrieve the name of the VMware datacenter associated with the A Record object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware datacenter name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_datacenter
\& my $v_datacenter = $bind_a\->v_datacenter();
.Ve
.RE
.RS 4
.RE
.SS "v_host( )"
.IX Subsection "v_host( )"
.RS 4
Use this method to retrieve the name of the VMware host associated with the A Record object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware host name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_host
\& my $v_host = $bind_a\->v_host();
.Ve
.RE
.RS 4
.RE
.SS "v_name( )"
.IX Subsection "v_name( )"
.RS 4
Use this method to retrieve the name of the VMware entity associated with the A Record object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware entity name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_name
\& my $v_name = $bind_a\->v_name();
.Ve
.RE
.RS 4
.RE
.SS "v_netadapter( )"
.IX Subsection "v_netadapter( )"
.RS 4
Use this method to retrieve the name of the physical network adapter through which the VMware entity is connected to the appliance. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the network adapter name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_netadapter
\& my $v_netadapter = $bind_a\->v_netadapter();
.Ve
.RE
.RS 4
.RE
.SS "v_switch( )"
.IX Subsection "v_switch( )"
.RS 4
Use this method to retrieve the name of the virtual switch through which the VMware entity is connected to the appliance. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the virtual switch name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_switch
\& my $v_switch = $bind_a\->v_switch();
.Ve
.RE
.RS 4
.RE
.SS "v_type( )"
.IX Subsection "v_type( )"
.RS 4
Use this method to retrieve the type of VMware entity associated with the A Record object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware entity type. The default value is an empty string. The returned value, if any, can be one of the following:
.Sp
.Vb 3
\& VirtualMachine
\& HostSystem
\& VirtualCenter
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_type
\& my $v_type = $bind_a\->v_type();
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of a \s-1DNS A\s0 record. This method is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get zone
\& my $zone = $bind_a\->zone();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS A\s0 record insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox Appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the zone prior to an A record insertion
\& my $zone = Infoblox::DNS::Zone\->new(name => "domain.com");
\& unless ($zone) {
\&    die("Construct zone failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& #Verify if the zone exists
\& my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "domain.com");
\& unless ($object) {
\&    print "Zone does not exist on server, safe to add the zone\en";
\&    $session\->add($zone)
\&       or die("Add zone failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Zone added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS A\s0 record\fR
.PP
.Vb 11
\& #Construct a DNS A object
\& my $bind_a = Infoblox::DNS::Record::A\->new(
\&     name     => "bind_a.domain.com",
\&     comment  => " this is a demo bind_a record ",
\&     ipv4addr => "1.1.1.1"
\& );
\& unless ($bind_a) {
\&    die("Construct DNS record A failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DNS A object created successfully\en";
\&
\& #Add the DNS A record object to Infoblox Appliance through a session
\& $session\->add($bind_a)
\&     or die("Add record A failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS A object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS A\s0 record\fR
.PP
.Vb 11
\& #Search all A records that match "domain.com"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::A",
\&     name   => \*(Aqdomain\e.com\*(Aq
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search record A failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS A object found at least 1 matching entry\en";
\&
\& #Search all A records that start with "bind" and end with ".domain.com"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::A",
\&     name   => \*(Aq^bind.*\e.domain\e.com\e$\*(Aq
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search record A failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS A object using regexp found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS A\s0 record\fR
.PP
.Vb 11
\& #Get A record through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::A",
\&     name   => "bind_a.domain.com"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get record A failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS A object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified A record
\& $object\->ipv4addr("3.3.3.3");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify record A failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS A object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DNS A\s0 record\fR
.PP
.Vb 11
\& #Get A record through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::A",
\&     name   => "bind_a.domain.com"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get record A failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS A object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove record A failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS A object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::View,
Infoblox::DNS::Zone,
Infoblox::Session,
Infoblox::Session\->\fBget()\fR,
Infoblox::Session\->\fBsearch()\fR,
Infoblox::Session\->\fBadd()\fR,
Infoblox::Session\->\fBremove()\fR,
Infoblox::Session\->\fBmodify()\fR,
Infoblox::Grid::MSServer::AdUser::Data,
Infoblox::Grid::Discovery::Data
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
