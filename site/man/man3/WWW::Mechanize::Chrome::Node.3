.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::Mechanize::Chrome::Node 3"
.TH WWW::Mechanize::Chrome::Node 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::Mechanize::Chrome::Node \- represent a Chrome HTML node in Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    (my $node) = $mech\->selector(\*(Aq.download\*(Aq);
\&    print $node\->get_attribute(\*(Aqclass\*(Aq); # "download"
.Ve
.SH "MEMBERS"
.IX Header "MEMBERS"
.ie n .SS """attributes"""
.el .SS "\f(CWattributes\fP"
.IX Subsection "attributes"
The attributes this node has
.ie n .SS """nodeName"""
.el .SS "\f(CWnodeName\fP"
.IX Subsection "nodeName"
The (tag) name of this node, with a namespace
.ie n .SS """nodeId"""
.el .SS "\f(CWnodeId\fP"
.IX Subsection "nodeId"
The nodeId of this node
.ie n .SS """localName"""
.el .SS "\f(CWlocalName\fP"
.IX Subsection "localName"
The local (tag) name of this node
.ie n .SS """backendNodeId"""
.el .SS "\f(CWbackendNodeId\fP"
.IX Subsection "backendNodeId"
The id of this node within Chrome
.ie n .SS """cachedNodeId"""
.el .SS "\f(CWcachedNodeId\fP"
.IX Subsection "cachedNodeId"
The cached id of this node for this session
.ie n .SS """objectId"""
.el .SS "\f(CWobjectId\fP"
.IX Subsection "objectId"
Another id of this node within Chrome
.ie n .SS """driver"""
.el .SS "\f(CWdriver\fP"
.IX Subsection "driver"
The Chrome::DevToolsProtocol::Transport instance used to communicate
with Chrome
.ie n .SS """mech"""
.el .SS "\f(CWmech\fP"
.IX Subsection "mech"
A weak reference to the WWW::Mechanize::Chrome instance used to communicate
with Chrome.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.ie n .SS """fetchNode"""
.el .SS "\f(CWfetchNode\fP"
.IX Subsection "fetchNode"
.Vb 4
\&  WWW::Mechanize::Chrome\->fetchNode(
\&      nodeId => $nodeId,
\&      driver => $mech\->driver,
\&  )\->get()
.Ve
.PP
Returns a Future that returns a populated node.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """\->get_attribute"""
.el .SS "\f(CW\->get_attribute\fP"
.IX Subsection "->get_attribute"
.Vb 1
\&  print $node\->get_attribute(\*(AqouterHTML\*(Aq);
.Ve
.PP
Fetches the attribute of the node from Chrome
.PP
.Vb 1
\&  print $node\->get_attribute(\*(Aqhref\*(Aq, live => 1);
.Ve
.PP
Force a live query of the attribute to Chrome. If the attribute was declared
on the node, this overrides the stored value and queries Chrome again for
the current value of the attribute.
.ie n .SS """\->set_attribute"""
.el .SS "\f(CW\->set_attribute\fP"
.IX Subsection "->set_attribute"
.Vb 1
\&  $node\->set_attribute(\*(Aqhref\*(Aq => \*(Aqhttps://example.com\*(Aq);
.Ve
.PP
Sets or creates an attribute of a node. To remove an attribute,
pass in the attribute value as \f(CW\*(C`undef\*(C'\fR.
.PP
Note that this invalidates the \f(CW\*(C`nodeId\*(C'\fR of every node so you may or may not
need to refetch all other nodes or receive stale values.
.ie n .SS """\->get_tag_name"""
.el .SS "\f(CW\->get_tag_name\fP"
.IX Subsection "->get_tag_name"
.Vb 1
\&  print $node\->get_tag_name();
.Ve
.PP
Fetches the tag name of this node
.ie n .SS """\->get_text"""
.el .SS "\f(CW\->get_text\fP"
.IX Subsection "->get_text"
.Vb 1
\&  print $node\->get_text();
.Ve
.PP
Returns the text of the node and the contained child nodes.
.ie n .SS """\->set_text"""
.el .SS "\f(CW\->set_text\fP"
.IX Subsection "->set_text"
.Vb 1
\&  $node\->set_text("Hello World");
.Ve
.PP
Sets the text of the node and the contained child nodes.
.SH "REPOSITORY"
.IX Header "REPOSITORY"
The public repository of this module is
<https://github.com/Corion/www\-mechanize\-chrome>.
.SH "SUPPORT"
.IX Header "SUPPORT"
The public support forum of this module is <https://perlmonks.org/>.
.SH "TALKS"
.IX Header "TALKS"
I've given a German talk at \s-1GPW 2017,\s0 see <http://act.yapc.eu/gpw2017/talk/7027>
and <https://corion.net/talks> for the slides.
.PP
At The Perl Conference 2017 in Amsterdam, I also presented a talk, see
<http://act.perlconference.org/tpc\-2017\-amsterdam/talk/7022>.
The slides for the English presentation at TPCiA 2017 are at
<https://corion.net/talks/WWW\-Mechanize\-Chrome/www\-mechanize\-chrome.en.html>.
.SH "BUG TRACKER"
.IX Header "BUG TRACKER"
Please report bugs in this module via the \s-1RT CPAN\s0 bug queue at
<https://rt.cpan.org/Public/Dist/Display.html?Name=WWW\-Mechanize\-Chrome>
or via mail to www\-mechanize\-Chrome\-Bugs@rt.cpan.org <mailto:www-mechanize-Chrome-Bugs@rt.cpan.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR
.SH "COPYRIGHT (c)"
.IX Header "COPYRIGHT (c)"
Copyright 2010\-2020 by Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
This module is released under the same terms as Perl itself.
