.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Watch 3"
.TH Watch 3 "2003-10-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DHCP::Watch \- A class for monitoring a remote DHCPD server.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 12
\&  use Net::DHCP::Watch;
\&  # server name
\&  my $Server = \*(Aqdhcpd.mydomain.com\*(Aq;
\&  # this machine ip and ethernet address
\&  my $IP     = \*(Aq192.168.1.1\*(Aq;
\&  my $Ether  = \*(Aq01:23:45:67:89:ab\*(Aq;
\&  # Net::DHCP::Watch object
\&  my $dhcpw = new Net::DHCP::Watch({
\&                server => $Server,
\&                client => $IP,
\&                ether  => $Ether
\&        });
\&
\&  # Open network
\&  $dhcpw\->watch();
\&  # Get status
\&  my $stat = $dhcpw\->status;
\&  # print results
\&  if ( $stat\->{Bad} ) print $stat\->{Time},
\&    ": Remote DHCP on $Server unavailable (",$stat\->{Bad},").\en";
\&
\&  if ( $stat\->{Ok}  ) print $stat\->{Time},
\&    ": Remote DHCP on $Server online.\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::DHCP::Watch is a module to help monitor remote \s-1DHCP\s0 servers. It
opens an udp socket to send and receive responses to and from a \s-1DHCP\s0
server. It stores the last connection status information.
.PP
This module serves to implement This module can help to write some
simple code to implement a reliable \s-1DHCP\s0 service over complex or
simple networks.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
Creates a new Net::DHCP::Watch object. The parameters are passed
through a hash with the following keys:
.RS 4
.IP "\fIServer\fR" 4
.IX Item "Server"
\&\s-1DHCP\s0 server name or \s-1IP\s0 address to be monitored (not the local machine
performing the monitoring).
.IP "\fIClient\fR" 4
.IX Item "Client"
Name or \s-1IP\s0 addres to use for the local machine performing the
monitoring. Since there is no obvious way to determine that, it is
mandatory.
.IP "\fIEther\fR" 4
.IX Item "Ether"
Ethernet address of the local machine performing the monitoring. Since
there is no obvious way to determine that, it is mandatory. You can
pass a 6 element array of bytes or a ':' separated string of hex
values. In \s-1UNIX\s0 machines you can tipically do something like this:
.Sp
.Vb 3
\&        my $ether = qx[ /sbin/ifconfig eth0 | tail +1 |\e
\&                        head \-1 | awk \*(Aq{print \e$5}\*(Aq];
\&        chomp($ether);
.Ve
.IP "\fITimeout\fR" 4
.IX Item "Timeout"
The timeout for network operation (default 10s).
.RE
.RS 4
.RE
.IP "\fBwatch\fR" 4
.IX Item "watch"
Prepares for monitoring. Opens an \s-1UDP\s0 socket to the server. This
method could fail or interfere with the operation of a local DHCPd
server.
.IP "\fBunwatch\fR" 4
.IX Item "unwatch"
Closes monitoring. You should use this method before starting any local 
\&\s-1DHCP\s0 server.
.IP "\fBstatus\fR" 4
.IX Item "status"
Try to comunicate with the server and returns the status in a hash. The
hash contains three keywords. \fIOk\fR will be true if the attempt completed
successfully, \fIBad\fR will be true if the attempt was not; they will
contain the number of successful (or unsuccessful) contiguous attempts
made. \fITime\fR contains the \s-1GMT\s0 time string of the last attempt.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
See the directory \fIexamples\fR in source distribution for an example.
.SH "BUGS"
.IX Header "BUGS"
There should be a Net::DHCP class to handle the \s-1DHCP\s0 protocol.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
On platforms without \fI\f(BIalarm()\fI\fR function defined the monitoring can
hang forever if some network problems show up (cable problem, etc)?
.PP
The machine that is running the test \s-1MUST BE\s0 a \s-1KNOWN\s0 client of the
remote \s-1DHCP\s0 server.
.SH "AUTHOR"
.IX Header "AUTHOR"
Evilio del Rio, edelrio@icm.csic.es
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
I would like to acknowledge the valuable contributions of the people
who made suggestions to improve this code, specially to Nick Garfield
who provided the solution for monitoring disjoint networks.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBperl\fR\|(1), \fBIO::Socket\fR\|(3), \fBNet::hostent\fR\|(3). RFCs 2131 and 2132.
.PP
\&\fIRalph Droms & Ted Lemon\fR, \fBThe \s-1DHCP\s0 Handbook\fR, MacMillan
(Indianapolis), 1999.
