.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::LicenseGridWide 3"
.TH Infoblox::Grid::LicenseGridWide 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::LicenseGridWide \- a Grid\-wide license object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Grid-wide license is assigned and locked to the Grid to activate the licensed feature on all eligible appliances.
The Grid-wide license object is used to display infromation related to Grid-wide license (i.e. expiration date, limit value).
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::Grid::LicenseGridWide object is a read-only object and does not require manual construction.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a Grid-wide license object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $retrieved_objs = $session\->get(object => "Infoblox::Grid::LicenseGridWide");
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to search the Grid\-wide license object(s):
\&
\&     "type"  \- Optional. The license type.
\&     "limit" \- Optional. The limitation of dynamic license.
\&     "key"   \- Optional. The license string.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::LicenseGridWide",
\&     type   => "DNS"
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a Grid-wide license object from the Infoblox device. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #search for a specific object
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::LicenseGridWide",
\&     type   => "DNS"
\& );
\&
\& my $object = $retrieved_objs[0];
\&
\& #remove the object
\& my $response = $session\->remove($object);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of a Grid-wide license object.
.SS "expiration( )"
.IX Subsection "expiration( )"
.RS 4
Use this method to retrieve the Grid-wide license expiration timestamp. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the number of seconds elapsed since January 1, 1970, in \s-1UTC\s0 format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get expiration value
\& my $expiration = $object\->expiration();
.Ve
.RE
.RS 4
.RE
.SS "expiration_status( )"
.IX Subsection "expiration_status( )"
.RS 4
Use this method to retrieve the Grid-wide license expiration status. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get expiration_status value
\& my $expiration_status = $object\->expiration_status();
.Ve
.RE
.RS 4
.RE
.SS "key( )"
.IX Subsection "key( )"
.RS 4
Use this method to retrieve the license string for the Grid-wide license. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get key value
\& my $value = $object\->key();
.Ve
.RE
.RS 4
.RE
.SS "limit( )"
.IX Subsection "limit( )"
.RS 4
Use this method to retrieve the number of dynamic licenses that can be allocated from the Grid-wide license. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get limit value
\& my $value = $object\->limit();
.Ve
.RE
.RS 4
.RE
.SS "limit_context( )"
.IX Subsection "limit_context( )"
.RS 4
Use this method to retrieve the context of the license limit. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get limit_context value
\& my $limit_context = $object\->limit_context();
.Ve
.RE
.RS 4
.RE
.SS "type( )"
.IX Subsection "type( )"
.RS 4
Use this method to retrieve the license type. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get type value
\& my $value = $object\->type();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
