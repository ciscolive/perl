.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DateTimeX::Format::Excel::Types 3"
.TH DateTimeX::Format::Excel::Types 3 "2016-05-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTimeX::Format::Excel::Types::Types \- A Type::Tiny Excel DateTime type library
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a type library for DateTimeX::Format::Excel It doesn't really have good context
outside of that.  It is built on Type::Tiny.
.SS "Caveat utilitor <http://en.wiktionary.org/wiki/Appendix:List_of_Latin_phrases_(A%E2%80%93E)#C>"
.IX Subsection "Caveat utilitor <http://en.wiktionary.org/wiki/Appendix:List_of_Latin_phrases_(A%E2%80%93E)#C>"
All type tests included with this package are considered to be the fixed definition of
the types.  Any definition not included in the testing is considered flexible.
.PP
This module uses Type::Tiny which can, in the background, use Type::Tiny::XS.
While in general this is a good thing you will need to make sure that
Type::Tiny::XS is version 0.010 or newer since the older ones didn't support the
\&'Optional' method.
.SS "Types"
.IX Subsection "Types"
\fIDateTimeHash\fR
.IX Subsection "DateTimeHash"
.Sp
.RS 4
\&\fBDefinition:\fR How to know if a hash meets the DateTime hash requirements
.Sp
\&\fBRange\fR
.Sp
.Vb 10
\&        Dict[
\&                year       => Int,
\&                month      => Optional[ Int ],
\&                day        => Optional[ Int ],
\&                hour       => Optional[ Int ],
\&                minute     => Optional[ Int ],
\&                second     => Optional[ Int ],
\&                nanosecond => Optional[ Int ],
\&                time_zone  => Optional[ Str ],
\&        ]
.Ve
.RE
.PP
\fIDateTimeInstance\fR
.IX Subsection "DateTimeInstance"
.Sp
.RS 4
\&\fBDefinition:\fR An instance of a DateTime object
.RE
.PP
\fIExcelEpoch\fR
.IX Subsection "ExcelEpoch"
.Sp
.RS 4
\&\fBDefinition:\fR Numbers used by Microsoft Excel to descibe a point in time.
.Sp
\&\fBRange\fR All numbers greater than or equal to 0
.RE
.PP
\fISystemName\fR
.IX Subsection "SystemName"
.Sp
.RS 4
\&\fBDefinition:\fR labels for the different Excel calculation rules and epoch start.
.Sp
\&\fBRange\fR win_excel|apple_excel
.RE
.SS "Named Coercions"
.IX Subsection "Named Coercions"
\fIHashToDateTime\fR
.IX Subsection "HashToDateTime"
.Sp
.RS 4
\&\fBAccepts: \fR A DateTimeHash
.Sp
\&\fBReturns: \fR A DateTime instance
.Sp
\&\fBConversion Method: \fR DateTime\->new( \f(CW$DateTimeHash\fR );
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github DateTimeX::Format::Excel/issues <https://github.com/jandrew/DateTimeX-Format-Excel/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing yet
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2014, 2015 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
version
.Sp
DateTime
.Sp
Type::Utils
.Sp
Type::Library
.Sp
Types::Standard
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
DateTime::Format::Excel
.Sp
Smart::Comments \- Turned on with \f(CW$ENV\fR{ Smart_Comments }
.RE
