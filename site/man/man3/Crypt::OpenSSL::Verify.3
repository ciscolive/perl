.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Verify 3"
.TH Verify 3 "2020-07-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::OpenSSL::Verify \- OpenSSL Verify certificate verification in XS.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Crypt::OpenSSL::Verify;
\&  use Crypt::OpenSSL::X509;
\&
\&  my $ca = Crypt::OpenSSL::Verify\->new(
\&      \*(Aqt/cacert.pem\*(Aq, # or undef
\&      {
\&          CApath   => \*(Aq/etc/ssl/certs\*(Aq,    # Optional
\&          noCAfile => 1,                   # Optional
\&          noCApath => 0                    # Optional
\&      }
\&  );
\&
\&  # Backward compatible with Crypt::OpenSSL:VerifyX509
\&  my $ca = Crypt::OpenSSL::Verify\->new(\*(Aqt/cacert.pem\*(Aq);
\&
\&  # Using the defaults of your OS:
\&  my $ca = Crypt::OpenSSL::Verify\->new();
\&
\&  # and later on..
\&
\&  my $cert = Crypt::OpenSSL::X509\->new(...);
\&  $ca\->verify($cert);
.Ve
.PP
The object created is similar to running the following command with the
\&\f(CW\*(C`openssl verify\*(C'\fR command line tool: \f(CW\*(C`openssl verify [ \-CApath /path/to/certs ]
[ \-noCApath ] [ \-noCAfile ] [ \-CAfile /path/to/file ] cert.pem\*(C'\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Given a \s-1CA\s0 certificate and another untrusted certificate, will show
whether the \s-1CA\s0 signs the certificate. This is a useful thing to have
if you're signing with X509 certificates, but outside of \s-1SSL.\s0
.PP
A specific example is where you're working with \s-1XML\s0 signatures, and
need to verify that the signing certificate is valid.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBnew()\fP"
.IX Subsection "new()"
Constructor. Returns an OpenSSL Verify instance, set up with the given \s-1CA.\s0
.PP
.Vb 5
\&    my $ca = Crypt::OpenSSL::Verify\->new(
\&        \*(Aqt/cacert.pem\*(Aq,   # or undef
\&        {
\&            # Path to a directory containg hashed CA Certificates
\&            CApath => $ca_path,
\&
\&            # Default CAfile should not be loaded if TRUE, defaults to FALSE
\&            noCAfile => 0,
\&
\&            # Default CApath should not be loaded if TRUE, defaults to FALSE
\&            noCApath => 0,
\&
\&            # Do not override any OpenSSL verify errors if FALSE, defaults to TRUE
\&            strict_certs => 1,
\&        }
\&    );
\&
\&    # Backward compatible with Crypt::OpenSSL:VerifyX509
\&    my $ca = Crypt::OpenSSL::Verify\->new(\*(Aqt/cacert.pem\*(Aq, {strict_certs => 0 });
\&
\&    # Using the defaults of your OS:
\&    my $ca = Crypt::OpenSSL::Verify\->new();
.Ve
.SS "verify($cert)"
.IX Subsection "verify($cert)"
Verify the certificate is signed by the \s-1CA.\s0 Returns true if so, and
croaks with the verification error if not.
.PP
Arguments:
.PP
.Vb 1
\& * $cert \- a Crypt::OpenSSL::X509 object for the certificate to verify.
.Ve
.SS "ctx_error_code($ctx)"
.IX Subsection "ctx_error_code($ctx)"
Calls the C code to obtain the OpenSSL error code of the verify and
returns an integer value
.PP
Arguments:
.PP
.Vb 3
\&  * $ctx \- a long unsigned integer containing the  pointer to the
\&        X509_STORE_CTX that was passed to the callback function
\&        during the certificate verification
.Ve
.SS "register_verify_cb(\e&verify_callback);"
.IX Subsection "register_verify_cb(&verify_callback);"
Registers a Perl Sub as the callback function for OpenSSL to call
during the registration process
.PP
Arguments:
.PP
.Vb 1
\&  * \e&verify_callback \- a reference to the verify_callback sub
.Ve
.ie n .SS "verify_callback($ok, $ctx)"
.el .SS "verify_callback($ok, \f(CW$ctx\fP)"
.IX Subsection "verify_callback($ok, $ctx)"
Called directly by OpenSSL and in the case of an acceptable error will
change the response to 1 to signify no error
.PP
Arguements:
.PP
.Vb 2
\&  $ok \- Error (0) or Success (1) from the OpenSSL certificate verification
\&        results
\&
\&  $ctx \- value of the pointer to the Certificate Store CTX used to access the
\&        error codes that OpenSSL returned
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Timothy Legge <timlegge@gmail.com>" 4
.IX Item "Timothy Legge <timlegge@gmail.com>"
.PD 0
.IP "Wesley Schwengle <waterkip@cpan.org>" 4
.IX Item "Wesley Schwengle <waterkip@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The following copyright notice applies to all the files provided in
this distribution, including binary files, unless explicitly noted
otherwise.
.IP "Copyright 2020 Timothy Legge" 4
.IX Item "Copyright 2020 Timothy Legge"
.PD 0
.IP "Copyright 2020 Wesley Schwengle" 4
.IX Item "Copyright 2020 Wesley Schwengle"
.PD
.PP
Based on the Original Crypt::OpenSSL::VerifyX509 by
.IP "Copyright 2010 Chris Andrews <chrisandrews@venda.com>" 4
.IX Item "Copyright 2010 Chris Andrews <chrisandrews@venda.com>"
.SH "LICENCE"
.IX Header "LICENCE"
This library is free software; you can redistribute it and/or modify
it under the same terms as OpenSSL and is covered by the dual
OpenSSL and SSLeay license.
