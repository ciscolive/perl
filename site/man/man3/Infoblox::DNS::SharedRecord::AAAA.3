.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::SharedRecord::AAAA 3"
.TH Infoblox::DNS::SharedRecord::AAAA 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::SharedRecord::AAAA \- DNS AAAA shared record object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A shared \s-1AAAA\s0 record is similar to a regular \s-1AAAA\s0 record. It maps a domain name to an IPv6 address. The difference is that a shared \s-1AAAA\s0 record should be added into a shared record group. If this shared record group is associated with other zones, then this shared \s-1AAAA\s0 record will be shared into these zones. For more information about how shared record groups and shared records work, please refer to Infoblox Administrator Guide.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $srg_aaaa = Infoblox::DNS::SharedRecord::AAAA\->new (
\&     ipv6addr                => $ipv6addr,          #Required
\&     name                    => $fqdn,              #Required
\&     shared_record_group     => $string,            #Required
\&     comment                 => $string,            #Optional / Default is empty
\&     disable                 => "true" | "false"    #Optional / Default "false"
\&     extattrs                => { $string => $extattr, ... },      #Optional / Default is undefined
\&     extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, #Optional / Default is undefined
\&     ttl                     => $num | undef,       #Optional / Default is undefined
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DNS AAAA\s0 shared record object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1AAAA\s0 shared record object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Construct an object
\& my $srg_aaaa = Infoblox::DNS::SharedRecord::AAAA\->new(
\&     name     => "aaaa1",
\&     comment  => "add a shared DNS AAAA aaaa1",
\&     ipv6addr => "aaaa:1111:bbbb:2222:cccc:3333:dddd:4444",
\&     disable  => "true",
\&     ttl      => "33",
\&     shared_record_group => "test_srg"  );
\& # Submit for addition
\& my $response = $session\->add( $srg_aaaa );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DNS AAAA object:
\&
\&  name \- Required. A host name in string format.
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&                       object => "Infoblox::DNS::SharedRecord::AAAA",
\&                       name   => "aaaa1");
\&
\& # get all shared AAAA records with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::SharedRecord::AAAA",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1AAAA\s0 shared record object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use method to modify the comment.
\& $srg_aaaa\->comment("this is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $srg_aaaa );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1AAAA\s0 shared record object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific \s-1AAAA\s0 shared record object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::SharedRecord::AAAA",
\&     name   => "aaaa1");
\& # Find the desired object from the retrieved list.
\& my $desired_aaaa = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_aaaa );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DNS AAAA\s0 shared record objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes, to search for a DNS AAAA shared record object:
\&
\&  name    \- Required. Reverse host name in string format (regular expression).
\&  comment \- Optional. Comment in string format (regular expression).
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all DNS AAAA objects
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DNS::SharedRecord::AAAA",
\&     name    => ".*",
\&     comment => ".*modified comment" );
\&
\& # search all DNS shared AAAA records with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DNS::SharedRecord::AAAA",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a \s-1DNS\s0 shared \s-1AAAA\s0 record object.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment of a \s-1DNS\s0 shared \s-1AAAA\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $srg_aaaa\->comment();
\& #Modify comment
\& $srg_aaaa\->comment("Modifying the DNS AAAA comment");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DNS\s0 shared \s-1AAAA\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false. The \s-1DNS\s0 shared \s-1AAAA\s0 record is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $srg_aaaa\->disable();
\& #Modify disable
\& $srg_aaaa\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "dns_name( )"
.IX Subsection "dns_name( )"
.RS 4
Use this method to retrieve the host name in punycode format. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $srg_aaaa\->dns_name();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS\s0 shared \s-1AAAA\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $srg_aaaa\->extattrs();
\& #Modify extattrs
\& $srg_aaaa\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS\s0 shared \s-1AAAA\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $srg_aaaa\->extensible_attributes();
\& #Modify extensible attributes
\& $srg_aaaa\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "ipv6addr( )"
.IX Subsection "ipv6addr( )"
.RS 4
Use this method to set or retrieve the IPv6 address of a \s-1DNS\s0 shared \s-1AAAA\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number in colon hexadecimal notation. It consists of eight 16\-bit groups of hexadecimal digits separated by colons (example: 12ab:0000:0000:0123:4567:89ab:0000:cdef).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6addr
\& my ipv6addr = $srg_aaaa\->ipv6addr();
\& #Modify ipv6addr
\& $srg_aaaa\->ipv6addr("aaaa:1111:bbbb:2222:cccc:3333:dddd:5555");
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the host name of a \s-1DNS\s0 shared \s-1AAAA\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Hostname of this shared \s-1AAAA\s0 record. This is not the \s-1FQDN\s0 name of the host name. It should only be the hostname portion of \s-1FQDN\s0 (Fully Qualified Domain Name) name. For example, if this shared \s-1AAAA\s0 record 'shared_aaaa' will be shared in zone test.com, then the name should be 'shared_a'. System will append 'test.com' when this shared \s-1AAAA\s0 record is populated and shared in zone test.com.
.Sp
A hostname can have a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $shared_aaaaa\->name();
\& #Modify name
\& $shared_aaaaa\->name("shared_aaaa");
.Ve
.RE
.RS 4
.RE
.SS "shared_record_group( )"
.IX Subsection "shared_record_group( )"
.RS 4
Use this method to set or retrieve the shared record group of a \s-1DNS\s0 shared \s-1AAAA\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of defined Infoblox::DNS::SRG objects. The shared \s-1AAAA\s0 record will be defined under this shared record group and shared among zones associated with this shared record group.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get shared record group
\& my $srg = $shared_aaaa\->shared_record_group();
\& #Modify shared record group
\& $shared_aaaa\->shared_record_group("test_srg");
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to set or retrieve the Time to Live (\s-1TTL\s0) value of a \s-1DNS\s0 shared \s-1AAAA\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is undefined which indicates that the record inherits the \s-1TTL\s0 value of the zone.
.Sp
Specify a \s-1TTL\s0 value to override the \s-1TTL\s0 value at the zone level.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration in seconds that the record is cached. Zero indicates that the record should not be cached.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get ttl
\& my $ttl = $srg_aaaa\->ttl();
\& #Modify ttl
\& $srg_aaaa\->ttl(1800);
\& #Un\-override ttl
\& $srg_aaaa\->ttl(undef);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a shared \s-1AAAA\s0 record object such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS\s0 shared \s-1AAAA\s0 shared record insertion\fR
.PP
.Vb 1
\& #PROGRAM STARTS: Include all the modules that will be used
\&
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox Appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2", #appliance host ip
\&     username => "admin",     #appliance user login
\&     password => "infoblox"   #appliance password
\& );
\&
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& #Create the shared record group prior to an shared AAAA record insertion
\& my $srg = Infoblox::DNS::SRG\->new(name => "test_srg");
\& unless ($srg) {
\&    die("Construct srg failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "SRG object created successfully\en";
\&
\& #Verify if the SRG exists
\& my $object = $session\->get(object => "Infoblox::DNS::SRg", name => "test_srg");
\& unless ($object) {
\&    print "SRG does not exist on server, safe to add the SRG\en";
\&    $session\->add($SRG)
\&       or die("Add SRG failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "SRG added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS AAAA\s0 shared record\fR
.PP
.Vb 1
\& #Construct a DNS AAAA object
\&
\& my $srg_aaaa = Infoblox::DNS::SharedRecord::AAAA\->new(
\&     name     => "aaaa1",
\&     comment  => "add a DNS shared AAAA aaaa1",
\&     ipv6addr => "aaaa:1111:bbbb:2222:cccc:3333:dddd:4444",
\&     shared_record_group => "test_srg"
\& );
\&
\& unless ($srg_aaaa) {
\&    die("Construct DNS shared record AAAA failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DNS shared AAAA object created successfully\en";
\&
\& #Add the DNS AAAA shared record object to Infoblox Appliance through a session
\& $session\->add($srg_aaaa)
\&
\&     or die("Add record AAAA failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS AAAA object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS AAAA\s0 shared record\fR
.PP
.Vb 11
\& #Search all AAAA shared records in the zone
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::SharedRecord::AAAA",
\&     name   => ".*"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search shared record AAAA failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS shared AAAA object found at least 1 matching entry\en";
\&
\& #Search all AAAA shared records that start with "add" in the comment
\& my @retrieved_objs = $session\->search(
\&     object    => "Infoblox::DNS::SharedRecord::AAAA",
\&     comment   => "add.*",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search shared record AAAA failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS shared AAAA object found at least 1 matching entry\en";
\&
\& #Search all shared AAAA shared records that start with "aaaa1"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::SharedRecord::AAAA",
\&     name   => "^aaaa1",
\&  );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search shared record AAAA failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS shared AAAA object using regexp found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS AAAA\s0 shared record\fR
.PP
.Vb 6
\& #Get AAAA shared record through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::SharedRecord::AAAA",
\&     name   => "aaaa1"
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Get shared record AAAA failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& #Modify one of the attributes of the specified AAAA shared record
\& $object\->ipv6addr("aaaa:1111:bbbb:2222:cccc:3333:dddd:eeee");
\&
\& #Applying the changes
\& $session\->modify($object)
\&
\&     or die("Modify shared record AAAA failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS shared AAAA object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DNS AAAA\s0 shared record.\fR
.PP
.Vb 10
\& #Get AAAA shared record through the session
\& my @retrieved_objs = $session\->get(
\&     object   => "Infoblox::DNS::SharedRecord::AAAA",
\&     name     => "aaaa1"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get record AAAA failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Get DNS shared AAAA object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\&
\& $session\->remove($object)
\&     or die("Remove shared record AAAA failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS shared AAAA object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::View, Infoblox::DNS::Zone, Infoblox::DNS::SRG, Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
