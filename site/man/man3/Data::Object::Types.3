.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::Types 3"
.TH Data::Object::Types 3 "2020-04-14" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::Types
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Data-Object Type Constraints
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package main;
\&
\&  use Data::Object::Types;
\&
\&  1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides type constraints for Data::Object.
.SH "CONSTRAINTS"
.IX Header "CONSTRAINTS"
This package declares the following type constraints:
.SS "argsobj"
.IX Subsection "argsobj"
.Vb 1
\&  ArgsObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "argsobj parent" 4
.IX Item "argsobj parent"
.Vb 1
\&  Object
.Ve
.IP "argsobj composition" 4
.IX Item "argsobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Args"]
.Ve
.IP "argsobj example #1" 4
.IX Item "argsobj example #1"
.Vb 1
\&  # package ArgsExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Args\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqArgsExample\*(Aq;
.Ve
.SS "argsobject"
.IX Subsection "argsobject"
.Vb 1
\&  ArgsObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "argsobject parent" 4
.IX Item "argsobject parent"
.Vb 1
\&  Object
.Ve
.IP "argsobject composition" 4
.IX Item "argsobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Args"]
.Ve
.IP "argsobject example #1" 4
.IX Item "argsobject example #1"
.Vb 1
\&  # package ArgsExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Args\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqArgsExample\*(Aq;
.Ve
.SS "arrayobj"
.IX Subsection "arrayobj"
.Vb 1
\&  ArrayObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "arrayobj parent" 4
.IX Item "arrayobj parent"
.Vb 1
\&  Object
.Ve
.IP "arrayobj composition" 4
.IX Item "arrayobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Array"]
.Ve
.IP "arrayobj coercion #1" 4
.IX Item "arrayobj coercion #1"
.Vb 1
\&  # coerce from ArrayRef
\&
\&  []
.Ve
.IP "arrayobj example #1" 4
.IX Item "arrayobj example #1"
.Vb 1
\&  # package ArrayExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Array\*(Aq;
\&
\&  package main;
\&
\&  bless [], \*(AqArrayExample\*(Aq;
.Ve
.SS "arrayobject"
.IX Subsection "arrayobject"
.Vb 1
\&  ArrayObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "arrayobject parent" 4
.IX Item "arrayobject parent"
.Vb 1
\&  Object
.Ve
.IP "arrayobject composition" 4
.IX Item "arrayobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Array"]
.Ve
.IP "arrayobject coercion #1" 4
.IX Item "arrayobject coercion #1"
.Vb 1
\&  # coerce from ArrayRef
\&
\&  []
.Ve
.IP "arrayobject example #1" 4
.IX Item "arrayobject example #1"
.Vb 1
\&  # package ArrayExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Array\*(Aq;
\&
\&  package main;
\&
\&  bless [], \*(AqArrayExample\*(Aq;
.Ve
.SS "boolobj"
.IX Subsection "boolobj"
.Vb 1
\&  BoolObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "boolobj parent" 4
.IX Item "boolobj parent"
.Vb 1
\&  Object
.Ve
.IP "boolobj composition" 4
.IX Item "boolobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Boolean"]
.Ve
.IP "boolobj example #1" 4
.IX Item "boolobj example #1"
.Vb 1
\&  # package BooleanExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Boolean\*(Aq;
\&
\&  package main;
\&
\&  my $bool = 1;
\&
\&  bless \e$bool, \*(AqBooleanExample\*(Aq;
.Ve
.SS "boolobject"
.IX Subsection "boolobject"
.Vb 1
\&  BoolObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "boolobject parent" 4
.IX Item "boolobject parent"
.Vb 1
\&  Object
.Ve
.IP "boolobject composition" 4
.IX Item "boolobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Boolean"]
.Ve
.IP "boolobject example #1" 4
.IX Item "boolobject example #1"
.Vb 1
\&  # package BooleanExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Boolean\*(Aq;
\&
\&  package main;
\&
\&  my $bool = 1;
\&
\&  bless \e$bool, \*(AqBooleanExample\*(Aq;
.Ve
.SS "booleanobj"
.IX Subsection "booleanobj"
.Vb 1
\&  BooleanObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "booleanobj parent" 4
.IX Item "booleanobj parent"
.Vb 1
\&  Object
.Ve
.IP "booleanobj composition" 4
.IX Item "booleanobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Boolean"]
.Ve
.IP "booleanobj example #1" 4
.IX Item "booleanobj example #1"
.Vb 1
\&  # package BooleanExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Boolean\*(Aq;
\&
\&  package main;
\&
\&  my $bool = 1;
\&
\&  bless \e$bool, \*(AqBooleanExample\*(Aq;
.Ve
.SS "booleanobject"
.IX Subsection "booleanobject"
.Vb 1
\&  BooleanObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "booleanobject parent" 4
.IX Item "booleanobject parent"
.Vb 1
\&  Object
.Ve
.IP "booleanobject composition" 4
.IX Item "booleanobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Boolean"]
.Ve
.IP "booleanobject example #1" 4
.IX Item "booleanobject example #1"
.Vb 1
\&  # package BooleanExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Boolean\*(Aq;
\&
\&  package main;
\&
\&  my $bool = 1;
\&
\&  bless \e$bool, \*(AqBooleanExample\*(Aq;
.Ve
.SS "cliobj"
.IX Subsection "cliobj"
.Vb 1
\&  CliObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "cliobj parent" 4
.IX Item "cliobj parent"
.Vb 1
\&  Object
.Ve
.IP "cliobj composition" 4
.IX Item "cliobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Cli"]
.Ve
.IP "cliobj example #1" 4
.IX Item "cliobj example #1"
.Vb 1
\&  # package CliExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Cli\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqCliExample\*(Aq;
.Ve
.SS "cliobject"
.IX Subsection "cliobject"
.Vb 1
\&  CliObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "cliobject parent" 4
.IX Item "cliobject parent"
.Vb 1
\&  Object
.Ve
.IP "cliobject composition" 4
.IX Item "cliobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Cli"]
.Ve
.IP "cliobject example #1" 4
.IX Item "cliobject example #1"
.Vb 1
\&  # package CliExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Cli\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqCliExample\*(Aq;
.Ve
.SS "codeobj"
.IX Subsection "codeobj"
.Vb 1
\&  CodeObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "codeobj parent" 4
.IX Item "codeobj parent"
.Vb 1
\&  Object
.Ve
.IP "codeobj composition" 4
.IX Item "codeobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Code"]
.Ve
.IP "codeobj coercion #1" 4
.IX Item "codeobj coercion #1"
.Vb 1
\&  # coerce from CodeRef
\&
\&  sub{}
.Ve
.IP "codeobj example #1" 4
.IX Item "codeobj example #1"
.Vb 1
\&  # package CodeExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Code\*(Aq;
\&
\&  package main;
\&
\&  bless sub{}, \*(AqCodeExample\*(Aq;
.Ve
.SS "codeobject"
.IX Subsection "codeobject"
.Vb 1
\&  CodeObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "codeobject parent" 4
.IX Item "codeobject parent"
.Vb 1
\&  Object
.Ve
.IP "codeobject composition" 4
.IX Item "codeobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Code"]
.Ve
.IP "codeobject coercion #1" 4
.IX Item "codeobject coercion #1"
.Vb 1
\&  # coerce from CodeRef
\&
\&  sub{}
.Ve
.IP "codeobject example #1" 4
.IX Item "codeobject example #1"
.Vb 1
\&  # package CodeExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Code\*(Aq;
\&
\&  package main;
\&
\&  bless sub{}, \*(AqCodeExample\*(Aq;
.Ve
.SS "dataobj"
.IX Subsection "dataobj"
.Vb 1
\&  DataObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dataobj parent" 4
.IX Item "dataobj parent"
.Vb 1
\&  Object
.Ve
.IP "dataobj composition" 4
.IX Item "dataobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Data"]
.Ve
.IP "dataobj example #1" 4
.IX Item "dataobj example #1"
.Vb 1
\&  # package DataExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Data\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqDataExample\*(Aq;
.Ve
.SS "dataobject"
.IX Subsection "dataobject"
.Vb 1
\&  DataObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dataobject parent" 4
.IX Item "dataobject parent"
.Vb 1
\&  Object
.Ve
.IP "dataobject composition" 4
.IX Item "dataobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Data"]
.Ve
.IP "dataobject example #1" 4
.IX Item "dataobject example #1"
.Vb 1
\&  # package DataExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Data\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqDataExample\*(Aq;
.Ve
.SS "doargs"
.IX Subsection "doargs"
.Vb 1
\&  DoArgs
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "doargs parent" 4
.IX Item "doargs parent"
.Vb 1
\&  Object
.Ve
.IP "doargs composition" 4
.IX Item "doargs composition"
.Vb 1
\&  InstanceOf["Data::Object::Args"]
.Ve
.IP "doargs example #1" 4
.IX Item "doargs example #1"
.Vb 1
\&  # package ArgsExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Args\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqArgsExample\*(Aq;
.Ve
.SS "doarray"
.IX Subsection "doarray"
.Vb 1
\&  DoArray
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "doarray parent" 4
.IX Item "doarray parent"
.Vb 1
\&  Object
.Ve
.IP "doarray composition" 4
.IX Item "doarray composition"
.Vb 1
\&  InstanceOf["Data::Object::Array"]
.Ve
.IP "doarray coercion #1" 4
.IX Item "doarray coercion #1"
.Vb 1
\&  # coerce from ArrayRef
\&
\&  []
.Ve
.IP "doarray example #1" 4
.IX Item "doarray example #1"
.Vb 1
\&  # package ArrayExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Array\*(Aq;
\&
\&  package main;
\&
\&  bless [], \*(AqArrayExample\*(Aq;
.Ve
.SS "doboolean"
.IX Subsection "doboolean"
.Vb 1
\&  DoBoolean
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "doboolean parent" 4
.IX Item "doboolean parent"
.Vb 1
\&  Object
.Ve
.IP "doboolean composition" 4
.IX Item "doboolean composition"
.Vb 1
\&  InstanceOf["Data::Object::Boolean"]
.Ve
.IP "doboolean example #1" 4
.IX Item "doboolean example #1"
.Vb 1
\&  # package BooleanExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Boolean\*(Aq;
\&
\&  package main;
\&
\&  my $bool = 1;
\&
\&  bless \e$bool, \*(AqBooleanExample\*(Aq;
.Ve
.SS "docli"
.IX Subsection "docli"
.Vb 1
\&  DoCli
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "docli parent" 4
.IX Item "docli parent"
.Vb 1
\&  Object
.Ve
.IP "docli composition" 4
.IX Item "docli composition"
.Vb 1
\&  InstanceOf["Data::Object::Cli"]
.Ve
.IP "docli example #1" 4
.IX Item "docli example #1"
.Vb 1
\&  # package CliExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Cli\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqCliExample\*(Aq;
.Ve
.SS "docode"
.IX Subsection "docode"
.Vb 1
\&  DoCode
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "docode parent" 4
.IX Item "docode parent"
.Vb 1
\&  Object
.Ve
.IP "docode composition" 4
.IX Item "docode composition"
.Vb 1
\&  InstanceOf["Data::Object::Code"]
.Ve
.IP "docode coercion #1" 4
.IX Item "docode coercion #1"
.Vb 1
\&  # coerce from CodeRef
\&
\&  sub{}
.Ve
.IP "docode example #1" 4
.IX Item "docode example #1"
.Vb 1
\&  # package CodeExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Code\*(Aq;
\&
\&  package main;
\&
\&  bless sub{}, \*(AqCodeExample\*(Aq;
.Ve
.SS "dodata"
.IX Subsection "dodata"
.Vb 1
\&  DoData
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dodata parent" 4
.IX Item "dodata parent"
.Vb 1
\&  Object
.Ve
.IP "dodata composition" 4
.IX Item "dodata composition"
.Vb 1
\&  InstanceOf["Data::Object::Data"]
.Ve
.IP "dodata example #1" 4
.IX Item "dodata example #1"
.Vb 1
\&  # package DataExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Data\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqDataExample\*(Aq;
.Ve
.SS "dodumpable"
.IX Subsection "dodumpable"
.Vb 1
\&  DoDumpable
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dodumpable parent" 4
.IX Item "dodumpable parent"
.Vb 1
\&  Object
.Ve
.IP "dodumpable composition" 4
.IX Item "dodumpable composition"
.Vb 1
\&  ConsumerOf["Data::Object::Role::Dumpable"]
.Ve
.IP "dodumpable example #1" 4
.IX Item "dodumpable example #1"
.Vb 1
\&  # package DumpableExample;
\&
\&  # use Data::Object::Class;
\&
\&  # with \*(AqData::Object::Role::Dumpable\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqDumpableExample\*(Aq;
.Ve
.SS "doexception"
.IX Subsection "doexception"
.Vb 1
\&  DoException
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "doexception parent" 4
.IX Item "doexception parent"
.Vb 1
\&  Object
.Ve
.IP "doexception composition" 4
.IX Item "doexception composition"
.Vb 1
\&  InstanceOf["Data::Object::Exception"]
.Ve
.IP "doexception example #1" 4
.IX Item "doexception example #1"
.Vb 1
\&  # package ExceptionExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Exception\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqExceptionExample\*(Aq;
.Ve
.SS "dofloat"
.IX Subsection "dofloat"
.Vb 1
\&  DoFloat
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dofloat parent" 4
.IX Item "dofloat parent"
.Vb 1
\&  Object
.Ve
.IP "dofloat composition" 4
.IX Item "dofloat composition"
.Vb 1
\&  InstanceOf["Data::Object::Float"]
.Ve
.IP "dofloat coercion #1" 4
.IX Item "dofloat coercion #1"
.Vb 1
\&  # coerce from LaxNum
\&
\&  123
.Ve
.IP "dofloat coercion #2" 4
.IX Item "dofloat coercion #2"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aq123\*(Aq
.Ve
.IP "dofloat coercion #3" 4
.IX Item "dofloat coercion #3"
.Vb 1
\&  # coerce from Num
\&
\&  123
.Ve
.IP "dofloat example #1" 4
.IX Item "dofloat example #1"
.Vb 1
\&  # package FloatExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Float\*(Aq;
\&
\&  package main;
\&
\&  my $float = 1.23;
\&
\&  bless \e$float, \*(AqFloatExample\*(Aq;
.Ve
.SS "dofunc"
.IX Subsection "dofunc"
.Vb 1
\&  DoFunc
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dofunc parent" 4
.IX Item "dofunc parent"
.Vb 1
\&  Object
.Ve
.IP "dofunc composition" 4
.IX Item "dofunc composition"
.Vb 1
\&  InstanceOf["Data::Object::Func"]
.Ve
.IP "dofunc example #1" 4
.IX Item "dofunc example #1"
.Vb 1
\&  # package FuncExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Func\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqFuncExample\*(Aq;
.Ve
.SS "dohash"
.IX Subsection "dohash"
.Vb 1
\&  DoHash
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dohash parent" 4
.IX Item "dohash parent"
.Vb 1
\&  Object
.Ve
.IP "dohash composition" 4
.IX Item "dohash composition"
.Vb 1
\&  InstanceOf["Data::Object::Hash"]
.Ve
.IP "dohash coercion #1" 4
.IX Item "dohash coercion #1"
.Vb 1
\&  # coerce from HashRef
\&
\&  {}
.Ve
.IP "dohash example #1" 4
.IX Item "dohash example #1"
.Vb 1
\&  # package HashExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Hash\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqHashExample\*(Aq;
.Ve
.SS "doimmutable"
.IX Subsection "doimmutable"
.Vb 1
\&  DoImmutable
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "doimmutable parent" 4
.IX Item "doimmutable parent"
.Vb 1
\&  Object
.Ve
.IP "doimmutable composition" 4
.IX Item "doimmutable composition"
.Vb 1
\&  ConsumerOf["Data::Object::Role::Immutable"]
.Ve
.IP "doimmutable example #1" 4
.IX Item "doimmutable example #1"
.Vb 1
\&  # package ImmutableExample;
\&
\&  # use Data::Object::Class;
\&
\&  # with \*(AqData::Object::Role::Immutable\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqImmutableExample\*(Aq;
.Ve
.SS "donum"
.IX Subsection "donum"
.Vb 1
\&  DoNum
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "donum parent" 4
.IX Item "donum parent"
.Vb 1
\&  Object
.Ve
.IP "donum composition" 4
.IX Item "donum composition"
.Vb 1
\&  InstanceOf["Data::Object::Number"]
.Ve
.IP "donum coercion #1" 4
.IX Item "donum coercion #1"
.Vb 1
\&  # coerce from LaxNum
\&
\&  123
.Ve
.IP "donum coercion #2" 4
.IX Item "donum coercion #2"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aq123\*(Aq
.Ve
.IP "donum coercion #3" 4
.IX Item "donum coercion #3"
.Vb 1
\&  # coerce from Num
\&
\&  123
.Ve
.IP "donum coercion #4" 4
.IX Item "donum coercion #4"
.Vb 1
\&  # coerce from StrictNum
\&
\&  123
.Ve
.IP "donum coercion #5" 4
.IX Item "donum coercion #5"
.Vb 1
\&  # coerce from Int
\&
\&  99999
.Ve
.IP "donum example #1" 4
.IX Item "donum example #1"
.Vb 1
\&  # package NumberExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Number\*(Aq;
\&
\&  package main;
\&
\&  my $num = 123;
\&
\&  bless \e$num, \*(AqNumberExample\*(Aq;
.Ve
.SS "doopts"
.IX Subsection "doopts"
.Vb 1
\&  DoOpts
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "doopts parent" 4
.IX Item "doopts parent"
.Vb 1
\&  Object
.Ve
.IP "doopts composition" 4
.IX Item "doopts composition"
.Vb 1
\&  InstanceOf["Data::Object::Opts"]
.Ve
.IP "doopts example #1" 4
.IX Item "doopts example #1"
.Vb 1
\&  # package OptsExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Opts\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqOptsExample\*(Aq;
.Ve
.SS "doregexp"
.IX Subsection "doregexp"
.Vb 1
\&  DoRegexp
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "doregexp parent" 4
.IX Item "doregexp parent"
.Vb 1
\&  Object
.Ve
.IP "doregexp composition" 4
.IX Item "doregexp composition"
.Vb 1
\&  InstanceOf["Data::Object::Regexp"]
.Ve
.IP "doregexp coercion #1" 4
.IX Item "doregexp coercion #1"
.Vb 1
\&  # coerce from RegexpRef
\&
\&  qr//
.Ve
.IP "doregexp example #1" 4
.IX Item "doregexp example #1"
.Vb 1
\&  # package RegexpExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Regexp\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqRegexpExample\*(Aq;
.Ve
.SS "doreplace"
.IX Subsection "doreplace"
.Vb 1
\&  DoReplace
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "doreplace parent" 4
.IX Item "doreplace parent"
.Vb 1
\&  Object
.Ve
.IP "doreplace composition" 4
.IX Item "doreplace composition"
.Vb 1
\&  InstanceOf["Data::Object::Replace"]
.Ve
.IP "doreplace example #1" 4
.IX Item "doreplace example #1"
.Vb 1
\&  # package ReplaceExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Replace\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqReplaceExample\*(Aq;
.Ve
.SS "doscalar"
.IX Subsection "doscalar"
.Vb 1
\&  DoScalar
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "doscalar parent" 4
.IX Item "doscalar parent"
.Vb 1
\&  Object
.Ve
.IP "doscalar composition" 4
.IX Item "doscalar composition"
.Vb 1
\&  InstanceOf["Data::Object::Scalar"]
.Ve
.IP "doscalar coercion #1" 4
.IX Item "doscalar coercion #1"
.Vb 1
\&  # coerce from ScalarRef
\&
\&  do { my $i = 0; \e$i }
.Ve
.IP "doscalar example #1" 4
.IX Item "doscalar example #1"
.Vb 1
\&  # package ScalarExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Scalar\*(Aq;
\&
\&  package main;
\&
\&  my $scalar = \*(Aqabc\*(Aq;
\&
\&  bless \e$scalar, \*(AqScalarExample\*(Aq;
.Ve
.SS "dosearch"
.IX Subsection "dosearch"
.Vb 1
\&  DoSearch
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dosearch parent" 4
.IX Item "dosearch parent"
.Vb 1
\&  Object
.Ve
.IP "dosearch composition" 4
.IX Item "dosearch composition"
.Vb 1
\&  InstanceOf["Data::Object::Search"]
.Ve
.IP "dosearch example #1" 4
.IX Item "dosearch example #1"
.Vb 1
\&  # package SearchExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Search\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqSearchExample\*(Aq;
.Ve
.SS "dospace"
.IX Subsection "dospace"
.Vb 1
\&  DoSpace
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dospace parent" 4
.IX Item "dospace parent"
.Vb 1
\&  Object
.Ve
.IP "dospace composition" 4
.IX Item "dospace composition"
.Vb 1
\&  InstanceOf["Data::Object::Space"]
.Ve
.IP "dospace coercion #1" 4
.IX Item "dospace coercion #1"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aqabc\*(Aq
.Ve
.IP "dospace example #1" 4
.IX Item "dospace example #1"
.Vb 1
\&  # package SpaceExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Space\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqSpaceExample\*(Aq;
.Ve
.SS "dostashable"
.IX Subsection "dostashable"
.Vb 1
\&  DoStashable
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dostashable parent" 4
.IX Item "dostashable parent"
.Vb 1
\&  Object
.Ve
.IP "dostashable composition" 4
.IX Item "dostashable composition"
.Vb 1
\&  ConsumerOf["Data::Object::Role::Stashable"]
.Ve
.IP "dostashable example #1" 4
.IX Item "dostashable example #1"
.Vb 1
\&  # package StashableExample;
\&
\&  # use Data::Object::Class;
\&
\&  # with \*(AqData::Object::Role::Stashable\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqStashableExample\*(Aq;
.Ve
.SS "dostate"
.IX Subsection "dostate"
.Vb 1
\&  DoState
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dostate parent" 4
.IX Item "dostate parent"
.Vb 1
\&  Object
.Ve
.IP "dostate composition" 4
.IX Item "dostate composition"
.Vb 1
\&  InstanceOf["Data::Object::State"]
.Ve
.IP "dostate example #1" 4
.IX Item "dostate example #1"
.Vb 1
\&  # package StateExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::State\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqStateExample\*(Aq;
.Ve
.SS "dostr"
.IX Subsection "dostr"
.Vb 1
\&  DoStr
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dostr parent" 4
.IX Item "dostr parent"
.Vb 1
\&  Object
.Ve
.IP "dostr composition" 4
.IX Item "dostr composition"
.Vb 1
\&  InstanceOf["Data::Object::String"]
.Ve
.IP "dostr coercion #1" 4
.IX Item "dostr coercion #1"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aqabc\*(Aq
.Ve
.IP "dostr example #1" 4
.IX Item "dostr example #1"
.Vb 1
\&  # package StringExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::String\*(Aq;
\&
\&  package main;
\&
\&  my $string = \*(Aqabc\*(Aq;
\&
\&  bless \e$string, \*(AqStringExample\*(Aq;
.Ve
.SS "dostruct"
.IX Subsection "dostruct"
.Vb 1
\&  DoStruct
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dostruct parent" 4
.IX Item "dostruct parent"
.Vb 1
\&  Object
.Ve
.IP "dostruct composition" 4
.IX Item "dostruct composition"
.Vb 1
\&  InstanceOf["Data::Object::Struct"]
.Ve
.IP "dostruct example #1" 4
.IX Item "dostruct example #1"
.Vb 1
\&  # package StructExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Struct\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqStructExample\*(Aq;
.Ve
.SS "dothrowable"
.IX Subsection "dothrowable"
.Vb 1
\&  DoThrowable
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dothrowable parent" 4
.IX Item "dothrowable parent"
.Vb 1
\&  Object
.Ve
.IP "dothrowable composition" 4
.IX Item "dothrowable composition"
.Vb 1
\&  ConsumerOf["Data::Object::Role::Throwable"]
.Ve
.IP "dothrowable example #1" 4
.IX Item "dothrowable example #1"
.Vb 1
\&  # package ThrowableExample;
\&
\&  # use Data::Object::Class;
\&
\&  # with \*(AqData::Object::Role::Throwable\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqThrowableExample\*(Aq;
.Ve
.SS "doundef"
.IX Subsection "doundef"
.Vb 1
\&  DoUndef
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "doundef parent" 4
.IX Item "doundef parent"
.Vb 1
\&  Object
.Ve
.IP "doundef composition" 4
.IX Item "doundef composition"
.Vb 1
\&  InstanceOf["Data::Object::Undef"]
.Ve
.IP "doundef coercion #1" 4
.IX Item "doundef coercion #1"
.Vb 1
\&  # coerce from Undef
\&
\&  undef
.Ve
.IP "doundef example #1" 4
.IX Item "doundef example #1"
.Vb 1
\&  # package UndefExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Undef\*(Aq;
\&
\&  my $undef = undef;
\&
\&  bless \e$undef, \*(AqUndefExample\*(Aq;
.Ve
.SS "dovars"
.IX Subsection "dovars"
.Vb 1
\&  DoVars
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dovars parent" 4
.IX Item "dovars parent"
.Vb 1
\&  Object
.Ve
.IP "dovars composition" 4
.IX Item "dovars composition"
.Vb 1
\&  InstanceOf["Data::Object::Vars"]
.Ve
.IP "dovars example #1" 4
.IX Item "dovars example #1"
.Vb 1
\&  # package VarsExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Vars\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqVarsExample\*(Aq;
.Ve
.SS "dumpable"
.IX Subsection "dumpable"
.Vb 1
\&  Dumpable
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "dumpable parent" 4
.IX Item "dumpable parent"
.Vb 1
\&  Object
.Ve
.IP "dumpable composition" 4
.IX Item "dumpable composition"
.Vb 1
\&  ConsumerOf["Data::Object::Role::Dumpable"]
.Ve
.IP "dumpable example #1" 4
.IX Item "dumpable example #1"
.Vb 1
\&  # package DumpableExample;
\&
\&  # use Data::Object::Class;
\&
\&  # with \*(AqData::Object::Role::Dumpable\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqDumpableExample\*(Aq;
.Ve
.SS "exceptionobj"
.IX Subsection "exceptionobj"
.Vb 1
\&  ExceptionObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "exceptionobj parent" 4
.IX Item "exceptionobj parent"
.Vb 1
\&  Object
.Ve
.IP "exceptionobj composition" 4
.IX Item "exceptionobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Exception"]
.Ve
.IP "exceptionobj example #1" 4
.IX Item "exceptionobj example #1"
.Vb 1
\&  # package ExceptionExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Exception\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqExceptionExample\*(Aq;
.Ve
.SS "exceptionobject"
.IX Subsection "exceptionobject"
.Vb 1
\&  ExceptionObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "exceptionobject parent" 4
.IX Item "exceptionobject parent"
.Vb 1
\&  Object
.Ve
.IP "exceptionobject composition" 4
.IX Item "exceptionobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Exception"]
.Ve
.IP "exceptionobject example #1" 4
.IX Item "exceptionobject example #1"
.Vb 1
\&  # package ExceptionExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Exception\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqExceptionExample\*(Aq;
.Ve
.SS "floatobj"
.IX Subsection "floatobj"
.Vb 1
\&  FloatObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "floatobj parent" 4
.IX Item "floatobj parent"
.Vb 1
\&  Object
.Ve
.IP "floatobj composition" 4
.IX Item "floatobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Float"]
.Ve
.IP "floatobj coercion #1" 4
.IX Item "floatobj coercion #1"
.Vb 1
\&  # coerce from Num
\&
\&  123
.Ve
.IP "floatobj coercion #2" 4
.IX Item "floatobj coercion #2"
.Vb 1
\&  # coerce from LaxNum
\&
\&  123
.Ve
.IP "floatobj coercion #3" 4
.IX Item "floatobj coercion #3"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aq1.23\*(Aq
.Ve
.IP "floatobj example #1" 4
.IX Item "floatobj example #1"
.Vb 1
\&  # package FloatExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Float\*(Aq;
\&
\&  package main;
\&
\&  my $float = 1.23;
\&
\&  bless \e$float, \*(AqFloatExample\*(Aq;
.Ve
.SS "floatobject"
.IX Subsection "floatobject"
.Vb 1
\&  FloatObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "floatobject parent" 4
.IX Item "floatobject parent"
.Vb 1
\&  Object
.Ve
.IP "floatobject composition" 4
.IX Item "floatobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Float"]
.Ve
.IP "floatobject coercion #1" 4
.IX Item "floatobject coercion #1"
.Vb 1
\&  # coerce from Num
\&
\&  123
.Ve
.IP "floatobject coercion #2" 4
.IX Item "floatobject coercion #2"
.Vb 1
\&  # coerce from LaxNum
\&
\&  123
.Ve
.IP "floatobject coercion #3" 4
.IX Item "floatobject coercion #3"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aq1.23\*(Aq
.Ve
.IP "floatobject example #1" 4
.IX Item "floatobject example #1"
.Vb 1
\&  # package FloatExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Float\*(Aq;
\&
\&  package main;
\&
\&  my $float = 1.23;
\&
\&  bless \e$float, \*(AqFloatExample\*(Aq;
.Ve
.SS "funcobj"
.IX Subsection "funcobj"
.Vb 1
\&  FuncObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "funcobj parent" 4
.IX Item "funcobj parent"
.Vb 1
\&  Object
.Ve
.IP "funcobj composition" 4
.IX Item "funcobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Func"]
.Ve
.IP "funcobj example #1" 4
.IX Item "funcobj example #1"
.Vb 1
\&  # package FuncExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Func\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqFuncExample\*(Aq;
.Ve
.SS "funcobject"
.IX Subsection "funcobject"
.Vb 1
\&  FuncObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "funcobject parent" 4
.IX Item "funcobject parent"
.Vb 1
\&  Object
.Ve
.IP "funcobject composition" 4
.IX Item "funcobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Func"]
.Ve
.IP "funcobject example #1" 4
.IX Item "funcobject example #1"
.Vb 1
\&  # package FuncExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Func\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqFuncExample\*(Aq;
.Ve
.SS "hashobj"
.IX Subsection "hashobj"
.Vb 1
\&  HashObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "hashobj parent" 4
.IX Item "hashobj parent"
.Vb 1
\&  Object
.Ve
.IP "hashobj composition" 4
.IX Item "hashobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Hash"]
.Ve
.IP "hashobj coercion #1" 4
.IX Item "hashobj coercion #1"
.Vb 1
\&  # coerce from HashRef
\&
\&  {}
.Ve
.IP "hashobj example #1" 4
.IX Item "hashobj example #1"
.Vb 1
\&  # package HashExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Hash\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqHashExample\*(Aq;
.Ve
.SS "hashobject"
.IX Subsection "hashobject"
.Vb 1
\&  HashObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "hashobject parent" 4
.IX Item "hashobject parent"
.Vb 1
\&  Object
.Ve
.IP "hashobject composition" 4
.IX Item "hashobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Hash"]
.Ve
.IP "hashobject coercion #1" 4
.IX Item "hashobject coercion #1"
.Vb 1
\&  # coerce from HashRef
\&
\&  {}
.Ve
.IP "hashobject example #1" 4
.IX Item "hashobject example #1"
.Vb 1
\&  # package HashExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Hash\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqHashExample\*(Aq;
.Ve
.SS "immutable"
.IX Subsection "immutable"
.Vb 1
\&  Immutable
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "immutable parent" 4
.IX Item "immutable parent"
.Vb 1
\&  Object
.Ve
.IP "immutable composition" 4
.IX Item "immutable composition"
.Vb 1
\&  ConsumerOf["Data::Object::Role::Immutable"]
.Ve
.IP "immutable example #1" 4
.IX Item "immutable example #1"
.Vb 1
\&  # package ImmutableExample;
\&
\&  # use Data::Object::Class;
\&
\&  # with \*(AqData::Object::Role::Immutable\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqImmutableExample\*(Aq;
.Ve
.SS "numobj"
.IX Subsection "numobj"
.Vb 1
\&  NumObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "numobj parent" 4
.IX Item "numobj parent"
.Vb 1
\&  Object
.Ve
.IP "numobj composition" 4
.IX Item "numobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Number"]
.Ve
.IP "numobj coercion #1" 4
.IX Item "numobj coercion #1"
.Vb 1
\&  # coerce from LaxNum
\&
\&  123
.Ve
.IP "numobj coercion #2" 4
.IX Item "numobj coercion #2"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aq123\*(Aq
.Ve
.IP "numobj coercion #3" 4
.IX Item "numobj coercion #3"
.Vb 1
\&  # coerce from Int
\&
\&  99999
.Ve
.IP "numobj coercion #4" 4
.IX Item "numobj coercion #4"
.Vb 1
\&  # coerce from Num
\&
\&  123
.Ve
.IP "numobj coercion #5" 4
.IX Item "numobj coercion #5"
.Vb 1
\&  # coerce from StrictNum
\&
\&  123
.Ve
.IP "numobj example #1" 4
.IX Item "numobj example #1"
.Vb 1
\&  # package NumberExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Number\*(Aq;
\&
\&  package main;
\&
\&  my $num = 123;
\&
\&  bless \e$num, \*(AqNumberExample\*(Aq;
.Ve
.SS "numobject"
.IX Subsection "numobject"
.Vb 1
\&  NumObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "numobject parent" 4
.IX Item "numobject parent"
.Vb 1
\&  Object
.Ve
.IP "numobject composition" 4
.IX Item "numobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Number"]
.Ve
.IP "numobject coercion #1" 4
.IX Item "numobject coercion #1"
.Vb 1
\&  # coerce from Num
\&
\&  123
.Ve
.IP "numobject coercion #2" 4
.IX Item "numobject coercion #2"
.Vb 1
\&  # coerce from StrictNum
\&
\&  123
.Ve
.IP "numobject coercion #3" 4
.IX Item "numobject coercion #3"
.Vb 1
\&  # coerce from Int
\&
\&  99999
.Ve
.IP "numobject coercion #4" 4
.IX Item "numobject coercion #4"
.Vb 1
\&  # coerce from LaxNum
\&
\&  123
.Ve
.IP "numobject coercion #5" 4
.IX Item "numobject coercion #5"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aq123\*(Aq
.Ve
.IP "numobject example #1" 4
.IX Item "numobject example #1"
.Vb 1
\&  # package NumberExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Number\*(Aq;
\&
\&  package main;
\&
\&  my $num = 123;
\&
\&  bless \e$num, \*(AqNumberExample\*(Aq;
.Ve
.SS "numberobj"
.IX Subsection "numberobj"
.Vb 1
\&  NumberObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "numberobj parent" 4
.IX Item "numberobj parent"
.Vb 1
\&  Object
.Ve
.IP "numberobj composition" 4
.IX Item "numberobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Number"]
.Ve
.IP "numberobj coercion #1" 4
.IX Item "numberobj coercion #1"
.Vb 1
\&  # coerce from Int
\&
\&  99999
.Ve
.IP "numberobj coercion #2" 4
.IX Item "numberobj coercion #2"
.Vb 1
\&  # coerce from StrictNum
\&
\&  123
.Ve
.IP "numberobj coercion #3" 4
.IX Item "numberobj coercion #3"
.Vb 1
\&  # coerce from Num
\&
\&  123
.Ve
.IP "numberobj coercion #4" 4
.IX Item "numberobj coercion #4"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aq123\*(Aq
.Ve
.IP "numberobj coercion #5" 4
.IX Item "numberobj coercion #5"
.Vb 1
\&  # coerce from LaxNum
\&
\&  123
.Ve
.IP "numberobj example #1" 4
.IX Item "numberobj example #1"
.Vb 1
\&  # package NumberExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Number\*(Aq;
\&
\&  package main;
\&
\&  my $num = 123;
\&
\&  bless \e$num, \*(AqNumberExample\*(Aq;
.Ve
.SS "numberobject"
.IX Subsection "numberobject"
.Vb 1
\&  NumberObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "numberobject parent" 4
.IX Item "numberobject parent"
.Vb 1
\&  Object
.Ve
.IP "numberobject composition" 4
.IX Item "numberobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Number"]
.Ve
.IP "numberobject coercion #1" 4
.IX Item "numberobject coercion #1"
.Vb 1
\&  # coerce from Int
\&
\&  99999
.Ve
.IP "numberobject coercion #2" 4
.IX Item "numberobject coercion #2"
.Vb 1
\&  # coerce from StrictNum
\&
\&  123
.Ve
.IP "numberobject coercion #3" 4
.IX Item "numberobject coercion #3"
.Vb 1
\&  # coerce from Num
\&
\&  123
.Ve
.IP "numberobject coercion #4" 4
.IX Item "numberobject coercion #4"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aq123\*(Aq
.Ve
.IP "numberobject coercion #5" 4
.IX Item "numberobject coercion #5"
.Vb 1
\&  # coerce from LaxNum
\&
\&  123
.Ve
.IP "numberobject example #1" 4
.IX Item "numberobject example #1"
.Vb 1
\&  # package NumberExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Number\*(Aq;
\&
\&  package main;
\&
\&  my $num = 123;
\&
\&  bless \e$num, \*(AqNumberExample\*(Aq;
.Ve
.SS "optsobj"
.IX Subsection "optsobj"
.Vb 1
\&  OptsObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "optsobj parent" 4
.IX Item "optsobj parent"
.Vb 1
\&  Object
.Ve
.IP "optsobj composition" 4
.IX Item "optsobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Opts"]
.Ve
.IP "optsobj example #1" 4
.IX Item "optsobj example #1"
.Vb 1
\&  # package OptsExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Opts\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqOptsExample\*(Aq;
.Ve
.SS "optsobject"
.IX Subsection "optsobject"
.Vb 1
\&  OptsObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "optsobject parent" 4
.IX Item "optsobject parent"
.Vb 1
\&  Object
.Ve
.IP "optsobject composition" 4
.IX Item "optsobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Opts"]
.Ve
.IP "optsobject example #1" 4
.IX Item "optsobject example #1"
.Vb 1
\&  # package OptsExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Opts\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqOptsExample\*(Aq;
.Ve
.SS "regexpobj"
.IX Subsection "regexpobj"
.Vb 1
\&  RegexpObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "regexpobj parent" 4
.IX Item "regexpobj parent"
.Vb 1
\&  Object
.Ve
.IP "regexpobj composition" 4
.IX Item "regexpobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Regexp"]
.Ve
.IP "regexpobj coercion #1" 4
.IX Item "regexpobj coercion #1"
.Vb 1
\&  # coerce from RegexpRef
\&
\&  qr//
.Ve
.IP "regexpobj example #1" 4
.IX Item "regexpobj example #1"
.Vb 1
\&  # package RegexpExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Regexp\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqRegexpExample\*(Aq;
.Ve
.SS "regexpobject"
.IX Subsection "regexpobject"
.Vb 1
\&  RegexpObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "regexpobject parent" 4
.IX Item "regexpobject parent"
.Vb 1
\&  Object
.Ve
.IP "regexpobject composition" 4
.IX Item "regexpobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Regexp"]
.Ve
.IP "regexpobject coercion #1" 4
.IX Item "regexpobject coercion #1"
.Vb 1
\&  # coerce from RegexpRef
\&
\&  qr//
.Ve
.IP "regexpobject example #1" 4
.IX Item "regexpobject example #1"
.Vb 1
\&  # package RegexpExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Regexp\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqRegexpExample\*(Aq;
.Ve
.SS "replaceobj"
.IX Subsection "replaceobj"
.Vb 1
\&  ReplaceObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "replaceobj parent" 4
.IX Item "replaceobj parent"
.Vb 1
\&  Object
.Ve
.IP "replaceobj composition" 4
.IX Item "replaceobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Replace"]
.Ve
.IP "replaceobj example #1" 4
.IX Item "replaceobj example #1"
.Vb 1
\&  # package ReplaceExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Replace\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqReplaceExample\*(Aq;
.Ve
.SS "replaceobject"
.IX Subsection "replaceobject"
.Vb 1
\&  ReplaceObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "replaceobject parent" 4
.IX Item "replaceobject parent"
.Vb 1
\&  Object
.Ve
.IP "replaceobject composition" 4
.IX Item "replaceobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Replace"]
.Ve
.IP "replaceobject example #1" 4
.IX Item "replaceobject example #1"
.Vb 1
\&  # package ReplaceExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Replace\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqReplaceExample\*(Aq;
.Ve
.SS "scalarobj"
.IX Subsection "scalarobj"
.Vb 1
\&  ScalarObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "scalarobj parent" 4
.IX Item "scalarobj parent"
.Vb 1
\&  Object
.Ve
.IP "scalarobj composition" 4
.IX Item "scalarobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Scalar"]
.Ve
.IP "scalarobj coercion #1" 4
.IX Item "scalarobj coercion #1"
.Vb 1
\&  # coerce from ScalarRef
\&
\&  do { my $i = 0; \e$i }
.Ve
.IP "scalarobj example #1" 4
.IX Item "scalarobj example #1"
.Vb 1
\&  # package ScalarExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Scalar\*(Aq;
\&
\&  package main;
\&
\&  my $scalar = \*(Aqabc\*(Aq;
\&
\&  bless \e$scalar, \*(AqScalarExample\*(Aq;
.Ve
.SS "scalarobject"
.IX Subsection "scalarobject"
.Vb 1
\&  ScalarObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "scalarobject parent" 4
.IX Item "scalarobject parent"
.Vb 1
\&  Object
.Ve
.IP "scalarobject composition" 4
.IX Item "scalarobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Scalar"]
.Ve
.IP "scalarobject coercion #1" 4
.IX Item "scalarobject coercion #1"
.Vb 1
\&  # coerce from ScalarRef
\&
\&  do { my $i = 0; \e$i }
.Ve
.IP "scalarobject example #1" 4
.IX Item "scalarobject example #1"
.Vb 1
\&  # package ScalarExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Scalar\*(Aq;
\&
\&  package main;
\&
\&  my $scalar = \*(Aqabc\*(Aq;
\&
\&  bless \e$scalar, \*(AqScalarExample\*(Aq;
.Ve
.SS "searchobj"
.IX Subsection "searchobj"
.Vb 1
\&  SearchObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "searchobj parent" 4
.IX Item "searchobj parent"
.Vb 1
\&  Object
.Ve
.IP "searchobj composition" 4
.IX Item "searchobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Search"]
.Ve
.IP "searchobj example #1" 4
.IX Item "searchobj example #1"
.Vb 1
\&  # package SearchExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Search\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqSearchExample\*(Aq;
.Ve
.SS "searchobject"
.IX Subsection "searchobject"
.Vb 1
\&  SearchObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "searchobject parent" 4
.IX Item "searchobject parent"
.Vb 1
\&  Object
.Ve
.IP "searchobject composition" 4
.IX Item "searchobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Search"]
.Ve
.IP "searchobject example #1" 4
.IX Item "searchobject example #1"
.Vb 1
\&  # package SearchExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Search\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqSearchExample\*(Aq;
.Ve
.SS "spaceobj"
.IX Subsection "spaceobj"
.Vb 1
\&  SpaceObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "spaceobj parent" 4
.IX Item "spaceobj parent"
.Vb 1
\&  Object
.Ve
.IP "spaceobj composition" 4
.IX Item "spaceobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Space"]
.Ve
.IP "spaceobj coercion #1" 4
.IX Item "spaceobj coercion #1"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aqabc\*(Aq
.Ve
.IP "spaceobj example #1" 4
.IX Item "spaceobj example #1"
.Vb 1
\&  # package SpaceExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Space\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqSpaceExample\*(Aq;
.Ve
.SS "spaceobject"
.IX Subsection "spaceobject"
.Vb 1
\&  SpaceObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "spaceobject parent" 4
.IX Item "spaceobject parent"
.Vb 1
\&  Object
.Ve
.IP "spaceobject composition" 4
.IX Item "spaceobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Space"]
.Ve
.IP "spaceobject coercion #1" 4
.IX Item "spaceobject coercion #1"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aqabc\*(Aq
.Ve
.IP "spaceobject example #1" 4
.IX Item "spaceobject example #1"
.Vb 1
\&  # package SpaceExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Space\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqSpaceExample\*(Aq;
.Ve
.SS "stashable"
.IX Subsection "stashable"
.Vb 1
\&  Stashable
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "stashable parent" 4
.IX Item "stashable parent"
.Vb 1
\&  Object
.Ve
.IP "stashable composition" 4
.IX Item "stashable composition"
.Vb 1
\&  ConsumerOf["Data::Object::Role::Stashable"]
.Ve
.IP "stashable example #1" 4
.IX Item "stashable example #1"
.Vb 1
\&  # package StashableExample;
\&
\&  # use Data::Object::Class;
\&
\&  # with \*(AqData::Object::Role::Stashable\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqStashableExample\*(Aq;
.Ve
.SS "stateobj"
.IX Subsection "stateobj"
.Vb 1
\&  StateObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "stateobj parent" 4
.IX Item "stateobj parent"
.Vb 1
\&  Object
.Ve
.IP "stateobj composition" 4
.IX Item "stateobj composition"
.Vb 1
\&  InstanceOf["Data::Object::State"]
.Ve
.IP "stateobj example #1" 4
.IX Item "stateobj example #1"
.Vb 1
\&  # package StateExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::State\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqStateExample\*(Aq;
.Ve
.SS "stateobject"
.IX Subsection "stateobject"
.Vb 1
\&  StateObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "stateobject parent" 4
.IX Item "stateobject parent"
.Vb 1
\&  Object
.Ve
.IP "stateobject composition" 4
.IX Item "stateobject composition"
.Vb 1
\&  InstanceOf["Data::Object::State"]
.Ve
.IP "stateobject example #1" 4
.IX Item "stateobject example #1"
.Vb 1
\&  # package StateExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::State\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqStateExample\*(Aq;
.Ve
.SS "strobj"
.IX Subsection "strobj"
.Vb 1
\&  StrObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "strobj parent" 4
.IX Item "strobj parent"
.Vb 1
\&  Object
.Ve
.IP "strobj composition" 4
.IX Item "strobj composition"
.Vb 1
\&  InstanceOf["Data::Object::String"]
.Ve
.IP "strobj coercion #1" 4
.IX Item "strobj coercion #1"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aqabc\*(Aq
.Ve
.IP "strobj example #1" 4
.IX Item "strobj example #1"
.Vb 1
\&  # package StringExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::String\*(Aq;
\&
\&  package main;
\&
\&  my $string = \*(Aqabc\*(Aq;
\&
\&  bless \e$string, \*(AqStringExample\*(Aq;
.Ve
.SS "strobject"
.IX Subsection "strobject"
.Vb 1
\&  StrObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "strobject parent" 4
.IX Item "strobject parent"
.Vb 1
\&  Object
.Ve
.IP "strobject composition" 4
.IX Item "strobject composition"
.Vb 1
\&  InstanceOf["Data::Object::String"]
.Ve
.IP "strobject coercion #1" 4
.IX Item "strobject coercion #1"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aqabc\*(Aq
.Ve
.IP "strobject example #1" 4
.IX Item "strobject example #1"
.Vb 1
\&  # package StringExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::String\*(Aq;
\&
\&  package main;
\&
\&  my $string = \*(Aqabc\*(Aq;
\&
\&  bless \e$string, \*(AqStringExample\*(Aq;
.Ve
.SS "stringobj"
.IX Subsection "stringobj"
.Vb 1
\&  StringObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "stringobj parent" 4
.IX Item "stringobj parent"
.Vb 1
\&  Object
.Ve
.IP "stringobj composition" 4
.IX Item "stringobj composition"
.Vb 1
\&  InstanceOf["Data::Object::String"]
.Ve
.IP "stringobj coercion #1" 4
.IX Item "stringobj coercion #1"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aqabc\*(Aq
.Ve
.IP "stringobj example #1" 4
.IX Item "stringobj example #1"
.Vb 1
\&  # package StringExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::String\*(Aq;
\&
\&  package main;
\&
\&  my $string = \*(Aqabc\*(Aq;
\&
\&  bless \e$string, \*(AqStringExample\*(Aq;
.Ve
.SS "stringobject"
.IX Subsection "stringobject"
.Vb 1
\&  StringObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "stringobject parent" 4
.IX Item "stringobject parent"
.Vb 1
\&  Object
.Ve
.IP "stringobject composition" 4
.IX Item "stringobject composition"
.Vb 1
\&  InstanceOf["Data::Object::String"]
.Ve
.IP "stringobject coercion #1" 4
.IX Item "stringobject coercion #1"
.Vb 1
\&  # coerce from Str
\&
\&  \*(Aqabc\*(Aq
.Ve
.IP "stringobject example #1" 4
.IX Item "stringobject example #1"
.Vb 1
\&  # package StringExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::String\*(Aq;
\&
\&  package main;
\&
\&  my $string = \*(Aqabc\*(Aq;
\&
\&  bless \e$string, \*(AqStringExample\*(Aq;
.Ve
.SS "structobj"
.IX Subsection "structobj"
.Vb 1
\&  StructObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "structobj parent" 4
.IX Item "structobj parent"
.Vb 1
\&  Object
.Ve
.IP "structobj composition" 4
.IX Item "structobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Struct"]
.Ve
.IP "structobj example #1" 4
.IX Item "structobj example #1"
.Vb 1
\&  # package StructExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Struct\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqStructExample\*(Aq;
.Ve
.SS "structobject"
.IX Subsection "structobject"
.Vb 1
\&  StructObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "structobject parent" 4
.IX Item "structobject parent"
.Vb 1
\&  Object
.Ve
.IP "structobject composition" 4
.IX Item "structobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Struct"]
.Ve
.IP "structobject example #1" 4
.IX Item "structobject example #1"
.Vb 1
\&  # package StructExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Struct\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqStructExample\*(Aq;
.Ve
.SS "throwable"
.IX Subsection "throwable"
.Vb 1
\&  Throwable
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "throwable parent" 4
.IX Item "throwable parent"
.Vb 1
\&  Object
.Ve
.IP "throwable composition" 4
.IX Item "throwable composition"
.Vb 1
\&  ConsumerOf["Data::Object::Role::Throwable"]
.Ve
.IP "throwable example #1" 4
.IX Item "throwable example #1"
.Vb 1
\&  # package ThrowableExample;
\&
\&  # use Data::Object::Class;
\&
\&  # with \*(AqData::Object::Role::Throwable\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqThrowableExample\*(Aq;
.Ve
.SS "undefobj"
.IX Subsection "undefobj"
.Vb 1
\&  UndefObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "undefobj parent" 4
.IX Item "undefobj parent"
.Vb 1
\&  Object
.Ve
.IP "undefobj composition" 4
.IX Item "undefobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Undef"]
.Ve
.IP "undefobj coercion #1" 4
.IX Item "undefobj coercion #1"
.Vb 1
\&  # coerce from Undef
\&
\&  undef
.Ve
.IP "undefobj example #1" 4
.IX Item "undefobj example #1"
.Vb 1
\&  # package UndefExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Undef\*(Aq;
\&
\&  package main;
\&
\&  my $undef = undef;
\&
\&  bless \e$undef, \*(AqUndefExample\*(Aq;
.Ve
.SS "undefobject"
.IX Subsection "undefobject"
.Vb 1
\&  UndefObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "undefobject parent" 4
.IX Item "undefobject parent"
.Vb 1
\&  Object
.Ve
.IP "undefobject composition" 4
.IX Item "undefobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Undef"]
.Ve
.IP "undefobject coercion #1" 4
.IX Item "undefobject coercion #1"
.Vb 1
\&  # coerce from Undef
\&
\&  undef
.Ve
.IP "undefobject example #1" 4
.IX Item "undefobject example #1"
.Vb 1
\&  # package UndefExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Undef\*(Aq;
\&
\&  package main;
\&
\&  my $undef = undef;
\&
\&  bless \e$undef, \*(AqUndefExample\*(Aq;
.Ve
.SS "varsobj"
.IX Subsection "varsobj"
.Vb 1
\&  VarsObj
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "varsobj parent" 4
.IX Item "varsobj parent"
.Vb 1
\&  Object
.Ve
.IP "varsobj composition" 4
.IX Item "varsobj composition"
.Vb 1
\&  InstanceOf["Data::Object::Vars"]
.Ve
.IP "varsobj example #1" 4
.IX Item "varsobj example #1"
.Vb 1
\&  # package VarsExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Vars\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqVarsExample\*(Aq;
.Ve
.SS "varsobject"
.IX Subsection "varsobject"
.Vb 1
\&  VarsObject
.Ve
.PP
This type is defined in the Data::Object::Types library.
.IP "varsobject parent" 4
.IX Item "varsobject parent"
.Vb 1
\&  Object
.Ve
.IP "varsobject composition" 4
.IX Item "varsobject composition"
.Vb 1
\&  InstanceOf["Data::Object::Vars"]
.Ve
.IP "varsobject example #1" 4
.IX Item "varsobject example #1"
.Vb 1
\&  # package VarsExample;
\&
\&  # use Data::Object::Class;
\&
\&  # extends \*(AqData::Object::Vars\*(Aq;
\&
\&  package main;
\&
\&  bless {}, \*(AqVarsExample\*(Aq;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/data-object-types/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/data-object-types/wiki>
.PP
Project <https://github.com/iamalnewkirk/data-object-types>
.PP
Initiatives <https://github.com/iamalnewkirk/data-object-types/projects>
.PP
Milestones <https://github.com/iamalnewkirk/data-object-types/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/data-object-types/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/data-object-types/issues>
