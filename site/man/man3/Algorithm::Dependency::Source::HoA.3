.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Algorithm::Dependency::Source::HoA 3"
.TH Algorithm::Dependency::Source::HoA 3 "2020-04-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Algorithm::Dependency::Source::HoA \- Source for a HASH of ARRAYs
.SH "VERSION"
.IX Header "VERSION"
version 1.112
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  # The basic data structure
\&  my $deps = {
\&      foo => [ \*(Aqbar\*(Aq, \*(Aqbaz\*(Aq ],
\&      bar => [],
\&      baz => [ \*(Aqbar\*(Aq ],
\&      };
\&  
\&  # Create the source from it
\&  my $Source = Algorithm::Dependency::Source::HoA\->new( $deps );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Algorithm::Dependency::Source::HoA\*(C'\fR implements a
source where the items names are provided
in the most simple form, a reference to a \f(CW\*(C`HASH\*(C'\fR of \f(CW\*(C`ARRAY\*(C'\fR references.
.SH "METHODS"
.IX Header "METHODS"
This documents the methods differing from the ordinary
Algorithm::Dependency::Source methods.
.ie n .SS "new $filename"
.el .SS "new \f(CW$filename\fP"
.IX Subsection "new $filename"
When constructing a new \f(CW\*(C`Algorithm::Dependency::Source::HoA\*(C'\fR object, an
argument should be provided of a reference to a \s-1HASH\s0 of \s-1ARRAY\s0 references,
containing the names of other \s-1HASH\s0 elements.
.PP
Returns the object, or \f(CW\*(C`undef\*(C'\fR if the structure is not correct.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Algorithm::Dependency, Algorithm::Dependency::Source
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through the \s-1RT\s0 bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=Algorithm-Dependency>
(or bug\-Algorithm\-Dependency@rt.cpan.org <mailto:bug-Algorithm-Dependency@rt.cpan.org>).
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2003 by Adam Kennedy.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
