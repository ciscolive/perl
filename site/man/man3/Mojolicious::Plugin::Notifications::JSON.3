.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Notifications::JSON 3"
.TH Mojolicious::Plugin::Notifications::JSON 3 "2018-06-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Notifications::JSON \- Event Notifications in JSON
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  # Register the engine
\&  plugin Notifications => {
\&    JSON => 1
\&  };
\&
\&  # In the controller
\&  $c\->render(json => $c\->notifications(json => $json));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This plugin is a simple notification engine for \s-1JSON.\s0
.PP
If it does not suit your needs, you can easily
write your own engine.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::Notifications::JSON inherits all methods
from Mojolicious::Plugin::Notifications::Engine and implements
the following new one.
.SS "register"
.IX Subsection "register"
.Vb 5
\&  plugin Notifications => {
\&    JSON => {
\&      key => \*(Aqnotes\*(Aq
\&    }
\&  };
.Ve
.PP
Called when registering the main plugin.
All parameters under the key \f(CW\*(C`JSON\*(C'\fR are passed to the registration.
.PP
Accepts the following parameters:
.IP "\fBkey\fR" 4
.IX Item "key"
Define the attribute name of the notification array.
Defaults to \f(CW\*(C`notifications\*(C'\fR.
.SH "HELPERS"
.IX Header "HELPERS"
.SS "notify"
.IX Subsection "notify"
.Vb 2
\&  $c\->notify(warn => \*(Aqwrong\*(Aq);
\&  $c\->notify(confirm => { ok => \*(Aq/ok\*(Aq, cancel => \*(Aq/cancel\*(Aq } => \*(AqPlease, confirm!\*(Aq);
\&
\&  $c\->render(json => $c\->notifications(json => { text => \*(Aqhtml\*(Aq }));
\&  # {
\&  #   "notifications":[
\&  #     ["warn", "wrong"],
\&  #     [
\&  #       "confirm",
\&  #       "Please, confirm!",
\&  #       {
\&  #         "cancel":{
\&  #           "method":"POST",
\&  #           "url":"\e/cancel"
\&  #         },
\&  #         "ok":{
\&  #           "method":"POST",
\&  #           "url":"\e/ok"
\&  #         }
\&  #       }
\&  #     ]
\&  #   ],
\&  #   "text":"example"
\&  # }
.Ve
.PP
See the base notify helper.
.PP
In case an \f(CW\*(C`ok\*(C'\fR, \f(CW\*(C`cancel\*(C'\fR or \f(CW\*(C`confirm\*(C'\fR parameter is passed,
this will add an object containing confirmation and/or cancellation paths.
The \f(CW\*(C`confirm\*(C'\fR \s-1URL\s0 should point to an (\s-1HTML\s0) endpoint a user
can enter confirmation details. If it is given, both the \f(CW\*(C`ok\*(C'\fR and \f(CW\*(C`cancel\*(C'\fR
parameters will be ignored.
In case an \f(CW\*(C`ok_label\*(C'\fR is passed, this will be the key for the
confirmation object.
In case a \f(CW\*(C`cancel_label\*(C'\fR is passed, this will be the key
for the cancelation object.
In case a \f(CW\*(C`confirm_label\*(C'\fR is passed, this will be the key
for the confirmation object.
.PP
Confirmation routes for \s-1JSON\s0 do not support \s-1CSRF\s0 protection.
.PP
\&\fBConfirmation is \s-1EXPERIMENTAL\s0!\fR
.SS "notifications"
.IX Subsection "notifications"
.Vb 2
\&  $c\->render(json => $c\->notifications(json => $json));
\&  $c\->render(json => $c\->notifications(json => $json, key => \*(Aqnotes\*(Aq));
.Ve
.PP
Merge notifications into your \s-1JSON\s0 response.
.PP
In case \s-1JSON\s0 is an object, it will inject an attribute
that points to an array reference containing the notifications.
If the \s-1JSON\s0 is an array, an object is appended with one attribute
that points to an array reference containing the notifications.
If the \s-1JSON\s0 is empty, an object will be created with one attribute
that points to an array reference containing the notifications.
.PP
If the \s-1JSON\s0 is not of one of the descripted types, it's returned
unaltered.
.PP
The name of the attribute can either be given on registration or
by passing a parameter for \f(CW\*(C`key\*(C'\fR.
The name defaults to \f(CW\*(C`notifications\*(C'\fR.
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
.Vb 1
\&  https://github.com/Akron/Mojolicious\-Plugin\-Notifications
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2014\-2018, Nils Diewald <http://nils-diewald.de/>.
.PP
This program is free software, you can redistribute it
and/or modify it under the terms of the Artistic License version 2.0.
