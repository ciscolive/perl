.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Log::Shiras::Report::CSVFile 3"
.TH Log::Shiras::Report::CSVFile 3 "2016-10-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Shiras::Report::CSVFile \- A report base for csv files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        use Modern::Perl;
\&        #~ use Log::Shiras::Unhide qw( :InternalReporTCSV );
\&        use Log::Shiras::Switchboard;
\&        use Log::Shiras::Telephone;
\&        use Log::Shiras::Report;
\&        use Log::Shiras::Report::CSVFile;
\&        use Log::Shiras::Report::Stdout;
\&        $ENV{hide_warn} = 1;
\&        $| = 1;
\&        my      $operator = Log::Shiras::Switchboard\->get_operator(
\&                        name_space_bounds =>{
\&                                UNBLOCK =>{
\&                                        to_file => \*(Aqinfo\*(Aq,# for info and more urgent messages
\&                                },
\&                        },
\&                        reports =>{
\&                                to_file =>[{
\&                                        superclasses =>[ \*(AqLog::Shiras::Report::CSVFile\*(Aq ],
\&                                        roles =>[ \*(AqLog::Shiras::Report\*(Aq ],# checks inputs and class requirements
\&                                        file => \*(Aqtest.csv\*(Aq,
\&                                }],
\&                        }
\&                );
\&        my      $telephone = Log::Shiras::Telephone\->new( report => \*(Aqto_file\*(Aq );
\&                $telephone\->talk( level => \*(Aqinfo\*(Aq, message => \*(AqA new line\*(Aq );
\&                $telephone\->talk( level => \*(Aqtrace\*(Aq, message => \*(AqA second line\*(Aq );
\&                $telephone\->talk( level => \*(Aqwarn\*(Aq, message =>[ {
\&                        header_0 => \*(AqA third line\*(Aq,
\&                        new_header => \*(Aqnew header starts here\*(Aq } ] );
\&        
\&        #######################################################################################
\&        # Synopsis file (test.csv) output
\&        # 01: header_0
\&        # 02: "A new line"
\&        # 03: "A third line"
\&        #######################################################################################
\&        
\&        #######################################################################################
\&        # Synopsis file (test.csv) output with line 24 commented out
\&        # 01: header_0,new_header
\&        # 02: "A third line","new header starts here"
\&        #######################################################################################
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a report module that can act as a destination in the 
\&\*(L"reports\*(R" in Log::Shiras::Switchboard name-space.  It is meant to be fairly flexible and 
will have most of the needed elements in the class without added roles.  An instance
of the class can be built either with \->new or using the implied 
MooseX::ShortCut::BuildInstance helpers. (See lines 18 \- 20 in the example)  When the 
report is set up any call to that report namespace will then implement the add_line
 method of this class.
.PP
As implied in the Synopsis one of the features of this class is the fact that it will try to 
reconcile the headers to inbound data and header requests.  This class will attempt to 
reconcile any deviation between the first passed row and the header.  Subsequent added 
rows using a passed array ref will add all values without warning whether the count matches 
the header count or not.  Subsequent added rows using a passed hashref will only used the 
headers in the fixed header list but will warn for any passed headers not matching 
the header list.
.PP
This class will attempt to obtain an exclusive lock on the file.  If the file is previously 
locked it will wait.  That will allow you to attach more than one report script to the same 
file name and not overwrite lines.  On the other hand this does have the potential to create 
scripts that appear to be hung.
.SS "Warning"
.IX Subsection "Warning"
This class will always use the header list when adding new hash values.  As a consequence 
there can be no duplicates in the header list after it is coereced to this files requirements.  
Since the class allows for mixed passing of array refs and hash refs it also has the 
no duplicate header requirement with array ref handling too.
.SS "Attributes"
.IX Subsection "Attributes"
Data passed to \->new when creating an instance.  For modification of these attributes 
after the instance is created see the attribute methods.
.PP
\fIfile\fR
.IX Subsection "file"
.Sp
.RS 4
\&\fBDefinition:\fR This is the file name to be used by the .csv file.  This should include the 
full file path.  If the file does not exist then the file will be created.
.Sp
\&\fBDefault:\fR None
.Sp
\&\fBRequired:\fR Yes
.Sp
\&\fBRange:\fR it must have a .csv extention and can be opened
.Sp
\&\fBattribute methods\fR
.Sp
.RS 4
\&\fBset_file_name( \f(CB$file_name\fB )\fR
.Sp
.RS 4
\&\fBDescription\fR used to set the attribute
.RE
.RE
.RS 4
.Sp
\&\fBget_file_name\fR
.Sp
.RS 4
\&\fBDescription\fR used to return the current attribute value
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fIheaders\fR
.IX Subsection "headers"
.Sp
.RS 4
\&\fBDefinition:\fR This an array ref of the requested headers in the file. Each of the headers 
must match header string requirements.  The header strings will be coerced as needed buy forcing 
then lower case and removing any newlines.
.Sp
\&\fBDefault:\fR None
.Sp
\&\fBRequired:\fR No
.Sp
\&\fBRange:\fR An array ref of strings starting with a lower case letter and containing letters, 
underscores, and numbers
.Sp
\&\fBattribute methods\fR
.Sp
.RS 4
\&\fBset_headers( \f(CB$array_ref\fB )\fR
.Sp
.RS 4
\&\fBDescription\fR used to set all the attribute at once
.RE
.RE
.RS 4
.Sp
\&\fBget_headers\fR
.Sp
.RS 4
\&\fBDescription\fR used to return all the attribute at once
.RE
.RE
.RS 4
.Sp
\&\fBhas_headers\fR
.Sp
.RS 4
\&\fBDescription\fR predicate for the whole attribute
.RE
.RE
.RS 4
.Sp
\&\fBnumber_of_headers\fR
.Sp
.RS 4
\&\fBDescription\fR Returns the complete header count list
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fIreconcile_headers\fR
.IX Subsection "reconcile_headers"
.Sp
.RS 4
\&\fBDefinition:\fR It may be that when you open a file the file already has headers.  This 
attribute determines if the action or requested headers are merged with the 
file headers.  In the merge the file headers are given order precedence so new requested 
headers wind up at the end even when that means the requested headers are added out of 
order to the original request!
.Sp
\&\fBDefault:\fR 1 = the headers will be reconciled
.Sp
\&\fBRange:\fR Boolean
.Sp
\&\fBattribute methods\fR
.Sp
.RS 4
\&\fBset_reconcile_headers( \f(CB$bool\fB )\fR
.Sp
.RS 4
\&\fBDescription\fR used to set the attribute
.RE
.RE
.RS 4
.Sp
\&\fBshould_reconcile_headers\fR
.Sp
.RS 4
\&\fBDescription\fR used to return the current attribute value
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fItest_first_row\fR
.IX Subsection "test_first_row"
.Sp
.RS 4
\&\fBDefinition:\fR It may be that when you send the first row after instance instantiation 
that the row and the headers don't agree.  This will update the requested headers (
and maybe the file headers) with any variation between the two.  
In the case of a passed array ref no header change is implemented but a warning is 
emitted when the passed list and the header list don't have the same count.  For 
passed hash refs new headers are added to the end of the requested headers.  After 
the first line no warning is emitted for passed array refs that don't match and 
new hash keys (and their values) that don't match the header will just be left off 
the report.  New hash keys for the first row will be added in a random order.
.Sp
\&\fBDefault:\fR 1 = the first row will attempt reconciliation
.Sp
\&\fBRange:\fR Boolean
.Sp
\&\fBattribute methods\fR
.Sp
.RS 4
\&\fBshould_test_first_row\fR
.Sp
.RS 4
\&\fBDescription\fR used to return the current attribute value
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.SS "Methods"
.IX Subsection "Methods"
\fInew( \f(CI%args\fI )\fR
.IX Subsection "new( %args )"
.Sp
.RS 4
\&\fBDefinition:\fR This creates a new instance of the CSVFile report
 class.
.Sp
\&\fBRange:\fR It will accept any or none of the Attributes
.Sp
\&\fBReturns:\fR A report class to be stored in the switchboard.
.RE
.PP
\fIadd_line( \f(CI$message_ref\fI )\fR
.IX Subsection "add_line( $message_ref )"
.Sp
.RS 4
\&\fBDefinition:\fR This is the method called by the switchboard to add lines to the report.  It will 
expect a message compatible with \*(L"master_talk( \f(CW$args_ref\fR )\*(R" in Log::Shiras::Switchboard.  There is 
some flexibility in the consumption of the value within the 'message' key.  This package will 
check if there is more than one item and handle it like an elements list. If there is only one 
item and it is a hash ref it will attempt to consume the hashref as having keys matching the 
columns.  Other single elements will be consumed as sub-elements of an element list.
.Sp
\&\fBReturns:\fR 1 (or dies)
.RE
.SH "GLOBAL VARIABLES"
.IX Header "GLOBAL VARIABLES"
.IP "\fB\f(CB$ENV\fB{hide_warn}\fR" 4
.IX Item "$ENV{hide_warn}"
The module will warn when debug lines are 'Unhide'n.  In the case where the you 
don't want these notifications set this environmental variable to true.
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
Log\-Shiras/issues <https://github.com/jandrew/Log-Shiras/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing currently
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
perl 5.010
.Sp
utf8
.Sp
version
.Sp
Moose
.Sp
MooseX::StrictConstructor
.Sp
MooseX::HasDefaults::RO
.Sp
MooseX::Types::Moose
.Sp
Text::CSV_XS
.Sp
File::Copy \- copy
.Sp
File::Temp
.Sp
Carp \- confess cluck
.Sp
Fcntl \- :flock \s-1LOCK_EX LOCK_UN SEEK_END\s0
.RE
