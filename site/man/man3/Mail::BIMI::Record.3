.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::BIMI::Record 3"
.TH Mail::BIMI::Record 3 "2020-09-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::BIMI::Record \- Class to model a BIMI record
.SH "VERSION"
.IX Header "VERSION"
version 2.20200930.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Class for representing, retrieving, validating, and processing a \s-1BIMI\s0 Record
.SH "INPUTS"
.IX Header "INPUTS"
These values are used as inputs for lookups and verifications, they are typically set by the caller based on values found in the message being processed
.SS "domain"
.IX Subsection "domain"
is=rw required
.PP
Domain the for the record; will become fallback domain if used
.SS "selector"
.IX Subsection "selector"
is=rw
.PP
Selector used to retrieve the record; will become default if fallback was used
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
These values are derived from lookups and verifications made based upon the input values, it is however possible to override these with other values should you wish to, for example, validate a record before it is published in \s-1DNS,\s0 or validate an Indicator which is only available locally
.SS "authority"
.IX Subsection "authority"
is=rw
.PP
Mail::BIMI::Record::Authority object for this record
.SS "cache_backend"
.IX Subsection "cache_backend"
is=ro
.SS "errors"
.IX Subsection "errors"
is=rw
.SS "is_valid"
.IX Subsection "is_valid"
is=rw
.PP
Is this record valid
.SS "location"
.IX Subsection "location"
is=rw
.PP
Mail::BIMI::Record::Location object for this record
.SS "record_hashref"
.IX Subsection "record_hashref"
is=rw
.PP
Hashref of record values
.SS "retrieved_record"
.IX Subsection "retrieved_record"
is=rw
.PP
Record as retrieved
.SS "version"
.IX Subsection "version"
is=rw
.PP
\&\s-1BIMI\s0 Version tag
.SH "CONSUMES"
.IX Header "CONSUMES"
.IP "\(bu" 4
Mail::BIMI::Role::Cacheable
.IP "\(bu" 4
Mail::BIMI::Role::HasError
.IP "\(bu" 4
Mail::BIMI::Role::HasError
.SH "EXTENDS"
.IX Header "EXTENDS"
.IP "\(bu" 4
Mail::BIMI::Base
.SH "METHODS"
.IX Header "METHODS"
.SS "\fI\fP\f(BIcache_valid_for()\fP\fI\fP"
.IX Subsection "cache_valid_for()"
How long should the cache for this class be valid
.SS "\fI\fP\f(BIlocation_is_relevant()\fP\fI\fP"
.IX Subsection "location_is_relevant()"
Return true is the location is relevant to the validation of the record.
.PP
If we don't have a relevant authority, or we are checking \s-1BOTH\s0 authority and location.
.SS "\fI\fP\f(BIfinish()\fP\fI\fP"
.IX Subsection "finish()"
Finish and clean up, write cache if enabled.
.SS "\fI\fP\f(BIapp_validate()\fP\fI\fP"
.IX Subsection "app_validate()"
Output human readable validation status of this object
.SH "REQUIRES"
.IX Header "REQUIRES"
.IP "\(bu" 4
Mail::BIMI::Prelude
.IP "\(bu" 4
Mail::BIMI::Record::Authority
.IP "\(bu" 4
Mail::BIMI::Record::Location
.IP "\(bu" 4
Mail::DMARC::PurePerl
.IP "\(bu" 4
Moose
.IP "\(bu" 4
Term::ANSIColor
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Marc Bradshaw.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
