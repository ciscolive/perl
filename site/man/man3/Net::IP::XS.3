.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::IP::XS 3"
.TH Net::IP::XS 3 "2018-02-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::IP::XS \- IPv4/IPv6 address library
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::IP::XS;
\&
\&  my $ip = new Net::IP::XS (\*(Aq193.0.1/24\*(Aq) or die (Net::IP::XS::Error());
\&  print ("IP  : ".$ip\->ip()."\en");
\&  print ("Sho : ".$ip\->short()."\en");
\&  print ("Bin : ".$ip\->binip()."\en");
\&  print ("Int : ".$ip\->intip()."\en");
\&  print ("Mask: ".$ip\->mask()."\en");
\&  print ("Last: ".$ip\->last_ip()."\en");
\&  print ("Len : ".$ip\->prefixlen()."\en");
\&  print ("Size: ".$ip\->size()."\en");
\&  print ("Type: ".$ip\->iptype()."\en");
\&  print ("Rev:  ".$ip\->reverse_ip()."\en");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An \s-1XS\s0 (C) implementation of Net::IP. See
Net::IP's documentation (as at version 1.25) for the
functions and methods that are available.
.SH "DIFFERENCES BETWEEN NET::IP AND NET::IP::XS"
.IX Header "DIFFERENCES BETWEEN NET::IP AND NET::IP::XS"
.IP "Exports" 4
.IX Item "Exports"
Nothing is exported by default.
.IP "Error messages" 4
.IX Item "Error messages"
In some instances this won't set error codes or messages where
\&\f(CW\*(C`Net::IP\*(C'\fR would, though it should be mostly the same.
.IP "Object-oriented interface" 4
.IX Item "Object-oriented interface"
The object-oriented interface uses function calls and hashref lookups
internally, such that subclassing \f(CW\*(C`Net::IP::XS\*(C'\fR will not have the
same effect as it does with \f(CW\*(C`Net::IP\*(C'\fR.
.IP "ip_auth" 4
.IX Item "ip_auth"
Returns \f(CW\*(C`undef\*(C'\fR on failure, instead of dying.
.IP "ip_binadd" 4
.IX Item "ip_binadd"
Returns \f(CW\*(C`undef\*(C'\fR if either of the bitstring arguments is more than 128
characters in length.
.Sp
Any character of the bitstring that is not a 0 is treated as a 1. The
\&\f(CW\*(C`Net::IP\*(C'\fR version returns different results for different digits, and
treats non-digits as 0.
.IP "ip_bintoint" 4
.IX Item "ip_bintoint"
The integer returned will be at most ((1 << 128) \- 1) (i.e. the
largest possible IPv6 address). \f(CW\*(C`Net::IP\*(C'\fR handles bitstrings of
arbitrary length.
.IP "ip_compress_address" 4
.IX Item "ip_compress_address"
Returns \f(CW\*(C`undef\*(C'\fR if the IPv6 address argument is invalid.
.IP "ip_compress_v4_prefix" 4
.IX Item "ip_compress_v4_prefix"
Returns \f(CW\*(C`undef\*(C'\fR if the \f(CW\*(C`len\*(C'\fR argument is negative or greater than
32.
.IP "ip_expand_address" 4
.IX Item "ip_expand_address"
Does not set \f(CW\*(C`Error\*(C'\fR or \f(CW\*(C`Errno\*(C'\fR where there is a problem with an
embedded IPv4 address within an IPv6 address.
.Sp
Returns the zero \s-1IP\s0 address if the empty string is provided. The
\&\f(CW\*(C`Net::IP\*(C'\fR version returns \f(CW\*(C`undef\*(C'\fR.
.Sp
Returns a full IPv6 address if a partial address is provided (e.g.
returns 'ffff:ffff:0000:0000:0000:0000:0000:0000' if 'ffff:ffff' is
provided).  The \f(CW\*(C`Net::IP\*(C'\fR version returns the partial address.
.Sp
Returns \f(CW\*(C`undef\*(C'\fR on an invalid IPv4/IPv6 address. The \f(CW\*(C`Net::IP\*(C'\fR
version returns the zero address for IPv4 and whatever was provided
for IPv6.
.IP "ip_get_mask" 4
.IX Item "ip_get_mask"
The mask returned will always have a length equal to the number of
bits in an address of the specified \s-1IP\s0 version (e.g. an IPv4 mask will
always comprise 32 characters). The \f(CW\*(C`Net::IP\*(C'\fR version will return a
longer mask when the \f(CW\*(C`len\*(C'\fR argument is larger than the number of bits
in the specified \s-1IP\s0 version.
.Sp
If a negative \f(CW\*(C`len\*(C'\fR is provided, it will be treated as zero.
.IP "ip_inttobin" 4
.IX Item "ip_inttobin"
The bitstring returned will always be either 32 or 128 characters in
length, and it returns \f(CW\*(C`undef\*(C'\fR if the integer argument would require
more than 128 characters to represent as a bitstring. If an invalid
version is provided, the returned bitstring will be 128 characters in
length. The \f(CW\*(C`Net::IP\*(C'\fR version handles arbitrary integers and expands
to accommodate those integers, regardless of the version argument.
Also, if an invalid version is provided, the returned bitstring is
only as long as is necessary to accommodate the bitstring.
.IP "ip_iptobin" 4
.IX Item "ip_iptobin"
Returns \f(CW\*(C`undef\*(C'\fR on an invalid IPv4/IPv6 address.
.IP "ip_last_address_bin" 4
.IX Item "ip_last_address_bin"
Returns an empty string if an invalid version (i.e. not 4 or 6) is
provided. If the bitstring provided is longer than the number of bits
in the specified version, then only the first 32/128 bits will be used
in determining the last address. If the \f(CW\*(C`len\*(C'\fR provided is invalid
(negative or more than 32/128 depending on the version), it will be
treated as the maximum length of the specified version.
.IP "ip_normalize" 4
.IX Item "ip_normalize"
For the 'plus' style of string (e.g. '1.0.0.0 + 255'), whitespace
between the plus character and the parts before and after it is
optional. In the \f(CW\*(C`Net::IP\*(C'\fR version, there has to be some whitespace
before and after the plus character. Also, \f(CW\*(C`undef\*(C'\fR will be returned
if the part after the plus sign is not a number. The \f(CW\*(C`Net::IP\*(C'\fR version
will return two copies of the single address in this instance.
.Sp
For the 'prefix range' style of string (e.g. '1.0.0.0/8'), the part
after the slash must be a number. If it is not, \f(CW\*(C`undef\*(C'\fR will be
returned. The \f(CW\*(C`Net::IP\*(C'\fR version will return two copies of the single
address in this instance.
.IP "ip_range_to_prefix" 4
.IX Item "ip_range_to_prefix"
Returns \f(CW\*(C`undef\*(C'\fR if the version argument is invalid.
.IP "ip_reverse" 4
.IX Item "ip_reverse"
The \f(CW\*(C`len\*(C'\fR argument determines the length of the reverse domain \-
e.g., if the arguments are '127.0.0.1', '16' and '4', the reverse
domain will be '0.127.in\-addr.arpa.'. The \f(CW\*(C`Net::IP\*(C'\fR version does not
take the \f(CW\*(C`len\*(C'\fR argument into account for IPv4 addresses. For IPv6
addresses, a compressed \s-1IP\s0 address string may be provided.
.IP "ip_splitprefix" 4
.IX Item "ip_splitprefix"
Returns \f(CW\*(C`undef\*(C'\fR unless the first component of the string is less than
or equal to 64 characters in length. The \f(CW\*(C`Net::IP\*(C'\fR version handles
strings of arbitrary length.
.IP "prefix" 4
.IX Item "prefix"
Returns a string with a prefix length of zero (e.g. '127.0.0.1/0')
where \f(CW\*(C`prefixlen\*(C'\fR is not defined in the object. The \f(CW\*(C`Net::IP\*(C'\fR
version will not include any prefix length in the returned string
(e.g. '127.0.0.1/').
.SH "AUTHOR"
.IX Header "AUTHOR"
Tom Harrison, \f(CW\*(C`<tomhrr@cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-net\-ip\-xs at rt.cpan.org\*(C'\fR, 
or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Net\-IP\-XS>.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Manuel Valente (\f(CW\*(C`<manuel.valente@gmail.com>\*(C'\fR) and the other
authors of Net::IP.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::IP, IP::Authority.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (C) 2010\-2018 Tom Harrison <tomhrr@cpan.org>.
.PP
Original inet_pton4 and inet_pton6 functions are copyright (C) 2006 
Free Software Foundation.
.PP
Original interface, and the auth and ip_auth functions, are copyright
(C) 1999\-2002 \s-1RIPE NCC.\s0
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.
.PP
This program is distributed in the hope that it will be useful, but
\&\s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0
General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, \s-1MA
02110\-1301 USA.\s0
