.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CSV::Reader 3"
.TH CSV::Reader 3 "2020-10-08" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CSV::Reader \- CSV reader class
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Simple \s-1CSV\s0 reader class that uses Text::CSV internally.
The \s-1CSV\s0 files are expected to have a header row of column names.
This was designed with the idea of using an iterator interface, but Perl does not support interators (nor interfaces) yet :(
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use CSV::Reader ();
\&        use open OUT => \*(Aq:locale\*(Aq; # optional; make perl aware of your terminal\*(Aqs encoding
\&
\&        # Create reader from file name:
\&        my $reader = new CSV::Reader(\*(Aq/path/to/file.csv\*(Aq);
\&
\&        # Create reader from a file handle (GLOB):
\&        open(my $h, \*(Aq<\*(Aq, $filename) || die("Failed to open $filename: $!");
\&        # or preferred method that can handle files having a UTF\-8 BOM:
\&        open(my $h, \*(Aq<:via(File::BOM)\*(Aq, $filename) || die("Failed to open $filename: $!");
\&        my $reader = new CSV::Reader($h);
\&
\&        # Create reader from an IO::Handle based object:
\&        my $io = IO::File\->new(); # subclass of IO::Handle
\&        $io\->open($filename, \*(Aq<:via(File::BOM)\*(Aq) || die("Failed to open $filename: $!");
\&        my $reader = new CSV::Reader($io);
\&
\&        # Create reader with advanced options:
\&        my $reader = new CSV::Reader(\*(Aq/path/to/file.csv\*(Aq,
\&                \*(Aqdelimiter\*(Aq => \*(Aq;\*(Aq,
\&                \*(Aqenclosure\*(Aq => \*(Aq\*(Aq,
\&                \*(Aqfield_normalizer\*(Aq => sub {
\&                        my $nameref = shift;
\&                        $$nameref = lc($$nameref);      # lowercase
\&                        $$nameref =~ s/\es/_/g;  # whitespace to underscore
\&                },
\&                \*(Aqfield_aliases\*(Aq => {
\&                        \*(Aqpostal_code\*(Aq => \*(Aqpostcode\*(Aq, # applied after normalization
\&                },
\&                \*(Aqmutators\*(Aq => {
\&                        \*(Aqpostcode\*(Aq => sub {     # if postalcode is Dutch, then make sure it has no spaces and is in uppercase.
\&                                my $val_ref = shift;
\&                                my $row_ref = shift;
\&                                if (defined($$val_ref) && defined($row_ref\->{\*(Aqcountry\*(Aq}) && ($row_ref\->{\*(Aqcountry\*(Aq} eq \*(AqNL\*(Aq)) {
\&                                        $$val_ref =~ s/\es+//;
\&                                        $$val_ref = uc($$val_ref);
\&                                }
\&                        },
\&                        \*(Aqhas_fiber_internet\*(Aq => sub {   # set a default for an empty (undef) value
\&                                my $val_ref = shift;
\&                                $$val_ref //= 0;
\&                        },
\&                },
\&        );
\&
\&        # Show the field names found in the header row:
\&        print \*(AqField names: \*(Aq . join("\en", $reader\->fieldNames()) . "\en";
\&
\&        # Iterate over the data rows:
\&        while (my $row = $reader\->nextRow()) {
\&                # It\*(Aqs recommended to validate the $row hashref first with something such as Params::Validate.
\&                # Now do whatever you want with the (validated) row hashref...
\&                require Data::Dumper; local $Data::Dumper::Terse = 1;
\&                print Data::Dumper::Dumper($row);
\&        }
.Ve
.SH "PUBLIC STATIC METHODS"
.IX Header "PUBLIC STATIC METHODS"
.ie n .SS "new($file, %options)"
.el .SS "new($file, \f(CW%options\fP)"
.IX Subsection "new($file, %options)"
Constructor.
.PP
\&\f(CW$file\fR can be a string file name, an open file handle (\s-1GLOB\s0), or an IO::Handle based object (e.g. IO::File or IO::Scalar).
If a string file name is given, then the file is opened via File::BOM.
.PP
The following \f(CW%options\fR are supported:
.PP
.Vb 8
\&        \- debug: boolean, if true, then debug messages are emitted using warn().
\&        \- field_aliases: hashref of case insensitive alias (in file) => real name (as expected in code) pairs.
\&        \- field_normalizer: callback that receives a field name by reference to normalize (e.g. make lowercase).
\&        \- include_fields: arrayref of field names to include. If given, then all other field names are excluded.
\&        \- delimiter: string, default \*(Aq,\*(Aq
\&        \- enclosure: string, default \*(Aq"\*(Aq
\&        \- escape: string, default backslash
\&        \- mutators: hashref of field name => callback($value_ref, $row_ref) pairs.
.Ve
.PP
Note: the option field_aliases is processed after the option field_normalizer if given.
.PP
Note: the callbacks given with the mutators option are called in their key order (which is an unpredictable order unless they're tied with Tie::IxHash).
.SS "\s-1DESTROY\s0"
.IX Subsection "DESTROY"
Closes the private file handle, if any.
.SH "PROTECTED STATIC METHODS"
.IX Header "PROTECTED STATIC METHODS"
.SS "_new_text_csv_object($args_hashref)"
.IX Subsection "_new_text_csv_object($args_hashref)"
Creates and returns a new Text::CSV object using the given arguments.
Child classes may override this method in order to tweak the arguments
and/or customize the creation of the internal Text::CSV object.
.SH "PROTECTED OBJECT METHODS"
.IX Header "PROTECTED OBJECT METHODS"
.SS "\fB_read()\fP"
.IX Subsection "_read()"
Reads the next \s-1CSV\s0 data row and sets internal variables.
.SH "PUBLIC OBJECT METHODS"
.IX Header "PUBLIC OBJECT METHODS"
.SS "\fBfieldNames()\fP"
.IX Subsection "fieldNames()"
Returns the field names as an array.
.SS "\fBcurrent()\fP"
.IX Subsection "current()"
Returns the current row.
.SS "\fBlinenum()\fP"
.IX Subsection "linenum()"
Returns the current row index.
.SS "\fBnextRow()\fP"
.IX Subsection "nextRow()"
Reads the next row.
.SS "\fBeof()\fP"
.IX Subsection "eof()"
Returns boolean
.SS "\fBrewind()\fP"
.IX Subsection "rewind()"
Rewinds the file handle.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Text::CSV used by this class internally.
.SH "AUTHOR"
.IX Header "AUTHOR"
Craig Manley
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2020 Craig Manley. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
