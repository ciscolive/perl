.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::String 3"
.TH Data::Object::String 3 "2020-04-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::String
.SH "ABSTRACT"
.IX Header "ABSTRACT"
String Class for Perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package main;
\&
\&  use Data::Object::String;
\&
\&  my $string = Data::Object::String\->new(\*(Aqabcedfghi\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides methods for manipulating string data.
.SH "INHERITS"
.IX Header "INHERITS"
This package inherits behaviors from:
.PP
Data::Object::Kind
.SH "INTEGRATES"
.IX Header "INTEGRATES"
This package integrates behaviors from:
.PP
Data::Object::Role::Dumpable
.PP
Data::Object::Role::Proxyable
.PP
Data::Object::Role::Throwable
.SH "LIBRARIES"
.IX Header "LIBRARIES"
This package uses type constraints from:
.PP
Data::Object::Types
.SH "METHODS"
.IX Header "METHODS"
This package implements the following methods:
.SS "append"
.IX Subsection "append"
.Vb 1
\&  append() : Str
.Ve
.PP
The append method appends arugments to the string using spaces.
.IP "append example #1" 4
.IX Item "append example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqfirstname\*(Aq);
\&
\&  $string\->append(\*(Aqlastname\*(Aq); # firstname lastname
.Ve
.SS "camelcase"
.IX Subsection "camelcase"
.Vb 1
\&  camelcase() : Str
.Ve
.PP
The camelcase method converts the string to camelcase.
.IP "camelcase example #1" 4
.IX Item "camelcase example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqhello world\*(Aq);
\&
\&  $string\->camelcase; # HelloWorld
.Ve
.SS "chomp"
.IX Subsection "chomp"
.Vb 1
\&  chomp() : Str
.Ve
.PP
The chomp method removes the newline (or the current value of $/) from the end
of the string.
.IP "chomp example #1" 4
.IX Item "chomp example #1"
.Vb 1
\&  my $string = Data::Object::String\->new("name, age, dob, email\en");
\&
\&  $string\->chomp; # name, age, dob, email
.Ve
.SS "chop"
.IX Subsection "chop"
.Vb 1
\&  chop() : Str
.Ve
.PP
The chop method removes and returns the last character of the string.
.IP "chop example #1" 4
.IX Item "chop example #1"
.Vb 1
\&  my $string = Data::Object::String\->new("this is just a test.");
\&
\&  $string\->chop; # this is just a test
.Ve
.SS "concat"
.IX Subsection "concat"
.Vb 1
\&  concat(Any $arg1) : Str
.Ve
.PP
The concat method returns the string with the argument list appended to it.
.IP "concat example #1" 4
.IX Item "concat example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(AqABC\*(Aq);
\&
\&  $string\->concat(\*(AqDEF\*(Aq, \*(AqGHI\*(Aq); # ABCDEFGHI
.Ve
.SS "contains"
.IX Subsection "contains"
.Vb 1
\&  contains(Str | RegexpRef $arg1) : Num
.Ve
.PP
The contains method searches the string for a substring or expression returns
true or false if found.
.IP "contains example #1" 4
.IX Item "contains example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(AqNullam ultrices placerat.\*(Aq);
\&
\&  $string\->contains(\*(Aqtrices\*(Aq); # 1
.Ve
.IP "contains example #2" 4
.IX Item "contains example #2"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(AqNullam ultrices placerat.\*(Aq);
\&
\&  $string\->contains(\*(Aqitrices\*(Aq); # 0
.Ve
.IP "contains example #3" 4
.IX Item "contains example #3"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(AqNullam ultrices placerat.\*(Aq);
\&
\&  $string\->contains(qr/trices/); # 1
.Ve
.IP "contains example #4" 4
.IX Item "contains example #4"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(AqNullam ultrices placerat.\*(Aq);
\&
\&  $string\->contains(qr/itrices/); # 0
.Ve
.SS "defined"
.IX Subsection "defined"
.Vb 1
\&  defined() : Num
.Ve
.PP
The defined method returns true, always.
.IP "defined example #1" 4
.IX Item "defined example #1"
.Vb 1
\&  my $string = Data::Object::String\->new();
\&
\&  $string\->defined; # 1
.Ve
.SS "eq"
.IX Subsection "eq"
.Vb 1
\&  eq(Any $arg1) : Num
.Ve
.PP
The eq method returns true if the argument provided is equal to the string.
.IP "eq example #1" 4
.IX Item "eq example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexciting\*(Aq);
\&
\&  $string\->eq(\*(AqExciting\*(Aq); # 0
.Ve
.SS "ge"
.IX Subsection "ge"
.Vb 1
\&  ge(Any $arg1) : Num
.Ve
.PP
The ge method returns true if the argument provided is greater-than or equal-to
the string.
.IP "ge example #1" 4
.IX Item "ge example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexciting\*(Aq);
\&
\&  $string\->ge(\*(AqExciting\*(Aq); # 1
.Ve
.SS "gt"
.IX Subsection "gt"
.Vb 1
\&  gt(Any $arg1) : Num
.Ve
.PP
The gt method returns true if the argument provided is greater-than the string.
.IP "gt example #1" 4
.IX Item "gt example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexciting\*(Aq);
\&
\&  $string\->gt(\*(AqExciting\*(Aq); # 1
.Ve
.SS "hex"
.IX Subsection "hex"
.Vb 1
\&  hex() : Str
.Ve
.PP
The hex method returns the value resulting from interpreting the string as a hex string.
.IP "hex example #1" 4
.IX Item "hex example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aq0xaf\*(Aq);
\&
\&  $string\->hex; # 175
.Ve
.SS "index"
.IX Subsection "index"
.Vb 1
\&  index(Str $arg1, Num $arg2) : Num
.Ve
.PP
The index method searches for the argument within the string and returns the
position of the first occurrence of the argument.
.IP "index example #1" 4
.IX Item "index example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqunexplainable\*(Aq);
\&
\&  $string\->index(\*(Aqexplain\*(Aq); # 2
.Ve
.IP "index example #2" 4
.IX Item "index example #2"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqunexplainable\*(Aq);
\&
\&  $string\->index(\*(Aqexplain\*(Aq, 0); # 2
.Ve
.IP "index example #3" 4
.IX Item "index example #3"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqunexplainable\*(Aq);
\&
\&  $string\->index(\*(Aqexplain\*(Aq, 1); # 2
.Ve
.IP "index example #4" 4
.IX Item "index example #4"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqunexplainable\*(Aq);
\&
\&  $string\->index(\*(Aqexplain\*(Aq, 2); # 2
.Ve
.IP "index example #5" 4
.IX Item "index example #5"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqunexplainable\*(Aq);
\&
\&  $string\->index(\*(Aqexplained\*(Aq); # \-1
.Ve
.SS "lc"
.IX Subsection "lc"
.Vb 1
\&  lc() : Str
.Ve
.PP
The lc method returns a lowercased version of the string.
.IP "lc example #1" 4
.IX Item "lc example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(AqEXCITING\*(Aq);
\&
\&  $string\->lc; # exciting
.Ve
.SS "lcfirst"
.IX Subsection "lcfirst"
.Vb 1
\&  lcfirst() : Str
.Ve
.PP
The lcfirst method returns a the string with the first character lowercased.
.IP "lcfirst example #1" 4
.IX Item "lcfirst example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(AqEXCITING\*(Aq);
\&
\&  $string\->lcfirst; # eXCITING
.Ve
.SS "le"
.IX Subsection "le"
.Vb 1
\&  le(Any $arg1) : Num
.Ve
.PP
The le method returns true if the argument provided is less-than or equal-to
the string.
.IP "le example #1" 4
.IX Item "le example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexciting\*(Aq);
\&
\&  $string\->le(\*(AqExciting\*(Aq); # 0
.Ve
.SS "length"
.IX Subsection "length"
.Vb 1
\&  length() : Num
.Ve
.PP
The length method returns the number of characters within the string.
.IP "length example #1" 4
.IX Item "length example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqlongggggg\*(Aq);
\&
\&  $string\->length; # 9
.Ve
.SS "lines"
.IX Subsection "lines"
.Vb 1
\&  lines() : ArrayRef
.Ve
.PP
The lines method returns an arrayref of parts by splitting on 1 or more newline
characters.
.IP "lines example #1" 4
.IX Item "lines example #1"
.Vb 3
\&  my $string = Data::Object::String\->new(
\&    "who am i?\enwhere am i?\enhow did I get here"
\&  );
\&
\&  $string\->lines; # [\*(Aqwho am i?\*(Aq,\*(Aqwhere am i?\*(Aq,\*(Aqhow did I get here\*(Aq]
.Ve
.SS "lowercase"
.IX Subsection "lowercase"
.Vb 1
\&  lowercase() : Str
.Ve
.PP
The lowercase method is an alias to the lc method.
.IP "lowercase example #1" 4
.IX Item "lowercase example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(AqEXCITING\*(Aq);
\&
\&  $string\->lowercase; # exciting
.Ve
.SS "lt"
.IX Subsection "lt"
.Vb 1
\&  lt(Any $arg1) : Num
.Ve
.PP
The lt method returns true if the argument provided is less-than the string.
.IP "lt example #1" 4
.IX Item "lt example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexciting\*(Aq);
\&
\&  $string\->lt(\*(AqExciting\*(Aq); # 0
.Ve
.SS "ne"
.IX Subsection "ne"
.Vb 1
\&  ne(Any $arg1) : Num
.Ve
.PP
The ne method returns true if the argument provided is not equal to the string.
.IP "ne example #1" 4
.IX Item "ne example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexciting\*(Aq);
\&
\&  $string\->ne(\*(AqExciting\*(Aq); # 1
.Ve
.SS "render"
.IX Subsection "render"
.Vb 1
\&  render(HashRef $arg1) : Str
.Ve
.PP
The render method treats the string as a template and performs a simple token
replacement using the argument provided.
.IP "render example #1" 4
.IX Item "render example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(AqHi, {name}!\*(Aq);
\&
\&  $string\->render({name => \*(AqFriend\*(Aq}); # Hi, Friend!
.Ve
.SS "replace"
.IX Subsection "replace"
.Vb 1
\&  replace(Str $arg1, Str $arg2) : Str
.Ve
.PP
The replace method performs a search and replace operation and returns the modified string.
.IP "replace example #1" 4
.IX Item "replace example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(AqHello World\*(Aq);
\&
\&  $string\->replace(\*(AqWorld\*(Aq, \*(AqUniverse\*(Aq); # Hello Universe
.Ve
.IP "replace example #2" 4
.IX Item "replace example #2"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(AqHello World\*(Aq);
\&
\&  $string\->replace(\*(Aqworld\*(Aq, \*(AqUniverse\*(Aq, \*(Aqi\*(Aq); # Hello Universe
.Ve
.IP "replace example #3" 4
.IX Item "replace example #3"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(AqHello World\*(Aq);
\&
\&  $string\->replace(qr/world/i, \*(AqUniverse\*(Aq); # Hello Universe
.Ve
.IP "replace example #4" 4
.IX Item "replace example #4"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(AqHello World\*(Aq);
\&
\&  $string\->replace(qr/.*/, \*(AqNada\*(Aq); # Nada
.Ve
.SS "reverse"
.IX Subsection "reverse"
.Vb 1
\&  reverse() : Str
.Ve
.PP
The reverse method returns a string where the characters in the string are in
the opposite order.
.IP "reverse example #1" 4
.IX Item "reverse example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqdlrow ,olleH\*(Aq);
\&
\&  $string\->reverse; # Hello, world
.Ve
.SS "rindex"
.IX Subsection "rindex"
.Vb 1
\&  rindex(Str $arg1, Num $arg2) : Num
.Ve
.PP
The rindex method searches for the argument within the string and returns the
position of the last occurrence of the argument.
.IP "rindex example #1" 4
.IX Item "rindex example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexplain the unexplainable\*(Aq);
\&
\&  $string\->rindex(\*(Aqexplain\*(Aq); # 14
.Ve
.IP "rindex example #10" 4
.IX Item "rindex example #10"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexplain the unexplainable\*(Aq);
\&
\&  $string\->rindex(\*(Aqexplained\*(Aq); # \-1
.Ve
.IP "rindex example #2" 4
.IX Item "rindex example #2"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexplain the unexplainable\*(Aq);
\&
\&  $string\->rindex(\*(Aqexplain\*(Aq, 0); # 0
.Ve
.IP "rindex example #3" 4
.IX Item "rindex example #3"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexplain the unexplainable\*(Aq);
\&
\&  $string\->rindex(\*(Aqexplain\*(Aq, 21); # 14
.Ve
.IP "rindex example #4" 4
.IX Item "rindex example #4"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexplain the unexplainable\*(Aq);
\&
\&  $string\->rindex(\*(Aqexplain\*(Aq, 22); # 14
.Ve
.IP "rindex example #5" 4
.IX Item "rindex example #5"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexplain the unexplainable\*(Aq);
\&
\&  $string\->rindex(\*(Aqexplain\*(Aq, 23); # 14
.Ve
.IP "rindex example #6" 4
.IX Item "rindex example #6"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexplain the unexplainable\*(Aq);
\&
\&  $string\->rindex(\*(Aqexplain\*(Aq, 20); # 14
.Ve
.IP "rindex example #7" 4
.IX Item "rindex example #7"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexplain the unexplainable\*(Aq);
\&
\&  $string\->rindex(\*(Aqexplain\*(Aq, 14); # 0
.Ve
.IP "rindex example #8" 4
.IX Item "rindex example #8"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexplain the unexplainable\*(Aq);
\&
\&  $string\->rindex(\*(Aqexplain\*(Aq, 13); # 0
.Ve
.IP "rindex example #9" 4
.IX Item "rindex example #9"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexplain the unexplainable\*(Aq);
\&
\&  $string\->rindex(\*(Aqexplain\*(Aq, 0); # 0
.Ve
.SS "snakecase"
.IX Subsection "snakecase"
.Vb 1
\&  snakecase() : Str
.Ve
.PP
The snakecase method converts the string to snakecase.
.IP "snakecase example #1" 4
.IX Item "snakecase example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqhello world\*(Aq);
\&
\&  $string\->snakecase; # hello_world
.Ve
.SS "split"
.IX Subsection "split"
.Vb 1
\&  split(RegexpRef $arg1, Num $arg2) : ArrayRef
.Ve
.PP
The split method returns an arrayref by splitting on the argument.
.IP "split example #1" 4
.IX Item "split example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqname, age, dob, email\*(Aq);
\&
\&  $string\->split(\*(Aq, \*(Aq); # [\*(Aqname\*(Aq, \*(Aqage\*(Aq, \*(Aqdob\*(Aq, \*(Aqemail\*(Aq]
.Ve
.IP "split example #2" 4
.IX Item "split example #2"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqname, age, dob, email\*(Aq);
\&
\&  $string\->split(\*(Aq, \*(Aq, 2); # [\*(Aqname\*(Aq, \*(Aqage, dob, email\*(Aq]
.Ve
.IP "split example #3" 4
.IX Item "split example #3"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqname, age, dob, email\*(Aq);
\&
\&  $string\->split(qr/\e,\es*/); # [\*(Aqname\*(Aq, \*(Aqage\*(Aq, \*(Aqdob\*(Aq, \*(Aqemail\*(Aq]
.Ve
.IP "split example #4" 4
.IX Item "split example #4"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqname, age, dob, email\*(Aq);
\&
\&  $string\->split(qr/\e,\es*/, 2); # [\*(Aqname\*(Aq, \*(Aqage, dob, email\*(Aq]
.Ve
.SS "strip"
.IX Subsection "strip"
.Vb 1
\&  strip() : Str
.Ve
.PP
The strip method returns the string replacing occurences of 2 or more
whitespaces with a single whitespace.
.IP "strip example #1" 4
.IX Item "strip example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqone,  two,  three\*(Aq);
\&
\&  $string\->strip; # one, two, three
.Ve
.SS "titlecase"
.IX Subsection "titlecase"
.Vb 1
\&  titlecase() : Str
.Ve
.PP
The titlecase method returns the string capitalizing the first character of
each word.
.IP "titlecase example #1" 4
.IX Item "titlecase example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqmr. john doe\*(Aq);
\&
\&  $string\->titlecase; # Mr. John Doe
.Ve
.SS "trim"
.IX Subsection "trim"
.Vb 1
\&  trim() : Str
.Ve
.PP
The trim method removes one or more consecutive leading and/or trailing spaces
from the string.
.IP "trim example #1" 4
.IX Item "trim example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aq   system is   ready   \*(Aq);
\&
\&  $string\->trim; # system is   ready
.Ve
.SS "uc"
.IX Subsection "uc"
.Vb 1
\&  uc() : Str
.Ve
.PP
The uc method returns an uppercased version of the string.
.IP "uc example #1" 4
.IX Item "uc example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexciting\*(Aq);
\&
\&  $string\->uc; # EXCITING
.Ve
.SS "ucfirst"
.IX Subsection "ucfirst"
.Vb 1
\&  ucfirst() : Str
.Ve
.PP
The ucfirst method returns a the string with the first character uppercased.
.IP "ucfirst example #1" 4
.IX Item "ucfirst example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexciting\*(Aq);
\&
\&  $string\->ucfirst; # Exciting
.Ve
.SS "uppercase"
.IX Subsection "uppercase"
.Vb 1
\&  uppercase() : Str
.Ve
.PP
The uppercase method is an alias to the uc method.
.IP "uppercase example #1" 4
.IX Item "uppercase example #1"
.Vb 1
\&  my $string = Data::Object::String\->new(\*(Aqexciting\*(Aq);
\&
\&  $string\->uppercase; # EXCITING
.Ve
.SS "words"
.IX Subsection "words"
.Vb 1
\&  words() : ArrayRef
.Ve
.PP
The words method returns an arrayref by splitting on 1 or more consecutive
spaces.
.IP "words example #1" 4
.IX Item "words example #1"
.Vb 3
\&  my $string = Data::Object::String\->new(
\&    \*(Aqis this a bug we\e\*(Aqre experiencing\*(Aq
\&  );
\&
\&  $string\->words; # ["is","this","a","bug","we\*(Aqre","experiencing"]
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/data-object/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/data-object/wiki>
.PP
Project <https://github.com/iamalnewkirk/data-object>
.PP
Initiatives <https://github.com/iamalnewkirk/data-object/projects>
.PP
Milestones <https://github.com/iamalnewkirk/data-object/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/data-object/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/data-object/issues>
