.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::RoleQR 3"
.TH MooseX::RoleQR 3 "2014-09-10" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::RoleQR \- allow "before qr{...} => sub {...};" in roles
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&   {
\&      package Local::Role;
\&      use MooseX::RoleQR;
\&      after qr{^gr} => sub {
\&         print " World\en";
\&      };
\&   }
\&   
\&   {
\&      package Local::Class;
\&      use Moose;
\&      with qw( Local::Role );
\&      sub greet {
\&         print "Hello";
\&      }
\&   }
\&   
\&   Local::Class\->new\->greet; # prints "Hello World\en"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Method modifiers in Moose classes can be specified using regular expressions
a la:
.PP
.Vb 1
\&   before qr{...} => sub {...};
.Ve
.PP
However, this is not allowed in Moose roles because Moose doesn't know which
class the role will be composed with, and thus doesn't know which method
names match the regular expression. Let's change that.
.PP
This module implements regular expression matched method modifiers for Moose
roles. It does so by deferring the calculation of which methods to modify
until role application time.
.PP
The current implementation handles only \f(CW\*(C`before\*(C'\fR, \f(CW\*(C`after\*(C'\fR and \f(CW\*(C`around\*(C'\fR
modifiers (not \f(CW\*(C`override\*(C'\fR), and thus it overrides the following standard
Moose::Role keywords:
.ie n .IP """before Str|ArrayRef|RegexpRef => CodeRef""" 4
.el .IP "\f(CWbefore Str|ArrayRef|RegexpRef => CodeRef\fR" 4
.IX Item "before Str|ArrayRef|RegexpRef => CodeRef"
.PD 0
.ie n .IP """after Str|ArrayRef|RegexpRef => CodeRef""" 4
.el .IP "\f(CWafter Str|ArrayRef|RegexpRef => CodeRef\fR" 4
.IX Item "after Str|ArrayRef|RegexpRef => CodeRef"
.ie n .IP """around Str|ArrayRef|RegexpRef => CodeRef""" 4
.el .IP "\f(CWaround Str|ArrayRef|RegexpRef => CodeRef\fR" 4
.IX Item "around Str|ArrayRef|RegexpRef => CodeRef"
.PD
.SS "Caveat Regarding the Order of Method Modifiers"
.IX Subsection "Caveat Regarding the Order of Method Modifiers"
Moose executes method modifiers in a well-defined order (see
Moose::Manual::MethodModifiers for details). This module has the potential
to disrupt that order, as regular expression matched modifiers are always
applied after the role's other modifiers have been applied.
.ie n .SS "Caveat: no ""use Moose::Role"""
.el .SS "Caveat: no \f(CWuse Moose::Role\fP"
.IX Subsection "Caveat: no use Moose::Role"
You should \f(CW\*(C`use MooseX::RoleQR\*(C'\fR \fIinstead of\fR Moose::Role; not
\&\fIas well as\fR.
.SS "General Caveat"
.IX Subsection "General Caveat"
There's some pretty nasty stuff under the hood. Let's pretend it's
not there.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs to
<http://rt.cpan.org/Dist/Display.html?Queue=MooseX\-RoleQR>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Moose::Role.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2012 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
