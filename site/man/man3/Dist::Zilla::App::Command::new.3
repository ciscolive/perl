.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::App::Command::new 3"
.TH Dist::Zilla::App::Command::new 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::App::Command::new \- mint a new dist
.SH "VERSION"
.IX Header "VERSION"
version 6.017
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Creates a new Dist-Zilla based distribution under the current directory.
.PP
.Vb 1
\&  $ dzil new Main::Module::Name
.Ve
.PP
There are two arguments, \f(CW\*(C`\-p\*(C'\fR and \f(CW\*(C`\-P\*(C'\fR. \f(CW\*(C`\-P\*(C'\fR specify the minting profile
provider and \f(CW\*(C`\-p\*(C'\fR \- the profile name.
.PP
The default profile provider first looks in the
\&\fI~/.dzil/profiles/$profile_name\fR and then among standard profiles, shipped
with Dist::Zilla. For example:
.PP
.Vb 1
\&  $ dzil new \-p work Corporate::Library
.Ve
.PP
This command would instruct \f(CW\*(C`dzil\*(C'\fR to look in \fI~/.dzil/profiles/work\fR for a
\&\fIprofile.ini\fR (or other \*(L"profile\*(R" config file).  If no profile name is given,
\&\f(CW\*(C`dzil\*(C'\fR will look for the \f(CW\*(C`default\*(C'\fR profile.  If no \fIdefault\fR directory
exists, it will use a very simple configuration shipped with Dist::Zilla.
.PP
.Vb 1
\&  $ dzil new \-P Foo Corporate::Library
.Ve
.PP
This command would instruct \f(CW\*(C`dzil\*(C'\fR to consult the Foo provider about the
directory of 'default' profile.
.PP
Furthermore, it is possible to specify the default minting provider and profile
in the \fI~/.dzil/config.ini\fR file, for example:
.PP
.Vb 3
\&  [%Mint]
\&  provider = FooCorp
\&  profile = work
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 üòè <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
