.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Milter::Authentication::Metric 3"
.TH Mail::Milter::Authentication::Metric 3 "2020-09-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Milter::Authentication::Metric \- Class for metrics generation
.SH "VERSION"
.IX Header "VERSION"
version 2.20200930.2
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Handle metrics collection and production for prometheus
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SS "\fI\fP\f(BInew()\fP\fI\fP"
.IX Subsection "new()"
my \f(CW$object\fR = Mail::Milter::Authentication::Metric\->\fBnew()\fR;
.PP
Create a new Mail::Milter::Authentication::Metric object
This object is used to store, modify, and report metrics.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fIset_handler($handler)\fP"
.IX Subsection "set_handler($handler)"
Set a reference to the current handler
.SS "\fIhandle_exception($exception)\fP"
.IX Subsection "handle_exception($exception)"
If we have a handler, then pass any exception to that handlers exception handling
.SS "\fI\fP\f(BIprom()\fP\fI\fP"
.IX Subsection "prom()"
Return the prom object if available
.SS "\fIset_versions( \fP\f(CI$server\fP\fI )\fP"
.IX Subsection "set_versions( $server )"
Setup version metrics
.SS "\fI\fP\f(BIget_timeout()\fP\fI\fP"
.IX Subsection "get_timeout()"
Returns the current value of timeout for metrics operations.
.SS "\fIclean_label($text)\fP"
.IX Subsection "clean_label($text)"
Given a string, return a version of that string which is safe to use as a metrics label.
.SS "\fIcount($args)\fP"
.IX Subsection "count($args)"
Increment the metric for the given counter
Called from the base handler, do not call directly.
\&\f(CW$server\fR is the current handler object
.PP
.Vb 1
\& count_id \- the name of the metric to act on
\&
\& labels \- hashref of labels to apply
\&
\& server \- the current server object
\&
\& count \- number to increment by (defaults to 1)
.Ve
.SS "\fIset($args)\fP"
.IX Subsection "set($args)"
Set the metric for the given counter
Called from the base handler, do not call directly.
\&\f(CW$server\fR is the current handler object
.PP
.Vb 1
\& count_id \- the name of the metric to act on
\&
\& labels \- hashref of labels to apply
\&
\& server \- the current server object
\&
\& count \- number to increment by (defaults to 1)
.Ve
.SS "\fIsend( \fP\f(CI$server\fP\fI )\fP"
.IX Subsection "send( $server )"
Send metrics to the parent server process.
.SS "\fIregister_metrics( \fP\f(CI$hash\fP\fI )\fP"
.IX Subsection "register_metrics( $hash )"
Register a new set of metric types and help texts.
Called from the parent process in the setup phase.
.PP
Expects a hashref of metric description, keyed on metric name.
.SS "\fI\fP\f(BIre_register_metric()\fP\fI\fP"
.IX Subsection "re_register_metric()"
Re-register currently registered metrics to ensure backend
metadata is correct
.SS "\fIparent_metric_update( \fP\f(CI$server\fP\fI )\fP"
.IX Subsection "parent_metric_update( $server )"
Called in the parent process to periodically update some metrics
.SS "\fIchild_handler( \fP\f(CI$server\fP\fI )\fP"
.IX Subsection "child_handler( $server )"
Handle a metrics or http request in the child process.
.SH "LOGGING METHODS"
.IX Header "LOGGING METHODS"
.SS "\fIdbgout( \fP\f(CI$key\fP\fI, \fP\f(CI$value\fP\fI, \fP\f(CI$priority\fP\fI )\fP"
.IX Subsection "dbgout( $key, $value, $priority )"
Pass arguments along to the dbgout method of the handler if we have one
or log via the Mail::Milter::Authentication object if we do not.
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Marc Bradshaw.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
