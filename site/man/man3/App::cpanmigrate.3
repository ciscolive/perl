.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::cpanmigrate 3"
.TH App::cpanmigrate 3 "2011-06-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::cpanmigrate \- migrate installed modules to new environment
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  $ cpanmigrate perl\-5.14.1
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
App::cpanmigrate is a helper tool to migrate installed modules to new environment.
.PP
\&\f(CW\*(C`cpanmigrate\*(C'\fR is integrated with App::cpanminus and App::perlbrew.
.SH "SUPPORTED ENVIRONMENT"
.IX Header "SUPPORTED ENVIRONMENT"
.IP "\(bu" 4
\&\f(CW\*(C`bash\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`zsh\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`csh\*(C'\fR
.SS "\s-1HOW TO DEVELOP A HELPER FOR UNSUPPORTED ENVIRONMENT\s0"
.IX Subsection "HOW TO DEVELOP A HELPER FOR UNSUPPORTED ENVIRONMENT"
Take a look at App::cpanmigrate::bash. The main part of development is writing shell script.
.PP
Additionally, write some logic to detect shell. See also \f(CW\*(C`App::cpanmigrate\->detect_shell()\*(C'\fR.
.PP
Then, please send me a pull request at <https://github.com/punytan/p5\-App\-cpanmigrate> :)
.SH "AUTHOR"
.IX Header "AUTHOR"
punytan <punytan@gmail.com>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
toritori0318 \- patches for \f(CW\*(C`zsh\*(C'\fR and \f(CW\*(C`csh\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
App::perlbrew, App::cpanminus
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
