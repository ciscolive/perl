.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Command::generate::resources 3"
.TH Mojolicious::Command::generate::resources 3 "2018-04-16" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Command::generate::resources \- Generate MVC & OpenAPI RESTful API files from database tables
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  Usage: APPLICATION generate resources [OPTIONS]
\&
\&    my_app.pl generate help resources # help with all available options
\&    my_app.pl generate resources \-\-tables users,groups
\&    my_app.pl generate resources \-\-tables users,groups \-D dbx
.Ve
.SH "PERL REQUIREMENTS"
.IX Header "PERL REQUIREMENTS"
This command uses \*(L"signatures\*(R" in feature, therefore Perl 5.20 is required.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An usable release...
.PP
Mojolicious::Command::generate::resources generates directory structure for
a fully functional \s-1MVC\s0
set of files,
routes and RESTful \s-1API\s0 specification in
OpenAPI <https://github.com/OAI/OpenAPI-Specification> format based on
existing tables in your application's database.
.PP
The purpose of this tool is to promote
\&\s-1RAD\s0 <http://en.wikipedia.org/wiki/Rapid_application_development> by generating
the boilerplate code for model (M), templates (V) and controller (C) and help
programmers to quickly create well structured, fully functional applications.
It assumes that you already have tables created in a database and you just want
to generate
\&\s-1CRUD\s0 <https://en.wikipedia.org/wiki/Create,_read,_update_and_delete> actions
for them.
.PP
In the generated actions you will find eventually working code for reading,
creating, updating and deleting records from the tables you specified on the
command-line. The generated code is just boilerplate to give you a jump start,
so you can concentrate on writing your business-specific code. It is assumed
that you will modify the generated code to suit your specific needs. All the
generated code is produced from templates. You can copy the folder with the
templates, push it to \f(CW\*(C`@{$app\->renderer\->paths}\*(C'\fR and modify to your
taste. Please look into the \f(CW\*(C`t/blog\*(C'\fR folder of this distribution for examples.
.PP
The command expects to find and will use one of the commonly used helpers
\&\f(CW\*(C`pg\*(C'\fR, \f(CW\*(C`mysql\*(C'\fR \f(CW\*(C`sqlite\*(C'\fR. The supported wrappers are respectively Mojo::Pg,
Mojo::mysql and Mojo::SQLite.
.SH "OPTIONS"
.IX Header "OPTIONS"
Below are the options this command accepts, described in Getopt::Long notation.
Both short and long variants are shown as well as the types of values they
accept. All of them, beside \f(CW\*(C`\-\-tables\*(C'\fR, are guessed from your application and
usually do not need to be specified.
.SS "H|home_dir=s"
.IX Subsection "H|home_dir=s"
Optional. Defaults to \f(CW\*(C`app\->home\*(C'\fR (which is MyApp home directory). Used to
set the root directory to which the files will be dumped. If you set this
option, respectively the \f(CW\*(C`lib\*(C'\fR and \f(CW\*(C`api\*(C'\fR folders will be created under the
new \f(CW\*(C`home_dir\*(C'\fR. If you want them elsewhere, set these options explicitly.
.SS "L|lib=s"
.IX Subsection "L|lib=s"
Optional. Defaults to \f(CW\*(C`app\->home/lib\*(C'\fR (relative to the \f(CW\*(C`\-\-home_dir\*(C'\fR
directory). If you installed MyApp in some custom path and you wish to
generate your controllers into e.g. \f(CW\*(C`site_lib\*(C'\fR, set this option.
.SS "api_dir=s"
.IX Subsection "api_dir=s"
Optional. Directory where
the OpenAPI <https://github.com/OAI/OpenAPI-Specification> \f(CW\*(C`json\*(C'\fR file will
be generated. Defaults to \f(CW\*(C`app\->home/api\*(C'\fR (relative to the \f(CW\*(C`\-\-home_dir\*(C'\fR
directory). If you installed MyApp in some custom path and you wish to
generate your \f(CW\*(C`OpenApi\*(C'\fR files into for example \f(CW\*(C`site_lib/MyApp/etc/api\*(C'\fR, set
this option explicitly.
.SS "C|controller_namespace=s"
.IX Subsection "C|controller_namespace=s"
Optional. The namespace for the controller classes to be generated. Defaults to
\&\f(CW\*(C`app\->routes\->namespaces\->[0]\*(C'\fR, usually MyApp::Controller, where
MyApp is the name of your application. If you decide to use another namespace
for the controllers, do not forget to add it to the list
\&\f(CW\*(C`app\->routes\->namespaces\*(C'\fR in \f(CW\*(C`myapp.conf\*(C'\fR or your plugin
configuration file. Here is an example.
.PP
.Vb 4
\&  # Setting the Controller class from which all controllers must inherit.
\&  # See /perldoc/Mojolicious/#controller_class
\&  # See /perldoc/Mojolicious/Guides/Growing#Controller\-class
\&  app\->controller_class(\*(AqMyApp::C\*(Aq);
\&
\&  # Namespace(s) to load controllers from
\&  # See /perldoc/Mojolicious#routes
\&  app\->routes\->namespaces([\*(AqMyApp::C\*(Aq]);
.Ve
.SS "M|model_namespace=s"
.IX Subsection "M|model_namespace=s"
Optional. The namespace for the model classes to be generated. Defaults to
MyApp::Model.
.SS "T|templates_root=s"
.IX Subsection "T|templates_root=s"
Optional. Defaults to \f(CW\*(C`app\->renderer\->paths\->[0]\*(C'\fR. This is usually
\&\f(CW\*(C`app\->home/templates\*(C'\fR directory. If you want to use another directory, do
not forget to add it to the \f(CW\*(C`app\->renderer\->paths\*(C'\fR list in your
configuration file. Here is how to add a new directory to
\&\f(CW\*(C`app\->renderer\->paths\*(C'\fR in \f(CW\*(C`myapp.conf\*(C'\fR.
.PP
.Vb 3
\&    # Application/site specific templates
\&    # See /perldoc/Mojolicious/Renderer#paths
\&    unshift @{app\->renderer\->paths}, $home\->rel_file(\*(Aqsite_templates\*(Aq);
.Ve
.SS "D|db_helper=s"
.IX Subsection "D|db_helper=s"
Optional. If passed, this method name will be used when generating Model
classes and helpers. The application is still expected to support the unified
\&\s-1API\s0 of the supported database adapters. This feature helps to generate code
for an application that wants to support all the three adaptors or if for
example tomorrow suddenly appears a Mojo::Oracle tiny wrapper around
DBD::Oracle.
.SS "t|tables=s@"
.IX Subsection "t|tables=s@"
Mandatory. List of tables separated by commas for which controllers should be generated.
.SH "SUPPORT"
.IX Header "SUPPORT"
Please report bugs, contribute and make merge requests on
Github <https://github.com/kberov/Mojolicious-Command-generate-resources>.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Command::generate::resources inherits all attributes from
Mojolicious::Command and implements the following new ones.
.SS "args"
.IX Subsection "args"
Used for storing arguments from the command-line.
.PP
.Vb 1
\&  my $args = $self\->args;
.Ve
.SS "description"
.IX Subsection "description"
.Vb 2
\&  my $description = $command\->description;
\&  $command        = $command\->description(\*(AqFoo!\*(Aq);
.Ve
.PP
Short description of this command, used for the \f(CW\*(C`~$ mojo generate\*(C'\fR commands
list.
.SS "routes"
.IX Subsection "routes"
.Vb 1
\&  $self\->routes;
.Ve
.PP
Returns an \s-1ARRAY\s0 reference containing routes, prepared after
\&\f(CW\*(C`$self\->args\->{tables}\*(C'\fR. Suggested Perl code for the routes is dumped
in a file named \s-1TODO\s0 in \f(CW\*(C`\-\-homedir\*(C'\fR so you can copy and paste into your
application code.
.SS "usage"
.IX Subsection "usage"
.Vb 2
\&  my $usage = $command\->usage;
\&  $command  = $command\->usage(\*(AqFoo!\*(Aq);
.Ve
.PP
Usage information for this command, used for the help screen.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Command::generate::resources inherits all methods from
Mojolicious::Command and implements the following new ones.
.SS "run"
.IX Subsection "run"
.Vb 1
\&  Mojolicious::Command::generate::resources\->new(app=>$app)\->run(@ARGV);
.Ve
.PP
Run this command.
.SS "render_template_to_file"
.IX Subsection "render_template_to_file"
Renders a template from a file to a file using Mojo::Template. Parameters:
\&\f(CW$tmpl_file\fR \- full path tho the template file; \f(CW$target_file\fR \- full path to
the file to be written; \f(CW$template_args\fR \- a hash reference containing the
arguments to the template. See also \*(L"render_to_file\*(R" in Mojolicious::Command.
.PP
.Vb 1
\&    $self\->render_template_to_file($tmpl_file, $target_file, $template_args);
.Ve
.SS "generate_formfields"
.IX Subsection "generate_formfields"
Generates form-fields from columns information found in the respective table.
The result is put into \f(CW\*(C`_form.html.ep\*(C'\fR. The programmer can then modify the
generated form-fields.
.PP
.Vb 1
\&    $form_fields = $self\->generate_formfields($table_name);
.Ve
.SS "generate_openapi"
.IX Subsection "generate_openapi"
Generates Open \s-1API\s0 <https://github.com/OAI/OpenAPI-Specification> file in json
format. The generated file is put in \*(L"\-\-api_dir\*(R". The filename is
\&\f(CW\*(C`api.json\*(C'\fR. This is the file which will be loaded by \f(CW\*(C`MyApp\*(C'\fR.
.SS "generate_path_api"
.IX Subsection "generate_path_api"
Generates \s-1API\s0 definitions and paths for each table. Invoked in
\&\*(L"generate_openapi\*(R". \fBParamaters:\fR \f(CW$t\fR \- the table name;
\&\f(CW$api_defs_object\fR \- the object \s-1API\s0 definition, based on the table name;
\&\f(CW$tmpl_args\fR \- the arguments for the templates. \f(CW$api_defs_object\fR and
\&\f(CW$tmpl_args\fR will be enriched with additional key-value pairs as required by
the OpenAPI specification. Returns \f(CW\*(C`void\*(C'\fR.
.SS "generate_validation"
.IX Subsection "generate_validation"
Generates code for the \f(CW\*(C`_validation\*(C'\fR method in the respective controler.
.PP
.Vb 1
\&    $validation_code = $self\->generate_validation($table_name);
.Ve
.SH "TODO"
.IX Header "TODO"
The work on the features may not go in the same order specified here. Some
parts may be fully implemented while others may be left for later.
.PP
.Vb 4
\&    \- Improve documentation.
\&    \- Add initial documentation stub to the generated classes.
\&    \- Improve templates to generate code to which is more ready to use.
\&    \- Append to the existing api.json if it already exists. More tests.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&    Красимир Беров
\&    CPAN ID: BEROV
\&    berov@cpan.org
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software licensed under
.PP
.Vb 1
\&  Artistic License 2.0
.Ve
.PP
The full text of the license can be found in the \s-1LICENSE\s0 file included with
this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious::Command::generate,
Mojolicious::Command,
Mojolicious,
Mojolicious::Plugin::OpenAPI,
Perl <https://www.perl.org/>.
