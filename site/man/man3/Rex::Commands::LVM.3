.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Rex::Commands::LVM 3"
.TH Rex::Commands::LVM 3 "2020-10-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rex::Commands::LVM \- Get LVM Information
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
With this module you can get information of your lvm setup.
.PP
Version <= 1.0: All these functions will not be reported.
.PP
All these functions are not idempotent.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Rex::Commands::LVM;
\& 
\& my @physical_devices = pvs;
\& my @volume_groups = vgs;
\& my @logical_volumes = lvs;
.Ve
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.SS "pvs"
.IX Subsection "pvs"
Get Information for all your physical volumes.
.PP
.Vb 2
\& use Data::Dumper;
\& use Rex::Commands::LVM;
\& 
\& task "lvm", sub {
\&   my @physical_volumes = pvs;
\& 
\&   for my $physical_volume (@physical_volumes) {
\&     say Dumper($physical_volume);
\&   }
\& };
.Ve
.SS "vgs"
.IX Subsection "vgs"
Get Information for all your volume groups.
.PP
.Vb 2
\& use Data::Dumper;
\& use Rex::Commands::LVM;
\& 
\& task "lvm", sub {
\&   my @volume_groups = vgs;
\& 
\&   for my $volume_group (@volume_groups) {
\&     say Dumper($volume_group);
\&   }
\& };
.Ve
.SS "lvs"
.IX Subsection "lvs"
Get Information for all your logical volumes.
.PP
.Vb 2
\& use Data::Dumper;
\& use Rex::Commands::LVM;
\& 
\& task "lvm", sub {
\&   my @logical_volumes = lvs;
\& 
\&   for my $logical_volume (@logical_volumes) {
\&     say Dumper($logical_volume);
\&   }
\& };
.Ve
