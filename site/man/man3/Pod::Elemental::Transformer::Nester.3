.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Pod::Elemental::Transformer::Nester 3"
.TH Pod::Elemental::Transformer::Nester 3 "2020-01-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Elemental::Transformer::Nester \- group the document into sections
.SH "VERSION"
.IX Header "VERSION"
version 0.103005
.SH "OVERVIEW"
.IX Header "OVERVIEW"
The Nester transformer is meant to find potential container elements and make
them into actual containers.  It works by being told what elements may be made
into containers and what subsequent elements they should allow to be stuffed
into them.
.PP
For example, given the following nester:
.PP
.Vb 1
\&  use Pod::Elemental::Selectors qw(s_command s_flat);
\&
\&  my $nester = Pod::Elemental::Transformer::Nester\->new({
\&    top_selector      => s_command(\*(Aqhead1\*(Aq),
\&    content_selectors => [
\&      s_command([ qw(head2 head3 head4) ]),
\&      s_flat,
\&    ],
\&  });
.Ve
.PP
\&..then when we apply the transformation:
.PP
.Vb 1
\&  $nester\->transform_node($document);
.Ve
.PP
\&...the nester will find all \f(CW\*(C`=head1\*(C'\fR elements in the top-level of the
document.  It will ensure that they are represented by objects that perform the
Pod::Elemental::Node role, and then it will move all subsequent elements
matching the \f(CW\*(C`content_selectors\*(C'\fR into the container.
.PP
So, if we start with this input:
.PP
.Vb 4
\&  =head1 Header
\&  =head2 Subheader
\&  Pod5::Ordinary <some content>
\&  =head1 New Header
.Ve
.PP
The nester will convert its structure to look like this:
.PP
.Vb 4
\&  =head1 Header
\&    =head2 Subheader
\&    Pod5::Ordinary <some content>
\&  =head1 New Header
.Ve
.PP
Once an element is reached that does not pass the content selectors, the
nesting ceases until the next potential container.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "top_selector"
.IX Subsection "top_selector"
This attribute must be a coderef (presumably made from
Pod::Elemental::Selectors) that will test elements in the transformed node and
return true if the element is a potential new container.
.SS "content_selectors"
.IX Subsection "content_selectors"
This attribute must be an arrayref of coderefs (again presumably made from
Pod::Elemental::Selectors) that will test whether paragraphs subsequent to the
top-level container may be moved under the container.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
