.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Getopt::EX::Colormap 3"
.TH Getopt::EX::Colormap 3 "2020-10-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Getopt::EX::Colormap \- ANSI terminal color and option support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  GetOptions(\*(Aqcolormap|cm:s\*(Aq => @opt_colormap);
\&
\&  require Getopt::EX::Colormap;
\&  my $cm = Getopt::EX::Colormap
\&      \->new
\&      \->load_params(@opt_colormap);  
\&
\&  print $cm\->color(\*(AqFILE\*(Aq, \*(AqFILE labeled text\*(Aq);
\&
\&  print $cm\->index_color($index, \*(AqTEXT\*(Aq);
\&
\&    or
\&
\&  use Getopt::EX::Colormap qw(colorize);
\&  $text = colorize(SPEC, TEXT);
\&  $text = colorize(SPEC_1, TEXT_1, SPEC_2, TEXT_2, ...);
\&
\&  $ perl \-MGetopt::EX::Colormap=colortable \-e colortable
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Coloring text capability is not strongly bound to option processing,
but it may be useful to give a simple uniform way to specify
complicated color setting from command line.
.PP
This module assumes color information is given in two ways: one in
labeled list, and one in indexed list.
.PP
This is an example of labeled list:
.PP
.Vb 3
\&    \-\-cm \*(AqCOMMAND=SE,OMARK=CS,NMARK=MS\*(Aq \e
\&    \-\-cm \*(AqOTEXT=C,NTEXT=M,*CHANGE=BD/445,DELETE=APPEND=RD/544\*(Aq \e
\&    \-\-cm \*(AqCMARK=GS,MMARK=YS,CTEXT=G,MTEXT=Y\*(Aq
.Ve
.PP
Each color definitions are separated by comma (\f(CW\*(C`,\*(C'\fR) and labels are
specified by \fILABEL=\fR style precedence.  Multiple labels can be set
for same value by connecting them together.  Label name can be
specified with \f(CW\*(C`*\*(C'\fR and \f(CW\*(C`?\*(C'\fR wildcard characters.
.PP
If the color spec start with plus (\f(CW\*(C`+\*(C'\fR) mark with labeled list
format, it is appended to the current value with reset mark (\f(CW\*(C`^\*(C'\fR).
Next example uses wildcard to set all labels end with `\s-1CHANGE\s0' to `R'
and set `R^S' to `\s-1OCHANGE\s0' label.
.PP
.Vb 1
\&    \-\-cm \*(Aq*CHANGE=R,OCHANGE=+S\*(Aq
.Ve
.PP
Indexed list example is like this:
.PP
.Vb 4
\&    \-\-cm 555/100,555/010,555/001 \e
\&    \-\-cm 555/011,555/101,555/110 \e
\&    \-\-cm 555/021,555/201,555/210 \e
\&    \-\-cm 555/012,555/102,555/120
.Ve
.PP
This is the example of \s-1RGB\s0 6x6x6 216 colors specification.  Left
side of slash is foreground color, and right side is for background.
This color list is accessed by index.
.PP
Handler maintains hash and list objects, and labeled colors are stored
in hash, non-label colors are in list automatically.  User can mix
both specifications.
.PP
Besides producing \s-1ANSI\s0 colored text, this module supports calling
arbitrary function to handle a string.  See \*(L"\s-1FUNCTION SPEC\*(R"\s0 section
for more detail.
.SH "COLOR SPEC"
.IX Header "COLOR SPEC"
Color specification is a combination of single uppercase character
representing 8 colors :
.PP
.Vb 8
\&    R  Red
\&    G  Green
\&    B  Blue
\&    C  Cyan
\&    M  Magenta
\&    Y  Yellow
\&    K  Black
\&    W  White
.Ve
.PP
and alternative (usually brighter) colors in lowercase :
.PP
.Vb 1
\&    r, g, b, c, m, y, k, w
.Ve
.PP
or \s-1RGB\s0 values and 24 grey levels if using \s-1ANSI 256\s0 or full color
terminal :
.PP
.Vb 5
\&    (255,255,255)      : 24bit decimal RGB colors
\&    #000000 .. #FFFFFF : 24bit hex RGB colors
\&    #000    .. #FFF    : 12bit hex RGB 4096 colors
\&    000 .. 555         : 6x6x6 RGB 216 colors
\&    L00 .. L25         : Black (L00), 24 grey levels, White (L25)
.Ve
.Sp
.RS 4
Beginning \f(CW\*(C`#\*(C'\fR can be omitted in 24bit hex \s-1RGB\s0 notation.
.Sp
When values are all same in 24bit or 12bit \s-1RGB,\s0 it is converted to 24
grey level, otherwise 6x6x6 216 color.
.Sp
Until version v1.9.0, grey levels were assigned to L00\-L23.  In this
version, L00 and L25 represent black and white, and 24 grey levels are
assigned to L01\-L24.
.RE
.PP
or color names enclosed by angle bracket :
.PP
.Vb 3
\&    <red> <blue> <green> <cyan> <magenta> <yellow>
\&    <aliceblue> <honeydue> <hotpink> <mooccasin>
\&    <medium_aqua_marine>
.Ve
.PP
with other special effects :
.PP
.Vb 11
\&    N    None
\&    Z  0 Zero (reset)
\&    D  1 Double\-struck (boldface)
\&    P  2 Pale (dark)
\&    I  3 Italic
\&    U  4 Underline
\&    F  5 Flash (blink: slow)
\&    Q  6 Quick (blink: rapid)
\&    S  7 Stand\-out (reverse video)
\&    V  8 Vanish (concealed)
\&    X  9 Crossed out
\&
\&    E    Erase Line
\&
\&    ;    No effect
\&    /    Toggle foreground/background
\&    ^    Reset to foreground
.Ve
.PP
At first the color is considered as foreground, and slash (\f(CW\*(C`/\*(C'\fR)
switches foreground and background.  If multiple colors are given in
the same spec, all indicators are produced in the order of their
presence.  Consequently, the last one takes effect.
.PP
If the character is preceded by tilde (\f(CW\*(C`~\*(C'\fR), it means negation of
following effect; \f(CW\*(C`~S\*(C'\fR reset the effect of \f(CW\*(C`S\*(C'\fR.  There is a
discussion about negation of \f(CW\*(C`D\*(C'\fR (Track Wikipedia link in \s-1SEE ALSO\s0),
and Apple_Terminal (v2.10 433) does not reset at least.
.PP
If the spec start with plus (\f(CW\*(C`+\*(C'\fR) or minus (\f(CW\*(C`\-\*(C'\fR) character,
following characters are appended/deleted to/from previous
value. Reset mark (\f(CW\*(C`^\*(C'\fR) is inserted before appended string.
.PP
Effect characters are case insensitive, and can be found anywhere and
in any order in color spec string.  Character \f(CW\*(C`;\*(C'\fR does nothing and
can be used just for readability, like \f(CW\*(C`SD;K/544\*(C'\fR.
.PP
Samples:
.PP
.Vb 7
\&    RGB  6x6x6    12bit      24bit           color name
\&    ===  =======  =========  =============  ==================
\&    B    005      #00F       (0,0,255)      <blue>
\&     /M     /505      /#F0F   /(255,0,255)  /<magenta>
\&    K/W  000/555  #000/#FFF  000000/FFFFFF  <black>/<white>
\&    R/G  500/050  #F00/#0F0  FF0000/00FF00  <red>/<green>
\&    W/w  L03/L20  #333/#ccc  303030/c6c6c6  <dimgrey>/<lightgrey>
.Ve
.PP
24\-bit \s-1RGB\s0 color sequence is supported but disabled by default.  Set
\&\f(CW$RGB24\fR module variable to enable it.
.PP
Character \*(L"E\*(R" is an abbreviation for \*(L"{\s-1EL\s0}\*(R", and it clears the line
from cursor to the end of the line.  At this time, background color is
set to the area.  When this code is found in the start sequence, it is
copied to just before ending reset sequence, with preceding sequence
if necessary, to keep the effect even when the text is wrapped to
multiple lines.
.PP
Other \s-1ANSI CSI\s0 sequences are also available in the form of \*(L"{\s-1NAME\s0}\*(R",
despite there are few reasons to use them.
.PP
.Vb 10
\&    CUU n   Cursor up
\&    CUD n   Cursor Down
\&    CUF n   Cursor Forward
\&    CUB n   Cursor Back
\&    CNL n   Cursor Next Line
\&    CPL n   Cursor Previous line
\&    CHA n   Cursor Horizontal Absolute
\&    CUP n,m Cursor Position
\&    ED  n   Erase in Display (0 after, 1 before, 2 entire, 3 w/buffer)
\&    EL  n   Erase in Line (0 after, 1 before, 2 entire)
\&    SU  n   Scroll Up
\&    SD  n   Scroll Down
\&    HVP n,m Horizontal Vertical Position
\&    SGR n*  Select Graphic Rendition
\&    SCP     Save Cursor Position
\&    RCP     Restore Cursor Position
.Ve
.PP
These name accept following optional numerical parameters, using comma
(',') or semicolon (';') to separate multiple ones, with optional
braces.  For example, color spec \f(CW\*(C`DK/544\*(C'\fR can be described as
\&\f(CW\*(C`{SGR1;30;48;5;224}\*(C'\fR or more readable \f(CW\*(C`{SGR(1,30,48,5,224)}\*(C'\fR.
.SH "COLOR NAMES"
.IX Header "COLOR NAMES"
Color names are experimentally supported in this version.  Currently
names are listed in Graphics::ColorNames::X module.  Following
colors are available.
.PP
See <https://en.wikipedia.org/wiki/X11_color_names>.
.PP
.Vb 2
\&    gray gray0 .. gray100
\&    grey grey0 .. grey100
\&
\&    aliceblue antiquewhite antiquewhite1 antiquewhite2 antiquewhite3
\&    antiquewhite4 aqua aquamarine aquamarine1 aquamarine2 aquamarine3
\&    aquamarine4 azure azure1 azure2 azure3 azure4 beige bisque bisque1
\&    bisque2 bisque3 bisque4 black blanchedalmond blue blue1 blue2 blue3
\&    blue4 blueviolet brown brown1 brown2 brown3 brown4 burlywood
\&    burlywood1 burlywood2 burlywood3 burlywood4 cadetblue cadetblue1
\&    cadetblue2 cadetblue3 cadetblue4 chartreuse chartreuse1 chartreuse2
\&    chartreuse3 chartreuse4 chocolate chocolate1 chocolate2 chocolate3
\&    chocolate4 coral coral1 coral2 coral3 coral4 cornflowerblue cornsilk
\&    cornsilk1 cornsilk2 cornsilk3 cornsilk4 crimson cyan cyan1 cyan2 cyan3
\&    cyan4 darkblue darkcyan darkgoldenrod darkgoldenrod1 darkgoldenrod2
\&    darkgoldenrod3 darkgoldenrod4 darkgray darkgreen darkgrey darkkhaki
\&    darkmagenta darkolivegreen darkolivegreen1 darkolivegreen2
\&    darkolivegreen3 darkolivegreen4 darkorange darkorange1 darkorange2
\&    darkorange3 darkorange4 darkorchid darkorchid1 darkorchid2 darkorchid3
\&    darkorchid4 darkred darksalmon darkseagreen darkseagreen1
\&    darkseagreen2 darkseagreen3 darkseagreen4 darkslateblue darkslategray
\&    darkslategray1 darkslategray2 darkslategray3 darkslategray4
\&    darkslategrey darkturquoise darkviolet deeppink deeppink1 deeppink2
\&    deeppink3 deeppink4 deepskyblue deepskyblue1 deepskyblue2 deepskyblue3
\&    deepskyblue4 dimgray dimgrey dodgerblue dodgerblue1 dodgerblue2
\&    dodgerblue3 dodgerblue4 firebrick firebrick1 firebrick2 firebrick3
\&    firebrick4 floralwhite forestgreen fuchsia gainsboro ghostwhite gold
\&    gold1 gold2 gold3 gold4 goldenrod goldenrod1 goldenrod2 goldenrod3
\&    goldenrod4 honeydew honeydew1 honeydew2 honeydew3 honeydew4 hotpink
\&    hotpink1 hotpink2 hotpink3 hotpink4 indianred indianred1 indianred2
\&    indianred3 indianred4 indigo ivory ivory1 ivory2 ivory3 ivory4 khaki
\&    khaki1 khaki2 khaki3 khaki4 lavender lavenderblush lavenderblush1
\&    lavenderblush2 lavenderblush3 lavenderblush4 lawngreen lemonchiffon
\&    lemonchiffon1 lemonchiffon2 lemonchiffon3 lemonchiffon4 lightblue
\&    lightblue1 lightblue2 lightblue3 lightblue4 lightcoral lightcyan
\&    lightcyan1 lightcyan2 lightcyan3 lightcyan4 lightgoldenrod
\&    lightgoldenrod1 lightgoldenrod2 lightgoldenrod3 lightgoldenrod4
\&    lightgoldenrodyellow lightgray lightgreen lightgrey lightpink
\&    lightpink1 lightpink2 lightpink3 lightpink4 lightsalmon lightsalmon1
\&    lightsalmon2 lightsalmon3 lightsalmon4 lightseagreen lightskyblue
\&    lightskyblue1 lightskyblue2 lightskyblue3 lightskyblue4 lightslateblue
\&    lightslategray lightslategrey lightsteelblue lightsteelblue1
\&    lightsteelblue2 lightsteelblue3 lightsteelblue4 lightyellow
\&    lightyellow1 lightyellow2 lightyellow3 lightyellow4 lime limegreen
\&    linen magenta magenta1 magenta2 magenta3 magenta4 maroon maroon1
\&    maroon2 maroon3 maroon4 mediumaquamarine mediumblue mediumorchid
\&    mediumorchid1 mediumorchid2 mediumorchid3 mediumorchid4 mediumpurple
\&    mediumpurple1 mediumpurple2 mediumpurple3 mediumpurple4 mediumseagreen
\&    mediumslateblue mediumspringgreen mediumturquoise mediumvioletred
\&    midnightblue mintcream mistyrose mistyrose1 mistyrose2 mistyrose3
\&    mistyrose4 moccasin navajowhite navajowhite1 navajowhite2 navajowhite3
\&    navajowhite4 navy navyblue oldlace olive olivedrab olivedrab1
\&    olivedrab2 olivedrab3 olivedrab4 orange orange1 orange2 orange3
\&    orange4 orangered orangered1 orangered2 orangered3 orangered4 orchid
\&    orchid1 orchid2 orchid3 orchid4 palegoldenrod palegreen palegreen1
\&    palegreen2 palegreen3 palegreen4 paleturquoise paleturquoise1
\&    paleturquoise2 paleturquoise3 paleturquoise4 palevioletred
\&    palevioletred1 palevioletred2 palevioletred3 palevioletred4 papayawhip
\&    peachpuff peachpuff1 peachpuff2 peachpuff3 peachpuff4 peru pink pink1
\&    pink2 pink3 pink4 plum plum1 plum2 plum3 plum4 powderblue purple
\&    purple1 purple2 purple3 purple4 rebeccapurple red red1 red2 red3 red4
\&    rosybrown rosybrown1 rosybrown2 rosybrown3 rosybrown4 royalblue
\&    royalblue1 royalblue2 royalblue3 royalblue4 saddlebrown salmon salmon1
\&    salmon2 salmon3 salmon4 sandybrown seagreen seagreen1 seagreen2
\&    seagreen3 seagreen4 seashell seashell1 seashell2 seashell3 seashell4
\&    sienna sienna1 sienna2 sienna3 sienna4 silver skyblue skyblue1
\&    skyblue2 skyblue3 skyblue4 slateblue slateblue1 slateblue2 slateblue3
\&    slateblue4 slategray slategray1 slategray2 slategray3 slategray4
\&    slategrey snow snow1 snow2 snow3 snow4 springgreen springgreen1
\&    springgreen2 springgreen3 springgreen4 steelblue steelblue1 steelblue2
\&    steelblue3 steelblue4 tan tan1 tan2 tan3 tan4 teal thistle thistle1
\&    thistle2 thistle3 thistle4 tomato tomato1 tomato2 tomato3 tomato4
\&    turquoise turquoise1 turquoise2 turquoise3 turquoise4 violet violetred
\&    violetred1 violetred2 violetred3 violetred4 webgray webgreen webgrey
\&    webmaroon webpurple wheat wheat1 wheat2 wheat3 wheat4 white whitesmoke
\&    x11gray x11green x11grey x11maroon x11purple yellow yellow1 yellow2
\&    yellow3 yellow4 yellowgreen
.Ve
.PP
Enclose them by angle bracket to use, like:
.PP
.Vb 1
\&    <deeppink>/<lightyellow>
.Ve
.PP
Although these colors are defined in 24bit value, they are mapped to
6x6x6 216 colors by default.  Set \f(CW$RGB24\fR module variable to use
24bit color mode.
.SH "FUNCTION SPEC"
.IX Header "FUNCTION SPEC"
It is also possible to set arbitrary function which is called to
handle string in place of color, and that is not necessarily concerned
with color.  This scheme is quite powerful and the module name itself
may be somewhat misleading.  Spec string which start with \f(CW\*(C`sub{\*(C'\fR is
considered as a function definition.  So
.PP
.Vb 1
\&    % example \-\-cm \*(Aqsub{uc}\*(Aq
.Ve
.PP
set the function object in the color entry.  And when \f(CW\*(C`color\*(C'\fR method
is called with that object, specified function is called instead of
producing \s-1ANSI\s0 color sequence.  Function is supposed to get the target
text as a global variable \f(CW$_\fR, and return the result as a string.
Function \f(CW\*(C`sub{uc}\*(C'\fR in the above example returns uppercase version of
\&\f(CW$_\fR.
.PP
If your script prints file name according to the color spec labeled by
\&\fB\s-1FILE\s0\fR, then
.PP
.Vb 1
\&    % example \-\-cm FILE=R
.Ve
.PP
prints the file name in red, but
.PP
.Vb 1
\&    % example \-\-cm FILE=sub{uc}
.Ve
.PP
will print the name in uppercases.
.PP
Spec start with \f(CW\*(C`&\*(C'\fR is considered as a function name.  If the
function \f(CW\*(C`double\*(C'\fR is defined like:
.PP
.Vb 1
\&    sub double { $_ . $_ }
.Ve
.PP
then, command
.PP
.Vb 1
\&    % example \-\-cm \*(Aq&double\*(Aq
.Ve
.PP
produces doubled text by \f(CW\*(C`color\*(C'\fR method.  Function can also take
parameters, so the next example
.PP
.Vb 4
\&    sub repeat {
\&        my %opt = @_;
\&        $_ x $opt{count} // 1;
\&    }
\&
\&    % example \-\-cm \*(Aq&repeat(count=3)\*(Aq
.Ve
.PP
produces tripled text.
.PP
Function object is created by <Getopt::EX::Func> module.  Take a look
at the module for detail.
.SH "EXAMPLE CODE"
.IX Header "EXAMPLE CODE"
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    use strict;
\&    use warnings;
\&
\&    my @opt_colormap;
\&    use Getopt::EX::Long;
\&    GetOptions("colormap|cm=s" => \e@opt_colormap);
\&    
\&    my %colormap = ( # default color map
\&        FILE => \*(AqR\*(Aq,
\&        LINE => \*(AqG\*(Aq,
\&        TEXT => \*(AqB\*(Aq,
\&        );
\&    my @colors;
\&    
\&    require Getopt::EX::Colormap;
\&    my $handler = Getopt::EX::Colormap\->new(
\&        HASH => \e%colormap,
\&        LIST => \e@colors,
\&        );
\&    
\&    $handler\->load_params(@opt_colormap);
\&
\&    for (0 .. $#colors) {
\&        print $handler\->index_color($_, "COLOR $_"), "\en";
\&    }
\&    
\&    for (sort keys %colormap) {
\&        print $handler\->color($_, $_), "\en";
\&    }
.Ve
.PP
This sample program is complete to work.  If you save this script as a
file \fIexample\fR, try to put following contents in \fI~/.examplerc\fR and
see what happens.
.PP
.Vb 5
\&    option default \e
\&        \-\-cm 555/100,555/010,555/001 \e
\&        \-\-cm 555/011,555/101,555/110 \e
\&        \-\-cm 555/021,555/201,555/210 \e
\&        \-\-cm 555/012,555/102,555/120
.Ve
.SH "METHOD"
.IX Header "METHOD"
.IP "\fBcolor\fR \fIlabel\fR, \s-1TEXT\s0" 4
.IX Item "color label, TEXT"
.PD 0
.IP "\fBcolor\fR \fIcolor_spec\fR, \s-1TEXT\s0" 4
.IX Item "color color_spec, TEXT"
.PD
Return colored text indicated by label or color spec string.
.IP "\fBindex_color\fR \fIindex\fR, \s-1TEXT\s0" 4
.IX Item "index_color index, TEXT"
Return colored text indicated by \fIindex\fR.  If the index is bigger
than color list, it rounds up.
.IP "\fBnew\fR" 4
.IX Item "new"
.PD 0
.IP "\fBappend\fR" 4
.IX Item "append"
.IP "\fBload_params\fR" 4
.IX Item "load_params"
.PD
See super class Getopt::EX::LabeledParam.
.IP "\fBcolormap\fR" 4
.IX Item "colormap"
Return string which can be used for option definition.  Some
parameters can be specified like:
.Sp
.Vb 1
\&    $obj\->colormap(name => "\-\-newopt", option => "\-\-colormap");
.Ve
.RS 4
.IP "\fBname\fR" 4
.IX Item "name"
Specify new option name.
.IP "\fBoption\fR" 4
.IX Item "option"
Specify option name for colormap setup.
.IP "\fBsort\fR" 4
.IX Item "sort"
Default value is \f(CW\*(C`length\*(C'\fR and sort options by their length.  Use
\&\f(CW\*(C`alphabet\*(C'\fR to sort them alphabetically.
.IP "\fBnoalign\fR" 4
.IX Item "noalign"
Colormap label is aligned so that `=' marks are lined vertically.
Give true value to \fBnoalign\fR parameter, if you don't like this
behavior.
.RE
.RS 4
.RE
.SH "FUNCTION"
.IX Header "FUNCTION"
.IP "\fBcolorize\fR(\fIcolor_spec\fR, \fItext\fR)" 4
.IX Item "colorize(color_spec, text)"
.PD 0
.IP "\fBcolorize24\fR(\fIcolor_spec\fR, \fItext\fR)" 4
.IX Item "colorize24(color_spec, text)"
.PD
Return colorized version of given text.
.Sp
\&\fBcolorize\fR produces 256 or 24bit colors depending on the value of
\&\f(CW$Getopt::EX::Colormap::RGB24\fR variable and environment
\&\f(CW\*(C`GETOPTEX_RGB24\*(C'\fR.
.Sp
\&\fBcolorize24\fR always produces 24bit color sequence for 24bit/12bit
color spec.
.IP "\fBansi_code\fR(\fIcolor_spec\fR)" 4
.IX Item "ansi_code(color_spec)"
Produces introducer sequence for given spec.  Reset code can be taken
by \fBansi_code(\*(L"Z\*(R")\fR.
.IP "\fBansi_pair\fR(\fIcolor_spec\fR)" 4
.IX Item "ansi_pair(color_spec)"
Produces introducer and recover sequences for given spec. Recover
sequence includes \fIErase Line\fR related control with simple \s-1SGR\s0 reset
code.
.IP "\fBcsi_code\fR(\fIname\fR, \fIparams\fR)" 4
.IX Item "csi_code(name, params)"
Produce \s-1CSI\s0 (Control Sequence Introducer) sequence by name with
numeric parameters.  \fIname\fR is one of \s-1CUU, CUD, CUF, CUB, CNL, CPL,
CHA, CUP, ED, EL, SU, SD, HVP, SGR, SCP, RCP.\s0
.IP "\fBcolortable\fR([\fIwidth\fR])" 4
.IX Item "colortable([width])"
Print visual 256 color matrix table on the screen.  Default \fIwidth\fR
is 144.  Use like this:
.Sp
.Vb 1
\&    perl \-MGetopt::EX::Colormap=colortable \-e colortable
.Ve
.SS "\s-1EXAMPLE\s0"
.IX Subsection "EXAMPLE"
If you want to use this module instead of Term::ANSIColor, this
example code
.PP
.Vb 11
\&    use Term::ANSIColor;
\&    print color \*(Aqbold blue\*(Aq;
\&    print "This text is bold blue.\en";
\&    print color \*(Aqreset\*(Aq;
\&    print "This text is normal.\en";
\&    print colored("Yellow on magenta.", \*(Aqyellow on_magenta\*(Aq), "\en";
\&    print "This text is normal.\en";
\&    print colored [\*(Aqyellow on_magenta\*(Aq], \*(AqYellow on magenta.\*(Aq, "\en";
\&    print colored [\*(Aqred on_bright_yellow\*(Aq], \*(AqRed on bright yellow.\*(Aq, "\en";
\&    print colored [\*(Aqbright_red on_black\*(Aq], \*(AqBright red on black.\*(Aq, "\en";
\&    print "\en";
.Ve
.PP
can be written with Getopt::EX::Colormap like:
.PP
.Vb 11
\&    use Getopt::EX::Colormap qw(colorize ansi_code);
\&    print ansi_code \*(AqDB\*(Aq;
\&    print "This text is bold blue.\en";
\&    print ansi_code \*(AqZ\*(Aq;
\&    print "This text is normal.\en";
\&    print colorize(\*(AqY/M\*(Aq, "Yellow on magenta."), "\en";
\&    print "This text is normal.\en";
\&    print colorize(\*(AqY/M\*(Aq, \*(AqYellow on magenta.\*(Aq), "\en";
\&    print colorize(\*(AqR/y\*(Aq, \*(AqRed on bright yellow.\*(Aq), "\en";
\&    print colorize(\*(Aqr/K\*(Aq, \*(AqBright red on black.\*(Aq), "\en";
\&    print "\en";
.Ve
.SH "RESET SEQUENCE"
.IX Header "RESET SEQUENCE"
This module produces \fI\s-1RESET\s0\fR and \fIErase Line\fR sequence to recover
from colored text.  This is preferable to clear background color set
by scrolling in the middle of colored text at the bottom line of the
terminal.
.PP
However, some terminal, including Apple_Terminal, clear the text on
the cursor when \fIErase Line\fR sequence is received at the rightmost
column of the screen.  If you do not want this behavior, set module
variable \f(CW$Getopt::EX::Colormap::NO_RESET_EL\fR or
\&\f(CW\*(C`GETOPTEX_NO_RESET_EL\*(C'\fR environment.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Getopt::EX,
Getopt::EX::LabeledParam
.PP
<https://en.wikipedia.org/wiki/ANSI_escape_code>
.PP
Graphics::ColorNames::X
.PP
<https://en.wikipedia.org/wiki/X11_color_names>
