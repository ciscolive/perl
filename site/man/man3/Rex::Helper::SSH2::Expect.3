.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Rex::Helper::SSH2::Expect 3"
.TH Rex::Helper::SSH2::Expect 3 "2020-10-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rex::Helper::SSH2::Expect \- An Expect like module for Net::SSH2
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a module to have expect like features for Net::SSH2. This is the first version of this module. Please report bugs at GitHub <https://github.com/krimdomu/net\-ssh2\-expect>
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.IP "\(bu" 4
Net::SSH2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Rex::Helper::SSH2::Expect;
\&     
\& my $exp = Rex::Helper::SSH2::Expect\->new($ssh2);
\& $exp\->spawn("passwd");
\& $exp\->expect($timeout, [
\&                  qr/Enter new UNIX password:/ => sub {
\&                                          my ($exp, $line) = @_;
\&                                          $exp\->send($new_password);
\&                                        }
\&                ],
\&                [
\&                  qr/Retype new UNIX password:/ => sub {
\&                                          my ($exp, $line) = @_;
\&                                          $exp\->send($new_password);
\&                                        }
\&                ],
\&                [
\&                  qr/passwd: password updated successfully/ => sub {
\&                                                  my ($exp, $line) = @_;
\&                                                  $exp\->hard_close;
\&                                                }
\&                ]);
.Ve
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "new($ssh2)"
.IX Subsection "new($ssh2)"
Constructor: You need to parse an connected Net::SSH2 Object.
.SS "log_stdout(0|1)"
.IX Subsection "log_stdout(0|1)"
Log on \s-1STDOUT.\s0
.SS "log_file($file)"
.IX Subsection "log_file($file)"
Log everything to a file. \f(CW$file\fR can be a filename, a filehandle or a subRef.
.ie n .SS "spawn($command, @parameters)"
.el .SS "spawn($command, \f(CW@parameters\fP)"
.IX Subsection "spawn($command, @parameters)"
Spawn \f(CW$command\fR with \f(CW@parameters\fR as parameters.
.SS "\fBsoft_close()\fP"
.IX Subsection "soft_close()"
Currently only an alias to \fBhard_close()\fR;
.SS "\fBhard_close()\fP;"
.IX Subsection "hard_close();"
Stops the execution of the process.
.ie n .SS "expect($timeout, @match_patters)"
.el .SS "expect($timeout, \f(CW@match_patters\fP)"
.IX Subsection "expect($timeout, @match_patters)"
This method controls the execution of your process.
.SS "send($string)"
.IX Subsection "send($string)"
Send a string to the running command.
