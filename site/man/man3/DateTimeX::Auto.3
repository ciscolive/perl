.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DateTimeX::Auto 3"
.TH DateTimeX::Auto 3 "2018-06-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTimeX::Auto \- use DateTime without needing to call constructors
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use DateTimeX::Auto \-auto;
\& 
\& my $ga_start = \*(Aq2000\-04\-06\*(Aq + \*(AqP10Y\*(Aq;
\& printf("%s %s\en", $ga_start, ref $ga_start);  # 2010\-04\-06 DateTime
\& 
\& {
\&   no DateTimeX::Auto;
\&   my $string = \*(Aq2000\-04\-06\*(Aq;
\&   printf( "%s\en", ref($string) ? \*(AqRef\*(Aq : \*(AqNoRef\*(Aq );  # NoRef
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DateTime is awesome, but constructing \f(CW\*(C`DateTime\*(C'\fR objects can be
annoying. You often need to use one of the formatter modules, or call
\&\f(CW\*(C`DateTime\->new()\*(C'\fR with a bunch of values. If you've got a bunch of
constant dates in your code, then \f(CW\*(C`DateTimeX::Auto\*(C'\fR makes all this a bit
simpler.
.PP
It uses overload to overload the \f(CW\*(C`q()\*(C'\fR operator, automatically
turning all string constants that match particular regular expressions
into \f(CW\*(C`DateTime\*(C'\fR objects. It also overloads stringification to make sure
that \f(CW\*(C`DateTime\*(C'\fR objects get stringified back to exactly the format they
were given in.
.PP
The date formats supported are:
.PP
.Vb 4
\& yyyy\-mm\-dd
\& yyyy\-mm\-ddZ
\& yyyy\-mm\-ddThh:mm:ss
\& yyyy\-mm\-ddThh:mm:ssZ
.Ve
.PP
The optional trailing 'Z' puts the datetime into the \s-1UTC\s0 timezone. Otherwise
the datetime will be in DateTime's default (floating) timezone.
.PP
Fractional seconds are also supported, to an arbitrary number of decimal
places. However, as \f(CW\*(C`DateTime\*(C'\fR only supports nanosecond precision, any
digits after the ninth will be zeroed out.
.PP
.Vb 2
\& my $dt         =\*(Aq1234\-12\-12T12:34:56.123456789123456789\*(Aq;
\& print "$dt\en"; # 1234\-12\-12T12:34:56.123456789000000000
.Ve
.PP
Objects are blessed into the \f(CW\*(C`DateTimeX::Auto::DateTime\*(C'\fR class which
inherits from \f(CW\*(C`DateTime\*(C'\fR. They use UNIVERSAL::ref (if installed) to
masquerade as plain \f(CW\*(C`DateTime\*(C'\fR objects.
.PP
.Vb 1
\& print ref(\*(Aq2000\-01\-01\*(Aq)."\en";   # DateTime
.Ve
.PP
Additionally, \s-1ISO 8601\s0 durations are supported:
.PP
.Vb 2
\&  my $dt = \*(Aq2000\-01\-01\*(Aq;
\&  say( $dt + \*(AqP4Y2M12D\*(Aq );  # 2004\-03\-13
.Ve
.PP
Durations are possibly not quite as clever at preserving the incoming
string formatting.
.ie n .SS "The ""d"" and ""dt"" Functions"
.el .SS "The \f(CWd\fP and \f(CWdt\fP Functions"
.IX Subsection "The d and dt Functions"
As an alternative \f(CW\*(C`DateTimeX::Auto\*(C'\fR can export a function called \f(CW\*(C`d\*(C'\fR.
This might be useful if you'd prefer not to have every string constant in
your code turned into a \f(CW\*(C`DateTime\*(C'\fR.
.PP
.Vb 2
\& use DateTimeX::Auto \*(Aqd\*(Aq;
\& my $dt = d(\*(Aq2000\-01\-01\*(Aq);
.Ve
.PP
If \f(CW\*(C`d\*(C'\fR is called with a string that is in an unrecognised format, it
croaks. If called with no arguments, returns a \f(CW\*(C`DateTime\*(C'\fR representing
the current time.
.PP
An alias \f(CW\*(C`dt\*(C'\fR is also available. They're exactly the same.
.ie n .SS "The ""dur"" Function"
.el .SS "The \f(CWdur\fP Function"
.IX Subsection "The dur Function"
Called with an \s-1ISO 8601\s0 duration string, returns a
DateTimeX::Auto::Duration object.
.SS "Object-Oriented Interface"
.IX Subsection "Object-Oriented Interface"
This somewhat negates the purpose of the module, but it's also possible
to use it without exporting anything, in the usual normal Perl object-oriented
fashion:
.PP
.Vb 1
\& use DateTimeX::Auto;
\& 
\& my $dt1 = DateTimeX::Auto::DateTime\->new(\*(Aq2000\-01\-01T12:00:00.1234\*(Aq);
\& 
\& # Traditional DateTime style
\& my $dt2 = DateTimeX::Auto::DateTime\->new(
\&   year  => 2000,
\&   month => 2,
\&   day   => 3,
\& );
.Ve
.PP
Called in the traditional DateTime style, throws an exception if the date
isn't valid. Called in the DateTimeX::Auto::DateTime stringy style, returns
undef if the date isn't in a recognised format, but throws if it's otherwise
invalid (e.g. 30th of February).
.PP
There is similarly a DateTimeX::Auto::Duration class which is a similar
thin wrapper around DateTime::Duration.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\& use DateTimeX::Auto \*(Aq:auto\*(Aq;
\& 
\& my $date = \*(Aq2000\-01\-01\*(Aq;
\& while ($date < \*(Aq2000\-02\-01\*(Aq)
\& {
\&   print "$date\en";
\&   $date += \*(AqP1D\*(Aq; # add one day
\& }
\&
\& use DateTimeX::Auto \*(Aqd\*(Aq;
\& 
\& my $date = d(\*(Aq2000\-01\-01\*(Aq);
\& while ($date < d(\*(Aq2000\-02\-01\*(Aq))
\& {
\&   print "$date\en";
\&   $date += dur(\*(AqP1D\*(Aq); # add one day
\& }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DateTime, DateTime::Duration, DateTimeX::Easy.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2011\-2012, 2014 Toby Inkster
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
