.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::SRG 3"
.TH Infoblox::DNS::SRG 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::SRG \- Create a shared record group.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A shared record group (\s-1SRG\s0) is created to contain \s-1DNS\s0 shared records and share them between different zones. For example, if a group of \s-1DNS\s0 records needs to be in three different zones, you can include the records in a shared record group and assign the group to the three zones. For more information about shared record groups and shared records, please refer to Infoblox Administrator Guide.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 9
\& my $srg = Infoblox::DNS::SRG\->new(
\&     name                        => $string,               #Required
\&     comment                     => $string,               #Optional / Default is undefined
\&     extattrs                    => { $string => $extattr, ... },      #Optional / Default is undefined
\&     extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, #Optional / Default is undefined
\&     override_record_name_policy => "true" | "false",      #Optional / Default is "false"
\&     record_name_policy          => $string,               #Optional / Required when override_record_name_policy is set to "true". Default is undefined
\&     zone_association            => [$Zone1, $Zone2, ...]  #Optional / Default is undefined
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DNS SRG\s0 object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an \s-1SRG\s0 object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Construct an object
\& my $srg = Infoblox::DNS::SRG\->new (
\&     name     => "test_srg",
\&     comment  => "this is a demo SRG object",
\&     );
\& # Submit for addition
\& my $response = $session\->add( $srg );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DNS SRG object:
\&
\&  name \- Required. A SRG name in string format.
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::SRG",
\&     name   => "test_srg");
\&
\& # get all shared record group objects with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::SRG",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use method to modify the comment.
\& $srg\->comment("this is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $srg );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to submit to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::SRG",
\&     name   => "test_srg");
\& # Find the desired object from the retrieved list.
\& my $desired_srg = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_srg );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DNS SRG\s0 record objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DNS SRG record object:
\&
\&  name \- Required. A SRG name in string format (regular expression).
\&  comment \- Optional. A comment in string format (regular expression).
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # search for all DNS SRG objects with name containing \*(Aqtest\*(Aq
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::SRG",
\&     name   => ".*test.*");
\&
\& # search all DNS SRG objects with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DNS::SRG",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a \s-1DNS SRG\s0 object.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment of a \s-1DNS SRG\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $srg\->comment();
\& #Modify comment
\& $srg\->comment("Modifying the DNS SRG comment");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS SRG\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $srg\->extattrs();
\& #Modify extattrs
\& $srg\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS SRG\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $srg\->extensible_attributes();
\& #Modify extensible attributes
\& $srg\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the shared record group name of a \s-1DNS SRG\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of shared record group.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $srg\->name();
\& #Modify name
\& $srg\->name("test_srg");
.Ve
.RE
.RS 4
.RE
.SS "override_record_name_policy( )"
.IX Subsection "override_record_name_policy( )"
.RS 4
Use this method to set or retrieve the override record name policy flag of a \s-1DNS SRG\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false, which means this \s-1SRG\s0 will use default record name policy setting defined at grid level.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_record_name_policy flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_record_name_policy
\& my $override = $srg\->doverride_record_name_policy();
\& #Modify override_record_name_policy
\& $srg\->override_record_name_policy("true");
.Ve
.RE
.RS 4
.RE
.SS "record_name_policy( )"
.IX Subsection "record_name_policy( )"
.RS 4
Use this method to set or retrieve the record name policy of a \s-1DNS SRG\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the record name policy defined at the grid level. See Infoblox::Grid::DNS for more information about record name policies.
.Sp
This property is required only if override_record_name_policy is set to \*(L"true\*(R", which means \s-1SRG\s0 object will use its own record name policy.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get record name policy
\& my $policy = $srg\->record_name_policy();
\& #Modify record name policy
\& $srg\->record_name_policy("Allow Any");
.Ve
.RE
.RS 4
.RE
.SS "zone_association( )"
.IX Subsection "zone_association( )"
.RS 4
Use this method to set or retrieve the zone association of a \s-1DNS SRG\s0 object. All zone objects in a association list are associated with the \s-1SRG\s0 object, which means that all shared records in this \s-1SRG\s0 will be shared among these zones. For more information about \s-1SRG\s0 and zone association, please refer to Infoblox Administrator's Guide.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference of defined Infoblox::DNS::Zone objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get zone association
\& my $zone_associations = $srg\->zone_association();
\& #Modify zone associations, list of Infoblox::DNS::Zone objects
\& $srg\->zone_association([$zone1,$zone2,$zone3]);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS SRG\s0 object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox Appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the zone prior to an SRG object insertion
\& my $zone = Infoblox::DNS::Zone\->new(name => "domain.com");
\& unless ($zone) {
\&    die("Construct zone failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& #Verify if the zone exists
\& my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "domain.com");
\& unless ($object) {
\&    print "Zone does not exist on server, safe to add the zone\en";
\&    $session\->add($zone)
\&       or die("Add zone failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Zone added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS SRG\s0 object\fR
.PP
.Vb 10
\& #Construct a DNS SRG object
\& my $srg = Infoblox::DNS::SRG\->new(
\&     name     => "test_srg",
\&     comment  => "this is a demo srg object",
\&     zone_association=> [ $zone ],
\&     override_record_name_policy => "true",
\&     record_name_policy=>"Allow Underscore"
\& );
\& unless ($srg) {
\&    die("Construct DNS SRG failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DNS SRG object created successfully\en";
\&
\& #Add the DNS SRG record object to Infoblox Appliance through a session
\& $session\->add($srg)
\&     or die("Add SRG object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS SRG object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS SRG\s0 record\fR
.PP
.Vb 11
\& #Search all SRG records with name containing \*(Aqtest\*(Aq
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::SRG",
\&     name   => ".*test.*"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search SRG failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS SRG object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS SRG\s0 record\fR
.PP
.Vb 11
\& #Get SRG object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::SRG",
\&     name   => "test_srg"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get SRG failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS SRG object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified SRG object
\& $object\->comment("Updated comment.");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify SRG object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS SRG object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DNS SRG\s0 object\fR
.PP
.Vb 11
\& #Get SRG object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::SRG",
\&     name   => "test_srg"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get SRG object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get SRG object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove SRG object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS SRG object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::Zone, Infoblox::Grid::DNS, Infoblox::Grid::RecordNamePolicy, Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
