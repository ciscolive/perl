.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::mysql::Results 3"
.TH Mojo::mysql::Results 3 "2019-08-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::mysql::Results \- Results
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::mysql::Results;
\&
\&  my $results = Mojo::mysql::Results\->new(db => $db, sth => $sth);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::mysql::Results is a container for statement handles used by
Mojo::mysql::Database.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::mysql::Results implements the following attributes.
.SS "db"
.IX Subsection "db"
.Vb 2
\&  my $db   = $results\->db;
\&  $results = $results\->db(Mojo::mysql::Database\->new);
.Ve
.PP
Mojo::mysql::Database object these results belong to.
.SS "sth"
.IX Subsection "sth"
.Vb 2
\&  my $sth  = $results\->sth;
\&  $results = $results\->sth($sth);
.Ve
.PP
Statement handle results are fetched from.
.SH "METHODS"
.IX Header "METHODS"
Mojo::mysql::Results inherits all methods from Mojo::Base and implements
the following new ones.
.SS "array"
.IX Subsection "array"
.Vb 1
\&  my $array = $results\->array;
.Ve
.PP
Fetch next row from \*(L"sth\*(R" and return it as an array reference. Note that
\&\*(L"finish\*(R" needs to be called if you are not fetching all the possible rows.
.PP
.Vb 4
\&  # Process one row at a time
\&  while (my $next = $results\->array) {
\&    say $next\->[3];
\&  }
.Ve
.SS "arrays"
.IX Subsection "arrays"
.Vb 1
\&  my $collection = $results\->arrays;
.Ve
.PP
Fetch all rows and return them as a Mojo::Collection object containing
array references.
.PP
.Vb 2
\&  # Process all rows at once
\&  say $results\->arrays\->reduce(sub { $a\->[3] + $b\->[3] });
.Ve
.SS "columns"
.IX Subsection "columns"
.Vb 1
\&  my $columns = $results\->columns;
.Ve
.PP
Return column names as an array reference.
.SS "expand"
.IX Subsection "expand"
.Vb 2
\&  $results = $results\->expand;
\&  $results = $results\->expand(1)
.Ve
.PP
Decode \f(CW\*(C`json\*(C'\fR fields automatically to Perl values for all rows. Passing in \*(L"1\*(R"
as an argument will force expanding all columns that looks like a \s-1JSON\s0 array or
object.
.PP
.Vb 2
\&  # Expand JSON
\&  $results\->expand\->hashes\->map(sub { $_\->{foo}{bar} })\->join("\en")\->say;
.Ve
.PP
Note that this method is \s-1EXPERIMENTAL.\s0
.PP
See also <https://dev.mysql.com/doc/refman/8.0/en/json.html> for more details
on how to work with \s-1JSON\s0 in MySQL.
.SS "finish"
.IX Subsection "finish"
.Vb 1
\&  $results\->finish;
.Ve
.PP
Indicate that you are finished with \*(L"sth\*(R" and will not be fetching all the
remaining rows.
.SS "hash"
.IX Subsection "hash"
.Vb 1
\&  my $hash = $results\->hash;
.Ve
.PP
Fetch next row from \*(L"sth\*(R" and return it as a hash reference. Note that
\&\*(L"finish\*(R" needs to be called if you are not fetching all the possible rows.
.PP
.Vb 4
\&  # Process one row at a time
\&  while (my $next = $results\->hash) {
\&    say $next\->{money};
\&  }
.Ve
.SS "hashes"
.IX Subsection "hashes"
.Vb 1
\&  my $collection = $results\->hashes;
.Ve
.PP
Fetch all rows and return them as a Mojo::Collection object containing hash
references.
.PP
.Vb 2
\&  # Process all rows at once
\&  say $results\->hashes\->reduce(sub { $a\->{money} + $b\->{money} });
.Ve
.SS "new"
.IX Subsection "new"
.Vb 2
\&  my $results = Mojo::mysql::Results\->new(db => $db, sth => $sth);
\&  my $results = Mojo::mysql::Results\->new({db => $db, sth => $sth});
.Ve
.PP
Construct a new Mojo::mysql::Results object.
.SS "rows"
.IX Subsection "rows"
.Vb 1
\&  my $num = $results\->rows;
.Ve
.PP
Number of rows.
.SS "text"
.IX Subsection "text"
.Vb 1
\&  my $text = $results\->text;
.Ve
.PP
Fetch all rows and turn them into a table with \*(L"tablify\*(R" in Mojo::Util.
.SS "more_results"
.IX Subsection "more_results"
.Vb 4
\&  do {
\&    my $columns = $results\->columns;
\&    my $arrays = $results\->arrays;
\&  } while ($results\->more_results);
.Ve
.PP
Handle multiple results.
.SS "affected_rows"
.IX Subsection "affected_rows"
.Vb 1
\&  my $affected = $results\->affected_rows;
.Ve
.PP
Number of affected rows by the query. The number reported is dependant from
\&\f(CW\*(C`mysql_client_found_rows\*(C'\fR or \f(CW\*(C`mariadb_client_found_rows\*(C'\fR option in
Mojo::mysql. For example
.PP
.Vb 1
\&  UPDATE $table SET id = 1 WHERE id = 1
.Ve
.PP
would return 1 if \f(CW\*(C`mysql_client_found_rows\*(C'\fR or mariadb_client_found_rows is
set, and 0 otherwise.
.SS "last_insert_id"
.IX Subsection "last_insert_id"
.Vb 1
\&  my $last_id = $results\->last_insert_id;
.Ve
.PP
That value of \f(CW\*(C`AUTO_INCREMENT\*(C'\fR column if executed query was \f(CW\*(C`INSERT\*(C'\fR in a table with
\&\f(CW\*(C`AUTO_INCREMENT\*(C'\fR column.
.SS "warnings_count"
.IX Subsection "warnings_count"
.Vb 1
\&  my $warnings = $results\->warnings_count;
.Ve
.PP
Number of warnings raised by the executed query.
.SS "err"
.IX Subsection "err"
.Vb 1
\&  my $err = $results\->err;
.Ve
.PP
Error code receieved.
.SS "state"
.IX Subsection "state"
.Vb 1
\&  my $state = $results\->state;
.Ve
.PP
Error state receieved.
.SS "errstr"
.IX Subsection "errstr"
.Vb 1
\&  my $errstr = $results\->errstr;
.Ve
.PP
Error message receieved.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojo::mysql.
