.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::Aspect 3"
.TH MooseX::Aspect 3 "2012-10-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Aspect \- aspect\-oriented programming toolkit for Moose
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  {
\&    package User;
\&    use Moose;
\&    ...;
\&  }
\&  
\&  {
\&    package Computer;
\&    use Moose;
\&    ...;
\&  }
\&  
\&  {
\&    package Logging;
\&    use MooseX::Aspect;
\&    
\&    has log_file => (is => \*(Aqrw\*(Aq);
\&    
\&    sub log {
\&      $_[0]\->log_file\->append($_[1]);
\&    }
\&    
\&    apply_to \*(AqUser\*(Aq, role {
\&      before login => sub {
\&        my $self   = shift;
\&        my $aspect = _\|_PACKAGE_\|_\->instance;
\&        $aspect\->log($self\->name . " logged in");
\&      };
\&    };
\&    
\&    apply_to \*(AqComputer\*(Aq, role {
\&      after connect  => sub {
\&        my $self   = shift;
\&        my $aspect = _\|_PACKAGE_\|_\->instance;
\&        $aspect\->log($self\->id . " connected to network");
\&      };
\&      after disconnect  => sub {
\&        my $self   = shift;
\&        my $aspect = _\|_PACKAGE_\|_\->instance;
\&        $aspect\->log($self\->id . " disconnected from network");
\&      };
\&    };
\&  }
\&  
\&  Logging\->setup;  # apply all the aspect\*(Aqs roles to packages
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Certain parts of code are cross-cutting concerns. A classic example is the
one shown in the example: logging. Other cross-cutting concerns include
access control, change monitoring (e.g. setting dirty flags) and
database transaction management. Aspects help you isolate cross-cutting
concerns into modules.
.PP
In Moose terms, an aspect is a package that defines multiple Moose roles,
along with instructions as to what packages the roles should be applied to.
.SS "Sugar"
.IX Subsection "Sugar"
.ie n .IP """apply_to PACKAGE, role { ... };""" 4
.el .IP "\f(CWapply_to PACKAGE, role { ... };\fR" 4
.IX Item "apply_to PACKAGE, role { ... };"
The \f(CW\*(C`apply_to\*(C'\fR and \f(CW\*(C`role\*(C'\fR functions are designed to be used together.
They define an anonymous role and specify the package (which may be a
class or another role) it is intended to be composed with.
.Sp
The role definition is a more limited version of a standard Moose role
definition. In particular, it cannot define methods or attributes;
however it can define method modifiers or required methods.
.ie n .IP """create_join_point NAME""" 4
.el .IP "\f(CWcreate_join_point NAME\fR" 4
.IX Item "create_join_point NAME"
Defines a \*(L"join point\*(R". That is, a hook/event that packages employing
this aspect can trigger, and that roles within this aspect can supply
code to handle.
.Sp
For example, an aspect called Local::DatabaseIntegrity might define join
points called \*(L"db-begin\*(R" and \*(L"db-end\*(R" which application code can
trigger using:
.Sp
.Vb 3
\&   MooseX::Aspect::Util::join_point(
\&            \*(AqLocal::DatabaseIntegrity\*(Aq => \*(Aqdb\-begin\*(Aq
\&   );
.Ve
.Sp
Roles within the Local::DatabaseIntegrity aspect can then watch for this
join point (using the \f(CW\*(C`whenever\*(C'\fR sugar \- see below) and execute code
when it is reached. That code might for instance, begin and end database
transactions.
.ie n .IP """has ATTR => @OPTS""" 4
.el .IP "\f(CWhas ATTR => @OPTS\fR" 4
.IX Item "has ATTR => @OPTS"
Standard Moose attribute definition. An aspect is a class (albeit a
singleton) so can be instantiated and have attributes.
.ie n .IP """extends CLASS""" 4
.el .IP "\f(CWextends CLASS\fR" 4
.IX Item "extends CLASS"
Standard Moose superclass definition. An aspect is a class so can
inherit from other classes. It probably only makes sense to inherit
from other aspects.
.Sp
May only be used outside role definitions.
.ie n .IP """with ROLE""" 4
.el .IP "\f(CWwith ROLE\fR" 4
.IX Item "with ROLE"
Standard Moose role composition.
.Sp
May be used inside or outside role definitions.
.ie n .IP """before METHOD => sub { CODE };""" 4
.el .IP "\f(CWbefore METHOD => sub { CODE };\fR" 4
.IX Item "before METHOD => sub { CODE };"
Standard Moose before modifier. Within roles, uses MooseX::RoleQR
which means that the method name can be specified as a regular
expression.
.Sp
May be used inside or outside role definitions.
.ie n .IP """after METHOD => sub { CODE };""" 4
.el .IP "\f(CWafter METHOD => sub { CODE };\fR" 4
.IX Item "after METHOD => sub { CODE };"
Standard Moose after modifier. Within roles, uses MooseX::RoleQR
which means that the method name can be specified as a regular
expression.
.Sp
May be used inside or outside role definitions.
.ie n .IP """around METHOD => sub { CODE };""" 4
.el .IP "\f(CWaround METHOD => sub { CODE };\fR" 4
.IX Item "around METHOD => sub { CODE };"
Standard Moose around modifier. Within roles, uses MooseX::RoleQR
which means that the method name can be specified as a regular
expression.
.Sp
May be used inside or outside role definitions.
.ie n .IP """guard METHOD => sub { CODE };""" 4
.el .IP "\f(CWguard METHOD => sub { CODE };\fR" 4
.IX Item "guard METHOD => sub { CODE };"
Conceptually similar to \f(CW\*(C`before\*(C'\fR, but if the coderef returns false,
then the original method is not called, and false is returned instead.
See also MooseX::Mangle.
.Sp
May be used inside or outside role definitions.
.ie n .IP """whenever JOIN_POINT => sub { CODE };""" 4
.el .IP "\f(CWwhenever JOIN_POINT => sub { CODE };\fR" 4
.IX Item "whenever JOIN_POINT => sub { CODE };"
Code that is triggered to run whenever a join point is reached.
.Sp
May only be used inside role definitions.
.ie n .IP """requires METHOD""" 4
.el .IP "\f(CWrequires METHOD\fR" 4
.IX Item "requires METHOD"
Standard Moose required method.
.Sp
May only be used inside role definitions.
.SS "Methods"
.IX Subsection "Methods"
An aspect is a class (albeit a singleton), and thus can define methods.
By default it has the following methods:
.ie n .IP """new"", ""instance"", ""initialize(%args)""" 4
.el .IP "\f(CWnew\fR, \f(CWinstance\fR, \f(CWinitialize(%args)\fR" 4
.IX Item "new, instance, initialize(%args)"
See MooseX::Singleton.
.ie n .IP """setup""" 4
.el .IP "\f(CWsetup\fR" 4
.IX Item "setup"
By default, when an aspect is loaded the roles it defines are not actually
composed with anything. You need to call the \f(CW\*(C`setup\*(C'\fR class method to compose
the roles.
.ie n .IP """is_setup""" 4
.el .IP "\f(CWis_setup\fR" 4
.IX Item "is_setup"
Class method indicating whether \f(CW\*(C`setup\*(C'\fR has happened.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs to
<http://rt.cpan.org/Dist/Display.html?Queue=MooseX\-Aspect>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Moose,
Aspect.
.PP
MooseX::Aspect::Util,
MooseX::Singleton,
MooseX::RoleQR.
.PP
<http://en.wikipedia.org/wiki/Aspect\-oriented_programming>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2012 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
