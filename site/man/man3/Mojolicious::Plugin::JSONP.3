.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::JSONP 3"
.TH Mojolicious::Plugin::JSONP 3 "2015-01-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::JSONP \- Render JSONP with transparent fallback to JSON
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  plugin JSONP => callback => \*(Aqcallback_function\*(Aq;
\&
\&  get \*(Aq/\*(Aq => sub {
\&    shift\->render_jsonp({one => \*(Aqtwo\*(Aq});
\&  };
\&
\&  # GET request:
\&  #  ?callback_function=my_function
\&
\&  # Response:
\&  #  my_function({"one":"two"})
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::JSONP is a helper for rendering \s-1JSONP\s0 
with a transparent fallback to \s-1JSON\s0 if a callback parameter is not specified.
.PP
The \fBrender_jsonp\fR helper renders a Perl reference as \s-1JSON,\s0 wrapped in a supplied callback.
If a callback is not supplied, only the \s-1JSON\s0 structure is returned.
.SS "Explanation"
.IX Subsection "Explanation"
Given the following configuration:
.PP
.Vb 1
\&  plugin JSONP => callback => \*(Aqcallback_function\*(Aq;
.Ve
.PP
And the following action:
.PP
.Vb 3
\&  get \*(Aq/\*(Aq {
\&    shift\->render_jsonp({one => \*(Aqtwo\*(Aq})
\&  };
.Ve
.PP
And this client (browser) request:
.PP
.Vb 1
\&  http://domain.com/?callback_function=my_function
.Ve
.PP
The following is returned:
.PP
.Vb 1
\&  my_function({"one":"two"});
.Ve
.PP
If the client request does not specify the expected callback function:
.PP
.Vb 1
\&  http://domain.com/  # No parameters specified
.Ve
.PP
Only the \s-1JSON\s0 is returned:
.PP
.Vb 1
\&    {"one":"two"}
.Ve
.PP
\&\fIOptionally\fR, specify the callback function name in the \fBrender_jsonp\fR helper:
.PP
.Vb 3
\&  get \*(Aq/\*(Aq => sub {
\&    shift\->render_jsonp(callback_function => {one => "two"});
\&  };
.Ve
.PP
Overriding plugin configuration, the following response is returned:
.PP
.Vb 1
\&  callback_function({"one":"two"})
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::JSONP inherits all methods from
Mojolicious::Plugin and implements the following new ones.
.ie n .SS """register"""
.el .SS "\f(CWregister\fP"
.IX Subsection "register"
.Vb 1
\&  $plugin\->register(Mojolicious\->new);
.Ve
.PP
Register plugin in Mojolicious application.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
