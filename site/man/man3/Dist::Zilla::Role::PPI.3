.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::Role::PPI 3"
.TH Dist::Zilla::Role::PPI 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::Role::PPI \- a role for plugins which use PPI
.SH "VERSION"
.IX Header "VERSION"
version 6.017
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This role provides some common utilities for plugins which use \s-1PPI\s0.
.SH "METHODS"
.IX Header "METHODS"
.SS "ppi_document_for_file"
.IX Subsection "ppi_document_for_file"
.Vb 1
\&  my $document = $self\->ppi_document_for_file($file);
.Ve
.PP
Given a dzil file object (anything that does Dist::Zilla::Role::File), this
method returns a new PPI::Document for that file's content.
.PP
Internally, this method caches these documents. If multiple plugins want a
document for the same file, this avoids reparsing it.
.SS "save_ppi_document_to_file"
.IX Subsection "save_ppi_document_to_file"
.Vb 1
\&  my $document = $self\->save_ppi_document_to_file($document,$file);
.Ve
.PP
Given a PPI::Document and a dzil file object (anything that does
Dist::Zilla::Role::File), this method saves the serialized document in the
file.
.PP
It also updates the internal \s-1PPI\s0 document cache with the new document.
.SS "document_assigns_to_variable"
.IX Subsection "document_assigns_to_variable"
.Vb 1
\&  if( $self\->document_assigns_to_variable($document, \*(Aq$FOO\*(Aq)) { ... }
.Ve
.PP
This method returns true if the document assigns to the given variable (the
sigil must be included).
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 üòè <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
