.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::SNMP::Mixin::Util 3"
.TH Net::SNMP::Mixin::Util 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SNMP::Mixin::Util \- helper class for Net::SNMP mixins
.SH "VERSION"
.IX Header "VERSION"
Version 0.14
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
A helper class for Net::SNMP mixins.
.PP
.Vb 1
\&  use Net::SNMP::Mixin::Util qw/idx2val hex2octet normalize_mac/;
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
The following routines are exported by request:
.IP "\fBidx2val($var_bind_list, \f(CB$base_oid\fB, [$pre], [$tail])\fR" 2
.IX Item "idx2val($var_bind_list, $base_oid, [$pre], [$tail])"
convert a var_bind_list into a index => value form,
removing the base_oid from oid.
.Sp
e.g. if base_oid is '1.3.6.1.2.1.17.1.4.1.2',
convert from:
.Sp
.Vb 2
\&  \*(Aq1.3.6.1.2.1.17.1.4.1.2.1\*(Aq => \*(Aqfoo\*(Aq
\&  \*(Aq1.3.6.1.2.1.17.1.4.1.2.2\*(Aq => \*(Aqbar\*(Aq
.Ve
.Sp
to:
.Sp
.Vb 2
\&  \*(Aq1\*(Aq => \*(Aqfoo\*(Aq
\&  \*(Aq2\*(Aq => \*(Aqbar\*(Aq
.Ve
.Sp
or if base_oid is '1.0.8802.4.1.1.12' and pre == 1 and tail == 2,
convert from:
.Sp
.Vb 7
\&  \*(Aq1.0.8802.4.1.1.12.0.10.0.0.2.99.185\*(Aq => \*(Aqfoo\*(Aq,
\&  \*(Aq1.0.8802.4.1.1.12.0.10.0.0.3.99.186\*(Aq => \*(Aqbar\*(Aq,
\&  \*(Aq1.0.8802.4.1.1.12.0.10.0.0.4.99.187\*(Aq => \*(Aqbaz\*(Aq,
\&  ^                 ^ ^        ^      ^    ^     ^
\&  |.....base_oid....|.|.index..|.tail.|    |value|
\&                     ^
\&  pre \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
.Ve
.Sp
to:
.Sp
.Vb 3
\&  \*(Aq10.0.0.2\*(Aq => \*(Aqfoo\*(Aq,
\&  \*(Aq10.0.0.3\*(Aq => \*(Aqbar\*(Aq,
\&  \*(Aq10.0.0.4\*(Aq => \*(Aqbaz\*(Aq,
.Ve
.Sp
Returns the hash reference with index => value. Dies on error.
.IP "\fBhex2octet($hex_string)\fR" 2
.IX Item "hex2octet($hex_string)"
Sometimes it's importend that the returned \s-1SNMP\s0 values were untranslated by Net::SNMP. If already translated, we must reconvert it to pure OCTET_STRINGs for some calculations. Returns the input parameter untranslated if it's no string in the form /^0x[0\-9a\-f]+$/i .
.IP "\fBnormalize_mac($mac_address)\fR" 2
.IX Item "normalize_mac($mac_address)"
normalize \s-1MAC\s0 addresses to the \s-1IEEE\s0 form \s-1XX:XX:XX:XX:XX:XX\s0
.Sp
.Vb 1
\&    normalize the different formats like,
\&
\&              x:xx:x:xx:Xx:xx     to XX:XX:XX:XX:XX:XX
\&    or        xxxxxx\-xxxxxx       to XX:XX:XX:XX:XX:XX
\&    or        xx\-xx\-xx\-xx\-xx\-xx   to XX:XX:XX:XX:XX:XX
\&    or        xxxx.xxxx.xxxx      to XX:XX:XX:XX:XX:XX
\&    or     0x xxxxxxxxxxxx        to XX:XX:XX:XX:XX:XX
\&    or     plain packed \*(Aq6C\*(Aq      to XX:XX:XX:XX:XX:XX
.Ve
.Sp
or returns undef for format errors.
.IP "\fBpush_error($session, \f(CB$error_msg\fB)\fR" 2
.IX Item "push_error($session, $error_msg)"
Net::SNMP has only one slot for errors. During nonblocking calls it's possible that an error followed by a successful transaction is cleared before the user gets the chance to see the error. At least for the mixin modules we use an array buffer for all seen errors until they are explicit cleared.
.Sp
This utility routine helps the mixin authors to push an error into the buffer without the knowledge of the buffer internas.
.Sp
Dies if session isn't a Net::SNMP object or error_msg is missing.
.IP "\fB\fBget_init_slot()\fB\fR" 2
.IX Item "get_init_slot()"
Helper method, defines and returns the init hash slot for all mixin modules.
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
Net::SNMP, Sub::Exporter
.SH "BUGS, PATCHES & FIXES"
.IX Header "BUGS, PATCHES & FIXES"
There are no known bugs at the time of this release. However, if you spot a bug or are experiencing difficulties that are not explained within the \s-1POD\s0 documentation, please submit a bug to the \s-1RT\s0 system (see link below). However, it would help greatly if you are able to pinpoint problems or even supply a patch.
.PP
Fixes are dependant upon their severity and my availablity. Should a fix not be forthcoming, please feel free to (politely) remind me by sending an email to gaissmai@cpan.org .
.PP
.Vb 1
\&  RT: http://rt.cpan.org/Public/Dist/Display.html?Name=Net\-SNMP\-Mixin
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Karl Gaissmaier <karl.gaissmaier at uni\-ulm.de>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008\-2015 Karl Gaissmaier, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
