.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Nameserver::Address 3"
.TH Infoblox::DNS::Nameserver::Address 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Nameserver::Address \- NS Name Server object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1NS\s0 Name Server object provides \s-1IP\s0 address information for the name server associated with an \s-1NS\s0 record.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 4
\& my $rootns = Infoblox::DNS::Nameserver::Address\->new(
\&              address => $address,                  #Required
\&              auto_create_ptr => "true" | "false"   #Optional / Default "true"
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
You can apply the following functions to an \s-1NS\s0 Name Server object:
.SS "Infoblox::DNS::Record::NS\->nameservers( )"
.IX Subsection "Infoblox::DNS::Record::NS->nameservers( )"
.RS 4
Use this function to specify the \s-1IP\s0 addresses associated with the \s-1NS\s0 record. See Infoblox::DNS::Record::NS\->\fBnameservers()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Construct an NS Name Server object
\& my $ns1 = Infoblox::DNS::Nameserver::Address\->new(
\&              address  => "10.0.0.1"
\& );
\&
\& # Configure a name server address on the NS record object
\& $ns_record\->nameservers([$ns1]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods you can use to configure and retrieve the attribute values of an \s-1NS\s0 Name Server object.
.SS "address( )"
.IX Subsection "address( )"
.RS 4
Use this method to set or retrieve the IPv4 address of the name server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The IPv4 address (32 bits) of the name server.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specify a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the address
\& my $addr = $ns\->address();
\& #Modify the address
\& $ns\->address("10.0.0.1");
.Ve
.RE
.RS 4
.RE
.SS "auto_create_ptr( )"
.IX Subsection "auto_create_ptr( )"
.RS 4
Use this method to set or retrieve the auto_create_ptr flag of the name server. When this flag is set to true, \s-1PTR\s0 records are automatically created for \s-1NS\s0 records created in a reverse zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \f(CW"true"\fR or \f(CW"false"\fR.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specify a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get auto_create_ptr
\& my $aptr = $ns\->auto_create_ptr();
\& #Modify auto_create_ptr
\& $rootns\->auto_create_ptr("false");
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DNS::Record::NS
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
