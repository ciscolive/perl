.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::Template::Simple::Tokenizer 3"
.TH Text::Template::Simple::Tokenizer 3 "2018-12-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Template::Simple::Tokenizer
.SH "VERSION"
.IX Header "VERSION"
version 0.91
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&   use strict;
\&   use warnings;
\&   use Text::Template::Simple::Constants qw( :token );
\&   use Text::Template::Simple::Tokenizer;
\&   my $t = Text::Template::Simple::Tokenizer\->new( $start_delim, $end_delim );
\&   foreach my $token ( @{ $t\->tokenize( $raw_data ) } ) {
\&      printf "Token type: %s\en", $token\->[TOKEN_ID];
\&      printf "Token data: %s\en", $token\->[TOKEN_STR];
\&   }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Splits the input into tokens with the defined delimiter pair.
.SH "NAME"
Text::Template::Simple::Tokenizer \- "Tokenizer"
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
The object constructor. Accepts two parameters in this order:
\&\f(CW\*(C`start_delimiter\*(C'\fR and \f(CW\*(C`end_delimiter\*(C'\fR.
.ie n .SS """tokenize"""
.el .SS "\f(CWtokenize\fP"
.IX Subsection "tokenize"
Splits the input into tokens with the supplied delimiter pair. Accepts a single
parameter: the raw template string.
.SS "\s-1ESCAPE METHODS\s0"
.IX Subsection "ESCAPE METHODS"
.SS "tilde"
.IX Subsection "tilde"
Escapes the tilde character.
.PP
\fIquote\fR
.IX Subsection "quote"
.PP
Escapes double quotes.
.SH "AUTHOR"
.IX Header "AUTHOR"
Burak Gursoy <burak@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Burak Gursoy.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
