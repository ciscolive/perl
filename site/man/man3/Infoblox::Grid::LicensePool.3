.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::LicensePool 3"
.TH Infoblox::Grid::LicensePool 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::LicensePool \- License Pool object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A license pool is a container associated with the Grid and holds dynamic licenses for a specific feature. Licenses in the pool can be dynamically allocated to and deallocated from Grid members. When not in use, dynamic licenses are released back to the pool for future allocation. There is no expiration for dynamic licenses.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::Grid::LicensePool object is a read-only object and does not require manual construction.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a License Pool object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $retrieved_objs = $session\->get(object => "Infoblox::Grid::LicensePool");
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to search the License Pool object(s):
\&
\&     "type"  \- Optional. The license type.
\&     "limit" \- Optional. The limitation of dynamic license.
\&     "model" \- Optional. The supported vNIOS virtual applaince model.
\&     "key"   \- Optional. The license string.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::LicensePool",
\&     type   => "DNS"
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of a License Pool object.
.SS "assigned( )"
.IX Subsection "assigned( )"
.RS 4
Use this method to retrieve the number of dynamic licenses allocated to vNIOS appliances. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get assigned value
\& my $value = $object\->assigned();
.Ve
.RE
.RS 4
.RE
.SS "expiration( )"
.IX Subsection "expiration( )"
.RS 4
Use this method to retrieve the license pool expiration timestamp. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the number of seconds elapsed since January 1, 1970, in \s-1UTC\s0 format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get expiration value
\& my $expiration = $object\->expiration();
.Ve
.RE
.RS 4
.RE
.SS "expiration_status( )"
.IX Subsection "expiration_status( )"
.RS 4
Use this method to retrieve the license pool expiration status. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get expiration_status value
\& my $expiration_status = $object\->expiration_status();
.Ve
.RE
.RS 4
.RE
.SS "installed( )"
.IX Subsection "installed( )"
.RS 4
Use this method to retrieve the total number of dynamic licenses allowed for this license pool. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get installed value
\& my $value = $object\->installed();
.Ve
.RE
.RS 4
.RE
.SS "key( )"
.IX Subsection "key( )"
.RS 4
Use this method to retrieve the license string for the license pool. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get key value
\& my $value = $object\->key();
.Ve
.RE
.RS 4
.RE
.SS "limit( )"
.IX Subsection "limit( )"
.RS 4
Use this method to retrieve the total number of available dynamic licenses from the license pool. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get limit value
\& my $value = $object\->limit();
.Ve
.RE
.RS 4
.RE
.SS "limit_context( )"
.IX Subsection "limit_context( )"
.RS 4
Use this method to retrieve the context of the license limit. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get limit_context value
\& my $limit_context = $object\->limit_context();
.Ve
.RE
.RS 4
.RE
.SS "model( )"
.IX Subsection "model( )"
.RS 4
Use this method to retrieve the supported vNIOS appliance model. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get model value
\& my $value = $object\->model();
.Ve
.RE
.RS 4
.RE
.SS "subpools( )"
.IX Subsection "subpools( )"
.RS 4
Use this method to retrieve dynamic licenses in sub pools. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. An array of Infoblox::Grid::LicenseSubPool objects.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get subpools value
\& my $value = $object\->subpools();
.Ve
.RE
.RS 4
.RE
.SS "temp_assigned( )"
.IX Subsection "temp_assigned( )"
.RS 4
Use this method to retrieve the total number of temporary dynamic licenses allocated to vNIOS appliances. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get temp_assigned value
\& my $value = $object\->temp_assigned();
.Ve
.RE
.RS 4
.RE
.SS "type( )"
.IX Subsection "type( )"
.RS 4
Use this method to retrieve the license type. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get type value
\& my $value = $object\->type();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to a License Pool object. This sample code also includes error handling for the operations.
.PP
\&\fB#Preparation prior License Pool fetching\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox device
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\&
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Fetching the License Pool objects\fR
.PP
.Vb 1
\& my $retrieved_objs=$session\->get(object=> "Infoblox::Grid::LicensePool");
\&
\& unless($retrieved_objs) {
\&     die("Getting the license pools failed:",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Got the license pools successfully\en";
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,
Infoblox::Grid::LicenseSubPool
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
