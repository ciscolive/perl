.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::SONMP 3"
.TH SNMP::Info::SONMP 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::SONMP \- SNMP Interface to SynOptics Network Management Protocol
(SONMP)
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Miller
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& my $sonmp = new SNMP::Info (
\&                             AutoSpecify => 1,
\&                             Debug       => 1,
\&                             DestHost    => \*(Aqrouter\*(Aq,
\&                             Community   => \*(Aqpublic\*(Aq,
\&                             Version     => 2
\&                           );
\&
\& my $class = $sonmp\->class();
\& print " Using device sub class : $class\en";
\&
\& $hassonmp   = $sonmp\->hasSONMP() ? \*(Aqyes\*(Aq : \*(Aqno\*(Aq;
\&
\& # Print out a map of device ports with SONMP neighbors:
\& my $interfaces     = $sonmp\->interfaces();
\& my $sonmp_if       = $sonmp\->sonmp_if();
\& my $sonmp_ip       = $sonmp\->sonmp_ip();
\& my $sonmp_port     = $sonmp\->sonmp_port();
\&
\& foreach my $sonmp_key (keys %$sonmp_ip){
\&    my $iid           = $sonmp_if\->{$sonmp_key};
\&    my $port          = $interfaces\->{$iid};
\&    my $neighbor      = $sonmp_ip\->{$sonmp_key};
\&    my $neighbor_port = $sonmp_port\->{$sonmp_key};
\&    print "Port : $port connected to $neighbor / $neighbor_port\en";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SNMP::Info::SONMP is a subclass of SNMP::Info that provides an object oriented
interface to the SynOptics Network Management Protocol (\s-1SONMP\s0) information
through \s-1SNMP.\s0
.PP
\&\s-1SONMP\s0 is a Layer 2 protocol that supplies topology information of devices that
also speak \s-1SONMP,\s0 mostly switches and hubs.  \s-1SONMP\s0 is implemented in
SynOptics, Bay, Nortel, and Avaya devices.  \s-1SONMP\s0 has been rebranded by Bay
then Nortel and may be referred to by several different names, including Nortel
Discovery Protocol (\s-1NDP\s0).
.PP
Create or use a device subclass that inherits this class.  Do not use
directly.
.PP
Each device implements a subset of the global and cache entries.
Check the return value to see if that data is held by the device.
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
None.
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fISYNOPTICS-ROOT-MIB\fR" 4
.IX Item "SYNOPTICS-ROOT-MIB"
.PD 0
.IP "\fIS5\-ETH\-MULTISEG\-TOPOLOGY\-MIB\fR" 4
.IX Item "S5-ETH-MULTISEG-TOPOLOGY-MIB"
.PD
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar values from \s-1SNMP\s0
.ie n .IP "$sonmp\->\fBindex_factor()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBindex_factor()\fR" 4
.IX Item "$sonmp->index_factor()"
Returns a number representing the number of ports reserved per slot or switch
within the device \s-1MIB.\s0  Defaults to 32.
.ie n .IP "$sonmp\->\fBslot_offset()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBslot_offset()\fR" 4
.IX Item "$sonmp->slot_offset()"
Returns the offset if slot numbering does not start at 0.  Defaults to 1.
.ie n .IP "$sonmp\->\fBport_offset()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBport_offset()\fR" 4
.IX Item "$sonmp->port_offset()"
Returns the offset if port numbering does not start at 0.  Defaults to 0.
.ie n .IP "$sonmp\->\fBhasSONMP()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBhasSONMP()\fR" 4
.IX Item "$sonmp->hasSONMP()"
Is \s-1SONMP\s0 is active in this device?
.ie n .IP "$sonmp\->\fBsonmp_gid()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBsonmp_gid()\fR" 4
.IX Item "$sonmp->sonmp_gid()"
Returns the \s-1IP\s0 that the device is sending out for its Nmm topology info.
.Sp
(\f(CW\*(C`s5EnMsTopIpAddr\*(C'\fR)
.ie n .IP "$sonmp\->\fBsonmp_run()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBsonmp_run()\fR" 4
.IX Item "$sonmp->sonmp_run()"
Returns true if \s-1SONMP\s0 is on for this device.
.Sp
(\f(CW\*(C`s5EnMsTopStatus\*(C'\fR)
.ie n .IP "$sonmp\->\fBmac()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBmac()\fR" 4
.IX Item "$sonmp->mac()"
Returns \s-1MAC\s0 of the advertised \s-1IP\s0 address of this device.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.ie n .SS "Layer2 Topology info (""s5EnMsTopNmmTable"")"
.el .SS "Layer2 Topology info (\f(CWs5EnMsTopNmmTable\fP)"
.IX Subsection "Layer2 Topology info (s5EnMsTopNmmTable)"
.ie n .IP "$sonmp\->\fBsonmp_topo_slot()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBsonmp_topo_slot()\fR" 4
.IX Item "$sonmp->sonmp_topo_slot()"
Returns reference to hash.  Key: Table entry, Value:slot number
.Sp
(\f(CW\*(C`s5EnMsTopNmmSlot\*(C'\fR)
.ie n .IP "$sonmp\->\fBsonmp_topo_port()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBsonmp_topo_port()\fR" 4
.IX Item "$sonmp->sonmp_topo_port()"
Returns reference to hash.  Key: Table entry, Value:Port Number
(interface iid)
.Sp
(\f(CW\*(C`s5EnMsTopNmmPort\*(C'\fR)
.ie n .IP "$sonmp\->\fBsonmp_topo_ip()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBsonmp_topo_ip()\fR" 4
.IX Item "$sonmp->sonmp_topo_ip()"
Returns reference to hash.  Key: Table entry, Value:Remote \s-1IP\s0 address of entry
.Sp
(\f(CW\*(C`s5EnMsTopNmmIpAddr\*(C'\fR)
.ie n .IP "$sonmp\->\fBsonmp_topo_seg()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBsonmp_topo_seg()\fR" 4
.IX Item "$sonmp->sonmp_topo_seg()"
Returns reference to hash.  Key: Table entry, Value:Remote Segment \s-1ID\s0
.Sp
(\f(CW\*(C`s5EnMsTopNmmSegId\*(C'\fR)
.ie n .IP "$sonmp\->\fBsonmp_topo_mac()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBsonmp_topo_mac()\fR" 4
.IX Item "$sonmp->sonmp_topo_mac()"
(\f(CW\*(C`s5EnMsTopNmmMacAddr\*(C'\fR)
.Sp
Returns reference to hash.  Key: Table entry, Value:Remote \s-1MAC\s0 address
.ie n .IP "$sonmp\->sonmp_topo_platform" 4
.el .IP "\f(CW$sonmp\fR\->sonmp_topo_platform" 4
.IX Item "$sonmp->sonmp_topo_platform"
Returns reference to hash.  Key: Table entry, Value:Remote Device Type
.Sp
(\f(CW\*(C`s5EnMsTopNmmChassisType\*(C'\fR)
.ie n .IP "$sonmp\->sonmp_topo_localseg" 4
.el .IP "\f(CW$sonmp\fR\->sonmp_topo_localseg" 4
.IX Item "$sonmp->sonmp_topo_localseg"
Returns reference to hash.  Key: Table entry, Value: Boolean, if
\&\fBbay_topo_seg()\fR is local.
.Sp
(\f(CW\*(C`s5EnMsTopNmmLocalSeg\*(C'\fR)
.ie n .SS "Layer2 Topology info (""s5EnMsTopNmmEnhancedTable"")"
.el .SS "Layer2 Topology info (\f(CWs5EnMsTopNmmEnhancedTable\fP)"
.IX Subsection "Layer2 Topology info (s5EnMsTopNmmEnhancedTable)"
.ie n .IP "$sonmp\->\fBsonmp_topo_e_mac()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBsonmp_topo_e_mac()\fR" 4
.IX Item "$sonmp->sonmp_topo_e_mac()"
(\f(CW\*(C`s5EnMsTopNmmEnhancedMacAddr\*(C'\fR)
.Sp
Returns reference to hash.  Key: Table entry, Value:Remote \s-1MAC\s0 address
.ie n .IP "$sonmp\->sonmp_topo_e_platform" 4
.el .IP "\f(CW$sonmp\fR\->sonmp_topo_e_platform" 4
.IX Item "$sonmp->sonmp_topo_e_platform"
Returns reference to hash.  Key: Table entry, Value:Remote Device Type
.Sp
(\f(CW\*(C`s5EnMsTopNmmEnhancedChassisType\*(C'\fR)
.SS "Common topology information"
.IX Subsection "Common topology information"
All entries with port=0 are local and ignored.
.ie n .IP "$sonmp\->\fBsonmp_if()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBsonmp_if()\fR" 4
.IX Item "$sonmp->sonmp_if()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Local port (interfaces)
.ie n .IP "$sonmp\->\fBsonmp_ip()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBsonmp_ip()\fR" 4
.IX Item "$sonmp->sonmp_ip()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Remote \s-1IP\s0 address
.Sp
If multiple entries exist with the same local port, \fBsonmp_if()\fR, with different
IPv4 addresses, \fBsonmp_ip()\fR, there is either a non \s-1SONMP\s0 device in between two or
more devices or multiple devices which are not directly connected.
.Sp
Use the data from the Layer2 Topology Table below to dig deeper.
.ie n .IP "$sonmp\->\fBsonmp_port()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBsonmp_port()\fR" 4
.IX Item "$sonmp->sonmp_port()"
Returns reference to hash. Key: \s-1IID,\s0 Value: Remote port (interfaces)
.ie n .IP "$sonmp\->\fBsonmp_platform()\fR" 4
.el .IP "\f(CW$sonmp\fR\->\fBsonmp_platform()\fR" 4
.IX Item "$sonmp->sonmp_platform()"
Returns reference to hash. Key: \s-1IID,\s0 Value: Remote device type
