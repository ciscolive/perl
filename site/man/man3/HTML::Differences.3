.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "HTML::Differences 3"
.TH HTML::Differences 3 "2015-01-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::Differences \- Reasonable sane HTML diffing
.SH "VERSION"
.IX Header "VERSION"
version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use HTML::Differences qw( html_text_diff );
\&
\&    my $html1 = <<\*(AqEOF\*(Aq;
\&    <p>Some text</p>
\&    EOF
\&
\&    my $html2 = <<\*(AqEOF\*(Aq;
\&    <p>Some <strong>strong</strong> text</p>
\&    EOF
\&
\&    print html_text_diff( $html1, $html2 );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a reasonable sane way to get the diff between two \s-1HTML\s0
documents or fragments. Under the hood, it uses HTML::Parser.
.SS "How the Diffing Works"
.IX Subsection "How the Diffing Works"
Internally, this module converts the \s-1HTML\s0 it gets into an array reference
containing each unique \s-1HTML\s0 token. These tokens consists of things such as the
doctype declaration, tag start & end, text, etc.
.PP
All whitespace between two pieces of text is converted to a single space,
\&\fIexcept\fR when inside a \f(CW\*(C`<pre>\*(C'\fR block. Leading and trailing space on text
is also stripped out.
.PP
Start tags are normalized so that attributes appear in sorted order, and all
quotes are converted to double quotes, with one space before each
attribute. Self-closing tags (like \f(CW\*(C`<hr/>\*(C'\fR) are converted to their
simpler form (\f(CW\*(C`<hr>\*(C'\fR).
.PP
Note that because HTML::Parser decodes \s-1HTML\s0 entities inside attribute
values, this module cannot distinguish between two attributes where one
contains an entity and one does not.
.PP
Missing end tags \fIare not\fR added, and will show up in the diff.
.PP
Comments are included by default, but you can pass a flag to ignore them.
.SH "IMPORTABLE SUBROUTINES"
.IX Header "IMPORTABLE SUBROUTINES"
This module offers two optionally importable subroutines. Nothing is exported
by default.
.ie n .SS "html_text_diff( $html1, $html2, %options )"
.el .SS "html_text_diff( \f(CW$html1\fP, \f(CW$html2\fP, \f(CW%options\fP )"
.IX Subsection "html_text_diff( $html1, $html2, %options )"
This subroutine uses Text::Diff's \f(CW\*(C`diff()\*(C'\fR subroutine to provide a string
version of the diff between the two pieces of \s-1HTML\s0 provided.
.PP
The \s-1HTML\s0 can be passed as a plain scalar or as a reference to a scalar.
.PP
After the two \s-1HTML\s0 parameters, you can pass key/value pairs as options:
.IP "\(bu" 4
ignore_comments
.Sp
If this is true, then comments are ignored for the purpose of the diff. This
defaults to false.
.IP "\(bu" 4
style
.Sp
The style for the diff. This defaults to \*(L"Table\*(R". See Text::Diff for the
available options.
.IP "\(bu" 4
context
.Sp
The amount of context to show in the diff. This defaults to \f(CW\*(C`2**31\*(C'\fR to
include all the context. You can set this to some smaller value if you prefer.
.ie n .SS "diffable_html( $html1, $html2, %options )"
.el .SS "diffable_html( \f(CW$html1\fP, \f(CW$html2\fP, \f(CW%options\fP )"
.IX Subsection "diffable_html( $html1, $html2, %options )"
This returns an array reference of strings suitable for passing to any of
Algorithm::Diff's methods or exported subroutines.
.PP
The only option currently accepted is \f(CW\*(C`ignore_comments\*(C'\fR.
.SH "WHY THIS MODULE EXISTS"
.IX Header "WHY THIS MODULE EXISTS"
There are a couple other modules out there that do \s-1HTML\s0 diffs, so why write
this one?
.PP
The HTML::Diff module uses regexes to parse \s-1HTML.\s0 This is crazy.
.PP
The Test::HTML::Differences module attempts to fix up the \s-1HTML\s0 a little too
much for my purposes. It ends up ignoring missing end tags or breaking on them
in various ways.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2015 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
