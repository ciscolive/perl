.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::DBus::Binding::Server 3"
.TH Net::DBus::Binding::Server 3 "2019-02-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DBus::Binding::Server \- A server to accept incoming connections
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Creating a new server and accepting client connections
.PP
.Vb 1
\&  use Net::DBus::Binding::Server;
\&
\&  my $server = Net::DBus::Binding::Server\->new(address => "unix:path=/path/to/socket");
\&
\&  $server\->connection_callback(\e&new_connection);
\&
\&  sub new_connection {
\&      my $connection = shift;
\&
\&      .. work with new connection...
\&  }
.Ve
.PP
Managing the server and new connections in an event loop
.PP
.Vb 1
\&  my $reactor = Net::DBus::Binding::Reactor\->new();
\&
\&  $reactor\->manage($server);
\&  $reactor\->run();
\&
\&  sub new_connection {
\&      my $connection = shift;
\&
\&      $reactor\->manage($connection);
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A server for receiving connection from client programs.
The methods defined on this module have a close
correspondence to the dbus_server_XXX methods in the C \s-1API,\s0
so for further details on their behaviour, the C \s-1API\s0 documentation
may be of use.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "my $server = Net::DBus::Binding::Server\->new(address => ""unix:path=/path/to/socket"");" 4
.el .IP "my \f(CW$server\fR = Net::DBus::Binding::Server\->new(address => ``unix:path=/path/to/socket'');" 4
.IX Item "my $server = Net::DBus::Binding::Server->new(address => unix:path=/path/to/socket);"
Creates a new server binding it to the socket specified by the
\&\f(CW\*(C`address\*(C'\fR parameter.
.ie n .IP "$status = $server\->\fBis_connected()\fR;" 4
.el .IP "\f(CW$status\fR = \f(CW$server\fR\->\fBis_connected()\fR;" 4
.IX Item "$status = $server->is_connected();"
Returns zero if the server has been disconnected,
otherwise a positive value is returned.
.ie n .IP "$server\->\fBdisconnect()\fR" 4
.el .IP "\f(CW$server\fR\->\fBdisconnect()\fR" 4
.IX Item "$server->disconnect()"
Closes this server to the remote host. This method
is called automatically during garbage collection (ie
in the \s-1DESTROY\s0 method) if the programmer forgets to
explicitly disconnect.
.ie n .IP "$server\->set_watch_callbacks(\e&add_watch, \e&remove_watch, \e&toggle_watch);" 4
.el .IP "\f(CW$server\fR\->set_watch_callbacks(\e&add_watch, \e&remove_watch, \e&toggle_watch);" 4
.IX Item "$server->set_watch_callbacks(&add_watch, &remove_watch, &toggle_watch);"
Register a set of callbacks for adding, removing & updating
watches in the application's event loop. Each parameter
should be a code reference, which on each invocation, will be
supplied with two parameters, the server object and the
watch object. If you are using a \f(CW\*(C`Net::DBus::Binding::Reactor\*(C'\fR object
as the application event loop, then the 'manage' method on
that object will call this on your behalf.
.ie n .IP "$server\->set_timeout_callbacks(\e&add_timeout, \e&remove_timeout, \e&toggle_timeout);" 4
.el .IP "\f(CW$server\fR\->set_timeout_callbacks(\e&add_timeout, \e&remove_timeout, \e&toggle_timeout);" 4
.IX Item "$server->set_timeout_callbacks(&add_timeout, &remove_timeout, &toggle_timeout);"
Register a set of callbacks for adding, removing & updating
timeouts in the application's event loop. Each parameter
should be a code reference, which on each invocation, will be
supplied with two parameters, the server object and the
timeout object. If you are using a \f(CW\*(C`Net::DBus::Binding::Reactor\*(C'\fR object
as the application event loop, then the 'manage' method on
that object will call this on your behalf.
.ie n .IP "$server\->set_connection_callback(\e&handler)" 4
.el .IP "\f(CW$server\fR\->set_connection_callback(\e&handler)" 4
.IX Item "$server->set_connection_callback(&handler)"
Registers the handler to use for dealing with
new incoming connections from clients. The code
reference will be invoked each time a new client
connects and supplied with a single parameter
which is the \f(CW\*(C`Net::DBus::Binding::Connection\*(C'\fR object representing
the client.
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel P. Berrange
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2004\-2011 Daniel P. Berrange
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::DBus::Binding::Connection, Net::DBus::Binding::Bus, Net::DBus::Binding::Message::Signal, Net::DBus::Binding::Message::MethodCall, Net::DBus::Binding::Message::MethodReturn, Net::DBus::Binding::Message::Error
