.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Log::Handler 3"
.TH Log::Handler 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Handler \- Log messages to several outputs.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Log::Handler;
\&
\&    my $log = Log::Handler\->new();
\&
\&    $log\->add(
\&        file => {
\&            filename => "file.log",
\&            maxlevel => "debug",
\&            minlevel => "warning",
\&        }
\&    );
\&
\&    $log\->warning("message");
.Ve
.PP
Or
.PP
.Vb 1
\&    use Log::Handler;
\&
\&    my $log = Log::Handler\->new(
\&        screen => {
\&            log_to   => "STDOUT",
\&            maxlevel => "debug",
\&            minlevel => "debug",
\&            message_layout => "%T [%L] %m (%C)",
\&        },
\&        screen => {
\&            log_to   => "STDOUT",
\&            maxlevel => "info",
\&            minlevel => "notice",
\&        },
\&        screen => {
\&            log_to   => "STDERR",
\&            maxlevel => "warning",
\&            minlevel => "emergency",
\&        },
\&    );
.Ve
.PP
Or
.PP
.Vb 1
\&    use Log::Handler;
\&
\&    my $log = Log::Handler\->new();
\&
\&    $log\->config( config => "logger.conf" );
\&
\&    # and maybe later
\&
\&    $log\->reload( config => "logger.conf" );
.Ve
.PP
Or
.PP
.Vb 6
\&    # create a application wide logger
\&    package MyApp;
\&    use Log::Handler;
\&    my $log = Log::Handler\->create_logger("myapp");
\&    $log\->add(screen => { maxlevel => "info" });
\&    $log\->info("info message");
\&
\&    # get logger with get_logger()
\&    package MyApp::Admin;
\&    use Log::Handler;
\&    my $log = Log::Handler\->get_logger("myapp");
\&    $log\->info("info message from MyApp::Admin");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Log::Handler\*(C'\fR is a object oriented handler for logging, tracing and
debugging. It is very easy to use and provides a simple interface for
multiple output objects with lots of configuration parameters. You can
easily filter the amount of logged information on a per-output base,
define priorities, create patterns to format the messages and reload
the complete logging machine.
.PP
See the documentation for details.
.SH "IMPORTANT NOTES"
.IX Header "IMPORTANT NOTES"
Note that the default for option \f(CW\*(C`newline\*(C'\fR is now set to \s-1TRUE\s0 and newlines
will be appended automatically to each message if no newline exists.
.PP
A long time I thought about this serious change and have come to
the decision to change it.
.PP
The default for option \f(CW\*(C`mode\*(C'\fR from Log::Handler::Output::File is now
\&\f(CW\*(C`append\*(C'\fR and not \f(CW\*(C`excl\*(C'\fR anymore.
.PP
The methods \f(CW\*(C`reload()\*(C'\fR and \f(CW\*(C`validate()\*(C'\fR are new since version 0.62.
I tested it with Screen.pm, File.pm and \s-1DBI\s0.pm and it runs fine.
If you find bugs then open a bug report please :\-)
.SH "LOG LEVELS"
.IX Header "LOG LEVELS"
There are eigth levels available:
.PP
.Vb 8
\&    7   debug
\&    6   info
\&    5   notice
\&    4   warning, warn
\&    3   error, err
\&    2   critical, crit
\&    1   alert
\&    0   emergency, emerg
.Ve
.PP
\&\f(CW\*(C`debug\*(C'\fR is the highest and \f(CW\*(C`emergency\*(C'\fR is the lowest level.
.PP
Level \f(CW\*(C`debug\*(C'\fR is the highest level because it basically says to log
every peep.
.SH "LOG LEVEL METHODS"
.IX Header "LOG LEVEL METHODS"
.SS "Level methods"
.IX Subsection "Level methods"
.IP "\fB\fBdebug()\fB\fR" 4
.IX Item "debug()"
.PD 0
.IP "\fB\fBinfo()\fB\fR" 4
.IX Item "info()"
.IP "\fB\fBnotice()\fB\fR" 4
.IX Item "notice()"
.IP "\fB\fBwarning()\fB\fR, \fB\fBwarn()\fB\fR" 4
.IX Item "warning(), warn()"
.IP "\fB\fBerror()\fB\fR, \fB\fBerr()\fB\fR" 4
.IX Item "error(), err()"
.IP "\fB\fBcritical()\fB\fR, \fB\fBcrit()\fB\fR" 4
.IX Item "critical(), crit()"
.IP "\fB\fBalert()\fB\fR" 4
.IX Item "alert()"
.IP "\fB\fBemergency()\fB\fR, \fB\fBemerg()\fB\fR" 4
.IX Item "emergency(), emerg()"
.PD
.PP
The call of a log level method is very simple:
.PP
.Vb 1
\&    $log\->info("Hello World! How are you?");
.Ve
.PP
Or maybe:
.PP
.Vb 1
\&    $log\->info("Hello World!", "How are you?");
.Ve
.PP
Both calls would log \- if level \s-1INFO\s0 is active:
.PP
.Vb 1
\&    Feb 01 12:56:31 [INFO] Hello World! How are you?
.Ve
.SS "is_* methods"
.IX Subsection "is_* methods"
.IP "\fB\fBis_debug()\fB\fR" 4
.IX Item "is_debug()"
.PD 0
.IP "\fB\fBis_info()\fB\fR" 4
.IX Item "is_info()"
.IP "\fB\fBis_notice()\fB\fR" 4
.IX Item "is_notice()"
.IP "\fB\fBis_warning()\fB\fR, \fB\fBis_warn()\fB\fR" 4
.IX Item "is_warning(), is_warn()"
.IP "\fB\fBis_error()\fB\fR, \fB\fBis_err()\fB\fR" 4
.IX Item "is_error(), is_err()"
.IP "\fB\fBis_critical()\fB\fR, \fB\fBis_crit()\fB\fR" 4
.IX Item "is_critical(), is_crit()"
.IP "\fB\fBis_alert()\fB\fR" 4
.IX Item "is_alert()"
.IP "\fB\fBis_emergency()\fB\fR, \fB\fBis_emerg()\fB\fR" 4
.IX Item "is_emergency(), is_emerg()"
.PD
.PP
These twelve methods could be very useful if you want to kwow if the current
level would log the message. All methods returns \s-1TRUE\s0 if the current set
of \f(CW\*(C`minlevel\*(C'\fR and \f(CW\*(C`maxlevel\*(C'\fR would log the message and \s-1FALSE\s0 if not.
.SH "SPECIAL LOG METHODS"
.IX Header "SPECIAL LOG METHODS"
.IP "\fBfatal\fR, \fBis_fatal\fR" 4
.IX Item "fatal, is_fatal"
.PD 0
.IP "\fBtrace\fR" 4
.IX Item "trace"
.IP "\fBdump\fR" 4
.IX Item "dump"
.IP "\fBdie\fR" 4
.IX Item "die"
.IP "\fBlog\fR" 4
.IX Item "log"
.PD
.PP
For a full list take a look into the documentation of Log::Handler::Levels.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBnew()\fP"
.IX Subsection "new()"
Call \f(CW\*(C`new()\*(C'\fR to create a new log handler object.
.PP
.Vb 1
\&    my $log = Log::Handler\->new();
.Ve
.SS "\fBadd()\fP"
.IX Subsection "add()"
Call \f(CW\*(C`add()\*(C'\fR to add a new output object.
.PP
The method expects 2 parts of options; the options for the handler and
the options for the output module you want to use. The output modules got it's own
documentation for all options.
.PP
Example:
.PP
.Vb 1
\&    use Log::Handler;
\&
\&    my $log = Log::Handler\->new();
\&
\&    $log\->add(
\&
\&        # Add "file output"
\&        file => {
\&
\&            # handler options (see Log::Handler)
\&            timeformat      => "%Y/%m/%d %H:%M:%S",
\&            message_layout  => "%T [%L] %S: %m",
\&            maxlevel        => "debug",
\&            minlevel        => "emergency",
\&            die_on_errors   => 1,
\&            debug_trace     => 0,
\&            debug_mode      => 2,
\&            debug_skip      => 0,
\&
\&            # file options (see Log::Handler::Output::File)
\&            filename        => "file.log",
\&            filelock        => 1,
\&            fileopen        => 1,
\&            reopen          => 1,
\&            autoflush       => 1,
\&            permissions     => "0660",
\&            utf8            => 1,
\&
\&        }
\&    );
.Ve
.PP
Take a look to Log::Handler::Examples for more examples.
.PP
The following options are possible for the handler:
.IP "\fBmaxlevel\fR and \fBminlevel\fR" 4
.IX Item "maxlevel and minlevel"
With these options it's possible to set the log levels for your program.
.Sp
Example:
.Sp
.Vb 2
\&    maxlevel => "error"
\&    minlevel => "emergency"
\&
\&    # or
\&
\&    maxlevel => "err"
\&    minlevel => "emerg"
\&
\&    # or
\&
\&    maxlevel => 3
\&    minlevel => 0
.Ve
.Sp
It's possible to set the log level as string or as number. The default setting
for \f(CW\*(C`maxlevel\*(C'\fR is \f(CW\*(C`warning\*(C'\fR and the default setting for \f(CW\*(C`minlevel\*(C'\fR is
\&\f(CW\*(C`emergency\*(C'\fR.
.Sp
Example: If \f(CW\*(C`maxlevel\*(C'\fR is set to \f(CW\*(C`warning\*(C'\fR and \f(CW\*(C`minlevel\*(C'\fR to \f(CW\*(C`emergency\*(C'\fR
then the levels \f(CW\*(C`warning\*(C'\fR, \f(CW\*(C`error\*(C'\fR, \f(CW\*(C`critical\*(C'\fR, \f(CW\*(C`alert\*(C'\fR and \f(CW\*(C`emergency\*(C'\fR
would be logged.
.Sp
You can set both to 8 or \f(CW\*(C`nothing\*(C'\fR if you want to disable the logging machine.
.IP "\fBtimeformat\fR" 4
.IX Item "timeformat"
The option \f(CW\*(C`timeformat\*(C'\fR is used to set the format for the placeholder \f(CW%T\fR.
The string is converted with \f(CW\*(C`POSIX::strftime\*(C'\fR. The default format is set to
\&\*(L"%b\ \f(CW%d\fR\ \f(CW%H:\fR%M:%S\*(R" and looks like
.Sp
.Vb 1
\&    Feb 01 12:56:31
.Ve
.Sp
If you would set the format to \*(L"%Y/%m/%d\ \f(CW%H:\fR%M:%S\*(R" it would looks like
.Sp
.Vb 1
\&    2007/02/01 12:56:31
.Ve
.IP "\fBdateformat\fR" 4
.IX Item "dateformat"
This options works like \f(CW\*(C`timeformat\*(C'\fR. You can set a format that is used for
the placeholder \f(CW%D\fR. It's just useful if you want to split the date and time:
.Sp
.Vb 6
\&    $log\->add(file => {
\&        filename       => "file.log",
\&        dateformat     => "%Y\-%m\-%d",
\&        timeformat     => "%H:%M:%S",
\&        message_layout => "%D %T %L %m",
\&    });
\&
\&    $log\->error("an error here");
.Ve
.Sp
This looks like
.Sp
.Vb 1
\&    2007\-02\-01 12:56:31 ERROR an error here
.Ve
.Sp
This option is not used by default.
.IP "\fBnewline\fR" 4
.IX Item "newline"
\&\f(CW\*(C`newline\*(C'\fR is a very helpful option. It let the logger appends a newline to
the message if a newline doesn't exist.
.Sp
.Vb 2
\&    0 \- do nothing
\&    1 \- append a newline if not exist (default)
.Ve
.Sp
Example:
.Sp
.Vb 6
\&    $log\->add(
\&        screen => {
\&            newline  => 1,
\&            maxlevel => "info",
\&        }
\&    );
\&
\&    $log\->info("message\en");
\&    $log\->info("message");
.Ve
.Sp
In both cases the message would be logged with a newline at the end.
.IP "\fBmessage_layout\fR" 4
.IX Item "message_layout"
With this option it's possible to create your own message layout with different
placeholders in \f(CW\*(C`printf()\*(C'\fR style. The available placeholders are:
.Sp
.Vb 10
\&    %L   Log level
\&    %T   Time or full timestamp (option timeformat)
\&    %D   Date (option dateformat)
\&    %P   PID
\&    %H   Hostname
\&    %U   User name
\&    %G   Group name
\&    %N   Newline
\&    %S   Program name
\&    %C   Caller \- filename and line number
\&    %p   Caller \- package name
\&    %f   Caller \- file name
\&    %l   Caller \- line number
\&    %s   Caller \- subroutine name
\&    %r   Runtime in seconds since program start
\&    %t   Time measurement \- replaced with the time since the last call of $log\->$level
\&    %m   Message
\&    %%   Percent
.Ve
.Sp
The default message layout is set to \*(L"%T\ [%L]\ \f(CW%m\fR\*(R".
.Sp
As example the following code
.Sp
.Vb 1
\&    $log\->alert("foo bar");
.Ve
.Sp
would log
.Sp
.Vb 1
\&    Feb 01 12:56:31 [ALERT] foo bar
.Ve
.Sp
If you set \f(CW\*(C`message_layout\*(C'\fR to
.Sp
.Vb 1
\&    message_layout => "%T foo %L bar %m (%C)"
.Ve
.Sp
and call
.Sp
.Vb 1
\&    $log\->info("baz");
.Ve
.Sp
then it would log
.Sp
.Vb 1
\&    Feb 01 12:56:31 foo INFO bar baz (script.pl, line 40)
.Ve
.Sp
Traces will be appended after the complete message.
.Sp
You can create your own placeholders with the method \f(CW\*(C`set_pattern()\*(C'\fR.
.IP "\fBmessage_pattern\fR" 4
.IX Item "message_pattern"
This option is just useful if you want to forward messages to output
modules that needs the parts of a message as a hash reference \- as
example Log::Handler::Output::Forward, Log::Handler::Output::DBI
or Log::Handler::Output::Screen.
.Sp
The option expects a list of placeholders:
.Sp
.Vb 2
\&    # as a array reference
\&    message_pattern => [ qw/%T %L %H %m/ ]
\&
\&    # or as a string
\&    message_pattern => "%T %L %H %m"
.Ve
.Sp
The patterns will be replaced with real names as hash keys.
.Sp
.Vb 10
\&    %L   level
\&    %T   time
\&    %D   date
\&    %P   pid
\&    %H   hostname
\&    %U   user
\&    %G   group
\&    %N   newline
\&    %r   runtime
\&    %C   caller
\&    %p   package
\&    %f   filename
\&    %l   line
\&    %s   subroutine
\&    %S   progname
\&    %t   mtime
\&    %m   message
.Ve
.Sp
Here a full code example:
.Sp
.Vb 1
\&    use Log::Handler;
\&
\&    my $log = Log::Handler\->new();
\&
\&    $log\->add(forward => {
\&        forward_to      => \e&my_func,
\&        message_pattern => [ qw/%T %L %H %m/ ],
\&        message_layout  => "%m",
\&        maxlevel        => "info",
\&    });
\&
\&    $log\->info("a forwarded message");
\&
\&    # now you can access it
\&
\&    sub my_func {
\&        my $msg = shift;
\&        print "Timestamp: $msg\->{time}\en";
\&        print "Level:     $msg\->{level}\en";
\&        print "Hostname:  $msg\->{hostname}\en";
\&        print "Message:   $msg\->{message}\en";
\&    }
.Ve
.IP "\fBprepare_message\fR" 4
.IX Item "prepare_message"
\&\f(CW\*(C`prepare_message\*(C'\fR is useful if you want to do something with the message before
it will be logged... maybe you want to create your own layout because message_layout
doesn't meet your claim.
.Sp
.Vb 8
\&    $log\->add(
\&        screen => {
\&            newline => 1,
\&            message_layout  => "%m (%t)",
\&            message_pattern => [ qw/%T %L %H %m/ ],
\&            prepare_message => \e&format,
\&        }
\&    );
\&
\&    $log\->error("foo");
\&    $log\->error("bar");
\&    $log\->error("baz");
\&
\&    sub format {
\&        my $m = shift;
\&
\&        $m\->{message} = sprintf("%\-20s %\-20s %\-20s %s",
\&            $m\->{time}, $m\->{level}, $m\->{hostname}, $m\->{message});
\&    }
.Ve
.Sp
The output looks like
.Sp
.Vb 3
\&    Mar 08 15:14:20      ERROR                h1434036             foo (0.039694)
\&    Mar 08 15:14:20      ERROR                h1434036             bar (0.000510)
\&    Mar 08 15:14:20      ERROR                h1434036             baz (0.000274)
.Ve
.IP "\fBpriority\fR" 4
.IX Item "priority"
With this option you can set the priority of your output objects. This means
that messages will be logged at first to the outputs with a higher priority.
If this option is not set then the default priority begins with 10 and will be
increased +1 with each output. Example:
.Sp
We add a output with no priority
.Sp
.Vb 1
\&    $log\->add(file => { filename => "file1.log" });
.Ve
.Sp
This output gets the priority of 10. Now we add another output
.Sp
.Vb 1
\&    $log\->add(file => { filename => "file2.log" });
.Ve
.Sp
This output gets the priority of 11... and so on.
.Sp
Messages would be logged at first to the output with the priority of 10 and then
to the output with the priority of 11. Now you can add another output and set the
priority to 1.
.Sp
.Vb 1
\&    $log\->add(screen => { dump => 1, priority => 1 });
.Ve
.Sp
Messages would be logged now at first to the screen.
.IP "\fBdie_on_errors\fR" 4
.IX Item "die_on_errors"
Set \f(CW\*(C`die_on_errors\*(C'\fR to 0 if you don't want that the handler dies on failed
write operations.
.Sp
.Vb 2
\&    0 \- to disable it
\&    1 \- to enable it
.Ve
.Sp
If you set \f(CW\*(C`die_on_errors\*(C'\fR to 0 then you have to control it yourself.
.Sp
.Vb 1
\&    $log\->info("info message") or die $log\->errstr();
\&
\&    # or Log::Handler\->errstr()
\&    # or Log::Handler::errstr()
\&    # or $Log::Handler::ERRSTR
.Ve
.IP "\fBremove_on_reload\fR" 4
.IX Item "remove_on_reload"
This option is set to 1 by default.
.Sp
Take a look to the description of the method \f(CW\*(C`reload\*(C'\fR for more
information about this option.
.IP "\fBfilter_message\fR" 4
.IX Item "filter_message"
With this option it's possible to set a filter. If the filter is set then
only messages will be logged that match the filter. You can pass a regexp,
a code reference or a simple string. Example:
.Sp
.Vb 8
\&    $log\->add(file => {
\&        filename => "file.log",
\&        maxlevel => 6,
\&        filter_message => qr/log this/,
\&        # or
\&        # filter_message => "log this",
\&        # filter_message => \*(Aq^log only this$\*(Aq,
\&    });
\&
\&    $log\->info("log this");
\&    $log\->info("but not that");
.Ve
.Sp
If you pass your own code then you have to check the message yourself.
.Sp
.Vb 5
\&    $log\->add(file => {
\&        filename => "file.log",
\&        maxlevel => 6,
\&        filter_message => \e&my_filter
\&    });
\&
\&    # return TRUE if you want to log the message, FALSE if not
\&    sub my_filter {
\&        my $msg = shift;
\&        $msg\->{message} =~ /your filter/;
\&    }
.Ve
.Sp
It's also possible to define a simple condition with matches. Just pass a
hash reference with the options \f(CW\*(C`matchN\*(C'\fR and \f(CW\*(C`condition\*(C'\fR. Example:
.Sp
.Vb 10
\&    $log\->add(file => {
\&        filename => "file.log",
\&        maxlevel => 6,
\&        filter_message => {
\&            match1    => "log this",
\&            match2    => qr/with that/,
\&            match3    => "(?:or this|or that)",
\&            condition => "(match1 && match2) || match3",
\&        }
\&    });
.Ve
.Sp
\&\s-1NOTE\s0 that re-eval in regexes is not valid! Something like
.Sp
.Vb 1
\&    match1 => \*(Aq(?{unlink("file.txt")})\*(Aq
.Ve
.Sp
would cause an error!
.IP "\fBskip_message\fR" 4
.IX Item "skip_message"
This is the opposite of option \f(CW\*(C`filter_message\*(C'\fR, but it's only possible to set
a simple string or regular expression.
.Sp
.Vb 5
\&    $log\->add(file => {
\&        filename => "file.log",
\&        maxlevel => 6,
\&        skip => \*(Aq^do not log this.+$\*(Aq
\&    });
.Ve
.IP "\fBcategory\fR" 4
.IX Item "category"
The parameter \f(CW\*(C`category\*(C'\fR works like \f(CW\*(C`filter_caller\*(C'\fR but is much easier to configure.
You can set a comma separated list of modules. As example if you would set the category to
.Sp
.Vb 1
\&    category => "MyApp::User"
.Ve
.Sp
then all messages of MyApp::User and the submodules would be logged.
.Sp
Example:
.Sp
.Vb 1
\&    my $log = Log::Handler\->new();
\&
\&    $log\->add(
\&        screen => {
\&            maxlevel => "info",
\&            category => "MyApp::User, MyApp::Session"
\&        }
\&    );
\&
\&    package MyApp;
\&    $log\->info(_\|_PACKAGE_\|_);
\&
\&    package MyApp::Products;
\&    $log\->info(_\|_PACKAGE_\|_);
\&
\&    package MyApp::User;
\&    $log\->info(_\|_PACKAGE_\|_);
\&
\&    package MyApp::Users;
\&    $log\->info(_\|_PACKAGE_\|_);
\&
\&    package MyApp::User::Settings;
\&    $log\->info(_\|_PACKAGE_\|_);
\&
\&    package MyApp::Session;
\&    $log\->info(_\|_PACKAGE_\|_);
\&
\&    package MyApp::Session::Settings;
\&    $log\->info(_\|_PACKAGE_\|_);
.Ve
.Sp
The messages of \f(CW\*(C`MyApp\*(C'\fR and \f(CW\*(C`MyApp::Products\*(C'\fR would not be logged.
.Sp
The usage of categories is much faster than to filter by caller.
.IP "\fBfilter_caller\fR" 4
.IX Item "filter_caller"
You can use this option to set a package name. Only messages from this
packages will be logged.
.Sp
Example:
.Sp
.Vb 1
\&    my $log = Log::Handler\->new();
\&
\&    $log\->add(screen => {
\&        maxlevel => "info",
\&        filter_caller  => qr/^Foo::Bar\ez/,
\&        # or
\&        # filter_caller => "^Foo::Bar\ez",
\&    });
\&
\&    package Foo::Bar;
\&    $log\->info("log this");
\&
\&    package Foo::Baz;
\&    $log\->info("but not that");
\&
\&    1;
.Ve
.Sp
This would only log the message from the package \f(CW\*(C`Foo::Bar\*(C'\fR.
.IP "\fBexcept_caller\fR" 4
.IX Item "except_caller"
This option is just the opposite of \f(CW\*(C`filter_caller\*(C'\fR.
.Sp
If you want to log messages from all callers but \f(CW\*(C`Foo::Bar\*(C'\fR:
.Sp
.Vb 1
\&    except_caller => qr/^Foo::Bar\ez/
.Ve
.IP "\fBalias\fR" 4
.IX Item "alias"
You can set an alias if you want to get the output object later. Example:
.Sp
.Vb 1
\&    my $log = Log::Handler\->new();
\&
\&    $log\->add(screen => {
\&        maxlevel => 7,
\&        alias    => "screen\-out",
\&    });
\&
\&    my $screen = $log\->output("screen\-out");
\&
\&    $screen\->log(message => "foo");
\&
\&    # or in one step
\&
\&    $log\->output("screen\-out")\->log(message => "foo");
.Ve
.IP "\fBdebug_trace\fR" 4
.IX Item "debug_trace"
You can activate a debugger that writes \f(CW\*(C`caller()\*(C'\fR information about each
active log level. The debugger is logging all defined values except \f(CW\*(C`hints\*(C'\fR
and \f(CW\*(C`bitmask\*(C'\fR. Set \f(CW\*(C`debug_trace\*(C'\fR to 1 to activate the debugger.
The debugger is set to 0 by default.
.IP "\fBdebug_mode\fR" 4
.IX Item "debug_mode"
There are two debug modes: \fBline\fR\|(1) and \fBblock\fR\|(2) mode. The default mode is 1.
.Sp
The line mode looks like this:
.Sp
.Vb 3
\&    use strict;
\&    use warnings;
\&    use Log::Handler;
\&
\&    my $log = Log::Handler\->new()
\&
\&    $log\->add(file => {
\&        filename    => "*STDOUT",
\&        maxlevel    => "debug",
\&        debug_trace => 1,
\&        debug_mode  => 1
\&    });
\&
\&    sub test1 { $log\->warning() }
\&    sub test2 { &test1; }
\&
\&    &test2;
.Ve
.Sp
Output:
.Sp
.Vb 6
\&    Apr 26 12:54:11 [WARNING]
\&       CALL(4): package(main) filename(./trace.pl) line(15) subroutine(main::test2) hasargs(0)
\&       CALL(3): package(main) filename(./trace.pl) line(13) subroutine(main::test1) hasargs(0)
\&       CALL(2): package(main) filename(./trace.pl) line(12) subroutine(Log::Handler::_\|_ANON_\|_) hasargs(1)
\&       CALL(1): package(Log::Handler) filename(/usr/local/share/perl/5.8.8/Log/Handler.pm) line(713) subroutine(Log::Handler::_write) hasargs(1)
\&       CALL(0): package(Log::Handler) filename(/usr/local/share/perl/5.8.8/Log/Handler.pm) line(1022) subroutine(Devel::Backtrace::new) hasargs(1) wantarray(0)
.Ve
.Sp
The same code example but the debugger in block mode would looks like this:
.Sp
.Vb 1
\&       debug_mode => 2
.Ve
.Sp
Output:
.Sp
.Vb 10
\&   Apr 26 12:52:17 [DEBUG]
\&      CALL(4):
\&         package     main
\&         filename    ./trace.pl
\&         line        15
\&         subroutine  main::test2
\&         hasargs     0
\&      CALL(3):
\&         package     main
\&         filename    ./trace.pl
\&         line        13
\&         subroutine  main::test1
\&         hasargs     0
\&      CALL(2):
\&         package     main
\&         filename    ./trace.pl
\&         line        12
\&         subroutine  Log::Handler::_\|_ANON_\|_
\&         hasargs     1
\&      CALL(1):
\&         package     Log::Handler
\&         filename    /usr/local/share/perl/5.8.8/Log/Handler.pm
\&         line        681
\&         subroutine  Log::Handler::_write
\&         hasargs     1
\&      CALL(0):
\&         package     Log::Handler
\&         filename    /usr/local/share/perl/5.8.8/Log/Handler.pm
\&         line        990
\&         subroutine  Devel::Backtrace::new
\&         hasargs     1
\&         wantarray   0
.Ve
.IP "\fBdebug_skip\fR" 4
.IX Item "debug_skip"
This option let skip the \f(CW\*(C`caller()\*(C'\fR information the count of \f(CW\*(C`debug_skip\*(C'\fR.
.SS "\fBoutput()\fP"
.IX Subsection "output()"
Call \f(CW\*(C`output($alias)\*(C'\fR to get the output object that you added with
the option \f(CW\*(C`alias\*(C'\fR.
.PP
It's possible to access a output directly:
.PP
.Vb 1
\&    $log\->output($alias)\->log(message => "booo");
.Ve
.PP
For more information take a look to the option \f(CW\*(C`alias\*(C'\fR.
.SS "\fBflush()\fP"
.IX Subsection "flush()"
Call \f(CW\*(C`flush()\*(C'\fR if you want to send flush to all outputs that can flush.
.PP
Flush means to flush buffers and/or close and re-open outputs.
.PP
If you want to send it only to some outputs you can pass the aliases.
.PP
.Vb 2
\&    $log\->flush(); # flush all
\&    $log\->flush("foo", "bar"); # flush only foo and bar
.Ve
.PP
If option \*(L"die_on_errors\*(R" is set to 0 then you can intercept errors with:
.PP
.Vb 1
\&    $log\->flush or die $log\->errstr;
.Ve
.SS "\fBerrstr()\fP"
.IX Subsection "errstr()"
Call \f(CW\*(C`errstr()\*(C'\fR if you want to get the last error message. This is useful
if you set \f(CW\*(C`die_on_errors\*(C'\fR to \f(CW0\fR and the handler wouldn't die on failed
write operations.
.PP
.Vb 1
\&    use Log::Handler;
\&
\&    my $log = Log::Handler\->new();
\&
\&    $log\->add(file => {
\&        filename      => "file.log",
\&        maxlevel      => "info",
\&        die_on_errors => 0,
\&    });
\&
\&    $log\->info("Hello World!") or die $log\->errstr;
.Ve
.PP
Or
.PP
.Vb 4
\&    unless ( $log\->info("Hello World!") ) {
\&        $error_string = $log\->errstr;
\&        # do something with $error_string
\&    }
.Ve
.PP
The exception is that the handler dies in any case if the call of \f(CW\*(C`new()\*(C'\fR or
\&\f(CW\*(C`add()\*(C'\fR fails because on missing or wrong settings!
.SS "\fBconfig()\fP"
.IX Subsection "config()"
With this method it's possible to load your output configuration from a file.
.PP
.Vb 1
\&    $log\->config(config => "file.conf");
.Ve
.PP
Or
.PP
.Vb 10
\&    $log\->config(config => {
\&        file => [
\&            {
\&                alias    => "error_log",
\&                filename => "error.log",
\&                maxlevel => "warning",
\&                minlevel => "emerg",
\&                priority => 1
\&            },
\&            {
\&                alias    => "common_log",
\&                filename => "common.log",
\&                maxlevel => "info",
\&                minlevel => "emerg",
\&                priority => 2
\&            },
\&        ],
\&        screen => {
\&            alias    => "screen",
\&            maxlevel => "debug",
\&            minlevel => "emerg",
\&            log_to   => "STDERR",
\&        },
\&    });
.Ve
.PP
The key \*(L"default\*(R" is used here to define default parameters for all file
outputs. All other keys (\f(CW\*(C`error_log\*(C'\fR, \f(CW\*(C`common_log\*(C'\fR) are used as aliases.
.PP
Take a look into the documentation of Log::Handler::Config for more
information.
.SS "\fBreload()\fP"
.IX Subsection "reload()"
With the method \f(CW\*(C`reload()\*(C'\fR it's possible to reload the logging
machine. Just pass the complete new configuration for all outputs,
it works exaclty like \f(CW\*(C`config()\*(C'\fR.
.PP
At first you should know that it's highly recommended to set a alias for
each output. If you don't set a alias then the logger doesn't know which
output-objects to reload. If a output-objects doesn't have a alias then
the objects will be removed and the new configuration will be added.
.PP
Example:
.PP
logger.conf
.PP
.Vb 6
\&    <file>
\&        alias    = debug
\&        filename = debug.log
\&        maxlevel = debug
\&        minlevel = emerg
\&    </file>
\&
\&    <file>
\&        alias    = common
\&        filename = common.log
\&        maxlevel = info
\&        minlevel = emerg
\&    </file>
.Ve
.PP
Load the configuration
.PP
.Vb 1
\&    $log\->config(config => "logger.conf");
.Ve
.PP
Now change the configuration in logger.conf
.PP
.Vb 6
\&    <file>
\&        alias    = common
\&        filename = common.log
\&        maxlevel = notice
\&        minlevel = emerg
\&    </file>
\&
\&    <sendmail>
\&        alias   = sendmail
\&        from    = bar@foo.example
\&        to      = foo@bar.example
\&        subject = your subject
\&    </sendmail>
.Ve
.PP
What happends now...
.PP
The file-output with the alias \f(CW\*(C`debug\*(C'\fR will be removed,
the file-output with the alias \f(CW\*(C`common\*(C'\fR will be
reloaded and the output with the alias \f(CW\*(C`sendmail\*(C'\fR will be added.
.PP
If you don't want that output-objects will be removed
because they were added internal, then you can set the
option \f(CW\*(C`remove_on_reload\*(C'\fR to 0.
.PP
Example:
.PP
.Vb 1
\&    $log\->config(config => "logger.conf");
\&
\&    $log\->add(
\&        forward => {
\&            forward_to => \e&my_func,
\&            remove_on_reload => 0,
\&        }
\&    );
.Ve
.PP
The forward-output is not removed after a reload.
.SS "\fBvalidate()\fP"
.IX Subsection "validate()"
The method \f(CW\*(C`validate()\*(C'\fR expects the same arguments like \f(CW\*(C`config()\*(C'\fR and \f(CW\*(C`reload()\*(C'\fR.
.PP
Maybe you want to validate your options before you pass them to \f(CW\*(C`config()\*(C'\fR
or \f(CW\*(C`reload()\*(C'\fR.
.PP
Example:
.PP
.Vb 1
\&    my $log = Log::Handler\->new();
\&
\&    $log\->config( config => \e%config );
\&
\&    # and maybe later
\&
\&    if ( $log\->validate( config => \e%new_config ) ) {
\&        $log\->reload( config => \e%new_config );
\&    } else {
\&        warn "unable to reload configuration";
\&        warn $log\->errstr;
\&    }
.Ve
.SS "\fBset_pattern()\fP"
.IX Subsection "set_pattern()"
With this option you can set your own placeholders. Example:
.PP
.Vb 1
\&    $log\->set_pattern("%X", "key_name", sub { "value" });
\&
\&    # or
\&
\&    $log\->set_pattern("%X", "key_name", "value");
.Ve
.PP
Then you can use this pattern in your message layout:
.PP
.Vb 4
\&    $log\->add(file => {
\&        filename        => "file.log",
\&        message_layout  => "%X %m%N",
\&    });
.Ve
.PP
Or use it with \f(CW\*(C`message_pattern\*(C'\fR:
.PP
.Vb 4
\&    sub func {
\&        my $m = shift;
\&        print "$m\->{key_name} $m\->{message}\en";
\&    }
\&
\&    $log\->add(forward => {
\&        forward_to      => \e&func,
\&        message_pattern => "%X %m",
\&    });
.Ve
.PP
Note: valid character for the key name are: \f(CW\*(C`[%\ew\e\-\e.]+\*(C'\fR
.SS "\fBset_level()\fP"
.IX Subsection "set_level()"
With this method it's possible to change the log level at runtime.
.PP
To change the log level it's necessary to use a alias \- see option \f(CW\*(C`alias\*(C'\fR.
.PP
.Vb 6
\&    $log\->set_level(
\&        $alias => { # option alias
\&            minlevel => $new_minlevel,
\&            maxlevel => $new_maxlevel,
\&        }
\&    );
.Ve
.SS "\fBset_default_param()\fP"
.IX Subsection "set_default_param()"
With this methods it's possible to overwrite the default settings for new outputs.
.PP
Normally you would do something like
.PP
.Vb 8
\&    $log\->add(
\&        file => {
\&            filename => "debug.log",
\&            maxlevel => "info",
\&            timeformat => "%b %d %Y %H:%M:%S",
\&            message_layout => "[%T] %L %P %t %m (%C)"
\&        }
\&    );
\&
\&    $log\->add(
\&        file => {
\&            filename => "error.log",
\&            maxlevel => "error",
\&            timeformat => "%b %d %Y %H:%M:%S",
\&            message_layout => "[%T] %L %P %t %m (%C)"
\&        }
\&    );
.Ve
.PP
Now you can simplify it with
.PP
.Vb 4
\&    $log\->set_default_param(
\&        timeformat => "%b %d %Y %H:%M:%S",
\&        message_layout => "[%T] %L %P %t %m (%C)"
\&    );
\&
\&    $logg\->add(
\&        file => {
\&            filename => "debug.log",
\&            maxlevel => "info"
\&        }
\&    );
\&
\&    $log\->add(
\&        file => {
\&            filename => "error.log",
\&            maxlevel => "error"
\&        }
\&    );
.Ve
.SS "\fBcreate_logger()\fP"
.IX Subsection "create_logger()"
\&\f(CW\*(C`create_logger()\*(C'\fR is the same like \f(CW\*(C`new()\*(C'\fR but it creates a global
logger.
.PP
.Vb 1
\&    my $log = Log::Handler\->create_logger("myapp");
.Ve
.SS "\fBget_logger()\fP"
.IX Subsection "get_logger()"
With \f(CW\*(C`get_logger()\*(C'\fR it's possible to get a logger that was created
with \f(CW\*(C`create_logger()\*(C'\fR or with
.PP
.Vb 1
\&    use Log::Handler "myapp";
.Ve
.PP
Just call
.PP
.Vb 1
\&    my $log = Log::Handler\->get_logger("myapp");
.Ve
.PP
If the logger does not exists then a new logger will be created
and returned.
.SS "\fBexists_logger()\fP"
.IX Subsection "exists_logger()"
With \f(CW\*(C`exists_logger()\*(C'\fR it's possible to check if a logger exists
and it returns \s-1TRUE\s0 or \s-1FALSE.\s0
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Log::Handler::Examples
.SH "BENCHMARK"
.IX Header "BENCHMARK"
The benchmark (examples/benchmark/benchmark.pl) runs
on a Intel Core i7\-920 with the following result:
.PP
.Vb 8
\&    simple pattern output took     :  1 wallclock secs ( 1.26 usr +  0.01 sys =  1.27 CPU) @ 78740.16/s (n=100000)
\&    default pattern output took    :  2 wallclock secs ( 2.08 usr +  0.15 sys =  2.23 CPU) @ 44843.05/s (n=100000)
\&    complex pattern output took    :  4 wallclock secs ( 3.22 usr +  0.23 sys =  3.45 CPU) @ 28985.51/s (n=100000)
\&    message pattern output took    :  3 wallclock secs ( 2.72 usr +  0.16 sys =  2.88 CPU) @ 34722.22/s (n=100000)
\&    suppressed output took         :  0 wallclock secs ( 0.08 usr +  0.00 sys =  0.08 CPU) @ 1250000.00/s (n=100000)
\&    filtered caller output took    :  2 wallclock secs ( 2.10 usr +  0.68 sys =  2.78 CPU) @ 35971.22/s (n=100000)
\&    suppressed caller output took  :  1 wallclock secs ( 0.54 usr +  0.00 sys =  0.54 CPU) @ 185185.19/s (n=100000)
\&    filtered messages output took  :  3 wallclock secs ( 2.62 usr +  0.08 sys =  2.70 CPU) @ 37037.04/s (n=100000)
.Ve
.SH "EXTENSIONS"
.IX Header "EXTENSIONS"
Send me a mail if you have questions.
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
Prerequisites for all modules:
.PP
.Vb 8
\&    Carp
\&    Data::Dumper
\&    Fcntl
\&    Params::Validate
\&    POSIX
\&    Time::HiRes
\&    Sys::Hostname
\&    UNIVERSAL
.Ve
.PP
Recommended modules:
.PP
.Vb 6
\&    Config::General
\&    Config::Properties
\&    DBI
\&    IO::Socket
\&    Net::SMTP
\&    YAML
.Ve
.PP
Just for the test suite:
.PP
.Vb 2
\&    File::Spec
\&    Test::More
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
No exports.
.SH "REPORT BUGS"
.IX Header "REPORT BUGS"
Please report all bugs to <jschulz.cpan(at)bloonix.de>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonny Schulz <jschulz.cpan(at)bloonix.de>.
.SH "QUESTIONS"
.IX Header "QUESTIONS"
Do you have any questions or ideas?
.PP
\&\s-1MAIL:\s0 <jschulz.cpan(at)bloonix.de>
.PP
\&\s-1IRC:\s0 irc.perl.org#perl
.PP
If you send me a mail then add Log::Handler into the subject.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2007\-2009 by Jonny Schulz. All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
