.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Member::Discovery::CiscoAPICConfig 3"
.TH Infoblox::Grid::Member::Discovery::CiscoAPICConfig 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Member::Discovery::CiscoAPICConfig \- The Cisco APIC controller configuration structure.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The object provides information about the Cisco \s-1APIC\s0 controller configuration.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 9
\& my $object = Infoblox::Grid::Member::Discovery::CiscoAPICConfig\->new(
\&    \*(Aqaddress\*(Aq        => $ipaddr | $fqdn,  # Required
\&    \*(Aqca_certificate\*(Aq => $ca_cert,         # Optional
\&    \*(Aqcomment\*(Aq        => $string,          # Optional
\&    \*(Aqnetwork_view\*(Aq   => $string,          # Required
\&    \*(Aqpassword\*(Aq       => $string,          # Required
\&    \*(Aqprotocol\*(Aq       => \*(AqHTTP\*(Aq | \*(AqHTTPS\*(Aq, # Required
\&    \*(Aqusername\*(Aq       => $string,          # Required
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to a Cisco \s-1APIC\s0 controller configuration structure.
.SS "Infoblox::Grid::Member::DiscoveryProperties\->cisco_apic_configurations( )"
.IX Subsection "Infoblox::Grid::Member::DiscoveryProperties->cisco_apic_configurations( )"
.RS 4
Use this method to set or retrieve the cisco \s-1APIC\s0 controller configurations configured for the Grid member discovery properties. See Infoblox::Grid::Member::DiscoveryProperties\->\fBcisco_apic_configurations()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get cisco_apic_configurations value
\& my $cisco_apic_configurations = $discovery_properties\->cisco_apic_configurations();
\& #Modify cisco_apic_configurations
\& $discovery_properties\->cisco_apic_configurations([$cisco_apic_config1, $cisco_apic_config2]);
.Ve
.RE
.RS 4
.RE
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The object does not support any session methods.
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of the object.
.SS "address( )"
.IX Subsection "address( )"
.RS 4
Use this method to set or retrieve Cisco \s-1APIC IP\s0 address or \s-1FQDN.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The desired Cisco \s-1APIC IP\s0 address or Fully-Qualified Domain Name (\s-1FQDN\s0) in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->address();
\& # Modify attribute value
\& my $result = $object\->address(\*(Aq10.11.0.1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ca_certificate( )"
.IX Subsection "ca_certificate( )"
.RS 4
Use this method to set or retrieve the \s-1CA\s0 certificate.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::CACertificate object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->ca_certificate();
\& # Modify attribute value
\& my $result = $object\->ca_certificate($ca_cert);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment for the Cisco \s-1APIC\s0 configuration.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired comment in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->comment();
\& # Modify attribute value
\& $object\->comment(\*(AqAPIC configuration\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the network view associated with Cisco \s-1APIC.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a network view name that is associated with a Cisco \s-1APIC\s0 in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->network_view();
\& # Modify attribute value
\& my $result = $object\->network_view(\*(Aqpapi_network_view\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "password( )"
.IX Subsection "password( )"
.RS 4
Use this method to set Cisco \s-1APIC\s0 login password. This is a write-only attribute.
.Sp
Include the specified parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Cisco \s-1APIC\s0 login password.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Modify attribute value
\& $object\->password(\*(Aqpassword\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "protocol( )"
.IX Subsection "protocol( )"
.RS 4
Use this method to set or retrieve the connection protocol for the Cisco \s-1APIC.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1HTTP\s0' and '\s-1HTTPS\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->protocol();
\& # Modify attribute value
\& $object\->protocol(\*(AqHTTP\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "username( )"
.IX Subsection "username( )"
.RS 4
Use this method to set or retrieve Cisco \s-1APIC\s0 login name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired Cisco \s-1APIC\s0 login name in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->username();
\& # Modify attribute value
\& $object\->username(\*(Aqusername\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::Member::DiscoveryProperties\->\fBcisco_apic_configurations()\fR, Infoblox::Grid::Member::DiscoveryProperties, Infoblox::Grid::CACertificate
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
