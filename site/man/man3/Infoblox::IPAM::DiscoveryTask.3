.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::IPAM::DiscoveryTask 3"
.TH Infoblox::IPAM::DiscoveryTask 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::IPAM::DiscoveryTask \- Network discovery configuration
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class represents the condiguration of network discovery jobs. Configuration parameters in this class have control over the behavior of network discovery jobs.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
Both current and scheduled Infoblox::IPAM::DiscoveryTask objects are automatically generated upon the successful installation of the Infoblox appliance. You do not need to create it.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a discovery task object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to get a specific IPAM network discovery task object:
\&
\&  object \- Required. It should be set to "Infoblox::IPAM::DiscoveryTask".
\&  discovery_task_oid \- Optional. The discovery task identifier that can be "current" or "scheduled".
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::IPAM::DiscoveryTask",
\&     discovery_task_oid => "current",
\&     );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify objects in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use this method to modify the ping_timeout.
\& $discovery_task\->ping_timeout("500");
\& #Submit modification
\& my $response = $session\->modify( $discovery_task);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of the network discovery task.
.SS "disable_ip_scanning( )"
.IX Subsection "disable_ip_scanning( )"
.RS 4
Use this method to enable or disable \s-1IP\s0 discovery. This is a boolean value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the disable_ip_scanning attribute to \*(L"false\*(R" to enable \s-1IP\s0 discovery. Set the attribute to \*(L"true\*(R" to disable \s-1IP\s0 discovery. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable_ip_scanning attribute
\& my $disable_ip_scanning = $discovery_task\->disable_ip_scanning();
\& #Modify disable_ip_scanning attribute
\& $discovery_task\->disable_ip_scanning("true");
.Ve
.RE
.RS 4
.RE
.SS "disable_vmware_scanning( )"
.IX Subsection "disable_vmware_scanning( )"
.RS 4
Use this method to enable or disable \s-1VM\s0 discovery. This is a boolean value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the disable_vmware_scanning attribute to \*(L"false\*(R" to enable \s-1VM\s0 discovery. Set the attribute to \*(L"true\*(R" to disable \s-1VM\s0 discovery. The default value is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable_vmware_scanning attribute
\& my $disable_vmware_scanning = $discovery_task\->disable_vmware_scanning();
\& #Modify disable_vmware_scanning attribute
\& $discovery_task\->disable_vmware_scanning("true");
.Ve
.RE
.RS 4
.RE
.SS "discovery_task_oid( )"
.IX Subsection "discovery_task_oid( )"
.RS 4
Use this method to retrieve the discovery task identifier. This attribute is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be \*(L"current\*(R" or \*(L"scheduled\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovery_task_oid attribute
\& my $discovery_task_oid = $discovery_task\->discovery_task_oid();
.Ve
.RE
.RS 4
.RE
.SS "member( )"
.IX Subsection "member( )"
.RS 4
Use this method to set or retrieve the grid member that will run the discovery. Member is required for network discovery task object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a defined Infoblox::DHCP::Member object. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get member
\& my $member = $discovery_task\->member();
\& #Modify member
\& $discovery_task\->member($member1); #$member1 is an Infoblox::DHCP::Member object
.Ve
.RE
.RS 4
.RE
.SS "mode( )"
.IX Subsection "mode( )"
.RS 4
Use this method to set or retrieve the network discovery mode.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Network discovery mode. Valid values when setting the mode are \*(L"\s-1FULL\*(R", \*(L"ICMP\*(R", \*(L"NETBIOS\*(R"\s0 and \*(L"\s-1TCP\*(R".\s0 Default value is \*(L"\s-1FULL\*(R".\s0
.Sp
When retrieving the network discovery mode, you can get any value listed above plus the value \*(L"\s-1CSV\*(R"\s0 if a \s-1CSV\s0 discovery job is running.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get mode
\& my $mode = $discovery_task\->mode();
\& #Modify mode
\& $discovery_task\->mode("ICMP");
.Ve
.RE
.RS 4
.RE
.SS "merge_data( )"
.IX Subsection "merge_data( )"
.RS 4
Use this method to set or retrieve the merge data flag that a network discovery uses.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The flag indicates whether the \s-1GM\s0 sorter replaces or merges the discovered data with existing data. The valid values are \*(L"true\*(R" and \*(L"false\*(R". The default value is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns \*(L"true\*(R" when the modification succeeds, and it returns \*(L"false\*(R" when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get merge_data
\& my $merge_data = $discovery_task\->merge_data();
\& #Modify merge_data
\& $discovery_task\->merge_data("false");
.Ve
.RE
.RS 4
.RE
.SS "networks( )"
.IX Subsection "networks( )"
.RS 4
Use this method to retrieve the \s-1DHCP\s0 networks on which network discovery jobs search for \s-1IP\s0 addresses.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DHCP::Network objects. Networks must contain at least one Infoblox::DHCP::Network object.
.Sp
Note: The discovery task object returned from the appliance may or may not contain Infoblox::DHCP::Network objects. Networks must contain at least one Infoblox::DHCP::Network object when calling modify function.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& my $network1 = Infoblox::DHCP::Network\->new(
\&                                        "network" => "10.0.0.0/24",
\&                                );
\& #Get networks
\& my $networks = $discovery_task\->networks();
\& #Modify networks
\& $discovery_task\->networks([$network1]);
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the network view of a discovery task.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the default network view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a defined Infoblox::DHCP::View object. The default value is the system-defined network view.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network view
\& my $nview = $discovery_task\->network_view();
\& #Modify network view, with an Infoblox::DHCP::View object
\& $discovery_task\->network_view($nview);
.Ve
.RE
.RS 4
.RE
.SS "ping_retries( )"
.IX Subsection "ping_retries( )"
.RS 4
Use this method to set or retrieve the network discovery ping retry times.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Network discovery ping retry times. Minimium value is 1 and maximum value is 5. Default value is 2.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ping_retries
\& my $ping_retries = $discovery_task\->ping_retries();
\& #Modify ping_retries
\& $discovery_task\->ping_retries("4");
.Ve
.RE
.RS 4
.RE
.SS "ping_timeout( )"
.IX Subsection "ping_timeout( )"
.RS 4
Use this method to set or retrieve the network discovery ping timeout.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Network discovery ping timeout. Minimium value is 1 ms and maximum value is 4000 ms. Default value is 1000 ms.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ping_timeout
\& my $ping_timeout = $discovery_task\->ping_timeout();
\& #Modify ping_timeout
\& $discovery_task\->ping_timeout("500");
.Ve
.RE
.RS 4
.RE
.SS "scheduled_run( )"
.IX Subsection "scheduled_run( )"
.RS 4
Use this method to set or retrieve the schedule of a discovery task.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a Infoblox::Grid::ScheduleSetting object. The default value is undef.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get scheduled_run
\& my $scheduled_run = $discovery_task\->scheduled_run();
\& #Modify scheduled_run
\& $discovery_task\->scheduled_run($schedule_setting);
.Ve
.RE
.RS 4
.RE
.SS "state( )"
.IX Subsection "state( )"
.RS 4
Use this method to retrieve the network discovery state. The discovery state is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Return the state of network discovery.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get state
\& my $state = $discovery_task\->state();
.Ve
.RE
.RS 4
.RE
.SS "status( )"
.IX Subsection "status( )"
.RS 4
Use this method to retrieve the network discovery status. The discovery status is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Return the status of network discovery.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get status
\& my $status = $discovery_task\->status();
.Ve
.RE
.RS 4
.RE
.SS "tcp_ports( )"
.IX Subsection "tcp_ports( )"
.RS 4
Use this method to set or retrieve the \s-1TCP\s0 ports that the network discovery jobs use.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::IPAM::TCPPort objects.
Default \s-1TCP\s0 ports are:
.Sp
.Vb 10
\& ftp               21/tcp     # File Transfer [Control]
\& ssh               22/tcp     # Secure Shell Login
\& telnet            23/tcp     #
\& smtp              25/tcp     # Simple Mail Transfer
\& finger            79/tcp     #
\& http              80/tcp     # World Wide Web HTTP
\& kerberos\-sec      88/tcp     # Kerberos (v5)
\& pop3              110/tcp    # PostOffice V.3
\& rpcbind           111/tcp    # portmapper, rpcbind
\& auth              113/tcp    # ident, tap, Authentication Service
\& msrpc             135/tcp    # Microsoft RPC services
\& netbios\-ns        137/tcp    # NETBIOS Name Service
\& netbios\-dgm       138/tcp    # NETBIOS Datagram Service
\& netbios\-ssn       139/tcp    # NETBIOS Session Service
\& imap              143/tcp    # Interim Mail Access Protocol v2
\& https             443/tcp    # secure http (SSL)
\& microsoft\-ds      445/tcp    # SMB directly over IP
\& login             513/tcp    # BSD rlogind(8)
\& shell             514/tcp    # BSD rshd(8)
\& printer           515/tcp    # spooler (lpd)
\& klogin            543/tcp    # Kerberos (v4/v5)
\& kerberos          750/tcp    # kdc Kerberos (v4)
\& kdm               1024/tcp   # K Display Manager (KDE version of xdm)
\& NFS\-or\-IIS        1025/tcp   # IIS, NFS, or listener RFS remote_file_sharing
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get tcp_ports
\& my $ports = $discovery_task\->tcp_ports();
\&
\& #Modify tcp_ports
\& my $port = Infoblox::IPAM::TCPPort\->new(
\&        number => \*(Aq333\*(Aq,
\&        comment => \*(Aqtest_port\*(Aq);
\& push @$ports , $port;
\&
\& $discovery_task\->tcp_ports($ports);
.Ve
.RE
.RS 4
.RE
.SS "tcp_scan_technique( )"
.IX Subsection "tcp_scan_technique( )"
.RS 4
Use this method to set or retrieve the \s-1TCP\s0 scan technique that the network discovery jobs use.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Network discovery \s-1TCP\s0 scan technique. The scan techniques are identical to Nmap techniques. Valid values are \*(L"\s-1SYN\*(R"\s0 and \*(L"\s-1CONNECT\*(R".\s0 The default value is \*(L"\s-1SYN\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get tcp_scan_technique
\& my $tcp_scan_technique= $discovery_task\->tcp_scan_technique();
\& #Modify tcp_scan_technique
\& $discovery_task\->tcp_scan_technique("CONNECT");
.Ve
.RE
.RS 4
.RE
.SS "update_metadata( )"
.IX Subsection "update_metadata( )"
.RS 4
Use this method to set or retrieve the updated metadata flag that the network discovery jobs use.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The flag indicates whether the appliance updates the metadata of the discovered objects. The valid values are \*(L"true\*(R" and \*(L"false\*(R". The default value is \*(L"true\*(R". If the value is \*(L"false\*(R", only the unmanaged objects are updated.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get update_metadata
\& my $update_metadata = $discovery_task\->update_metadata();
\& #Modify update_metadata
\& $discovery_task\->update_metadata("false");
.Ve
.RE
.RS 4
.RE
.SS "vservers( )"
.IX Subsection "vservers( )"
.RS 4
Use this method to set or retrieve the list of VMware vSphere servers for \s-1VM\s0 discovery.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains the Infoblox::IPAM::DiscoveryTask::VServer objects. The default value is a reference to an empty list.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get vservers
\& my $vservers = $discovery_task\->vservers();
\& #Modify vservers
\& my $vserver1 = Infoblox::IPAM::DiscoveryTask::VServer\->new(
\&        fqdn_or_ip => "vcenter.com",
\&        username => "test1",
\&        password => "test1",
\&    );
\& my $vserver2 = Infoblox::IPAM::DiscoveryTask::VServer\->new(
\&        fqdn_or_ip => "10.2.3.4",
\&        username => "test2",
\&        password => "test2",
\&    );
\& $discovery_task\->vservers([$vserver1,$vserver2]);
.Ve
.RE
.RS 4
.RE
.SS "v_network_view( )"
.IX Subsection "v_network_view( )"
.RS 4
Use this method to set or retrieve the network view of a \s-1VM\s0 discovery.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the default network view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a defined Infoblox::DHCP::View object. The default value is the system-defined network view.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network view
\& my $nview = $discovery_task\->v_network_view();
\& #Modify network view, with an Infoblox::DHCP::View object
\& $discovery_task\->v_network_view($nview);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to a network discovery task object, such as getting and modifying an object. This sample code also includes error handling for the operations.
.PP
\&\fB#Preparation prior to the get and modify operations on a network discovery task object\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #refers to Infoblox Appliance IP address
\& my $host_ip   = "192.168.1.2";
\& my $host_name = "infoblox.localdomain";
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => $host_ip,
\&     username => "admin",
\&     password => "infoblox"
\&     )
\&     or die("Constructor for session failed: ",
\&                Infoblox::status_code(). ":" .Infoblox::status_detail());
\&
\& print"Session created successfully.\en";
\&
\& my  @result_array = $session\->get(
\&       object  => "Infoblox::IPAM::DiscoveryTask" ,
\& );
\&
\& my $discovery_task = $result_array[0];
\& unless (ref($discovery_task) eq \*(AqInfoblox::IPAM::DiscoveryTask\*(Aq) {
\&        die("Get discovery task failed");
\& }
\& print "Get discovery task successfully\en";
\&
\& #Create the Network object
\& my $network = Infoblox::DHCP::Network\->new(
\&        network => "10.0.0.0/24",
\& );
\&
\& $session\->add($network)
\&    or die("Add network failed: " .
\&               $session\->status_code() . ":" . $session\->status_detail());
\& #modify networks
\& $discovery_task\->networks([$network]);
\&
\& # modify ping_timeout
\& $discovery_task\->ping_timeout("500");
\&
\& # modify tcp_ports
\& my $ports = $discovery_task\->tcp_ports();
\&
\& my $port = Infoblox::IPAM::TCPPort\->new(
\&        number => \*(Aq333\*(Aq,
\&        comment => \*(Aqtest_port\*(Aq);
\& push @$ports , $port;
\&
\& $discovery_task\->tcp_ports($ports);
\&
\& # submit changes
\& $session\->modify( $discovery_task )
\&        or die("Modify discovery task failed: " .
\&               $session\->status_code() . ":" . $session\->status_detail());
\& print "Modify discovery task successfully\en";
\&
\& # clean up
\& # remove network
\& $session\->remove( $network)
\&    or die("Remove network failed: " .
\&           $session\->status_code() . ":" . $session\->status_detail());
\&
\& ####### Program Ends ############################
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO Infoblox::IPAM::DiscoveryTask::VServer,Infoblox::DHCP::Member,Infoblox::DHCP::Network,Infoblox::IPAM::TCPPort,Infoblox::Session,Infoblox::Session\->\fBget()\fP,Infoblox::Session\->\fBmodify()\fP,Infoblox::Grid::ScheduleSetting"
.IX Header "SEE ALSO Infoblox::IPAM::DiscoveryTask::VServer,Infoblox::DHCP::Member,Infoblox::DHCP::Network,Infoblox::IPAM::TCPPort,Infoblox::Session,Infoblox::Session->get(),Infoblox::Session->modify(),Infoblox::Grid::ScheduleSetting"
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
