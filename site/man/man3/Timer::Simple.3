.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Timer::Simple 3"
.TH Timer::Simple 3 "2015-04-29" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Timer::Simple \- Small, simple timer (stopwatch) object
.SH "VERSION"
.IX Header "VERSION"
version 1.006
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use Timer::Simple ();
\&  my $t = Timer::Simple\->new();
\&  do_something;
\&  print "something took: $t\en";
\&
\&  # or take more control
\&
\&  my $timer = Timer::Simple\->new(start => 0, string => \*(Aqhuman\*(Aq);
\&    do_something_before;
\&  $timer\->start;
\&    do_something_else;
\&  print "time so far: ", $t\->elapsed, " seconds\en";
\&    do_a_little_more;
\&  print "time so far: ", $t\->elapsed, " seconds\en";
\&    do_still_more;
\&  $timer\->stop;
\&    do_something_after;
\&  printf "whole process lasted %d hours %d minutes %f seconds\en", $t\->hms;
\&    # or simply "whole process lasted $t\en" with \*(Aqstring\*(Aq => \*(Aqhuman\*(Aq
\&
\&  $timer\->restart; # use the same object to time something else
\&
\&  # you can use package functions to work with mutliple timers
\&
\&  $timer1 = Timer::Simple\->new;
\&    do_stuff;
\&  $timer1\->stop;
\&    do_more;
\&  $timer2 = Timer::Simple\->new;
\&    do_more_stuff;
\&  $timer2\->stop;
\&
\&  print "first process took $timer1, second process took: $timer2\en";
\&  print "in total took: " . Timer::Simple::format_hms($timer1 + $timer2);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple object to make timing an operation as easy as possible.
.PP
It uses Time::HiRes if available (unless you tell it not to).
.PP
It stringifies to the elapsed time (see \*(L"string\*(R").
.PP
This module aims to be small and efficient
and do what is useful in most cases
while also being sufficiently customizable.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Constructor;  Takes a hash or hashref of arguments:
.IP "\(bu" 4
\&\f(CW\*(C`hires\*(C'\fR \- Boolean; Defaults to true;
.Sp
Set this to false to not attempt to use Time::HiRes
and just use time instead.
.IP "\(bu" 4
\&\f(CW\*(C`hms\*(C'\fR \- Alternate \f(CW\*(C`sprintf\*(C'\fR string used by \*(L"hms\*(R"
.IP "\(bu" 4
\&\f(CW\*(C`start\*(C'\fR \- Boolean; Defaults to true;
.Sp
Set this to false to skip the initial setting of the clock.
You must call \*(L"start\*(R" explicitly if you disable this.
.IP "\(bu" 4
\&\f(CW\*(C`string\*(C'\fR \- The default format for \*(L"string\*(R". Defaults to \f(CW\*(Aqshort\*(Aq\fR;
.SS "elapsed"
.IX Subsection "elapsed"
Returns the number of seconds elapsed since the clock was started.
.PP
This method is used as the object's value when used in numeric context:
.PP
.Vb 1
\&  $total_elapsed = $timer1 + $timer2;
.Ve
.SS "hms"
.IX Subsection "hms"
.Vb 2
\&  # list
\&  my @units = $timer\->hms;
\&
\&  sprintf("%d hours %minutes %f seconds", $timer\->hms);
\&
\&  # scalar
\&  print "took: " . $timer\->hms . "\en"; # same as print "took :$timer\en";
\&
\&  # alternate format
\&  $string = $timer\->hms(\*(Aq%04d h %04d m %020.10f s\*(Aq);
.Ve
.PP
Separates the elapsed time (seconds) into \fBh\fRours, \fBm\fRinutes, and \fBs\fReconds.
.PP
In list context returns a three-element list (hours, minutes, seconds).
.PP
In scalar context returns a string resulting from
\&\f(CW\*(C`sprintf\*(C'\fR
(essentially \f(CW\*(C`sprintf($format, $h, $m, $s)\*(C'\fR).
The default format is
\&\f(CW\*(C`00:00:00.000000\*(C'\fR (\f(CW\*(C`%02d:%02d:%9.6f\*(C'\fR) with Time::HiRes or
\&\f(CW\*(C`00:00:00\*(C'\fR (\f(CW\*(C`%02d:%02d:%02d\*(C'\fR) without.
An alternate \f(CW\*(C`format\*(C'\fR can be specified in \*(L"new\*(R"
or can be passed as an argument to the method.
.SS "start"
.IX Xref "restart"
.IX Subsection "start"
Initializes the timer to the current system time.
.PP
Aliased as \f(CW\*(C`restart\*(C'\fR.
.SS "stop"
.IX Subsection "stop"
Stop the timer.
This records the current system time in case you'd like to do more
processing (that you don't want timed) before reporting the elapsed time.
.SS "string"
.IX Subsection "string"
.Vb 1
\&  print $timer\->string($format);
\&
\&  print "took: $timer";  # stringification equivalent to $timer\->string()
.Ve
.PP
Returns a string representation of the elapsed time.
.PP
The format can be passed as an argument.  If no format is provided
the value of \f(CW\*(C`string\*(C'\fR (passed to \*(L"new\*(R") will be used.
.PP
The format can be the name of another method (which will be called),
a subroutine (coderef) which will be called like an object method,
or one of the following strings:
.IP "\(bu" 4
\&\f(CW\*(C`short\*(C'\fR \- Total elapsed seconds followed by \f(CW\*(C`hms\*(C'\fR: \f(CW\*(Aq123s (00:02:03)\*(Aq\fR
.IP "\(bu" 4
\&\f(CW\*(C`rps\*(C'\fR \- Total elapsed seconds followed by requests per second: \f(CW\*(Aq4.743616s (0.211/s)\*(Aq\fR
.IP "\(bu" 4
\&\f(CW\*(C`human\*(C'\fR \- Separate units spelled out: \f(CW\*(Aq6 hours 4 minutes 12 seconds\*(Aq\fR
.IP "\(bu" 4
\&\f(CW\*(C`full\*(C'\fR \- Total elapsed seconds plus \f(CW\*(C`human\*(C'\fR: \f(CW\*(Aq2 seconds (0 hours 0 minutes 2 seconds)\*(Aq\fR
.PP
This is the method called when the object is stringified (using overload).
.SS "time"
.IX Subsection "time"
Returns the current system time
using \*(L"gettimeofday\*(R" in Time::HiRes or time.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
The following functions should not be necessary in most circumstances
but are provided for convenience to facilitate additional functionality.
.PP
They are not available for export (to avoid Exporter overhead).
See Sub::Import if you really want to import these methods.
.SS "\s-1HIRES\s0"
.IX Subsection "HIRES"
Indicates whether Time::HiRes is available.
.SS "default_format_spec"
.IX Subsection "default_format_spec"
.Vb 3
\&  $spec            = default_format_spec();  # consults HIRES()
\&  $spec_whole      = default_format_spec(0); # false forces integer
\&  $spec_fractional = default_format_spec(1); # true  forces fraction
.Ve
.PP
Returns an appropriate \f(CW\*(C`sprintf\*(C'\fR format spec according to the provided boolean.
If true,  the spec forces fractional seconds (like \f(CW\*(Aq00:00:00.000000\*(Aq\fR).
If false, the spec forces seconds to an integer (like \f(CW\*(Aq00:00:00\*(Aq\fR).
If not specified the value of \*(L"\s-1HIRES\*(R"\s0 will be used.
.SS "format_hms"
.IX Subsection "format_hms"
.Vb 2
\&  my $string = format_hms($hours, $minutes, $seconds);
\&  my $string = format_hms($seconds);
.Ve
.PP
Format the provided hours, minutes, and seconds
into a string by guessing the best format.
.PP
If only seconds are provided
the value will be passed through \*(L"separate_hms\*(R" first.
.SS "separate_hms"
.IX Subsection "separate_hms"
.Vb 1
\&  my ($hours, $minutes, $seconds) = separate_hms($seconds);
.Ve
.PP
Separate seconds into hours, minutes, and seconds.
Returns a list.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
These are some other timers I found on \s-1CPAN\s0
and how they differ from this module:
.IP "\(bu" 4
Time::Elapse \- eccentric \s-1API\s0 to a tied scalar
.IP "\(bu" 4
Time::Progress \- Doesn't support Time::HiRes
.IP "\(bu" 4
Time::Stopwatch \- tied scalar
.IP "\(bu" 4
Dancer::Timer \- inside Dancer framework
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Perldoc"
.IX Subsection "Perldoc"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&  perldoc Timer::Simple
.Ve
.SS "Websites"
.IX Subsection "Websites"
The following websites have more information about this module, and may be of help to you. As always,
in addition to those websites please use your favorite search engine to discover more resources.
.IP "\(bu" 4
MetaCPAN
.Sp
A modern, open-source \s-1CPAN\s0 search engine, useful to view \s-1POD\s0 in \s-1HTML\s0 format.
.Sp
<http://metacpan.org/release/Timer\-Simple>
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests by email to \f(CW\*(C`bug\-timer\-simple at rt.cpan.org\*(C'\fR, or through
the web interface at <https://rt.cpan.org/Public/Bug/Report.html?Queue=Timer\-Simple>. You will be automatically notified of any
progress on the request by the system.
.SS "Source Code"
.IX Subsection "Source Code"
<https://github.com/rwstauner/Timer\-Simple>
.PP
.Vb 1
\&  git clone https://github.com/rwstauner/Timer\-Simple.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Randy Stauner <rwstauner@cpan.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Tomohiro Hosaka <bokutin@bokut.in>
.IP "\(bu" 4
perlancar (@pc\-office) <perlancar@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Randy Stauner.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
