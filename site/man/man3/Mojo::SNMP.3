.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::SNMP 3"
.TH Mojo::SNMP 3 "2018-04-29" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::SNMP \- Run SNMP requests with Mojo::IOLoop
.SH "VERSION"
.IX Header "VERSION"
0.13
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Using methods with callbacks"
.IX Subsection "Using methods with callbacks"
.Vb 2
\&  use Mojo::SNMP;
\&  my $snmp = Mojo::SNMP\->new;
\&
\&  $snmp\->defaults({timeout => 3, community => "public"});
\&
\&  $snmp\->get_next(["10.0.0.1", "10.0.0.2"], ["1.3.6.1.2.1.1.3.0"], sub {
\&    my ($self, $err, $session) = @_;
\&  });
\&
\&  $snmp\->wait unless $snmp\->ioloop\->is_running;
.Ve
.SS "Using prepare"
.IX Subsection "Using prepare"
.Vb 3
\&  use Mojo::SNMP;
\&  my $snmp = Mojo::SNMP\->new;
\&  my @response;
\&
\&  $snmp\->on(response => sub {
\&    my ($snmp, $session, $args) = @_;
\&    warn "Got response from $args\->{hostname} on $args\->{method}(@{$args\->{request}})...\en";
\&    push @response, $session\->var_bind_list;
\&  });
\&
\&  $snmp\->defaults({
\&    community => "public", # v1, v2c
\&    username  => "foo", # v3
\&    version   => "v2c", # v1, v2c or v3
\&  });
\&
\&  $snmp\->prepare("127.0.0.1", get_next => ["1.3.6.1.2.1.1.3.0"]);
\&  $snmp\->prepare("localhost", {version => "v3"}, get => ["1.3.6.1.2.1.1.3.0"]);
\&
\&  # start the IOLoop unless it is already running
\&  $snmp\->wait unless $snmp\->ioloop\->is_running;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::SNMP is an async library for fetching or writing data from/to many
\&\s-1SNMP\s0 agents. The module does its best to not get in your way, but rather
provide a simple \s-1API\s0 which allow you to extract information from multiple
servers at the same time.
.PP
This module uses Net::SNMP and Mojo::IOLoop to fetch data from hosts
asynchronously. It does this by using a custom dispatcher,
Mojo::SNMP::Dispatcher, which attach the sockets created by Net::SNMP
directly into the ioloop reactor.
.PP
If you want greater speed, you should check out Net::SNMP::XS and make sure
Mojo::Reactor::EV and \s-1EV\s0 is installed.
.PP
Mojo::SNMP is supposed to be a replacement for a module I wrote earlier,
called SNMP::Effective. Reason for the rewrite is that I'm using the
framework Mojolicious which includes an awesome \s-1IO\s0 loop which allow me to
do cool stuff inside my web server.
.SH "EVENTS"
.IX Header "EVENTS"
.SS "error"
.IX Subsection "error"
.Vb 1
\&  $self\->on(error => sub { my ($self, $str, $session, $args) = @_; ... });
.Ve
.PP
Emitted on errors which may occur. \f(CW$session\fR is a Net::SNMP object and is
only available if the error is a result of a Net::SNMP method, such as
\&\fBget_request()\fR.
.PP
See \*(L"response\*(R" for \f(CW$args\fR description.
.SS "finish"
.IX Subsection "finish"
.Vb 1
\&  $self\->on(finish => sub { my $self = shift; ... });
.Ve
.PP
Emitted when all requests have completed.
.SS "response"
.IX Subsection "response"
.Vb 1
\&  $self\->on(response => sub { my ($self, $session, $args) = @_; ... });
.Ve
.PP
Called each time a host responds. The \f(CW$session\fR is the current Net::SNMP
object. \f(CW$args\fR is a hash ref with the arguments given to \*(L"prepare\*(R", with
some additional information:
.PP
.Vb 5
\&  {
\&    method => $str, # get, get_next, ...
\&    request => [$oid, ...],
\&    ...
\&  }
.Ve
.SS "timeout"
.IX Subsection "timeout"
.Vb 1
\&  $self\->on(timeout => sub { my $self = shift; ... })
.Ve
.PP
Emitted if \*(L"wait\*(R" has been running for more than \*(L"master_timeout\*(R" seconds.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "concurrent"
.IX Subsection "concurrent"
.Vb 2
\&  $self = $self\->concurrent(20);
\&  $int = $self\->concurrent;
.Ve
.PP
How many hosts to fetch data from at once. Default is 20. (The default may
change in later versions)
.SS "defaults"
.IX Subsection "defaults"
.Vb 2
\&  $self = $self\->defaults({community => "public"});
\&  $hash_ref = $self\->community;
.Ve
.PP
This attribute holds a hash ref with default arguments which will be passed
on to \*(L"session\*(R" in Net::SNMP. User-submitted \f(CW%args\fR will be merged with the
defaults before being submitted to \*(L"prepare\*(R". \f(CW\*(C`prepare()\*(C'\fR will filter out
and ignore arguments that don't work for the \s-1SNMP\s0 \f(CW\*(C`version\*(C'\fR.
.PP
\&\s-1NOTE: SNMP\s0 version will default to \*(L"v2c\*(R".
.SS "master_timeout"
.IX Subsection "master_timeout"
.Vb 2
\&  $self = $self\->master_timeout(15);
\&  $int = $self\->master_timeout;
.Ve
.PP
How long to run in total before timeout. Note: This is \s-1NOT\s0 per host but for
the complete run. Default is 0, which means that it will never time out.
.PP
If you want to set a timeout per request request to a host, then this need
to be set in \*(L"defaults\*(R" or in \f(CW$args\fR passed on to \*(L"prepare\*(R" or one of
the other request methods.
.SS "ioloop"
.IX Subsection "ioloop"
.Vb 2
\&  $self = $self\->ioloop(Mojo::IOLoop\->new);
\&  $ioloop = $self\->ioloop;
.Ve
.PP
Holds an instance of Mojo::IOLoop.
.SH "METHODS"
.IX Header "METHODS"
.SS "add_custom_request_method"
.IX Subsection "add_custom_request_method"
.Vb 4
\&  Mojo::SNMP\->add_custom_request_method(my_custom_method => sub {
\&    my ($session, %args) = @_;
\&    # do custom stuff..
\&  });
.Ve
.PP
Net::SNMP has defined basic methods to write/retrieve data from/to the \s-1SNMP\s0
agent. \*(L"add_custom_request_method\*(R" allow you to add support for custom
methods, which can be useful if you find yourself doing the same complicated
logic over and over again. \*(L"bulk_walk\*(R" and \*(L"walk\*(R" are custom methods
bundled with this module.
.PP
\&\s-1NOTE:\s0 This method will define the methods in a global scope, meaning the code
below will call the custom callback instead of \*(L"get_next_request\*(R" in Net::SNMP
for all instances of Mojo::SNMP:
.PP
.Vb 1
\&  $self\->add_custom_request_method(get_next => sub { ... });
.Ve
.SS "bulk_walk"
.IX Subsection "bulk_walk"
.Vb 5
\&  $self\->bulk_walk($host, $args, \e@oids, sub {
\&    my ($self, $err, $session) = @_;
\&    return warn $err if $err;
\&    push @{$res{$host}}, $session\->var_bind_list;
\&  });
.Ve
.PP
This is a custom \s-1SNMP\s0 method added by \*(L"add_custom_request_method\*(R". See
\&\*(L"prepare\*(R" for generic information about the variables associated with this
method.
.PP
This method will run \*(L"get_bulk_request\*(R" in Net::SNMP until it receives an \s-1OID\s0
which does not match the base \s-1OID.\s0 \f(CW\*(C`maxrepetitions\*(C'\fR in \f(CW$args\fR will default
to 10, but could be overrided to potentially increase performance. Example:
.PP
.Vb 5
\&  $self\->bulk_walk("192.168.0.1" => {maxrepetitions => 25}, sub {
\&    my ($self, $err, $session) = @_;
\&    return warn $err if $err;
\&    push @{$res{$host}}, $session\->var_bind_list;
\&  });
.Ve
.SS "get"
.IX Subsection "get"
.Vb 5
\&  $self\->get($host, \e%args, \e@oids, sub {
\&    my ($self, $err, $session) = @_;
\&    return warn $err if $err;
\&    push @{$res{$host}}, $session\->var_bind_list;
\&  });
.Ve
.PP
Will send a \s-1SNMP\s0 get-request to the remote agent. See \*(L"get_request\*(R" in Net::SNMP
for details on which \f(CW%args\fR you can pass on. See \*(L"prepare\*(R" for generic
information about the variables associated with this method.
.SS "get_bulk"
.IX Subsection "get_bulk"
.Vb 5
\&  $self\->get_bulk($host, \e%args, \e@oids, sub {
\&    my ($self, $err, $session) = @_;
\&    return warn $err if $err;
\&    push @{$res{$host}}, $session\->var_bind_list;
\&  });
.Ve
.PP
Will send a \s-1SNMP\s0 get-bulk-request to the remote agent. See
\&\*(L"get_bulk_request\*(R" in Net::SNMP for details on which \f(CW%args\fR you can pass on.
See \*(L"prepare\*(R" for generic information about the variables associated with
this method.
.SS "get_next"
.IX Subsection "get_next"
.Vb 5
\&  $self\->get_next($host, \e%args, \e@oids, sub {
\&    my ($self, $err, $session) = @_;
\&    return warn $err if $err;
\&    push @{$res{$host}}, $session\->var_bind_list;
\&  });
.Ve
.PP
Will send a \s-1SNMP\s0 get-next-request to the remote agent. See
\&\*(L"get_next_request\*(R" in Net::SNMP for details on which \f(CW$args\fR you can pass on.
See \*(L"prepare\*(R" for generic information about the variables associated with
this method.
.SS "prepare"
.IX Subsection "prepare"
.Vb 4
\&  $self = $self\->prepare($host, \e%args, ...);
\&  $self = $self\->prepare(\e@hosts, \e%args, ...);
\&  $self = $self\->prepare(\e@hosts, ...);
\&  $self = $self\->prepare("*" => ...);
.Ve
.IP "\(bu" 4
\&\f(CW$host\fR
.Sp
This can either be an array ref or a single host. The \*(L"host\*(R" can be whatever
\&\*(L"session\*(R" in Net::SNMP can handle; generally a hostname or \s-1IP\s0 address.
.IP "\(bu" 4
\&\e%args
.Sp
A hash ref of options which will be passed directly to \*(L"session\*(R" in Net::SNMP.
This argument is optional. See also \*(L"defaults\*(R".
.IP "\(bu" 4
dot-dot-dot
.Sp
A list of key-value pairs of \s-1SNMP\s0 operations and bindlists which will be given
to \*(L"prepare\*(R". The operations are the same as the method names available in
Net::SNMP, but without \*(L"_request\*(R" at end:
.Sp
.Vb 8
\&  get
\&  get_next
\&  set
\&  get_bulk
\&  inform
\&  walk
\&  bulk_walk
\&  ...
.Ve
.Sp
The special hostname \*(L"*\*(R" will apply the given operation to all previously
defined hosts.
.PP
Examples:
.PP
.Vb 4
\&  $self\->prepare("192.168.0.1" => {version => "v2c"}, get_next => [$oid, ...]);
\&  $self\->prepare("192.168.0.1" => {version => "v3"}, get => [$oid, ...]);
\&  $self\->prepare(localhost => set => [$oid => OCTET_STRING, $value, ...]);
\&  $self\->prepare("*" => get => [$oid, ...]);
.Ve
.PP
Note: To get the \f(CW\*(C`OCTET_STRING\*(C'\fR constant and friends you need to do:
.PP
.Vb 1
\&  use Net::SNMP ":asn1";
.Ve
.SS "set"
.IX Subsection "set"
.Vb 1
\&  use Net::SNMP ":asn1"; # Export OCTET_STRING
\&
\&  $self\->set($host, $args => [$oid, OCTET_STRING, $value, ...], sub {
\&    my ($self, $err, $session) = @_;
\&    return warn $err if $err;
\&    push @{$res{$host}}, $session\->var_bind_list;
\&  });
.Ve
.PP
Will send a \s-1SNMP\s0 set-request to the remote agent. See \*(L"set_request\*(R" in Net::SNMP
for details on which \f(CW$args\fR you can pass on. See \*(L"prepare\*(R" for generic
information about the variables associated with this method.
.SS "walk"
.IX Subsection "walk"
.Vb 5
\&  $self\->walk($host, $args, \e@oids, sub {
\&    my ($self, $err, $session) = @_;
\&    return warn $err if $err;
\&    push @{$res{$host}}, $session\->var_bind_list;
\&  });
.Ve
.PP
This is a custom \s-1SNMP\s0 method added by \*(L"add_custom_request_method\*(R". See
\&\*(L"prepare\*(R" for generic information about the variables associated with this
method.
.PP
This method will run \*(L"get_next_request\*(R" in Net::SNMP until an oid retrieved does
not match the base \s-1OID,\s0 or if the tree is exhausted. You might want to use
\&\*(L"bulk_walk\*(R" instead for better performance.
.SS "wait"
.IX Subsection "wait"
.Vb 1
\&  $self\->wait;
.Ve
.PP
This is useful if you want to block your code: \f(CW\*(C`wait()\*(C'\fR starts the ioloop and
runs until \*(L"master_timeout\*(R" or \*(L"finish\*(R" is reached.
.PP
.Vb 3
\&  my $snmp = Mojo::SNMP\->new;
\&  $snmp\->prepare(...)\->wait; # blocks while retrieving data
\&  # ... your program continues after the SNMP operations have finished.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Jan Henning Thorsen \- \f(CW\*(C`jhthorsen@cpan.org\*(C'\fR
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Espen Tallaksen \- \f(CW\*(C`espen.tallaksen@telenor.com\*(C'\fR
.PP
Joshua Keroes \- \f(CW\*(C`joshua.keroes@integratelecom.com\*(C'\fR
.PP
Oliver Gorwits \- \f(CW\*(C`oliver@cpan.org\*(C'\fR
.PP
Per Carlson \- \f(CW\*(C`per.carlson@broadnet.no\*(C'\fR
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (C) 2012\-2018, \*(L"\s-1AUTHOR\*(R"\s0 and \*(L"\s-1CONTRIBUTORS\*(R"\s0.
.PP
This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.
