.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Admin::UserProfile 3"
.TH Infoblox::Grid::Admin::UserProfile 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Admin::User::Profile \- User Profile object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Object that represents the user profile of the admin that is logged in.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a User Profile object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve an object from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $user_profile = $session\->get(object => "Infoblox::Grid::Admin::User::Profile");
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a User Profile object.
.SS "admin_group( )"
.IX Subsection "admin_group( )"
.RS 4
Use this method to retrieve the Admin Group object to which the admin belongs. An admin user can belong to only one admin group at a time. This attribute is read-only and cannot be modified.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value as Infoblox::Grid::Admin::Group object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get admin_group
\& my $admin_group = $user_profile\->admin_group();
.Ve
.RE
.RS 4
.RE
.SS "days_to_expire( )"
.IX Subsection "days_to_expire( )"
.RS 4
Use this method to retrieve the number of days left before the admin's password expires. This attribute is read-only and cannot be modified.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. \-1 means that the password doesn't expire.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get days_to_expire
\& my $days_to_expire = $user_profile\->days_to_expire();
.Ve
.RE
.RS 4
.RE
.SS "email( )"
.IX Subsection "email( )"
.RS 4
Use this method to set or retrieve the email address of the admin.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
String with the email address of the admin.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get email
\& my $email = $user_profile\->email();
\& #Modify email
\& $user_profile\->email("usertest\e@infoblox.com");
.Ve
.RE
.RS 4
.RE
.SS "global_search_on_ea( )"
.IX Subsection "global_search_on_ea( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether extensible attribute values will be returned by global search or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to set global_search_on_ea flag or 'false' to unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get global_search_on_ea
\& my $global_search_on_ea = $user_profile\->global_search_on_ea();
\&
\& #Modify global_search_on_ea
\& $user_profile\->global_search_on_ea(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "last_login( )"
.IX Subsection "last_login( )"
.RS 4
Use this method to retrieve the timestamp of when the admin last logged in. This attribute is read-only and cannot be modified.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the timestamp.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_login
\& my $last_login = $user_profile\->last_login();
.Ve
.RE
.RS 4
.RE
.SS "old_password( )"
.IX Subsection "old_password( )"
.RS 4
Use this method to specify the current password that will be replaced by a new password. To change a password in the database, you must provide both the current and new password values. This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Current password that the admin uses to log in.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Modify password
\& $user_profile\->old_password("infoblox");
.Ve
.RE
.RS 4
.RE
.SS "password( )"
.IX Subsection "password( )"
.RS 4
Use this method to set the new password of the admin. To change a password in the database, you must provide both the current and new password values. This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
New password of the admin.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Modify password
\& $user_profile\->password("infobloxone");
.Ve
.RE
.RS 4
.RE
.SS "table_size( )"
.IX Subsection "table_size( )"
.RS 4
Use this method to set or retrieve the number of lines of data a table or a single list view can contain.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The number of lines, which can be from 10 to 256.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get table_size
\& my $table_size = $user_profile\->table_size();
\& #Modify table_size
\& $user_profile\->table_size(20);
.Ve
.RE
.RS 4
.RE
.SS "time_zone( )"
.IX Subsection "time_zone( )"
.RS 4
Use this method to set or retrieve the time zone of the admin user.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The \s-1UTC\s0 string that represents the time zone. For example \*(L"(\s-1UTC\s0 \- 6:00) Central Time (\s-1US\s0 and Canada)\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get time zone
\& my $time_zone = $user_profile\->time_zone();
\& #Modify time zone
\& $user_profile\->time_zone("(UTC \- 6:00) Central Time (US and Canada)");
.Ve
.RE
.RS 4
.RE
.SS "user_type( )"
.IX Subsection "user_type( )"
.RS 4
Use this method to retrieve the admin type. This attribute is read-only and cannot be modified.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value as \*(L"\s-1LOCAL\*(R"\s0 or \*(L"\s-1REMOTE\*(R".\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get user_type
\& my $user_type = $user_profile\->user_type();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a User Profile object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\&                );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Get a User Profile object\fR
.PP
.Vb 2
\& #Get the user profile object from Infoblox appliance through a session
\& my $user_profile = $session\->get(object => "Infoblox::Grid::Admin::User::Profile);
\&
\& unless ($user_profile) {
\&        die("Get User Profile object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::Admin::Group,Infoblox::Session\->\fBget()\fR,Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
