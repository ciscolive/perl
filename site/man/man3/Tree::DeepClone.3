.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tree::DeepClone 3"
.TH Tree::DeepClone 3 "2019-06-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tree::DeepClone \- A subclass of Tree::Fast which does deep cloning
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        #!/usr/bin/env perl
\&
\&        use 5.010;
\&        use strict;
\&        use warnings FATAL => \*(Aqall\*(Aq;
\&
\&        use Tree::DeepClone;
\&
\&        # \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&        my(@alphabet) = (qw/a b c d e f g h i j k l m n o p q r s t u v w x y z/);
\&        my($tree)     = Tree::DeepClone \-> new(\*(Aqroot\*(Aq);
\&
\&        $tree \-> add_child({}, map {Tree::DeepClone \-> new($_)} 1..3);
\&
\&        my($value);
\&
\&        say \*(AqTree:\*(Aq;
\&
\&        for ($tree \-> traverse)
\&        {
\&                $value = $_ \-> value;
\&
\&                $_ \-> meta({$value => ($value eq \*(Aqroot\*(Aq) ? \*(Aq0\*(Aq : $alphabet[$value \- 1]});
\&
\&                say $_ \-> value, \*(Aq. meta: \*(Aq, ${$_ \-> meta}{$value};
\&        }
\&
\&        my($clone) = $tree \-> clone;
\&
\&        say \*(AqClone:\*(Aq;
\&
\&        for ($clone \-> traverse)
\&        {
\&                $value = $_ \-> value;
\&
\&                say $_ \-> value, \*(Aq. meta: \*(Aq, ${$_ \-> meta}{$value};
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module simply adds deep cloning to Tree::Fast. As per the Synopsis, you must use
Tree::DeepClone everywhere you want this feature.
.SH "METHODS"
.IX Header "METHODS"
All methods in <Tree::Fast> are available in Tree::DeepClone.
.SH "SUPPORT"
.IX Header "SUPPORT"
<https://github.com/ronsavage/Tree>.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.IP "\(bu" 4
Stevan Little for writing Tree, upon which this module is based.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ron Savage <rsavage@cpan.org>.
.PP
<https://savage.net.au/>.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This library is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
