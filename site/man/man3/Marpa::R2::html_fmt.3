.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Marpa::R2::html_fmt 3"
.TH Marpa::R2::html_fmt 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
html_fmt \- Reformat \s-1HTML,\s0 indented according to structure
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 5
\&    html_fmt [\-\-avoid\-whitespace=[yes|comment|no]]
\&      [\-\-no\-ws\-ok\-before\-end\-tag|\-\-no\-ws\-ok\-before\-end\-tag]
\&      [\-\-no\-ws\-ok\-after\-start\-tag|\-\-no\-ws\-ok\-after\-start\-tag]
\&      [\-\-added\-tag\-comment|\-\-no\-added\-tag\-comment]
\&      [uri|file]
.Ve
.SH "Description"
.IX Header "Description"
Writes its input to \f(CW\*(C`STDOUT\*(C'\fR,
reformatted and
indented according to the \s-1HTML\s0 structure.
With no arguments,
\&\f(CW\*(C`html_fmt\*(C'\fR looks for its input
on \f(CW\*(C`STDIN\*(C'\fR.
If it has an argument that looks like a \s-1URI,\s0
\&\f(CW\*(C`html_fmt\*(C'\fR treats that argument
as a \s-1URI.\s0
If it has an argument that does not
look like a \s-1URI,\s0
\&\f(CW\*(C`html_fmt\*(C'\fR uses that argument
as the name
of its input file.
\&\f(CW\*(C`html_fmt\*(C'\fR considers its argument to
\&\*(L"look like a \s-1URI\*(R",\s0
if it
starts with alphanumerics followed by a colon.
.PP
When reformatting and indenting,
\&\f(CW\*(C`html_fmt\*(C'\fR takes measures
to avoid introducing
whitespace that will affect the way in which the \s-1HTML\s0
displays.
The standards differ on whitespace treatment;
when the standards agree
they often allow considerable
latitude to the browsers;
and specific implementions will
exploit the allowed latitude in different ways,
or exceed it.
All of which is to say that
\&\f(CW\*(C`html_fmt\*(C'\fR's attempts to avoid introducing
whitespace are not always successful.
.PP
\&\f(CW\*(C`html_fmt\*(C'\fR supplies missing start and end tags.
If \f(CW\*(C`html_fmt\*(C'\fR cannot find required start and end tags,
it supplies them.
\&\f(CW\*(C`html_fmt\*(C'\fR's grammar is very liberal in its interpretation
of what is valid \s-1HTML.\s0
Finally, if this is not sufficient to turn the input
into valid \s-1HTML,\s0
\&\f(CW\*(C`html_fmt\*(C'\fR
will treat problem sections of the input
as noise or \*(L"cruft\*(R",
ignoring them in determining
the structure of the document.
\&\f(CW\*(C`html_fmt\*(C'\fR never rejects its input,
whatever its contents.
.PP
When
\&\f(CW\*(C`html_fmt\*(C'\fR adds
a missing start tag,
it follows the new start tag with a comment.
When
\&\f(CW\*(C`html_fmt\*(C'\fR adds
a missing end tag,
it preceeds the new end tag with a comment.
When \f(CW\*(C`html_fmt\*(C'\fR classifies characters
as \*(L"cruft\*(R",
it adds a comment to that effect before the \*(L"cruft\*(R".
.PP
\&\f(CW\*(C`pre\*(C'\fR and \f(CW\*(C`script\*(C'\fR
elements receive special treatment.
The contents of
\&\f(CW\*(C`pre\*(C'\fR and \f(CW\*(C`script\*(C'\fR elements are not reformatted.
When missing tags or cruft occur inside a \f(CW\*(C`pre\*(C'\fR element,
the comments to that effect are placed
before the \f(CW\*(C`<pre>\*(C'\fR start tag.
The contents of \f(CW\*(C`script\*(C'\fR elements are not
examined.
.SH "Options"
.IX Header "Options"
No single set of reformatting choices is anywhere
near adequate to the variety of standards,
renderers and application requirements out there.
Ideally,
\&\f(CW\*(C`html_fmt\*(C'\fR would have many options customizing its behavior.
As of this writing, there are only a few.
.SS "avoid-whitespace"
.IX Subsection "avoid-whitespace"
When adding indentation,
\&\f(CW\*(C`html_fmt\*(C'\fR runs the risk of introducing
whitespace that will change
the way in which the document is displayed.
How \f(CW\*(C`html_fmt\*(C'\fR deals with this risk
is controlled by the
the \f(CW\*(C`\-\-avoid\-whitespace\*(C'\fR option,
which
may take one of three values:
\&\f(CW\*(C`yes\*(C'\fR, \f(CW\*(C`no\*(C'\fR and \f(CW\*(C`comment\*(C'\fR.
.PP
If the value
of the \f(CW\*(C`\-\-avoid\-whitespace\*(C'\fR option
is \f(CW\*(C`yes\*(C'\fR,
\&\f(CW\*(C`html_fmt\*(C'\fR does not add indentation
in whitespace-sensitive places.
This avoids clutter but,
because of the missed indentation,
the structure of the 
document becomes harder to follow.
\&\f(CW\*(C`yes\*(C'\fR is the default value.
.PP
If the value is \f(CW\*(C`comment\*(C'\fR,
\&\s-1HTML\s0 (\s-1SGML\s0) comments are used to achieve proper
indentation without introducing whitespace.
This works, but does get a bit cluttered.
.PP
If the value is \f(CW\*(C`no\*(C'\fR,
\&\f(CW\*(C`html_fmt\*(C'\fR 
adds whitespace whenever it is convenient
for formatting, regardless of whether or
not it may change the way in which
the document displays.
.SS "added-tag-comment"
.IX Subsection "added-tag-comment"
The \f(CW\*(C`\-\-added\-tag\-comment\*(C'\fR option is a Boolean.
If set, whenever \f(CW\*(C`html_fmt\*(C'\fR supplies a missing start
or end tag, \f(CW\*(C`html_fmt\*(C'\fR will include a comment to that effect.
If the boolean is unset with
\&\f(CW\*(C`\-\-no\-added\-tag\-comment\*(C'\fR,
\&\f(CW\*(C`html_fmt\*(C'\fR will be silent when supply missing start
and end tags.
\&\f(CW\*(C`\-\-added\-tag\-comment\*(C'\fR is the default.
.SS "ws-ok-after-start-tag"
.IX Subsection "ws-ok-after-start-tag"
The \f(CW\*(C`\-\-ws\-ok\-after\-start\-tag\*(C'\fR option is a Boolean.
If set, \f(CW\*(C`html_fmt\*(C'\fR will add whitespace after an start tag when
that is useful.
If the \s-1SGML\s0 standards
are adhered to, the added whitespace will not
be rendered.
However, the \s-1HTML\s0 standards, while they allow SGML-adherent behavior
for whitespace after start tags,
do not require it.
In some case in practice,
browsers will render whitespace found after
start tags.
.PP
If \f(CW\*(C`\-\-ws\-ok\-after\-start\-tag\*(C'\fR is false,
\&\f(CW\*(C`html_fmt\*(C'\fR will not add whitespace after
start tags.
But it increases the ability of
\&\f(CW\*(C`html_fmt\*(C'\fR to make its output readable,
but may result in a change in what some
browsers display.
.SS "ws-ok-before-end-tag"
.IX Subsection "ws-ok-before-end-tag"
The \f(CW\*(C`\-\-ws\-ok\-before\-end\-tag\*(C'\fR option is a Boolean.
If set, \f(CW\*(C`html_fmt\*(C'\fR will add whitespace before an end tag when
that is useful.
If the \s-1SGML\s0 standards
are adhered to, the added whitespace will not
be rendered.
However, the \s-1HTML\s0 standards, while they allow SGML-adherent behavior
for whitespace before end tags,
do not require it.
In practice,
browsers will often render whitespace found before
end tags.
.PP
If \f(CW\*(C`\-\-ws\-ok\-before\-end\-tag\*(C'\fR is false,
\&\f(CW\*(C`html_fmt\*(C'\fR will not add whitespace before
end tags.
\&\f(CW\*(C`\-\-ws\-ok\-before\-end\-tag\*(C'\fR is false by default.
This is always safe,
in the sense that it will not change
what is there to be rendered.
But it limits the ability of
\&\f(CW\*(C`html_fmt\*(C'\fR to make its output readable.
.SH "Example"
.IX Header "Example"
Given this input:
.PP
.Vb 1
\&    <title>Test page<tr>x<head attr="I am cruft"><p>Final graf
.Ve
.PP
to this command:
.PP
.Vb 1
\&    html_fmt \-\-avoid\-whitespace=comment \-\-ws\-ok\-before\-end\-tag
.Ve
.PP
the output is
.PP
.Vb 10
\&  <html>
\&    <!\-\- html_fmt: Preceeding start tag is replacement for a missing one \-\->
\&    <head>
\&      <!\-\- html_fmt: Preceeding start tag is replacement for a missing one \-\->
\&      <title>
\&        Test page
\&        <!\-\- html_fmt: Following end tag is replacement for a missing one \-\->
\&      </title>
\&      <!\-\- html_fmt: Following end tag is replacement for a missing one \-\->
\&    </head><!\-\-
\&      html_fmt: this comment is to avoid introducing whitespace
\&    \-\-><body>
\&      <!\-\- html_fmt: Preceeding start tag is replacement for a missing one \-\->
\&      <table>
\&        <!\-\- html_fmt: Preceeding start tag is replacement for a missing one \-\->
\&        <tbody>
\&          <!\-\- html_fmt: Preceeding start tag is replacement for a missing one \-\->
\&          <tr>
\&            <td>
\&              <!\-\- html_fmt: Preceeding start tag is replacement for a missing one \-\->
\&              x<!\-\-
\&                html_fmt: this comment is to avoid introducing whitespace
\&              \-\-><!\-\- html_fmt: Next line is cruft \-\-><!\-\-
\&                html_fmt: this comment is to avoid introducing whitespace
\&              \-\-><head attr="I am cruft"><!\-\-
\&                html_fmt: this comment is to avoid introducing whitespace
\&              \-\-><p>
\&                Final graf
\&                <!\-\- html_fmt: Following end tag is replacement for a missing one \-\->
\&              </p>
\&              <!\-\- html_fmt: Following end tag is replacement for a missing one \-\->
\&            </td>
\&            <!\-\- html_fmt: Following end tag is replacement for a missing one \-\->
\&          </tr>
\&          <!\-\- html_fmt: Following end tag is replacement for a missing one \-\->
\&        </tbody>
\&        <!\-\- html_fmt: Following end tag is replacement for a missing one \-\->
\&      </table>
\&      <!\-\- html_fmt: Following end tag is replacement for a missing one \-\->
\&    </body>
\&    <!\-\- html_fmt: Following end tag is replacement for a missing one \-\->
\&  </html>
.Ve
.SH "Acknowledgements"
.IX Header "Acknowledgements"
The starting template for this code was
HTML::TokeParser, by Gisle Aas.
.SH "Copyright and License"
.IX Header "Copyright and License"
.Vb 5
\&  Copyright 2018 Jeffrey Kegler
\&  This file is part of Marpa::R2.  Marpa::R2 is free software: you can
\&  redistribute it and/or modify it under the terms of the GNU Lesser
\&  General Public License as published by the Free Software Foundation,
\&  either version 3 of the License, or (at your option) any later version.
\&
\&  Marpa::R2 is distributed in the hope that it will be useful,
\&  but WITHOUT ANY WARRANTY; without even the implied warranty of
\&  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
\&  Lesser General Public License for more details.
\&
\&  You should have received a copy of the GNU Lesser
\&  General Public License along with Marpa::R2.  If not, see
\&  http://www.gnu.org/licenses/.
.Ve
