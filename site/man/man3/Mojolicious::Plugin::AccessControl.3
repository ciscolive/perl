.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::AccessControl 3"
.TH Mojolicious::Plugin::AccessControl 3 "2014-04-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::AccessControl \- Access control
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  # Mojolicious
\&  sub stratup {
\&    my $self = shift;
\&    $self\->plugin(\*(AqAccessControl\*(Aq);
\&    my $r = $self\->routes;
\&    $r\->get(\*(Aq/\*(Aq)\->to(\*(Aqexample#welcome\*(Aq)\->over( \*(Aqaccess\*(Aq => [
\&        allow => \*(Aqallowhost.com\*(Aq,
\&        allow => \*(Aq127.0.0.1\*(Aq,
\&        allow => \*(Aq192.168.0.3\*(Aq,
\&        deny  => \*(Aq192.168.0.0/24\*(Aq,
\&        allow => sub { $_[0]\->req\->headers\->user_agent =~ /Firefox/ },
\&        deny  => \*(Aqall\*(Aq,
\&    ] )\->name(\*(Aqindex\*(Aq);
\&  }
\&
\&  # Mojolicious::Lite
\&  plugin \*(AqAccessControl\*(Aq;
\&
\&  get \*(Aq/\*(Aq => ( \*(Aqaccess\*(Aq => [
\&      allow => \*(Aqallowhost.com\*(Aq,
\&      allow => \*(Aq127.0.0.1\*(Aq,
\&      allow => \*(Aq192.168.0.3\*(Aq,
\&      deny  => \*(Aq192.168.0.0/24\*(Aq,
\&      allow => sub { $_[0]\->req\->headers\->user_agent =~ /Firefox/ },
\&      deny  => \*(Aqall\*(Aq,
\&  ] ) => sub {
\&      my $self = shift;
\&      # do something
\&  } => \*(Aqindex\*(Aq;
\&
\&  # if access was denined, run \*(Aqon_deny\*(Aq which is a code reference.
\&  get \*(Aq/deny_all\*(Aq => ( \*(Aqaccess\*(Aq => [
\&      { on_deny => sub {
\&          my $self = shift; # Mojolicious::Controller
\&          $self\->res\->code(403);
\&          $self\->render( text => \*(AqForbidden\*(Aq );
\&      } },
\&      deny  => \*(Aqall\*(Aq,
\&  ] ) => sub {
\&      my $self = shift;
\&      # do something
\&  } => \*(Aqindex\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::AccessControl is intended for restricting access to app routes.
.PP
This adds the condition to Mojolicious::Routes, which is named 'access'.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::AccessControl inherits all methods from Mojolicious::Plugin and implements the following new ones.
.SS "register"
.IX Subsection "register"
.Vb 1
\&  $plugin\->register(Mojolicious\->new);
.Ve
.PP
Register condition in Mojolicious application.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.Vb 11
\&  get \*(Aq/\*(Aq => ( \*(Aqaccess\*(Aq => [
\&      allow => \*(Aqallowhost.com\*(Aq,
\&      allow => \*(Aq127.0.0.1\*(Aq,
\&      allow => \*(Aq192.168.0.3\*(Aq,
\&      deny  => \*(Aq192.168.0.0/24\*(Aq,
\&      allow => sub { $_[0]\->req\->headers\->user_agent =~ /Firefox/ },
\&      deny  => \*(Aqall\*(Aq,
\&  ] ) => sub {
\&      my $self = shift;
\&      # do something
\&  } => \*(Aqindex\*(Aq;
.Ve
.PP
\&'access' takes an arrayref of rules.
.PP
Each rule consists of directive allow or deny and their argument. Rules are checked in the order of their record to the first match. Code rules always match if they return a defined non-zero value. Access is granted if no rule matched.
.ie n .IP """all""" 2
.el .IP "``all''" 2
.IX Item "all"
always matched.
.IP "ip" 2
.IX Item "ip"
matches on one ip or ip range.
.Sp
See Net::CIDR::Lite.
.IP "remote_host" 2
.IX Item "remote_host"
matches on domain or subdomain of remote_host if it can be resolved.
.Sp
If Mojo::Message::Request#env\->{\s-1REMOTE_HOST\s0} is not set, the rule is skipped.
.IP "code" 2
.IX Item "code"
an arbitrary code reference for checking arbitrary properties of the request.
.Sp
this function takes Mojolicious::Controller as parameter. The rule is skipped if the code returns undef.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&'access' takes an arrayref of rules. If there is a hashref to the top, it considered options.
.PP
.Vb 10
\&  get \*(Aq/only_local\*(Aq => ( \*(Aqaccess\*(Aq => [
\&      # options
\&      {
\&        on_deny => sub {
\&            my $self = shift; # Mojolicious::Controller
\&            $self\->res\->code(403);
\&            $self\->render( text => \*(AqForbidden\*(Aq );
\&        },
\&      },
\&      # rules
\&      allow => \*(Aq127.0.0.1\*(Aq,
\&      deny  => \*(Aqall\*(Aq,
\&  ] ) => sub {
\&      my $self = shift;
\&      # do something
\&  } => \*(Aqindex\*(Aq;
.Ve
.ie n .IP """on_deny""" 2
.el .IP "``on_deny''" 2
.IX Item "on_deny"
an arbitrary code reference.
.Sp
if access was denied, run this callback.
.SH "AUTHOR"
.IX Header "AUTHOR"
hayajo <hayajo@cpan.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Many thanks to the contributors for their work.
.IP "oliverguenther@github" 4
.IX Item "oliverguenther@github"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides::Routing, Plack::Middleware::Access, Plack::Builder::Conditionals,
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
