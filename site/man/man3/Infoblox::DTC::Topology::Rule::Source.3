.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DTC::Topology::Rule::Source 3"
.TH Infoblox::DTC::Topology::Rule::Source 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DTC::Topology::Rule::Source \- A DTC Topology Rule Source object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1DTC\s0 Topology Rule Source object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 6
\& my $rule_source = Infoblox::DTC::Topology::Rule::Source\->new(
\&    source_type  => \*(AqSUBNET\*(Aq | \*(AqCONTINENT\*(Aq | \*(AqCOUNTRY\*(Aq | \*(AqSUBDIVISION\*(Aq | 
\&                    \*(AqCITY\*(Aq | \*(AqEA0\*(Aq | \*(AqEA1\*(Aq | \*(AqEA2\*(Aq | \*(AqEA3\*(Aq,                      #Required
\&    source_value => $string,                                                     #Required
\&    source_op    => \*(AqIS\*(Aq | \*(AqIS_NOT\*(Aq,                                             #Optional / Default is \*(AqIS\*(Aq
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The object does not support any session methods. It's retrieved as a part of an Infoblox::DTC::Topology::Rule, and used as a matching conditions for a \s-1DTC\s0 load balancer.
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of the object.
.SS "source_op( )"
.IX Subsection "source_op( )"
.RS 4
Use this method to set or retrieve the operation used to match the value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1IS\s0' and '\s-1IS_NOT\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get source_op value
\& my $source_op = $source\->source_op();
\&
\& #modify source_op value
\& $source\->source_op(\*(AqIS\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "source_type( )"
.IX Subsection "source_type( )"
.RS 4
Use this method to set or retrieve the source type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1SUBNET\s0', '\s-1CONTINENT\s0', '\s-1COUNTRY\s0', '\s-1CITY\s0', '\s-1SUBDIVISION\s0', '\s-1EA0\s0', '\s-1EA1\s0', '\s-1EA2\s0' and '\s-1EA3\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get source_type value
\& my $source_type = $source\->source_type();
\&
\& #modify source_type value
\& $source\->source_type(\*(AqCOUNTRY\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "source_value( )"
.IX Subsection "source_value( )"
.RS 4
Use this method to set or retrieve the source value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string that contains the desired source value.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get source_value value
\& my $source_value = $source\->source_value();
\&
\& #modify source_value value
\& $source\->source_value(\*(AqUnited States\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DTC::Topology::Rule
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
