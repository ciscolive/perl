.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "GraphViz2::Parse::ISA 3"
.TH GraphViz2::Parse::ISA 3 "2020-10-16" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GraphViz2::Parse::ISA \- Visualize N Perl class hierarchies as a graph
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&        use strict;
\&        use warnings;
\&        use File::Spec;
\&        use GraphViz2::Parse::ISA;
\&
\&        my $parser = GraphViz2::Parse::ISA\->new;
\&        unshift @INC, \*(Aqt/lib\*(Aq;
\&        $parser\->add(class => \*(AqAdult::Child::Grandchild\*(Aq, ignore => []);
\&        $parser\->add(class => \*(AqHybridVariety\*(Aq, ignore => []);
\&        $parser\->generate_graph;
\&
\&        my $format      = shift || \*(Aqsvg\*(Aq;
\&        my $output_file = shift || "parse.code.$format";
\&
\&        $parser\->graph\->run(format => $format, output_file => $output_file);
.Ve
.PP
See scripts/parse.isa.pl.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Takes a class name and converts its class hierarchy into a graph. This can be done for N different classes before the graph is generated.
.PP
You can write the result in any format supported by Graphviz <http://www.graphviz.org/>.
.SH "Constructor and Initialization"
.IX Header "Constructor and Initialization"
.SS "Calling \fBnew()\fP"
.IX Subsection "Calling new()"
\&\f(CW\*(C`new()\*(C'\fR is called as \f(CW\*(C`my($obj) = GraphViz2::Parse::ISA\->new(k1 => v1, k2 => v2, ...)\*(C'\fR.
.PP
It returns a new object of type \f(CW\*(C`GraphViz2::Parse::ISA\*(C'\fR.
.PP
Key-value pairs accepted in the parameter list:
.ie n .IP "o graph => $graphviz_object" 4
.el .IP "o graph => \f(CW$graphviz_object\fR" 4
.IX Item "o graph => $graphviz_object"
This option specifies the GraphViz2 object to use. This allows you to configure it as desired.
.Sp
The default is GraphViz2\->new. The default attributes are the same as
in the synopsis, above.
The default for GraphViz2::Parse::ISA is to plot from the bottom to
the top (Grandchild to Parent).  This is the opposite of GraphViz2.
.Sp
This key is optional.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "add(class => $class[, ignore => $ignore])"
.el .SS "add(class => \f(CW$class\fP[, ignore => \f(CW$ignore\fP])"
.IX Subsection "add(class => $class[, ignore => $ignore])"
Adds the class hierarchy of \f(CW$class\fR to an internal structure.
.PP
\&\f(CW$class\fR is the name of the class whose parents are to be found.
.PP
\&\f(CW$ignore\fR is an optional arrayref of class names to ignore. The value of \f(CW$ignore\fR is \fInot\fR preserved between calls to \fBadd()\fR.
.PP
After all desired calls to \fBadd()\fR, you \fImust\fR call \*(L"\fBgenerate_graph()\fR\*(R" to actually trigger the call to the GraphViz2 methods \fBadd_node()\fR and \fBadd_edge()\fR.
.PP
Returns \f(CW$self\fR for method chaining.
.PP
See scripts/parse.isa.pl.
.SS "\fBgenerate_graph()\fP"
.IX Subsection "generate_graph()"
Processes the internal structure mentioned under \fBadd()\fR to add all the nodes and edges to the graph.
.PP
After that you call GraphViz2's \fBrun()\fR method on the graph object. See \*(L"\fBgraph()\fR\*(R".
.PP
Returns \f(CW$self\fR for method chaining.
.PP
See scripts/parse.isa.pl.
.SS "\fBgraph()\fP"
.IX Subsection "graph()"
Returns the graph object, either the one supplied to \fBnew()\fR or the one created during the call to \fBnew()\fR.
.SH "Scripts Shipped with this Module"
.IX Header "Scripts Shipped with this Module"
.SS "scripts/parse.isa.pl"
.IX Subsection "scripts/parse.isa.pl"
Demonstrates combining 2 Perl class hierarchies on the same graph.
.PP
Outputs to ./html/parse.isa.svg by default. Change this by providing a
format argument (e.g. \f(CW\*(C`svg\*(C'\fR) and a filename argument.
.SH "THANKS"
.IX Header "THANKS"
Many thanks are due to the people who chose to make Graphviz <http://www.graphviz.org/> Open Source.
.PP
And thanks to Leon Brocard <http://search.cpan.org/~lbrocard/>, who wrote GraphViz, and kindly gave me co-maint of the module.
.PP
The code in \fBadd()\fR was adapted from GraphViz::ISA::Multi by Marcus Thiesen, but that code gobbled up package declarations
in comments and \s-1POD,\s0 so I used Pod::Simple to give me just the source code.
.SH "AUTHOR"
.IX Header "AUTHOR"
GraphViz2 was written by Ron Savage \fI<ron@savage.net.au>\fR in 2011.
.PP
Home page: <http://savage.net.au/index.html>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Australian copyright (c) 2011, Ron Savage.
.PP
.Vb 4
\&        All Programs of mine are \*(AqOSI Certified Open Source Software\*(Aq;
\&        you can redistribute them and/or modify them under the terms of
\&        The Perl License, a copy of which is available at:
\&        http://dev.perl.org/licenses/
.Ve
