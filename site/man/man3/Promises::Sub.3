.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Promises::Sub 3"
.TH Promises::Sub 3 "2020-02-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Promises::Sub \- Turns functions into promises
.SH "VERSION"
.IX Header "VERSION"
version 1.04
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Promises \*(Aqdeferred\*(Aq;
\&    use parent \*(AqPromises::Sub\*(Aq;
\&
\&    sub shall_concat :Defer {
\&        join \*(Aq \*(Aq, @_;
\&    }
\&
\&    my @promises = map { deferred } 1..2;
\&
\&    my @results = (
\&        shall_concat( @promises ),
\&        shall_concat( \*(Aqthat is\*(Aq, $promises[1] ),
\&        shall_concat( \*(Aqthis is\*(Aq, \*(Aqstraight up\*(Aq ),
\&    );
\&
\&    say "all results are promises";
\&
\&    $_\->then(sub { say @_ } ) for @results;
\&    # prints \*(Aqthis is straight up\*(Aq
\&
\&    say "two results are still waiting...";
\&
\&    $promises[1]\->resolve( \*(Aqdelayed\*(Aq );
\&    # prints \*(Aqthis is delayed\*(Aq
\&
\&    say "only one left...";
\&
\&    $promises[0]\->resolve( \*(Aqfinally the last one, that was\*(Aq );
\&    # prints \*(Aqfinally the last one, that was delayed\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Any function tagged with the \f(CW\*(C`:Defer\*(C'\fR will be turned into a promise, so you can do
.PP
.Vb 1
\&    sub add :Defer { $_[0] + $_[1] }
\&
\&    add( 1,2 )\->then(sub { say "the result is ", @_ } );
.Ve
.PP
Additionally, if any of the arguments to the functions are promises themselves,
the function call will wait until those promises are fulfilled before running.
.PP
.Vb 1
\&    my $number = deferred;
\&
\&    add( 1, $number )\->then(sub { say "result: ", @_ } );
\&
\&    # $number is not fulfilled yet, nothing is printed
\&
\&    $number\->resolve(47);
\&    # prints \*(Aqresult: 48\*(Aq
.Ve
.PP
Bear in mind that to use the \f(CW\*(C`:Defer\*(C'\fR attribute, you have to 
do \f(CW\*(C`use parent \*(AqPromises::Sub\*(Aq;\*(C'\fR,
and not \f(CW\*(C`use Promises::Sub;\*(C'\fR in the target namespace.
.SS "Anonymous functions"
.IX Subsection "Anonymous functions"
The \f(CW\*(C`:Defer\*(C'\fR attribute won't work for anonymous functions and will throw
an exception. For those, you can
export the function \f(CW\*(C`defer\*(C'\fR, which will wrap any coderef the same way that
\&\f(CW\*(C`:Defer\*(C'\fR does.
.PP
.Vb 1
\&    use Promises::Sub qw/ defer /;
\&
\&    my $promised_sub = defer sub {
\&        join \*(Aq \*(Aq, @_;
\&    };
\&
\&    my $p1 = deferred;
\&
\&    $promised_sub\->( \*(Aqhello\*(Aq, $p1 )\->then( sub {
\&        say shift;
\&    } );
\&
\&    # prints nothing
\&
\&    $p1\->resolve(\*(Aqworld\*(Aq);
\&    # => prints \*(Aqhello world\*(Aq
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Stevan Little <stevan.little@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020, 2019, 2017, 2014, 2012 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
