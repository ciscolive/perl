.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::MungeHas 3"
.TH MooseX::MungeHas 3 "2019-01-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::MungeHas \- munge your "has" (works with Moo, Moose and Mouse)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   package Foo::Bar;
\&   
\&   use Moose;
\&   use MooseX::MungeHas "is_ro";
\&   
\&   has foo => ();             # read\-only
\&   has bar => (is => "rw");   # read\-write
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MooseX::MungeHas alters the behaviour of the attributes of your Moo,
Moose or Mouse based class. It manages to support all three because
it doesn't attempt to do anything smart with metathingies; it simply
installs a wrapper for \f(CW\*(C`has\*(C'\fR that munges the attribute specification
hash before passing it on to the original \f(CW\*(C`has\*(C'\fR function.
.PP
The following munges are always applied (simply because I can see no
sensible reason why you would not want them to be).
.IP "\(bu" 4
Implement \f(CW\*(C`is => "rwp"\*(C'\fR and \f(CW\*(C`is => "lazy"\*(C'\fR in Moose and
Mouse.
.Sp
(These already work in Moo.)
.IP "\(bu" 4
Implement \f(CW\*(C`builder => 1\*(C'\fR, \f(CW\*(C`clearer => 1\*(C'\fR, \f(CW\*(C`predicate => 1\*(C'\fR,
and \f(CW\*(C`trigger => 1\*(C'\fR in Moose and Mouse.
.Sp
(These already work in Moo.)
.IP "\(bu" 4
Implement \f(CW\*(C`builder => sub { ... }\*(C'\fR in Moose and Mouse.
.Sp
(This already works in Moo.)
.IP "\(bu" 4
Allow Moo to support \f(CW\*(C`coerce => 0|1\*(C'\fR for Type::Tiny type
constraints. (Moo normally expects a coderef for the coercion.)
.Sp
(These already work in Moose and Mouse, and has actually been
added to Moo as of version 1.006000.)
.IP "\(bu" 4
Makes \f(CW\*(C`has $name => sub { ... }\*(C'\fR into a shortcut for:
.Sp
.Vb 1
\&   has $name => (is => "lazy", builder => sub { ... });
.Ve
.IP "\(bu" 4
Makes \f(CW\*(C`has $name => $type_constraint\*(C'\fR into a shortcut for:
.Sp
.Vb 1
\&   has $name => (isa => $type_constraint);
.Ve
.Sp
(Assuming that \f(CW$type_constraint\fR is a blessed type constraint
object a la Type::Tiny, MooseX::Types, etc.)
.IP "\(bu" 4
Makes \f(CW\*(C`lazy => sub { ... }\*(C'\fR into a shortcut for:
.Sp
.Vb 2
\&    lazy    => 1,
\&    builder => sub { ... },
.Ve
.PP
When you import this module (i.e. \f(CW\*(C`use MooseX::MungeHas\*(C'\fR) you can
provide a list of additional mungers you want it to apply. These may be
provided as coderefs, though for a few common, useful sets of behaviour,
there are pre-defined shortcut strings.
.PP
.Vb 7
\&   # "no_isa" is a pre\-defined shortcut;
\&   # the other munger is a coderef.
\&   #
\&   use MooseX::MungeHas "no_isa", sub {
\&      # Make constructor ignore private attributes
\&      $_{init_arg} = undef if /^_/;
\&   };
.Ve
.PP
Within coderefs, the name of the attribute being processed is available
in the \f(CW$_\fR variable, and the specification hash is available as
\&\f(CW%_\fR.
.PP
You may provide multiple coderefs.
.PP
The following are the pre-defined shortcuts:
.ie n .IP """is_ro"", ""is_rw"", ""is_rwp"", ""is_lazy""" 4
.el .IP "\f(CWis_ro\fR, \f(CWis_rw\fR, \f(CWis_rwp\fR, \f(CWis_lazy\fR" 4
.IX Item "is_ro, is_rw, is_rwp, is_lazy"
These mungers supply defaults for the \f(CW\*(C`is\*(C'\fR option.
.ie n .IP """always_coerce""" 4
.el .IP "\f(CWalways_coerce\fR" 4
.IX Item "always_coerce"
Automatically provides \f(CW\*(C`coerce => 1\*(C'\fR if the type constraint provides
coercions. (Unless you've explicitly specified \f(CW\*(C`coerce => 0\*(C'\fR.)
.ie n .IP """always_required""" 4
.el .IP "\f(CWalways_required\fR" 4
.IX Item "always_required"
Automatically provides \f(CW\*(C`required => 1\*(C'\fR unless there is a default or
builder. (Unless you've explicitly specified \f(CW\*(C`required => 0\*(C'\fR.)
.ie n .IP """no_isa""" 4
.el .IP "\f(CWno_isa\fR" 4
.IX Item "no_isa"
Switches off \f(CW\*(C`isa\*(C'\fR checks for attributes, unless they coerce.
.ie n .IP """simple_isa""" 4
.el .IP "\f(CWsimple_isa\fR" 4
.IX Item "simple_isa"
Loosens type constraints if they don't coerce, and if it's likely to make
them significantly faster. (Loosening \f(CW\*(C`Int\*(C'\fR to \f(CW\*(C`Num\*(C'\fR won't speed it
up.)
.Sp
Only works if you're using Type::Tiny constraints.
.PP
Mungers provided as coderefs are executed \fIafter\fR predefined ones, but
are otherwise executed in the order specified.
.SS "Multiple Wrappers"
.IX Subsection "Multiple Wrappers"
Since version 0.007, it has been possible to use MooseX::MungeHas to
export multiple wrappers with different names:
.PP
.Vb 6
\&   package Foo;
\&   use Moose;
\&   use MooseX::MungeHas {
\&      has_ro   => [ "is_ro", "always_coerce" ],
\&      has_rw   => [ "is_rw", "always_coerce" ],
\&   };
\&   
\&   has_ro "foo" => (required => 1);
\&   has_rw "bar";
.Ve
.PP
Note in the example above, MooseX::MungeHas has installed two brand new
wrapped \f(CW\*(C`has\*(C'\fR functions with different names, but it has left the
standard \f(CW\*(C`has\*(C'\fR function unmolested.
.PP
If you wanted to alter the standard function too, then you could use:
.PP
.Vb 7
\&   package Foo;
\&   use Moose;
\&   use MooseX::MungeHas {
\&      has      => [          "always_coerce" ],
\&      has_ro   => [ "is_ro", "always_coerce" ],
\&      has_rw   => [ "is_rw", "always_coerce" ],
\&   };
\&   
\&   has_ro "foo" => (required => 1);
\&   has_rw "bar";
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs to
<http://rt.cpan.org/Dist/Display.html?Queue=MooseX\-MungeHas>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Moo, Mouse, Moose, MooseX::AttributeShortcuts,
MooseX::InlineTypes, Type::Tiny::Manual.
.PP
Similar: MooseX::HasDefaults, MooseX::Attributes::Curried,
MooseX::Attribute::Prototype and MooseX::AttributeDefaults.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2013\-2014, 2017 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
