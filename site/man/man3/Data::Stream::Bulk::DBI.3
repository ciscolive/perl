.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Stream::Bulk::DBI 3"
.TH Data::Stream::Bulk::DBI 3 "2012-02-14" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Stream::Bulk::DBI \- N\-at\-a\-time iteration of DBI statement results.
.SH "VERSION"
.IX Header "VERSION"
version 0.11
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Data::Stream::Bulk::DBI;
\&
\&        my $sth = $dbh\->prepare("SELECT hate FROM sql"); # very big resultset
\&        $sth\->execute;
\&
\&        return Data::Stream::Bulk::DBI\->new(
\&                sth => $sth,
\&                max_rows => $n, # how many at a time
\&                slice => [ ... ], # if you want to pass the first param to fetchall_arrayref
\&        );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This implementation of Data::Stream::Bulk api works with \s-1DBI\s0 statement
handles, using \*(L"fetchall_arrayref\*(R" in \s-1DBI\s0.
.PP
It fetches \f(CW\*(C`max_rows\*(C'\fR at a time (defaults to 500).
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "sth" 4
.IX Item "sth"
The statement handle to call \f(CW\*(C`fetchall_arrayref\*(C'\fR on.
.IP "slice" 4
.IX Item "slice"
Passed verbatim as the first param to \f(CW\*(C`fetchall_arrayref\*(C'\fR. Should usually be
\&\f(CW\*(C`undef\*(C'\fR, provided for completetness.
.IP "max_rows" 4
.IX Item "max_rows"
The second param to \f(CW\*(C`fetchall_arrayref\*(C'\fR. Controls the size of each buffer.
.Sp
Defaults to 500.
.SH "METHODS"
.IX Header "METHODS"
.IP "get_more" 4
.IX Item "get_more"
See Data::Stream::Bulk::DoneFlag.
.Sp
Calls \f(CW\*(C`fetchall_arrayref\*(C'\fR to get the next chunk of rows.
.IP "all" 4
.IX Item "all"
Calls \f(CW\*(C`fetchall_arrayref\*(C'\fR to get the raminder of the data (without specifying
\&\f(CW\*(C`max_rows\*(C'\fR).
.SH "AUTHOR"
.IX Header "AUTHOR"
Yuval Kogman <nothingmuch@woobling.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Yuval Kogman.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
