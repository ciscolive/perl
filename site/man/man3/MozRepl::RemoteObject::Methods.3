.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MozRepl::RemoteObject::Methods 3"
.TH MozRepl::RemoteObject::Methods 3 "2017-08-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MozRepl::RemoteObject::Methods \- Perl methods for mozrepl objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my @links = $obj\->MozRepl::RemoteObject::Methods::xpath(\*(Aq//a\*(Aq);
.Ve
.PP
This module holds the routines that previously lived
as injected object methods on \fIall\fR Javascript objects.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """$obj\->MozRepl::RemoteObject::Methods::invoke(METHOD, ARGS)"""
.el .SS "\f(CW$obj\->MozRepl::RemoteObject::Methods::invoke(METHOD, ARGS)\fP"
.IX Subsection "$obj->MozRepl::RemoteObject::Methods::invoke(METHOD, ARGS)"
The \f(CW\*(C`invoke()\*(C'\fR object method is an alternate way to
invoke Javascript methods. It is normally equivalent to 
\&\f(CW\*(C`$obj\->$method(@ARGS)\*(C'\fR. This function must be used if the
\&\s-1METHOD\s0 name contains characters not valid in a Perl variable name 
(like foreign language characters).
To invoke a Javascript objects native \f(CW\*(C`_\|_invoke\*(C'\fR method (if such a
thing exists), please use:
.PP
.Vb 1
\&    $object\->MozRepl::RemoteObject::Methods::invoke(\*(Aq_\|_invoke\*(Aq, @args);
.Ve
.PP
This method can be used to call the Javascript functions with the
same name as other convenience methods implemented
in Perl:
.PP
.Vb 5
\&    _\|_attr
\&    _\|_setAttr
\&    _\|_xpath
\&    _\|_click
\&    ...
.Ve
.ie n .SS """$obj\->MozRepl::RemoteObject::Methods::transform_arguments(@args)"""
.el .SS "\f(CW$obj\->MozRepl::RemoteObject::Methods::transform_arguments(@args)\fP"
.IX Subsection "$obj->MozRepl::RemoteObject::Methods::transform_arguments(@args)"
This method transforms the passed in arguments to their \s-1JSON\s0 string
representations.
.PP
Things that match \f(CW\*(C` /^(?:[1\-9][0\-9]*|0+)$/ \*(C'\fR get passed through.
.PP
MozRepl::RemoteObject::Instance instances
are transformed into strings that resolve to their
Javascript global variables. Use the \f(CW\*(C`\->expr\*(C'\fR method
to get an object representing these.
.PP
It's also impossible to pass a negative or fractional number
as a number through to Javascript, or to pass digits as a Javascript string.
.ie n .SS """$obj\->MozRepl::RemoteObject::Methods::id"""
.el .SS "\f(CW$obj\->MozRepl::RemoteObject::Methods::id\fP"
.IX Subsection "$obj->MozRepl::RemoteObject::Methods::id"
Readonly accessor for the internal object id
that connects the Javascript object to the
Perl object.
.ie n .SS """$obj\->MozRepl::RemoteObject::Methods::on_destroy"""
.el .SS "\f(CW$obj\->MozRepl::RemoteObject::Methods::on_destroy\fP"
.IX Subsection "$obj->MozRepl::RemoteObject::Methods::on_destroy"
Accessor for the callback
that gets invoked from \f(CW\*(C`DESTROY\*(C'\fR.
.ie n .SS """$obj\->MozRepl::RemoteObject::Methods::bridge"""
.el .SS "\f(CW$obj\->MozRepl::RemoteObject::Methods::bridge\fP"
.IX Subsection "$obj->MozRepl::RemoteObject::Methods::bridge"
Readonly accessor for the bridge
that connects the Javascript object to the
Perl object.
.ie n .SS """MozRepl::RemoteObject::Methods::as_hash($obj)"""
.el .SS "\f(CWMozRepl::RemoteObject::Methods::as_hash($obj)\fP"
.IX Subsection "MozRepl::RemoteObject::Methods::as_hash($obj)"
.ie n .SS """MozRepl::RemoteObject::Methods::as_array($obj)"""
.el .SS "\f(CWMozRepl::RemoteObject::Methods::as_array($obj)\fP"
.IX Subsection "MozRepl::RemoteObject::Methods::as_array($obj)"
.ie n .SS """MozRepl::RemoteObject::Methods::as_code($obj)"""
.el .SS "\f(CWMozRepl::RemoteObject::Methods::as_code($obj)\fP"
.IX Subsection "MozRepl::RemoteObject::Methods::as_code($obj)"
Returns a reference to a hash/array/coderef. This is used
by overload. Don't use these directly.
.ie n .SS """$obj\->MozRepl::RemoteObject::Methods::xpath( $query [, $ref, $cont ] )"""
.el .SS "\f(CW$obj\->MozRepl::RemoteObject::Methods::xpath( $query [, $ref, $cont ] )\fP"
.IX Subsection "$obj->MozRepl::RemoteObject::Methods::xpath( $query [, $ref, $cont ] )"
Executes an XPath query and returns the node
snapshot result as a list.
.PP
This is a convenience method that should only be called
on HTMLdocument nodes.
.PP
The optional \f(CW$ref\fR parameter can be a \s-1DOM\s0 node relative to which a
relative XPath expression will be evaluated. It defaults to \f(CW\*(C`undef\*(C'\fR.
.PP
The optional \f(CW$cont\fR parameter can be a Javascript function that
will get applied to every result. This can be used to directly map
each \s-1DOM\s0 node in the XPath result to an attribute. For example
for efficiently fetching the text value of an XPath query resulting in
textnodes, the two snippets are equivalent, but the latter executes
less roundtrips between Perl and Javascript:
.PP
.Vb 2
\&    my @text = map { $_\->{nodeValue} }
\&        $obj\->MozRepl::RemoteObject::Methods::xpath( \*(Aq//p/text()\*(Aq )
\&
\&
\&    my $fetch_nodeValue = $bridge\->declare(<<JS);
\&        function (e){ return e.nodeValue }
\&    JS
\&    my @text = map { $_\->{nodeValue} }
\&        $obj\->MozRepl::RemoteObject::Methods::xpath( \*(Aq//p/text()\*(Aq, undef, $fetch_nodeValue )
.Ve
.PP
Note that the result type is fetched with \f(CW\*(C` XPathResult.ORDERED_NODE_SNAPSHOT_TYPE \*(C'\fR.
There is no support for retrieving results as \f(CW\*(C` XPathResult.ANY_TYPE \*(C'\fR yet.
.ie n .SS """MozRepl::RemoteObject::Methods::dive($obj)"""
.el .SS "\f(CWMozRepl::RemoteObject::Methods::dive($obj)\fP"
.IX Subsection "MozRepl::RemoteObject::Methods::dive($obj)"
Convenience method to quickly dive down a property chain.
.PP
If any element on the path is missing, the method dies
with the error message which element was not found.
.PP
This method is faster than descending through the object
forest with Perl, but otherwise identical.
.PP
.Vb 4
\&  my $obj = $tab\->{linkedBrowser}
\&                \->{contentWindow}
\&                \->{document}
\&                \->{body}
\&
\&  my $obj = $tab\->MozRepl::RemoteObject::Methods::dive(
\&      qw(linkedBrowser contentWindow document body)
\&  );
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MozRepl::RemoteObject for the objects to use this with
.SH "REPOSITORY"
.IX Header "REPOSITORY"
The public repository of this module is 
<http://github.com/Corion/mozrepl\-remoteobject>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR
.SH "COPYRIGHT (c)"
.IX Header "COPYRIGHT (c)"
Copyright 2011\-2012 by Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
This module is released under the same terms as Perl itself.
