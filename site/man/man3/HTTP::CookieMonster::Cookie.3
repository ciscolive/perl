.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "HTTP::CookieMonster::Cookie 3"
.TH HTTP::CookieMonster::Cookie 3 "2020-01-31" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTTP::CookieMonster::Cookie \- Cookie representation used by HTTP::CookieMonster
.SH "VERSION"
.IX Header "VERSION"
version 0.11
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    use HTTP::CookieMonster::Cookie;
\&    my $cookie = HTTP::CookieMonster::Cookie\->new(
\&        key       => \*(Aqcookie\-name\*(Aq,
\&        val       => \*(Aqcookie\-val\*(Aq,
\&        path      => \*(Aq/\*(Aq,
\&        domain    => \*(Aq.somedomain.org\*(Aq,
\&        path_spec => 1,
\&        secure    => 0,
\&        expires   => 1376081877
\&    );
\&
\&    use WWW::Mechanize;
\&    use HTTP::CookieMonster;
\&
\&    my $mech = WWW::Mechanize\->new;
\&    my $monster = HTTP::CookieMonster\->new( cookie_jar => $mech\->cookie_jar );
\&    $monster\->set_cookie( $cookie );
\&
\&    $mech\->get(\*(Aqhttps://example.com\*(Aq);    # passes $cookie in request
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is intended to be used by HTTP::CookieMonster to represent
cookies found in an HTTP::Cookies cookie_jar.  To keep things familiar, I
have chosen method names which reflect the positional parameter names laid out
in the \f(CW$cookie_jar\fR\->scan( \e&callback ) documentation.
.PP
Not being intimately familiar with the \s-1HTTP\s0 cookie spec, I haven't forced
validation or default values on any attributes, so please be aware that the
burden is on the user to provide \*(L"correct\*(R" data if you are using this module
directly.
.PP
I have provided some sample values below.  To get a better idea of what is
required, try visiting a few sites and dumping their cookies.
.PP
.Vb 5
\&    use Data::Printer;
\&    my $mech = WWW::Mechanize\->new;
\&    $mech\->get( \*(Aqhttp://www.google.ca\*(Aq );
\&    my $monster = HTTP::CookieMonster\->new( cookie_jar => $mech\->cookie_jar );
\&    p $monster\->all_cookies;
.Ve
.SS "version"
.IX Subsection "version"
.Vb 1
\&    $cookie\->version( 0 );
.Ve
.SS "key"
.IX Subsection "key"
The name of the cookie.
.PP
.Vb 1
\&    $cookie\->key( "session_id" );
.Ve
.SS "val"
.IX Subsection "val"
The value of the cookie.
.PP
.Vb 1
\&    $cookie\->val( "random_stuff" );
.Ve
.PP
If you are creating a new cookie, you should escape the value first.
.PP
.Vb 2
\&    use URI::Escape qw( uri_escape );
\&    $cookie\->value( uri_escape( \*(Aqrandom_stuff\*(Aq ) );
.Ve
.SS "path"
.IX Subsection "path"
.Vb 1
\&    $cookie\->path( "/" );
.Ve
.SS "domain"
.IX Subsection "domain"
.Vb 1
\&    $cookie\->domain( ".google.ca" );
.Ve
.SS "port"
.IX Subsection "port"
.SS "path_spec"
.IX Subsection "path_spec"
.Vb 1
\&    $cookie\->path_spec( 1 );
.Ve
.SS "secure"
.IX Subsection "secure"
.Vb 1
\&    $cookie\->secure( 1 );
.Ve
.SS "expires"
.IX Subsection "expires"
.Vb 1
\&    $cookie\->expires( 1407696193 );
.Ve
.SS "discard"
.IX Subsection "discard"
.SS "hash"
.IX Subsection "hash"
.Vb 1
\&    $cookie\->hash( { HttpOnly => undef } );
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This is mainly useful for creating cookies to be used by LWP::UserAgent and
WWW::Mechanize classes.  If you need to create cookies to set via headers,
have a look at Cookie::Baker.
.SH "AUTHOR"
.IX Header "AUTHOR"
Olaf Alders <olaf@wundercounter.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Olaf Alders.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
