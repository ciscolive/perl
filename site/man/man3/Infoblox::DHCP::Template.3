.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::Template 3"
.TH Infoblox::DHCP::Template 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::Template \- DHCP Template object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1DHCP\s0 associates Infoblox::DHCP::RangeTemplate\->\fBoffset()\fR, Infoblox::DHCP::RangeTemplate\->\fBnumber_of_addresses()\fR and Infoblox::DHCP::FixedAddrTemplate\->\fBoffset()\fR, Infoblox::DHCP::FixedAddrTemplate\->\fBnumber_of_addresses()\fR with Infoblox::DHCP::NetworkTemplate. When optional fields offset/count are set in this object which is passed to Infoblox::DHCP::NetworkTemplate\->\fBfixed_address_templates()\fR or Infoblox::DHCP::NetworkTemplate\->\fBrange_templates()\fR they are used instead of offset/number_of_addresses values in Infoblox::DHCP::RangeTemplate and Infoblox::DHCP::FixedAddrTemplate when creating Infoblox::DHCP::Network based on a template.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 5
\& my $template = Infoblox::DHCP::Template\->new(
\&       name                 => $string,       #Required
\&       count                => $num,          #Optional
\&       offset               => $num,          #Optional
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to be applied to a \s-1DHCP\s0 template object.
.SS "Infoblox::DHCP::NetworkTemplate\->range_templates( )"
.IX Subsection "Infoblox::DHCP::NetworkTemplate->range_templates( )"
.RS 4
Use this function to specify range templates for the \s-1DHCP\s0 network template object. See Infoblox::DHCP::NetworkTemplate\->\fBrange_templates()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\&     #Construct and add a DHCP Range Template object
\&     my $range_template = Infoblox::DHCP::RangeTemplate\->new(
\&              name                 => "custom_range_template",
\&              offset               => "20", # this won\*(Aqt be used if specified in Infoblox::DHCP::Template
\&              number_of_addresses  => "10", # this won\*(Aqt be used if specified in Infoblox::DHCP::Template
\&     );
\&     $session\->add($range_template);
\&
\&     #Construct a DHCP Template object
\&     my $template = Infoblox::DHCP::Template\->new(
\&              offset               => "10", # this will be used instead if specified
\&              count                => "5", # this will be used instead if specified
\&              name                 => "custom_range_template"
\&     );
\&
\&     # Configure DHCP Template on the DHCP Network template object
\&     $network_template\->range_templates([$template]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DHCP::NetworkTemplate\->fixed_address_templates( )"
.IX Subsection "Infoblox::DHCP::NetworkTemplate->fixed_address_templates( )"
.RS 4
Use this function to specify fixed address templates for the \s-1DHCP\s0 network template object. See Infoblox::DHCP::NetworkTemplate\->\fBfixed_address_templates()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\&     #Construct and add a DHCP Fixed Address Template object
\&     my $fixed_address_template = Infoblox::DHCP::FixedAddrTemplate\->new(
\&              name                 => "custom_fixed_address_template",
\&              offset               => "20", # this won\*(Aqt be used if specified in Infoblox::DHCP::Template
\&              number_of_addresses  => "10", # this won\*(Aqt be used if specified in Infoblox::DHCP::Template
\&     );
\&     $session\->add($fixed_address_template);
\&
\&     #Construct a DHCP Template object
\&     my $template = Infoblox::DHCP::Template\->new(
\&              offset               => "10", # this will be used instead if specified
\&              count                => "5", # this will be used instead if specified
\&              name                 => "custom_fixed_address_template"
\&     );
\&
\&     # Configure DHCP Template on the DHCP Network template object
\&     $network_template\->fixed_address_templates([$template]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 range template object.
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve name of Infoblox::DHCP::RangeTemplate or Infoblox::DHCP::FixedAddrTemplate object assigned to this template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of range template or fixed address template object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get name
\&     my $name = $template\->name();
\&     #Modify name
\&     $template\->name("custom_range_or_fixed_address_template_name");
.Ve
.RE
.RS 4
.RE
.SS "count( )"
.IX Subsection "count( )"
.RS 4
Use this method to set or retrieve the number of addresses of the \s-1DHCP\s0 range or fixed address template. This value will be used instead of Infoblox::DHCP::RangeTemplate\->\fBnumber_of_addresses()\fR or Infoblox::DHCP::FixedAddrTemplate\->\fBnumber_of_addresses()\fR if specified.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The number of addresses in this template.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get count
\&     my $count = $template\->count();
\&     #Modify count
\&     $template\->count("10");
.Ve
.RE
.RS 4
.RE
.SS "offset( )"
.IX Subsection "offset( )"
.RS 4
Use this method to set or retrieve the address offset of the \s-1DHCP\s0 range or fixed address template. This value will be used instead of Infoblox::DHCP::RangeTemplate\->\fBoffset()\fR or Infoblox::DHCP::FixedAddrTemplate\->\fBoffset()\fR if specified.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The address offset of this template.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get offset
\&     my $offset = $template\->offset();
\&     #Modify offset
\&     $template\->offset("10");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a \s-1DHCP\s0 template object such as add, modify, and remove. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 Range object insertion\fR
.PP
.Vb 9
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&    master   => "192.168.1.2",
\&    username => "admin",
\&    password => "infoblox"
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create the \s-1DHCP\s0 Range template object\fR
.PP
.Vb 10
\& my $dhcp_range_template = Infoblox::DHCP::RangeTemplate\->new(
\&         name                    => "custom_range_template",
\&         offset                  => "10",
\&         number_of_addresses     => "10",
\& );
\& unless($dhcp_range_template) {
\&        die("Construct DHCP Range template object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Range template object created successfully\en";
\&
\& #Add the DHCP Range template object into the Infoblox appliance through a session
\& $session\->add($dhcp_range_template)
\&     or die("Add DHCP Range template object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range template object added to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Create the Fixed Address template object\fR
.PP
.Vb 10
\& my $dhcp_fixed_address_template = Infoblox::DHCP::FixedAddrTemplate\->new(
\&         name                    => "custom_fixed_address_template",
\&         offset                  => "10",
\&         number_of_addresses     => "10",
\& );
\& unless($dhcp_fixed_address_template) {
\&        die("Construct DHCP Fixed Address template object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Fixed Address template object created successfully\en";
\&
\& #Add the DHCP Fixed Address Template  object into the Infoblox appliance through a session
\& $session\->add($dhcp_fixed_address_template)
\&     or die("Add DHCP Fixed Address template object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Fixed Address template object added to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Create \s-1DHCP\s0 template objects\fR
.PP
.Vb 6
\& #Construct a DHCP Template object
\& my $tmpl1 = Infoblox::DHCP::Template\->new(
\&          offset               => "10", # this will be used instead if specified
\&          count                => "5", # this will be used instead if specified
\&          name                 => "custom_range_template"
\& );
\&
\& unless($tmpl1) {
\&        die("Construct DHCP template object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP template object created successfully\en";
\&
\& #Construct a DHCP Template objects
\& my $tmpl2 = Infoblox::DHCP::Template\->new(
\&          offset               => "20", # this will be used instead if specified
\&          count                => "3", # this will be used instead if specified
\&          name                 => "custom_fixed_address_template"
\& );
\&
\& unless($tmpl2) {
\&        die("Construct DHCP template object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP template object created successfully\en";
.Ve
.PP
\&\fB#Add \s-1DHCP\s0 template to \s-1DHCP\s0 Network Template and insert it\fR
.PP
.Vb 11
\& my $network_template = Infoblox::DHCP::NetworkTemplate\->new(
\&         name                    => "network_template",
\&         netmask                 => "255.0.0.0",
\&         range_templates         => [ $tmpl1 ],
\&         fixed_address_templates => [ $tmpl2 ],
\& );
\& unless($network_template) {
\&        die("Construct DHCP Network template object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Network template object created successfully\en";
\&
\& #Add the DHCP Network template object into the Infoblox appliance through a session
\& $session\->add($network_template)
\&     or die("Add Network template object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Network template object added to Infoblox appliance successfully\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DHCP::RangeTemplate, Infoblox::DHCP::FixedAddrTemplate, Infoblox::DHCP::NetworkTemplate, Infoblox::DHCP::Network
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
