.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::Settings 3"
.TH Test::Settings 3 "2013-04-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Settings \- Ask or tell when certain types of tests should be run
.SH "VERSION"
.IX Header "VERSION"
version 0.003
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Check the current settings
.PP
.Vb 1
\&  use Test::Settings qw(:all);
\&
\&  if (want_smoke) {
\&    printf("I must be a smoke tester\en");
\&  }  
\&
\&  if (want_non_interactive) { ... }
\&  if (want_extended) { ... }
\&  if (want_author) { ... }
\&  if (want_release) { ... }
\&
\&  if (want_all) { ... }
.Ve
.PP
Change settings
.PP
.Vb 6
\&  enable_smoke;
\&  enable_non_interactive;
\&  enable_extended;
\&  enable_author;
\&  enable_release;
\&  enable_all;
\&
\&  disable_smoke;
\&  disable_non_interactive;
\&  disable_extended;
\&  disable_author;
\&  disable_release;
\&  disable_all;
.Ve
.PP
Helper \- see the settings as a string
.PP
.Vb 1
\&  print current_settings;
.Ve
.PP
Print enabled settings as \s-1ENV\s0 vars
.PP
.Vb 1
\&  print current_settings_env;
.Ve
.PP
Print all settings as \s-1ENV\s0 vars
.PP
.Vb 1
\&  print current_settings_env_all;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
There are a number of Environment variables used to control how tests should 
behave, and sometimes these can change names or meaning.
.PP
This library tries to provide a consistent interface so that testers/toolchain 
users can determine the state of testing without having to care about the 
intricacies behind the scenes.
.SS "Inspecting the state of things"
.IX Subsection "Inspecting the state of things"
Currently, the following methods are provided to see what the current state of 
testing options are. Unless explicitly requested by a user or tool, these will 
usually all return false.
.PP
\fIwant_smoke\fR
.IX Subsection "want_smoke"
.PP
.Vb 1
\&  if (want_smoke) { ... }
.Ve
.PP
Returns true if we are currently being run by a smoker or a 'robot'.
.PP
\fIwant_non_interactive\fR
.IX Subsection "want_non_interactive"
.PP
.Vb 1
\&  if (want_non_interactive) { ... }
.Ve
.PP
Returns true if we are in non-interactive mode. This means tests should not 
prompt the user for information.
.PP
\fIwant_extended\fR
.IX Subsection "want_extended"
.PP
.Vb 1
\&  if (want_extended) { ... }
.Ve
.PP
Returns true if extended testing has been requested. Often modules will ship 
with extra (non author/release) tests that users may opt in to run.
.PP
\fIwant_author\fR
.IX Subsection "want_author"
.PP
.Vb 1
\&  if (want_author) { ... }
.Ve
.PP
Returns true if author testing has been requested. Author tests are used during 
development time only.
.PP
\fIwant_release\fR
.IX Subsection "want_release"
.PP
.Vb 1
\&  if (want_release) { ... }
.Ve
.PP
Returns true if release testing has been requested. Release tests are used when 
a new release of a distribution is going to be built to check sanity before 
pushing to \s-1CPAN.\s0
.PP
\fIwant_all\fR
.IX Subsection "want_all"
.PP
.Vb 1
\&  if (want_all) { ... }
.Ve
.PP
Returns true if all of the above wants are true.
.SS "Changing the state of things"
.IX Subsection "Changing the state of things"
The methods below allow modification of the state of testing. This can be used 
by smokers and build tools to inform testing tools how to run.
.PP
\fIenable_smoke\fR
.IX Subsection "enable_smoke"
.PP
\fIdisable_smoke\fR
.IX Subsection "disable_smoke"
.PP
.Vb 2
\&  enable_smoke();
\&  disable_smoke();
.Ve
.PP
This enables or disables (default) smoke testing.
.PP
\fIenable_non_interactive\fR
.IX Subsection "enable_non_interactive"
.PP
\fIdisable_non_interactive\fR
.IX Subsection "disable_non_interactive"
.PP
.Vb 2
\&  enable_non_interactive();
\&  disable_non_interactive();
.Ve
.PP
This enables or disables (default) non-interactive testing.
.PP
\fIenable_extended\fR
.IX Subsection "enable_extended"
.PP
\fIdisable_extended\fR
.IX Subsection "disable_extended"
.PP
.Vb 2
\&  enable_extended();
\&  disable_extended();
.Ve
.PP
This enables or disables (default) extended testing.
.PP
\fIenable_author\fR
.IX Subsection "enable_author"
.PP
\fIdisable_author\fR
.IX Subsection "disable_author"
.PP
.Vb 2
\&  enable_author();
\&  disable_author();
.Ve
.PP
This enables or disables (default) author testing.
.PP
\fIenable_release\fR
.IX Subsection "enable_release"
.PP
\fIdisable_release\fR
.IX Subsection "disable_release"
.PP
.Vb 2
\&  enable_release();
\&  disable_release();
.Ve
.PP
This enables or disables (default) release testing.
.PP
\fIenable_all\fR
.IX Subsection "enable_all"
.PP
\fIdisable_all\fR
.IX Subsection "disable_all"
.PP
Enable or disable all of the test switches at once.
.SS "Extra information"
.IX Subsection "Extra information"
If you'd like a quick representation of the current state of things, the methods 
below will help you inspect them.
.PP
\fIcurrent_settings\fR
.IX Subsection "current_settings"
.PP
.Vb 2
\&  my $str = current_settings();
\&  print $str;
.Ve
.PP
Displays a table of the current settings of all wants.
.PP
\fIcurrent_settings_env\fR
.IX Subsection "current_settings_env"
.PP
.Vb 2
\&  my $str = current_settings_env();
\&  print $str;
.Ve
.PP
Prints enabled settings only as \s-1ENV\s0 vars.
.PP
\fIcurrent_settings_env_all\fR
.IX Subsection "current_settings_env_all"
.PP
.Vb 2
\&  my $str = current_settings_env_all();
\&  print $str
.Ve
.PP
Prints \s-1ALL\s0 settings asa \s-1ENV\s0 vars.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::S \- Change test settings on the command line
.PP
Test::DescribeMe \- Tell test runners what kind of test you are
.PP
Test::Is \- Skip test in a declarative way, following the Lancaster Consensus
.PP
<https://github.com/Perl\-Toolchain\-Gang/toolchain\-site/blob/master/lancaster\-consensus.md> \-
The Annotated Lancaster Consensus
.SH "AUTHOR"
.IX Header "AUTHOR"
Matthew Horsfall (alh) \- <wolfsage@gmail.com>
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
