.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SMTP_auth 3"
.TH SMTP_auth 3 "2006-01-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SMTP_auth \- Simple Mail Transfer Protocol Client with AUTHentication
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::SMTP_auth;
\&
\&    # Constructors
\&    $smtp = Net::SMTP_auth\->new(\*(Aqmailhost\*(Aq);
\&    $smtp = Net::SMTP_auth\->new(\*(Aqmailhost\*(Aq, Timeout => 60);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements a client interface to the \s-1SMTP\s0 and \s-1ESMTP\s0
protocol \s-1AUTH\s0 service extension, enabling a perl5 application to talk
to and authenticate against \s-1SMTP\s0 servers. This documentation assumes
that you are familiar with the concepts of the \s-1SMTP\s0 protocol described
in \s-1RFC821\s0 and with the \s-1AUTH\s0 service extension described in \s-1RFC2554.\s0
.PP
A new Net::SMTP_auth object must be created with the \fInew\fR method. Once
this has been done, all \s-1SMTP\s0 commands are accessed through this object.
.PP
The Net::SMTP_auth class is a subclass of Net::SMTP, which itself is
a subclass of Net::Cmd and IO::Socket::INET.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
This example authenticates via \s-1CRAM\-MD5\s0 and sends a small message to
the postmaster at the \s-1SMTP\s0 server known as mailhost:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&
\&    use Net::SMTP_auth;
\&
\&    $smtp = Net::SMTP_auth\->new(\*(Aqmailhost\*(Aq);
\&    $smtp\->auth(\*(AqCRAM\-MD5\*(Aq, \*(Aquser\*(Aq, \*(Aqpassword\*(Aq);
\&
\&    $smtp\->mail($ENV{USER});
\&    $smtp\->to(\*(Aqpostmaster\*(Aq);
\&
\&    $smtp\->data();
\&    $smtp\->datasend("To: postmaster\en");
\&    $smtp\->datasend("\en");
\&    $smtp\->datasend("A simple test message\en");
\&    $smtp\->dataend();
\&
\&    $smtp\->quit;
.Ve
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new Net::SMTP_auth [ \s-1HOST,\s0 ] [ \s-1OPTIONS\s0 ]" 4
.IX Item "new Net::SMTP_auth [ HOST, ] [ OPTIONS ]"
This is the constructor for a new Net::SMTP_auth object. It is
taken from Net::SMTP as all other methods (except \fIauth\fR and
\&\fIauth_types\fR) are, too.
.SH "METHODS"
.IX Header "METHODS"
Unless otherwise stated all methods return either a \fItrue\fR or \fIfalse\fR
value, with \fItrue\fR meaning that the operation was a success. When a method
states that it returns a value, failure will be returned as \fIundef\fR or an
empty list.
.IP "auth_types ()" 4
.IX Item "auth_types ()"
Returns the \s-1AUTH\s0 methods supported by the server as an array or in a
space separated string. This string is exacly the line given by the \s-1SMTP\s0
server after the \f(CW\*(C`EHLO\*(C'\fR command containing the keyword \f(CW\*(C`AUTH\*(C'\fR.
.IP "auth ( \s-1AUTH, USER, PASSWORD\s0 )" 4
.IX Item "auth ( AUTH, USER, PASSWORD )"
Authenticates the user \f(CW\*(C`USER\*(C'\fR via the authentication method \f(CW\*(C`AUTH\*(C'\fR
and the password \f(CW\*(C`PASSWORD\*(C'\fR. Returns \fItrue\fR if successful and \fIfalse\fR
if the authentication failed. Remember that the connection is not closed
if the authentication fails. You may issue a different authentication
attempt. If you once are successfully authenticated, you cannot send
the \f(CW\*(C`AUTH\*(C'\fR command again.
.Sp
The \f(CW\*(C`AUTH\*(C'\fR method \f(CW\*(C`NTLM\*(C'\fR is supported via Authen::NTLM (thanks to James Fryman).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::SMTP and Net::Cmd
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex Pleiner <alex@zeitform.de>, zeitform Internet Dienste.
Thanks to Graham Barr <gbarr@pobox.com> for Net::SMTP.
\&\s-1NTLM\s0 authentication code provided by James Fryman <jfryman@gmail.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001, 2003, 2006 zeitform Internet Dienste. All rights reserved.
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 181:" 4
.IX Item "Around line 181:"
You forgot a '=back' before '=head1'
