.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::AutoRoute 3"
.TH Mojolicious::Plugin::AutoRoute 3 "2016-03-29" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::AutoRoute \- Mojolicious plugin to create routes automatically
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Mojolicious
\&  $self\->plugin(\*(AqAutoRoute\*(Aq);
\&
\&  # Mojolicious::Lite
\&  plugin \*(AqAutoRoute\*(Aq;
\&
\&  # With option
\&  plugin \*(AqAutoRoute\*(Aq, route => $r;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::AutoRoute is a Mojolicious plugin
to create routes automatically.
.PP
If you put templates into \f(CW\*(C`auto\*(C'\fR directory,
the corresponding routes is created automatically.
.PP
For example:
.PP
.Vb 5
\&  TEMPLATES                           ROUTES
\&  templates/auto/index.html.ep        # /
\&                /foo.html.ep          # /foo
\&                /foo/bar.html.ep      # /foo/bar
\&                /foo/bar/baz.html.ep  # /foo/bar/baz
.Ve
.PP
I like \s-1PHP\s0 simplicity. All thing needed is that you put \s-1PHP\s0 files into some directory,
and write program. You don't need to create routes manually.
.PP
This plugin gives \s-1PHP\s0 simplicity to Mojolicious.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 1
\&  use Mojolicious::Lite;
\&  
\&  # AutoRoute
\&  plugin \*(AqAutoRoute\*(Aq;
\&  
\&  # Custom routes
\&  get \*(Aq/create/:id\*(Aq => sub { shift\->render_maybe(\*(Aq/create\*(Aq) };
\&  
\&  app\->start;
\&  
\&  _\|_DATA_\|_
\&  
\&  @@ auto/index.html.ep
\&  /
\&  
\&  @@ auto/foo.html.ep
\&  /foo
\&  
\&  @@ auto/bar.html.ep
\&  /bar
\&  
\&  @@ auto/foo/bar/baz.html.ep
\&  /foo/bar/baz
\&  
\&  @@ auto/json.html.ep
\&  <%
\&    $self\->render(json => {foo => 1});
\&    return;
\&  %>
\&  
\&  @@ create.html.ep
\&  /create/<%= $id %>
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "route"
.IX Subsection "route"
.Vb 1
\&  route => $route;
.Ve
.PP
You can set parent route if you need.
This is Mojolicious::Routes object.
Default is \f(CW\*(C`$app\-\*(C'\fRroutes>.
.SS "top_dir"
.IX Subsection "top_dir"
.Vb 1
\&  top_dir => \*(Aqmyauto\*(Aq
.Ve
.PP
Top directory. default is \f(CW\*(C`auto\*(C'\fR.
.SH "TIPS"
.IX Header "TIPS"
If you want to create custom route, use \f(CW\*(C`render_maybe\*(C'\fR method.
.PP
.Vb 2
\&  # Mojolicious Lite
\&  any \*(Aq/foo\*(Aq => sub { shift\->render_maybe(\*(Aq/foo\*(Aq) };
\&
\&  # Mojolicious
\&  $r\->any(\*(Aq/foo\*(Aq => sub { shift\->render_maybe(\*(Aq/foo\*(Aq) };
.Ve
.PP
For backwrod comaptible, you can use \f(CW\*(C`template\*(C'\fR function.
.PP
.Vb 1
\&  use Mojolicious::Plugin::AutoRoute::Util \*(Aqtemplate\*(Aq;
\&  
\&  # Mojolicious Lite
\&  any \*(Aq/foo\*(Aq => template \*(Aq/foo\*(Aq;
\&
\&  # Mojolicious
\&  $r\->any(\*(Aq/foo\*(Aq => template \*(Aq/foo\*(Aq);
.Ve
.SH "METHOD"
.IX Header "METHOD"
.SS "register"
.IX Subsection "register"
.Vb 1
\&  $plugin\->register($app);
.Ve
.PP
Register plugin in Mojolicious application.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
