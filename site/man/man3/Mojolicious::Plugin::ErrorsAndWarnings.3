.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::ErrorsAndWarnings 3"
.TH Mojolicious::Plugin::ErrorsAndWarnings 3 "2015-11-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::ErrorsAndWarnings \- Store errors & warnings during a request
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # Mojolicious example
\&  package MyApp;
\&  use Mojo::Base \*(AqMojolicious\*(Aq;
\&
\&  sub startup {
\&    my $self = shift;
\&
\&    $self\->plugin(\*(AqErrorsAndWarnings\*(Aq);
\&
\&    # Router
\&    my $r = $self\->routes;
\&    $r\->get(\*(Aq/\*(Aq)\->to(cb => sub {
\&      my $c = shift;
\&      $c\->add_error(\*(Aqfirst_error\*(Aq);
\&      $c\->add_error(\*(Aqsecond_error\*(Aq, more => \*(Aqdetail\*(Aq);
\&
\&      # {"errors":[{"code":"first_error"},{"code":"second_error","more":"detail"}]}
\&      $c\->render(json => { errors => $c\->errors });
\&    });
\&  }
\&
\&  1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::ErrorsAndWarnings is a basic plugin for Mojolicious
which provides helpers to store and retrieve user-defined errors and warnings.
This is particularly useful to help collect errors and warnings from within
multiple method calls during a request cycle. At the end of the request, the
error and warning objects provide additional information about any problems
encountered while performing an operation.
.PP
Adding errors or warnings will store them under the Mojolicious
stash key \f(CW\*(C`plugin.errors\*(C'\fR by default. Don't
access this stash value directly. Use the \f(CW\*(C`$c\->errors\*(C'\fR and
\&\f(CW\*(C`$c\->warnings\*(C'\fR accessors instead.
.PP
.Vb 3
\&  # add errors and warnings using the imported helpers
\&  $c\->add_error(\*(Aqfirst_error\*(Aq);
\&  $c\->add_warning(\*(Aqfirst_warning\*(Aq);
\&
\&  # {"errors":[{"code":"first_error"}], "warnings":[{"code":"first_warning"}]}
\&  $c\->render(json => {errors => $c\->errors, warnings => $c\->warnings});
.Ve
.PP
The first argument to \*(L"add_error\*(R" or \*(L"add_warning\*(R" is referred to as the
\&\f(CW\*(C`code\*(C'\fR. This an application-specific error or warning code, expressed as a
string value.
.PP
.Vb 2
\&  $c\->add_error(\*(Aqsql\*(Aq, status => 400, title => \*(AqYour SQL is malformed.\*(Aq);
\&  $c\->add_warning(\*(Aqsearch\*(Aq, title => \*(AqInvalid search column.\*(Aq, path => \*(Aqpw\*(Aq);
\&
\&  # {
\&  #    "errors": [
\&  #        {
\&  #            "code": "sql",
\&  #            "status": 400,
\&  #            "title": "Your SQL is malformed."
\&  #        }
\&  #    ],
\&  #    "warnings": [
\&  #        {
\&  #            "code": "search",
\&  #            "path": "password",
\&  #            "title": "Invalid search column."
\&  #        }
\&  #    ]
\&  # }
\&  $c\->render(json => {errors => $c\->errors, warnings => $c\->warnings});
.Ve
.PP
Additional members can be added to provide more specific information about the
problem. See also <http://jsonapi.org/format/#errors> for examples of other
members you might want to use.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Plugin::ErrorsAndWarnings implements the following attributes.
.SS "config_key"
.IX Subsection "config_key"
The name of the config key to inspect for user-defined error and warning codes.
Defaults to \f(CW\*(C`codes\*(C'\fR.
.PP
The plugin will merge default values from an app's config if a matching key is
found. See the example below.
.PP
.Vb 2
\&  # Mojolicious::Lite example merging config values
\&  use Mojolicious::Lite;
\&
\&  plugin \*(AqErrorsAndWarnings\*(Aq;
\&
\&  app\->config({
\&    # config_key attribute is \`codes\*(Aq by default
\&    codes => {
\&      # Default key/values merged for unmatched code names
\&      \*(Aqdefault\*(Aq            => {status => 400},
\&
\&      # Global codes
\&      \*(Aqforbidden\*(Aq          => {status => 403, title => \*(AqPermission denied to resource.\*(Aq},
\&      \*(Aqnot_found\*(Aq          => {status => 404, title => \*(AqNot found.\*(Aq},
\&      \*(Aqmethod_not_allowed\*(Aq => {status => 405, title => \*(AqMethod not allowed.\*(Aq},
\&    },
\&  });
\&
\&  get \*(Aq/\*(Aq => sub {
\&    my $c = shift;
\&
\&    $c\->add_error(\*(Aqnot_found\*(Aq);
\&    $c\->add_error(\*(Aquser_defined_err\*(Aq, foo => \*(Aqbar bar\*(Aq );
\&
\&    # {
\&    #    "errors": [
\&    #        {
\&    #            "code": "not_found",
\&    #            "status": 404,
\&    #            "title": "Not found."
\&    #        },
\&    #        {
\&    #            "code": "user_defined_err",
\&    #            "status": 400,
\&    #            "foo": "bar bar"
\&    #        }
\&    #    ]
\&    # }
\&    $c\->render(json => { errors => $c\->errors });
\&  };
.Ve
.SS "stash_key"
.IX Subsection "stash_key"
Name of the Mojolicious stash key to store the
errors and warnings. Defaults to \f(CW\*(C`plugin.errors\*(C'\fR.
.PP
Don't access this stash value directly. Use the \f(CW\*(C`$c\->errors\*(C'\fR and
\&\f(CW\*(C`$c\->warnings\*(C'\fR accessors instead.
.SH "HELPERS"
.IX Header "HELPERS"
Mojolicious::Plugin::ErrorsAndWarnings implements the following helpers.
.SS "add_error"
.IX Subsection "add_error"
.Vb 3
\&  $self\->add_error(\*(Aquser_not_found\*(Aq);
\&  $self\->add_error(\*(Aquser_not_found\*(Aq, additional => \*(AqError Attr\*(Aq);
\&  $self\->add_error(\*(Aquser_not_found\*(Aq, code => \*(Aqrename_error_code\*(Aq);
.Ve
.PP
Pushes to the errors stash.
.SS "add_warning"
.IX Subsection "add_warning"
.Vb 3
\&  $self\->add_warning(\*(Aqfield_ignored\*(Aq);
\&  $self\->add_warning(\*(Aqfield_ignored\*(Aq, path => \*(Aqusername\*(Aq);
\&  $self\->add_warning(\*(Aqfield_ignored\*(Aq, code => \*(Aqrename_warning_code\*(Aq);
.Ve
.PP
Pushes to the warnings stash.
.SS "errors"
.IX Subsection "errors"
Returns an \f(CW\*(C`ARRAYREF\*(C'\fR of errors.
.SS "warnings"
.IX Subsection "warnings"
Returns an \f(CW\*(C`ARRAYREF\*(C'\fR of warnings.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::Config inherits all methods from Mojolicious::Plugin
and implements the following new ones.
.SS "register"
.IX Subsection "register"
.Vb 1
\&  $plugin\->register(Mojolicious\->new);
.Ve
.PP
Register plugin in Mojolicious application.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2015, Paul Williams.
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Williams <kwakwa@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
