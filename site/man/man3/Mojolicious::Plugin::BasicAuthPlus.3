.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::BasicAuthPlus 3"
.TH Mojolicious::Plugin::BasicAuthPlus 3 "2018-12-31" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::BasicAuthPlus \- Basic HTTP Auth Helper Plus
.SH "VERSION"
.IX Header "VERSION"
Version 0.11.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Mojolicious::Lite
\&  plugin \*(Aqbasic_auth_plus\*(Aq;
\&  
\&  get \*(Aq/\*(Aq => sub {
\&      my $self = shift;
\&  
\&      $self\->render(text => \*(Aqok\*(Aq)
\&        if $self\->basic_auth(
\&          "Realm Name" => {
\&              username => \*(Aqusername\*(Aq,
\&              password => \*(Aqpassword\*(Aq
\&          }
\&      );
\&  };
\&  
\&  # Mojolicious
\&  $self\->plugin(\*(AqBasicAuthPlus\*(Aq);
\&  
\&  sub index {
\&      my $self = shift;
\&  
\&      $self\->render(text => \*(Aqok\*(Aq)
\&          if $self\->basic_auth(
\&              "My Realm" => {
\&                  path => \*(Aq/path/to/some/passwd/file.txt\*(Aq
\&              }
\&          );
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::BasicAuthPlus is a helper for basic \s-1HTTP\s0
authentication that supports multiple authentication schemes, including
a callback, explicit username and password (plaintext or encrypted) without
a callback, a passwd file, \s-1LDAP,\s0 and Active Directory.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::BasicAuthPlus inherits all methods from
Mojolicious::Plugin and implements the following new ones.
.ie n .SS """register"""
.el .SS "\f(CWregister\fP"
.IX Subsection "register"
.Vb 1
\&    $plugin\->register;
.Ve
.PP
Register condition in Mojolicious application.
.ie n .SS """basic_auth"""
.el .SS "\f(CWbasic_auth\fP"
.IX Subsection "basic_auth"
Configure specific auth method (see \s-1CONFIGURATION\s0).  Returns a two-element
list, where the first element is a hash reference and the second is an
integer (1 for success, 0 for failure).
.PP
The hash reference contains one key/value pair for the username used to
authenticate, and when \s-1LDAP\s0 is used it may also contain the 'ldap' key
whose value is the active \s-1LDAP\s0 connection handle if requested by setting
the return_ldap_handle option (see options below).
.PP
Generally, you can ignore this; thus, for example, both of the following
are valid:
.PP
.Vb 11
\&  my ($hash_ref, $auth_ok)
\&      = $self\->basic_auth(
\&          "My Realm" => {
\&              username => \*(Aqzapp\*(Aq,
\&              password => \*(Aqbrannigan\*(Aq
\&          }
\&      );
\&  if ($auth_ok) {
\&      $self\->app\->log\->info("Auth success for $hash_ref\->{username}");
\&      render(text => \*(Aqok\*(Aq);
\&  }
\&
\&  $self\->render(text => \*(Aqok\*(Aq)
\&      if $self\->basic_auth(
\&          "My Realm" => {
\&              username => \*(Aqzapp\*(Aq,
\&              password => \*(Aqbrannigan\*(Aq
\&          }
\&      );
.Ve
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
The basic_auth method takes an \s-1HTTP\s0 Basic Auth realm name that is either a
code ref for a subroutine that will do the authentication check, or a hash,
where the realm is the hash name.  When the realm represents a named hash,
the key/value pairs specify the source of user credentials and determine the
method used for authentication (e.g., passwd file, \s-1LDAP,\s0 Active Directory).
.PP
Realm names may contain whitespace.
.PP
If a username and password are defined, then other options pertaining to a
passwd file or LDAP/ActiveDirectory authentication will be ignored, because it
it assumed you intend to compare the defined username and password against
those supplied by the user.
.PP
The following options may be set in the hash:
.SS "username"
.IX Subsection "username"
Specify the username to match.
.SS "password"
.IX Subsection "password"
Specify the password to match.  The string may be plaintext or use any of the
formats noted in Authen::Simple::Password.
.SS "path"
.IX Subsection "path"
The location of a password file holding user credentials.  Per
Authen::Simple::Passwd, \*(L"Any standard passwd file that has records seperated
with newline and fields seperated by \*(R":\*(L" is supported.  First field is expected
to be username and second field, plain or encrypted password.  Required.\*(R"
.SS "host"
.IX Subsection "host"
The hostname or \s-1IP\s0 address of an \s-1LDAP\s0 or Active Directory server.
.SS "basedn"
.IX Subsection "basedn"
The base \s-1DN\s0 to use with \s-1LDAP\s0 or Active Directory.
.SS "binddn"
.IX Subsection "binddn"
The bind \s-1DN\s0 to use when doing an authenticated bind against \s-1LDAP\s0 or Active
Directory.
.SS "bindpw"
.IX Subsection "bindpw"
The password to use when doing an authenticated bind to \s-1LDAP\s0 or Active
Directory.
.SS "scope"
.IX Subsection "scope"
The search scope for \s-1LDAP\s0 or Active Directory.  Choices are
\&'base' | 'one' | 'sub' | 'subtree' | 'children', but the default is 'sub'.
See Net::LDAP for further discussion.
.SS "filter"
.IX Subsection "filter"
The LDAP/ActiveDirectory filter to use when searching a directory.
.SS "port"
.IX Subsection "port"
The \s-1TCP\s0 port to use for an LDAP/ActiveDirectory connection.  The default is 389.
.SS "debug"
.IX Subsection "debug"
Set the \s-1LDAP\s0 debug level. See the debug method in Net::LDAP for details.
The default value is 0, debugging off.
.SS "timeout"
.IX Subsection "timeout"
Timeout in seconds passed to IO::Socket when connecting to a remote
\&\s-1LDAP\s0 server.  The default is 120.
.SS "version"
.IX Subsection "version"
Set the \s-1LDAP\s0 protocol version being used (default is LDAPv3). To talk
to an older server, for example one using LDAPv2, set this to 2.  With
modern \s-1LDAP\s0 implementations, you shouldn't need to bother setting this.
.SS "start_tls"
.IX Subsection "start_tls"
Enable \s-1TLS\s0 support for \s-1LDAP.\s0  This is the default.  If you do not want \s-1TLS,\s0
set this to zero, but it's recommended to take the default.
.SS "tls_verify"
.IX Subsection "tls_verify"
For \s-1SSL\s0 certificate validation, set tls_verify to 'none' | 'optional' | 'require'.
The default is 'optional'.  See Net::LDAP for more information.
.SS "cafile"
.IX Subsection "cafile"
The path to your \s-1CA\s0 or \s-1CA\s0 chain certificate file.  Required in \s-1TLS\s0 mode for
\&\s-1LDAP\s0 if tls_verify is true.
.SS "return_ldap_handle"
.IX Subsection "return_ldap_handle"
When authenticating against \s-1LDAP,\s0 the plugin will do an unbind operation to
close the connection with the \s-1LDAP\s0 server after an authentication success or
failure.  In some cases, it may be useful to return the active \s-1LDAP\s0 connection
handle to your calling code so that further \s-1LDAP\s0 operations can be performed
after authentication succeeds.  To enable this, set return_ldap_handle.
.PP
Note that the last bind operation on the connection will be that of the end
user you're trying to authenticate, so once you get the handle back any \s-1LDAP\s0
operation you attempt to execute will have only the \s-1LDAP\s0 privileges granted to
the end user who just authenticated.  If you need the \s-1LDAP\s0 privileges of your
administrative bind \s-1DN\s0 or other user, you'll need to do a fresh bind using the
same handle.  Rebinding will probably work with many modern \s-1LDAP\s0
implementations, but it is not guaranteed.
.PP
The default behavior for the plugin is to close the \s-1LDAP\s0 connection and not
return a connection handle.
.SS "logging"
.IX Subsection "logging"
If set, this enables some logging of successes and failures for
authentication, \s-1LDAP\s0 binding, etc.  The default is no logging.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 3
\&  # With callback
\&  get \*(Aq/\*(Aq => sub {
\&      my $self = shift;
\&  
\&      return $self\->render(text => \*(Aqok\*(Aq)
\&          if $self\->basic_auth(
\&              realm => sub { return 1 if "@_" eq \*(Aqusername password\*(Aq }
\&          );
\&  };
\&  
\&  # With callback and getting username from return hash ref.
\&  get \*(Aq/\*(Aq => sub {
\&      my $self = shift;
\&  
\&      my ($href, $auth_ok) = $self\->basic_auth(
\&          realm => sub { return 1 if "@_" eq \*(Aqusername password\*(Aq }
\&      );
\&
\&      if ($auth_ok) {
\&          return $self\->render(
\&              status => 200,
\&              text   => \*(Aqok\*(Aq,
\&              msg    => "Welcome $href\->{username}"
\&          );
\&      }
\&      else {
\&          return $self\->render(
\&              status => 401,
\&              text   => \*(Aqunauthorized\*(Aq,
\&              msg    => "Sorry $href\->{username}"
\&          );
\&      }
\&  };
\&  
\&  # With encrypted password
\&  get \*(Aq/\*(Aq => sub {
\&      my $self = shift;
\&  
\&      $self\->render(text => \*(Aqok\*(Aq)
\&        if $self\->basic_auth(
\&          "Realm Name" => {
\&              username => \*(Aqusername\*(Aq,
\&              password => \*(AqMlQ8OC3xHPIi.\*(Aq
\&          }
\&      );
\&  };
\&  
\&  # Passwd file authentication
\&  get \*(Aq/\*(Aq => sub {
\&      my $self = shift;
\&  
\&      $self\->render(text => \*(Aqok\*(Aq)
\&        if $self\->basic_auth(
\&          "Realm Name" => {
\&              path => \*(Aq/path/to/passwd/file.txt\*(Aq
\&          }
\&      );
\&  };
\&  
\&  # LDAP authentication (with anonymous bind)
\&  get \*(Aq/\*(Aq => sub {
\&      my $self = shift;
\&  
\&      $self\->render(text => \*(Aqok\*(Aq)
\&        if $self\->basic_auth(
\&          "Realm Name" => {
\&              host   => \*(Aqldap.company.com\*(Aq,
\&              basedn => \*(Aqou=People,dc=company,dc=com\*(Aq
\&          }
\&      );
\&  };
\&  
\&  # LDAP authentication over TLS/SSL (with authenticated bind)
\&  get \*(Aq/\*(Aq => sub {
\&      my $self = shift;
\&      my ($hash_ref, $auth_ok)
\&          = $self\->basic_auth(
\&              "Realm Name" => {
\&                  host       => \*(Aqldap.company.com\*(Aq,
\&                  basedn     => \*(Aqou=People,dc=domain,dc=com\*(Aq,
\&                  binddn     => \*(Aqcn=bender,ou=People,dc=domain,dc=com\*(Aq,
\&                  bindpw     => \*(Aqsecret\*(Aq,
\&                  filter     => \*(Aq(&(objectClass=person)(cn=%s))\*(Aq,
\&                  cafile     => \*(Aq/some/path/to/ca.cert\*(Aq,
\&                  tls_verify => \*(Aqrequire\*(Aq
\&              }
\&          );
\&      $self\->render(text => \*(Aqok\*(Aq) if $auth_ok;
\&  };
\&
\&  # LDAP authentication over TLS/SSL (with authentciated bind),
\&  # returning the active LDAP handle and using it to do an additional
\&  # search.  Logging is also enabled.
\&  get \*(Aq/\*(Aq => sub {
\&      my $self = shift;
\&      my ($hash_ref, $auth_ok)
\&          = $self\->basic_auth(
\&              "Realm Name" => {
\&                  host       => \*(Aqldap.company.com\*(Aq,
\&                  basedn     => \*(Aqou=People,dc=domain,dc=com\*(Aq,
\&                  binddn     => \*(Aqcn=bender,ou=People,dc=domain,dc=com\*(Aq,
\&                  bindpw     => \*(Aqsecret\*(Aq,
\&                  filter     => \*(Aq(&(objectClass=person)(cn=%s))\*(Aq,
\&                  cafile     => \*(Aq/some/path/to/ca.cert\*(Aq,
\&                  tls_verify => \*(Aqrequire\*(Aq,
\&                  logging    => 1,
\&                  return_ldap_handle => 1
\&              }
\&          );
\&
\&      if ($hash_ref\->{ldap}) {
\&          my $ldap     = $hash_ref\->{ldap};
\&          my $username = $hash_ref\->{username};
\&          my @fields   = qw(cn sn mail);
\&          my $filter   = join \*(Aq\*(Aq, map { "($_=*$username*)" } @fields;
\&          $filter      = \*(Aq(|\*(Aq . $filter . \*(Aq)\*(Aq;
\&
\&          my $mesg = $ldap\->search(
\&              base   => \*(Aqdc=domain,dc=com\*(Aq,
\&              scope  => \*(Aqsub\*(Aq,
\&              filter => $filter,
\&              attrs  => [ \*(Aqcn\*(Aq, \*(Aqsn\*(Aq, \*(Aqmail\*(Aq ]
\&          );
\&          croak $mesg\->error if $mesg\->code;
\&
\&          my @entries = $mesg\->entries;
\&
\&          for my $entry (@entries) {
\&              my $email = $entry\->get_value(\*(Aqmail\*(Aq);
\&              $self\->app\->log\->info("Email address for $username is $email.");
\&          }
\&          $ldap\->unbind;
\&      }
\&
\&      $self\->render(text => \*(Aqok\*(Aq) if $auth_ok;
\&  };
\&
\&  # Active Directory authentication (with authenticated bind)
\&  get \*(Aq/\*(Aq => sub {
\&      my $self = shift;
\&  
\&      $self\->render(text => \*(Aqok\*(Aq)
\&        if $self\->basic_auth(
\&          "Realm Name" => {
\&              host   => \*(Aqldap.company.com\*(Aq,
\&              basedn => \*(Aqdc=company,dc=com\*(Aq,
\&              binddn => \*(Aqou=People,dc=company,dc=com\*(Aq,
\&              bindpw => \*(Aqsecret\*(Aq,
\&              filter =>
\&              \*(Aq(&(objectClass=organizationalPerson)(userPrincipalName=%s))\*(Aq
\&          }
\&      );
\&  };
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-mojolicious\-plugin\-basicauthplus at rt.cpan.org\*(C'\fR, or through the web
interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Mojolicious\-Plugin\-BasicAuthPlus>.  I will be notified, and then you'll automatically be notified of progress on your bug as I make changes.
.SH "DEVELOPMENT"
.IX Header "DEVELOPMENT"
<http://github.com/stregone/mojolicious\-plugin\-basicauthplus>
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Mojolicious::Plugin::BasicAuthPlus
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Mojolicious\-Plugin\-BasicAuthPlus>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Mojolicious\-Plugin\-BasicAuthPlus>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Mojolicious\-Plugin\-BasicAuthPlus>
.Sp
item * Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Mojolicious\-Plugin\-BasicAuthPlus/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Based on Mojolicious::Plugin::BasicAuth, by Glen Hinkle <tempire@cpan.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Brad Robertson <blr@cpan.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.RS 2
Nicolas Georges
.Sp
Jay Mortensen
.Sp
Mark Muldoon
.Sp
G.Y. Park
.Sp
Jan Paul Schmidt
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>,
Authen::Simple::Password, Authen::Simple::Passwd, Net::LDAP
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2013\-2018 by Brad Robertson.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
