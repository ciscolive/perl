.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::App::Message::Envelope 3"
.TH MooseX::App::Message::Envelope 3 "2019-05-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::App::Message::Envelope \- Message presented to the user
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Whenever MooseX::App needs to pass a message to the user, it does so by
generating a MooseX::App::Message::Envelope object. The object usually
contains one or more blocks (MooseX::App::Message::Block) and can be
easily stringified.
.PP
Usually a MooseX::App::Message::Envelope object is generated and returned
by the new_with_command method in MooseX::App::Base
if there is an error or if the user requests help.
.PP
To avoid useless object type checks when working with this method,
MooseX::App::Message::Envelope follows the Null-class pattern. So you can do
this, no matter if new_with_command fails or not:
.PP
.Vb 1
\& MyApp\->new_with_command\->some_method\->only_called_if_successful;
.Ve
.PP
If
.SH "METHODS"
.IX Header "METHODS"
.SS "stringify"
.IX Subsection "stringify"
Stringifies the messages
.SS "overload"
.IX Subsection "overload"
This method is called whenever the object is stringified via overload. In this
case it prints the message on either \s-1STDERR\s0 or \s-1STDOUT,\s0 and exits the process
with the given exitcode (if any).
.SS "add_block"
.IX Subsection "add_block"
Adds a new message block. Param must be a MooseX::App::Message::Block
.SS "list_blocks"
.IX Subsection "list_blocks"
Returns a list on message blocks.
.SS "blocks"
.IX Subsection "blocks"
Message block accessor.
.SS "exitcode"
.IX Subsection "exitcode"
Exitcode accessor.
.SS "has_exitcode"
.IX Subsection "has_exitcode"
Check if exitcode is set.
.SS "\s-1OVERLOAD\s0"
.IX Subsection "OVERLOAD"
Stringification of this object is overloaded.
.SS "\s-1AUTOLOAD\s0"
.IX Subsection "AUTOLOAD"
You can call any method on the message class.
