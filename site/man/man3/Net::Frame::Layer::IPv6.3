.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Frame::Layer::IPv6 3"
.TH Net::Frame::Layer::IPv6 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Frame::Layer::IPv6 \- Internet Protocol v6 layer object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use Net::Frame::Layer::IPv6 qw(:consts);
\&
\&   # Build a layer
\&   my $layer = Net::Frame::Layer::IPv6\->new(
\&      version       => 6,
\&      trafficClass  => 0,
\&      flowLabel     => 0,
\&      nextHeader    => NF_IPv6_PROTOCOL_TCP,
\&      hopLimit      => 0xff,
\&      src           => \*(Aq::1\*(Aq,
\&      dst           => \*(Aq::1\*(Aq,
\&      payloadLength => 0,
\&   );
\&   $layer\->pack;
\&
\&   print \*(AqRAW: \*(Aq.$layer\->dump."\en";
\&
\&   # Read a raw layer
\&   my $layer = Net::Frame::Layer::IPv6\->new(raw = $raw);
\&
\&   print $layer\->print."\en";
\&   print \*(AqPAYLOAD: \*(Aq.unpack(\*(AqH*\*(Aq, $layer\->payload)."\en"
\&      if $layer\->payload;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This modules implements the encoding and decoding of the IPv6 layer.
.PP
\&\s-1RFC:\s0 ftp://ftp.rfc\-editor.org/in\-notes/rfc2460.txt
.PP
See also \fBNet::Frame::Layer\fR for other attributes and methods.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "\fBversion\fR \- 4 bits" 4
.IX Item "version - 4 bits"
Version of Internet Protocol header.
.IP "\fBtrafficClass\fR \- 8 bits" 4
.IX Item "trafficClass - 8 bits"
Traffic class field. Was Type of Service in IPv4.
.IP "\fBflowLabel\fR \- 20 bits" 4
.IX Item "flowLabel - 20 bits"
Flow label class field. Was \s-1IP ID\s0 in IPv4.
.IP "\fBnextHeader\fR \- 8 bits" 4
.IX Item "nextHeader - 8 bits"
The type of next header. Was protocol in IPv4.
.IP "\fBprotocol\fR" 4
.IX Item "protocol"
Is an alias for \fBnextHeader\fR.
.IP "\fBpayloadLength\fR \- 16 bits" 4
.IX Item "payloadLength - 16 bits"
Length in bytes of encapsulated layers (usually, that is layer 4 + layer 7).
.IP "\fBhopLimit\fR \- 8 bits" 4
.IX Item "hopLimit - 8 bits"
Was \s-1TTL\s0 field in IPv4.
.IP "\fBsrc\fR \- 32 bits" 4
.IX Item "src - 32 bits"
.PD 0
.IP "\fBdst\fR \- 32 bits" 4
.IX Item "dst - 32 bits"
.PD
Source and destination addresses.
.PP
The following are inherited attributes. See \fBNet::Frame::Layer\fR for more information.
.IP "\fBraw\fR" 4
.IX Item "raw"
.PD 0
.IP "\fBpayload\fR" 4
.IX Item "payload"
.IP "\fBnextLayer\fR" 4
.IX Item "nextLayer"
.PD
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
.PD 0
.IP "\fBnew\fR (hash)" 4
.IX Item "new (hash)"
.PD
Object constructor. You can pass attributes that will overwrite default ones. See \fB\s-1SYNOPSIS\s0\fR for default values.
.IP "\fBcomputeLengths\fR ({ payloadLength => \s-1VALUE\s0 })" 4
.IX Item "computeLengths ({ payloadLength => VALUE })"
In order to compute lengths attributes within IPv6 header, you need to pass via a hashref the number of bytes contained in IPv6 payload (that is, the sum of all layers after the IPv6 one).
.PP
The following are inherited methods. Some of them may be overridden in this layer, and some others may not be meaningful in this layer. See \fBNet::Frame::Layer\fR for more information.
.IP "\fBlayer\fR" 4
.IX Item "layer"
.PD 0
.IP "\fBcomputeLengths\fR" 4
.IX Item "computeLengths"
.IP "\fBpack\fR" 4
.IX Item "pack"
.IP "\fBunpack\fR" 4
.IX Item "unpack"
.IP "\fBencapsulate\fR" 4
.IX Item "encapsulate"
.IP "\fBgetLength\fR" 4
.IX Item "getLength"
.IP "\fBprint\fR" 4
.IX Item "print"
.IP "\fBdump\fR" 4
.IX Item "dump"
.PD
.SH "CONSTANTS"
.IX Header "CONSTANTS"
Load them: use Net::Frame::Layer::IPv6 qw(:consts);
.IP "\fBNF_IPv6_PROTOCOL_ICMPv4\fR" 4
.IX Item "NF_IPv6_PROTOCOL_ICMPv4"
.PD 0
.IP "\fBNF_IPv6_PROTOCOL_IGMP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IGMP"
.IP "\fBNF_IPv6_PROTOCOL_IPIP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IPIP"
.IP "\fBNF_IPv6_PROTOCOL_TCP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_TCP"
.IP "\fBNF_IPv6_PROTOCOL_EGP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_EGP"
.IP "\fBNF_IPv6_PROTOCOL_IGRP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IGRP"
.IP "\fBNF_IPv6_PROTOCOL_CHAOS\fR" 4
.IX Item "NF_IPv6_PROTOCOL_CHAOS"
.IP "\fBNF_IPv6_PROTOCOL_UDP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_UDP"
.IP "\fBNF_IPv6_PROTOCOL_IDP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IDP"
.IP "\fBNF_IPv6_PROTOCOL_DCCP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_DCCP"
.IP "\fBNF_IPv6_PROTOCOL_IPv6\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IPv6"
.IP "\fBNF_IPv6_PROTOCOL_IPv6ROUTING\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IPv6ROUTING"
.IP "\fBNF_IPv6_PROTOCOL_IPv6FRAGMENT\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IPv6FRAGMENT"
.IP "\fBNF_IPv6_PROTOCOL_IDRP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IDRP"
.IP "\fBNF_IPv6_PROTOCOL_RSVP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_RSVP"
.IP "\fBNF_IPv6_PROTOCOL_GRE\fR" 4
.IX Item "NF_IPv6_PROTOCOL_GRE"
.IP "\fBNF_IPv6_PROTOCOL_ESP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_ESP"
.IP "\fBNF_IPv6_PROTOCOL_AH\fR" 4
.IX Item "NF_IPv6_PROTOCOL_AH"
.IP "\fBNF_IPv6_PROTOCOL_ICMPv6\fR" 4
.IX Item "NF_IPv6_PROTOCOL_ICMPv6"
.IP "\fBNF_IPv6_PROTOCOL_EIGRP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_EIGRP"
.IP "\fBNF_IPv6_PROTOCOL_OSPF\fR" 4
.IX Item "NF_IPv6_PROTOCOL_OSPF"
.IP "\fBNF_IPv6_PROTOCOL_ETHERIP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_ETHERIP"
.IP "\fBNF_IPv6_PROTOCOL_PIM\fR" 4
.IX Item "NF_IPv6_PROTOCOL_PIM"
.IP "\fBNF_IPv6_PROTOCOL_VRRP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_VRRP"
.IP "\fBNF_IPv6_PROTOCOL_STP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_STP"
.IP "\fBNF_IPv6_PROTOCOL_SCTP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_SCTP"
.IP "\fBNF_IPv6_PROTOCOL_UDPLITE\fR" 4
.IX Item "NF_IPv6_PROTOCOL_UDPLITE"
.IP "\fBNF_IPv6_PROTOCOL_IPv6HOPBYHOP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IPv6HOPBYHOP"
.IP "\fBNF_IPv6_PROTOCOL_GGP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_GGP"
.IP "\fBNF_IPv6_PROTOCOL_ST\fR" 4
.IX Item "NF_IPv6_PROTOCOL_ST"
.IP "\fBNF_IPv6_PROTOCOL_CBT\fR" 4
.IX Item "NF_IPv6_PROTOCOL_CBT"
.IP "\fBNF_IPv6_PROTOCOL_PUP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_PUP"
.IP "\fBNF_IPv6_PROTOCOL_ARGUS\fR" 4
.IX Item "NF_IPv6_PROTOCOL_ARGUS"
.IP "\fBNF_IPv6_PROTOCOL_EMCON\fR" 4
.IX Item "NF_IPv6_PROTOCOL_EMCON"
.IP "\fBNF_IPv6_PROTOCOL_XNET\fR" 4
.IX Item "NF_IPv6_PROTOCOL_XNET"
.IP "\fBNF_IPv6_PROTOCOL_MUX\fR" 4
.IX Item "NF_IPv6_PROTOCOL_MUX"
.IP "\fBNF_IPv6_PROTOCOL_DCNMEAS\fR" 4
.IX Item "NF_IPv6_PROTOCOL_DCNMEAS"
.IP "\fBNF_IPv6_PROTOCOL_HMP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_HMP"
.IP "\fBNF_IPv6_PROTOCOL_PRM\fR" 4
.IX Item "NF_IPv6_PROTOCOL_PRM"
.IP "\fBNF_IPv6_PROTOCOL_TRUNK1\fR" 4
.IX Item "NF_IPv6_PROTOCOL_TRUNK1"
.IP "\fBNF_IPv6_PROTOCOL_TRUNK2\fR" 4
.IX Item "NF_IPv6_PROTOCOL_TRUNK2"
.IP "\fBNF_IPv6_PROTOCOL_LEAF1\fR" 4
.IX Item "NF_IPv6_PROTOCOL_LEAF1"
.IP "\fBNF_IPv6_PROTOCOL_LEAF2\fR" 4
.IX Item "NF_IPv6_PROTOCOL_LEAF2"
.IP "\fBNF_IPv6_PROTOCOL_3PC\fR" 4
.IX Item "NF_IPv6_PROTOCOL_3PC"
.IP "\fBNF_IPv6_PROTOCOL_IDPR\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IDPR"
.IP "\fBNF_IPv6_PROTOCOL_XTP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_XTP"
.IP "\fBNF_IPv6_PROTOCOL_DDP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_DDP"
.IP "\fBNF_IPv6_PROTOCOL_IDPRCMTP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IDPRCMTP"
.IP "\fBNF_IPv6_PROTOCOL_TPPLUSPLUS\fR" 4
.IX Item "NF_IPv6_PROTOCOL_TPPLUSPLUS"
.IP "\fBNF_IPv6_PROTOCOL_IL\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IL"
.IP "\fBNF_IPv6_PROTOCOL_SDRP\fR" 4
.IX Item "NF_IPv6_PROTOCOL_SDRP"
.IP "\fBNF_IPv6_PROTOCOL_IPv6NONEXT\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IPv6NONEXT"
.IP "\fBNF_IPv6_PROTOCOL_IPv6DESTINATION\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IPv6DESTINATION"
.IP "\fBNF_IPv6_PROTOCOL_IPv6MOBILITY\fR" 4
.IX Item "NF_IPv6_PROTOCOL_IPv6MOBILITY"
.PD
Constants for \fBnextHeader\fR attribute.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Frame::Layer
.SH "AUTHOR"
.IX Header "AUTHOR"
Patrice <GomoR> Auffret
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2006\-2017, Patrice <GomoR> Auffret
.PP
You may distribute this module under the terms of the Artistic license.
See \s-1LICENSE\s0.Artistic file in the source distribution archive.
