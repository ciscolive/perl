.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DTC::Pool 3"
.TH Infoblox::DTC::Pool 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DTC::Pool \- a DTC Pool object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1DTC\s0 Pool object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $pool = Infoblox::DTC::Pool\->new(
\&    name                    => $string,,                                                              #Required
\&    lb_preferred_method     => \*(AqALL_AVAILABLE\*(Aq | \*(AqGLOBAL_AVAILABILITY\*(Aq | \*(AqRATIO\*(Aq |
\&                               \*(AqROUND_ROBIN\*(Aq | \*(AqTOPOLOGY\*(Aq | \*(AqDYNAMIC_RATIO\*(Aq,                          #Required
\&    disable                 => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                                      #Optional / Default is \*(Aqfalse\*(Aq
\&    comment                 => $string,                                                               #Optional / Default is undefined
\&    lb_preferred_topology   => $topology,                                                             #Optional / Default is undefined
\&    lb_alternate_method     => \*(AqALL_AVAILABLE\*(Aq | \*(AqGLOBAL_AVAILABILITY\*(Aq | \*(AqRATIO\*(Aq |
\&                               \*(AqROUND_ROBIN\*(Aq | \*(AqTOPOLOGY\*(Aq | \*(AqDYNAMIC_RATIO\*(Aq,                          #Optional / Default is undefined
\&    lb_alternate_topology   => $topology,                                                             #Optional / Default is undefined
\&    availability            => \*(AqANY\*(Aq | \*(AqQUORUM\*(Aq | \*(AqALL\*(Aq,                                              #Optional / Default is undefined
\&    quorum                  => $uint,                                                                 #Optional / Default is undefined
\&    ttl                     => $uint,                                                                 #Optional / Default is undefined
\&    override_ttl            => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                                      #Optional / Default is \*(Aqfalse\*(Aq
\&    monitors                => [$monitor1, $monitor2, ...],                                           #Optional / Default is empty list
\&    servers                 => [$server1, $server2, ...],                                             #Optional / Default is empty list
\&    dynamic_ratio_preferred => $ratio_setting,                                                        #Optional / Default is undefined
\&    dynamic_ratio_alternate => $ratio_setting,                                                        #Optional / Default is undefined
\&    extattrs                => { $string => $extattr, ... },                                          #Optional / Default is undefined
\&    extensible_attributes   => { $string => $string | $num, $string => [ $string | $num, ... ], ... } #Optional / Default is undefined
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in a Session module that you can apply to a \s-1DTC\s0 Pool object
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #construct an object
\& my $pool = Infoblox::DTC::Pool\->new(
\&    name  => \*(Aqpool1\*(Aq,
\&    lb_preferred_method => \*(AqRATIO\*(Aq,
\& );
\&
\& #submit for addition
\& my $response = $session\->add($pool);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attribute to get a specific object:
\&
\&  name                  \- Optional. A DTC Pool name in a string format.
\&  comment               \- Optional. A DTC Pool comment.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference that contains extensible attributes.
\&  status_member         \- Optional. A member which provides object health status, default is Grid.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DTC::Pool\*(Aq,
\&     name   => \*(Aqpool1\*(Aq,
\& );
\&
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DTC::Pool\*(Aq,
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the comment.
\& $pool\->comment(\*(Aqthis is a modified comment\*(Aq);
\& #Submit modification
\& my $response = $session\->modify($pool);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DTC::Pool\*(Aq,
\&     name   => \*(Aqpool1\*(Aq,
\& );
\& #Find the desired object from the retrieved list.
\& my $desired_pool = $retrieved_objs[0];
\& #Submit for removal
\& my $response = $session\->remove($desired_pool);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attribute to get a specific object:
\&
\&  name                  \- Optional. A DTC Pool name in a string format.
\&  comment               \- Optional. A DTC Pool comment.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference that contains extensible attributes.
\&  status_member         \- Optional. A member which provides object health status, default is Grid.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DTC::Pool\*(Aq,
\&     name   => \*(Aqpool1\*(Aq,
\& );
\&
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DTC::Pool\*(Aq,
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of the object.
.SS "availability( )"
.IX Subsection "availability( )"
.RS 4
Use this method to set or retrieve an \s-1DTC\s0 Pool resources availability status.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1ALL\s0', '\s-1ANY\s0' and '\s-1QUORUM\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get availability value
\& my $availability = $pool\->availability();
\&
\& #modify availability value
\& $pool\->availability(\*(AqANY\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a comment in string format (\s-1UTF\-8\s0) with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get comment value
\& my $comment = $pool\->comment();
\&
\& #modify comment value
\& $pool\->comment(\*(Aqdesired comment\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "dynamic_ratio_alternate( )"
.IX Subsection "dynamic_ratio_alternate( )"
.RS 4
Use this method to set or retrieve the alternate dynamic ratio load balancing settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::DTC::Pool::DynamicRatioSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get dynamic_ratio_alternate value
\& my $dynamic_ratio_alternate = $pool\->dynamic_ratio_alternate();
\&
\& #Construct dynamic_ratio_alternate value
\& my $dynamic_ratio = Infoblox::DTC::Pool::DynamicRatioSetting\->new(
\&     method                => \*(AqROUND_TRIP_DELAY\*(Aq,
\&     invert_monitor_metric => \*(Aqtrue\*(Aq,
\& );
\&
\& #modify dynamic_ratio_alternate value
\& $pool\->dynamic_ratio_alternate($dynamic_ratio);
.Ve
.RE
.RS 4
.RE
.SS "dynamic_ratio_preferred( )"
.IX Subsection "dynamic_ratio_preferred( )"
.RS 4
Use this method to set or retrieve the preferred dynamic ratio load balancing settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::DTC::Pool::DynamicRatioSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get dynamic_ratio_preferred value
\& my $dynamic_ratio_preferred = $pool\->dynamic_ratio_preferred();
\&
\& #Construct dynamic_ratio_preferred value
\& my $dynamic_ratio = Infoblox::DTC::Pool::DynamicRatioSetting\->new(
\&     method                => \*(AqROUND_TRIP_DELAY\*(Aq,
\&     invert_monitor_metric => \*(Aqtrue\*(Aq,
\& );
\&
\& #modify dynamic_ratio_preferred value
\& $pool\->dynamic_ratio_preferred($dynamic_ratio);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to enable or disable a \s-1DTC\s0 Pool.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to disable a \s-1DTC\s0 Pool or 'false' to enable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get disable value
\& my $disable = $pool\->disable();
\&
\& #modify disable value
\& $pool\->disable(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DTC\s0 Pool object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values (Infoblox::Grid::Extattr objects).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get extattrs value
\& my $ref_extattrs = $pool\->extattrs();
\&
\& #Modify extattrs
\& $pool\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DTC\s0 Pool object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get extensible attributes
\& my $ref_extensible_attributes = $pool\->extensible_attributes();
\&
\& #Modify extensible attributes
\& $pool\->extensible_attributes({\*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [\*(AqPeter\*(Aq, \*(AqTom\*(Aq]});
.Ve
.RE
.RS 4
.RE
.SS "health( )"
.IX Subsection "health( )"
.RS 4
Use this method to retrieve a \s-1DTC\s0 Pool health information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::DTC::Health object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get health value
\& my $health = $pool\->health();
.Ve
.RE
.RS 4
.RE
.SS "lb_alternate_method( )"
.IX Subsection "lb_alternate_method( )"
.RS 4
Use this method to set or retrieve the alternate load balancing method for the \s-1DTC\s0 Pool object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1ALL_AVAILABLE\s0', '\s-1DYNAMIC_RATIO\s0', '\s-1NONE\s0', '\s-1GLOBAL_AVAILABILITY\s0', '\s-1RATIO\s0', '\s-1ROUND_ROBIN\s0' and '\s-1TOPOLOGY\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get lb_alternate_method value
\& my $lb_alternate_method = $pool\->lb_alternate_method();
\&
\& #modify lb_alternate_method value
\& $pool\->lb_alternate_method(\*(AqRATIO\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "lb_alternate_topology( )"
.IX Subsection "lb_alternate_topology( )"
.RS 4
Use this method to set or retrieve topology rules for the alternate '\s-1TOPOLOGY\s0' load balancing method for the \s-1DTC\s0 Pool object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Not that this field will be retrieved from the appliance only if alternate load balancing method is '\s-1TOPOLOGY\s0'.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::DTC::Topology object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get lb_alternate_topology value
\& my $lb_alternate_topology = $pool\->lb_alternate_topology();
\&
\& #modify lb_alternate_topology value
\& $pool\->lb_alternate_topology($lb_alternate_topology);
.Ve
.RE
.RS 4
.RE
.SS "lb_preferred_method( )"
.IX Subsection "lb_preferred_method( )"
.RS 4
Use this method to set or retrieve the preferred load balancing method for the \s-1DTC\s0 Pool object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1ALL_AVAILABLE\s0', '\s-1DYNAMIC_RATIO\s0', '\s-1GLOBAL_AVAILABILITY\s0', '\s-1RATIO\s0', '\s-1ROUND_ROBIN\s0' and '\s-1TOPOLOGY\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get lb_preferred_method value
\& my $lb_preferred_method = $pool\->lb_preferred_method();
\&
\& #modify lb_preferred_method value
\& $pool\->lb_preferred_method(\*(AqRATIO\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "lb_preferred_topology( )"
.IX Subsection "lb_preferred_topology( )"
.RS 4
Use this method to set or retrieve topology rules for the preferred '\s-1TOPOLOGY\s0' load balancing method for the \s-1DTC\s0 Pool object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::DTC::Topology object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.Sp
Not that this field will be retrieved from the appliance only if preferred load balancing method is '\s-1TOPOLOGY\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get lb_preferred_topology value
\& my $lb_preferred_topology = $pool\->lb_preferred_topology();
\&
\& #modify lb_preferred_topology value
\& $pool\->lb_preferred_topology($lb_preferred_topology);
.Ve
.RE
.RS 4
.RE
.SS "monitors( )"
.IX Subsection "monitors( )"
.RS 4
Use this method to set or retrieve health monitors related to a \s-1DTC\s0 Pool object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array which contains following objects: Infoblox::DTC::Monitor::TCP, Infoblox::DTC::Monitor::ICMP, Infoblox::DTC::Monitor::SIP, Infoblox::DTC::Monitor::HTTP, Infoblox::DTC::Monitor::PDP.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get monitors value
\& my @monitors = $pool\->monitors();
\&
\& #modify monitors value
\& $pool\->monitors([$monitor1, $monitor2]);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve a \s-1DTC\s0 Pool name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired name in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get name value
\& my $name = $pool\->name();
\&
\& #modify name value
\& $pool\->name(\*(Aqpool1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_ttl( )"
.IX Subsection "override_ttl( )"
.RS 4
The override_ttl attribute controls whether the \s-1TTL\s0 value in the object is used, instead of the Grid default.
.Sp
The override_ttl attribute can be specified explicitly. It is also set implicitly when ttl is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to set override_ttl flag or 'false' to disable it. Default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get override_ttl value
\& my $override_ttl = $pool\->override_ttl();
\&
\& #modify override_ttl value
\& $pool\->override_ttl(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "quorum( )"
.IX Subsection "quorum( )"
.RS 4
Use this method to set or retrieve the number of monitors that must report the resource as 'up' for '\s-1QUORUM\s0' availability mode to be available.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get quorum value
\& my $quorum = $pool\->quorum();
\&
\& #modify quorum value
\& $pool\->quorum(20);
.Ve
.RE
.RS 4
.RE
.SS "servers( )"
.IX Subsection "servers( )"
.RS 4
Use this method to set or retrieve a list of \s-1DTC\s0 Servers linked to a \s-1DTC\s0 Pool.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of Infoblox::DTC::Server::Link objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get servers value
\& my @servers = $pool\->servers();
\&
\& #modify servers value
\& $pool\->servers([$server1, $server2]);
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to set a \s-1TTL\s0 value.
.Sp
Setting this method to a defined value implicitly sets the override_ttl method to 'true'. Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_ttl attribute to 'false'.
.Sp
Note that when ttl is set to a defined value and override_ttl is set to 'false', the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ttl(10); \f(CW$object\fR\->override_ttl('false'); will set override_ttl to 'false', and the sequence \f(CW$object\fR\->override_ttl('false'); \f(CW$object\fR\->ttl(10); will result in override_ttl='true'.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ttl value
\& my $ttl = $pool\->ttl();
\&
\& #modify ttl value
\& $pool\->ttl(10);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,
Infoblox::Session\->\fBadd()\fR,
Infoblox::Session\->\fBget()\fR,
Infoblox::Session\->\fBmodify()\fR,
Infoblox::Session\->\fBremove()\fR,
Infoblox::Session\->\fBsearch()\fR,
Infoblox::Grid::Extattr,
Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values,
Infoblox::DTC::Health,
Infoblox::DTC::Pool::DynamicRatioSetting,
Infoblox::DTC::Pool::Link,
Infoblox::DTC::Server::Link,
Infoblox::DTC::Topology,
Infoblox::DTC::Monitor::TCP,
Infoblox::DTC::Monitor::ICMP,
Infoblox::DTC::Mo    nitor::SIP,
Infoblox::DTC::Monitor::HTTP,
Infoblox::DTC::Monitor::PDP.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
