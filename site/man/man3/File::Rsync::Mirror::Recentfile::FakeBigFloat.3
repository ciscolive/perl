.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "File::Rsync::Mirror::Recentfile::FakeBigFloat 3"
.TH File::Rsync::Mirror::Recentfile::FakeBigFloat 3 "2012-12-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Rsync::Mirror::Recentfile::FakeBigFloat \- pseudo bigfloat support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use File::Rsync::Mirror::Recentfile::FakeBigFloat qw(:all);
.Ve
.SH "ONLY INTERNAL FUNCTIONS"
.IX Header "ONLY INTERNAL FUNCTIONS"
These functions are not part of a public interface and can be
changed and go away any time without prior notice.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
We treat strings that look like floating point numbers. If the native
floating point support is good enough we use it. If it isn't we make
sure no two unequal numbers are treated the same and vice versa. Only
comparison operators are supported, no other math.
.SH "EXPORT"
.IX Header "EXPORT"
All functions are exported in the \f(CW\*(C`:all\*(C'\fR tag.
.ie n .SS "_bigfloatcmp ( $l, $r )"
.el .SS "_bigfloatcmp ( \f(CW$l\fP, \f(CW$r\fP )"
.IX Subsection "_bigfloatcmp ( $l, $r )"
Cmp function for floating point numbers that have a larger significand
than can be handled by native perl floats.
.ie n .SS "_bigfloatge ( $l, $r )"
.el .SS "_bigfloatge ( \f(CW$l\fP, \f(CW$r\fP )"
.IX Subsection "_bigfloatge ( $l, $r )"
Same for ge
.ie n .SS "_bigfloatgt ( $l, $r )"
.el .SS "_bigfloatgt ( \f(CW$l\fP, \f(CW$r\fP )"
.IX Subsection "_bigfloatgt ( $l, $r )"
Same for gt
.ie n .SS "_bigfloatle ( $l, $r )"
.el .SS "_bigfloatle ( \f(CW$l\fP, \f(CW$r\fP )"
.IX Subsection "_bigfloatle ( $l, $r )"
Same for lt
.ie n .SS "_bigfloatlt ( $l, $r )"
.el .SS "_bigfloatlt ( \f(CW$l\fP, \f(CW$r\fP )"
.IX Subsection "_bigfloatlt ( $l, $r )"
Same for lt
.ie n .SS "_bigfloatmax ( $l, $r )"
.el .SS "_bigfloatmax ( \f(CW$l\fP, \f(CW$r\fP )"
.IX Subsection "_bigfloatmax ( $l, $r )"
Same for max (of two arguments)
.ie n .SS "_bigfloatmin ( $l, $r )"
.el .SS "_bigfloatmin ( \f(CW$l\fP, \f(CW$r\fP )"
.IX Subsection "_bigfloatmin ( $l, $r )"
Same for min (of two arguments)
.ie n .SS "$big = _increase_a_bit ( $l, $r )"
.el .SS "\f(CW$big\fP = _increase_a_bit ( \f(CW$l\fP, \f(CW$r\fP )"
.IX Subsection "$big = _increase_a_bit ( $l, $r )"
.ie n .SS "$big = _increase_a_bit ( $n )"
.el .SS "\f(CW$big\fP = _increase_a_bit ( \f(CW$n\fP )"
.IX Subsection "$big = _increase_a_bit ( $n )"
The first form calculates a string that is between the two numbers,
closer to \f(CW$l\fR to prevent rounding effects towards \f(CW$r\fR. The second form
calculates the second number itself based on \fBnextup()\fR in
Data::Float.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008, 2009 Andreas KÃ¶nig.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
