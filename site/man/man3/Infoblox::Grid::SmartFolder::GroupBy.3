.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::SmartFolder::GroupBy 3"
.TH Infoblox::Grid::SmartFolder::GroupBy 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::SmartFolder::GroupBy \- Smart Folder Group By object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Defines grouping information in a global or personal smart folder.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 5
\& my $group_by = Infoblox::Grid::SmartFolder::GroupBy\->new(
\&     value                   => $string,            #Required
\&     enable_grouping         => "true" | "false",   #Required
\&     value_type              => "EXTATTR" | "NORMAL", #Optional / Default is "EXTATTR"
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to a GroupBy object.
.SS "Infoblox::Grid::GlobalSmartFolder\->group_bys( )"
.IX Subsection "Infoblox::Grid::GlobalSmartFolder->group_bys( )"
.RS 4
Use this function to specify a list of \*(L"group by\*(R" items to store in a global smart folder.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Construct an object
\& my $group_by_state = Infoblox::Grid::SmartFolder::GroupBy\->new(
\&                                                                enable_grouping => \*(Aqtrue\*(Aq,
\&                                                                value => "State",
\&                                                                value_type => "EXTATTR",
\&                                                               );
\&
\& my $group_by_vcluster = Infoblox::Grid::SmartFolder::GroupBy\->new(
\&                                                             enable_grouping => \*(Aqtrue\*(Aq,
\&                                                             value => "v_cluster",
\&                                                             value_type => "NORMAL",
\&                                                            );
\& # Configure group_by items
\& my $response = $GlobalSmartFolder\->group_bys([$group_by_state,$group_by_vcluster]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::PersonalSmartFolder\->group_bys( )"
.IX Subsection "Infoblox::Grid::PersonalSmartFolder->group_bys( )"
.RS 4
Use this function to specify a list of \*(L"group by\*(R" items to store in a personal smart folder.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Construct an object
\& my $group_by_state = Infoblox::Grid::SmartFolder::GroupBy\->new(
\&                                                                enable_grouping => \*(Aqtrue\*(Aq,
\&                                                                value => "State",
\&                                                                value_type => "EXTATTR",
\&                                                               );
\&
\& my $group_by_vcluster = Infoblox::Grid::SmartFolder::GroupBy\->new(
\&                                                             enable_grouping => \*(Aqtrue\*(Aq,
\&                                                             value => "v_cluster",
\&                                                             value_type => "NORMAL",
\&                                                            );
\& # Configure group_by items
\& my $response = $PersonalSmartFolder\->group_bys([$group_by_state,$group_by_vcluster]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a SmartFolder::GroupBy object.
.SS "value( )"
.IX Subsection "value( )"
.RS 4
Use this method to specify the name of the attribute (when value_type is \*(L"\s-1EXTATTR\*(R"\s0 or \*(L"\s-1NORMAL\*(R"\s0). The possible values for the value attribute are v_datacenter, v_cluster, v_host, v_entity_type, port_vlan_name, network_component_name, network_component_port_name, and any valid extensible attribute in the appliance.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are strings corresponding to extensible attributes, object types, or object names.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting value
\& my $value = $group_by\->value();
\& # Modifying value
\& $group_by\->value("Country");
.Ve
.RE
.RS 4
.RE
.SS "value_type( )"
.IX Subsection "value_type( )"
.RS 4
Use this method to set or retrieve the value type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
\&\*(L"\s-1EXTATTR\*(R"\s0 and \*(L"\s-1NORMAL\*(R"\s0 are supported.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting value_type
\& my $value_type = $group_by\->value_type();
\& # Modifying value_type
\& $group_by\->value_type("EXTATTR");
.Ve
.RE
.RS 4
.RE
.SS "enable_grouping( )"
.IX Subsection "enable_grouping( )"
.RS 4
Use this method to set or retrieve the enable grouping attribute.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_grouping flag or \*(L"false\*(R" to deactivate/unset it. \*(L"group by\*(R" rules where enable_grouping is set to \*(L"false\*(R" will be ignored when retrieving the corresponding smart folder.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting enable_grouping
\& my $enable_grouping = $group_by\->enable_grouping();
\& # Modifying enable_grouping
\& $group_by\->enable_grouping("true");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
\&\fB##Preparation prior to a smart folder group by object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a smart folder query item object\fR
.PP
.Vb 9
\& my $group_by_state = Infoblox::Grid::SmartFolder::GroupBy\->new(
\&                                                             enable_grouping => \*(Aqtrue\*(Aq,
\&                                                             value => "State",
\&                                                             value_type => "EXTATTR",
\&                                                            );
\& unless ($group_by_state){
\&      die("Construct smart folder group_by item failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& print "SmartFolder::GroupBy object created successfully\en";
.Ve
.PP
\&\fB#Create a personal smart folder and use \f(CB$group_by\fB\fR
.PP
.Vb 5
\&  #create a personal smart folder and use $query_item
\&  my $smart_folder = Infoblox::Grid::PersonalSmartFolder\->new(
\&     name         => "my_personal_folder",
\&     group_bys    => [$group_by_state],
\& );
\&
\& #put smart folder into session
\& $session\->add($smart_folder)
\&   or die("Smart folder creation failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\&
\& print "Smart folder creation successful\en";
.Ve
.PP
\&\fB#Clean up\fR
.PP
.Vb 4
\& my @result = $session\->get(
\&     object => "Infoblox::Grid::PersonalSmartFolder",
\&     name   => "my_personal_folder"
\& );
\&
\& unless (scalar(@result) == 0) {
\&     $session\->remove($result[0]);
\& }
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR,Infoblox::Grid::GlobalSmartFolder,Infoblox::Grid::PersonalSmartFolder
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
