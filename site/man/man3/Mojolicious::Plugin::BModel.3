.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::BModel 3"
.TH Mojolicious::Plugin::BModel 3 "2016-03-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::BModel \- Catalyst\-like models in Mojolicious
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # Mojolicious
\&
\&    # in your app:
\&    sub startup {
\&        my $self = shift;
\&
\&        $self\->plugin( \*(AqBModel\*(Aq, { create_dir => 1 } );
\&    }
\&
\&    # in controller:
\&    sub my_controller {
\&        my $self = shift;
\&
\&        my $config_data = $self\->model(\*(AqMyModel\*(Aq)\->get_conf_data(\*(Aqfield\*(Aq);
\&    }
\&
\&    # in <your_app>/lib/Model/MyModel.pm:
\&
\&    use Mojo::Base \*(AqMojolicious::BModel::Base\*(Aq;
\&
\&    sub get_conf_data {
\&        my ( $self, $field ) = @_;
\&
\&        # as example
\&        return $self\->config\->{field};
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\&    This module provides you an ability to separate a business\-logic from controllers into a \*(Aqmodel\*(Aq class
\&    and use this one by the method \*(Aqmodel\*(Aq of a controller object.
\&    This approach is using in the L<Catalyst framework|https://metacpan.org/pod/Catalyst>.
.Ve
.SS "Options"
.IX Subsection "Options"
.IP "\fBcreate_dir\fR" 4
.IX Item "create_dir"
.Vb 2
\&    A flag that determines automatically create the folder \*(Aq<yourapp>/lib/Model\*(Aq
\&    if it does not exist. 0 \- do not create, 1 \- create. Enabled by default
.Ve
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 5
\&    # the example of a new application:
\&    % cpan install Mojolicious::Plugin::BModel
\&    % mojo generate app MyApp
\&    % cd my_app/
\&    % vim lib/MyApp.pm
\&
\&    # edit file:
\&    package MyApp;
\&
\&    use Mojo::Base \*(AqMojolicious\*(Aq;
\&
\&    sub startup {
\&        my $self = shift;
\&
\&        $self\->config\->{testkey} = \*(AqMyTestValue\*(Aq;
\&
\&        $self\->plugin( \*(AqBModel\*(Aq ); # used the default options
\&
\&        my $r = $self\->routes;
\&        $r\->get(\*(Aq/\*(Aq)\->to( \*(Aqroot#index\*(Aq );
\&    }
\&
\&    1;
\&
\&    # end of edit file
\&
\&    # create a new controller
\&
\&    % touch lib/Controller/Root.pm
\&    % vim lib/Controller/Root.pm
\&
\&    # edit file
\&
\&    package MyApp::Controller::Root;
\&
\&    use Mojo::Base \*(AqMojolicious::Controller\*(Aq;
\&
\&    sub index {
\&        my $self = shift;
\&
\&        my $testkey_val = $self\->model(\*(AqMyModel\*(Aq)\->get_conf_key(\*(Aqtestkey\*(Aq);
\&        $self\->render( text => \*(AqValue: \*(Aq . $testkey_val );
\&    }
\&
\&    1;
\&
\&    # end of edit file
\&
\&    # When you connect, the plugin will check if the folder "lib/Model".
\&    # If the folder does not exist, create it.
\&    # If the \*(Aquse_base_model\*(Aq is set to true will be loaded
\&    # module "Mojolicious::BModel::Base" with the base model.
\&    # Method \*(Aqapp\*(Aq base model will contain a link to your application.
\&    # Method \*(Aqconfig\*(Aq base model will contain a link to config of yor application.
\&
\&    # create a new model
\&    % touch lib/MyApp/Model/MyModel.pm
\&    % vim lib/MyApp/Model/MyModel.pm
\&
\&    # edit file
\&
\&    package MyApp::Model::MyModel;
\&
\&    use strict;
\&    use warnings;
\&
\&    use Mojo::Base \*(AqMojolicious::BModel::Base\*(Aq;
\&
\&    sub get_conf_key {
\&        my ( $self, $key ) = @_;
\&
\&        return $self\->config\->{ $key } || \*(Aq\*(Aq;
\&    }
\&
\&    1;
\&
\&    # end of edit file
\&
\&    % morbo \-v script/my_app
\&
\&    # Open in your browser address http://127.0.0.1:3000 and
\&    # you\*(Aqll see text \*(AqValue: MyTestValue\*(Aq
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2016 Alexander Ruzhnikov.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Alexander Ruzhnikov <ruzhnikov85@gmail.com>
