.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Validator::Custom::Result 3"
.TH Validator::Custom::Result 3 "2015-12-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Validator::Custom::Result \- Result of validation
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 2
\&  # Result
\&  my $result = $vc\->validate($data, $rule);
\&
\&  # Safety data
\&  my $safe_data = $result\->data;
\&
\&  # Chacke if the result is valid.
\&  # (this means result have neither missing nor invalid parameter)
\&  my $is_ok = $result\->is_ok;
\&
\&  # Check the existence of missing parameter
\&  my $has_missing_param = $result\->has_missing;
\&  
\&  # Check if one parameter is valid
\&  my $title_is_valid = $result\->is_valid(\*(Aqtitle\*(Aq);
\&
\&  # Missing parameters(this is original keys)
\&  my $missing_params = $result\->missing_params;
\&  
\&  # Invalid parameter names(this is original keys)
\&  my $invalid_params = $result\->invalid_params;
\&  
\&  # Invalid rule keys
\&  my $invalid_rule_keys = $result\->invalid_rule_keys;
\&
\&  # A error message
\&  my $message = $result\->message(\*(Aqtitle\*(Aq);
\&
\&  # Error messages
\&  my $messages = $result\->messages;
\&
\&  # Error messages to hash ref
\&  my $messages_hash = $result\->message_to_hash;
\&  
\&  # Result to hash
\&  my $rhash = $result\->to_hash;
\&  
\&  # Raw data
\&  my $raw_data = $result\->raw_data;
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "data"
.IX Subsection "data"
.Vb 2
\&  my $data = $result\->data;
\&  $result  = $result\->data($data);
.Ve
.PP
Get the data in the end state. Validator::Custom has filtering ability
if you need.
The data passed to \f(CW\*(C`validate()\*(C'\fR is converted to other data by filter.
You can get filtered data using \f(CW\*(C`data()\*(C'\fR.
.SS "missing_params"
.IX Subsection "missing_params"
.Vb 2
\&  my $missing_params = $result\->missing_params;
\&  $result            = $result\->missing_params($missing_params);
.Ve
.PP
You can get missing parameter names using \f(CW\*(C`missing_params()\*(C'\fR.
In this example, return value is the following one.
.SS "raw_data"
.IX Subsection "raw_data"
.Vb 2
\&  my $data  = $result\->raw_data;
\&  $result   = $result\->raw_data($data);
.Ve
.PP
Raw data soon after data_filter is executed.
.SH "METHODS"
.IX Header "METHODS"
Validator::Custom::Result inherits all methods from Object::Simple
and implements the following new ones.
.SS "has_invalid"
.IX Subsection "has_invalid"
.Vb 1
\&  my $has_invalid = $result\->has_invalid;
.Ve
.PP
If at least one of parameter value is invalid,
\&\f(CW\*(C`has_invalid()\*(C'\fR return true value.
.SS "has_missing"
.IX Subsection "has_missing"
.Vb 1
\&  my $has_missing_param = $result\->has_missing;
.Ve
.PP
If at least one of parameter names specified in the rule
is not found in the data,
\&\f(CW\*(C`has_missing()\*(C'\fR return true value.
.SS "invalid_params"
.IX Subsection "invalid_params"
.Vb 1
\&  my $invalid_params = $result\->invalid_params;
.Ve
.PP
Invalid raw data parameter names.
.SS "invalid_rule_keys"
.IX Subsection "invalid_rule_keys"
.Vb 1
\&  my $invalid_rule_keys = $result\->invalid_rule_keys;
.Ve
.PP
Invalid rule keys
.SS "is_ok"
.IX Subsection "is_ok"
.Vb 1
\&  my $is_ok = $result\->is_ok;
.Ve
.PP
If you check the data is completely valid, use \f(CW\*(C`is_ok()\*(C'\fR.
\&\f(CW\*(C`is_ok()\*(C'\fR return true value
if invalid parameter values is not found and all parameter
names specified in the rule is found in the data.
.SS "is_valid"
.IX Subsection "is_valid"
.Vb 1
\&  my $title_is_valid = $result\->is_valid(\*(Aqtitle\*(Aq);
.Ve
.PP
Check if one parameter is valid.
.SS "loose_data"
.IX Subsection "loose_data"
.Vb 1
\&  my $loose_data = $result\->loose_data;
.Ve
.PP
Loose data, which is data merged \f(CW\*(C`raw_data\*(C'\fR and \f(CW\*(C`data\*(C'\fR
.PP
.Vb 2
\&  # Loose data
\&  {%{$self\->raw_data}, %{$self\->data}}
.Ve
.SS "message"
.IX Subsection "message"
.Vb 1
\&  my $message = $result\->message(\*(Aqtitle\*(Aq);
.Ve
.PP
Get a message corresponding to the parameter name which value is invalid.
.SS "messages"
.IX Subsection "messages"
.Vb 1
\&  my $messages = $result\->messages;
.Ve
.PP
Get messages corresponding to the parameter names which value is invalid.
Messages keep the order of parameter names of the rule.
.SS "messages_to_hash"
.IX Subsection "messages_to_hash"
.Vb 1
\&  my $messages = $result\->messages_to_hash;
.Ve
.PP
You can get the pairs of invalid parameter name and message
using \f(CW\*(C`messages_to_hash()\*(C'\fR.
.SS "to_hash"
.IX Subsection "to_hash"
.Vb 1
\&  my $rhash = $result\->to_hash;
.Ve
.PP
Convert result information to hash reference.
The following keys is set.
.PP
.Vb 7
\&  {
\&    ok =>      $result\->is_ok,
\&    missing => $result\->has_missing,
\&    invalid => $result\->has_invalid,
\&    missing_params => $result\->missing_params,
\&    messages => $result\->messages_to_hash
\&  }
.Ve
