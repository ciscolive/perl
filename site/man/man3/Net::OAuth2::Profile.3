.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::OAuth2::Profile 3"
.TH Net::OAuth2::Profile 3 "2019-10-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::OAuth2::Profile \- OAuth2 access profiles
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Net::OAuth2::Profile is extended by
\&   Net::OAuth2::Profile::Password
\&   Net::OAuth2::Profile::WebServer
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  See Net::OAuth2::Profile::WebServer 
\&  and Net::OAuth2::Profile::Password
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Base class for OAuth `profiles'.  Currently implemented:
.IP "\(bu" 4
Net::OAuth2::Profile::WebServer
.IP "\(bu" 4
Net::OAuth2::Profile::Password
.PP
You may want to use the
OAuth2 documentation at Google <https://developers.google.com/accounts/docs/OAuth2WebServer>
to understand the process and the parameters.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Net::OAuth2::Profile\->\fBnew\fR(%options)" 4
.IX Item "Net::OAuth2::Profile->new(%options)"
Next to the \f(CW%options\fR listed below, it is possible to provide settings
for each of the <${commands}> \f(CW\*(C`access_token\*(C'\fR, \f(CW\*(C`protected_resource\*(C'\fR,
\&\f(CW\*(C`authorize\*(C'\fR, and \f(CW\*(C`refresh_token\*(C'\fR.  For each command, you can set
.RS 4
.IP "\(bu" 4
${command}_url => URI|STRING
.Sp
The absolute uri which needs to be used to be addressed to execute the
\&\f(CW$command\fR.  May be specified as \s-1URI\s0 object or \s-1STRING.\s0
.IP "\(bu" 4
${command}_path => \s-1PATH\s0
.Sp
As previous, but relative to the \f(CW\*(C`site\*(C'\fR option value.
.IP "\(bu" 4
${command}_method => '\s-1GET\s0'|'\s-1POST\s0'
.Sp
Which method to use for the call (by default \s-1POST\s0).
.IP "\(bu" 4
${command}_param  => []
.Sp
Additional parameters for the command.
.RE
.RS 4
.Sp
.Vb 11
\& \-Option           \-\-Default
\&  client_id          <required>
\&  client_secret      <required>
\&  grant_type         <required>
\&  hd                 undef
\&  scope              undef
\&  secrets_in_params  <true>
\&  site               undef
\&  state              undef
\&  token_scheme       \*(Aqauth\-header:Bearer\*(Aq
\&  user_agent         <created internally>
.Ve
.IP "client_id => \s-1STRING\s0" 2
.IX Item "client_id => STRING"
.PD 0
.IP "client_secret => \s-1STRING\s0" 2
.IX Item "client_secret => STRING"
.IP "grant_type => \s-1STRING\s0" 2
.IX Item "grant_type => STRING"
.IP "hd => \s-1STRING\s0" 2
.IX Item "hd => STRING"
.PD
Passthrough parameter that allows you to restrict one's login to a particular
Google Apps domain. The application making the call should check that the
returned value for hd matches the expected domain, as the user can change the
hd parameter in the original request.
.Sp
See \fIhttps://developers.google.com/identity/protocols/OpenIDConnect#hd\-param\fR
for more details.
.IP "scope => \s-1STRING\s0" 2
.IX Item "scope => STRING"
.PD 0
.IP "secrets_in_params => \s-1BOOLEAN\s0" 2
.IX Item "secrets_in_params => BOOLEAN"
.PD
The client secrets are passed both via an Authentication header, as via
query parameters in the \s-1URI.\s0  The former is required to be accepted by
rfc6749, the latter is optional.  However: many servers use the query
parameters only.
.Sp
\&\s-1QQ\s0 Catalyst, on the other hand, does refuse requests with these parameters
in the query.  So, with this flag explicitly set to false, only the
Auth header gets included.
.IP "site => \s-1URI\s0" 2
.IX Item "site => URI"
.PD 0
.IP "state => \s-1STRING\s0" 2
.IX Item "state => STRING"
.IP "token_scheme => \s-1SCHEME\s0" 2
.IX Item "token_scheme => SCHEME"
.PD
See \fBadd_token()\fR for the supported SCHEMEs.  Scheme \f(CW\*(C`auth\-header\*(C'\fR is
probably the only sane default, because that works with any kind of http
requests, where the other options have limited or possible disturbing
application.
.Sp
Before [0.53], the default was 'auth\-header:OAuth'.
.Sp
Specify the method to submit authenticated requests to the service. By
default, add the access token as a header, such as: \*(L"Authorization:
Bearer \s-1TOKEN\*(R".\s0  Some services require that the header will be different,
i.e. \*(L"Authorization: OAuth \s-1TOKEN\*(R",\s0 for which case specify token_scheme
\&'auth\-header:Oauth'.
.Sp
To add the access token as a uri-parameter: 'uri\-query:oauth_token'
(in this case, the parameter name will be oauth_token)
Merge the access token inside a form body via 'form\-body:oauth_token'
.IP "user_agent => LWP::UserAgent object" 2
.IX Item "user_agent => LWP::UserAgent object"
.RE
.RS 4
.RE
.SS "Accessors"
.IX Subsection "Accessors"
.PD 0
.ie n .IP "$obj\->\fBbearer_token_scheme\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBbearer_token_scheme\fR()" 4
.IX Item "$obj->bearer_token_scheme()"
.ie n .IP "$obj\->\fBgrant_type\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBgrant_type\fR()" 4
.IX Item "$obj->grant_type()"
.ie n .IP "$obj\->\fBhd\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBhd\fR()" 4
.IX Item "$obj->hd()"
.ie n .IP "$obj\->\fBid\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBid\fR()" 4
.IX Item "$obj->id()"
.ie n .IP "$obj\->\fBscope\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBscope\fR()" 4
.IX Item "$obj->scope()"
.ie n .IP "$obj\->\fBsecret\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsecret\fR()" 4
.IX Item "$obj->secret()"
.ie n .IP "$obj\->\fBsite\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsite\fR()" 4
.IX Item "$obj->site()"
.ie n .IP "$obj\->\fBstate\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstate\fR()" 4
.IX Item "$obj->state()"
.ie n .IP "$obj\->\fBuser_agent\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBuser_agent\fR()" 4
.IX Item "$obj->user_agent()"
.PD
.SS "Actions"
.IX Subsection "Actions"
\fI\s-1HTTP\s0\fR
.IX Subsection "HTTP"
.ie n .IP "$obj\->\fBrequest\fR( $request, [$more] )" 4
.el .IP "\f(CW$obj\fR\->\fBrequest\fR( \f(CW$request\fR, [$more] )" 4
.IX Item "$obj->request( $request, [$more] )"
Send the \f(CW$request\fR (a HTTP::Request object) to the server, calling
LWP::UserAgent method \f(CW\*(C`request()\*(C'\fR.  This method will \s-1NOT\s0 add
security token information to the message.
.ie n .IP "$obj\->\fBrequest_auth\fR( $token, <$request | <$method, $uri, [$header, $content]>> )" 4
.el .IP "\f(CW$obj\fR\->\fBrequest_auth\fR( \f(CW$token\fR, <$request | <$method, \f(CW$uri\fR, [$header, \f(CW$content\fR]>> )" 4
.IX Item "$obj->request_auth( $token, <$request | <$method, $uri, [$header, $content]>> )"
Send an authorized request: the \f(CW$token\fR information gets included in the
request object.  Returns the answer (HTTP::Response).
.Sp
example:
.Sp
.Vb 2
\&  my $auth  = Net::OAuth2::Profile::WebServer\->new(...);
\&  my $token = $auth\->get_access_token($code, ...);
\&
\&  # possible...
\&  my $resp  = $auth\->request_auth($token, GET => $uri, $header, $content);
\&  my $resp  = $auth\->request_auth($token, $request);
\&
\&  # nicer (?)
\&  my $resp  = $token\->get($uri, $header, $content);
\&  my $resp  = $token\->request($request);
.Ve
.SS "Helpers"
.IX Subsection "Helpers"
.ie n .IP "$obj\->\fBadd_token\fR($request, $token, $scheme)" 4
.el .IP "\f(CW$obj\fR\->\fBadd_token\fR($request, \f(CW$token\fR, \f(CW$scheme\fR)" 4
.IX Item "$obj->add_token($request, $token, $scheme)"
Merge information from the \f(CW$token\fR into the \f(CW$request\fR following the the
bearer token \f(CW$scheme\fR.  Supported schemes:
.RS 4
.IP "\(bu" 4
auth-header or auth\-header:REALM
.Sp
Adds an \f(CW\*(C`Authorization\*(C'\fR header to requests.  The default \s-1REALM\s0 is \f(CW\*(C`OAuth\*(C'\fR,
but \f(CW\*(C`Bearer\*(C'\fR and \f(CW\*(C`OAuth2\*(C'\fR may work as well.
.IP "\(bu" 4
uri-query or uri\-query:FIELD
.Sp
Adds the token to the query parameter list.
The default \s-1FIELD\s0 name used is \f(CW\*(C`oauth_token\*(C'\fR.
.IP "\(bu" 4
form-body or form\-body:FIELD
.Sp
Adds the token to the www-form-urlencoded body of the request.
The default \s-1FIELD\s0 name used is \f(CW\*(C`oauth_token\*(C'\fR.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBbuild_request\fR($method, $uri, $params)" 4
.el .IP "\f(CW$obj\fR\->\fBbuild_request\fR($method, \f(CW$uri\fR, \f(CW$params\fR)" 4
.IX Item "$obj->build_request($method, $uri, $params)"
Returns a HTTP::Request object.  \f(CW$params\fR is an \s-1HASH\s0 or an ARRAY-of-PAIRS
of query parameters.
.ie n .IP "$obj\->\fBparams_from_response\fR($response, $reason)" 4
.el .IP "\f(CW$obj\fR\->\fBparams_from_response\fR($response, \f(CW$reason\fR)" 4
.IX Item "$obj->params_from_response($response, $reason)"
Decode information from the \f(CW$response\fR by the server (an HTTP::Response
object). The \f(CW$reason\fR for this answer is used in error messages.
.ie n .IP "$obj\->\fBsite_url\fR( <$uri|$path>, $params )" 4
.el .IP "\f(CW$obj\fR\->\fBsite_url\fR( <$uri|$path>, \f(CW$params\fR )" 4
.IX Item "$obj->site_url( <$uri|$path>, $params )"
Construct a \s-1URL\s0 to address the site.  When a full \f(CW$uri\fR is passed, it appends
the \f(CW$params\fR as query parameters.  When a \f(CW$path\fR is provided, it is relative
to new(site).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Net\-OAuth2 distribution version 0.66,
built on October 01, 2019. Website: \fIhttp://perl.overmeer.net/CPAN/\fR.
.SH "COPYRIGHTS"
.IX Header "COPYRIGHTS"
Copyrights 2013\-2019\-2018 on the perl code and the related documentation
 by [Mark Overmeer <markov@cpan.org>] for SURFnet bv, The Netherlands.  For other contributors see ChangeLog.
.PP
Copyrights 2011\-12 by Keith Grennan.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
