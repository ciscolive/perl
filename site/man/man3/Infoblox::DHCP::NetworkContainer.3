.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::NetworkContainer 3"
.TH Infoblox::DHCP::NetworkContainer 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::NetworkContainer \- DHCP Network Container object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A network can contain child networks. The network that contains the child network is called a network container.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\&  my $network = Infoblox::DHCP::NetworkContainer\->new(
\&                  network                         => $ipv4_subnet/prefix,               #Required, when creating a network container
\&                  auto_create_reversezone         => "true" | "false",                  #Optional / Default is "false"
\&                  comment                         => $string| undef,                    #Optional / Default is undefined
\&                  remove_subnets                  => "true" | "false",                  #Optional / Default is undefined
\&                  rir_organization                => $rir_org,                          #Optional / An Infoblox::Grid::RIR::Organization object
\&                  rir_registration_action         => \*(AqNONE\*(Aq | \*(AqCREATE\*(Aq | \*(AqMODIFY\*(Aq | \*(AqDELETE\*(Aq,  # Optional / write\-only
\&                  rir_registration_status         => \*(AqNOT_REGISTERED\*(Aq | \*(AqREGISTERED\*(Aq,   #Optional / Default is \*(AqNOT_REGISTERED\*(Aq
\&                  send_rir_request                => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                  #Optional / write\-only
\&                  delete_reason                   => $string,                           #Optional / write\-only
\&                                                                                        #Required only if \*(Aqrir_registration_action\*(Aq is specified as \*(AqDELETE\*(Aq
\&                  mgm_private                     => "true" | "false",                  #Optional / Default is "false"
\&                  network_container               => $ipv4_subnet/prefix,               #Optional / Default is "/"
\&                  network_view                    => $NetworkView,                      #Optional / Default is "default" network view
\&                  zone_associations               => [$zone1, $zone2, ... ] | undef,    #Optional / Default is an empty list
\&                  extattrs                        => { $string => $extattr, ... },      #Optional / Default is undefined
\&                  extensible_attributes           => { $string => $string | $num, $string => [ $string | $num, ... ], ... } #Required if \*(Aqrir_organization\*(Aq attribute is defined. Otherwise is optional
\&                  discovery_blackout_setting      => $blackout,                         #Optional
\&                  port_control_blackout_setting   => $blackout,                         #Optional
\&                  override_blackout_setting       => "true" | "false",                  #Optional / Default value is "false"
\&                  same_port_control_discovery_blackout  => "true" | "false",            #Optional / Default value is "false"
\&                  ipam_trap_settings               => $ipam_trap,                       #Optional / An Infoblox::Grid::SNMP::IPAMTrap object
\&                  override_ipam_trap_settings      => "true" | "false",                 #Optional / Default value is "false"
\&                  ipam_threshold_settings          => $ipam_threshold,                  #Optional / An Infoblox::Grid::SNMP::IPAMThreshold object
\&                  override_ipam_threshold_settings => "true" | "false",                 #Optional / Default value is "false"
\&                  ipam_email_addresses             => [$email1, $email2, ...],          #Optional / Default is an empty list
\&                  override_ipam_email_addresses    => "true" | "false",                 #Optional / Default value is "false"
\&
\&                  authority                       => "true" | "false"| undef,           #Optional / Default is undefined
\&                  bootfile                        => $filename | undef,                 #Optional / Default is undefined
\&                  bootserver                      => $ipv4addr | $fqdn | undef,         #Optional / Default is undefined
\&                  ddns_domainname                 => $string| undef,                    #Optional / Default is undefined
\&                  ddns_generate_hostname          => "true" | "false" | undef,          #Optional / Default is undefined
\&                  ddns_server_always_updates      => "true" | "false",                  #Optional / Default is "true"
\&                  ddns_ttl                        => $num,                              #Optional / Default is "0"
\&                  ddns_use_option81               => "true" | "false" | undef,          #Optional / Default is undefined
\&                  ddns_update_fixed_addresses     => "true" | "false" | undef,          #Optional / Default is undefined
\&                  deny_bootp                      => "true" | "false" | undef,          #Optional / Default is undefined
\&                  email_list                      => [ "admin\e@test.com",...] | undef,  #Optional / Default is undefined
\&                  enable_ddns                     => "true" | "false" | undef,          #Optional / Default is undefined
\&                  enable_dhcp_thresholds          => "true" | "false",                  #Optional / Default is "false"
\&                  enable_email_warnings           => "true" | "false",                  #Optional / Default is "false"
\&                  enable_snmp_warnings            => "true" | "false",                  #Optional / Default is "false"
\&                  high_water_mark                 => $number,                           #Optional / Default is "95"
\&                  high_water_mark_reset           => $number,                           #Optional / Default is "95"
\&                  ignore_dhcp_option_list_request => "true" | "false" | undef,          #Optional / Default is undefined
\&                  ignore_id                       => \*(AqNONE\*(Aq | \*(AqCLIENT\*(Aq | \*(AqMACADDR\*(Aq,     #Optional / Default is \*(AqNONE\*(Aq
\&                  ignore_mac_addresses            => [ "mac_addr", ... ] | undef        #Optional / Default is undefined
\&                  lease_scavenge_time             => $number,                           #Optional / Default is "\-1"
\&                  low_water_mark                  => $number,                           #Optional / Default is "0"
\&                  low_water_mark_reset            => $number,                           #Optional / Default is "0"
\&                  nextserver                      => $ipv4addr | $fqdn | undef,         #Optional / Default is undefined
\&                  options                         => [$Option1,$Option2,...],           #Optional / Default is empty list
\&                  override_ddns_domainname        => "true" | "false",                  #Optional / Default value is "false"
\&                  override_ddns_ttl               => "true" | "false",                  #Optional / Default value is "false"
\&                  override_lease_scavenge_time    => "true" | "false",                  #Optional / Default value is "false"
\&                  override_mgm_private            => "true" | "false",                  #Optional / Default value is "false"
\&                  override_update_dns_on_lease_renewal => "true" | "false",             #Optional / Default value is "false"
\&                  override_ignore_id              => "true" | "false",                  #Optional / Default value is "false"
\&                  pxe_lease_time                  => $num | undef,                      #Optional / Default is undefined
\&                  recycle_leases                  => "true" | "false" | undef,          #Optional / Default is undefined
\&                  update_dns_on_lease_renewal     => "true" | "false",                  #Optional / Default value is "false"
\&                  logic_filters                   => [ $filter_name | $filter_obj, ...], #Optional / Default is undefined
\&                  override_logic_filters          => "true\*(Aq | \*(Aqfalse",                   #Optional / Default value is "false"
\&                  subscribe_settings          => $subscribe_settings,                    #Optional / Default is undefined
\&                  override_subscribe_settings => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                       #Optional / Default is \*(Aqfalse\*(Aq
\&                  discovery_engine_type       => \*(AqNETMRI\*(Aq | \*(AqNETWORK_INSIGHT\*(Aq | \*(AqVDISCOVERY\*(Aq | \*(AqUNKNOWN\*(Aq | \*(AqNONE\*(Aq, #Optional / Default is \*(AqNONE\*(Aq
\&               );
.Ve
.PP
You cannot set both extattrs and extensible_attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a \s-1DHCP\s0 Network Container object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP\s0 Network Container object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Adding a network container.
\& #Construct an object
\& my $network_container = Infoblox::DHCP::NetworkContainer\->new(
\&        network => "20.0.0.0/8",
\& );
\&
\& # Submit for adding a network container
\& my $response = $session\->add( $network_container );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching \s-1DHCP\s0 Network Container objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP Network Container object:
\&
\&  network               \- Optional. The IP address and netmask of a network in CIDR format.
\&  network_container     \- Optional. The network container, in CIDR format, to which this network container belongs.
\&  network_view          \- Optional. The network view in which the network is located. By default, all network views are searched.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&  comment               \- Optional. A comment in string format.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\&  my  @result_array = $session\->get(
\&       object        => "Infoblox::DHCP::NetworkContainer",
\&       network       => "20.0.0.0/8",
\&       network_view  => "default"
\&  );
\&
\&  my  @result_array = $session\->get(
\&       object                => "Infoblox::DHCP::NetworkContainer",
\&       extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\&  );
\&
\&  my  @result_array = $session\->get(
\&       object  => "Infoblox::DHCP::NetworkContainer",
\&       comment => "my\-comment",
\&  );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 Network Container object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify comment.
\& $network_container\->comment("modified comment");
\& # Submit modification
\& my $response = $session\->modify( $network_container );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& remove_options \- Optional. A hash reference containing the following attributes:
\&
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | reason             \- Optional. The reason for removing the network container in string   |
\& |                      format with a maximum of 256 bytes.                                 |
\& |                      Used when \*(Aqrir_organization\*(Aq attribute has been defined.            |
\& | send_rir_request   \- Optional. Boolean flag that indicates whether the appliance should  |
\& |                      send an API or email request for Regional Internet Registry (RIR).  |
\& |                      Used when \*(Aqrir_organization\*(Aq attribute has been defined.            |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get the object under the same name
\&my  @result_array = $session\->get(
\&
\&       object        => "Infoblox::DHCP::NetworkContainer" ,
\&       network       => "20.0.0.0/8",
\&       network_view  => "default"
\&  );
\&
\& # Find the desired object in the retrieved list.
\& my $network_container = $result_array[0];
\&
\& # Submit for removal
\& my $response = $session\->remove(
\&     $network_container,
\&     remove_options => {\*(Aqreason\*(Aq => \*(AqMoved to B3\*(Aq, send_rir_request => \*(Aqtrue\*(Aq} );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for a \s-1DHCP\s0 Network Container object in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DHCP Network Container object:
\&
\&  network               \- Optional. The IP address and netmask of a network in CIDR format (regular expression).
\&  network_container     \- Optional. The network container, in CIDR format, to which this network container belongs.
\&  network_view          \- Optional. The network view in which the network is located. By default, all network views are searched.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&  comment               \- Optional. A comment in string format (regular expression).
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 6
\& # search for all DHCP Network Container objects
\&     my @retrieved_objs = $session\->search(
\&       object       => "Infoblox::DHCP::NetworkContainer",
\&       network      => \*(Aq20\e.0\e.0\e..*\*(Aq,
\&       network_view => "default"
\&     );
\&
\& # search network by comment
\&     my @retrieved_objs = $session\->search(
\&       object    => "Infoblox::DHCP::NetworkContainer",
\&       comment   => "my\-comment",
\&     );
\&
\& # search for all DHCP Network Container objects defining "Santa Clara" for "Site" extensible attribute
\&     my @retrieved_objs = $session\->search(
\&       object                => "Infoblox::DHCP::NetworkContainer",
\&       extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\&     );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 Network Container object.
.SS "authority( )"
.IX Subsection "authority( )"
.RS 4
Use this method to set or retrieve the authority of a \s-1DHCP\s0 Network Container object. This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the authority or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined, which indicates that this attribute inherit the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get authority
\& my $authority = $network_container\->authority()
\& # Modify authority
\& $network_container\->authority("true");
.Ve
.RE
.RS 4
.RE
.SS "auto_create_reversezone( )"
.IX Subsection "auto_create_reversezone( )"
.RS 4
Use this method to set the auto_create_reversezone flag of a \s-1DHCP\s0 Network Container object.
.Sp
Include the specified parameter to set the attribute value. This is a write-only attribute and cannot be retrieved after it is set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the auto_create_reversezone flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Modify auto_create_reversezone
\& $network_container\->auto_create_reversezone("true");
.Ve
.RE
.RS 4
.RE
.SS "bootfile( )"
.IX Subsection "bootfile( )"
.RS 4
Use this method to set or retrieve a bootfile attribute of a \s-1DHCP\s0 Network Container object. You can configure the \s-1DHCP\s0 server to support clients that use boot file name option in their \s-1DHCPREQUEST\s0 messages. This setting overrides the upper-level settings.
The default value is undefined, which indicates that this attribute inherits the upper-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::NetworkContainer\->\fBbootserver()\fR and Infoblox::DHCP::NetworkContainer\->\fBnextserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name, in string format, of the file that the client must download. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get bootfile
\& my $bootfile = $network_container\->bootfile();
\& # Modify bootfile
\& $network_container\->bootfile("bootfile1");
\& #Un\-override bootfile
\& $network_container\->bootfile(undef);
.Ve
.RE
.RS 4
.RE
.SS "bootserver( )"
.IX Subsection "bootserver( )"
.RS 4
Use this method to set or retrieve a bootserver attribute of a \s-1DHCP\s0 Network Container object. You can specify the name and/or \s-1IP\s0 address of the boot server that host needs to boot. This setting overrides the upper-level settings.
The default value is undefined, which indicates that this attribute inherits the upper-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::NetworkContainer\->\fBbootfile()\fR and Infoblox::DHCP::NetworkContainer\->\fBnextserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The boot server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A boot server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get bootserver
\& my $bootserver = $network_container\->bootserver();
\& # Modify bootserver
\& $network_container\->bootserver("abc.domain.com");
\& #Un\-override bootserver
\& $network_container\->bootserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment for a \s-1DHCP\s0 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter a descriptive comment for the network container in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get comment
\& my $comment = $network_container\->comment();
\& # Modify comment
\& $network_container\->comment("add a network");
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to set or retrieve cloud \s-1API\s0 related information for the Infoblox::DHCP::NetworkContainer object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a Infoblox::Grid::CloudAPI::Info object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get cloud_info
\& my $cloud_info = $network_view\->cloud_info();
\& # Modify cloud_info
\& $network_view\->cloud_info($cloud_info_object);
.Ve
.RE
.RS 4
.RE
.SS "ddns_domainname( )"
.IX Subsection "ddns_domainname( )"
.RS 4
Use this method to set or retrieve the ddns_domainname value of a \s-1DHCP\s0 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_domainname method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_ddns_domainname attribute to \*(L"false\*(R".
.Sp
Note that when ddns_domainname is set to a defined value and override_dddns_domainname is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); will set override_ddns_domainname to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); will result in override_ddns_domainname=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The dynamic \s-1DNS\s0 domain name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ddns_domainname
\& my $ddns_domainname = $network_container\->ddns_domainname();
\& #Modify ddns_domainname
\& $network_container\->ddns_domainname("test_domain.com");
.Ve
.RE
.RS 4
.RE
.SS "ddns_generate_hostname( )"
.IX Subsection "ddns_generate_hostname( )"
.RS 4
Use this method to set or retrieve the ddns_generate_hostname flag of a \s-1DHCP\s0 Network Container object. Enable this method to allow only the \s-1DHCP\s0 server for generating hostname. This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to generate hostname or \*(L"false\*(R" to deactivate/unset it.The default value for this field is undefined, which indicates that this attribute inherit the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ddns_generate_hostname
\& my $ddns_generate_hostname = $network_container\->ddns_generate_hostname()
\& # Modify ddns_generate_hostname
\& $network_container\->ddns_generate_hostname("true");
\& #Un\-override
\& $network_container\->ddns_generate_hostname(undef);
.Ve
.RE
.RS 4
.RE
.SS "ddns_server_always_updates( )"
.IX Subsection "ddns_server_always_updates( )"
.RS 4
Use this method to set or retrieve the ddns_server_always_updates flag of a \s-1DHCP\s0 Network Container object. Enable this method to allow only the \s-1DHCP\s0 server to update \s-1DNS\s0 regardless of the requests from the \s-1DHCP\s0 clients.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the flag that enables the \s-1DHCP\s0 server to always updates \s-1DNS\s0 or \*(L"false\*(R" to deactivate/unset it.The default value for this field is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get ddns_server_always_updates
\& my $ddns_server_always_updates = $network_container\->ddns_server_always_updates()
\& # Modify ddns_server_always_updates
\& $network_container\->ddns_server_always_updates("true");
.Ve
.RE
.RS 4
.RE
.SS "ddns_ttl( )"
.IX Subsection "ddns_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 update Time to Live (\s-1TTL\s0) value of a \s-1DHCP\s0 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_ttl method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_ddns_ttl attribute to \*(L"false\*(R".
.Sp
Note that when ddns_ttl is set to a defined value and override_dddns_ttl is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_ttl(12); \f(CW$object\fR\->override_ddns_ttl(\*(L"false\*(R"); will set override_ddns_ttl to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_ttl(\*(L"false\*(R"); \f(CW$object\fR\->ddns_ttl(12); will result in override_ddns_ttl=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration, in seconds, the update is cached. Zero indicates that the update is not cached. The default value is 0.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get DNS Update ttl
\& my $dns_ttl = $network_container\->ddns_ttl();
\& #Modify DNS Update ttl
\& $network_container\->ddns_ttl(1200);
.Ve
.RE
.RS 4
.RE
.SS "ddns_update_fixed_addresses( )"
.IX Subsection "ddns_update_fixed_addresses( )"
.RS 4
Use this method to set or retrieve the ddns_update_fixed_addresses flag of a \s-1DHCP\s0 Network Container object. By default, the \s-1DHCP\s0 server does not update \s-1DNS\s0 when it allocates a fixed address to a client. You can configure the \s-1DHCP\s0 server to update the A and \s-1PTR\s0 records of a client with a fixed address. When this feature is enabled and the \s-1DHCP\s0 server adds A and \s-1PTR\s0 records for a fixed address, the \s-1DHCP\s0 server never discards the records. This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the appliance to update \s-1DNS\s0 when it assigns a fixed address to a client or \*(L"false\*(R" to disable it. The default value for this field is undefined, which indicates that this attribute inherit the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ddns_update_fixed_addresses
\& my $ddns_update_fixed_addresses= $network_container\->ddns_update_fixed_addresses()
\& # Modify ddns_update_fixed_addresses
\& $network_container\->ddns_update_fixed_addresses("true");
\& #Un\-override
\& $network_container\->ddns_update_fixed_addresses(undef);
.Ve
.RE
.RS 4
.RE
.SS "ddns_use_option81( )"
.IX Subsection "ddns_use_option81( )"
.RS 4
Use this method to set or retrieve the ddns_use_option81 flag of a \s-1DHCP\s0 Network Container object. Enable this method to define the settings for option 81 at the network level. This setting overrides the member-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to Configure Support for Option 81 or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined, which indicates that this attribute inherit the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ddns_use_option81
\& my $ddns_use_option81 = $network_container\->ddns_use_option81()
\& # Modify ddns_use_option81
\& $network_container\->ddns_use_option81("true");
\& # un\-override ddns_use_option81
\& $network_container\->ddns_use_option81(undef);
.Ve
.RE
.RS 4
.RE
.SS "deny_bootp( )"
.IX Subsection "deny_bootp( )"
.RS 4
Use this method to set or retrieve the deny_bootp flag of a \s-1DHCP\s0 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the deny_bootp flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined, which indicates that this attribute inherit the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get deny_bootp
\& my $deny_bootp = $network_container\->deny_bootp();
\& #Modify deny_bootp
\& $network_container\->deny_bootp("true");
.Ve
.RE
.RS 4
.RE
.SS "discovery_basic_poll_setting( )"
.IX Subsection "discovery_basic_poll_setting( )"
.RS 4
Use this method to set or retrieve the discovery_basic_poll_setting value of a \s-1DHCP\s0 Network Container object.
.Sp
Include the specified parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is object of Infoblox::Grid::Discovery::BasicPollSettings.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get discovery_basic_poll_setting
\& my $discovery_basic_poll_setting = $network\->discovery_basic_poll_setting();
\& #Modify discovery_basic_poll_setting
\& $network\->discovery_basic_poll_setting($poll_setting);
.Ve
.RE
.RS 4
.RE
.SS "discovery_member( )"
.IX Subsection "discovery_member( )"
.RS 4
Use this method to set or retrieve the discovery_member value of a \s-1DHCP\s0 Network Container object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The discovery member name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get discovery_member
\& my $discovery_member = $network\->discovery_member();
\& #Modify discovery_member
\& $network\->discovery_member("test.localdomain");
.Ve
.RE
.RS 4
.RE
.SS "discover_now_status( )"
.IX Subsection "discover_now_status( )"
.RS 4
Use this method to retrieve the current discovery status. This attribute is read-only.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1COMPLETE\s0', '\s-1FAILED\s0', '\s-1NONE\s0', '\s-1PENDING\s0' or '\s-1RUNNING\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discover_now_status
\& my $discover_now_status = $network\->discover_now_status();
.Ve
.RE
.RS 4
.RE
.SS "discovery_blackout_setting( )"
.IX Subsection "discovery_blackout_setting( )"
.RS 4
Use this method to set or retrieve the discovery blackout setting.
.Sp
Setting this method to a defined value implicitly sets the override_blackout_setting method to \*(L"true\*(R". If port_control_blackout_setting is undefined, setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_blackout_setting attribute to \*(L"false\*(R".
.Sp
Note that when discovery_blackout_setting is set to a defined value and override_blackout_setting is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$network\fR\->discovery_blackout_setting($blackout); \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); will set override_blackout_setting to \*(L"false\*(R", and the sequence \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); \f(CW$network\fR\->discovery_blackout_setting($blackout); will result in override_blackout_setting=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::Properties::BlackoutSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get discovery_blackout_setting
\& my $discovery_blackout_setting = $network\->discovery_blackout_setting();
\& #Modify discovery_blackout_setting
\& $network\->discovery_blackout_setting($blackout);
.Ve
.RE
.RS 4
.RE
.SS "discovery_engine_type( )"
.IX Subsection "discovery_engine_type( )"
.RS 4
Use this method to retrieve the \s-1DHCP\s0 Network Container container discovery engine type. This attribute is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1NETMRI\s0', '\s-1NETWORK_INSIGHT\s0', '\s-1VDISCOVERY\s0', '\s-1UNKNOWN\s0' or '\s-1NONE\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovery_engine_type
\& my $discovery_engine_type = $network_container\->discovery_engine_type();
.Ve
.RE
.RS 4
.RE
.SS "email_list( )"
.IX Subsection "email_list( )"
.RS 4
Use this method to set or retrieve the e\-mail lists to which the appliance sends threshold e\-mail messages.
.Sp
If you enter e\-mail addresses in the email_list, then the appliance sends \s-1DHCP\s0 threshold alerts to the e\-mail addresses.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains string objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get email_list
\& my @email_list = $network_container\->email_list();
\& #Modify email_list
\& $network_container\->email_list( [ "admin\e@test.com" ] );
.Ve
.RE
.RS 4
.RE
.SS "enable_ddns( )"
.IX Subsection "enable_ddns( )"
.RS 4
Use this method to set or retrieve the dynamic \s-1DNS\s0 updates flag of a \s-1DHCP\s0 Network Container object. The \s-1DHCP\s0 server can send \s-1DDNS\s0 updates to \s-1DNS\s0 servers in the same grid and to external \s-1DNS\s0 servers. This setting overrides the member-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the dynamic \s-1DNS\s0 updates flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined, which indicates that this attribute inherit the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get enable_ddns
\& my $enable_ddns = $network_container\->enable_ddns()
\& # Modify enable_ddns
\& $network_container\->enable_ddns("true");
\& # Un\-override enable_ddns
\& $network_container\->enable_ddns(undef);
.Ve
.RE
.RS 4
.RE
.SS "enable_dhcp_thresholds( )"
.IX Subsection "enable_dhcp_thresholds( )"
.RS 4
Use this method to set or retrieve \s-1DHCP\s0 thresholds at the network container level. These thresholds are the high and low watermarks. If a \s-1DHCP\s0 Network Container usage goes above or below these percentage values, the Infoblox appliance generates a syslog message and sends an \s-1SNMP\s0 notification.
.Sp
Enable this flag to set \s-1DHCP\s0 thresholds values.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_dhcp_thresholds flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_dhcp_thresholds
\& my $enable_dhcp_thresholds = $network_container\->enable_dhcp_thresholds();
\& #Modify enable_dhcp_thresholds
\& $network_container\->enable_dhcp_thresholds("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_email_warnings( )"
.IX Subsection "enable_email_warnings( )"
.RS 4
Use this method to send \s-1DHCP\s0 threshold warnings through e\-mail.
.Sp
Enable this flag if you want the appliance to send \s-1DHCP\s0 threshold warnings to the \*(L"email_list\*(R" provided when \s-1DHCP\s0 threshold is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_email_warnings flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_email_warnings
\& my $enable_email_warnings = $network_container\->enable_email_warnings();
\& #Modify enable_email_warnings
\& $network_container\->enable_email_warnings("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_discovery( )"
.IX Subsection "enable_discovery( )"
.RS 4
Use this method to set or retrieve the enable_discovery value of a \s-1DHCP\s0 Network Container object.  This setting overrides the member-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_enable_discovery method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_enable_discovery attribute to \*(L"false\*(R".
.Sp
Enable this flag if you want to set discovery for this object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_discovery flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_discovery
\& my $enable_discovery = $network\->enable_discovery();
\& #Modify enable_discovery
\& $network\->enable_discovery("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_immediate_discovery( )"
.IX Subsection "enable_immediate_discovery( )"
.RS 4
Use this method to set or retrieve enable_immediate_discovery value of a \s-1DHCP\s0 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_immediate_discovery flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_immediate_discovery
\& my $enable_immediate_discovery = $network\->enable_immediate_discovery();
\& #Modify enable_immediate_discovery
\& $network\->enable_immediate_discovery("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_snmp_warnings( )"
.IX Subsection "enable_snmp_warnings( )"
.RS 4
Use this method to send \s-1DHCP\s0 threshold warnings through \s-1SNMP.\s0
.Sp
If the flag is enabled, then the appliance sends \s-1DHCP\s0 threshold warnings through \s-1SNMP\s0 messages when \s-1DHCP\s0 threshold is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_snmp_warnings flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_snmp_warnings
\& my $enable_snmp_warnings = $network_container\->enable_snmp_warnings();
\& #Modify enable_snmp_warnings
\& $network_container\->enable_snmp_warnings("false");
.Ve
.RE
.RS 4
.RE
.SS "endpoint_sources( )"
.IX Subsection "endpoint_sources( )"
.RS 4
Use this method to retrieve the list of endpoints that provide object data. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an array of Infoblox::CiscoISE::Endpoint objects.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get endpoint_sources value
\& my $endpoint_sources = $object\->endpoint_sources();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Network Container object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $network_container\->extattrs();
\& #Modify extattrs
\& $network_container\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Network Container object
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $network_container\->extensible_attributes();
\& #Modify extensible attributes
\& $network_container\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "high_water_mark( )"
.IX Subsection "high_water_mark( )"
.RS 4
Use this method to set the percentage value for \s-1DHCP\s0 Network Container usage above which the Infoblox appliance generates a syslog message and sends a warning.
.Sp
When the percentage of allocated addresses in a \s-1DHCP\s0 Network Container exceeds the high watermark, the appliance generates a syslog message and sends a warning. Default value for this option is 95.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is in sting format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get high_water_mark
\& my $high_water_mark = $network_container\->high_water_mark();
\& #Modify high_water_mark
\& $network_container\->high_water_mark("80");
.Ve
.RE
.RS 4
.RE
.SS "high_water_mark_reset( )"
.IX Subsection "high_water_mark_reset( )"
.RS 4
Use this method to set or retrieve the high_water_mark_reset value. If the percentage of allocated addresses drops below this value, a corresponding \s-1SNMP\s0 trap is reset.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The high watermark reset value must be lower than the high watermark value. The default value is 95.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get high_water_mark_reset
\& my $high_water_mark_reset = $network_container\->high_water_mark_reset();
\& #Modify high_water_mark_reset
\& $network_container\->high_water_mark_reset(70);
.Ve
.RE
.RS 4
.RE
.SS "ignore_id( )"
.IX Subsection "ignore_id( )"
.RS 4
Use this method to set or retrieve the ignore_id type of a \s-1DHCP\s0 Network Container object. Indicates whether the appliance will ignore \s-1DHCP\s0 client IDs or \s-1MAC\s0 addresses. This setting overrides the upper-level settings.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1NONE\s0', '\s-1CLIENT\s0', or '\s-1MACADDR\s0'. The default is '\s-1NONE\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get attribute value
\& $value = $network_container\->ignore_id();
\& # Modify attribute value
\& $network_container\->ignore_id(\*(AqCLIENT\*(Aq);
\& #Un\-override ignore_id
\& $network_container\->ignore_id(undef);
.Ve
.RE
.RS 4
.RE
.SS "ignore_mac_addresses( )"
.IX Subsection "ignore_mac_addresses( )"
.RS 4
Use this method to set or retrieve the ignore_mac_addresses list of a \s-1DHCP\s0 Network Container object. A list of \s-1MAC\s0 addresses the appliance will ignore. This setting overrides the upper-level settings.
.Sp
If you enter \s-1MAC\s0 addresses in the ignore_mac_addresses, then the appliance will ignore them. If you enter empty array, then the appliance will ignore any \s-1MAC\s0 address.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains string objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& $value = $network_container\->ignore_mac_addresses();
\& # Modify attribute value
\& $network_container\->ignore_mac_addresses(["11::11::11::11::11::11"]);
.Ve
.RE
.RS 4
.RE
.SS "ignore_dhcp_option_list_request( )"
.IX Subsection "ignore_dhcp_option_list_request( )"
.RS 4
Use this method to set or retrieve the ignore_dhcp_option_list_request flag of a \s-1DHCP\s0 Network Container object. If this flag is set to false, the appliance returns all the defined \s-1DHCP\s0 options to the client. This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the ignore_dhcp_option_list_request flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined, which indicates that this attribute inherits the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ignore_dhcp_option_list_request
\& my $ignore_dhcp_option_list_request = $network_container\->ignore_dhcp_option_list_request();
\& # Modify ignore_dhcp_option_list_request
\& $network_container\->ignore_dhcp_option_list_request("true");
\& #Do not override ignore_dhcp_option_list_request
\& $network_container\->ignore_dhcp_option_list_request(undef);
.Ve
.RE
.RS 4
.RE
.SS "ipam_email_addresses( )"
.IX Subsection "ipam_email_addresses( )"
.RS 4
Use this method to set or retrieve a list of \s-1IPAM\s0 Utilization email addresses.
.Sp
Setting this method to a defined value implicitly sets the override_ipam_email_addresses method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_ipam_email_addresses attribute to \*(L"false\*(R".
.Sp
Note that when ipam_email_addresses is set to a defined value and override_ipam_email_addresses is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ipam_email_addresses(['admin@infoblox.com']); \f(CW$object\fR\->override_ipam_email_addresses(\*(L"false\*(R"); will set override_ipam_email_addresses to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ipam_email_addresses(\*(L"false\*(R"); \f(CW$object\fR\->ipam_email_addresses(['admin@infoblox.com']); will result in override_ipam_email_addresses=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains email addresses in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipam_email_addresses
\& my $ipam_email_addresses = $network_container\->ipam_email_addresses();
\& #Modify ipam_email_addresses
\& $network_container\->ipam_email_addresses($ipam_email_addresses);
.Ve
.RE
.RS 4
.RE
.SS "ipam_trap_settings( )"
.IX Subsection "ipam_trap_settings( )"
.RS 4
Use this method to set or retrieve \s-1IPAM\s0 Utilization \s-1SNMP\s0 Trap settings.
.Sp
Setting this method to a defined value implicitly sets the override_ipam_trap_settings method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_ipam_trap_settings attribute to \*(L"false\*(R".
.Sp
Note that when ipam_trap_settings is set to a defined value and override_ipam_trap_settings is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ipam_trap_settings($ipam_trap); \f(CW$object\fR\->override_ipam_trap_settings(\*(L"false\*(R"); will set override_ipam_trap_settings to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ipam_trap_settings(\*(L"false\*(R"); \f(CW$object\fR\->ipam_trap_settings($ipam_trap); will result in override_ipam_trap_settings=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::SNMP::IPAMTrap object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipam_trap_settings
\& my $ipam_trap_settings = $network_container\->ipam_trap_settings();
\& #Modify ipam_trap_settings
\& $network_container\->ipam_trap_settings($ipam_trap_settings);
.Ve
.RE
.RS 4
.RE
.SS "ipam_threshold_settings( )"
.IX Subsection "ipam_threshold_settings( )"
.RS 4
Use this method to set or retrieve \s-1IPAM\s0 Utilization \s-1SNMP\s0 Threshold settings.
.Sp
Setting this method to a defined value implicitly sets the override_ipam_threshold_settings method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_ipam_threshold_settings attribute to \*(L"false\*(R".
.Sp
Note that when ipam_threshold_settings is set to a defined value and override_ipam_threshold_settings is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ipam_threshold_settings($ipam_threshold_settings); \f(CW$object\fR\->override_ipam_trap_settings(\*(L"false\*(R"); will set override_ipam_threshold_settings to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ipam_threshold_settings(\*(L"false\*(R"); \f(CW$object\fR\->ipam_threshold_settings($ipam_threshold_settings); will result in override_ipam_threshold_settings=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::SNMP::IPAMThreashold object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipam_threshold_settings
\& my $ipam_threshold_settings = $network_container\->ipam_threshold_settings();
\& #Modify ipam_threshold_settings
\& $network_container\->ipam_threshold_settings($ipam_threshold_settings);
.Ve
.RE
.RS 4
.RE
.SS "mgm_private( )"
.IX Subsection "mgm_private( )"
.RS 4
Use this method to set or retrieve the flag that controls whether the object should be synced to the \s-1MGM\s0 or not.
.Sp
Setting this method to a defined value implicitly sets the override_blackout_setting method to \*(L"true\*(R". If discovery_blackout_setting is undefined, setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_blackout_setting attribute to \*(L"false\*(R".
.Sp
Note that when mgm_private is set to a defined value and override_mgm_private is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$network\fR\->mgm_private(\*(L"true\*(R"); \f(CW$network\fR\->override_mgm_private(\*(L"false\*(R"); will set override_mgm_private to \*(L"false\*(R", and the sequence \f(CW$network\fR\->override_mgm_private(\*(L"false\*(R"); \f(CW$network\fR\->mgm_private(\*(L"true\*(R"); will result in override_mgm_private=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable synchronization of the managed Grid with the \s-1MGM\s0 or 'false' to forbid it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.Sp
Note that this member is loaded on on-demand basis, so to retrieve the value the object must have been retrieved from the session first.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get mgm_private value
\& my $value = $object\->mgm_private();
\&
\& #Modify mgm_private value
\& $object\->mgm_private(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "mgm_private_overridable( )"
.IX Subsection "mgm_private_overridable( )"
.RS 4
Use this method to retrieve the flag that indicates whether the overriding of 'mgm_private' flag is allowed or not. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.Sp
Note that this member is loaded on on-demand basis, so to retrieve the value the object must have been retrieved from the session first.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get mgm_private_overridable value
\& my $value = $object\->mgm_private_overridable();
.Ve
.RE
.RS 4
.RE
.SS "ms_ad_user_data( )"
.IX Subsection "ms_ad_user_data( )"
.RS 4
Use this method to retrieve Microsoft Active Directory users related information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::MSServer::AdUser::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_ad_user_data
\& my $ms_ad_user_data = $network_container\->ms_ad_user_data();
.Ve
.RE
.RS 4
.RE
.SS "lease_scavenge_time( )"
.IX Subsection "lease_scavenge_time( )"
.RS 4
Use this method to set or retrieve the lease_scavenge_time value of a \s-1DHCP\s0 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_lease_scavenge_time method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_lease_scavenge_time attribute to \*(L"false\*(R".
.Sp
Note that when lease_scavenge_time is set to a defined value and override_lease_scavenge_time is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->lease_scavenge_time(604800); \f(CW$object\fR\->override_lease_scavenge_time(\*(L"false\*(R"); will set override_lease_scavenge_time to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_lease_scavenge_time(\*(L"false\*(R"); \f(CW$object\fR\->lease_scavenge_time(604800); will result in override_lease_scavenge_time=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An integer that specifies the period of time, in seconds, that free and backup leases remain in the database before they are automatically deleted. To disable lease scavenging, set the parameter to \-1. The minimum positive value must be greater than 86400 seconds (1 day). The default value of this parameter is \-1, which means that lease scavenging is disabled.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lease_scavenge_time
\& my $lease_scavenge = $network_container\->lease_scavenge_time();
\& #Modify lease_scavenge_time
\& $network_container\->lease_scavenge_time(30 * 24 * 60 * 60);
.Ve
.RE
.RS 4
.RE
.SS "logic_filters( )"
.IX Subsection "logic_filters( )"
.RS 4
Use this method to set or retrieve all the logic (ordered) filters associated with the \s-1DHCP\s0 Network Container.
.Sp
Filters are used to screen address assignments in a \s-1DHCP\s0 Network Container if the addresses are to be assigned to specific hosts.
.Sp
Setting this method to a defined value implicitly sets the override_logic_filters method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_logic_filters attribute to \*(L"false\*(R".
.Sp
Note that when logic_filters is set to a defined value and override_dlogic_filters is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->logic_filters($filters); \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); will set override_logic_filters to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); \f(CW$object\fR\->logic_filters($filters); will result in override_logic_filters=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains either the Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC, Infoblox::DHCP::Filter::Option objects or the names of the corresponding filters. The filters in the list must satisfy the following conditions:
.RS 4
.IP "Filter name must be globally unique." 4
.IX Item "Filter name must be globally unique."
.PD 0
.IP "Filters without expressions must be at the end of the list." 4
.IX Item "Filters without expressions must be at the end of the list."
.IP "The filters should not be disabled." 4
.IX Item "The filters should not be disabled."
.RE
.RS 4
.PD
.Sp
The default value of the parameter is undefined.
.RE
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get logic_filters
\& my $ref_logic_filters = $network_container\->logic_filters();
\& #Modify logic_filters
\& $network_container\->logic_filters(["filter_1","filter_2",$exl1]); #$exl1 is an Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC or Infoblox::DHCP::Filter::Option object.
.Ve
.RE
.RS 4
.RE
.SS "low_water_mark( )"
.IX Subsection "low_water_mark( )"
.RS 4
Use this method to set the percentage value for \s-1DHCP\s0 Network Container usage below which the Infoblox appliance generates a syslog message and sends a warning.
.Sp
When the percentage of allocated addresses in a \s-1DHCP\s0 Network Container goes below the low watermark, the appliance generates a syslog message and sends a warning. Default value for this option is 0.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get low_water_mark
\& my $low_water_mark = $network_container\->low_water_mark();
\& #Modify low_water_mark
\& $network_container\->low_water_mark("10");
.Ve
.RE
.RS 4
.RE
.SS "low_water_mark_reset( )"
.IX Subsection "low_water_mark_reset( )"
.RS 4
Use this method to set or retrieve the low_water_mark_reset value. If the percentage of allocated addresses exceeds this value, a corresponding \s-1SNMP\s0 trap is reset.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number that specifies the percentage of allocated addresses. The range is from 1 to 100.  The low watermark reset value must be higher than the low watermark value. The default low watermark reset number is 0.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get low_water_mark_reset
\& my $low_water_mark_reset = $network_container\->low_water_mark_reset();
\& #Modify low_water_mark_reset
\& $network_container\->low_water_mark_reset(10);
.Ve
.RE
.RS 4
.RE
.SS "network( )"
.IX Subsection "network( )"
.RS 4
Use this method to retrieve the network attribute of a \s-1DHCP\s0 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the address and netmask of the network in \s-1CIDR\s0 format (example: 10.0.0.0/8).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network
\& my $network = $network_container\->network();
.Ve
.RE
.RS 4
.RE
.SS "override_blackout_setting( )"
.IX Subsection "override_blackout_setting( )"
.RS 4
The override_blackout_setting attribute controls whether the discovery_blackout_setting and port_control_blackout_setting values in the object are used, instead of the Grid default.
.Sp
The override_blackout_setting attribute can be specified explicitly. It is also set implicitly when discovery_blackout_setting or port_control_blackout_setting is set to a defined value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_blackout_setting flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $network\->override_blackout_setting();
\& # Modify attribute value
\& $network\->override_blackout_setting(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "nextserver( )"
.IX Subsection "nextserver( )"
.RS 4
Use this method to set or retrieve the nextserver attribute of a \s-1DHCP\s0 Network Container object. You can specify the name and/or \s-1IP\s0 address of the next server that the host needs to boot. This setting overrides the upper-level settings.
The default value is undefined, which indicates that this attribute inherits the upper-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::NetworkContainer\->\fBbootfile()\fR and Infoblox::DHCP::NetworkContainer\->\fBbootserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The next server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A next server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get nextserver
\& my $nextserver = $network_container\->nextserver();
\& # Modify nextserver
\& $network_container\->nextserver("blue.domain.com");
\& #Un\-override nextserver
\& $network_container\->nextserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "options( )"
.IX Subsection "options( )"
.RS 4
Use this method to set or retrieve the options value of a member \s-1DHCP\s0 server. \s-1DHCP\s0 options provide network configuration
settings and various services available on the network for \s-1DHCP.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DHCP::Option objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Get options
\& my $options = $network_container\->options();
\& #Modify options
\& my $option1 = Infoblox::DHCP::Option\->new(
\&     name => "lease\-time",
\&     value => 50
\& );
\&
\& $network_container\->options([$option1]);
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_domainname( )"
.IX Subsection "override_ddns_domainname( )"
.RS 4
The override_ddns_domainname attribute controls whether the ddns_domainname value in the \s-1DHCP\s0 Network Container is used, instead of the Grid default.
.Sp
The override_ddns_domainname attribute can be specified explicitly. It is also set implicitly when ddns_domainname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ddns_domainname. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ddns_domainname.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_domainname
\&    my $override_ddns_domainname=$network_container\->override_ddns_domainname( );
\&    #Modifying override_ddns_domainname
\&    $network_container\->override_ddns_domainname("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_ttl( )"
.IX Subsection "override_ddns_ttl( )"
.RS 4
The override_ddns_ttl attribute controls whether the ddns_ttl value in the \s-1DHCP\s0 Network Container is used, instead of the Grid default.
.Sp
The override_ddns_ttl attribute can be specified explicitly. It is also set implicitly when ddns_ttl is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ddns_ttl. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ddns_ttl.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_ttl
\&    my $override_ddns_ttl=$network_container\->override_ddns_ttl( );
\&    #Modifying override_ddns_ttl
\&    $network_container\->override_ddns_ttl("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ignore_id( )"
.IX Subsection "override_ignore_id( )"
.RS 4
The override_ignore_id controls whether the ignore_id in the \s-1DHCP\s0 Network Container is used, instead of the upper-level default.
.Sp
The override_ignore_id can be specified explicitly. It is also set implicitly when ignore_id is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ignore_id and ignore_mac_addresses. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ignore_id and ignore_mac_addresses.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get attrubute value
\&    my $value=$network_container\->override_ignore_id();
\&    #Modifying attribute value
\&    $network_container\->override_ignore_id(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_ipam_email_addresses( )"
.IX Subsection "override_ipam_email_addresses( )"
.RS 4
The override_ipam_email_addresses controls whether the ipam_email_addresses in the \s-1DHCP\s0 network container is used, instead of the upper-level default.
.Sp
The override_ipam_email_addresses can be specified explicitly. It is also set implicitly when ipam_email_addresses is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ipam_email_addresses. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ipam_email_addresses.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get attrubute value
\&    my $value=$network_container\->override_ipam_email_addresses();
\&    #Modifying attribute value
\&    $network_container\->override_ipam_email_addresses(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_ipam_threshold_settings( )"
.IX Subsection "override_ipam_threshold_settings( )"
.RS 4
The override_ipam_threshold_settings controls whether the ipam_threshold_settings in the \s-1DHCP\s0 network container is used, instead of the upper-level default.
.Sp
The override_ipam_threshold_settings can be specified explicitly. It is also set implicitly when ipam_threshold_settings is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ipam_threshold_settings. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ipam_threshold_settings.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get attrubute value
\&    my $value=$network_container\->override_ipam_threshold_settings();
\&    #Modifying attribute value
\&    $network_container\->override_ipam_threshold_settings(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_ipam_trap_settings( )"
.IX Subsection "override_ipam_trap_settings( )"
.RS 4
The override_ipam_trap_settings controls whether the ipam_trap_settings in the \s-1DHCP\s0 network container is used, instead of the upper-level default.
.Sp
The override_ipam_trap_settings can be specified explicitly. It is also set implicitly when ipam_trap_settings is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ipam_trap_settings. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ipam_trap_settings.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get attrubute value
\&    my $value=$network_container\->override_ipam_trap_settings();
\&    #Modifying attribute value
\&    $network_container\->override_ipam_trap_settings(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_logic_filters( )"
.IX Subsection "override_logic_filters( )"
.RS 4
The override_logic_filters attribute controls whether the logic_filters value of the \s-1DHCP\s0 Network Container is used, instead of the Grid default.
.Sp
The override_logic_filters attribute can be specified explicitly. It is also set implicitly when logic_filters is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for logic_filters. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for logic_filters.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_logic_filters
\& my $override_logic_filters=$network_container\->override_logic_filters( );
\& #Modifying override_logic_filters
\& $network_container\->override_logic_filters("true");
.Ve
.RE
.RS 4
.RE
.SS "override_lease_scavenge_time( )"
.IX Subsection "override_lease_scavenge_time( )"
.RS 4
The override_lease_scavenge_time attribute controls whether the lease_scavenge_time value in the \s-1DHCP\s0 Network Container is used, instead of the upper-level default.
.Sp
The override_lease_scavenge_time attribute can be specified explicitly. It is also set implicitly when lease_scavenge_time is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for lease_scavenge_time. Set the parameter to \*(L"false\*(R" to inherit the setting for lease_scavenge_time from the upper level.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_lease_scavenge_time
\&    my $override_lease_scavenge_time=$network_container\->override_lease_scavenge_time( );
\&    #Modifying override_lease_scavenge_time
\&    $network_container\->override_lease_scavenge_time("true");
.Ve
.RE
.RS 4
.RE
.SS "override_mgm_private( )"
.IX Subsection "override_mgm_private( )"
.RS 4
The override_mgm_private attribute controls whether the mgm_private value in the object is used, instead of the parent-level default.
.Sp
The override_mgm_private attribute can be specified explicitly. It is also set implicitly when mgm_private is set to a defined value.
.Sp
Note that setting override_mgm_private to 'false' sets the original 'mgm_private' value to 'false'.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to 'true' to override the parent-level setting for mgm_private. Set the parameter to 'false' to inherit the parent-level setting for mgm_private.
.Sp
The default value of this parameter is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.Sp
Note that this member is loaded on on-demand basis, so to retrieve the value the object must have been retrieved from the session first.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get override_mgm_private value
\& my $value = $object\->override_mgm_private( );
\&
\& #Modify override_mgm_private value
\& $object\->override_mgm_private(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_subscribe_settings( )"
.IX Subsection "override_subscribe_settings( )"
.RS 4
The override_subscribe_settings attribute controls whether the subscribe_settings method values of the member are used, instead of the Grid default.
.Sp
The override_subscribe_settings attribute can be specified explicitly. It is also set implicitly when subscribe_settings is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for subscribe_settings. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for subscribe_settings.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_subscribe_settings value
\& my $override_subscribe_settings = $object\->override_subscribe_settings( );
\& #Modify override_subscribe_settings value
\& $object\->override_subscribe_settings("true");
.Ve
.RE
.RS 4
.RE
.SS "override_update_dns_on_lease_renewal( )"
.IX Subsection "override_update_dns_on_lease_renewal( )"
.RS 4
The override_update_dns_on_lease_renewal attribute controls whether the update_dns_on_lease_renewal value in the \s-1DHCP\s0 Network is used, instead of the Grid default.
.Sp
The override_update_dns_on_lease_renewal attribute can be specified explicitly. It is also set implicitly when update_dns_on_lease_renewal is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for update_dns_on_lease_renewal. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for update_dns_on_lease_renewal.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_update_dns_on_lease_renewal
\&    my $override_update_dns_on_lease_renewal=$network\->override_update_dns_on_lease_renewal( );
\&    #Modifying override_update_dns_on_lease_renewal
\&    $network\->override_update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SS "port_control_blackout_setting"
.IX Subsection "port_control_blackout_setting"
.RS 4
Use this method to set or retrieve the port control blackout setting.
.Sp
Setting this method to a defined value implicitly sets the override_blackout_setting method to \*(L"true\*(R". If discovery_blackout_setting is undefined, setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_blackout_setting attribute to \*(L"false\*(R".
.Sp
Note that when port_control_blackout_setting is set to a defined value and override_blackout_setting is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$network\fR\->port_control_blackout_setting($blackout); \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); will set override_blackout_setting to \*(L"false\*(R", and the sequence \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); \f(CW$network\fR\->port_control_blackout_setting($blackout); will result in override_blackout_setting=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::Properties::BlackoutSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get port_control_blackout_setting
\& my $port_control_blackout_setting = $network\->port_control_blackout_setting();
\& #Modify port_control_blackout_setting
\& $network\->port_control_blackout_setting($blackout);
.Ve
.RE
.RS 4
.RE
.SS "pxe_lease_time( )"
.IX Subsection "pxe_lease_time( )"
.RS 4
Use this method to set or retrieve the \s-1PXE\s0 lease time value of a \s-1DHCP\s0 Network Container object. Some hosts use \s-1PXE\s0 (Preboot Execution Environment) to boot remotely from a server. To better manage your \s-1IP\s0 resources, set a different lease time for \s-1PXE\s0 boot requests. You can configure the \s-1DHCP\s0 server to allocate an \s-1IP\s0 address with a shorter lease time to hosts that send \s-1PXE\s0 boot requests, so \s-1IP\s0 addresses are not leased longer than necessary. This setting overrides the upper-level settings.
The default value is undefined, which indicates that this attribute inherits the upper-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration, in seconds, that the update is cached. Zero indicates that the update is not cached. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get PXE Lease Time
\& my $pxe_lease_time = $network_container\->pxe_lease_time();
\& #Modify PXE Lease Time
\& $network_container\->pxe_lease_time(1100);
\& #Un\-override PXE Lease Time
\& $network_container\->pxe_lease_time(undef);
.Ve
.RE
.RS 4
.RE
.SS "recycle_leases( )"
.IX Subsection "recycle_leases( )"
.RS 4
Use this method to set or retrieve the recycle_leases flag at the network level.
.Sp
If the flag is enabled, the leases are kept in the recycle bin until one week after expiration. When the flag is disabled, the leases are irrecoverably deleted.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the recycle_leases flag or \*(L"false\*(R" to disable it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get recycle_leases
\& my $recycle_leases = $network\->recycle_leases();
\& #Modify recycle_leases
\& $network\->recycle_leases("false");
.Ve
.RE
.RS 4
.RE
.SS "remove_subnets( )"
.IX Subsection "remove_subnets( )"
.RS 4
Use this method to set or retrieve the remove_subnets flag of a \s-1DHCP\s0 Network Container object.
.Sp
You can remove the network, but keep all subnets under it if this flag is set to false. This flag is only intended as an option when removing \s-1DHCP\s0 Network Container objects. It is not retrieved or used for any other operation.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"false\*(R" to keep the subnets or \*(L"true\*(R" to remove them. The default value is undefined, which is to remove all subnets.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Set remove_subnets before submitting for removal
\& $network_container\->remove_subnets("false");
\& #Remove the container keeping the subnets
\& $session\->remove($network_container);
.Ve
.RE
.RS 4
.RE
.SS "network_container( )"
.IX Subsection "network_container( )"
.RS 4
Use this method to set or retrieve the network container of a \s-1DHCP\s0 Network Container object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the \s-1IP\s0 address and netmask of a network in \s-1CIDR\s0 format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network container
\& my $network_container = $network\->network_container();
\& #Modify network container
\& $network\->network_container("50.0.0.0/8");
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the network view of the \s-1DHCP\s0 network container.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" network view, which means the network is in the default network view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a defined Infoblox::DHCP::View object. The default network view value is the system-defined default network view object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network view
\& my $nview = $network_container\->network_view();
\& #Modify network view, with an Infoblox::DHCP::View object
\& $network_container\->network_view($nview);
.Ve
.RE
.RS 4
.RE
.SS "next_available_network( )"
.IX Subsection "next_available_network( )"
.RS 4
Use this method to retrieve the next available network(s) in the network container. Note that to use this method, the object \s-1MUST\s0 be retrieved through a get or search call, or created with an add call.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The method accepts the following parameters:
.Sp
.Vb 3
\&  cidr \- (required) The CIDR of the requested networks. It must be a value between 1 and 32, inclusive.
\&  requested_num \- (optional) The number of networks requested. It must be a value between 1 and 20, inclusive.
\&  excluded \- (optional) aA reference to an array of networks to be excluded from the results.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns the next available network(s) in the network container. If requested_num is not specified, a string with the next available network will be returned; otherwise, the method will return a reference to an array of networks.
.Sp
A network cannot be returned as the next available network if it cannot be inserted; such as when any of the following conditions exist:
.Sp
\&\- It's parent network has a \s-1DHCP\s0 configuration assigned and therefore cannot be converted to a network container.
.Sp
\&\- It overlaps with an existing network or network container, regardless of whether the existing network has a greater or smaller \s-1CIDR\s0 than the requested \s-1CIDR.\s0
.Sp
\&\- Its network address or broadcast address is used by a fixed address or a host configured for \s-1DHCP.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Retrieve a particular network
\& my @retrieved_objs = $session\->get(
\&                           object   => "Infoblox::DHCP::NetworkContainer",
\&                           network  => "10.0.0.0/8"
\& );
\&
\& $network = $retrieved_objs[0];
\&
\& # Print the next available IPv6 network in the network container
\& print $network\->next_available_network(cidr => 12) . "\en";
\&
\& # This will retrieve the next 10 available networks and print the first one.
\& my $addressesref = $network\->next_available_network(requested_num => 10, cidr => 12);
\& print @$addressesref[0] . "\en";
\&
\& # This will retrieve the next 10 available networks and exclude two.
\& my $addressesref = $network\->next_available_network(cidr => 12, requested_num => 10, excluded => [\*(Aq10.0.0.0/12\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "resize( )"
.IX Subsection "resize( )"
.RS 4
Use this method to resize a network container. Note that to use this method, the object \s-1MUST\s0 be retrieved through a get or search call, or it must have been created with an add call.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
prefix                  \- Required. The bitmask prefix length after resizing.
.Sp
auto_create_reversezone \- Optional. Boolean flag indicating whether or not to automatically create the reverse zone.
.Sp
reason                  \- Optional. The reason for resizing the network container in string format with a maximum of 256 bytes. Used when 'rir_organization' attribute has been defined.
.Sp
send_rir_request        \- Optional. Boolean flag that indicates whether the appliance should send an \s-1API\s0 or email request for Regional Internet Registry (\s-1RIR\s0). Used when 'rir_organization' attribute has been defined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails. When an operation fails, the error code and error message are reported in the Session object's \fBstatus_code()\fR and \fBstatus_detail()\fR attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get Network Container through the session
\& my @retrieved_objs = $session\->get(
\&            object =>"Infoblox::DHCP::NetworkContainer" ,
\&            network => "20.0.0.0/8"
\&         );
\& my $network_container = $retrieved_objs[0];
\&
\& # Expand a /24 network container to a /16 network container, inserting
\& # a corresponding reverese zone in the process.
\& my $response = $network_container\->resize(
\&       prefix        => "16"
\&       auto_create_reversezone => "true"
\& ) or die("Resize Network Container failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
.Ve
.RE
.RS 4
.RE
.SS "restart_if_needed( )"
.IX Subsection "restart_if_needed( )"
.RS 4
Use this method to set the flag that indicates whether \s-1DHCP\s0 service should be restarted on a member that is serving \s-1DHCP\s0 for the changed object referenced in a cloud \s-1API\s0 request.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify true to restart the \s-1DHCP\s0 service.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
None
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Modify
\& $network\->restart_if_needed(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "rir( )"
.IX Subsection "rir( )"
.RS 4
Use this method to retrieve the name of the Regional Internet Registry (\s-1RIR\s0) that allocated this address space. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1RIPE\s0' or '\s-1NONE\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get rir
\& my $rir = $network_container\->rir();
.Ve
.RE
.RS 4
.RE
.SS "rir_organization( )"
.IX Subsection "rir_organization( )"
.RS 4
Use this method to set or retrieve the Regional Internet Registry (\s-1RIR\s0) organization object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An Infoblox::Grid::RIR::Organization object.
.Sp
You must enable support for \s-1RIR/SWIP\s0 at the Grid level before you can set attribute values. See Infoblox::Grid\->\fBenable_rir_swip()\fR method.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get rir_organization
\& my $rir_organization = $network_container\->rir_organization();
\& #Modify rir_organization
\& $network_container\->rir_organization($rir_org);
.Ve
.RE
.RS 4
.RE
.SS "rir_registration_action( )"
.IX Subsection "rir_registration_action( )"
.RS 4
Use this method to set the registration action of Regional Internet Registry (\s-1RIR\s0). This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1NONE\s0', '\s-1CREATE\s0', '\s-1MODIFY\s0' or '\s-1DELETE\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set rir_registration_action
\& $network_container\->rir_registration_action(\*(AqCREATE\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "rir_registration_status( )"
.IX Subsection "rir_registration_status( )"
.RS 4
Use this method to set or retrieve the registration status of Regional Internet Registry (\s-1RIR\s0).
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The registration status of Regional Internet Registry (\s-1RIR\s0), which can be '\s-1REGISTERED\s0' or '\s-1NOT_REGISTERED\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get rir_registration_status
\& my $rir_registration_status = $network_container\->rir_registration_status();
\& #Modify rir_registration_status
\& $network_container\->rir_registration_status(\*(AqNOT_REGISTERED\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "last_rir_registration_update_sent( )"
.IX Subsection "last_rir_registration_update_sent( )"
.RS 4
Use this method to retrieve the last registration update timestamp of Regional Internet Registry (\s-1RIR\s0). This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_rir_registration_update_sent
\& my $last_rir_registration_update_sent = $network_container\->last_rir_registration_update_sent();
.Ve
.RE
.RS 4
.RE
.SS "last_rir_registration_update_status( )"
.IX Subsection "last_rir_registration_update_status( )"
.RS 4
Use this method to retrieve the last registration update status of Regional Internet Registry (\s-1RIR\s0). This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_rir_registration_update_status
\& my $last_rir_registration_update_status = $network_container\->last_rir_registration_update_status();
.Ve
.RE
.RS 4
.RE
.SS "same_port_control_discovery_blackout( )"
.IX Subsection "same_port_control_discovery_blackout( )"
.RS 4
Use this method to set or retrieve the flag that enables using the same discovery blackout for port control blackout.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to use same discovery blackout for port control blackout or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $network_container\->same_port_control_discovery_blackout();
\& # Modify attribute value
\& $network_container\->same_port_control_discovery_blackout(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "send_rir_request( )"
.IX Subsection "send_rir_request( )"
.RS 4
Use this method to set the flag that indicates whether the appliance should send an \s-1API\s0 or email request for Regional Internet Registry (\s-1RIR\s0). This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the send_rir_request flag or \*(L"false\*(R" to unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set send_rir_request
\& $network_container\->send_rir_request(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "subscribe_settings( )"
.IX Subsection "subscribe_settings( )"
.RS 4
Use this method to set or retrieve the Cisco \s-1ISE\s0 subscribe settings.
.Sp
Setting this method to a defined value implicitly sets the override_subscribe_settings method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Cisco \s-1ISE\s0 endpoint default and automatically resets the override_subscribe_settings method to \*(L"false\*(R".
.Sp
Note that when subscribe_settings is set to a defined value and override_subscribe_settings is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->subscribe_settings($value); \f(CW$object\fR\->override_subscribe_settings(\*(L"false\*(R"); will set override_subscribe_settings to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_subscribe_settings(\*(L"false\*(R"); \f(CW$object\fR\->subscribe_settings($value); will result in override_subscribe_settings=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::CiscoISE::SubscribeSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get subscribe_settings value
\& my $subscribe_settings = $object\->subscribe_settings();
\& #Modify subscribe_settings value
\& $object\->subscribe_settings($settings);
.Ve
.RE
.RS 4
.RE
.SS "delete_reason( )"
.IX Subsection "delete_reason( )"
.RS 4
Use this method to specify the reason for deleting the Regional Internet Registry (\s-1RIR\s0) registration request. This is a write-only attribute. This field is required only if 'rir_registration_action' is specified as '\s-1DELETE\s0'.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The reason for deleting the \s-1RIR\s0 registration request in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set delete_reason
\& $network_container\->delete_reason(\*(Aqinvalid\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "unmanaged( )"
.IX Subsection "unmanaged( )"
.RS 4
Use this method to set or retrieve the network status, which indicates whether the network is unmanaged or not.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify true to mark the network as unmanaged or false as managed.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get network status
\& $unmanaged = $network_container\->unmanaged();
\& # Modify network status
\& $network_container\->unmanaged(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "update_dns_on_lease_renewal( )"
.IX Subsection "update_dns_on_lease_renewal( )"
.RS 4
The update_dns_on_lease_renewal attribute controls whether the \s-1DHCP\s0 server updates \s-1DNS\s0 when a \s-1DHCP\s0 lease is renewed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_update_dns_on_lease_renewal method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_update_dns_on_lease_renewal attribute to \*(L"false\*(R".
.Sp
Note that when update_dns_on_lease_renewal is set to a defined value and override_update_dns_on_lease_renewal is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); will set override_update_dns_on_lease_renewal to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); will result in override_update_dns_on_lease_renewal=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the update_dns_on_lease_renewal flag or \*(L"false\*(R" to deactivate/unset it.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get update_dns_on_lease_renewal
\&    my $update_dns_on_lease_renewal=$network_container\->update_dns_on_lease_renewal( );
\&    #Modify update_dns_on_lease_renewal
\&    $network_container\->update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SS "zone_associations( )"
.IX Subsection "zone_associations( )"
.RS 4
Use this method to set or retrieve the associated zone information.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DNS::Zone object(s). The default value is an empty list. If the network container has a parent, it is possible to use the zone associations of the parent by setting the parameter to undef.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails. If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 10
\& #Getting zone associations
\& my $zone_associations = $network_container\->zone_associations();
\& my $zone1 = Infoblox::DNS::Zone\->new(
\&        name     => "test1.com",
\& );
\& my $zone2 = Infoblox::DNS::Zone\->new(
\&        name     => "test2.com",
\&    );
\& #Modifying zone_associations
\& $network_container\->zone_associations([$zone1, $zone2]);
\& #Clear zone_assocations
\& $network_container\->zone_associations([]);
\& ##Remove the override for zone_associations
\& $network_container\->zone_associations(undef)
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 Network Container object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 Network Container object\fR
.PP
.Vb 4
\& my $network_container = Infoblox::DHCP::NetworkContainer\->new(
\&             network => "10.0.0.0/8",
\&             comment => "add network container",
\&              );
\&
\& my $response = $session\->add($network_container)
\&        or die("Add Network Container failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network Container added successfully\en";
\&
\& #Search for a specific Network Container
\&
\& #Search the network container
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DHCP::NetworkContainer",
\&     network => \*(Aq10\e.0\e.0\e..*\*(Aq
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search Network Container failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Network Container found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a Network Container attribute\fR
.PP
.Vb 5
\& #Get Network Container through the session
\& my @retrieved_objs = $session\->get(
\&            object =>"Infoblox::DHCP::NetworkContainer" ,
\&            network => "10.0.0.0/8"
\&         );
.Ve
.PP
my \f(CW$object\fR = \f(CW$retrieved_objs\fR[0];
.PP
.Vb 5
\& unless ($object) {
\&     die("Get Network Container object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Network Container found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Modify one of the attributes of the specified Network Container object\fR
.PP
.Vb 1
\& $object\->comment("modified comment"); #Apply the changes
\&
\& $session\->modify($object)
\&     or die("Modify Network Container attribute failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network Container object modified successfully \en";
.Ve
.PP
\&\fB#Resize a network container\fR
.PP
.Vb 6
\& #Get Network through the session
\& my @retrieved_objs = $session\->get(
\&     object =>"Infoblox::DHCP::NetworkContainer" ,
\&     network => "10.0.0.0/8"
\& );
\& my $object = $retrieved_objs[0];
\&
\& #Resize
\& my $response = $object\->resize(
\&     prefix => "16"
\& ) or die("Resize Network Container failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
.Ve
.PP
\&\fB#Remove a Network Container Object\fR
.PP
.Vb 5
\&  #Get Network Container object through the session
\&  my @retrieved_objs = $session\->get(
\&            object  => "Infoblox::DHCP::NetworkContainer" ,
\&            network => "10.0.0.0"
\&        );
\&
\&    my $object = $retrieved_objs[0];
\&
\&    unless ($object) {
\&     die("Get Network Container object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Get Network Container object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Submit the object for removal\fR
.PP
.Vb 3
\& $session\->remove($object)
\&     or die("Remove Network Container failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network Container removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DHCP::View, Infoblox::DHCP::Network, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Grid::MSServer::AdUser::Data, Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC, Infoblox::DHCP::Filter::Option.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
