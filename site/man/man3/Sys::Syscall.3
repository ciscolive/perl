.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Sys::Syscall 3"
.TH Sys::Syscall 3 "2012-12-17" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Sys::Syscall \- access system calls that Perl doesn't normally provide access to
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Sys::Syscall;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Use epoll, sendfile, from Perl.  Mostly Linux-only support now, but
more syscalls/OSes planned for future.
.SH "Exports"
.IX Header "Exports"
Nothing by default.
.PP
May export: sendfile epoll_ctl epoll_create epoll_wait \s-1EPOLLIN EPOLLOUT EPOLLERR EPOLLHUP EPOLL_CTL_ADD\s0  \s-1EPOLL_CTL_DEL EPOLL_CTL_MOD\s0
.PP
Export tags:  :epoll and :sendfile
.SH "Functions"
.IX Header "Functions"
.SS "epoll support"
.IX Subsection "epoll support"
.ie n .IP "$ok = \fBepoll_defined()\fR" 4
.el .IP "\f(CW$ok\fR = \fBepoll_defined()\fR" 4
.IX Item "$ok = epoll_defined()"
Returns true if epoll might be available.  (caller must still test with epoll_create)
.ie n .IP "$epfd = epoll_create([ $start_size ])" 4
.el .IP "\f(CW$epfd\fR = epoll_create([ \f(CW$start_size\fR ])" 4
.IX Item "$epfd = epoll_create([ $start_size ])"
Create a new epoll filedescriptor.  Returns \-1 if epoll isn't available.
.ie n .IP "$rv = epoll_ctl($epfd, $op, $fd, $events)" 4
.el .IP "\f(CW$rv\fR = epoll_ctl($epfd, \f(CW$op\fR, \f(CW$fd\fR, \f(CW$events\fR)" 4
.IX Item "$rv = epoll_ctl($epfd, $op, $fd, $events)"
See manpage for epoll_ctl
.ie n .IP "$count = epoll_wait($epfd, $max_events, $timeout, $arrayref)" 4
.el .IP "\f(CW$count\fR = epoll_wait($epfd, \f(CW$max_events\fR, \f(CW$timeout\fR, \f(CW$arrayref\fR)" 4
.IX Item "$count = epoll_wait($epfd, $max_events, $timeout, $arrayref)"
See manpage for epoll_wait.  \f(CW$arrayref\fR is an arrayref to be modified
with the items returned.  The values put into \f(CW$arrayref\fR are arrayrefs
of [$fd, \f(CW$state\fR].
.SS "sendfile support"
.IX Subsection "sendfile support"
.ie n .IP "$ok = \fBsendfile_defined()\fR" 4
.el .IP "\f(CW$ok\fR = \fBsendfile_defined()\fR" 4
.IX Item "$ok = sendfile_defined()"
Returns true if sendfile should work on this operating system.
.ie n .IP "$sent = sendfile($sock_fd, $file_fd, $max_send)" 4
.el .IP "\f(CW$sent\fR = sendfile($sock_fd, \f(CW$file_fd\fR, \f(CW$max_send\fR)" 4
.IX Item "$sent = sendfile($sock_fd, $file_fd, $max_send)"
Sends up to \f(CW$max_send\fR bytes from \f(CW$file_fd\fR to \f(CW$sock_fd\fR.  Returns bytes
actually sent, or \-1 on error.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is Copyright (c) 2005 Six Apart, Ltd.
.PP
All rights reserved.
.PP
You may distribute under the terms of either the \s-1GNU\s0 General Public
License or the Artistic License, as specified in the Perl \s-1README\s0 file.
If you need more liberal licensing terms, please contact the
maintainer.
.SH "Contributing"
.IX Header "Contributing"
Want to contribute?  See:
.PP
.Vb 1
\&  L<http://contributing.appspot.com/sys\-syscall>
.Ve
.SH "WARRANTY"
.IX Header "WARRANTY"
This is free software. \s-1IT COMES WITHOUT WARRANTY OF ANY KIND.\s0
.SH "AUTHORS"
.IX Header "AUTHORS"
Brad Fitzpatrick <brad@danga.com>
