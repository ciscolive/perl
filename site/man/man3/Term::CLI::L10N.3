.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::CLI::L10N 3"
.TH Term::CLI::L10N 3 "2019-11-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::CLI::L10N \- localizations for Term::CLI
.SH "VERSION"
.IX Header "VERSION"
version 0.051007
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Term::CLI::L10N qw( :all );
\&
\& say loc("invalid value"); # "loc" is imported by default.
\& 
\& say _\|_("invalid value");  # "_\|_" is not imported by default.
\&
\&
\& my $lh = Term::CLI::L10N\->handle();
\&
\& say $lh\->maketext("invalid value");  # "maketext" is not imported by default.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Term::CLI::L10N\*(C'\fR module implements a localization mechanism based
on Locale::Maketext(3p).
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
The module can export a few utility routines.
.IP "\fB_\|_\fR ( \fIStr\fR [, \fIStr\fR ... ] )" 4
.IX Xref "__"
.IX Item "__ ( Str [, Str ... ] )"
Synonym for loc.
.IP "\fBloc\fR ( \fIStr\fR [, \fIStr\fR ... ] )" 4
.IX Xref "loc"
.IX Item "loc ( Str [, Str ... ] )"
Call Locale::Maketext's \f(CW\*(C`maketext\*(C'\fR function
on the arguments.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.IP "\fBhandle\fR" 4
.IX Item "handle"
Return the module's Locale::Maketext handle.
.IP "\fBset_language\fR ( \fIStr\fR [, ... ] )" 4
.IX Item "set_language ( Str [, ... ] )"
Set the language to \fIStr\fR, trying multiple if a list is given.
.Sp
Dies with an error if no language can be loaded.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&    use Term::CLI::L10N; # Initialise using current locale.
\&
\&    Term::CLI::L10N\->set_language(\*(Aqnl\*(Aq); # Force "nl" language.
\&
\&    say loc("ERROR"); # Should print "FOUT".
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Term::CLI::L10N::en(3p),
Term::CLI::L10N::nl(3p),
Locale::Maketext(3p),
Locale::Maketext::Lexicon(3p).
.SH "AUTHOR"
.IX Header "AUTHOR"
Steven Bakker <sbakker@cpan.org>.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2018 Steven Bakker; All rights reserved.
.PP
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See \*(L"perldoc perlartistic.\*(R"
.PP
This software is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
