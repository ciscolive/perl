.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Rex::Shared::Var 3"
.TH Rex::Shared::Var 3 "2020-10-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rex::Shared::Var \- Share variables across Rex tasks
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Share variables across Rex tasks with the help of Storable, using a \f(CW\*(C`vars.db.$PID\*(C'\fR file in the local directory, where \f(CW$PID\fR is the \s-1PID\s0 of the parent process.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& BEGIN {                           # put share in a BEGIN block
\&   use Rex::Shared::Var;
\&   share qw($scalar @array %hash); # share the listed variables
\& }
.Ve
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
Currently nesting data structures works only if the assignment is made on the top level of the structure, or when the nested structures are also shared variables. For example:
.PP
.Vb 4
\& BEGIN {
\&   use Rex::Shared::Var;
\&   share qw(%hash %nested);
\& }
\& 
\& # this doesn\*(Aqt work as expected
\& $hash{key} = { nested_key => 42 };
\& $hash{key}\->{nested_key} = \-1; # $hash{key}\->{nested_key} still returns 42
\& 
\& # workaround 1 \- top level assignments
\& $hash{key} = { nested_key => 42 };
\& $hash{key} = { nested_key => \-1 };
\& 
\& # workaround 2 \- nesting shared variables
\& $nested{nested_key}      = 42;
\& $hash{key}               = \e%nested;
\& $hash{key}\->{nested_key} = \-1;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "share"
.IX Subsection "share"
Share the passed list of variables across Rex tasks. Should be used in a \f(CW\*(C`BEGIN\*(C'\fR block.
.PP
.Vb 4
\& BEGIN {
\&   use Rex::Shared::Var;
\&   share qw($error_count);
\& }
\&
\& task \*(Aqcount\*(Aq, sub {
\&   $error_count += run \*(Aqwc \-l /var/log/syslog\*(Aq;
\& };
\&
\& after_task_finished \*(Aqcount\*(Aq, sub {
\&   say "Total number of errors: $error_count";
\& };
.Ve
