.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Domain::TLD 3"
.TH Net::Domain::TLD 3 "2016-09-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&  Net::Domain::TLD \- Work with TLD names
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Net::Domain::TLD qw(tlds tld_exists);
\&  my @ccTLDs = tlds(\*(Aqcc\*(Aq);
\&  print "TLD ok\en" if tld_exists(\*(Aqac\*(Aq,\*(Aqcc\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\&  The purpose of this module is to provide user with current list of 
\&  available top level domain names including new ICANN additions and ccTLDs
\&  Currently TLD definitions have been acquired from the following sources:
\&
\&  http://www.icann.org/tlds/
\&  http://www.dnso.org/constituency/gtld/gtld.html
\&  http://www.iana.org/cctld/cctld\-whois.htm
\&  https://www.iana.org/domains/root/db
.Ve
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.Vb 2
\&  Each public function/method is described here.
\&  These are how you should interact with this module.
.Ve
.PP
\fI\f(CI\*(C`tlds\*(C'\fI\fR
.IX Subsection "tlds"
.PP
.Vb 1
\&  This routine returns the tlds requested.
\&
\&  my @all_tlds = tlds; #array of tlds
\&  my $all_tlds = tlds; #hashref of tlds and their descriptions
\&
\&  my @cc_tlds = tlds(\*(Aqcc\*(Aq); #array of just \*(Aqcc\*(Aq type tlds
\&  my $cc_tlds = tlds(\*(Aqcc\*(Aq); #hashref of just \*(Aqcc\*(Aq type tlds and their descriptions
\&
\&  Valid types are:
\&    cc                 \- country code domains
\&    ccidn              \- internationalized country code top\-level domain 
\&    gtld_open          \- generic domains that anyone can register
\&    gtld_restricted    \- generic restricted registration domains
\&    gtld_new           \- new gTLDs
\&    new_open           \- recently added generic domains
\&    new_restricted     \- new restricted registration domains
\&    reserved           \- RFC2606 restricted names, not returned by tlds
.Ve
.PP
\fI\f(CI\*(C`tld_exists\*(C'\fI\fR
.IX Subsection "tld_exists"
.PP
.Vb 1
\&  This routine returns true if the given domain exists and false otherwise.
\&
\&  die "no such domain" unless tld_exists($tld); #call without tld type 
\&  die "no such domain" unless tld_exists($tld, \*(Aqnew_open\*(Aq); #call with tld type
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 3
\&  Copyright (c) 2003\-2016 Alex Pavlovic, all rights reserved.  This program
\&  is free software; you can redistribute it and/or modify it under the same terms
\&  as Perl itself.
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\&  Alexander Pavlovic <alex.pavlovic@devradius.com>
\&  Ricardo SIGNES <rjbs@cpan.org>
.Ve
