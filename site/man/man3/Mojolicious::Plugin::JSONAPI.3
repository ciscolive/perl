.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::JSONAPI 3"
.TH Mojolicious::Plugin::JSONAPI 3 "2019-01-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::JSONAPI \- Mojolicious Plugin for building JSON API compliant applications
.SH "VERSION"
.IX Header "VERSION"
version 2.6
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # Mojolicious
\&
\&    # Using route helpers
\&
\&    sub startup {
\&        my ($self) = @_;
\&
\&        $self\->plugin(\*(AqJSONAPI\*(Aq, {
\&            namespace => \*(Aqapi\*(Aq,
\&            kebab_case_attrs => 1,
\&        });
\&
\&        $self\->resource_routes({
\&            resource => \*(Aqpost\*(Aq,
\&            relationships => [\*(Aqauthor\*(Aq, \*(Aqcomments\*(Aq, \*(Aqemail\-templates\*(Aq],
\&        });
\&
\&        # Now the following routes are available:
\&
\&        # GET \*(Aq/api/posts\*(Aq \-> to(\*(Aqapi\-posts#fetch_posts\*(Aq)
\&        # POST \*(Aq/api/posts\*(Aq \-> to(\*(Aqapi\-posts#post_posts\*(Aq)
\&        # GET \*(Aq/api/posts/:post_id \-> to(\*(Aqapi\-posts#get_post\*(Aq)
\&        # PATCH \*(Aq/api/posts/:post_id \-> to(\*(Aqapi\-posts#patch_post\*(Aq)
\&        # DELETE \*(Aq/api/posts/:post_id \-> to(\*(Aqapi\-posts#delete_post\*(Aq)
\&
\&        # GET \*(Aq/api/posts/:post_id/relationships/author\*(Aq \-> to(\*(Aqapi\-posts#get_related_author\*(Aq)
\&        # POST \*(Aq/api/posts/:post_id/relationships/author\*(Aq \-> to(\*(Aqapi\-posts#post_related_author\*(Aq)
\&        # PATCH \*(Aq/api/posts/:post_id/relationships/author\*(Aq \-> to(\*(Aqapi\-posts#patch_related_author\*(Aq)
\&        # DELETE \*(Aq/api/posts/:post_id/relationships/author\*(Aq \-> to(\*(Aqapi\-posts#delete_related_author\*(Aq)
\&
\&        # GET \*(Aq/api/posts/:post_id/relationships/comments\*(Aq \-> to(\*(Aqapi\-posts#get_related_comments\*(Aq)
\&        # POST \*(Aq/api/posts/:post_id/relationships/comments\*(Aq \-> to(\*(Aqapi\-posts#post_related_comments\*(Aq)
\&        # PATCH \*(Aq/api/posts/:post_id/relationships/comments\*(Aq \-> to(\*(Aqapi\-posts#patch_related_comments\*(Aq)
\&        # DELETE \*(Aq/api/posts/:post_id/relationships/comments\*(Aq \-> to(\*(Aqapi\-posts#delete_related_comments\*(Aq)
\&
\&        # GET \*(Aq/api/posts/:post_id/relationships/email\-templates\*(Aq \-> to(\*(Aqapi\-posts#get_related_email_templates\*(Aq)
\&        # POST \*(Aq/api/posts/:post_id/relationships/email\-templates\*(Aq \-> to(\*(Aqapi\-posts#post_related_email_templates\*(Aq)
\&        # PATCH \*(Aq/api/posts/:post_id/relationships/email\-templates\*(Aq \-> to(\*(Aqapi\-posts#patch_related_email_templates\*(Aq)
\&        # DELETE \*(Aq/api/posts/:post_id/relationships/email\-templates\*(Aq \-> to(\*(Aqapi\-posts#delete_related_email_templates\*(Aq)
\&
\&        # If you\*(Aqre in development mode (e.g. MOJO_MODE eq \*(Aqdevelopment\*(Aq), your $app\->log will show the created routes. Useful!
\&
\&        # You can use the following helpers too:
\&
\&        $self\->resource_document($dbic_row, $options);
\&
\&        $self\->compound_resource_document($dbic_row, $options);
\&
\&        $self\->resource_documents($dbic_resultset, $options);
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module intends to supply the user with helper methods that can be used to build a \s-1JSON API\s0
compliant \s-1API\s0 using Mojolicious. It helps create routes for your resources that conform with the
specification, along with supplying helper methods to use when responding to requests.
.PP
See <http://jsonapi.org/> for the \s-1JSON API\s0 specification. At the time of writing, the version was 1.0.
.SH "OPTIONS"
.IX Header "OPTIONS"
.ie n .IP """namespace""" 4
.el .IP "\f(CWnamespace\fR" 4
.IX Item "namespace"
The prefix that's added to all routes, defaults to 'api'. You can also provided an empty string as the namespace,
meaning no prefix will be added.
.ie n .IP """kebab_case_attrs""" 4
.el .IP "\f(CWkebab_case_attrs\fR" 4
.IX Item "kebab_case_attrs"
This is passed to the constructor of \f(CW\*(C`JSONAPI::Document\*(C'\fR which will kebab case the attribute keys of each
record (i.e. '_' to '\-').
.SH "HELPERS"
.IX Header "HELPERS"
.ie n .SS "resource_routes(\fIHashRef\fP $spec)"
.el .SS "resource_routes(\fIHashRef\fP \f(CW$spec\fP)"
.IX Subsection "resource_routes(HashRef $spec)"
Creates a set of routes for the given resource. \f(CW$spec\fR is a hash reference that can consist of the following:
.PP
.Vb 6
\&    {
\&        resource        => \*(Aqpost\*(Aq, # name of resource, required
\&        controller      => \*(Aqapi\-posts\*(Aq, # name of controller, defaults to "api\-{resource_plural}"
\&        relationships   => [\*(Aqauthor\*(Aq, \*(Aqcomments\*(Aq], # default is []
\&        http_verbs      => [\*(Aqget\*(Aq, \*(Aqpost\*(Aq], # default is [\*(Aqget\*(Aq, \*(Aqpost\*(Aq, \*(Aqpatch\*(Aq, \*(Aqdelete\*(Aq]
\&    }
.Ve
.ie n .IP """resource \fIStr\fP""" 4
.el .IP "\f(CWresource \f(CIStr\f(CW\fR" 4
.IX Item "resource Str"
The resources name. Should be a singular noun, which will be turned into it's pluralised
version (e.g. \*(L"post\*(R" \-> \*(L"posts\*(R") automatically where necessary.
.ie n .IP """controller \fIStr\fP""" 4
.el .IP "\f(CWcontroller \f(CIStr\f(CW\fR" 4
.IX Item "controller Str"
The controller name where the actions are to be stored. Defaults to \f(CW\*(C`api\-{resource}\*(C'\fR, where
resource is in its pluralised form.
.Sp
Routes will point to controller actions, the names of which follow the pattern \f(CW\*(C`{http_method}_{resource}\*(C'\fR, with
dashes replaced with underscores (i.e. 'email\-templates' \-> 'email_templates').
.ie n .IP """router \fIMojolicious::Routes\fP""" 4
.el .IP "\f(CWrouter \f(CIMojolicious::Routes\f(CW\fR" 4
.IX Item "router Mojolicious::Routes"
The parent route to use for the resource. Optional.
.Sp
Provide your own router if you plan to use under <http://mojolicious.org/perldoc/Mojolicious/Routes/Route#under>
for your resource.
.Sp
\&\fB\s-1NOTE\s0\fR: Providing your own router assumes that the router is under the same namespace already, so the resource
routes won't specify the namespace themselves.
.Sp
Usage:
.Sp
.Vb 5
\& my $under_api = $r\->under(\*(Aq/api\*(Aq)\->to(\*(AqOAuth#is_authenticated\*(Aq);
\& $self\->resource_routes({
\&     router => $under_api,
\&     resource => \*(Aqpost\*(Aq,
\& });
.Ve
.ie n .IP """relationships \fIArrayRef\fP""" 4
.el .IP "\f(CWrelationships \f(CIArrayRef\f(CW\fR" 4
.IX Item "relationships ArrayRef"
The relationships belonging to the resource. Defaults to an empty array ref.
.Sp
Specifying \f(CW\*(C`relationships\*(C'\fR will create additional routes that fall under the resource. These
can then be used to reference self <https://jsonapi.org/format/#document-resource-object-relationships>
\&\fIor\fR related <https://jsonapi.org/format/#document-resource-object-related-resource-links> routes, as
both will point to the same controller action i.e. \f(CW\*(C`/api/posts/1/relationships/author\*(C'\fR and
\&\f(CW\*(C`/api/posts/1/author\*(C'\fR will go to \f(CW\*(C`Api::Posts::{http_method}_related_author\*(C'\fR. This is because in my
opinion they're different routes with the same purpose, which is to action on the related resource.
.Sp
\&\fB\s-1NOTE\s0\fR: Your relationships should be in the correct form (singular/plural) based on the relationship in your
schema management system. For example, if you have a resource called 'post' and it has many 'comments', make
sure comments is passed in as a plural noun here.
.ie n .IP """http_verbs \fIArrayRef\fP""" 4
.el .IP "\f(CWhttp_verbs \f(CIArrayRef\f(CW\fR" 4
.IX Item "http_verbs ArrayRef"
The \s-1HTTP\s0 verbs/methods to use when creating the resources routes. Defaults to \f(CW\*(C`GET\*(C'\fR, \f(CW\*(C`POST\*(C'\fR, \f(CW\*(C`PATCH\*(C'\fR and \f(CW\*(C`DELETE\*(C'\fR, where
\&\f(CW\*(C`GET\*(C'\fR is both for the collection route as well as the single resource route (e.g. \f(CW\*(C`/api/authors\*(C'\fR and \f(CW\*(C`/api/authors/:author_id\*(C'\fR).
.Sp
Specifying this will not, if provided, affect the relationship routes that will be created. Those will have routes created for
all verbs regardless.
.ie n .SS "render_error(\fIStr\fP $status, \fIArrayRef|Str\fP $errors, \fIHashRef\fP $meta?)"
.el .SS "render_error(\fIStr\fP \f(CW$status\fP, \fIArrayRef|Str\fP \f(CW$errors\fP, \fIHashRef\fP \f(CW$meta\fP?)"
.IX Subsection "render_error(Str $status, ArrayRef|Str $errors, HashRef $meta?)"
Renders a \s-1JSON\s0 response under the required top-level \f(CW\*(C`errors\*(C'\fR key. \f(CW\*(C`errors\*(C'\fR should be an array reference of error objects
as described in the specification, or a string that will be the content of \fItitle\fR.
See Error Objects <http://jsonapi.org/format/#error-objects>.
.PP
Can optionally provide meta information, which will be added to the response as-is.
.SS "requested_resources"
.IX Subsection "requested_resources"
Convenience helper for controllers. Takes the query param \f(CW\*(C`include\*(C'\fR, used to indicate what relationships to include in the
response, and splits it by ',' to return an ArrayRef.
.PP
.Vb 2
\& GET /api/posts?include=comments,author
\& my $include = $c\->requested_resources(); # [\*(Aqcomments\*(Aq, \*(Aqauthor\*(Aq]
.Ve
.PP
Can also include nested relationships:
.PP
.Vb 2
\& GET /api/posts?include=comments,author.notes
\& my $include = $c\->requested_resources(); # [\*(Aqcomments\*(Aq, { author => [\*(Aqnotes\*(Aq] }]
.Ve
.PP
\&\fB\s-1NOTE\s0\fR: Only one level of nesting is supported at the moment, so requests like \f(CW\*(C`author.notes.notes_relation\*(C'\fR won't
give back what you expect. Stick with \f(CW\*(C`author.notes\*(C'\fR and lazy loading \f(CW\*(C`notes_relation\*(C'\fR.
.SS "requested_fields"
.IX Subsection "requested_fields"
Takes each query param \f(CW\*(C`fields[TYPE]\*(C'\fR and creates a HashRef containing all its requested fields along with
any relationship fields. This is useful if you only want to return a subset of attributes for a resource.
.PP
The HashRef produced is suitable to pass directly to the options of \f(CW\*(C`JSONAPI::Document::resource_document\*(C'\fR.
.PP
Included fields should be direct attributes of the resource, not its relationships. See \f(CW\*(C`requested_resources\*(C'\fR
for that use case.
.PP
The main resource should be in the plural form inside the param (i.e. 'posts', not 'post'), and related resources
in their correct form.
.PP
.Vb 1
\& GET /api/posts?fields[posts]=slug,title&fields[comments]=likes&fields[author]=name,email
\&
\& my $fields = $c\->requested_fields();
\&
\& # Out:
\& {
\&    fields => [\*(Aqslug\*(Aq, \*(Aqtitle\*(Aq],
\&    related_fields => {
\&        comments => [\*(Aqlikes\*(Aq],
\&        author => [\*(Aqname\*(Aq, \*(Aqemail\*(Aq]
\&    }
\& }
.Ve
.SS "resource_document"
.IX Subsection "resource_document"
Available in controllers:
.PP
.Vb 1
\& $c\->resource_document($dbix_row, $options);
.Ve
.PP
See resource_document <https://metacpan.org/pod/JSONAPI::Document#resource_document(DBIx::Class::Row-$row,-HashRef-$options)> for usage.
.SS "compound_resource_document"
.IX Subsection "compound_resource_document"
Available in controllers:
.PP
.Vb 1
\& $c\->compound_resource_document($dbix_row, $options);
.Ve
.PP
See compound_resource_document <https://metacpan.org/pod/JSONAPI::Document#compound_resource_document(DBIx::Class::Row-$row,-HashRef-$options)> for usage.
.SS "resource_documents"
.IX Subsection "resource_documents"
Available in controllers:
.PP
.Vb 1
\& $c\->resource_documents($dbix_resultset, $options);
.Ve
.PP
See resource_documents <https://metacpan.org/pod/JSONAPI::Document#resource_documents(DBIx::Class::Row-$row,-HashRef-$options)> for usage.
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
Allow specifying \f(CW\*(C`http_verbs\*(C'\fR in the \f(CW\*(C`resource_routes\*(C'\fR helper for relationships.
.SH "LICENSE"
.IX Header "LICENSE"
This code is available under the Perl 5 License.
