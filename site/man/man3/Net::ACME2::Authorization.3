.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::ACME2::Authorization 3"
.TH Net::ACME2::Authorization 3 "2018-11-06" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::ACME2::Authorization
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1ACME\s0 Authorization object.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
These provide text strings as defined in the \s-1ACME\s0 specification.
.IP "\(bu" 4
\&\fB\fBid()\fB\fR
.IP "\(bu" 4
\&\fB\fBstatus()\fB\fR
.IP "\(bu" 4
\&\fB\fBexpires()\fB\fR
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
.SS "\fI\s-1OBJ\s0\fP\->\fBwildcard()\fP"
.IX Subsection "OBJ->wildcard()"
Returns a Perl boolean that indicates whether the authorization is
for a wildcard \s-1DNS\s0 name.
.SS "\fI\s-1OBJ\s0\fP\->\fBidentifier()\fP"
.IX Subsection "OBJ->identifier()"
The order’s identifier, as a hash reference.
The content matches the \s-1ACME\s0 specification. (\s-1NB:\s0 Wildcard
authorizations do \fB\s-1NOT\s0\fR contain the leading \f(CW\*(C`*.\*(C'\fR in the
\&\f(CW\*(C`value\*(C'\fR.)
.SS "\fI\s-1OBJ\s0\fP\->\fBchallenges()\fP"
.IX Subsection "OBJ->challenges()"
The order’s challenges, as a list of Net::ACME2::Challenge
instances. (\f(CW\*(C`http\-01\*(C'\fR challenges will be instances of
Net::ACME2::Challenge::http_01.)
