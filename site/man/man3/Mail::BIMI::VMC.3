.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::BIMI::VMC 3"
.TH Mail::BIMI::VMC 3 "2020-09-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::BIMI::VMC \- Class to model a VMC
.SH "VERSION"
.IX Header "VERSION"
version 2.20200930.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Class for representing, retrieving, validating, and processing a \s-1VMC\s0 Set
.SH "INPUTS"
.IX Header "INPUTS"
These values are used as inputs for lookups and verifications, they are typically set by the caller based on values found in the message being processed
.SS "data"
.IX Subsection "data"
is=rw
.PP
Raw data of the \s-1VMC\s0 contents; Fetched from authority \s-1URI\s0 if not given
.SS "uri"
.IX Subsection "uri"
is=rw
.PP
\&\s-1URI\s0 of this \s-1VMC\s0
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
These values are derived from lookups and verifications made based upon the input values, it is however possible to override these with other values should you wish to, for example, validate a record before it is published in \s-1DNS,\s0 or validate an Indicator which is only available locally
.SS "cache_backend"
.IX Subsection "cache_backend"
is=ro
.SS "cert_list"
.IX Subsection "cert_list"
is=rw
.PP
ArrayRef of individual Certificates in the chain
.SS "chain_object"
.IX Subsection "chain_object"
is=rw
.PP
Mail::BIMI::VMC::Chain object for this Chain
.SS "errors"
.IX Subsection "errors"
is=rw
.SS "http_client"
.IX Subsection "http_client"
is=rw
.PP
HTTP::Tiny::Paranoid (or similar) object used for \s-1HTTP\s0 operations
.SS "indicator"
.IX Subsection "indicator"
is=rw
.PP
Mail::BIMI::Indicator object for the Indicator embedded in this \s-1VMC\s0 Set
.SS "indicator_uri"
.IX Subsection "indicator_uri"
is=rw
.PP
The \s-1URI\s0 of the embedded Indicator
.SS "is_cert_valid"
.IX Subsection "is_cert_valid"
is=rw
.PP
Is this Certificate Set valid
.SS "is_valid"
.IX Subsection "is_valid"
is=rw
.PP
Is this \s-1VMC\s0 valid
.SS "vmc_object"
.IX Subsection "vmc_object"
is=rw
.PP
Mail::BIMI::VMC::Cert object for this \s-1VMC\s0 Set
.SH "CONSUMES"
.IX Header "CONSUMES"
.IP "\(bu" 4
Mail::BIMI::Role::Cacheable
.IP "\(bu" 4
Mail::BIMI::Role::HasError
.IP "\(bu" 4
Mail::BIMI::Role::HasError
.IP "\(bu" 4
Mail::BIMI::Role::HasHTTPClient
.SH "EXTENDS"
.IX Header "EXTENDS"
.IP "\(bu" 4
Mail::BIMI::Base
.SH "METHODS"
.IX Header "METHODS"
.SS "\fI\fP\f(BIcache_valid_for()\fP\fI\fP"
.IX Subsection "cache_valid_for()"
How long should the cache for this class be valid
.SS "\fI\fP\f(BIhttp_client_max_fetch_size()\fP\fI\fP"
.IX Subsection "http_client_max_fetch_size()"
Maximum permitted \s-1HTTP\s0 fetch
.SS "\fI\fP\f(BIsubject()\fP\fI\fP"
.IX Subsection "subject()"
Return the subject of the \s-1VMC\s0
.SS "\fI\fP\f(BInot_before()\fP\fI\fP"
.IX Subsection "not_before()"
Return not before of the vmc
.SS "\fI\fP\f(BInot_after()\fP\fI\fP"
.IX Subsection "not_after()"
Return not after of the vmc
.SS "\fI\fP\f(BIissuer()\fP\fI\fP"
.IX Subsection "issuer()"
Return the issuer string of the \s-1VMC\s0
.SS "\fI\fP\f(BIis_expired()\fP\fI\fP"
.IX Subsection "is_expired()"
Return true if this \s-1VMC\s0 has expired
.SS "\fI\fP\f(BIalt_name()\fP\fI\fP"
.IX Subsection "alt_name()"
Return the alt name string for the \s-1VMC\s0
.SS "\fI\fP\f(BIis_valid_alt_name()\fP\fI\fP"
.IX Subsection "is_valid_alt_name()"
Return true if the \s-1VMC\s0 has a valid alt name for the domain of the current operation
.SS "\fI\fP\f(BIis_self_signed()\fP\fI\fP"
.IX Subsection "is_self_signed()"
Return true if this \s-1VMC\s0 is self signed
.SS "\fI\fP\f(BIhas_valid_usage()\fP\fI\fP"
.IX Subsection "has_valid_usage()"
Return true if this \s-1VMC\s0 has a valid usage extension for \s-1BIMI\s0
.SS "\fI\fP\f(BIfinish()\fP\fI\fP"
.IX Subsection "finish()"
Finish and clean up, write cache if enabled.
.SS "\fI\fP\f(BIapp_validate()\fP\fI\fP"
.IX Subsection "app_validate()"
Output human readable validation status of this object
.SH "REQUIRES"
.IX Header "REQUIRES"
.IP "\(bu" 4
File::Slurp
.IP "\(bu" 4
MIME::Base64
.IP "\(bu" 4
Mail::BIMI::Indicator
.IP "\(bu" 4
Mail::BIMI::Prelude
.IP "\(bu" 4
Mail::BIMI::VMC::Chain
.IP "\(bu" 4
Moose
.IP "\(bu" 4
Term::ANSIColor
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Marc Bradshaw.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
