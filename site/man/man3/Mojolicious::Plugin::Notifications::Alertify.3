.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Notifications::Alertify 3"
.TH Mojolicious::Plugin::Notifications::Alertify 3 "2018-06-14" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Notifications::Alertify \- Event notifications using Alertify.js
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  # Register the engine
\&  plugin Notifications => {
\&    Alertify => {
\&      base_class => \*(Aqbootstrap\*(Aq
\&    }
\&  };
\&
\&  # In the template
\&  %= notifications \*(AqAlertify\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This plugin is a notification engine using
Alertify.js <http://fabien-d.github.io/alertify.js/>.
.PP
If this does not suit your needs, you can easily
write your own engine.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::Notifications::Alertify inherits all methods
from Mojolicious::Plugin::Notifications::Engine and implements or overrides
the following.
.SS "register"
.IX Subsection "register"
.Vb 5
\&  plugin Notifications => {
\&    Alertify => {
\&       base_class => \*(Aqbootstrap\*(Aq
\&    }
\&  };
.Ve
.PP
Called when registering the main plugin.
All parameters under the key \f(CW\*(C`Alertify\*(C'\fR are passed to the registration.
.PP
Accepts the following parameters:
.IP "\fBbase_class\fR" 4
.IX Item "base_class"
The theme for all alertify notifications.
Defaults to \f(CW\*(C`bootstrap\*(C'\fR. See the
Alertify.js documentation <https://github.com/fabien-d/alertify.js>
for more information on themes.
.IP "\fBbase_timeout\fR" 4
.IX Item "base_timeout"
The base timeout for all alertify notifications. Defaults to \f(CW\*(C`5000 ms\*(C'\fR.
Set to \f(CW0\fR for no timeout.
.SH "HELPERS"
.IX Header "HELPERS"
.SS "notify"
.IX Subsection "notify"
.Vb 4
\&  # In controllers
\&  $c\->notify(warn => \*(AqSomething went wrong\*(Aq);
\&  $c\->notify(success => { timeout => 2000 } => \*(AqEverything went fine\*(Aq);
\&  $c\->notify(success => { ok => \*(Aqhttp://example.com/ok\*(Aq } => \*(AqEverything went fine\*(Aq);
.Ve
.PP
Notify the user on certain events.
.PP
See the documentation for your chosen theme
at Alertify.js <http://fabien-d.github.io/alertify.js/> to see,
which notification types are presupported.
.PP
In addition to types and messages, the \f(CW\*(C`timeout\*(C'\fR can be defined
in a hash reference.
.PP
In case an \f(CW\*(C`ok\*(C'\fR or \f(CW\*(C`cancel\*(C'\fR parameter is passed, this will create a confirmation
notification. The \f(CW\*(C`ok\*(C'\fR and \f(CW\*(C`cancel\*(C'\fR URLs will receive a \s-1POST\s0 request,
once the buttons are pressed.
In case an \f(CW\*(C`ok_label\*(C'\fR is passed, this will be the label
for the confirmation button.
In case a \f(CW\*(C`cancel_label\*(C'\fR is passed, this will be the label
for the cancelation button.
The \s-1POST\s0 will have a csrf_token
parameter to validate.
.PP
\&\fBConfirmation is \s-1EXPERIMENTAL\s0!\fR
.SS "notifications"
.IX Subsection "notifications"
.Vb 3
\&  # In templates
\&  %= notifications \*(Aqalertify\*(Aq;
\&  %= notifications \*(Aqalertify\*(Aq, \*(Aqbootstrap\*(Aq, \-no_include, \-no_css
.Ve
.PP
Include alertify notifications in your template.
.PP
If you want to use a class different to the defined base class, you can
pass this as a string attribute.
.PP
If you don't want to include the javascript and css assets for \f(CW\*(C`Alertify.js\*(C'\fR,
append \f(CW\*(C`\-no_include\*(C'\fR. If you just don't want to render the
stylesheet tag for the inclusion of the \s-1CSS,\s0 append \f(CW\*(C`\-no_css\*(C'\fR.
.PP
All notifications are also rendered in a \f(CW\*(C`<noscript />\*(C'\fR tag,
following the notation described in the
\&\s-1HTML\s0 engine.
.SH "EXPORTABLE FUNCTIONS"
.IX Header "EXPORTABLE FUNCTIONS"
.SS "notify_alertify"
.IX Subsection "notify_alertify"
.Vb 1
\&  use Mojolicious::Plugin::Notifications::Alertify qw/notify_alertify/;
\&
\&  notify_alertify(warn => { timeout => 5000 } => \*(AqThis is a warning\*(Aq)
\&  # alertify.log("This is a warning","warn",5000);
.Ve
.PP
Returns the notification as an Alertify.js <http://fabien-d.github.io/alertify.js/>
JavaScript snippet.
.PP
Accepts the controller as an optional first parameter,
the notification type, a hash reference with parameters,
and the message. In case the parameters include \f(CW\*(C`ok\*(C'\fR or \f(CW\*(C`cancel\*(C'\fR routes,
a confirmation notification is used.
.PP
If the first parameter is a Mojolicious::Controller object,
and the notification is a confirmation, the requests will have
a csrf_token
parameter to validate.
.PP
\&\fBConfirmation is \s-1EXPERIMENTAL\s0!\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Alertify.js <http://fabien-d.github.io/alertify.js/>.
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
.Vb 1
\&  https://github.com/Akron/Mojolicious\-Plugin\-Notifications
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
.SS "Mojolicious::Plugin::Notifications::Alertify"
.IX Subsection "Mojolicious::Plugin::Notifications::Alertify"
Copyright (C) 2014\-2018, Nils Diewald <http://nils-diewald.de/>.
.PP
This program is free software, you can redistribute it
and/or modify it under the terms of the Artistic License version 2.0.
.SS "Alertify.js (bundled)"
.IX Subsection "Alertify.js (bundled)"
Copyright (c) Fabien Doiron
.PP
See <https://github.com/fabien\-d/alertify.js> for further information.
.PP
Licensed under the terms of the
\&\s-1MIT\s0 License <http://opensource.org/licenses/MIT>.
