.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Function 3"
.TH Function 3 "2005-05-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tie::Function \- wrap functions in tied hash sugar
.SH "SYNOPSIS AND EXAMPLE"
.IX Header "SYNOPSIS AND EXAMPLE"
.Vb 8
\&  use Tie::Function 0.01; 
\&  tie my %a, Tie::Function => sub{join \*(Aq_\*(Aqx$_[0],qw/( | )/};
\&  print "small: $a{1}\enmedium: $a{2}\enwide: $a{3}\en"; 
\&  # we split on $; to recover multiple arguments
\&  tie my %times, Tie::Function => sub{
\&        $_[0] * $_[1]
\&  };
\&  print "3 times 5 is $times{3,5}\en"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Tie::Function simplifies wrapping functions in tied hash syntax
so they can be interpolated in double-quoted
literals without messy intermediate variables.
.PP
Here's how I use it the most:
.PP
.Vb 10
\&   use HTML::Entities;
\&   use Tie::Function;
\&   tie my %Entitize => \*(AqTie::Function\*(Aq => \e&encode_entities;
\&   ...
\&   print <<EOF;
\&   <em>$Entitize{$somethingaboutsomething}</em><br>
\&   <textarea name="something"
\&   cols="60" rows="10">$Entitize{$something}</textarea>
\&   EOF
\&   ...
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
nothing
.SH "HISTORY"
.IX Header "HISTORY"
.SS "0.01"
.IX Subsection "0.01"
initial version
.SS "0.02"
.IX Subsection "0.02"
relaxed stricture, turned off warnings
to silence \*(L"split on unitialized value\*(R"
warning
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) 2004,2005 david nicol davidnico@cpan.org
released under your choice of the \s-1GNU\s0 Public or Artistic licenses
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perltie
.PP
Tie::OneOff
.PP
Interpolation
.PP
Tie::Filter
.PP
overload
