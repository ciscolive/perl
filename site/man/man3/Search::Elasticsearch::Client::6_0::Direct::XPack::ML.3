.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search::Elasticsearch::Client::6_0::Direct::XPack::ML 3"
.TH Search::Elasticsearch::Client::6_0::Direct::XPack::ML 3 "2020-06-26" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Search::Elasticsearch::Client::6_0::Direct::XPack::ML \- Plugin providing ML API for Search::Elasticsearch 6.x
.SH "VERSION"
.IX Header "VERSION"
version 6.81
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $response = $es\->xpack\->ml\->start_datafeed(...)
.Ve
.SS "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
This class extends the Search::Elasticsearch client with an \f(CW\*(C`ml\*(C'\fR
namespace, to support the
Machine Learning APIs <https://www.elastic.co/guide/en/x-pack/6.0/xpack-ml.html>.
.PP
The full documentation for the \s-1ML\s0 feature is available here:
<https://www.elastic.co/guide/en/x\-pack/6.0/xpack\-ml.html>
.SH "DATAFEED METHODS"
.IX Header "DATAFEED METHODS"
.ie n .SS """put_datafeed()"""
.el .SS "\f(CWput_datafeed()\fP"
.IX Subsection "put_datafeed()"
.Vb 4
\&    $response = $es\->xpack\->ml\->put_datafeed(
\&        datafeed_id => $id      # required
\&        body        => {...}    # required
\&    )
.Ve
.PP
The \f(CW\*(C`put_datafeed()\*(C'\fR method enables you to instantiate a datafeed.
.PP
See the put_datafeed docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-datafeed.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.ie n .SS """delete_datafeed()"""
.el .SS "\f(CWdelete_datafeed()\fP"
.IX Subsection "delete_datafeed()"
.Vb 3
\&    $response = $es\->xpack\->ml\->delete_datafeed(
\&        datafeed_id => $id      # required
\&    )
.Ve
.PP
The \f(CW\*(C`delete_datafeed()\*(C'\fR method enables you to delete a datafeed.
.PP
See the delete_datafeed docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-datafeed.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`force\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.ie n .SS """start_datafeed()"""
.el .SS "\f(CWstart_datafeed()\fP"
.IX Subsection "start_datafeed()"
.Vb 3
\&    $response = $es\->xpack\->ml\->start_datafeed(
\&        datafeed_id => $id      # required
\&    )
.Ve
.PP
The \f(CW\*(C`start_datafeed()\*(C'\fR method enables you to start a datafeed.
.PP
See the start_datafeed docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-start-datafeed.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`end\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`start\*(C'\fR,
    \f(CW\*(C`timeout\*(C'\fR
.ie n .SS """stop_datafeed()"""
.el .SS "\f(CWstop_datafeed()\fP"
.IX Subsection "stop_datafeed()"
.Vb 3
\&    $response = $es\->xpack\->ml\->stop_datafeed(
\&        datafeed_id => $id      # required
\&    )
.Ve
.PP
The \f(CW\*(C`stop_datafeed()\*(C'\fR method enables you to stop a datafeed.
.PP
See the stop_datafeed docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-stop-datafeed.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`allow_no_datafeeds\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`force\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`timeout\*(C'\fR
.ie n .SS """get_datafeeds()"""
.el .SS "\f(CWget_datafeeds()\fP"
.IX Subsection "get_datafeeds()"
.Vb 3
\&    $response = $es\->xpack\->ml\->get_datafeeds(
\&        datafeed_id => $id      # optional
\&    )
.Ve
.PP
The \f(CW\*(C`get_datafeeds()\*(C'\fR method enables you to retrieve configuration information for datafeeds.
.PP
See the get_datafeeds docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-datafeed.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`allow_no_datafeeds\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.ie n .SS """get_datafeed_stats()"""
.el .SS "\f(CWget_datafeed_stats()\fP"
.IX Subsection "get_datafeed_stats()"
.Vb 3
\&    $response = $es\->xpack\->ml\->get_datafeed_stats(
\&        datafeed_id => $id      # optional
\&    )
.Ve
.PP
The \f(CW\*(C`get_datafeed_stats()\*(C'\fR method enables you to retrieve configuration information for datafeeds.
.PP
See the get_datafeed_stats docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-datafeed-stats.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`allow_no_datafeeds\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.ie n .SS """preview_datafeed()"""
.el .SS "\f(CWpreview_datafeed()\fP"
.IX Subsection "preview_datafeed()"
.Vb 3
\&    $response = $es\->xpack\->ml\->preview_datafeed(
\&        datafeed_id => $id      # required
\&    )
.Ve
.PP
The \f(CW\*(C`preview_datafeed()\*(C'\fR method enables you to preview a datafeed.
.PP
See the preview_datafeed docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-preview-datafeed.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.ie n .SS """update_datafeed()"""
.el .SS "\f(CWupdate_datafeed()\fP"
.IX Subsection "update_datafeed()"
.Vb 4
\&    $response = $es\->xpack\->ml\->update_datafeed(
\&        datafeed_id => $id      # required
\&        body        => {...}    # required
\&    )
.Ve
.PP
The \f(CW\*(C`update_datafeed()\*(C'\fR method enables you to update certain properties of a datafeed.
.PP
See the update_datafeed docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-datafeed.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.SH "JOB METHODS"
.IX Header "JOB METHODS"
.ie n .SS """put_job()"""
.el .SS "\f(CWput_job()\fP"
.IX Subsection "put_job()"
.Vb 4
\&    $response = $es\->xpack\->ml\->put_job(
\&        job_id => $id           # required
\&        body        => {...}    # required
\&    )
.Ve
.PP
The \f(CW\*(C`put_job()\*(C'\fR method enables you to instantiate a job.
.PP
See the put_job docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-job.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.ie n .SS """delete_job()"""
.el .SS "\f(CWdelete_job()\fP"
.IX Subsection "delete_job()"
.Vb 3
\&    $response = $es\->xpack\->ml\->delete_job(
\&        job_id => $id           # required
\&    )
.Ve
.PP
The \f(CW\*(C`delete_job()\*(C'\fR method enables you to delete a job.
.PP
See the delete_job docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-job.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`force\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`wait_for_completion\*(C'\fR
.ie n .SS """open_job()"""
.el .SS "\f(CWopen_job()\fP"
.IX Subsection "open_job()"
.Vb 3
\&    $response = $es\->xpack\->ml\->open_job(
\&        job_id => $id           # required
\&    )
.Ve
.PP
The \f(CW\*(C`open_job()\*(C'\fR method enables you to open a closed job.
.PP
See the open_job docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-open-job.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.ie n .SS """close_job()"""
.el .SS "\f(CWclose_job()\fP"
.IX Subsection "close_job()"
.Vb 3
\&    $response = $es\->xpack\->ml\->close_job(
\&        job_id => $id           # required
\&    )
.Ve
.PP
The \f(CW\*(C`close_job()\*(C'\fR method enables you to close an open job.
.PP
See the close_job docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-close-job.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`allow_no_jobs\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`force\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`timeout\*(C'\fR
.ie n .SS """get_jobs()"""
.el .SS "\f(CWget_jobs()\fP"
.IX Subsection "get_jobs()"
.Vb 3
\&    $response = $es\->xpack\->ml\->get_jobs(
\&        job_id => $id           # optional
\&    )
.Ve
.PP
The \f(CW\*(C`get_jobs()\*(C'\fR method enables you to retrieve configuration information for jobs.
.PP
See the get_jobs docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-job.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`allow_no_jobs\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.ie n .SS """get_job_stats()"""
.el .SS "\f(CWget_job_stats()\fP"
.IX Subsection "get_job_stats()"
.Vb 3
\&    $response = $es\->xpack\->ml\->get_jobs_stats(
\&        job_id => $id           # optional
\&    )
.Ve
.PP
The \f(CW\*(C`get_jobs_stats()\*(C'\fR method enables you to retrieve usage information for jobs.
.PP
See the get_job_statss docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-job-stats.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`allow_no_jobs\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.ie n .SS """flush_job()"""
.el .SS "\f(CWflush_job()\fP"
.IX Subsection "flush_job()"
.Vb 3
\&    $response = $es\->xpack\->ml\->flush_job(
\&        job_id => $id           # required
\&    )
.Ve
.PP
The \f(CW\*(C`flush_job()\*(C'\fR method forces any buffered data to be processed by the job.
.PP
See the flush_job docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-flush-job.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`advance_time\*(C'\fR,
    \f(CW\*(C`calc_interm\*(C'\fR,
    \f(CW\*(C`end\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`skip_time\*(C'\fR,
    \f(CW\*(C`start\*(C'\fR
.ie n .SS """post_data()"""
.el .SS "\f(CWpost_data()\fP"
.IX Subsection "post_data()"
.Vb 4
\&    $response = $es\->xpack\->ml\->post_data(
\&        job_id => $id           # required
\&        body   => [data]        # required
\&    )
.Ve
.PP
The \f(CW\*(C`post_data()\*(C'\fR method enables you to send data to an anomaly detection job for analysis.
.PP
See the post_data docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-post-data.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`reset_end\*(C'\fR,
    \f(CW\*(C`reset_start\*(C'\fR
.ie n .SS """update_job()"""
.el .SS "\f(CWupdate_job()\fP"
.IX Subsection "update_job()"
.Vb 4
\&    $response = $es\->xpack\->ml\->update_job(
\&        job_id => $id           # required
\&        body        => {...}    # required
\&    )
.Ve
.PP
The \f(CW\*(C`update_job()\*(C'\fR method enables you to update certain properties of a job.
.PP
See the update_job docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-job.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.ie n .SS """delete_expired_data"""
.el .SS "\f(CWdelete_expired_data\fP"
.IX Subsection "delete_expired_data"
.Vb 2
\&    $response = $es\->xpack\->ml\->delete_expired_data(
\&    )
.Ve
.PP
The \f(CW\*(C`delete_expired_data()\*(C'\fR method deletes expired machine learning data.
.PP
See the delete_expired_data docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-expired-data.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.SH "CALENDAR METHODS"
.IX Header "CALENDAR METHODS"
.ie n .SS """put_calendar()"""
.el .SS "\f(CWput_calendar()\fP"
.IX Subsection "put_calendar()"
.Vb 4
\&    $response = $es\->xpack\->ml\->put_calendar(
\&        calendar_id => $id      # required
\&        body        => {...}    # optional
\&    )
.Ve
.PP
The \f(CW\*(C`put_calendar()\*(C'\fR method creates a new calendar.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the put calendar docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-calendar.html>
for more information.
.ie n .SS """delete_calendar()"""
.el .SS "\f(CWdelete_calendar()\fP"
.IX Subsection "delete_calendar()"
.Vb 3
\&    $response = $es\->xpack\->ml\->delete_calendar(
\&        calendar_id => $id      # required
\&    )
.Ve
.PP
The \f(CW\*(C`delete_calendar()\*(C'\fR method deletes the specified calendar
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the delete_calendar docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-calendar.html>
for more information.
.ie n .SS """put_calendar_job()"""
.el .SS "\f(CWput_calendar_job()\fP"
.IX Subsection "put_calendar_job()"
.Vb 4
\&    $response = $es\->xpack\->ml\->put_calendar_job(
\&        calendar_id => $id,     # required
\&        job_id      => $id      # required
\&    )
.Ve
.PP
The \f(CW\*(C`put_calendar_job()\*(C'\fR method adds a job to a calendar.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the put_calendar_job docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-calendar-job.html>
for more information.
.ie n .SS """delete_calendar_job()"""
.el .SS "\f(CWdelete_calendar_job()\fP"
.IX Subsection "delete_calendar_job()"
.Vb 4
\&    $response = $es\->xpack\->ml\->delete_calendar_job(
\&        calendar_id => $id,     # required
\&        job_id      => $id      # required
\&    )
.Ve
.PP
The \f(CW\*(C`delete_calendar_job()\*(C'\fR method deletes a job from a calendar.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the delete_calendar_job docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-calendar-job.html>
for more information.
.ie n .SS """put_calendar_event()"""
.el .SS "\f(CWput_calendar_event()\fP"
.IX Subsection "put_calendar_event()"
.Vb 4
\&    $response = $es\->xpack\->ml\->post_calendar_events(
\&        calendar_id => $id,     # required
\&        body        => {...}    # required
\&    )
.Ve
.PP
The \f(CW\*(C`post_calendar_events()\*(C'\fR method adds scheduled events to a calendar.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the post_calendar_events docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-post-calendar-events.html>
for more information.
.ie n .SS """delete_calendar_event()"""
.el .SS "\f(CWdelete_calendar_event()\fP"
.IX Subsection "delete_calendar_event()"
.Vb 4
\&    $response = $es\->xpack\->ml\->delete_calendar_event(
\&        calendar_id => $id,     # required
\&        event_id    => $id      # required
\&    )
.Ve
.PP
The \f(CW\*(C`delete_calendar_event()\*(C'\fR method deletes an event from a calendar.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the delete_calendar_event docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-calendar-event.html>
for more information.
.ie n .SS """get_calendars()"""
.el .SS "\f(CWget_calendars()\fP"
.IX Subsection "get_calendars()"
.Vb 3
\&    $response = $es\->xpack\->ml\->get_calendars(
\&        calendar_id => $id,     # optional
\&    )
.Ve
.PP
The \f(CW\*(C`get_calendars()\*(C'\fR method returns the specified calendar or all calendars.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`from\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`size\*(C'\fR
.PP
See the get_calendars docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-calendar-event.html>
for more information.
.ie n .SS """get_calendar_events()"""
.el .SS "\f(CWget_calendar_events()\fP"
.IX Subsection "get_calendar_events()"
.Vb 3
\&    $response = $es\->xpack\->ml\->get_calendar_events(
\&        calendar_id => $id,     # required
\&    )
.Ve
.PP
The \f(CW\*(C`get_calendar_events()\*(C'\fR method retrieves events from a calendar.
.PP
Query string parameters:
    \f(CW\*(C`end\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`from\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`job_id\*(C'\fR,
    \f(CW\*(C`size\*(C'\fR,
    \f(CW\*(C`start\*(C'\fR
.PP
See the get_calendar_events docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-calendar-event.html>
for more information.
.SH "FILTER METHODS"
.IX Header "FILTER METHODS"
.ie n .SS """put_filter()"""
.el .SS "\f(CWput_filter()\fP"
.IX Subsection "put_filter()"
.Vb 4
\&    $response = $es\->xpack\->ml\->put_filter(
\&        filter_id   => $id,     # required
\&        body        => {...}    # required
\&    )
.Ve
.PP
The \f(CW\*(C`put_filter()\*(C'\fR method creates a named filter.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the put_filter docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-filter.html>
for more information.
.ie n .SS """update_filter()"""
.el .SS "\f(CWupdate_filter()\fP"
.IX Subsection "update_filter()"
.Vb 4
\&    $response = $es\->xpack\->ml\->update_filter(
\&        filter_id   => $id,     # required
\&        body        => {...}    # required
\&    )
.Ve
.PP
The \f(CW\*(C`update_filter()\*(C'\fR method updates the description of a filter, adds items, or removes items.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the update_filter docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-filter.html>
for more information.
.ie n .SS """get_filters()"""
.el .SS "\f(CWget_filters()\fP"
.IX Subsection "get_filters()"
.Vb 3
\&    $response = $es\->xpack\->ml\->get_filters(
\&        filter_id   => $id,     # optional
\&    )
.Ve
.PP
The \f(CW\*(C`get_filters()\*(C'\fR method retrieves a named filter or all filters.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`from\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`size\*(C'\fR
.PP
See the get_filters docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-filters.html>
for more information.
.ie n .SS """delete_filter()"""
.el .SS "\f(CWdelete_filter()\fP"
.IX Subsection "delete_filter()"
.Vb 3
\&    $response = $es\->xpack\->ml\->delete_filter(
\&        filter_id   => $id,     # required
\&    )
.Ve
.PP
The \f(CW\*(C`delete_filter()\*(C'\fR method deletes a named filter.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the delete_filters docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-filter.html>
for more information.
.SH "FORECAST METHODS"
.IX Header "FORECAST METHODS"
.ie n .SS """forecast()"""
.el .SS "\f(CWforecast()\fP"
.IX Subsection "forecast()"
.Vb 3
\&    $response = $es\->xpack\->ml\->forecast(
\&        job_id      => $id      # required
\&    )
.Ve
.PP
The \f(CW\*(C`forecast()\*(C'\fR method enables you to create a new forecast
.PP
See the forecast docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-forecast.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`duration\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`expires_in\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.ie n .SS """delete_forecast()"""
.el .SS "\f(CWdelete_forecast()\fP"
.IX Subsection "delete_forecast()"
.Vb 4
\&    $response = $es\->xpack\->ml\->delete_forecast(
\&        forecast_id => $id,     # required
\&        job_id      => $id      # required
\&    )
.Ve
.PP
The \f(CW\*(C`delete_forecast()\*(C'\fR method enables you to delete an existing forecast.
.PP
See the delete_forecast docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-forecast.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`allow_no_forecasts\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`timeout\*(C'\fR
.SH "MODEL SNAPSHOT METHODS"
.IX Header "MODEL SNAPSHOT METHODS"
.ie n .SS """delete_model_snapshot()"""
.el .SS "\f(CWdelete_model_snapshot()\fP"
.IX Subsection "delete_model_snapshot()"
.Vb 3
\&    $response = $es\->xpack\->ml\->delete_model_snapshot(
\&        snapshot_id => $id      # required
\&    )
.Ve
.PP
The \f(CW\*(C`delete_model_snapshot()\*(C'\fR method enables you to delete an existing model snapshot.
.PP
See the delete_model_snapshot docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-snapshot.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.ie n .SS """get_model_snapshots()"""
.el .SS "\f(CWget_model_snapshots()\fP"
.IX Subsection "get_model_snapshots()"
.Vb 4
\&    $response = $es\->xpack\->ml\->get_model_snapshots(
\&        job_id      => $job_id,         # required
\&        snapshot_id => $snapshot_id     # optional
\&    )
.Ve
.PP
The \f(CW\*(C`get_model_snapshots()\*(C'\fR method enables you to retrieve information about model snapshots.
.PP
See the get_model_snapshots docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-snapshot.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`desc\*(C'\fR,
    \f(CW\*(C`end\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`from\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`size\*(C'\fR,
    \f(CW\*(C`sort\*(C'\fR,
    \f(CW\*(C`start\*(C'\fR
.ie n .SS """revert_model_snapshot()"""
.el .SS "\f(CWrevert_model_snapshot()\fP"
.IX Subsection "revert_model_snapshot()"
.Vb 4
\&    $response = $es\->xpack\->ml\->revert_model_snapshot(
\&        job_id      => $job_id,         # required
\&        snapshot_id => $snapshot_id     # required
\&    )
.Ve
.PP
The \f(CW\*(C`revert_model_snapshots()\*(C'\fR method enables you to revert to a specific snapshot.
.PP
See the revert_model_snapshot docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-revert-snapshot.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`delete_intervening_results\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.ie n .SS """update_model_snapshot()"""
.el .SS "\f(CWupdate_model_snapshot()\fP"
.IX Subsection "update_model_snapshot()"
.Vb 4
\&    $response = $es\->xpack\->ml\->update_model_snapshot(
\&        job_id      => $job_id,         # required
\&        snapshot_id => $snapshot_id     # required
\&    )
.Ve
.PP
The \f(CW\*(C`update_model_snapshots()\*(C'\fR method enables you to update certain properties of a snapshot.
.PP
See the update_model_snapshot docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-snapshot.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.SH "RESULT METHODS"
.IX Header "RESULT METHODS"
.ie n .SS """get_buckets()"""
.el .SS "\f(CWget_buckets()\fP"
.IX Subsection "get_buckets()"
.Vb 4
\&    $response = $es\->xpack\->ml\->get_buckets(
\&        job_id      => $job_id,         # required
\&        timestamp   => $timestamp       # optional
\&    )
.Ve
.PP
The \f(CW\*(C`get_buckets()\*(C'\fR method enables you to retrieve job results for one or more buckets.
.PP
See the get_buckets docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-bucket.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`anomaly_score\*(C'\fR,
    \f(CW\*(C`desc\*(C'\fR,
    \f(CW\*(C`end\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`exclude_interim\*(C'\fR,
    \f(CW\*(C`expand\*(C'\fR,
    \f(CW\*(C`from\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`size\*(C'\fR,
    \f(CW\*(C`sort\*(C'\fR,
    \f(CW\*(C`start\*(C'\fR
.ie n .SS """get_overall_buckets()"""
.el .SS "\f(CWget_overall_buckets()\fP"
.IX Subsection "get_overall_buckets()"
.Vb 3
\&    $response = $es\->xpack\->ml\->get_overall_buckets(
\&        job_id      => $job_id,         # required
\&    )
.Ve
.PP
The \f(CW\*(C`get_overall_buckets()\*(C'\fR method retrieves overall bucket results that summarize the bucket results of multiple jobs.
.PP
See the get_overall_buckets docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-overall-buckets.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`allow_no_jobs\*(C'\fR,
    \f(CW\*(C`bucket_span\*(C'\fR,
    \f(CW\*(C`end\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`exclude_interim\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`overall_score\*(C'\fR,
    \f(CW\*(C`start\*(C'\fR,
    \f(CW\*(C`top_n\*(C'\fR
.ie n .SS """get_categories()"""
.el .SS "\f(CWget_categories()\fP"
.IX Subsection "get_categories()"
.Vb 4
\&    $response = $es\->xpack\->ml\->get_categories(
\&        job_id      => $job_id,         # required
\&        category_id => $category_id     # optional
\&    )
.Ve
.PP
The \f(CW\*(C`get_categories()\*(C'\fR method enables you to retrieve job results for one or more categories.
.PP
See the get_categories docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-category.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`from\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`size\*(C'\fR
.ie n .SS """get_influencers()"""
.el .SS "\f(CWget_influencers()\fP"
.IX Subsection "get_influencers()"
.Vb 3
\&    $response = $es\->xpack\->ml\->get_influencers(
\&        job_id      => $job_id,         # required
\&    )
.Ve
.PP
The \f(CW\*(C`get_influencers()\*(C'\fR method enables you to retrieve job results for one or more influencers.
.PP
See the get_influencers docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-influencer.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`desc\*(C'\fR,
    \f(CW\*(C`end\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`exclude_interim\*(C'\fR,
    \f(CW\*(C`expand\*(C'\fR,
    \f(CW\*(C`from\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`influencer_score\*(C'\fR,
    \f(CW\*(C`size\*(C'\fR,
    \f(CW\*(C`sort\*(C'\fR,
    \f(CW\*(C`start\*(C'\fR
.ie n .SS """get_records()"""
.el .SS "\f(CWget_records()\fP"
.IX Subsection "get_records()"
.Vb 3
\&    $response = $es\->xpack\->ml\->get_records(
\&        job_id      => $job_id,         # required
\&    )
.Ve
.PP
The \f(CW\*(C`get_records()\*(C'\fR method enables you to retrieve anomaly records for a job.
.PP
See the get_records docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-record.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`desc\*(C'\fR,
    \f(CW\*(C`end\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`exclude_interim\*(C'\fR,
    \f(CW\*(C`expand\*(C'\fR,
    \f(CW\*(C`from\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`record_score\*(C'\fR,
    \f(CW\*(C`size\*(C'\fR,
    \f(CW\*(C`sort\*(C'\fR,
    \f(CW\*(C`start\*(C'\fR
.SH "FILE STRUCTURE METHODS"
.IX Header "FILE STRUCTURE METHODS"
.ie n .SS """find_file_structure"""
.el .SS "\f(CWfind_file_structure\fP"
.IX Subsection "find_file_structure"
.Vb 3
\&    $response = $es\->xpack\->ml\->find_file_structure(
\&        body    => { ... },         # required
\&    )
.Ve
.PP
The \f(CW\*(C`find_file_structure()\*(C'\fR method finds the structure of a text file which contains data
that is suitable to be ingested into Elasticsearch.
.PP
See the find_file_structure docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-find-file-structure.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`charset\*(C'\fR,
    \f(CW\*(C`column_names\*(C'\fR,
    \f(CW\*(C`delimiter\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`explain\*(C'\fR,
    \f(CW\*(C`format\*(C'\fR,
    \f(CW\*(C`grok_pattern\*(C'\fR,
    \f(CW\*(C`has_header_row\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`lines_to_sample\*(C'\fR,
    \f(CW\*(C`quote\*(C'\fR,
    \f(CW\*(C`should_trim_fields\*(C'\fR,
    \f(CW\*(C`timeout\*(C'\fR,
    \f(CW\*(C`timestamp_field\*(C'\fR,
    \f(CW\*(C`timestamp_format\*(C'\fR
.SH "INFO METHODS"
.IX Header "INFO METHODS"
.ie n .SS """info"""
.el .SS "\f(CWinfo\fP"
.IX Subsection "info"
.Vb 1
\&    $response = $es\->xpack\->ml\->info();
.Ve
.PP
The \f(CW\*(C`info()\*(C'\fR method returns defaults and limits used by machine learning.
.PP
See the find_file_structure docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/get-ml-info.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.SH "UPGRADE METHODS"
.IX Header "UPGRADE METHODS"
.ie n .SS """set_upgrade_mode"""
.el .SS "\f(CWset_upgrade_mode\fP"
.IX Subsection "set_upgrade_mode"
.Vb 1
\&    $response = $es\->xpack\->ml\->set_upgrade_mode();
.Ve
.PP
The \f(CW\*(C`set_upgrade_mode()\*(C'\fR method sets a cluster wide \f(CW\*(C`upgrade_mode\*(C'\fR setting that prepares
machine learning indices for an upgrade.
.PP
See the set_upgrade_mode docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-set-upgrade-mode.html>
for more information.
.PP
Query string parameters:
    \f(CW\*(C`enabled\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`timeout\*(C'\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Enrico Zimuel <enrico.zimuel@elastic.co>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Elasticsearch \s-1BV.\s0
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
