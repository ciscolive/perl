.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::ShortCut::BuildInstance::Types 3"
.TH MooseX::ShortCut::BuildInstance::Types 3 "2016-08-17" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::ShortCut::BuildInstance::Types \- The BuildInstance type library
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the package for managing types in the MooseX::ShortCut::BuildInstance 
package.
.SS "Caveat utilitor <http://en.wiktionary.org/wiki/Appendix:List_of_Latin_phrases_(A%E2%80%93E)#C>"
.IX Subsection "Caveat utilitor <http://en.wiktionary.org/wiki/Appendix:List_of_Latin_phrases_(A%E2%80%93E)#C>"
All type tests included with this package are considered to be the fixed definition of 
the types.  Any definition not included in the testing is considered flexible.
.SS "Types"
.IX Subsection "Types"
These are checks from the Moose typing system.  They are used to see 
if passed information is compatible with some standard.
.PP
\fINameSpace\fR
.IX Subsection "NameSpace"
.Sp
.RS 4
\&\fBTest:\fR to see if the name_space fits classical package nameing conventions
.Sp
\&\fBAccepts:\fR \f(CW$string\fR =~ /^[A\-Za\-z:]+$/
.RE
.PP
\fISuperClassesList\fR
.IX Subsection "SuperClassesList"
.Sp
.RS 4
\&\fBTest:\fR Checking for an arrayref of classes suitable for inheritance by the built class
.Sp
\&\fBAccepts:\fR an array ref of class names
.RE
.PP
\fIRolesList\fR
.IX Subsection "RolesList"
.Sp
.RS 4
\&\fBTest:\fR Checking for an arrayref of role suitable for adding to the built class
.Sp
\&\fBAccepts:\fR an array ref of role names
.RE
.PP
\fIAttributes\fR
.IX Subsection "Attributes"
.Sp
.RS 4
\&\fBTest:\fR This is a hash ref of attributes to be added to the built class
.Sp
\&\fBAccepts:\fR the hash keys will be treated as the attribute names and the values 
will be treated as the attribute settings.  Only HashRefs are accepted as values 
but no testing of the HashRef for suitability as attribute settings is done prior 
to implementation by \f(CW$meta\fR\->add_attribute( \f(CW$value\fR ).
.RE
.PP
\fIMethods\fR
.IX Subsection "Methods"
.Sp
.RS 4
\&\fBTest:\fR This is a hash ref of methods to be added to the built class
.Sp
\&\fBAccepts:\fR the hash keys will be treated as the method names and the values 
will be treated as method refs.  Only CodeRefs are accepted as values 
but no testing of the CodeRefs for suitability as methods is done prior 
to implementation by \f(CW$meta\fR\->add_method( \f(CW$value\fR ).
.RE
.PP
\fIBuildClassDict\fR
.IX Subsection "BuildClassDict"
.Sp
.RS 4
\&\fBTest:\fR This is a Dictionary ref defining the possible entrys to the 
\&'build_class' function
.Sp
\&\fBAccepts:\fR
.Sp
.Vb 8
\&        Dict[# Moose doesn\*(Aqt have a Dict type so the guts are different
\&                package => Optional[ NameSpace ],
\&                superclasses => Optional[ SuperClassesList ],
\&                roles => Optional[ RolesList ],
\&                add_roles_in_sequence => Optional[ RolesList ],
\&                add_attributes => Optional[ Attributes ],
\&                add_methods => Optional[ Methods ],
\&        ]
.Ve
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
MooseX\-ShortCut\-BuildInstance/issues <https://github.com/jandrew/MooseX-ShortCut-BuildInstance/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing currently
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2014 and 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
version
.Sp
utf8
.Sp
MooseX::Types
.Sp
MooseX::Types::Moose
.RE
