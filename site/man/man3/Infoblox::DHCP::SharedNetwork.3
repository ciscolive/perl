.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::SharedNetwork 3"
.TH Infoblox::DHCP::SharedNetwork 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::SharedNetwork \- DHCP Shared Network object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You can create a shared network when two subnets share a particular network segment. Before creating a shared
network, you must first create the subnetworks. For example, you must first create the networks 10.32.1.0 and
10.30.0.0 before designating them as a shared network.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\&  my $sharednetwork = Infoblox::DHCP::SharedNetwork\->new(
\&                  name                             => $string,                          #Required
\&                  networks                         => [ $Network1,$Network2,...],       #Required
\&                  authority                        => "true" | "false" | undef,         #Optional / Default is undefined
\&                  bootfile                         => $filename | undef,                #Optional / Default is undefined
\&                  bootserver                       => $ipv4addr | $fqdn | undef,                    #Optional / Default is undefined
\&                  comment                          => $string | undef,                  #Optional / Default is undefined
\&                  ddns_generate_hostname           => "true" | "false" | undef,         #Optional / Default is undefined
\&                  ddns_server_always_updates       => "true" | "false",                 #Optional / Default is "true"
\&                  ddns_update_fixed_addresses      => "true" | "false" | undef,         #Optional / Default is undefined
\&                  ddns_ttl                         => $num,                             #Optional / Default is zero
\&                  ddns_use_option81                => "true" | "false" | undef,         #Optional / Default is undefined
\&                  deny_bootp                       => "true" | "false" | undef,         #Optional / Default is undefined
\&                  disable                          => "true" | "false",                 #Optional / Default is "false"
\&                  enable_ddns                      => "true" | "false" | undef,         #Optional / Default is undefined
\&                  extattrs                         => { $string => $extattr, ... },     #Optional / Default is undefined
\&                  extensible_attributes            => { $string => $string | $num, $string => [ $string | $num, ... ], ... }, #Optional / Default is undefined
\&                  ignore_dhcp_option_list_request  => "true" | "false" | undef,         #Optional / Default is "false"
\&                  ignore_id                        => \*(AqNONE\*(Aq | \*(AqCLIENT\*(Aq | \*(AqMACADDR\*(Aq,    #Optional / Default is \*(AqNONE\*(Aq
\&                  ignore_mac_addresses             => [ "mac_addr", ... ] | undef       #Optional / Default is undefined
\&                  lease_scavenge_time              => $number,                          #Optional / Default is \-1
\&                  network_view                     => $NetworkView,                     #Optional / Default is "default" network view
\&                  nextserver                       => $ipv4addr | $fqdn | undef,                    #Optional / Default is undefined
\&                  options                          => [$Option1,$Option2,...],          #Optional / Default is empty list
\&                  override_ddns_ttl                => "true" | "false",                 #Optional / Default value is "false"
\&                  override_lease_scavenge_time     => "true" | "false",                 #Optional / Default value is "false"
\&                  override_update_dns_on_lease_renewal  => "true" | "false",            #Optional / Default value is "false"
\&                  override_ignore_id               => "true" | "false",                 #Optional / Default value is "false"
\&                  pxe_lease_time                   => $num | undef,                     #Optional / Default is undefined
\&                  update_dns_on_lease_renewal      => "true" | "false",                 #Optional / Default value is "false"
\&                  logic_filters                    => [ $filter_name | $filter_obj, ...], # Optional / Default is undefined
\&                  override_logic_filters           => "true\*(Aq | \*(Aqfalse",                   # Optional / Default value is "false"
\&               );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DHCP\s0 shared network object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a shared network object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Construct an object for network
\& my $network1 = Infoblox::DHCP::Network\->new(
\&        network => "20.0.0.0/8",
\& );
\&
\& #Construct an object shared network
\&   my $sharednetwork = Infoblox::DHCP::SharedNetwork\->new(
\&        name     => "myname",
\&        networks => [$network1],
\& );
\&
\& # Submit for adding sharednetwork
\& my $response = $session\->add( $sharednetwork );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching shared network objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP shared network object:
\&
\&  name          \- Required.    The name of the shared network in string format.
\&  network       \- Optional.    The network with which the shared network associated.
\&  network_view  \- Optional.    The network view in which the shared network is located. By default, all network views are searched.
\&  extattrs      \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\&  my  @result_array = $session\->get(
\&       object       => "Infoblox::DHCP::SharedNetwork" ,
\&       name         => "myname",
\&       network_view => "default"
\&  );
\&
\&  my  @result_array = $session\->get(
\&       object       => "Infoblox::DHCP::SharedNetwork" ,
\&       network      => "1.0.0.0/24",
\&       network_view => "default"
\&  );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a shared network object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify enable_ddns method.
\& $object\->enable_ddns("true");
\& # Submit modification
\& my $response = $session\->modify( $object );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a shared network object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get the object under the same name
\& my  @result_array = $session\->get(
\&       object       => "Infoblox::DHCP::SharedNetwork" ,
\&       name         => "myname",
\&       network_view => "default"
\&  );
\&
\& # find the desired object from retrieved list.
\& my $desired_network = $result_array[0];
\&
\& # Submit for removal
\& my $response = $session\->remove( $desired_network );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DHCP\s0 shared network object in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DHCP shared network object:
\&
\&  name          \- Required. The name of the shared network in string format (regular expression).
\&  network       \- Optional. The network with which the shared network associated.
\&  network_view  \- Optional. The network view in which the shared network is located. By default, all network views are searched.
\&  extattrs      \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # search for all DHCP shared network objects in the "default" network view
\&     my @retrieved_objs = $session\->search(
\&       object    => "Infoblox::DHCP::SharedNetwork",
\&       name      => "my.*",
\&       network_view => "default"
\&     );
\&
\& # search all Shared Networks Templates with a given extensible attribute \*(AqSite\*(Aq
\&     my @retrieved_objs = $session\->search(
\&       object => "Infoblox::DHCP::SharedNetwork",
\&       extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\&     );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of \s-1DHCP\s0 a shared network object
.SS "authority( )"
.IX Subsection "authority( )"
.RS 4
Use this method to set or retrieve the authority flag of a shared network object. This setting overrides the member-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the authority flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined, which indicates that this attribute is inherited from the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get authority
\& my $authority = $sharednetwork\->authority()
\& # Modify authority
\& $sharednetwork\->authority("true");
.Ve
.RE
.RS 4
.RE
.SS "bootfile( )"
.IX Subsection "bootfile( )"
.RS 4
Use this method to set or retrieve a bootfile attribute of a shared network object. You can configure the \s-1DHCP\s0 server to support clients that use the boot file name option in their \s-1DHCPREQUEST\s0 messages. This setting overrides the member-level settings.
The default value is undefined, which indicates that this attribute is inherited from the member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::SharedNetwork\->\fBbootserver()\fR and Infoblox::DHCP::SharedNetwork\->\fBnextserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the file that the client must download. The file name must be in string format and can have a maximum of 128 characters. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get bootfile
\& my $bootfile = $sharednetwork\->bootfile();
\& # Modify bootfile
\& $sharednetwork\->bootfile("bootfile1");
\& #Un\-override bootfile
\& $sharednetwork\->bootfile(undef);
.Ve
.RE
.RS 4
.RE
.SS "bootserver( )"
.IX Subsection "bootserver( )"
.RS 4
Use this method to set or retrieve the bootserver attribute of a shared network object. You can specify the name and/or \s-1IP\s0 address of the boot server that the host must access in order to boot. This setting overrides the member-level settings.
The default value is undefined, which indicates that this attribute is inherited from the member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::SharedNetwork\->\fBbootfile()\fR and Infoblox::DHCP::SharedNetwork\->\fBnextserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The boot server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A boot server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get bootserver
\& my $bootserver = $sharednetwork\->bootserver();
\& # Modify bootserver
\& $sharednetwork\->bootserver("abc.domain.com");
\& #Un\-override bootserver
\& $sharednetwork\->bootserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment for a shared network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter a descriptive comment for the network in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get comment
\& my $comment = $sharednetwork\->comment();
\& # Modify comment
\& $sharednetwork\->comment("add a shared network");
.Ve
.RE
.RS 4
.RE
.SS "ddns_generate_hostname( )"
.IX Subsection "ddns_generate_hostname( )"
.RS 4
Use this method to set or retrieve the ddns_generate_hostname flag of a shared network object. Enable this method to allow only the \s-1DHCP\s0 server to generate host name. This setting overrides the member-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to generate the host name or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined, which indicates that this attribute is inherited from the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ddns_generate_hostname
\& my $ddns_generate_hostname = $sharednetwork\->ddns_generate_hostname()
\& # Modify ddns_generate_hostname
\& $sharednetwork\->ddns_generate_hostname("true");
\& #Un\-override
\& $sharednetwork\->ddns_generate_hostname(undef);
.Ve
.RE
.RS 4
.RE
.SS "ddns_server_always_updates( )"
.IX Subsection "ddns_server_always_updates( )"
.RS 4
Use this method to set or retrieve the ddns_server_always_updates flag of a shared network object. Enable this method to allow only the \s-1DHCP\s0 server to update \s-1DNS\s0,regardless of the requests from the \s-1DHCP\s0 clients.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to allow only the \s-1DHCP\s0 server to update \s-1DNS\s0 or \*(L"false\*(R" to deactivate/unset it. The default value for this field is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get ddns_server_always_updates
\& my $ddns_server_always_updates = $sharednetwork\->ddns_server_always_updates()
\& # Modify ddns_server_always_updates
\& $sharednetwork\->ddns_server_always_updates("true");
.Ve
.RE
.RS 4
.RE
.SS "ddns_update_fixed_addresses( )"
.IX Subsection "ddns_update_fixed_addresses( )"
.RS 4
Use this method to set or retrieve the ddns_update_fixed_addresses flag of a shared network object. By default, the \s-1DHCP\s0 server does not update \s-1DNS\s0 when it allocates a fixed address to a client. You can configure the \s-1DHCP\s0 server to update the A and \s-1PTR\s0 record of clients with fixed addresses. When you enable this feature and the \s-1DHCP\s0 server adds A and \s-1PTR\s0 records for a fixed address, the \s-1DHCP\s0 server never discards the records. This setting overrides the member-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to update \s-1DNS\s0 when the device allocates a fixed address to a client or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ddns_update_fixed_addresses
\& my $ddns_update_fixed_addresses= $sharednetwork\->ddns_update_fixed_addresses()
\& # Modify ddns_update_fixed_addresses
\& $sharednetwork\->ddns_update_fixed_addresses("true");
\& #Un\-override
\& $sharednetwork\->ddns_update_fixed_addresses(undef);
.Ve
.RE
.RS 4
.RE
.SS "ddns_ttl( )"
.IX Subsection "ddns_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 update Time to Live (\s-1TTL\s0) value of a shared network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_ttl method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_ddns_ttl attribute to \*(L"false\*(R".
.Sp
Note that when ddns_ttl is set to a defined value and override_dddns_ttl is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_ttl(12); \f(CW$object\fR\->override_ddns_ttl(\*(L"false\*(R"); will set override_ddns_ttl to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_ttl(\*(L"false\*(R"); \f(CW$object\fR\->ddns_ttl(12); will result in override_ddns_ttl=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration,in seconds, that the update is cached. Zero indicates that the update should not be cached. The default value is zero.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get DNS Update ttl
\& my $dns_ttl = $sharednetwork\->ddns_ttl();
\& #Modify DNS Update ttl
\& $sharednetwork\->ddns_ttl(1200);
.Ve
.RE
.RS 4
.RE
.SS "ddns_use_option81( )"
.IX Subsection "ddns_use_option81( )"
.RS 4
Use this method to set or retrieve the ddns_use_option81 flag of a shared network object. Set this flag to define the settings for option 81 at the network level. This setting overrides the member-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to configure support for option 81 or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ddns_use_option81
\& my $ddns_use_option81 = $sharednetwork\->ddns_use_option81()
\& # Modify ddns_use_option81
\& $sharednetwork\->ddns_use_option81("true");
\& # un\-override ddns_use_option81
\& $sharednetwork\->ddns_use_option81(undef);
.Ve
.RE
.RS 4
.RE
.SS "deny_bootp( )"
.IX Subsection "deny_bootp( )"
.RS 4
Use this method to set or retrieve the deny_bootp flag of a \s-1DHCP\s0 Shared Network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the deny_bootp flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined, which indicates that this attribute is inherited from the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get deny_bootp
\& my $deny_bootp = $sharednetwork\->deny_bootp();
\& #Modify deny_bootp
\& $sharednetwork\->deny_bootp("true");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a shared network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag and disable the shared network or \*(L"false\*(R" to unset the flag and enable the shared network. The default value for this field is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get disable
\& my $disable = $sharednetwork\->disable()
\& # Modify disable
\& $sharednetwork\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_ddns( )"
.IX Subsection "enable_ddns( )"
.RS 4
Use this method to set or retrieve the dynamic \s-1DNS\s0 updates flag of a \s-1DHCP\s0 shared network object. The \s-1DHCP\s0 server can send \s-1DDNS\s0 updates to \s-1DNS\s0 servers in the same grid and to external \s-1DNS\s0 servers. This setting overrides the member-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the dynamic \s-1DNS\s0 updates flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined, which indicates that this attribute is inherited from the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get enable_ddns
\& my $enable_ddns = $sharednetwork\->enable_ddns()
\& # Modify enable_ddns
\& $sharednetwork\->enable_ddns("true");
\& # Un\-override enable_ddns
\& $sharednetwork\->enable_ddns(undef);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Shared Network object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $sharednetwork\->extattrs();
\& #Modify extattrs
\& $sharednetwork\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Shared Network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $shared_network\->extensible_attributes();
\& #Modify extensible attributes
\& $shared_network\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "ignore_id( )"
.IX Subsection "ignore_id( )"
.RS 4
Use this method to set or retrieve the ignore_id type of a \s-1DHCP\s0 shared network object. Indicates whether the appliance will ignore \s-1DHCP\s0 client IDs or \s-1MAC\s0 addresses. This setting overrides the upper-level settings.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1NONE\s0', '\s-1CLIENT\s0', or '\s-1MACADDR\s0'. The default is '\s-1NONE\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get attribute value
\& $value = $shared_network\->ignore_id();
\& # Modify attribute value
\& $shared_network\->ignore_id(\*(AqCLIENT\*(Aq);
\& #Un\-override ignore_id
\& $shared_network\->ignore_id(undef);
.Ve
.RE
.RS 4
.RE
.SS "ignore_mac_addresses( )"
.IX Subsection "ignore_mac_addresses( )"
.RS 4
Use this method to set or retrieve the ignore_mac_addresses list of a \s-1DHCP\s0 shared network object. A list of \s-1MAC\s0 addresses the appliance will ignore. This setting overrides the upper-level settings.
.Sp
If you enter \s-1MAC\s0 addresses in the ignore_mac_addresses, then the appliance will ignore them. If you enter empty array, then the appliance will ignore any \s-1MAC\s0 address.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains string objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& $value = $shared_network\->ignore_mac_addresses();
\& # Modify attribute value
\& $shared_network\->ignore_mac_addresses(["11::11::11::11::11::11"]);
.Ve
.RE
.RS 4
.RE
.SS "ignore_dhcp_option_list_request( )"
.IX Subsection "ignore_dhcp_option_list_request( )"
.RS 4
Use this method to set or retrieve the ignore_dhcp_option_list_request flag of a \s-1DHCP\s0 shared network object. If this flag is set to true all the defined \s-1DHCP\s0 options will be returned to the client. This setting overrides the member level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the  ignore_dhcp_option_list_request flag or \*(L"false\*(R" to deactivate/unset it. The default value is false which indicates that this attribute inherit the member level setting..
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ignore_dhcp_option_list_request
\& my $ignore_dhcp_option_list_request = $sharednetwork\->ignore_dhcp_option_list_request();
\& # Un\-override ignore_dhcp_option_list_request
\& $sharednetwork\->ignore_dhcp_option_list_request(undef);
\& # Modify ignore_dhcp_option_list_request
\& $sharednetwork\->ignore_dhcp_option_list_request("true");
.Ve
.RE
.RS 4
.RE
.SS "lease_scavenge_time( )"
.IX Subsection "lease_scavenge_time( )"
.RS 4
Use this method to set or retrieve the lease_scavenge_time value of a Shared Network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_lease_scavenge_time method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_lease_scavenge_time attribute to \*(L"false\*(R".
.Sp
Note that when lease_scavenge_time is set to a defined value and override_lease_scavenge_time is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->lease_scavenge_time(604800); \f(CW$object\fR\->override_lease_scavenge_time(\*(L"false\*(R"); will set override_lease_scavenge_time to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_lease_scavenge_time(\*(L"false\*(R"); \f(CW$object\fR\->lease_scavenge_time(604800); will result in override_lease_scavenge_time=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An integer that specifies the period of time, in seconds, that free and backup leases remain in the database before they are automatically deleted. To disable lease scavenging, set the parameter to \-1. The minimum positive value must be greater than 86400 seconds (1 day). The default value of this parameter is \-1, which means that lease scavenging is disabled.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lease_scavenge_time
\& my $lease_scavenge = $sharednetwork\->lease_scavenge_time();
\& #Modify lease_scavenge_time
\& $sharednetwork\->lease_scavenge_time(30 * 24 * 60 * 60);
.Ve
.RE
.RS 4
.RE
.SS "ms_ad_user_data( )"
.IX Subsection "ms_ad_user_data( )"
.RS 4
Use this method to retrieve Microsoft Active Directory users related information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::MSServer::AdUser::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_ad_user_data
\& my $ms_ad_user_data = $sharednetwork\->ms_ad_user_data();
.Ve
.RE
.RS 4
.RE
.SS "logic_filters( )"
.IX Subsection "logic_filters( )"
.RS 4
Use this method to set or retrieve all the logic (ordered) filters associated with the \s-1DHCP\s0 Shared Network.
.Sp
Filters are used to screen address assignments in a \s-1DHCP\s0 Shared Network if the addresses are to be assigned to specific hosts.
.Sp
Setting this method to a defined value implicitly sets the override_logic_filters method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_logic_filters attribute to \*(L"false\*(R".
.Sp
Note that when logic_filters is set to a defined value and override_dlogic_filters is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->logic_filters($filters); \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); will set override_logic_filters to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); \f(CW$object\fR\->logic_filters($filters); will result in override_logic_filters=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains either the Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC, Infoblox::DHCP::Filter::Option objects or the names of the corresponding filters. The filters in the list must satisfy the following conditions:
.RS 4
.IP "Filter name must be globally unique." 4
.IX Item "Filter name must be globally unique."
.PD 0
.IP "Filters without expressions must be at the end of the list." 4
.IX Item "Filters without expressions must be at the end of the list."
.IP "The filters should not be disabled." 4
.IX Item "The filters should not be disabled."
.RE
.RS 4
.PD
.Sp
The default value of the parameter is undefined.
.RE
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get logic_filters
\& my $ref_logic_filters = $sharednetwork\->logic_filters();
\& #Modify logic_filters
\& $sharednetwork\->logic_filters(["filter_1","filter_2",$exl1]); #$exl1 is an Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC or Infoblox::DHCP::Filter::Option object.
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to retrieve the name of a shared network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the shared network in string format. A name can have a maximum of 32 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name
\& my $sharednetwork = $sharednetwork\->name();
.Ve
.RE
.RS 4
.RE
.SS "networks( )"
.IX Subsection "networks( )"
.RS 4
Use this method to retrieve the \s-1DHCP\s0 networks attribute of a shared network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DHCP::Network objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& my $network1 = Infoblox::DHCP::Network\->new(
\&                                        "network" => "20.0.0.0/8",
\&                                );
\& my $network2 = Infoblox::DHCP::Network\->new(
\&                                        "network" => "30.0.0.0/8",
\&                                );
\&
\& #Get networks
\& my $sharednetwork = $sharednetwork\->networks();
\& #Modify networks
\& my $sharednetwork = $sharednetwork\->networks([$network1, $network2]);
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the network view of the \s-1DHCP\s0 shared network.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" network view, which means the \s-1DHCP\s0 shared network is in the default network view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a defined Infoblox::DHCP::View object. The default network view value is the system-defined default network view object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network view
\& my $nview = $sharednetwork\->network_view();
\& #Modify network view, with an Infoblox::DHCP::View object
\& $sharednetwork\->network_view($nview);
.Ve
.RE
.RS 4
.RE
.SS "nextserver( )"
.IX Subsection "nextserver( )"
.RS 4
Use this method to set or retrieve the nextserver attribute of a shared network object. You can specify the name and/or \s-1IP\s0 address of the next server that the host needs to access in order to boot. This setting overrides the member-level settings.
The default value is undefined which indicates that this attribute is inherited from the member-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::SharedNetwork\->\fBbootfile()\fR and Infoblox::DHCP::SharedNetwork\->\fBbootserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The next server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A next server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get nextserver
\& my $nextserver = $sharednetwork\->nextserver();
\& # Modify nextserver
\& $sharednetwork\->nextserver("blue.domain.com");
\& #Un\-override nextserver
\& $sharednetwork\->nextserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "options( )"
.IX Subsection "options( )"
.RS 4
Use this method to set or retrieve the options value of a member \s-1DHCP\s0 server. \s-1DHCP\s0 options provide network configuration
settings and various services available on the network for \s-1DHCP.\s0 This setting overrides the member-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DHCP::Option objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Get options
\& my $options = $sharednetwork\->options();
\& #Modify options
\& my $option1 = Infoblox::DHCP::Option\->new(
\&     name  => "lease\-time",
\&     value => 50
\& );
\&
\& $sharednetwork\->options([$option1]);
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_ttl( )"
.IX Subsection "override_ddns_ttl( )"
.RS 4
The override_ddns_ttl attribute controls whether the ddns_ttl value in the \s-1DHCP\s0 shared network object is used, instead of the grid default.
.Sp
The override_ddns_ttl attribute can be specified explicitly. It is also set implicitly when ddns_ttl is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for ddns_ttl. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for ddns_ttl.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_ttl
\&    my $override_ddns_ttl=$sharednetwork\->override_ddns_ttl( );
\&    #Modifying override_ddns_ttl
\&    $sharednetwork\->override_ddns_ttl("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ignore_id( )"
.IX Subsection "override_ignore_id( )"
.RS 4
The override_ignore_id controls whether the ignore_id in the \s-1DHCP\s0 shared network is used, instead of the upper-level default.
.Sp
The override_ignore_id can be specified explicitly. It is also set implicitly when ignore_id is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ignore_id and ignore_mac_addresses. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ignore_id and ignore_mac_addresses.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get attrubute value
\&    my $value=$sharednetwork\->override_ignore_id();
\&    #Modifying attribute value
\&    $sharednetwork\->override_ignore_id(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_lease_scavenge_time( )"
.IX Subsection "override_lease_scavenge_time( )"
.RS 4
The override_lease_scavenge_time attribute controls whether the lease_scavenge_time value in the shared network is used, instead of the upper-level default.
.Sp
The override_lease_scavenge_time attribute can be specified explicitly. It is also set implicitly when lease_scavenge_time is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for lease_scavenge_time. Set the parameter to \*(L"false\*(R" to inherit the setting for lease_scavenge_time from the upper level.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_lease_scavenge_time
\&    my $override_lease_scavenge_time=$sharednetwork\->override_lease_scavenge_time( );
\&    #Modifying override_lease_scavenge_time
\&    $sharednetwork\->override_lease_scavenge_time("true");
.Ve
.RE
.RS 4
.RE
.SS "override_logic_filters( )"
.IX Subsection "override_logic_filters( )"
.RS 4
The override_logic_filters attribute controls whether the logic_filters value of the \s-1DHCP\s0 Shared Network is used, instead of the Grid default.
.Sp
The override_logic_filters attribute can be specified explicitly. It is also set implicitly when logic_filters is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for logic_filters. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for logic_filters.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_logic_filters
\& my $override_logic_filters=$sharednetwork\->override_logic_filters( );
\& #Modifying override_logic_filters
\& $sharednetwork\->override_logic_filters("true");
.Ve
.RE
.RS 4
.RE
.SS "override_update_dns_on_lease_renewal( )"
.IX Subsection "override_update_dns_on_lease_renewal( )"
.RS 4
The override_update_dns_on_lease_renewal attribute controls whether the update_dns_on_lease_renewal value in the \s-1DHCP\s0 shared network object is used, instead of the grid default.
.Sp
The override_update_dns_on_lease_renewal attribute can be specified explicitly. It is also set implicitly when update_dns_on_lease_renewal is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for update_dns_on_lease_renewal. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for update_dns_on_lease_renewal.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_update_dns_on_lease_renewal
\&    my $override_update_dns_on_lease_renewal=$sharednetwork\->override_update_dns_on_lease_renewal( );
\&    #Modifying override_update_dns_on_lease_renewal
\&    $sharednetwork\->override_update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SS "pxe_lease_time( )"
.IX Subsection "pxe_lease_time( )"
.RS 4
Use this method to set or retrieve the \s-1PXE\s0 lease time value of a shared network object. Some hosts use \s-1PXE\s0 (Preboot Execution Environment) to boot remotely from a server. To better manage your \s-1IP\s0 resources, set a different lease time for \s-1PXE\s0 boot requests. You can configure the \s-1DHCP\s0 server to allocate an \s-1IP\s0 address with a shorter lease time to hosts that send \s-1PXE\s0 boot requests, so \s-1IP\s0 addresses are not leased longer than necessary. This setting overrides the member-level settings.
The default value is undefined, which indicates that this attribute is inherited from the member-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration, in seconds, that the update is cached. Zero indicates that the update is not cached. The default value is undefined
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get PXE Lease Time
\& my $pxe_lease_time = $sharednetwork\->pxe_lease_time();
\& #Modify PXE Lease Time
\& $sharednetwork\->pxe_lease_time(1100);
\& #Un\-override PXE Lease Time
\& $sharednetwork\->pxe_lease_time(undef);
.Ve
.RE
.RS 4
.RE
.SS "update_dns_on_lease_renewal( )"
.IX Subsection "update_dns_on_lease_renewal( )"
.RS 4
The update_dns_on_lease_renewal attribute controls whether the \s-1DHCP\s0 server updates \s-1DNS\s0 when a \s-1DHCP\s0 lease is renewed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_update_dns_on_lease_renewal method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_update_dns_on_lease_renewal attribute to \*(L"false\*(R".
.Sp
Note that when update_dns_on_lease_renewal is set to a defined value and override_update_dns_on_lease_renewal is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); will set override_update_dns_on_lease_renewal to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); will result in override_update_dns_on_lease_renewal=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the update_dns_on_lease_renewal flag or \*(L"false\*(R" to deactivate/unset it.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get update_dns_on_lease_renewal
\&    my $update_dns_on_lease_renewal=$sharednetwork\->update_dns_on_lease_renewal( );
\&    #Modify update_dns_on_lease_renewal
\&    $sharednetwork\->update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 shared network object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 network object\fR
.PP
.Vb 6
\& my $network1 = Infoblox::DHCP::Network\->new(
\&                                        "network" => "10.0.0.0/8",
\&                                );
\& my $network2 = Infoblox::DHCP::Network\->new(
\&                                        "network" => "11.0.0.0/8",
\&                                );
\&
\& my $response = $session\->add($network1)
\& or die("Add \e"10.0.0.0/8\e"Network failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network \e"10.0.0.0/8\e"added successfully\en";
\&
\& my $response = $session\->add($network2)
\&        or die("Add  \e"11.0.0.0\e"Network failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network  \e"11.0.0.0/8\e",added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 shared network object\fR
.PP
.Vb 10
\& my $sharednetwork1 = Infoblox::DHCP::SharedNetwork\->new(
\&                                        "name"                        => "myname",
\&                                        "comment"                     => "add shared network",
\&                                        "networks"                    => [ $network1 , $network2 ],
\&                                        "disable"                     => "false",
\&                                        "authority"                   => "true",
\&                                        "enable_ddns"                 => "true",
\&                                        "ddns_use_option81"           => "true",
\&                                        "ddns_generate_hostname"      => "true",
\&                                        "ddns_server_always_updates"  => "true",
\&                                        "ddns_update_fixed_addresses" => "true",
\&                                        "pxe_lease_time"              => "3600",
\&                                        "bootserver"                  => "someserver.com",
\&                                        "nextserver"                  => "3.3.3.3",
\&                                        "bootfile"                    => "bootfile.com",
\&
\&                                        );
\&
\& my $response = $session\->add( $sharednetwork1 )
\& or die("Add Shared Network failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Shared Network added successfully\en";
.Ve
.PP
\&\fB#Search for a specific shared network object\fR
.PP
.Vb 11
\& #Search the network
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DHCP::SharedNetwork",
\&     "name"  => "my.*"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search Shared Network failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Shared Network found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a shared network attribute\fR
.PP
.Vb 5
\& #GetShared Network through the session
\& my  @retrieved_objs = $session\->get(
\&            object =>"Infoblox::DHCP::SharedNetwork" ,
\&            "name" => "myname"
\&         );
\&
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Get Shared Network object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Shared Network found at least 1 matching entry\en";
\&
\& #Modify attributes of the specified Network
\& $object\->disable("true"); #Apply the changes
\& my $res = $session\->modify($object) ;
\& if ( !$res)
\& {
\&     print "Modify Shared Network attribute failed: ".$session\->status_code() . ":" . $session\->status_detail();
\& }
\& else {
\& print "Shared Network object modified successfully \en";
\& }
\&
\& #Un\-override bootfile
\& $object\->bootfile(undef);
\&
\& #Un\-override bootserver
\& $object\->bootserver(undef);
\&
\& #Un\-override nextserver
\& $object\->nextserver(undef);
.Ve
.PP
\&\fB#Remove a shared network object\fR
.PP
.Vb 5
\&  #Get Network object through the session
\&  my @retrieved_objs = $session\->get(
\&            object  => "Infoblox::DHCP::SharedNetwork" ,
\&            name    => "myname"
\&     );
\&
\&    my $object = $retrieved_objs[0];
\&
\&    unless ($object) {
\&     die("Get Shared Network object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Get Shared Network object found at least 1 matching entry\en";
\&
\& #Submit the shared network object for removal
\&
\& $session\->remove($object)
\&     or die("Remove Shared Network failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Shared Network removed successfully \en";
\&
\& #Submit the network object for removal
\& my $response = $session\->remove($network1)
\& or die("Remove \e"10.0.0.0/8\e"Network failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network \e"10.0.0.0/8\e"remove successfully\en";
\&
\& #Submit the network object for removal
\& my $response = $session\->remove($network2)
\&        or die("Remove  \e"11.0.0.0\e"Network failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network \e"11.0.0.0/8\e"remove successfully\e
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DHCP::Network, Infoblox::DHCP::View, Infoblox::DHCP::Option, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Grid::MSServer::AdUser::Data
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
