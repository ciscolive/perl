.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Record::MX 3"
.TH Infoblox::DNS::Record::MX 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Record::MX \- DNS MX record object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An \s-1MX\s0 (mail exchanger) record maps a domain name to a mail exchanger. A mail exchanger is a server that either delivers or forwards mail. You can specify one or more mail exchangers for a zone, as well as the priority for using each mail exchanger. A standard \s-1MX\s0 record applies to a particular domain or subdomain. A wildcard \s-1MX\s0 record applies to a domain and all its subdomains.
.PP
Note that you must specify only one view for the attribute \*(L"views\*(R".
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $mx = Infoblox::DNS::Record::MX\->new(
\&     exchanger             => $fqdn,                                                             # Required
\&     name                  => $fqdn,                                                             # Required
\&     pref                  => $num,                                                              # Required
\&     comment               => $string,                                                           # Optional / Default is empty
\&     disable               => "true" | "false",                                                  # Optional / Default "false"
\&     extattrs              => { $string => $extattr, ... },                                      # Optional / Default is undefined
\&     extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, # Optional / Default is undefined
\&     ttl                   => $num | undef,                                                      # Optional / Default is undefined
\&     views                 => [$View1]                                                           # Optional / Default is "default" view
\&     creator               => "DYNAMIC" | "STATIC",                                              # Optional / Default is "STATIC"
\&     ddns_protected        => "true" | "false",                                                  # Optional / Default is "false"
\&     ddns_principal        => $string,                                                           # Optional / Default is undefined
\&     forbid_reclamation    => "true" | "false",                                                  # Optional / Default is "false"
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DNS MX\s0 object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Construct an object
\& my $bindmx = Infoblox::DNS::Record::MX\->new(
\&     name      => "bind_mx.domain.com",
\&     comment   => "add mx bind_mx.domain.com",
\&     pref      => 1,
\&     exchanger => "exchanger.domain.com",
\& );
\& # Submit for addition
\& my $response = $session\->add( $bindmx );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DNS MX object:
\&
\&  name                  \- Optional.  A domain name in string format
\&  view                  \- Optional.  The DNS view in which the MX record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&  zone                  \- Optional. A zone name in FQDN format.
\&  exchanger             \- Optional. The exchanger of the MX record.
\&  pref                  \- Optional. The Preference of the MX record.
\&  creator               \- Optional. Record creator.
\&  ddns_principal        \- Optional. GSS\-TSIG principal that owns the record.
\&  reclaimable           \- Optional. The flag that indicates whether the record is reclaimable or not.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  my @retrieved_objs = $session\->get(
\&     object    => "Infoblox::DNS::Record::MX",
\&     name      => "bind_mx.domain.com",
\&     view      => "default" );
\&
\&  # get all DNS MX records in the "domain.com" zone of the default view
\&  my @retrieved_objs = $session\->get(
\&     object    => "Infoblox::DNS::Record::MX",
\&     zone      => "domain.com",
\&     view      => "default" );
\&
\& # get all DNS MX records with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::MX",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the comment.
\& $bindmx\->comment("this is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $bindmx );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& # Get the object under the same name
\& my @retrieved_objs = $session\->get(
\&     name      => "bind_mx.domain.com",
\&     comment   => "add mx bind_mx.domain.com",
\&     pref      => 1,
\&     exchanger => "exchanger.domain.com",
\&     view      => "default" );
\& # find the desired object from retrieved list.
\& my $desired_mx = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired _mx );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DNS MX\s0 record objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DNS MX record object:
\&
\&  name                  \- Optional. A domain name in string format (regular expression).
\&  view                  \- Optional. The DNS view in which the MX record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&  zone                  \- Optional. A zone name in FQDN format.
\&  comment               \- Optional. A comment in string format (regular expression).
\&  exchanger             \- Optional. The exchanger of the MX record (regular expression).
\&  pref                  \- Optional. The Preference of the MX record (regular expression).
\&  creator               \- Optional. Record creator.
\&  ddns_principal        \- Optional. GSS\-TSIG principal that owns the record.
\&  reclaimable           \- Optional. The flag that indicates whether the record is reclaimable or not.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all DNS MX objects that match "domain.com" in the default DNS view
\&     my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::MX",
\&     name   => \*(Aqdomain\e.com\*(Aq,
\&     view   => "default" );
\&
\& # search for all DNS MX objects in the domain.com zone of the default DNS view
\&     my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::MX",
\&     zone   => "domain.com",
\&     view   => "default" );
\&
\& # search all DNS MX records with a given extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DNS::Record::MX",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of an \s-1MX\s0 record
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to add or retrieve a descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter a descriptive comment for this record in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting comment
\& my $comment = $bindmx\->comment();
\& # Modifying comment
\& $bindmx\->comment("add mx2.domain.com");
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to retrieve cloud \s-1API\s0 related information for the Infoblox::DNS::Record::MX object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get cloud_info
\& my $cloud_info = $object\->cloud_info();
.Ve
.RE
.RS 4
.RE
.SS "creator( )"
.IX Subsection "creator( )"
.RS 4
Use this method to set or retrieve the record creator.
.Sp
Note that changing creator from or to '\s-1SYSTEM\s0' value is not allowed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParamter\fR" 4
.IX Item "Paramter"
The valid values are '\s-1STATIC\s0' and '\s-1DYNAMIC\s0'. The default value is '\s-1STATIC\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get creator value
\& my $creator = $object\->creator();
\&
\& #Modify creator value
\& $object\->creator("DYNAMIC");
.Ve
.RE
.RS 4
.RE
.SS "creation_time( )"
.IX Subsection "creation_time( )"
.RS 4
Use this method to retrieve the creation time for the record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is a number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get creation_time value
\& my $creation_time = $object\->creation_time();
.Ve
.RE
.RS 4
.RE
.SS "ddns_principal( )"
.IX Subsection "ddns_principal( )"
.RS 4
Use this method to set or retrive the GSS-TSIG principal that owns this record.
.Sp
Note that you cannot set ddns_principal for '\s-1STATIC\s0' and '\s-1SYSTEM\s0' records.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParamter\fR" 4
.IX Item "Paramter"
The GSS-TSIG principal \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the hostname followed by the domain name (example: abc.com). A hostname can have a maximum of 256 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ddns_principal value
\& my $ddns_principal = $object\->ddns_principal();
\&
\& #Modify ddns_principal value
\& $object\->ddns_principal(\*(Aqfoo.com\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_protected( )"
.IX Subsection "ddns_protected( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether \s-1DDNS\s0 updates for this record are allowed or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to protect record from \s-1DDNS\s0 updates and 'false' to allow \s-1DDNS\s0 updates for the specified record.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ddns_protected value
\& my $ddns_protected = $object\->ddns_protected();
\&
\& #Modify ddns_protected value
\& $object\->ddns_protected(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DNS\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false. The \s-1DNS\s0 record is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting disable
\& my $disable = $bindmx\->disable()
\& # Modifying disable
\& $bindmx\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "dns_exchanger( )"
.IX Subsection "dns_exchanger( )"
.RS 4
Use this method to retrieve the exchanger in punycode format. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $bindmx\->dns_exchanger();
.Ve
.RE
.RS 4
.RE
.SS "dns_name( )"
.IX Subsection "dns_name( )"
.RS 4
Use this method to retrieve the domain name in punycode format. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $bindmx\->dns_name();
.Ve
.RE
.RS 4
.RE
.SS "exchanger( )"
.IX Subsection "exchanger( )"
.RS 4
Use this method to set or retrieve the exchanger.
.Sp
The name of the mail exchanger in Fully Qualified Domain Name (\s-1FQDN\s0) format.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the name of the mail exchanger for the \s-1DNS MX\s0 record.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting exchanger
\& my $exchanger = $bindmx\->exchanger();
\& # Modifying exchanger
\& $bindmx\->exchanger("exchanger2.domain.com");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS MX\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $bindmx\->extattrs();
\& #Modify extattrs
\& $bindmx\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS MX\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $bindmx\->extensible_attributes();
\& #Modify extensible attributes
\& $bindmx\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "forbid_reclamation( )"
.IX Subsection "forbid_reclamation( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the reclamation is allowed for the record or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to forbid reclamation for the record and 'false' to allow it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get forbid_reclamation
\& my $forbid_reclamation = $object\->forbid_reclamation();
\& #Modify forbid_reclamation
\& $object\->forbid_reclamation(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "last_queried( )"
.IX Subsection "last_queried( )"
.RS 4
Use this method to retrieve the time when the associated record was last queried. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. The number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_queried
\& my $last_queried = $bindmx\->last_queried();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the domain name.
.Sp
The name of the \s-1DNS MX\s0 object in Fully Qualified Domain Name (\s-1FQDN\s0) format.
If you want to define an \s-1MX\s0 record for a domain whose name matches the zone in which you
define the \s-1MX\s0 record, leave this field empty.
If you want to define an \s-1MX\s0 record for a subdomain, enter that subdomain name here.
If you want to define an \s-1MX\s0 record for a domain and all its subdomains, enter an asterisk ( * ) here to create a wildcard \s-1MX\s0 record.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the name for the \s-1DNS MX\s0 record.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting name
\& my $name = $bindmx\->name();
\& # Modifying name
\& $bindmx\->name("mx2.domain.com");
.Ve
.RE
.RS 4
.RE
.SS "pref( )"
.IX Subsection "pref( )"
.RS 4
Use this method to set or retrieve the Preference value.
.Sp
The preference value of the \s-1DNS MX\s0 object. Preference value of \s-1MX\s0 record for the zone range from 0 to 65535. Low values are more preferred.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter an unsigned integer between 0\-65535. The priority determines the order in which a client attempts to
contact the target mail exchanger. The highest priority is 0 and is queried first.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting pref
\& my $pref = $bindmx\->pref();
\& # Modifying pref
\& $bindmx\->pref(3);
.Ve
.RE
.RS 4
.RE
.SS "reclaimable( )"
.IX Subsection "reclaimable( )"
.RS 4
Use this method to retrieve the flag that indicates whether the record is reclaimable or not.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get reclaimable
\& my $reclaimable = $object\->reclaimable();
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to configure or retrieve the Time to Live (\s-1TTL\s0) value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is undefined which indicates that the record inherits the \s-1TTL\s0 value of the zone.
.Sp
Specify a \s-1TTL\s0 value to override the \s-1TTL\s0 value at the zone level.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration in seconds that the record is cached. Zero indicates that the record should not be cached.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get ttl
\& my $ttl = $bindmx\->ttl();
\& #Modify ttl
\& $bindmx\->ttl(1800);
\& #Un\-override ttl
\& $bindmx\->ttl(undef);
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to specify or retrieve the view of the \s-1MX\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the 'default' view, which means the \s-1MX\s0  record is located under the default view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference of defined Infoblox::DNS::View objects.
.Sp
Note that the array size must be 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get views
\& my $ref_views = $bindmx\->views();
\& #Modify views, list of Infoblox::DNS::View objects
\& $bindmx\->views([$view1]);
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of a \s-1DNS MX\s0 record. This method is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get zone
\& my $zone = $bindmx\->zone();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS MX\s0 record insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the zone prior to MX  record insertion
\& my $zone = Infoblox::DNS::Zone\->new(name => "domain.com");
\& unless ($zone) {
\&    die("Construct zone failed: ",
\&      Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& #Verify if the zone exists
\& my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "domain.com");
\& unless ($object) {
\&    print "Zone does not exist on server, safe to add the zone\en";
\&    $session\->add($zone)
\&       or die("Add zone failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Zone added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS MX\s0 record\fR
.PP
.Vb 7
\&  #Construct a DNS MX object
\& my $bindmx = Infoblox::DNS::Record::MX\->new(
\&     name      => "bind_mx.domain.com",
\&     comment   => "add mx bind_mx.domain.com",
\&     pref      => 1,
\&     exchanger => "exchanger.domain.com",
\& );
\&
\& unless ($bindmx) {
\&    die("Construct DNS record MX failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DNS MX object created successfully\en"; #Add the DNS MX record object to Infoblox appliance through a session
\& $session\->add($bindmx)
\&     or die("Add record MX failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS MX object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS MX\s0 record\fR
.PP
.Vb 11
\& #Search all MX records that match "domain.com"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::MX",
\&     name   => \*(Aqdomain\e.com\*(Aq
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search record MX failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS MX object found at least 1 matching entry\en";
\&
\& #Search all MX records that start with "bind" and end with "domain.com"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::MX",
\&     name   => \*(Aq^bind.*\e.domain\e.com\e$\*(Aq
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search record MX failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS MX object using regexp found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS MX\s0  record\fR
.PP
.Vb 7
\& #Get MX record through the session
\& my  @retrieved_objs = $session\->get(
\&     object    => "Infoblox::DNS::Record::MX",
\&     name      => "bind_mx.domain.com",
\&     pref      => 1,
\&     exchanger => "exchanger.domain.com",
\& );
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get record MX failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS MX object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified MX record
\& $object\->exchanger("exc.domain.com");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify record MX failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS MX object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DNS MX\s0  record\fR
.PP
.Vb 11
\&  #Get MX record through the session
\&  my @retrieved_objs = $session\->get(
\&      object => "Infoblox::DNS::Record::MX",
\&      name   => "bind_mx.domain.com"
\&   );
\&    my $object = $retrieved_objs[0];
\&    unless ($object) {
\&     die("Get record MX failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS MX object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove record MX failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS MX object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::View, Infoblox::DNS::Zone, Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
