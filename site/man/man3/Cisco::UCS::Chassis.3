.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Cisco::UCS::Chassis 3"
.TH Cisco::UCS::Chassis 3 "2016-05-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cisco::UCS::Chassis \- Class providing operations with a Cisco UCS Chassis
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        my $chassis = $ucs\->chassis(1);
\&
\&        print $chassis\->serial;
\&
\&        foreach my $chassis (sort $ucs\->get_chassis) {
\&                print "Chassis: " . $chassis\->id 
\&                        . " \- Serial: " . $chassis\->serial . "\en";
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Cisco::UCS::Chassis is a class providing operations with a Cisco \s-1UCS\s0 chassis.
.PP
Note that you are not supposed to call the constructor yourself, rather a 
Cisco::UCS::Chassis is created automatically via calls to a Cisco::UCS 
object like \fIget_chassis\fR or \fIchassis\fR.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
\fIblade ( \f(CI$id\fI )\fR
.IX Subsection "blade ( $id )"
.PP
.Vb 1
\&  my $blade = $ucs\->chassis(1)\->blade(2);
\&
\&  print $blade\->serial;
.Ve
.PP
Returns a Cisco::UCS::Blade object for the blade identified by the given 
slot \s-1ID.\s0  This method takes a single mandatory argument \- an integer value 
specifying the slot \s-1ID\s0 of the desired blade.
.PP
Note that the default behaviour of this method is to return a cached object 
retrieved in a previous lookup if one is available.  Please see the 
\&\fBCaching Methods\fR section in \fB\s-1NOTES\s0\fR for further information.
.PP
\fIget_blade ( \f(CI$id\fI )\fR
.IX Subsection "get_blade ( $id )"
.PP
.Vb 1
\&  my $chassis = $ucs\->chassis(3);
\&
\&  my $blade = $chassis\->get_blade(1);
\&
\&  print "Blade " . $blade\->id . " thermal is " . $blade\->thermal 
\&                . ", power is " . $blade\->power . "\en";
.Ve
.PP
Returns a Cisco::UCS::Blade object for the specified blade identified by 
the given slot \s-1ID.\s0
.PP
This method always queries the \s-1UCSM\s0 for information on the specified blade \- 
contrast this behaviour with the behaviour of the analogous caching method 
\&\fI\f(BIblade()\fI\fR;
.PP
\fIget_blades\fR
.IX Subsection "get_blades"
.PP
.Vb 3
\&  foreach my $blade ($ucs\->chassis(1)\->get_blades) {
\&    print $blade\->serial . "\en"
\&  }
.Ve
.PP
Returns an array of Cisco::UCS::Blade objects.  This is a non-caching method.
.PP
\fIfex ( \f(CI$id\fI )\fR
.IX Subsection "fex ( $id )"
.PP
.Vb 1
\&  my $fex = $ucs\->chassis(1)\->fex(1);
\&
\&  print $blade\->serial;
.Ve
.PP
Returns a Cisco::UCS::FEX object for the blade identified by the given slot 
\&\s-1ID.\s0  This method takes a single mandatory argument \- an integer value 
specifying the slot \s-1ID\s0 of the desired \s-1FEX.\s0
.PP
Note that the default behaviour of this method is to return a cached object 
retrieved in a previous lookup if one is available.  Please see the 
\&\fBCaching Methods\fR section in \fB\s-1NOTES\s0\fR for further information.
.PP
\fIget_fex ( \f(CI$id\fI )\fR
.IX Subsection "get_fex ( $id )"
.PP
.Vb 1
\&  my $fex = $ucs\->chassis(1)\->fex(1);
\&
\&  print $fex\->serial;
.Ve
.PP
Returns a Cisco::UCS::FEX object for the \s-1FEX\s0 identified by the given slot 
\&\s-1ID.\s0
.PP
This method always queries the \s-1UCSM\s0 for information \- contrast this with the 
behaviour of the analagous caching method \fI\f(BIfex()\fI\fR.
.PP
\fIget_fexs\fR
.IX Subsection "get_fexs"
.PP
.Vb 1
\&  my @fex = $ucs\->chassis(1)\->get_fexs;
.Ve
.PP
Returns an array of Cisco::UCS::FEX objects for the FEXs in the specified 
chassis.  This is a non-caching method.
.PP
\fIfan_module ( \f(CI$id\fI )\fR
.IX Subsection "fan_module ( $id )"
.PP
.Vb 1
\&  print $ucs\->chassis(1)\->fan_module(1)\->thermal;
.Ve
.PP
Returns a Cisco::UCS::Common::FanModule object for the specified fan module.  
Note that the default behaviour of this method is to return a cached object as 
retrieved by a previous call to the \s-1UCSM\s0 if available.  See the 
\&\fBCaching Method\fR section in \fB\s-1NOTES\s0\fR for further details.
.PP
\fIget_fan_module ( \f(CI$id\fI )\fR
.IX Subsection "get_fan_module ( $id )"
.PP
.Vb 1
\&  my $fm = $ucs\->chassis(1)\->get_fan_module(1);
.Ve
.PP
Returns a Cisco::UCS::Common::FanModule object for the specified fan module 
in the designated chassis.
.PP
This is a non-caching method and always queries the \s-1UCSM\s0 for information.
.PP
\fIget_fan_modules\fR
.IX Subsection "get_fan_modules"
.PP
.Vb 1
\&  my @fan_modules = $ucs\->chassis(3)\->get_fan_modules;
.Ve
.PP
Returns an array of Cisco::UCS::Common::FanModules for the specified 
chassis.  This is a non-caching method.
.PP
\fIpsu ( \f(CI$id\fI )\fR
.IX Subsection "psu ( $id )"
.PP
.Vb 1
\&  my $psu = $ucs\->chassis(1)\->psu(2);
\&
\&  print $psu\->serial;
.Ve
.PP
Returns a Cisco::UCS::Chassis::PSU object for the chassis identified by the 
given \s-1PSU ID.\s0  This method takes a single mandatory argument \- an integer value 
specifying the \s-1ID\s0 of the desired \s-1PSU.\s0
.PP
Note that the default behaviour of this method is to return a cached object 
retrieved in a previous lookup if one is available.  Please see the 
\&\fBCaching Methods\fR section in \fB\s-1NOTES\s0\fR for further information.
.PP
\fIget_psu ( \f(CI$id\fI )\fR
.IX Subsection "get_psu ( $id )"
.PP
.Vb 1
\&  my $psu = $ucs\->chassis(1)\->get_psu(1);
.Ve
.PP
Returns a Cisco::UCS::Chassis::PSU object for the chassis identified by the 
given \s-1PSU ID.\s0 This method is non-caching and will always query the \s-1UCSM\s0 for 
information.
.PP
\fIget_psus\fR
.IX Subsection "get_psus"
.PP
.Vb 1
\&  my @psus = $ucs\->chassis(1)\->get_psus;
.Ve
.PP
Returns an array of Cisco::UCS::Chassis::PSU objects for the given chassis.  
This method is non-caching.
.PP
\fIstats\fR
.IX Subsection "stats"
.PP
.Vb 1
\&  print "Output power: ". $ucs\->chassis(1)\->stats\->output_power ." W\en";
.Ve
.PP
Return a Cisco::UCS::Chassis::Stats object containing the current power 
statistics for the specified chassis.
.PP
\fIadmin_state\fR
.IX Subsection "admin_state"
.PP
Returns the administrative state of the chassis.
.PP
\fIconn_path\fR
.IX Subsection "conn_path"
.PP
Returns the connection patrh status of the chassis.
.PP
\fIconn_status\fR
.IX Subsection "conn_status"
.PP
Returns the connection status of the chassis.
.PP
\fIdn\fR
.IX Subsection "dn"
.PP
Returns the distinguished name of the chassis in the \s-1UCS\s0 management heirarchy.
.PP
\fIerror\fR
.IX Subsection "error"
.PP
Returns the error status of the chassis.
.PP
\fIid\fR
.IX Subsection "id"
.PP
Returns the numerical \s-1ID\s0 of the chassis.
.PP
\fIlabel\fR
.IX Subsection "label"
.PP
Returns the user defined label of the chassis.
.PP
\fImanaging_instance\fR
.IX Subsection "managing_instance"
.PP
Returns the managing \s-1UCSM\s0 instance of the chassis (i.e. either A or B).
.PP
\fImodel\fR
.IX Subsection "model"
.PP
Returns the model number of the chassis.
.PP
\fIoper_state\fR
.IX Subsection "oper_state"
.PP
Returns the operational state of the chassis.
.PP
\fIoperability\fR
.IX Subsection "operability"
.PP
Returns the operability status of the chassis.
.PP
\fIpower\fR
.IX Subsection "power"
.PP
Returns the power status of the chassis.
.PP
\fIpresence\fR
.IX Subsection "presence"
.PP
Returns the presence status of the chassis.
.PP
\fIseeprom_oper_state\fR
.IX Subsection "seeprom_oper_state"
.PP
Returns the \s-1SEEPROM\s0 operational status of the chassis.
.PP
\fIserial\fR
.IX Subsection "serial"
.PP
Returns the serial number of the chassis.
.PP
\fIthermal\fR
.IX Subsection "thermal"
.PP
Returns the thermal status of the chassis.
.PP
\fIvendor\fR
.IX Subsection "vendor"
.PP
Returns the vendor information for the chassis.
.SH "NOTES"
.IX Header "NOTES"
.SS "Caching Methods"
.IX Subsection "Caching Methods"
Several methods in the module return cached objects that have been previously 
retrieved by querying \s-1UCSM,\s0 this is done to improve the performance of methods 
where a cached copy is satisfactory for the intended purpose.  The trade off 
for the speed and lower resource requirement is that the cached copy is not 
guaranteed to be an up-to-date representation of the current state of the 
object.
.PP
As a matter of convention, all caching methods are named after the singular 
object (i.e. \fBinterconnect()\fR, \fBchassis()\fR) whilst non-caching methods are named 
\&\fIget_<object\fR>.  Non-caching methods will always query \s-1UCSM\s0 for the object,
as will requests for cached objects not present in cache.
.SH "AUTHOR"
.IX Header "AUTHOR"
Luke Poskitt, \f(CW\*(C`<ltp at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to 
\&\f(CW\*(C`bug\-cisco\-ucs\-chassis at rt.cpan.org\*(C'\fR, or through the web interface at 
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Cisco\-UCS\-Chassis>.  I will 
be notified, and then you'll automatically be notified of progress on your bug 
as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Cisco::UCS::Chassis
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Cisco\-UCS\-Chassis>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Cisco\-UCS\-Chassis>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Cisco\-UCS\-Chassis>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Cisco\-UCS\-Chassis/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2012 Luke Poskitt.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
