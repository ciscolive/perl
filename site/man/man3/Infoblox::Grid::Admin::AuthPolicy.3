.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Admin::AuthPolicy 3"
.TH Infoblox::Grid::Admin::AuthPolicy 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Admin::AuthPolicy \- Authentication Policy object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object represents the grid authentication policy.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to the Grid Authentication Policy object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the grid authentication policy from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
No parameters are required.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my $auth_policy = $session\->get(
\&         object => "Infoblox::Grid::Admin::AuthPolicy",
\&     );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify the grid authentication policy on the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Changing the default group
\& $auth_policy\->default_group($group);
\& #Submit modification
\& my $response = $session\->modify( $auth_policy );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of the grid authentication policy.
.SS "admin_groups( )"
.IX Subsection "admin_groups( )"
.RS 4
Use this method to set or retrieve the list of local admin groups that are mapped to remote administration groups. The default value is an empty list.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::Grid::Admin::Group objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns \*(L"true\*(R" when the modification succeeds, and returns \*(L"false\*(R" when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the admin groups list
\& my $admin_groups = $auth_policy\->admin_groups();
\&
\& #Modify the admin_groups
\& $auth_policy\->admin_groups([$admingroup1,$admingroup2]);
.Ve
.RE
.RS 4
.RE
.SS "auth_services( )"
.IX Subsection "auth_services( )"
.RS 4
Use this method to set or retrieve the list of authentication services that grid members use to authenticate admins. The default is a list that contains the LocalUserAuthService object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains an ordered list of 
Infoblox::Grid::Admin::AdAuthService, 
Infoblox::Grid::Admin::LocalUserAuthService, 
Infoblox::Grid::Admin::TACACSPlusAuthService, 
Infoblox::LDAP::AuthService, 
Infoblox::Grid::Admin::CertificateAuthService, 
Infoblox::Grid::Admin::RadiusAuthService 
objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns \*(L"true\*(R" when the modification succeeds, and returns \*(L"false\*(R" when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the services list
\& my $auth_services = $auth_policy\->auth_services();
\& #Modify the auth_services
\& $auth_policy\->auth_services([$radius1, $local, $ad2]);
.Ve
.RE
.RS 4
.RE
.SS "default_group( )"
.IX Subsection "default_group( )"
.RS 4
Use this method to set or retrieve the default admin group that provides authentication in case no valid group is found. The default value is none (represented by undef).
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::Admin::Group object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns \*(L"true\*(R" when the modification succeeds, and returns \*(L"false\*(R" when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the default group
\& my $default_group = $auth_policy\->default_group();
\&
\& #Modify the default_group
\& $auth_policy\->default_group($group2);
.Ve
.RE
.RS 4
.RE
.SS "usage_type( )"
.IX Subsection "usage_type( )"
.RS 4
Use this method to set or retrieve remote policies usage.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify '\s-1FULL\s0' to define the list of remote users, their passwords and their group ownership, and specify '\s-1AUTH_ONLY\s0' to validate passwords of local users only. The default value is '\s-1FULL\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns \*(L"true\*(R" when the modification succeeds, and returns \*(L"false\*(R" when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get usage_type value 
\& my $usage_type = $auth_policy\->usage_type();
\&
\& #Modify usage_type value
\& $auth_policy\->usage_type(\*(AqAUTH_ONLY\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as get and modify. This sample code also includes error handling for the operations.
.PP
\&\fB#Preparation prior to getting and modifying an auth policy object\fR
.PP
.Vb 2
\& use strict;
\& use Infoblox;
\&
\& #Creating a session to appliance.
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\&     );
\& unless( $session ){
\&     die("Constructor for session failed:",
\&     Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print" Session object created successfully \en";
.Ve
.PP
\&\fB#Retrieving the auth policy object\fR
.PP
.Vb 4
\& my $policy = $session\->get(
\&                            object => \*(AqInfoblox::Grid::Admin::AuthPolicy\*(Aq,
\&                           ) || die("Retrieval of the auth policy failed: ",
\&                  Infoblox::status_code() . ":" . Infoblox::status_detail());
.Ve
.PP
\&\fB#Retrieving the local user auth service\fR
.PP
.Vb 4
\& my $local_auth = $session\->get(
\&                                object => \*(AqInfoblox::Grid::Admin::LocalUserAuthService\*(Aq,
\&                               ) || die("Retrieval of the local user auth service failed: ",
\&                  Infoblox::status_code() . ":" . Infoblox::status_detail());
.Ve
.PP
\&\fB#Creation of a Radius auth server/service pair\fR
.PP
.Vb 6
\& my $ads = Infoblox::Grid::Admin::RadiusAuthServer\->new(
\&                                                        fqdn_or_ip => \*(Aq10.1.0.1\*(Aq,
\&                                                        shared_secret => \*(Aqsecret\*(Aq,
\&                                                       ) ||
\&   die("Couldn\*(Aqt create the auth server: ",
\&       Infoblox::status_code() . ":" . Infoblox::status_detail());
\&
\& my $service = Infoblox::Grid::Admin::RadiusAuthService\->new(
\&                                                             acct_timeout => 1100,
\&                                                             auth_timeout => 1100,
\&                                                             name => \*(Aqsome.name.com\*(Aq,
\&                                                             radius_servers => [$ads]
\&                                                            ) ||
\&   die("Couldn\*(Aqt create the auth service: ",
\&       Infoblox::status_code() . ":" . Infoblox::status_detail());
\&
\& $session\->add($service) || die("Couldn\*(Aqt add the auth service: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
.Ve
.PP
\&\fB#Retrieving the auth service created above\fR
.PP
.Vb 5
\& my $radius_auth = $session\->get(
\&                                 object => \*(AqInfoblox::Grid::Admin::RadiusAuthService\*(Aq,
\&                                 name   => \*(Aqsome.name.com\*(Aq,
\&                          ) || die("Retrieval of the radius auth service failed: ",
\&                  Infoblox::status_code() . ":" . Infoblox::status_detail());
.Ve
.PP
\&\fB#Modify the authpolicy\fR
.PP
.Vb 1
\& $policy\->auth_services([$radius_auth,$local_auth]);
\&
\& $session\->modify($policy) || die("Policy modify failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::Admin::Group, 
Infoblox::Grid::Admin::AdAuthService, 
Infoblox::Grid::Admin::TACACSPlusAuthService, 
Infoblox::Grid::Admin::LocalUserAuthService, 
Infoblox::Grid::Admin::RadiusAuthService, 
Infoblox::LDAP::AuthService, 
Infoblox::Grid::Admin::CertificateAuthService, 
Infoblox::Session\->\fBget()\fR, 
Infoblox::Session\->\fBget()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
