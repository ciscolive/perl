.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::ElasticSearch::Utilities::Connection 3"
.TH App::ElasticSearch::Utilities::Connection 3 "2020-09-16" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::ElasticSearch::Utilities::Connection \- Abstract the connection element
.SH "VERSION"
.IX Header "VERSION"
version 7.8
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
For most users, this code will never be called directly since this module
doesn't handle parameter parsing on the \s-1CLI.\s0  To get an object, instead call:
.PP
.Vb 1
\&    use App::ElasticSearch::Utilities qw(es_connect);
\&
\&    my $es = es_connect();
\&
\&    my $http_response_obj = $es\->request(\*(Aq_search\*(Aq,
\&        {
\&            index=>\*(Aqlogstash\*(Aq,
\&            uri_param => {
\&                size => 10,
\&            }
\&        },
\&        {
\&            query => {
\&                query_string => "program:sshd",
\&            }
\&        }
\&    );
.Ve
.PP
Though even this is overkill.  The \fBes_request\fR method maintains compatability with older versions and emulates
the \s-1API\s0 you'd expect from \fBElastijk\fR.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "host"
.IX Subsection "host"
Hostname or ip to connect to, default '\fBlocalhost\fR'
.SS "port"
.IX Subsection "port"
Port to connect the \s-1HTTP\s0 transport for the ElasticSearch cluster, default is \fB9200\fR
.SS "proto"
.IX Subsection "proto"
Protocol to use, defaults to '\fBhttp\fR'.
.PP
This module converts from the performance concerned backend of \fBHijk\fR and \fBElastijk\fR, to the feature
rich \fBLWP::UserAgent\fR.  This means we can now support \s-1TLS\s0 communication to the \s-1ES\s0 back-end and things like
basic authentication.
.SS "timeout"
.IX Subsection "timeout"
Connection and Read Timeout for the \s-1HTTP\s0 connection, defaults to \fB10\fR seconds.
.SS "ua"
.IX Subsection "ua"
Lazy built \fBLWP::UserAgent\fR to access LWP::UserAgent directly.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "request( $command, { index => ... uri_param => { size => 1 } }, $body )"
.el .SS "request( \f(CW$command\fP, { index => ... uri_param => { size => 1 } }, \f(CW$body\fP )"
.IX Subsection "request( $command, { index => ... uri_param => { size => 1 } }, $body )"
This method provides a wrapper between the Hijk/Elastijk request syntax and the
LWP::UserAgent flow.  It's return value is the \fBHTTP::Response\fR object from
\&\fBLWP::UserAgent\fR instead of the more simplistic return values of \fBHijk\fR and
\&\fBElastijk\fR.  Use \fBApp::ElasticSearch::Utilities::es_request\fR for a simpler
interface.
.SS "exists( index => 'name' )"
.IX Subsection "exists( index => 'name' )"
Takes the name of an index, returns true if the index exists, false otherwise.
.SS "put( body => ... , index => ... )"
.IX Subsection "put( body => ... , index => ... )"
Parameter \fBbody\fR is required.  Puts something to an index.  This is often used to
put settings and/or mappings to an index.
.PP
Returns a list containing the \s-1HTTP\s0 Status Code, and the Response Content.
.SS "bulk( body => ..., index => ... )"
.IX Subsection "bulk( body => ..., index => ... )"
Parameter \fBbody\fR is required.  The body should be an array containing the command and documents to send to the
ElasticSearch bulk \s-1API,\s0 see: Bulk \s-1API\s0 <https://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-bulk.html>
.PP
Returns a list containing the \s-1HTTP\s0 Status Code, and the Response Content.
.SH "AUTHOR"
.IX Header "AUTHOR"
Brad Lhotsky <brad@divisionbyzero.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Brad Lhotsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The (three\-clause) BSD License
.Ve
