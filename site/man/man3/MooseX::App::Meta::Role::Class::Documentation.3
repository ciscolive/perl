.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::App::Meta::Role::Class::Documentation 3"
.TH MooseX::App::Meta::Role::Class::Documentation 3 "2019-05-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::App::Meta::Role::Class::Documentation \- Meta class role for command classes
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This meta class role will automatically be applied to all command classes.
This documentation is only of interest if you intend to write plugins for
MooseX::App.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.SS "command_short_description"
.IX Subsection "command_short_description"
Read/set the short command description. Will be extracted from the Pod \s-1NAME\s0
or \s-1ABSTRACT\s0 section if not set. Alternative this will be taken from the
DistZilla \s-1ABSTRACT\s0 tag.
.SS "command_long_description"
.IX Subsection "command_long_description"
Read/set the long command description. Will be extracted from the Pod
\&\s-1DESCRIPTION\s0 or \s-1OVERVIEW\s0 section if not set.
.SS "command_usage"
.IX Subsection "command_usage"
Read/set the long command usage. Will be extracted from the Pod
\&\s-1SYNOPSIS\s0 or \s-1USAGE\s0 section if not set. If these Pod sections are not defined
the usage will be autogenerated.
.SS "command_short_description_predicate"
.IX Subsection "command_short_description_predicate"
Checks if command_short_description is available
.SS "command_long_description_predicate"
.IX Subsection "command_long_description_predicate"
Checks if command_long_description is available
.SS "command_usage_predicate"
.IX Subsection "command_usage_predicate"
Checks if command_usage is available
.SS "command_strict"
.IX Subsection "command_strict"
Read/set the strict command flag. If strict is enabled the command will
terminate with an error message if superfluous/unknown positional parameters
are supplied. If disabled all extra parameters will be copied to the
extra_argv attribute.
.PP
The app_strict function in the app classes allows one to set this option
globally.
.SH "METHODS"
.IX Header "METHODS"
.SS "_build_command_pod"
.IX Subsection "_build_command_pod"
Parses the Pod from the command class.
