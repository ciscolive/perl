.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MaxMind::DB::Reader 3"
.TH MaxMind::DB::Reader 3 "2019-06-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MaxMind::DB::Reader \- Read MaxMind DB files and look up IP addresses
.SH "VERSION"
.IX Header "VERSION"
version 1.000014
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $reader = MaxMind::DB::Reader\->new( file => \*(Aqpath/to/database.mmdb\*(Aq );
\&
\&    my $record = $reader\->record_for_address(\*(Aq1.2.3.4\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a low-level interface to the MaxMind \s-1DB\s0 file
format <http://maxmind.github.io/MaxMind-DB/>.
.PP
If you are looking for an interface to MaxMind's GeoIP2 or GeoLite2
downloadable databases <http://dev.maxmind.com/geoip/>, you should also check
out the GeoIP2 distribution. That distribution provides a higher level \s-1OO\s0
interface to those databases.
.PP
This \s-1API\s0 will work with any MaxMind \s-1DB\s0 databases, regardless of whether it is
a GeoIP2 database or not. In addition, if speed is critical, this \s-1API\s0 will
always be faster than the GeoIP2 modules, since it returns results as a raw
Perl data structure rather than as an object.
.SH "PURE PERL VERSUS XS"
.IX Header "PURE PERL VERSUS XS"
The MaxMind-DB-Reader distribution ships with a single pure Perl
implementation of the Reader \s-1API.\s0 There is a separate distribution on \s-1CPAN,\s0
MaxMind::DB::Reader::XS, that provides an \s-1XS\s0 implementation which links
against libmaxminddb <http://maxmind.github.io/libmaxminddb/>.
.PP
The \s-1XS\s0 implementation is approximately 100 times faster than the pure Perl
implementation, so if speed is important to you, we highly recommend that you
install it!
.PP
If you install the \s-1XS\s0 implementation it will be automatically loaded. You do
not need to change your code to take advantage of it.
.SH "API"
.IX Header "API"
This module provides the following \s-1API:\s0
.ie n .SS "MaxMind::DB::Reader\->new( file => $path )"
.el .SS "MaxMind::DB::Reader\->new( file => \f(CW$path\fP )"
.IX Subsection "MaxMind::DB::Reader->new( file => $path )"
This method returns a new reader object. Note that the class of the object
returned will actually be either MaxMind::DB::Reader::PP or
MaxMind::DB::Reader::XS.
.PP
If you need to check that an object is a valid reader, you should check that
the object does the \f(CW\*(C`MaxMind::DB::Reader::Role::Reader\*(C'\fR role.
.PP
The \*(L"file\*(R" parameter is a required attribute for the constructor. It must be a
string containing a path to a file. The constructor will die if the file
provided is not readable.
.PP
You can also pass an additional parameter, \*(L"data_source\*(R", which must be a valid
filehandle. This is useful in testing. For example, you can have the reader
read from a filehandle opened to a scalar reference. Under normal usage, the
reader simply opens the provided file to read from.
.ie n .SS "$reader\->record_for_address($ip_address)"
.el .SS "\f(CW$reader\fP\->record_for_address($ip_address)"
.IX Subsection "$reader->record_for_address($ip_address)"
This method takes an IPv4 or IPv6 address as a string. This can be either a
dotted quad (\f(CW1.2.3.4\fR) or any valid IPv6 format (\f(CW\*(C`abcd::1234\*(C'\fR,
\&\f(CW\*(C`::1.2.3.4\*(C'\fR, etc.).
.PP
This method will die if the address is not a valid \s-1IP\s0 address.
.PP
The method returns the data associated with the \s-1IP\s0 address. Depending on the
contents of the database, this can be a scalar or a reference to an array or
hash.
.ie n .SS "$reader\->iterate_search_tree( $data_callback, $node_callback )"
.el .SS "\f(CW$reader\fP\->iterate_search_tree( \f(CW$data_callback\fP, \f(CW$node_callback\fP )"
.IX Subsection "$reader->iterate_search_tree( $data_callback, $node_callback )"
This method iterates over the entire search tree, calling the callbacks you
provided for each data record and node in the tree.
.PP
Both callbacks are optional (although calling this with neither will do a lot
of work for no good reason).
.PP
The node callback is called for every node in the database's search tree. This
callback is called with three arguments. These are the node's number (which is
based on its position in the file) and the values of its left and right
records. These values are themselves numbers. See the MaxMind \s-1DB\s0
spec <http://maxmind.github.io/MaxMind-DB/> for more details on what node
record values mean.
.PP
The data callback is called for records that point to the database's data
section. The first two arguments identify the network that the data record
applies to. The first argument is an \s-1IP\s0 address as an integer and the second
is a network mask length. The final argument is the data associated with the
network.
.ie n .SS "$reader\->\fBmetadata()\fP"
.el .SS "\f(CW$reader\fP\->\fBmetadata()\fP"
.IX Subsection "$reader->metadata()"
This method returns a MaxMind::DB::Metadata object for the database.
.ie n .SS "$reader\->\fBfile()\fP"
.el .SS "\f(CW$reader\fP\->\fBfile()\fP"
.IX Subsection "$reader->file()"
This method returns the file path passed to the constructor.
.SH "VERSIONING POLICY"
.IX Header "VERSIONING POLICY"
This module uses semantic versioning as described by
<http://semver.org/>. Version numbers can be read as X.YYYZZZ, where X is the
major number, \s-1YYY\s0 is the minor number, and \s-1ZZZ\s0 is the patch number.
.SH "SUPPORT"
.IX Header "SUPPORT"
This module is deprecated and will only receive fixes for major bugs and
security vulnerabilities. New features and functionality will not be added.
.PP
Please report all issues with this code using the GitHub issue tracker at
<https://github.com/maxmind/MaxMind\-DB\-Reader\-perl/issues>.
.PP
Bugs may be submitted through <https://github.com/maxmind/MaxMind\-DB\-Reader\-perl/issues>.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Dave Rolsky <drolsky@maxmind.com>
.IP "\(bu" 4
Olaf Alders <oalders@maxmind.com>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Greg Oschwald <goschwald@maxmind.com>
.IP "\(bu" 4
Mark Fowler <mark@twoshortplanks.com>
.IP "\(bu" 4
Mateu X Hunter <mhunter@maxmind.com>
.IP "\(bu" 4
Ran Eilam <reilam@maxmind.com>
.IP "\(bu" 4
William Stevenson <skyblue@skybluecircles.com>
.IP "\(bu" 4
Will Storey <wstorey@maxmind.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2019 by MaxMind, Inc.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
