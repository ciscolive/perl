.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::ExcelXML::XMLReader::NamedStyles 3"
.TH Spreadsheet::Reader::ExcelXML::XMLReader::NamedStyles 3 "2017-04-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::ExcelXML::XMLReader::NamedStyles \- Support for Excel 2003 XML Styles files
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 1
\&        !!!! Example code \- will not run standalone !!!!
\&
\&        use MooseX::ShortCut::BuildInstance qw( build_instance );
\&        use Spreadsheet::Reader::ExcelXML::XMLReader::NamedStyles;
\&        use Spreadsheet::Reader::ExcelXML::XMLReader;
\&        my      $test_instance  =       build_instance(
\&                        package => \*(AqStylesInterface\*(Aq,
\&                        superclasses => [\*(AqSpreadsheet::Reader::ExcelXML::XMLReader\*(Aq],
\&                        add_roles_in_sequence => [
\&                                \*(AqSpreadsheet::Reader::ExcelXML::XMLReader::PositionStyles\*(Aq,
\&                        ],
\&                        file => ! Styles file handle with extracted content !
\&                        workbook_inst => $workbook_instance,<\-\-\- Built elswhere!!!
\&                );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This role is written to provide the methods 'get_format' and 'get_default_format' for
the styles file reading where the styles file elements are called out by name.  This
generally implies that the styles section was a node in a flat xml file written to the
Microsoft (\s-1TM\s0) Excel 2003 xml format.  The extration should be accomplished external
to this instance creation usually with \*(L"extract_file\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader.
.SS "Requires"
.IX Subsection "Requires"
These are the methods required by this role and their default provider.  All
methods are imported straight across with no re-naming.
.Sp
.RS 4
\&\*(L"get_defined_conversion( \f(CW$position\fR )\*(R" in Spreadsheet::Reader::Format::ParseExcelFormatStrings
.Sp
l<Spreadsheet::Reader::Format::ParseExcelFormatStrings/parse_excel_format_string( \f(CW$string\fR, \f(CW$name\fR )>
.Sp
\&\*(L"set_defined_excel_formats( \f(CW%args\fR )\*(R" in Spreadsheet::Reader::Format::FmtDefault
.Sp
\&\*(L"good_load\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"start_the_file_over\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"close_the_file\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"advance_element_position( \f(CW$element\fR, [$iterations] )\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"parse_element\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"current_named_node\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"squash_node( \f(CW$node\fR )\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"set_error( \f(CW$error_string\fR )\*(R" in Spreadsheet::Reader::ExcelXML::Error
.RE
.SS "Method(s)"
.IX Subsection "Method(s)"
These are the methods mandated by this interface.
.PP
\fIget_format( \f(CI$name\fI, [$header], [$exclude_header] )\fR
.IX Subsection "get_format( $name, [$header], [$exclude_header] )"
.Sp
.RS 4
\&\fBDefinition:\fR This will return the styles information from the identified \f(CW$name\fR in the
style node.  The target name is usually drawn from the cell data stored in the worksheet.
The information is returned as a perl hash ref.  Since the styles data is in two tiers it
finds all the subtier information for each indicated piece and appends them to the hash
ref as values for each type key.
.Sp
\&\fBAccepts position 0:\fR \f(CW$name\fR = a (sub) node name indicating which styles node should be
returned
.Sp
\&\fBAccepts position 1:\fR \f(CW$header\fR = the target header key (use the
\&\*(L"Attributes\*(R" in Spreadsheet::Reader::ExcelXML::Cell that are cell formats as the definition
of range for this.)  It will cause only this header subset to be returned
.Sp
\&\fBAccepts position 2:\fR \f(CW$exclude_header\fR = the target header key (use the
\&\*(L"Attributes\*(R" in Spreadsheet::Reader::ExcelXML::Cell that are cell formats as the definition
of range for this.)  It will exclude the header from the returned data set.
.Sp
\&\fBReturns:\fR a hash ref of data
.RE
.PP
\fIget_default_format( [$header], [$exclude_header] )\fR
.IX Subsection "get_default_format( [$header], [$exclude_header] )"
.Sp
.RS 4
\&\fBDefinition:\fR For any cell that does not have a unquely identified format excel generally
stores a default format for the remainder of the sheet.  This will return the two
tiered default styles information.  The information is returned in the same format as the
get_format method.
.Sp
\&\fBAccepts position 0:\fR \f(CW$header\fR = the target header key (use the
\&\*(L"Attributes\*(R" in Spreadsheet::Reader::ExcelXML::Cell that are cell formats as the definition
of range for this.)  It will cause only this header subset to be returned
.Sp
\&\fBAccepts position 1:\fR \f(CW$exclude_header\fR = the target header key (optional at position 2) (use the
\&\*(L"Attributes\*(R" in Spreadsheet::Reader::ExcelXML::Cell that are cell formats as the definition
of range for this.)  It will exclude the header from the returned data set.
.Sp
\&\fBReturns:\fR a hash ref of data
.RE
.PP
\fIload_unique_bits\fR
.IX Subsection "load_unique_bits"
.Sp
.RS 4
\&\fBDefinition:\fR When the xml file first loads this is available to pull customized data.
It mostly pulls metadata and stores it in hidden attributes for use later.  If all goes
according to plan it sets \*(L"good_load\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader to 1.
.Sp
\&\fBAccepts:\fR Nothing
.Sp
\&\fBReturns:\fR Nothing
.RE
.SS "Attributes"
.IX Subsection "Attributes"
Data passed to new when creating an instance with this role. For
modification of this(ese) attribute(s) see the listed 'attribute
methods'.  For more information on attributes see
Moose::Manual::Attributes.  The easiest way to modify this(ese)
attribute(s) is during instance creation before it is passed to the
workbook or parser.
.PP
\fIcache_positions\fR
.IX Subsection "cache_positions"
.Sp
.RS 4
\&\fBDefinition:\fR Especially for sheets with lots of stored formats the
parser can slow way down when accessing each postion.  This is
because the are not stored sequentially and the reader is a \s-1JIT\s0 linear
parser.  To go back it must restart and index through each position till
it gets to the right place.  This is especially true for excel sheets
that have experienced any significant level of manual intervention prior
to being read.  This attribute sets caching (default on) for styles
so the parser builds and stores all the styles settings at the beginning.
If the file is cached it will close and release the file handle in order
to free up some space. (a small win in exchange for the space taken by
the cache).
.Sp
\&\fBDefault:\fR 1 = caching is on
.Sp
\&\fBRange:\fR 1|0
.Sp
\&\fBAttribute required:\fR yes
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
none \- (will be autoset by \*(L"cache_positions\*(R" in Spreadsheet::Reader::ExcelXML)
.RE
.RE
.RS 4
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::Reader::ExcelXML/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing yet
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Spreadsheet::Reader::ExcelXML \- the package
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::Read \- generic Spreadsheet reader
.Sp
Spreadsheet::ParseExcel \- Excel binary version 2003 and earlier (.xls files)
.Sp
Spreadsheet::XLSX \- Excel version 2007 and later
.Sp
Spreadsheet::ParseXLSX \- Excel version 2007 and later
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
