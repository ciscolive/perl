.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::IEEE802dot11 3"
.TH SNMP::Info::IEEE802dot11 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::IEEE802dot11 \- SNMP Interface to data from IEEE802dot11\-MIB
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Miller
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    my $dot11 = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\&    my $class = $dot11\->class();
\&    print " Using device sub class : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SNMP::Info::IEEE802dot11 is a subclass of SNMP::Info that provides an
interface to \fIIEEE802dot11\-MIB\fR.  This \s-1MIB\s0 is used in standards based
802.11 wireless devices.
.PP
Use or create a subclass of SNMP::Info that inherits this one.
Do not use directly.
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.RS 4
None.
.RE
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fIIEEE802dot11\-MIB\fR" 4
.IX Item "IEEE802dot11-MIB"
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP\s0
.ie n .IP "$dot11\->\fBvendor()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBvendor()\fR" 4
.IX Item "$dot11->vendor()"
Tries to discover the vendor from \fBdot11_man_name()\fR \- returns lower case
of the first word in the first instance found.
.ie n .IP "$dot11\->\fBmodel()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBmodel()\fR" 4
.IX Item "$dot11->model()"
Tries to discover the model from \fBdot11_prod_name()\fR \- returns lower case
of the first instance found.
.ie n .IP "$dot11\->\fBos_ver()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBos_ver()\fR" 4
.IX Item "$dot11->os_ver()"
Tries to discover the operating system version from \fBdot11_prod_ver()\fR \- returns
string of numeric and decimals in the first instance found.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.ie n .IP "$dot11\->\fBi_ssidlist()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBi_ssidlist()\fR" 4
.IX Item "$dot11->i_ssidlist()"
Returns reference to hash.  \s-1SSID\s0's recognized by the radio interface.
.Sp
(\f(CW\*(C`dot11DesiredSSID\*(C'\fR)
.ie n .IP "$dot11\->\fBi_80211channel()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBi_80211channel()\fR" 4
.IX Item "$dot11->i_80211channel()"
Returns reference to hash.  Current operating frequency channel of the radio
interface.
.ie n .IP "$dot11\->\fBdot11_cur_tx_pwr_mw()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_cur_tx_pwr_mw()\fR" 4
.IX Item "$dot11->dot11_cur_tx_pwr_mw()"
Returns reference to hash.  Current transmit power, in milliwatts, of the
radio interface.
.ie n .SS "Dot11 Phy \s-1OFDM\s0 Table  (""dot11PhyOFDMTable"")"
.el .SS "Dot11 Phy \s-1OFDM\s0 Table  (\f(CWdot11PhyOFDMTable\fP)"
.IX Subsection "Dot11 Phy OFDM Table (dot11PhyOFDMTable)"
.ie n .IP "$dot11\->\fBdot11_cur_freq()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_cur_freq()\fR" 4
.IX Item "$dot11->dot11_cur_freq()"
(\f(CW\*(C`dot11CurrentFrequency\*(C'\fR)
.ie n .SS "Dot11 Phy \s-1DSSS\s0 Table  (""dot11PhyDSSSTable"")"
.el .SS "Dot11 Phy \s-1DSSS\s0 Table  (\f(CWdot11PhyDSSSTable\fP)"
.IX Subsection "Dot11 Phy DSSS Table (dot11PhyDSSSTable)"
.ie n .IP "$dot11\->\fBdot11_cur_ch()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_cur_ch()\fR" 4
.IX Item "$dot11->dot11_cur_ch()"
(\f(CW\*(C`dot11CurrentChannel\*(C'\fR)
.ie n .SS "Dot11 Phy Operation Table  (""dot11PhyOperationTable"")"
.el .SS "Dot11 Phy Operation Table  (\f(CWdot11PhyOperationTable\fP)"
.IX Subsection "Dot11 Phy Operation Table (dot11PhyOperationTable)"
.ie n .IP "$dot11\->\fBdot11_phy_type()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_phy_type()\fR" 4
.IX Item "$dot11->dot11_phy_type()"
(\f(CW\*(C`dot11PHYType\*(C'\fR)
.ie n .IP "$dot11\->\fBdot11_reg_dom()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_reg_dom()\fR" 4
.IX Item "$dot11->dot11_reg_dom()"
(\f(CW\*(C`dot11CurrentRegDomain\*(C'\fR)
.ie n .SS "Dot11 Resource Information Table  (""dot11ResourceInfoTable"")"
.el .SS "Dot11 Resource Information Table  (\f(CWdot11ResourceInfoTable\fP)"
.IX Subsection "Dot11 Resource Information Table (dot11ResourceInfoTable)"
.ie n .IP "$dot11\->\fBdot11_prod_ver()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_prod_ver()\fR" 4
.IX Item "$dot11->dot11_prod_ver()"
(\f(CW\*(C`dot11manufacturerProductVersion\*(C'\fR)
.ie n .IP "$dot11\->\fBdot11_prod_name()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_prod_name()\fR" 4
.IX Item "$dot11->dot11_prod_name()"
(\f(CW\*(C`dot11manufacturerProductName\*(C'\fR)
.ie n .IP "$dot11\->\fBdot11_man_name()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_man_name()\fR" 4
.IX Item "$dot11->dot11_man_name()"
(\f(CW\*(C`dot11manufacturerName\*(C'\fR)
.ie n .SS "Dot11 Operation Table  (""dot11OperationTable"")"
.el .SS "Dot11 Operation Table  (\f(CWdot11OperationTable\fP)"
.IX Subsection "Dot11 Operation Table (dot11OperationTable)"
.ie n .IP "$dot11\->\fBdot11_mac()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_mac()\fR" 4
.IX Item "$dot11->dot11_mac()"
(\f(CW\*(C`dot11MACAddress\*(C'\fR)
.ie n .SS "Dot11 Station Configuration Table  (""dot11StationConfigTable"")"
.el .SS "Dot11 Station Configuration Table  (\f(CWdot11StationConfigTable\fP)"
.IX Subsection "Dot11 Station Configuration Table (dot11StationConfigTable)"
.ie n .IP "$dot11\->\fBdot11_bss_type()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_bss_type()\fR" 4
.IX Item "$dot11->dot11_bss_type()"
(\f(CW\*(C`dot11DesiredBSSType\*(C'\fR)
.ie n .IP "$dot11\->\fBdot11_pwr_mode()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_pwr_mode()\fR" 4
.IX Item "$dot11->dot11_pwr_mode()"
(\f(CW\*(C`dot11PowerManagementMode\*(C'\fR)
.ie n .IP "$dot11\->\fBdot11_sta_id()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_sta_id()\fR" 4
.IX Item "$dot11->dot11_sta_id()"
(\f(CW\*(C`dot11StationID\*(C'\fR)
.ie n .SS "Dot11 Transmission Power Table  (""dot11PhyTxPowerTable"")"
.el .SS "Dot11 Transmission Power Table  (\f(CWdot11PhyTxPowerTable\fP)"
.IX Subsection "Dot11 Transmission Power Table (dot11PhyTxPowerTable)"
.ie n .IP "$dot11\->\fBdot11_cur_tx_pwr()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_cur_tx_pwr()\fR" 4
.IX Item "$dot11->dot11_cur_tx_pwr()"
(\f(CW\*(C`dot11CurrentTxPowerLevel\*(C'\fR)
.ie n .IP "$dot11\->\fBdot11_tx_pwr_level_1()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_tx_pwr_level_1()\fR" 4
.IX Item "$dot11->dot11_tx_pwr_level_1()"
(\f(CW\*(C`dot11TxPowerLevel1\*(C'\fR)
.ie n .IP "$dot11\->\fBdot11_tx_pwr_level_2()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_tx_pwr_level_2()\fR" 4
.IX Item "$dot11->dot11_tx_pwr_level_2()"
(\f(CW\*(C`dot11TxPowerLevel2\*(C'\fR)
.ie n .IP "$dot11\->\fBdot11_tx_pwr_level_3()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_tx_pwr_level_3()\fR" 4
.IX Item "$dot11->dot11_tx_pwr_level_3()"
(\f(CW\*(C`dot11TxPowerLevel3\*(C'\fR)
.ie n .IP "$dot11\->\fBdot11_tx_pwr_level_4()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_tx_pwr_level_4()\fR" 4
.IX Item "$dot11->dot11_tx_pwr_level_4()"
(\f(CW\*(C`dot11TxPowerLevel4\*(C'\fR)
.ie n .IP "$dot11\->\fBdot11_tx_pwr_level_5()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_tx_pwr_level_5()\fR" 4
.IX Item "$dot11->dot11_tx_pwr_level_5()"
(\f(CW\*(C`dot11TxPowerLevel5\*(C'\fR)
.ie n .IP "$dot11\->\fBdot11_tx_pwr_level_6()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_tx_pwr_level_6()\fR" 4
.IX Item "$dot11->dot11_tx_pwr_level_6()"
(\f(CW\*(C`dot11TxPowerLevel6\*(C'\fR)
.ie n .IP "$dot11\->\fBdot11_tx_pwr_level_7()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_tx_pwr_level_7()\fR" 4
.IX Item "$dot11->dot11_tx_pwr_level_7()"
(\f(CW\*(C`dot11TxPowerLevel7\*(C'\fR)
.ie n .IP "$dot11\->\fBdot11_tx_pwr_level_8()\fR" 4
.el .IP "\f(CW$dot11\fR\->\fBdot11_tx_pwr_level_8()\fR" 4
.IX Item "$dot11->dot11_tx_pwr_level_8()"
(\f(CW\*(C`dot11TxPowerLevel8\*(C'\fR)
