.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SQL::Composer::Select 3"
.TH SQL::Composer::Select 3 "2017-06-02" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH ""
.IX Header ""
SQL::Composer::Select \- \s-1SELECT\s0 statement
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    my $expr =
\&      SQL::Composer::Select\->new(from => \*(Aqtable\*(Aq, columns => [\*(Aqa\*(Aq, \*(Aqb\*(Aq]);
\&
\&    my $sql = $expr\->to_sql;        # \*(AqSELECT \`table\`.\`a\`,\`table\`.\`b\` FROM \`table\`\*(Aq
\&    my @bind = $expr\->to_bind;      # []
\&
\&    $expr\->from_rows([[\*(Aqc\*(Aq, \*(Aqd\*(Aq]]); # [{a => \*(Aqc\*(Aq, b => \*(Aqd\*(Aq}]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Builds \f(CW\*(C`SELECT\*(C'\fR statement and converts (\f(CW\*(C`from_rows()\*(C'\fR) received arrayref data
to hashref with appropriate column names as keys and joins as nested values.
.ie n .SS "Select column with ""AS"""
.el .SS "Select column with \f(CWAS\fP"
.IX Subsection "Select column with AS"
.Vb 4
\&    my $expr = SQL::Composer::Select\->new(
\&        from    => \*(Aqtable\*(Aq,
\&        columns => [{\-col => \*(Aqfoo\*(Aq => \-as => \*(Aqbar\*(Aq}]
\&    );
\&
\&    my $sql = $expr\->to_sql;   # \*(AqSELECT \`table\`.\`foo\` AS \`bar\` FROM \`table\`\*(Aq
\&    my @bind = $expr\->to_bind; # []
\&    $expr\->from_rows([[\*(Aqc\*(Aq]]); # [{bar => \*(Aqc\*(Aq}]
.Ve
.SS "Select column with raw \s-1SQL\s0"
.IX Subsection "Select column with raw SQL"
.Vb 2
\&    my $expr =
\&      SQL::Composer::Select\->new(from => \*(Aqtable\*(Aq, columns => [\e\*(AqCOUNT(*)\*(Aq]);
\&
\&    my $sql = $expr\->to_sql;   # \*(AqSELECT COUNT(*) FROM \`table\`\*(Aq
\&    my @bind = $expr\->to_bind; # [];
\&    $expr\->from_rows([[\*(Aqc\*(Aq]]); # [{\*(AqCOUNT(*)\*(Aq => \*(Aqc\*(Aq}]
.Ve
.ie n .SS "Select with ""WHERE"""
.el .SS "Select with \f(CWWHERE\fP"
.IX Subsection "Select with WHERE"
For more details see SQL::Composer::Expression.
.PP
.Vb 5
\&    my $expr = SQL::Composer::Select\->new(
\&        from    => \*(Aqtable\*(Aq,
\&        columns => [\*(Aqa\*(Aq, \*(Aqb\*(Aq],
\&        where   => [a => \*(Aqb\*(Aq]
\&    );
\&
\&    my $sql = $expr\->to_sql;   # \*(AqSELECT \`table\`.\`a\`,\`table\`.\`b\`
\&                               #        FROM \`table\` WHERE \`table\`.\`a\` = ?\*(Aq
\&    my @bind = $expr\->to_bind; # [\*(Aqb\*(Aq]
.Ve
.ie n .SS """GROUP BY"""
.el .SS "\f(CWGROUP BY\fP"
.IX Subsection "GROUP BY"
.Vb 5
\&    my $expr = SQL::Composer::Select\->new(
\&        from    => \*(Aqtable\*(Aq,
\&        columns => [\*(Aqa\*(Aq, \*(Aqb\*(Aq],
\&        group_by => \*(Aqa\*(Aq
\&    );
\&
\&    my $sql = $expr\->to_sql;   # \*(AqSELECT \`table\`.\`a\`,\`table\`.\`b\`
\&                               #        FROM \`table\` GROUP BY \`table\`.\`a\`\*(Aq
\&    my @bind = $expr\->to_bind; # []
.Ve
.ie n .SS """ORDER BY"""
.el .SS "\f(CWORDER BY\fP"
.IX Subsection "ORDER BY"
.Vb 5
\&    my $expr = SQL::Composer::Select\->new(
\&        from     => \*(Aqtable\*(Aq,
\&        columns  => [\*(Aqa\*(Aq, \*(Aqb\*(Aq],
\&        order_by => \*(Aqfoo\*(Aq
\&    );
\&
\&    my $sql = $expr\->to_sql;   # \*(AqSELECT \`table\`.\`a\`,\`table\`.\`b\`
\&                               #        FROM \`table\` ORDER BY \`foo\`\*(Aq
\&    my @bind = $expr\->to_bind; # []
.Ve
.ie n .SS """ORDER BY"" with sorting order"
.el .SS "\f(CWORDER BY\fP with sorting order"
.IX Subsection "ORDER BY with sorting order"
.Vb 5
\&    my $expr = SQL::Composer::Select\->new(
\&        from     => \*(Aqtable\*(Aq,
\&        columns  => [\*(Aqa\*(Aq, \*(Aqb\*(Aq],
\&        order_by => [foo => \*(Aqdesc\*(Aq, bar => \*(Aqasc\*(Aq]
\&    );
\&
\&    my $sql = $expr\->to_sql;   # \*(AqSELECT \`table\`.\`a\`,\`table\`.\`b\`
\&                               #      FROM \`table\`
\&                               #      ORDER BY \`table\`.\`foo\` DESC,
\&                               #               \`table\`.\`bar\` ASC\*(Aq
\&    my @bind = $expr\->to_bind; # []
.Ve
.ie n .SS """LIMIT"" and ""OFFSET"""
.el .SS "\f(CWLIMIT\fP and \f(CWOFFSET\fP"
.IX Subsection "LIMIT and OFFSET"
.Vb 6
\&    my $expr = SQL::Composer::Select\->new(
\&        from    => \*(Aqtable\*(Aq,
\&        columns => [\*(Aqa\*(Aq, \*(Aqb\*(Aq],
\&        limit   => 5,
\&        offset  => 10
\&    );
\&
\&    my $sql = $expr\->to_sql;   # \*(AqSELECT \`table\`.\`a\`,\`table\`.\`b\`
\&                               #        FROM \`table\` LIMIT 5 OFFSET 10\*(Aq
\&    my @bind = $expr\->to_bind; # [];
.Ve
.ie n .SS """JOIN"""
.el .SS "\f(CWJOIN\fP"
.IX Subsection "JOIN"
For more details see SQL::Composer::Join.
.PP
.Vb 10
\&    my $expr = SQL::Composer::Select\->new(
\&        from    => \*(Aqtable\*(Aq,
\&        columns => [\*(Aqa\*(Aq],
\&        join    => [
\&            {
\&                source  => \*(Aqtable2\*(Aq,
\&                columns => [\*(Aqb\*(Aq],
\&                on      => [a => \*(Aq1\*(Aq],
\&                join    => [
\&                    {
\&                        source  => \*(Aqtable3\*(Aq,
\&                        columns => [\*(Aqc\*(Aq],
\&                        on      => [b => \*(Aq2\*(Aq]
\&                    }
\&                ]
\&            }
\&        ]
\&    );
\&
\&    my $sql = $expr\->to_sql;   # \*(AqSELECT \`table\`.\`a\`,\`table2\`.\`b\`,\`table3\`.\`c
\&                               #    FROM \`table\`
\&                               #    JOIN \`table2\` ON \`table2\`.\`a\` = ?
\&                               #    JOIN \`table3\` ON \`table3\`.\`b\` = ?\*(Aq
\&    my @bind = $expr\->to_bind; # [\*(Aq1\*(Aq, \*(Aq2\*(Aq];
\&
\&    $expr\->from_rows([[\*(Aqc\*(Aq, \*(Aqd\*(Aq, \*(Aqe\*(Aq]]);
\&    # [{a => \*(Aqc\*(Aq, table2 => {b => \*(Aqd\*(Aq, table3 => {c => \*(Aqe\*(Aq}}}];
.Ve
.ie n .SS """FOR UPDATE"""
.el .SS "\f(CWFOR UPDATE\fP"
.IX Subsection "FOR UPDATE"
.Vb 5
\&    my $expr = SQL::Composer::Select\->new(
\&        from       => \*(Aqtable\*(Aq,
\&        columns    => [\*(Aqa\*(Aq, \*(Aqb\*(Aq],
\&        for_update => 1
\&    );
\&
\&    my $sql = $expr\->to_sql;   # \*(AqSELECT \`table\`.\`a\`,\`table\`.\`b\`
\&                               #    FROM \`table\` FOR UPDATE\*(Aq
\&    my @bind = $expr\->to_bind; # []
\&};
.Ve
