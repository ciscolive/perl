.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::ACME2::Challenge::http_01 3"
.TH Net::ACME2::Challenge::http_01 3 "2019-07-10" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::ACME2::Challenge::http_01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    #e.g., “/.well\-known/acme\-challenge/12341243sdafdewrsvfd”
\&    my $path = $challenge\->path();
\&
\&    {
\&        my $handler = $challenge\->create_handler( ... );
\&
\&        $acme\->accept_challenge($challenge);
\&
\&        sleep 1 while !$acme\->poll_authorization();
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is instantiated by Net::ACME2::Authorization and is a
subclass of Net::ACME2::Challenge.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "\fI\s-1OBJ\s0\fP\->create_handler( $ACME_OR_AUTHZ, $DOCROOT )"
.el .SS "\fI\s-1OBJ\s0\fP\->create_handler( \f(CW$ACME_OR_AUTHZ\fP, \f(CW$DOCROOT\fP )"
.IX Subsection "OBJ->create_handler( $ACME_OR_AUTHZ, $DOCROOT )"
Creates a file in the given \s-1DOCROOT\s0 that will, if served up normally,
satisfy ACME’s requirements for this challenge. The return value is
an object that, when DESTROYed, will remove that file.
.PP
\&\f(CW$ACME_OR_AUTHZ\fR is normally a Net::ACME2 instance that will be used to
compute \fI\s-1OBJ\s0\fR’s key authorization. If you already have this authorization
(i.e., via \fI\s-1OBJ\s0\fR’s \f(CW\*(C`make_key_authorization()\*(C'\fR method) you may submit
that instead. (Only that key authorization was accepted prior to version
0.28 of this distribution.)
.PP
This can simplify the authorization process
if you’re on the same server as all of the authorization object’s
identifiers’ \s-1HTTP\s0 document roots.
.SS "\fI\s-1OBJ\s0\fP\->\fBget_path()\fP"
.IX Subsection "OBJ->get_path()"
Returns the path component of the \s-1URL\s0 that should serve up the
relevant content. This is useful if, for whatever reason,
you’re not using \f(CW\*(C`create_handler()\*(C'\fR to satisfy this challenge.
.PP
Example:
.PP
.Vb 1
\&    /.well\-known/acme\-challenge/LoqXcYV8q5ONbJQxbmR7SCTNo3tiAXDfowyjxAjEuX0
.Ve
.ie n .SS "\fI\s-1OBJ\s0\fP\->get_content( $ACME )"
.el .SS "\fI\s-1OBJ\s0\fP\->get_content( \f(CW$ACME\fP )"
.IX Subsection "OBJ->get_content( $ACME )"
Accepts a Net::ACME2 instance and returns the content that the
\&\s-1URL\s0 should serve.
.PP
Example:
.PP
.Vb 1
\&    q1hcOY6mDLNh7jummITkoQ1PHBpaxwNwyERZEqbADqI._jDy0skz\-fuLE9OyLfS2UBa9z9QtS_MZGWq3x2nMx34
.Ve
