.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mnet::Log::Conditional 3"
.TH Mnet::Log::Conditional 3 "2019-11-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mnet::Log::Conditional \- Use Mnet::Log if Mnet::Log is loaded
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Mnet::Log::Conditional qw( DEBUG INFO WARN FATAL );
\&
\&    # nothing will happen unless Mnet::Log was loaded
\&    INFO("starting");
\&
\&    # errors will still always go to stderr
\&    WARN("error");
\&    FATAL("abort");
\&
\&    my $log = Mnet::Log::Conditional\->new($opts);
\&    $log\->DEBUG("object oriented interace");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mnet::Log::Conditional can be called to output log entries only if the
Mnet::Log module has already been otherwise loaded.
.PP
This is used by other Mnet modules for logging, so that they generate
log output only if the calling script is using the Mnet::Log module. Users
who create custom modules may want to do the same thing.
.PP
Refer to Mnet::Log for more information.
.SH "METHODS"
.IX Header "METHODS"
Mnet::Log::Conditional implements the methods listed below.
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $log = Mnet::Log::Conditional\->new(\e%opts)
.Ve
.PP
This class method creates a new Mnet::Log::Conditional object. The opts hash
ref argument is not requried but may be used to override any parsed cli options
parsed with the Mnet::Opts::Cli module.
.PP
The returned object may be used to call other documented functions and methods
in this module, which will call the Mnet::Log module if it is loaded.
.PP
Refer to the new method in perldoc Mnet::Log for more information.
.SS "debug"
.IX Subsection "debug"
.Vb 1
\&    $log\->debug($text)
.Ve
.PP
Output a debug entry using the Mnet::Log module, if loaed.
.SS "info"
.IX Subsection "info"
.Vb 1
\&    $log\->info($text)
.Ve
.PP
Output an info entry using the Mnet::Log module, if loaed.
.SS "warn"
.IX Subsection "warn"
.Vb 1
\&    $log\->warn($text)
.Ve
.PP
Output a warn entry using the Mnet::Log module, if loaed.
.SS "fatal"
.IX Subsection "fatal"
.Vb 1
\&    $log\->fatal($text)
.Ve
.PP
Output a fatal entry using the Mnet::Log module, if loaded.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Mnet::Log::Conditional also implements the functions listed below.
.SS "\s-1DEBUG\s0"
.IX Subsection "DEBUG"
.Vb 1
\&    DEBUG($text)
.Ve
.PP
Output a debug entry using the Mnet::Log module, if loaed.
.SS "\s-1INFO\s0"
.IX Subsection "INFO"
.Vb 1
\&    INFO($text)
.Ve
.PP
Output an info entry using the Mnet::Log module, if loaed.
.SS "\s-1WARN\s0"
.IX Subsection "WARN"
.Vb 1
\&    WARN($text)
.Ve
.PP
Output a warn entry using the Mnet::Log module, if loaed.
.SS "\s-1FATAL\s0"
.IX Subsection "FATAL"
.Vb 1
\&    FATAL($text)
.Ve
.PP
Output a fatal entry using the Mnet::Log module, if loaed.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mnet
.PP
Mnet::Log
