.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::NTPServer 3"
.TH Infoblox::Grid::NTPServer 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::NTPServer \- Grid Network Time Protocol (NTP) server object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Grid \s-1NTP\s0 server object is used to synchronize the date and time for an Infoblox appliance.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 8
\& #Constructor for an Grid NTP server object
\&  my $ntp_server = Infoblox::Grid::NTPServer\->new(
\&     address        =>  $ipv4addr | $ipv6addr | $fqdn   #Required
\&     authentication => "true" | "false",                #Optional / Default "false"
\&     burst          => "true" | "false",                #Optional / Default "true"
\&     iburst         => "true" | "false",                #Optional / Default "true"
\&     ntp_key        => [$NTPKey1, $NTPKey2,...]         #Optional / Default is undefined
\&    );
.Ve
.PP
This constructed object can be used only when \s-1NTP\s0 is set to \*(L"true\*(R" at the grid level.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
This section describes all the functions that can be applied to a \s-1NTP\s0 server object.
.SS "Infoblox::Grid\->ntp_server( )"
.IX Subsection "Infoblox::Grid->ntp_server( )"
.RS 4
Use this function to specify the \s-1NTP\s0 server for the grid.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Create a NTPKey object.
\& my $ntp_key1 = Infoblox::Grid::NTPKey\->new(
\&    key_number => 1111,
\&    key_type   => "M",
\&    key_string => "aaaa"
\& );
\&
\& #Create a NTPServer object.
\&  my $ntp_server = Infoblox::Grid::NTPServer\->new(
\&     address        => "3.3.3.3",
\&     authentication => "true",
\&     ntp_key        => $ntp_key1
\& );
\&
\& my $grid = $session\->get(
\&    object  => "Infoblox::Grid",
\&    name    => "Infoblox"
\&  );
\&
\&  unless ($grid) {
\&      die("get Grid failed:" ,
\&          $session\->status_code(), $session\->status_detail());
\&  }
\&
\& $grid\->enable_ntp("true");
\& $grid\->ntp_authentication_key([$ntp_key1]);
\& $grid\->ntp_server([$ntp_server]);
\&
\& #Applying the changes to appliance through session.
\& $session\->modify($grid)
\&      or die("modify Grid failed:" ,
\&       $session\->status_code(), $session\->status_detail());
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute value of a \s-1NTP\s0 server object.
.SS "address( )"
.IX Subsection "address( )"
.RS 4
Use this method to set or retrieve the IPv4 or IPv6 address or \s-1FQDN\s0 of the external \s-1NTP\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are IPv4 or IPv6 address or \s-1FQDN\s0 of the external \s-1NTP\s0 server.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get address
\& my $address = $ntp_server\->address();
\& #Modify address
\& $ntp_server\->address("4.4.4.4");
.Ve
.RE
.RS 4
.RE
.SS "authentication( )"
.IX Subsection "authentication( )"
.RS 4
Use this method to enable or disable the authentication for an \s-1NTP\s0 server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable authentication or \*(L"false\*(R" to disable it. Default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get authentication
\& my $authentication = $ntp_server\->authentication();
\& #Modify authentication
\& $ntp_server\->authentication("false");
.Ve
.RE
.RS 4
.RE
.SS "burst( )"
.IX Subsection "burst( )"
.RS 4
Use this method to enable or disable \s-1BURST\s0 operating mode. In \s-1BURST\s0 operating mode, when the external server is reachable and a valid source of synchronization is available, \s-1NTP\s0 sends a burst of 8 packets with a 2 second interval between packets.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to eanble the \s-1BURST\s0 operating mode or \*(L"false\*(R" to disable it. The default value is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get burst
\& my $burst = $ntp_server\->burst();
\& #Modify burst
\& $ntp_server\->burst("false");
.Ve
.RE
.RS 4
.RE
.SS "iburst( )"
.IX Subsection "iburst( )"
.RS 4
Use this method to enable or disable \s-1IBURST\s0 operating mode. In \s-1IBURST\s0 operating mode, when the external server is unreachable, \s-1NTP\s0 server sends a burst of 8 packets with a 2 second interval between packets.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to eanble the \s-1IBURST\s0 operating mode or \*(L"false\*(R" to disable it. The default value is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get iburst
\& my $iburst = $ntp_server\->iburst();
\& #Modify iburst
\& $ntp_server\->iburst("false");
.Ve
.RE
.RS 4
.RE
.SS "ntp_key( )"
.IX Subsection "ntp_key( )"
.RS 4
Use this method to set or retrieve the ntp_key used for authentication.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::Grid::NTPKey objects.
.Sp
See Infoblox::Grid::NTPKey for parameters and return values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Create a NTPKey object.
\& my $ntp_key2 = Infoblox::Grid::NTPKey\->new(
\&   key_number => 2222,
\&   key_type   => "n",
\&   key_string =>"d3e54352e5548080" );
\&
\& #Modify NTPServer object
\& my $ntp_server = Infoblox::Grid::NTPServer\->new(
\&    address        => "3.3.3.3",
\&    authentication => "true",
\&    ntp_key        => $ntp_key2
\& );
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to an object such as create, modify, and remove an object. Also this sample code also includes error handling for the operations.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\&  use strict;
\&  use Infoblox;
\&
\&  #Create a session to the Infoblox appliance
\&  my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\&  );
\&  unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\&  }
\&  print "Session created successfully\en";
.Ve
.PP
\&\fB#Adding an \s-1NTP\s0 server object\fR
  #Get the grid object.
  my \f(CW$result\fR = \f(CW$session\fR\->get(
      object => \*(L"Infoblox::Grid\*(R",
      name   => \*(L"Infoblox\*(R"
  );
  unless ($result) {
      die(\*(L"get Grid failed:\*(R" ,
          \f(CW$session\fR\->\fBstatus_code()\fR, \f(CW$session\fR\->\fBstatus_detail()\fR);
  }
.PP
.Vb 6
\&  #Create a NTPKey object.
\&  my $ntp_key1 = Infoblox::Grid::NTPKey\->new(
\&      key_number => 3333,
\&      key_type   => "S",
\&      key_string => "a7cb86a4cba80101"
\&  );
\&
\&  #Create a NTPServer object.
\&  my $ntp_server = Infoblox::Grid::NTPServer\->new(
\&      address        => "3.3.3.3",
\&      authentication => "true",
\&      ntp_key        => $ntp_key1
\&  );
\&   #Modifying the value of the ntp_authentication_key and ntp_server methods, from the grid object.
\&  $result\->enable_ntp("true");
\&  $result\->ntp_authentication_key([$ntp_key1]);
\&  $result\->ntp_server([$ntp_server]);
\&
\&  #Applying the changes to appliance through session.
\&  $session\->modify($result)
\&       or die("modify Grid failed:" ,
\&        $session\->status_code(), $session\->status_detail());
\& print "\en  Modify Grid successful \en";
.Ve
.PP
\&\fB#Modifying an \s-1NTP\s0 server object\fR
 #Create a NTPServer object.
  my \f(CW$ntp_server\fR = Infoblox::Grid::NTPServer\->new(
      address        => \*(L"3.3.3.3\*(R",
      authentication => \*(L"false\*(R",
  );
.PP
.Vb 1
\& $result\->ntp_server([$ntp_server]);
\&
\& #Applying the changes to appliance through session.
\& $session\->modify($result)
\&      or die("modify Grid failed:" ,
\&       $session\->status_code(), $session\->status_detail());
\& print "\en  Modify grid successful for NTP server object\en";
.Ve
.PP
\&\fB#Removing an \s-1NTP\s0 server object\fR
  #Get the grid object.
  my \f(CW$result\fR = \f(CW$session\fR\->get(
      object => \*(L"Infoblox::Grid\*(R",
      name   => \*(L"Infoblox\*(R"
  );
 unless ($result) {
      die(\*(L"get Grid failed:\*(R" ,
          \f(CW$session\fR\->\fBstatus_code()\fR, \f(CW$session\fR\->\fBstatus_detail()\fR);
  }
.PP
.Vb 7
\& $result\->enable_ntp("false");
\& $result\->ntp_server([]);
\& #Applying the changes to appliance through session.
\& $session\->modify($result)
\&      or die("modify Grid failed:" ,
\&       $session\->status_code(), $session\->status_detail());
\& print "\en  Modify grid successful for NTP server object\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Grid::NTPKey, Infoblox::Grid,Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
