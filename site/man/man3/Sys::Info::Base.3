.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Sys::Info::Base 3"
.TH Sys::Info::Base 3 "2018-12-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Sys::Info::Base
.SH "VERSION"
.IX Header "VERSION"
version 0.7807
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    use base qw(Sys::Info::Base);
\&    #...
\&    sub foo {
\&        my $self = shift;
\&        my $data = $self\->slurp("/foo/bar.txt");
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Includes some common methods.
.SH "NAME"
Sys::Info::Base \- Base class for Sys::Info
.SH "METHODS"
.IX Header "METHODS"
.SS "load_module \s-1CLASS\s0"
.IX Subsection "load_module CLASS"
Loads the module named with \f(CW\*(C`CLASS\*(C'\fR.
.SS "load_subclass \s-1TEMPLATE\s0"
.IX Subsection "load_subclass TEMPLATE"
Loads the specified class via \f(CW\*(C`TEMPLATE\*(C'\fR:
.PP
.Vb 1
\&    my $class = _\|_PACKAGE_\|_\->load_subclass(\*(AqSys::Info::Driver::%s::OS\*(Aq);
.Ve
.PP
\&\f(CW%s\fR will be replaced with \f(CW\*(C`OSID\*(C'\fR. Apart from the template usage, it is
the same as \f(CW\*(C`load_module\*(C'\fR.
.SS "trim \s-1STRING\s0"
.IX Subsection "trim STRING"
Returns the trimmed version of \f(CW\*(C`STRING\*(C'\fR.
.SS "slurp \s-1FILE\s0"
.IX Subsection "slurp FILE"
Caches all contents of \f(CW\*(C`FILE\*(C'\fR into a scalar and then returns it.
.SS "read_file \s-1FILE\s0"
.IX Subsection "read_file FILE"
Caches all contents of \f(CW\*(C`FILE\*(C'\fR into an array and then returns it.
.SS "date2time \s-1DATE_STRING\s0"
.IX Subsection "date2time DATE_STRING"
Converts \f(CW\*(C`DATE_STRING\*(C'\fR into unix timestamp.
.SS "uname"
.IX Subsection "uname"
Returns a hashref built from \f(CW\*(C`POSIX::uname\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Sys::Info.
.SH "AUTHOR"
.IX Header "AUTHOR"
Burak Gursoy <burak@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Burak Gursoy.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
