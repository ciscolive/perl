.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::CLI::Role::HelpText 3"
.TH Term::CLI::Role::HelpText 3 "2019-11-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::CLI::Role::HelpText \- Role for generating help text in Term::CLI
.SH "VERSION"
.IX Header "VERSION"
version 0.051007
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package Term::CLI::Command {
\&
\&    use Moo;
\&
\&    with(\*(AqTerm::CLI::Role::HelpText\*(Aq);
\&
\&    ...
\& };
\&
\& my $cmd = Term::CLI::Command\->new(
\&    name => \*(Aqfile\*(Aq,
\&    options => [\*(Aqverbose|v\*(Aq],
\&    arguments => [
\&        Term::CLI::Argument::Filename\->new(name => \*(Aqpath\*(Aq),
\&    ],
\&    commands => [
\&        Term::CLI::Command\->new(name => \*(Aqinfo\*(Aq),
\&        Term::CLI::Command\->new(name => \*(Aqdelete\*(Aq),
\&        Term::CLI::Command\->new(name => \*(Aqshow\*(Aq),
\&    ],
\& );
\&
\& say $cmd\->usage_text();
\& # \-> file [\-\-verbose] [\-v] path {info|delete|show}
\&
\& say $cmd\->usage_text( with_options => \*(Aqlong\*(Aq );
\& # \-> file [\-\-verbose] path {info|delete|show}
\&
\& say $cmd\->usage_text( with_options => \*(Aqnone\*(Aq);
\& # \-> file path {info|delete|show}
\&
\& say $cmd\->usage_text( with_arguments => 0);
\& # \-> file [\-\-verbose] [\-v] {info|delete|show}
\&
\& say $cmd\->usage_text( with_subcommands => 0);
\& # \-> file [\-\-verbose] [\-v] path
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Role for Term::CLI::Command(3p) elements that need to have
help text.
.PP
This role is consumed by Term::CLI::Command(3p).
.PP
The functionality of this role is primarily used by 
Term::CLI::Command::Help(3p).
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
This role defines three additional attributes:
.IP "\fBdescription\fR => \fIStr\fR" 4
.IX Item "description => Str"
Fragment of \s-1POD\s0 text that describes the command in some detail.
It is typically shown when help is requested for specifically
this command.
.Sp
Default is \f(CW\*(C`undef\*(C'\fR, which typically means that the
summary attribute is used in its place.
.IP "\fBsummary\fR => \fIStr\fR" 4
.IX Item "summary => Str"
Short summary of the command (e.g. what you typically find in the \fB\s-1NAME\s0\fR
section of a manual page), that is typically displayed in a command
summary.
.Sp
Default is an empty string.
.IP "\fBusage\fR => \fIStr\fR" 4
.IX Item "usage => Str"
Optional attribute that should contain a single line of \s-1POD\s0
documentation to describe the syntax of the command.
.Sp
Default is \f(CW\*(C`undef\*(C'\fR, which causes usage_text
to automatically generate a usage line.
.Sp
\&\fB\s-1NOTE:\s0\fR if this is specified, the usage_text
method will always return this value.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.IP "\fBdescription\fR ( [ \fIStr\fR ] )" 4
.IX Xref "description"
.IX Item "description ( [ Str ] )"
Get or set the description help text.
.IP "\fBsummary\fR ( [ \fIStr\fR ] )" 4
.IX Xref "summary"
.IX Item "summary ( [ Str ] )"
Get or set the summary help text.
.IP "\fBusage\fR ( [ \fIStr\fR ] )" 4
.IX Xref "usage"
.IX Item "usage ( [ Str ] )"
Get or set the static usage text.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBget_options_summary\fR ( [ \fBwith_options\fR => \fI\s-1VAL\s0\fR )" 4
.IX Xref "get_options_summary"
.IX Item "get_options_summary ( [ with_options => VAL )"
Return a line of \s-1POD\s0 text for the command line options for this
command, depending on the value of the \fBwith_options\fR parameter.
.Sp
This function is called by usage_text. You'll
probably never need to call it directly.
.IP "\fBusage_text\fR ( \fI\s-1OPT\s0\fR => \fI\s-1VAL\s0\fR, ... )" 4
.IX Xref "usage_text"
.IX Item "usage_text ( OPT => VAL, ... )"
Return a line of \s-1POD\s0 text with a usage summary for the command.
.Sp
If the usage attribute has been set, then this value is always
returned. Otherwise, the method will construct a \s-1POD\s0 fragment from the
command's name, options, arguments, and sub-commands.
.Sp
The following parameters are recognised:
.RS 4
.ie n .IP "\fBwith_options\fR => {""long""|""short""|""both""|""none""}" 4
.el .IP "\fBwith_options\fR => {\f(CWlong\fR|\f(CWshort\fR|\f(CWboth\fR|\f(CWnone\fR}" 4
.IX Item "with_options => {long|short|both|none}"
Specify which command options to include in the usage text. Options are
\&\f(CW\*(C`long\*(C'\fR to only include long options (e.g. \f(CW\*(C`[\f(CB\-\-verbose\f(CW]\*(C'\fR),
\&\f(CW\*(C`short\*(C'\fR to only include short options (e.g. \f(CW\*(C`[\f(CB\-v\f(CW]\*(C'\fR),
\&\f(CW\*(C`both\*(C'\fR for both short and long options (e.g. \f(CW\*(C`[\f(CB\-\-verbose\f(CW] [\f(CB\-v\f(CW]\*(C'\fR),
or \f(CW\*(C`none\*(C'\fR for none.
.Sp
Default is \f(CW\*(C`both\*(C'\fR.
.IP "\fBwith_arguments\fR => {0|1}" 4
.IX Item "with_arguments => {0|1}"
Specify whether or not to include placeholders for command line arguments in
the usage line.
.Sp
Default is \f(CW1\fR.
.IP "\fBwith_subcommands\fR => {0|1}" 4
.IX Item "with_subcommands => {0|1}"
Specify whether or not to include the list of sub-commands in
the usage line.
.Sp
Default is \f(CW1\fR.
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Term::CLI(3p),
Term::CLI::Command::Help(3p),
Term::CLI::Command(3p).
.SH "AUTHOR"
.IX Header "AUTHOR"
Steven Bakker <sbakker@cpan.org>, 2018.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2018 Steven Bakker
.PP
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See \*(L"perldoc perlartistic.\*(R"
.PP
This software is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
