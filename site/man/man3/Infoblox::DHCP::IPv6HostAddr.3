.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::IPv6HostAddr 3"
.TH Infoblox::DHCP::IPv6HostAddr 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::IPv6HostAddr \- DHCP IPv6 Host Address object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An IPv6 Host Address is an object used to specify IPv6 addresses in a \s-1DNS\s0 Host object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $host_addr = Infoblox::DHCP::IPv6HostAddr \-> new(
\&       duid                            => $string,                     # Required
\&       address_type                    => "ADDRESS" | "PREFIX" | "BOTH", # Optional / Default is "ADDRESS"
\&       configure_for_dhcp              => "true" | "false",            # Optional / Default is "false"
\&                                                                       # When both the IP address and DUID are present, the default value is "true"
\&                                                                       # Applicable only when adding this host address to a host
\&       domain_name                     => $string,                     # Optional / Default is undefined
\&       domain_name_servers             => "$ipv6addr1,$ipv6addr2,...", # Optional / Default is undefined
\&       ipv6addr                        => $ipv6addr,                   # Optional / one of ipv6addr or ipv6prefix is required
\&       ipv6prefix                      => $ipv6addr,                   # Optional / one of ipv6addr or ipv6prefix is required
\&       ipv6prefix_bits                 => $ipv6addr,                   # Optional / Required if ipv6prefix is specified
\&       match_client                    => $string,                     # Optional / Default is "DUID"
\&                                                                       # Possible values are:
\&                                                                       #  "DUID", "RESERVED",
\&       options                         => [$option1, $option2, ...]    # Optional / Default is empty
\&       override_domain_name            => "true" | "false",            # Optional / Default value is "false"
\&       override_domain_name_servers    => "true" | "false",            # Optional / Default value is "false"
\&       override_options                => "true" | "false",            # Optional / Default value is "false"
\&       override_preferred_lifetime     => "true" | "false",            # Optional / Default value is "false"
\&       override_valid_lifetime         => "true" | "false",            # Optional / Default value is "false"
\&       preferred_lifetime              => $num,                        # Optional / Default is "27000"
\&       valid_lifetime                  => $num,                        # Optional / Default is 43200
\&       use_for_ea_inheritance          => "true" | "false",            # Optional / Default value is "false"
\&       reserved_interface              => $interface,                  # Optional
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DHCP\s0 IPv6 Host Address object.
.SS "Infoblox::DNS::Host\->ipv6addrs( )"
.IX Subsection "Infoblox::DNS::Host->ipv6addrs( )"
.RS 4
Use this function to specify the addresses associated with the Host record. See Infoblox::DNS::Host\->\fBipv6addrs()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct a Host Address object
\& my $h1 = Infoblox::DHCP::HostAddr\->new(
\&                                         duid     => \*(Aq0cc084d303010003\*(Aq,
\&                                         ipv6addr => \*(Aq2001::4\*(Aq,
\& );
\&
\& # Configure an address in the Host record object
\& $host\->ipv6addrs([$h1]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP IPv6 Host Address object:
\&
\&  comment                               \- Optional. User\-specified comment for the host address.
\&  duid                                  \- Optional. DUID of the host address.
\&  ipv6addr                              \- Optional. IPv6 address of the host address.
\&  network                               \- Optional. Network address of the host address.
\&  network_view                          \- Optional. Network view in which the host address is located. By default, all network views are searched.
\&  extensible_attributes                 \- Optional. A hash reference containing extensible attributes.
\&
\&  discovered_duid                       \- Optional. Discovered DHCPv6 UID.
\&  discovered_name                       \- Optional. Discovered name.
\&  discoverer                            \- Optional. Discoverer name.
\&  first_discovered                      \- Optional. Time of the first discovery.
\&  last_discovered                       \- Optional. Time of the last discovery.
\&  netbios                               \- Optional. Discovered NetBIOS name.
\&  network_component_description         \- Optional. Discovered network component description.
\&  network_component_ip                  \- Optional. Discovered network component IP address.
\&  network_component_name                \- Optional. Discovered network component name.
\&  network_component_port_description    \- Optional. Discovered network component port description.
\&  network_component_port_name           \- Optional. Discovered network component port name.
\&  network_component_port_number         \- Optional. Discovered network component port number.
\&  network_component_type                \- Optional. Discovered network component type.
\&  os                                    \- Optional. Discovered OS.
\&  port_duplex                           \- Optional. Discovered port duplex settings.
\&  port_link_status                      \- Optional. Discovered port link status.
\&  port_speed                            \- Optional. Discovered port speed settings.
\&  port_status                           \- Optional. Discovered port status settings.
\&  port_vlan_description                 \- Optional. Discovered port VLAN description.
\&  port_vlan_name                        \- Optional. Discovered port VLAN name.
\&  port_vlan_number                      \- Optional. Discovered port VLAN number.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 9
\& #Get DHCP IPv6 Host Address object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::IPv6HostAddr",
\&     duid   => "0001",
\& );
\& my @retrieved_objs = $session\->get(
\&     object       => "Infoblox::DHCP::IPv6HostAddr",
\&     ipv6addr     => "2001::1",
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 IPv6 Host Address object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the preferred_lifetime
\& $ipv6ha\->preferred_lifetime("1234567");
\& #Submit modification
\& my $response = $session\->modify( $ipv6ha );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DHCP\s0 IPv6 Host Address object and matching Host object with \s-1MAC\s0 address in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a specific DHCP IPv6 Host Address object:
\&
\&  comment                               \- Optional. User\-specified comment for the host address.
\&  duid                                  \- Optional. DUID of the host address.
\&  ipv6addr                              \- Optional. IPv6 address of the host address.
\&  network                               \- Optional. Network address of the host address.
\&  network_view                          \- Optional. Network view in which the host address is located. By default, all network views are searched.
\&
\&  discovered_duid                       \- Optional. Discovered DHCPv6 UID.
\&  discovered_name                       \- Optional. Discovered name (regular expression).
\&  discoverer                            \- Optional. Discoverer name (regular expression).
\&  first_discovered                      \- Optional. Time of the first discovery.
\&  last_discovered                       \- Optional. Time of the last discovery.
\&  netbios                               \- Optional. Discovered NetBIOS name (regular expression).
\&  network_component_description         \- Optional. Discovered network component description (regular expression).
\&  network_component_ip                  \- Optional. Discovered network component IP address (regular expression).
\&  network_component_name                \- Optional. Discovered network component name (regular expression).
\&  network_component_port_description    \- Optional. Discovered network component port description (regular expression).
\&  network_component_port_name           \- Optional. Discovered network component port name (regular expression).
\&  network_component_port_number         \- Optional. Discovered network component port number.
\&  network_component_type                \- Optional. Discovered network component type (regular expression).
\&  os                                    \- Optional. Discovered OS  (regular expression).
\&  port_duplex                           \- Optional. Discovered port duplex settings.
\&  port_link_status                      \- Optional. Discovered port link status.
\&  port_speed                            \- Optional. Discovered port speed settings
\&  port_status                           \- Optional. Discovered port status settings.
\&  port_vlan_description                 \- Optional. Discovered port VLAN description (regular expression).
\&  port_vlan_name                        \- Optional. Discovered port VLAN name (regular expression).
\&  port_vlan_number                      \- Optional. Discovered port VLAN numbe.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\& # Search for all DHCP IPv6 Host Address objects that are specified in the network "2001::/24" in the "default" network view.
\& my @retrieved_objs = $session\->search(
\&     object       => "Infoblox::DHCP::IPv6HostAddr",
\&     duid         => "0001",
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a \s-1DHCP\s0 IPv6 Host Address object.
.SS "address_type( )"
.IX Subsection "address_type( )"
.RS 4
Use this method to set or retrieve the address type of a \s-1DHCP\s0 IPv6 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1ADDRESS\*(R", \*(L"PREFIX\*(R",\s0 or \*(L"\s-1BOTH\*(R".\s0 When the address type is \*(L"\s-1ADDRESS\*(R",\s0 a value for the 'ipv6addr' member is required. When the address type is \*(L"\s-1PREFIX\*(R",\s0 values for 'ipv6prefix' and 'ipv6prefix_bits' are required. When the address type is \*(L"\s-1BOTH\*(R",\s0 values for 'ipv6addr', 'ipv6prefix', and 'ipv6prefix_bits' are all required.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get address_type
\& my $address_type = $ipv6ha\->address_type();
\& #Modify address_type
\& $ipv6ha\->address_type("PREFIX");
.Ve
.RE
.RS 4
.RE
.SS "configure_for_dhcp( )"
.IX Subsection "configure_for_dhcp( )"
.RS 4
Use this method to set or retrieve the configure_for_dhcp flag of a \s-1DHCP\s0 IPv6 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the configure_for_dhcp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get configure_for_dhcp
\& my $configure_for_dhcp = $ipv6ha\->configure_for_dhcp();
\& #Modify configure_for_dhcp
\& $ipv6ha\->configure_for_dhcp("true");
.Ve
.RE
.RS 4
.RE
.SS "discovered_data( )"
.IX Subsection "discovered_data( )"
.RS 4
Use this method to retrieve the discovered data of a \s-1DHCP\s0 IPv6 Host Address object. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::Discovery::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_data value
\& my $discovered_data = $object\->discovered_data();
.Ve
.RE
.RS 4
.RE
.SS "discovered_duid( )"
.IX Subsection "discovered_duid( )"
.RS 4
Use this method to retrieve the discovered DHCPv6 \s-1UID\s0 (\s-1DUID\s0) of a \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discovered name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_duid
\& my $discovered_duid = $ipv6ha\->discovered_duid();
.Ve
.RE
.RS 4
.RE
.SS "discovered_name( )"
.IX Subsection "discovered_name( )"
.RS 4
Use this method to retrieve the discovered name of a \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discovered name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_name
\& my $discovered_name = $ipv6ha\->discovered_name();
.Ve
.RE
.RS 4
.RE
.SS "discoverer( )"
.IX Subsection "discoverer( )"
.RS 4
Use this method to retrieve the discoverer of a \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discoverer value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discoverer
\& my $discoverer = $ipv6ha\->discoverer();
.Ve
.RE
.RS 4
.RE
.SS "discover_now_status( )"
.IX Subsection "discover_now_status( )"
.RS 4
Use this method to retrieve the current discovery status. This attribute is read-only.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1COMPLETE\s0', '\s-1FAILED\s0', '\s-1NONE\s0', '\s-1PENDING\s0' or '\s-1RUNNING\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discover_now_status
\& my $discover_now_status = $ipv6ha\->discover_now_status();
.Ve
.RE
.RS 4
.RE
.SS "domain_name( )"
.IX Subsection "domain_name( )"
.RS 4
Use this method to set or retrieve the domain_name value of a \s-1DHCP\s0 IPv6 host address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_domain_name method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_domain_name attribute to \*(L"false\*(R".
.Sp
Note that when domain_name is set to a defined value and override_domain_name is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->domain_name(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_domain_name(\*(L"false\*(R"); will set override_domain_name to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_domain_name(\*(L"false\*(R"); \f(CW$object\fR\->domain_name(\*(L"testdomain\*(R"); will set override_domain_name to \*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The client's domain name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get domain_name
\& my $domain_name = $host_addr\->domain_name();
\& #Modify domain_name
\& $host_addr\->domain_name("test_domain.com");
.Ve
.RE
.RS 4
.RE
.SS "domain_name_servers( )"
.IX Subsection "domain_name_servers( )"
.RS 4
Use this method to set or retrieve the domain_name_servers value of a \s-1DHCP\s0 IPv6 host address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_domain_name_servers method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_domain_name_servers attribute to \*(L"false\*(R".
.Sp
Note that when domain_name_servers is set to a defined value and override_domain_name_servers is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->domain_name_servers(\*(L"2001::1,2001::2\*(R"); \f(CW$object\fR\->override_domain_name_servers(\*(L"false\*(R"); will set override_domain_name_servers to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_domain_name_servers(\*(L"false\*(R"); \f(CW$object\fR\->domain_name_servers(\*(L"2001::1,2001::2\*(R"); will set in override_domain_name_servers to \*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The comma-separated list of domain name server addresses in IPv6 address format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get domain_name_servers
\& my $domain_name_servers = $host_addr\->domain_name_servers();
\& #Modify domain_name_servers
\& $host_addr\->domain_name_servers("2001::1,2001::2");
.Ve
.RE
.RS 4
.RE
.SS "duid( )"
.IX Subsection "duid( )"
.RS 4
Use this method to set or retrieve the DHCPv6 Unique Identifier (\s-1DUID\s0) of the IPv6 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The \s-1DUID\s0 of the matching client in hexadecimal format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get duid
\& my $duid = $ipv6ha\->duid();
\& #Modify duid
\& $ipv6ha\->duid("1c2edfaa");
.Ve
.RE
.RS 4
.RE
.SS "first_discovered( )"
.IX Subsection "first_discovered( )"
.RS 4
Use this method to retrieve the date and time that the \s-1DHCP\s0 IPv6 Host Address object was first discovered.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the date and time that the \s-1DHCP\s0 IPv6 Host Address object was first discovered.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get first_discovered
\& my $first_discovered = $ipv6ha\->first_discovered();
.Ve
.RE
.RS 4
.RE
.SS "ipv6addr( )"
.IX Subsection "ipv6addr( )"
.RS 4
Use this method to set or retrieve the the IPv6 address of the IPv6 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), with each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1), and dotted-quad notations can be used to express IPv4\-mapped IPv6 addresses (example: ::ffff:192.0.2.128).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6addr
\& my ipv6addr = $ipv6ha\->ipv6addr();
\& #Modify ipv6addr
\& $ipv6ha\->ipv6addr("aaaa:1111:bbbb:2222:cccc:3333:dddd:5555");
.Ve
.RE
.RS 4
.RE
.SS "ipv6prefix( )"
.IX Subsection "ipv6prefix( )"
.RS 4
Use this method to set or retrieve the IPv6 prefix of a \s-1DHCP\s0 IPv6 Host Address object. The prefix must belong to the list of global prefixes defined in the Infoblox::Grid::DHCP object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
IPv6 prefix from the list of global IPv6 prefixes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
ls.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6prefix
\& my $ipv6prefix = $ipv6ha\->ipv6prefix();
\& #Modify ipv6prefix
\& $ipv6ha\->ipv6prefix("2001::");
.Ve
.RE
.RS 4
.RE
.SS "ipv6prefix_bits( )"
.IX Subsection "ipv6prefix_bits( )"
.RS 4
Use this method to set or retrieve the prefix bits for the \s-1DHCP\s0 IPv6 Host Address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An unsigned integer between 2 and 128.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6prefix_bits
\& my $ipv6prefix_bits = $ipv6ha\->ipv6prefix_bits();
\& #Modify ipv6prefix_bits
\& $ipv6ha\->ipv6prefix_bits(32);
.Ve
.RE
.RS 4
.RE
.SS "last_discovered( )"
.IX Subsection "last_discovered( )"
.RS 4
Use this method to retrieve the time this object was last seen by a discovery job.
.Sp
The default value for this field is empty.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_discovered
\& my $last_discovered = $ipv6ha\->last_discovered();
.Ve
.RE
.RS 4
.RE
.SS "last_queried( )"
.IX Subsection "last_queried( )"
.RS 4
Use this method to retrieve the time when the associated record was last queried. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. The number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_queried
\& my $last_queried = $ipv6ha\->last_queried();
.Ve
.RE
.RS 4
.RE
.SS "match_client( )"
.IX Subsection "match_client( )"
.RS 4
Use this method to set or retrieve the match_client value of a \s-1DHCP\s0 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
.Vb 1
\&    match_client "DUID": The fixed IP address is leased to the matching DUID.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
.Vb 1
\&    If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
\&
\&    If you did not specify a parameter, the method returns the attribute value.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get match_client
\& my $match_client = $ipv6ha\->match_client();
\& #Modify match_client
\& $ipv6ha\->match_client("DUID");
.Ve
.RE
.RS 4
.RE
.SS "ms_ad_user_data( )"
.IX Subsection "ms_ad_user_data( )"
.RS 4
Use this method to retrieve Microsoft Active Directory users related information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::MSServer::AdUser::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_ad_user_data
\& my $ms_ad_user_data = $host_addr\->ms_ad_user_data();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of a \s-1DHCP\s0 IPv6 Host Address object. The same name can be used for multiple host addresses.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify a name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the name
\& my $name = $ipv6ha\->name();
\& #Modify the name
\& $ipv6ha\->name("pop\-server");
.Ve
.RE
.RS 4
.RE
.SS "netbios( )"
.IX Subsection "netbios( )"
.RS 4
Use this method to retrieve the name in the NetBIOS reply that responded to a NetBIOS query.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get NetBIOS
\& my $netbios = $ipv6ha\->netbios();
.Ve
.RE
.RS 4
.RE
.SS "network( )"
.IX Subsection "network( )"
.RS 4
Use this method to retrieve the network value of a \s-1DHCP\s0 IPv6 Host Address object. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network value
\& my $value = $object\->network();
.Ve
.RE
.RS 4
.RE
.SS "network_component_description( )"
.IX Subsection "network_component_description( )"
.RS 4
Use this method to retrieve the description of the network device that is connected to the \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device description.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_description
\& my $network_component_description = $ipv6ha\->network_component_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_ip( )"
.IX Subsection "network_component_ip( )"
.RS 4
Use this method to retrieve the \s-1IP\s0 address of the network device that is connected to the \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1IP\s0 address of the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_ip
\& my $network_component_ip = $ipv6ha\->network_component_ip();
.Ve
.RE
.RS 4
.RE
.SS "network_component_name( )"
.IX Subsection "network_component_name( )"
.RS 4
Use this method to retrieve the name of the network device that is connected to the \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_name
\& my $network_component_name = $ipv6ha\->network_component_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_description( )"
.IX Subsection "network_component_port_description( )"
.RS 4
Use this method to retrieve the description of the network device port that is connected to the \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the description of the port on the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_description
\& my $network_component_port_description = $ipv6ha\->network_component_port_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_name( )"
.IX Subsection "network_component_port_name( )"
.RS 4
Use this method to retrieve the name of the network device port that is connected to the \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the name of the port on the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_name
\& my $network_component_port_name = $ipv6ha\->network_component_port_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_number( )"
.IX Subsection "network_component_port_number( )"
.RS 4
Use this method to retrieve the number of the network device port that is connected to the \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_number
\& my $network_component_port_number = $ipv6ha\->network_component_port_number();
.Ve
.RE
.RS 4
.RE
.SS "network_component_type( )"
.IX Subsection "network_component_type( )"
.RS 4
Use this method to retrieve the type of the network device that is connected to the \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device type.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_type
\& my $network_component_type = $ipv6ha\->network_component_type();
.Ve
.RE
.RS 4
.RE
.SS "options( )"
.IX Subsection "options( )"
.RS 4
Use this method to set or retrieve the options of a \s-1DHCP\s0 IPv6 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_options method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_options attribute to \*(L"false\*(R".
.Sp
Note that when the options method is set to a defined value and override_options is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->options([ \f(CW$opt\fR ]); \f(CW$object\fR\->override_options(\*(L"false\*(R"); will set override_options to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_options(\*(L"false\*(R"); \f(CW$object\fR\->options([ \f(CW$opt\fR ]); will set override_options to \*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DHCP::Option object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get options
\& my $options = $ipv6ha\->options();
\& #Modify options
\& my $option1 = Infoblox::DHCP::Option\->new(
\&     name   => "dhcp6.rapid\-commit",
\&     value  => "true"
\& );
\& $ipv6ha\->options([$option1);
.Ve
.RE
.RS 4
.RE
.SS "os( )"
.IX Subsection "os( )"
.RS 4
Use this method to retrieve the operating system associated with this host address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get OS
\& my $os = $ipv6ha\->os();
.Ve
.RE
.RS 4
.RE
.SS "override_domain_name( )"
.IX Subsection "override_domain_name( )"
.RS 4
The override_domain_name attribute controls whether the domain_name value in the \s-1DHCP\s0 IPv6 host address is used, instead of the upper-level default.
.Sp
The override_domain_name attribute can be specified explicitly. It is also set implicitly when domain_name is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for domain_name. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for domain_name.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_domain_name
\& my $override_domain_name=$ipv6ha\->override_domain_name( );
\& #Modify override_domain_name
\& $ipv6ha\->override_domain_name("true");
.Ve
.RE
.RS 4
.RE
.SS "override_domain_name_servers( )"
.IX Subsection "override_domain_name_servers( )"
.RS 4
The override_domain_name_servers attribute controls whether the domain_name_servers value in the \s-1DHCP\s0 IPv6 host address is used, instead of the upper-level default.
.Sp
The override_domain_name_servers attribute can be specified explicitly. It is also set implicitly when domain_name_servers is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for domain_name_servers. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for domain_name_servers.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get override_domain_name_servers
\&    my $override_domain_name_servers=$ipv6ha\->override_domain_name_servers( );
\&    #Modify override_domain_name_servers
\&    $ipv6ha\->override_domain_name_servers("true");
.Ve
.RE
.RS 4
.RE
.SS "override_options( )"
.IX Subsection "override_options( )"
.RS 4
The override_options attribute controls whether the options in the \s-1DHCP\s0 IPv6 host address are used, instead of the upper-level default.
.Sp
The override_options attribute can be specified explicitly. It is also set implicitly when options are set to defined values.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for valid_lifetime. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for valid_lifetime.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get override_options
\&    my $override_options=$host_addr\->override_options( );
\&    #Modify override_options
\&    $host_addr\->override_options("true");
.Ve
.RE
.RS 4
.RE
.SS "override_preferred_lifetime( )"
.IX Subsection "override_preferred_lifetime( )"
.RS 4
The override_preferred_lifetime attribute controls whether the preferred_lifetime value in the \s-1DHCP\s0 IPv6 host address is used, instead of the upper-level default.
.Sp
The override_preferred_lifetime attribute can be specified explicitly. It is also set implicitly when preferred_lifetime is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for valid_lifetime. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for valid_lifetime.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get override_preferred_lifetime
\&    my $override_preferred_lifetime=$host_addr\->override_preferred_lifetime( );
\&    #Modify override_preferred_lifetime
\&    $host_addr\->override_preferred_lifetime("true");
.Ve
.RE
.RS 4
.RE
.SS "override_valid_lifetime( )"
.IX Subsection "override_valid_lifetime( )"
.RS 4
The override_valid_lifetime attribute controls whether the valid_lifetime value in the \s-1DHCP\s0 IPv6 host address is used, instead of the upper-level default.
.Sp
The override_valid_lifetime attribute can be specified explicitly. It is also set implicitly when valid_lifetime is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for valid_lifetime. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for valid_lifetime.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get override_valid_lifetime
\&    my $override_valid_lifetime=$host_addr\->override_valid_lifetime( );
\&    #Modify override_valid_lifetime
\&    $host_addr\->override_valid_lifetime("true");
.Ve
.RE
.RS 4
.RE
.SS "port_duplex( )"
.IX Subsection "port_duplex( )"
.RS 4
Use this method to retrieve the duplex setting of the network device port that is connected to the \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the port duplex setting. The returned value, if any, is one of the following:
.Sp
.Vb 2
\&  Full
\&  Half
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_duplex
\& my $port_duplex = $ipv6ha\->port_duplex();
.Ve
.RE
.RS 4
.RE
.SS "port_link_status( )"
.IX Subsection "port_link_status( )"
.RS 4
Use this method to retrieve the link status of the network device port that is connected to the \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns the link status of the network device port. The returned value, if any, is one of the following:
.Sp
.Vb 3
\&  Connected
\&  Not Connected
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_link_status
\& my $port_link_status = $ipv6ha\->port_link_status();
.Ve
.RE
.RS 4
.RE
.SS "port_speed( )"
.IX Subsection "port_speed( )"
.RS 4
Use this method to retrieve the speed of the network device port that is connected to the \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port speed. The returned value, if any, is one of the following:
.Sp
.Vb 6
\&  10M
\&  100M
\&  1G
\&  10G
\&  100G
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_speed
\& my $port_speed = $ipv6ha\->port_speed();
.Ve
.RE
.RS 4
.RE
.SS "port_status( )"
.IX Subsection "port_status( )"
.RS 4
Use this method to retrieve the status of the network device port that is connected to the \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port status. The returned value, if any, is one of the following:
.Sp
.Vb 3
\&  Up
\&  Down
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_status
\& my $port_status = $ipv6ha\->port_status();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_description( )"
.IX Subsection "port_vlan_description( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 description of the network device port that is connected to the \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1VLAN\s0 description of the network device port.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_description
\& my $port_vlan_description = $ipv6ha\->port_vlan_description();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_name( )"
.IX Subsection "port_vlan_name( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 name of the network device port that is connected to the \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port \s-1VLAN\s0 name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_name
\& my $port_vlan_name = $ipv6ha\->port_vlan_name();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_number ( )"
.IX Subsection "port_vlan_number ( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 number of the network device port that is connected to the \s-1DHCP\s0 IPv6 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the port \s-1VLAN\s0 number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_number
\& my $port_vlan_number  = $ipv6ha\->port_vlan_number ();
.Ve
.RE
.RS 4
.RE
.SS "preferred_lifetime( )"
.IX Subsection "preferred_lifetime( )"
.RS 4
Use this method to set or retrieve the preferred_lifetime value of a \s-1DHCP\s0 IPv6 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_preferred_lifetime method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_preferred_lifetime attribute to \*(L"false\*(R".
.Sp
Note that when preferred_lifetime is set to a defined value and override_preferred_lifetime is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->preferred_lifetime(20000); \f(CW$object\fR\->override_preferred_lifetime(\*(L"false\*(R"); will set override_preferred_lifetime to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_preferred_lifetime(\*(L"false\*(R"); \f(CW$object\fR\->preferred_lifetime(20000); will set override_preferred_lifetime to \*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (valid range from 1 to 4294967295) that represents the lifetime, in seconds. The default value is 27000.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get preferred_lifetime
\& my $preferred_lifetime = $ipv6ha\->preferred_lifetime();
\& #Modify preferred_lifetime
\& $ipv6ha\->preferred_lifetime("369");
.Ve
.RE
.RS 4
.RE
.SS "reserved_interface( )"
.IX Subsection "reserved_interface( )"
.RS 4
Use this method to set or retrieve the reserved discovery interface.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get reserved_interface
\& my $reserved_interface = $ipv6ha\->reserved_interface();
\& #Modify reserved_interface
\& $ipv6ha\->reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "valid_lifetime( )"
.IX Subsection "valid_lifetime( )"
.RS 4
Use this method to set or retrieve the valid_lifetime value of a \s-1DHCP\s0 IPv6 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer, from 1 to 4294967295, that represents the lifetime, in seconds. The default value is 43200.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get valid_lifetime
\& my $valid_lifetime = $ipv6ha\->valid_lifetime();
\& #Modify valid_lifetime
\& $ipv6ha\->valid_lifetime("36900");
.Ve
.RE
.RS 4
.RE
.SS "use_for_ea_inheritance( )"
.IX Subsection "use_for_ea_inheritance( )"
.RS 4
Use this method to set or retrieve the flag that indicates if this host address is used for inheritable extensible attributes.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the flag or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get use_for_ea_inheritance
\& my $use_for_ea_inheritance = $ipv6ha\->use_for_ea_inheritance();
\& #Modify use_for_ea_inheritance
\& $ipv6ha\->use_for_ea_inheritance("true");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as search and modify. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 IPv6 Host Address object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used, note the hostaddress option
\& use strict;
\& use Infoblox qw (:hostaddress);
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create an IPv6 network object
\& my $network = Infoblox::DHCP::IPv6Network\->new(
\&                                            "network" => "2001::/64",
\&                                           );
\& unless($network) {
\&      die("Construct IPv6 Network object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "IPv6 Network object created successfully\en";
\&
\& $session\->add($network)
\&     or die("Add network failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Network added successfully\en";
\&
\& #Create a zone object
\& my $zone = Infoblox::DNS::Zone\->new(
\&                                     name => "test.com",
\&                                    );
\& unless($zone) {
\&      die("Construct Zone object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& $session\->add($zone)
\&     or die("Add zone failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Zone added successfully\en";
\&
\& my $option1 = Infoblox::DHCP::Option\->new(
\&     "name"  => "dhcp6.fqdn",
\&     "value" => "mydomain.com"
\& );
\& unless($option1) {
\&     die("Construct option1 object failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "option1 object created successfully\en";
\&
\& my $option2 = Infoblox::DHCP::Option\->new(
\&     "name"     => "dhcp6.info\-refresh\-time",
\&     "value"    => "1000",
\& );
\& unless($option2) {
\&     die("Construct option2 object failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "option2 object created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 IPv6 Host address object\fR
.PP
.Vb 10
\& #Create a DHCP IPv6 Host Address object
\& my $host_addr = Infoblox::DHCP::IPv6HostAddr\->new(
\&        "ipv6addr"                    => "2001::4",
\&        "duid"                        => "00:00:00:11:11:11",
\&        "domain_name"                 => "foo.com",
\&        "domain_name_servers"         => "2002::1,2002::2",
\&        "preferred_lifetime"          => 1234,
\&        "override_preferred_lifetime" => "true",
\&        "valid_lifetime"              => 123456,
\&        "override_valid_lifetime"     => "true",
\&        "options"                     => [ $option1 , $option2 ],
\&        );
\& unless($host_addr) {
\&      die("Construct IPv6 host address failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP IPv6 Host address object created successfully\en";
\&
\& my $host = Infoblox::DNS::Host\->new(
\&                                     name         => "host.test.com",
\&                                     ipv6addrs    => [$host_addr],
\&                                    );
\&
\& unless($host) {
\&      die("Construct IPv6 host record failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& $session\->add($host)
\&     or die("Add host failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Host added successfully\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DHCP\s0 IPv6 Host Address object\fR
.PP
.Vb 11
\& #Get DHCP IPv6 Host Address object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::IPv6HostAddr",
\&     duid    => "00:00:00:11:11:11",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get IPv6 Host Address object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get IPv6 Host Address object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the obtained IPv6 Host Address object
\& $object\->preferred_lifetime(1235);
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify IPv6 Host Address object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "IPv6 Host Address object modified successfully \en";
\&
\& #Verify that this was changed also when retrieving this via the host record
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Host",
\&     name => "host.test.com",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Host record failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get host record object found at least 1 matching entry\en";
\&
\& my $hostaddress = @{$object\->ipv6addrs()}[0];
\&
\& unless ($hostaddress\->preferred_lifetime() == 1235) {
\&     die("The modification of host address has failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "The change to preferred lifetime has succeeded correctly\en";
\&
\& #The host address retrieved this way can also be modified without submitting the full host record
\& $hostaddress\->preferred_lifetime(1111);
\&
\& #Apply the changes
\& $session\->modify($hostaddress)
\&     or die("Modify IPv6 Host Address object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "IPv6 Host Address object modified successfully \en";
\&
\& #Verify the change was submitted successfully
\& @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::IPv6HostAddr",
\&     duid    => "00:00:00:11:11:11",
\& );
\& $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get IPv6 Host Address object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get IPv6 Host Address object found at least 1 matching entry\en";
\&
\& unless ($hostaddress\->preferred_lifetime() == 1111) {
\&     die("The modification of host address has failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& #Submit the Host object for removal
\& $session\->remove($host)
\&     or die("Remove Host object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Host object removed successfully \en";
\&
\& #Submit the Zone object for removal
\& $session\->remove($zone)
\&     or die("Remove Zone object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Zone object removed successfully \en";
\&
\& #Submit the Network object for removal
\& $session\->remove($network)
\&     or die("Remove Network object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object removed successfully \en";
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DHCP::IPv6Network,
Infoblox::DHCP::View,
Infoblox::DHCP::IPv6Range,
Infoblox::Session\->\fBget()\fR,
Infoblox::Session\->\fBmodify()\fR,
Infoblox::Session\->\fBsearch()\fR,
Infoblox::Session,
Infoblox::Grid::Discovery::Data,
Infoblox::Grid::MSServer::AdUser::Data
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
