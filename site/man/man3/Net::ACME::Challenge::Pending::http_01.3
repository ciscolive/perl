.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::ACME::Challenge::Pending::http_01 3"
.TH Net::ACME::Challenge::Pending::http_01 3 "2018-01-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::ACME::Challenge::Pending::http_01 \- unhandled http\-01 challenge
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::ACME::Challenge::Pending::http_01 ();
\&
\&    my $challenge = Net::ACME::Challenge::Pending::http_01\->new(
\&
\&        #i.e., from the ACME new\-authz call
\&        uri => \*(Aqhttps://post/url/for/challenge\*(Aq,
\&        token => \*(Aqsdgflih4we\*(Aq,
\&    );
\&
\&    {
\&        my $handler = $challenge\->create_handler(
\&            \*(Aq/path/to/docroot\*(Aq,
\&            $jwk,    #public
\&        );
\&
\&        #Suggest verification that the URI matches content.
\&        #cf. docs for Net::ACME
\&
\&        my $acme = Net::ACME::SomeService\->new();
\&        $acme\->do_challenge($challenge);
\&
\&        #wait until the challengeâ€™s authz is resolved
\&    }
\&
\&    #Once $handler goes out of scope, the filesystem preparation is undone.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class handles responses to \f(CW\*(C`http\-01\*(C'\fR challenges, specifically by
facilitating easy setup and teardown of proper domain control validation (\s-1DCV\s0)
files within a given document root.
.PP
To work with challenges that have been handled (successfully or not),
see \f(CW\*(C`Net::ACME::Challenge\*(C'\fR.
