.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::Hogan 3"
.TH Text::Hogan 3 "2019-12-17" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Hogan \- A mustache templating engine statement\-for\-statement cloned from hogan.js
.SH "VERSION"
.IX Header "VERSION"
version 2.03
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Text::Hogan is a statement-for-statement rewrite of
hogan.js <http://twitter.github.io/hogan.js/> in Perl.
.PP
It is a mustache <https://mustache.github.io/> templating engine which
supports pre-compilation of your templates into pure Perl code, which then
renders very quickly.
.PP
It passes the full mustache spec <https://github.com/mustache/spec>.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Text::Hogan::Compiler;
\&
\&    my $text = "Hello, {{name}}!";
\&
\&    my $compiler = Text::Hogan::Compiler\->new;
\&    my $template = $compiler\->compile($text);
\&
\&    say $template\->render({ name => "Alex" });
.Ve
.PP
See Text::Hogan::Compiler and
Text::Hogan::Template for more details.
.SH "TEMPLATE FORMAT"
.IX Header "TEMPLATE FORMAT"
The template format is documented in
\&\fBmustache\fR\|(5) <https://mustache.github.io/mustache.5.html>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SS "hogan.js"
.IX Subsection "hogan.js"
hogan.js <http://twitter.github.io/hogan.js/> is the original library that
Text::Hogan is based on. It was written and is maintained by Twitter. It runs
on Node.js and pre-compiles templates to pure JavaScript.
.SS "Text::Caml"
.IX Subsection "Text::Caml"
Text::Caml supports searching for partials by file name, by
default .caml but that can be configured.
.SS "Template::Mustache"
.IX Subsection "Template::Mustache"
Template::Mustache is used by Dancer::Template::Mustache
and Dancer2::Template::Mustache. It supports compile once, render many times,
but does not allow dumping the compiled form to disk.
.SS "Mustache::Simple"
.IX Subsection "Mustache::Simple"
Mustache::Simple largely supports the Mustache spec, but
skips the whitespace and decimal tests (its behaviour with decimals is the same
as Text::Hogan with 'numeric_string_as_string' option enabled.) It supports
passing objects with getters to the context hash, so that {{name}} can be
rendered from \f(CW$object\fR\->name if \f(CW$object\fR\->can('name') returns true.
.SH "AUTHORS"
.IX Header "AUTHORS"
Started out statement-for-statement copied from hogan.js by Twitter!
.PP
Initial translation by Alex Balhatchet (alex@balhatchet.net)
.PP
Further improvements from:
.PP
Ed Freyfogle
Mohammad S Anwar
Ricky Morse
Jerrad Pierce
Tom Hukins
Tony Finch
Yanick Champoux
