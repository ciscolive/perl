.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Prometheus::Tiny 3"
.TH Prometheus::Tiny 3 "2019-12-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Prometheus::Tiny \- A tiny Prometheus client
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Prometheus::Tiny;
\&
\&    my $prom = Prometheus::Tiny\->new;
\&    $prom\->set(\*(Aqsome_metric\*(Aq, 5, { some_label => "aaa" });
\&    print $prom\->format;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Prometheus::Tiny\*(C'\fR is a minimal metrics client for the
Prometheus <http://prometheus.io/> time-series database.
.PP
It does the following things differently to Net::Prometheus:
.IP "\(bu" 4
No setup. You don't need to pre-declare metrics to get something useful.
.IP "\(bu" 4
Labels are passed in a hash. Positional parameters get awkward.
.IP "\(bu" 4
No inbuilt collectors, \s-1PSGI\s0 apps, etc. Just the metrics.
.IP "\(bu" 4
Doesn't know anything about different metric types. You get what you ask for.
.PP
These could all be pros or cons, depending on what you need. For me, I needed a
compact base that I could back on a shared memory region. See
Prometheus::Tiny::Shared for that!
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    my $prom = Prometheus::Tiny\->new
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "set"
.IX Subsection "set"
.Vb 1
\&    $prom\->set($name, $value, { labels }, [timestamp])
.Ve
.PP
Set the value for the named metric. The labels hashref is optional. The timestamp (milliseconds since epoch) is optional, but requires labels to be provided to use. An empty hashref will work in the case of no labels.
.SS "add"
.IX Subsection "add"
.Vb 1
\&    $prom\->add($name, $amount, { labels })
.Ve
.PP
Add the given amount to the already-stored value (or 0 if it doesn't exist). The labels hashref is optional.
.SS "inc"
.IX Subsection "inc"
.Vb 1
\&    $prom\->inc($name, { labels })
.Ve
.PP
A shortcut for
.PP
.Vb 1
\&    $prom\->add($name, 1, { labels })
.Ve
.SS "dec"
.IX Subsection "dec"
.Vb 1
\&    $prom\->dec($name, { labels })
.Ve
.PP
A shortcut for
.PP
.Vb 1
\&    $prom\->add($name, \-1, { labels })
.Ve
.SS "histogram_observe"
.IX Subsection "histogram_observe"
.Vb 1
\&    $prom\->histogram_observe($name, $value, { labels })
.Ve
.PP
Record a histogram observation. The labels hashref is optional.
.SS "declare"
.IX Subsection "declare"
.Vb 1
\&    $prom\->declare($name, help => $help, type => $type, buckets => [...])
.Ve
.PP
\&\*(L"Declare\*(R" a metric by setting its help text or type.
.PP
For histogram metrics, you can optionally specify the buckets to use. If you
don't, and later call \f(CW\*(C`histogram_observe\*(C'\fR, the following buckets will be used:
.PP
.Vb 1
\&    [ 0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1.0, 2.5, 5.0, 7.5, 10 ]
.Ve
.SS "format"
.IX Subsection "format"
.Vb 1
\&    my $metrics = $prom\->format
.Ve
.PP
Output the stored metrics, values, help text and types in the Prometheus exposition format <https://github.com/prometheus/docs/blob/master/content/docs/instrumenting/exposition_formats.md>.
.SS "psgi"
.IX Subsection "psgi"
.Vb 4
\&    use Plack::Builder
\&    builder {
\&      mount "/metrics" => $prom\->psgi;
\&    };
.Ve
.PP
Returns a simple \s-1PSGI\s0 app that, when hooked up to a web server and called, will
return formatted metrics for Prometheus. This is little more than a wrapper
around \f(CW\*(C`format\*(C'\fR, namely:
.PP
.Vb 4
\&    sub app {
\&      my $env = shift;
\&      return [ 200, [ \*(AqContent\-Type\*(Aq => \*(Aqtext/plain\*(Aq ], [ $prom\->format ] ];
\&    }
.Ve
.PP
This is just a convenience; if you already have a web server or you want to
ship metrics via some other means (eg the Node Exporter's textfile collector),
just use \f(CW\*(C`format\*(C'\fR.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker
at <https://github.com/robn/Prometheus\-Tiny/issues>.
You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software. The code repository is available for
public review and contribution under the terms of the license.
.PP
<https://github.com/robn/Prometheus\-Tiny>
.PP
.Vb 1
\&  git clone https://github.com/robn/Prometheus\-Tiny.git
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Rob N ★ <robn@robn.io>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
ben hengst <ben.hengst@dreamhost.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2017 by Rob N ★
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
