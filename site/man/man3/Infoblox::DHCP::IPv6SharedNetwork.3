.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::IPv6SharedNetwork 3"
.TH Infoblox::DHCP::IPv6SharedNetwork 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::IPv6SharedNetwork \- DHCP IPv6 Shared Network object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You can create a shared network when two subnets share a particular network segment. Before creating a shared
network, you must first create the subnetworks. For example, you must first create the networks 2001:10:20:: and
2001:10:30:: before designating them as a shared network.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\&  my $sharednetwork = Infoblox::DHCP::IPv6SharedNetwork\->new(
\&         name                                => $string,                    #Required
\&         networks                            => [ $Network1,$Network2,...], #Required
\&         comment                             => $string | undef,            #Optional / Default is undefined
\&         ddns_domainname                     => $string | undef,            #Optional / Default is undefined
\&         ddns_enable_option_fqdn             => "true" | "false",           #Optional / Default is "false"
\&         ddns_generate_hostname              => "true" | "false",           #Optional / Default is "false"
\&         ddns_ttl                            => $num,                       #Optional / Default is 0
\&         disable                             => "true" | "false",           #Optional / Default is "false"
\&         domain_name                         => $string | undef,            #Optional / Default is undefined
\&         domain_name_servers                 => "$ipv6addr,$ipv6addr,...",  #Optional / Default is undefined
\&         enable_ddns                         => "true" | "false" | undef,   #Optional / Default is undefined
\&         extattrs                            => { $string => $extattr, ... },      #Optional / Default is undefined
\&         extensible_attributes               => { $string => $string | $num, $string => [ $string | $num, ... ], ... }, #Optional / Default is undefined.
\&         network_view                        => $NetworkView,               #Optional / Default is "default" network view
\&         options                             => [$Option1,$Option2,...],    #Optional / Default is empty list
\&         override_ddns_domainname            => "true" | "false",           #Optional / Default is "false"
\&         override_ddns_enable_option_fqdn    => "true" | "false",           #Optional / Default is "false"
\&         override_ddns_generate_hostname     => "true" | "false",           #Optional / Default is "false"
\&         override_ddns_ttl                   => "true" | "false",           #Optional / Default is "false"
\&         override_domain_name                => "true" | "false",           #Optional / Default is "false"
\&         override_domain_name_servers        => "true" | "false",           #Optional / Default is "false"
\&         override_enable_ddns                => "true" | "false",           #Optional / Default is "false"
\&         override_options                    => "true" | "false",           #Optional / Default is "false"
\&         override_preferred_lifetime         => "true" | "false",           #Optional / Default is "false"
\&         override_update_dns_on_lease_renewal=> "true" | "false",           #Optional / Default is "false"
\&         override_valid_lifetime             => "true" | "false",           #Optional / Default is "false"
\&         preferred_lifetime                  => $num,                       #Optional / Default is 27000
\&         update_dns_on_lease_renewal         => "true" | "false" | undef,   #Optional / Default is undefined
\&         valid_lifetime                      => $num,                       #Optional / Default is 43200
\&    );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a \s-1DHCP\s0 IPv6 shared network object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an IPv6 shared network object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Construct a network object
\& my $network1 = Infoblox::DHCP::IPv6Network\->new(
\&        network => "2001:10:20:30::/64",
\& );
\&
\& #Construct a shared network object
\&   my $sharednetwork = Infoblox::DHCP::IPv6SharedNetwork\->new(
\&        name     => "myname",
\&        networks => [$network1],
\& );
\&
\& # Submit for adding a shared network
\& my $response = $session\->add( $sharednetwork );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching shared network objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP shared network object:
\&
\&  name          \- Required.    The name of the shared network in string format.
\&  network_view  \- Optional.    The network view in which the shared network is located. By default, all network views are searched.
\&  extattrs      \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\&  my  @result_array = $session\->get(
\&       object       => "Infoblox::DHCP::IPv6SharedNetwork" ,
\&       name         => "myname",
\&       network_view => "default"
\&  );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an IPv6 shared network object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use this method to modify the enable_ddns method.
\& $object\->enable_ddns("true");
\& # Submit for modification
\& my $response = $session\->modify( $object );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a shared network object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the object, and then submit it for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get the object under the same name
\& my  @result_array = $session\->get(
\&       object       => "Infoblox::DHCP::IPv6SharedNetwork" ,
\&       name         => "myname",
\&       network_view => "default"
\&  );
\&
\& # Find the desired object on the retrieved list
\& my $desired_network = $result_array[0];
\&
\& # Submit for removal
\& my $response = $session\->remove( $desired_network );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for a \s-1DHCP\s0 shared network object in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DHCP shared network object:
\&
\&  name          \- Required. The name of the shared network in string format (regular expression).
\&  network_view  \- Optional. The network view in which the shared network is located. By default, all network views are searched.
\&  extattrs      \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Search for all DHCP shared networks in the "default" network view
\&     my @retrieved_objs = $session\->search(
\&       object    => "Infoblox::DHCP::IPv6SharedNetwork",
\&       name      => "my.*",
\&       network_view => "default"
\&     );
\&
\& # Search for all IPv6 shared networks with the extensible attribute \*(AqSite\*(Aq
\&     my @retrieved_objs = $session\->search(
\&       object => "Infoblox::DHCP::IPv6SharedNetwork",
\&       extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\&     );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of \s-1DHCP\s0 a shared network object
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $sharednetwork\->comment();
\& #Modify comment
\& $sharednetwork\->comment("Modified shared network");
.Ve
.RE
.RS 4
.RE
.SS "ddns_domainname( )"
.IX Subsection "ddns_domainname( )"
.RS 4
Use this method to set or retrieve the ddns_domainname value of a \s-1DHCP\s0 IPv6 shared network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_domainname method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_ddns_domainname attribute to \*(L"false\*(R".
.Sp
Note that when ddns_domainname is set to a defined value and override_ddns_domainname is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); will set override_ddns_domainname to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); will result in override_ddns_domainname=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The dynamic \s-1DNS\s0 domain name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ddns_domainname
\& my $ddns_domainname = $sharednetwork\->ddns_domainname();
\& #Modify ddns_domainname
\& $sharednetwork\->ddns_domainname("test_domain.com");
.Ve
.RE
.RS 4
.RE
.SS "ddns_enable_option_fqdn( )"
.IX Subsection "ddns_enable_option_fqdn( )"
.RS 4
Use this method to set or retrieve the ddns_enable_option_fqdn flag of a shared network object. This method controls whether the \s-1FQDN\s0 option sent by the client is to be used, or if the server can automatically generate the \s-1FQDN.\s0 This setting overrides the member-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_enable_option_fqdn method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the member default and automatically resets the override_ddns_enable_option_fqdn attribute to \*(L"false\*(R".
.Sp
Note that when ddns_enable_option_fqdn is set to a defined value and override_ddns_enable_option_fqdn is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_enable_option_fqdn(\*(L"true\*(R"); \f(CW$object\fR\->override_ddns_enable_option_fqdn(\*(L"false\*(R"); will set override_ddns_enable_option_fqdn to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_enable_option_fqdn(\*(L"false\*(R"); \f(CW$object\fR\->ddns_enable_option_fqdn(\*(L"true\*(R"); will result in override_ddns_enable_option_fqdn=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to generate the host name or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined, which indicates that this attribute is inherited from the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ddns_enable_option_fqdn
\& my $ddns_enable_option_fqdn = $sharednetwork\->ddns_enable_option_fqdn()
\& # Modify ddns_enable_option_fqdn
\& $sharednetwork\->ddns_enable_option_fqdn("true");
\& #Un\-override
\& $sharednetwork\->ddns_enable_option_fqdn(undef);
.Ve
.RE
.RS 4
.RE
.SS "ddns_generate_hostname( )"
.IX Subsection "ddns_generate_hostname( )"
.RS 4
Use this method to set or retrieve the ddns_generate_hostname flag of a shared network object. Enable this method to allow only the \s-1DHCP\s0 server to generate host name. This setting overrides the member-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_generate_hostname method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level setting and automatically resets the override_ddns_generate_hostname attribute to \*(L"false\*(R".
.Sp
Note that when ddns_generate_hostname is set to a defined value and override_ddns_generate_hostname is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_generate_hostname(\*(L"true\*(R"); \f(CW$object\fR\->override_ddns_generate_hostname(\*(L"false\*(R"); will set override_ddns_generate_hostname to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_generate_hostname(\*(L"false\*(R"); \f(CW$object\fR\->ddns_generate_hostname(\*(L"true\*(R"); will result in override_ddns_generate_hostname=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to generate the host name or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined, which indicates that this attribute is inherited from the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ddns_generate_hostname
\& my $ddns_generate_hostname = $sharednetwork\->ddns_generate_hostname()
\& # Modify ddns_generate_hostname
\& $sharednetwork\->ddns_generate_hostname("true");
\& #Un\-override
\& $sharednetwork\->ddns_generate_hostname(undef);
.Ve
.RE
.RS 4
.RE
.SS "ddns_ttl( )"
.IX Subsection "ddns_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 update Time to Live (\s-1TTL\s0) value of an IPv6 shared network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_ttl method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_ddns_ttl attribute to \*(L"false\*(R".
.Sp
Note that when ddns_ttl is set to a defined value and override_dddns_ttl is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_ttl(12); \f(CW$object\fR\->override_ddns_ttl(\*(L"false\*(R"); will set override_ddns_ttl to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_ttl(\*(L"false\*(R"); \f(CW$object\fR\->ddns_ttl(12); will result in override_ddns_ttl=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration,in seconds, that the update is cached. Zero indicates that the update should not be cached. The default value is zero.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get DNS Update TTL
\& my $dns_ttl = $sharednetwork\->ddns_ttl();
\& #Modify DNS Update TTL
\& $sharednetwork\->ddns_ttl(1200);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of an IPv6 shared network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag and disable the shared network or \*(L"false\*(R" to unset the flag and enable the IPv6 shared network. The default value for this field is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get disable
\& my $disable = $sharednetwork\->disable()
\& # Modify disable
\& $sharednetwork\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "domain_name( )"
.IX Subsection "domain_name( )"
.RS 4
Use this method to set or retrieve the domain_name value of a \s-1DHCP\s0 IPv6 shared network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_domain_name method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_domain_name attribute to \*(L"false\*(R".
.Sp
Note that when domain_name is set to a defined value and override_domain_name is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->domain_name(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_domain_name(\*(L"false\*(R"); will set override_domain_name to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_domain_name(\*(L"false\*(R"); \f(CW$object\fR\->domain_name(\*(L"testdomain\*(R"); will result in override_domain_name=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the client's domain for resolving names in \s-1DNS\s0 in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get domain_name
\& my $domain_name = $sharednetwork\->domain_name();
\& #Modify domain_name
\& $sharednetwork\->domain_name("test_domain.com");
.Ve
.RE
.RS 4
.RE
.SS "domain_name_servers( )"
.IX Subsection "domain_name_servers( )"
.RS 4
Use this method to set or retrieve the domain_name_servers value of a \s-1DHCP\s0 IPv6 shared network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_domain_name_servers method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_domain_name_servers attribute to \*(L"false\*(R".
.Sp
Note that when domain_name_servers is set to a defined value and override_domain_name_servers is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->domain_name_servers(\*(L"2001::1,2001::2\*(R"); \f(CW$object\fR\->override_domain_name_servers(\*(L"false\*(R"); will set override_domain_name_servers to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_domain_name_servers(\*(L"false\*(R"); \f(CW$object\fR\->domain_name_servers(\*(L"2001::1,2001::2\*(R"); will result in override_domain_name_servers=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A comma separated list of the domain name server addresses in IPv6 address format. Spaces around the commas are not allowed.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get domain_name_servers
\& my $domain_name_servers = $sharednetwork\->domain_name_servers();
\& #Modify domain_name_servers
\& $sharednetwork\->domain_name_servers("2001::1,2001::2");
.Ve
.RE
.RS 4
.RE
.SS "enable_ddns( )"
.IX Subsection "enable_ddns( )"
.RS 4
Use this method to set or retrieve the dynamic \s-1DNS\s0 updates flag of a \s-1DHCP\s0 IPv6 shared network object. The \s-1DHCP\s0 server can send \s-1DDNS\s0 updates to \s-1DNS\s0 servers in the same grid and to external \s-1DNS\s0 servers. This setting overrides the member-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_enable_ddns method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_enable_ddns attribute to \*(L"false\*(R".
.Sp
Note that when enable_ddns is set to a defined value and override_enable_ddns is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->enable_ddns(\*(L"true\*(R"); \f(CW$object\fR\->override_enable_ddns(\*(L"false\*(R"); will set override_enable_ddns to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_enable_ddns(\*(L"false\*(R"); \f(CW$object\fR\->enable_ddns(\*(L"true\*(R"); will result in override_enable_ddns=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the dynamic \s-1DNS\s0 updates flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined, which indicates that this attribute is inherited from the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get enable_ddns
\& my $enable_ddns = $sharednetwork\->enable_ddns()
\& # Modify enable_ddns
\& $sharednetwork\->enable_ddns("true");
\& # Un\-override enable_ddns
\& $sharednetwork\->enable_ddns(undef);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with an IPv6 shared network object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $sharednetwork\->extattrs();
\& #Modify extattrs
\& $sharednetwork\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with an IPv6 shared network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $shared_network\->extensible_attributes();
\& #Modify extensible attributes
\& $shared_network\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to retrieve the name of an IPv6 shared network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the shared network in string format. A name can have a maximum of 32 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name
\& my $sharednetwork = $sharednetwork\->name();
.Ve
.RE
.RS 4
.RE
.SS "networks( )"
.IX Subsection "networks( )"
.RS 4
Use this method to retrieve the \s-1DHCP\s0 IPv6 networks associated with an IPv6 shared network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DHCP::IPv6Network objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get networks
\& my $sharednetwork = $sharednetwork\->networks();
\& #Modify networks
\& my $network1 = Infoblox::DHCP::IPv6Network\->new(
\&                                        "network" => "2001:10:20:30::/64",
\&                                );
\& my $network2 = Infoblox::DHCP::IPv6Network\->new(
\&                                        "network" => "2001:10:20:40::/64",
\&                                );
\& my $sharednetwork = $sharednetwork\->networks([$network1, $network2]);
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the network view of the \s-1DHCP\s0 IPv6 shared network.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" network view, which means the \s-1DHCP\s0 shared network is in the default network view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a defined Infoblox::DHCP::View object. The default network view value is the system-defined default network view object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network view
\& my $nview = $sharednetwork\->network_view();
\& #Modify network view, with an Infoblox::DHCP::View object
\& $sharednetwork\->network_view($nview);
.Ve
.RE
.RS 4
.RE
.SS "options( )"
.IX Subsection "options( )"
.RS 4
Use this method to set or retrieve the options value of \s-1DHCP\s0 IPv6 shared network. \s-1DHCP\s0 options provide network configuration
settings and various services available on the network for \s-1DHCP.\s0 This setting overrides the member-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_options method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_options attribute to \*(L"false\*(R".
.Sp
Note that when the options method is set to a defined value and override_options is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->options([ \f(CW$opt\fR ]); \f(CW$object\fR\->override_options(\*(L"false\*(R"); will set override_options to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_options(\*(L"false\*(R"); \f(CW$object\fR\->options([ \f(CW$opt\fR ]); will result in override_options=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DHCP::Option objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get options
\& my $options = $sharednetwork\->options();
\& #Modify options
\& my $option1 = Infoblox::DHCP::Option\->new(
\&     name   => "dhcp6.rapid\-commit",
\&     value  => "true"
\& );
\& $sharednetwork\->options([$option1]);
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_domainname( )"
.IX Subsection "override_ddns_domainname( )"
.RS 4
The override_ddns_domainname attribute controls whether the ddns_domainname value in the \s-1DHCP\s0 IPv6 shared network is used, instead of the grid default.
.Sp
The override_ddns_domainname attribute can be specified explicitly. It is also set implicitly when ddns_domainname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for ddns_domainname. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for ddns_domainname.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_domainname
\&    my $override_ddns_domainname=$sharednetwork\->override_ddns_domainname( );
\&    #Modifying override_ddns_domainname
\&    $sharednetwork\->override_ddns_domainname("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_enable_option_fqdn( )"
.IX Subsection "override_ddns_enable_option_fqdn( )"
.RS 4
The override_ddns_enable_option_fqdn attribute controls whether the enable_ddns value in the \s-1DHCP\s0 IPv6 shared network is used, instead of the grid default.
.Sp
The override_ddns_enable_option_fqdn attribute can be specified explicitly. It is also set implicitly when enable_ddns is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for enable_ddns. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for enable_ddns.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_enable_option_fqdn
\&    my $override_ddns_enable_option_fqdn=$sharednetwork\->override_ddns_enable_option_fqdn( );
\&    #Modifying override_ddns_enable_option_fqdn
\&    $sharednetwork\->override_ddns_enable_option_fqdn("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_generate_hostname( )"
.IX Subsection "override_ddns_generate_hostname( )"
.RS 4
The override_ddns_generate_hostname attribute controls whether the enable_ddns value in the \s-1DHCP\s0 IPv6 shared network is used, instead of the grid default.
.Sp
The override_ddns_generate_hostname attribute can be specified explicitly. It is also set implicitly when enable_ddns is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for enable_ddns. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for enable_ddns.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_generate_hostname
\&    my $override_ddns_generate_hostname=$sharednetwork\->override_ddns_generate_hostname( );
\&    #Modifying override_ddns_generate_hostname
\&    $sharednetwork\->override_ddns_generate_hostname("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_ttl( )"
.IX Subsection "override_ddns_ttl( )"
.RS 4
The override_ddns_ttl attribute controls whether the ddns_ttl value in the \s-1DHCP\s0 shared network object is used, instead of the grid default.
.Sp
The override_ddns_ttl attribute can be specified explicitly. It is also set implicitly when ddns_ttl is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for ddns_ttl. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for ddns_ttl.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_ttl
\&    my $override_ddns_ttl=$sharednetwork\->override_ddns_ttl( );
\&    #Modifying override_ddns_ttl
\&    $sharednetwork\->override_ddns_ttl("true");
.Ve
.RE
.RS 4
.RE
.SS "override_domain_name( )"
.IX Subsection "override_domain_name( )"
.RS 4
The override_domain_name attribute controls whether the domain_name value in the \s-1DHCP\s0 IPv6 shared network is used, instead of the grid default.
.Sp
The override_domain_name attribute can be specified explicitly. It is also set implicitly when domain_name is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for domain_name. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for domain_name.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_domain_name
\&    my $override_domain_name=$sharednetwork\->override_domain_name( );
\&    #Modifying override_domain_name
\&    $sharednetwork\->override_domain_name("true");
.Ve
.RE
.RS 4
.RE
.SS "override_domain_name_servers( )"
.IX Subsection "override_domain_name_servers( )"
.RS 4
The override_domain_name_servers attribute controls whether the domain_name_servers value in the \s-1DHCP\s0 IPv6 shared network is used, instead of the grid default.
.Sp
The override_domain_name_servers attribute can be specified explicitly. It is also set implicitly when domain_name_servers is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for domain_name_servers. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for domain_name_servers.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_domain_name_servers
\&    my $override_domain_name_servers=$sharednetwork\->override_domain_name_servers( );
\&    #Modifying override_domain_name_servers
\&    $sharednetwork\->override_domain_name_servers("true");
.Ve
.RE
.RS 4
.RE
.SS "override_enable_ddns( )"
.IX Subsection "override_enable_ddns( )"
.RS 4
The override_enable_ddns attribute controls whether the enable_ddns value in the \s-1DHCP\s0 IPv6 shared network is used, instead of the grid default.
.Sp
The override_enable_ddns attribute can be specified explicitly. It is also set implicitly when enable_ddns is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for enable_ddns. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for enable_ddns.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_enable_ddns
\&    my $override_enable_ddns=$sharednetwork\->override_enable_ddns( );
\&    #Modifying override_enable_ddns
\&    $sharednetwork\->override_enable_ddns("true");
.Ve
.RE
.RS 4
.RE
.SS "override_options( )"
.IX Subsection "override_options( )"
.RS 4
The override_options attribute controls whether the options value in the \s-1DHCP\s0 IPv6 shared network is used, instead of the grid default.
.Sp
The override_options attribute can be specified explicitly. It is also set implicitly when options is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for options. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for options.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_options
\&    my $override_options=$sharednetwork\->override_options( );
\&    #Modifying override_options
\&    $sharednetwork\->override_options("true");
.Ve
.RE
.RS 4
.RE
.SS "override_preferred_lifetime( )"
.IX Subsection "override_preferred_lifetime( )"
.RS 4
The override_preferred_lifetime attribute controls whether the preferred_lifetime value in the \s-1DHCP\s0 IPv6 shared network is used, instead of the grid default.
.Sp
The override_preferred_lifetime attribute can be specified explicitly. It is also set implicitly when preferred_lifetime is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for options. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for options.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_preferred_lifetime
\&    my $override_preferred_lifetime=$sharednetwork\->override_preferred_lifetime( );
\&    #Modifying override_preferred_lifetime
\&    $sharednetwork\->override_preferred_lifetime("true");
.Ve
.RE
.RS 4
.RE
.SS "override_update_dns_on_lease_renewal( )"
.IX Subsection "override_update_dns_on_lease_renewal( )"
.RS 4
The override_update_dns_on_lease_renewal attribute controls whether the update_dns_on_lease_renewal value in the \s-1DHCP\s0 shared network object is used, instead of the grid default.
.Sp
The override_update_dns_on_lease_renewal attribute can be specified explicitly. It is also set implicitly when update_dns_on_lease_renewal is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for update_dns_on_lease_renewal. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for update_dns_on_lease_renewal.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_update_dns_on_lease_renewal
\&    my $override_update_dns_on_lease_renewal=$sharednetwork\->override_update_dns_on_lease_renewal( );
\&    #Modifying override_update_dns_on_lease_renewal
\&    $sharednetwork\->override_update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SS "override_valid_lifetime( )"
.IX Subsection "override_valid_lifetime( )"
.RS 4
The override_valid_lifetime attribute controls whether the valid_lifetime value in the \s-1DHCP\s0 IPv6 shared network is used, instead of the grid default.
.Sp
The override_valid_lifetime attribute can be specified explicitly. It is also set implicitly when valid_lifetime is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for options. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for options.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_valid_lifetime
\&    my $override_valid_lifetime=$sharednetwork\->override_valid_lifetime( );
\&    #Modifying override_valid_lifetime
\&    $sharednetwork\->override_valid_lifetime("true");
.Ve
.RE
.RS 4
.RE
.SS "preferred_lifetime( )"
.IX Subsection "preferred_lifetime( )"
.RS 4
Use this method to set or retrieve the preferred lifetime of the \s-1DHCP\s0 IPv6 shared network object.
.Sp
Setting this method to a defined value implicitly sets the override_preferred_lifetime method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the upper-level default and automatically resets the override_preferred_lifetime attribute to \*(L"false\*(R".
.Sp
Note that when preferred_lifetime is set to a defined value and override_preferred_lifetime is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->preferred_lifetime(20000); \f(CW$object\fR\->override_preferred_lifetime(\*(L"false\*(R"); will set override_preferred_lifetime to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_preferred_lifetime(\*(L"false\*(R"); \f(CW$object\fR\->preferred_lifetime(20000); will result in override_preferred_lifetime=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Preferred lifetime value in seconds. The default value is 27000. Note that the preferred lifetime cannot be greater than the valid lifetime.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get preferred_lifetime
\& my $preferred_lifetime = $sharednetwork\->preferred_lifetime();
\& #Modify preferred_lifetime
\& $sharednetwork\->preferred_lifetime(12345);
.Ve
.RE
.RS 4
.RE
.SS "update_dns_on_lease_renewal( )"
.IX Subsection "update_dns_on_lease_renewal( )"
.RS 4
The update_dns_on_lease_renewal attribute controls whether the \s-1DHCP\s0 server updates \s-1DNS\s0 when a \s-1DHCP\s0 lease is renewed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_update_dns_on_lease_renewal method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_update_dns_on_lease_renewal attribute to \*(L"false\*(R".
.Sp
Note that when update_dns_on_lease_renewal is set to a defined value and override_update_dns_on_lease_renewal is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); will set override_update_dns_on_lease_renewal to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); will result in override_update_dns_on_lease_renewal=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the update_dns_on_lease_renewal flag or \*(L"false\*(R" to deactivate/unset it.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get update_dns_on_lease_renewal
\&    my $update_dns_on_lease_renewal=$sharednetwork\->update_dns_on_lease_renewal( );
\&    #Modify update_dns_on_lease_renewal
\&    $sharednetwork\->update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SS "valid_lifetime( )"
.IX Subsection "valid_lifetime( )"
.RS 4
Use this method to set or retrieve the valid lifetime value of a \s-1DHCP\s0 IPv6 shared network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_valid_lifetime method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_valid_lifetime attribute to \*(L"false\*(R".
.Sp
Note that when valid_lifetime is set to a defined value and override_valid_lifetime is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->valid_lifetime(691200); \f(CW$object\fR\->override_valid_lifetime(\*(L"false\*(R"); will set override_valid_lifetime to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_valid_lifetime(\*(L"false\*(R"); \f(CW$object\fR\->valid_lifetime(691200); will result in override_valid_lifetime=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (valid range from 1 to 4294967295) that represents the lifetime, in seconds. The default value is 43200.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get valid lifetime
\& my $valid_lifetime = $sharednetwork\->valid_lifetime();
\& #Modify valid lifetime
\& $sharednetwork\->valid_lifetime(864000);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 IPv6 shared network object insertion\fR
.PP
.Vb 11
\& #Create a session to the Infoblox device
\& my $session = Infoblox::Session\->new(
\&     master   =>  "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create a DHCP Network object>
\&
\& my $network1 = Infoblox::DHCP::IPv6Network\->new(
\&                                        "network" => "2001:10:20:30::/64",
\&                                );
\& my $network2 = Infoblox::DHCP::IPv6Network\->new(
\&                                        "network" => "2001:10:20:40::/64",
\&                                );
\& my $response = $session\->add($network1)
\& or die("Add \e"2001:10:20:30::/64\e"Network failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network \e"2001:10:20:30::/64\e"added successfully\en"; my $response = $session\->add($network2)
\&        or die("Add  \e"2001:10:20:30::/64\e" Network failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network  \e"2001:10:20:40::/64\e",added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 IPv6 Shared Network object\fR
.PP
.Vb 10
\& my $sharednetwork1 = Infoblox::DHCP::IPv6SharedNetwork\->new(
\&                                        "name"                            => "myname",
\&                                        "comment"                         => "add shared network",
\&                                        "ddns_domainname"                 => \*(Aqddns.com\*(Aq,
\&                                        "ddns_ttl"                        => 123,
\&                                        "networks"                        => [ $network1 , $network2 ],
\&                                        "disable"                         => "false",
\&                                        "domain_name"                     => \*(Aqbar.com\*(Aq,
\&                                        "domain_name_servers"             => \*(Aq2001::1,2001::2\*(Aq,
\&                                        "enable_ddns"                     => \*(Aqfalse\*(Aq,
\&                                        "ddns_generate_hostname"          => \*(Aqfalse\*(Aq,
\&                                        "override_ddns_domainname"        => \*(Aqtrue\*(Aq,
\&                                        "override_ddns_ttl"               => \*(Aqtrue\*(Aq,
\&                                        "override_domain_name"            => \*(Aqtrue\*(Aq,
\&                                        "override_domain_name_servers"    => \*(Aqtrue\*(Aq,
\&                                        "override_enable_ddns"            => \*(Aqtrue\*(Aq,
\&                                        "override_valid_lifetime"         => \*(Aqtrue\*(Aq,
\&                                        "override_preferred_lifetime"     => \*(Aqtrue\*(Aq,
\&                                        "override_update_dns_on_lease_renewal" => \*(Aqtrue\*(Aq,
\&                                        "preferred_lifetime"              => 1234,
\&                                        "update_dns_on_lease_renewal"     => \*(Aqtrue\*(Aq,
\&                                        "valid_lifetime"                  => 12345,
\&                                        );
\&
\& my $response = $session\->add( $sharednetwork1 )
\& or die("Add IPv6 Shared Network failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "IPv6 Shared Network added successfully\en";
.Ve
.PP
\&\fB#Search for a specific IPv6 Shared Network\fR
.PP
.Vb 10
\& #Search the network
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DHCP::IPv6SharedNetwork",
\&     "name"  => "my.*"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search IPv6 Shared Network failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Search IPv6 Shared Network found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a IPv6 Shared Network attribute\fR
.PP
.Vb 5
\& #Get IPv6 Shared Network through the session
\& my  @retrieved_objs = $session\->get(
\&           object =>"Infoblox::DHCP::IPv6SharedNetwork" ,
\&           "name" => "myname"
\&        );
\&
\& my $object = $retrieved_objs[0]; unless ($object) {
\&      die("Get IPv6 Shared Network object failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&
\& print "Get IPv6 Shared Network found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified Network attribute>
\& $object\->disable("true");
\& #Apply the changes
\& my $res = $session\->modify($object) ;
\& if ( !$res)
\& {
\&      print "Modify IPv6 Shared Network attribute failed: ".$session\->status_code() . ":" . $session\->status_detail();
\&
\& }
\&
\& print "IPv6 Shared Network object modified successfully \en";
.Ve
.PP
\&\fB#Remove a IPv6 Shared Network Object\fR
.PP
.Vb 9
\& #Get Network object through the session
\& my @retrieved_objs = $session\->get(
\&           object  => "Infoblox::DHCP::IPv6SharedNetwork" ,
\&           name    => "myname"
\&    );
\& my $object = $retrieved_objs[0];    unless ($object) {
\&    die("Get IPv6 Shared Network object failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Get IPv6 Shared Network object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&      or die("Remove IPv6 Shared Network failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "IPv6 Shared Network removed successfully \en";
\&
\& #Submit the network object for removal
\& my $response = $session\->remove($network1)
\& or die("Remove \e"2001:10:20:30::/64\e"Network failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network \e"2001:10:20:30::/64\e"removed successfully\en";
\&
\& #Submit the network object for removal
\& my $response = $session\->remove($network2)
\&        or die("Remove  \e"11.0.0.0\e"Network failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network \e"2001:10:20:40::/64\e"removed successfully\en";
\&
\&      ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DHCP::Network, Infoblox::DHCP::View, Infoblox::DHCP::Option, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
