.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DNS::Unbound::Result 3"
.TH DNS::Unbound::Result 3 "2019-11-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DNS::Unbound::Result
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class represents a \s-1DNS\s0 query result from DNS::Unbound.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
This class includes an accessor for most members of \f(CW\*(C`struct ub_result\*(C'\fR
(cf. \fBlibunbound\fR\|(3) <https://nlnetlabs.nl/documentation/unbound/libunbound/>).
.PP
The following all return scalars:
.IP "\(bu" 4
\&\f(CW\*(C`qname()\*(C'\fR, \f(CW\*(C`qtype()\*(C'\fR, \f(CW\*(C`qclass()\*(C'\fR, \f(CW\*(C`ttl()\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`rcode()\*(C'\fR, \f(CW\*(C`nxdomain()\*(C'\fR, \f(CW\*(C`havedata()\*(C'\fR, \f(CW\*(C`canonname()\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`secure()\*(C'\fR, \f(CW\*(C`bogus()\*(C'\fR, \f(CW\*(C`why_bogus()\*(C'\fR, \f(CW\*(C`answer_packet\*(C'\fR
.PP
\&\f(CW\*(C`data()\*(C'\fR returns an array reference of strings that contain the query
result in DNS-native \s-1RDATA\s0 encoding.
.SH "ADDITIONAL METHODS"
.IX Header "ADDITIONAL METHODS"
.ie n .SS "$objs_ar = \fI\s-1OBJ\s0\fP\->\fBto_net_dns_rrs()\fP"
.el .SS "\f(CW$objs_ar\fP = \fI\s-1OBJ\s0\fP\->\fBto_net_dns_rrs()\fP"
.IX Subsection "$objs_ar = OBJ->to_net_dns_rrs()"
\&\fB\s-1IMPORTANT:\s0\fR This method is \s-1DEPRECATED\s0 and will be withdrawn in a
forthcoming version. Please migrate to the following logic instead
(assuming an instance of this class in \f(CW$result\fR):
.PP
.Vb 1
\&    my $packet = Net::DNS::Packet\->new( \e$result\->answer_packet() );
.Ve
.PP
… which will yield a Net::DNS::Packet instance.
.PP
The \s-1DEPRECATED\s0 method’s documentation follows:
.PP
The \f(CW\*(C`data()\*(C'\fR accessor’s return values are raw \s-1RDATA.\s0 Your application
likely prefers to work with parsed \s-1DNS\s0 data, though. This method facilitates
that by loading Net::DNS::RR and returning a reference to an array of
instances of that class (i.e., probably a subclass of it like
Net::DNS::RR::NS).
.PP
So, for example, to get a \s-1TXT\s0 query result’s value as a list of
character strings, you could do:
.PP
.Vb 1
\&    @cstrings = map { $_\->txtdata() } @{ $result\->to_net_dns_rrs() }
.Ve
