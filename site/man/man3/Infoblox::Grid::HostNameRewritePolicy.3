.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::HostNameRewritePolicy 3"
.TH Infoblox::Grid::HostNameRewritePolicy 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::HostNameRewritePolicy \- a structure for storing hostname rewrite policies.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An Infoblox::Grid::HostNameRewritePolicy object represents a hostname rewrite policy.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 6
\&  my $policy = Infoblox::Grid::HostNameRewritePolicy\->new(
\&       name                  => $string,           # Required
\&       valid_characters      => $string,           # Required
\&       replacement_character => $string,           # Required
\&       is_grid_default       => "true" | "false",  # Optional / Default value is "false"
\&  );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to an Infoblox::Grid::HostNameRewritePolicy object.
.SS "Infoblox::Grid::DHCP\->protocol_hostname_rewrite_policies( )"
.IX Subsection "Infoblox::Grid::DHCP->protocol_hostname_rewrite_policies( )"
.RS 4
Use this function to add or retrieve hostname rewrite policies. See Infoblox::Grid::DHCP\->\fBprotocol_hostname_rewrite_policies()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get Grid DHCP object
\& my @retrieved_objs = $session\->get(
\&        object => "Infoblox::Grid::DHCP",
\&        grid   => "Infoblox"
\& );
\& my $griddhcp = $retrieved_objs[0];
\&
\& #Modify protocol_hostname_rewrite_policies
\& my $policies = $griddhcp\->protocol_hostname_rewrite_policies();
\& push(@$policies, $policy);
\& $griddhcp\->protocol_hostname_rewrite_policies($policies);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of an Infoblox::Grid::HostNameRewritePolicy object.
.SS "is_grid_default( )"
.IX Subsection "is_grid_default( )"
.RS 4
Use this method to set or retrieve the grid's default hostname rewrite policy.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set a policy as the grid default hostname rewrite policy or \*(L"false\*(R" to disable it. Default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get is_grid_default
\& my $is_grid_default = $policy\->is_grid_default();
\& #Modify is_grid_default
\& $policy\->is_grid_default(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the policy name.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
String with policy name.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $policy\->name();
\& #Modify name
\& $policy\->name(\*(Aqnew_policy\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "replacement_character( )"
.IX Subsection "replacement_character( )"
.RS 4
Use this method to set or retrieve the replacement character.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The replacement character.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get replacement_character
\& my $replacement_character = $policy\->replacement_character();
\& #Modify name
\& $policy\->replacement_character(\*(Aq\-\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "pre_defined( )"
.IX Subsection "pre_defined( )"
.RS 4
Use this method to retrieve a predefined hostname rewrite policy. This attribute is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get pre_defined
\& my $pre_defined = $policy\->pre_defined();
.Ve
.RE
.RS 4
.RE
.SS "valid_characters( )"
.IX Subsection "valid_characters( )"
.RS 4
Use this method to set or retrieve permitted characters for a hostname.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
String with permitted characters for a hostname.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get valid_characters
\& my $valid_characters = $policy\->valid_characters();
\& #Modify valid_characters
\& $policy\->valid_characters(\*(AqA\-Z0\-9_\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::DHCP, Infoblox::Grid::Member::DHCP
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
