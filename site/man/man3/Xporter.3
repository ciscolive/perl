.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Xporter 3"
.TH Xporter 3 "2014-08-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Xporter \- Alternative Exporter with persistant defaults & auto\-ISA
.SH "VERSION"
.IX Header "VERSION"
Version \*(L"0.1.1\*(R"
.SH "SYNOPIS"
.IX Header "SYNOPIS"
In the \*(L"Exporting\*(R" module:
.PP
.Vb 8
\&  { package module_adder [optional version]; 
\&          use warnings; use strict;
\&    use mem;                    # to allow using module in same file
\&    our (@EXPORT, @EXPORT_OK);
\&    our $lastsum;
\&    our @lastargs;
\&    use Xporter(@EXPORT=qw(adder $lastsum @lastargs), 
\&                        @EXPORT_OK=qw(print_last_result));
\&
\&    sub adder($$) {@lastargs=@_; $lastsum=$_[0]+$_[1]}
\&    sub print_last_result () {
\&      use P;    # using P allows answer printed or as string
\&      if (@lastargs && defined $lastsum){
\&        P "%s = %s\en", (join \*(Aq + \*(Aq , @lastargs), $lastsum;
\&      }
\&    }
\&  }
.Ve
.PP
In \f(CW\*(C`use\*(C'\fR\-ing module (same or different file)
.PP
.Vb 2
\&  package main;  use warnings; use strict;
\&  use module_adder qw(print_last_result);
\&
\&  adder 4,5;
.Ve
.PP
Printing output:
.PP
.Vb 1
\&  print_last_result();
\&
\&  #Result:
\&  
\&  4 + 5 = 9
.Ve
.PP
(Or in a test:)
.PP
.Vb 1
\&  ok(print_last_result eq "4 + 5 = 9", "a pod test");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Xporter\*(C'\fR  provides  \f(CW\*(C`EXPORT\*(C'\fR  functionality similar to  Exporter  with
some different rules to simplify common cases.
.PP
The primary difference, in  \f(CW\*(C`Xporter\*(C'\fR  is that the default  \f(CW\*(C`EXPORT\*(C'\fR  list
remains the default  \f(CW\*(C`EXPORT\*(C'\fR  list unless the user specifically asks for it
to not be included, whereas in Exporter, asking for any additional
exports from the  \f(CW\*(C`EXPORT_OK\*(C'\fR  list, clears the default  \f(CW\*(C`EXPORT\*(C'\fR  list.
.PP
\&\f(CW\*(C`Xporter\*(C'\fR  makes it easy to reset or clear the default so that choice
is left to the user.
.PP
To reset the default  \f(CW\*(C`EXPORT\*(C'\fR  list to empty, a bare \fIminus\fR ('\-') or
\&\fIlogical-not\fR sign ('!') is placed as the first parameter in the client's import
list.
.PP
\fIExample\fR
.IX Subsection "Example"
.PP
Suppose a module has exports:
.PP
.Vb 3
\&  our (@EXPORT, @EXPORT_OK);
\&  use Xporter(@EXPORT=qw(one $two %three @four), 
\&              @EXPORT_OK=qw(&five));
.Ve
.PP
In the using module, to only import symbols 'two' and 'five', 
one would use:
.PP
\fIExample\fR
.IX Subsection "Example"
.PP
.Vb 1
\&  use MODULENAME qw(! $two five);
.Ve
.PP
That negates the default \f(CW\*(C`EXPORT\*(C'\fR list, and allows selective import
of the values wanted from either,  the default  \f(CW\*(C`EXPORT\*(C'\fR  or the
\&\f(CW\*(C`EXPORT_OK\*(C'\fR lists.  \fINote:\fR  modules in the default list don't need 
to be reiterated in the \s-1OK\s0 list as they are already assumed to be
\&\*(L"\s-1OK\*(R"\s0 to export having been in the default list.
.PP
(New in 0.1) It is also possible to negate only 1 item from the 
default \f(CW\*(C`EXPORT\*(C'\fR list, as well as import optional symbols in 
1 statement.
.PP
\fIExample\fR
.IX Subsection "Example"
.PP
.Vb 2
\&  use MODULENAME qw(!$two five);      #or
\&  use MODULENAME qw(!two five);
.Ve
.PP
Only export \f(CW\*(C`two\*(C'\fR from the default export list will be 
excluded.  Whereas export \f(CW\*(C`five\*(C'\fR will be added to the list
of items to import.
.PP
Other functions of Exporter are not currently implemented, though
certainly requests and code donations made via the \s-1CPAN\s0 issue database 
will be considered if possible.
.SS "Types and Type Export"
.IX Subsection "Types and Type Export"
Listing the \s-1EXPORT\s0 and \s-1EXPORT_OK\s0 assignments as params to Xporter will
allow their types to be available to importing modules at compile time.
the mem module was provided as a generic way to force declarations
into memory during Perl's initial \s-1BEGIN\s0 phase so they will be in effect
when the program runs.
.SS "Version Strings"
.IX Subsection "Version Strings"
Version strings in the form of a decimal fraction, (0.001001), a
V\-String (v1.2.1 with no quotes), or a version string
('1.1.1' or 'v1.1.1') are supported, though note, versions in
different formats are not interchangeable.  The format specified
in a module's documentation should be used.
