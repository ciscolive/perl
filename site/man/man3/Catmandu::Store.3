.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catmandu::Store 3"
.TH Catmandu::Store 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catmandu::Store \- Namespace for packages that can make data persistent
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # From the command line
\&
\&    $ catmandu import JSON into MongoDB \-\-database_name \*(Aqbibliography\*(Aq < data.json
\&
\&    $ catmandu export MongoDB \-\-database_name \*(Aqbibliography\*(Aq to YAML
\&    $ catmandu export MongoDB \-\-database_name \*(Aqbibliography\*(Aq \-\-query \*(Aq{"PublicationYear": "1937"}\*(Aq
\&    $ catmandu count  MongoDB \-\-database_name \*(Aqbibliography\*(Aq \-\-query \*(Aq{"PublicationYear": "1937"}\*(Aq
\&
\&    # From Perl
\&    use Catmandu;
\&
\&    my $store = Catmandu\->store(\*(AqMongoDB\*(Aq,database_name => \*(Aqbibliography\*(Aq);
\&
\&    my $obj1 = $store\->bag\->add({ name => \*(AqPatrick\*(Aq });
\&
\&    printf "obj1 stored as %s\en" , $obj1\->{_id};
\&
\&    # Force an id in the store
\&    my $obj2 = $store\->bag\->add({ _id => \*(Aqtest123\*(Aq , name => \*(AqNicolas\*(Aq });
\&
\&    my $obj3 = $store\->bag\->get(\*(Aqtest123\*(Aq);
\&
\&    $store\->bag\->delete(\*(Aqtest123\*(Aq);
\&
\&    $store\->bag\->delete_all;
\&
\&    # Some stores can be searched
\&    my $hits = $store\->bag\->search(query => \*(Aqname:Patrick\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Catmandu::Store is a stub for Perl packages that can store data into
databases or search engines. The database as a whole is called a 'store'.
Databases also have compartments (e.g. tables) called Catmandu::Bag\-s.
Some stores can be searched using Catmandu::Searchable methods.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.IP "default_plugins" 4
.IX Item "default_plugins"
Specify plugins that will be applied to every bag in the store.
.Sp
.Vb 1
\&    my $store = Catmandu::Store::MyDB\->new(default_plugins => [\*(AqDatestamps\*(Aq]);
.Ve
.IP "default_bag" 4
.IX Item "default_bag"
The name of the bag to use if no explicit bag is given. Default is 'data'.
.Sp
.Vb 3
\&    my $store = Catmandu::Store::MyDB\->new(default_bag => \*(Aqstuff\*(Aq);
\&    # this will return the stuff bag
\&    my $bag = $store\->bag;
.Ve
.IP "bags" 4
.IX Item "bags"
Specify configuration for individual bags.
.Sp
.Vb 6
\&    my $store = Catmandu::Store::Hash\->new(
\&        bags => {stuff => {plugins => [\*(AqDatestamps\*(Aq]}});
\&    # this bag will use the L<Catmandu::Plugin::Datestamps> role
\&    $store\->bag(\*(Aqstuff\*(Aq)
\&    # this bag won\*(Aqt
\&    $store\->bag(\*(Aqotherbag\*(Aq)
.Ve
.IP "bag_class" 4
.IX Item "bag_class"
An optional custom class to use for bags. Default is \f(CW\*(C`Bag\*(C'\fR in the store's
namespace. This class should consume the Catmandu::Bag role.
.Sp
.Vb 4
\&    # this will use the Catmandu::Store::MyDB::Bag class for bags
\&    Catmandu::Store::MyDB\->new()
\&    # this will use MyBag
\&    Catmandu::Store::MyDB\->new(bag_class => \*(AqMyBag\*(Aq)
.Ve
.IP "key_prefix" 4
.IX Item "key_prefix"
Use a custom prefix to mark the reserved or special keys that the store uses.
By default an underscore gets prependend. The only special key in a normal
store is '_id'. Catmandu::Plugin::Versioning will also use '_version'. Other
plugins or stores may add their own special keys.
.Sp
.Vb 2
\&    # this store will use the my_id key to hold id\*(Aqs
\&    Catmandu::Store::MyDB\->new(key_prefix => \*(Aqmy_\*(Aq)
.Ve
.IP "id_key" 4
.IX Item "id_key"
Define a custom key to hold id's for all bags of this store. See \f(CW\*(C`key_prefix\*(C'\fR
for the default value. Also aliased as \f(CW\*(C`id_field\*(C'\fR. Note that this can also be
overriden on a per bag basis.
.SH "METHODS"
.IX Header "METHODS"
.SS "bag($name)"
.IX Subsection "bag($name)"
Create or retieve a bag with name \f(CW$name\fR. Returns a Catmandu::Bag.
.SS "key_for($key)"
.IX Subsection "key_for($key)"
Helper method that applies \f(CW\*(C`key_prefix\*(C'\fR to the \f(CW$key\fR given.
.SS "log"
.IX Subsection "log"
Return the current logger. Can be used when creating your own Stores.
.PP
E.g.
.PP
.Vb 1
\&    package Catmandu::Store::Hash;
\&
\&    ...
\&
\&    sub generator {
\&        my ($self) = @_;
\&
\&        $self\->log\->debug("generating record");
\&        ...
\&    }
.Ve
.PP
See also: Catmandu for activating the logger in your main code.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catmandu::Bag, Catmandu::Searchable
