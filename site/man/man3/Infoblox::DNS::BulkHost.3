.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::BulkHost 3"
.TH Infoblox::DNS::BulkHost 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::BulkHost \- Create a group of hosts.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If you need to add a large number of hosts, you can have the Infoblox appliance add them as a group and automatically assign host names based on a range of \s-1IP\s0 addresses and name format applied to it. This group of hosts is referred to as a BulkHost. The Infoblox appliance uses the name space bulk-xx-xx-xx-xx for BulkHosts, so this name should not be used for CNAMEs and host aliases because doing so causes conflicts. Before adding a BulkHost, make sure that no CNAMEs or host aliases uses this name.
.PP
Note that you must specify only one view for the attribute \*(L"views\*(R".
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $bulkhost = Infoblox::DNS::BulkHost\->new(
\&     end_addr           => $ipv4addr,              #Required
\&     prefix             => $string,                #Required
\&     start_addr         => $ipv4addr,              #Required
\&     zone               => $fqdn,                  #Required
\&     comment            => $string,                #Optional / Default is empty
\&     disable            => "true" | "false",       #Optional / Default "false"
\&     name_template      => $string | undef,        #Optional / Default is undefined
\&     reverse            => "true" | "false",       #Optional / Default "false"
\&     ttl                => $num | undef,           #Optional / Default is undefined
\&     use_name_template  => "true" | "false",       #Optional / Default is "false"
\&     views              => [$View1]                        #Optional / Default is "default" view
\&     extattrs           => { $string => $extattr, ... },      #Optional / Default is undefined
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DNS\s0 BulkHost record object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a BulkHost record object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Construct an object
\& my $bulk_host = Infoblox::DNS::BulkHost\->new(
\&     zone               => "domain.com",
\&     comment            => "add bulk host",
\&     prefix             => "prefix",
\&     start_addr         => "1.0.0.1",
\&     end_addr           => "1.0.0.5",
\&     reverse            => "true",
\&     use_name_template  => "true",
\&     name_template      => "Three Octets"
\& );
\& #Submit for addition
\& my $response = $session\->add($bulk_host)
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DNS BulkHost object:
\&
\&  zone \- Optional. A zone name in string format.
\&  prefix     \- Optional. Prefix of the bulk host.
\&  start_addr \- Optional. Start address of the bulk host.
\&  end_addr   \- Optional. End address of the bulk host.
\&  comment    \- Optional. A comment in string format.
\&  view \- Optional. The DNS view in which the bulk host record is located. The default is all DNS views.
\&  ttl \- Optional. Time to Live (TTL) value in integer format.
\&  name_template \- Optional. The bulk host name template in string format.
\&  disable \- Optional. Disable flag of a DNS BulkHost record in boolean format.
\&  use_name_template \- Optional. Use name template flag of a DNS BulkHost record in boolean format.
\&  reverse \- Optional. Reverse flag of a DNS BulkHost record in boolean format.
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get BulkHost object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::BulkHost",
\&     zone   => "domain.com",
\&     prefix => "prefix",
\&     start_addr => "1.0.0.2",
\&     end_addr => "1.0.0.6".
\&     view => "default",
\&     ttl => 3600,
\&     name_template => "Three Octets",
\&     disable => "false",
\&     use_name_template => "true",
\&     reverse => "true"
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a BulkHost record object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the prefix.
\& $bulk_host\->prefix("test");
\& #Submit modification
\& my $response = $session\->modify( $bulk_host );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a BulkHost record object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific BulkHost record object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 12
\& #Get BulkHost object through the session
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DNS::BulkHost",
\&     zone       => "domain.com",
\&     prefix     => "test",
\&     start_addr => "1.0.0.1",
\&     end_addr   => "1.0.0.5"
\& );
\& #Find the desired object from the retrieved list.
\& my $desired_bulk = $retrieved_objs[0];
\& #Submit for removal
\& my $response = $session\->remove( $desired_bulk );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for Bulk Host objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a specific Bulk Host object:
\&
\&  zone       \- Optional. Zone name in FQDN format (regular expression).
\&  prefix     \- Optional. Prefix of the bulk host (regular expression).
\&  start_addr \- Optional. Start address of the bulk host.
\&  end_addr   \- Optional. End address of the bulk host.
\&  comment    \- Optional. A comment in string format (regular expression).
\&  view       \- Optional. The DNS view in which the bulk host record is located (regular expression). The default is all DNS views.
\&
\&  ttl \- Optional. Time to Live (TTL) value in integer format.
\&  name_template \- Optional. The bulk host name template in string format.
\&                  This is B<not> a regular expression, so do not specify this
\&                  value to ".*" if you want to obtain BulkHost records with all
\&                  name_templates. Just leave this field unspecified.
\&  disable \- Optional. Disable flag of a DNS BulkHost record in boolean format.
\&  use_name_template \- Optional. Use name template flag of a DNS BulkHost record in boolean format.
\&  reverse \- Optional. Reverse flag of a DNS BulkHost record in boolean format.
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all Bulk Host objects that start with "prefix"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::BulkHost",
\&     prefix => "prefix.*"
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a BulkHost object.
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to retrieve cloud \s-1API\s0 related information for the Infoblox::DNS::BulkHost object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get cloud_info
\& my $cloud_info = $object\->cloud_info();
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $bulkhost\->comment();
\& #Modify comment
\& $bulkhost\->comment("Modifying the BulkHost comment");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DNS\s0 BulkHost record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false. The \s-1DNS\s0 BulkHost record is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $bulkhost\->disable();
\& #Modify disable
\& $bulkhost\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "dns_prefix( )"
.IX Subsection "dns_prefix( )"
.RS 4
Use this method to retrieve the prefix, in punycode format, for the bulk host. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $bulkhost\->dns_prefix();
.Ve
.RE
.RS 4
.RE
.SS "end_addr( )"
.IX Subsection "end_addr( )"
.RS 4
Use this method to set or retrieve the last \s-1IP\s0 address in the address range of the BulkHost.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An \s-1IP\s0 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get end_addr
\& my $end_addr = $bulkhost\->end_addr();
\& #Modify end_addr
\& $bulkhost\->end_addr("1.0.0.6");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS\s0 BulkHost object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $bulkhost\->extattrs();
\& #Modify extattrs
\& $bulkhost\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "last_queried( )"
.IX Subsection "last_queried( )"
.RS 4
Use this method to retrieve the time when the associated record was last queried. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. The number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_queried
\& my $last_queried = $bulkhost\->last_queried();
.Ve
.RE
.RS 4
.RE
.SS "name_template( )"
.IX Subsection "name_template( )"
.RS 4
Use this method to set or retrieve the bulk host name template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is undefined which indicates the grid level default bulk host name format is used.
.Sp
Specify a bulk host name format value to override the name format at the grid level.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of a bulk host name format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name_template
\& my $name_template = $bulkhost\->name_template();
\& #Modify name_template
\& $bulkhost\->name_template("Three Octets");
.Ve
.RE
.RS 4
.RE
.SS "prefix( )"
.IX Subsection "prefix( )"
.RS 4
Use this method to set or retrieve the prefix for the BulkHost. The prefix is the name (or a series of characters) inserted at the beginning of each host name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired text with the prefix for the BulkHost. The sum of the bulk host prefix length and suffix length must not exceed 63 characters. If it does, the appliance displays an error message indicating the number of characters that you must remove to make a valid prefix.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get prefix
\& my $prefix = $bulkhost\->prefix();
\& #Modify prefix
\& $bulkhost\->prefix("test");
.Ve
.RE
.RS 4
.RE
.SS "reverse( )"
.IX Subsection "reverse( )"
.RS 4
Use this method to set or retrieve the reverse flag of the BulkHost record.
.Sp
If the flag is enabled, reverse mapping address(es) are added automatically if a reverse mapping zone exists.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get reverse
\& my $reverse = $bulkhost\->reverse();
\& #Modify reverse
\& $bulkhost\->reverse("true");
.Ve
.RE
.RS 4
.RE
.SS "start_addr( )"
.IX Subsection "start_addr( )"
.RS 4
Use this method to set or retrieve the first \s-1IP\s0 address in the address range of the BulkHost.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An \s-1IP\s0 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get start_addr
\& my $start_addr = $bulkhost\->start_addr();
\& #Modify start_addr
\& $bulkhost\->start_addr("1.0.0.2");
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to set or retrieve the Time to Live (\s-1TTL\s0) value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is undefined which indicates that the record inherits the \s-1TTL\s0 value of the zone.
.Sp
Specify a \s-1TTL\s0 value to override the \s-1TTL\s0 value at the zone level.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration in seconds that the record is cached. Zero indicates that the record should not be cached.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ttl
\& my $ttl = $bulkhost\->ttl();
\& #Modify ttl
\& $bulkhost\->ttl(3600);
.Ve
.RE
.RS 4
.RE
.SS "use_name_template( )"
.IX Subsection "use_name_template( )"
.RS 4
Use this method to set or retrieve the use_name_template flag value. This setting overrides the grid level bulk host name format.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get use_name_template
\& my $use_name_template = $bulkhost\->use_name_template();
\& #Modify use_name_template
\& $bulkhost\->use_name_template("true");
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to set or retrieve the view of a BulkHost.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" view, which means the BulkHost object is located under the default view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference of defined Infoblox::DNS::View objects.
.Sp
Note that the array size must be 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get views
\& my $views = $bulkhost\->views();
\& #Modify views
\& $bulkhost\->views([$view1]);
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to set or retrieve the zone name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A zone name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host_name followed by the domain name (example: abc.com). A host_name can have a maximum of 256 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get zone
\& my $zone = $bulkhost\->zone();
\& #Modify zone
\& $bulkhost\->zone("test.com");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a Bulk Host object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the zone prior to a BulkHost insertion
\& my $zone = Infoblox::DNS::Zone\->new(
\&     name    => "domain.com",
\&     email   => "admin\e@domain.com",
\&     comment => "add a zone domain.com",
\&     );
\& unless ($zone) {
\&    die("Construct zone failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& #Verify if the zone exists
\& my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "domain.com");
\& unless ($object) {
\&    print "Zone does not exist on server, safe to add the zone\en";
\&    $session\->add($zone)
\&       or die("Add zone failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Zone added successfully\en";
.Ve
.PP
\&\fB#Create a BulkHost object\fR
.PP
.Vb 10
\& my $bulk_host = Infoblox::DNS::BulkHost\->new(
\&     zone               => "domain.com",
\&     comment            => "add bulk host",
\&     prefix             => "prefix",
\&     start_addr         => "1.0.0.1",
\&     end_addr           => "1.0.0.5",
\&     use_name_template  => "true",
\&     name_template      => "Three Octets",
\&     reverse            => "true"
\&     );
\& unless($bulk_host) {
\&      die("Construct BulkHost failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "BulkHost object created successfully\en";
\&
\& #Add the BulkHost object to Infoblox Appliance through a session
\& $session\->add($bulk_host)
\&     or die("Add BulkHost object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Bulk Host object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS\s0 BulkHost record\fR
.PP
.Vb 6
\& #Search for all BulkHost objects in the zone "domain.com"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::BulkHost",
\&     zone   => "domain.com"
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search Bulk Host object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Bulk Host object found at least 1 matching entry\en";
\&
\& #Search for all BulkHost objects that start with prefix as "prefix"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::BulkHost",
\&     prefix => "prefix.*"
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search Bulk Host object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Bulk Host object found at least 1 matching entry\en";
\&
\& #Search for all BulkHost objects with specific start_addr
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::BulkHost",
\&     start_addr => "1.0.0.1",
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search Bulk Host object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Bulk Host object found at least 1 matching entry\en";
\&
\& #Search for all BulkHost objects with specific end_addr
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::BulkHost",
\&     end_addr => "1.0.0.5",
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search Bulk Host object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Bulk Host object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a BulkHost object\fR
.PP
.Vb 11
\& #Get BulkHost object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::BulkHost",
\&     zone   => "domain.com",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get BulkHost object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get BulkHost object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified BulkHost object
\& $object\->prefix("test");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify BulkHost object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "BulkHost object modified successfully \en";
.Ve
.PP
\&\fB#Remove a BulkHost object\fR
.PP
.Vb 10
\& #Get BulkHost object through the session
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DNS::BulkHost",
\&     zone       => "domain.com",
\&     prefix     => "test",
\&     start_addr => "1.0.0.1",
\&     end_addr   => "1.0.0.5"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get BulkHost object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get BulkHost object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove  BulkHost object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "BulkHost object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::View, Infoblox::DNS::Zone, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR,Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
