.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::MSServer 3"
.TH Infoblox::DHCP::MSServer 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::MSServer \- Microsoft (r) DHCP Server object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object is used to reference a Microsoft \s-1DHCP\s0 server.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 4
\& my $member = Infoblox::DHCP::MSServer\->new(
\&     address  => $address, #Required
\&     name     => $name,    #Optional
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
This section describes all the functions that you can apply to a \s-1DHCP\s0 MSServer object.
.SS "Infoblox::DHCP::FixedAddr\->member( ), Infoblox::DHCP::Network\->members( ), Infoblox::DHCP::NetworkTemplate\->members( ), Infoblox::DHCP::RangeTemplate\->member( ), Infoblox::DHCP::Range\->member( )"
.IX Subsection "Infoblox::DHCP::FixedAddr->member( ), Infoblox::DHCP::Network->members( ), Infoblox::DHCP::NetworkTemplate->members( ), Infoblox::DHCP::RangeTemplate->member( ), Infoblox::DHCP::Range->member( )"
.RS 4
Use this function to specify a member for any of the above objects. See their respective documentation pages for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my $member1 = Infoblox::DHCP::MSServer\->new(
\&     address => "10.0.0.1",
\& );
\&
\& #Create the Network object with this member
\& my $network = Infoblox::DHCP::Network\->new(
\&     network => "10.0.0.0/255.0.0.0",
\&     members => [$member1],
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a \s-1DHCP\s0 MSServer object.
.SS "address( )"
.IX Subsection "address( )"
.RS 4
Use this method to set or retrieve the address of the member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The Microsoft \s-1DNS\s0 server address in \s-1IPV4\s0 format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get address
\& my $address = $member\->address();
\& #Modify address
\& $member\->address("192.168.1.3");
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of the member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The Microsoft \s-1DNS\s0 server name in \s-1FQDN\s0 format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $member\->name();
\& #Modify name
\& $member\->name("msserver.com");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 MSServer object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create a grid member object
\&
\& my $grid_member = Infoblox::Grid::Member\->new(
\&     name          => "hostname.com",
\&     ipv4addr      => "3.0.0.2",
\&     mask          => "255.0.0.0",
\&     gateway       => "3.0.0.1",
\&     comment       => "Script Generated"
\&     );
\& unless ($grid_member) {
\&        die("Construct grid member object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Grid member object created successfully\en";
\&
\& #Adding the member object to appliance through session
\& my $response = $session\->add( $grid_member );
\&
\& unless ($response) {
\&     die("Add grid member failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Grid member added successfully \en";
\&
\& my $msserver = Infoblox::Grid::MSServer\->new(
\&                                              address                  => \*(Aq10.0.0.1\*(Aq,
\&                                              comment                  => \*(Aqbasic member\*(Aq,
\&                                              disable                  => \*(Aqtrue\*(Aq,
\&                                              extensible_attributes    => { Site => \*(AqLocal\*(Aq},
\&                                              login                    => \*(Aquser\*(Aq,
\&                                              password                 => \*(Aqpassword\*(Aq,
\&                                              managing_member          => \*(Aqhostname.com\*(Aq,
\&                                              read_only                => \*(Aqfalse\*(Aq,
\&                                              synchronization_interval => 5,
\&                                              logging_mode             => \*(Aqminimum\*(Aq,
\&                                             );
\&
\& unless ($msserver) {
\&        die("Construct grid MS DNS server object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Grid MS DNS server object created successfully\en";
\&
\& #Adding the member object to appliance through session
\& $response = $session\->add( $msserver );
\&
\& unless ($response) {
\&     die("Add grid MS DNS server failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Grid MS DNS server added successfully \en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 MSServer object\fR
.PP
.Vb 3
\& my $member1 = Infoblox::DHCP::MSServer\->new(
\&     address => "10.0.0.1",
\& );
\&
\& unless($member1) {
\&      die("Construct member failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Member object created successfully\en";
\&
\& #Create the Network object with this member
\& my $network = Infoblox::DHCP::Network\->new(
\&                     network => "10.0.0.0/255.0.0.0",
\&                     comment => "add network",
\&                     members => [ $member1 ]
\& );
\&
\& unless($network) {
\&             die("Construct Network object failed: ",
\&                   Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network object created successfully\en";
\&
\& #Add the Network object into the Infoblox appliance through a session
\& $session\->add($network)
\&      or die("Add Network object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP member object added to the network successfully\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DHCP::Network, Infoblox::Session\->\fBadd()\fR,Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
