.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Rex::Commands::Process 3"
.TH Rex::Commands::Process 3 "2020-10-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rex::Commands::Process \- Process management commands
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
With this module you can manage processes. List, Kill, and so on.
.PP
Version <= 1.0: All these functions will not be reported.
.PP
All these functions are not idempotent.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& kill $pid;
\& killall "apache2";
\& nice($pid, $level);
.Ve
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.ie n .SS "kill($pid, $sig)"
.el .SS "kill($pid, \f(CW$sig\fP)"
.IX Subsection "kill($pid, $sig)"
Will kill the given process id. If \f(CW$sig\fR is specified it will kill with the given signal.
.PP
.Vb 4
\& task "kill", "server01", sub {
\&   kill 9931;
\&   kill 9931, \-9;
\& };
.Ve
.ie n .SS "killall($name, $sig)"
.el .SS "killall($name, \f(CW$sig\fP)"
.IX Subsection "killall($name, $sig)"
Will kill the given process. If \f(CW$sig\fR is specified it will kill with the given signal.
.PP
.Vb 4
\& task "kill\-apaches", "server01", sub {
\&   killall "apache2";
\&   killall "apache2", \-9;
\& };
.Ve
.SS "ps"
.IX Subsection "ps"
List all processes on a system. Will return all fields of a \fIps aux\fR.
.PP
.Vb 7
\& task "ps", "server01", sub {
\&   for my $process (ps()) {
\&    say "command  > " . $process\->{"command"};
\&    say "pid    > " . $process\->{"pid"};
\&    say "cpu\-usage> " . $process\->{"cpu"};
\&   }
\& };
.Ve
.PP
On most operating systems it is also possible to define custom parameters for \fBps()\fR function.
.PP
.Vb 3
\& task "ps", "server01", sub {
\&   my @list = grep { $_\->{"ni"} == \-5 } ps("command","ni");
\& };
.Ve
.PP
This example would contain all processes with a nice of \-5.
.ie n .SS "nice($pid, $level)"
.el .SS "nice($pid, \f(CW$level\fP)"
.IX Subsection "nice($pid, $level)"
Renice a process identified by \f(CW$pid\fR with the priority \f(CW$level\fR.
.PP
.Vb 3
\& task "renice", "server01", sub {
\&   nice (153, \-5);
\& };
.Ve
