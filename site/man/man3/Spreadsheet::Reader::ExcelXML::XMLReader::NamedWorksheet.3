.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::ExcelXML::XMLReader::NamedWorksheet 3"
.TH Spreadsheet::Reader::ExcelXML::XMLReader::NamedWorksheet 3 "2017-04-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::ExcelXML::XMLReader::NamedWorksheet \- Flat XML Excel worksheet interpreter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See t\eSpreadsheet\eReader\eExcelXML\eXMLReader\e06\-named_worksheet.t
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation is written to explain ways to use this module when writing your own excel
parser.  To use the general package for excel parsing out of the box please review the
documentation for Workbooks,
Worksheets, and
Cells
.PP
This module incrementally adds functionality to the base class
Spreadsheet::Reader::ExcelXML::XMLReader. The goal is to parse individual worksheet files
(not chartsheets) from the flat \s-1XML\s0 Excel file format (.xml) into perl objects  The primary
purpose of this role is to normalize functions used by Spreadsheet::Reader::ExcelXML::WorksheetToRow
where other roles could be used to normalize other formats.  It does not provide a way to read
chartsheets.
.PP
\&\fIAll positions (row and column places and integers) at this level are stored and returned
in count from one mode!\fR
.PP
To replace this part in the package look in the raw code of
Spreadsheet::Reader::ExcelXML::Workbook and adjust the 'worksheet_interface' key of the
\&\f(CW$parser_modules\fR variable.
.SS "requires"
.IX Subsection "requires"
This module is a role and as such only adds incremental methods and
attributes to some base class.  In order to use this role some base object methods are
required.  The requirments are listed below with links to the default provider.
.Sp
.RS 4
\&\*(L"current_named_node\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"current_node_parsed\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"advance_element_position\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"good_load\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"start_the_file_over\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"squash_node\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"parse_element\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"_build_cell_label\*(R" in Spreadsheet::Reader::ExcelXML::CellToColumnRow
.Sp
\&\*(L"get_epoch_year\*(R" in Spreadsheet::Reader::ExcelXML::Workbook
.Sp
\&\*(L"spreading_merged_values\*(R" in Spreadsheet::Reader::ExcelXML::Workbook
.Sp
\&\*(L"should_skip_hidden\*(R" in Spreadsheet::Reader::ExcelXML::Workbook
.Sp
\&\*(L"are_spaces_empty\*(R" in Spreadsheet::Reader::ExcelXML::Workbook
.Sp
\&\*(L"get_empty_return_type\*(R" in Spreadsheet::Reader::ExcelXML::Workbook
.Sp
\&\*(L"get_values_only\*(R" in Spreadsheet::Reader::ExcelXML::Workbook
.RE
.SS "Attributes"
.IX Subsection "Attributes"
Data passed to new when creating an instance.  This list only contains public attributes
incrementally provided by this role.  For access to the values in these attributes see
the listed 'attribute methods'. For general information on attributes see
Moose::Manual::Attributes.  For ways to manage the instance when opened see the
Methods.
.PP
\fIis_hidden\fR
.IX Subsection "is_hidden"
.Sp
.RS 4
\&\fBDefinition:\fR This data is collected at the worksheet level for this file type.  It indicates
if the sheet is human visible.  Since the data is collected during the implementation of
load_unique_bits it will always overwrite what is passed from the Workbook.
.Sp
\&\fBRange:\fR (1|0)
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fBis_sheet_hidden\fR
.Sp
.RS 4
\&\fBDefinition:\fR return the attribute value
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fI_sheet_min_col\fR
.IX Subsection "_sheet_min_col"
.Sp
.RS 4
\&\fBDefinition:\fR This is the minimum column in the sheet with data or formatting.  For this
module it is pulled from the xml file at worksheet/dimension:ref = \*(L"upperleft:lowerright\*(R"
.Sp
\&\fBRange:\fR an integer
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fB_min_col\fR
.Sp
.RS 4
\&\fBDefinition:\fR returns the attribute value
.RE
.RE
.RS 4
.Sp
\&\fBhas_min_col\fR
.Sp
.RS 4
\&\fBDefinition:\fR attribute predicate
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fI_sheet_min_row\fR
.IX Subsection "_sheet_min_row"
.Sp
.RS 4
\&\fBDefinition:\fR This is the minimum row in the sheet with data or formatting.  For this
module it is pulled from the xml file at worksheet/dimension:ref = \*(L"upperleft:lowerright\*(R"
.Sp
\&\fBRange:\fR an integer
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fB_set_min_row\fR
.Sp
.RS 4
\&\fBDefinition:\fR sets the attribute value
.RE
.RE
.RS 4
.Sp
\&\fB_min_row\fR
.Sp
.RS 4
\&\fBDefinition:\fR returns the attribute value
.RE
.RE
.RS 4
.Sp
\&\fBhas_min_row\fR
.Sp
.RS 4
\&\fBDefinition:\fR attribute predicate
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fI_sheet_max_col\fR
.IX Subsection "_sheet_max_col"
.Sp
.RS 4
\&\fBDefinition:\fR This is the maximum column in the sheet with data or formatting.  For this
module it is pulled from the xml file at worksheet/dimension/ref = \*(L"upperleft:lowerright\*(R"
.Sp
\&\fBRange:\fR an integer
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fB_set_max_col\fR
.Sp
.RS 4
\&\fBDefinition:\fR sets the attribute value
.RE
.RE
.RS 4
.Sp
\&\fB_max_col\fR
.Sp
.RS 4
\&\fBDefinition:\fR returns the attribute value
.RE
.RE
.RS 4
.Sp
\&\fBhas_max_col\fR
.Sp
.RS 4
\&\fBDefinition:\fR attribute predicate
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fI_sheet_max_row\fR
.IX Subsection "_sheet_max_row"
.Sp
.RS 4
\&\fBDefinition:\fR This is the maximum row in the sheet with data or formatting.  For this
module it is pulled from the xml file at worksheet/dimension:ref = \*(L"upperleft:lowerright\*(R"
.Sp
\&\fBRange:\fR an integer
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fB_set_max_row\fR
.Sp
.RS 4
\&\fBDefinition:\fR sets the attribute value
.RE
.RE
.RS 4
.Sp
\&\fB_max_row\fR
.Sp
.RS 4
\&\fBDefinition:\fR returns the attribute value
.RE
.RE
.RS 4
.Sp
\&\fBhas_max_row\fR
.Sp
.RS 4
\&\fBDefinition:\fR attribute predicate
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.SS "Methods"
.IX Subsection "Methods"
These are the methods provided by this class for use within the package but are not intended
to be used by the end user.  Other private methods not listed here are used in the module but
not used by the package.  If a method is listed here then replacement of this module
either requires replacing the method or rewriting all the associated connecting roles and classes.
.PP
\fIload_unique_bits\fR
.IX Subsection "load_unique_bits"
.Sp
.RS 4
\&\fBDefinition:\fR This is called by Spreadsheet::Reader::ExcelXML::XMLReader when the file is
loaded for the first time so that file specific metadata can be collected.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR nothing
.RE
.PP
\fIadvance_row_position( \f(CI$increment\fI )\fR
.IX Subsection "advance_row_position( $increment )"
.Sp
.RS 4
\&\fBDefinition:\fR As an \s-1XML\s0 data structure each worksheet has three levels of information.  The
column data is stored separately in the file and just referenced.  The row data encases all
the cell data for that row.  Each cell contains modifiers to row and column settings.  The
column data is read during the 'load_unique_bits' method.  The cell specific data is not
completed here.  This method will advance to the next recorded row position in the \s-1XML\s0 file.
Not to be confused with the next row number.  If you want to advance to the 'next' position
more than one time then you can provide a value for \f(CW$increment\fR.
.Sp
\&\fBAccepts:\fR a positive integer \f(CW$increment\fR (defaults to 1 if no value passed)
.Sp
\&\fBReturns:\fR The attribute ref of the top row node
.RE
.PP
\fIbuild_row_data\fR
.IX Subsection "build_row_data"
.Sp
.RS 4
\&\fBDefinition:\fR Collects all the sub-information (\s-1XML\s0 node) for the row in order to build
the argument for populating a Spreadsheet::Reader::ExcelXML::Row instance.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR a hash ref of inputs for Spreadsheet::Reader::ExcelXML::Row
.RE
.PP
\fIget_custom_column_data( \f(CI$column\fI )\fR
.IX Subsection "get_custom_column_data( $column )"
.Sp
.RS 4
\&\fBDefinition:\fR Returns any collected custom column information for the indicated
\&\f(CW$column\fR.
.Sp
\&\fBAccepts:\fR a positive integer \f(CW$column\fR in count from 1 context
.Sp
\&\fBReturns:\fR a hash ref of custom column settings
.RE
.PP
\fIget_custom_row_data( \f(CI$row\fI )\fR
.IX Subsection "get_custom_row_data( $row )"
.Sp
.RS 4
\&\fBDefinition:\fR Returns any collected custom row information for the indicated \f(CW$row\fR.
.Sp
\&\fBAccepts:\fR a positive integer \f(CW$row\fR in count from 1 context
.Sp
\&\fBReturns:\fR a hash ref of custom row settings
.RE
.PP
\fIget_merge_map\fR
.IX Subsection "get_merge_map"
.Sp
.RS 4
\&\fBDefinition:\fR This returns the full merge map with merge ranges stored in each
position for the range of known rows and columns.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR an array ref of array refs where the top level array represents
rows stored in count from 1 context and the second level array ref are the
columns stored in count from 1 context.  (The first position for each will
therefor be dead space)
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::Reader::ExcelXML/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR If a the primary cell of a merge range is hidden show that value
in the top left unhidden cell even when the attribute
\&\*(L"spread_merged_values\*(R" in Spreadsheet::Reader::ExcelXML::Workbook is not
set.  (This is the way excel does it(ish))
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Spreadsheet::Reader::ExcelXML \- the package
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::Read \- generic Spreadsheet reader
.Sp
Spreadsheet::ParseExcel \- Excel binary version 2003 and earlier (.xls files)
.Sp
Spreadsheet::XLSX \- Excel version 2007 and later
.Sp
Spreadsheet::ParseXLSX \- Excel version 2007 and later
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
