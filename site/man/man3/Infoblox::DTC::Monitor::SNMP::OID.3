.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DTC::Monitor::SNMP::OID 3"
.TH Infoblox::DTC::Monitor::SNMP::OID 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DTC::Monitor::SNMP::OID \- a DTC SNMP Monitor OID object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1SNMP\s0 is stateless request-response protocol for monitoring and managing devices on network. \s-1SNMP\s0 agent (software running on monitored server) exposes management data in form of variables. Each variable associated with a uniq id called \s-1OID.\s0
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 8
\& my $snmp_oid = Infoblox::DTC::Monitor::SNMP::OID\->new(
\&     oid       => $string,                                   # Required
\&     comment   => $string,                                   # Optional / Default is undefined
\&     type      => \*(AqSTRING\*(Aq | \*(AqINTEGER\*(Aq,                      # Optional / Default is \*(AqSTRING\*(Aq
\&     condition => \*(AqANY\*(Aq | \*(AqEXACT\*(Aq | \*(AqLEQ\*(Aq | \*(AqGEQ\*(Aq | \*(AqRANGE\*(Aq, # Optional / Default is \*(AqANY\*(Aq
\&     first     => $string,                                   # Optional / Default is undefined
\&     last      => $string,                                   # Optional / Default is undefined
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The object does not support any session methods.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to a \s-1DTC SNMP\s0 Monitor \s-1OID\s0 object.
.SS "Infoblox::DTC::Monitor::SNMP\->oids( )"
.IX Subsection "Infoblox::DTC::Monitor::SNMP->oids( )"
.RS 4
Use this method to set or retrieve the list of OIDs for \s-1SNMP\s0 monitoring.
See Infoblox::DTC::Monitor::SNMP\->\fBoids()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get snmp_oid value
\& my $snmp_oid = $snmp_monitor\->snmp_oid();
\& #Modify bind_check_snmp_oid
\& $snmp_monitor\->snmp_oid([$snmp_oids]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the comment for a \s-1DTC SNMP\s0 Health Monitor \s-1OID\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a comment in string format (\s-1UTF\-8\s0) with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get comment value
\& my $comment = $snmp_oid\->comment();
\&
\& #modify comment value
\& $snmp_oid\->comment(\*(Aqdesired comment\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "condition( )"
.IX Subsection "condition( )"
.RS 4
Use this method to set or retrieve the condition for validating the result of a \s-1SNMP\s0 health check.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The following conditions can be applied to result check:
.Sp
.Vb 1
\&    \*(AqANY\*(Aq accepts any response.
\&
\&    \*(AqEXACT\*(Aq accepts result equal to \*(Aqfirst\*(Aq
\&
\&    \*(AqLEQ\*(Aq accepts result which is less than \*(Aqfirst\*(Aq
\&
\&    \*(AqGEQ\*(Aq accepts result which is greater than \*(Aqfirst\*(Aq
\&
\&    \*(AqRANGE\*(Aq accepts result value of which is between \*(Aqfirst\*(Aq and \*(Aqlast\*(Aq
.Ve
.Sp
The default value is '\s-1ANY\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get condition value
\& my $condition = $snmp_oid\->condition();
\&
\& #modify condition value
\& $snmp_oid\->condition(\*(AqRANGE\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "first( )"
.IX Subsection "first( )"
.RS 4
Use this method to set or retrieve the condition's first term to match against the \s-1SNMP\s0 health check result.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string or integer both in string format (\s-1UTF\-8\s0) with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get first value
\& my $first = $snmp_oid\->first();
\&
\& #modify first value
\& $snmp_oid\->first(\*(Aqfirst_value\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "last( )"
.IX Subsection "last( )"
.RS 4
Use this method to set or retrieve the condition's second term to match against the \s-1SNMP\s0 health check result with '\s-1RANGE\s0' condition.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string or integer both in string format (\s-1UTF\-8\s0) with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get last value
\& my $last = $snmp_oid\->last();
\&
\& #modify last value
\& $snmp_oid\->last(\*(Aq1000\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "oid( )"
.IX Subsection "oid( )"
.RS 4
Use this method to set or retrieve the \s-1SNMP OID\s0 value for \s-1DTC SNMP\s0 monitor health checks.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an \s-1OID\s0 in string format (\s-1UTF\-8\s0) with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get oid value
\& my $oid = $snmp_oid\->oid();
\&
\& #modify oid value
\& $snmp_oid\->oid(\*(Aqsampleoid.1.1.1.1.2);
.Ve
.RE
.RS 4
.RE
.SS "type( )"
.IX Subsection "type( )"
.RS 4
Use this method to set or retrieve the condition's value type for \s-1DTC SNMP\s0 monitor health check results.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1STRING\s0' and '\s-1INTEGER\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get type value
\& my $type = $snmp_oid\->type();
\&
\& #modify type value
\& $snmp_oid\->type(\*(AqINTEGER\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DTC::Monitor::SNMP, 
Infoblox::DTC::Monitor::SNMP\->\fBoids()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
