.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CPAN::Testers::Common::Client 3"
.TH CPAN::Testers::Common::Client 3 "2018-04-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPAN::Testers::Common::Client \- Common class for CPAN::Testers clients
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use CPAN::Testers::Common::Client;
\&
\&    my $client = CPAN::Testers::Common::Client\->new(
\&          author   => \*(AqRJBS\*(Aq,
\&          distname => \*(AqData\-UUID\-1.217\*(Aq,
\&          grade    => \*(Aqpass\*(Aq,
\&    );
\&
\&    # what you should send to CPAN Testers, via Metabase
\&    my $metabase_data = $client\->populate;
\&    my $email_body    = $client\->email;
.Ve
.PP
Although the recommended way is to construct your object passing as much
information as possible:
.PP
.Vb 6
\&    my $client = CPAN::Testers::Common::Client\->new(
\&          distname         => \*(AqData\-UUID\-1.217\*(Aq,
\&          author           => \*(AqRicardo Signes\*(Aq,
\&          grade            => \*(Aqpass\*(Aq,
\&          comments         => \*(Aqthis is an auto\-generated report. Cheers!\*(Aq,
\&          via              => \*(AqMy Awesome Client App 1.0\*(Aq,
\&
\&          # you should provide at least \*(Aqtest_output\*(Aq to the author,
\&          # otherwise he/she won\*(Aqt know what went wrong!
\&          configure_output => \*(Aq...\*(Aq,
\&          build_output     => \*(Aq...\*(Aq,
\&          test_output      => \*(Aq...\*(Aq,
\&
\&          # same as in a META.yml 2.0 structure
\&          prereqs => {
\&              runtime => {
\&                requires => {
\&                  \*(AqFile::Basename\*(Aq => \*(Aq0\*(Aq,
\&                },
\&                recommends => {
\&                  \*(AqExtUtils::ParseXS\*(Aq => \*(Aq2.02\*(Aq,
\&                },
\&              },
\&              build => {
\&                requires => {
\&                  \*(AqTest::More\*(Aq => \*(Aq0\*(Aq,
\&                },
\&              },
\&              # etc.
\&          },
\&          # alternatively, if the dist is expanded in a local dir and has a Meta 2.0 {json,yml} file
\&          # you can just point us to the build_dir and we\*(Aqll extract the prereqs ourselves:
\&          # build_dir => \*(Aq/tmp/Data\-UUID\-1.217/\*(Aq
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a common client for constructing metabase facts and
the legacy email message sent to \s-1CPAN\s0 Testers in a way that is properly
parsed by the extraction and report tools. It is meant to be used by all
the \s-1CPAN\s0 clients (and standalone tools) that want/need to support the
\&\s-1CPAN\s0 Testers infrastructure.
.PP
If you need to parse or write to the common \s-1CPAN\s0 Testers configuration file,
please refer to the \fBhighly experimental\fR
CPAN::Testers::Common::Client::Config.
.SS "Constructor"
.IX Subsection "Constructor"
\fInew\fR
.IX Subsection "new"
.PP
Calling \f(CW\*(C`new()\*(C'\fR creates a new object. You \fBmust\fR pass a hash as argument setting at least
\&\fIdistname\fR, \fIauthor\fR and \fIgrade\fR. See below for their meaning.
.SS "Accessors"
.IX Subsection "Accessors"
\fIauthor\fR
.IX Subsection "author"
.PP
\&\fBRequired\fR.
.PP
The evaluated distribution's author. Could be a \s-1PAUSE\s0 id or a full name.
.PP
\fIdistname\fR
.IX Subsection "distname"
.PP
\&\fBRequired\fR.
.PP
The distribution name, in \f(CW\*(C`Dist\-Name\-version.suffix\*(C'\fR format.
.PP
\fIgrade\fR
.IX Subsection "grade"
.PP
\&\fBRequired\fR.
.PP
The grade for the distribution's test result. Can be \f(CW\*(Aqpass\*(Aq\fR, \f(CW\*(Aqfail\*(Aq\fR,
\&\f(CW\*(Aqna\*(Aq\fR or \f(CW\*(Aqunknown\*(Aq\fR.
.PP
\fIcomments\fR
.IX Subsection "comments"
.PP
Any additional comments from the tester. Defaults to \f(CW\*(Aqnone provided\*(Aq\fR
(but see \*(L"\s-1AUTOMATED_TESTING\*(R"\s0 below).
.PP
\fIvia\fR
.IX Subsection "via"
.PP
The sender module (CPAN::Reporter, \s-1CPANPLUS,\s0 etc). Defaults to
\&\*(L"Your friendly \s-1CPAN\s0 Testers client\*(R".
.PP
\fIcommand\fR
.IX Subsection "command"
.PP
The command used to test the distribution.
.SS "Methods"
.IX Subsection "Methods"
\fI\f(BIpopulate()\fI\fR
.IX Subsection "populate()"
.PP
Will populate the object with information for each Metabase fact, and create the \s-1CPAN\s0 Testers email body.
.PP
Returns a data structure containing all metabase facts data.
.PP
\fI\f(BIemail()\fI\fR
.IX Subsection "email()"
.PP
Returns a string to be used as body of the email to \s-1CPAN\s0 Testers.
.PP
This method \fBwill\fR call \f(CW\*(C`populate()\*(C'\fR if populate hasn't been called yet.
.PP
\fI\f(BImetabase_data()\fI\fR
.IX Subsection "metabase_data()"
.PP
Returns the already populated metabase data structure. Note that this will \fB\s-1NOT\s0\fR call \f(CW\*(C`populate()\*(C'\fR
so you will get undef or cached data unless you call \f(CW\*(C`populate()\*(C'\fR yourself.
.PP
\fIis_duplicate\fR
.IX Subsection "is_duplicate"
.PP
Returns true if this report was already sent by the current user in the past,
and false otherwise.
.PP
\fIrecord_history\fR
.IX Subsection "record_history"
.PP
Records report into the history file (so \f(CW\*(C`is_duplicate()\*(C'\fR returns true for
it in the future.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
.SS "\s-1AUTOMATED_TESTING\s0"
.IX Subsection "AUTOMATED_TESTING"
If the \f(CW\*(C`AUTOMATED_TESTING\*(C'\fR environment variable is set to true, the default comment will be:
.PP
.Vb 2
\&   this report is from an automated smoke testing program
\&   and was not reviewed by a human for accuracy
.Ve
.PP
Otherwise, the default message is \f(CW\*(Aqnone provided\*(Aq\fR.
.PP
CPAN::Testers::Common::Client::Config also has
some interesting environment variables.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software.  The code repository is available for
public review and contribution under the terms of the license.
.PP
<https://github.com/garu/CPAN\-Testers\-Common\-Client>
.PP
.Vb 1
\&  git clone https://github.com/garu/CPAN\-Testers\-Common\-Client.git
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP """Could not create temporary \*(Aq$FILE\*(Aq for prereq analysis: $DESCRIPTION""" 4
.el .IP "\f(CWCould not create temporary \*(Aq$FILE\*(Aq for prereq analysis: $DESCRIPTION\fR" 4
.IX Item "Could not create temporary $FILE for prereq analysis: $DESCRIPTION"
In order to analyse a distribution's pre-requirements, we must create a temporary
file \f(CW$FILE\fR. The \f(CW$DESCRIPTION\fR should contain the error found.
.ie n .IP """Error parsing output from CPAN::Testers::Common::Client::PrereqCheck: $LINE""" 4
.el .IP "\f(CWError parsing output from CPAN::Testers::Common::Client::PrereqCheck: $LINE\fR" 4
.IX Item "Error parsing output from CPAN::Testers::Common::Client::PrereqCheck: $LINE"
While parsing the pre-requirements result, the given \f(CW$LINE\fR couldn't be processed
correctly. Please report the issue, patches will be welcome.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-cpan\-testers\-common\-client@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Breno G. de Oliveira  \f(CW\*(C`<garu@cpan.org>\*(C'\fR
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This module was created at the 2012 Perl \s-1QA\s0 Hackathon <http://2012.qa-hackathon.org>, so a big
\&\s-1THANK YOU\s0 is in order to all the companies and organisations that supported it, namely the
Citï¿½ des Sciences <http://www.cite-sciences.fr/>, Diabolocom <http://www.diabolocom.com/>,
Dijkmat <http://www.dijkmat.nl/>, DuckDuckGo <http://www.duckduckgo.com/>,
Dyn <http://www.dyn.com/>, Freeside <http://freeside.biz/>, Hedera <http://www.hederatech.com/>,
Jaguar <http://www.jaguar-network.com/>, ShadowCat <http://www.shadow.cat/>,
Splio <http://www.splio.com/>, \s-1TECLIB\s0' <http://www.teclib.com/>, Weborama <http://weborama.com/>,
\&\s-1EPO\s0 <http://www.enlightenedperl.org/>, \f(CW$foo\fR Magazin <http://www.perl-magazin.de/> and
Mongueurs de Perl <http://www.mongueurs.net/>.
.PP
Also, this module could never be done without the help, contribution and insights of
David Golden <https://metacpan.org/author/DAGOLDEN>,
Barbie <https://metacpan.org/author/BARBIE>,
Andreas Kï¿½nig <https://metacpan.org/author/ANDK>
and Tatsuhiko Miyagawa <https://metacpan.org/author/MIYAGAWA>.
.PP
All bugs and mistakes are my own.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2012\-2015, Breno G. de Oliveira \f(CW\*(C`<garu@cpan.org>\*(C'\fR. All rights reserved.
.PP
Parts of the internals in this distribution were refactored from
CPAN::Reporter, Copyright (c) 2012 David Golden,
and from CPAN::Version, Copyright (c) 2012 Andreas Koenig.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE \*(L"AS IS\*(R" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.\s0
.PP
\&\s-1IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE\s0 (\s-1INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE\s0), \s-1EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.\s0
