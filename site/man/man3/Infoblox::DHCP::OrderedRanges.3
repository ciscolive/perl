.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::OrderedRanges 3"
.TH Infoblox::DHCP::OrderedRanges 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::OrderedRanges \- Ordered Ranges object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An object type to set or retrieve an ordered list of \s-1DHCP\s0 ranges in a network.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 4
\& my $ordered_ranges = Infoblox::DHCP::OrderedRanges\->new(
\&                       network                   => $network,                   #Required
\&                       ranges                    => [$range1, $range2, ...],    #Required
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to an Ordered Ranges object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.Sp
No object is added in this method, but the ranges for the specified network assume the specified order.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Construct an object
\& my $ordered_ranges = Infoblox::DHCP::OrderedRanges\->new(
\&                                                                                                             network => $network,
\&                                                         ranges  => [$range1, $range2]
\&                                                        );
\& #Submit for addition
\& my $response = $session\->add( $ordered_ranges );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific Ordered Ranges object:
\&
\& network \- Required. An Infoblox::DHCP::Network object.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object   => "Infoblox::DHCP::OrderedRanges",
\&     network  => $network
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.Sp
No object is modified in this method, but the ranges for the specified network assume the specified order.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use this method to modify the comment.
\& $ordered_ranges\->ranges([$range4, $range2, $range3, $range1]);
\& #Submit modification
\& my $response = $session\->modify( $ordered_ranges );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
Use the following methods to access the attributes of an Infoblox::DHCP::OrderedRanges object. Specify a parameter to set the attribute's value, or omit the parameter to get the attribute's value.
.SS "network( )"
.IX Subsection "network( )"
.RS 4
Use this method to set or retrieve the parent network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An Infoblox::DHCP::Network object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting network
\&   my $network = $ordered_ranges\->network();
\&   #Modifying network
\&   $ordered_ranges\->network($nw1);
.Ve
.RE
.RS 4
.RE
.SS "ranges( )"
.IX Subsection "ranges( )"
.RS 4
Use this method to set or retrieve an ordered list of \s-1DHCP\s0 ranges object references.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A list of Infoblox::DHCP::Range objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting ranges
\&   my $ranges_ref = $ordered_ranges\->ranges();
\&   #Modifying ranges
\&   $ordered_ranges\->ranges([$range1, $range2, @range3]);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to the range reordering\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $host_ip =  "192.168.1.2";
\& my $session = Infoblox::Session\->new(
\&     master   => $host_ip,
\&     username => "admin",
\&     password => "infoblox"
\&     );
\& unless($session){
\&         die("Constructor for session failed: ",
\&                Infoblox::status_code(). ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully.\en";
\&
\& my $network = Infoblox::DHCP::Network\->new(
\&                                            network   => "10.0.0.0/255.255.0.0",
\&                                            comment   => "add network",
\&                                           );
\&
\& $session\->add($network)
\&     or die("Add network failed: ",
\&                $session\->status_code(). ":" .$session\->status_detail());
\&
\& print"Network added successfully.\en";
\&
\& my $range = Infoblox::DHCP::Range\->new(
\&                                        start_addr              => "10.0.0.1",
\&                                        end_addr                => "10.0.0.10",
\&                                        network                 => "10.0.0.0/16",
\&                                        comment                 => "range 1",
\&                                       );
\&
\& $session\->add($range)
\&     or die("Add range failed: ",
\&                $session\->status_code(). ":" .$session\->status_detail());
\&
\& print"Range added successfully.\en";
\&
\& $range = Infoblox::DHCP::Range\->new(
\&                                      start_addr              => "10.0.0.21",
\&                                      end_addr                => "10.0.0.30",
\&                                      network                 => "10.0.0.0/16",
\&                                      comment                 => "range 2",
\&                                    );
\&
\& $session\->add($range)
\&     or die("Add range failed: ",
\&                $session\->status_code(). ":" .$session\->status_detail());
\&
\& print"Range added successfully.\en";
\&
\& $range = Infoblox::DHCP::Range\->new(
\&                                      start_addr              => "10.0.0.31",
\&                                      end_addr                => "10.0.0.40",
\&                                      network                 => "10.0.0.0/16",
\&                                      comment                 => "range 3",
\&                                    );
\&
\& $session\->add($range)
\&     or die("Add range failed: ",
\&                $session\->status_code(). ":" .$session\->status_detail());
\&
\& print"Range added successfully.\en";
.Ve
.PP
\&\fB#Get the current range order.\fR
.PP
.Vb 7
\& my $tnetwork = Infoblox::DHCP::Network\->new(
\&                                              network   => "10.0.0.0/255.255.0.0",
\&                                             );
\& my $or = $session\->get(
\&      object  => "Infoblox::DHCP::OrderedRanges",
\&      network => $tnetwork
\& );
\&
\& unless($or){
\&        die("Get ordered ranges failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&        }
\&
\& print "Get ordered ranges object found at least 1 matching entry\en";
\&
\& my ($r1, $r2, $r3) = @{$or\->ranges()};
\&
\& print "The current order of the ranges is : " . $r1\->comment() . "," .
\&                $r2\->comment() . "," . $r3\->comment() . "\en";
.Ve
.PP
\&\fB#Modify the range order.\fR
.PP
.Vb 1
\& $or\->ranges([$r3, $r2, $r1]);
\&
\& #Apply the change
\& $session\->modify($or)
\&       or die("Modify ordered ranges failed: ",
\&                $session\->status_code(). ":" .$session\->status_detail());
\&
\& print "Ordered ranges modified successfully.\en";
\&
\& $or = $session\->get(
\&     object  => "Infoblox::DHCP::OrderedRanges",
\&     network => $tnetwork
\& );
\&
\& unless($or){
\&       die("Get ordered ranges failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\&       }
\&
\& print "Get ordered ranges object found at least 1 matching entry\en";
\&
\& ($r1, $r2, $r3) = @{$or\->ranges()};
\&
\& print "The current order of the ranges is : " . $r1\->comment() . "," .
\&                $r2\->comment() . "," . $r3\->comment() . "\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DHCP::Network, Infoblox::DHCP::Range, Infoblox::Session, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
