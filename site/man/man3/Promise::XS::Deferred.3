.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Promise::XS::Deferred 3"
.TH Promise::XS::Deferred 3 "2020-02-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Promise::XS::Deferred
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See Promise::XS.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class implements a promise’s “producer” behavior. It is not
to be instantiated directly, but rather via Promise::XS.
.SH "BASIC METHODS"
.IX Header "BASIC METHODS"
The following are what’s needed to implement normal promise workflows:
.ie n .SS "$obj = \fI\s-1OBJ\s0\fP\->resolve( @ARGUMENTS )"
.el .SS "\f(CW$obj\fP = \fI\s-1OBJ\s0\fP\->resolve( \f(CW@ARGUMENTS\fP )"
.IX Subsection "$obj = OBJ->resolve( @ARGUMENTS )"
Resolves \fI\s-1OBJ\s0\fR’s promise, assigning the given \f(CW@ARGUMENTS\fR as the value.
Returns \fI\s-1OBJ\s0\fR.
.PP
\&\fB\s-1IMPORTANT:\s0\fR Behavior here is \fBnot\fR defined if anything in \f(CW@ARGUMENTS\fR is
itself a promise.
.ie n .SS "$obj = \fI\s-1OBJ\s0\fP\->reject( @ARGUMENTS )"
.el .SS "\f(CW$obj\fP = \fI\s-1OBJ\s0\fP\->reject( \f(CW@ARGUMENTS\fP )"
.IX Subsection "$obj = OBJ->reject( @ARGUMENTS )"
Like \f(CW\*(C`resolve()\*(C'\fR but rejects the promise instead.
.SH "ADDITIONAL METHODS"
.IX Header "ADDITIONAL METHODS"
.ie n .SS "$yn = \fI\s-1OBJ\s0\fP\->\fBis_pending()\fP"
.el .SS "\f(CW$yn\fP = \fI\s-1OBJ\s0\fP\->\fBis_pending()\fP"
.IX Subsection "$yn = OBJ->is_pending()"
Returns a boolean that indicates whether the promise is still pending
(as opposed to resolved or rejected).
.PP
This shouldn’t normally be necessary but can be useful in debugging.
.PP
For compatibility with preexisting promise libraries, \f(CW\*(C`is_in_progress()\*(C'\fR
exists as an alias for this logic.
.ie n .SS "$obj = \fI\s-1OBJ\s0\fP\->\fBclear_unhandled_rejection()\fP"
.el .SS "\f(CW$obj\fP = \fI\s-1OBJ\s0\fP\->\fBclear_unhandled_rejection()\fP"
.IX Subsection "$obj = OBJ->clear_unhandled_rejection()"
Ordinarily, if a promise’s rejection is “unhandled”, a warning about the
unhandled rejection is produced. Call this after \f(CW\*(C`reject()\*(C'\fR to silence
that warning. (It’s generally better, of course, to handle all errors.)
