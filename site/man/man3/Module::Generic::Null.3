.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Generic::Null 3"
.TH Module::Generic::Null 3 "2020-05-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Generic::Null \- Null Value Chaining Object Class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    # In your code:
\&    sub customer
\&    {
\&        my $self = shift( @_ );
\&        return( $self\->error( "No customer id was provided" ) ) if( !scalar( @_ ) );
\&        return( $self\->customer_info_to_object( @_ ) );
\&    }
\&
\&    # And this method is called without providing an id, thus triggering an error,
\&    # but is chained. Upon error triggered by method "error", a Module::Generic::Null
\&    # object is returned
\&    my $name = $object\->customer\->name;
.Ve
.SH "VERSION"
.IX Header "VERSION"
.Vb 1
\&    v0.2.0
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Normally this call would have triggered a perl error like \f(CW\*(C`Cannot call method name on an undefined value\*(C'\fR, but since \*(L"error\*(R" in Module::Generic returns a Module::Generic::Null object, the method \fBname\fR here is called without triggering an error, and of course returns an Module::Generic::Null object when being chained, or undef otherwise. Undefined value is the typical response one gets when an error occurred, so you can check like this :
.PP
.Vb 1
\&    my $name = $object\->customer\->name || die( $object\->error );
.Ve
.PP
Module::Generic::Null use \f(CW\*(C`AUTOLOAD\*(C'\fR to allow any method to work, but contains the original error within its object.
.PP
Apart from that, this does not do anything meaningful.
.SH "METHODS"
.IX Header "METHODS"
There is only 1 method. This module makes it possible to call it with any method to fake original data flow.
.SS "new"
.IX Subsection "new"
This takes an error object and an optional hash reference of key-value pairs and return the object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jacques Deguest <\fIjack@deguest.jp\fR>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (c) 2000\-2020 \s-1DEGUEST\s0 Pte. Ltd.
.PP
You can use, copy, modify and redistribute this package and associated
files under the same terms as Perl itself.
