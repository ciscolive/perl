.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::CSRFProtect 3"
.TH Mojolicious::Plugin::CSRFProtect 3 "2014-02-08" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::CSRFProtect \- Fully protects you from CSRF attacks
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # Mojolicious
\&    $self\->plugin(\*(AqCSRFProtect\*(Aq);
\&
\&    # Mojolicious::Lite
\&    plugin \*(AqCSRFProtect\*(Aq;
\&
\&    # Use "form_for" helper and all your html forms will have CSRF protection token
\&
\&    <%= form_for login => (method => \*(Aqpost\*(Aq) => begin %>
\&           <%= text_field \*(Aqfirst_name\*(Aq %>
\&           <%= submit_button %>
\&    <% end %>
\&
\&    # Place jquery_ajax_csrf_protection helper to your layout template
\&    # and all non GET/HEAD/OPTIONS  AJAX requests will have CSRF protection token (requires JQuery)
\&
\&    <%= jquery_ajax_csrf_protection %>
\&
\&    # Custom error handling
\&    $self\->plugin(\*(AqCSRFProtect\*(Aq, on_error => sub {
\&        my $c = shift;
\&        # Do whatever you want here
\&        # ...
\&    });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::CSRFProtect is a Mojolicious plugin which fully protects you from \s-1CSRF\s0 attacks.
.PP
It does following things:
.PP
1. Adds a hidden input (with name 'csrftoken') with \s-1CSRF\s0 protection token to every form
(works only if you use \f(CW\*(C`form_for\*(C'\fR helper from Mojolicious::Plugin::TagHelpers.)
.PP
2. Adds the header \*(L"X\-CSRF-Token\*(R" with \s-1CSRF\s0 token to every \s-1AJAX\s0 request (works with JQuery only)
.PP
3. Rejects all non \s-1GET/HEAD/OPTIONS\s0 requests without the correct \s-1CSRF\s0 protection token.
.PP
If you want protect your \s-1GET/HEAD/OPTIONS\s0 requests then you can do it manually
.PP
In template: <a href=\*(L"/delete_user/123/?csrftoken=<%= csrftoken %>\*(R">
.PP
In controller: \f(CW$self\fR\->\fBis_valid_csrftoken()\fR
.SH "CONFIG"
.IX Header "CONFIG"
.ie n .SS """on_error"""
.el .SS "\f(CWon_error\fP"
.IX Subsection "on_error"
You can pass custom error handling callback. For example
.PP
.Vb 4
\&    $self\->plugin(\*(AqCSRFProtect\*(Aq, on_error => sub {
\&        my $c = shift;
\&        $c\->render(template => \*(Aqerror_403\*(Aq, status => 403 );
\&    });
.Ve
.SH "HELPERS"
.IX Header "HELPERS"
.ie n .SS """form_for"""
.el .SS "\f(CWform_for\fP"
.IX Subsection "form_for"
This helper overrides the \f(CW\*(C`form_for\*(C'\fR helper from Mojolicious::Plugin::TagHelpers
.PP
and adds hidden input with \s-1CSRF\s0 protection token.
.ie n .SS """jquery_ajax_csrf_protection"""
.el .SS "\f(CWjquery_ajax_csrf_protection\fP"
.IX Subsection "jquery_ajax_csrf_protection"
This helper adds \s-1CSRF\s0 protection headers to all JQuery \s-1AJAX\s0 requests.
.PP
You should add <%= jquery_ajax_csrf_protection %> in head of your \s-1HTML\s0 page.
.ie n .SS """csrftoken"""
.el .SS "\f(CWcsrftoken\fP"
.IX Subsection "csrftoken"
returns  \s-1CSRF\s0 Protection token.
.PP
In templates <%= csrftoken %>
.PP
In controller \f(CW$self\fR\->csrftoken;
.ie n .SS """is_valid_csrftoken"""
.el .SS "\f(CWis_valid_csrftoken\fP"
.IX Subsection "is_valid_csrftoken"
With this helper you can check \f(CW$csrftoken\fR manually. It will take \f(CW$csrftoken\fR from \f(CW$c\fR\->param('csrftoken');
.PP
\&\f(CW$self\fR\->\fBis_valid_csrftoken()\fR will return 1 or 0
.SH "AUTHOR"
.IX Header "AUTHOR"
Viktor Turskyi <koorchik@cpan.org>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-mojolicious\-plugin\-csrfprotect at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Mojolicious\-Plugin\-CSRFProtect>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.PP
Also you can report bugs to Github <https://github.com/koorchik/Mojolicious\-Plugin\-CSRFProtect/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Mojolicious::Plugin::CSRFDefender" 4
.IX Item "Mojolicious::Plugin::CSRFDefender"
This plugin followes the same aproach but it works in different manner.
.Sp
It will parse your response body searching for '<form>' tag and then will insert \s-1CSRF\s0 token there.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2011 Viktor Turskyi
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
