.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catmandu::Fix::add_to_store 3"
.TH Catmandu::Fix::add_to_store 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catmandu::Fix::add_to_store \- add matching values to a store as a side effect
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   # Add the current record to an SQLite database.
\&   add_to_store(., DBI, data_source: "dbi:SQLite:path/data.sqlite")
\&
\&   # Add the journal field to a MongoDB database.
\&   add_to_store(journal, MongoDB, database_name: catalog)
\&
\&   # Add all author values to a MongoDB database.
\&   add_to_store(authors.*, MongoDB, database_name: catalog, bag: authors)
\&
\&   # Or, a much faster option: use a named store in a catmandu.yml file
\&   #
\&   # store:
\&   #  mydbi:
\&   #    package: DBI
\&   #    options:
\&   #      data_source: "dbi:SQLite:path/data.sqlite"
\&   #  mymongo:
\&   #    package: MongoDB
\&   #    options:
\&   #      database_name: catalog
\&   add_to_store(., mydbi)
\&   add_to_store(journal, mymongo)
\&   add_to_store(authors.*, mymongo, bag: authors)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "add_to_store(\s-1PATH\s0,STORE[,store_param: store_val, ...][,bag: bag_name])"
.IX Subsection "add_to_store(PATH,STORE[,store_param: store_val, ...][,bag: bag_name])"
Store a record or parts of a record in a Catmandu::Store.
The values at the \s-1PATH\s0 will be stored as-is in the database but should be hashes.
If the value contains an '_id' field, then it will
used as record identifier in the database. If not, then a new '_id' field will
be generated and added to the database and original field (for later reference).
.PP
For instance this \s-1YAML\s0 input:
.PP
.Vb 8
\&    \-\-\-
\&    _id: 001
\&    title: test
\&    name: foo
\&    \-\-\-
\&    _id: 002
\&    title: test2
\&    name: bar
.Ve
.PP
with the fix:
.PP
.Vb 1
\&    add_to_store(., DBI, data_source: "dbi:SQLite:path/data.sqlite")
.Ve
.PP
will create a path/data.sqlite SQLite database with two records. Each records contains
the _id from the input file and all the record fields.
.PP
For instance this \s-1YAML\s0 input:
.PP
.Vb 6
\&    \-\-\-
\&    title: test
\&    name: foo
\&    \-\-\-
\&    title: test2
\&    name: bar
.Ve
.PP
with the fix:
.PP
.Vb 1
\&    add_to_store(., DBI, data_source: "dbi:SQLite:path/data.sqlite")
.Ve
.PP
will create a path/data.sqlite SQLite database with two records. Each records contains
the a generated _id and all the record fields. The current input stream will be updated
to contain the generated _id.
.PP
Use Catmandu::Fix::lookup_in_store to lookup records in a Catmandu::Store based
on an '_id' key.
.SH "DATABASE CONNECTIONS"
.IX Header "DATABASE CONNECTIONS"
For every call to a \f(CW\*(C`add_to_store\*(C'\fR a new database connection is created. It
is much more effient to used named stores in a \f(CW\*(C`catmandu.yml\*(C'\fR file. This file
needs to contain all the connection parameters to the database. E.g.
.PP
.Vb 5
\&    store:
\&       mystore:
\&         package: MongoDB
\&         options:
\&            database_name: mydata
.Ve
.PP
The  \f(CW\*(C`catmandu.yml\*(C'\fR file should be available in the same directory as where the
\&\f(CW\*(C`catmandu\*(C'\fR command is executed. Or, this directory can be set with the \f(CW\*(C`\-L\*(C'\fR option:
.PP
.Vb 1
\&    $ catmandu \-L /tmp/path convert ...
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catmandu::Fix , Catmandu::Fix::lookup_in_store
