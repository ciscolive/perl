.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Template::Provider::FromDATA 3"
.TH Template::Provider::FromDATA 3 "2012-10-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template::Provider::FromDATA \- Load templates from your _\|_DATA_\|_ section
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Template;
\&    use Template::Provider::FromDATA;
\&    
\&    # Create the provider
\&    my $provider = Template::Provider::FromDATA\->new( {
\&        CLASSES => _\|_PACKAGE_\|_
\&    } );
\&    
\&    # Add the provider to the config
\&    my $template = Template\->new( {
\&        # ...
\&        LOAD_TEMPLATES => [ $provider ]
\&    } );
\&
\&    # Render a template
\&    $template\->process( \*(Aqmytemplate\*(Aq, { bar => \*(AqBar\*(Aq } );
\&
\&    # ...and now the templates
\&    
\&    _\|_DATA_\|_
\&    
\&    _\|_mytemplate_\|_
\&    Foo [% bar %]
\&    
\&    _\|_myothertemplate_\|_
\&    Baz, [% qux %]?
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module allows you to store your templates inline with your
code in the \f(CW\*(C`_\|_DATA_\|_\*(C'\fR section. It will search any number of classes
specified.
.SH "CAVEAT"
.IX Header "CAVEAT"
If you have two templates with the same name, this module will not understand
the difference, it will simply return the first one found. If you wish, you
can specify a fully qualified template name by prefixing the template with the
module name (using \f(CW\*(C`\-\*(C'\fR instead of \f(CW\*(C`::\*(C'\fR as a namespace separator), adding
a \f(CW\*(C`/\*(C'\fR to separate the module name from the template name.
.PP
.Vb 1
\&    $template\->process( \*(AqMy\-Templates/mytemplate\*(Aq, { bar => \*(AqBar\*(Aq } );
.Ve
.SH "INSTALLATION"
.IX Header "INSTALLATION"
.Vb 4
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new( \e%OPTIONS )"
.IX Subsection "new( %OPTIONS )"
Create a new instance of the provider. You can specify a list of classes to 
be searched for templates via the \f(CW\*(C`CLASSES\*(C'\fR option. By omitting this option 
it will search \f(CW\*(C`main\*(C'\fR.
.PP
.Vb 2
\&    # defaults to \*(Aqmain\*(Aq
\&    $provider = Template::Provider::FromDATA\->new;
\&    
\&    # look for templates in \*(AqFoo\*(Aq
\&    $provider = Template::Provider::FromDATA\->new( {
\&        CLASSES => \*(AqFoo\*(Aq
\&    } );
\&
\&    # look for templates in \*(AqFoo::Bar\*(Aq and \*(AqFoo::Baz\*(Aq
\&    $provider = Template::Provider::FromDATA\->new( {
\&        CLASSES => [ \*(AqFoo::Bar\*(Aq, \*(AqFoo::Baz\*(Aq ]
\&    } );
.Ve
.PP
By default, template data is lazy-loaded as they it is  requested. If you
wish to load up all template data upon initializtion, you can use the 
\&\f(CW\*(C`PRELOAD\*(C'\fR option.
.PP
.Vb 3
\&    $provider = Template::Provider::FromDATA\->new( {
\&        PRELOAD => 1
\&    } );
.Ve
.SS "_init( \e%OPTIONS )"
.IX Subsection "_init( %OPTIONS )"
A subclassed method to handle the options passed to \f(CW\*(C`new()\*(C'\fR.
.ie n .SS "fetch( $name )"
.el .SS "fetch( \f(CW$name\fP )"
.IX Subsection "fetch( $name )"
This is a subclassed method that will load a template via \f(CW\*(C`_fetch()\*(C'\fR
if a non-reference argument is passed.
.ie n .SS "_load( $name )"
.el .SS "_load( \f(CW$name\fP )"
.IX Subsection "_load( $name )"
Loads the template via the \f(CW\*(C`get_file()\*(C'\fR sub and sets some cache
information.
.ie n .SS "get_file( $class, $template )"
.el .SS "get_file( \f(CW$class\fP, \f(CW$template\fP )"
.IX Subsection "get_file( $class, $template )"
This method searches through \f(CW$class\fR for a template
named \f(CW$template\fR. Returns the contents on success, undef
on failure.
.PP
This function was mostly borrowed from Catalyst::Helper's
\&\f(CW\*(C`get_file\*(C'\fR function.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.SS "classes"
.IX Subsection "classes"
An arrayref of the class names containing our templates.
.SS "cache"
.IX Subsection "cache"
A hashref of file and template data.
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Cassidy <bricas@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2005\-2012 by Brian Cassidy
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
