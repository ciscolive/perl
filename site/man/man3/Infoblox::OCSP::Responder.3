.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::OCSP::Responder 3"
.TH Infoblox::OCSP::Responder 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::OCSP::Responder \- an OCSP authentication responder.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An Infoblox::OCSP::Responder object represents an \s-1OCSP\s0 authentication responder.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 7
\& my $responder = Infoblox::OCSP::Responder\->new(
\&      address      => $string,               # Required
\&      certificate  => $string,               # Required
\&      port         => $uint,                 # Optional / Default value is 80
\&      comment      => $string,               # Optional
\&      disabled     => "true" | "false",      # Optional / Default value is "false"
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to an \s-1OCSP\s0 authentication responder object.
.SS "Infoblox::Grid::Admin::CertificateAuthService\->ocsp_responders( )"
.IX Subsection "Infoblox::Grid::Admin::CertificateAuthService->ocsp_responders( )"
.RS 4
Use this function to add or retrieve the \s-1OCSP\s0 authentication responder object in the Certificate Authentication Service object.
See Infoblox::Grid::Admin::CertificateAuthService\->\fBocsp_responders()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ocsp_responders
\& my $responder_list = $auth_service\->ocsp_responders();
\&
\& #Modify ocsp_responders
\& my $responder1 = Infoblox::OCSP::Responder\->new(
\&      fqdn_or_ip  => \*(Aqdomain.com\*(Aq,
\&      certificate => \*(Aq/tmp/cert1.pem\*(Aq,
\& );
\&
\& my $responder2 = Infoblox::OCSP::Responder\->new(
\&      fqdn_or_ip  => \*(Aq192.168.1.10\*(Aq,
\&      certificate => \*(Aq/tmp/cert2.pem\*(Aq,
\& );
\&
\& $auth_service\->ocsp_responders([$responder1, $responder2]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of an Infoblox::OCSP::Responder object.
.SS "certificate( )"
.IX Subsection "certificate( )"
.RS 4
Use this method to set the \s-1OCSP\s0 responder certificate. This attribute is write-only and cannot be retrieved.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
String with a reference to a file.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set certificate
\& $responder\->certificate(\*(Aq/tmp/cer.pem\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get comment
\& my $comment = $responder\->comment();
\&
\& #Modify comment
\& $responder\->comment("Modified comment");
.Ve
.RE
.RS 4
.RE
.SS "disabled( )"
.IX Subsection "disabled( )"
.RS 4
Use this method to set or retrieve the disabled flag for the \s-1OCSP\s0 authentication responder.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to disable the \s-1OCSP\s0 authentication respondert or \*(L"false\*(R" to enable it. Default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value as \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get disabled flag
\& my $disabled = $responder\->disabled();
\&
\& #Modify disabled flag
\& $responder\->disabled("true");
.Ve
.RE
.RS 4
.RE
.SS "address( )"
.IX Subsection "address( )"
.RS 4
Use this method to set or retrieve the \s-1IP\s0 address or the domain name for the \s-1OCSP\s0 authentication responder.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
String with the \s-1IP\s0 address or the domain name for the \s-1OCSP\s0 authentication responder.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get address
\& my $address = $responder\->address();
\&
\& #Modify address
\& $responder\->address("192.168.1.2");
.Ve
.RE
.RS 4
.RE
.SS "port( )"
.IX Subsection "port( )"
.RS 4
Use this method to set or retrieve the \s-1TCP\s0 Port on which the \s-1OCSP\s0 client communicates with the \s-1OCSP\s0 responder.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An unsigned integer. Default value is 80.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port
\& my $port = $responder\->port();
\&
\& #Modify port
\& $responder\->port(90);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::Admin::CertificateAuthService
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
