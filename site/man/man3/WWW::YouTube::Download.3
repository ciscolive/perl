.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::YouTube::Download 3"
.TH WWW::YouTube::Download 3 "2020-09-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::YouTube::Download \- WWW::YouTube::Download \- Very simple YouTube video download interface
.SH "VERSION"
.IX Header "VERSION"
version 0.64
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use WWW::YouTube::Download;
\&
\&  my $client = WWW::YouTube::Download\->new;
\&  $client\->download($video_id);
\&
\&  my $video_url = $client\->get_video_url($video_id);
\&  my $title     = $client\->get_title($video_id);     # maybe encoded utf8 string.
\&  my $fmt       = $client\->get_fmt($video_id);       # maybe highest quality.
\&  my $suffix    = $client\->get_suffix($video_id);    # maybe highest quality file suffix
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
WWW::YouTube::Download is a library to download videos from YouTube. It relies entirely on
scraping a video's webpage and does not use \s-1YT\s0's /get_video_info \s-1URL\s0 space.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fB\fBnew()\fB\fR" 4
.IX Item "new()"
.Vb 1
\&  $client = WWW::YouTube::Download\->new;
.Ve
.Sp
Creates a WWW::YouTube::Download instance.
.IP "\fBdownload($video_id [, \e%args])\fR" 4
.IX Item "download($video_id [, %args])"
.Vb 11
\&  $client\->download($video_id);
\&  $client\->download($video_id, {
\&      fmt      => 37,
\&      filename => \*(Aqsample.mp4\*(Aq, # save file name
\&  });
\&  $client\->download($video_id, {
\&      filename => \*(Aq{title}.{suffix}\*(Aq, # maybe \`video_title.mp4\`
\&  });
\&  $client\->download($video_id, {
\&      cb => \e&callback,
\&  });
.Ve
.Sp
Download the video file.
The first parameter is passed to YouTube video url.
.Sp
Allowed arguments:
.RS 4
.ie n .IP """cb""" 4
.el .IP "\f(CWcb\fR" 4
.IX Item "cb"
Set a callback subroutine, \s-1SEE\s0 LWP::UserAgent ':content_cb'
for details.
.ie n .IP """filename""" 4
.el .IP "\f(CWfilename\fR" 4
.IX Item "filename"
Set the filename, possibly using placeholders to be filled with
information gathered about the video.
.Sp
\&\f(CW\*(C`filename\*(C'\fR supported format placeholders:
.Sp
.Vb 6
\&  {video_id}
\&  {title}
\&  {user}
\&  {fmt}
\&  {suffix}
\&  {resolution}
.Ve
.Sp
Output filename is set to \f(CW\*(C`{video_id}.{suffix}\*(C'\fR by default.
.ie n .IP """file_name""" 4
.el .IP "\f(CWfile_name\fR" 4
.IX Item "file_name"
\&\fB\s-1DEPRECATED\s0\fR alternative for \f(CW\*(C`filename\*(C'\fR.
.ie n .IP """fmt""" 4
.el .IP "\f(CWfmt\fR" 4
.IX Item "fmt"
set the format to download. Defaults to the best video quality
(inferred by the available resolutions).
.RE
.RS 4
.RE
.IP "\fBplayback_url($video_id, [, \e%args])\fR" 4
.IX Item "playback_url($video_id, [, %args])"
.Vb 2
\&  $client\->playback_url($video_id);
\&  $client\->playback_url($video_id, { fmt => 37 });
.Ve
.Sp
Return playback \s-1URL\s0 of the video. This is direct link to the movie file.
Function supports only \*(L"fmt\*(R" option.
.IP "\fBprepare_download($video_id)\fR" 4
.IX Item "prepare_download($video_id)"
Gather data about the video. A hash reference is returned, with the following
keys:
.RS 4
.ie n .IP """fmt""" 4
.el .IP "\f(CWfmt\fR" 4
.IX Item "fmt"
the default, suggested format. It is inferred by selecting the
alternative with the highest resolution.
.ie n .IP """fmt_list""" 4
.el .IP "\f(CWfmt_list\fR" 4
.IX Item "fmt_list"
the list of available formats, as an array reference.
.ie n .IP """suffix""" 4
.el .IP "\f(CWsuffix\fR" 4
.IX Item "suffix"
the filename extension associated to the default format (see \f(CW\*(C`fmt\*(C'\fR
above).
.ie n .IP """title""" 4
.el .IP "\f(CWtitle\fR" 4
.IX Item "title"
the title of the video
.ie n .IP """user""" 4
.el .IP "\f(CWuser\fR" 4
.IX Item "user"
the YouTube user owning the video
.ie n .IP """video_id""" 4
.el .IP "\f(CWvideo_id\fR" 4
.IX Item "video_id"
the video identifier
.ie n .IP """video_url""" 4
.el .IP "\f(CWvideo_url\fR" 4
.IX Item "video_url"
the \s-1URL\s0 of the video associated to the default format (see \f(CW\*(C`fmt\*(C'\fR
above).
.ie n .IP """video_url_map""" 4
.el .IP "\f(CWvideo_url_map\fR" 4
.IX Item "video_url_map"
an hash reference containing details about all available formats.
.RE
.RS 4
.Sp
The \f(CW\*(C`video_url_map\*(C'\fR has one key/value pair for each available format,
where the key is the format identifier (can be used as \f(CW\*(C`fmt\*(C'\fR parameter
for \*(L"download\*(R", for example) and the value is a hash reference with
the following data:
.ie n .IP """fmt""" 4
.el .IP "\f(CWfmt\fR" 4
.IX Item "fmt"
the format specifier, that can be passed to \*(L"download\*(R"
.ie n .IP """resolution""" 4
.el .IP "\f(CWresolution\fR" 4
.IX Item "resolution"
the resolution as \fIwidth\fRx\fIheight\fR
.ie n .IP """suffix""" 4
.el .IP "\f(CWsuffix\fR" 4
.IX Item "suffix"
the suffix, providing a hint about the video format (e.g. webm, flv, ...)
.ie n .IP """url""" 4
.el .IP "\f(CWurl\fR" 4
.IX Item "url"
the \s-1URL\s0 where the video can be found
.RE
.RS 4
.RE
.IP "\fBua([$ua])\fR" 4
.IX Item "ua([$ua])"
.Vb 2
\&  $self\->ua\->agent();
\&  $self\->ua($LWP_LIKE_OBJECT);
.Ve
.Sp
Sets and gets LWP::UserAgent object.
.IP "\fBvideo_id($url)\fR" 4
.IX Item "video_id($url)"
Parses given \s-1URL\s0 and returns video \s-1ID.\s0
.IP "\fBplaylist_id($url)\fR" 4
.IX Item "playlist_id($url)"
Parses given \s-1URL\s0 and returns playlist \s-1ID.\s0
.IP "\fBuser_id($url)\fR" 4
.IX Item "user_id($url)"
Parses given \s-1URL\s0 and returns YouTube username.
.IP "\fBget_video_id($video_id)\fR" 4
.IX Item "get_video_id($video_id)"
.PD 0
.IP "\fBget_video_url($video_id)\fR" 4
.IX Item "get_video_url($video_id)"
.IP "\fBget_title($video_id)\fR" 4
.IX Item "get_title($video_id)"
.IP "\fBget_user($video_id)\fR" 4
.IX Item "get_user($video_id)"
.IP "\fBget_fmt($video_id)\fR" 4
.IX Item "get_fmt($video_id)"
.IP "\fBget_fmt_list($video_id)\fR" 4
.IX Item "get_fmt_list($video_id)"
.IP "\fBget_suffix($video_id)\fR" 4
.IX Item "get_suffix($video_id)"
.IP "\fBplaylist($id,$ref)\fR" 4
.IX Item "playlist($id,$ref)"
.PD
Fetches a playlist and returns a ref to an array of hashes, where each hash
represents a video from the playlist with youtube id, runtime in seconds
and title. On playlists with many videos, the method iteratively downloads
pages until the playlist is complete.
.Sp
Optionally accepts a second argument, a hashref of options. Currently, you
can pass a \*(L"limit\*(R" value to stop downloading of subsequent pages on larger
playlists after x\-amount of fetches (a limit of fetches, not playlist items).
For example, pass 1 to only download the first page of videos from a playlist
in order to \*(L"skim\*(R" the \*(L"tip\*(R" of new videos in a playlist. YouTube currently
returns 100 videos at max per page.
.Sp
This method is used by the \fIyoutube\-playlists.pl\fR script.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
yusukebe
.SH "BUG REPORTING"
.IX Header "BUG REPORTING"
Please use github issues: <https://github.com/xaicron/p5\-www\-youtube\-download/issues>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
WWW::YouTube::Info and WWW::YouTube::Info::Simple.
WWW::NicoVideo::Download
<http://rg3.github.io/youtube\-dl/>
.SH "AUTHOR"
.IX Header "AUTHOR"
xaicron <xaicron {@} cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Yuji Shimada.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
