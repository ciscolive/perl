.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::ExcelXML::Row 3"
.TH Spreadsheet::Reader::ExcelXML::Row 3 "2017-04-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::ExcelXML::Row \- ExcelXML Row data class
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation is written to explain ways to use this module when writing your own excel
parser.  To use the general package for excel parsing out of the box please review the
documentation for Workbooks,
Worksheets, and
Cells
.PP
This module provides the basic storage and manipulation of row data (for worksheet files).
It does not provide the final view of a given cell.  The final view of the cell is collated
with the role (Interface) Spreadsheet::Reader::ExcelXML::Worksheet.
.PP
\&\fIAll positions (row and column places) at this level are stored and returned in count
from one mode!\fR
.PP
Modification of this module probably means a rework of the Worksheet level module since
it requires several methods from
this role.  A Row instance is generally built and populated by
Spreadsheet::Reader::ExcelXML::WorksheetToRow.
.SS "Attributes"
.IX Subsection "Attributes"
Data passed to new when creating an instance.  For access to the values in these
attributes see the listed 'attribute methods'. For general information on attributes see
Moose::Manual::Attributes.  For ways to manage the instance when opened see the
Methods.
.PP
\fIrow_number\fR
.IX Subsection "row_number"
.Sp
.RS 4
\&\fBDefinition:\fR Stores the row number of the row data in count from 1
.Sp
\&\fBRange:\fR positive integers > 0
.Sp
\&\fBRequired:\fR yes
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fBget_row_number\fR
.Sp
.RS 4
\&\fBDefinition:\fR return the attribute value
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fIrow_span\fR
.IX Subsection "row_span"
.Sp
.RS 4
\&\fBDefinition:\fR Stores an array ref of two integers representing the
start and end columns in count from 1 numbering
.Sp
\&\fBRange:\fR [ 2 positive integers > 0 ]
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fBset_row_span\fR
.Sp
.RS 4
\&\fBDefinition:\fR sets the attribute
.RE
.RE
.RS 4
.Sp
\&\fBhas_row_span\fR
.Sp
.RS 4
\&\fBDefinition:\fR predicate for the attribute
.RE
.RE
.RS 4
.Sp
\&\fBDelegated methods:\fR
Methods delegated from the instance for conversion type checking.
The name delegated to is listed next to a link for the default
method delegated from.  Where the method is curried
 that is shown as well.
.Sp
.RS 4
\&\fBget_row_start\fR => [ \*(L"get\*(R" in Moose::Meta::Attribute::Native::Trait::Array => 0 ], # Get the first position
.Sp
\&\fBget_row_end\fR => [ \*(L"get\*(R" in Moose::Meta::Attribute::Native::Trait::Array => 1 ], # Get the second position
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fIrow_last_value_column\fR
.IX Subsection "row_last_value_column"
.Sp
.RS 4
\&\fBDefinition:\fR Stores the last column with a value in it in count from 1
.Sp
\&\fBRange:\fR positive integers > 0
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fBget_last_value_column\fR
.Sp
.RS 4
\&\fBDefinition:\fR return the attribute value
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fIrow_formats\fR
.IX Subsection "row_formats"
.Sp
.RS 4
\&\fBDefinition:\fR this is an open ended hashref with format values stored for the row
.Sp
\&\fBRange:\fR a hash ref
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fBset_row_formats\fR
.Sp
.RS 4
\&\fBDefinition:\fR sets the whole attribute
.RE
.RE
.RS 4
.Sp
\&\fBDelegated methods:\fR
Methods delegated from the instance for conversion type checking.
The name delegated to is listed next to a link for the default
method delegated from.
.Sp
.RS 4
\&\fBget_row_format\fR => \*(L"get\*(R" in Moose::Meta::Attribute::Native::Trait::Array
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fIrow_value_cells\fR
.IX Subsection "row_value_cells"
.Sp
.RS 4
\&\fBDefinition:\fR Stores an array ref of information about cells with values
for that row (in order).  The purpose of only storing the values is to allow
for 'next_value' calls.  The actual position of the cell column is stored in
the cell hash and the attribute column_to_cell_translations.
.Sp
\&\fBRange:\fR ArrayRef[HashRef]
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fBget_row_value_cells\fR
.Sp
.RS 4
\&\fBDefinition:\fR gets the whole stored attribute
.RE
.RE
.RS 4
.Sp
\&\fBDelegated methods:\fR
Methods delegated from the instance for conversion type checking.
The name delegated to is listed next to a link for the default
method delegated from.
.Sp
.RS 4
\&\fBget_cell_position\fR => \*(L"get\*(R" in Moose::Meta::Attribute::Native::Trait::Array
.Sp
\&\fBtotal_cell_positions\fR => \*(L"count\*(R" in Moose::Meta::Attribute::Native::Trait::Array
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fIcolumn_to_cell_translations\fR
.IX Subsection "column_to_cell_translations"
.Sp
.RS 4
\&\fBDefinition:\fR only cells with values are stored but you may want to
know if a cell has a value based on a column number or you may want to
know where the contents of a cell containing values are base on a column
number.  This attribute stores that lookup table.
.Sp
\&\fBDefault:\fR an ArrayRef with at least one column position set
.Sp
\&\fBDelegated methods:\fR
Methods delegated from the instance for conversion type checking.
The name delegated to is listed next to a link for the default
method delegated from.
.Sp
.RS 4
\&\fBget_position_for_column\fR => \*(L"get\*(R" in Moose::Meta::Attribute::Native::Trait::Array
.RE
.RE
.RS 4
.RE
.SS "Methods"
.IX Subsection "Methods"
These are the methods provided by this class for use within the package but are not intended
to be used by the package end user.  Other private methods not listed here are used in the
module but not used by the package.  If the method is listed here then replacement
of this module either requires replacing them or rewriting all the associated connecting
roles and classes.  \fIAll methods here are assumed to be in count from 1 mode to since the
role instances are meant to be managed in the background for the worksheet.\fR
.PP
\fIget_the_column( \f(CI$column\fI )\fR
.IX Subsection "get_the_column( $column )"
.Sp
.RS 4
\&\fBDefinition:\fR This returns the value stored at the desired column position.  It also stores
this position as the last column retrieved for any 'next_*' calls.
.Sp
\&\fBAccepts:\fR \f(CW$column\fR (integer)
.Sp
\&\fBReturns:\fR a hashref of cell values at that column, undef for no values, or '\s-1EOR\s0' for positions
past the end of the row.
.RE
.PP
\fIget_the_next_value_position\fR
.IX Subsection "get_the_next_value_position"
.Sp
.RS 4
\&\fBDefinition:\fR This returns the next set of cell values or '\s-1EOR\s0' for positions
past the end of the row.  When a set of cell values is returned (not \s-1EOR\s0) the new 'last'
position is recorded.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR a hashref of key value pairs or '\s-1EOR\s0'
.RE
.PP
\fIget_row_all\fR
.IX Subsection "get_row_all"
.Sp
.RS 4
\&\fBDefinition:\fR This is a way to get an array of hashrefs that are positioned correctly
\&\fBin count from zero\fR locations for the row data.  Just value cells can be returned
with get_row_value_cells.  For cells with no value undef
is stored.  For cells past the last value even if they fall inside the row span no
positions are created.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR an arrayref of hashrefs
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::Reader::ExcelXML/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing yet
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Spreadsheet::Reader::ExcelXML \- the package
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::Read \- generic Spreadsheet reader
.Sp
Spreadsheet::ParseExcel \- Excel binary version 2003 and earlier (.xls files)
.Sp
Spreadsheet::XLSX \- Excel version 2007 and later
.Sp
Spreadsheet::ParseXLSX \- Excel version 2007 and later
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
