.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::NTPKey 3"
.TH Infoblox::Grid::NTPKey 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::NTPKey \- Grid Network Time Protocol (NTP) key object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Grid NTPKey object is used by \s-1NTP\s0 server to authenticate the clients.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 6
\& #Constructor for an Grid NTPKey object
\&  my $ntp_key = Infoblox::Grid::NTPKey\->new(
\&     key_number   =>  $num,                  #Required
\&     key_string   =>  $string,               #Required
\&     key_type     =>  "M" | "S" | "A" | "N"  #Optional / Default is "M"
\&   );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to be applied to an NTPKey object.
.SS "Infoblox::Grid\->ntp_authentication_key( )"
.IX Subsection "Infoblox::Grid->ntp_authentication_key( )"
.RS 4
Use this function to specify a \s-1NTP\s0 key at the grid level on the Infoblox appliance. See Infoblox::Grid\->\fBntp_authentication_key()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Create a NTPKey object.
\& my $ntp_key = Infoblox::Grid::NTPKey\->new(
\&                  key_number => 1111,
\&                  key_type   => "M",
\&                  key_string => "aaaa"
\&                );
\&
\& #Configure NTPKey on the Infoblox grid object
\& my $responce = $grid\->ntp_authentication_key()([$ntp_key]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member\->ntp_authentication_key( )"
.IX Subsection "Infoblox::Grid::Member->ntp_authentication_key( )"
.RS 4
Use this function to specify a \s-1NTP\s0 key at the member level on the Infoblox appliance. See Infoblox::Grid::Member\->\fBntp_authentication_key()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&  #Create a NTPKey object.
\& my $ntp_key = Infoblox::Grid::NTPKey\->new(
\&                  key_number => 1111,
\&                  key_type   => "M",
\&                  key_string => "aaaa"
\&                );
\&
\& #Configure NTPKey on the Infoblox member object
\& my $responce = $member\->ntp_authentication_key()([$ntp_key]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can used to configure and retrieve the attribute value of a NTPKey object.
.SS "key_number( )"
.IX Subsection "key_number( )"
.RS 4
Use this method to set or retrieve the key number of the NTPKey object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A positive integer number. Value must be between 1 and 65534.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get key_number
\& my $number = $ntp_key\->key_number();
\& #Modify key_number
\& $ntp_key\->key_number("3333");
.Ve
.RE
.RS 4
.RE
.SS "key_string( )"
.IX Subsection "key_string( )"
.RS 4
Use this method to set or retrieve the key string of the NTPKey object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired key_string in string format defined in the key_type.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get key_string
\& my $string = $ntp_key\->key_string();
\& #Modify key_string
\& $ntp_key\->key_string("d3e54352e5548080");
.Ve
.RE
.RS 4
.RE
.SS "key_type( )"
.IX Subsection "key_type( )"
.RS 4
Use this method to set or retrieve the key type of the NTPKey object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are :\f(CW"M","S","N","A"\fR.The default value is \*(L"M\*(R".
.Sp
.Vb 6
\& "M" \- For  Message Digest (MD5) in ASCII format and the key_string must be a 1\-31 character ASCII using
\&          MD5;
\& "S" \- For Data Encryption Standard (DES) in hex format and key_string must be a 64\-bit hexadecimal
\&         number in DES. The high order 7 bits of each octet form the 56\-bit key, and the low order bit of each
\&        octet is given a value,  so that the octet maintains odd parity. You must specify leading zeros so the key
\&        is exactly 16 hexadecimal digits long and maintains odd parity;
\&
\& "A" \- For Data Encryption Standard (DES) in ASCII format and the key_string must be a 1\-8 character
\&          ASCII using DES;
\& "N" \- For Data Encryption Standard (DES) in NTP format and the key_string must be a 64\-bit hexadecimal in
\&          NTP format. It is the same as the "S" format, but the bits in each octet have been rotated one bit right,
\&          so the parity bit is in the high order bit of the octet. You must specify leading zeros and odd parity must
\&          be maintained.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get key_type
\& my $type = $ntp_key\->key_type();
\& #Modify key_type
\& $ntp_key\->ntp_key("N");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to an object such as create, modify, and remove an object. Also this sample code also includes error handling for the operations.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\&  use strict;
\&  use Infoblox;
\&
\&  #Create a session to the Infoblox appliance
\&  my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\&  );
\&  unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\&  }
\&  print "Session created successfully\en";
.Ve
.PP
\&\fB#Adding an NTPKey object\fR
.PP
.Vb 6
\& #Create a NTPKey object.
\& my $ntp_key = Infoblox::Grid::NTPKey\->new(
\&    key_number => 65533,
\&    key_type   => "M",
\&    key_string => "aaaa"
\& );
\&
\& unless($ntp_key) {
\&        die("Construct NTP Key object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "NTP Key object created successfully\en";
\&
\& #Create a NTPServer object.
\&  my $ntp_server = Infoblox::Grid::NTPServer\->new(
\&     address        => "3.3.3.3",
\& );
\&
\& unless($ntp_server) {
\&        die("Construct NTP server object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "NTP Server object created successfully\en";
\&
\& my @grid_objs = $session\->get(
\&    object  => "Infoblox::Grid",
\&    name    => "Infoblox"
\&  );
\&
\&  my $grid = $grid_objs[0];
\&  unless ($grid) {
\&        die("Get Grid object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Grid object found at least 1 matching entry\en";
\&
\& $grid\->enable_ntp("true");
\& $grid\->ntp_authentication_key([$ntp_key]);
\& $grid\->ntp_server([$ntp_server]);
\&
\& #Applying the changes to appliance through session.
\& $session\->modify($grid)
\&      or die("modify Grid failed:" ,
\&       $session\->status_code(), $session\->status_detail());
\& print "Grid modified successfully for adding NTPKey object\en";
.Ve
.PP
\&\fB#Modifying an NTPKey object\fR
.PP
.Vb 5
\& my $ntp_key = Infoblox::Grid::NTPKey\->new(
\&    key_number => 65532,
\&    key_type   => "M",
\&    key_string => "aaaa"
\& );
\&
\& my @grid_objs = $session\->get(
\&            object => "Infoblox::Grid",
\&            name   => "Infoblox"
\&        );
\&
\& my $grid = $grid_objs[0];
\& unless ($grid) {
\&        die("Get Grid object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Grid object found at least 1 matching entry\en";
\&
\& $grid\->ntp_authentication_key([$ntp_key]);
\&
\& #Applying the changes to appliance through session.
\& $session\->modify($grid)
\&      or die("modify Grid failed:" ,
\&       $session\->status_code(), $session\->status_detail());
\& print "Grid modified successfully for modifying NTPKey object\en";
.Ve
.PP
\&\fB#Removing an NTPKey object\fR
.PP
.Vb 5
\& #Get Infoblox grid object
\& my @grid_objs = $session\->get(
\&            object => "Infoblox::Grid",
\&            name   => "Infoblox"
\&        );
\&
\& my $grid = $grid_objs[0];
\& unless ($grid) {
\&        die("Get Grid object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Grid object found at least 1 matching entry\en";
\&
\& $grid\->ntp_authentication_key([]);
\& #Applying the changes to appliance through session.
\& $session\->modify($grid)
\&     or die("modify Grid failed for removing NTPKey object:" ,
\&      $session\->status_code(), $session\->status_detail());
\& print "Grid modified successfully for removing NTPKey object\en";
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Grid::NTPServer, Infoblox::Grid,Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
