.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LWP::ConsoleLogger::Easy 3"
.TH LWP::ConsoleLogger::Easy 3 "2019-06-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
LWP::ConsoleLogger::Easy \- Easy LWP tracing and debugging
.SH "VERSION"
.IX Header "VERSION"
version 0.000042
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use LWP::ConsoleLogger::Easy qw( debug_ua );
\&    use WWW::Mechanize;
\&
\&    my $mech = WWW::Mechanize\->new;
\&    my $logger = debug_ua( $mech );
\&    $mech\->get(\*(Aqhttps://google.com\*(Aq);
\&
\&    # now watch the console for debugging output
\&
\&    # ...
\&    # stop dumping headers
\&    $logger\->dump_headers( 0 );
\&
\&    # Redact sensitive data
\&    $ENV{LWPCL_REDACT_HEADERS} = \*(AqAuthorization,Foo,Bar\*(Aq;
\&    $ENV{LWPCL_REDACT_PARAMS} = \*(Aqseekrit,password,credit_card\*(Aq;
\&
\&    my $quiet_logger = debug_ua( $mech, 1 );
\&
\&    my $noisy_logger = debug_ua( $mech, 5 );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module gives you the easiest possible introduction to
LWP::ConsoleLogger.  It offers one wrapper around LWP::ConsoleLogger:
\&\f(CW\*(C`debug_ua\*(C'\fR.  This function allows you to get up and running quickly with just
a couple of lines of code. It instantiates user-agent logging and also returns
a LWP::ConsoleLogger object, which you may then tweak to your heart's
desire.
.PP
If you're able to install HTML::FormatText::Lynx then you'll get highly
readable \s-1HTML\s0 to text conversions.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "debug_ua( $mech, $verbosity )"
.el .SS "debug_ua( \f(CW$mech\fP, \f(CW$verbosity\fP )"
.IX Subsection "debug_ua( $mech, $verbosity )"
When called without a verbosity argument, this function turns on all logging.
I'd suggest going with this to start with and then turning down the verbosity
after that.   This method returns an LWP::ConsoleLogger object, which you
may tweak to your heart's desire.
.PP
.Vb 3
\&    my $ua_logger = debug_ua( $ua );
\&    $ua_logger\->content_pre_filter( sub {...} );
\&    $ua_logger\->logger( Log::Dispatch\->new(...) );
\&
\&    $ua\->get(...);
.Ve
.PP
\&\f(CW$ua\fR may be one of several user-agents, including \f(CW\*(C`LWP::UserAgent\*(C'\fR,
\&\f(CW\*(C`Mojo::UserAgent\*(C'\fR, and \f(CW\*(C`WWW::Mechanize\*(C'\fR.
.PP
You can provide a verbosity level of 0 or more.  (Currently 0 \- 8 supported.)
This will turn up the verbosity on your output gradually.  A verbosity of 0
will display nothing.  8 will display all available outputs.
.PP
.Vb 2
\&    # don\*(Aqt get too verbose
\&    my $ua_logger = debug_ua( $ua, 4 );
.Ve
.SS "add_ua_handlers"
.IX Subsection "add_ua_handlers"
This method sets up response and request handlers on your user agent.  This is
done for you automatically if you're using \f(CW\*(C`debug_ua\*(C'\fR.
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
.SS "\s-1LWPCL_REDACT_HEADERS\s0"
.IX Subsection "LWPCL_REDACT_HEADERS"
A comma-separated list of header values to redact from output.
.PP
.Vb 1
\&    $ENV{LWPCL_REDACT_HEADERS} = \*(AqAuthorization,Foo,Bar\*(Aq;
.Ve
.PP
Output will be something like:
.PP
.Vb 7
\&    .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-.
\&    | Request Header | Value            |
\&    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&    | Authorization  | [REDACTED]       |
\&    | Content\-Length | 0                |
\&    | User\-Agent     | libwww\-perl/6.15 |
\&    \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
.Ve
.PP
Use at the command line.
.PP
.Vb 1
\&    LWPCL_REDACT_HEADERS=\*(AqAuthorization,Foo,Bar\*(Aq perl script.pl
.Ve
.SS "\s-1LWPCL_REDACT_PARAMS\s0"
.IX Subsection "LWPCL_REDACT_PARAMS"
A comma-separated list of parameter values to redact from output.
.PP
.Vb 1
\&    $ENV{LWPCL_REDACT_PARAMS} = \*(Aqcredit_card,foo,bar\*(Aq;
.Ve
.PP
Use at the command line.
.PP
.Vb 1
\&    LWPCL_REDACT_PARAMS=\*(Aqcredit_card,foo,bar\*(Aq perl script.pl
\&
\&    .\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-.
\&    | Key         | Value      |
\&    +\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-+
\&    | credit_card | [REDACTED] |
\&    \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
.Ve
.SS "\s-1CAVEATS\s0"
.IX Subsection "CAVEATS"
Text formatting now defaults to attempting to use HTML::FormatText::Lynx to
format \s-1HTML\s0 as text.  If you do not have this installed, we'll fall back to
using HTML::Restrict to remove any \s-1HTML\s0 tags which you have not specifically
whitelisted.
.PP
If you have HTML::FormatText::Lynx installed, but you don't want to use it,
override the default filter:
.PP
.Vb 2
\&    my $logger = debug_ua( $mech );
\&    $logger\->text_pre_filter( sub { return shift } );
.Ve
.SS "\s-1EXAMPLES\s0"
.IX Subsection "EXAMPLES"
Please see the \*(L"examples\*(R" folder in this distribution for more ideas on how to
use this module.
.SH "AUTHOR"
.IX Header "AUTHOR"
Olaf Alders <olaf@wundercounter.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2014\-2019 by MaxMind, Inc.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
