.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::Tree 3"
.TH Text::Tree 3 "2004-05-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Tree \- format a simple tree of strings into a textual tree graph
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Text::Tree;
\&
\&    my $tree = new Text::Tree( "root",
\&                               [ "left\ennode" ],
\&                               [ "right", [ "1" ], [ "2" ] ] );
\&    print $tree\->layout("boxed");
\&
\&    _\|_OUTPUT_\|_
\&
\&        +\-\-\-\-+
\&        |root|
\&        +\-\-\-\-+
\&      .\-\-\-^\-\-\-.
\&    +\-\-\-\-+ +\-\-\-\-\-+
\&    |left| |right|
\&    |node| +\-\-\-\-\-+
\&    +\-\-\-\-+  .\-^\-.
\&           +\-+ +\-+
\&           |1| |2|
\&           +\-+ +\-+
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBnew()\fP"
.IX Subsection "new()"
.Vb 3
\&    my $tree = new Text::Tree( "label",
\&                               [ "left child label", [ ... ] ],
\&                               [ "right child label", [ ... ] );
.Ve
.PP
Create a new tree object from a nested set of array references.  The
first element of each array must be a string used as a node label.  The
remaining elements must each be an array reference for a child of the
node.  Labels may contain newlines to support multiple lines of text.
.SS "\fBlayout()\fP"
.IX Subsection "layout()"
.Vb 2
\&    my @lines = $tree\->layout( "centered in boxes" );
\&    print @lines;
.Ve
.PP
Lays out the tree into an array of newline-terminated strings, ready for
printing or displaying.  The optional style argument may contain various
keywords such as 'center', 'box', 'line', 'oval' and/or 'space'.  These
style keywords affect how the tree nodes are formatted.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Allows the caller to develop a tree structure, using nested arrays of
strings and references.  Once developed, the whole tree can be printed as
a diagram, with the root of the tree at the top, and child nodes
formatted horizontally below them.
.PP
The string labels are printed as-is, or optionally surrounded with a
simple outlining style using printable \s-1ASCII\s0 characters.
.PP
This module may be used with object-oriented or simple function calls.
.SH "HISTORY"
.IX Header "HISTORY"
Mark Jason Dominus (aka \s-1MJD\s0) asked for this functionality on his
Expert-level \*(L"Perl Quiz of the Week\*(R" Number 5.  You can find out more
about the \s-1QOTW\s0 discussion forum at http://perl.plover.com/qotw/
.PP
The central formatting routine was submitted by Ron Isaacson to the Quiz
forum as one possible solution to the general problem.
.PP
Ed Halley adapted the Ron Isaacson entry (with permission), to correct
some tree structures not originally handled, and to allow more formatting
options for the box styles.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2003\-2004 by Ron Isaacson
.PP
Portions Copyright 2003 by Mark Jason Dominus
.PP
Portions Copyright 2004 by Ed Halley
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
