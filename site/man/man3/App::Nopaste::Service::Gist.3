.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::Nopaste::Service::Gist 3"
.TH App::Nopaste::Service::Gist 3 "2019-07-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::Nopaste::Service::Gist \- Service provider for GitHub gist \- http://gist.github.com/
.SH "VERSION"
.IX Header "VERSION"
version 1.013
.SH "GitHub Authorization"
.IX Header "GitHub Authorization"
In order to create gists you have to get an oauth token. That could be easily
obtained via curl:
.PP
.Vb 2
\&    curl \-X POST \*(Aqhttps://USERNAME:PASSWORD@api.github.com/authorizations\*(Aq \e
\&        \-d \*(Aq{"scopes":["gist"],"note":"App::Nopaste"}\*(Aq
.Ve
.PP
or you can use this module to do the same:
.PP
.Vb 1
\&    perl \-MApp::Nopaste::Service::Gist \-e \*(AqApp::Nopaste::Service::Gist\->create_token\*(Aq
.Ve
.PP
You can also generate a token by navigating to <https://github.com/settings/tokens>
and generate a new token with the 'Create gists' ability.
.PP
Then, export the resulting token as the the \f(CW\*(C`GITHUB_OAUTH_TOKEN\*(C'\fR environment
variable.  This will grant gist rights to App::Nopaste (or anything else
that Don't worry, you can revoke access rights anytime from the GitHub profile
settings.
.PP
Alternatively, you can export the \f(CW\*(C`GITHUB_USER\*(C'\fR and \f(CW\*(C`GITHUB_PASSWORD\*(C'\fR
environment variables, just like for the
gist <https://github.com/defunkt/gist> utility.
.PP
You can also simply store your credentials in plaintext in \fI~/.github\fR as in:
.PP
.Vb 2
\&    login bob
\&    password ilikeducks
.Ve
.PP
That's it!
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through the \s-1RT\s0 bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=App-Nopaste>
(or bug\-App\-Nopaste@rt.cpan.org <mailto:bug-App-Nopaste@rt.cpan.org>).
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES,\s0 <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2008 by Shawn M Moore.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
