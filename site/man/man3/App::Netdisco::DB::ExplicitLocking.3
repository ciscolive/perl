.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::Netdisco::DB::ExplicitLocking 3"
.TH App::Netdisco::DB::ExplicitLocking 3 "2020-11-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::Netdisco::DB::ExplicitLocking \- Support for PostgreSQL Lock Modes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In your DBIx::Class schema:
.PP
.Vb 2
\& package My::Schema;
\& _\|_PACKAGE_\|_\->load_components(\*(Aq+App::Netdisco::DB::ExplicitLocking\*(Aq);
.Ve
.PP
Then, in your application code:
.PP
.Vb 2
\& use App::Netdisco::DB::ExplicitLocking \*(Aq:modes\*(Aq;
\& $schema\->txn_do_locked($table, MODE_NAME, sub { ... });
.Ve
.PP
This also works for the ResultSet:
.PP
.Vb 2
\& package My::Schema::ResultSet::TableName;
\& _\|_PACKAGE_\|_\->load_components(\*(Aq+App::Netdisco::DB::ExplicitLocking\*(Aq);
.Ve
.PP
Then, in your application code:
.PP
.Vb 2
\& use App::Netdisco::DB::ExplicitLocking \*(Aq:modes\*(Aq;
\& $schema\->resultset(\*(AqTableName\*(Aq)\->txn_do_locked(MODE_NAME, sub { ... });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This DBIx::Class component provides an easy way to execute PostgreSQL table
locks before a transaction block.
.PP
You can load the component in either the Schema class or ResultSet class (or
both) and then use an interface very similar to \f(CW\*(C`DBIx::Class\*(C'\fR's \f(CW\*(C`txn_do()\*(C'\fR.
.PP
The package also exports constants for each of the table lock modes supported
by PostgreSQL, which must be used if specifying the mode (default mode is
\&\f(CW\*(C`ACCESS EXCLUSIVE\*(C'\fR).
.SH "EXPORTS"
.IX Header "EXPORTS"
With the \f(CW\*(C`:modes\*(C'\fR tag (as in \s-1SYNOPSIS\s0 above) the following constants are
exported and must be used if specifying the lock mode:
.IP "\(bu" 4
\&\f(CW\*(C`ACCESS_SHARE\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`ROW_SHARE\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`ROW_EXCLUSIVE\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`SHARE_UPDATE_EXCLUSIVE\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`SHARE\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`SHARE_ROW_EXCLUSIVE\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`EXCLUSIVE\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`ACCESS_EXCLUSIVE\*(C'\fR
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """$schema\->txn_do_locked($table|\e@tables, MODE_NAME?, $subref)"""
.el .SS "\f(CW$schema\->txn_do_locked($table|\e@tables, MODE_NAME?, $subref)\fP"
.IX Subsection "$schema->txn_do_locked($table|@tables, MODE_NAME?, $subref)"
This is the method signature used when the component is loaded into your
Schema class. The reason you might want to use this over the ResultSet version
(below) is to specify multiple tables to be locked before the transaction.
.PP
The first argument is one or more tables, and is required. Note that these are
the real table names in PostgreSQL, and not \f(CW\*(C`DBIx::Class\*(C'\fR ResultSet aliases
or anything like that.
.PP
The mode name is optional, and defaults to \f(CW\*(C`ACCESS EXCLUSIVE\*(C'\fR. You must use
one of the exported constants in this parameter.
.PP
Finally pass a subroutine reference, just as you would to the normal
\&\f(CW\*(C`DBIx::Class\*(C'\fR \f(CW\*(C`txn_do()\*(C'\fR method. Note that additional arguments are not
supported.
.ie n .SS """$resultset\->txn_do_locked(MODE_NAME?, $subref)"""
.el .SS "\f(CW$resultset\->txn_do_locked(MODE_NAME?, $subref)\fP"
.IX Subsection "$resultset->txn_do_locked(MODE_NAME?, $subref)"
This is the method signature used when the component is loaded into your
ResultSet class. If you don't yet have a ResultSet class (which is the default
\&\- normally only Result classes are created) then you can create a stub which
simply loads this component (and inherits from \f(CW\*(C`DBIx::Class::ResultSet\*(C'\fR).
.PP
This is the simplest way to use this module if you only want to lock one table
before your transaction block.
.PP
The first argument is the optional mode name, which defaults to \f(CW\*(C`ACCESS
EXCLUSIVE\*(C'\fR. You must use one of the exported constants in this parameter.
.PP
The second argument is a subroutine reference, just as you would pass to the
normal \f(CW\*(C`DBIx::Class\*(C'\fR \f(CW\*(C`txn_do()\*(C'\fR method. Note that additional arguments are
not supported.
