.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Helper::Row::ToJSON 3"
.TH DBIx::Class::Helper::Row::ToJSON 3 "2020-03-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Helper::Row::ToJSON \- Remove the boilerplate from your TO_JSON functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package MyApp::Schema::Result::KittenRobot;
\&
\& use parent \*(AqDBIx::Class::Core\*(Aq;
\&
\& _\|_PACKAGE_\|_\->load_components(qw{Helper::Row::ToJSON});
\&
\& _\|_PACKAGE_\|_\->table(\*(AqKittenRobot\*(Aq);
\& _\|_PACKAGE_\|_\->add_columns(
\&    id => {
\&       data_type         => \*(Aqinteger\*(Aq,
\&       is_auto_increment => 1,
\&    },
\&    kitten => {
\&       data_type         => \*(Aqinteger\*(Aq,
\&    },
\&    robot => {
\&       data_type         => \*(Aqtext\*(Aq,
\&       is_nullable       => 1,
\&    },
\&    your_mom => {
\&       data_type         => \*(Aqblob\*(Aq,
\&       is_nullable       => 1,
\&       is_serializable   => 1,
\&    },
\& );
\&
\& 1;
.Ve
.PP
This helper adds a \s-1JSON\s0 method like the following:
.PP
.Vb 9
\& sub TO_JSON {
\&    return {
\&       id       => $self\->id,
\&       kitten   => $self\->kitten,
\&       # robot  => $self\->robot,    # <\-\- doesn\*(Aqt serialize text columns
\&       your_mom => $self\->your_mom, # <\-\- normally wouldn\*(Aqt but explicitly
\&                                    #     asked for in the column spec above
\&    }
\& }
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "_is_column_serializable"
.IX Subsection "_is_column_serializable"
.Vb 1
\& $self\->_is_column_serializable(\*(Aqkitten\*(Aq)
.Ve
.PP
returns true if a column should be serializable or not.  Currently this marks
everything as serializable unless \f(CW\*(C`is_serializable\*(C'\fR is set to false, or
\&\f(CW\*(C`data_type\*(C'\fR is a \f(CW\*(C`blob\*(C'\fR, \f(CW\*(C`text\*(C'\fR, or \f(CW\*(C`ntext\*(C'\fR columns.  If you wanted to only
have explicit serialization you might override this method to look like this:
.PP
.Vb 2
\& sub _is_column_serializable {
\&    my ( $self, $column ) = @_;
\&
\&    my $info = $self\->column_info($column);
\&
\&    return defined $info\->{is_serializable} && $info\->{is_serializable};
\& }
.Ve
.SS "serializable_columns"
.IX Subsection "serializable_columns"
.Vb 1
\& $self\->serializable_columns
.Ve
.PP
simply returns a list of columns that \s-1TO_JSON\s0 should serialize.
.SS "\s-1TO_JSON\s0"
.IX Subsection "TO_JSON"
.Vb 1
\& $self\->TO_JSON
.Ve
.PP
returns a hashref representing your object.  Override this method to add data
to the returned hashref:
.PP
.Vb 2
\& sub TO_JSON {
\&    my $self = shift;
\&
\&    return {
\&       customer_name => $self\->customer\->name,
\&       %{ $self\->next::method },
\&    }
\& }
.Ve
.SS "unserializable_data_types"
.IX Subsection "unserializable_data_types"
.Vb 1
\& $self\->unserializable_data_types
.Ve
.PP
Simply returns a hashref of data types that \s-1TO_JSON\s0 should not serialize.
Defaults to \f(CW\*(C`blob\*(C'\fR, \f(CW\*(C`text\*(C'\fR, or \f(CW\*(C`ntext\*(C'\fR.
.PP
If you wanted to allow serialization of text data types, you might override this
method to look like this:
.PP
.Vb 6
\& sub unserializable_data_types {
\&    return {
\&       blob  => 1,
\&       ntext => 1,
\&    };
\& }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Arthur Axel \*(L"fREW\*(R" Schmidt <frioux+cpan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Arthur Axel \*(L"fREW\*(R" Schmidt.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
