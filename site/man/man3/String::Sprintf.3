.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "String::Sprintf 3"
.TH String::Sprintf 3 "2020-01-02" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
String::Sprintf \- Custom overloading of sprintf
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    use String::Sprintf;
\&    my $f = String::Sprintf\->formatter(
\&      N => sub {
\&        my($width, $value, $values, $letter) = @_;
\&        return commify(sprintf "%${width}f", $value);
\&      }
\&    );
\&
\&    my $out = $f\->sprintf(\*(Aq(%10.2N, %10.2N)\*(Aq, 12345678.901, 87654.321);
\&    print "Formatted result: $out\en";
\&
\&    sub commify {
\&        my $n = shift;
\&        $n =~ s/(\e.\ed+)|(?<=\ed)(?=(?:\ed\ed\ed)+\eb)/$1 || \*(Aq,\*(Aq/ge;
\&        return $n;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
How often has it happened that you wished for a format that (s)printf just doesn't support? Have you ever wished you could overload sprintf with custom formats? Well, I know I have. And this module provides a way to do just that.
.SH "USAGE"
.IX Header "USAGE"
So what is a formatter? Think of it as a \*(L"thing\*(R" that contains custom settings and behaviour for \f(CW\*(C`sprintf\*(C'\fR. Any formatting style that you don't set (\*(L"overload\*(R") falls back to the built-in keyword \f(CW\*(C`sprintf\*(C'\fR.
.PP
You can make a minimal formatter that behaves just like \f(CW\*(C`sprintf\*(C'\fR (and that is actually using \f(CW\*(C`sprintf\*(C'\fR internally) with:
.PP
.Vb 3
\&  # nothing custom, all default:
\&  my $default = String::Sprintf\->formatter();
\&  print $default\->sprintf("%%%02X\en", 35);
\&
\&  # which produces the same result as:
\&  print sprintf("%%%02X\en", 35);   # built\-in
.Ve
.PP
Because of the explicit use of these formatters, you can, of course, use several different formatters at the same time, even in the same expression. That is why it's better that it doesn't actually \fIreally\fR overload the built-in \f(CW\*(C`sprintf\*(C'\fR. Plus, it was far easier to implement this way.
.PP
The syntax used is \s-1OO\s0 Perl, though I don't really consider this as an object-oriented module. For example, I foresee no reason for subclassing, and all formatters behave differently. That's what they're for.
.SH "METHODS"
.IX Header "METHODS"
.SS "class method:"
.IX Subsection "class method:"
\fIformatter( 'A' => \e&formatter_A, 'B' => \e&formatter_B, ... )\fR
.IX Subsection "formatter( 'A' => &formatter_A, 'B' => &formatter_B, ... )"
.PP
This returns a formatter object that holds custom formatting definitions, each associated with a letter, for its method \f(CW\*(C`sprintf\*(C'\fR. Its arguments consist of hash-like pairs of each a formatting letter (case sensitive) and a sub ref that is used for callbacks, and that is expected to return the formatted substring.
.PP
A key of \f(CW\*(C`*\*(C'\fR is the default format definition which will be used if
no other definition matches. If you don't specify a \f(CW\*(C`*\*(C'\fR format, the
formatter uses Perl's builtin \f(CW\*(C`sprintf\*(C'\fR.
.SS "callback \s-1API\s0"
.IX Subsection "callback API"
A callback is supposed to behave like this:
.PP
.Vb 5
\&  sub callback {
\&      my($width, $value, $values, $letter) = @_;
\&      ...
\&      return $formatted_string;
\&  }
.Ve
.PP
\fIArguments: my($width, \f(CI$value\fI, \f(CI$values\fI, \f(CI$letter\fI) = \f(CI@_\fI;\fR
.IX Subsection "Arguments: my($width, $value, $values, $letter) = @_;"
.PP
There are 4 arguments passed to the callback functions, in order of descending importance. So the more commonly used parameters come first \- and yes, that's my mnemonic. They are:
.PP
\f(CW$width\fR
.IX Subsection "$width"
.PP
The part that got put between the '%' and the letter.
.PP
\f(CW$value\fR
.IX Subsection "$value"
.PP
The current value from the arguments list, the one you're supposed to format.
.PP
\f(CW$values\fR = \e@value
.IX Subsection "$values = @value"
.PP
An array ref containing the whole list of all passed arguments, in case you want to support positional indexed values by default, as is done in strftime
.PP
\f(CW$letter\fR
.IX Subsection "$letter"
.PP
The letter that caused the callback to be invoked. This is only provided for the cases where you use a common callback sub, for more than one letter, so you can still distinguish between them.
.PP
\fIreturn value: a string\fR
.IX Subsection "return value: a string"
.PP
The return value in scalar context of this sub is inserted into the final, composed result, as a string.
.SS "instance method:"
.IX Subsection "instance method:"
\fIsprintf($formatstring, \f(CI$value1\fI, \f(CI$value2\fI, ...)\fR
.IX Subsection "sprintf($formatstring, $value1, $value2, ...)"
.PP
This method inserts the values you pass to it into the formatting string, and returns the constructed string. Just like the built-in \f(CW\*(C`sprintf\*(C'\fR does.
.PP
If you're using formatting letters that are \fInot\fR provided when you built the formatter, then it will fall back to the native formatter: \*(L"sprintf\*(R" in perlfunc. So you need only to provide formatters for which you're not happy with the built-ins.
.SH "EXPORTS"
.IX Header "EXPORTS"
Nothing. What did you expect?
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
overload strftime too
.IP "\(bu" 4
proper support for position indexed values, like \f(CW"%2$03X"\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\*(L"sprintf\*(R" in perlfunc, \fBsprintf\fR\|(3), \*(L"strftime\*(R" in \s-1POSIX\s0
.SH "BUGS"
.IX Header "BUGS"
You tell me...?
.SH "SUPPORT"
.IX Header "SUPPORT"
Currently maintained by brian d foy \f(CW\*(C`<bdfoy@cpan.org>\*(C'\fR and hosted
on GitHub (https://github.com/briandfoy/string\-sprintf).
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 6
\&    Bart Lateur
\&    CPAN ID: BARTL
\&    Me at home, eating a hotdog
\&    bart.lateur@pandora.be
\&    L<http://perlmonks.org/?node=bart>
\&    L<http://users.pandora.be/bartl/>
.Ve
.SH "REPOSITORY"
.IX Header "REPOSITORY"
<https://github.com/briandfoy/string\-sprintf>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
(c) Bart Lateur 2006.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
My personal terms are like this: you can do whatever you want with this software: bundle it with any software, be it for free, released under the \s-1GPL,\s0 or commercial; you may redistribute it by itself, fix bugs, add features, and redistribute the modified copy. I would appreciate being informed in case you do the latter.
.PP
What you may not do, is sell the software, as a standalone product.
