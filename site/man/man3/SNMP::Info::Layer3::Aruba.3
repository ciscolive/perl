.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::Layer3::Aruba 3"
.TH SNMP::Info::Layer3::Aruba 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::Layer3::Aruba \- SNMP Interface to Aruba wireless switches
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Miller
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    my $aruba = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\&    my $class = $aruba\->class();
\&    print " Using device sub class : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SNMP::Info::Layer3::Aruba is a subclass of SNMP::Info that provides an
interface to Aruba wireless switches.  The Aruba platform utilizes
intelligent wireless switches which control thin access points.  The thin
access points themselves are unable to be polled for end station information.
.PP
This class emulates bridge functionality for the wireless switch. This enables
end station \s-1MAC\s0 addresses collection and correlation to the thin access point
the end station is using for communication.
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.IP "SNMP::Info::Layer3" 4
.IX Item "SNMP::Info::Layer3"
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.PD 0
.IP "\fIWLSR-AP-MIB\fR" 4
.IX Item "WLSR-AP-MIB"
.IP "\fIWLSX-IFEXT-MIB\fR" 4
.IX Item "WLSX-IFEXT-MIB"
.IP "\fIWLSX-POE-MIB\fR" 4
.IX Item "WLSX-POE-MIB"
.IP "\fIWLSX-SWITCH-MIB\fR" 4
.IX Item "WLSX-SWITCH-MIB"
.IP "\fIWLSX-SYSTEMEXT-MIB\fR" 4
.IX Item "WLSX-SYSTEMEXT-MIB"
.IP "\fIWLSX-USER-MIB\fR" 4
.IX Item "WLSX-USER-MIB"
.IP "\fIWLSX-WLAN-MIB\fR" 4
.IX Item "WLSX-WLAN-MIB"
.PD
.SS "Inherited MIBs"
.IX Subsection "Inherited MIBs"
See \*(L"Required MIBs\*(R" in SNMP::Info::Layer3 for its \s-1MIB\s0 requirements.
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP\s0
.ie n .IP "$aruba\->\fBmodel()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBmodel()\fR" 4
.IX Item "$aruba->model()"
Returns model type.  Cross references \f(CW$aruba\fR\->\fBid()\fR with product IDs in the
Aruba \s-1MIB.\s0
.ie n .IP "$aruba\->\fBvendor()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBvendor()\fR" 4
.IX Item "$aruba->vendor()"
Returns 'aruba'
.ie n .IP "$aruba\->\fBos()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBos()\fR" 4
.IX Item "$aruba->os()"
Returns 'airos'
.ie n .IP "$aruba\->\fBos_ver()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBos_ver()\fR" 4
.IX Item "$aruba->os_ver()"
Returns the software version extracted from \f(CW\*(C`sysDescr\*(C'\fR
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$aruba\->\fBlayers()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBlayers()\fR" 4
.IX Item "$aruba->layers()"
Returns 00000111.  Class emulates Layer 2 and Layer 3functionality for
Thin APs through proprietary MIBs.
.ie n .IP "$aruba\->\fBserial()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBserial()\fR" 4
.IX Item "$aruba->serial()"
Returns the device serial number extracted
from \f(CW\*(C`wlsxSwitchLicenseSerialNumber\*(C'\fR or \f(CW\*(C`wlsxSysExtLicenseSerialNumber\*(C'\fR
.SS "Globals imported from SNMP::Info::Layer3"
.IX Subsection "Globals imported from SNMP::Info::Layer3"
See \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::Layer3 for details.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.ie n .IP "$aruba\->\fBi_80211channel()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_80211channel()\fR" 4
.IX Item "$aruba->i_80211channel()"
Returns reference to hash.  Current operating frequency channel of the radio
interface.
.Sp
(\f(CW\*(C`wlanAPRadioChannel\*(C'\fR)
.ie n .IP "$aruba\->\fBdot11_cur_tx_pwr_mw()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBdot11_cur_tx_pwr_mw()\fR" 4
.IX Item "$aruba->dot11_cur_tx_pwr_mw()"
Returns reference to hash.  Current transmit power, in milliwatts, of the
radio interface.
.Sp
(\f(CW\*(C`wlanAPRadioTransmitPower\*(C'\fR)
.ie n .IP "$aruba\->\fBi_ssidlist()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_ssidlist()\fR" 4
.IX Item "$aruba->i_ssidlist()"
Returns reference to hash.  \s-1SSID\s0's recognized by the radio interface.
.Sp
(\f(CW\*(C`wlanAPESSID\*(C'\fR)
.ie n .IP "$aruba\->\fBi_ssidbcast()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_ssidbcast()\fR" 4
.IX Item "$aruba->i_ssidbcast()"
Returns reference to hash.  Indicates whether the \s-1SSID\s0 is broadcast, true or
false.
.Sp
(\f(CW\*(C`wlsrHideSSID\*(C'\fR)
.ie n .IP "$aruba\->\fBi_ssidmac()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_ssidmac()\fR" 4
.IX Item "$aruba->i_ssidmac()"
With the same keys as i_ssidlist, returns the Basic service set
identification (\s-1BSSID\s0), \s-1MAC\s0 address, the \s-1AP\s0 is using for the \s-1SSID.\s0
.ie n .IP "$aruba\->\fBcd11_mac()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBcd11_mac()\fR" 4
.IX Item "$aruba->cd11_mac()"
Returns client radio interface \s-1MAC\s0 addresses.
.ie n .IP "$aruba\->\fBcd11_sigqual()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBcd11_sigqual()\fR" 4
.IX Item "$aruba->cd11_sigqual()"
Returns client signal quality.
.ie n .IP "$aruba\->\fBcd11_txrate()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBcd11_txrate()\fR" 4
.IX Item "$aruba->cd11_txrate()"
Returns to hash of arrays.  Client transmission speed in Mbs.
.ie n .IP "$aruba\->\fBcd11_rxbyte()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBcd11_rxbyte()\fR" 4
.IX Item "$aruba->cd11_rxbyte()"
Total bytes received by the wireless client.
.ie n .IP "$aruba\->\fBcd11_txbyte()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBcd11_txbyte()\fR" 4
.IX Item "$aruba->cd11_txbyte()"
Total bytes transmitted by the wireless client.
.ie n .IP "$aruba\->\fBcd11_rxpkt()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBcd11_rxpkt()\fR" 4
.IX Item "$aruba->cd11_rxpkt()"
Total packets received by the wireless client.
.ie n .IP "$aruba\->\fBcd11_txpkt()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBcd11_txpkt()\fR" 4
.IX Item "$aruba->cd11_txpkt()"
Total packets transmitted by the wireless client.
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$aruba\->\fBi_index()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_index()\fR" 4
.IX Item "$aruba->i_index()"
Returns reference to map of IIDs to Interface index.
.Sp
Extends \f(CW\*(C`ifIndex\*(C'\fR to support APs as device interfaces.
.ie n .IP "$aruba\->\fBinterfaces()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBinterfaces()\fR" 4
.IX Item "$aruba->interfaces()"
Returns reference to map of IIDs to ports.  Thin APs are implemented as
device interfaces.  The thin \s-1AP MAC\s0 address and radio number
(\f(CW\*(C`wlanAPRadioNumber\*(C'\fR) are combined as the port identifier.
.ie n .IP "$aruba\->\fBi_name()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_name()\fR" 4
.IX Item "$aruba->i_name()"
Interface name.  Returns (\f(CW\*(C`ifName\*(C'\fR) for Ethernet interfaces and
(\f(CW\*(C`wlanAPRadioAPName\*(C'\fR) for \s-1AP\s0 interfaces.
.ie n .IP "$aruba\->\fBi_description()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_description()\fR" 4
.IX Item "$aruba->i_description()"
Returns reference to map of IIDs to interface descriptions.  Returns
\&\f(CW\*(C`ifDescr\*(C'\fR for Ethernet interfaces and the Fully Qualified Location Name
(\f(CW\*(C`wlanAPFQLN\*(C'\fR) for \s-1AP\s0 interfaces.
.ie n .IP "$aruba\->\fBi_type()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_type()\fR" 4
.IX Item "$aruba->i_type()"
Returns reference to map of IIDs to interface types.  Returns
\&\f(CW\*(C`ifType\*(C'\fR for Ethernet interfaces and \f(CW\*(C`wlanAPRadioType\*(C'\fR for \s-1AP\s0
interfaces.
.ie n .IP "$aruba\->\fBi_up()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_up()\fR" 4
.IX Item "$aruba->i_up()"
Returns reference to map of IIDs to link status of the interface.  Returns
\&\f(CW\*(C`ifOperStatus\*(C'\fR for Ethernet interfaces and \f(CW\*(C`wlanAPStatus\*(C'\fR for \s-1AP\s0
interfaces.
.ie n .IP "$aruba\->\fBi_up_admin()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_up_admin()\fR" 4
.IX Item "$aruba->i_up_admin()"
Returns reference to map of IIDs to administrative status of the interface.
Returns \f(CW\*(C`ifAdminStatus\*(C'\fR for Ethernet interfaces and \f(CW\*(C`wlanAPStatus\*(C'\fR
for \s-1AP\s0 interfaces.
.ie n .IP "$aruba\->\fBi_mac()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_mac()\fR" 4
.IX Item "$aruba->i_mac()"
Interface \s-1MAC\s0 address.  Returns interface \s-1MAC\s0 address for Ethernet
interfaces of ports and APs.
.ie n .IP "$aruba\->\fBi_duplex()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_duplex()\fR" 4
.IX Item "$aruba->i_duplex()"
Returns reference to map of IIDs to current link duplex.  Ethernet interfaces
only.
.ie n .IP "$aruba\->\fBv_index()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBv_index()\fR" 4
.IX Item "$aruba->v_index()"
Returns \s-1VLAN\s0 IDs.
.ie n .IP "$aruba\->\fBv_name()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBv_name()\fR" 4
.IX Item "$aruba->v_name()"
Human-entered name for vlans.
.ie n .IP "$aruba\->\fBi_vlan()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_vlan()\fR" 4
.IX Item "$aruba->i_vlan()"
Returns reference to map of IIDs to \s-1VLAN ID\s0 of the interface.
.ie n .IP "$aruba\->\fBi_vlan_membership()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_vlan_membership()\fR" 4
.IX Item "$aruba->i_vlan_membership()"
Returns reference to hash of arrays: key = \f(CW\*(C`ifIndex\*(C'\fR, value = array of \s-1VLAN\s0
IDs.  These are the VLANs for which the port is a member.
.ie n .IP "$aruba\->\fBi_vlan_membership_untagged()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBi_vlan_membership_untagged()\fR" 4
.IX Item "$aruba->i_vlan_membership_untagged()"
Returns reference to hash of arrays: key = \f(CW\*(C`ifIndex\*(C'\fR, value = array of \s-1VLAN\s0
IDs.  These are the VLANs which are members of the untagged egress list for
the port.
.ie n .IP "$aruba\->\fBbp_index()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBbp_index()\fR" 4
.IX Item "$aruba->bp_index()"
Augments the bridge \s-1MIB\s0 by returning reference to a hash containing the
index mapping of \s-1BSSID\s0 to device port (\s-1AP\s0).
.ie n .IP "$aruba\->\fBfw_port()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBfw_port()\fR" 4
.IX Item "$aruba->fw_port()"
Augments the bridge \s-1MIB\s0 by including the \s-1BSSID\s0 a wireless end station is
communicating through (\f(CW\*(C`nUserApBSSID\*(C'\fR).
.ie n .IP "$aruba\->\fBfw_mac()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBfw_mac()\fR" 4
.IX Item "$aruba->fw_mac()"
Augments the bridge \s-1MIB\s0 by including the wireless end station \s-1MAC\s0
(\f(CW\*(C`nUserApBSSID\*(C'\fR) as extracted from the \s-1IID.\s0
.ie n .IP "$aruba\->\fBqb_fw_vlan()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBqb_fw_vlan()\fR" 4
.IX Item "$aruba->qb_fw_vlan()"
Augments the bridge \s-1MIB\s0 by including wireless end station VLANs
(\f(CW\*(C`nUserCurrentVlan\*(C'\fR).
.SS "Pseudo \fIENTITY-MIB\fP information"
.IX Subsection "Pseudo ENTITY-MIB information"
These methods emulate \fIENTITY-MIB\fR Physical Table methods using
\&\fIWLSX-WLAN-MIB\fR and \fIWLSX-SYSTEMEXT-MIB\fR.  APs are included as
subcomponents of the wireless controller.
.ie n .IP "$aruba\->\fBe_index()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBe_index()\fR" 4
.IX Item "$aruba->e_index()"
Returns reference to hash.  Key: \s-1IID\s0 and Value: Integer. The index for APs is
created with an integer representation of the last three octets of the
\&\s-1AP MAC\s0 address.
.ie n .IP "$aruba\->\fBe_class()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBe_class()\fR" 4
.IX Item "$aruba->e_class()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: General hardware type.  Returns
\&'ap' for wireless access points.
.ie n .IP "$aruba\->\fBe_name()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBe_name()\fR" 4
.IX Item "$aruba->e_name()"
More computer friendly name of entity.  Name is '\s-1WLAN\s0 Controller' for the
chassis, Card # for modules, or '\s-1AP\s0'.
.ie n .IP "$aruba\->\fBe_descr()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBe_descr()\fR" 4
.IX Item "$aruba->e_descr()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Human friendly name.
.ie n .IP "$aruba\->\fBe_model()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBe_model()\fR" 4
.IX Item "$aruba->e_model()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Model name.
.ie n .IP "$aruba\->\fBe_type()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBe_type()\fR" 4
.IX Item "$aruba->e_type()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Type of component.
.ie n .IP "$aruba\->\fBe_hwver()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBe_hwver()\fR" 4
.IX Item "$aruba->e_hwver()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Hardware revision.
.ie n .IP "$aruba\->\fBe_swver()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBe_swver()\fR" 4
.IX Item "$aruba->e_swver()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Software revision.
.ie n .IP "$aruba\->\fBe_vendor()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBe_vendor()\fR" 4
.IX Item "$aruba->e_vendor()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: aruba.
.ie n .IP "$aruba\->\fBe_serial()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBe_serial()\fR" 4
.IX Item "$aruba->e_serial()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Serial number.
.ie n .IP "$aruba\->\fBe_pos()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBe_pos()\fR" 4
.IX Item "$aruba->e_pos()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: The relative position among all
entities sharing the same parent. Chassis cards are ordered to come before
APs.
.ie n .IP "$aruba\->\fBe_parent()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBe_parent()\fR" 4
.IX Item "$aruba->e_parent()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: The value of \fBe_index()\fR for the
entity which 'contains' this entity.
.SS "Power Over Ethernet Port Table"
.IX Subsection "Power Over Ethernet Port Table"
These methods emulate the \fIPOWER-ETHERNET-MIB\fR Power Source Entity (\s-1PSE\s0)
Port Table \f(CW\*(C`pethPsePortTable\*(C'\fR methods using the \fIWLSX-POE-MIB\fR Power
over Ethernet Port Table \f(CW\*(C`wlsxPsePortTable\*(C'\fR.
.ie n .IP "$aruba\->\fBpeth_port_ifindex()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBpeth_port_ifindex()\fR" 4
.IX Item "$aruba->peth_port_ifindex()"
Creates an index of module.port to align with the indexing of the
\&\f(CW\*(C`wlsxPsePortTable\*(C'\fR with a value of \f(CW\*(C`ifIndex\*(C'\fR.  The module defaults 1
if otherwise unknown.
.ie n .IP "$aruba\->\fBpeth_port_admin()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBpeth_port_admin()\fR" 4
.IX Item "$aruba->peth_port_admin()"
Administrative status: is this port permitted to deliver power?
.Sp
\&\f(CW\*(C`wlsxPsePortAdminStatus\*(C'\fR
.ie n .IP "$aruba\->\fBpeth_port_status()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBpeth_port_status()\fR" 4
.IX Item "$aruba->peth_port_status()"
Current status: is this port delivering power.
.ie n .IP "$aruba\->\fBpeth_port_class()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBpeth_port_class()\fR" 4
.IX Item "$aruba->peth_port_class()"
Device class: if status is delivering power, this represents the 802.3af
class of the device being powered.
.ie n .IP "$aruba\->\fBpeth_port_neg_power()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBpeth_port_neg_power()\fR" 4
.IX Item "$aruba->peth_port_neg_power()"
The power, in milliwatts, that has been committed to this port.
This value is derived from the 802.3af class of the device being
powered.
.ie n .IP "$aruba\->\fBpeth_port_power()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBpeth_port_power()\fR" 4
.IX Item "$aruba->peth_port_power()"
The power, in milliwatts, that the port is delivering.
.SS "Power Over Ethernet Module Table"
.IX Subsection "Power Over Ethernet Module Table"
These methods emulate the \fIPOWER-ETHERNET-MIB\fR Main Power Source Entity
(\s-1PSE\s0) Table \f(CW\*(C`pethMainPseTable\*(C'\fR methods using the \fIWLSX-POE-MIB\fR Power
over Ethernet Port Table \f(CW\*(C`wlsxPseSlotTable\*(C'\fR.
.ie n .IP "$aruba\->\fBpeth_power_watts()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBpeth_power_watts()\fR" 4
.IX Item "$aruba->peth_power_watts()"
The power supply's capacity, in watts.
.ie n .IP "$aruba\->\fBpeth_power_status()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBpeth_power_status()\fR" 4
.IX Item "$aruba->peth_power_status()"
The power supply's operational status.
.ie n .IP "$aruba\->\fBpeth_power_consumption()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBpeth_power_consumption()\fR" 4
.IX Item "$aruba->peth_power_consumption()"
How much power, in watts, this power supply has been committed to
deliver.
.SS "Arp Cache Table Augmentation"
.IX Subsection "Arp Cache Table Augmentation"
The controller has knowledge of \s-1MAC\-\s0>\s-1IP\s0 mappings for wireless clients.
Augmenting the arp cache data with these \s-1MAC\-\s0>\s-1IP\s0 mappings enables visibility
for stations that only communicate locally.  We also capture the \s-1AP MAC\-\s0>\s-1IP\s0
mappings.
.ie n .IP "$aruba\->\fBat_paddr()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBat_paddr()\fR" 4
.IX Item "$aruba->at_paddr()"
Adds \s-1MAC\s0 addresses extracted from the index of \f(CW\*(C`nUserApBSSID\*(C'\fR.
.ie n .IP "$aruba\->\fBat_netaddr()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBat_netaddr()\fR" 4
.IX Item "$aruba->at_netaddr()"
Adds \s-1IP\s0 addresses extracted from the index of \f(CW\*(C`nUserApBSSID\*(C'\fR.
.SS "Table Methods imported from SNMP::Info::Layer3"
.IX Subsection "Table Methods imported from SNMP::Info::Layer3"
See \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::Layer3 for details.
.SH "Data Munging Callback Subroutines"
.IX Header "Data Munging Callback Subroutines"
.ie n .IP "$aruba\->\fBmunge_aruba_fqln()\fR" 4
.el .IP "\f(CW$aruba\fR\->\fBmunge_aruba_fqln()\fR" 4
.IX Item "$aruba->munge_aruba_fqln()"
Remove nulls encoded as '\e.0' from the Fully Qualified Location Name
(\f(CW\*(C`wlanAPFQLN\*(C'\fR).
