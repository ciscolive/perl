.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "List::Pairwise 3"
.TH List::Pairwise 3 "2014-07-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
List::Pairwise \- map/grep arrays and hashes pairwise
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use List::Pairwise qw(mapp grepp);
\&    
\&    my %hash = (
\&        foo => 4,
\&        bar => 2, 
\&        baz => 6,
\&    );
\& 
\&    my @list = %hash;
\&    
\&    # increment values in\-place
\&    mapp {++$b} %hash;
\&    
\&    # copy with modifications on keys
\&    %hash = mapp {lc($a) => $b} %hash
\&    
\&    # iterate pairwise
\&    mapp {
\&        print "$a: $b\en"
\&    } %hash;
\&    
\&    # reverse array pairs in\-place
\&    mapp { ($a, $b) = ($b, $a) } @list;
\&    
\&    # list "keys" and "values"
\&    my @keys = mapp {$a} @list;
\&    my @values = mapp {$b} @list;
\&    
\&    # grep hash subset
\&    my %subset1 = grepp {$a =~ /^ba/} %hash;
\&    my %subset2 = grepp {$b < 5} %hash;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`List::Pairwise\*(C'\fR provides functions to map and grep lists two elements at a time,
setting \f(CW$a\fR and \f(CW$b\fR to each pair instead of setting \f(CW$_\fR to each element.
.PP
As of version 1.01, List::Pairwise now tries to use the newly implemented \s-1XS\s0
functions pairmap, pairgrep, pairfirst and pairs from List::Util 1.31 and up,
resulting in a major speedup.
.PP
New code should now preferably use List::Util functions directly, with the added
benefit of relying on a Perl core module.
.PP
\&\fB/!\e\fR as of version 1.03 List::Pairwise does not use List::Util, because version up
to the current one (1.39) presents a strange bug where a key can get undefined after
an assignement (see t/listutil.t with paimap instead of mapp) \fB/!\e\fR
.IP "mapp \s-1BLOCK LIST\s0" 4
.IX Item "mapp BLOCK LIST"
.PD 0
.IP "map_pairwise \s-1BLOCK LIST\s0" 4
.IX Item "map_pairwise BLOCK LIST"
.PD
Evaluates the \s-1BLOCK\s0 for each pair of \s-1LIST\s0 (locally
setting \f(CW$a\fR and \f(CW$b\fR to each pair) and returns the list value composed
of the results of each such evaluation.
In scalar context, returns the total number of elements so generated (not pairs).
Evaluates \s-1BLOCK\s0 in list context, so each element of \s-1LIST\s0 may
produce zero, one, or more elements in the returned value.
.Sp
Note that \f(CW$a\fR and \f(CW$b\fR are aliases to the list elements, so they can be used to
modify the elements of the \s-1LIST,\s0 exept for hash keys ($a when \s-1LIST\s0 is a hash).
.Sp
\&\f(CW\*(C`mapp\*(C'\fR is optimized in void context, and can thus be used to iterate lists
pairwise.
.Sp
\&\f(CW\*(C`map_pairwise\*(C'\fR is an alias for \f(CW\*(C`mapp\*(C'\fR.
.Sp
keys/values emulation (only slower):
.Sp
.Vb 4
\&    my @keys = mapp {$a} %hash;
\&    my @keys = mapp {$a} @list;   # same
\&    my @values = mapp {$b} %hash;
\&    my @values = mapp {$b} @list; # same
.Ve
.Sp
copy (only slower):
.Sp
.Vb 1
\&    my %b = mapp {$a, $b} %hash;
.Ve
.Sp
modify values in-place:
.Sp
.Vb 2
\&    mapp {$b = lc($b)} %hash;
\&    mapp {$b = lc($b)} @list; # same
.Ve
.Sp
modifying hash keys in-place does not work with a hash:
.Sp
.Vb 3
\&    mapp {$a = lc($a)} %hash;          # wrong
\&    my %b = mapp {lc($a) => $b} %hash; # ok
\&    %hash = mapp {lc($a) => $b} %hash; # also ok (copy)
.Ve
.Sp
modify array \*(L"keys\*(R" in-place does work:
.Sp
.Vb 1
\&    mapp {$a = lc($a)} @list;
.Ve
.Sp
modify keys and copy:
.Sp
.Vb 2
\&    %hash = mapp {lc($a) => $b} %hash;
\&    @hash = mapp {lc($a) => $b} @list; # same
.Ve
.Sp
reverse hash (does not work in-place):
.Sp
.Vb 1
\&    my %reverse_a = mapp {$b, $a} %hash;
.Ve
.Sp
reverse array pairs in-place:
.Sp
.Vb 1
\&    mapp { ($a, $b) = ($b, $a) } @list;
.Ve
.Sp
each emulation, iterating a list pairwise:
.Sp
.Vb 3
\&    mapp {
\&        print "$a: $b\en";
\&    } %hash;
\&
\&    mapp {
\&        print "$a: $b\en";
\&    } @list;
.Ve
.IP "grepp \s-1BLOCK LIST\s0" 4
.IX Item "grepp BLOCK LIST"
.PD 0
.IP "grep_pairwise \s-1BLOCK LIST\s0" 4
.IX Item "grep_pairwise BLOCK LIST"
.PD
Evaluates the \s-1BLOCK\s0 in scalar context for each pair of \s-1LIST\s0 (locally
setting \f(CW$a\fR and \f(CW$b\fR to each pair) and returns the list value
consisting of those pairs for which the expression evaluated
to true.
In scalar context, returns the number of valid pairs, ie the
number of times the expression was true.
.Sp
So this equality stands:
.Sp
.Vb 1
\&    (grepp BLOCK LIST) == 1/2 * scalar(my @list = (grepp BLOCK LIST))
.Ve
.Sp
Note that \f(CW$a\fR and \f(CW$b\fR are aliases to the list elements, so they can be used to
modify the elements of the \s-1LIST,\s0 exept for hash keys ($a when \s-1LIST\s0 is a hash).
.Sp
\&\f(CW\*(C`grep_pairwise\*(C'\fR is an alias for \f(CW\*(C`grepp\*(C'\fR.
.Sp
grep hash subset:
.Sp
.Vb 2
\&    my %subset1 = grepp {$a =~ /^ba/} %hash;
\&    my %subset2 = grepp {$b < 5} %hash;
.Ve
.Sp
grep specific values:
.Sp
.Vb 1
\&    my @values = mapp {$b} grepp {$a =~ /^ba/} %hash;
.Ve
.Sp
This does not work:
.Sp
.Vb 1
\&    values grepp {$a =~ /^ba/} %hash;
.Ve
.Sp
\&\fBvalues()\fR and \fBkeys()\fR expect a hash, whereas grepp returns a list
.IP "firstp \s-1BLOCK LIST\s0" 4
.IX Item "firstp BLOCK LIST"
.PD 0
.IP "first_pairwise \s-1BLOCK LIST\s0" 4
.IX Item "first_pairwise BLOCK LIST"
.PD
Evaluates the \s-1BLOCK\s0 in scalar context for each pair of \s-1LIST\s0 (locally
setting \f(CW$a\fR and \f(CW$b\fR to each pair) and returns the first pair for
which the expression evaluated to true.
In scalar context, returns 1 if a valid pair was found.
.Sp
\&\f(CW\*(C`firstp\*(C'\fR can be used to iterate lists pairwise as does \f(CW\*(C`mapp\*(C'\fR, but with
the additional option of using the value returned by the \s-1BLOCK\s0 as a \f(CW\*(C`last\*(C'\fR
statement
.Sp
.Vb 5
\&    my $i;
\&    firstp {
\&        print "$a: $b\en";
\&        ++$i==5 # last after 5 iterations
\&    } %hash;
.Ve
.IP "lastp \s-1BLOCK LIST\s0" 4
.IX Item "lastp BLOCK LIST"
.PD 0
.IP "last_pairwise \s-1BLOCK LIST\s0" 4
.IX Item "last_pairwise BLOCK LIST"
.PD
Evaluates the \s-1BLOCK\s0 in scalar context for each pair of \s-1LIST\s0 (locally
setting \f(CW$a\fR and \f(CW$b\fR to each pair) and returns the last pair for
which the expression evaluated to true.
In scalar context, returns 1 if a valid pair was found.
.IP "pair \s-1LIST\s0" 4
.IX Item "pair LIST"
Returns a list of pairs as array references.
.Sp
.Vb 2
\&    my @pairs = pair @list;
\&    my @pairs = mapp {[$a, $b]} @list; # same, but slower
.Ve
.Sp
\&\f(CW\*(C`pair\*(C'\fR can be used in combination with sort, map and grep to do ordered
hash-like manipulations in long chains/streams:
.Sp
.Vb 6
\&    my @ranges =
\&        sort { $a\->[0] <=> $b\->[0] or $a\->[1] <=> $b\->[1] }
\&        grep { $_\->[0] < $_\->[1] }
\&        pair
\&        /\eb(\ed+)\-(\ed+)\eb/g
\&    ;
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
Nothing by default.
Functions can be imported explicitely
.PP
.Vb 1
\&    use List::Pairwise qw(mapp grepp first_pairwise);
.Ve
.PP
You can use the :all tag to import all functions, including *_pairwise aliases
.PP
.Vb 1
\&    use List::Pairwise qw(:all);
.Ve
.SH "CAVEATS"
.IX Header "CAVEATS"
In prior versions, List::Pairwise function did croak when given a list with an odd
number of elements. This is not the case anymore: a warning will now be emitted if
warnings of the 'misc' category are enabled, and the last pair will be completed
with an undefined value.
The old behavior can be restored by making these misc warnings \s-1FATAL:\s0
.PP
.Vb 1
\&    use warnings FATAL => \*(Aqmisc\*(Aq;
.Ve
.SH "TEST COVERAGE"
.IX Header "TEST COVERAGE"
As of List::Pairwise version 0.28:
.PP
.Vb 10
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\-
\&    File                           stmt   bran   cond    sub    pod   time  total
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\-
\&    lib/List/Pairwise.pm          100.0  100.0  100.0  100.0  100.0   88.0  100.0
\&    t/01load.t                    100.0    n/a    n/a  100.0    n/a    0.6  100.0
\&    t/context.t                   100.0    n/a    n/a  100.0    n/a    0.6  100.0
\&    t/coverage.pl                 100.0  100.0    n/a  100.0    n/a    4.2  100.0
\&    t/firstp.t                    100.0    n/a    n/a  100.0    n/a    1.2  100.0
\&    t/grepp.t                     100.0    n/a    n/a  100.0    n/a    1.2  100.0
\&    t/lastp.t                     100.0    n/a    n/a  100.0    n/a    1.2  100.0
\&    t/mapp.t                      100.0    n/a    n/a  100.0    n/a    1.4  100.0
\&    t/pair.t                      100.0    n/a    n/a  100.0    n/a    1.6  100.0
\&    Total                         100.0  100.0  100.0  100.0  100.0  100.0  100.0
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\-
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
List::Util, List::MoreUtils, \f(CW\*(C`grep\*(C'\fR, \f(CW\*(C`map\*(C'\fR
.SH "ACKNOWLEDGMENT"
.IX Header "ACKNOWLEDGMENT"
The author wishes to thank:
.IP "\(bu" 4
Johan Lodin for the \f(CW\*(C`pair\*(C'\fR idea and implementation, as well as numerous other
contributions (see changelog)
.IP "\(bu" 4
Andreas J. Koenig for his advices on documentation and his insight on how to
keep perl 5.10 compatibility
.IP "\(bu" 4
Slaven Rezic for discovering the issues that module has with pre\-5.6 versions
of perl
.IP "\(bu" 4
Paul \*(L"LeoNerd\*(R" Evans for having implemented \s-1XS\s0 versions of these functions in
the core module List::Util
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas Drugeon, <tdrugeon@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006 by Thomas Drugeon
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
