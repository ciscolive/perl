.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::Data 3"
.TH Data::Object::Data 3 "2020-05-31" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::Data
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Podish Parser for Perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package main;
\&
\&  use Data::Object::Data;
\&
\&  my $data = Data::Object::Data\->new(
\&    file => \*(Aqt/Data_Object_Data.t\*(Aq
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides methods for parsing and extracting pod-like sections from
any file or package. The pod-like syntax allows for using these sections
anywhere in the source code and having Perl properly ignoring them.
.SH "SCENARIOS"
.IX Header "SCENARIOS"
This package supports the following scenarios:
.SS "syntax"
.IX Subsection "syntax"
.Vb 1
\&  # POD
\&
\&  # =head1 NAME
\&  #
\&  # Example #1
\&  #
\&  # =cut
\&  #
\&  # =head1 NAME
\&  #
\&  # Example #2
\&  #
\&  # =cut
\&
\&  # Podish Syntax
\&
\&  # =name
\&  #
\&  # Example #1
\&  #
\&  # =cut
\&  #
\&  # =name
\&  #
\&  # Example #2
\&  #
\&  # =cut
\&
\&  # Podish Syntax (Nested)
\&
\&  # =name
\&  #
\&  # Example #1
\&  #
\&  # +=head1 WHY?
\&  #
\&  # blah blah blah
\&  #
\&  # +=cut
\&  #
\&  # More information on the same topic as was previously mentioned in the
\&  # previous section demonstrating the topic as\-is obvious from said section
\&  # ...
\&  #
\&  # =cut
\&
\&  # Alternate Podish Syntax
\&
\&  # @=name
\&  #
\&  # Example #1
\&  #
\&  # @=cut
\&  #
\&  # @=name
\&  #
\&  # Example #2
\&  #
\&  # @=cut
\&
\&  my $data = Data::Object::Data\->new(
\&    file => \*(Aqt/examples/alternate.pod\*(Aq
\&  );
\&
\&  $data\->contents(\*(Aqname\*(Aq);
\&
\&  # [[\*(AqExample #1\*(Aq], [\*(AqExample #2\*(Aq]]
.Ve
.PP
This package supports parsing standard \s-1POD\s0 and pod-like sections from any file
or package, anywhere in the document. Additionally, this package supports an
alternative \s-1POD\s0 definition syntax which helps differentiate between the
traditional \s-1POD\s0 usage and other usages.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
This package has the following attributes:
.SS "data"
.IX Subsection "data"
.Vb 1
\&  data(Str)
.Ve
.PP
This attribute is read-only, accepts \f(CW\*(C`(Str)\*(C'\fR values, and is optional.
.SS "file"
.IX Subsection "file"
.Vb 1
\&  file(Str)
.Ve
.PP
This attribute is read-only, accepts \f(CW\*(C`(Str)\*(C'\fR values, and is optional.
.SS "from"
.IX Subsection "from"
.Vb 1
\&  from(Str)
.Ve
.PP
This attribute is read-only, accepts \f(CW\*(C`(Str)\*(C'\fR values, and is optional.
.SH "METHODS"
.IX Header "METHODS"
This package implements the following methods:
.SS "content"
.IX Subsection "content"
.Vb 1
\&  content(Str $name) : ArrayRef[Str]
.Ve
.PP
The content method the pod-like section where the name matches the given
string.
.IP "content example #1" 4
.IX Item "content example #1"
.Vb 11
\&  # =name
\&  #
\&  # Example #1
\&  #
\&  # =cut
\&  #
\&  # =name
\&  #
\&  # Example #2
\&  #
\&  # =cut
\&
\&  my $data = Data::Object::Data\->new(
\&    file => \*(Aqt/examples/content.pod\*(Aq
\&  );
\&
\&  $data\->content(\*(Aqname\*(Aq);
\&
\&  # [\*(AqExample #1\*(Aq]
.Ve
.IP "content example #2" 4
.IX Item "content example #2"
.Vb 10
\&  # =name
\&  #
\&  # Example #1
\&  #
\&  # +=head1 WHY?
\&  #
\&  # blah blah blah
\&  #
\&  # +=cut
\&  #
\&  # More information on the same topic as was previously mentioned in the
\&  # previous section demonstrating the topic as\-is obvious from said section
\&  # ...
\&  #
\&  # =cut
\&
\&  my $data = Data::Object::Data\->new(
\&    file => \*(Aqt/examples/nested.pod\*(Aq
\&  );
\&
\&  $data\->content(\*(Aqname\*(Aq);
\&
\&  # [\*(AqExample #1\*(Aq, \*(Aq\*(Aq, \*(Aq=head1 WHY?\*(Aq, ...]
.Ve
.SS "contents"
.IX Subsection "contents"
.Vb 1
\&  contents(Str $list, Str $name) : ArrayRef[ArrayRef]
.Ve
.PP
The contents method returns all pod-like sections that start with the given
string, e.g. \f(CW\*(C`pod\*(C'\fR matches \f(CW\*(C`=pod foo\*(C'\fR. This method returns an arrayref of
data for the matched sections. Optionally, you can filter the results by name
by providing an additional argument.
.IP "contents example #1" 4
.IX Item "contents example #1"
.Vb 11
\&  # =name example\-1
\&  #
\&  # Example #1
\&  #
\&  # =cut
\&  #
\&  # =name example\-2
\&  #
\&  # Example #2
\&  #
\&  # =cut
\&
\&  my $data = Data::Object::Data\->new(
\&    file => \*(Aqt/examples/contents.pod\*(Aq
\&  );
\&
\&  $data\->contents(\*(Aqname\*(Aq);
\&
\& # [[\*(AqExample #1\*(Aq], [\*(AqExample #2\*(Aq]]
.Ve
.IP "contents example #2" 4
.IX Item "contents example #2"
.Vb 10
\&  # =name example\-1
\&  #
\&  # Example #1
\&  #
\&  # +=head1 WHY?
\&  #
\&  # blah blah blah
\&  #
\&  # +=cut
\&  #
\&  # ...
\&  #
\&  # =cut
\&
\&  my $data = Data::Object::Data\->new(
\&    string => join "\en\en", (
\&      \*(Aq=name example\-1\*(Aq,
\&      \*(Aq\*(Aq,
\&      \*(AqExample #1\*(Aq,
\&      \*(Aq\*(Aq,
\&      \*(Aq+=head1 WHY?\*(Aq,
\&      \*(Aq\*(Aq,
\&      \*(Aqblah blah blah\*(Aq,
\&      \*(Aq\*(Aq,
\&      \*(Aq+=cut\*(Aq,
\&      \*(Aq\*(Aq,
\&      \*(AqMore information on the same topic as was previously mentioned in the\*(Aq,
\&      \*(Aq\*(Aq,
\&      \*(Aqprevious section demonstrating the topic as\-is obvious from said section\*(Aq,
\&      \*(Aq\*(Aq,
\&      \*(Aq...\*(Aq,
\&      \*(Aq\*(Aq,
\&      \*(Aq=cut\*(Aq
\&    )
\&  );
\&
\&  $data\->contents(\*(Aqname\*(Aq);
\&
\&  # [[\*(AqExample #1\*(Aq, \*(Aq\*(Aq, \*(Aq=head1 WHY?\*(Aq, ...]]
.Ve
.SS "item"
.IX Subsection "item"
.Vb 1
\&  item(Str $name) : HashRef
.Ve
.PP
The item method returns metadata for the pod-like section that matches the
given string.
.IP "item example #1" 4
.IX Item "item example #1"
.Vb 11
\&  # =name
\&  #
\&  # Example #1
\&  #
\&  # =cut
\&  #
\&  # =name
\&  #
\&  # Example #2
\&  #
\&  # =cut
\&
\&  my $data = Data::Object::Data\->new(
\&    file => \*(Aqt/examples/content.pod\*(Aq
\&  );
\&
\&  $data\->item(\*(Aqname\*(Aq);
\&
\&  # {
\&  #   index => 1,
\&  #   data => [\*(AqExample #1\*(Aq],
\&  #   list => undef,
\&  #   name => \*(Aqname\*(Aq
\&  # }
.Ve
.SS "list"
.IX Subsection "list"
.Vb 1
\&  list(Str $name) : ArrayRef
.Ve
.PP
The list method returns metadata for each pod-like section that matches the
given string.
.IP "list example #1" 4
.IX Item "list example #1"
.Vb 11
\&  # =name example\-1
\&  #
\&  # Example #1
\&  #
\&  # =cut
\&  #
\&  # =name example\-2
\&  #
\&  # Example #2
\&  #
\&  # =cut
\&
\&  my $data = Data::Object::Data\->new(
\&    file => \*(Aqt/examples/contents.pod\*(Aq
\&  );
\&
\&  $data\->list(\*(Aqname\*(Aq);
\&
\&  # [{
\&  #   index => 1,
\&  #   data => [\*(AqExample #1\*(Aq],
\&  #   list => \*(Aqname\*(Aq,
\&  #   name => \*(Aqexample\-1\*(Aq
\&  # },
\&  # {
\&  #   index => 2,
\&  #   data => [\*(AqExample #2\*(Aq],
\&  #   list => \*(Aqname\*(Aq,
\&  #   name => \*(Aqexample\-2\*(Aq
\&  # }]
.Ve
.SS "list_item"
.IX Subsection "list_item"
.Vb 1
\&  list_item(Str $list, Str $item) : ArrayRef[HashRef]
.Ve
.PP
The list_item method returns metadata for the pod-like sections that matches
the given list name and argument.
.IP "list_item example #1" 4
.IX Item "list_item example #1"
.Vb 11
\&  # =name example\-1
\&  #
\&  # Example #1
\&  #
\&  # =cut
\&  #
\&  # =name example\-2
\&  #
\&  # Example #2
\&  #
\&  # =cut
\&
\&  my $data = Data::Object::Data\->new(
\&    file => \*(Aqt/examples/contents.pod\*(Aq
\&  );
\&
\&  $data\->list_item(\*(Aqname\*(Aq, \*(Aqexample\-2\*(Aq);
\&
\&  # [{
\&  #   index => 2,
\&  #   data => [\*(AqExample #2\*(Aq],
\&  #   list => \*(Aqname\*(Aq,
\&  #   name => \*(Aqexample\-2\*(Aq
\&  # }]
.Ve
.SS "parser"
.IX Subsection "parser"
.Vb 1
\&  parser(Str $string) : ArrayRef
.Ve
.PP
The parser method extracts pod-like sections from a given string and returns an
arrayref of metadata.
.IP "parser example #1" 4
.IX Item "parser example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $data\->parser("=pod\en\enContent\en\en=cut");
\&
\&  # [{
\&  #   index => 1,
\&  #   data => [\*(AqContent\*(Aq],
\&  #   list => undef,
\&  #   name => \*(Aqpod\*(Aq
\&  # }]
.Ve
.SS "pluck"
.IX Subsection "pluck"
.Vb 1
\&  pluck(Str $type, Str $item) : ArrayRef[HashRef]
.Ve
.PP
The pluck method splices and returns metadata for the pod-like section that
matches the given list or item by name. Splicing means that the parsed dataset
will be reduced each time this method returns data, making this useful with
iterators and reducers.
.IP "pluck example #1" 4
.IX Item "pluck example #1"
.Vb 11
\&  # =name example\-1
\&  #
\&  # Example #1
\&  #
\&  # =cut
\&  #
\&  # =name example\-2
\&  #
\&  # Example #2
\&  #
\&  # =cut
\&
\&  my $data = Data::Object::Data\->new(
\&    file => \*(Aqt/examples/contents.pod\*(Aq
\&  );
\&
\&  $data\->pluck(\*(Aqlist\*(Aq, \*(Aqname\*(Aq);
\&
\&  # [{
\&  #   index => 1,
\&  #   data => [\*(AqExample #1\*(Aq],
\&  #   list => \*(Aqname\*(Aq,
\&  #   name => \*(Aqexample\-1\*(Aq
\&  # },{
\&  #   index => 2,
\&  #   data => [\*(AqExample #2\*(Aq],
\&  #   list => \*(Aqname\*(Aq,
\&  #   name => \*(Aqexample\-2\*(Aq
\&  # }]
.Ve
.IP "pluck example #2" 4
.IX Item "pluck example #2"
.Vb 11
\&  # =name example\-1
\&  #
\&  # Example #1
\&  #
\&  # =cut
\&  #
\&  # =name example\-2
\&  #
\&  # Example #2
\&  #
\&  # =cut
\&
\&  my $data = Data::Object::Data\->new(
\&    file => \*(Aqt/examples/contents.pod\*(Aq
\&  );
\&
\&  $data\->pluck(\*(Aqitem\*(Aq, \*(Aqexample\-1\*(Aq);
\&
\&  # [{
\&  #   index => 1,
\&  #   data => [\*(AqExample #1\*(Aq],
\&  #   list => \*(Aqname\*(Aq,
\&  #   name => \*(Aqexample\-1\*(Aq
\&  # }]
\&
\&  $data\->pluck(\*(Aqitem\*(Aq, \*(Aqexample\-2\*(Aq);
\&
\&  # [{
\&  #   index => 2,
\&  #   data => [\*(AqExample #2\*(Aq],
\&  #   list => \*(Aqname\*(Aq,
\&  #   name => \*(Aqexample\-2\*(Aq
\&  # }]
.Ve
.IP "pluck example #3" 4
.IX Item "pluck example #3"
.Vb 11
\&  # =name example\-1
\&  #
\&  # Example #1
\&  #
\&  # =cut
\&  #
\&  # =name example\-2
\&  #
\&  # Example #2
\&  #
\&  # =cut
\&
\&  my $data = Data::Object::Data\->new(
\&    file => \*(Aqt/examples/contents.pod\*(Aq
\&  );
\&
\&  $data\->pluck(\*(Aqlist\*(Aq, \*(Aqname\*(Aq);
\&
\&  # [{
\&  #   index => 1,
\&  #   data => [\*(AqExample #1\*(Aq],
\&  #   list => \*(Aqname\*(Aq,
\&  #   name => \*(Aqexample\-1\*(Aq
\&  # },{
\&  #   index => 2,
\&  #   data => [\*(AqExample #2\*(Aq],
\&  #   list => \*(Aqname\*(Aq,
\&  #   name => \*(Aqexample\-2\*(Aq
\&  # }]
\&
\&  $data\->pluck(\*(Aqlist\*(Aq, \*(Aqname\*(Aq);
\&
\&  # []
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/data-object-data/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/data-object-data/wiki>
.PP
Project <https://github.com/iamalnewkirk/data-object-data>
.PP
Initiatives <https://github.com/iamalnewkirk/data-object-data/projects>
.PP
Milestones <https://github.com/iamalnewkirk/data-object-data/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/data-object-data/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/data-object-data/issues>
