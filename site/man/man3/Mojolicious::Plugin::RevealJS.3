.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::RevealJS 3"
.TH Mojolicious::Plugin::RevealJS 3 "2020-06-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::RevealJS \- Mojolicious XX Reveal.js
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojolicious::Lite;
\&
\&  plugin \*(AqRevealJS\*(Aq;
\&
\&  any \*(Aq/\*(Aq => { template => \*(Aqmytalk\*(Aq, layout => \*(Aqrevealjs\*(Aq };
\&
\&  app\->start;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::RevealJS is yet another attempt at making presentations with Mojolicious.
While the author's previous attempts have tried do too much, this one simply makes it easier to use Reveal.js <http://lab.hakim.se/reveal-js>.
It provides a layout (\f(CW\*(C`revealjs\*(C'\fR) which contains the boilerplate and loads the bundled libraries.
It also provides a few simple helpers.
Future versions of the plugin will allow setting of configuration like themes.
.PP
The bundled version of Reveal.js is currently 3.7.0.
The bundled version of reveal-sampler is currently cd4a07d.
.PP
Note that this module is in an alpha form!
The author makes no compatibilty promises.
.SH "LAYOUTS"
.IX Header "LAYOUTS"
.Vb 3
\&  # controller
\&  $c\->layout(\*(Aqrevealjs\*(Aq); # or
\&  $c\->stash(layout => \*(Aqrevealjs\*(Aq);
\&
\&  # or template
\&  % layout \*(Aqrevealjs\*(Aq;
.Ve
.SS "revealjs"
.IX Subsection "revealjs"
This layout is essentially the standard template distributed as part of the Reveal.js tarball.
It is modified for use in a Mojolicious template.
.PP
\fIstash paramters\fR
.IX Subsection "stash paramters"
.PP
It accepts the stash parameters:
.IP "\(bu" 4
author \- sets the metadata value
.IP "\(bu" 4
description \- sets the metadata value
.IP "\(bu" 4
init \- Reveal.js initialization options, a hashref for \s-1JSON\s0 conversion documented below
.IP "\(bu" 4
theme \- a string representing a theme css to be included.
If the string ends in \f(CW\*(C`.css\*(C'\fR it is included literally, otherwise it is assumed to be the name of a bundled Reveal.js theme.
Bundled themes are: black, white, league, beige, sky, night, serif, simple, solarized.
Defaults to black.
See more on the \*(L"Reveal.js page\*(R" <https://github.com/hakimel/reveal.js#theming>.
.IP "\(bu" 4
title \- sets the window title, not used on the title slide
.IP "\(bu" 4
base \- sets the \f(CW\*(C`<base>\*(C'\fR tag for the document.
Useful for hosting static pages at a location other than \f(CW\*(C`/\*(C'\fR.
Defaults to \f(CW\*(C`/\*(C'\fR, if explicitly set to \f(CW\*(C`undef\*(C'\fR the tag is not included.
.IP "\(bu" 4
hljs_theme_url \- sets the url path for loading a css theme for highlight js.
Defaults to a bundled zenburn theme.
.PP
\fIinitialization parameters\fR
.IX Subsection "initialization parameters"
.PP
As mentioned above, the stash key \f(CW\*(C`init\*(C'\fR is a hashref that is merge into a set of defaults and used to initialize Reveal.js.
Some RevealJS initialization options, specifically those that have a default are:
.IP "\(bu" 4
center \- enable slide centering (boolean, true by default)
.IP "\(bu" 4
controls \- enable controls (boolean, true by default)
.IP "\(bu" 4
history \- enable history (boolean, true by default)
.IP "\(bu" 4
progress \- enable progress indicator (boolean, true by default)
.IP "\(bu" 4
transition \- set the slide transition type (one of: none, fade, slide, convex, concave, zoom; default: slide)
.PP
These defaults are set in the default stash value for \f(CW\*(C`revealjs.init\*(C'\fR.
So they can be modified globally modifying that value (probably during setup).
.PP
.Vb 1
\&  $app\->defaults\->{\*(Aqrevealjs.init\*(Aq}{transition} = \*(Aqnone\*(Aq;
.Ve
.PP
Note that booleans are references to scalar values, \f(CW\*(C`true == \e1\*(C'\fR, \f(CW\*(C`false == \e0\*(C'\fR.
See more availalbe options on the \*(L"Reveal.js page\*(R" <https://github.com/hakimel/reveal.js#configuration>.
.PP
\fIadditional templates\fR
.IX Subsection "additional templates"
.PP
In order to further customize the template the following unimplemented templates are included into the layout
.IP "\(bu" 4
\&\f(CW\*(C`revealjs_head.html.ep\*(C'\fR \- included at the end of the \f(CW\*(C`<head>\*(C'\fR tag.
.IP "\(bu" 4
\&\f(CW\*(C`revealjs_preinit.js.ep\*(C'\fR \- included just before initializing Reveal.js.
Especially useful to modify the javascript variable \f(CW\*(C`init\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`revealjs_body.html.ep\*(C'\fR \- included at the end of the \f(CW\*(C`<body>\*(C'\fR tag.
.SH "HELPERS"
.IX Header "HELPERS"
.SS "include_code"
.IX Subsection "include_code"
.Vb 1
\&  %= include_code \*(Aqpath/to/file.pl\*(Aq
.Ve
.PP
\&\s-1NOTE\s0 this helper is mildly-deprecated in favor of the reveal-sampler plugin and \*(L"include_sample\*(R".
It isn't going away yet, but if things work out with that functionality this method may eventually be implemented via it or removed entirely.
.PP
This helper does several things:
.IP "\(bu" 4
localizes trailing arguments into the stash
.IP "\(bu" 4
slurps a file containing code
.IP "\(bu" 4
http escapes the content
.IP "\(bu" 4
applies some simple formatting
.IP "\(bu" 4
displays the relative path to the location of the file (for the benefit of repo cloners)
.PP
The helper takes a file name and additional key-value pairs.
The following keys and their value are removed from the pairs, the remaining are localized into the stash:
.IP "language" 4
.IX Item "language"
sets the language for the highlighting, defaults to the value of \f(CW\*(C`stash(\*(Aqlanguage\*(Aq) // \*(Aqperl\*(Aq\*(C'\fR
.IP "section" 4
.IX Item "section"
limits the section to a given section name
.IP "include_filename" 4
.IX Item "include_filename"
if true (default) include the filename when the code is included
.PP
\&\s-1NOTE:\s0 This feature is experimental!
.PP
The section is definite by a line comment of the form \f(CW\*(C`#\*(C'\fR or \f(CW\*(C`//\*(C'\fR or \f(CW\*(C`\-\-\*(C'\fR or \f(CW\*(C`<!\-\-\*(C'\fR followed by \f(CW\*(C`reveal begin $name\*(C'\fR and ended with comment mark followed by \f(CW\*(C`reveal end $name\*(C'\fR.
.PP
.Vb 1
\&  %= include_code \*(Aqpath/to/file\*(Aq, section => \*(Aqpart1\*(Aq
.Ve
.PP
Then in the file
.PP
.Vb 1
\&  Excluded content
\&
\&  # reveal begin part1
\&  Included content
\&  # reveal end part1
\&
\&  Excluded content
.Ve
.SS "include_sample"
.IX Subsection "include_sample"
.Vb 1
\&  %= include_sample \*(Aqpath/to/file.pl\*(Aq
.Ve
.PP
The spiritual successor (and possbily actually the sucessor) to \*(L"include_code\*(R".
The heavy lifting is done in the client via the reveal-sampler plugin which is bundled.
It is much simpler than \*(L"include_code\*(R".
.PP
It takes the url of the file to render, which must be in a publicly available via static render.
This file path may also contain a url fragment designating the section or line numbers to display.
Read more at <https://github.com/ldionne/reveal\-sampler>.
.PP
After the file url, the following trailing key-value pair options are available.
.IP "language" 4
.IX Item "language"
Sets the language for the highlighting.
Note that the alias \f(CW\*(C`lang\*(C'\fR is also allowed and defaults to the value of the \f(CW\*(C`language\*(C'\fR stash value.
If this is not set, the client-side code will also attempt to set it based on the file extension.
.IP "mark" 4
.IX Item "mark"
Sets lines to be marked by the client.
This follows the documentation at <https://github.com/ldionne/reveal\-sampler>.
.IP "indent" 4
.IX Item "indent"
Instructs reveal-sampler to \*(L"keep\*(R" or \*(L"remove\*(R" any overall indentation in the sample.
This follows the documentation at <https://github.com/ldionne/reveal\-sampler>.
.Sp
Note that the default behavior (for when \*(L"indent\*(R" is not set) can be set in \*(L"init\*(R".
The default (from the plugin itself), is false.
.Sp
.Vb 1
\&  $c\->stash( init => { sampler => { removeIndentation => \e1 } } );
.Ve
.IP "trim" 4
.IX Item "trim"
Sets the \f(CW\*(C`data\-trim\*(C'\fR attribute for revealjs.
.IP "noescape" 4
.IX Item "noescape"
Sets the \f(CW\*(C`data\-noescape\*(C'\fR attribute for revealjs.
Note that if the \*(L"mark\*(R" option is used, the front-end will automatically apply this attribute.
.IP "annotation" 4
.IX Item "annotation"
A text line to be rendered below the code section.
This is normally used to display the file name/path.
If not explicitly given it will default to the url of the file (without any fragment).
If explicitly undefined, the annotation will not be rendered.
.SS "section"
.IX Subsection "section"
.Vb 3
\&  %= section begin
\&  ...
\&  % end
.Ve
.PP
A shortcut for creating a section tag.
.PP
.Vb 2
\&  %# longer form
\&  %= tag section => ...
.Ve
.SS "markdown_section"
.IX Subsection "markdown_section"
.Vb 3
\&  %= markdown_section begin
\&  ...
\&  % end
.Ve
.PP
Build a section tag and script/template tag to properly use the built-in markdown handling within this slide.
.SS "revealjs\->export"
.IX Subsection "revealjs->export"
.Vb 1
\&  $ ./myapp.pl eval \*(Aqapp\->revealjs\->export("/" => "path/", \e%options)\*(Aq
.Ve
.PP
Exports the rendered page and all of the files in the static directories to the designated path.
This is very crude, but effective for usual cases.
.PP
Allowed options are:
.IP "base" 4
.IX Item "base"
Override the base tag by removing the original and inserting a new one just inside the \f(CW\*(C`<head>\*(C'\fR tag with the given value as the href target.
This feature is cludgy (as is this whole helper), consider it experimental, its behavior may change.
.SH "SOURCE REPOSITORY"
.IX Header "SOURCE REPOSITORY"
<http://github.com/jberger/Mojolicious\-Plugin\-RevealJS>
.SH "AUTHOR"
.IX Header "AUTHOR"
Joel Berger, <joel.a.berger@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2015 by Joel Berger
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Reveal.js (bundled) is Copyright (C) 2015 Hakim El Hattab, http://hakim.se and released under the \s-1MIT\s0 license.
reveal-sampler (bundled) is Copyright (C) 2017 Louis Dionne and released under the \s-1MIT\s0 license.
