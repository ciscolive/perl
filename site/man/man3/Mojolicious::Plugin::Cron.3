.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Cron 3"
.TH Mojolicious::Plugin::Cron 3 "2020-07-21" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Cron \- a Cron\-like helper for Mojolicious and Mojolicious::Lite projects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # Execute some job every 5 minutes, from 9 to 5 (4:55 actually)
\&
\&  # Mojolicious::Lite
\&
\&  plugin Cron => ( \*(Aq*/5 9\-16 * * *\*(Aq => sub {
\&      # do someting non\-blocking but useful
\&  });
\&
\&  # Mojolicious
\&
\&  $self\->plugin(Cron => \*(Aq*/5 9\-16 * * *\*(Aq => sub {
\&      # same here
\&  });
.Ve
.PP
# More than one schedule, or more options requires extended syntax
.PP
.Vb 10
\&  plugin Cron => (
\&  sched1 => {
\&    base    => \*(Aqutc\*(Aq, # not needed for local time
\&    crontab => \*(Aq*/10 15 * * *\*(Aq, # at every 10th minute past hour 15 (3:00 pm to 3:50 pm)
\&    code    => sub {
\&      # job 1 here
\&    }
\&  },
\&  sched2 => {
\&    crontab => \*(Aq*/15 15 * * *\*(Aq, # at every 15th minute past hour 15 (3:00 pm to 3:45 pm)
\&    code    => sub {
\&      # job 2 here
\&    }
\&  });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::Cron is a Mojolicious plugin that allows to schedule tasks
 directly from inside a Mojolicious application.
.PP
The plugin mimics *nix \*(L"crontab\*(R" format to schedule tasks (see cron <https://en.wikipedia.org/wiki/Cron>) .
.PP
As an extension to regular cron, seconds are supported in the form of a sixth space
separated field (For more information on cron syntax please see Algorithm::Cron).
.PP
The plugin can help in development and testing phases, as it is very easy to configure and
doesn't require a schedule utility with proper permissions at operating system level.
.PP
For testing, it may be helpful to use Test::Mock::Time ability to \*(L"fast-forward\*(R"
time calling all the timers in the interval. This way, you can actually test events programmed
far away in the future.
.PP
For deployment phase, it will help avoiding the installation steps normally asociated with
scheduling periodic tasks.
.SH "BASICS"
.IX Header "BASICS"
When using preforked servers (as applications running with hypnotoad), some coordination
is needed so jobs are not executed several times.
.PP
Mojolicious::Plugin::Cron uses standard Fcntl functions for that coordination, to assure
a platform-independent behavior.
.PP
Please take a look in the examples section, for a simple Mojo Application that you can
run on hypnotoad, try hot restarts, adding / removing workers, etc, and
check that scheduled jobs execute without interruptions or duplications.
.SH "EXTENDEND SYNTAX HASH"
.IX Header "EXTENDEND SYNTAX HASH"
When using extended syntax, you can define more than one crontab line, and have access
to more options
.PP
.Vb 1
\&  plugin Cron => {key1 => {crontab line 1}, key2 => {crontab line 2}, ...};
.Ve
.SS "Keys"
.IX Subsection "Keys"
Keys are the names that identify each crontab line. They are used to form a locking 
semaphore file to avoid multiple processes starting the same job.
.PP
You can use the same name in different Mojolicious applications that will run
at the same time. This will ensure that not more that one instance of the cron job
will take place at a specific scheduled time.
.SS "Crontab lines"
.IX Subsection "Crontab lines"
Each crontab line consists of a hash with the following keys:
.IP "base => \s-1STRING\s0" 8
.IX Item "base => STRING"
Gives the time base used for scheduling. Either \f(CW\*(C`utc\*(C'\fR or \f(CW\*(C`local\*(C'\fR (default \f(CW\*(C`local\*(C'\fR).
.IP "crontab => \s-1STRING\s0" 8
.IX Item "crontab => STRING"
Gives the crontab schedule in 5 or 6 space-separated fields.
.IP "sec => \s-1STRING,\s0 min => \s-1STRING, ...\s0 mon => \s-1STRING\s0" 8
.IX Item "sec => STRING, min => STRING, ... mon => STRING"
Optional. Gives the schedule in a set of individual fields, if the \f(CW\*(C`crontab\*(C'\fR
field is not specified.
.Sp
For more information on base, crontab and other time related keys,
 please refer to Algorithm::Cron Constructor Attributes.
.IP "code => sub {...}" 8
.IX Item "code => sub {...}"
Mandatory. Is the code that will be executed whenever the crontab rule fires.
Note that this code *MUST* be non-blocking. For tasks that are naturally
blocking, the recommended solution would be to enqueue tasks in a job 
queue (like the Minion queue, that will play nicelly with any Mojo project).
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::Cron inherits all methods from
Mojolicious::Plugin and implements the following new ones.
.SS "register"
.IX Subsection "register"
.Vb 1
\&  $plugin\->register(Mojolicious\->new, {Cron => \*(Aq* * * * *\*(Aq => sub {}});
.Ve
.PP
Register plugin in Mojolicious application.
.SH "WINDOWS INSTALLATION"
.IX Header "WINDOWS INSTALLATION"
To install in windows environments, you need to force-install module
Test::Mock::Time, or installation tests will fail.
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel Mantovani, \f(CW\*(C`dmanto@cpan.org\*(C'\fR
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
Copyright 2018, Daniel Mantovani.
.PP
This library is free software; you may redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, Mojolicious::Plugins, Algorithm::Cron
