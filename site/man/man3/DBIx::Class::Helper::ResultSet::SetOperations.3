.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Helper::ResultSet::SetOperations 3"
.TH DBIx::Class::Helper::ResultSet::SetOperations 3 "2020-03-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Helper::ResultSet::SetOperations \- Do set operations with DBIx::Class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package MyApp::Schema::ResultSet::Foo;
\&
\& _\|_PACKAGE_\|_\->load_components(qw{Helper::ResultSet::SetOperations});
\&
\& ...
\&
\& 1;
.Ve
.PP
And then elsewhere, like in a controller:
.PP
.Vb 3
\& my $rs1 = $rs\->search({ foo => \*(Aqbar\*(Aq });
\& my $rs2 = $rs\->search({ baz => \*(Aqbiff\*(Aq });
\& for ($rs1\->union($rs2)\->all) { ... }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This component allows you to use various set operations with your ResultSets.
See \*(L"\s-1NOTE\*(R"\s0 in DBIx::Class::Helper::ResultSet for a nice way to apply it to your
entire schema.
.PP
Component throws exceptions if ResultSets have different ResultClasses or
different \*(L"Columns Specs.\*(R"
.PP
The basic idea here is that in \s-1SQL\s0 if you use a set operation they must be
selecting the same columns names, so that the results will all match.  The deal
with the ResultClasses is that \s-1DBIC\s0 needs to inflate the results the same for
the entire ResultSet, so if one were to try to apply something like a union in
a table with the same column name but different classes \s-1DBIC\s0 wouldn't be doing
what you would expect.
.PP
A nice way to use this is with DBIx::Class::ResultClass::HashRefInflator.
.PP
You might have something like the following sketch autocompletion code:
.PP
.Vb 7
\& my $rs1 = $schema\->resultset(\*(AqAlbum\*(Aq)\->search({
\&    name => { \-like => "$input%" }
\& }, {
\&   columns => [qw( id name ), {
\&      tablename => \e[\*(Aq?\*(Aq, [{} => \*(Aqalbum\*(Aq]],
\&   }],
\& });
\&
\& my $rs2 = $schema\->resultset(\*(AqArtist\*(Aq)\->search({
\&    name => { \-like => "$input%" }
\& }, {
\&   columns => [qw( id name ), {
\&      tablename => \e[\*(Aq?\*(Aq, [{} => \*(Aqartist\*(Aq]],
\&   }],
\& });
\&
\& my $rs3 = $schema\->resultset(\*(AqSong\*(Aq)\->search({
\&    name => { \-like => "$input%" }
\& }, {
\&   columns => [qw( id name ), {
\&      tablename => \e[\*(Aq?\*(Aq, [{} => \*(Aqsong\*(Aq]],
\&   }],
\& });
\&
\& $_\->result_class(\*(AqDBIx::Class::ResultClass::HashRefInflator\*(Aq)
\&   for ($rs1, $rs2, $rs3);
\&
\& my $data = [$rs1\->union([$rs2, $rs3])\->all];
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "union"
.IX Subsection "union"
.SS "union_all"
.IX Subsection "union_all"
.SS "intersect"
.IX Subsection "intersect"
.SS "intersect_all"
.IX Subsection "intersect_all"
.SS "except"
.IX Subsection "except"
.SS "except_all"
.IX Subsection "except_all"
All of these methods take a single ResultSet or an ArrayRef of ResultSets as
the parameter only parameter.
.PP
On Oracle \f(CW\*(C`except\*(C'\fR will issue a \f(CW\*(C`MINUS\*(C'\fR operation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Arthur Axel \*(L"fREW\*(R" Schmidt <frioux+cpan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Arthur Axel \*(L"fREW\*(R" Schmidt.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
