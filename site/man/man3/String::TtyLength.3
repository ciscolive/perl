.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "String::TtyLength 3"
.TH String::TtyLength 3 "2020-09-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
String::TtyLength \- length or width of string excluding ANSI tty codes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& use Text::Table::Tiny 0.02 qw/ tty_length tty_width /;
\& $length = tty_length("\ee[1mbold text\ee[0m");
\& print "length = $length\en";
\& # 9
\&
\& $width = tty_width("ðŸ˜„");
\& print "width = $width\en";
\& # 2
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides two functions which tell you the length
and width of a string as it will appear on a terminal (tty),
excluding any \s-1ANSI\s0 escape codes.
.PP
\&\f(CW\*(C`tty_length\*(C'\fR returns the length of a string excluding any \s-1ANSI\s0
tty / terminal escape codes.
.PP
\&\f(CW\*(C`tty_width\*(C'\fR returns the number of columns on a terminal that
the string will take up, also excluding any escape codes.
.PP
For non-wide characters,
the functions will return the same value.
But consider the following:
.PP
.Vb 3
\& my $emoji  = "ðŸ˜„";
\& my $length = tty_length($emoji);   # 1
\& my $width  = tty_width($emoji);    # 2
.Ve
.PP
If you're trying to align text in columns,
then you'll probably want \f(CW\*(C`tty_width\*(C'\fR;
if you just want to know the number of characters,
using \f(CW\*(C`tty_length\*(C'\fR.
.SS "tty_length( \s-1STRING\s0 )"
.IX Subsection "tty_length( STRING )"
Takes a single string,
and returns the length of the string,
excluding any escape sequences.
.PP
Note: the escape sequences could include cursor movement,
so the length returned by this function might not be the
number of characters that would be visible on screen.
But \f(CW\*(C`length_of_string_excluding_escape_sequences()\*(C'\fR
was just too long.
.SS "tty_width( \s-1STRING\s0 )"
.IX Subsection "tty_width( STRING )"
Takes a single string and returns the number of columns
that the string will take up on a terminal.
.PP
You may find that sometimes \f(CW\*(C`tty_width()\*(C'\fR returns the wrong number.
If you do, please submit a bug, or email me at the address below.
.PP
This was added in version 0.02 of \f(CW\*(C`String::TtyLength\*(C'\fR,
so you should require at least that version of this module,
as per the \s-1SYNOPSIS.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CW\*(C`colorstrip()\*(C'\fR in Term::ANSIColor
will remove \s-1ANSI\s0 color escape sequences from a string,
but not all \s-1ANSI\s0 escape sequences.
.SH "REPOSITORY"
.IX Header "REPOSITORY"
<https://github.com/neilb/String\-TtyLength>
.SH "AUTHOR"
.IX Header "AUTHOR"
Neil Bowers <neilb@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Neil Bowers.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
