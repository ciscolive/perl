.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Selenium::CanStartBinary 3"
.TH Selenium::CanStartBinary 3 "2020-10-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Selenium::CanStartBinary \- Teach a WebDriver how to start its own binary aka no JRE!
.SH "VERSION"
.IX Header "VERSION"
version 1.38
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This role takes care of the details for starting up a Webdriver
instance. It does not do any downloading or installation of any sort \-
you're still responsible for obtaining and installing the necessary
binaries into your \f(CW$PATH\fR for this role to find. You may be
interested in Selenium::Chrome, Selenium::Firefox, or
Selenium::PhantomJS if you're looking for classes that already
consume this role.
.PP
The role determines whether or not it should try to do its own magic
based on whether the consuming class is instantiated with a
\&\f(CW\*(C`remote_server_addr\*(C'\fR and/or \f(CW\*(C`port\*(C'\fR.
.PP
.Vb 2
\&    # We\*(Aqll start up the Chrome binary for you
\&    my $chrome_via_binary = Selenium::Chrome\->new;
\&
\&    # Look for a selenium server running on 4444.
\&    my $chrome_via_server = Selenium::Chrome\->new( port => 4444 );
.Ve
.PP
If they're missing, we assume the user wants to use a webdriver
directly and act accordingly. We handle finding the proper associated
binary (or you can specify it with \*(L"binary\*(R"), figuring out what
arguments it wants, setting up any necessary environments, and
starting up the binary.
.PP
There's a number of TODOs left over \- namely Windows support is
severely lacking, and we're pretty naive when we attempt to locate the
executables on our own.
.PP
In the following documentation, \f(CW\*(C`required\*(C'\fR refers to when you're
consuming the role, not the \f(CW\*(C`required\*(C'\fR when you're instantiating a
class that has already consumed the role.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "binary"
.IX Subsection "binary"
Required: Specify the path to the executable in question, or the name
of the executable for us to find via \*(L"which\*(R" in File::Which.
.SS "binary_port"
.IX Subsection "binary_port"
Required: Specify a default port that for the webdriver binary to try
to bind to. If that port is unavailable, we'll probe above that port
until we find a valid one.
.SS "_binary_args"
.IX Subsection "_binary_args"
Required: Specify the arguments that the particular binary needs in
order to start up correctly. In particular, you may need to tell the
binary about the proper port when we start it up, or that it should
use a particular prefix to match up with the behavior of the Remote
Driver server.
.PP
If your binary doesn't need any arguments, just have the default be an
empty string.
.SS "port"
.IX Subsection "port"
The role will attempt to determine the proper port for us. Consuming
roles should set a default port in \*(L"binary_port\*(R" at which we will
begin searching for an open port.
.PP
Note that if we cannot locate a suitable \*(L"binary\*(R", port will be set
to 4444 so we can attempt to look for a Selenium server at
\&\f(CW\*(C`127.0.0.1:4444\*(C'\fR.
.SS "fixed_ports"
.IX Subsection "fixed_ports"
Optional: By default, if binary_port and marionette_port are not free
a higher free port is probed and acquired if possible, until a free one
if found or a timeout is exceeded.
.PP
.Vb 2
\&    my $driver1 = Selenium::Chrome\->new;
\&    my $driver2 = Selenium::Chrome\->new( port => 1234 );
.Ve
.PP
The default behavior can be overridden. In this case, only the default
or given binary_port and marionette_port are probed, without probing
higher ports. This ensures that either the default or given port will be
assigned, or no port will be assigned at all.
.PP
.Vb 2
\&    my $driver1 = Selenium::Chrome\->new( fixed_ports => 1 );
\&    my $driver2 = Selenium::Chrome\->new( port => 1234, fixed_ports => 1);
.Ve
.SS "custom_args"
.IX Subsection "custom_args"
Optional: If you want to pass additional options to the binary when it
starts up, you can add that here. For example, if your binary accepts
an argument on the command line like \f(CW\*(C`\-\-log\-path=/path/to/log\*(C'\fR, and
you'd like to specify that the binary uses that option, you could do:
.PP
.Vb 3
\&    my $chrome = Selenium::Chrome\->new(
\&        custom_args => \*(Aq\-\-log\-path=/path/to/log\*(Aq
\&    );
.Ve
.PP
To specify multiple arguments, just include them all in the string.
.SS "startup_timeout"
.IX Subsection "startup_timeout"
Optional: you can modify how long we will wait for the binary to start
up. By default, we will start the binary and check the intended
destination port for 10 seconds before giving up. If the machine
you're using to run your browsers is slower or smaller, you may need
to increase this timeout.
.PP
The following:
.PP
.Vb 3
\&    my $f = Selenium::Firefox\->new(
\&        startup_timeout => 60
\&    );
.Ve
.PP
will wait up to 60 seconds for the firefox binary to respond on the
proper port. To use this constructor option, you should specify a time
in seconds as an integer, and it will be passed to the arguments
section of a \*(L"wait_until\*(R" in Selenium::Waiter subroutine call.
.SS "binary_mode"
.IX Subsection "binary_mode"
Mostly intended for internal use, its builder coordinates all the side
effects of interacting with the binary: locating the executable,
finding an open port, setting up the environment, shelling out to
start the binary, and ensuring that the webdriver is listening on the
correct port.
.PP
If all of the above steps pass, it will return truthy after
instantiation. If any of them fail, it should return falsy and the
class should attempt normal Selenium::Remote::Driver behavior.
.SS "window_title"
.IX Subsection "window_title"
Intended for internal use: this will build us a unique title for the
background binary process of the Webdriver. Then, when we're cleaning
up, we know what the window title is that we're going to \f(CW\*(C`taskkill\*(C'\fR.
.SS "command"
.IX Subsection "command"
Intended for internal use: this read-only attribute is built by us,
but it can be useful after instantiation to see exactly what command
was run to start the webdriver server.
.PP
.Vb 2
\&    my $f = Selenium::Firefox\->new;
\&    say $f\->_command;
.Ve
.SS "logfile"
.IX Subsection "logfile"
Normally we log what occurs in the driver to /dev/null (or /nul on windows).
Setting this will redirect it to the provided file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see those modules/websites for more information related to this module.
.IP "\(bu" 4
Selenium::Remote::Driver
.IP "\(bu" 4
Selenium::Chrome
.IP "\(bu" 4
Selenium::Firefox
.IP "\(bu" 4
Selenium::PhantomJS
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
<https://github.com/teodesian/Selenium\-Remote\-Driver/issues>
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH "AUTHORS"
.IX Header "AUTHORS"
Current Maintainers:
.IP "\(bu" 4
Daniel Gempesaw <gempesaw@gmail.com>
.IP "\(bu" 4
Emmanuel Peroumalna√Øk <peroumalnaik.emmanuel@gmail.com>
.PP
Previous maintainers:
.IP "\(bu" 4
Luke Closs <cpan@5thplane.com>
.IP "\(bu" 4
Mark Stosberg <mark@stosberg.com>
.PP
Original authors:
.IP "\(bu" 4
Aditya Ivaturi <ivaturi@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2010\-2011 Aditya Ivaturi, Gordon Child
.PP
Copyright (c) 2014\-2017 Daniel Gempesaw
.PP
Licensed under the Apache License, Version 2.0 (the \*(L"License\*(R");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
.PP
http://www.apache.org/licenses/LICENSE\-2.0
.PP
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \*(L"\s-1AS IS\*(R" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\s0 either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
