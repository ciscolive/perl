.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "System::Info::Base 3"
.TH System::Info::Base 3 "2019-01-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
System::Info::Base \- Baseclass for system information.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "cpu"
.IX Subsection "cpu"
.SS "cpu_type"
.IX Subsection "cpu_type"
.SS "ncpu"
.IX Subsection "ncpu"
.SS "os"
.IX Subsection "os"
.SS "host"
.IX Subsection "host"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "System::Info::Base\->\fBnew()\fP"
.IX Subsection "System::Info::Base->new()"
Return a new instance for $^O
.ie n .SS "$si\->prepare_sysinfo"
.el .SS "\f(CW$si\fP\->prepare_sysinfo"
.IX Subsection "$si->prepare_sysinfo"
This method should be overridden by platform specific subclasses.
.PP
The generic information is taken from \f(CW\*(C`POSIX::uname()\*(C'\fR.
.ie n .IP "$self\->_hostname  => (POSIX::uname)[1]" 4
.el .IP "\f(CW$self\fR\->_hostname  => (POSIX::uname)[1]" 4
.IX Item "$self->_hostname => (POSIX::uname)[1]"
.PD 0
.ie n .IP "$self\->_os        => join "" \- "" => (POSIX::uname)[0,2]" 4
.el .IP "\f(CW$self\fR\->_os        => join `` \- '' => (POSIX::uname)[0,2]" 4
.IX Item "$self->_os => join - => (POSIX::uname)[0,2]"
.ie n .IP "$self\->_osname    => (POSIX::uname)[0]" 4
.el .IP "\f(CW$self\fR\->_osname    => (POSIX::uname)[0]" 4
.IX Item "$self->_osname => (POSIX::uname)[0]"
.ie n .IP "$self\->_osvers    => (POSIX::uname)[2]" 4
.el .IP "\f(CW$self\fR\->_osvers    => (POSIX::uname)[2]" 4
.IX Item "$self->_osvers => (POSIX::uname)[2]"
.ie n .IP "$self\->_cpu_type  => (POSIX::uname)[4]" 4
.el .IP "\f(CW$self\fR\->_cpu_type  => (POSIX::uname)[4]" 4
.IX Item "$self->_cpu_type => (POSIX::uname)[4]"
.ie n .IP "$self\->_cpu       => (POSIX::uname)[4]" 4
.el .IP "\f(CW$self\fR\->_cpu       => (POSIX::uname)[4]" 4
.IX Item "$self->_cpu => (POSIX::uname)[4]"
.ie n .IP "$self\->_cpu_count => """"" 4
.el .IP "\f(CW$self\fR\->_cpu_count => ``''" 4
.IX Item "$self->_cpu_count => """""
.PD
.ie n .SS "$si\->get_os"
.el .SS "\f(CW$si\fP\->get_os"
.IX Subsection "$si->get_os"
Returns \f(CW$self\fR\->_os
.ie n .SS "$si\->get_hostname"
.el .SS "\f(CW$si\fP\->get_hostname"
.IX Subsection "$si->get_hostname"
Returns \f(CW$self\fR\->_hostname
.ie n .SS "$si\->get_cpu_type"
.el .SS "\f(CW$si\fP\->get_cpu_type"
.IX Subsection "$si->get_cpu_type"
Returns \f(CW$self\fR\->_cpu_type
.ie n .SS "$si\->get_cpu"
.el .SS "\f(CW$si\fP\->get_cpu"
.IX Subsection "$si->get_cpu"
Returns \f(CW$self\fR\->_cpu
.ie n .SS "$si\->get_cpu_count"
.el .SS "\f(CW$si\fP\->get_cpu_count"
.IX Subsection "$si->get_cpu_count"
Returns \f(CW$self\fR\->_cpu_count
.ie n .SS "$si\->get_core_count"
.el .SS "\f(CW$si\fP\->get_core_count"
.IX Subsection "$si->get_core_count"
Returns \f(CW$self\fR\->get_cpu_count as a number
.PP
If \f(CW\*(C`get_cpu_count\*(C'\fR returns \f(CW\*(C`2 [8 cores]\*(C'\fR, \f(CW\*(C`get_core_count\*(C'\fR returns \f(CW8\fR
.ie n .SS "$si\->get_dist_name"
.el .SS "\f(CW$si\fP\->get_dist_name"
.IX Subsection "$si->get_dist_name"
Returns the name of the distribution.
.SS "si_uname (@args)"
.IX Subsection "si_uname (@args)"
This class gathers most of the \f(CWuname(1)\fR info, make a comparable
version. Takes almost the same arguments:
.PP
.Vb 6
\&    a for all (can be omitted)
\&    n for nodename
\&    s for os name and version
\&    m for cpu name
\&    c for cpu count
\&    p for cpu_type
.Ve
.ie n .SS "$si\->old_dump"
.el .SS "\f(CW$si\fP\->old_dump"
.IX Subsection "$si->old_dump"
Just a backward compatible way to dump the object (for test suite).
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
(c) 2016\-2019, Abe Timmerman & H.Merijn Brand, All rights reserved.
.PP
With contributions from Jarkko Hietaniemi, Campo Weijerman, Alan Burlison,
Allen Smith, Alain Barbet, Dominic Dunlop, Rich Rauenzahn, David Cantrell.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
See:
.IP "\(bu" 4
<http://www.perl.com/perl/misc/Artistic.html>
.IP "\(bu" 4
<http://www.gnu.org/copyleft/gpl.html>
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
