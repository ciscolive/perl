.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Workflow::Persister 3"
.TH Workflow::Persister 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Workflow::Persister \- Base class for workflow persistence
.SH "VERSION"
.IX Header "VERSION"
This documentation describes version 1.09 of this package
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& # Associate a workflow with a persister
\& <workflow type="Ticket"
\&           persister="MainDatabase">
\& ...
\&
\& # Declare a persister
\& <persister name="MainDatabase"
\&            class="Workflow::Persister::DBI"
\&            driver="MySQL"
\&            dsn="DBI:mysql:database=workflows"
\&            user="wf"
\&            password="mypass"/>
\&
\& # Declare a separate persister
\& <persister name="FileSystem"
\&            class="Workflow::Persister::File"
\&            path="/path/to/my/workflow"/>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base class for persisting workflows. It does not implement
anything itself but actual implementations should subclass it to
ensure they fulfill the contract.
.PP
The job of a persister is to create, update and fetch the workflow
object plus any data associated with the workflow. It also creates and
fetches workflow history records.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
.SS "Methods"
.IX Subsection "Methods"
\fIcreate_workflow( \f(CI$workflow\fI )\fR
.IX Subsection "create_workflow( $workflow )"
.PP
Stub that warns that the method should be overwritten in the derived
Persister. Since this is a \s-1SUPER\s0 class.
.PP
Generate an \s-1ID\s0 for the workflow, serialize the workflow data (\s-1ID\s0 and
state) and set the \s-1ID\s0 in the workflow.
.PP
\fIupdate_workflow( \f(CI$workflow\fI )\fR
.IX Subsection "update_workflow( $workflow )"
.PP
Stub that warns that the method should be overwritten in the derived
Persister. Since this is a \s-1SUPER\s0 class.
.PP
Update the workflow state.
.PP
\fIfetch_workflow( \f(CI$workflow_id\fI )\fR
.IX Subsection "fetch_workflow( $workflow_id )"
.PP
Stub that warns that the method should be overwritten in the derived
Persister. Since this is a \s-1SUPER\s0 class.
.PP
Retrieve the workflow data corresponding to \f(CW$workflow_id\fR. It not
found return undef, if found return a hashref with the data.
.PP
\fIcreate_history( \f(CI$workflow\fI, \f(CI@history\fI )\fR
.IX Subsection "create_history( $workflow, @history )"
.PP
Stub that warns that the method should be overwritten in the derived
Persister. Since this is a \s-1SUPER\s0 class.
.PP
Serialize all objects in \f(CW@history\fR for later retrieval.
.PP
\fIfetch_history( \f(CI$workflow\fI )\fR
.IX Subsection "fetch_history( $workflow )"
.PP
Stub that warns that the method should be overwritten in the derived
Persister. Since this is a \s-1SUPER\s0 class.
.PP
The derived class method should return a list of Workflow::History objects.
.PP
\fIget_create_user( \f(CI$workflow\fI )\fR
.IX Subsection "get_create_user( $workflow )"
.PP
When creating an initial Workflow::History record to insert into the database,
the return value of this method is used for the value of the \*(L"user\*(R" field.
.PP
Override this method to change the value from the default, \*(L"n/a\*(R".
.PP
\fIget_create_description( \f(CI$workflow\fI )\fR
.IX Subsection "get_create_description( $workflow )"
.PP
When creating an initial Workflow::History record to insert into the database,
the return value of this method is used for the value of the \*(L"description\*(R" field.
.PP
Override this method to change the value from the default, \*(L"Create new workflow\*(R".
.PP
\fIget_create_action( \f(CI$workflow\fI )\fR
.IX Subsection "get_create_action( $workflow )"
.PP
When creating an initial Workflow::History record to insert into the database,
the return value of this method is used for the value of the \*(L"action\*(R" field.
.PP
Override this method to change the value from the default, \*(L"Create workflow\*(R".
.PP
\fIassign_generators( \e%params )\fR
.IX Subsection "assign_generators( %params )"
.PP
Assigns proper generators based on intialization, see \*(L"init\*(R"
.PP
\fIfetch_extra_workflow_data ( \f(CI$workflow\fI )\fR
.IX Subsection "fetch_extra_workflow_data ( $workflow )"
.PP
A stub that warns that the method should be overwritten in the derived
Persister. Since this is a \s-1SUPER\s0 class.
.PP
\fIcommit_transaction\fR
.IX Subsection "commit_transaction"
.PP
Commit the current transaction if the persister supports transactions.
This stub does not have to be overridden. It is not executed if
autocommit is on.
.PP
\fIrollback_transaction\fR
.IX Subsection "rollback_transaction"
.PP
Roll back the current transaction if the persister supports transactions.
This stub does not have to be overridden. It is not executed if
autocommit is on.
.PP
\fIinit\fR
.IX Subsection "init"
.PP
Method to initialize persister based on configuration.
.PP
\fIinit_random_generators( \e%params )\fR
.IX Subsection "init_random_generators( %params )"
.PP
Initializes random id generators, takes the following named parameters:
.IP "\(bu" 4
length, of random id to be generated
.PP
Returns two identical random id generator objects in list context.
.PP
\fIinit_uuid_generators( \e%params )\fR
.IX Subsection "init_uuid_generators( %params )"
.PP
Initializes \s-1UUID\s0 generators, takes no parameters
.PP
Returns two identical \s-1UUID\s0 generator objects in list context.
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
refactor init_random_generators, returns two similar objects?
.IP "\(bu" 4
refactor init_uuid_generators, returns two similar objects?
.IP "\(bu" 4
refactor init_uuid_generators, takes no parameters, even though
we shift parameters in?
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Workflow::Factory
.PP
Workflow::History
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2007 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonas B. Nielsen (jonasbn) <jonasbn@cpan.org> is the current maintainer.
.PP
Chris Winters <chris@cwinters.com>, original author.
