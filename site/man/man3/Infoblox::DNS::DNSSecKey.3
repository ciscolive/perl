.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::DNSSecKey 3"
.TH Infoblox::DNS::DNSSecKey 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::DNSSecKey \- DNSSEC key object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1DNSSEC\s0 object contains information about keys available in authoritative zones.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The object does not support any session methods.
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of the object.
.SS "algorithm( )"
.IX Subsection "algorithm( )"
.RS 4
Use this method to retrieve the public-key encryption algorithm. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The return value is the public-key encryption algorithm in string format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get algorithm value
\& my $value = $dnssec_key\->algorithm();
.Ve
.RE
.RS 4
.RE
.SS "next_event_date( )"
.IX Subsection "next_event_date( )"
.RS 4
Use this method to retrieve the next event date. The event date can be a date for the rollover of an \s-1ACTIVE\s0 key or a \s-1PUBLISHED\s0 key, or the removal of a \s-1ROLLED\s0 key. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The date of next event in \s-1ISO 8601\s0 extended format (e.g., 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z).
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get next_event_date value
\& my $value = $dnssec_key\->next_event_date();
.Ve
.RE
.RS 4
.RE
.SS "public_key( )"
.IX Subsection "public_key( )"
.RS 4
Use this method to retrieve the Base\-64 encoding of the public key. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The return value is a Base\-64 encoded public key in string format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get public_key value
\& my $value = $dnssec_key\->public_key();
.Ve
.RE
.RS 4
.RE
.SS "status( )"
.IX Subsection "status( )"
.RS 4
Use this method to retrieve key status for the authoritative zone. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return values are \*(L"\s-1ACTIVE\*(R", \*(L"PUBLISHED\*(R"\s0 and \*(L"\s-1ROLLED\*(R".\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get status value
\& my $value = $dnssec_key\->status();
.Ve
.RE
.RS 4
.RE
.SS "tag( )"
.IX Subsection "tag( )"
.RS 4
Use this method to retrieve the key tag for the authoritative zone. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The return value is an integer between 0 and 65535.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get tag value
\& my $value = $dnssec_key\->tag();
.Ve
.RE
.RS 4
.RE
.SS "type( )"
.IX Subsection "type( )"
.RS 4
Use this method to retrieve the type of key. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return values are \*(L"\s-1KSK\*(R"\s0 and \*(L"\s-1ZSK\*(R".\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get type value
\& my $value = $dnssec_key\->type();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1ISO 8601\s0 extended format
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
