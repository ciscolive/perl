.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::JSON_XS 3"
.TH Mojo::JSON_XS 3 "2020-02-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::JSON_XS \- Faster JSON processing for Mojolicious
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Mojo::JSON_XS;  # Must be earlier than Mojo::JSON
\&  use Mojo::JSON qw(to_json from_json ...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Using Mojo::JSON_XS overrides Mojo::JSON, so your \s-1JSON\s0 processing will be done
by compiled C code rather than pure perl.  Cpanel::JSON::XS is a hard
dependency, so is required both at installation time and run time.
.SS "\s-1DEPRECATED\s0"
.IX Subsection "DEPRECATED"
This code was merged into Mojolicious v7.87, so it only makes sense to continue
using this module if you are constrained to a Mojolicious earlier than that.
.SH "USAGE"
.IX Header "USAGE"
You absolutely must \f(CW\*(C`use Mojo::JSON_XS\*(C'\fR before anything uses \f(CW\*(C`Mojo::JSON\*(C'\fR.
.PP
I suggest that in your top-level file (\f(CW\*(C`myapp.pl\*(C'\fR for a lite app and
\&\f(CW\*(C`script/my_app\*(C'\fR for a full app) you use this module very early in the file
(even if you do not mention any other \s-1JSON\s0 in that file).
.SH "CAVEATS"
.IX Header "CAVEATS"
The underlying module Cpanel::JSON::XS generates slightly different results
(since it is maintaining compatibility with \s-1JSON::XS\s0) from the results you would
get from Mojo::JSON.  Be sure to check each of the differences noted below and
consider the impact on your application.  Clearly it is no use generating the
wrong output quickly when you could have the correct output (less quickly).
.PP
The examples below show \f(CW\*(C`to_json\*(C'\fR because it is slightly shorter, but usually
it is \f(CW\*(C`encode_json\*(C'\fR that you will want.  Remember too that \f(CW\*(C`j\*(C'\fR is available
(\*(L"\s-1FUNCTIONS\*(R"\s0 in Mojo::JSON) particularly for commandline testing.
.SS "Slashes"
.IX Subsection "Slashes"
Mojo::JSON escapes slashes when encoding (to mitigate script-injection attacks).
.PP
.Vb 2
\&  perl \-MMojo::JSON=to_json \-E\*(Aqsay to_json(q{/})\*(Aq
\&  # produces "\e/"
\&
\&  perl \-MMojo::JSON_XS \-MMojo::JSON=to_json \-E\*(Aqsay to_json(q{/})\*(Aq
\&  # produces "/"
.Ve
.PP
and similar for \f(CW\*(C`encode_json\*(C'\fR.
.SS "Unicode"
.IX Subsection "Unicode"
Mojo::JSON uses uppercase for hex values when encoding
.PP
.Vb 2
\&  perl \-MMojo::JSON=to_json \-E\*(Aqsay to_json(qq{\ex1f})\*(Aq
\&  # produces "\eu001F"
\&
\&  perl \-MMojo::JSON_XS \-MMojo::JSON=to_json \-E\*(Aqsay to_json(qq{\ex1f})\*(Aq
\&  # produces "\eu001f"
.Ve
.PP
and similar for \f(CW\*(C`encode_json\*(C'\fR.  Cf <http://tools.ietf.org/html/rfc7159>.
.PP
Mojo::JSON makes special cases for security, so u2028 and u2029 are rendered in
their codepoint form.
.PP
.Vb 2
\&  perl \-MMojo::JSON=to_json \-E\*(Aqsay to_json(qq{\ex{2028}})\*(Aq
\&  # produces "\eu2028"
\&
\&  perl \-MMojo::JSON_XS \-MMojo::JSON=to_json \-E\*(Aqsay to_json(qq{\ex{2028}})\*(Aq
\&  # produces the unicode character
.Ve
.SS "References"
.IX Subsection "References"
Mojo::JSON can encode references (as Boolean).
.PP
.Vb 2
\&  perl \-MMojo::JSON=to_json \-E\*(Aq$a = q{string}; say to_json(\e$a)\*(Aq
\&  # produces "true"
\&
\&  perl \-MMojo::JSON_XS \-MMojo::JSON=to_json \-E\*(Aq$a = q{string}; say to_json(\e$a)\*(Aq
\&  # produces error
\&  # "cannot encode reference to scalar unless the scalar is 0 or 1"
.Ve
.SS "Numbers"
.IX Subsection "Numbers"
Mojo::JSON detects numbers much better.
.PP
.Vb 2
\&  perl \-MMojo::JSON=to_json \-E\*(Aq$a = 2; say to_json(["$a", $a])\*(Aq
\&  # produces "["2",2]"
\&
\&  perl \-MMojo::JSON_XS \-MMojo::JSON=to_json \-E\*(Aq$a = 2; say to_json(["$a", $a])\*(Aq
\&  # produces "["2","2"]"
.Ve
.PP
Mojo::JSON encodes inf and nan as strings.
.PP
.Vb 2
\&  perl \-MMojo::JSON=to_json \-E\*(Aqsay to_json(9**9**9)\*(Aq
\&  # produces "inf"
\&
\&  perl \-MMojo::JSON_XS \-MMojo::JSON=to_json \-E\*(Aqsay to_json(9**9**9)\*(Aq
\&  # produces inf
.Ve
.SS "Error Messages"
.IX Subsection "Error Messages"
The handling and format of error messages is different between the two modules,
as you would expect.
.SH "SUPPORT"
.IX Header "SUPPORT"
Although the code is gifted by Sebastian Riedel, this is not part of the
Mojolicious distribution.  Saying that, it is likely you can find someone on the
\&\s-1IRC\s0 channel happy to discuss this module.  Any bugs or issues should be logged
in the specific Github account.
.SS "\s-1IRC\s0"
.IX Subsection "IRC"
\&\f(CW\*(C`#mojo\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR
.SS "Github Issue Tracker"
.IX Subsection "Github Issue Tracker"
<https://github.com/niczero/mojo\-jsonxs/issues>
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
Copyright (C) 2014\-\-17, Sebastian Riedel, Nic Sandfield.
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojo::JSON, Cpanel::JSON::XS.
