.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "JUNOS::Device 3"
.TH JUNOS::Device 3 "2003-03-02" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JUNOS::Device \- Implements a remote JUNOScript device
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Here is example that makes a telnet connection to router11, then updates the router11's
configuration with the configuration from \f(CW$xmlfile\fR.  It also deals with
error conditions and gracefully shuts down the telnet session.
.PP
.Vb 1
\&    use JUNOS::Device;
\&
\&    sub graceful_shutdown
\&    {
\&        my ($jnx, $req, $state, $success) = @_;
\&    
\&        if ($state >= STATE_CONFIG_LOADED) {
\&            print "Rolling back configuration ...\en";
\&            $jnx\->load_configuration(rollback => 0);
\&        }
\&
\&        if ($state >= STATE_LOCKED) {
\&            print "Unlocking configuration database ...\en";
\&            $jnx\->unlock_configuration();
\&        }
\& 
\&        if ($state >= STATE_CONNECTED) {
\&            print "Disconnecting from the router ...\en";
\&            $jnx\->request_end_session();
\&            $jnx\->disconnect();
\&        }
\&
\&        if ($success) {
\&            die "REQUEST $req SUCCEEDED\en";
\&        } else {
\&            die "REQUEST $req FAILED\en";
\&        }
\&    }
\&
\&    $jnx = new JUNOS::Device(hostname => "router11",
\&                             login => "johndoe",
\&                             password => "secret",
\&                             access => "telnet");
\&
\&    unless ( ref $jnx ) {
\&        die "ERROR: can\*(Aqt connect to $deviceinfo{hostname}.\en";
\&    }
\&
\&    print "Locking configuration database ...\en";
\&
\&    my $res = $jnx\->lock_configuration();
\&
\&    my $err = $res\->getFirstError();
\&
\&    if ($err) {
\&        print "ERROR: $deviceinfo{hostname}: can\*(Aqt lock configuration.  Reason: $err\->{message}.\en";
\&        graceful_shutdown($jnx, $xmlfile, STATE_CONNECTED, REPORT_FAILURE);
\&    }
\&
\&    #
\&    # Load the configuration
\&    #
\&    print "Loading configuration from $xmlfile ...\en";
\&    if (! \-f $xmlfile) {
\&        print "ERROR: Cannot load configuration in $xmlfile\en";
\&        graceful_shutdown($jnx, $xmlfile, STATE_LOCKED, REPORT_FAILURE);
\&    }
\&
\&    my $parser = new XML::DOM::Parser;
\&    my $doc = $parser\->parsefile($xmlfile);
\&    unless ( ref $doc ) {
\&        print "ERROR: Cannot parse $xmlfile, check to make sure the XML data is well\-formed\en";
\&        graceful_shutdown($jnx, $xmlfile, STATE_LOCKED, REPORT_FAILURE);
\&    }
\&    $res = $jnx\->load_configuration(configuration => $doc);
\&    unless ( ref $res ) {
\&        print "ERROR: can\*(Aqt load the configuration from $xmlfile\en";
\&        graceful_shutdown($jnx, $xmlfile, STATE_LOCKED, REPORT_FAILURE);
\&    }
\&    $err = $res\->getFirstError();
\&    if ($err) {
\&        print "ERROR: can\*(Aqt load the configuration from $xmlfile.  Reason: $err\->{message}\en";
\&        graceful_shutdown($jnx, $xmlfile, STATE_CONFIG_LOADED, REPORT_FAILURE);
\&    }
.Ve
.PP
Here is another example.  It retrieves 'show chassis hardware' information and transforms the input with \s-1XSLT.\s0
.PP
.Vb 8
\&    # connect TO the JUNOScript server
\&    $jnx = new JUNOS::Device(hostname => "router11",
\&                             login => "johndoe",
\&                             password => "secret",
\&                             access => "telnet");
\&    unless ( ref $jnx ) {
\&        die "ERROR: $deviceinfo{hostname}: can\*(Aqt connect.\en";
\&    }
\&
\&    # send the command and receive a XML::DOM object
\&    my $res = $jnx\->get_chassis_inventory(detail => 1);
\&    unless ( ref $res ) { 
\&        die "ERROR: $deviceinfo{hostname}: can\*(Aqt execute command $query.\en";   
\&    }
\&
\&    # Check and see if there were any errors in executing the command.
\&    # If all is well, output the response using XSLT.
\&    my $err = $res\->getFirstError();
\&    if ($err) {
\&        print STDERR "ERROR: $deviceinfo{\*(Aqhostname\*(Aq} \- ", $err\->{message}, "\en";
\&    } else {
\&        # 
\&        # Now do the transformation using XSLT.
\&        #
\&        my $xmlfile = "$deviceinfo{hostname}.xml";
\&        $res\->printToFile($xmlfile);
\&        my $nm = $res\->translateXSLtoRelease(\*(Aqxmlns:lc\*(Aq, $xslfile, "$xslfile.tmp");
\&        if ($nm) {
\&            my $command = "xsltproc $nm $deviceinfo{hostname}.xml";
\&            system($command);
\&        } else {
\&            print STDERR "ERROR: Invalid XSL File $xslfile\en";
\&        }
\&    }
\&    
\&    # always close the connection
\&    $jnx\->request_end_session();
\&    $jnx\->disconnect();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements an object oriented interface to the JUNOScript (tm)
XML-based \s-1API\s0 supported by Juniper Networks. Objects of this class represent
the local side of connection to a Juniper Networks device running \s-1JUNOS,\s0
over which the JUNOScript protocol will be spoken. JUNOScript is
described in detail in the JUNOScript \s-1API\s0 Guide and Reference.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
new(%ARGS)
.PP
The constructor accepts a hash table \f(CW%ARGS\fR containing the following keys:
.PP
.Vb 2
\&    hostname
\&        Name of Juniper box to connect to.
\&
\&    login
\&        Username to log into box as.
\&
\&    password
\&        Password for login username.
\&
\&    access
\&        Access method \- can be \*(Aqtelnet\*(Aq or \*(Aqssh\*(Aq or \*(Aqssl\*(Aq.
\&
\&    Do_Not_Connect
\&        if set to true a connection to a Juniper box
\&        will not be establish upon object creation.  You then
\&        must call the \*(Aqconnect\*(Aq function to explicitly create the
\&        connection
\&
\&    namespace\-action
\&        if you don\*(Aqt want to deal with namespace, just set this
\&        to either \*(Aqremove\-namespace\*(Aq or \*(Aqupdate\-namespace\*(Aq. This is 
\&        handy when you don\*(Aqt want to care about declaring the XML namespace
\&        in your XSL file(s).  \*(Aqremove\-namespace\*(Aq means removing all 
\&        namespace declarations and schemaLocation from the the responses.  
\&        \*(Aqupdate\-namespace\*(Aq means remove all namespaces and replace 
\&        schemaLocation with noNamespaceSchemaLocation.
.Ve
.PP
Additional keys specific to the access method are processed by the access method object (e.g. JUNOS::Access::telnet).  See the perldoc of the access method class for the definition of these additional keys.
.SH "METHODS"
.IX Header "METHODS"
command($COMMAND)
.PP
Send the raw command string from \f(CW$COMMAND\fR to the remote Juniper box.
This is a 'mostly unsupported' way of getting to any \s-1JUNOS\s0
command that is currently unsupported in JUNOScript.
Caveat Coder.
.PP
\&\fBconnect()\fR
.PP
typically called by the constructor.  If you set
\&'Do_Not_Connect' to be true you must call this function
yourself.
.PP
\&\fBdisconnect()\fR
.PP
Disconnects from a JUNOScript server & performs
other clean-up related to this conneciton.  This function
will also be called if your JUNOS::Device object goes out
of scope or is undef'ed.
.PP
\&\fBgetErrors()\fR
\&\fBgetFirstError()\fR
.PP
\&\fBgetErrors()\fR and \fBgetFirstError()\fR are available for the application to 
retrieve all of the errors occured within the last JUNOS::Device method 
invocation.  The application may wish to print these error messages in 
log file or display on a different error window.  \fBgetErrors()\fR returns
a reference to all the errors and \fBgetFirstError()\fR returns the earliest
error that triggered the failure.  These methods can be called after
a JUNOS::Device method has failed.
.PP
Note: These errors normally go to the standard output unless
the Always category is in JUNOS::Trace is disabled.  Unless you want
the errors to go someplace other than the standard output, 
you don't need to call these methods.
.PP
An example of using getFirstError:
.PP
unless($jnx\->\fBconnect()\fR) {
    my \f(CW$error\fR = \f(CW$jnx\fR\->\fBgetFirstError()\fR;
    print \s-1ERRORLOG\s0 (\*(L"\s-1ERROR:\s0 \f(CW$error\fR\en\*(R");
}
.PP
An example of using getErrors:
.PP
unless($jnx\->\fBconnect()\fR) {
    my \f(CW@errors\fR = @{$jnx\->\fBgetErrors()\fR};
    for my \f(CW$error\fR (@errors) {
        print \s-1ERRORLOG\s0 (\*(L"\s-1ERROR:\s0 \f(CW$error\fR\en\*(R");
    }
}
.PP
request($REQUEST)
.PP
You should call <JUNOScript command> functions \- which
eventually utilize this function \- you should not call this
directly!
.PP
Sends a request in \f(CW$REQUEST\fR to a Juniper box and returns the result.
In a scalar context a JUNOS::Response object is returned.
In an array context an array consisting of the 
XML::DOM::Document object and the raw JUNOS::Response 
object containing the enclosing <rpc\-reply> tags.
The parameter is the name of the JUNOScript function to be
called on the remote Juniper box.
.PP
<JUNOScript command>
.PP
You may call any JUNOScript command via the JUNOS::Device
Handle.  See 'request' function for return values.
.PP
These methods are available when connecting to a \s-1JUNOS 5.1\s0 router.
they can take two types of arguments or zero arguments:
.PP
1. 'toggle' \- argument is present or not.
    For example the 'extensive' argument to the 'get_interface_information' 
    method: 
        get_interface_information(extensive => 1);
.PP
2. 'string' \- a string argument
    For example the 'slot' argument to the 'get_pic_information' method: 
        get_pic_information(slot => \*(L"2\*(R");
.PP
.Vb 2
\&    method is followed by a list of accepted arguments and their types
\&    if it has any.
\&
\&    get_accounting_profile_information
\&        profile => STRING
\&
\&    get_accounting_record_information
\&        profile => STRING
\&        since => STRING
\&        utc_timestamp => TOGGLE
\&
\&    get_chassis_inventory
\&        detail => TOGGLE
\&        extensive => TOGGLE
\&
\&    get_environment_information
\&
\&    get_feb_information
\&
\&    get_firmware_information
\&
\&    get_fpc_information
\&
\&    get_interface_information
\&        brief => TOGGLE
\&        destination_class => STRING
\&        detail => TOGGLE
\&        extensive => TOGGLE
\&        interface_name => STRING
\&        media => TOGGLE
\&        queue => TOGGLE
\&        snmp_index => STRING
\&        statistics => TOGGLE
\&        terse => TOGGLE
\&
\&    get_pic_information
\&        slot => STRING
\&
\&    get_route_engine_information
\&        slot => STRING
\&
\&    get_scb_information
\&
\&    get_sfm_information
\&
\&    get_snmp_information
\&
\&    get_ssb_information
\&        slot => STRING
\&
\&    request_halt
\&        at => STRING
\&        in => STRING
\&        media => STRING
\&        message => STRING
\&
\&    request_reboot
\&        at => STRING
\&        in => STRING
\&        media => STRING
\&        message => STRING
\&
\&    get_bgp_group_information
\&        group_name => STRING
\&
\&    get_bgp_neighbor_information
\&        neighbor_address => STRING
\&
\&    get_bgp_summary_information
\&
\&    get_instance_information
\&        name => STRING
\&
\&    get_instance_summary_information
\&
\&    get_isis_adjacency_information
\&        brief => STRING
\&        detail => STRING
\&        instance => STRING
\&        system_id => STRING
\&
\&    get_isis_database_information
\&        brief => STRING
\&        detail => STRING
\&        extensive => STRING
\&        instance => STRING
\&        system_id => STRING
\&
\&    get_isis_interface_information
\&        brief => STRING
\&        detail => STRING
\&        instance => STRING
\&        interface_name => STRING
\&
\&    get_isis_route_information
\&        instance => STRING
\&
\&    get_isis_spf_information
\&
\&    get_isis_statistics_information
\&        instance => STRING
\&
\&    get_l2vpn_connection_information
\&        brief => STRING
\&        down => STRING
\&        extensive => STRING
\&        history => STRING
\&        instance => STRING
\&        local_site => STRING
\&        remote_site => STRING
\&        status => STRING
\&        up => STRING
\&        up_down => STRING
\&
\&    get_mpls_admin_group_information
\&
\&    get_mpls_cspf_information
\&
\&    get_mpls_interface_information
\&
\&    get_mpls_lsp_information
\&        brief => STRING
\&        detail => STRING
\&        down => STRING
\&        egress => STRING
\&        extensive => STRING
\&        ingress => STRING
\&        name => STRING
\&        statistics => STRING
\&        terse => STRING
\&        transit => STRING
\&        up => STRING
\&
\&    get_mpls_path_information
\&        path => STRING
\&
\&    get_ospf_database_information
\&        advertising_router => STRING
\&        area => STRING
\&        asbrsummary => STRING
\&        brief => STRING
\&        detail => STRING
\&        extensive => STRING
\&        extern => STRING
\&        instance => STRING
\&        lsa_id => STRING
\&        netsummary => STRING
\&        network => STRING
\&        nssa => STRING
\&        router => STRING
\&        summary => STRING
\&
\&    get_ospf_interface_information
\&        brief => STRING
\&        detail => STRING
\&        extensive => STRING
\&        instance => STRING
\&        interface_name => STRING
\&
\&    get_ospf_io_statistics_information
\&
\&    get_ospf_log_information
\&        instance => STRING
\&
\&    get_ospf_neighbor_information
\&        brief => STRING
\&        detail => STRING
\&        extensive => STRING
\&        instance => STRING
\&        neighbor => STRING
\&
\&    get_ospf_route_information
\&        abr => STRING
\&        asbr => STRING
\&        detail => STRING
\&        extern => STRING
\&        instance => STRING
\&        inter => STRING
\&        intra => STRING
\&
\&    get_ospf_statistics_information
\&        instance => STRING
\&
\&    get_rsvp_interface_information
\&        brief => STRING
\&        detail => STRING
\&
\&    get_rsvp_neighbor_information
\&
\&    get_rsvp_session_information
\&        brief => STRING
\&        detail => STRING
\&        down => STRING
\&        egress => STRING
\&        ingress => STRING
\&        interface => STRING
\&        lsp => STRING
\&        name => STRING
\&        nolsp => STRING
\&        terse => STRING
\&        transit => STRING
\&        up => STRING
\&
\&    get_rsvp_statistics_information
\&
\&    get_rsvp_version_information
\&
\&    get_ted_database_information
\&        brief => STRING
\&        detail => STRING
\&        extensive => STRING
\&        system_id => STRING
\&
\&    get_ted_link_information
\&        brief => STRING
\&        detail => STRING
\&
\&    get_ted_protocol_information
\&        brief => STRING
\&        detail => STRING
\&
\&    request_end_session
\&
\&    request_package_add
\&        delay_restart => TOGGLE
\&        force => TOGGLE
\&        no_copy => TOGGLE
\&        package_name => STRING
\&        reboot => TOGGLE
\&
\&    request_package_delete
\&        force => TOGGLE
\&        package_name => STRING
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 5
\&    JUNOS::Response
\&    XML::DOM
\&    JUNOS::Trace
\&    JUNOScript API Guide (available at www.juniper.net)
\&    JUNOScript API Reference (available at www.juniper.net)
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Juniper Junoscript Perl Team, send bug reports, hints, tips,
and suggestions to support@juniper.net.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2002 Juniper Networks, Inc.
All rights reserved.
