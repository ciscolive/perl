.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Log::Handler::Output::Socket 3"
.TH Log::Handler::Output::Socket 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Handler::Output::Socket \- Send messages to a socket.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Log::Handler::Output::Socket;
\&
\&    my $sock = Log::Handler::Output::Socket\->new(
\&        peeraddr    => "127.0.0.1",
\&        peerport    => 44444,
\&        proto       => "tcp",
\&        timeout     => 10
\&    );
\&
\&    $sock\->log(message => $message);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
With this module it's possible to send messages over the network.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBnew()\fP"
.IX Subsection "new()"
Call \f(CW\*(C`new()\*(C'\fR to create a new Log::Handler::Output::Socket object.
.PP
The following options are possible:
.IP "\fBpeeraddr\fR" 4
.IX Item "peeraddr"
The address of the server.
.IP "\fBpeerport\fR" 4
.IX Item "peerport"
The port to connect to.
.IP "\fBproto\fR" 4
.IX Item "proto"
The protocol you wish to use. Default is \s-1TCP.\s0
.IP "\fBtimeout\fR" 4
.IX Item "timeout"
The timeout to send message. The default is 5 seconds.
.IP "\fBpersistent\fR and \fBreconnect\fR" 4
.IX Item "persistent and reconnect"
With this option you can enable or disable a persistent connection and
re-connect if the connection was lost.
.Sp
Both options are set to 1 on default.
.IP "\fBdump\fR" 4
.IX Item "dump"
Do you like to dump the message? If you enable this option then all
messages will be dumped with \f(CW\*(C`Data::Dumper\*(C'\fR.
.IP "\fBdumper\fR" 4
.IX Item "dumper"
Do you want to use another dumper as \f(CW\*(C`Data::Dumper\*(C'\fR? You can do the
following as example:
.Sp
.Vb 1
\&    use Convert::Bencode_XS;
\&
\&        dumper => sub { Convert::Bencode_XS::bencode($_[0]) }
\&
\&    # or maybe
\&
\&    use JSON::PC;
\&
\&        dumper => sub { JSON::PC::convert($_[0]) }
.Ve
.IP "\fBconnect\fR" 4
.IX Item "connect"
This option is only useful if you want to pass your own arguments to
\&\f(CW\*(C`IO::Socket::INET\*(C'\fR and don't want use \f(CW\*(C`peeraddr\*(C'\fR and \f(CW\*(C`peerhost\*(C'\fR.
.Sp
Example:
.Sp
.Vb 5
\&        connect => {
\&            PerrAddr  => "127.0.0.1",
\&            PeerPort  => 44444,
\&            LocalPort => 44445
\&        }
.Ve
.Sp
This options are passed to \f(CW\*(C`IO::Socket::INET\*(C'\fR.
.SS "\fBlog()\fP"
.IX Subsection "log()"
Call \f(CW\*(C`log()\*(C'\fR if you want to send a message over the socket.
.PP
Example:
.PP
.Vb 1
\&    $sock\->log("message");
.Ve
.SS "\fBconnect()\fP"
.IX Subsection "connect()"
Connect to the socket.
.SS "\fBdisconnect()\fP"
.IX Subsection "disconnect()"
Disconnect from socket.
.SS "\fBvalidate()\fP"
.IX Subsection "validate()"
Validate a configuration.
.SS "\fBreload()\fP"
.IX Subsection "reload()"
Reload with a new configuration.
.SS "\fBerrstr()\fP"
.IX Subsection "errstr()"
This function returns the last error message.
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.Vb 4
\&    Carp
\&    Params::Validate;
\&    IO::Socket::INET;
\&    Data::Dumper;
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
No exports.
.SH "REPORT BUGS"
.IX Header "REPORT BUGS"
Please report all bugs to <jschulz.cpan(at)bloonix.de>.
.PP
If you send me a mail then add Log::Handler into the subject.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonny Schulz <jschulz.cpan(at)bloonix.de>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2007\-2009 by Jonny Schulz. All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
