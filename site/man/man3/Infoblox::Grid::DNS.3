.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::DNS 3"
.TH Infoblox::Grid::DNS 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::DNS \- DNS objects management and configuration
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class supports \s-1DNS\s0 service management and configuration such as time-to-live (\s-1TTL\s0) settings, zone transfers, queries, root name servers, dynamic updates, sort lists, Transaction Signatures (\s-1TSIG\s0) for \s-1DNS\s0 and others, all at the grid level.
.PP
The service configurations of a grid are inherited by all members, zones, and networks unless you specifically override them for selected members, zones, and networks. For this reason, it is recommended  that you configure services at the grid level before configuring member, zone and network services.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::Grid::DNS object is automatically generated upon the successful installation of the Infoblox appliance. It does not require manual construction.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a grid \s-1DNS\s0 object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the matching grid \s-1DNS\s0 object from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attribute to get a specific grid DNS object:
\&
\&  name \- Required. A grid name in string format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::DNS",
\&     name   => "Infoblox"
\&     );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a grid \s-1DNS\s0 object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.Sp
If you have applied an access control list to an object, you must restart services after you update the access control list for the changes to take effect. See Infoblox::Session\->\fBrestart()\fR method.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use this method to modify the grid  DNS service.
\& $grid_dns\->allow_recursive_query("true");
\& #Submit modification
\& my $response = $session\->modify( $grid_dns );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a grid  \s-1DNS\s0 object.
.SS "allow_bulkhost_ddns( )"
.IX Subsection "allow_bulkhost_ddns( )"
.RS 4
Use this method to set or retrieve the  allow_bulkhost_ddns flag of a grid  \s-1DNS\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the allow_bulkhost_ddns flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get  the allow_bulkhost_ddns flag
\& my $allow_bulkhost_ddns = $grid_dns\->allow_bulkhost_ddns();
\& #Modify allow bulkhost ddns flag
\& $grid_dns\->allow_bulkhost_ddns("true");
.Ve
.RE
.RS 4
.RE
.SS "allow_gss_tsig_zone_updates( )"
.IX Subsection "allow_gss_tsig_zone_updates( )"
.RS 4
Use this method to set or retrieve the  allow_gss_tsig_zone_updates flag of a grid.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the  flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get  the allow_gss_tsig_zone_updates flag
\& my $allow_gss_tsig_zone_updates = $grid_dns\->allow_gss_tsig_zone_updates();
\& #Modify allow_gss_tsig_zone_updates flag
\& $grid_dns\->allow_gss_tsig_zone_updates("true");
.Ve
.RE
.RS 4
.RE
.SS "allow_query( )"
.IX Subsection "allow_query( )"
.RS 4
Use this method to set or retrieve the list of allowed/denied queries for a Grid \s-1DNS\s0 object. The list specifies \s-1IP\s0 addresses and/or networks from which queries are allowed or denied. The appliance can also use \s-1TSIG\s0 keys to authenticate the queries.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses, networks and/or Infoblox::DNS::TSIGKey objects. To deny queries, add \*(L"!\*(R" as a prefix to addresses and networks. Specify \*(L"any\*(R" to allow queries from any address. By default, queries are allowed from any address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get allow query list
\& my $allow_query_list = $grid_dns\->allow_query();
\& #Modify allow query list
\& $grid_dns\->allow_query(["any"]);
\&
\& #Specifying TSIG keys
\& my $tsig_key1 = $session\->gen_tsig_key();
\& my $query_key = Infoblox::DNS::TSIGKey\->new(
\&     name => "query_key1",
\&     key  => $tsig_key1
\& );
\& #Modify allow query list
\& $grid_dns\->allow_query(["10.0.0.10" , "20.0.0.0/24" ,"2001::123a","2003::222/64", "!"."30.0.0.30", $query_key, "!"."40.10.0.0/24","!"."2004::125b","!"."2006::34bc"]);
\& #Use Infoblox::Grid::NamedACL
\& $grid_dns\->allow_query($nacl);
.Ve
.RE
.RS 4
.RE
.SS "allow_recursive_query( )"
.IX Subsection "allow_recursive_query( )"
.RS 4
Use this method to set or retrieve the  allow_recursive_query flag of a grid  \s-1DNS\s0 object. If enabled and the Infoblox appliance receives a query for \s-1DNS\s0 data, it  sends a recursive query to the  configured internal root servers.
If  there are no internal root  servers configured, the appliance then sends a recursive query to the  Internet root servers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the allow_recursive_query flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get allow recursive query flag
\& my $allow_recursive_query = $grid_dns\->allow_recursive_query();
\& #Modify allow recursive query flag
\& $grid_dns\->allow_recursive_query("true");
.Ve
.RE
.RS 4
.RE
.SS "allow_transfer( )"
.IX Subsection "allow_transfer( )"
.RS 4
Use this method to set or retrieve the list of allowed/denied zone transfers for a Grid \s-1DNS\s0 object. The list specifies \s-1IP\s0 addresses and/or networks from which zone transfers are allowed or denied. It is also possible to specify the \s-1TSIG\s0 keys of clients that are allowed to perform zone transfers. \s-1TSIG\s0 keys are used to authenticate zone transfer requests and replies. The same key name and key value must be on the primary and secondary name servers for TSIG-authenticated zone transfers to occur.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses, networks, and/or Infoblox::DNS::TSIGKey objects. To deny zone transfer, add \*(L"!\*(R" as a prefix to \s-1IP\s0 addresses and/or networks. Specify \*(L"any\*(R" to allow transfers from any \s-1IP\s0 address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get allow transfer list
\& my $allow_transfer_list = $grid_dns\->allow_transfer();
\& #Modify allow transfer list
\& $grid_dns\->allow_transfer(["any"]);
\&
\& #Specifying TSIG keys
\& my $tsig_key1 = $session\->gen_tsig_key();
\& my $key1 = Infoblox::DNS::TSIGKey\->new(
\&     name => "key1",
\&     key  => $tsig_key1
\& );
\& my $key2 = Infoblox::DNS::TSIGKey\->new(
\&     name => "tsig_xfer",
\&     key  => ":2xCOMPAT"
\&     );
\& #Modify allow transfer list
\& $grid_dns\->allow_transfer(["10.0.0.10", "20.0.0.0/24","2004::325f","2007::876c/64","!"."30.0.0.30", $key1, $key2, "!"."40.10.0.0/24"]);
\& #Use Infoblox::Grid::NamedACL
\& $grid_dns\->allow_transfer($nacl);
.Ve
.RE
.RS 4
.RE
.SS "allow_update( )"
.IX Subsection "allow_update( )"
.RS 4
Use this method to set or retrieve the list of allowed/denied dynamic updates for a grid \s-1DNS\s0 object. The list specifies from which \s-1IP\s0 addresses, networks or \s-1TSIG\s0 key authenticated hosts dynamic updates are allowed or denied.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses, networks, and/or Infoblox::DNS::TSIGKey objects. To deny updates, add \*(L"!\*(R" as a prefix to \s-1IP\s0 addresses and/or networks. Specify \*(L"any\*(R" to allow updates from any \s-1IP\s0 address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get allow update list
\& my $allow_update_list = $grid_dns\->allow_update();
\& #Modify allow update list
\& $grid_dns\->allow_update(["any"]);
\&
\& #Creating a TSIG key object.
\& my $update_key1 = $session\->gen_tsig_key();
\&
\& my $up_key1 = Infoblox::DNS::TSIGKey\->new(
\&     name => "update_key",
\&     key  => $update_key1
\&     );
\&
\& #Modify allow update list
\& $grid_dns\->allow_update(["10.0.0.10", "20.0.0.0/24","2008::129b","!"."30.0.0.30", $up_key1, "!"."40.10.0.0/24","!"."2004::76bc/64"]);
\& #Use Infoblox::Grid::NamedACL
\& $grid_dns\->allow_update($nacl);
.Ve
.RE
.RS 4
.RE
.SS "anonymize_response_logging( )"
.IX Subsection "anonymize_response_logging( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the anonymization of captured \s-1DNS\s0 responses is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable anonymization of captured \s-1DNS\s0 response or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get anonymize_response_logging value
\& my $anonymize_response_logging = $object\->anonymize_response_logging();
\&
\& #Modify anonymize_response_logging value
\& $object\->anonymize_response_logging(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "attack_mitigation( )"
.IX Subsection "attack_mitigation( )"
.RS 4
Use this method to set or retrieve mitigation settings for \s-1DNS\s0 attacks.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::AttackMitigation object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attack_mitigation value
\& my $attack_mitigation = $grid_dns\->attack_mitigation();
\& #Modify attack_mitigation
\& $grid_dns\->attack_mitigation($attack_mitigation);
.Ve
.RE
.RS 4
.RE
.SS "auto_blackhole( )"
.IX Subsection "auto_blackhole( )"
.RS 4
Use this method to set or retrieve the auto blackhole settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::AutoBlackHole object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get auto_blackhole value
\& my $auto_blackhole = $grid_dns\->auto_blackhole();
\& #Modify auto_blackhole
\& $grid_dns\->auto_blackhole($auto_blackhole);
.Ve
.RE
.RS 4
.RE
.SS "bind_check_names_policy( )"
.IX Subsection "bind_check_names_policy( )"
.RS 4
Use this method to set or retrieve the \s-1BIND\s0 check names policy, which indicates the action the appliance takes when it
encounters host names that do not comply with the Strict Hostname Checking policy. This method applies only if
the host name restriction policy  is set to \*(L"Strict Hostname Checking\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The allowed values of the parameter are \*(L"fail\*(R", \*(L"warn\*(R" or undefined. This indicates the desired \s-1BIND\s0 behavior in the case of
illegal hostnames. The default value is undefined, which means the appliance ignores illegal hostnames.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get bind_check_names_policy value
\& my $names_policy = $grid_dns\->bind_check_names_policy();
\& #Modify bind_check_names_policy
\& $grid_dns\->bind_check_names_policy("warn");
.Ve
.RE
.RS 4
.RE
.SS "bind_hostname_directive( )"
.IX Subsection "bind_hostname_directive( )"
.RS 4
Use this method to set or retrieve the value of \s-1BIND\s0 'hostname' directive.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are \*(L"\s-1NONE\*(R"\s0 and \*(L"\s-1HOSTNAME\*(R".\s0 The default value is \*(L"\s-1NONE\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get bind_hostname_directive
\&   my $bind_hostname_directive = $grid_dns\->bind_hostname_directive();
\&   #Modify bind_hostname_directive
\&   $grid_dns\->bind_hostname_directive("HOSTNAME");
.Ve
.RE
.RS 4
.RE
.SS "blackhole_list( )"
.IX Subsection "blackhole_list( )"
.RS 4
Use this method to set or retrieve the blackhole list of a grid \s-1DNS\s0 object. This list specifies the \s-1IP\s0 addresses and networks from which the \s-1DNS\s0 queries are blocked.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPV4/IPv6 addresses and networks. To allow queries, add \*(L"!\*(R" as the prefix to the \s-1IP\s0 addresses and networks. Specify \*(L"any\*(R" to block \s-1DNS\s0 queries from any \s-1IP\s0 address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get the blackhole list
\& my $blackhole_list = $grid_dns\->blackhole_list();
\& #Modify the blackhole_list
\& $grid_dns\->blackhole_list(["any"]);
\& #Modify the blackhole list
\& $grid_dns\->blackhole_list(["10.0.0.10", "20.0.0.0/24","2010::256/64","!"."2011::23cb/64","!"."30.0.0.30", "!"."40.10.0.0/24"]);
\& #Modify the blackhole list
\& $grid_dns\->blackhole_list(undef);
\& #Use Infoblox::Grid::NamedACL
\& $grid_dns\->blackhole_list($nacl);
.Ve
.RE
.RS 4
.RE
.SS "blacklist_action( )"
.IX Subsection "blacklist_action( )"
.RS 4
Use this method to specify the action to perform when a domain name matches the pattern defined in a rule that is specified by the blacklist_ruleset method.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1REDIRECT\*(R"\s0 or \*(L"\s-1REFUSE\*(R".\s0 The default value is \*(L"\s-1REFUSE\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 4
\&  #Get blacklist_action
\&  my $blacklist_action = $grid_dns\->blacklist_action();
\&  #Modify blacklist_action
\&  $grid_dns\->blacklist_action("REDIRECT");
.Ve
.RE
.RS 4
.RE
.SS "blacklist_log_query( )"
.IX Subsection "blacklist_log_query( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether blacklist redirection queries are logged.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable logging, or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get blacklist_log_query
\&   my $blacklist_log_query = $grid_dns\->nxdomain_log_query( );
\&   #Modify blacklist_log_query
\&   $grid_dns\->blacklist_log_query("true");
.Ve
.RE
.RS 4
.RE
.SS "blacklist_redirect_addresses( )"
.IX Subsection "blacklist_redirect_addresses( )"
.RS 4
Use this method to specify the \s-1IP\s0 addresses the appliance includes in the response it sends in place of a blacklisted \s-1IP\s0 address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of IPv4 addresses. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get blacklist_redirect_addresses
\&   my $blacklist_redirect_addresses = $grid_dns\->blacklist_redirect_addresses( );
\&   #Modify blacklist_redirect_addresses
\&   $grid_dns\->blacklist_redirect_addresses(["10.0.0.10", "10.0.0.20"]);
.Ve
.RE
.RS 4
.RE
.SS "blacklist_redirect_ttl( )"
.IX Subsection "blacklist_redirect_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1TTL\s0 value of the synthetic \s-1DNS\s0 response that result from blacklist redirection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer, from 0 to 4294967295, that represents the \s-1TTL\s0 in seconds. The default value is 60.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get blacklist_redirect_ttl
\&   my $blacklist_redirect_ttl = $grid_dns\->blacklist_redirect_ttl( );
\&   #Modify blacklist_redirect_ttl
\&   $grid_dns\->blacklist_redirect_ttl(60);
.Ve
.RE
.RS 4
.RE
.SS "blacklist_rulesets( )"
.IX Subsection "blacklist_rulesets( )"
.RS 4
Use this method to specify or retrieve Infoblox::DNS::Ruleset object names assigned at the grid level for blacklist redirection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains the names of the Infoblox::DNS::Ruleset objects assigned to the grid. The names must be in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get blacklist_rulesets
\&   my $blacklist_rulesets = $grid_dns\->blacklist_rulesets();
\&   #Modify blacklist_rulesets
\&   $grid_dns\->blacklist_rulesets(["ruleset1", "ruleset2"]);
.Ve
.RE
.RS 4
.RE
.SS "bulk_host_name_template( )"
.IX Subsection "bulk_host_name_template( )"
.RS 4
Use this method to set or retrieve the default bulk host name format of a grid  \s-1DNS\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Name of a valid bulk host name format.
.Sp
For instance, if the prefix of a bulk host is \fIinfo\fR, the \s-1IP\s0 address range is \fI213.19.32.133\-213.19.32.134\fR, and the domain name is \fIinfoblox.com\fR.
If the bulk host name template \*(L"Three Octets\*(R" is set at the grid level, then the bulk host names will be \fIinfo\-213\-19\-23\-133.infoblox.com\fR and \fIinfo\-213\-19\-23\-134.infoblox.com\fR.
.Sp
If the bulk host name template specified is \*(L"CustomerTemplate\*(R"(*#3*#4), the bulk host names will be \fIinfo*023*133.infoblox.com\fR and \fIinfo\-023\-134.infoblox.com\fR.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the bulk host name format
\& my $grid_template = $grid_dns\->bulk_host_name_template();
\& #Modify bulk host name format
\& $grid_dns\->bulk_host_name_template("Three Octets");
.Ve
.RE
.RS 4
.RE
.SS "bulk_host_name_templates( )"
.IX Subsection "bulk_host_name_templates( )"
.RS 4
Use this method to set or retrieve the list of bulk host name templates.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference  that contains Infoblox::Grid::DNS::BulkHostNameTemplate object(s).
.Sp
There are four Infoblox predefined bulk host name templates.
.Sp
Template Name                     Template Format
.Sp
\&\*(L"Four Octets\*(R"                     \-$1\-$2\-$3\-$4
.Sp
\&\*(L"Three Octets\*(R"                    \-$2\-$3\-$4
.Sp
\&\*(L"Two Octets\*(R"                      \-$3\-$4
.Sp
\&\*(L"One Octet\*(R"                       \-$4
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get bulk_host_name_templates
\& my $bulk_host_name_templates = $grid_dns\->bulk_host_name_templates();
\&
\& #Modify bulk_host_name_templates
\&
\& #Constructing four out\-of\-box bulk host name templates
\& my $four_octets = Infoblox::Grid::DNS::BulkHostNameTemplate\->new(
\&     template_name   => "Four Octets",
\&     template_format => \*(Aq\-$1\-$2\-$3\-$4\*(Aq
\& );
\& my $three_octets = Infoblox::Grid::DNS::BulkHostNameTemplate\->new(
\&     template_name   => "Three Octets",
\&     template_format => \*(Aq\-$2\-$3\-$4\*(Aq
\& );
\& my $two_octets = Infoblox::Grid::DNS::BulkHostNameTemplate\->new(
\&     template_name   => "Two Octets",
\&     template_format => \*(Aq\-$3\-$4\*(Aq
\& );
\& my $one_octet = Infoblox::Grid::DNS::BulkHostNameTemplate\->new(
\&     template_name   => "One Octet",
\&     template_format => \*(Aq\-$4\*(Aq
\& );
\&
\& #Creating a new bulk host name templates.
\& my $custom_template = Infoblox::Grid::DNS::BulkHostNameTemplate\->new(
\&     template_name   => "Custom Template",
\&     template_format => \*(Aq\-#1\-#2\-#3\-#4\*(Aq
\& );
\&
\& $grid_dns\->bulk_host_name_templates([$custom_template, $four_octets, $three_octets, $two_octets, $one_octet]);
.Ve
.RE
.RS 4
.RE
.SS "capture_dns_queries_on_all_domains( )"
.IX Subsection "capture_dns_queries_on_all_domains( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the capturing of \s-1DNS\s0 queries for all domains is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable capturing of \s-1DNS\s0 queries for all domains or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get capture_dns_queries_on_all_domains value
\& my $capture_dns_queries_on_all_domains = $object\->capture_dns_queries_on_all_domains();
\&
\& #Modify capture_dns_queries_on_all_domains value
\& $object\->capture_dns_queries_on_all_domains(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "client_subnet_domains( )"
.IX Subsection "client_subnet_domains( )"
.RS 4
Use this method to set or retrieve the list of zone domain names that are allowed or forbidden for \s-1EDNS\s0 client subnet (\s-1ECS\s0) recursion.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of Infoblox::Grid::DNS::ClientSubnetDomain objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get client_subnet_domains value
\& my $value = $grid_dns\->client_subnet_domains();
\&
\& #Construct Infoblox::Grid::DNS::ClientSubnetDomain object
\& my $object = Infoblox::Grid::ClientSubnetDomain\->new(
\&     domain     => \*(Aqdomain.com\*(Aq,
\&     permission => \*(AqDENY\*(Aq,
\& );
\&
\& #Modify client_subnet_domains value
\& $grid_dns\->client_subnet_domains([$object]);
.Ve
.RE
.RS 4
.RE
.SS "client_subnet_ipv4_prefix_length( )"
.IX Subsection "client_subnet_ipv4_prefix_length( )"
.RS 4
Use this method to set or retrieve the default IPv4 source prefix length used when sending queries with \s-1EDNS\s0 client subnet option.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 32.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get client_subnet_ipv4_prefix_length value
\& my $value = $object\->client_subnet_ipv4_prefix_length();
\&
\& #Modify client_subnet_ipv4_prefix_length value
\& $object\->client_subnet_ipv4_prefix_length(30);
.Ve
.RE
.RS 4
.RE
.SS "client_subnet_ipv6_prefix_length( )"
.IX Subsection "client_subnet_ipv6_prefix_length( )"
.RS 4
Use this method to set or retrieve the default IPv6 source prefix length used when sending queries with \s-1EDNS\s0 client subnet option.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 128.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get client_subnet_ipv6_prefix_length value
\& my $value = $object\->client_subnet_ipv6_prefix_length();
\&
\& #Modify client_subnet_ipv6_prefix_length value
\& $object\->client_subnet_ipv6_prefix_length(30);
.Ve
.RE
.RS 4
.RE
.SS "copy_xfer_to_notify( )"
.IX Subsection "copy_xfer_to_notify( )"
.RS 4
Use this method to enable/disable copying of the allowed IPs from zone transfer list into also-notify statement in named.conf.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to enable copying of the allowed IPs from zone transfer list into also-notify statement in named.conf. Set the parameter to \*(L"false\*(R" to disable it.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  # Get attribute value
\&  my $value = $grid_dns\->copy_xfer_to_notify();
\&  # Modify attribute value
\&  $grid_dns\->copy_xfer_to_notify(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_force_creation_timestamp_update( )"
.IX Subsection "ddns_force_creation_timestamp_update( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the creation timestamp of resource records (\s-1RR\s0) should be updated when \s-1DDNS\s0 update happens even if there is no change to the \s-1RR.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to update the creation timestamp of \s-1RR\s0 on every \s-1DDNS\s0 update, and 'false' to update the creation timestamp only when \s-1RR\s0 changes during a \s-1DDNS\s0 update.
The default is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ddns_force_creation_timestamp_update value
\& $value = $object\->ddns_force_creation_timestamp_update();
\&
\& #modify ddns_force_creation_timestamp_update value
\& $object\->ddns_force_creation_timestamp_update(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_patterns_list( )"
.IX Subsection "ddns_restrict_patterns_list( )"
.RS 4
Use this method to set or retrieve an unordered list of restriction patterns for an option of to restrict \s-1DDNS\s0 updates based on \s-1FQDN\s0 patterns.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of FQDNs in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_patterns_list value
\& $ddns_restrict_patterns_list = $grid_dns\->ddns_restrict_patterns_list();
\&
\& #modify ddns_restrict_patterns_list value
\& $grid_dns\->ddns_restrict_patterns_list([\*(Aqfoo.com\*(Aq, \*(Aqbar.com\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_patterns( )"
.IX Subsection "ddns_restrict_patterns( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether an option to restrict \s-1DDNS\s0 update request based on \s-1FQDN\s0 patterns is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 update request restriction base on \s-1FQDN\s0 patterns and 'false to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_patterns value
\& $ddns_restrict_patterns = $grid_dns\->ddns_restrict_patterns();
\&
\& #modify ddns_restrict_patterns value
\& $grid_dns\->ddns_restrict_patterns(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_static( )"
.IX Subsection "ddns_restrict_static( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether an option to restrict \s-1DDNS\s0 update request to resource records which are marked as '\s-1STATIC\s0' is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 update requests to resource records which are marked as '\s-1STATIC\s0' and 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_static value
\& $ddns_restrict_static = $grid_dns\->ddns_restrict_static();
\&
\& #modify ddns_restrict_static value
\& $grid_dns\->ddns_restrict_static(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_protected( )"
.IX Subsection "ddns_restrict_protected( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether an option to restrict \s-1DDNS\s0 update request to protected resource records is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 update requests to protected resource records and 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_protected value
\& $ddns_restrict_protected = $grid_dns\->ddns_restrict_protected();
\&
\& #modify ddns_restrict_protected value
\& $grid_dns\->ddns_restrict_protected(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_secure( )"
.IX Subsection "ddns_restrict_secure( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether \s-1DDNS\s0 update request for principal other than target resource record's principal is restricted.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 update requests restriction for principal other than target resource record's principal and 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_secure value
\& $ddns_restrict_secure = $grid_dns\->ddns_restrict_secure();
\&
\& #modify ddns_restrict_secure value
\& $grid_dns\->ddns_restrict_secure(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_principal_tracking( )"
.IX Subsection "ddns_principal_tracking( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether the \s-1DDNS\s0 principal track is enabled or disabled.
.Sp
\&\s-1DDNS\s0 principal tracking includes putting them into resource record affected by update.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 principal tracking and 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_principal_tracking value
\& $ddns_principal_tracking = $grid_dns\->ddns_principal_tracking();
\&
\& #modify ddns_principal_tracking value
\& $grid_dns\->ddns_principal_tracking(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_principal_group( )"
.IX Subsection "ddns_principal_group( )"
.RS 4
Use this method to set or retrieve the \s-1DDNS\s0 principal group.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::DNS::DDNS::PrincipalCluster::Group object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_principal_group value
\& $ddns_principal_group = $grid_dns\->ddns_principal_group();
\&
\& #modify ddns_principal_group value
\& $grid_dns\->ddns_principal_group($principal_group);
.Ve
.RE
.RS 4
.RE
.SS "default_ttl( )"
.IX Subsection "default_ttl( )"
.RS 4
Use this method to set or retrieve the default \s-1TTL\s0 value of a grid  \s-1DNS\s0 object. This interval tells the secondary how long the data can be cached.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Number for the \s-1TTL,\s0 in seconds. \fIDefault\fR value is 1/2 of lease time or 28800 seconds.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the default TTL
\& my $default_ttl = $grid_dns\->default_ttl();
\& #Modify the default TTL
\& $grid_dns\->default_ttl(28800);
.Ve
.RE
.RS 4
.RE
.SS "disable_edns( )"
.IX Subsection "disable_edns( )"
.RS 4
Use this method to  enable or disable \s-1EDNS0\s0 support for queries that require recursive resolution.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to disable \s-1EDNS0\s0 or \*(L"false\*(R" to enable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the double confirmation of zone deletion flag
\& my $disable_edns = $grid_dns\->disable_edns();
\& #Modify disable_edns flag
\& $grid_dns\->disable_edns("true");
.Ve
.RE
.RS 4
.RE
.SS "dns_cache_acceleration_ttl( )"
.IX Subsection "dns_cache_acceleration_ttl( )"
.RS 4
Use this method to set or retrieve the minimum \s-1TTL\s0 value, in seconds, that a \s-1DNS\s0 record must have in order for it to be cached by the \s-1DNS\s0 Cache Acceleration service.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An integer from 1 to 65000 that represents the \s-1TTL\s0 in seconds. The default value is 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get dns_cache_acceleration_ttl
\&   my $dns_cache_acceleration_ttl = $grid_dns\->dns_cache_acceleration_ttl( );
\&   #Modify dns_cache_acceleration_ttl
\&   $grid_dns\->dns_cache_acceleration_ttl(60);
.Ve
.RE
.RS 4
.RE
.SS "dns_health_check_anycast_control( )"
.IX Subsection "dns_health_check_anycast_control( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the anycast failure (\s-1BFD\s0 session down) is enabled on member failure or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable anycast failure on Member failure, and 'false' to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_health_check_anycast_control value
\& my $value = $object\->dns_health_check_anycast_control();
\&
\& #Modify dns_health_check_anycast_control value
\& $object\->dns_health_check_anycast_control(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "dns_health_check_domain_list( )"
.IX Subsection "dns_health_check_domain_list( )"
.RS 4
Use this method to set or retrieve the list of domain names for the \s-1DNS\s0 health check.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains desired domain names in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_health_check_domain_list value
\& my $value = $object\->dns_health_check_domain_list();
\&
\& #Modify dns_health_check_domain_list value
\& $object\->dns_health_check_domain_list([\*(Aqfoo.com\*(Aq, \*(Aqbar.net\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "dns_health_check_interval( )"
.IX Subsection "dns_health_check_interval( )"
.RS 4
Use this method to set or retrieve the time interval (in seconds) for \s-1DNS\s0 health check.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 10 and 21600 that represents number of seconds between two health checks.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_health_check_interval value
\& my $value = $object\->dns_health_check_interval();
\&
\& #Modify dns_health_check_interval value
\& $object\->dns_health_check_interval(2000);
.Ve
.RE
.RS 4
.RE
.SS "dns_health_check_recursion_flag( )"
.IX Subsection "dns_health_check_recursion_flag( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the recursive \s-1DNS\s0 health check is enabled or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable recursive \s-1DNS\s0 health check queries, and 'false' to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_health_check_recursion_flag value
\& my $value = $object\->dns_health_check_recursion_flag();
\&
\& #Modify dns_health_check_recursion_flag value
\& $object\->dns_health_check_recursion_flag(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "dns_health_check_retries( )"
.IX Subsection "dns_health_check_retries( )"
.RS 4
Use this method to set or retrieve the number of \s-1DNS\s0 health check retries.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 10.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_health_check_retries value
\& my $value = $object\->dns_health_check_retries();
\&
\& #Modify dns_health_check_retries value
\& $object\->dns_health_check_retries(2);
.Ve
.RE
.RS 4
.RE
.SS "dns_health_check_timeout( )"
.IX Subsection "dns_health_check_timeout( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 health check timeout interval (in seconds).
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 10.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_health_check_timeout value
\& my $value = $object\->dns_health_check_timeout();
\&
\& #Modify dns_health_check_timeout value
\& $object\->dns_health_check_timeout(10);
.Ve
.RE
.RS 4
.RE
.SS "dns_query_capture_file_time_limit( )"
.IX Subsection "dns_query_capture_file_time_limit( )"
.RS 4
Use this method to set or retrieve the time limit (in minutes) for the \s-1DNS\s0 query capture file.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is unsigned integer between 1 and 10. The default value is 10.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_query_capture_file_time_limit value
\& my $dns_query_capture_file_time_limit = $object\->dns_query_capture_file_time_limit();
\&
\& #Modify dns_query_capture_file_time_limit value
\& $object\->dns_query_capture_file_time_limit(\*(Aq5\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "dns64_groups( )"
.IX Subsection "dns64_groups( )"
.RS 4
Use this method to set or retrieve the list of \s-1DNS64\s0 synthesis groups.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::Grid::DNS::DNS64Group objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the list of DNS64 synthesis groups
\& my $dns64_groups_list = $grid_dns\->dns64_groups();
\&
\& #Modify it
\& my $group = $session\->get(
\&                         object => "Infoblox::Grid::DNS::DNS64Group"),
\&                         name => "groupname",
\&                         prefix => "groupprefix",
\&                       );
\& $grid_dns\->dns64_groups([$group]);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_enabled( )"
.IX Subsection "dnssec_enabled( )"
.RS 4
Use this method to enable/disable the \s-1DNS\s0 security extension.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to enable the \s-1DNS\s0 security extension. Set the parameter to \*(L"false\*(R" to disable the feature.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_enabled
\& my $dnssec_enabled = $grid_dns\->dnssec_enabled();
\& #Modify dnssec_enabled
\& $grid_dns\->dnssec_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_enable_ksk_auto_rollover( )"
.IX Subsection "dnssec_enable_ksk_auto_rollover( )"
.RS 4
Use this method to enable automatic rollover for Key-signing key.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable automatic rollover for Key-signing key or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get dnssec_enable_ksk_auto_rollover value
\&  my $enable_ksk_auto_rollover = $grid_dns\->dnssec_enable_ksk_auto_rollover();
\&  #Modify dnssec_enable_ksk_auto_rollover value
\&  $grid_dns\->dnssec_enable_ksk_auto_rollover("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_expired_signatures_enabled( )"
.IX Subsection "dnssec_expired_signatures_enabled( )"
.RS 4
Use this method to  control whether the \s-1DNS\s0 grid object accepts expired signatures.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to accept  expired signatures. Set the parameter to \*(L"false\*(R" to  reject expired signatures.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_expired_signatures_enabled
\& my $dnssec_expired_signatures_enabled = $grid_dns\->dnssec_expired_signatures_enabled();
\& #Modify dnssec_expired_signatures_enabled
\& $grid_dns\->dnssec_expired_signatures_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_ksk_algorithms( )"
.IX Subsection "dnssec_ksk_algorithms( )"
.RS 4
Use this method to set or retrieve the \s-1DNSSEC\s0 key-signing key algorithms of all the zones in the grid.
.Sp
This property determines which algorithms to use when generating the keys for signing the \s-1DNSKEY\s0 records.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Currently there are two major versions of the \s-1DNSSEC\s0 zone encryption mechanism. The difference between the two is in their implementation of the Next Secure (\s-1NSEC\s0) records. The older version, which is referred to as \s-1NSEC,\s0 is based on RFCs 4033\-4035. The newer version, which is referred to as \s-1NSEC3,\s0 is described in \s-1RFC 5155.\s0
.Sp
The valid value is a list containing Infoblox::DNS::DNSSecKeyAlgorithm objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Getting algorithm
\& my $algorithms = $grid_dns\->dnssec_ksk_algorithms();
\&
\& # Modifying algorithm
\& $grid_dns\->dnssec_ksk_algorithm([$alg1, $alg2]);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_ksk_email_notification_enabled( )"
.IX Subsection "dnssec_ksk_email_notification_enabled( )"
.RS 4
Use this method to enable or disable email notifications for \s-1KSK\s0 related events.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable email notification or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_ksk_email_notification_enabled value
\& my $value = $grid_dns\->dnssec_ksk_email_notification_enabled();
\& #Modify dnssec_ksk_email_notification_enabled value
\& $grid_dns\->dnssec_ksk_email_notification_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_ksk_rollover_interval()\fP"
.IX Subsection "dnssec_ksk_rollover_interval()"
.RS 4
Use this method to set or retrieve the rollover interval of the \s-1KSK\s0 keys.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A positive integer that specifies the number of seconds between \s-1KSK\s0 rollovers. Normally, this parameter should be larger than the
\&\s-1ZSK\s0 rollover interval. The \s-1DNSSEC\s0 key-signing key rollover interval (in seconds) must be between 1 day and seconds to Jan 2, 2038.
.Sp
The default value of the dnssec_ksk_rollover_interval parameter is 31536000 (1 year).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Getting dnssec_ksk_rollover_interval
\& my $ksk_rollover = $grid_dns\->dnssec_ksk_rollover_interval();
\&
\& # Modifying dnssec_ksk_rollover_interval
\& $grid_dns\->dnssec_ksk_rollover_interval(86400);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_ksk_rollover_notification_config( )"
.IX Subsection "dnssec_ksk_rollover_notification_config( )"
.RS 4
Use this method to determine the type of events users will be notified.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are \*(L"\s-1NONE\*(R", \*(L"ALL\*(R"\s0 and \*(L"\s-1REQUIRE_MANUAL_INTERVENTION\*(R".\s0 Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_ksk_rollover_notification_config value
\& my $value = $grid_dns\->dnssec_ksk_rollover_notification_config();
\& #Modify dnssec_ksk_rollover_notification_config value
\& $grid_dns\->dnssec_ksk_rollover_notification_config("ALL");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_ksk_snmp_notification_enabled( )"
.IX Subsection "dnssec_ksk_snmp_notification_enabled( )"
.RS 4
Use this method to enable or disable \s-1SNMP\s0 notifiations for \s-1KSK\s0 related events.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable \s-1SNMP\s0 notification or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_ksk_snmp_notification_enabled value
\& my $value = $grid_dns\->dnssec_ksk_snmp_notification_enabled();
\& #Modify dnssec_ksk_snmp_notification_enabled value
\& $grid_dns\->dnssec_ksk_snmp_notification_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_negative_trust_anchors( )"
.IX Subsection "dnssec_negative_trust_anchors( )"
.RS 4
Use this method to set or retrive the list of zones for which the appliance does not perform \s-1DNSSEC\s0 validation.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of strings that contains the list of zones for which the appliance does not perform \s-1DNSSEC\s0 validation.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_negative_trust_anchors value
\& my $value = $grid_dns\->dnssec_negative_trust_anchors();
\& #Modify dnssec_negative_trust_anchors value
\& $grid_dns\->dnssec_negative_trust_anchors($zones);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_nsec3_iterations( )"
.IX Subsection "dnssec_nsec3_iterations( )"
.RS 4
Use this method to define the number of iterations for \s-1NSEC3\s0 hashing.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value are integers between 0 and 65535. Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_nsec3_iterations value
\& my $iteration = $grid_dns\->dnssec_nsec3_iterations();
\& #Modify dnssec_nsec3_iterations value
\& $grid_dns\->dnssec_nsec3_iterations();
.Ve
.RE
.RS 4
.RE
.SS "dnssec_nsec3_salt_min_length( )"
.IX Subsection "dnssec_nsec3_salt_min_length( )"
.RS 4
Use this method to define the minimum length for the \s-1NSEC3\s0 salt.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value are integers between 0 and 65535. Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_nsec3_salt_min_length value
\& my $salt_min_length = $grid_dns\->dnssec_nsec3_salt_min_length();
\& #Modify dnssec_nsec3_salt_min_length value
\& $grid_dns\->dnssec_nsec3_salt_min_length();
.Ve
.RE
.RS 4
.RE
.SS "dnssec_nsec3_salt_max_length( )"
.IX Subsection "dnssec_nsec3_salt_max_length( )"
.RS 4
Use this method to define the maximum length for the \s-1NSEC3\s0 salt.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value are integers between 0 and 65535. Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_nsec3_salt_max_length value
\& my $salt_max_length = $grid_dns\->dnssec_nsec3_salt_max_length();
\& #Modify dnssec_nsec3_salt_max_length value
\& $grid_dns\->dnssec_nsec3_salt_max_length();
.Ve
.RE
.RS 4
.RE
.SS "dnssec_signature_expiration( )"
.IX Subsection "dnssec_signature_expiration( )"
.RS 4
Use this method to set or retrieve the expiration time for \s-1DNSSEC\s0 signatures.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The signature expiration time in seconds. The minimum value is 86400 (1 day), the maximum value is the number of seconds from the time you set it to January 2038.
.Sp
The default value of dnssec_signature_expiration parameter is 2592000 seconds ( i.e. 30 days).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Getting dnssec_signature_expiration
\& my $signature_expiration = $grid_dns\->dnssec_signature_expiration();
\&
\& # Modifying dnssec_signature_expiration
\& $grid_dns\->dnssec_signature_expiration(31536000);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_validation_enabled( )"
.IX Subsection "dnssec_validation_enabled( )"
.RS 4
Use this method to  enable  and disable \s-1DNS\s0  security validation (for the grid appliances working as clients of secure zones).
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to enable the validation. Set to \*(L"false\*(R" to disable the validation.
.Sp
The default value of the parameter is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_validation_enabled
\& my $dnssec_validation_enabled = $grid_dns\->dnssec_validation_enabled();
\& #Modify dnssec_validation_enabled
\& $grid_dns\->dnssec_validation_enabled("false");
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_blacklist_enabled()\fP"
.IX Subsection "dnssec_blacklist_enabled()"
.RS 4
Use this method to enable and disable blacklist rules for DNSSEC-enabled clients.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to apply blacklist rules for DNSSEC-enabled clients. Set to \*(L"false\*(R" to disable them.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_blacklist_enabled
\& my $dnssec_blacklist_enabled = $grid_dns\->dnssec_blacklist_enabled();
\& #Modify dnssec_blacklist_enabled
\& $grid_dns\->dnssec_blacklist_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_dns64_enabled()\fP"
.IX Subsection "dnssec_dns64_enabled()"
.RS 4
Use this method to enable and disable \s-1DNS64\s0 groups for DNSSEC-enabled clients.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to apply \s-1DNS64\s0 groups for DNSSEC-enabled clients. Set to \*(L"false\*(R" to disable them.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_dns64_enabled
\& my $dnssec_dns64_enabled = $grid_dns\->dnssec_dns64_enabled();
\& #Modify dnssec_dns64_enabled
\& $grid_dns\->dnssec_dns64_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_nxdomain_enabled()\fP"
.IX Subsection "dnssec_nxdomain_enabled()"
.RS 4
Use this method to enable and disable \s-1NXDOMAIN\s0 rules for DNSSEC-enabled clients.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to apply \s-1NXDOMAIN\s0 rules for DNSSEC-enabled clients. Set to \*(L"false\*(R" to disable them.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_nxdomain_enabled
\& my $dnssec_nxdomain_enabled = $grid_dns\->dnssec_nxdomain_enabled();
\& #Modify dnssec_nxdomain_enabled
\& $grid_dns\->dnssec_nxdomain_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_rpz_enabled()\fP"
.IX Subsection "dnssec_rpz_enabled()"
.RS 4
Use this method to enable and disable \s-1RPZ\s0 policies for DNSSEC-enabled clients.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to apply \s-1RPZ\s0 policies for DNSSEC-enabled clients. Set to \*(L"false\*(R" to disable them.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_rpz_enabled
\& my $dnssec_rpz_enabled = $grid_dns\->dnssec_rpz_enabled();
\& #Modify dnssec_rpz_enabled
\& $grid_dns\->dnssec_rpz_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_trusted_keys( )"
.IX Subsection "dnssec_trusted_keys( )"
.RS 4
Use this method to specify the list of trusted keys for  the \s-1DNSSEC\s0 feature.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference that contains a list of Infoblox::DNS::DnssecTrustedKey objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns a reference to a list of the trusted keys.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get dnssec_trusted_keys
\& my $dnssec_trusted_keys = $grid_dns\->dnssec_trusted_keys();
\& #Modify dnssec_trusted_keys
\& my $key1=Infoblox::DNS::DnssecTrustedKey\->new(
\&    fqdn => "myzone.com",
\&    algorithm => "RSAMD5",
\&    key       => "c2ltcGxlIGtleQo="
\&    );
\& $grid_dns\->dnssec_trusted_keys([$key1]);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_zsk_algorithms( )"
.IX Subsection "dnssec_zsk_algorithms( )"
.RS 4
Use this method to set or retrieve the \s-1DNSSEC\s0 zone-signing key algorithms of all the zones in the grid.
.Sp
This property determines which algorithms to use when generating the keys for signing the \s-1DNSKEY\s0 records.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Currently there are two major versions of the \s-1DNSSEC\s0 zone encryption mechanism. The difference between the two is in their implementation of the Next Secure (\s-1NSEC\s0) records. The older version, which is referred to as \s-1NSEC,\s0 is based on RFCs 4033\-4035. The newer version, which is referred to as \s-1NSEC3,\s0 is described in \s-1RFC 5155.\s0
.Sp
The valid value is a list containing Infoblox::DNS::DNSSecKeyAlgorithm objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Getting algorithms
\& my $algorithms = $grid_dns\->dnssec_zsk_algorithms();
\&
\& # Modifying algorithms
\& $grid_dns\->dnssec_zsk_algorithm([$alg1, $alg2]);
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_zsk_rollover_interval()\fP"
.IX Subsection "dnssec_zsk_rollover_interval()"
.RS 4
Use this method to set or retrieve the zone-signing key rollover interval.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A positive integer that specifies the number of seconds between \s-1ZSK\s0 rollovers. Normally, this parameter should be smaller than
the \s-1KSK\s0 rollover interval. The \s-1DNSSEC\s0 zone-signing key over interval (in seconds) must be between 1 day and the number of seconds from
present to Jan 2038.
.Sp
The default value of the dnssec_zsk_rollover_interval parameter is 2592000 seconds ( 30 days).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Getting dnssec_zsk_rollover_interval
\& my $zsk_rollover = $grid_dns\->dnssec_zsk_rollover_interval();
\&
\& # Modifying dnssec_ksk_rollover_interval
\& $grid_dns\->dnssec_zsk_rollover_interval(86400);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_zsk_rollover_mechanism( )"
.IX Subsection "dnssec_zsk_rollover_mechanism( )"
.RS 4
Use this method to set or retrieve the \s-1ZSK\s0 rollover mechanism type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are \*(L"\s-1DOUBLE_SIGN\*(R"\s0 and \*(L"\s-1PRE_PUBLISH\*(R".\s0 Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_zsk_rollover_mechanism value
\& my $value = $grid_dns\->dnssec_zsk_rollover_mechanism();
\& #Modify dnssec_zsk_rollover_mechanism value
\& $grid_dns\->dnssec_zsk_rollover_mechanism("DOUBLE_SIGN");
.Ve
.RE
.RS 4
.RE
.SS "domains_to_capture_dns_queries( )"
.IX Subsection "domains_to_capture_dns_queries( )"
.RS 4
Use this method to set or retrieve the list of domains to capture \s-1DNS\s0 queries.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains desired domain names in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get domains_to_capture_dns_queries value
\& my $domains_to_capture_dns_queries = $object\->domains_to_capture_dns_queries();
\&
\& #Modify domains_to_capture_dns_queries value
\& $object\->domains_to_capture_dns_queries([\*(Aqdomain1.com\*(Aq, \*(Aqdomain2.com\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "dtc_dnssec_mode( )"
.IX Subsection "dtc_dnssec_mode( )"
.RS 4
Use this method to set or retrieve the \s-1DTC DNSSEC\s0 operation mode.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1SIGNED\s0' and '\s-1UNSIGNED\s0'. The default value is '\s-1UNSIGNED\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dtc_dnssec_mode value
\& my $dtc_dnssec_mode = $object\->dtc_dnssec_mode();
\&
\& #Modify dtc_dnssec_mode value
\& $object\->dtc_dnssec_mode(\*(AqUNSIGNED\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "dtc_edns_prefer_client_subnet( )"
.IX Subsection "dtc_edns_prefer_client_subnet( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the use of the edns-client-subnet option for \s-1DTC\s0 is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable use of the edns-client-subnet option for \s-1DTC\s0 or 'false' to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dtc_edns_prefer_client_subnet value
\& my $dtc_edns_prefer_client_subnet = $object\->dtc_edns_prefer_client_subnet();
\&
\& #Modify dtc_edns_prefer_client_subnet value
\& $object\->dtc_edns_prefer_client_subnet(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "dtc_topology_ea_list( )"
.IX Subsection "dtc_topology_ea_list( )"
.RS 4
Use this method to set or retrieve the \s-1DTC\s0 topology extensible attribute definition list. 
When configuring a \s-1DTC\s0 topology, users may configure classification as either \*(L"Geographic\*(R" or \*(L"Extensible Attributes\*(R".
Selecting extensible attributes will replace supported MaxMind database labels (Continent, Country, Subdivision, City) with the names of 
the selection \s-1EA\s0 types and provide values extracted from \s-1DHCP\s0 Network Container, Network and Range objects with those extensible attributes.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::ExtensibleAttributeDef object name.
.Sp
Note that number of extensible attribute definition is limited to 4. Only string, enum, and integer extensible attribute definitions may be selected.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dtc_topology_ea_list value
\& my $dtc_topology_ea_list = $object\->dtc_topology_ea_list();
\&
\& #Modify dtc_topology_ea_list value
\& $object\->dtc_topology_ea_list([\*(AqSite\*(Aq, \*(AqState\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "email( )"
.IX Subsection "email( )"
.RS 4
Use this method to set or retrieve the email address of a grid  \s-1DNS\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
String with email address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get email address
\& my $email = $grid_dns\->email();
\& #Modify email address
\& $grid_dns\->email("admin\e@infoblox.com");
.Ve
.RE
.RS 4
.RE
.SS "enable_blackhole( )"
.IX Subsection "enable_blackhole( )"
.RS 4
Use this method to set or retrieve the enable_blackhole flag of a grid \s-1DNS\s0 object. When enabled, the Infoblox appliance does not respond to \s-1DNS\s0 queries from clients that are in the configured blackhole_list.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_blackhole flag or \*(L"false\*(R" to deactivate and unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_blackhole flag
\& my $enable_blackhole = $grid_dns\->enable_blackhole();
\& #Modify enable_blackhole recursive query flag
\& $grid_dns\->enable_blackhole("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_blacklist( )"
.IX Subsection "enable_blacklist( )"
.RS 4
Use this method to enable or disable a blacklist globaly.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_blacklist flag or \*(L"false\*(R" to deactivate/unset it. The default is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting enable_blacklist
\&   my $enable_blacklist = $grid_dns\->enable_blacklist( );
\&   #Modifying enable_blacklist
\&   $grid_dns\->enable_blacklist("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_capture_dns_queries( )"
.IX Subsection "enable_capture_dns_queries( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the capture of \s-1DNS\s0 queries is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable the capture of \s-1DNS\s0 queries or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_capture_dns_queries value
\& my $enable_capture_dns_queries = $object\->enable_capture_dns_queries();
\&
\& #Modify enable_capture_dns_queries value
\& $object\->enable_capture_dns_queries(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_capture_dns_responses( )"
.IX Subsection "enable_capture_dns_responses( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the capture of \s-1DNS\s0 responses is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable the capture of \s-1DNS\s0 responses or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_capture_dns_responses value
\& my $enable_capture_dns_responses = $object\->enable_capture_dns_responses();
\&
\& #Modify enable_capture_dns_responses value
\& $object\->enable_capture_dns_responses(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_client_subnet_recursive( )"
.IX Subsection "enable_client_subnet_recursive( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether adding \s-1EDNS\s0 client subnet options in recursive resolutions is enabled or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable adding \s-1EDNS\s0 client subnet options in recursive resolutions or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_client_subnet_recursive value
\& my $value = $object\->enable_client_subnet_recursive();
\&
\& #Modify enable_client_subnet_recursive value
\& $object\->enable_client_subnet_recursive(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_client_subnet_forwarding( )"
.IX Subsection "enable_client_subnet_forwarding( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether forwarding \s-1EDNS\s0 client subnet options to upstream servers is enabled or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable forwarding of \s-1EDNS\s0 client subnet options to upstream servers or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_client_subnet_forwarding value
\& my $value = $object\->enable_client_subnet_forwarding();
\&
\& #Modify enable_client_subnet_forwarding value
\& $object\->enable_client_subnet_forwarding(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_delete_associated_ptr( )"
.IX Subsection "enable_delete_associated_ptr( )"
.RS 4
Use this method to enable or disable the ability to automatically remove associated \s-1PTR\s0 records while deleting A or \s-1AAAA\s0 records.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the ability to automatically remove associated \s-1PTR\s0 records while deleting A or \s-1AAAA\s0 records or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_delete_associated_ptr flag
\& my $enable_delete_associated_ptr = $grid_dns\->enable_delete_associated_ptr();
\& #Modify enable_delete_associated_ptr flag
\& $grid_dns\->enable_delete_associated_ptr("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_dns_health_check( )"
.IX Subsection "enable_dns_health_check( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the \s-1DNS\s0 health check is enabled or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DNS\s0 health check, and 'false' to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_dns_health_check value
\& my $value = $object\->enable_dns_health_check();
\&
\& #Modify enable_dns_health_check value 
\& $object\->enable_dns_health_check(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_dns64( )"
.IX Subsection "enable_dns64( )"
.RS 4
Use this method to enable/disable \s-1DNS64\s0 support.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_dns64 flag or \*(L"false\*(R" to deactivate and unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_dns64 flag
\& my $enable_dns64 = $grid_dns\->enable_dns64();
\& #Modify enable_dns64 recursive query flag
\& $grid_dns\->enable_dns64("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_dtc_dns_fall_through( )"
.IX Subsection "enable_dtc_dns_fall_through( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the \s-1DNS\s0 traffic control (\s-1DTC\s0) is enabled to \s-1DNS\s0 fall through or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DTC\s0 to \s-1DNS\s0 fall through or 'false' to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_dtc_dns_fall_through value
\& my $value = $grid_dns\->enable_dtc_dns_fall_through();
\&
\& #Modify enable_dtc_dns_fall_through value
\& $grid_dns\->enable_dtc_dns_fall_through(\*(Aqfalse\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_excluded_domain_names( )"
.IX Subsection "enable_excluded_domain_names( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the excluding domain names from captured \s-1DNS\s0 query and response is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable the excluding domain names from captured \s-1DNS\s0 query and response or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_excluded_domain_names value
\& my $enable_excluded_domain_names = $object\->enable_excluded_domain_names();
\&
\& #Modify enable_excluded_domain_names value
\& $object\->enable_excluded_domain_names(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_fixed_rrset_order_fqdns( )"
.IX Subsection "enable_fixed_rrset_order_fqdns( )"
.RS 4
Use this method to enable or disable fixed RRset order for specified FQDNs.
.Sp
The enable_fixed_rrset_order_fqdns attribute can be specified explicitly. It is also set implicitly when fixed_rrset_order_fqdns is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable fixed RRset order for specified FQDNs or \*(L"false\*(R" to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_fixed_rrset_order_fqdns flag
\& my $enable_fixed_rrset_order_fqdns = $grid_dns\->enable_fixed_rrset_order_fqdns();
\& #Modify enable_fixed_rrset_order_fqdns flag
\& $grid_dns\->enable_fixed_rrset_order_fqdns("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_ftc( )"
.IX Subsection "enable_ftc( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the Fault Tolerant Caching (\s-1FTC\s0) feature is enabled or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable the \s-1FTC\s0 feature or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get enable_ftc
\&   my $enable_ftc = $grid_dns\->enable_ftc();
\&   #Modify enable_ftc
\&   $grid_dns\->enable_ftc(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_gss_tsig( )"
.IX Subsection "enable_gss_tsig( )"
.RS 4
Use this method to enable/disable the appliance to receive GSS-TSIG authenticated updates from \s-1DHCP\s0 clients. You must import the keytab file before you enable this feature. See Infoblox::Session\->\fBimport_data()\fR.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the the appliance to receive GSS-TSIG authenticated updates or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&   #Get enable_gss_tsig value
\&   $my $enable_gss_tsig = $grid_dns\->enable_gss_tsig();
\&
\&   #Modify enable_gss_tsig value
\&
\&   $session\->import_data(
\&        type        => \*(Aqkeytab\*(Aq,
\&        path        => \*(Aq/infoblox/tests/datasets/gss\-tsig\-gs.keytab\*(Aq,
\&        service     => \*(Aqdns\*(Aq,
\&        virtual_ip  => \*(Aq192.168.1.2\*(Aq);
\&
\&   $grid_dns\->enable_gss_tsig(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_host_rrset_order( )"
.IX Subsection "enable_host_rrset_order( )"
.RS 4
Use this method to set or retrieve the grid-level enable_host_rrset_order value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_host_rrset_order flag or \*(L"false\*(R" to deactivate and unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get enable_host_rrset_order
\& my $host_rrset_order = $grid_dns\->enable_host_rrset_order();
\& # Set enable_host_rrset_order
\& $grid_dns\->enable_host_rrset_order("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_hsm_signing( )"
.IX Subsection "enable_hsm_signing( )"
.RS 4
Use this method to enable/disable the \s-1HSM\s0 for \s-1DNSSEC\s0 key generation and signing. To enable this feature, an \s-1HSM\s0 group must be configured with at least one enabled \s-1HSM.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable \s-1HSM\s0 signing or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get enable_hsm_signing
\&   $grid_dns\->enable_hsm_signing( );
\&   #Modify enable_hsm_signing
\&   $grid_dns\->enable_hsm_signing("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_query_rewrite( )"
.IX Subsection "enable_query_rewrite( )"
.RS 4
Use this method to enable or disable \s-1DNS\s0 query rewrite.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable \s-1DNS\s0 query rewrite or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_query_rewrite
\& $grid_dns\->enable_query_rewrite( );
\& #Modify enable_query_rewrite
\& $grid_dns\->enable_query_rewrite("true");
.Ve
.RE
.RS 4
.RE
.SS "excluded_domain_names( )"
.IX Subsection "excluded_domain_names( )"
.RS 4
Use this method to set or retrieve the list of domains that are excluded from \s-1DNS\s0 response and query capturing.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains desired domain names in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get excluded_domain_names value
\& my $excluded_domain_names = $object\->excluded_domain_names();
\&
\& #Modify excluded_domain_names value
\& $object\->excluded_domain_names([\*(Aqdomain1.com\*(Aq, \*(Aqdomain2.com\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "expire_after( )"
.IX Subsection "expire_after( )"
.RS 4
Use this method to set or retrieve the  expiration time of a grid  \s-1DNS\s0 object. If the secondary \s-1DNS\s0 server fails to contact the primary server for the specified interval, the secondary server stops giving out answers about the zone because the zone data is too old to be useful.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Number with the seconds for the expiration time. \fIDefault\fR value is 2419200 seconds (4 weeks).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the expiration time
\& my $expire_after = $grid_dns\->expire_after();
\& #Modify the expiration time
\& $grid_dns\->expire_after(2419200);
.Ve
.RE
.RS 4
.RE
.SS "file_transfer_setting( )"
.IX Subsection "file_transfer_setting( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 capture file transfer settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::FileTransferSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get file_transfer_setting value
\& my $file_transfer_setting = $object\->file_transfer_setting();
\&
\& #Modify file_transfer_setting value
\& $object\->file_transfer_setting($file_transfer);
.Ve
.RE
.RS 4
.RE
.SS "filter_aaaa( )"
.IX Subsection "filter_aaaa( )"
.RS 4
Use this method to set or retrieve the type of \s-1AAAA\s0 filtering for this grid \s-1DNS\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1YES\*(R", \*(L"NO\*(R"\s0 and \*(L"\s-1BREAK_DNSSEC\*(R".\s0 The default value is \*(L"\s-1NO\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the filter aaaa type
\& my $filter_aaaa = $grid_dns\->filter_aaaa();
\& #Modify the filtering
\& $grid_dns\->filter_aaaa("YES");
.Ve
.RE
.RS 4
.RE
.SS "filter_aaaa_list( )"
.IX Subsection "filter_aaaa_list( )"
.RS 4
Use this method to set or retrieve the list of IPv4 addresses and networks from which queries are received. \s-1AAAA\s0 filtering is applied to these addresses.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4 addresses and networks. To return \s-1AAAA\s0 records for queries received from an IPv4 client, add \*(L"!\*(R" as the prefix to the \s-1IP\s0 addresses and networks. Specify \*(L"any\*(R" to allow \s-1AAAA\s0 records to be returned for any query received by an IPv4 client.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get the filter_aaaa list
\& my $filter_aaaa_list = $grid_dns\->filter_aaaa_list();
\& #Modify the filter_aaaa_list
\& $grid_dns\->filter_aaaa_list(["any"]);
\& #Modify the filter_aaaa list
\& $grid_dns\->filter_aaaa_list(["10.0.0.10", "20.0.0.0/24", "!"."30.0.0.30", "!"."40.10.0.0/24"]);
\& #Modify the filter_aaaa list
\& $grid_dns\->filter_aaaa_list(undef);
\& #Use Infoblox::Grid::NamedACL
\& $grid_dns\->filter_aaaa_list($nacl);
.Ve
.RE
.RS 4
.RE
.SS "forward_only( )"
.IX Subsection "forward_only( )"
.RS 4
Use this method to set or retrieve the forward only flag of a grid  \s-1DNS\s0 object. On enabling, the Infoblox appliance will  send queries to  forwarders only, and not to  internal or  Internet root servers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the forward_only flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the forward only flag
\& my $forward_only = $grid_dns\->forward_only();
\& #Modify the forward only
\& $grid_dns\->forward_only("true");
.Ve
.RE
.RS 4
.RE
.SS "forward_updates( )"
.IX Subsection "forward_updates( )"
.RS 4
Use this method to set or retrieve the  forward_updates flag of a grid  \s-1DNS\s0 object. This enables a secondary  server to receive updates from the \s-1DHCP\s0 server, and then forward them to the primary \s-1DNS\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the forward_updates flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the forward updates flag
\& my $forward_updates = $grid_dns\->forward_updates();
\& #Modify the forward updates flag
\& $grid_dns\->forward_updates("true");
.Ve
.RE
.RS 4
.RE
.SS "forwarders( )"
.IX Subsection "forwarders( )"
.RS 4
Use this method to set or retrieve the forwarders list of a grid  \s-1DNS\s0 object. A forwarder is essentially a name server  to which other name servers first send all of their off-site  queries. The forwarder builds up a cache of information, avoiding the necessity for the other name servers to send queries off-site.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains \s-1IP\s0 address(es).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the forwarders list
\& my $forwarders_list = $grid_dns\->forwarders();
\& #Modify the forwarders list
\& $grid_dns\->forwarders(["2.2.2.2", "3.3.3.3"]);
.Ve
.RE
.RS 4
.RE
.SS "fixed_rrset_order_fqdns( )"
.IX Subsection "fixed_rrset_order_fqdns( )"
.RS 4
Use this method to set or retrieve configuration for fixed \s-1RRSET\s0 order for specified FQDNs.
.Sp
Setting this method to a defined value implicitly sets the enable_fixed_rrset_order_fqdns method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to disable fixed RRset order of FQDNs and automatically resets the enable_fixed_rrset_order_fqdns method to \*(L"false\*(R".
.Sp
Note that when fixed_rrset_order_fqdns is set to a defined value and enable_fixed_rrset_order_fqdns is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->fixed_rrset_order_fqdns($fqdns); \f(CW$object\fR\->enable_fixed_rrset_order_fqdns(\*(L"false\*(R"); will set enable_fixed_rrset_order_fqdns to \*(L"false\*(R", and the sequence \f(CW$object\fR\->enable_fixed_rrset_order_fqdns(\*(L"false\*(R"); \f(CW$object\fR\->fixed_rrset_order_fqdns($fqdns); will result in enable_fixed_rrset_order_fqdns=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::Grid::DNS::FixedRRSetOrderFQDN objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the fixed_rrset_order_fqdns list
\& my $fixed_rrset_order_fqdns = $grid_dns\->fixed_rrset_order_fqdns();
\& #Modify the fixed_rrset_order_fqdns list
\& $grid_dns\->fixed_rrset_order_fqdns([$fqdn1, $fqdn2]);
.Ve
.RE
.RS 4
.RE
.SS "ftc_expired_record_ttl( )"
.IX Subsection "ftc_expired_record_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1TTL\s0 value of the expired Fault Tolerant Caching (\s-1FTC\s0) record in \s-1DNS\s0 responses.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer, from 0 to 4294967295, that represents the \s-1TTL\s0 in seconds. The default value is 5.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get ftc_expired_record_ttl
\&   my $ftc_expired_record_ttl = $grid_dns\->ftc_expired_record_ttl( );
\&   #Modify ftc_expired_record_ttl
\&   $grid_dns\->ftc_expired_record_ttl(60);
.Ve
.RE
.RS 4
.RE
.SS "ftc_expired_record_timeout( )"
.IX Subsection "ftc_expired_record_timeout( )"
.RS 4
Use this method to set or retrieve the timeout value after which the expired Fault Tolerant Caching (\s-1FTC\s0) record becomes stale and is no longer valid.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer, from 0 to 4294967295, that represents the timeout in seconds. The default value is 86400.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get ftc_expired_record_timeout
\&   my $ftc_expired_record_timeout = $grid_dns\->ftc_expired_record_timeout( );
\&   #Modify ftc_expired_record_timeout
\&   $grid_dns\->ftc_expired_record_timeout(3600);
.Ve
.RE
.RS 4
.RE
.SS "gss_tsig_keys( )"
.IX Subsection "gss_tsig_keys( )"
.RS 4
Use this method to set or retrieve the list of Kerberos keys for a Grid \s-1DNS\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::Grid::KerberosKey objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get the Kerberos keys list
\& my $kerberos_keys_list = $grid_dns\->gss_tsig_keys();
\& #Modify the Kerberos keys list
\& my $kerberos_key1 = Infoblox::Cluster::KerberosKey\->new(
\&        principal => \*(Aqhost/appliance.ivan.test1@LADYBUG.LOCAL\*(Aq,
\&        );
\& my $kerberos_key2 = Infoblox::Cluster::KerberosKey\->new(
\&        principal => \*(Aqhost/appliance.ivan.test2@LADYBUG.LOCAL\*(Aq,
\&        );
\& $grid_dns\->gss_tsig_keys([$kerberos_key1, $kerberos_key2]);
.Ve
.RE
.RS 4
.RE
.SS "host_name_restriction_policy( )"
.IX Subsection "host_name_restriction_policy( )"
.RS 4
Use this method to set or retrieve the default host name restriction policy of a grid  \s-1DNS\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
String with the name of predefined record policies or  user-defined record policies. The default value is the predefined record policy \*(L"Allow Underscore\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get host name restriction policy
\& my $host_name_restriction_policy = $grid_dns\->host_name_restriction_policy();
\& #Modify host name restriction policy
\& $grid_dns\->host_name_restriction_policy("Allow Any");
.Ve
.RE
.RS 4
.RE
.SS "lame_ttl( )"
.IX Subsection "lame_ttl( )"
.RS 4
Use this method to set or retrieve the number of seconds to cache lame delegations or lame servers.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The number of seconds to cache lame delegations or lame servers. The default value is 600.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lame_ttl
\& my $lame_ttl = $grid_dns\->lame_ttl();
\& #Modify lame_ttl
\& $grid_dns\->lame_ttl(700);
.Ve
.RE
.RS 4
.RE
.SS "logging_categories( )"
.IX Subsection "logging_categories( )"
.RS 4
Use this method to set or retrieve the logging categories. It is possible to specify several \s-1BIND\s0 logging message categories to be captured by syslog.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference  that contains one or more of the following values:
.Sp
\&\*(L"general\*(R"          \- Records the \s-1BIND\s0 messages that are not specifically classified.
.Sp
\&\*(L"config\*(R"           \- Records the parsing messages of the configuration file.
.Sp
\&\*(L"dnssec\*(R"           \- Records the DNSSEC-signed responses.
.Sp
\&\*(L"network\*(R"          \- Records the network operation messages.
.Sp
\&\*(L"queries\*(R"          \- Records the query messages.
.Sp
\&\*(L"query_rewrite\*(R"    \- Records rewritten queries.
.Sp
\&\*(L"responses\*(R"        \- Records the response messages.
.Sp
\&\*(L"security\*(R"         \- Records the approved and denied requests.
.Sp
\&\*(L"xfer-in\*(R"          \- Records zone transfer messages from the remote name servers to the appliance.
.Sp
\&\*(L"xfer-out\*(R"         \- Records zone transfer messages from the Infoblox appliance to remote name servers.
.Sp
\&\*(L"update\*(R"           \- Records the dynamic update instances.
.Sp
\&\*(L"resolver\*(R"         \- Records the \s-1DNS\s0 resolution instances, including recursive queries from resolvers.
.Sp
\&\*(L"notify\*(R"           \- Records the asynchronous zone change notification messages.
.Sp
\&\*(L"lame_servers\*(R"     \- Records bad delegation instances.
.Sp
\&\*(L"database\*(R"         \- Records \s-1BIND\s0 internal database processes.
.Sp
\&\*(L"client\*(R"           \- Records client requests.
.Sp
\&\*(L"rpz\*(R"              \- Records \s-1RPZ\s0 messages.
.Sp
\&\*(L"dtc_gslb\*(R"         \- Records the \s-1DTC GSLB\s0 activity.
.Sp
\&\*(L"dtc_health\*(R"       \- Records the \s-1DTC\s0 health monitoring.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the logging categories list
\& my $logging_categories_list = $grid_dns\->logging_categories();
\& #Modify the logging categories list
\& $grid_dns\->logging_categories(["general", "database", "queries"]);
.Ve
.RE
.RS 4
.RE
.SS "logging_facility( )"
.IX Subsection "logging_facility( )"
.RS 4
Use this method to set or retrieve the logging facility of a grid  \s-1DNS\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the facility name. Valid values are: \*(L"daemon\*(R", \*(L"local0\*(R", \*(L"local1\*(R", \*(L"local2\*(R", \*(L"local3\*(R", \*(L"local4\*(R", \*(L"local5\*(R", \*(L"local6\*(R", and \*(L"local7\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the logging facility
\& my $logging_facility = $grid_dns\->logging_facility();
\& #Modify the logging facility
\& $grid_dns\->logging_facility("daemon");
.Ve
.RE
.RS 4
.RE
.SS "max_cache_ttl( )"
.IX Subsection "max_cache_ttl( )"
.RS 4
Use this method to set or retrieve the maximum time (in seconds) for which the server will cache positive answers.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The maximum time is specified in seconds. The default value is 604800.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get max_cache_ttl
\& my $max_cache_ttl = $grid_dns\->max_cache_ttl();
\& #Modify max_cache_ttl
\& $grid_dns\->max_cache_ttl(400);
.Ve
.RE
.RS 4
.RE
.SS "max_ncache_ttl( )"
.IX Subsection "max_ncache_ttl( )"
.RS 4
Use this method to set or retrieve the maximum time (in seconds) for which the server will cache negative (\s-1NXDOMAIN\s0) responses.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The maximum time is specified in seconds. The default value is 10800. The maximum allowed value is 604800.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get max_ncache_ttl
\& my $max_ncache_ttl = $grid_dns\->max_ncache_ttl();
\& #Modify max_ncache_ttl
\& $grid_dns\->max_ncache_ttl(400);
.Ve
.RE
.RS 4
.RE
.SS "max_cached_lifetime( )"
.IX Subsection "max_cached_lifetime( )"
.RS 4
Use this method to set or retrieve maximum time in seconds a \s-1DNS\s0 response can be stored in the hardware acceleration cache.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integer between 60 and 86400, inclusive. Default value is 86400.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get max_cached_lifetime
\& my $max_cached_lifetime = $grid_dns\->max_cached_lifetime();
\& #Modify max_cached_lifetime
\& $grid_dns\->max_cached_lifetime(400);
.Ve
.RE
.RS 4
.RE
.SS "member_secondary_notify( )"
.IX Subsection "member_secondary_notify( )"
.RS 4
Use this method to set or retrieve the  member_secondary_notify flag of a grid  \s-1DNS\s0 object. When enabled, this feature allows grid members that are authoritative secondary servers to send notification messages to external name servers, if the grid member that is primary for a zone fails or loses connectivity.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set member_secondary_notify flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the member secondary notification flag
\& my $member_secondary_notify = $grid_dns\->member_secondary_notify();
\& #Modify the member secondary notification flag
\& $grid_dns\->member_secondary_notify("false");
.Ve
.RE
.RS 4
.RE
.SS "negative_ttl( )"
.IX Subsection "negative_ttl( )"
.RS 4
Use this method to set or retrieve the negative \s-1TTL\s0 value of a grid  \s-1DNS\s0 object. This interval tells the secondary how long data can be cached for  \*(L"Does Not Respond\*(R" responses.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Number for the negative \s-1TTL,\s0 in seconds. \fIDefault\fR value is 900 seconds.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the negative ttl value
\& my $negative_ttl = $grid_dns\->negative_ttl();
\& #Modify the negative ttl value
\& $grid_dns\->negative_ttl(800);
.Ve
.RE
.RS 4
.RE
.SS "next_secure_type( )"
.IX Subsection "next_secure_type( )"
.RS 4
Use this method to set or retrieve resource record type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is '\s-1NSEC\s0' or '\s-1NSEC3\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the next_secure_type value
\& my $next_secure_type = $grid_dns\->next_secure_type();
\& #Modify the next_secure_type value
\& $grid_dns\->next_secure_type(\*(AqNSEC3\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "notify_delay( )"
.IX Subsection "notify_delay( )"
.RS 4
Use this method to specify with how many seconds of delay the notify messages are sent to secondaries.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integer between 5 and 86400, inclusive. Default value is 5.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting notify_delay
\&   my $notify_delay = $griddns\->notify_delay( );
\&   #Modifying notify_delay
\&   $griddns\->notify_delay(5);
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_redirect( )"
.IX Subsection "nxdomain_redirect( )"
.RS 4
Use this method to enable or disable \s-1NXDOMAIN\s0 redirection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the nxdomain_redirect flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting nxdomain_redirect
\&   my $nxdomain_redirect = $griddns\->nxdomain_redirect( );
\&   #Modifying nxdomain_redirect
\&   $griddns\->nxdomain_redirect("true");
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_redirect_addresses( )"
.IX Subsection "nxdomain_redirect_addresses( )"
.RS 4
Use this method to set the \s-1NXDOMAIN\s0 redirection addresses.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of IPv4 addresses. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_redirect_addresses
\&   my $nxdomain_redirect_addresses = $griddns\->nxdomain_redirect_addresses( );
\&   #Modify nxdomain_redirect_addresses
\&   $griddns\->nxdomain_redirect_addresses(["10.0.0.10", "10.0.0.20"]);
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_redirect_addresses_ipv6( )"
.IX Subsection "nxdomain_redirect_addresses_ipv6( )"
.RS 4
Use this method to set the \s-1NXDOMAIN\s0 redirection IPv6 addresses.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of IPv6 addresses. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_redirect_addresses_ipv6
\&   my $nxdomain_redirect_addresses_ipv6 = $griddns\->nxdomain_redirect_addresses_ipv6( );
\&   #Modify nxdomain_redirect_addresses_ipv6
\&   $griddns\->nxdomain_redirect_addresses_ipv6(["2001:db8::1", "2002:ffff::1"]);
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_redirect_ttl( )"
.IX Subsection "nxdomain_redirect_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1TTL\s0 value of synthetic \s-1DNS\s0 responses that result from \s-1NXDOMAIN\s0 redirection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer, from 0 to 4294967295, that represents the \s-1TTL\s0 in seconds. The default value is 60.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_redirect_ttl
\&   my $nxdomain_redirect_ttl = $griddns\->nxdomain_redirect_ttl( );
\&   #Modify nxdomain_redirect_ttl
\&   $griddns\->nxdomain_redirect_ttl(60);
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_log_query( )"
.IX Subsection "nxdomain_log_query( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether \s-1NXDOMAIN\s0 redirection queries are logged.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable logging, or \*(L"false\*(R" to deactivate it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_log_query
\&   my $nxdomain_log_query = $griddns\->nxdomain_log_query( );
\&   #Modify nxdomain_log_query
\&   $griddns\->nxdomain_log_query("true");
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_rulesets( )"
.IX Subsection "nxdomain_rulesets( )"
.RS 4
Use this method to specify or retrieve Infoblox::DNS::Ruleset object names assigned at the grid level for \s-1NXDOMAIN\s0 redirection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains the names of the Infoblox::DNS::Ruleset objects assigned to the grid. The names must be in string format.  The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_rulesets
\&   my $nxdomain_rulesets = $griddns\->nxdomain_rulesets();
\&   #Modify nxdomain_rulesets
\&   $griddns\->nxdomain_rulesets(["ruleset1", "ruleset2"]);
.Ve
.RE
.RS 4
.RE
.SS "notify_source_port( )"
.IX Subsection "notify_source_port( )"
.RS 4
Use this method to set or retrieve the  source port  number for notify messages. When requesting zone transfers from the primary server, some secondary \s-1DNS\s0 servers use the source port number (the primary server used to send the notify message) as the destination port number in the zone transfer request.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Source port number for notify  messages. Valid values are between 1 and 63999. \fIDefault\fR is picked by \s-1BIND.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the notify source port value
\& my $notify_source_port = $grid_dns\->notify_source_port();
\& #Modify the notify source port value
\& $grid_dns\->notify_source_port(77);
.Ve
.RE
.RS 4
.RE
.SS "nsgroup_default( )"
.IX Subsection "nsgroup_default( )"
.RS 4
Use this method to set or retrieve the default nameserver group.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the name of the default nameserver group. \fIDefault\fR value is None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the default nameserver group
\& my $nsgroup_default = $grid_dns\->nsgroup_default();
\& #Modify the default nameserver group
\& $grid_dns\->nsgroup_default("ns_group_A");
.Ve
.RE
.RS 4
.RE
.SS "nsgroups( )"
.IX Subsection "nsgroups( )"
.RS 4
Use this method to set or retrieve the list of nameserver groups. A name server group is a collection of one primary \s-1DNS\s0 server and one or more secondary \s-1DNS\s0 servers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference  that contains Infoblox::Grid::DNS::Nsgroup and Infoblox::DNS::Member object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get the nameserver group
\& my $nsgroup = $grid_dns\->nsgroups();
\& #Modify the nameserver group
\& #Creating Member objects.
\& my $member1 = Infoblox::DNS::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => "192.168.1.2",
\&     stealth  => "false"
\&     );
\&
\& #Creating a nameserver object.
\& my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns1.test.extra",
\&     ipv4addr => "4.4.4.4",
\&     stealth  => "false",
\&     TSIGname => "tsig_name",
\&     TSIGkey  => "ZX1jVJl7C58GT/sc7Q3ucA=="
\&     );
\&
\& #Creating a nameserver object.
\& my $nameserver2 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns2.test.extra",
\&     ipv4addr => "5.5.5.5",
\&     stealth  => "false",
\&     TSIGname => "tsig_name2",
\&     TSIGkey  => "qwqwqwqwqwqwqwqwqwqwqA=="
\&     );
\&
\& my $nsg1 = Infoblox::Grid::DNS::Nsgroup\->new(
\&     name        => "ns_group_A",
\&     primary     => $member1,
\&     secondaries => [$nameserver1, $nameserver2]
\&     );
\&
\& $grid_dns\->nsgroups([$nsg1]);
.Ve
.RE
.RS 4
.RE
.SS "preserve_host_rrset_order_on_secondaries( )"
.IX Subsection "preserve_host_rrset_order_on_secondaries( )"
.RS 4
Use this method to set or retrieve the grid-level preserve_host_rrset_order_on_secondaries value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the preserve_host_rrset_order_on_secondaries flag or \*(L"false\*(R" to unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get preserve_host_rrset_order_on_secondaries
\& my $preserve_order = $griddns\->preserve_host_rrset_order_on_secondaries();
\& # Set preserve_host_rrset_order_on_secondaries
\& $griddns\->preserve_host_rrset_order_on_secondaries("true");
.Ve
.RE
.RS 4
.RE
.SS "query_source_port( )"
.IX Subsection "query_source_port( )"
.RS 4
Use this method to set or retrieve the query source port of a grid  \s-1DNS\s0 object. Specifying a source port number for recursive queries ensures that a firewall will allow the response.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Source port number for recursive queries . Valid values are between 1 and 63999. \fIDefault\fR is picked by \s-1BIND.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the query source port
\& my $query_source_port = $grid_dns\->query_source_port();
\& #Modify the query source port
\& $grid_dns\->query_source_port(99);
.Ve
.RE
.RS 4
.RE
.SS "query_rewrite_prefix( )"
.IX Subsection "query_rewrite_prefix( )"
.RS 4
Use this method to set or retrieve the domain name prefix for \s-1DNS\s0 query rewrite.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is the domain name prefix in string format. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get query_rewrite_prefix
\& my $query_rewrite_prefix = $grid_dns\->query_rewrite_prefix();
\& #Modify query_rewrite_prefix
\& $grid_dns\->query_rewrite_prefix("user\-ersgcds");
.Ve
.RE
.RS 4
.RE
.SS "query_rewrite_domain_names( )"
.IX Subsection "query_rewrite_domain_names( )"
.RS 4
Use this method to set or retrieve the list of domain names that trigger \s-1DNS\s0 query rewrite.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains domain names in string format. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get query_rewrite_domain_names
\& my $query_rewrite_domain_names = $grid_dns\->query_rewrite_domain_names();
\& #Modify query_rewrite_domain_names
\& $grid_dns\->query_rewrite_domain_names(["florida.south", "florida.west"]);
.Ve
.RE
.RS 4
.RE
.SS "scavenging_settings( )"
.IX Subsection "scavenging_settings( )"
.RS 4
Use this method to set or retrieve the Grid-level scavenging settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::ScavengingSetting object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get scavenging_settings value
\& my $scavenging_settings = $object\->scavenging_settings();
\&
\& #Modify scavenging_settings value
\& $object\->scavenging_settings($scavenging_settings);
.Ve
.RE
.RS 4
.RE
.SS "record_name_policies( )"
.IX Subsection "record_name_policies( )"
.RS 4
Use this method to set or retrieve the list of record name policies.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference  that contains Infoblox::Grid::RecordNamePolicy object(s).
By default there are three  predefined policies.
.Sp
Policy Name                     Regex Applied
.Sp
\&\*(L"Allow Any\*(R"                      .+
.Sp
\&\*(L"Allow Underscore\*(R"               ^[\-a\-zA\-Z0\-9_.]+$
.Sp
\&\*(L"Strict Hostname Checking\*(R"       ^[a\-zA\-Z0\-9]$|^[a\-zA\-Z0\-9][\-a\-zA\-Z0\-9.]*[a\-zA\-Z0\-9]$
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& #Get record name policies
\& my $record_name_policies = $grid_dns\->record_name_policies();
\& #Modify record_name_policies
\&
\& #Creating record name policy objects.
\& my $recpolicy1 = Infoblox::Grid::RecordNamePolicy\->new(
\&     regex => "*",
\&     name  => "Local Policy",
\&     );
\& my $recpolicy2 = Infoblox::Grid::RecordNamePolicy\->new(
\&     regex => ".+",
\&     name  => "Allow Any",
\&     );
\& my $recpolicy3 = Infoblox::Grid::RecordNamePolicy\->new(
\&     regex => "^[\-a\-zA\-Z0\-9_.]+\e$",
\&     name  => "Allow Underscore",
\&     );
\& my $recpolicy4 = Infoblox::Grid::RecordNamePolicy\->new(
\&     regex => "^[a\-zA\-Z0\-9]\e$|^[a\-zA\-Z0\-9][\-a\-zA\-Z0\-9.]*[a\-zA\-Z0\-9]\e$",
\&     name  => "Strict Hostname Checking",
\&     );
\&
\& $grid_dns\->record_name_policies([$recpolicy1, $recpolicy2, $recpolicy3, $recpolicy4]);
.Ve
.RE
.RS 4
.RE
.SS "recursive_query_list( )"
.IX Subsection "recursive_query_list( )"
.RS 4
Use this method to set or retrieve the recursive query list of a Grid \s-1DNS\s0 object. This list specifies from which \s-1IP\s0 addresses, networks and \s-1TSIG\s0 key authenticated clients recursive queries are allowed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses, networks, and/or Infoblox::DNS::TSIGKey objects. To deny queries, add \*(L"!\*(R" as a prefix to \s-1IP\s0 addresses and/or networks. Specify \*(L"any\*(R" to allow recursive queries from any \s-1IP\s0 address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the recursive query list
\& my $recursive_query_list = $grid_dns\->recursive_query_list();
\& #Modify the recursive query list
\& $grid_dns\->recursive_query_list(["any"]);
\&
\& #Creating a TSIG key object
\& my $tsig_key2 = $session\->gen_tsig_key();
\&
\& my $key2 = Infoblox::DNS::TSIGKey\->new(
\&     name => "rcl_key",
\&     key  => $tsig_key2
\&     );
\& #Modify the recursive query list
\& $grid_dns\->recursive_query_list(["10.0.0.10", "20.0.0.0/24","2010::256/64", $key2, "!"."2011::23cb/64","!"."30.0.0.30", "!"."40.10.0.0/24"]);
\& #Modify the recursive query list
\& $grid_dns\->recursive_query_list(undef);
\& #Use Infoblox::Grid::NamedACL
\& $grid_dns\->recursive_query_list($nacl);
.Ve
.RE
.RS 4
.RE
.SS "refresh_timer( )"
.IX Subsection "refresh_timer( )"
.RS 4
Use this method to set or retrieve the refresh time. This interval tells the secondary how often to send a message to the primary for a zone to check that its data is current, and retrieve fresh data if it is not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Number with the seconds for the refresh time. \fIDefault\fR value is 10800 seconds (3 hours).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the refresh time
\& my $refresh_timer = $grid_dns\->refresh_timer();
\& #Modify the refresh time
\& $grid_dns\->refresh_timer(108);
.Ve
.RE
.RS 4
.RE
.SS "resolver_query_timeout( )"
.IX Subsection "resolver_query_timeout( )"
.RS 4
Use this method to set or retrieve recursive query timeout.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer that contains the recursive query time (in seconds) for the resolver.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get resolver_query_timeout
\& my $resolver_query_timeout = $grid_dns\->resolver_query_timeout();
\& #Modify resolver_query_timeout
\& $grid_dns\->resolver_query_timeout(29);
.Ve
.RE
.RS 4
.RE
.SS "response_rate_limiting( )"
.IX Subsection "response_rate_limiting( )"
.RS 4
Use this method to set or retrieve response rate limiting settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::ResponseRateLimiting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get response_rate_limiting
\& my $response_rate_limiting = $grid_dns\->response_rate_limiting();
\& #Modify response_rate_limiting
\& $grid_dns\->response_rate_limiting($response_rate_limiting);
.Ve
.RE
.RS 4
.RE
.SS "restart_setting( )"
.IX Subsection "restart_setting( )"
.RS 4
Use this method to set or retrive Grid \s-1DNS\s0 service restart settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::ServiceRestart object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get restart_setting 
\& my $restart_setting = $grid_dns\->restart_setting();
\& #Modify the retry time
\& $grid_dns\->restart_setting($restart_setting);
.Ve
.RE
.RS 4
.RE
.SS "retry_timer( )"
.IX Subsection "retry_timer( )"
.RS 4
Use this method to set or retrieve the retry time. This interval tells the secondary how long to wait before attempting to recontact the primary after a connection failure occurs between the  two servers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Number with the seconds for the retry time. \fIDefault\fR value is 3600 seconds (1 hour).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the retry time
\& my $retry_timer = $grid_dns\->retry_timer();
\& #Modify the retry time
\& $grid_dns\->retry_timer(360);
.Ve
.RE
.RS 4
.RE
.SS "rootNS( )"
.IX Subsection "rootNS( )"
.RS 4
Use this method to set or retrieve the list of customized root nameserver(s).  You can use Internet root name  servers or specify  host  names and \s-1IP\s0  addresses of custom root name servers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference  that contains Infoblox::Grid::RootNameServer object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get the root nameserver list
\& my $rootNS_list = $grid_dns\->rootNS();
\& #Modify the root nameserver list
\& #Creating RootNameServer objects.
\& my $rootns1 = Infoblox::Grid::RootNameServer\->new(
\&     ipv4addr  => "44.44.44.44",
\&     host_name => "test1.com",
\&     );
\&
\& my $rootns2 = Infoblox::Grid::RootNameServer\->new(
\&     ipv4addr  => "55.5.5.5",
\&     host_name => "test2.com",
\&     );
\&
\& $grid_dns\->rootNS([$rootns1, $rootns2]);
.Ve
.RE
.RS 4
.RE
.SS "serial_query_rate( )"
.IX Subsection "serial_query_rate( )"
.RS 4
Use this method to set or retrieve the number of maximum concurrent \s-1SOA\s0 queries per second for the Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integer between 20 and 1000, inclusive. Default value is 20.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $grid_dns\->serial_query_rate();
\& # Modify attribute value
\& $grid_dns\->serial_query_rate(30);
.Ve
.RE
.RS 4
.RE
.SS "server_id_directive( )"
.IX Subsection "server_id_directive( )"
.RS 4
Use this method to set or retrieve the value for the \s-1BIND\s0 and \s-1UNBOUND\s0 'server\-id' directive.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are \*(L"\s-1NONE\*(R"\s0 and \*(L"\s-1HOSTNAME\*(R".\s0 The default value is \*(L"\s-1NONE\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get server_id_directive
\&   my $server_id_directive = $grid_dns\->server_id_directive();
\&   #Modify server_id_directive
\&   $grid_dns\->server_id_directive("HOSTNAME");
.Ve
.RE
.RS 4
.RE
.SS "sortlist( )"
.IX Subsection "sortlist( )"
.RS 4
Use this method to set or retrieve the sort list of a grid  \s-1DNS\s0 object. A sort list sorts the order of addresses in responses made to \s-1DNS\s0 queries.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference  that contains Infoblox::DNS::Sortlist object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get the sort list
\& my $sortlist = $grid_dns\->sortlist();
\& #Modify the sort list
\& #Creating a SortList object.
\& my $sort1 = Infoblox::DNS::Sortlist\->new(
\&     match_list      => ["10.20.1.0/24", "10.20.2.0/24"],
\&     source_ipv4addr => "1.2.3.4"
\&     );
\&
\& $grid_dns\->sortlist([$sort1]);
.Ve
.RE
.RS 4
.RE
.SS "store_locally( )"
.IX Subsection "store_locally( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the storing of query capture reports on the appliance is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable storing of query capture reports on the appliance or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get store_locally value
\& my $store_locally = $object\->store_locally();
\&
\& #Modify store_locally value
\& $object\->store_locally(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "transfer_excluded_servers( )"
.IX Subsection "transfer_excluded_servers( )"
.RS 4
Use this method to set or retrieve the  list of excluded servers  for zone transfers of a grid  \s-1DNS\s0  object. This list exclude the specified \s-1DNS\s0 servers during zone  transfers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference  that contains \s-1IP\s0  addresses of \s-1DNS\s0  servers.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the transfer excluded server list
\& my $transfer_excluded_servers = $grid_dns\->transfer_excluded_servers();
\& #Modify the transfer excluded server list
\& $grid_dns\->transfer_excluded_servers(["10.0.0.10", "20.0.0.0"]);
.Ve
.RE
.RS 4
.RE
.SS "transfer_format( )"
.IX Subsection "transfer_format( )"
.RS 4
Use this method to set or retrieve the zone transfer format. The zone transfer format determines the \s-1BIND\s0 format for a zone transfer. This provides tracking capabilities for single or multiple transfers and their associated servers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is one of the  following:
.Sp
\&\*(L"many_answers\*(R" \-  Includes as many records as the packet size  allows.
.Sp
\&\*(L"one_answer\*(R"   \-  Includes one record per packet.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the zone transfer format
\& my $transfer_format = $grid_dns\->transfer_format();
\& #Modify the zone transfer format
\& $grid_dns\->transfer_format("many_answers");
.Ve
.RE
.RS 4
.RE
.SS "transfers_in( )"
.IX Subsection "transfers_in( )"
.RS 4
Use this method to set or retrieve the number of maximum concurrent transfers for the Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integer between 10 and 100, inclusive. Default value is 10.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $grid_dns\->transfers_in();
\& # Modify attribute value
\& $grid_dns\->transfers_in(20);
.Ve
.RE
.RS 4
.RE
.SS "transfers_out( )"
.IX Subsection "transfers_out( )"
.RS 4
Use this method to set or retrieve the number of maximum outbound concurrent zone transfers for the Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integers between 1 and 100, inclusive. The default value is 10.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $grid_dns\->transfers_out();
\& # Modify attribute value
\& $grid_dns\->transfers_out(20);
.Ve
.RE
.RS 4
.RE
.SS "transfers_per_ns( )"
.IX Subsection "transfers_per_ns( )"
.RS 4
Use this method to set or retrieve the number of maximum concurrent transfers per member for the Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integer between 2 and 100, inclusive. Default value is 2.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $grid_dns\->transfers_per_ns();
\& # Modify attribute value
\& $grid_dns\->transfers_per_ns(3);
.Ve
.RE
.RS 4
.RE
.SS "rpz_disable_nsdname_nsip( )"
.IX Subsection "rpz_disable_nsdname_nsip( )"
.RS 4
Use this method to set or retrieve the option to disable \s-1NSDNAME\s0 and \s-1NSIP\s0 resource records from \s-1RPZ\s0 feeds.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the filter (to filter out \s-1NSDNAME\s0 and \s-1NSIP\s0 resource records). Specify \*(L"false\*(R" to disable the filter. Valid values are \*(L"true\*(R" or \*(L"false\*(R". Default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specify a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $grid_dns\->rpz_disable_nsdname_nsip();
\& # Modify attribute value
\& $grid_dns\->rpz_disable_nsdname_nsip("true");
.Ve
.RE
.RS 4
.RE
.SS "rpz_drop_ip_rule_enabled( )"
.IX Subsection "rpz_drop_ip_rule_enabled( )"
.RS 4
Use this method to set or retreive the flag that indicates whether the \s-1DNS\s0 server ignores RPZ-IP triggers with large prefix lengths or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable ignoring of RPZ-IP triggers with large prefix lengths or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $grid_dns\->rpz_drop_ip_rule_enabled();
\& # Modify attribute value
\& $grid_dns\->rpz_drop_ip_rule_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "rpz_drop_ip_rule_min_prefix_length_ipv4( )"
.IX Subsection "rpz_drop_ip_rule_min_prefix_length_ipv4( )"
.RS 4
Use this method to set or retreive minimum prefix length for IPv4 RPZ-IP triggers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 31 that represents prefix length (in bits) for IPv4 RPZ-IP triggers.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $grid_dns\->rpz_drop_ip_rule_min_prefix_length_ipv4();
\& # Modify attribute value
\& $grid_dns\->rpz_drop_ip_rule_min_prefix_length_ipv4("16");
.Ve
.RE
.RS 4
.RE
.SS "rpz_drop_ip_rule_min_prefix_length_ipv6( )"
.IX Subsection "rpz_drop_ip_rule_min_prefix_length_ipv6( )"
.RS 4
Use this method to set or retreive minimum prefix length for IPv6 RPZ-IP triggers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 127 that represents prefix length (in bits) for IPv6 RPZ-IP triggers.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $grid_dns\->rpz_drop_ip_rule_min_prefix_length_ipv6();
\& # Modify attribute value
\& $grid_dns\->rpz_drop_ip_rule_min_prefix_length_ipv6("120");
.Ve
.RE
.RS 4
.RE
.SS "rpz_qname_wait_recurse( )"
.IX Subsection "rpz_qname_wait_recurse( )"
.RS 4
Use this method to enable or disable recursive \s-1RPZ\s0 lookups.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable recursive \s-1RPZ\s0 lookups or \*(L"false\*(R" to disable them. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $grid_dns\->rpz_qname_wait_recurse();
\& # Modify attribute value
\& $grid_dns\->rpz_qname_wait_recurse("true");
.Ve
.RE
.RS 4
.RE
.SS "zone_deletion_double_confirm( )"
.IX Subsection "zone_deletion_double_confirm( )"
.RS 4
Use this method to  enable or  disable double confirmation  during zone deletion.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to  enable the zone_deletion_double_confirm flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the double confirmation of zone deletion flag
\& my $zone_deletion_double_confirm = $grid_dns\->zone_deletion_double_confirm();
\& #Modify the double confirmation of zone deletion flag
\& $grid_dns\->zone_deletion_double_confirm("false");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as get and modify. This sample code also includes error handling for the operations.
.PP
\&\fB#Preparation prior to getting and modifying a grid \s-1DNS\s0 object\fR
.PP
.Vb 2
\& use strict;
\& use Infoblox;
\&
\& #Creating a session to appliance.
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\&     );
\& unless( $session ){
\&     die("Constructor for session failed:",
\&     Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print" Session object created successfully \en";
\&
\& #Creating RootNameServer objects.
\& my $rootns1 = Infoblox::Grid::RootNameServer\->new(
\&     ipv4addr  => "44.44.44.44",
\&     host_name => "test1.com",
\&     );
\& unless( $rootns1 ){
\&     die("Constructor for rootnameserver1 failed:",
\&     Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print" Rootnameserver1 object created successfully \en";
\&
\& my $rootns2 = Infoblox::Grid::RootNameServer\->new(
\&     ipv4addr  => "55.5.5.5",
\&     host_name => "test2.com",
\&     );
\& unless( $rootns2 ){
\&     die("Constructor for rootnameserver2 failed:",
\&     Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print" Rootnameserver2 object created successfully \en";
\&
\& #Creating Transfer Key objects.
\& my $key1 = Infoblox::DNS::TSIGKey\->new(
\&     name => "tsig_xfer",
\&     key  => ":2xCOMPAT"
\&     );
\& unless( $key1 ){
\&     die("Constructor for transfer key \e(key1\e) failed:",
\&     Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print" Transfer key object \e(key1\e) created successfully \en";
\&
\& my $tsig_key1 = $session\->gen_tsig_key();
\& unless( $tsig_key1 ){
\&     die("Generate tsig_key1 failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& my $key2 = Infoblox::DNS::TSIGKey\->new(
\&     name => "transfer_key",
\&     key  => $tsig_key1
\&     );
\& unless( $key2 ){
\&     die("Constructor for transfer key \e(key2\e) failed:",
\&     Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print" Transfer key object \e(key2\e) created successfully \en";
\&
\& #Creating Update Key object.
\& my $update_key1 = $session\->gen_tsig_key();
\& unless( $update_key1 ){
\&     die("Generate update_key1 failed:",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& my $up_key1 = Infoblox::DNS::TSIGKey\->new(
\&     name => "update_key",
\&     key  => $update_key1
\&     );
\& unless( $up_key1 ){
\&     die("Constructor for update key failed: ",
\&     Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print" Update key object created successfully \en";
\&
\& #Creating a SortList object.
\& my $sort1 = Infoblox::DNS::Sortlist\->new(
\&     match_list      => ["10.20.1.0/24", "10.20.2.0/24"],
\&     source_ipv4addr => "1.2.3.4"
\&     );
\& unless( $sort1 ){
\&     die("Constructor for sortlist failed: ",
\&     Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print" Sortlist object created successfully \en";
.Ve
.PP
\&\fB#Get and modify the \s-1DNS\s0 object\fR
.PP
.Vb 10
\& #Getting the DNS object from appliance through session.
\& my @result = $session\->get(
\&     object => "Infoblox::Grid::DNS",
\&     name   => "Infoblox"
\&     );
\& unless( @result ){
\&     die("Get grid DNS failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print" Get grid DNS object found at least 1 matching entry \en";
\&
\& my $grid_dns = $result[0];
\& if ($grid_dns) {
\&
\& #Modifying the value of the specified object
\&    $grid_dns\->allow_query(["10.0.0.10", "20.0.0.0/24", "!" . "30.0.0.30", "!" . "40.10.0.0/24"]);
\&    $grid_dns\->allow_recursive_query("true");
\&    $grid_dns\->allow_transfer(["10.0.0.10", "20.0.0.0/24", $key1, "!"."30.0.0.30", "!"."40.10.0.0/24", $key2]);
\&    $grid_dns\->allow_update(["10.0.0.10", "20.0.0.0/24", "!"."30.0.0.30", "!"."40.10.0.0/24", $up_key1]);
\&    $grid_dns\->default_ttl(28800);
\&    $grid_dns\->expire_after(2419200);
\&    $grid_dns\->forwarders(["2.2.2.2", "3.3.3.3"]);
\&    $grid_dns\->logging_facility("daemon");
\&    $grid_dns\->negative_ttl(900);
\&    $grid_dns\->recursive_query_list(["10.0.0.10", "20.0.0.0/24", "!" . "30.0.0.30", "!" . "40.10.0.0/24"]);
\&    $grid_dns\->refresh_timer(10800);
\&    $grid_dns\->retry_timer(3600);
\&    $grid_dns\->rootNS([$rootns1, $rootns2]);
\&    $grid_dns\->sortlist([$sort1]);
\&    $grid_dns\->transfer_excluded_servers(["10.0.0.10", "20.0.0.0"]);
\&    $grid_dns\->transfer_format("many_answers");
\&
\&  #Applying the changes
\&  my $response = $session\->modify($grid_dns);
\&  unless( $response ){
\&     die("Modify grid DNS failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print" Modify grid DNS successful \en";
\& }
\& else {
\&    print "No grid DNS object found.";
\& }
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::Sortlist, 
Infoblox::DNS::TSIGKey, 
Infoblox::DNS::DnssecTrustedKey, 
Infoblox::Grid::DNS::Nsgroup, 
Infoblox::Grid::RootNameServer, 
Infoblox::DNS::Ruleset, 
Infoblox::Session\->\fBget()\fR, 
Infoblox::Session\->\fBmodify()\fR, 
Infoblox::Session, 
Infoblox::Grid::NamedACL, 
Infoblox::DNS::DNSSecKeyAlgorithm, 
Infoblox::Grid::DNS::FixedRRSetOrderFQDN,
Infoblox::Grid::DNS::ResponseRateLimiting, 
Infoblox::Grid::DNS::FileTransferSetting,
Infoblox::Grid::DNS::ClientSubnetDomain
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
