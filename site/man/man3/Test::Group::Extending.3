.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Group::Extending 3"
.TH Test::Group::Extending 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Group::Extending \- writing extensions to Test::Group
.SH "WRAPPERS"
.IX Header "WRAPPERS"
It's possible to extend Test::Group by writing subroutines that
call \fBTest::Group::test()\fR.  For example, a replacement for \fBtest()\fR that 
uses the Test::Group function \fBskip_next_test()\fR to skip the test
group unless its name appears in an environment variable:
.PP
.Vb 1
\&  use Test::Group;
\&
\&  sub maybe_test ($&) {
\&      my ($name, $code) = @_;
\&
\&      my $only = $ENV{ONLY_TEST};
\&      if ($only and $only !~ /(^|,)\eQ$name\eE(,|$)/) {
\&          skip_next_test("$name not enabled");
\&      }
\&      goto &test;
\&  }
.Ve
.PP
In a test script, you can now use \fBmaybe_test()\fR anywhere you would use
\&\fBtest()\fR:
.PP
.Vb 3
\&  maybe_test foo => sub {
\&      ok ...
\&  };
.Ve
.PP
Note the use of \f(CW\*(C`goto &test\*(C'\fR to pass control to \fBTest::Group::test()\fR,
see \*(L"goto\*(R" in perlfunc. This is good practice when wrapping
\&\fBTest::Group::test()\fR, because it avoids creating a new subroutine call
frame and messing up the line numbers in failed test diagnostics.
.PP
Sometimes you can't use \f(CW\*(C`goto &test\*(C'\fR, because you want to add some
code after the \fBtest()\fR call.  In this situation you can adjust the
line numbers in failed test diagnostics by incrementing
\&\f(CW$Test::Builder::Level\fR, see Test::Builder.
.PP
The following example outputs a timestamp diagnostic before and after
running the test group:
.PP
.Vb 4
\&  use Test::Builder;
\&  use Test::Group;
\&  use Test::More;
\&  use Time::HiRes;
\&
\&  sub timed_test ($&) {
\&      my ($name, $code) = @_;
\&
\&      diag("$name start: ".Time::HiRes::time());
\&
\&      local $Test::Builder::Level = $Test::Builder::Level + 1;
\&      &test($name, $code);
\&
\&      diag("$name done:  ".Time::HiRes::time());
\&  };
.Ve
.PP
Note the use of the ampersand in the call to \fBTest::Group::test()\fR.
This bypasses \fBTest::Group::test()\fR's function prototype, which would
otherwise reject \f(CW$code\fR as the second parameter because it is not a
literal code block.
.SH "PLUGINS"
.IX Header "PLUGINS"
From version 0.16 onwards, Test::Group provides the function
\&\fBnext_test_plugin()\fR (not exported by default) to install a plugin for
the next test group.  A plugin is a subroutine that sits in between
\&\fBTest::Group::test()\fR and the subroutine reference passed to it.
.PP
The \fBnext_test_plugin()\fR function takes a single parameter, which must
be a subroutine reference. That subroutine will be called with a
single parameter: another subroutine reference which will run the
test group.
.PP
For example, a plugin to check that a test group does not modify
the \s-1PATH\s0 environment variable could be implemented like this:
.PP
.Vb 2
\&  use Test::Group qw(:DEFAULT next_test_plugin);
\&  use Test::More;
\&
\&  sub next_test_nopathchange {
\&      next_test_plugin {
\&          my $next = shift;
\&
\&          my $old = $ENV{PATH};
\&          $next\->();
\&          is $ENV{PATH}, $old, "path not modified";
\&      };
\&  }
.Ve
.PP
To use this plugin from a test script:
.PP
.Vb 1
\&  next_test_nopathchange();
\&
\&  test foo => sub {
\&      do_my_tests(\*(Aqfoo\*(Aq);
\&  };
.Ve
.PP
Another example \- the following plugin runs the test group twice, with
and without a \s-1DEBUG\s0 environment variable set:
.PP
.Vb 1
\&  use Test::Group qw(:DEFAULT next_test_plugin);
\&
\&  sub next_test_with_and_without_debug {
\&      next_test_plugin {
\&          my $next = shift;
\&
\&          $next\->();
\&          local $ENV{DEBUG} = 1;
\&          $next\->();
\&      };
\&  }
.Ve
.PP
In a test script, you might apply both plugins to the same test group:
.PP
.Vb 2
\&  next_test_with_and_without_debug();
\&  next_test_nopathchange();
\&
\&  test foo => sub {
\&      do_my_tests(\*(Aqfoo\*(Aq);
\&  };
.Ve
.PP
When multiple plugins have been set, the one that was set first gets
control first.  In the example above, the \s-1DEBUG\s0 plugin will be called
first, and each time it calls \f(CW\*(C`$next\->()\*(C'\fR control passes to the
\&\s-1PATH\s0 plugin.  When the \s-1PATH\s0 plugin calls \f(CW\*(C`$next\->()\*(C'\fR, control gets
down to \fBdo_my_tests()\fR.
.PP
If you want to apply the same set of plugins to several groups in your
test script, then you can write a \fBTest::Group::test()\fR wrapper to set
them up:
.PP
.Vb 3
\&  sub mytest ($&) {
\&      next_test_with_and_without_debug();
\&      next_test_nopathchange();
\&
\&      goto &test;
\&  }
\&
\&  mytest foo => sub {
\&      do_my_tests(\*(Aqfoo\*(Aq);
\&  };
\&
\&  mytest bar => sub {
\&      do_my_tests(\*(Aqbar\*(Aq);
\&  };
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::Group
.PP
Test::Group::Tester helps you to write tests for Test::Group
extensions.
