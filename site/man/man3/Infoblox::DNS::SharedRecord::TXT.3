.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::SharedRecord::TXT 3"
.TH Infoblox::DNS::SharedRecord::TXT 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::SharedRecord::TXT \- DNS shared TXT record object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A shared \s-1TXT\s0 record is similar to a regular \s-1TXT\s0 record. It contains supplemental information for a host. \s-1SPF\s0 (Sender Policy Framework) records are specialized \s-1TXT\s0 records that identify the servers that send mail from a domain. The difference is that shared \s-1TXT\s0 records should be added into a shared record group. If this shared record group is associated with other zones, then this shared \s-1TXT\s0 record will be shared into these zones. For more information about how shared record groups and shared records work, please refer to Infoblox Administrator Guide.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $txt = Infoblox::DNS::SharedRecord::TXT\->new(
\&     name                    => $fqdn,             #Required
\&     text                    => $string            #Required
\&     shared_record_group     => $string,           #Required
\&     comment                 => $string,           #Optional / Default is empty
\&     disable                 => "true" | "false"   #Optional / Default "false"
\&     extattrs                => { $string => $extattr, ... },      #Optional / Default is undefined
\&     extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, #Optional / Default is undefined
\&     ttl                     => $num | undef,      #Optional / Default is undefined
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1TXT\s0 shard record object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Construct the TXT object
\& my $srg_txt = Infoblox::DNS::SharedRecord::TXT\->new(
\&     name    => "txt",
\&     text    => "this is text string",
\&     comment => "add TXT txt",
\&     disable => "false",
\&     ttl     => "360",
\&     shared_record_group => "test_srg" );
\& # Submit for addition
\& my $response = $session\->add( $srg_txt );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DNS shared TXT object:
\&
\&  name \- Required. Host name in string format.
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::SharedRecord::TXT",
\&     name   => "txt");
\&
\& # get all shared TXT records with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::SharedRecord::TXT",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use method to modify the comment.
\& $srg_txt\->comment("This is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $srg_txt );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::SharedRecord::TXT",
\&     name   => "txt");
\&
\& # find the desired object from the retrieved list.
\& my $desired_txt = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $ desired_txt );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DNS\s0 shared \s-1TXT\s0 record objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DNS shared TXT record object:
\&
\&  name    \- Required. Reverse domain name of the TXT record (regular expression).
\&  comment \- Optional. A comment in string format (regular expression).
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # search for all DNS shared TXT objects.
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::SharedRecord::TXT",
\&     name   => ".*");
\&
\& # search all DNS shared TXT records with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DNS::SharedRecord::TXT",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a \s-1DNS\s0 shared \s-1TXT\s0 record object.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment of a \s-1DNS\s0 shared \s-1TXT\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $srg_txt\->comment();
\& #Modify comment
\& $srg_txt\->comment("Modifying the DNS shared TXT comment");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DNS\s0 shared \s-1TXT\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false. The \s-1DNS\s0 shared \s-1TXT\s0 record is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $srg_txt\->disable();
\& #Modify disable
\& $srg_txt\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "dns_name( )"
.IX Subsection "dns_name( )"
.RS 4
Use this method to retrieve the name, in punycode format, of a \s-1DNS\s0 shared \s-1TXT\s0 record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $srg_txt\->dns_name();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS\s0 shared \s-1TXT\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $srg_txt\->extattrs();
\& #Modify extattrs
\& $srg_txt\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS\s0 shared \s-1TXT\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $srg_txt\->extensible_attributes();
\& #Modify extensible attributes
\& $srg_txt\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of a \s-1DNS\s0 shared \s-1TXT\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the \s-1DNS\s0 shared \s-1TXT\s0 object. The name can have a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $srg_txt\->name();
\& #Modify name
\& $srg_txt\->name("new");
.Ve
.RE
.RS 4
.RE
.SS "text( )"
.IX Subsection "text( )"
.RS 4
Use this method to set or retrieve the text of a \s-1DNS\s0 shared \s-1TXT\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text that you want to associate with the record. It can contain up to 255 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $srg_txt\->text();
\& #Modify name
\& $srg_txt\->text("this is new text string");
.Ve
.RE
.RS 4
.RE
.SS "shared_record_group( )"
.IX Subsection "shared_record_group( )"
.RS 4
Use this method to set or retrieve the shared record group of a \s-1DNS\s0 shared \s-1TXT\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of defined Infoblox::DNS::SRG objects. The shared \s-1TXT\s0 record will be defined under this shared record group and shared among zones associated with this shared record group.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get shared record group
\& my $srg = $shared_txt\->shared_record_group();
\& #Modify shared record group
\& $shared_txt\->shared_record_group("test_srg");
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to set or retrieve the Time to Live (\s-1TTL\s0) value of a \s-1DNS\s0 shared \s-1TXT\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is undefined which indicates that the record inherits the \s-1TTL\s0 value of the zone.
.Sp
Specify a \s-1TTL\s0 value to override the \s-1TTL\s0 value at the zone level.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration in seconds that the record is cached. Zero indicates that the record should not be cached.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get ttl
\& my $ttl = $srg_txt\->ttl();
\& #Modify ttl
\& $srg_txt\->ttl(1800);
\& #Un\-override ttl
\& $srg_txt\->ttl(undef);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS\s0 shared \s-1TXT\s0 record insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\&                );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the shared record group prior to an shared TXT record insertion
\& my $srg = Infoblox::DNS::SRG\->new(name => "test_srg");
\& unless ($srg) {
\&    die("Construct srg failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "SRG object created successfully\en";
\&
\& #Verify if the SRG exists
\& my $object = $session\->get(object => "Infoblox::DNS::SRG", name => "test_srg");
\& unless ($object) {
\&    print "SRG does not exist on server, safe to add the SRG\en";
\&    $session\->add($SRG)
\&       or die("Add SRG failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "SRG added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS\s0 shared \s-1TXT\s0 record\fR
.PP
.Vb 6
\& my $srg_txt = Infoblox::DNS::SharedRecord::TXT\->new(
\&                name    => "txt",
\&                comment => "add TXT txt",
\&                text    => "this is text string",
\&                shared_record_group => "test_srg",
\&                );
\&
\& unless ($srg_txt) {
\&        die("Construct DNS shared record TXT failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& #Add the DNS shared TXT record object to the Infoblox appliance through a session
\& $session\->add($srg_txt)
\&        or die("Add shared record TXT failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS shared TXT object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS\s0 shared \s-1TXT\s0 record\fR
.PP
.Vb 6
\& #Search all shared TXT records in the zone
\& my @retrieved_objs = $session\->search(
\&                object => "Infoblox::DNS::SharedRecord::TXT",
\&                name   => ".*"
\&                );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search shared record TXT failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS shared TXT object found at least 1 matching entry\en";
\&
\& #Search all TXT records whose name starts with "txt".
\& my @retrieved_objs = $session\->search(
\&                object => "Infoblox::DNS::SharedRecord::TXT",
\&                name   => "txt.*"
\&                );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search shared record TXT failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS shared TXT object using regexp found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS\s0 shared \s-1TXT\s0 record\fR
.PP
.Vb 6
\& #Get a shared TXT record through the session
\& my @retrieved_objs = $session\->get(
\&                object => "Infoblox::DNS::SharedRecord::TXT",
\&                name   => "txt"
\&                );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Get record TXT failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS shared TXT object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified TXT record
\& $object\->text("this is new text string");
\&
\& #Apply the changes
\& $session\->modify($object)
\&        or die("Modify shared record TXT failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS shared TXT object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DNS\s0 shared \s-1TXT\s0 record\fR
.PP
.Vb 11
\& #Get TXT record through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::SharedRecord::TXT",
\&     name   => "txt"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get shared record TXT failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS shared TXT object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&        or die("Remove shared record TXT failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS shared TXT object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::View, Infoblox::DNS::Zone, Infoblox::DNS::SRG, Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
