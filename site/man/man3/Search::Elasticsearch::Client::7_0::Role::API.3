.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search::Elasticsearch::Client::7_0::Role::API 3"
.TH Search::Elasticsearch::Client::7_0::Role::API 3 "2020-09-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Search::Elasticsearch::Client::7_0::Role::API \- This class contains the spec for the Elasticsearch APIs
.SH "VERSION"
.IX Header "VERSION"
version 7.30
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
All of the Elasticsearch APIs are defined in this role. The example given below
is the definition for the \*(L"\fBindex()\fR\*(R" in Search::Elasticsearch::Client::7_0::Direct method:
.PP
.Vb 10
\&    \*(Aqindex\*(Aq => {
\&        body   => { required => 1 },
\&        doc    => "docs\-index_",
\&        method => "POST",
\&        parts  => {
\&            id    => {},
\&            index => { required => 1 },
\&            type  => { required => 1 }
\&        },
\&        paths => [
\&            [   { id => 2, index => 0, type => 1 }, "{index}",
\&                "{type}", "{id}"
\&            ],
\&            [ { index => 0, type => 1 }, "{index}", "{type}" ],
\&        ],
\&        qs => {
\&            filter_path            => "list",
\&            op_type                => "enum",
\&            parent                 => "string",
\&            pipeline               => "string",
\&            refresh                => "enum",
\&            routing                => "string",
\&            timeout                => "time",
\&            timestamp              => "time",
\&            ttl                    => "time",
\&            version                => "number",
\&            version_type           => "enum",
\&            wait_for_active_shards => "string",
\&        },
\&    },
.Ve
.PP
These definitions can be used by different Search::Elasticsearch::Role::Client
implementations to provide distinct user interfaces.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """api()"""
.el .SS "\f(CWapi()\fP"
.IX Subsection "api()"
.Vb 1
\&    $defn = $api\->api($name);
.Ve
.PP
The only method in this class is the \f(CW\*(C`api()\*(C'\fR method which takes the name
of the \fIaction\fR and returns its definition.  Actions in the
\&\f(CW\*(C`indices\*(C'\fR or \f(CW\*(C`cluster\*(C'\fR namespace use the namespace as a prefix, eg:
.PP
.Vb 2
\&    $defn = $e\->api(\*(Aqindices.create\*(Aq);
\&    $defn = $e\->api(\*(Aqcluster.node_stats\*(Aq);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Search::Elasticsearch::Role::API
.IP "\(bu" 4
Search::Elasticsearch::Client::7_0::Direct
.SH "AUTHOR"
.IX Header "AUTHOR"
Enrico Zimuel <enrico.zimuel@elastic.co>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Elasticsearch \s-1BV.\s0
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
