.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Config 3"
.TH DBIx::Config 3 "2019-02-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Config \- Manage credentials for DBI
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBIx::Config wraps around \s-1DBI\s0 to provide a simple way of loading database 
credentials from a file.  The aim is make it simpler for operations teams to 
manage database credentials.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Given a file like \f(CW\*(C`/etc/dbi.yaml\*(C'\fR, containing:
.PP
.Vb 5
\&    MY_DATABASE:
\&        dsn:            "dbi:Pg:host=localhost;database=blog"
\&        user:           "TheDoctor"
\&        password:       "dnoPydoleM"
\&        TraceLevel:     1
.Ve
.PP
The following code would allow you to connect the database:
.PP
.Vb 4
\&    #!/usr/bin/perl
\&    use warnings;
\&    use strict;
\&    use DBIx::Config;
\&
\&    my $dbh = DBIx::Config\->connect( "MY_DATABASE" );
.Ve
.PP
Of course, backwards compatibility is kept, so the following would also work:
.PP
.Vb 4
\&    #!/usr/bin/perl
\&    use warnings;
\&    use strict;
\&    use DBIx::Config;
\&
\&    my $dbh = DBIx::Config\->connect(
\&        "dbi:Pg:host=localhost;database=blog", 
\&        "TheDoctor", 
\&        "dnoPydoleM", 
\&        { 
\&            TraceLevel => 1, 
\&        },
\&    );
.Ve
.PP
For cases where you may use something like \f(CW\*(C`DBIx::Connector\*(C'\fR, a
method is provided that will simply return the connection credentials:
.PP
.Vb 5
\&    !/usr/bin/perl
\&    use warnings;
\&    use strict;
\&    use DBIx::Connector;
\&    use DBIx::Config;
\&
\&    my $conn = DBIx::Connector\->new(DBIx::Config\->connect_info("MY_DATABASE"));
.Ve
.SH "CONFIG FILES"
.IX Header "CONFIG FILES"
By default the following configuration files are examined, in order listed,
for credentials.  Configuration files are loaded with Config::Any.  You
should append the extention that Config::Any will recognize your file in
to the list below.  For instance ./dbic will look for files such as
\&\f(CW\*(C`./dbic.yaml\*(C'\fR, \f(CW\*(C`./dbic.conf\*(C'\fR, etc.  For documentation on acceptable files
please see Config::Any.  The first file which has the given credentials 
is used.
.IP "\(bu" 4
\&\f(CW$ENV{DBIX_CONFIG_DIR}\fR . '/dbic',
.Sp
\&\f(CW$ENV{DBIX_CONFIG_DIR}\fR can be configured at run-time, for instance:
.Sp
.Vb 1
\&    DBIX_CONFIG_DIR="/var/local/" ./my_program.pl
.Ve
.IP "\(bu" 4
\&\f(CW$ENV{DBIX_CONFIG_DIR}\fR . '/dbi',
.Sp
\&\f(CW$ENV{DBIX_CONFIG_DIR}\fR can be configured at run-time, for instance:
.Sp
.Vb 1
\&    DBIX_CONFIG_DIR="/var/local/" ./my_program.pl
.Ve
.IP "\(bu" 4
\&./dbic
.IP "\(bu" 4
\&./dbi
.IP "\(bu" 4
\&\f(CW$HOME\fR/.dbic
.IP "\(bu" 4
\&\f(CW$HOME\fR/.dbi
.IP "\(bu" 4
/etc/dbic
.IP "\(bu" 4
/etc/dbi
.IP "\(bu" 4
/etc/dbi
.SH "USE SPECIFIC CONFIG FILES"
.IX Header "USE SPECIFIC CONFIG FILES"
If you would rather explicitly state the configuration files you
want loaded, you can use the class accessor \f(CW\*(C`config_files\*(C'\fR
instead.
.PP
.Vb 4
\&    #!/usr/bin/perl
\&    use warnings;
\&    use strict;
\&    use DBIx::Config
\&
\&    my $DBI = DBIx::Config\->new( config_files => [
\&        \*(Aq/var/www/secret/dbic.yaml\*(Aq,
\&        \*(Aq/opt/database.yaml\*(Aq,
\&    ]);
\&    my $dbh = $DBI\->connect( "MY_DATABASE" );
.Ve
.PP
This will check the files, \f(CW\*(C`/var/www/secret/dbic.yaml\*(C'\fR, 
and \f(CW\*(C`/opt/database.yaml\*(C'\fR in the same way as \f(CW\*(C`config_paths\*(C'\fR, 
however it will only check the specific files, instead of checking 
for each extension that Config::Any supports.  You \s-1MUST\s0 use the 
extension that corresponds to the file type you are loading.  
See Config::Any for information on supported file types and 
extension mapping.
.SH "OVERRIDING"
.IX Header "OVERRIDING"
.SS "config_files"
.IX Subsection "config_files"
The configuration files may be changed by setting an accessor:
.PP
.Vb 4
\&    #!/usr/bin/perl
\&    use warnings;
\&    use strict;
\&    use DBIx::Config
\&
\&    my $DBI = DBIx::Config\->new(config_paths => [\*(Aq./dbcreds\*(Aq, \*(Aq/etc/dbcreds\*(Aq]);
\&    my $dbh = $DBI\->connect( "MY_DATABASE" );
.Ve
.PP
This would check, in order, \f(CW\*(C`dbcreds\*(C'\fR in the current directory, and then \f(CW\*(C`/etc/dbcreds\*(C'\fR,
checking for valid configuration file extentions appended to the given file.
.SS "filter_loaded_credentials"
.IX Subsection "filter_loaded_credentials"
You may want to change the credentials that have been loaded, before they are used
to connect to the \s-1DB.\s0  A coderef is taken that will allow you to make programatic
changes to the loaded credentials, while giving you access to the origional data
structure used to connect.
.PP
.Vb 7
\&    DBIx::Config\->new(
\&        filter_loaded_credentials => sub {
\&            my ( $self, $loaded_credentials, $connect_args ) = @_;
\&            ...
\&            return $loaded_credentials;
\&        }
\&    )
.Ve
.PP
Your coderef will take three arguments.
.IP "\(bu" 4
\&\f(CW$self\fR, the instance of DBIx::Config your code was called from. C
.IP "\(bu" 4
\&\f(CW$loaded_credentials\fR, the credentials loaded from the config file.
.IP "\(bu" 4
\&\f(CW$connect_args\fR, the normalized data structure of the inital \f(CW\*(C`connect\*(C'\fR call.
.PP
Your coderef should return the same structure given by \f(CW$loaded_credentials\fR.
.PP
As an example, the following code will use the credentials from \f(CW\*(C`/etc/dbi\*(C'\fR, but
use its a hostname defined in the code itself.
.PP
\&\f(CW\*(C`/etc/dbi\*(C'\fR (note \f(CW\*(C`host=%s\*(C'\fR):
.PP
.Vb 4
\&    MY_DATABASE:
\&        dsn: "DBI:mysql:database=students;host=%s;port=3306"
\&        user: "WalterWhite"
\&        password: "relykS"
.Ve
.PP
The Perl script:
.PP
.Vb 4
\&    #!/usr/bin/perl
\&    use warnings;
\&    use strict;
\&    use DBIx::Config;
\&
\&    my $dbh = DBIx::Config\->new(
\&        # If we have %s, replace it with a hostname.
\&        filter_loaded_credentials => sub {
\&            my ( $self, $loaded_credentials, $connect_args ) = @_;
\&
\&                if ( $loaded_credentials\->{dsn} =~ /\e%s/ ) {
\&                    $loaded_credentials\->{dsn} = sprintf( 
\&                        $loaded_credentials\->{dsn}, $connect_args\->{hostname} 
\&                    );
\&                }
\&                return $loaded_credentials;
\&            }
\&        )\->connect( "MY_DATABASE", { hostname => "127.0.0.1" } );
.Ve
.SS "load_credentials"
.IX Subsection "load_credentials"
Override this function to change the way that DBIx::Config loads credentials. 
The function takes the class name, as well as a hashref.
.PP
If you take the route of having \->connect('\s-1DATABASE\s0') used as a key for whatever 
configuration you are loading, \s-1DATABASE\s0 would be \f(CW$config\fR\->{dsn}
.PP
.Vb 8
\&    $obj\->connect( 
\&        "SomeTarget", 
\&        "Yuri", 
\&        "Yawny", 
\&        { 
\&            TraceLevel => 1 
\&        } 
\&    );
.Ve
.PP
Would result in the following data structure as \f(CW$config\fR in load_credentials($self, \f(CW$config\fR):
.PP
.Vb 6
\&    {
\&        dsn             => "SomeTarget",
\&        user            => "Yuri",
\&        password        => "Yawny",
\&        TraceLevel      => 1,
\&    }
.Ve
.PP
Currently, load_credentials will \s-1NOT\s0 be called if the first argument to \->\fBconnect()\fR 
looks like a valid \s-1DSN.\s0 This is determined by match the \s-1DSN\s0 with /^dbi:/i.
.PP
The function should return the same structure. For instance:
.PP
.Vb 6
\&    #!/usr/bin/perl
\&    use warnings;
\&    use strict;
\&    use DBIx::Config;
\&    use LWP::Simple;
\&    use JSON;
\&
\&    my $DBI = DBIx::Config\->new(
\&        load_credentials => sub {
\&            my ( $self, $config ) = @_;
\&            
\&            return decode_json( 
\&                get( "http://someserver.com/v1.0/database?name=" . $config\->{dsn} )
\&            );
\&        } 
\&    )
\&
\&    my $dbh = $DBI\->connect( "MAGIC_DATABASE" );
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
DBIx::Class::Schema::Config
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "\(bu" 4
Kaitlyn Parkhurst (SymKat) \fI<symkat@symkat.com>\fR (<http://symkat.com/>)
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Matt S. Trout (mst) \fI<mst@shadowcat.co.uk>\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2012 the DBIx::Config \*(L"\s-1AUTHOR\*(R"\s0 and \*(L"\s-1CONTRIBUTORS\*(R"\s0 as listed 
above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms as 
perl itself.
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
The latest version of this software is available at 
<https://github.com/symkat/DBIx\-Config>
