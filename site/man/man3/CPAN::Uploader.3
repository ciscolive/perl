.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CPAN::Uploader 3"
.TH CPAN::Uploader 3 "2020-08-21" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPAN::Uploader \- upload things to the CPAN
.SH "VERSION"
.IX Header "VERSION"
version 0.103015
.SH "METHODS"
.IX Header "METHODS"
.SS "upload_file"
.IX Subsection "upload_file"
.Vb 1
\&  CPAN::Uploader\->upload_file($file, \e%arg);
\&
\&  $uploader\->upload_file($file);
.Ve
.PP
Valid arguments are:
.PP
.Vb 8
\&  user        \- (required) your CPAN / PAUSE id
\&  password    \- (required) your CPAN / PAUSE password
\&  subdir      \- the directory (under your home directory) to upload to
\&  http_proxy  \- uri of the http proxy to use
\&  upload_uri  \- uri of the upload handler; usually the default (PAUSE) is right
\&  debug       \- if set to true, spew lots more debugging output
\&  retries     \- number of retries to perform on upload failure (5xx response)
\&  retry_delay \- number of seconds to wait between retries
.Ve
.PP
This method attempts to actually upload the named file to the \s-1CPAN.\s0  It will
raise an exception on error.
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $uploader = CPAN::Uploader\->new(\e%arg);
.Ve
.PP
This method returns a new uploader.  You probably don't need to worry about
this method.
.PP
Valid arguments are the same as those to \f(CW\*(C`upload_file\*(C'\fR.
.SS "read_config_file"
.IX Subsection "read_config_file"
.Vb 1
\&  my $config = CPAN::Uploader\->read_config_file( $filename );
.Ve
.PP
This reads the config file and returns a hashref of its contents that can be
used as configuration for CPAN::Uploader.
.PP
If no filename is given, it looks for \fI.pause\fR in the user's home directory
(from the env var \f(CW\*(C`HOME\*(C'\fR, or the current directory if \f(CW\*(C`HOME\*(C'\fR isn't set).
.PP
See \*(L"\s-1CONFIGURATION\*(R"\s0 in cpan-upload for the config format.
.SS "log"
.IX Subsection "log"
.Vb 1
\&  $uploader\->log($message);
.Ve
.PP
This method logs the given string.  The default behavior is to print it to the
screen.  The message should not end in a newline, as one will be added as
needed.
.SS "log_debug"
.IX Subsection "log_debug"
This method behaves like \f(CW"log"\fR, but only logs the message if the
CPAN::Uploader is in debug mode.
.SH "ORIGIN"
.IX Header "ORIGIN"
This code is mostly derived from \f(CW\*(C`cpan\-upload\-http\*(C'\fR by Brad Fitzpatrick, which
in turn was based on \f(CW\*(C`cpan\-upload\*(C'\fR by Neil Bowers.  I (\fIrjbs\fR) didn't want to
have to use a \f(CW\*(C`system\*(C'\fR call to run either of those, so I refactored the code
into this module.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Barbie <barbie@missbarbell.co.uk>
.IP "\(bu" 4
Christian Walde <walde.christian@googlemail.com>
.IP "\(bu" 4
David Caldwell <david@porkrind.org>
.IP "\(bu" 4
David Golden <dagolden@cpan.org>
.IP "\(bu" 4
fREW Schmidt <frioux@gmail.com>
.IP "\(bu" 4
Gabor Szabo <szabgab@gmail.com>
.IP "\(bu" 4
Graham Knop <haarg@haarg.org>
.IP "\(bu" 4
Kent Fredric <kentfredric@gmail.com>
.IP "\(bu" 4
Mark Fowler <mark@twoshortplanks.com>
.IP "\(bu" 4
Mike Doherty <doherty@cs.dal.ca>
.IP "\(bu" 4
perlancar (@netbook\-zenbook\-ux305) <perlancar@gmail.com>
.IP "\(bu" 4
Ricardo Signes <rjbs@semiotic.systems>
.IP "\(bu" 4
Steven Haryanto (on Asus Zenbook) <stevenharyanto@gmail.com>
.IP "\(bu" 4
sungo <sungo@sungo.us>
.IP "\(bu" 4
Torsten Raudssus <github@raudssus.de>
.IP "\(bu" 4
Vincent Pit <perl@profvince.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
