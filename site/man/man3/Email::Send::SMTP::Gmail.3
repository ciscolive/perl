.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Email::Send::SMTP::Gmail 3"
.TH Email::Send::SMTP::Gmail 3 "2020-10-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Email::Send::SMTP::Gmail \- Sends emails with attachments supporting Auth over TLS or SSL (for example: Google's SMTP and AWS SES).
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   use strict;
\&   use warnings;
\&
\&   use Email::Send::SMTP::Gmail;
\&
\&   my ($mail,$error)=Email::Send::SMTP::Gmail\->new( \-smtp=>\*(Aqsmtp.gmail.com\*(Aq,
\&                                                    \-login=>\*(Aqwhateveraddress@gmail.com\*(Aq,
\&                                                    \-pass=>\*(Aqwhatever_pass\*(Aq);
\&
\&   print "session error: $error" unless ($mail!=\-1);
\&
\&   $mail\->send(\-to=>\*(Aqtarget@xxx.com\*(Aq, \-subject=>\*(AqHello!\*(Aq, \-body=>\*(AqJust testing it\*(Aq,
\&               \-attachments=>\*(Aqfull_path_to_file\*(Aq);
\&
\&   $mail\->bye;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Simple module to send emails through Google's \s-1SMTP\s0 with or without attachments. Also supports regular Servers (with plain or none auth).
Works with regular Gmail accounts as with Google Apps (your own domains).
It supports basic functions such as \s-1CC, BCC,\s0 ReplyTo.
.IP "new(\-login=>'', \-pass=>'' [,\-smtp=>'',layer=>'',\-port=>'',\-debug=>''])" 4
.IX Item "new(-login=>'', -pass=>'' [,-smtp=>'',layer=>'',-port=>'',-debug=>''])"
It creates the object and opens a session with the \s-1SMTP.\s0
.RS 4
.IP "\fIsmtp\fR: defines \s-1SMTP\s0 server. Default value: smtp.gmail.com" 4
.IX Item "smtp: defines SMTP server. Default value: smtp.gmail.com"
.PD 0
.IP "\fIlayer\fR: defines the secure layer to use. It could be 'tls', 'ssl' or 'none'. Default value: tls" 4
.IX Item "layer: defines the secure layer to use. It could be 'tls', 'ssl' or 'none'. Default value: tls"
.IP "\fIport\fR: defines the port to use. Default values are 25 for tls and 465 for ssl" 4
.IX Item "port: defines the port to use. Default values are 25 for tls and 465 for ssl"
.IP "\fItimeout\fR: defined Timeout for the connection. Default is 60 secs" 4
.IX Item "timeout: defined Timeout for the connection. Default is 60 secs"
.IP "\fIauth\fR: defines the authentication method. Using \s-1AUTO\s0 (default value) the system uses the list provided by the server. This module supports: \s-1ANONYMOUS, CRAM\-MD5, DIGEST\-MD5, EXTERNAL, GSSAPI, LOGIN\s0 and \s-1PLAIN\s0 (it's currently based on SASL::Perl module)." 4
.IX Item "auth: defines the authentication method. Using AUTO (default value) the system uses the list provided by the server. This module supports: ANONYMOUS, CRAM-MD5, DIGEST-MD5, EXTERNAL, GSSAPI, LOGIN and PLAIN (it's currently based on SASL::Perl module)."
.IP "\fIdebug\fR: see the log information" 4
.IX Item "debug: see the log information"
.PD
Also supports \s-1SSL\s0 parameters as:
.IP "\fIssl_verify_mode\fR: \s-1SSL_VERIFY_NONE\s0 | \s-1SSL_VERIFY_PEER\s0" 4
.IX Item "ssl_verify_mode: SSL_VERIFY_NONE | SSL_VERIFY_PEER"
.PD 0
.IP "\fIssl_version\fR: SSLv23 | ''" 4
.IX Item "ssl_version: SSLv23 | ''"
.IP "\fIssl_verify_path\fR: SSL_ca_path if \s-1SSL_VERIFY_PEER\s0" 4
.IX Item "ssl_verify_path: SSL_ca_path if SSL_VERIFY_PEER"
.IP "\fIssl_verify_file\fR: SSL_ca_file if \s-1SSL_VERIFY_PEER\s0" 4
.IX Item "ssl_verify_file: SSL_ca_file if SSL_VERIFY_PEER"
.RE
.RS 4
.RE
.IP "send(\-from=>'', \-to=>'', [\-subject=>'', \-cc=>'', \-bcc=>'', \-replyto=>'', \-charset=>'', \-body=>'', \-attachments=>'', disposition=>'', \-sns_topic=>'', \-verbose=>'1'])" 4
.IX Item "send(-from=>'', -to=>'', [-subject=>'', -cc=>'', -bcc=>'', -replyto=>'', -charset=>'', -body=>'', -attachments=>'', disposition=>'', -sns_topic=>'', -verbose=>'1'])"
.PD
It composes and sends the email in one shot
.RS 4
.IP "\fIto, cc, bcc\fR: comma separated email addresses" 4
.IX Item "to, cc, bcc: comma separated email addresses"
.PD 0
.IP "\fIcontenttype\fR: Content-Type for the body message. Examples are: text/plain (default), text/html, etc." 4
.IX Item "contenttype: Content-Type for the body message. Examples are: text/plain (default), text/html, etc."
.IP "\fIsns_topic\fR: \s-1AWS SES\s0 header X\-SES-CONFIGURATION-SET to manage email queue in Amazon Web Services." 4
.IX Item "sns_topic: AWS SES header X-SES-CONFIGURATION-SET to manage email queue in Amazon Web Services."
.ie n .IP "\fIdisposition\fR: Set ""inline"" in sending embeeded attachments. For example using <body><img src=""cid:logo.png""><br>Test with Image</body>" 4
.el .IP "\fIdisposition\fR: Set ``inline'' in sending embeeded attachments. For example using <body><img src=``cid:logo.png''><br>Test with Image</body>" 4
.IX Item "disposition: Set inline in sending embeeded attachments. For example using <body><img src=cid:logo.png><br>Test with Image</body>"
.IP "\fIattachments\fR: comma separated files with full path" 4
.IX Item "attachments: comma separated files with full path"
.ie n .IP "\fIattachmentslist\fR: hashref $list, in format $list\->[x]\->{name} of files with full path. Example: $list\->[0]\->{file}='/full_path/file.pdf'" 4
.el .IP "\fIattachmentslist\fR: hashref \f(CW$list\fR, in format \f(CW$list\fR\->[x]\->{name} of files with full path. Example: \f(CW$list\fR\->[0]\->{file}='/full_path/file.pdf'" 4
.IX Item "attachmentslist: hashref $list, in format $list->[x]->{name} of files with full path. Example: $list->[0]->{file}='/full_path/file.pdf'"
.RE
.RS 4
.RE
.IP "bye" 4
.IX Item "bye"
.PD
Closes the \s-1SMTP\s0 session
.IP "banner" 4
.IX Item "banner"
Returns \s-1SMTP\s0 banner
.SH "Examples"
.IX Header "Examples"
Examples
.Sp
.RS 4
Send email composed in \s-1HTML\s0 using Gmail
.Sp
.Vb 6
\&      use strict;
\&      use warnings;
\&      use Email::Send::SMTP::Gmail;
\&      my ($mail,$error)=Email::Send::SMTP::Gmail\->new( \-smtp=>\*(Aqsmtp.gmail.com\*(Aq,
\&                                                       \-login=>\*(Aqwhateveraddress@gmail.com\*(Aq,
\&                                                       \-pass=>\*(Aqwhatever_pass\*(Aq);
\&
\&      print "session error: $error" unless ($email!=\-1);
\&
\&      $mail\->send(\-to=>\*(Aqtarget@xxx.com\*(Aq, \-subject=>\*(AqHello!\*(Aq,
\&                  \-body=>\*(AqJust testing it<br>Bye!\*(Aq,\-contenttype=>\*(Aqtext/html\*(Aq);
\&      $mail\->bye;
.Ve
.Sp
Send email using a \s-1SMTP\s0 server without secure layer and authentication
.Sp
.Vb 4
\&      use strict;
\&      use warnings;
\&      use Email::Send::SMTP::Gmail;
\&      my $mail=Email::Send::SMTP::Gmail\->new( \-smtp=>\*(Aqmy.smtp.server\*(Aq,\-layer=>\*(Aqnone\*(Aq, \-auth=>\*(Aqnone\*(Aq);
\&
\&      $mail\->send(\-from=>\*(Aqsender@yyy.com\*(Aq, \-to=>\*(Aqtarget@xxx.com\*(Aq, \-subject=>\*(AqHello!\*(Aq,
\&                  \-body=>\*(AqQuick email\*(Aq);
\&      $mail\->bye;
.Ve
.Sp
Send email with attachments in comma separated format
.Sp
.Vb 6
\&      use strict;
\&      use warnings;
\&      use Email::Send::SMTP::Gmail;
\&      my $mail=Email::Send::SMTP::Gmail\->new( \-smtp=>\*(Aqsmtp.gmail.com\*(Aq,
\&                                              \-login=>\*(Aqwhateveraddress@gmail.com\*(Aq,
\&                                              \-pass=>\*(Aqwhatever_pass\*(Aq);
\&
\&      $mail\->send(\-to=>\*(Aqtarget@xxx.com\*(Aq, \-subject=>\*(AqHello!\*(Aq,
\&                  \-body=>\*(AqJust testing it<br>Bye!\*(Aq,\-contenttype=>\*(Aqtext/html\*(Aq,
\&                  \-attachments=>\*(Aq/full_path/file1.pdf,/full_path/file2.pdf\*(Aq);
\&      $mail\->bye;
.Ve
.Sp
Send email with attachments using hashref
.Sp
.Vb 6
\&      use strict;
\&      use warnings;
\&      use Email::Send::SMTP::Gmail;
\&      my $mail=Email::Send::SMTP::Gmail\->new( \-smtp=>\*(Aqsmtp.gmail.com\*(Aq,
\&                                              \-login=>\*(Aqwhateveraddress@gmail.com\*(Aq,
\&                                              \-pass=>\*(Aqwhatever_pass\*(Aq);
\&
\&      my $att;
\&      $att\->[0]\->{file}=\*(Aq/full_path/file.pdf\*(Aq;
\&      $att\->[1]\->{file}=\*(Aq/full_path/file1.pdf\*(Aq;
\&
\&      $mail\->send(\-to=>\*(Aqtarget@xxx.com\*(Aq, \-subject=>\*(AqHello!\*(Aq,
\&                  \-body=>\*(AqJust testing it<br>Bye!\*(Aq,\-contenttype=>\*(Aqtext/html\*(Aq,
\&                  \-attachmentlist=>$att);
\&      $mail\->bye;
.Ve
.RE
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-email\-send\-smtp\-gmail at rt.cpan.org\*(C'\fR or through the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Email\-Send\-SMTP\-Gmail>.
You will automatically be notified of the progress on your bug as we make the changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Email::Send::SMTP::Gmail
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Email\-Send\-SMTP\-Gmail>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Email\-Send\-SMTP\-Gmail>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Email\-Send\-SMTP\-Gmail>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Email\-Send\-SMTP\-Gmail/>
.IP "\(bu" 4
Repository
.Sp
<https://github.com/xpeco/Email\-Send\-SMTP\-Gmail>
.SH "AUTHORS"
.IX Header "AUTHORS"
Juan Jose 'Peco' San Martin, \f(CW\*(C`<peco at cpan.org>\*(C'\fR
.PP
Martin Vukovic, \f(CW\*(C`<mvukovic at microbotica.es>\*(C'\fR
.PP
Flaviano Tresoldi, \f(CW\*(C`<info at swwork.it>\*(C'\fR
.PP
Narcyz Knap, \f(CW\*(C`<narcyz at gumed.edu.pl>\*(C'\fR
.PP
Devin Ceartas, \f(CW\*(C`<devin@nacredata.com>\*(C'\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2015\-2020 Microbotica
.PP
This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
