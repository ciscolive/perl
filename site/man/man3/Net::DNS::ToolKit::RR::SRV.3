.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::DNS::ToolKit::RR::SRV 3"
.TH Net::DNS::ToolKit::RR::SRV 3 "2013-04-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::ToolKit::RR::SRV \- Resource Record Handler
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  DO NOT use Net::DNS::ToolKit::RR::SRV
\&  DO NOT require Net::DNS::ToolKit::RR::SRV
\&
\&  Net::DNS::ToolKit::RR::SRV is autoloaded by 
\&  class Net::DNS::ToolKit::RR and its methods
\&  are instantiated in a \*(Aqspecial\*(Aq manner.
\&
\&  use Net::DNS::ToolKit::RR;
\&  ($get,$put,$parse) = new Net::DNS::ToolKit::RR;
\&
\&  ($newoff,$name,$type,$class,$ttl,$rdlength,
\&   $priority,$weight,$port,$target) =  $get\->SRV(\e$buffer,$offset);
\&
\&  Note: the $get\->SRV method is normally called
\&  via:  @stuff = $get\->next(\e$buffer,$offset);
\&
\&  ($newoff,@dnptrs)=$put\->SRV(\e$buffer,$offset,\e@dnptrs,
\&        $name,$type,$class,$ttl,$rdlength,
\&        $priority,$weight,$port,$target);
\&
\&  ($NAME,$TYPE,$CLASS,$TTL,$rdlength,$priority,$weight,$port,$target)
\&    = $parse\->SRV($name,$type,$class,$ttl,$rdlength,
\&        $priority,$weight,$port,$target);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBNet::DNS::ToolKit::RR:SRV\fR appends an \s-1SRV\s0 resource record to a \s-1DNS\s0 packet
under construction, recovers an \s-1SRV\s0 resource record from a packet being decoded, and
converts the numeric/binary portions of the resource record to human
readable form.
.PP
.Vb 1
\&  Description from RFC2782.txt
\&
\&  All RRs have the same top level format shown below:
\&
\&                                    1  1  1  1  1  1
\&      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+  
\&    |              _SERVICE._PROTO.NAME             |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                      TYPE                     |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                     CLASS                     |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                      TTL                      |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                    RDLENGTH                   |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                    PRIORITY                   |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                     WEIGHT                    |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                      PORT                     |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                     TARGET                    |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&
\&    _Service._Proto.Name TTL Class SRV Priority Weight Port Target
\&
\&
\&  SERVICE The symbolic name of the desired service, as defined in 
\&        Assigned Numbers [STD 2] or locally.  An underscore (_) is 
\&        prepended to the service identifier to avoid collisions with
\&        DNS labels that occur in nature.
\&        Some widely used services, notably POP, don\*(Aqt have a single
\&        universal name.  If Assigned Numbers names the service
\&        indicated, that name is the only name which is legal for SRV
\&        lookups.  The Service is case insensitive.
\&
\&  PROTO The symbolic name of the desired protocol, with an underscore
\&        (_) prepended to prevent collisions with DNS labels that occur
\&        in nature.  _TCP and _UDP are at present the most useful values
\&        for this field, though any name defined by Assigned Numbers or
\&        locally may be used (as for Service).  The Proto is case
\&        insensitive.
\&
\&  NAME  The domain this RR refers to.  The SRV RR is unique in that the
\&        name one searches for is not this name; the example near the end
\&        shows this clearly.
\&
\&  TYPE  two octets containing one of the RR TYPE codes.
\&
\&  CLASS two octets containing one of the RR CLASS codes.
\&
\&  TTL   a 32 bit signed integer that specifies the time interval
\&        that the resource record may be cached before the source
\&        of the information should again be consulted.  Zero
\&        values are interpreted to mean that the RR can only be
\&        used for the transaction in progress, and should not be
\&        cached.  For example, SOA records are always distributed
\&        with a zero TTL to prohibit caching.  Zero values can
\&        also be used for extremely volatile data.
\&
\&  RDLENGTH an unsigned 16 bit integer that specifies the length
\&        in octets of the followin RDATA field.
\&
\&  PRIORITY The priority of this target host.  A client MUST attempt to
\&        contact the target host with the lowest\-numbered priority it can
\&        reach; target hosts with the same priority SHOULD be tried in an
\&        order defined by the weight field.  The range is 0\-65535.  This
\&        is a 16 bit unsigned integer in network byte order.
\&
\&  WEIGHT A server selection mechanism.  The weight field specifies a
\&        relative weight for entries with the same priority. Larger
\&        weights SHOULD be given a proportionately higher probability of
\&        being selected. The range of this number is 0\-65535.  This is a
\&        16 bit unsigned integer in network byte order.  Domain
\&        administrators SHOULD use Weight 0 when there isn\*(Aqt any server
\&        selection to do, to make the RR easier to read for humans (less
\&        noisy).  In the presence of records containing weights greater
\&        than 0, records with weight 0 should have a very small chance of
\&        being selected.
\&
\&        In the absence of a protocol whose specification calls for the
\&        use of other weighting information, a client arranges the SRV
\&        RRs of the same Priority in the order in which target hosts,
\&        specified by the SRV RRs, will be contacted. The following
\&        algorithm SHOULD be used to order the SRV RRs of the same
\&        priority:
\&
\&        To select a target to be contacted next, arrange all SRV RRs
\&        (that have not been ordered yet) in any order, except that all
\&        those with weight 0 are placed at the beginning of the list.
\&
\&        Compute the sum of the weights of those RRs, and with each RR
\&        associate the running sum in the selected order. Then choose a
\&        uniform random number between 0 and the sum computed
\&        (inclusive), and select the RR whose running sum value is the
\&        first in the selected order which is greater than or equal to
\&        the random number selected. The target host specified in the
\&        selected SRV RR is the next one to be contacted by the client.
\&        Remove this SRV RR from the set of the unordered SRV RRs and
\&        apply the described algorithm to the unordered SRV RRs to select
\&        the next target host.  Continue the ordering process until there
\&        are no unordered SRV RRs.  This process is repeated for each
\&        Priority.
\&
\&  PORT  The port on this target host of this service.  The range is 0\-
\&        65535.  This is a 16 bit unsigned integer in network byte order.
\&        This is often as specified in Assigned Numbers but need not be.
\&
\&  TARGET The domain name of the target host.  There MUST be one or more
\&        address records for this name, the name MUST NOT be an alias (in
\&        the sense of RFC 1034 or RFC 2181).  Implementors are urged, but
\&        not required, to return the address record(s) in the Additional
\&        Data section.  Unless and until permitted by future standards
\&        action, name compression is not to be used for this field.
\&
\&        A Target of "." means that the service is decidedly not
\&        available at this domain.
.Ve
.IP "\(bu" 4
\&\f(CW@stuff\fR = \f(CW$get\fR\->\s-1SRV\s0(\e$buffer,$offset);
.Sp
.Vb 1
\&  Get the contents of the resource record.
\&
\&  USE: @stuff = $get\->next(\e$buffer,$offset);
\&
\&  where: @stuff = (
\&  $newoff $name,$type,$class,$ttl,$rdlength,
\&        $priority,$weight,$port,$target);
.Ve
.Sp
All except the last four items, \fB\f(CB$priority\fB,$weight,$port,$target\fR, are 
provided by the class loader, \fBNet::DNS::ToolKit::RR\fR. The code in this 
method knows how to retrieve \fB\f(CB$priority\fB,$weight,$port,$target\fR.
.Sp
.Vb 8
\&  input:        pointer to buffer,
\&                offset into buffer
\&  returns:      offset to next resource,
\&                @common RR elements,
\&                priority
\&                weight
\&                port
\&                target name
.Ve
.IP "\(bu" 4
($newoff,@dnptrs)=$put\->\s-1SRV\s0(\e$buffer,$offset,\e@dnptrs,
	\f(CW$name\fR,$type,$class,$ttl,$subtype,$hostname);
.Sp
Append an \s-1SRV\s0 record to \f(CW$buffer\fR.
.Sp
.Vb 2
\&  where @common = (
\&        $name,$type,$class,$ttl);
.Ve
.Sp
The method will insert the \f(CW$rdlength\fR, \f(CW$subtype\fR and \f(CW$hostname\fR, then
return the updated pointer to the array of compressed names
.Sp
The class loader, \fBNet::DNS::ToolKit::RR\fR, inserts the \f(CW@common\fR elements and
returns updated \f(CW@dnptrs\fR. This module knows how to insert its \s-1RDATA\s0 and
calculate the \f(CW$rdlength\fR.
.Sp
.Vb 11
\&  input:        pointer to buffer,
\&                offset (normally end of buffer), 
\&                pointer to compressed name array,
\&                @common RR elements,
\&                priority
\&                weight
\&                port
\&                target name
\&  output:       offset to next RR,
\&                new pointer array,
\&           or   empty list () on error.
.Ve
.IP "\(bu" 4
(@COMMON,$priority,$weight,$port,$SRVDNAME) = \f(CW$parse\fR\->\s-1SRV\s0(@common,$priority,$weight,$target);
.Sp
Converts binary/numeric field data into human readable form. The common \s-1RR\s0
elements are supplied by the class loader, \fBNet::DNS::ToolKit::RR\fR.
For \s-1SRV RR\s0's, this returns \f(CW$hostname\fR terminated with '.'
.Sp
.Vb 8
\&  input:        priority
\&                weight
\&                port
\&                target name
\&  returns:      priority
\&                weight
\&                port
\&                SRV Domain Name.
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.Vb 2
\&        Net::DNS::ToolKit
\&        Net::DNS::Codes
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
.Vb 1
\&        none
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Robinton <michael@bizsystems.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&    Copyright 2003 \- 2013, Michael Robinton <michael@bizsystems.com>
.Ve
.PP
Michael Robinton <michael@bizsystems.com>
.PP
All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of either:
.PP
.Vb 3
\&  a) the GNU General Public License as published by the Free
\&  Software Foundation; either version 2, or (at your option) any
\&  later version, or
\&
\&  b) the "Artistic License" which comes with this distribution.
.Ve
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of 
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See either    
the \s-1GNU\s0 General Public License or the Artistic License for more details.
.PP
You should have received a copy of the Artistic License with this
distribution, in the file named \*(L"Artistic\*(R".  If not, I'll be glad to provide
one.
.PP
You should also have received a copy of the \s-1GNU\s0 General Public License
along with this program in the file named \*(L"Copying\*(R". If not, write to the
.PP
.Vb 3
\&        Free Software Foundation, Inc.                        
\&        59 Temple Place, Suite 330
\&        Boston, MA  02111\-1307, USA
.Ve
.PP
or visit their web page on the internet at:
.PP
.Vb 1
\&        http://www.gnu.org/copyleft/gpl.html.
.Ve
.SH "See also:"
.IX Header "See also:"
\&\fBNet::DNS::Codes\fR\|(3), \fBNet::DNS::ToolKit\fR\|(3)
