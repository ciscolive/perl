.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::IPv6RangeTemplate 3"
.TH Infoblox::DHCP::IPv6RangeTemplate 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::IPv6RangeTemplate \- DHCP IPv6 RangeTemplate object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1DHCP\s0 IPv6 range template contains a set of predefined properties and can be used to create \s-1DHCP\s0 IPv6 ranges in a quick and consistent way. The \s-1DHCP\s0 IPv6 range created from a \s-1DHCP\s0 IPv6 range template will inherit the properties defined in the template.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $ipv6_range_template = Infoblox::DHCP::IPv6RangeTemplate\->new(
\&             name                    => $string,                                  #Required
\&             number_of_addresses     => $num,                                     #Required
\&             offset                  => $num,                                     #Required
\&             comment                 => $string,                                  #Optional / Default is undefined
\&             exclude                 => [$ExclusionRange1, $ExclusionRange2,...], #Optional / Default is empty
\&             extattrs                => { $string => $extattr, ... },             #Optional / Default is undefined
\&             extensible_attributes   => { $string => $string | $num, $string => [ $string | $num, ... ], ... }, #Optional / Default is undefined
\&             member                  => $Member,                                  #Optional / Default is undefined
\&             override_recycle_leases => "true" | "false",                         #Optional / Default is "false"
\&             recycle_leases          => "true" | "false" | undef,                 #Optional / Default is undefined
\&             server_association_type => "NONE" | "MEMBER",                        #Optional / Default is "NONE"
\&  );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to a \s-1DHCP\s0 IPv6 range template object.
.SS "Infoblox::DHCP::IPv6NetworkTemplate\->range_templates( )"
.IX Subsection "Infoblox::DHCP::IPv6NetworkTemplate->range_templates( )"
.RS 4
Use this function to include a range template in an IPv6 network template on the Infoblox appliance. See Infoblox::DHCP::IPv6NetworkTemplate\->\fBrange_templates()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Construct an IPv6 range template object
\& my $ipv6_range_template = Infoblox::DHCP::IPv6RangeTemplate\->new(
\&             name                    => "custom_range_template",
\&             number_of_addresses     => "1000",
\&             offset                  => "10",
\&     );
\&
\& my $template = Infoblox::DHCP::Template\->new(
\&             name                    => "custom_range_template",
\&     );
\&
\& #Configure a range template in a network template object
\& my $responce = $network_template\->range_templates([$template]);
.Ve
.RE
.RS 4
.RE
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that can be applied to a \s-1DHCP\s0 IPv6 range template object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP\s0 IPv6 range template object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 12
\& #Construct an object
\& my $ipv6_range_template = Infoblox::DHCP::IPv6RangeTemplate\->new(
\&         name                    => "custom_range_template",
\&         offset                  => "20",
\&         number_of_addresses     => "100",
\&         comment                 => "add range",
\&         exclude                 => [$exclusion_range_template],
\&         member                  => $memberdhcp,
\&         recycle_leases          => "false",
\&         override_recycle_leases => "true",
\&         server_association_type => \*(AqMEMBER\*(Aq,
\& );
\&
\& # Submit for addition
\& my $response = $session\->add( $ipv6_range_template );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\&     Apply the following attributes to get a specific DHCP IPv6 range template object:
\&
\&     name \- Optional. The name of the DHCP IPv6 range template.
\&     extattrs     \- Optional. A hash reference containing extensible attributes.
\&     extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&     server_association_type \- Optional. The server association type for the range.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 4
\&     my @retrieved_objs = $session\->get(
\&                           object => "Infoblox::DHCP::IPv6RangeTemplate",
\&                           name   => "custom_range_template"
\&                           );
\&
\&    my @retrieved_objs = $session\->get(
\&                          object                => "Infoblox::DHCP::IPv6RangeTemplate",
\&                          extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\&                         );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\&     Apply the following attributes to search for a specific DHCP IPv6 range template object:
\&
\&     name    \- Optional. The name of the DHCP IPv6 range template (regular expression).
\&     comment \- Optional. The comment of the DHCP IPv6 range template (regular expression).
\&     extattrs     \- Optional. A hash reference containing extensible attributes.
\&     extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&     server_association_type \- Optional. The server association type for the range.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\&     my @retrieved_objs = $session\->search(
\&                           object  => "Infoblox::DHCP::IPv6RangeTemplate",
\&                           name    => "custom_range_template",
\&                           comment => ".*",
\&            );
\&
\&    my @retrieved_objs = $session\->search(
\&                           object                => "Infoblox::DHCP::IPv6RangeTemplate",
\&                           extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\&            );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 IPv6 range template object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     # Use this method to modify the comment.
\&     $ipv6_range_template\->comment("this is a modified comment");
\&     # Submit modification
\&     my $response = $session\->modify( $ipv6_range_template );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1DHCP\s0 IPv6 range template object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific \s-1DHCP\s0 IPv6 range template object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\&     # Get the objects with the same name
\&     my @retrieved_objs = $session\->get(
\&         object => "Infoblox::DHCP::IPv6RangeTemplate",
\&         name   => "custom_range_template"
\&    );
\&
\&     # Find the desired object from the retrieved list.
\&     my $desired_ipv6_range_template = $retrieved_objs[0];
\&     # Submit for removal
\&     my $response = $session\->remove( $desired_ipv6_range_template );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 IPv6 range template object.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment of a \s-1DHCP\s0 IPv6 range template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get comment
\&     my $comment = $ipv6_range_template\->comment();
\&     #Modify comment
\&     $ipv6_range_template\->comment("Modifying the DHCP IPv6 range template comment");
.Ve
.RE
.RS 4
.RE
.SS "exclude( )"
.IX Subsection "exclude( )"
.RS 4
Use this method to set or retrieve the exclusion range template in the \s-1DHCP\s0 IPv6 range template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains defined Infoblox::DHCP::ExclusionRangeTemplate objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get exclude
\&     my $ref_exclude = $ipv6_range_template\->exclude();
\&     #Modify exclude
\&     $ipv6_range_template\->exclude([$exl1]); #$exl1 is an Infoblox::DHCP::ExclusionRangeTemplate object
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 IPv6 range template object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $ipv6_range_template\->extattrs();
\& #Modify extattrs
\& $ipv6_range_template\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 IPv6 range template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $ipv6_range_template\->extensible_attributes();
\& #Modify extensible attributes
\& $ipv6_range_template\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "member( )"
.IX Subsection "member( )"
.RS 4
Use this method to set or retrieve the grid member assigned to the \s-1DHCP\s0 IPv6 range template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a defined Infoblox::DHCP::Member object. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get member
\&     my $ref_member = $ipv6_range_template\->member();
\&     #Modify member
\&     $ipv6_range_template\->member($member1); #$member is an Infoblox::DHCP::Member object
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of the \s-1DHCP\s0 IPv6 range template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Name of the IPv6 range template in string format with a maximum of 64 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get name
\&     my $name = $ipv6_range_template\->name();
\&     #Modify name
\&     $ipv6_range_template\->name("custom_range_template");
.Ve
.RE
.RS 4
.RE
.SS "number_of_addresses( )"
.IX Subsection "number_of_addresses( )"
.RS 4
Use this method to set or retrieve the number of addresses in this \s-1DHCP\s0 IPv6 range template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The number of addresses in this \s-1DHCP\s0 IPv6 range template.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get number_of_addresses
\&     my $number_of_addresses = $ipv6_range_template\-> number_of_addresses();
\&     #Modify number_of_addresses
\&     $ipv6_range_template\->number_of_addresses("100");
.Ve
.RE
.RS 4
.RE
.SS "offset( )"
.IX Subsection "offset( )"
.RS 4
Use this method to set or retrieve the address offset of this \s-1DHCP\s0 IPv6 range template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The address offset of this \s-1DHCP\s0 IPv6 range template. The offset is calculated from the start address of the IPv6 network template that includes the \s-1DHCP\s0 range template. For example, in the IPv6 network 2010:0:0:10::/64, if the offset is set to 10 and number_of_addresses is set to 100, then the start address of the \s-1DHCP\s0 IPv6 range created from this range template is 2010:0:0::A and the end address is 2010:0:0::6D.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get offset
\&     my $offset = $ipv6_range_template\->offset();
\&     #Modify offset
\&     $ipv6_range_template\->offset("10");
.Ve
.RE
.RS 4
.RE
.SS "override_recycle_leases( )"
.IX Subsection "override_recycle_leases( )"
.RS 4
The override_recycle_leases attribute controls whether the recycle_leases value in the \s-1DHCP\s0 IPv6 range template is used, instead of the grid default.
.Sp
The override_recycle_leases attribute can be specified explicitly. It is also set implicitly when recycle_leases is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for recycle_leases. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for recycle_leases.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_recycle_leases
\&    my $override_recycle_leases=$ipv6_range_template\->override_recycle_leases( );
\&    #Modifying override_recycle_leases
\&    $ipv6_range_template\->override_recycle_leases("true");
.Ve
.RE
.RS 4
.RE
.SS "recycle_leases( )"
.IX Subsection "recycle_leases( )"
.RS 4
Use this method to set or retrieve the recycle_leases flag of the \s-1DHCP\s0 IPv6 range template.
.Sp
If the flag is enabled, the leases are kept in the recycle bin until one week after they expire. When the flag is disabled, the leases are irrecoverably deleted.
.Sp
Setting this method to a defined value implicitly sets the override_recycle_leases method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_recycle_leases attribute to \*(L"false\*(R".
.Sp
Note that when recycle_leases is set to a defined value and override_recycle_leases is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->recycle_leases(\*(L"true\*(R"); \f(CW$object\fR\->override_recycle_leases(\*(L"false\*(R"); will set override_recycle_leases to \*(L"false\*(R", and the sequence \f(CW$objct\fR\->override_recycle_leases(\*(L"false\*(R"); \f(CW$object\fR\->recycle_leases(\*(L"true\*(R"); will result in override_recycle_leases=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the recycle_leases flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get recycle_leases
\& my $recycle_leases = $ipv6_range_template\->recycle_leases();
\& #Modify recycle_leases
\& $ipv6_range_template\->recycle_leases("false");
.Ve
.RE
.RS 4
.RE
.SS "server_association_type( )"
.IX Subsection "server_association_type( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 IPv6 range template server association type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1NONE\*(R"\s0 and \*(L"\s-1MEMBER\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get server_association_type
\& my $server_association_type = $ipv6_range_template\->server_association_type();
\& #Modify server_association_type
\& $ipv6_range_template\->server_association_type("MEMBER");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a \s-1DHCP\s0 range template object such as add, modify, and remove. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 IPv6RangeTemplate object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2",      #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create a DHCP Member object
\& my $memberdhcp = Infoblox::DHCP::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => "192.168.1.2"
\& );
\& unless($memberdhcp) {
\&        die("Construct member failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Member object created successfully\en";
\&
\& #Construct exclusion range template object
\& my $exclusion_range_template = Infoblox::DHCP::ExclusionRangeTemplate\->new(
\&     offset              => "15",
\&     number_of_addresses => "50",
\&     comment             => "Excluded range"
\& );
\& unless($exclusion_range_template){
\&        die("Construct exclusion range template object failed: ",
\&                 Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&  print "Exclusion range template object created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 IPv6 range template object\fR
.PP
.Vb 10
\& my $ipv6_range_template = Infoblox::DHCP::IPv6RangeTemplate\->new(
\&         name                    => "custom_range_template",
\&         offset                  => "20",
\&         number_of_addresses     => "100",
\&         comment                 => "add range",
\&         exclude                 => [$exclusion_range_template],
\&         member                  => $memberdhcp,
\&         recycle_leases          => "false",
\&         override_recycle_leases => "true",
\&         server_association_type => \*(AqMEMBER\*(Aq,
\& );
\& unless($ipv6_range_template) {
\&        die("Construct DHCP IPv6 range template object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP IPv6 range template object created successfully\en";
\&
\& #Add the DHCP IPv6 range template object into the Infoblox appliance through a session
\& $session\->add($ipv6_range_template)
\&     or die("Add DHCP IPv6 range template object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP IPv6 range template object added to the network successfully\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DHCP\s0 IPv6 range template\fR
.PP
.Vb 11
\& #Get a DHCP IPv6 range template through the session
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DHCP::IPv6RangeTemplate",
\&     name       => "custom_range_template",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP IPv6 range template failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP IPv6 range template object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified DHCP IPv6 range template
\& $object\->comment("modified comment");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify DHCP IPv6 range template failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP IPv6 range template object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DHCP\s0 IPv6 range template\fR
.PP
.Vb 5
\& #Get a DHCP IPv6 range template through the session
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DHCP::IPv6RangeTemplate",
\&     name       => "custom_range_template",
\& );
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP IPv6 range template failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP IPv6 range template object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove DHCP IPv6 range template failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP IPv6 range template object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DHCP::IPv6NetworkTemplate, Infoblox::DHCP::RangeTemplate, Infoblox::DHCP::ExclusionRangeTemplate, Infoblox::DHCP::Template, Infoblox::DHCP::Member
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
