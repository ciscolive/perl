.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Member::QueryFQDNParameter 3"
.TH Infoblox::Grid::Member::QueryFQDNParameter 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Member::QueryFQDNParameter \- A FQDN query parameters.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1FQDN\s0 query call parameter objects. This object is intended to use only as
Infoblox::Session\->\fBquery_fqdn_on_member()\fR parameter.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 8
\& my $params = Infoblox::Grid::Member::QueryFQDNParameter\->new(
\&     fqdn            => $string,                                          # Required
\&     member          => $string,                                          # Optional / Default is GM
\&     name_server     => $ipv4addr,                                        # Optional / Default is local nameserver
\&     record_type     => \*(AqANY\*(Aq | \*(AqA\*(Aq | \*(AqAAAA\*(Aq | \*(AqCNAME\*(Aq | \*(AqDNAME\*(Aq | \*(AqMX\*(Aq |
\&                        \*(AqNAPTR\*(Aq | \*(AqNS\*(Aq | \*(AqPTR\*(Aq | \*(AqSRV\*(Aq | \*(AqTXT\*(Aq | \*(AqAXFR\*(Aq   # Optional / Default is \*(AqANY\*(Aq
\&     recursive_query => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                 # Optional / Default is \*(Aqtrue\*(Aq
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
.SS "Infoblox::Session\->query_fqdn_on_member( )"
.IX Subsection "Infoblox::Session->query_fqdn_on_member( )"
.RS 4
Use this method to query \s-1FQDN\s0 on the specified member.
.Sp
This method forces Grid Master to execute \s-1RPC\s0 call to invoke dog on the member for a specific \s-1FQDN.\s0
.Sp
See Infoblox::Session\->\fBquery_fqdn_on_member()\fR for parameters and return  values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Construct parameters object
\& my $query_fqdn = Infoblox::Grid::Member::QueryFQDNParameter\->new(
\&     fqdn        => \*(Aqbar.com\*(Aq,
\&     member      => \*(Aqmember1\*(Aq,
\&     name_server => \*(Aq5.5.5.5\*(Aq,
\&     record_type => \*(AqA\*(Aq,
\& );
\&
\& #Query
\& my $response = $session\->query_fqdn_on_member($query_fqdn);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of the object.
.SS "fqdn( )"
.IX Subsection "fqdn( )"
.RS 4
Use this method to set or retrieve a fully-qualified \s-1DNS\s0 query name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a \s-1FQDN\s0 to query in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get fqdn value
\& my $fqdn = $object\->fqdn();
\&
\& #Modify fqdn value
\& $object\->fqdn($fqdn);
.Ve
.RE
.RS 4
.RE
.SS "member( )"
.IX Subsection "member( )"
.RS 4
Use this method to set or retrieve a member name to invoke dig on.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string that contains the Grid Member host name. Default is undefined, which causes dig invokation on Grid Master.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get member value
\& my $member = $object\->member();
\&
\& #Modify member value
\& $object\->member(\*(Aqlocalhost.localdomain\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "name_server( )"
.IX Subsection "name_server( )"
.RS 4
Use this method to set or retrieve a nameserver to query.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string that contains an IPv4 address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name_server value
\& my $value = $object\->name_server();
\&
\& #Modify name_server value
\& $object\->name_server(\*(Aq5.5.5.5\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "record_type( )"
.IX Subsection "record_type( )"
.RS 4
Use this method to set or retrieve the resource record type to query.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1ANY\s0', 'A', '\s-1AAAA\s0', '\s-1CNAME\s0', '\s-1DNAME\s0', '\s-1MX\s0', '\s-1NAPTR\s0', '\s-1NS\s0', '\s-1PTR\s0', '\s-1SRV\s0', '\s-1TXT\s0' and '\s-1AXFR\s0'. The default value is '\s-1ANY\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get record_type value
\& my $value = $object\->record_type();
\&
\& #Modify record_type value
\& $object\->record_type(\*(AqAAAA\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "recursive_query( )"
.IX Subsection "recursive_query( )"
.RS 4
Use this method to set or retrieve the recursive query flag.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to set recursive query flag and 'false' to unset/deactivate it. The default value is 'true'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get recursive_query value
\& my $value = $object\->recursive_query();
\&
\& #Modify recursive_query value
\& $object\->recursive_query(\*(Aqfalse\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session\->\fBquery_fqdn_on_member()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
