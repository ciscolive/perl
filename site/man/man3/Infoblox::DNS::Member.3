.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Member 3"
.TH Infoblox::DNS::Member 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Member \- DNS Member object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A grid member is part of a grid which is a group of two or more Infoblox appliances that share sections of a common, distributed, built-in database. A grid member inherits its settings from the grid. A member is a single Infoblox appliance or an \s-1HA\s0 pair that provides \s-1DNS\s0 services seamlessly across an entire network.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $member = Infoblox::DNS::Member\->new(
\&     ipv4addr       => $ipv4addr,        #Required if $ipv6addr is not present
\&     ipv6addr       => $ipv6addr,        #Required if $ipv4addr is not present
\&     grid_replicate => "true" | "false", #Optional / Default is "true"
\&     lead           => "true" | "false", #Optional / Default is "false"
\&     name           => $fqdn,            #Optional / Default is  hostname of the matching ipv4addr
\&     stealth        => "true" | "false"  #Optional / Default is "false"
\&     preferred_primaries          => [$pp1, $pp2, ...], #Optional / Default is undefined
\&     override_preferred_primaries => "true" | "false"   #Optional / Default is "false"
\&     forward_to          => [$ns1, $ns2, ...],  #Optional
\&     forwarders_only     => "true" | "false"    #Optional / Default is "false"
\&     override_forwarders => "true" | "false"    #Optional / Default is "false"
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to apply to an \s-1DNS\s0 Member object.
.SS "Infoblox::DNS::Zone\->multiple_primaries( )"
.IX Subsection "Infoblox::DNS::Zone->multiple_primaries( )"
.RS 4
Use this function to specify primary members to a zone. See Infoblox::DNS::Zone\->\fBmultiple_primaries()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& my $member1 = Infoblox::DNS::Member\->new(
\&     name           => "localhost.localdomain",
\&     ipv4addr       => "192.168.1.2",
\&     stealth        => "false",
\&     lead           => "false",
\&     grid_replicate => "false"
\& );
\&
\& unless($member1) {
\&      die("Construct member failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Member object created successfully\en";
\&
\& #Create the Zone object with this member
\& my $firstzone = Infoblox::DNS::Zone\->new(
\&     name        => "infoblox.com",
\&     multiple_primaries => [$member1],
\& );
\&
\& my $response = $session\->add($firstzone)
\& unless($response) {
\&      die("Add zone failed: ",
\&            session\->status_code() . ":" . session\->status_detail());
\& }
\& print "DNS member object added to the zone successfully\en";
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DNS::Zone\->secondary( )"
.IX Subsection "Infoblox::DNS::Zone->secondary( )"
.RS 4
Use this function to specify secondary member to a zone. See Infoblox::DNS::Zone\->\fBsecondary()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& my $member1 = Infoblox::DNS::Member\->new(
\&     name           => "localhost.localdomain",
\&     ipv4addr       => "192.168.1.2",
\&     stealth        => "false",
\&     lead           => "false",
\&     grid_replicate => "false"
\& );
\&
\& unless($member1) {
\&      die("Construct member failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Member object created successfully\en";
\&
\& my $member2 = Infoblox::DNS::Member\->new(
\&     name           => "localhost1.localdomain",
\&     ipv4addr       => "192.168.1.3",
\&     stealth        => "false",
\&     lead           => "false",
\&     grid_replicate => "false"
\& );
\&
\& unless($member2) {
\&      die("Construct member failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Member object created successfully\en";
\&
\& #Create the Zone object with this member
\& my $firstzone = Infoblox::DNS::Zone\->new(
\&     name        => "infoblox.com",
\&     multiple_primaries => [$member1],
\&     secondaries => [ $member2 ] ,
\& );
\&
\& my $response = $session\->add($firstzone)
\& unless($response) {
\&      die("Add zone failed: ",
\&            session\->status_code() . ":" . session\->status_detail());
\& }
\&
\& print "DNS member object added to the zone successfully\en";
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::DNS::Nsgroup\->multiple_primaries( )"
.IX Subsection "Infoblox::Grid::DNS::Nsgroup->multiple_primaries( )"
.RS 4
Use this function to specify primary members to a \s-1NS\s0 group. See Infoblox::Grid::DNS::Nsgroup\->\fBmultiple_primaries()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& my $member1 = Infoblox::DNS::Member\->new(
\&     name           => "localhost.localdomain",
\&     ipv4addr       => "192.168.1.2",
\&     stealth        => "false",
\&     lead           => "false",
\&     grid_replicate => "false"
\& );
\&
\& unless($member1) {
\&      die("Construct member failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Member object created successfully\en";
\&
\& my $nsgroup1 = Infoblox::Grid::DNS::Nsgroup\->new (
\&    name      => "ns_group1",
\&    multiple_primaries => [$member1]
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::DNS::Nsgroup\->secondary( )"
.IX Subsection "Infoblox::Grid::DNS::Nsgroup->secondary( )"
.RS 4
Use this function to specify secondary member to a \s-1NS\s0 group. See Infoblox::Grid::DNS::Nsgroup\->\fBsecondary()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& my $member1 = Infoblox::DNS::Member\->new(
\&     name           => "localhost.localdomain",
\&     ipv4addr       => "192.168.1.2",
\&     stealth        => "false",
\&     lead           => "false",
\&     grid_replicate => "false"
\& );
\&
\& unless($member1) {
\&      die("Construct member failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Member object created successfully\en";
\&
\& my $member2 = Infoblox::DNS::Member\->new(
\&     name           => "localhost1.localdomain",
\&     ipv4addr       => "192.168.1.3",
\&     stealth        => "false",
\&     lead           => "false",
\&     grid_replicate => "false"
\& );
\&
\& unless($member2) {
\&      die("Construct member failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Member object created successfully\en";
\&
\& my $nsgroup1 = Infoblox::Grid::DNS::Nsgroup\->new (
\&    name        => "ns_group1",
\&    multiple_primaries => [$member1],
\&    secondaries => [ $member2 ],
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a \s-1DNS\s0 Member object.
.SS "forward_to( )"
.IX Subsection "forward_to( )"
.RS 4
Use this method to set or retrieve a list of \s-1DNS\s0 forwarders. You can use this attribute only for \s-1DNS\s0 members in forward-mapping zones.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DNS::Nameserver objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Get forward_to
\& my $forward_to = $member\->forward_to();
\& #Modify forward_to
\& my $nameserver = Infoblox::DNS::Nameserver\->new(
\&        name     => "ns1.forwd.com",
\&        ipv4addr => "11.11.11.11",
\&    );
\&
\& $zone\->forward_to([$nameserver]);
.Ve
.RE
.RS 4
.RE
.SS "forwarders_only( )"
.IX Subsection "forwarders_only( )"
.RS 4
Use this method to set the forwarders_only flag. You can use this attribute only for \s-1DNS\s0 members in forward-mapping zones.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to use only \s-1DNS\s0 forwarders or \*(L"false\*(R" to disable it. The default value is 'false'.
.Sp
The server writes 'forward only' into the \s-1DNS\s0 configuration file for the \s-1DNS\s0 member.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get forwarders_only
\& my $forwarders_only = $member\->forwarders_only();
\& #Modify forwarders_only
\& $member\->forwarders_only("true");
.Ve
.RE
.RS 4
.RE
.SS "override_forwarders( )"
.IX Subsection "override_forwarders( )"
.RS 4
Use this method to set the override_forwarders flag. You can use this attribute only for \s-1DNS\s0 members in forward-mapping zones.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to override \s-1DNS\s0 forwarders or \*(L"false\*(R" to use zone default \s-1DNS\s0 forwarders. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_forwarders
\& my $override_forwarders = $member\->override_forwarders();
\& #Modify override_forwarders
\& $member\->override_forwarders("true");
.Ve
.RE
.RS 4
.RE
.SS "grid_replicate( )"
.IX Subsection "grid_replicate( )"
.RS 4
Use this method to set or retrieve the grid_replicate flag, which indicates whether grid members that are primary and secondary servers use database replication or zone transfers for zone updates.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to use \s-1ID\s0 grid replication or \*(L"false\*(R" to use \s-1DNS\s0 zone transfers.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get grid replicate
\& my $grid_replicate = $member\->grid_replicate();
\& #Modify grid replicate
\& $member\->grid_replicate("true");
.Ve
.RE
.RS 4
.RE
.SS "ipv4addr( )"
.IX Subsection "ipv4addr( )"
.RS 4
Use this method to set or retrieve the IPv4 address of the member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
IPv4 address (32 bits) of the member.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv4Addr
\& my $ipv4Addr = $member\->ipv4Addr();
\& #Modify ipv4Addr
\& $member\->ipv4Addr("192.168.1.3");
.Ve
.RE
.RS 4
.RE
.SS "ipv6addr( )"
.IX Subsection "ipv6addr( )"
.RS 4
Use this method to set or retrieve the IPv6 address if available. Required only when ipv4 is not specified.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number in colon hexadecimal notation. It consists of eight groups of four hexadecimal digits separated by colons
(example: 12ab:0000:0000:0123:4567:89ab:0000:cdef).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting ipv6addr
\& my $ipv6addr = $member\->ipv6addr();
\& # Modifying ipv6addr
\& $member\->ipv6addr("12ab::345");
.Ve
.RE
.RS 4
.RE
.SS "lead( )"
.IX Subsection "lead( )"
.RS 4
Use this method to set or retrieve the \*(L"lead\*(R" flag.
.Sp
When a primary server is external to a grid whose members are secondary servers, you can designate one member as a lead secondary. The primary server sends zone transfers to the lead secondary, which distributes the zone data to the other secondary servers in the grid using zone transfers (not the \s-1ID\s0 grid data replication mechanism).
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set lead flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lead
\& my $lead = $member\->lead();
\& #Modify lead
\& $member\->lead("true");
.Ve
.RE
.RS 4
.RE
.SS "ms_parent_delegated( )"
.IX Subsection "ms_parent_delegated( )"
.RS 4
Use this method to retrieve the ms_parent_delegated flag. If the zone is a delegation and the primary server of the parent zone is a Microsoft (r) server, this flag is set to \*(L"true\*(R" if the \s-1FQDN\s0 and \s-1IP\s0 address in the delegation zone's \s-1NS\s0 record matches the \s-1FQDN\s0 and \s-1IP\s0 address of its authoritative name server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_parent_delegated
\& my $ms_parent_delegated = $member\->ms_parent_delegated();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of the member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: host.domain.com ). A host name can have a maximum of 256 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $member\->name();
\& #Modify name
\& $member\->name("dns.infoblox.com");
.Ve
.RE
.RS 4
.RE
.SS "override_preferred_primaries( )"
.IX Subsection "override_preferred_primaries( )"
.RS 4
Use this method to set or retrieve the override_preferred_primaries attribute that controls whether the preferred_primaries method values of the member are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to use preferred_primaries method values. Set the parameter to \*(L"false\*(R", and a primary preference list is determined automatically. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get the attribute value
\& my $value = $member\->override_preferred_primaries();
\& # Modify the attribute value
\& $member\->override_preferred_primaries("false");
.Ve
.RE
.RS 4
.RE
.SS "preferred_primaries( )"
.IX Subsection "preferred_primaries( )"
.RS 4
Use this method to set or retrieve a primary preference list for the member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A reference to an array of Grid member names only or Infoblox::DNS::Nameserver objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Get the attribute value
\& $value = $member\->preferred_primaries();
\& # Modify the attribute value
\& $member\->preferred_primaries([\*(Aqtest.com\*(Aq, \*(Aqexample.com\*(Aq]);
\& $member\->preferred_primaries([$nameserver1, $nameserver2]);
.Ve
.RE
.RS 4
.RE
.SS "stealth( )"
.IX Subsection "stealth( )"
.RS 4
Use this method to set or retrieve the \*(L"stealth\*(R" flag, which indicates whether this member is in stealth mode. When a member is in stealth mode, its \s-1NS\s0 record is hidden from \s-1DNS\s0 queries; it does not respond to queries from resolvers and other name servers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the stealth flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get stealth
\& my $stealth = $member\->stealth();
\& #Modify stealth
\& $member\->stealth("true");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS\s0 Member object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $host_ip   = "192.168.1.2";
\& my $host_name = "infoblox.localdomain";
\&
\& my $session = Infoblox::Session\->new(
\&                master   => $host_ip, #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS\s0 Member object\fR
.PP
.Vb 7
\& my $member1 = Infoblox::DNS::Member\->new(
\&     name           => $host_name,
\&     ipv4addr       => $host_ip,
\&     stealth        => "false",
\&     lead           => "false",
\&     grid_replicate => "false"
\& );
\&
\& unless($member1) {
\&      die("Construct member failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Member object created successfully\en";
\&
\& my $default_view = Infoblox::DNS::View\->new(name => "default");
\&
\& #Create the Zone object with this member
\& my $firstzone = Infoblox::DNS::Zone\->new(
\&     name        => "infoblox.com",
\&     views       => [$default_view],
\&     email       => "admin\e@infoblox.com",
\&     comment     => "add a zone infoblox.com",
\&     multiple_primaries => [$member1],
\& );
\&
\& unless($firstzone) {
\&             die("Construct Zone object failed: ",
\&                   Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& #Add the Zone object into the Infoblox appliance through a session
\& $session\->add($firstzone)
\&      or die("Add Zone object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS member object added to the zone successfully\en";
\&
\& #Modify a DNS member
\&
\& my @result = $session\->search(object => "Infoblox::DNS::Zone",
\&                               name   => "infoblox.com");
\&
\&  unless (scalar(@result) == 0) {
\&      $firstzone = $result[0];
\&
\&      if ($firstzone) {
\&
\&          #modify grid replicate value of member
\&          $member1\->grid_replicate("true");
\&
\&          #update zone
\&          $firstzone\->multiple_primaries([$member1]);
\&
\&          #update session
\&          $session\->modify($firstzone)
\&                 or die("Modify zone object failed: ",
\&                       $session\->status_code() . ":" . $session\->status_detail());
\&          print "DNS member object updated and added to the zone successfully\en";
\&      }
\&  } else {
\&      print "No zone found with the specified name";
\&  }
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::TSIGKey, Infoblox::Session\->\fBadd()\fR,Infoblox::Session\->\fBmodify()\fR,Infoblox::Session\->\fBsearch()\fR,Infoblox::Session, Infoblox::DNS::Nameserver
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
