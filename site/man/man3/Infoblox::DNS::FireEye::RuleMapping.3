.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::FireEye::RuleMapping 3"
.TH Infoblox::DNS::FireEye::RuleMapping 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::FireEyeRuleMapping \- FireEye Rule Mapping object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The rule map object is used to configure rule mapping for FireEye devices and Response Policy Zones.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 5
\& my $rulemapping = Infoblox::DNS::FireEye::Rulemapping\->new(
\&     fireeye_alert_mapping => [$am1, am2, ...], #Optional
\&     apt_override => "PASSTHRU" | "NXDOMAIN" | "NODATA" | "SUBSTITUTE" | "NOOVERRIDE", #Optional
\&     substituted_domain_name => $fqdn, #Optional
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to apply to a FireEye Alert Map object.
.SS "Infoblox::DNS::Zone\->fireeye_rule_mapping( )"
.IX Subsection "Infoblox::DNS::Zone->fireeye_rule_mapping( )"
.RS 4
Use this function to specify the alert map for this rule mapping. See Infoblox::DNS::Zone\->\fBfireeye_rule_mapping()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& my $am1 = Infoblox::DNS::FireEye::AlertMap\->new(
\&                                                 alert_type => \*(AqINFECTION_MATCH\*(Aq,
\&                                                 rpz_rule => \*(AqPASSTHRU\*(Aq,
\&                                                 lifetime => 0,
\&                                                );
\&
\& unless($am1) {
\&      die("Construct member failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& my $am2 = Infoblox::DNS::FireEye::AlertMap\->new(
\&                                                 alert_type => \*(AqWEB_INFECTION\*(Aq,
\&                                                 rpz_rule => \*(AqNONE\*(Aq,
\&                                                 lifetime => 1234,
\&                                                );
\&
\& unless($am2) {
\&      die("Construct member failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& my $rm = Infoblox::DNS::FireEye::RuleMapping\->new(
\&                                                   fireeye_alert_mapping => [$am1, $am2],
\&                                                   apt_override => \*(AqSUBSTITUTE\*(Aq,
\&                                                   substituted_domain_name => \*(Aqsomedomain.com\*(Aq
\&                                                  );
\& $rpz_zone\->rpz_type(\*(AqFIREEYE\*(Aq);
\& $rpz_zone\->fireeye_rule_mapping($rm);
\&
\& my $response = $session\->modify($rpz_zone)
\& unless($response) {
\&      die("Modify zone failed: ",
\&            session\->status_code() . ":" . session\->status_detail());
\& }
\& print "Zone modified successfully\en";
.Ve
.RE
.RS 4
.RE
.SS "apt_override( )"
.IX Subsection "apt_override( )"
.RS 4
Use this method to set or retrieve the \s-1APT\s0 override.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is one of \*(L"\s-1PASSTHRU\*(R", \*(L"NXDOMAIN\*(R", \*(L"NODATA\*(R", \*(L"SUBSTITUTE\*(R"\s0 or \*(L"\s-1NOOVERRIDE\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get apt_override
\& my $apt_override = $rm\->apt_override();
\& #Modify apt_override
\& $rm\->apt_override("NOOVERRIDE");
.Ve
.RE
.RS 4
.RE
.SS "fireeye_alert_mapping( )"
.IX Subsection "fireeye_alert_mapping( )"
.RS 4
Use this method to set or retrieve the FireEye alert mapping.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
An array of Infoblox::DNS::FireEye::AlertMap objects.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get fireeye_alert_mapping
\&  my $fireeye_alert_mapping = $zone\->fireeye_alert_mapping();
\&  #Modify fireeye_alert_mapping
\&  $rm\->fireeye_alert_mapping([$am1, $am2]);
.Ve
.RE
.RS 4
.RE
.SS "substituted_domain_name( )"
.IX Subsection "substituted_domain_name( )"
.RS 4
Use this method to set or retrieve the domain name to be substituted, this is applicable only when apt_override is set to \*(L"\s-1SUBSTITUTE\*(R".\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The domain name to use.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get substituted_domain_name
\& my $substituted_domain_name = $rm\->substituted_domain_name();
\& #Modify substituted_domain_name
\& $rm\->substituted_domain_name("somedomain.com");
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::Zone, Infoblox::DNS::Zone
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
