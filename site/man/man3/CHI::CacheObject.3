.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CHI::CacheObject 3"
.TH CHI::CacheObject 3 "2015-06-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CHI::CacheObject \- Contains information about cache entries
.SH "VERSION"
.IX Header "VERSION"
version 0.60
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $object = $cache\->get_object($key);
\&    
\&    my $key        = $object\->key();
\&    my $value      = $object\->value();
\&    my $expires_at = $object\->expires_at();
\&    my $created_at = $object\->created_at();
\&
\&    if ($object\->is_expired()) { ... }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1CHI\s0 method returns this object if the key exists.  The object
will be returned even if the entry has expired, as long as it has not been
removed.
.PP
There is currently no public \s-1API\s0 for creating one of these objects directly.
.SH "METHODS"
.IX Header "METHODS"
All methods are read-only. The get_* methods are provided for backward
compatibility with Cache::Cache's Cache::Object.
.IP "key" 4
.IX Item "key"
The key.
.IP "value" 4
.IX Item "value"
The value.
.IP "expires_at" 4
.IX Item "expires_at"
.PD 0
.IP "get_expires_at" 4
.IX Item "get_expires_at"
.PD
Epoch time at which item expires.
.IP "created_at" 4
.IX Item "created_at"
.PD 0
.IP "get_created_at" 4
.IX Item "get_created_at"
.PD
Epoch time at which item was last written to.
.IP "is_expired" 4
.IX Item "is_expired"
Returns boolean indicating whether item has expired. This may be
probabilistically determined if an \*(L"expires_variance\*(R" was used.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1CHI\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonathan Swartz <swartz@pobox.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Jonathan Swartz.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
