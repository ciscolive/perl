.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Member::SoaMname 3"
.TH Infoblox::DNS::Member::SoaMname 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Member::SoaMname \- a per\-master SOA MNAME information.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The object contains a per-master \s-1SOA MNAME\s0 Information.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 5
\& my $soa_mname = Infoblox::DNS::Member::SoaMname\->new(
\&    grid_member => $string,       # Required if ms_server is not specified
\&    ms_server   => $string,       # Required if grid_member is not specified
\&    mname       => $string,       # Optional
\& );
.Ve
.PP
You cannot set both grid_member and ms_server attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The object doesn't support any session methods.
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of the object.
.SS "dns_mname( )"
.IX Subsection "dns_mname( )"
.RS 4
Use this method to retrieve the master's \s-1SOA MNAME\s0 in punycode format. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $soa_mname\->dns_mname();
.Ve
.RE
.RS 4
.RE
.SS "grid_member( )"
.IX Subsection "grid_member( )"
.RS 4
Use this method to set or retrieve the primary server name for the zone.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The primary server name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get the attribute value
\& my $attr = $soa_mname\->grid_member();
\& # Modify the attribute value
\& $soa_mname\->grid_member(\*(Aqmember.com\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "mname( )"
.IX Subsection "mname( )"
.RS 4
Use this method to set or retrieve the master's \s-1SOA MNAME.\s0
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The master's \s-1SOA MNAME\s0 in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get the attribute value
\& my $attr = $soa_mname\->mname();
\& # Modify the attribute value
\& $soa_mname\->mname(\*(Aqdummy\-mname.com\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ms_server( )"
.IX Subsection "ms_server( )"
.RS 4
Use this method to set or retrieve the IPv4 address or \s-1FQDN\s0 of the Microsoft (r) Server for the zone.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an IPv4 address (32 bits) or \s-1FQDN\s0 of the Microsoft (r) Server.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get the attribute value
\& my $attr = $soa_mname\->ms_server();
\& # Modify the attribute value
\& $soa_mname\->ms_server(\*(Aq10.0.0.1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::Zone
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
