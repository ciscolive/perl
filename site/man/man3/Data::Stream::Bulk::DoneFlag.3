.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Stream::Bulk::DoneFlag 3"
.TH Data::Stream::Bulk::DoneFlag 3 "2012-02-14" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Stream::Bulk::DoneFlag \- Implement the "is_done" method in terms of a flag
.SH "VERSION"
.IX Header "VERSION"
version 0.11
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        package Data::Stream::Bulk::Blah;
\&        use Moose;
\&
\&        with qw(Data::Stream::Bulk::DoneFlag);
\&
\&        sub get_more {
\&                if ( my @more = more() ) {
\&                        return \e@more;
\&                } else {
\&                        return;
\&                }
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This role implements the \f(CW\*(C`Data::Stream::Bulk\*(C'\fR core \s-1API\s0 in terms of one method
(\f(CW\*(C`get_more\*(C'\fR).
.PP
As a convenience it calls \f(CW\*(C`finished\*(C'\fR when the stream is exhausted, so that
cleanup may be done.
.PP
This is used by classes like Data::Stream::Bulk::DBI,
Data::Stream::Bulk::Callback.
.SH "METHODS"
.IX Header "METHODS"
.IP "is_done" 4
.IX Item "is_done"
Returns the state of the iterator.
.IP "next" 4
.IX Item "next"
As long as the iterator is not yet done, calls \f(CW\*(C`get_more\*(C'\fR.
.Sp
If \f(CW\*(C`get_more\*(C'\fR returned a false value instead of an array reference then
\&\f(CW\*(C`done\*(C'\fR is set, \f(CW\*(C`finished\*(C'\fR is called, and this \f(CW\*(C`next\*(C'\fR does nothing on
subsequent calls.
.IP "finished" 4
.IX Item "finished"
A noop by default. Can be overridden if so desired.
.SH "REQUIRED_METHODS"
.IX Header "REQUIRED_METHODS"
.IP "get_more" 4
.IX Item "get_more"
Returns the next block of data as an array ref, or a false value if no items
are left.
.SH "AUTHOR"
.IX Header "AUTHOR"
Yuval Kogman <nothingmuch@woobling.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Yuval Kogman.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
