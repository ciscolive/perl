.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Member::ThreatProtection::Rule 3"
.TH Infoblox::Grid::Member::ThreatProtection::Rule 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Member::ThreatProtection::Rule \- Member Threat Protection Rule object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object provides information about the member Threat protection rule settings.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The following functions can be applied to a Grid::Member::ThreatProtection::Rule object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 4
\& Apply the following attributes to get a specific Member Threat Protection::Rule object.
\&  sid    \- Optional. The Rule ID.
\&  rule   \- Optional. The Threat Protection Rule object.
\&  member \- Optional. The Member Threat Protection object.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     \*(Aqobject\*(Aq => \*(AqInfoblox::Grid::Member::ThreatProtection::Rule\*(Aq,
\&     \*(Aqsid\*(Aq => \*(Aq211111\*(Aq
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my $rule = $session\->search(\*(Aqobject\*(Aq => \*(AqInfoblox::Grid::ThreatProtection::Rule\*(Aq, \*(Aqsid\*(Aq => \*(Aq211111\*(Aq);
\& my $member = $session\->get(\*(Aqobject\*(Aq => \*(AqInfoblox::Grid::Member::ThreatProtection\*(Aq);
\& my $member_rule = $session\->search(\*(Aqobject\*(Aq => \*(AqInfoblox::Grid::Member::ThreatProtection::Rule\*(Aq, \*(Aqmember\*(Aq => $member, \*(Aqrule\*(Aq => $rule);
\&
\& my $conf = $member_rule\->config();
\& $conf\->action(\*(AqPASS\*(Aq);
\&
\& # Use this method to modify attributes of object.
\& $member_rule\->disable(\*(Aqtrue\*(Aq);
\& $member_rule\->override_disable(\*(Aqtrue\*(Aq);
\& $member_rule\->config($conf);
\& $member_rule\->override_config(\*(Aqtrue\*(Aq);
\& # Submit modification
\& my $response = $session\->modify( $member_rule );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 4
\& Apply the following attributes to get a specific Grid Threat Protection::Rule object.
\&  sid    \- Optional. The Rule ID.
\&  rule   \- Optional. The Threat Protection Rule object.
\&  member \- Optional. The Member Threat Protection object.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& my $rule = $session\->search(\*(Aqobject\*(Aq => \*(AqInfoblox::Grid::ThreatProtection::Rule\*(Aq, \*(Aqsid\*(Aq => \*(Aq211111\*(Aq);
\& my $member = $session\->get(\*(Aqobject\*(Aq => \*(AqInfoblox::Grid::Member::ThreatProtection\*(Aq);
\& my $member_rule = $session\->search(\*(Aqobject\*(Aq => \*(AqInfoblox::Grid::Member::ThreatProtection::Rule\*(Aq,
\&     \*(Aqmember\*(Aq => $member,
\&     \*(Aqrule\*(Aq => $rule,
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.SS "config( )"
.IX Subsection "config( )"
.RS 4
Use this method to set or retrieve rule configuration information.
.Sp
Setting this method to a defined value implicitly sets the override_config method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_config attribute to \*(L"false\*(R".
.Sp
Note that when config is set to a defined value and override_config is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->config($value); \f(CW$object\fR\->override_config(\*(L"false\*(R"); will set override_config to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_config(\*(L"false\*(R"); \f(CW$object\fR\->config($value); will result in override_config=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is reference on Infoblox::Grid::ThreatProtection::RuleConfig object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Get attribute value
\& my $value = $object\->config();
\& $value\->log_severity(\*(AqINFORMATIONAL\*(Aq);
\& # Modify attribute value
\& $object\->config($value);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or indicate whether the rule is enabled or disabled for the member.
.Sp
Setting this method to a defined value implicitly sets the override_disable method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_disable attribute to \*(L"false\*(R".
.Sp
Note that when disable is set to a defined value and override_disable is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->disable('true'); \f(CW$object\fR\->override_disable(\*(L"false\*(R"); will set override_disable to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_disable(\*(L"false\*(R"); \f(CW$object\fR\->disable('true'); will result in override_disable=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->disable();
\& # Modify attribute value
\& $object\->disable(true);
.Ve
.RE
.RS 4
.RE
.SS "member( )"
.IX Subsection "member( )"
.RS 4
Use this method to retrieve reference to the member object. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $object\->member();
.Ve
.RE
.RS 4
.RE
.SS "override_config( )"
.IX Subsection "override_config( )"
.RS 4
Use this method to set or retrieve the override flag for the rule configuration.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->override_config();
\& # Modify attribute value
\& $object\->override_config(true);
.Ve
.RE
.RS 4
.RE
.SS "override_disable( )"
.IX Subsection "override_disable( )"
.RS 4
Use this method to set or retrieve the override flag for the disabled field.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->override_disable();
\& # Modify attribute value
\& $object\->override_disable(true);
.Ve
.RE
.RS 4
.RE
.SS "rule( )"
.IX Subsection "rule( )"
.RS 4
Use this method to retrieve reference to the rule object. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $object\->rule();
.Ve
.RE
.RS 4
.RE
.SS "sid( )"
.IX Subsection "sid( )"
.RS 4
Use this method to retrieve the Rule \s-1ID.\s0 This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $object\->sid();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Grid::Member::ThreatProtection, Infoblox::Grid::ThreatProtection::Rule, Infoblox::Grid::ThreatProtection::RuleConfig, Infoblox::Grid::ThreatProtection::RuleParam
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
