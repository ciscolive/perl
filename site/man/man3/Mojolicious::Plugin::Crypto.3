.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Crypto 3"
.TH Mojolicious::Plugin::Crypto 3 "2015-02-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Crypto \- Provide interface to some cryptographic stuff.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojolicious::Plugin::Crypto;
\&  
\&  my $fix_key = \*(Aqsecretpassphrase\*(Aq;
\&  my $plain = "NemuxMojoCrypt";
\&
\&  #### Symmetric Functions
\&  # You can leave key value empty and it will generate a new key for you
\&
\&  my ($crypted, $key)  = $t\->app\->crypt_aes($plain, $fix_key);
\&  
\&  #... [ store this crypted data where do you want ... ]
\&  
\&  # and decrypt it
\&  my $clean =  $t\->app\->decrypt_aes($crypted, $key);
\&   
\&  ### Hash
\&
\&  ### From string/buffer
\&  my $digest_hex = $t\->app\->sha256_hex("Take this content");
\&  ### From filehandle
\&  my $digest_raw = $t\->app\->sha256_file(*FILEHANDLE);
\&  ### From File
\&  $digest_hex    = $t\->app\->sha256_file_hex(\*(Aqfilename.txt\*(Aq);
\&
\&  ### base64
\&  my $digest_b64  = $t\->app\->sha256_b64(\*(Aqdata string\*(Aq);
\&  my $digest_b64u = $t\->app\->sha256_b64u(\*(Aqdata string\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.IP "\(bu" 4
Symmetric cipher algorithms using cipher-block chaining. \s-1AES,\s0 Blowfish, \s-1DES, 3DES\s0 and more, see below.
.IP "\(bu" 4
Hash/Digest Functions \- SHA*, MD*, Whirlpool, \s-1CHAES,\s0 RIPEMD*, Tiger192.
.IP "\(bu" 4
\&\s-1HMAC\s0 message authentication code (\s-1MAC\s0) algorithm.
.SS "Symmetric algorithms supported"
.IX Subsection "Symmetric algorithms supported"
You can use this plugin in order to encrypt and decrypt using one of these algorithms:
.IP "\(bu" 4
\&\fB\s-1AES\s0 (aka Rijndael)\fR
.IP "\(bu" 4
\&\fBBlowfish\fR
.IP "\(bu" 4
\&\fB\s-1DES\s0\fR
.IP "\(bu" 4
\&\fB\s-1DES_EDE\s0 (aka Triple-DES, 3DES)\fR
.IP "\(bu" 4
\&\fB\s-1TWOFISH\s0\fR
.IP "\(bu" 4
\&\fB\s-1XTEA\s0\fR
.IP "\(bu" 4
\&\fB\s-1ANUBIS\s0\fR
.IP "\(bu" 4
\&\fB\s-1CAMELLIA\s0\fR
.IP "\(bu" 4
\&\fB\s-1KASUMI\s0\fR
.IP "\(bu" 4
\&\fB\s-1KHAZAD\s0\fR
.IP "\(bu" 4
\&\fB\s-1NOEKEON\s0\fR
.IP "\(bu" 4
\&\fB\s-1MULTI2\s0\fR
.IP "\(bu" 4
\&\fB\s-1RC2\s0\fR
.IP "\(bu" 4
\&\fB\s-1RC5\s0\fR
.IP "\(bu" 4
\&\fB\s-1RC6\s0\fR
.SH "Symmetric Algorithms USAGE"
.IX Header "Symmetric Algorithms USAGE"
.SS "crypt_[\s-1ALGO_NAME\s0]()"
.IX Subsection "crypt_[ALGO_NAME]()"
.Vb 2
\&  call function crypt_ followed by the lowercase algorithms name. For example crypt_aes("My Plain Test", "ThisIsMySecretKey")
\&  an array will be the return value with (\*(Aqsecuredata\*(Aq, \*(Aqkeyused\*(Aq).
.Ve
.SS "decrypt_[\s-1ALGO_NAME\s0]()"
.IX Subsection "decrypt_[ALGO_NAME]()"
.Vb 3
\&  The same thing for decryption decrypt_ followed by the algorithms name in lowercase
\&  Ex.: decrypt_aes("MyCryptedValue","ThisIsMySecretKey") it will return an array with two values: 
\&  the first one is the clear text decrypted and the last one the key used. That\*(Aqs all.
.Ve
.SS "methods list"
.IX Subsection "methods list"
\&\fBcrypt_aes()\fR
\&\fBcrypt_blowfish()\fR
\&\fBcrypt_des()\fR
\&\fBcrypt_3des()\fR [|| \fBcrypt_des_ede()\fR || \fBcrypt_triple_des()\fR]
\&\fBcrypt_twofish()\fR
\&\fBcrypt_xtea()\fR;
\&\fBcrypt_anubis()\fR;
\&\fBcrypt_camellia()\fR;
\&\fBcrypt_kasumi()\fR;
\&\fBcrypt_khazad()\fR;
\&\fBcrypt_noekeon()\fR;
\&\fBcrypt_multi2()\fR;
\&\fBcrypt_rc2()\fR;
\&\fBcrypt_rc5()\fR;
\&\fBcrypt_rc6()\fR;
.PP
and the same for decrypt functions (please make the effort to put \*(L"de\*(R" in front of \*(L"crypt_[name]\*(R")
.SS "3DES: Multiple names, same result"
.IX Subsection "3DES: Multiple names, same result"
.IP "1." 4
\&\fB\fBcrypt_des_ede()\fB\fR
.IP "2." 4
\&\fB\fBcrypt_3des()\fB\fR
.IP "3." 4
\&\fB\fBcrypt_tripple_des()\fB\fR
.SS "nested calls"
.IX Subsection "nested calls"
.IP "\(bu" 4
\&\fBCrypt\fR
.PP
($crypted, \f(CW$key\fR) = app\->crypt_xtea(app\->crypt_twofish(app\->crypt_3des(app\->crypt_blowfish(app\->crypt_aes($super_plain,$super_secret)))));
.IP "\(bu" 4
\&\fBDecrypt\fR
.PP
($plain, \f(CW$key\fR) = app\->decrypt_aes(app\->decrypt_blowfish(app\->decrypt_3des(app\->decrypt_twofish(app\->decrypt_xtea($crypted,$super_secret)))));
.SH "Hash/Digest Functions"
.IX Header "Hash/Digest Functions"
Use this plugin in order to calculate digest through this algorithms:
.IP "\(bu" 4
\&\fB\s-1SHA1\s0\fR
.IP "\(bu" 4
\&\fB\s-1SHA224\s0\fR
.IP "\(bu" 4
\&\fB\s-1SHA256\s0\fR
.IP "\(bu" 4
\&\fB\s-1SHA384\s0\fR
.IP "\(bu" 4
\&\fB\s-1SHA512\s0\fR
.IP "\(bu" 4
\&\fB\s-1MD2\s0\fR
.IP "\(bu" 4
\&\fB\s-1MD4\s0\fR
.IP "\(bu" 4
\&\fB\s-1MD5\s0\fR
.IP "\(bu" 4
\&\fBWhirlpool\fR
.IP "\(bu" 4
\&\fB\s-1CHAES\s0\fR
.IP "\(bu" 4
\&\fB\s-1RIPEMD128\s0\fR
.IP "\(bu" 4
\&\fB\s-1RIPEMD160\s0\fR
.IP "\(bu" 4
\&\fB\s-1RIPEMD256\s0\fR
.IP "\(bu" 4
\&\fB\s-1RIPEMD320\s0\fR
.IP "\(bu" 4
\&\fBTiger192\fR
.SH "Hash/Digest Functions USAGE"
.IX Header "Hash/Digest Functions USAGE"
.SS "[\s-1ALGO_NAME\s0]()"
.IX Subsection "[ALGO_NAME]()"
Example: app\->\fBsha256()\fR;
.SS "[\s-1ALGO_NAME\s0]\fB_hex()\fP"
.IX Subsection "[ALGO_NAME]_hex()"
Example: app\->\fBsha256_hex()\fR;
.SS "[\s-1ALGO_NAME\s0]\fB_b64()\fP"
.IX Subsection "[ALGO_NAME]_b64()"
Example: app\->\fBsha256_b64()\fR;
.SS "[\s-1ALGO_NAME\s0]\fB_b64u()\fP"
.IX Subsection "[ALGO_NAME]_b64u()"
Example: app\->\fBsha256_b64u()\fR;
.SS "[\s-1ALGO_NAME\s0]_file([FILENAME|FILEHANDLE])"
.IX Subsection "[ALGO_NAME]_file([FILENAME|FILEHANDLE])"
Example: app\->\fBsha256_file()\fR;
.SS "[\s-1ALGO_NAME\s0]_file_hex([FILENAME|FILEHANDLE])"
.IX Subsection "[ALGO_NAME]_file_hex([FILENAME|FILEHANDLE])"
Example: app\->\fBsha256_file_hex()\fR;
.SS "[\s-1ALGO_NAME\s0]_file_b64([FILENAME|FILEHANDLE])"
.IX Subsection "[ALGO_NAME]_file_b64([FILENAME|FILEHANDLE])"
Example: app\->\fBsha256_file_b64()\fR;
.SS "[\s-1ALGO_NAME\s0]_file_b64u([FILENAME|FILEHANDLE])"
.IX Subsection "[ALGO_NAME]_file_b64u([FILENAME|FILEHANDLE])"
Example: app\->\fBsha256_file_b64u()\fR;
.SH "HMAC \- Message authentication code HMAC"
.IX Header "HMAC - Message authentication code HMAC"
Use this plugin in order to calculate \s-1HMAC:\s0
.SS "hmac([\s-1HASHNAME\s0], [\s-1KEY\s0], 'data buffer');"
.IX Subsection "hmac([HASHNAME], [KEY], 'data buffer');"
Example: app\->hmac('\s-1SHA256\s0', \f(CW$key\fR, 'data buffer');
.SS "hmac_hex([\s-1HASHNAME\s0], [\s-1KEY\s0], 'data buffer');"
.IX Subsection "hmac_hex([HASHNAME], [KEY], 'data buffer');"
Example: app\->hmac_hex('\s-1SHA256\s0', \f(CW$key\fR, 'data buffer');
.SS "hmac_b64([\s-1HASHNAME\s0], [\s-1KEY\s0], 'data buffer');"
.IX Subsection "hmac_b64([HASHNAME], [KEY], 'data buffer');"
Example: app\->hmac_b64('\s-1SHA256\s0', \f(CW$key\fR, 'data buffer');
.SS "hmac_b64u([\s-1HASHNAME\s0], [\s-1KEY\s0], 'data buffer');"
.IX Subsection "hmac_b64u([HASHNAME], [KEY], 'data buffer');"
Example: app\->hmac_b64u('\s-1SHA256\s0', \f(CW$key\fR, 'data buffer');
.SH "Dummy example using Mojolicious::Lite"
.IX Header "Dummy example using Mojolicious::Lite"
.Vb 1
\&  You can test in this way
\&  
\&  perl mymojoapp.pl /aes/enc?data=nemux
\&  perl mymojoapp.pl /aes/dec?data=53616c7465645f5f6355829a809369eee5dfb9489eaee7e190b67d15d2e35ce8
\&
\&  perl mymojoapp.pl /blowfish/enc?data=nemux
\&  perl mymojoapp.pl /blowfish/dec?data=53616c7465645f5f16d8c8aa479121d039b04703083a9391
\&
\&  #!/usr/bin/env perl
\&
\&    use Mojolicious::Lite;
\&    
\&    plugin \*(AqCrypto\*(Aq, { 
\&      symmetric_cipher => 1, # 0|1 \-> enable or disable features avoiding to load unuseful modules
\&      digest           => 1, # With no arguments it will load all features automatically 
\&      mac              => 1
\&    };
\&
\&    my $bigsecret = "MyNameisMarcoRomano";
\&
\&    get \*(Aq/digest/sha256\*(Aq => sub {
\&      my $self = shift;
\&      my $data = $self\->param(\*(Aqdata\*(Aq);
\&      my $hex_digest = $self\->sha256_hex($data);
\&      $self\->render(text => $hex_digest);
\&    };
\&
\&    get \*(Aq/digest/md5\*(Aq => sub {
\&      my $self = shift;
\&      my $data = $self\->param(\*(Aqdata\*(Aq);
\&      my ($hex_digest) = $self\->md5_hex($data);
\&      $self\->render(text => $hex_digest);
\&    };
\&
\&    get \*(Aq/aes/enc\*(Aq => sub {
\&      my $self = shift;
\&      my $data = $self\->param(\*(Aqdata\*(Aq);
\&      my ($securedata) = $self\->crypt_aes($data, $bigsecret);
\&      $self\->render(text => $securedata);
\&    };
\&
\&    get \*(Aq/aes/dec\*(Aq => sub {
\&      my $self = shift;
\&      my $data = $self\->param(\*(Aqdata\*(Aq);
\&      my ($plaintext) = $self\->decrypt_aes($data, $bigsecret);
\&      $self\->render(text => $plaintext);
\&    };
\&
\&    get \*(Aq/blowfish/enc\*(Aq => sub {
\&      my $self = shift;
\&      my $data = $self\->param(\*(Aqdata\*(Aq);
\&      my ($securedata) = $self\->crypt_blowfish($data, $bigsecret);
\&      $self\->render(text => $securedata);
\&    };
\&
\&    get \*(Aq/blowfish/dec\*(Aq => sub {
\&      my $self = shift;
\&      my $data = $self\->param(\*(Aqdata\*(Aq);
\&      my ($plaintext) = $self\->decrypt_blowfish($data, $bigsecret);
\&      $self\->render(text => $plaintext);
\&    };
\&
\&    app\->start;
.Ve
.SH "BUGS"
.IX Header "BUGS"
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
Random numbers generator
.IP "\(bu" 4
Asymmetric algorithms
.SH "SUPPORT"
.IX Header "SUPPORT"
Write me if you need some help and feel free to improve it. 
Github: http://git.io/lQl5cA
.PP
\&\f(CW@nemux_\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&    Marco Romano
\&    CPAN ID: NEMUX
\&    Mojolicious CryptO Plugin
\&    
\&    nemux@cpan.org \- @nemux_ 
\&
\&    http://search.cpan.org/~nemux/
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBperl\fR\|(1). CryptX
