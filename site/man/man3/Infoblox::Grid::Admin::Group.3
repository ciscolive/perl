.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Admin::Group 3"
.TH Infoblox::Grid::Admin::Group 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Admin::Group \- Admin Group object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An Admin Group object creates and manages a local admin group on the Infoblox appliance. The privileges and properties that are set for the group apply to all the admin accounts that are assigned to the group.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $group = Infoblox::Grid::Admin::Group\->new(
\&     name                          => $string,                                                               # Required
\&     access_method                 => ["GUI"|"API"|"TAXII",...],                                             # Optional / Default is ["GUI", "API", "TAXII"]
\&     comment                       => $string,                                                               # Optional / Default is undefined
\&     disabled                      => "true" | "false",                                                      # Optional / Default is "false"
\&     enable_restricted_user_access => "true" | "false",                                                      # Optional / Default is "false"
\&     extattrs                      => { $string => $extattr, ... },                                          # Optional / Default is undefined
\&     extensible_attributes         => { $string => $string | $num, $string => [ $string | $num, ... ], ... } # Optional / Default is undefined
\&     email_addresses               => [ \*(Aqadmin@test.com\*(Aq,...],                                               # Optional / Default is undefined
\&     superuser                     => "true" | "false",                                                      # Optional / Default is "false"
\&     roles                         => [$string, ...]                                                         # Optional / Default is an empty array reference
\&     user_access                   => [$ipaddr, $netaddr, ...]                                               # Optional / Default is empty list
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to an Admin Group object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Construct the Group object
\& my $group = Infoblox::Grid::Admin::Group\->new(
\&     name                 => "testgroup",
\&     access_method        => ["GUI", "API"],
\&     comment              => "test group",
\&     disabled             => "true",
\&     superuser            => "false"
\& );
\& # Submit for addition
\& my $response = $session\->add( $group );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific Group object:
\&
\&  name      \- Required. Group name in string format.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&  extattrs  \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::Grid::Admin::Group",
\&     name       => "testgroup" );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify the comment.
\& $group\->comment("This is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $group );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, use \fBget()\fR or \fBsearch()\fR to retrieve the specific object first, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Get the group objects with the same starting name
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::Grid::Admin::Group",
\&     name       => "testgroup" );
\& # find the desired object from the retrieved list.
\& my $desired_group = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_group );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for Admin Group objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a specific Group object:
\&
\&  name                             \- Optional. Group name in string format (regular expression).
\&  roles                            \- Optional. An array of role names in string format.
\&  ca_certificate_issuer            \- Optional. The name of the CA certificate issuer in string format.
\&  client_certificate_serial_number \- Optional. The serial number of the CA certificate in string format. This is unique for a particular issuer.
\&  extensible_attributes            \- Optional. A hash reference containing extensible attributes.
\&  extattrs                         \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # search for all Group objects that start with "test"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::Admin::Group",
\&     name   => "test.*" );
\&
\& # search for all Group objects that start with "test"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::Admin::Group",
\&     roles   => ["DHCP Admin", "AAA Admin"]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a Group object.
.SS "access_method( )"
.IX Subsection "access_method( )"
.RS 4
Use this method to set or retrieve a group's access methods. Access methods specify whether a group can use the \s-1GUI\s0 and the \s-1API\s0 to access the appliance or to send Taxii messages to the appliance. Valid value is an array reference that contains the literal string \*(L"\s-1GUI\*(R", \*(L"TAXII\*(R"\s0 and/or \*(L"\s-1API\*(R".\s0 The default value is [\*(L"\s-1GUI\*(R", \*(L"API\*(R", \*(L"TAXII\*(R"\s0].
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference of the literal string \*(L"\s-1GUI\*(R", \*(L"TAXII\*(R"\s0 and/or \*(L"\s-1API\*(R".\s0 It indicates whether a group has permission to access the appliance through the \s-1GUI\s0 and/or \s-1API\s0 and/or to send Taxii messages to the appliance.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get access methods
\& my $ref_access_method = $group\->access_method();
\& #Modify access methods
\& $group\->access_method(["GUI"]);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Pertinent information about the admin group, such as location or department. Comment in string format with a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $group\->comment();
\& #Modify comment
\& $group\->comment("This is the modified comment for admin group");
.Ve
.RE
.RS 4
.RE
.SS "disabled( )"
.IX Subsection "disabled( )"
.RS 4
Use this method to set or retrieve the \*(L"disabled\*(R" flag.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false. The admin group is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disabled
\& my $disabled = $group\->disabled();
\& #Modify disabled
\& $group\->disabled("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_restricted_user_access( )"
.IX Subsection "enable_restricted_user_access( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the restrictions will be applied on an admin connector level for a given user or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable restricted access on admin connector level and \*(L"false\*(R" to disable restrictions. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_restricted_user_access
\& my $enable_restricted_user_access = $group\->enable_restricted_user_access();
\&
\& #Modify enable_restricted_user_access
\& $group\->enable_restricted_user_access("true");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Group object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $group\->extattrs();
\& #Modify extattrs
\& $group\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Group object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $group\->extensible_attributes();
\& #Modify extensible attributes
\& $group\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "email_addresses( )"
.IX Subsection "email_addresses( )"
.RS 4
Use this method to set or retrieve the email addresses for the Admin Group.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains emails in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get email_addresses
\& my @email_addresses = $rgroup\->email_addresses();
\& #Modify addresses
\& $group\->addresses( [ \*(Aqadmin@test.com\*(Aq ] );
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of an admin group.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the name of the admin group.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name
\& my $name = $group\->name();
.Ve
.RE
.RS 4
.RE
.SS "superuser( )"
.IX Subsection "superuser( )"
.RS 4
Use this method to set or retrieve the \*(L"superuser\*(R" flag. A superuser group can perform all operations on the appliance, and can view and configure all types of data.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The default value for this field is \*(L"false\*(R" which means that this is not a superuser admin group. The admins in the group have limited privileges.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get super user flag
\& my $disabled = $group\->superuser();
\& #Modify super user
\& $group\->superuser("true");
.Ve
.RE
.RS 4
.RE
.SS "roles( )"
.IX Subsection "roles( )"
.RS 4
Use this method to set or retrieve the role names associated with this admin group.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The default value for this field is an empty array. A valid value is an array reference with literal strings containing valid role names. The corresponding role objects must exist in the database.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get roles
\& my $ref_roles = $group\->roles();
\& #Modify roles
\& $group\->roles(["role1", "role2"]);
\& #Remove roles
\& $group\->roles([]);
.Ve
.RE
.RS 4
.RE
.SS "user_access( )"
.IX Subsection "user_access( )"
.RS 4
Use this method to set or retrieve the access control items for a given group.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses or networks.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get user_access
\& my $user_access = $group\->user_access();
\&
\& #Modify user_access
\& $group\->user_access([\*(Aq10.0.0.1\*(Aq, \*(Aq2001:db8::/64\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to an Admin Group object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\&                );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& my $role = Infoblox::Grid::Admin::Role\->new(
\&     name                 => "testrole",
\&     comment              => "test admin role",
\& );
\&
\& unless ($role) {
\&        die("Construct role object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Admin Role object created successfully\en";
\&
\& #Add the Admin Role object to the Infoblox appliance through a session
\& $session\->add($role)
\&        or die("Add Admin Role object failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Role object added to server successfully\en";
.Ve
.PP
\&\fB#Create an Admin Group object\fR
.PP
.Vb 8
\& my $group = Infoblox::Grid::Admin::Group\->new(
\&     name                 => "testgroup",
\&     comment              => "test admin group",
\&     disabled             => "false",
\&     superuser            => "false",
\&     access_method        => ["GUI", "API"],
\&     roles                => ["testrole"]
\& );
\&
\& unless ($group) {
\&        die("Construct group object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Admin Group object created successfully\en";
\&
\& #Add the Admin Group object to the Infoblox appliance through a session
\& $session\->add($group)
\&        or die("Add Admin Group object failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Group object added to server successfully\en";
.Ve
.PP
\&\fB#Search for an Admin Group\fR
.PP
.Vb 5
\& my @retrieved_objs = $session\->search(
\&                object => "Infoblox::Grid::Admin::Group",
\&                name   => "test.*"
\&                );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search Admin Group object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Admin Group object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify an Admin Group object\fR
.PP
.Vb 6
\& #Get the Admin Group object from Infoblox appliance through a session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Admin::Group",
\&     name   => "testgroup"
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Get Admin Group object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Admin Group object found at least 1 matching entry\en";
\&
\& #Modify the Admin Group object
\& $object\->name("testgroup_renamed");
\& $object\->access_method(["API"]);
\& $object\->comment("modified test group");
\& $object\->disabled("false");
\& $object\->superuser("false"); # no real change
\&
\& #Apply the changes.
\& $session\->modify($object)
\&        or die("Modify Admin Group object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Group object modified successfully \en";
.Ve
.PP
\&\fB#Remove an Admin Group object\fR
.PP
.Vb 11
\& #Get the Admin Group object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Admin::Group",
\&     name   => "testgroup_renamed"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Admin Group object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Admin Group object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&        or die("Remove Admin Group object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Group object removed successfully \en";
.Ve
.PP
\&\fB#Clean up the Admin Role object\fR
.PP
.Vb 4
\& $session\->remove($role)
\&        or die("Remove Admin Role object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Role object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::Admin::Role, Infoblox::Grid::Admin::User, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR,Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
