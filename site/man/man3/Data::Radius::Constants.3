.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Radius::Constants 3"
.TH Data::Radius::Constants 3 "2020-07-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Radius::Constants \- export constants for Data::Radius::Packet
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Data::Radius::Constants qw(:all);
.Ve
.PP
or
.PP
.Vb 1
\&    use Data::Radius::Constants qw(ACCESS_REQUEST ACCESS_ACCEPT ACCESS_REJECT %RADIUS_PACKET_TYPES);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Exports \s-1RADIUS RFC\s0 established constants and utilities for easy packet handling.
.PP
In addition to \s-1RFC\s0 packet type constants enables following aliases:
.PP
.Vb 1
\&    \*(AqCOA\*(Aq => COA_REQUEST,
\&
\&    \*(AqDM\*(Aq => DISCONNECT_REQUEST,
\&
\&    \*(AqPOD\*(Aq => DISCONNECT_REQUEST,
\&
\&    \*(AqACCT\*(Aq => ACCOUNTING_REQUEST,
\&
\&    \*(AqAUTH\*(Aq => ACCESS_REQUEST,
\&
\&    my $type = ACCESS_REQUEST;
.Ve
.PP
\&... is equivalent to
.PP
.Vb 1
\&    my $type = $RADIUS_PACKET_TYPES{AUTH}; # using aliases
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "accepting_packet_type($request_type, $response_type)" 4
.el .IP "accepting_packet_type($request_type, \f(CW$response_type\fR)" 4
.IX Item "accepting_packet_type($request_type, $response_type)"
Convenience method to test if a request was accepted by received response.
.Sp
Returns true if the response type is the accepting type for the given request type.
Returns 0 for corresponding rejections, undef for everything else
.Sp
You can use packet type ids or its aliases as arguments
.Sp
Example:
.Sp
($response_type) = \f(CW$response_packet\fR\->\fBparse()\fR;
.Sp
print \*(L"Accepted\en\*(R"
    if accepting_packet_type(\s-1ACCESS_REQUEST,\s0 \f(CW$response_type\fR);
.Sp
but also
.Sp
print \*(L"Accepted\en\*(R"
    if accepting_packet_type('\s-1AUTH\s0', \s-1ACCESS_ACCEPT\s0);
.Sp
print \*(L"Accepted\en\*(R"
    if accepting_packet_type('\s-1AUTH\s0', '\s-1ACCESS_ACCEPT\s0'); # same
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Data::Radius::Packet
.SH "AUTHOR"
.IX Header "AUTHOR"
Sergey Leschenko <sergle.ua at gmail.com>
.PP
PortaOne Development Team <perl\-radius at portaone.com> is the current module's maintainer at \s-1CPAN.\s0
