.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::NaCl::Sodium::pwhash 3"
.TH Crypt::NaCl::Sodium::pwhash 3 "2015-12-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::NaCl::Sodium::pwhash \- Password hashing (yescrypt)
.SH "VERSION"
.IX Header "VERSION"
version 1.0.8.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Crypt::NaCl::Sodium qw( :utils );
\&
\&    my $crypto_pwhash = Crypt::NaCl::Sodium\->pwhash();
\&
\&    my ($salt, $key, $hashed, $password);
\&
\&    # Some simple password vulnerable to dictionary attack
\&    $password = "letmein1";
\&
\&    ## Key derivation
\&    ########
\&
\&    # generate salt
\&    $salt = $crypto_pwhash\->salt();
\&
\&    # can be used later in other methods as the actual key
\&    $key = $crypto_pwhash\->key( $password, $salt, bytes => 32 );
\&
\&    ## Password storage
\&    ########
\&
\&    # save this in database as hash of user password
\&    $hashed = $crypto_pwhash\->str( $password );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Secret keys used to encrypt or sign confidential data have
to be chosen from a very large keyspace. However, passwords
are usually short, human-generated strings, making dictionary attacks
practical.
.PP
The \f(CW\*(C`crypto_pwhash\*(C'\fR provides methods to derive a secret key of any size from
a password and a salt.
.IP "\(bu" 4
The generated key has the size defined by the application, no matter
what the password length is.
.IP "\(bu" 4
The same password hashed with same parameters will always
produce the same key.
.IP "\(bu" 4
The same password hashed with different salts will produce
different keys.
.IP "\(bu" 4
The function deriving a key from a password and a salt is
\&\s-1CPU\s0 intensive and intentionally requires a fair amount of
memory. Therefore, it mitigates brute-force attacks by requiring a
significant effort to verify each password.
.PP
Common use cases:
.IP "\(bu" 4
Protecting an on-disk secret key with a password,
.IP "\(bu" 4
Password storage, or rather: storing what it takes to verify a
password without having to store the actual password.
.SH "METHODS"
.IX Header "METHODS"
.SS "salt"
.IX Subsection "salt"
.Vb 1
\&    my $salt = $crypto_pwhash\->salt();
.Ve
.PP
Helper method to generate a random salt to be used by \*(L"key\*(R".
.PP
The length of the \f(CW$salt\fR equals \*(L"\s-1SALTBYTES\*(R"\s0.
.PP
Returns Data::BytesLocker object.
.SS "key"
.IX Subsection "key"
.Vb 3
\&    my $key = $crypto_pwhash\->key( $password, $salt,
\&        bytes => $bytes, opslimit => $opslimit, memlimit => $memlimit
\&    );
.Ve
.PP
Derive an \f(CW$bytes\fR long key from a password \f(CW$password\fR and salt \f(CW$salt\fR
by performing a maximum of \f(CW$opslimit\fR number of computations and using up to
\&\f(CW$memlimit\fR amount of \s-1RAM.\s0
.PP
The optional \f(CW$bytes\fR parameter specifies the output length of the \f(CW$key\fR
and has the default value of \*(L"\s-1STRBYTES\*(R"\s0.
.PP
The optional \f(CW$opslimit\fR represents a maximum amount of computations
to perform. Raising this number will make the function require
more \s-1CPU\s0 cycles to compute a key. Default value is \*(L"\s-1OPSLIMIT_INTERACTIVE\*(R"\s0.
.PP
The optional \f(CW$memlimit\fR is the maximum amount of \s-1RAM\s0 that the function
will use, in bytes. It is highly recommended to allow the function
to use at least 16 megabytes. Default value is \*(L"\s-1MEMLIMIT_INTERACTIVE\*(R"\s0.
.PP
\&\fB\s-1NOTE:\s0\fR For interactive sessions, \*(L"\s-1OPSLIMIT_INTERACTIVE\*(R"\s0 and
\&\*(L"\s-1MEMLIMIT_INTERACTIVE\*(R"\s0 provide a safe base line for these two parameters.
However, using higher values may improve security.
.PP
For highly sensitive data, \*(L"\s-1OPSLIMIT_SENSITIVE\*(R"\s0 and \*(L"\s-1MEMLIMIT_SENSITIVE\*(R"\s0
can be used as an alternative. But with these parameters, deriving
a key takes more than 10 seconds on a 2.8 Ghz Core i7 \s-1CPU\s0 and requires up
to 1 gigabyte of dedicated \s-1RAM.\s0
.PP
Keep in mind that in order to produce the same \f(CW$key\fR that is \f(CW$bytes\fR long from
the same \f(CW$password\fR, the same \f(CW$salt\fR, and the same values for \f(CW$opslimit\fR
and \f(CW$memlimit\fR have to be used. Therefore, these parameters have to be stored
for each user.
.PP
The length of the \f(CW$key\fR equals the value of \f(CW$bytes\fR.
.PP
Returns Data::BytesLocker object.
.SS "str"
.IX Subsection "str"
.Vb 3
\&    my $hashed = $crypto_pwhash\->str( $password,
\&        opslimit => $opslimit, memlimit => $memlimit
\&    );
.Ve
.PP
Returns \s-1ASCI\s0 encoded string, which includes:
.IP "\(bu" 4
the result of a memory-hard, CPU-intensive hash function applied to
the password \f(CW$password\fR
.IP "\(bu" 4
the automatically generated salt used for the previous computation
.IP "\(bu" 4
the other parameters required to verify the password:
\&\f(CW$opslimit\fR and \f(CW$memlimit\fR
.PP
The output string is zero-terminated, includes only \s-1ASCII\s0
characters and can be conveniently stored into \s-1SQL\s0 databases
and other data stores. No additional information has to be stored in
order to verify the password.
.PP
For the description of the optional \f(CW$opslimit\fR and \f(CW$memlimit\fR please refer
to the \*(L"key\*(R".
.PP
The length of the \f(CW$hashed\fR equals \f(CW\*(C`STRBYTES\*(C'\fR.
.PP
Returns Data::BytesLocker object.
.SS "verify"
.IX Subsection "verify"
.Vb 3
\&    if ( $crypto_pwhash\->verify($hashed, $password) ) {
\&        # password is correct
\&    }
.Ve
.PP
Verify that the \f(CW$hashed\fR password verification string (as generated by \*(L"str\*(R")
matches the password \f(CW$password\fR.
.PP
Returns true if they match, false otherwise.
.PP
\&\fB\s-1NOTE:\s0\fR If \f(CW$hashed\fR is \*(L"\s-1STRBYTES\*(R"\s0 long, it is required that it is
zero-terminated (last character of the string is a \f(CW\*(C`null\*(C'\fR byte). This function
however also accepts \f(CW$hashed\fR which is \f(CW\*(C`STRBYTES \- 1\*(C'\fR long.
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.SS "\s-1SALTBYTES\s0"
.IX Subsection "SALTBYTES"
.Vb 1
\&    my $salt_length = $crypto_pwhash\->SALTBYTES;
.Ve
.PP
Returns the length of salt.
.SS "\s-1STRBYTES\s0"
.IX Subsection "STRBYTES"
.Vb 1
\&    my $hashed_length = $crypto_pwhash\->STRBYTES;
.Ve
.PP
Returns the length of password verification string.
.SS "\s-1OPSLIMIT_INTERACTIVE\s0"
.IX Subsection "OPSLIMIT_INTERACTIVE"
.Vb 1
\&    my $opslimit_interactive = $crypto_pwhash\->OPSLIMIT_INTERACTIVE;
.Ve
.PP
Returns a value which represents the default maximum amount of computations
to perform.
.SS "\s-1MEMLIMIT_INTERACTIVE\s0"
.IX Subsection "MEMLIMIT_INTERACTIVE"
.Vb 1
\&    my $memlimit_interactive = $crypto_pwhash\->MEMLIMIT_INTERACTIVE;
.Ve
.PP
Returns a value which represents the maximum amount of \s-1RAM\s0 to use, in bytes.
.SS "\s-1OPSLIMIT_SENSITIVE\s0"
.IX Subsection "OPSLIMIT_SENSITIVE"
.Vb 1
\&    my $opslimit_sensitive = $crypto_pwhash\->OPSLIMIT_SENSITIVE;
.Ve
.PP
Returns a value which represents the suggested for highly sensitive data amount
of computations to perform.
.SS "\s-1MEMLIMIT_SENSITIVE\s0"
.IX Subsection "MEMLIMIT_SENSITIVE"
.Vb 1
\&    my $memlimit_sensitive = $crypto_pwhash\->MEMLIMIT_SENSITIVE;
.Ve
.PP
Returns a value which represents the suggested for highly sensitive data amount
of \s-1RAM\s0 to use, in bytes.
.SH "ALGORITHM DETAILS"
.IX Header "ALGORITHM DETAILS"
\&\f(CW\*(C`crypto_pwhash\*(C'\fR uses \fIyescrypt\fR key derivation algorithm, which has been
submitted to the \fIPassword Hashing Competition\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Data::BytesLocker \- guarded data storage
.IP "\(bu" 4
Password Hashing Competition <http://password-hashing.net>
.IP "\(bu" 4
scrypt \- key derivation function <http://www.tarsnap.com/scrypt.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex J. G. Burzy≈Ñski <ajgb@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2015 by Alex J. G. Burzy≈Ñski <ajgb@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
