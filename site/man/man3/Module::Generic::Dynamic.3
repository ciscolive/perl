.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Generic::Dynamic 3"
.TH Module::Generic::Dynamic 3 "2020-05-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Generic::Dynamic \- Dynamic Object Class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package My::Module;
\&    use parent qw( Module::Generic::Dynamic );
\&
\&    # Then, instantiating an object
\&    my $object = My::Module\->new({
\&        name => $some_name,
\&        quantity => 20,
\&        metadata => $some_hash_reference,
\&        tags => [qw( product entrepreneurship capital )],
\&    });
\&
\&    # Then the methods corresponding to the data keys can be accessed
\&    my $product_name = $object\->name
\&    # etc
.Ve
.SH "VERSION"
.IX Header "VERSION"
.Vb 1
\&    v0.1.0
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The purpose of this class/package is to provide a framework to create dynamically created class/package.
.PP
For more ganular control over the method to be used for each data key-value, use \*(L"_set_get_class\*(R" in Module::Generic
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Provided with an hash reference of data, this will create dynamically a class based on the class/pacakge name used to call \fBnew\fR
.PP
It will then associate helper method sbased on the data type for each key of the hash reference. Precisely:
.IP "\fIhash\fR" 4
.IX Item "hash"
This would create method after the key name and a new class also based on the key name, and use the helper method \*(L"_set_get_object\*(R" in Module::Generic
.IP "\fIarray\fR" 4
.IX Item "array"
If the array contains hash references, this will create a new class/package dynamically and create an object for each hash reference in the array using \*(L"_set_get_object_array\*(R" in Module::Generic
.Sp
Otherwise, it will create the method using \*(L"_set_get_array\*(R" in Module::Generic
.IP "\fIstring\fR" 4
.IX Item "string"
This would create a method using the helper method \*(L"_set_get_scalar\*(R" in Module::Generic
.IP "\fIboolean\fR" 4
.IX Item "boolean"
This would create a method using the helper method \*(L"_set_get_boolean\*(R" in Module::Generic
.SH "AUTHOR"
.IX Header "AUTHOR"
Jacques Deguest <\fIjack@deguest.jp\fR>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (c) 2000\-2020 \s-1DEGUEST\s0 Pte. Ltd.
.PP
You can use, copy, modify and redistribute this package and associated
files under the same terms as Perl itself.
