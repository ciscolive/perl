.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Sortlist 3"
.TH Infoblox::DNS::Sortlist 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Sortlist \- DNS Sortlist Object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A sortlist sorts the order of addresses in responses made to \s-1DNS\s0 queries.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 6
\& my $sort_list = Infoblox::DNS::Sortlist\->new(
\&     source_ipv4addr => $ipv4addr | $ipv4_subnet/prefix                                                      #Either source_ipv4addr or source_ipv6addr is required
\&     source_ipv6addr => $ipv6addr | $ipv6_subnet/prefix                                                      #Either source_ipv4addr or source_ipv6addr is required
\&     match_list      => [ $ipv4addr | $ipv4_subnet/prefix | $ipv6addr |  $ipv6_subnet/prefix ...] | undef    #Optional / Default is undefined
\&     comment         => $string| undef,                    #Optional / Default is undefined
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to apply to an Sortlist object.
.SS "Infoblox::Grid::DNS\->sortlist( )"
.IX Subsection "Infoblox::Grid::DNS->sortlist( )"
.RS 4
Use this function to specify a sortlist at the grid level on the Infoblox appliance. See Infoblox::Grid::DNS\->\fBsortlist()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& # Construct the object
\& my $sortlist = Infoblox::DNS::Sortlist\->new(
\&     match_list      => ["10.20.1.0/24", "10.20.2.0/24"],
\&     source_ipv4addr => "1.2.3.4"
\& );
\& # Configure sortlist on the grid DNS object
\& my $response = $Grid_DNS\->sortlist([$sortlist]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member::DNS\->sortlist( )"
.IX Subsection "Infoblox::Grid::Member::DNS->sortlist( )"
.RS 4
Use this function to specify a sortlist at the grid member level. See Infoblox::Grid::Member::DNS\->\fBsortlist()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& # Construct the object
\& my $sortlist = Infoblox::DNS::Sortlist\->new(
\&     match_list      => ["10.20.1.0/24", "10.20.2.0/24"],
\&     source_ipv4addr => "1.2.3.4"
\& );
\& # Configure sortlist on a Grid Member DNS object
\& my $response = $Grid_Member_DNS\->sortlist([$sortlist]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a sortlist object.
.SS "match_list( )"
.IX Subsection "match_list( )"
.RS 4
Use this method to set or retrieve the match list of a sortlist.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference which contains \s-1IP\s0 addresses and/or networks.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get match list.
\& my $ref_matchlist = $sort_list\->match_list();
\& #Modify match list.
\& $sort_list\->match_list(["10.0.0.10", "20.0.0.0/24", "2001:db8:1234::/48", "2001:db8::1428:57ab"]);
.Ve
.RE
.RS 4
.RE
.SS "source_ipv4addr( )"
.IX Subsection "source_ipv4addr( )"
.RS 4
Use this method to set or retrieve the source IPv4 address of a sortlist object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Address or network of querier which will be preferred by the resolver as the result of a query. To specify \*(L"\s-1ANY\*(R"\s0 querier, please use \*(L"0.0.0.0/0\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv4addrs
\& my $source_ipv4addr = $sort_list\->source_ipv4addr();
\& #Modify ipv4addrs
\& $sort_list\->source_ipv4addr("10.20.1.0/24");
.Ve
.RE
.RS 4
.RE
.SS "source_ipv6addr( )"
.IX Subsection "source_ipv6addr( )"
.RS 4
Use this method to set or retrieve the source IPv6 address of a sortlist object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Address or network of querier which will be preferred by the resolver as the result of a query.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6addrs
\& my $source_ipv6addr = $sort_list\->source_ipv6addr();
\& #Modify ipv6addrs
\& $sort_list\->source_ipv6addr("2001:25d8:44:55::/64");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment of a sortlist object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter a descriptive comment for the sortlist in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get comment
\& my $comment = $sort_list\->comment();
\& # Modify comment
\& $sort_list\->comment("test comment");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, modify. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS\s0 sortlist object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&            master   => "192.168.1.2",
\&            username => "admin",
\&            password => "infoblox"
\& );
\&
\& unless ($session) {
\&    die("Construc session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a Sortlist object\fR
.PP
.Vb 4
\& my $sort1 = Infoblox::DNS::Sortlist\->new(
\&     match_list      => ["10.20.1.0/24", "10.20.2.0/24"],
\&     source_ipv4addr => "1.2.3.4"
\& );
\&
\& unless($sort1) {
\&      die("Construct sort list failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "First sort list object (IPv4) created successfully\en";
.Ve
.PP
\&\fB#Create another sortlist to demonstrate IPv6\fR
.PP
.Vb 4
\& my $sort2 = Infoblox::DNS::Sortlist\->new(
\&     match_list      => ["2001:db8:1234::/48", "2001:db8:345::/64", "192.168.1.1"],
\&     source_ipv6addr => "2001:db8::1428:57ab"
\& );
\&
\& unless($sort2) {
\&      die("Construct sort list failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Second sort list object (IPv6) created successfully\en";
.Ve
.PP
\&\fB#Get the Member \s-1DNS\s0 object to add sortlist object to it\fR
.PP
.Vb 4
\& my @result_array = $session\->get(
\&     object => "Infoblox::Grid::Member::DNS",
\&     name   => $host_name
\& );
\&
\& unless (scalar(@result_array) == 0) {
\&     my $memberdns = $result_array[0];
\&
\&     if ($memberdns) {
\&
\&         #Apply changes to the Member object.
\&         $memberdns\->sortlist([$sort1, $sort2])
\&             or die("modify member failed: ",
\&                    $session\->status_code() . ":" . $session\->status_detail());
\&         print "sort lists added to Member DNS object successfully\en";
\&
\&         #Update member DNS object through the Infoblox session.
\&         $session\->modify($memberdns)
\&             or die("modify session failed: ",
\&                    $session\->status_code() . ":" . $session\->status_detail());
\&         print "Member DNS object with sortlists updated to Infoblox device successfully\en";
\&
\&         #Modify existing sortlist objects
\&
\&         #Modifying the value of the specified object.
\&         $sort1\->source_ipv4addr("10.20.1.0/24");
\&         print "Modify first sortlist value\en";
\&
\&         #Modifying the value of the specified object.
\&         $sort1\->match_list(["10.0.0.10", "20.0.0.0/24", "30.0.0.30", "40.10.0.0/24"]);
\&
\&         #Modifying the value of the specified object.
\&         $sort2\->source_ipv6addr("2001:db8::1428:0/112");
\&         print "Modify second sortlist value\en";
\&
\&         #Apply changes to the member object.
\&         $memberdns\->sortlist([$sort1, $sort2])
\&             or die("modify member failed: ",
\&                    Infoblox::status_code() . ":" . Infoblox::status_detail());
\&         print "sort list updated to Member DNS object successfully\en";
\&
\&         #Update member DNS object through the Infoblox session.
\&         $session\->modify($memberdns)
\&             or die("modify session failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&        print "Member DNS object with sortlist updated to Infoblox device successfully\en";
\&     }
\& } else {
\&     print "No member found with the specified name.";
\& }
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR,Infoblox::Grid::Member::DNS\->\fBsortlist()\fR, Infoblox::Grid::DNS\->\fBsortlist()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
