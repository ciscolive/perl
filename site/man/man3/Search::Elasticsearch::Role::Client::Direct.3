.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search::Elasticsearch::Role::Client::Direct 3"
.TH Search::Elasticsearch::Role::Client::Direct 3 "2020-09-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Search::Elasticsearch::Role::Client::Direct \- Request parsing for Direct clients
.SH "VERSION"
.IX Header "VERSION"
version 7.30
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This role provides the single \f(CW\*(C`parse_request()\*(C'\fR method for classes
which need to parse an \s-1API\s0 definition from Search::Elasticsearch::Role::API
and convert it into a request which can be passed to
\&\*(L"\fBperform_request()\fR\*(R" in Search::Elasticsearch::Transport.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """perform_request()"""
.el .SS "\f(CWperform_request()\fP"
.IX Subsection "perform_request()"
.Vb 1
\&    $request = $client\->parse_request(\e%defn,\e%params);
.Ve
.PP
The \f(CW%defn\fR is a definition returned by \*(L"\fBapi()\fR\*(R" in Search::Elasticsearch::Role::API
with an extra key \f(CW\*(C`name\*(C'\fR which should be the name of the method that
was called on the client.  For instance if the user calls \f(CW\*(C`$client\->search\*(C'\fR,
then the \f(CW\*(C`name\*(C'\fR should be \f(CW"search"\fR.
.PP
\&\f(CW\*(C`parse_request()\*(C'\fR will turn the parameters that have been passed in into
a \f(CW\*(C`path\*(C'\fR (via \*(L"\fBpath_init()\fR\*(R" in Search::Elasticsearch::Util::API::Path), a query-string
hash (via \*(L"qs_init\*(R" in Search::Elasticsearch::Util::API::QS) and will through a
\&\f(CW\*(C`body\*(C'\fR value directly.
.PP
\&\fB\s-1NOTE:\s0\fR If a \f(CW\*(C`path\*(C'\fR key is specified in the \f(CW%params\fR then it will be used
directly, instead of trying to build path from the path template.  Similarly,
if a \f(CW\*(C`params\*(C'\fR key is specified in the \f(CW%params\fR, then it will be used
as a basis for the query string hash.  For instance:
.PP
.Vb 11
\&    $client\->perform_request(
\&        {
\&            method => \*(AqGET\*(Aq,
\&            name   => \*(Aqnew_method\*(Aq
\&        },
\&        {
\&            path   => \*(Aq/new/method\*(Aq,
\&            params => { foo => \*(Aqbar\*(Aq },
\&            body   => \e%body
\&        }
\&    );
.Ve
.PP
This makes it easy to add support for custom plugins or new functionality
not yet supported by the released client.
.SH "AUTHOR"
.IX Header "AUTHOR"
Enrico Zimuel <enrico.zimuel@elastic.co>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Elasticsearch \s-1BV.\s0
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
