.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Helper::Schema::Verifier 3"
.TH DBIx::Class::Helper::Schema::Verifier 3 "2020-03-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Helper::Schema::Verifier \- Verify the Results and ResultSets of your Schemata
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package MyApp::Schema;
\&
\& _\|_PACKAGE_\|_\->load_components(\*(AqHelper::Schema::Verifier\*(Aq);
\&
\& sub result_verifiers {
\&   (
\&      sub {
\&         my ($self, $result, $set) = @_;
\&
\&         for ($result, $set) {
\&            die "$_ does not start with the letter A" unless m/^A/
\&         }
\&      },
\&      shift\->next::method,
\&   )
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`DBIx::Class::Helper::Schema::Verifier\*(C'\fR is a minuscule framework to assist in
creating schemata that are to your very own exacting specifications.  It is
inspired by my own travails in discovering that \f(CW\*(C`use mro \*(Aqc3\*(Aq\*(C'\fR is both
required and barely documented in much Perl code.  As time goes by I expect to
add many more verifiers, but with this inaugural release I am merely including
DBIx::Class::Helper::Schema::Verifier::C3.
.SH "INTERFACE METHODS"
.IX Header "INTERFACE METHODS"
.SS "result_verifiers"
.IX Subsection "result_verifiers"
You must implement \f(CW\*(C`result_verifiers\*(C'\fR in your subclass of \f(CW\*(C`::Verifier\*(C'\fR.  Each
verifier gets called on the schema and gets each result and resultset together
as arguments.  You can use this to validate almost anything about the results
and resultsets of a schema; contributions are warmly welcomed.
.SH "MORE ERRORS"
.IX Header "MORE ERRORS"
Initially I kept this module simple, but after using it in production at
ZipRecruiter <https://www.ziprecruiter.com> I found that showing the user the
first error that occurred and then giving up was pretty annoying.  Now
\&\f(CW\*(C`Schema::Verifier\*(C'\fR wraps both \*(L"load_namespaces\*(R" in DBIx::Class::Schema and
\&\*(L"load_classes\*(R" in DBIx::Class::Schema and shows all the exceptions encoutered as a
list at the end of loading all the results.
.SH "AUTHOR"
.IX Header "AUTHOR"
Arthur Axel \*(L"fREW\*(R" Schmidt <frioux+cpan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Arthur Axel \*(L"fREW\*(R" Schmidt.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
