.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::DNS::ToolKit::RR::SOA 3"
.TH Net::DNS::ToolKit::RR::SOA 3 "2011-11-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::ToolKit::RR::SOA \- Resource Record Handler
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  DO NOT use Net::DNS::ToolKit::RR::SOA
\&  DO NOT require Net::DNS::ToolKit::RR::SOA
\&
\&  Net::DNS::ToolKit::RR::SOA is autoloaded by 
\&  class Net::DNS::ToolKit::RR and its methods
\&  are instantiated in a \*(Aqspecial\*(Aq manner.
\&
\&  use Net::DNS::ToolKit::RR;
\&  ($get,$put,$parse) = new Net::DNS::ToolKit::RR;
\&
\&  ($newoff,$name,$type,$class,$ttl,$rdlength,
\&        ) = $get\->SOA(\e$buffer,$offset);
\&
\&  Note: the $get\->SOA method is normally called
\&  via:  @stuff = $get\->next(\e$buffer,$offset);
\&
\&  ($newoff,@dnptrs)=$put\->SOA(\e$buffer,$offset,\e@dnptrs,
\&     $name,$type,$class,$ttl,
\&     $mname,$rname,$serial,$refresh,$retry,$expire,$min);
\&
\&  $NAME,$TYPE,$CLASS,$TTL,$rdlength,
\&  $MNAME,$RNAME,$serial,$refresh,$retry,$expire,$min) 
\&    = $parse\->SOA($name,$type,$class,$ttl,$rdlength,
\&      $mname,$rname,$serial,$refresh,$retry,$expire,$min);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBNet::DNS::ToolKit::RR:SOA\fR appends an \s-1SOA\s0 resource record to a \s-1DNS\s0 packet
under construction, recovers an \s-1SOA\s0 resource record from a packet being decoded, and
converts the numeric/binary portions of the resource record to human
readable form.
.PP
.Vb 1
\&  Description from RFC1035.txt
\&
\&  3.2.1. Format
\&
\&  All RRs have the same top level format shown below:
\&
\&                                    1  1  1  1  1  1
\&      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+  
\&    |                      NAME                     |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                      TYPE                     |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                     CLASS                     |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                      TTL                      |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                   RDLENGTH                    |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-|
\&    |                     RDATA                     |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&
\&  NAME  an owner name, i.e., the name of the node to which this
\&        resource record pertains.
\&
\&  TYPE  two octets containing one of the RR TYPE codes.
\&
\&  CLASS two octets containing one of the RR CLASS codes.
\&
\&  TTL   a 32 bit signed integer that specifies the time interval
\&        that the resource record may be cached before the source
\&        of the information should again be consulted.  Zero
\&        values are interpreted to mean that the RR can only be
\&        used for the transaction in progress, and should not be
\&        cached.  For example, SOA records are always distributed
\&        with a zero TTL to prohibit caching.  Zero values can
\&        also be used for extremely volatile data.
\&
\&  RDLENGTH an unsigned 16 bit integer that specifies the length
\&        in octets of the RDATA field.
\&
\&  RDATA a variable length string of octets that describes the
\&        resource.  The format of this information varies
\&        according to the TYPE and CLASS of the resource record.
\&
\&    3.3.13. SOA RDATA format
\&
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    /                     MNAME                     /
\&    /                                               /
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    /                     RNAME                     /
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                    SERIAL                     |
\&    |                                               |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                    REFRESH                    |
\&    |                                               |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                     RETRY                     |
\&    |                                               |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                    EXPIRE                     |
\&    |                                               |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&    |                    MINIMUM                    |
\&    |                                               |
\&    +\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+\-\-+
\&
\&    where:
\&
\&    MNAME The <domain\-name> of the name server that was
\&        the original or primary source of data for this 
\&        zone.
\&
\&    RNAME A <domain\-name> which specifies the mailbox of
\&        the person responsible for this zone.
\&
\&    SERIAL The unsigned 32 bit version number of the 
\&        original copy of the zone.  Zone transfers 
\&        preserve this value.  This value wraps and 
\&        should be compared using sequence space 
\&        arithmetic.
\&
\&    REFRESH A 32 bit time interval before the zone 
\&        should be refreshed.
\&
\&    RETRY A 32 bit time interval that should elapse 
\&        before a failed refresh should be retried.
\&
\&    EXPIRE A 32 bit time value that specifies the upper 
\&        limit on the time interval that can elapse 
\&        before the zone is no longer authoritative.
\&
\&    MINIMUM The unsigned 32 bit minimum TTL field that
\&        should be exported with any RR from this zone.
.Ve
.PP
\&\s-1SOA\s0 records cause no additional section processing.
.PP
All times are in units of seconds.
.PP
Most of these fields are pertinent only for name server maintenance
operations.  However, \s-1MINIMUM\s0 is used in all query operations that
retrieve RRs from a zone.  Whenever a \s-1RR\s0 is sent in a response to a
query, the \s-1TTL\s0 field is set to the maximum of the \s-1TTL\s0 field from the \s-1RR\s0
and the \s-1MINIMUM\s0 field in the appropriate \s-1SOA.\s0  Thus \s-1MINIMUM\s0 is a lower
bound on the \s-1TTL\s0 field for all RRs in a zone.  Note that this use of
\&\s-1MINIMUM\s0 should occur when the RRs are copied into the response and not
when the zone is loaded from a master file or via a zone transfer.  The
reason for this provison is to allow future dynamic update facilities to
change the \s-1SOA RR\s0 with known semantics.
.IP "\(bu" 4
\&\f(CW@stuff\fR = \f(CW$get\fR\->\s-1SOA\s0(\e$buffer,$offset);
.Sp
.Vb 1
\&  Get the contents of the resource record.
\&
\&  USE: @stuff = $get\->next(\e$buffer,$offset);
\&
\&  where: @stuff = (
\&  $newoff $name,$type,$class,$ttl,$rdlength,
\&  $mname,$rname,$serial,$refresh,$retry,$expire,$min);
.Ve
.Sp
All except the last five (5) items,
\&\fB\f(CB$mname\fB,$rname,$serial,$refresh,$retry,$expire,$min\fR, are provided by
the class loader, \fBNet::DNS::ToolKit::RR\fR. The code in this method knows
how to retrieve \fB\f(CB$mname\fB,$rname,$serial,$refresh,$retry,$expire,$min\fR.
.Sp
.Vb 11
\&  input:        pointer to buffer,
\&                offset into buffer
\&  returns:      offset to next resource,
\&                @common RR elements,
\&                primary server name,
\&                zone contact,
\&                RR serial number,
\&                REFRESH timer,
\&                RETRY timer,
\&                EXPIRE timer,
\&                MINIMUM ttl
.Ve
.IP "\(bu" 4
($newoff,@dnptrs)=$put\->\s-1SOA\s0(\e$buffer,$offset,\e@dnptrs,
	\f(CW$name\fR,$type,$class,$ttl,
	\f(CW$mname\fR,$rname,$serial,$refresh,$retry,$expire,$min);
.Sp
Append an \s-1SOA\s0 record to \f(CW$buffer\fR.
.Sp
.Vb 2
\&  where @common = (
\&        $name,$type,$class,$ttl);
.Ve
.Sp
The method will insert the \f(CW$rdlength\fR,
\&\f(CW$mname\fR, \f(CW$rname\fR, \f(CW$serial\fR, \f(CW$refresh\fR, \f(CW$retry\fR, \f(CW$expire\fR, and \f(CW$min\fR, then
return the updated pointer to the array of compressed names
.Sp
The class loader, \fBNet::DNS::ToolKit::RR\fR, inserts the \f(CW@common\fR elements and
returns updated \f(CW@dnptrs\fR. This module knows how to insert its \s-1RDATA\s0 and
calculate the \f(CW$rdlength\fR.
.Sp
.Vb 11
\&  input:        pointer to buffer,
\&                offset (normally end of buffer), 
\&                pointer to compressed name array,
\&                @common RR elements,
\&                primary server name,
\&                zone contact,
\&                RR serial number,
\&                REFRESH timer,
\&                RETRY timer,
\&                EXPIRE timer,
\&                MINIMUM ttl
\&                
\&  output:       offset to next RR,
\&                new compressed name pointer array,
\&           or   empty list () on error.
.Ve
.IP "\(bu" 4
(@COMMON,$MNAME,$RNAME,$serial,$refresh,$retry,$expire,$min)
	= \f(CW$parse\fR\->A(@common,
	\f(CW$mname\fR,$rname,$serial,$refresh,$retry,$expire,$min);
.Sp
Converts binary/numeric field data into human readable form. The common \s-1RR\s0
elements are supplied by the class loader, \fBNet::DNS::ToolKit::RR\fR.
For \s-1SOA RR\s0's, this returns \f(CW$mxdname\fR terminated with '.'
.Sp
.Vb 10
\&  input:        primary server name,
\&                zone contact,
\&                serial number,
\&                refresh timer,
\&                retry timer,
\&                expire timer,
\&                minimum ttl
\&  returns:      SERVER NAME \*(Aq.\*(Aq terminated
\&                CONTACT NAME \*(Aq.\*(Aq terminated
\&                serial number,
\&                refresh timer,
\&                retry timer,
\&                expire timer,
\&                minimum ttl
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.Vb 2
\&        Net::DNS::ToolKit
\&        Net::DNS::Codes
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
.Vb 1
\&        none
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Robinton <michael@bizsystems.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&    Copyright 2003 \- 2011, Michael Robinton <michael@bizsystems.com>
.Ve
.PP
Michael Robinton <michael@bizsystems.com>
.PP
All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of either:
.PP
.Vb 3
\&  a) the GNU General Public License as published by the Free
\&  Software Foundation; either version 2, or (at your option) any
\&  later version, or
\&
\&  b) the "Artistic License" which comes with this distribution.
.Ve
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of 
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See either    
the \s-1GNU\s0 General Public License or the Artistic License for more details.
.PP
You should have received a copy of the Artistic License with this
distribution, in the file named \*(L"Artistic\*(R".  If not, I'll be glad to provide
one.
.PP
You should also have received a copy of the \s-1GNU\s0 General Public License
along with this program in the file named \*(L"Copying\*(R". If not, write to the
.PP
.Vb 3
\&        Free Software Foundation, Inc.                        
\&        59 Temple Place, Suite 330
\&        Boston, MA  02111\-1307, USA
.Ve
.PP
or visit their web page on the internet at:
.PP
.Vb 1
\&        http://www.gnu.org/copyleft/gpl.html.
.Ve
.SH "See also:"
.IX Header "See also:"
\&\fBNet::DNS::Codes\fR\|(3), \fBNet::DNS::ToolKit\fR\|(3)
