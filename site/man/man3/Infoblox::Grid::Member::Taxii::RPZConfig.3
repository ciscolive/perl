.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Member::Taxii::RPZConfig 3"
.TH Infoblox::Grid::Member::Taxii::RPZConfig 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Member::Taxii::RPZConfig \- A Taxii Member RPZ Configuration object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Taxii Member \s-1RPZ\s0 Configuration object provides configuration for \s-1RPZ\s0 rule creation through the Taxii protocol.
Each Grid member running the Taxii server can support a separate set of response policy zones.
These zones will be accessible via a user configurable name for the \s-1STIX\s0 collection.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 4
\& my $rpz_config = Infoblox::Grid::Member::Taxii::RPZConfig\->new(
\&     collection_name => $string, #Required
\&     zone            => $rpzone, #Required
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
.SS "Infoblox::Grid::Member::Taxii\->taxii_rpz_config( )"
.IX Subsection "Infoblox::Grid::Member::Taxii->taxii_rpz_config( )"
.RS 4
Use this method to set or retrieve the Taxii service \s-1RPZ\s0 configuration list.
See Infoblox::Grid::Member::Taxii\->\fBtaxii_rpz_config()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get taxii_rpz_config value
\& my $taxii_rpz_config = $object\->taxii_rpz_config();
\&
\& #Modify taxii_rpz_config value
\& $object\->taxii_rpz_config([$conf1, $conf2]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.SS "collection_name( )"
.IX Subsection "collection_name( )"
.RS 4
Use this method to set or retrieve the \s-1STIX\s0 collection name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired collection name in sstring format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get collection_name value
\& my $collection_name = $object\->collection_name();
\&
\& #Modify collection_name value
\& $object\->collection_name(\*(Aqcollection1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to set or retrieve the response policy zone that can be modified through the Taxii protocol.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::DNS::Zone object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.RE
.RS 4
.Sp
.Vb 2
\& #Get zone value
\& my $zone = $object\->zone();
\&
\& #Modify zone value
\& $object\->zone($rp_zone);
.Ve
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::Member::Taxii, 
Infoblox::Grid::Member::Taxii\->\fBtaxii_rpz_config()\fR, 
Infoblox::DNS::Zone
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
