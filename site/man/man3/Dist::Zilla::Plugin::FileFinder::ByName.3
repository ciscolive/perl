.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::Plugin::FileFinder::ByName 3"
.TH Dist::Zilla::Plugin::FileFinder::ByName 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::Plugin::FileFinder::ByName \- FileFinder matching on pathnames
.SH "VERSION"
.IX Header "VERSION"
version 6.017
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In your \fIdist.ini\fR:
.PP
.Vb 6
\&  [FileFinder::ByName / MyFiles]
\&  dir   = bin     ; look in the bin/ directory
\&  dir   = lib     ; and the lib/ directory
\&  file  = *.pl    ; for .pl files
\&  match = \e.pm$   ; and for .pm files
\&  skip  = ignore  ; that don\*(Aqt have "ignore" in the path
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
FileFinder::ByName is a FileFinder that
selects files by matching the criteria you specify against the pathname.
.PP
There are three types of criteria you can use.  \f(CW\*(C`dir\*(C'\fR limits the
search to a particular directory.  \f(CW\*(C`match\*(C'\fR is a regular expression
that must match the pathname.  \f(CW\*(C`skip\*(C'\fR is a regular expression that
must not match the pathname.
.PP
Each key can be specified multiple times.  Multiple occurrences of the
same key are ORed together.  Different keys are ANDed together.  That
means that to be selected, a file must be located in one of the
\&\f(CW\*(C`dir\*(C'\fRs, must match one of the \f(CW\*(C`match\*(C'\fR regexs, and must not match any
of the \f(CW\*(C`skip\*(C'\fR regexs.
.PP
Note that \f(CW\*(C`file\*(C'\fR and \f(CW\*(C`match\*(C'\fR are considered to be the \fIsame\fR key.
They're just different ways to write a regex that the pathname must match.
.PP
Omitting a particular key means that criterion will not apply to the
search.  Omitting all keys will select every file in your dist.
.PP
Note: If you need to \s-1OR\s0 different types of criteria, then use more
than one instance of FileFinder::ByName.  A
FileFinderUser should allow you
to specify more than one FileFinder to use.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "dir"
.IX Subsection "dir"
The file must be located in one of the specified directories (relative
to the root directory of the dist).
.SS "file"
.IX Subsection "file"
The filename must match one of the specified patterns (which are
converted to regexs using Text::Glob and combined with any \f(CW\*(C`match\*(C'\fR
rules).
.SS "match"
.IX Subsection "match"
The pathname must match one of these regular expressions.
.SS "skip"
.IX Subsection "skip"
The pathname must \fInot\fR match any of these regular expressions.
.SH "CREDITS"
.IX Header "CREDITS"
This plugin was originally contributed by Christopher J. Madsen.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 üòè <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
