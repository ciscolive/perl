.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Host 3"
.TH Infoblox::DNS::Host 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Host \- DNS Host record object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A host record defines attributes for a node, such as the name-to-address and address-to-name mapping. This alleviates having to specify an A record and a \s-1PTR\s0 record separately for the same node. A host can also define aliases and \s-1DHCP\s0 fixed address nodes. The zone must be created first before adding a host record for the zone.
.PP
Note that you must specify only one view for the attribute \*(L"views\*(R".
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $host = Infoblox::DNS::Host\->new(
\&     ipv4addrs                => [$ipv4addr, $ipv4addr, $FixedAddr, ...], #Required
\&     name                     => $fqdn,                                   #Required
\&     aliases                  => [$fqdn, $fqdn, ...],                     #Optional / Default is empty
\&     comment                  => $string,                                 #Optional / Default is undefined
\&     configure_for_dns        => "true" | "false",                        #Optional / Default "true"
\&     disable                  => "true" | "false",                                #Optional / Default "false"
\&     extattrs                 => { $string => $extattr, ... },            #Optional / Default is undefined
\&     extensible_attributes    => { $string => $string | $num, $string => [ $string | $num, ... ], ... } #Optional / Default is undefined
\&     ipv6addrs                => [$ipv6addr, $ipv6addr, ...],             #Optional / Default is empty
\&     network_view             => $NetworkView,                            #Optional / Default is "default" network view
\&     rrset_order              => "cyclic" | "random" | "fixed",           #Optional / Default "cyclic"
\&     ttl                      => $num | undef,                                #Optional / Default is undefined
\&     views                    => [$View]                                  #Optional / Default is "default" view
\&     cli_credentials          => [$cli1, ...],                            #Optional
\&     override_cli_credentials => "true" | "false",                        #Optional / Default is "false"
\&     device_type              => $string,                                 #Optional
\&     device_vendor            => $string,                                 #Optional
\&     device_location          => $string,                                 #Optional
\&     device_description       => $string,                                 #Optional
\&     allow_telnet             => "true" | "false",                        #Optional / Default is "false"
\&     ddns_protected           => "true" | "false",                        #Optional / Default is "false"
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a \s-1DNS\s0 host record object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a host record object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 12
\& #Construct an object
\& my $host = Infoblox::DNS::Host\->new(
\&     name         => "host1.test.com",
\&     aliases      => ["one.foo.com", "two.foo.com"],
\&     comment      => "add a host host1.test.com",
\&     disable      => "true",
\&     ipv4addrs    => ["4.4.4.4"],
\&     ipv6addrs    => ["2001::1:2:3:4"],
\&     newtork_view => $nview,
\&     ttl          => 3600,
\&     views        => [$view1],
\& );
\&
\& # Submit for addition
\& my $response = $session\->add( $host );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DNS host object:
\&
\&  name          \- Optional. A host name in string format.
\&  network_view  \- Optional. The network view in which the host record is located. By default, all network views are searched.
\&  view          \- Optional. The DNS view in which the host record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&  zone          \- Optional. A zone name in FQDN format.
\&  comment       \- Optional. A comment in string format (regular expression)
\&  mac           \- Optional. A MAC address present in any FixedAddr object in the ipv4addrs member.
\&  ipv4addr      \- Optional. An IP address in string format (regular expression).
\&  ipv6addr      \- Optional. An IPv6 address in string format (regular expression).
\&  alias         \- Optional. An alias of the host in string format (regular expression).
\&  extattrs      \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\& my @retrieved_objs = $session\->get(
\&                       object       => "Infoblox::DNS::Host",
\&                       name         => "host1.test.com",
\&                       network_view => "default",
\&                       view         => "default" );
\&
\& my @retrieved_objs = $session\->get(
\&                       object                => "Infoblox::DNS::Host",
\&                       extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
\&
\& # get all DNS host objects in zone "test.com" of default view
\& my @retrieved_objs = $session\->get(
\&                       object       => "Infoblox::DNS::Host",
\&                       zone         => "test.com",
\&                       network_view => "default",
\&                       view         => "default" );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a host record object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use method to modify the comment.
\& $host\->comment("this is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $host );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a host record object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific host record object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& # Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Host",
\&     name   => "host1.test.com",
\&     view   => "default" );
\& # Find the desired object from the retrieved list.
\& my $desired_host = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_host );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DNS\s0 host record objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DNS host record object:
\&
\&  name          \- Optional. A host name in string format (regular expression).
\&  network_view  \- Optional. The network view in which the host record is located. By default, all network views are searched.
\&  view          \- Optional. The DNS view in which the host record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&  zone          \- Optional. A zone name in FQDN format.
\&  comment       \- Optional. A comment in string format (regular expression).
\&  mac           \- Optional. A MAC address present in any FixedAddr object in the ipv4addrs member (regular expression).
\&  ipv4addr      \- Optional. An IP address in string format (regular expression).
\&  ipv6addr      \- Optional. An IPv6 address in string format (regular expression).
\&  alias         \- Optional. An alias of the host in string format (regular expression).
\&  extattrs      \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 6
\& # search for all DNS host objects that match ".test.com" in the default DNS view
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DNS::Host",
\&     name    => \*(Aq.*\e.test\e.com\*(Aq,
\&     view    => "default",
\&     comment => ".*modified comment" );
\&
\& # search for DNS host objects defining "Santa Clara" for "Site" extensible attribute
\& my @retrieved_objs = $session\->search(
\&     object                => "Infoblox::DNS::Host",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
\&
\& # search for all DNS host objects in zone "test.com" of default view
\& my @retrieved_objs = $session\->search(
\&     object       => "Infoblox::DNS::Host",
\&     zone         => "test.com",
\&     network_view => "default",
\&     view         => "default" );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a host record.
.SS "aliases( )"
.IX Subsection "aliases( )"
.RS 4
Use this method to set or retrieve the aliases of the host.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference with the aliases for the host. The aliases of the host should be in Fully Qualified Domain Name (\s-1FQDN\s0) format. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting aliases
\& my $ref_aliases = $host\->aliases();
\& #Modifying aliases
\& $host\->aliases(["one1.foo.com", "two2.foo.com"]);
.Ve
.RE
.RS 4
.RE
.SS "allow_telnet( )"
.IX Subsection "allow_telnet( )"
.RS 4
Use this method to set or retrieve the flag that enables copying \s-1SSH\s0 credential to \s-1TELNET.\s0
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to copy \s-1SSH\s0 credential to \s-1TELNET\s0 or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $host\->allow_telnet();
\& # Modify attribute value
\& $host\->allow_telnet(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to retrieve cloud \s-1API\s0 related information for the Infoblox::DNS::Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get cloud_info
\& my $cloud_info = $object\->cloud_info();
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $host\->comment();
\& #Modify comment
\& $host\->comment("Modifying the DNS host comment");
.Ve
.RE
.RS 4
.RE
.SS "configure_for_dns( )"
.IX Subsection "configure_for_dns( )"
.RS 4
Use this method to set or retrieve the configure_for_dns flag of a \s-1DNS\s0 host.
.Sp
When configure_for_dns is false the host will not have parent zone information.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is true.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the configure_for_dns flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get configure_for_dns
\& my $configure_for_dns = $host\->configure_for_dns();
\& #Modify configure_for_dns
\& $host\->configure_for_dns("false");
.Ve
.RE
.RS 4
.RE
.SS "cli_credentials( )"
.IX Subsection "cli_credentials( )"
.RS 4
Use this method to set or retrieve the discovery \s-1CLI\s0 credentials.
.Sp
Setting this method to a defined value implicitly sets the override_cli_credentials method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_cli_credentials attribute to \*(L"false\*(R".
.Sp
Note that when cli_credentials is set to a defined value and override_cli_credentials is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$host\fR\->cli_credentials([$cli]); \f(CW$host\fR\->override_cli_credentials(\*(L"false\*(R"); will set override_cli_credentials to \*(L"false\*(R", and the sequence \f(CW$host\fR\->override_cli_credentials(\*(L"false\*(R"); \f(CW$host\fR\->cli_credentials([$cli]); will result in override_cli_credentials=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::Grid::Discovery::CLICredential objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get cli_credentials
\& my $cli_credentials = $host\->cli_credentials();
\& #Modify cli_credentials
\& $host\->cli_credentials([$cli1, $cli2]);
.Ve
.RE
.RS 4
.RE
.SS "ddns_protected( )"
.IX Subsection "ddns_protected( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether \s-1DDNS\s0 updates for this record are allowed or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to protect record from \s-1DDNS\s0 updates and 'false' to allow \s-1DDNS\s0 updates for the specified record.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ddns_protected value
\& my $ddns_protected = $object\->ddns_protected();
\&
\& #Modify ddns_protected value
\& $object\->ddns_protected(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "device_description( )"
.IX Subsection "device_description( )"
.RS 4
Use this method to set or retrieve the description of the discovery device.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The device description in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get device_description
\& my $device_description = $host\->device_description();
\& #Modify device_description
\& $host\->device_description(\*(Aqexample\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "device_location( )"
.IX Subsection "device_location( )"
.RS 4
Use this method to set or retrieve the location of the discovery device.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The device location in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get device_location
\& my $device_location = $host\->device_location();
\& #Modify device_location
\& $host\->device_location(\*(Aqexample\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "device_type( )"
.IX Subsection "device_type( )"
.RS 4
Use this method to set or retrieve the type of the discovery device.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The device type in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get device_type
\& my $device_type = $host\->device_type();
\& #Modify device_type
\& $host\->device_type(\*(Aqexample\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "device_vendor( )"
.IX Subsection "device_vendor( )"
.RS 4
Use this method to set or retrieve the vendor name of the discovery device.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The device vendor name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get device_vendor
\& my $device_vendor = $host\->device_vendor();
\& #Modify device_vendor
\& $host\->device_vendor(\*(Aqexample\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DNS\s0 host.
.Sp
The host can be disabled instead of removed. You can avoid removing and re-adding a host when a network appliance is repaired or relocated. When the changes to the physical appliance are complete, the host can be simply re-enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $host\->disable();
\& #Modify disable
\& $host\->disable("false");
.Ve
.RE
.RS 4
.RE
.SS "dns_aliases( )"
.IX Subsection "dns_aliases( )"
.RS 4
Use this method to retrieve the aliases, in punycode format, of the host. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $host\->dns_aliases();
.Ve
.RE
.RS 4
.RE
.SS "dns_name( )"
.IX Subsection "dns_name( )"
.RS 4
Use this method to retrieve the host name in punycode format. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $host\->dns_name();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS\s0 Host object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $host\->extattrs();
\& #Modify extattrs
\& $host\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS\s0 Host object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $host\->extensible_attributes();
\& #Modify extensible attributes
\& $host\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "ipv4addrs( )"
.IX Subsection "ipv4addrs( )"
.RS 4
Use this method to set or retrieve the IPv4 addresses of the host.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains defined Infoblox::DHCP::FixedAddr objects or IPv4 addresses.
.Sp
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.Sp
If the Infoblox library is loaded with the :hostaddress option, the valid value is an array reference that contains Infoblox::DHCP::HostAddr objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Gett ipv4addrs
\& my $ref_ipv4addr = $host\->ipv4addrs();
\& #Modify ipv4addrs
\& $host\->ipv4addrs([$fixedaddr, "2.2.2.2"]); #$fixedaddr is an Infoblox::DHCP::FixedAddr object
.Ve
.RE
.RS 4
.RE
.SS "ipv6addrs( )"
.IX Subsection "ipv6addrs( )"
.RS 4
Use this method to set or retrieve the IPv6 addresses of the host.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains IPv6 addresses in string format.
.Sp
An IPv6 address is a string consisting of eight groups of four hexadecimal digits, where each group is separated by a colon (:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Various shortcuts exist to shorten the string representation of an IPv6 address, such as omitting the leading zeros of each group and replacing one or any number of consecutive groups of 0 value with two colons(::). i.e. The previous example can be written as 2001:db8:85a3::8a2e:370:7334.
.Sp
When creating an Infoblox::DNS::Host object, setting this method to [] is not supported. If the Infoblox::DNS::Host object does not have associated IPv6 addresses, simply do not pass the ipv6addrs attribute to the constructor. If [] is set and the Host object is submitted for addition, the following error will be reported: \*(L"A host record requires at least one \s-1IP\s0 address.\*(R" Setting the method to [] is supported for modify requests.
.Sp
If the Infoblox library is loaded with the :hostaddress option, the valid value is an array reference that contains Infoblox::DHCP::IPv6HostAddr objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Gett ipv6addrs
\& my $ref_ipv6addr = $host\->ipv6addrs();
\& #Modify ipv6addrs
\& $host\->ipv6addrs(["2001::1", "2002::1:2:3:4"]);
.Ve
.RE
.RS 4
.RE
.SS "last_queried( )"
.IX Subsection "last_queried( )"
.RS 4
Use this method to retrieve the time when the associated record was last queried. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. The number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_queried
\& my $last_queried = $host\->last_queried();
.Ve
.RE
.RS 4
.RE
.SS "ms_ad_user_data( )"
.IX Subsection "ms_ad_user_data( )"
.RS 4
Use this method to retrieve Microsoft Active Directory users related information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::MSServer::AdUser::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_ad_user_data
\& my $ms_ad_user_data = $host\->ms_ad_user_data();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the host name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Host name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A host name can have a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $host\->name();
\& #Modify name
\& $host\-> name("host2.test.com");
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the network view of the \s-1DNS\s0 host.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" network view, which means the \s-1DNS\s0 host is in the default network view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a defined Infoblox::DHCP::View object. The default network view value is the system-defined default network view object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network view
\& my $nview = $host\->network_view();
\& #Modify network view, with an Infoblox::DHCP::View object
\& $host\->network_view($nview);
.Ve
.RE
.RS 4
.RE
.SS "override_cli_credentials( )"
.IX Subsection "override_cli_credentials( )"
.RS 4
The override_cli_credentials attribute controls whether the cli_credentials value in the object is used, instead of the grid default.
.Sp
The override_cli_credentials attribute can be specified explicitly. It is also set implicitly when cli_credentials is set to a defined value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_cli_credentials flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $host\->override_cli_credentials();
\& # Modify attribute value
\& $host\->override_cli_credentials(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "rrset_order( )"
.IX Subsection "rrset_order( )"
.RS 4
Use this method to set or retrieve the rrset_order value. The value of this parameters specifies the order in which resource record sets are returned.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The possible values of the parameter are \*(L"cyclic\*(R", \*(L"random\*(R" and \*(L"fixed\*(R". The default value of this parameter is \*(L"cyclic\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get rrset_order
\& my $order = $host\->rrset_order()
\& # Set fixed RR set order
\& $host\->rrset_order("fixed");
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to set or retrieve the Time to Live (\s-1TTL\s0) value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is undefined which indicates that the record inherits the \s-1TTL\s0 value of the zone.
.Sp
Specify a \s-1TTL\s0 value to override the \s-1TTL\s0 value at the zone level.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration in seconds that the record is cached. Zero indicates that the record should not be cached. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get ttl
\& my $ttl = $host\->ttl();
\& #Modify ttl
\& $host\->ttl(1800);
\& #Un\-override ttl
\& $host\->ttl(undef);
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to set or retrieve the view of the \s-1DNS\s0 host.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" view, which means the \s-1DNS\s0 host is located under the default view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference of defined Infoblox::DNS::View objects. The default view value is \*(L"default\*(R".
.Sp
Note that the array size must be 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get views
\& my $ref_views = $host\->views();
\& #Modify views, list of Infoblox::DNS::View objects
\& $host\->views([$view1]);
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of a \s-1DNS\s0 host object. This method is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get zone
\& my $zone = $host\->zone();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a Host record object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS\s0 host record insertion\fR
.PP
.Vb 1
\& #PROGRAM STARTS: Include all the modules that will be used
\&
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox Appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2", #appliance host ip
\&     username => "admin",     #appliance user login
\&     password => "infoblox"   #appliance password
\& );
\&
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& #Create the zone prior to an host insertion
\& my $zone = Infoblox::DNS::Zone\->new(name => "test.com");
\&
\& unless ($zone) {
\&    die("Construct zone failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& print "Zone object created successfully\en";
\&
\& #Verify if the zone exists
\& my $object = $session\->get(object => "Infoblox::DNS::Zone",
\&                              name => "test.com");
\& unless ($object) {
\&    print "Zone does not exist on server, safe to add the zone\en";
\&    $session\->add($zone)
\&       or die("Add zone failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Zone added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS\s0 host record\fR
.PP
.Vb 1
\& #Construct a DNS host object
\&
\& my $host = Infoblox::DNS::Host\->new(
\&     name         => "host1.test.com",
\&     aliases      => ["one.foo.com", "two.foo.com"],
\&     comment      => "add a host host1.test.com",
\&     disable      => "true",
\&     ipv4addrs    => ["4.4.4.4"],
\&     ipv6addrs    => ["2001::4:4:4:4"],
\&     ttl          => 3600,
\& );
\&
\& unless ($host) {
\&    die("Construct DNS host record failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DNS host object created successfully\en";
\&
\& #Add the DNS host record object to Infoblox appliance through a session
\& $session\->add($host)
\&
\&     or die("Add host record failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS host object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS\s0 host record\fR
.PP
.Vb 11
\& #Search host record host1.test.com
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Host",
\&     name   => \*(Aqhost1\e.test\e.com\*(Aq
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search host record failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS host object found at least 1 matching entry\en";
\&
\& #Search all host records that start with "add" in the comment
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DNS::Host",
\&     comment => "add.*",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search host record failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS host object using regexp in comment field found at least 1 matching entry\en";
\&
\& #Search all host records that start with "host1" in the zone
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Host",
\&     name   => \*(Aqhost1.*\e.com\*(Aq,
\&  );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search host record failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS host object using regexp in name field found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS\s0 host record\fR
.PP
.Vb 6
\& #Get host record through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Host",
\&     name   => "host1.test.com"
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Get host record failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& #Modify one of the attributes of the specified host record
\& $object\->comment("This is the modified comment");
\&
\& #Applying the changes
\& $session\->modify($object)
\&     or die("Modify host record failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS host object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DNS\s0 host record.\fR
.PP
.Vb 10
\& #Get host record through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Host",
\&     name   => "host1.test.com"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get host record failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Get DNS host object successfull\en";
\&
\& #Submit the object for removal
\&
\& $session\->remove($object)
\&     or die("Remove host record failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS host object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::View, Infoblox::DHCP::View, Infoblox::DNS::Zone, Infoblox::DHCP::FixedAddr,Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session, Infoblox::Grid::MSServer::AdUser::Data
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
