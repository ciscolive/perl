.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Excel::Template::XLSX 3"
.TH Excel::Template::XLSX 3 "2019-12-10" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Excel\-Template\-XLSX \- Create Excel .xlsx files starting from (one or more) template(s).
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   use Excel::Template::XLSX;
\&   my ($self, $workbook) = Excel::Template::XLSX\->new(\*(Aqperl.xlsx\*(Aq, \*(Aqtemplate1.xlsx\*(Aq, \*(Aqtemplate2.xlsx\*(Aq, ...);
\&   $self\->parse_template();
\&   
\&   # Add a worksheet, ... and anything else you would do with Excel::Writer::XLSX
\&   $worksheet = $workbook\->add_worksheet();
\&
\&   # Although Excel::Writer::XLSX says the workbook will automatically get 
\&   # closed during global destruction.  This wrapper around Excel::Writer::XLSX may
\&   # mess this up, and it is better to specifically close your workbook when you are done.
\&   $workbook\->close();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a companion to
Excel::Writer::XLSX <https://metacpan.org/release/Excel-Writer-XLSX>(\s-1EWX\s0), or
if you prefer, a wrapper to that module.  It uses \s-1EWX\s0 as a base class.  It opens
an existing spreadsheet file (.xlsx format), and also creates a new \s-1EWX\s0 object.
As it parses the template file(s), it calls \s-1EWX\s0 methods to re-create the template
contents in the \s-1EWX\s0 object.
.PP
When parsing is complete, the workbook object is left open for the calling perl
script to add additional content.
.PP
The purpose of this module is to separate the roles of content/presentation vs
programming in an Excel document, in much the same way that \s-1HTML\s0 templating
engines work.  A user who is knowledgeable in Excel can create an Excel file for
use as a template, without requiring the skill set of Perl or
Excel::Writer::XLSX. Conversely, the Perl programmer who is creating dynamic
content does not need design skills to layout the presentation in the template.
.SH "WHAT IT CAN DO"
.IX Header "WHAT IT CAN DO"
.Vb 3
\&   Cell Values (strings, numbers, dates, ... )
\&   Cell Formulas
\&   Cell Hyperlinks
\&   
\&   Cell Formatting (borders, shading, fonts, font sizes, colors)
\&   
\&   Column Widths
\&   Row Widths
\&   
\&   Headers and Footers
.Ve
.PP
Simple template variables (via callback) See \*(L"template_callback\*(R"
.SH "WHAT IT CAN NOT DO"
.IX Header "WHAT IT CAN NOT DO"
.Vb 4
\&   Excel::Template::Excel can not modify Excel files in place!  It is not
\&   intended to.  Since the parser directly adds content to the EWX workbook object
\&   as the contents are parsed, both the template, and the output file must
\&   be open at the same time.  
\&   
\&   It may be possible to open the output file to a file handle, and 
\&   after parsing of the template is complete, write the contents of file
\&   over the template.  The author has not tried this.
\&   
\&   It is not the design of this module to faithfully re\-create the entire
\&   contents of the template file in the EWX output.  If you are using this
\&   module to rewrite Excel files, you are on your own.
\&
\&   These items are completely dropped from the output file:
\&
\&   Images in the Sheet
\&   Images in Headers/Footers
\&   Charts
\&   Shapes
\&   Themes (gradients, fonts, fills, styles)
\&   macros
\&   modules (vba code)
\&
\&   And probably other things.  See the tests (t directory of the distribution) 
\&   for examples of what does work.
.Ve
.SH "SUBROUTINES AND METHODS"
.IX Header "SUBROUTINES AND METHODS"
.SS "_\|_podhead"
.IX Subsection "__podhead"
Dummy subroutine to allow me to hide this pod documentation when using code
folding in the editor.
.SS "new"
.IX Subsection "new"
Creates a new Excel::Template::XLSX object, and also creates a new
Excel::Writer::XLSX object. A workbook object is created for the output file.
.PP
Returns the Template object, and the workbook object.  Workbook object is also
available as \f(CW$self\fR\->{\s-1EWX\s0};  If the caller is only expecting a single
return value, then just the \f(CW$self\fR object is returned.
.SS "parse_template"
.IX Subsection "parse_template"
Parses common elements of the Spreadsheet, such as themes, styles, and strings.
These are stored in the main object ($self).
.PP
Finds each sheet in the workbook, and initiates parsing of each sheet.
.PP
Properties for the created workbook are set from the first template that has
properties.  Properties in subsequent workbooks are ignored.
.SS "template_callback"
.IX Subsection "template_callback"
Place holder method for a callback routine to modify the content of the template
before being written to the output spreadsheet.
.PP
This callback is activated for all shared string (both plain and rich text
strings), and also for header/footer text.
.PP
The callback is supplied with the two parameters: The object name (since this is
a method), and the text to be processed. This is passed as a reference to single
scalar.
.PP
This method is called numerous times during processing (e.g. once for each
unique string in the spreadsheet, so the user is advised to keep it efficient.
.PP
This callback approach does not force any particular templating system on the
user.  They are free to use whatever system they choose.
.PP
Note that templating can only do simple scalars.  Complex templating (if\-then\-
else, loops, etc) do not make sense in that the callback is supplied with the
contents of a single cell.  Having said that, remember that the full power of
Excel::Writer::XLSX is available to the user to modify the template after it is
processed.
.PP
.Vb 2
\&   # A snippet of code to replace [% template %] in the 
\&   # template spreadsheet with \*(AqOutput\*(Aq
\&
\&   my ($self, $wbk) = Excel::Template::XLSX\->new($output_xlsx, $template_xlsx);
\&
\&   use Template::Tiny;
\&   my $template = Template::Tiny\->new( TRIM => 1 );
\&   $self\->{template_callback} = sub {
\&      my ($self, $textref) = @_;
\&      $template\->process($textref, { template => \*(AqOutput\*(Aq }, $textref );
\&   };
\&
\&   $self\->parse_template();
.Ve
.SS "_apply_tint"
.IX Subsection "_apply_tint"
Applies tinting to a color object, if the tint attribute is encountered in
parsing.
.SS "_base_path_for"
.IX Subsection "_base_path_for"
Manipulates the path to a member in the zip file, to find the associated
rels file.
.SS "_cell_to_row_col"
.IX Subsection "_cell_to_row_col"
Converts an A1 style cell reference to a row and column index.
.SS "_color"
.IX Subsection "_color"
Parses color element (rgb, index, theme, and tint)
.SS "_extract_files"
.IX Subsection "_extract_files"
Called by parse_template to fetch the xml strings from the zip file.  \s-1XML\s0
strings are parsed, except for worksheets.  Individual worksheets are
parsed separately.
.SS "_parse_alignment"
.IX Subsection "_parse_alignment"
Parses horizontal and vertical cell alignments in a sheet.
.SS "_parse_borders"
.IX Subsection "_parse_borders"
Parses cell border and diagonal border styles.  Called from _parse_styles.
Returns an array of border styles, each one as a hash.
.SS "_parse_fills"
.IX Subsection "_parse_fills"
Parses styles for cell fills (pattern, foreground and background colors.
horizontal and horizontal and vertical cell alignments in a sheet.
.PP
Gradients are parsed, but since \s-1EWX\s0 does not support gradients, a
pattern is substituted.
.SS "_parse_fonts"
.IX Subsection "_parse_fonts"
Parses font information (font name, size, super/sub scripts, alignment
colors, underline, bold, italic, and strikeout attributes).
.SS "_parse_numbers"
.IX Subsection "_parse_numbers"
Parses styles for cell number formats (financial, decimal, exponential, date-time, ...)
.SS "_parse_protection"
.IX Subsection "_parse_protection"
Parses locked and hidden attributes for a cell. These are only
useful if the worksheet is locked.
.PP
This module does not lock the workbook or the worksheet.
.SS "_parse_shared_strings"
.IX Subsection "_parse_shared_strings"
Parses the shared strings file.  Excel does not directly store
string values with the cell, but stores an index into the shared
strings table instead, to save memory, if a string value is 
referenced more than once.  Shared strings also contain
formatting if multiple formats are applied within a cell (See
write_rich_string in \s-1EWX.\s0
.SS "_parse_sheet"
.IX Subsection "_parse_sheet"
Parses an individual worksheet.  This is done in two passes.
See _parse_sheet_pass1 and _parse_sheet_pass2 for what elements are
parsed.  This is necessary because the parse order of XML::Twig callbacks
are in the wrong order for some sheet information (header/footer information,
hyperlinks, and merged cells).
.SS "_parse_sheet_pass1"
.IX Subsection "_parse_sheet_pass1"
Parses some elements in a worksheet ( pageMargins, headerFooter,
hyperlinks, pageSetup, Merged Cells, Sheet Formatting Row and Column
heights, Sheet selection, and Tab Color)
.SS "_parse_sheet_pass2"
.IX Subsection "_parse_sheet_pass2"
Parses cell contents (first by row, then by column).  Cells can contain
inline strings, string references, direct string values, formulas,
and hyperlinks.  Each cell may also contain formatting information.  
The format is in an index to formatting for borders, shading, alignment,
font, and number formats.
.SS "_parse_styles"
.IX Subsection "_parse_styles"
Parses style information.  
Parses number formats directly.  Calls subroutines to parse 
fonts, fills, and borders, alignment, and protection.
.PP
Finally, parses Cell Xfs elements to Combine fonts, borders, number formats,
alignment, patterns, into a single format specification.
.PP
Calls \s-1EWX\s0 add_formats to create a format, and stores the format information
in a \s-1FORMAT\s0 array within the object.
.SS "_parse_themes"
.IX Subsection "_parse_themes"
Parses theme information.  Some color settings are referenced by an 
index to the theme.
.SS "_parse_xml"
.IX Subsection "_parse_xml"
Low level subroutine to parse an entire member of a zip file. Used
for small files, such as xxx.xml.rels, where the entire file is parsed.
.PP
For larger files, XML::Twig::twig_handlers are used.
.SS "_rels_for"
.IX Subsection "_rels_for"
Returns the .rels file name for a sibling workbook or worksheet.
.SS "zzpodtail"
.IX Subsection "zzpodtail"
Dummy subroutine to allow me to hide pod documentation when using code
folding in the editor.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
.Vb 1
\&   Install with CPAN
\&   
\&      cpan Excel::Template::XLSX
\&
\&   or, use the standard Unix style installation.
\& 
\&   Unzip and untar the module as follows:
\& 
\&      tar \-zxvf Excel::Template::XLSX\-nnn.tar.gz
\& 
\&   The module can be installed using the standard Perl procedure:
\& 
\&      perl Makefile.PL
\&      make
\&      make test
\&      make install    # As sudo/root
.Ve
.SH "BUGS"
.IX Header "BUGS"
.IP "Large spreadsheets may cause segfaults on perl 5.14 and earlier" 4
.IX Item "Large spreadsheets may cause segfaults on perl 5.14 and earlier"
This module internally uses XML::Twig, which makes it potentially subject to
Bug #71636 for XML-Twig: Segfault with medium-sized document <https://rt.cpan.org/Public/Bug/Display.html?id=71636>
on perl versions 5.14 and below (the underlying bug with perl weak references
was fixed in perl 5.15.5). The larger and more complex the spreadsheet, the
more likely to be affected, but the actual size at which it segfaults is
platform dependent. On a 64\-bit perl with 7.6gb memory, it was seen on
spreadsheets about 300mb and above. You can work around this adding
\&\f(CWXML::Twig::_set_weakrefs(0)\fR to your code before parsing the spreadsheet,
although this may have other consequences such as memory leaks.
.Sp
Please report any bugs to GitHub Issues at
<https://github.com/davidsclarke/Excel\-Template\-XLSX/issues>.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find this documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Excel::Template::XLSX
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
MetaCPAN
.Sp
<https://metacpan.org/release/Excel\-Template\-XLSX>
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Excel\-Template\-XLSX>
.IP "\(bu" 4
Github
.Sp
<https://github.com/davidsclarke/Excel\-Template\-XLSX>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Excel\-Template\-XLSX>
.SH "DEBUGGING TIPS"
.IX Header "DEBUGGING TIPS"
Using the Perl debugger gets complicated because of XML::Twig.  The objects
created by XML::Twig are \s-1HUGE.\s0  Also,  stepping through the code often results
in exceeding a stack depth of >100.  The author found it helpful to take
advantage of the \fBsimplify()\fR method in XML::Twig when using the debugger 'x' 
command to examine variables.
.PP
.Vb 1
\&   x $node\->simplify()
.Ve
.PP
Also, it is helpful to use the 'c' command to jump over XML::Twig subroutine calls and callbacks.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to the author.
.SH "TO DO"
.IX Header "TO DO"
.Vb 3
\&   Worksheet Activation
\&   Table Formatting/Styles
\&   Calculation Mode
.Ve
.SH "REPOSITORY"
.IX Header "REPOSITORY"
The Excel::Template::XLSX source code is hosted on github:
<http://github.com/davidsclarke/Excel\-Template\-xlsx>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\&   Excel::Writer::XLSX
\&   
\&   This module does not provide much documentation on the capabilites of methods
\&   for creating Excel content.  The documentation provided with EWX is excellent,
\&   and also has numerous examples included.
\&
\&   Spreadsheet::ParseXLSX
\&   
\&   Although this module does not use Spreadsheet::ParseXLSX, the parsing and 
\&   comments regarding issues involved with parsing spreadsheets came from this module.
\&
\&   XML::Twig and Archive::Zip
\&   
\&   Excel .xlsx files are zippped .xml files.  These two modules are used to 
\&   unzip the .xlsx file, extract the members, and parse the relative portions
\&   of the .xml files inside.
.Ve
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
This module leverages the methods in Excel::Writer::XLSX <https://metacpan.org/release/Excel-Writer-XLSX>, maintained by John McNamara <https://metacpan.org/author/JMCNAMARA>
to recreate the template.
.PP
The parser was developed using Spreadsheet::ParseXLSX <https://metacpan.org/release/Spreadsheet-ParseXLSX> as a starting point, maintained by Jesse Luehrs <https://metacpan.org/author/DOY>. 
This parser calls methods in \s-1EWX\s0 directly when a token is resolved rather than building
up an object representing the parsed content.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Either the Perl Artistic Licence <http://dev.perl.org/licenses/artistic.html>
or the \s-1GPL\s0 <http://www.opensource.org/licenses/gpl\-license.php>.
.PP
\&\s-1AUTHOR\s0
.PP
.Vb 1
\&   David Clarke dclarke@cpan.org
.Ve
