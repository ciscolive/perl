.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::IPv6OptionSpace 3"
.TH Infoblox::DHCP::IPv6OptionSpace 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::IPv6OptionSpace \- DHCP IPv6 OptionSpace object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An Option Space defines a namespace in which vendor options can be defined. This object is for an IPv6 option space. To define a specific vendor option space, add an option space to \s-1DHCP.\s0
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 5
\& my $ipv6os = Infoblox::DHCP::IPv6OptionSpace\->new(
\&       name               => $string, #Required
\&       enterprise_number  => $num,    #Required, if this is a vendor option space.  It is optional otherwise.
\&       comment            => $string, #Optional, default is undefined
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that can be applied to a \s-1DHCP\s0 IPv6 OptionSpace object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP\s0 IPv6 OptionSpace object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Construct a DHCP IPV6 OptionSpace object
\& my $ipv6os = Infoblox::DHCP::IPv6OptionSpace\->new(
\&       name => "infospace",
\&       comment => "some comment",
\&       enterprise_number => 123,
\& );
\& #Submit for addition
\& my $response = $session\->add($ipv6os)
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP IPv6 OptionSpace object:
\&
\&  name     \- Required. Option space name in string format.
\&  comment  \- Optional. Option space comment.
\&  enterprise_number \- Optional. Enterprise number.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get DHCP IPv6 OptionSpace object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::IPv6OptionSpace",
\&     name   => "infospace",
\&     enterprise_number => 123,
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 IPv6 OptionSpace object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the name.
\& $ipv6os\->name("info_space");
\& #Submit modification
\& my $response = $session\->modify( $ipv6os );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1DHCP\s0 IPv6 OptionSpace object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR to retrieve the specific \s-1DHCP\s0 IPv6 OptionSpace object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get DHCP IPv6 OptionSpace object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::IPv6OptionSpace",
\&     name   => "info_space",
\&     enterprise_number => 123,
\& );
\& #Find the desired object from the retrieved list.
\& my $desired_option_space = $retrieved_objs[0];
\& #Submit for removal
\& my $response = $session\->remove( $desired_option_space );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP IPv6 OptionSpace object:
\&
\&  name     \- Optional. Option space name in string format.
\&  comment  \- Optional. Option space comment (regular expression).
\&  enterprise_number \- Optional. Enterprise number.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Get DHCP IPv6 OptionSpace object through the session
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DHCP::IPv6OptionSpace",
\&     comment => ".*comm.*"
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can used to set and retrieve the attribute values of a \s-1DHCP\s0 IPv6 OptionSpace object.
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve name of IPv6 option space object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired name in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If parameter is specified, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If parameter is not specified, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $ipv6os\->name();
\& #Modify name
\& $ipv6os\->name("info_space");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a comment about the IPv6 option space object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If the parameter is specified, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If the parameter is not specified, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $ipv6os\->comment();
\& #Modify comment
\& $ipv6os\->comment("my comment");
.Ve
.RE
.RS 4
.RE
.SS "enterprise_number( )"
.IX Subsection "enterprise_number( )"
.RS 4
Use this method to set or retrieve the enterprise number for the IPv6 option space object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An unsigned integer that represents the enterprise number.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If the parameter is specified, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If the parameter is not specified, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enterprise_number
\& my $enterprise_number = $ipv6os\->enterprise_number();
\& #Modify enterprise_number
\& $ipv6os\->enterprise_number(345);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an IPv6OptionSpace object, such as get, add, modify and remove. Also sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 IPv6OptionSpace object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create an IPv6OptionSpace object\fR
.PP
.Vb 3
\& my $ipv6os = Infoblox::DHCP::IPv6OptionSpace\->new (
\&        "name" => "infospace"
\& );
\&
\& unless($ipv6os) {
\&      die("Construct IPv6 option_space filter failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "IPv6OptionSpace object created successfully\en";
\&
\& #Verify if the DHCP IPv6OptionSpace exists in the Infoblox appliance
\& my $object = $session\->get(
\&        object => "Infoblox::DHCP::IPv6OptionSpace",
\&        name   => "infospace"
\&        enterprise_number => 123,
\& );
\& unless ($object) {
\&    print "IPv6 option space does not exist on server, safe to add the option_space\en";
\&    $session\->add($ipv6os)
\&       or die("Add IPv6 option space failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "DHCP IPv6 OptionSpace added successfully\en";
.Ve
.PP
\&\fB#Get and Modify an IPv6OptionSpace object\fR
.PP
.Vb 11
\& #Get IPv6OptionSpace object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::IPv6OptionSpace",
\&     name   => "infospace"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get IPv6OptionSpace object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get IPv6OptionSpace object found at least 1 matching entry\en";
\&
\& #Modify name of the obtained IPv6OptionSpace object
\& $object\->name("info_space");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify IPv6OptionSpace object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "IPv6OptionSpace object modified successfully \en";
.Ve
.PP
\&\fB#Remove an IPv6OptionSpace object\fR
.PP
.Vb 11
\& #Get IPv6OptionSpace object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::IPv6OptionSpace",
\&     name   => "info_space"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get IPv6OptionSpace object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get IPv6OptionSpace object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove IPv6OptionSpace object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "IPv6OptionSpace object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DHCP::IPv6OptionDefinition,Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
