.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::EtherLike 3"
.TH SNMP::Info::EtherLike 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::EtherLike \- SNMP Interface to SNMP ETHERLIKE\-MIB RFC 1398
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Baker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& my $el = new SNMP::Info (
\&                             AutoSpecify => 1,
\&                             Debug       => 1,
\&                             DestHost    => \*(Aqrouter\*(Aq,
\&                             Community   => \*(Aqpublic\*(Aq,
\&                             Version     => 2
\&                           );
\&
\& my $class = $el\->class();
\& print " Using device sub class : $class\en";
\&
\& # Find the duplex setting for a port on a device that implements
\& # ETHERLIKE\-MIB
\& my $interfaces = $el\->interfaces();
\& my $el_index   = $el\->el_index();
\& my $el_duplex  = $el\->el_duplex();
\&
\& foreach my $el_port (keys %$el_duplex){
\&    my $duplex = $el_duplex\->{$el_port};
\&    my $iid    = $el_index\->{$el_port};
\&    my $port   = $interfaces\->{$iid};
\&
\&    print "PORT:$port set to duplex:$duplex\en";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SNMP::Info::EtherLike is a subclass of SNMP::Info that supplies
access to the \fIETHERLIKE-MIB\fR used by some Layer 3 Devices such as
Cisco routers.
.PP
See \s-1RFC 1398\s0 for more details.
.PP
Use or create a subclass of SNMP::Info that inherits this one.  Do not use
directly.
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
None.
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fIETHERLIKE-MIB\fR" 4
.IX Item "ETHERLIKE-MIB"
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar values from \s-1SNMP\s0
.IP "None" 4
.IX Item "None"
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.ie n .SS "\s-1ETHERLIKE STATS TABLE\s0 (""dot3StatsTable"")"
.el .SS "\s-1ETHERLIKE STATS TABLE\s0 (\f(CWdot3StatsTable\fP)"
.IX Subsection "ETHERLIKE STATS TABLE (dot3StatsTable)"
.ie n .IP "$el\->\fBel_index()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_index()\fR" 4
.IX Item "$el->el_index()"
Returns reference to hash. Indexes Stats Table to the interface index (iid).
.Sp
(\f(CW\*(C`dot3StatsIndex\*(C'\fR)
.ie n .IP "$el\->\fBel_duplex()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_duplex()\fR" 4
.IX Item "$el->el_duplex()"
Returns reference to hash.  Indexes Stats Table to Duplex Status of port.
.Sp
(\f(CW\*(C`dot3StatsDuplexStatus\*(C'\fR)
.ie n .IP "$el\->\fBel_chipset()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_chipset()\fR" 4
.IX Item "$el->el_chipset()"
(\f(CW\*(C`dot3StatsEtherChipSet\*(C'\fR)
.ie n .IP "$el\->\fBel_coll_excess()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_coll_excess()\fR" 4
.IX Item "$el->el_coll_excess()"
(\f(CW\*(C`dot3StatsExcessiveCollisions\*(C'\fR)
.ie n .IP "$el\->\fBel_coll_late()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_coll_late()\fR" 4
.IX Item "$el->el_coll_late()"
(\f(CW\*(C`dot3StatsLateCollisions\*(C'\fR)
.ie n .IP "$el\->\fBel_coll_mult()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_coll_mult()\fR" 4
.IX Item "$el->el_coll_mult()"
(\f(CW\*(C`dot3StatsMultipleCollisionFrames\*(C'\fR)
.ie n .IP "$el\->\fBel_coll_single()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_coll_single()\fR" 4
.IX Item "$el->el_coll_single()"
(\f(CW\*(C`dot3StatsSingleCollisionFrames\*(C'\fR)
.ie n .IP "$el\->\fBel_error_alignment()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_error_alignment()\fR" 4
.IX Item "$el->el_error_alignment()"
(\f(CW\*(C`dot3StatsAlignmentErrors\*(C'\fR)
.ie n .IP "$el\->\fBel_error_fcs()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_error_fcs()\fR" 4
.IX Item "$el->el_error_fcs()"
(\f(CW\*(C`dot3StatsFCSErrors\*(C'\fR)
.ie n .IP "$el\->\fBel_error_cs()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_error_cs()\fR" 4
.IX Item "$el->el_error_cs()"
(\f(CW\*(C`dot3StatsCarrierSenseErrors\*(C'\fR)
.ie n .IP "$el\->\fBel_error_frame()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_error_frame()\fR" 4
.IX Item "$el->el_error_frame()"
(\f(CW\*(C`dot3StatsFrameTooLongs\*(C'\fR)
.ie n .IP "$el\->\fBel_error_mac_rec()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_error_mac_rec()\fR" 4
.IX Item "$el->el_error_mac_rec()"
(\f(CW\*(C`dot3StatsInternalMacReceiveErrors\*(C'\fR)
.ie n .IP "$el\->\fBel_error_mac_xmit()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_error_mac_xmit()\fR" 4
.IX Item "$el->el_error_mac_xmit()"
(\f(CW\*(C`dot3StatsInternalMacTransmitErrors\*(C'\fR)
.ie n .IP "$el\->\fBel_error_sqe()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_error_sqe()\fR" 4
.IX Item "$el->el_error_sqe()"
(\f(CW\*(C`dot3StatsSQETestErrors\*(C'\fR)
.ie n .IP "$el\->\fBel_error_symbol()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_error_symbol()\fR" 4
.IX Item "$el->el_error_symbol()"
(\f(CW\*(C`dot3StatsSymbolErrors\*(C'\fR)
.ie n .IP "$el\->\fBel_xmit_defer()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_xmit_defer()\fR" 4
.IX Item "$el->el_xmit_defer()"
(\f(CW\*(C`dot3StatsDeferredTransmissions\*(C'\fR)
.ie n .IP "$el\->\fBel_coll_count()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_coll_count()\fR" 4
.IX Item "$el->el_coll_count()"
(\f(CW\*(C`dot3CollCount\*(C'\fR)
.ie n .IP "$el\->\fBel_coll_freq()\fR" 4
.el .IP "\f(CW$el\fR\->\fBel_coll_freq()\fR" 4
.IX Item "$el->el_coll_freq()"
(\f(CW\*(C`dot3CollFrequencies\*(C'\fR)
.SH "Data Munging Callback Subroutines"
.IX Header "Data Munging Callback Subroutines"
.ie n .IP "$el\->\fBmunge_el_duplex()\fR" 4
.el .IP "\f(CW$el\fR\->\fBmunge_el_duplex()\fR" 4
.IX Item "$el->munge_el_duplex()"
Removes 'Duplex' from the end of a string.
