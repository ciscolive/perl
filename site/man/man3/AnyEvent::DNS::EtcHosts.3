.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AnyEvent::DNS::EtcHosts 3"
.TH AnyEvent::DNS::EtcHosts 3 "2020-09-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AnyEvent::DNS::EtcHosts \- Use /etc/hosts before DNS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use AnyEvent::DNS::EtcHosts;
\&
\&  use AnyEvent::DNS;
\&  my $cv = AE::cv;
\&  AnyEvent::DNS::any \*(Aqexample.com\*(Aq, sub {
\&      say foreach map { $_\->[4] } grep { $_\->[1] =~ /^(a|aaaa)$/ } @_;
\&      $cv\->send;
\&  };
\&
\&  use AnyEvent::Socket;
\&  my $cv = AE::cv;
\&  AnyEvent::Socket::resolve_sockaddr $domain, $service, $proto, $family, undef, sub {
\&      say foreach map { format_address((AnyEvent::Socket::unpack_sockaddr($_\->[3]))[1]) } @_;
\&      $cv\->send;
\&  };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
AnyEvent::DNS::EtcHosts changes AnyEvent::DNS behavior. The \fI/etc/hosts\fR file
is searched before \s-1DNS,\s0 so it is possible to override \s-1DNS\s0 entries.
.PP
The \s-1DNS\s0 lookups are emulated. This resolver returns the standard \s-1DNS\s0 reply
based on \fI/etc/hosts\fR file rather than real \s-1DNS.\s0
.PP
You can choose different file by changing \f(CW\*(C`PERL_ANYEVENT_HOSTS\*(C'\fR environment
variable.
.PP
This module also disables original AnyEvent::Socket's helper function which
reads \fI/etc/hosts\fR file after \s-1DNS\s0 entry was not found. It prevents to read
this file twice.
.PP
The AnyEvent::Socket resolver searches IPv4 and IPv6 addresses separately.
If you don't want to check the addresses in \s-1DNS,\s0 both IPv4 and IPv6 addresses
should be placed in \fI/etc/hosts\fR or the protocol family should be set
explicitly for \f(CW\*(C`resolve_sockaddr\*(C'\fR function.
.SH "IMPORTS"
.IX Header "IMPORTS"
.ie n .SS "use AnyEvent::DNS::EtcHosts %args;"
.el .SS "use AnyEvent::DNS::EtcHosts \f(CW%args\fP;"
.IX Subsection "use AnyEvent::DNS::EtcHosts %args;"
.Vb 1
\&  use AnyEvent::DNS::EtcHosts server => \*(Aq8.8.8.8\*(Aq;
\&
\&  $ perl \-MAnyEvent::DNS::EtcHosts script.pl
.Ve
.PP
Enables this module globally. Additional arguments will be passed to
AnyEvent::DNS constructor.
.SS "no AnyEvent::DNS::EtcHosts;"
.IX Subsection "no AnyEvent::DNS::EtcHosts;"
Disables this module globally.
.SH "METHODS"
.IX Header "METHODS"
.SS "register"
.IX Subsection "register"
.Vb 1
\&  require AnyEvent::DNS::EtcHosts;
\&
\&  $guard = AnyEvent::DNS::EtcHosts\->register(%args);
\&
\&  undef $guard;
.Ve
.PP
Enables this module in lexical scope. The module will be disabled out of
scope. Additional arguments will be passed to AnyEvent::DNS constructor.
.PP
If you want to use AnyEvent::DNS::EtcHosts in lexical scope only, you should
use \f(CW\*(C`require\*(C'\fR rather than \f(CW\*(C`use\*(C'\fR keyword, because \f(CW\*(C`import\*(C'\fR method enables
AnyEvent::DNS::EtcHosts globally.
.SS "request"
.IX Subsection "request"
.Vb 1
\&  $resolver\->request($req, $cb\->($res))
.Ve
.PP
This is wrapper for AnyEvent::DNS\->request method.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
AnyEvent::DNS,
AnyEvent::Socket.
.SH "BUGS"
.IX Header "BUGS"
This module might be incompatible with further versions of AnyEvent module.
.PP
If you find the bug or want to implement new features, please report it at
<https://github.com/dex4er/perl\-AnyEvent\-DNS\-EtcHosts/issues>
.PP
The code repository is available at
<http://github.com/dex4er/perl\-AnyEvent\-DNS\-EtcHosts>
.SH "AUTHORS"
.IX Header "AUTHORS"
Piotr Roszatycki <dexter@cpan.org>
.PP
Helper functions taken from AnyEvent::Socket 7.05 by
Marc Lehmann <schmorp@schmorp.de>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2013\-2014 Piotr Roszatycki <dexter@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as perl itself.
.PP
See <http://dev.perl.org/licenses/artistic.html>
