.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::CiscoConfig 3"
.TH SNMP::Info::CiscoConfig 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::CiscoConfig \- SNMP Interface to Cisco Configuration Files
.SH "AUTHOR"
.IX Header "AUTHOR"
Justin Hunter, Eric Miller
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    my $ciscoconfig = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\&    my $class = $ciscoconfig\->class();
\&    print " Using device sub class : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SNMP::Info::CiscoConfig is a subclass of SNMP::Info that provides an interface
to \fICISCO-CONFIG-COPY-MIB\fR, \fICISCO-FLASH-MIB\fR, and \fIOLD-CISCO-SYS-MIB\fR.
These MIBs facilitate the writing of configuration files.
.PP
Use or create a subclass of SNMP::Info that inherits this one.
Do not use directly.
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.RS 4
None.
.RE
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fICISCO-CONFIG-COPY-MIB\fR" 4
.IX Item "CISCO-CONFIG-COPY-MIB"
.PD 0
.IP "\fICISCO-FLASH-MIB\fR" 4
.IX Item "CISCO-FLASH-MIB"
.IP "\fIOLD-CISCO-SYS-MIB\fR" 4
.IX Item "OLD-CISCO-SYS-MIB"
.PD
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP\s0
.ie n .IP "$ciscoconfig\->\fBold_write_mem()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBold_write_mem()\fR" 4
.IX Item "$ciscoconfig->old_write_mem()"
(\f(CW\*(C`writeMem\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBold_write_net()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBold_write_net()\fR" 4
.IX Item "$ciscoconfig->old_write_net()"
(\f(CW\*(C`writeNet\*(C'\fR)
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.ie n .SS "Config Copy Request Table  (""ccCopyTable"")"
.el .SS "Config Copy Request Table  (\f(CWccCopyTable\fP)"
.IX Subsection "Config Copy Request Table (ccCopyTable)"
.ie n .IP "$ciscoconfig\->\fBconfig_protocol()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBconfig_protocol()\fR" 4
.IX Item "$ciscoconfig->config_protocol()"
(\f(CW\*(C`ccCopyProtocol\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBconfig_source_type()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBconfig_source_type()\fR" 4
.IX Item "$ciscoconfig->config_source_type()"
(\f(CW\*(C`ccCopySourceFileType\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBconfig_dest_type()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBconfig_dest_type()\fR" 4
.IX Item "$ciscoconfig->config_dest_type()"
(\f(CW\*(C`ccCopyDestFileType\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBconfig_server_addr()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBconfig_server_addr()\fR" 4
.IX Item "$ciscoconfig->config_server_addr()"
(\f(CW\*(C`ccCopyServerAddress\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBconfig_filename()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBconfig_filename()\fR" 4
.IX Item "$ciscoconfig->config_filename()"
(\f(CW\*(C`ccCopyFileName\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBconfig_username()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBconfig_username()\fR" 4
.IX Item "$ciscoconfig->config_username()"
(\f(CW\*(C`ccCopyUserName\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBconfig_password()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBconfig_password()\fR" 4
.IX Item "$ciscoconfig->config_password()"
(\f(CW\*(C`ccCopyUserPassword\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBconfig_notify_complete()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBconfig_notify_complete()\fR" 4
.IX Item "$ciscoconfig->config_notify_complete()"
(\f(CW\*(C`ccCopyNotificationOnCompletion\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBconfig_copy_state()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBconfig_copy_state()\fR" 4
.IX Item "$ciscoconfig->config_copy_state()"
(\f(CW\*(C`ccCopyState\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBconfig_copy_start_time()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBconfig_copy_start_time()\fR" 4
.IX Item "$ciscoconfig->config_copy_start_time()"
(\f(CW\*(C`ccCopyTimeStarted\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBconfig_copy_complete_time()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBconfig_copy_complete_time()\fR" 4
.IX Item "$ciscoconfig->config_copy_complete_time()"
(\f(CW\*(C`ccCopyTimeCompleted\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBconfig_fail_cause()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBconfig_fail_cause()\fR" 4
.IX Item "$ciscoconfig->config_fail_cause()"
(\f(CW\*(C`ccCopyFailCause\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBconfig_row_status()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBconfig_row_status()\fR" 4
.IX Item "$ciscoconfig->config_row_status()"
(\f(CW\*(C`ccCopyEntryRowStatus\*(C'\fR)
.ie n .SS "Flash Copy Table (""ciscoFlashCopyTable"")"
.el .SS "Flash Copy Table (\f(CWciscoFlashCopyTable\fP)"
.IX Subsection "Flash Copy Table (ciscoFlashCopyTable)"
Table of Flash copy operation entries.
.ie n .IP "$ciscoconfig\->\fBflash_copy_cmd()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBflash_copy_cmd()\fR" 4
.IX Item "$ciscoconfig->flash_copy_cmd()"
(\f(CW\*(C`ciscoFlashCopyCommand\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBflash_copy_protocol()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBflash_copy_protocol()\fR" 4
.IX Item "$ciscoconfig->flash_copy_protocol()"
(\f(CW\*(C`ciscoFlashCopyProtocol\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBflash_copy_address()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBflash_copy_address()\fR" 4
.IX Item "$ciscoconfig->flash_copy_address()"
(\f(CW\*(C`ciscoFlashCopyServerAddress\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBflash_copy_source()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBflash_copy_source()\fR" 4
.IX Item "$ciscoconfig->flash_copy_source()"
(\f(CW\*(C`ciscoFlashCopySourceName\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBflash_copy_dest()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBflash_copy_dest()\fR" 4
.IX Item "$ciscoconfig->flash_copy_dest()"
(\f(CW\*(C`ciscoFlashCopyDestinationName\*(C'\fR)
.ie n .IP "$ciscoconfig\->\fBflash_copy_row_status()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBflash_copy_row_status()\fR" 4
.IX Item "$ciscoconfig->flash_copy_row_status()"
(\f(CW\*(C`ciscoFlashCopyEntryStatus\*(C'\fR)
.SH "SET METHODS"
.IX Header "SET METHODS"
These are methods that provide \s-1SNMP\s0 set functionality for overridden methods
or provide a simpler interface to complex set operations.  See
\&\*(L"\s-1SETTING DATA VIA SNMP\*(R"\s0 in SNMP::Info for general information on set
operations.
.ie n .IP "$ciscoconfig\->copy_run_tftp (tftpserver, tftpfilename )" 4
.el .IP "\f(CW$ciscoconfig\fR\->copy_run_tftp (tftpserver, tftpfilename )" 4
.IX Item "$ciscoconfig->copy_run_tftp (tftpserver, tftpfilename )"
Store the running configuration on a \s-1TFTP\s0 server.  Equivalent to the \s-1CLI\s0
commands \*(L"copy running-config tftp\*(R" or \*(L"write net\*(R".
.Sp
This method attempts to use newer \*(L"copy running-config tftp\*(R" procedure first
and then the older \*(L"write net\*(R" procedure if that fails.  The newer procedure
is supported Cisco devices with the \fICISCO-CONFIG-COPY-MIB\fR available, Cisco
\&\s-1IOS\s0 software release 12.0 or on some devices as early as release 11.2P.  The
older procedure has been depreciated by Cisco and is utilized only to support
devices running older code revisions.
.Sp
.Vb 3
\& Example:
\& $ciscoconfig\->copy_run_tftp(\*(Aq1.2.3.4\*(Aq, \*(Aqmyconfig\*(Aq)
\&    or die "Couldn\*(Aqt save config. ",$ciscoconfig\->error(1);
.Ve
.ie n .IP "$ciscoconfig\->\fBcopy_run_start()\fR" 4
.el .IP "\f(CW$ciscoconfig\fR\->\fBcopy_run_start()\fR" 4
.IX Item "$ciscoconfig->copy_run_start()"
Copy the running configuration to the start up configuration.  Equivalent to
the \s-1CLI\s0 command \f(CW"copy running\-config startup\-config"\fR or \f(CW"write mem"\fR.
.Sp
This method attempts to use newer \f(CW"copy running\-config startup\-config"\fR
procedure first and then the older \f(CW"write mem"\fR procedure if that fails.
The newer procedure is supported Cisco devices with the
\&\fICISCO-CONFIG-COPY-MIB\fR available, Cisco \s-1IOS\s0 software release 12.0 or on
some devices as early as release 11.2P.  The older procedure has been
depreciated by Cisco and is utilized only to support devices running older
code revisions.
.Sp
.Vb 3
\& Example:
\& $ciscoconfig\->copy_run_start()
\&    or die "Couldn\*(Aqt save config. ",$ciscoconfig\->error(1);
.Ve
