.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Notifications 3"
.TH Mojolicious::Plugin::Notifications 3 "2020-03-31" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Notifications \- Frontend Event Notifications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  # Register the plugin and several engines
\&  plugin Notifications => {
\&    Humane => {
\&      base_class => \*(Aqlibnotify\*(Aq
\&    },
\&    JSON => 1
\&  };
\&
\&  # Add notification messages in controllers
\&  $c\->notify(warn => \*(AqSomething went wrong\*(Aq);
\&
\&  # Render notifications in templates ...
\&  %= notifications \*(Aqhumane\*(Aq;
\&
\&  # ... or in any other responses
\&  my $json = { text => \*(AqThat\e\*(Aqs my response\*(Aq };
\&  $c\->render(json => $c\->notifications(json => $json));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::Notifications supports several engines
to notify users on events. Notifications will survive multiple
redirects and can be served depending on response types.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::Notifications inherits all methods
from Mojolicious::Plugin and implements the following new one.
.SS "register"
.IX Subsection "register"
.Vb 6
\&  plugin Notifications => {
\&    Humane => {
\&      base_class => \*(Aqlibnotify\*(Aq
\&    },
\&    HTML => 1
\&  };
.Ve
.PP
Called when registering the plugin.
.PP
Accepts the registration of multiple engines for notification
responses. Configurations of the engines can be passed as hash
references. If no configuration should be passed, just pass a scalar value.
.PP
All parameters can be set either as part of the configuration
file with the key \f(CW\*(C`Notifications\*(C'\fR or on registration
(that can be overwritten by configuration).
.SH "HELPERS"
.IX Header "HELPERS"
.SS "notify"
.IX Subsection "notify"
.Vb 2
\&  $c\->notify(error => \*(AqSomething went wrong\*(Aq);
\&  $c\->notify(error => { timeout => 4000 } => \*(AqSomething went wrong\*(Aq);
.Ve
.PP
Notify the user about an event.
Expects an event type and a message as strings.
In case a notification engine supports further refinements,
these can be passed in a hash reference as a second parameter.
Event types are free and its treatment is up to the engines,
however notifications of the type \f(CW\*(C`debug\*(C'\fR will only be passed in
development mode.
.SS "notifications"
.IX Subsection "notifications"
.Vb 2
\&  %= notifications \*(Aqhumane\*(Aq => [qw/warn error success/];
\&  %= notifications \*(Aqhtml\*(Aq;
\&
\&  $c\->render(json => $c\->notifications(json => {
\&    text => \*(AqMy message\*(Aq
\&  }));
.Ve
.PP
Serve notifications to your user based on an engine.
The engine's name has to be passed as the first parameter
and the engine has to be registered in advance.
Notifications won't be invoked in case no notifications are
in the queue and no further engine parameters are passed.
Engine parameters are documented in the respective plugins.
.PP
The engine's name will be camelized. If no namespace is given,
the default namespace is \f(CW\*(C`Mojolicious::Plugin::Notifications\*(C'\fR.
.PP
In case no engine name is passed to the notifications method,
an assets object
is returned, bundling all registered engines' assets for use
in the AssetPack pipeline.
.PP
.Vb 7
\&  # Register Notifications plugin
\&  app\->plugin(\*(AqNotifications\*(Aq => {
\&    Humane => {
\&      base_class => \*(Aqlibnotify\*(Aq
\&    },
\&    Alertify => 1
\&  });
\&
\&  # Register AssetPack plugin
\&  app\->plugin(\*(AqAssetPack\*(Aq);
\&
\&  # Add notification assets to pipeline
\&  app\->asset(\*(AqmyApp.js\*(Aq  => \*(Aqmyscripts.coffee\*(Aq, app\->notifications\->scripts);
\&  app\->asset(\*(AqmyApp.css\*(Aq => \*(Aqmystyles.scss\*(Aq, app\->notifications\->styles);
\&
\&  %# In templates embed assets ...
\&  %= asset \*(AqmyApp.js\*(Aq
\&  %= asset \*(AqmyApp.css\*(Aq
\&
\&  %# ... and notifications (without assets)
\&  %= notifications \*(Aqhumane\*(Aq, \-no_include;
.Ve
.PP
\&\fBThe asset helper option is experimental and may change without warnings!\fR
.SH "ENGINES"
.IX Header "ENGINES"
Mojolicious::Plugin::Notifications bundles a couple of different
notification engines, but you can
easily write your own engine.
.SS "Bundled engines"
.IX Subsection "Bundled engines"
The following engines are bundled with this plugin:
\&\s-1HTML\s0,
\&\s-1JSON\s0,
Humane.js, and
Alertify.js,
.SH "HOOKS"
.IX Header "HOOKS"
.Vb 5
\&  app\->hook(
\&    before_notifications => sub {
\&      my ($c, $notes) = @_;
\&      $c\->app\->log(\*(AqServed \*(Aq . $notes\->size . \*(Aq notifications to \*(Aq . $c\->stash(\*(Aquser\*(Aq));
\&    });
.Ve
.PP
This hook is emitted before any notifications are rendered.
The hook passes the current controller object and a Mojo::Collection
object including all notes.
The hook is emitted no matter if notifications are pending.
.PP
\&\fBThis hook is \s-1EXPERIMENTAL\s0!\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
If you want to use \f(CW\*(C`Humane.js\*(C'\fR without Mojolicious::Plugin::Notifications,
you should have a look at Mojolicious::Plugin::Humane,
which was the original inspiration for this plugin.
.PP
Without my knowledge (due to a lack of research by myself),
Mojolicious::Plugin::BootstrapAlerts already established
a similar mechanism for notifications using Twitter Bootstrap
(not yet supported by this module).
Accidentally the helper names collide \- I'm sorry for that!
On the other hands, that makes these modules in most occasions
compatible.
.SH "HINTS"
.IX Header "HINTS"
As flash information is stored in the session, notifications may be lost
in case the session expires using \f(CW\*(C`session(expires => 1)\*(C'\fR.
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
.Vb 1
\&  https://github.com/Akron/Mojolicious\-Plugin\-Notifications
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2014\-2020, Nils Diewald <https://nils-diewald.de/>.
.PP
Part of the code was written at the
Mojoconf 2014 <http://www.mojoconf.org/mojo2014/> hackathon.
.PP
This program is free software, you can redistribute it
and/or modify it under the terms of the Artistic License version 2.0.
