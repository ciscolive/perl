.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Minion::Backend::mysql 3"
.TH Minion::Backend::mysql 3 "2020-08-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Minion::Backend::mysql
.SH "VERSION"
.IX Header "VERSION"
version 0.21
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojolicious::Lite;
\&
\&  plugin Minion => {mysql => \*(Aqmysql://user@127.0.0.1/minion_jobs\*(Aq};
\&
\&  # Slow task
\&  app\->minion\->add_task(poke_mojo => sub {
\&    my $job = shift;
\&    $job\->app\->ua\->get(\*(Aqmojolicio.us\*(Aq);
\&    $job\->app\->log\->debug(\*(AqWe have poked mojolicio.us for a visitor\*(Aq);
\&  });
\&
\&  # Perform job in a background worker process
\&  get \*(Aq/\*(Aq => sub {
\&    my $c = shift;
\&    $c\->minion\->enqueue(\*(Aqpoke_mojo\*(Aq);
\&    $c\->render(text => \*(AqWe will poke mojolicio.us for you soon.\*(Aq);
\&  };
\&
\&  app\->start;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Minion::Backend::mysql is a backend for Minion based on Mojo::mysql. All
necessary tables will be created automatically with a set of migrations named
\&\f(CW\*(C`minion\*(C'\fR. This backend requires at least v5.6.5 of MySQL.
.SH "NAME"
Minion::Backend::mysql \- MySQL backend
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Minion::Backend::mysql inherits all attributes from Minion::Backend and
implements the following new ones.
.SS "mysql"
.IX Subsection "mysql"
.Vb 2
\&  my $mysql   = $backend\->mysql;
\&  $backend = $backend\->mysql(Mojo::mysql\->new);
.Ve
.PP
Mojo::mysql object used to store all data.
.SH "METHODS"
.IX Header "METHODS"
Minion::Backend::mysql inherits all methods from Minion::Backend and
implements the following new ones.
.SS "dequeue"
.IX Subsection "dequeue"
.Vb 2
\&  my $job_info = $backend\->dequeue($worker_id, 0.5);
\&  my $job_info = $backend\->dequeue($worker_id, 0.5, {queues => [\*(Aqimportant\*(Aq]});
.Ve
.PP
Wait for job, dequeue it and transition from \f(CW\*(C`inactive\*(C'\fR to \f(CW\*(C`active\*(C'\fR state or
return \f(CW\*(C`undef\*(C'\fR if queues were empty.
.PP
These options are currently available:
.IP "queues" 2
.IX Item "queues"
.Vb 1
\&  queues => [\*(Aqimportant\*(Aq]
.Ve
.Sp
One or more queues to dequeue jobs from, defaults to \f(CW\*(C`default\*(C'\fR.
.PP
These fields are currently available:
.IP "args" 2
.IX Item "args"
.Vb 1
\&  args => [\*(Aqfoo\*(Aq, \*(Aqbar\*(Aq]
.Ve
.Sp
Job arguments.
.IP "id" 2
.IX Item "id"
.Vb 1
\&  id => \*(Aq10023\*(Aq
.Ve
.Sp
Job \s-1ID.\s0
.IP "retries" 2
.IX Item "retries"
.Vb 1
\&  retries => 3
.Ve
.Sp
Number of times job has been retried.
.IP "task" 2
.IX Item "task"
.Vb 1
\&  task => \*(Aqfoo\*(Aq
.Ve
.Sp
Task name.
.SS "enqueue"
.IX Subsection "enqueue"
.Vb 3
\&  my $job_id = $backend\->enqueue(\*(Aqfoo\*(Aq);
\&  my $job_id = $backend\->enqueue(foo => [@args]);
\&  my $job_id = $backend\->enqueue(foo => [@args] => {priority => 1});
.Ve
.PP
Enqueue a new job with \f(CW\*(C`inactive\*(C'\fR state.
.PP
These options are currently available:
.IP "delay" 2
.IX Item "delay"
.Vb 1
\&  delay => 10
.Ve
.Sp
Delay job for this many seconds (from now).
.IP "priority" 2
.IX Item "priority"
.Vb 1
\&  priority => 5
.Ve
.Sp
Job priority, defaults to \f(CW0\fR.
.IP "queue" 2
.IX Item "queue"
.Vb 1
\&  queue => \*(Aqimportant\*(Aq
.Ve
.Sp
Queue to put job in, defaults to \f(CW\*(C`default\*(C'\fR.
.SS "fail_job"
.IX Subsection "fail_job"
.Vb 4
\&  my $bool = $backend\->fail_job($job_id, $retries);
\&  my $bool = $backend\->fail_job($job_id, $retries, \*(AqSomething went wrong!\*(Aq);
\&  my $bool = $backend\->fail_job(
\&    $job_id, $retries, {msg => \*(AqSomething went wrong!\*(Aq});
.Ve
.PP
Transition from \f(CW\*(C`active\*(C'\fR to \f(CW\*(C`failed\*(C'\fR state.
.SS "finish_job"
.IX Subsection "finish_job"
.Vb 3
\&  my $bool = $backend\->finish_job($job_id, $retries);
\&  my $bool = $backend\->finish_job($job_id, $retries, \*(AqAll went well!\*(Aq);
\&  my $bool = $backend\->finish_job($job_id, $retries, {msg => \*(AqAll went well!\*(Aq});
.Ve
.PP
Transition from \f(CW\*(C`active\*(C'\fR to \f(CW\*(C`finished\*(C'\fR state.
.SS "job_info"
.IX Subsection "job_info"
.Vb 1
\&  my $job_info = $backend\->job_info($job_id);
.Ve
.PP
Get information about a job or return \f(CW\*(C`undef\*(C'\fR if job does not exist.
.PP
.Vb 2
\&  # Check job state
\&  my $state = $backend\->job_info($job_id)\->{state};
\&
\&  # Get job result
\&  my $result = $backend\->job_info($job_id)\->{result};
.Ve
.PP
These fields are currently available:
.IP "args" 2
.IX Item "args"
.Vb 1
\&  args => [\*(Aqfoo\*(Aq, \*(Aqbar\*(Aq]
.Ve
.Sp
Job arguments.
.IP "created" 2
.IX Item "created"
.Vb 1
\&  created => 784111777
.Ve
.Sp
Time job was created.
.IP "delayed" 2
.IX Item "delayed"
.Vb 1
\&  delayed => 784111777
.Ve
.Sp
Time job was delayed to.
.IP "finished" 2
.IX Item "finished"
.Vb 1
\&  finished => 784111777
.Ve
.Sp
Time job was finished.
.IP "priority" 2
.IX Item "priority"
.Vb 1
\&  priority => 3
.Ve
.Sp
Job priority.
.IP "queue" 2
.IX Item "queue"
.Vb 1
\&  queue => \*(Aqimportant\*(Aq
.Ve
.Sp
Queue name.
.IP "result" 2
.IX Item "result"
.Vb 1
\&  result => \*(AqAll went well!\*(Aq
.Ve
.Sp
Job result.
.IP "retried" 2
.IX Item "retried"
.Vb 1
\&  retried => 784111777
.Ve
.Sp
Time job has been retried.
.IP "retries" 2
.IX Item "retries"
.Vb 1
\&  retries => 3
.Ve
.Sp
Number of times job has been retried.
.IP "started" 2
.IX Item "started"
.Vb 1
\&  started => 784111777
.Ve
.Sp
Time job was started.
.IP "state" 2
.IX Item "state"
.Vb 1
\&  state => \*(Aqinactive\*(Aq
.Ve
.Sp
Current job state, usually \f(CW\*(C`active\*(C'\fR, \f(CW\*(C`failed\*(C'\fR, \f(CW\*(C`finished\*(C'\fR or \f(CW\*(C`inactive\*(C'\fR.
.IP "task" 2
.IX Item "task"
.Vb 1
\&  task => \*(Aqfoo\*(Aq
.Ve
.Sp
Task name.
.IP "worker" 2
.IX Item "worker"
.Vb 1
\&  worker => \*(Aq154\*(Aq
.Ve
.Sp
Id of worker that is processing the job.
.SS "list_jobs"
.IX Subsection "list_jobs"
.Vb 2
\&  my $batch = $backend\->list_jobs($offset, $limit);
\&  my $batch = $backend\->list_jobs($offset, $limit, {states => \*(Aqinactive\*(Aq});
.Ve
.PP
Returns the same information as \*(L"job_info\*(R" but in batches.
.PP
These options are currently available:
.IP "state" 2
.IX Item "state"
.Vb 1
\&  state => \*(Aqinactive\*(Aq
.Ve
.Sp
List only jobs in this state.
.IP "task" 2
.IX Item "task"
.Vb 1
\&  task => \*(Aqtest\*(Aq
.Ve
.Sp
List only jobs for this task.
.SS "list_workers"
.IX Subsection "list_workers"
.Vb 1
\&  my $batch = $backend\->list_workers($offset, $limit);
.Ve
.PP
Returns the same information as \*(L"worker_info\*(R" but in batches.
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $backend = Minion::Backend::mysql\->new(\*(Aqmysql://mysql@/test\*(Aq);
.Ve
.PP
Construct a new Minion::Backend::mysql object.
.SS "register_worker"
.IX Subsection "register_worker"
.Vb 2
\&  my $worker_id = $backend\->register_worker;
\&  my $worker_id = $backend\->register_worker($worker_id);
.Ve
.PP
Register worker or send heartbeat to show that this worker is still alive.
.SS "remove_job"
.IX Subsection "remove_job"
.Vb 1
\&  my $bool = $backend\->remove_job($job_id);
.Ve
.PP
Remove \f(CW\*(C`failed\*(C'\fR, \f(CW\*(C`finished\*(C'\fR or \f(CW\*(C`inactive\*(C'\fR job from queue.
.SS "repair"
.IX Subsection "repair"
.Vb 1
\&  $backend\->repair;
.Ve
.PP
Repair worker registry and job queue if necessary.
.SS "reset"
.IX Subsection "reset"
.Vb 1
\&  $backend\->reset;
.Ve
.PP
Reset job queue.
.SS "retry_job"
.IX Subsection "retry_job"
.Vb 2
\&  my $bool = $backend\->retry_job($job_id, $retries);
\&  my $bool = $backend\->retry_job($job_id, $retries, {delay => 10});
.Ve
.PP
Transition from \f(CW\*(C`failed\*(C'\fR or \f(CW\*(C`finished\*(C'\fR state back to \f(CW\*(C`inactive\*(C'\fR.
.PP
These options are currently available:
.IP "delay" 2
.IX Item "delay"
.Vb 1
\&  delay => 10
.Ve
.Sp
Delay job for this many seconds (from now).
.IP "parents" 2
.IX Item "parents"
.Vb 1
\&  parents => [$id1, $id2, $id3]
.Ve
.Sp
Jobs this job depends on.
.IP "priority" 2
.IX Item "priority"
.Vb 1
\&  priority => 5
.Ve
.Sp
Job priority.
.IP "queue" 2
.IX Item "queue"
.Vb 1
\&  queue => \*(Aqimportant\*(Aq
.Ve
.Sp
Queue to put job in.
.SS "stats"
.IX Subsection "stats"
.Vb 1
\&  my $stats = $backend\->stats;
.Ve
.PP
Get statistics for jobs and workers.
.SS "unregister_worker"
.IX Subsection "unregister_worker"
.Vb 1
\&  $backend\->unregister_worker($worker_id);
.Ve
.PP
Unregister worker.
.SS "worker_info"
.IX Subsection "worker_info"
.Vb 1
\&  my $worker_info = $backend\->worker_info($worker_id);
.Ve
.PP
Get information about a worker or return \f(CW\*(C`undef\*(C'\fR if worker does not exist.
.PP
.Vb 2
\&  # Check worker host
\&  my $host = $backend\->worker_info($worker_id)\->{host};
.Ve
.PP
These fields are currently available:
.IP "host" 2
.IX Item "host"
.Vb 1
\&  host => \*(Aqlocalhost\*(Aq
.Ve
.Sp
Worker host.
.IP "jobs" 2
.IX Item "jobs"
.Vb 1
\&  jobs => [\*(Aq10023\*(Aq, \*(Aq10024\*(Aq, \*(Aq10025\*(Aq, \*(Aq10029\*(Aq]
.Ve
.Sp
Ids of jobs the worker is currently processing.
.IP "notified" 2
.IX Item "notified"
.Vb 1
\&  notified => 784111777
.Ve
.Sp
Last time worker sent a heartbeat.
.IP "pid" 2
.IX Item "pid"
.Vb 1
\&  pid => 12345
.Ve
.Sp
Process id of worker.
.IP "started" 2
.IX Item "started"
.Vb 1
\&  started => 784111777
.Ve
.Sp
Time worker was started.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Minion, Mojolicious::Guides, <http://mojolicio.us>.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Brian Medley <bpmedley@cpan.org>
.IP "\(bu" 4
Doug Bell <preaction@cpan.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Alexander Nalobin <nalobin@reg.ru>
.IP "\(bu" 4
Dmitry Krylov <pentabion@gmail.com>
.IP "\(bu" 4
Jason A. Crome <jcrome@empoweredbenefits.com>
.IP "\(bu" 4
Larry Leszczynski <larryl@cpan.org>
.IP "\(bu" 4
Olaf Alders <olaf@wundersolutions.com>
.IP "\(bu" 4
Paul Cochrane <paul@liekut.de>
.IP "\(bu" 4
Zoffix Znet <cpan@zoffix.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2017 by Doug Bell and Brian Medley.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
