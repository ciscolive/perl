.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DTC::Topology::Rule 3"
.TH Infoblox::DTC::Topology::Rule 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DTC::Topology::Rule \- A DTC Topology Rule object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Topology Rule describes the behavior of a load balancer used for a matching condition contained in the rules for a '\s-1TOPOLOGY\s0' load balancing method.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 5
\& my $rule = Infoblox::DTC::Topology::Rule\->new(
\&    sources          => [$source1, $source2, ...], #Optional / default is undefined
\&    destination_type => \*(AqPOOL\*(Aq | \*(AqSERVER\*(Aq,         #Optional / default is undefined
\&    destination_link => $link_object               #Optional / default is undefined
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in a Session module that you can apply to a Topology Rule object. Note that to add a rule to the Infoblox appliance, you must add it to the existing Topology object. To remove a rule from the Infoblox appliance, you must remove it from the existing Topology.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attribute to get a specific object:
\&
\&  topology         \- Optional. A DTC Topology the rule belongs to.
\&  destination_type \- Optional. The type of the destination link.
\&  destination_link \- Optional. The destination link value.
\&  valid            \- Optional. The flag that indicates whether a rule is valid or not.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DTC::Topology::Rule\*(Aq,
\&     destination_type => \*(AqPOOL\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the comment
\& $rule\->comment(\*(Aqmodified_rule1\*(Aq);
\& #Submit modification
\& my $response = $session\->modify($rule);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attribute to get a specific object:
\&
\&  topology         \- Optional. A DTC Topology the rule belongs to.
\&  destination_type \- Optional. The type of the destination link.
\&  destination_link \- Optional. The destination link value.
\&  valid            \- Optional. The flag that indicates whether a rule is valid or not.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->search(
\&     object => \*(AqInfoblox::DTC::Topology::Rule\*(Aq,
\&     valid  => \*(Aqtrue\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of the object.
.SS "destination_link( )"
.IX Subsection "destination_link( )"
.RS 4
Use this method to set or retrieve a \s-1DTC\s0 Topology Rule destination link.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::DTC::Pool or Infoblox::DTC::Server object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get destination_link value
\& my $destination_link = $rule\->destination_link();
\&
\& #modify destination_link value
\& $rule\->destination_link($pool_link);
.Ve
.RE
.RS 4
.RE
.SS "destination_type( )"
.IX Subsection "destination_type( )"
.RS 4
Use this method to set or retrieve the destination type for a \s-1DTC\s0 Topology rule.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1POOL\s0' and '\s-1SERVER\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get destination_type value
\& my $destination_type = $rule\->destination_type();
\&
\& #modify destination_type value
\& $rule\->destination_type(\*(AqSERVER\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "sources( )"
.IX Subsection "sources( )"
.RS 4
Use this method to set or retrieve conditions for matching sources.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of Infoblox::DTC::Topology::Rule::Source objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get sources value
\& my @sources = $rule\->sources();
\&
\& #modify sources value
\& $rule\->sources([$source1, $source2]);
.Ve
.RE
.RS 4
.RE
.SS "topology( )"
.IX Subsection "topology( )"
.RS 4
Use this method to retrieve the \s-1DTC\s0 Topoloyg to which a rule belongs. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an partial Infoblox::DTC::Topology object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get sources value
\& my $topology = $rule\->topology();
.Ve
.RE
.RS 4
.RE
.SS "valid( )"
.IX Subsection "valid( )"
.RS 4
Use this method to retrieve the status of GeoIP labels. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns 'true' if GeoIP labels exist or 'false' if they do not.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get sources value
\& my $valid = $rule\->valid();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::DTC::Pool, Infoblox::DTC::Server, Infoblox::DTC::Topology::Rule::Source, Infoblox::DTC::Topology.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
