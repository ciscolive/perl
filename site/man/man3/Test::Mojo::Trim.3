.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::Mojo::Trim 3"
.TH Test::Mojo::Trim 3 "2016-07-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Mojo::Trim \- Trim strings for Test::Mojo
.SH "VERSION"
.IX Header "VERSION"
Version 0.1000, released 2016\-07\-22.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    use Mojo::Base \-strict;
\&    use Mojolicious::Lite;
\&    use Test::More;
\&    use Test::Mojo::Trim;
\&
\&    my $test = Test::Mojo::Trim\->new;
\&
\&    get \*(Aq/test_1\*(Aq;
\&
\&    my $compared_to = qq{ <div><h1>Header</h1><p>A paragraph.</p></div> };
\&
\&    $test\->get_ok(\*(Aq/test_1\*(Aq)\->status_is(200)\->trimmed_content_is($compared_to);
\&
\&    done_testing();
\&
\&    _\|_DATA_\|_
\&    @@ the_test.html.ep
\&    <div>
\&        <h1>Header</h1>
\&        <p>A paragraph.</p>
\&    </div>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test::Mojo::Trim is an extension to Test::Mojo, that adds an additional string comparison function.
.SH "METHODS"
.IX Header "METHODS"
Test::Mojo::Trim inherits all methods from Test::Mojo and implements the following new one.
.SS "trimmed_content_is"
.IX Subsection "trimmed_content_is"
.Vb 1
\&    $test\->get_ok(\*(Aq/test\*(Aq)\->trimmed_content_is(\*(Aq<html></html>\*(Aq);
.Ve
.PP
Removes all whitespace between tags from the two strings that are compared.
That is, if a > and < is separated only by whitespace, that whitespace is removed.
Any leading or trailing whitespace is also removed.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Test::Mojo
.IP "\(bu" 4
Test::Mojo::Most
.SH "SOURCE"
.IX Header "SOURCE"
<https://github.com/Csson/p5\-test\-mojo\-trim>
.SH "HOMEPAGE"
.IX Header "HOMEPAGE"
<https://metacpan.org/release/Test\-Mojo\-Trim>
.SH "AUTHOR"
.IX Header "AUTHOR"
Erik Carlsson <info@code301.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2016 by Erik Carlsson.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
