.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Directory::Diff 3"
.TH Directory::Diff 3 "2018-11-16" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Directory::Diff \- recursively find differences between similar directories
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Directory::Diff \*(Aqdirectory_diff\*(Aq;
\&    use FindBin \*(Aq$Bin\*(Aq;
\&    
\&    # Do a "diff" between "old_dir" and "new_dir"
\&    
\&    directory_diff ("$Bin/old_dir", "$Bin/new_dir", 
\&                    {diff => \e& diff,
\&                     dir1_only => \e& old_only});
\&    
\&    # User\-supplied callback for differing files
\&    
\&    sub diff
\&    {
\&        my ($data, $dir1, $dir2, $file) = @_;
\&        print "$dir1/$file is different from $dir2/$file.\en";
\&    }
\&    
\&    # User\-supplied callback for files only in one of the directories
\&    
\&    sub old_only
\&    {
\&        my ($data, $dir1, $file) = @_;
\&        print "$dir1/$file is only in the old directory.\en";
\&    }
.Ve
.PP
produces output
.PP
.Vb 2
\&    /usr/home/ben/projects/directory\-diff/examples/old_dir/old\-file is only in the old directory.
\&    /usr/home/ben/projects/directory\-diff/examples/old_dir/diff\-file is different from /usr/home/ben/projects/directory\-diff/examples/new_dir/diff\-file.
.Ve
.PP
(This example is included as \fIsynopsis.pl\fR <https://fastapi.metacpan.org/source/BKB/HTML-Make-0.08/examples/synopsis.pl> in the distribution.)
.SH "VERSION"
.IX Header "VERSION"
This documents Directory-Diff version 0.08
corresponding to git commit 80910e5ff3eaeb27ebbe432883b1798ab6dc6ebe <https://github.com/benkasminbullock/Directory-Diff/commit/80910e5ff3eaeb27ebbe432883b1798ab6dc6ebe> released on Sat Nov 17 06:38:54 2018 +0900.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Directory::Diff finds differences between two directories and all
their subdirectories, recursively. If it finds a file with the same
name in both directories, it uses File::Compare to find out whether
they are different. It is callback-based and takes actions only if
required.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
The main function of this module is \*(L"directory_diff\*(R". The other
functions listed here are helper functions, but these can be exported
on request.
.SS "directory_diff"
.IX Subsection "directory_diff"
.Vb 3
\&     directory_diff ("dir1", "dir2", 
\&                     {dir1_only => \e&dir1_only,
\&                      diff => \e& diff});
.Ve
.PP
Given two directories \fIdir1\fR and \fIdir2\fR, this calls back a
user-supplied routine for each of three cases:
.IP "A file is only in the first directory" 4
.IX Item "A file is only in the first directory"
In this case a callback specified by \f(CW\*(C`dir1_only\*(C'\fR is called once
.Sp
.Vb 1
\&     &{$third_arg\->{dir1_only}} ($third_arg\->{data}, "dir1", $file);
.Ve
.Sp
for each file \f(CW$file\fR which is in \fIdir1\fR but not in \fIdir2\fR,
including files in subdirectories.
.IP "A file is only in the second directory" 4
.IX Item "A file is only in the second directory"
In this case a callback specified by \f(CW\*(C`dir2_only\*(C'\fR is called once
.Sp
.Vb 1
\&     &{$third_arg\->{dir2_only}} ($third_arg\->{data}, "dir2", $file);
.Ve
.Sp
for each file \f(CW$file\fR which is in \fIdir2\fR but not in \fIdir1\fR,
including files in subdirectories.
.IP "A file with the same name but different contents is in both directories" 4
.IX Item "A file with the same name but different contents is in both directories"
In this case a callback specified by \f(CW\*(C`diff\*(C'\fR is called once
.Sp
.Vb 1
\&     &{$third_arg\->{diff}} ($third_arg\->{data}, "dir1", "dir2", $file);
.Ve
.Sp
for each file name \f(CW$file\fR which is in both \fIdir1\fR and in \fIdir2\fR,
including files in subdirectories.
.PP
The first argument to each of the callback functions is specified by
\&\f(CW\*(C`data\*(C'\fR. The second argument to \f(CW\*(C`dir1_only\*(C'\fR and \f(CW\*(C`dir2_only\*(C'\fR is the
directory's name. The third argument is the file name, which includes
the subdirectory part. The second and third arguments to \f(CW\*(C`diff\*(C'\fR are
the two directories, and the fourth argument is the file name
including the subdirectory part.
.PP
If the user does not supply a callback, no action is taken, even if a
file is found.
.PP
The routine does not return a meaningful value. It does not check the
return values of the callbacks. Therefore if it is necessary to stop
midway, the user must use something like \f(CW\*(C`eval { }\*(C'\fR and \f(CW\*(C`die\*(C'\fR.
.PP
A fourth argument, if set to any true value, causes directory_diff to
print messages about what it finds and what it does.
.SS "ls_dir"
.IX Subsection "ls_dir"
.Vb 1
\&     my %ls = ls_dir ("dir");
.Ve
.PP
\&\f(CW\*(C`ls_dir\*(C'\fR makes a hash containing a true value for each file and
directory which is found under the directory given as the first
argument.
.PP
If a second argument with a true value is set, it prints debugging
messages. For example
.PP
.Vb 1
\&     my %ls = ls_dir ("dir", 1);
.Ve
.SS "get_only"
.IX Subsection "get_only"
.Vb 1
\&     my %only = get_only (\e%dir1, \e%dir2);
.Ve
.PP
Given two hashes containing true values for each file or directory
under two directories, return a hash containing true values for the
files and directories which are in the first directory hash but not in
the second directory hash.
.PP
For example, if
.PP
.Vb 1
\&     %dir1 = ("file" => 1, "dir/" => 1, "dir/file" => 1);
.Ve
.PP
and
.PP
.Vb 1
\&     %dir2 = ("dir/" => 1, "dir2/" => 1);
.Ve
.PP
\&\f(CW\*(C`get_only\*(C'\fR returns
.PP
.Vb 1
\&     %only = ("file" => 1, "dir/file" => 1);
.Ve
.PP
A third parameter for debugging makes the module print messages
on what is found if set to a true value, for example,
.PP
.Vb 1
\&     my %only = get_only (\e%dir1, \e%dir2, 1);
.Ve
.SS "get_diff"
.IX Subsection "get_diff"
.Vb 1
\&     my %diff = get_diff ("dir1", \e%dir1_ls, "dir2", \e%dir2_ls);
.Ve
.PP
Get a list of files which are in both \f(CW\*(C`dir1\*(C'\fR and \f(CW\*(C`dir2\*(C'\fR, but which
are different. This uses File::Compare to test the files for
differences. It searches subdirectories. Usually the hashes
\&\f(CW%dir1_ls\fR and \f(CW%dir2_ls\fR are those output by \*(L"ls_dir\*(R".
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SS "\s-1CPAN\s0 modules"
.IX Subsection "CPAN modules"
.IP "File::DirCompare" 4
.IX Item "File::DirCompare"
This is similar to Directory::Diff.  Unlike Directory::Diff, it does
not descend into subdirectories which exist in one directory but not
the other.
.IP "File::Dircmp" 4
.IX Item "File::Dircmp"
This mimics the output of the Unix \f(CW\*(C`diff\*(C'\fR command.  Unlike
Directory::Diff, it does not descend into subdirectories which exist
in one directory but not the other.
.IP "Test::Dirs" 4
.IX Item "Test::Dirs"
.PD 0
.IP "Compare::Directory" 4
.IX Item "Compare::Directory"
.PD
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
This section lists Perl modules which this depends on, with a
rationale for why they are used.
.IP "Carp" 4
.IX Item "Carp"
\&\f(CW\*(C`croak\*(C'\fR and \f(CW\*(C`carp\*(C'\fR are used to report errors.
.IP "File::Compare" 4
.IX Item "File::Compare"
File::Compare is used to check whether two identically-named files are
different or not.
.ie n .IP """getcwd"" in Cwd" 4
.el .IP "``getcwd'' in Cwd" 4
.IX Item "getcwd in Cwd"
This is used to get the working directory of the module, since it
changes directory to the directory where the diff is performed.
.IP "File::Copy" 4
.IX Item "File::Copy"
See Directory::Diff::Copy.
.IP "File::Path" 4
.IX Item "File::Path"
See Directory::Diff::Copy.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
This section lists people who have contributed to the module.
.PP
Mohammad S. Anwar (\s-1MANWAR\s0) contributed fixes for broken tests.
.SH "MOTIVATION"
.IX Header "MOTIVATION"
This section discusses why I wrote the module and what I use it for.
.PP
The reason I wrote this module is because \f(CW\*(C`\`diff \-\-recursive\`\*(C'\fR
stops when it finds a subdirectory which is in one directory and not
the other, without descending into the subdirectory. For example, if
one has a file like \f(CW\*(C`dir1/subdir/file\*(C'\fR,
.PP
.Vb 1
\&     diff \-r dir1 dir2
.Ve
.PP
will tell you \*(L"Only in dir1: subdir\*(R" but it won't tell you anything
about the files under \*(L"subdir\*(R". The two Perl modules on \s-1CPAN,\s0
\&\*(L"File::Dircmp\*(R" and \*(L"File::DirCompare\*(R" both also stop processing
when subdirectories differ.
.PP
For my task, I needed to go down into the subdirectory and find all
the files which were in all the subdirectories, so I wrote this.
.PP
I've been using this module for updating web sites with a lot of pages
since 2009, to avoid repeatedly having to upload the entire
site's-worth of pages for each small change. The way I use this is as
follows. I keep a local copy of the uploaded web site in a directory
like \fIold-site\fR, and then rebuild all the pages in another directory
like \fInew-site\fR, then I use Directory::Diff::Copy to put the
changed files into yet another directory, like
\&\fIchanged-site-files\fR. Once the changed files are copied, then I tar,
gzip, and upload the directory of changed files, and untar it at the
web host, thus replacing only files which have changed. I also delete
the \fIold-site\fR directory and rename \fInew-site\fR to \fIold-site\fR at
this point in preparation for the next upload.
.PP
I'm currently using this for almost all the static content for the
following web sites: <http://www.sljfaq.org>,
<http://kanji.sljfaq.org>, and <http://www.lemoda.net>. I put this
module on github in about 2012 and on \s-1CPAN\s0 in 2016.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ben Bullock, <bkb@cpan.org>
.SH "COPYRIGHT & LICENCE"
.IX Header "COPYRIGHT & LICENCE"
This package and associated files are copyright (C) 
2009\-2018
Ben Bullock.
.PP
You can use, copy, modify and redistribute this package and associated
files under the Perl Artistic Licence or the \s-1GNU\s0 General Public
Licence.
