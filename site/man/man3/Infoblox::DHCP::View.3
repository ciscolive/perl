.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::View 3"
.TH Infoblox::DHCP::View 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::View \- DHCP Network View object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Network view provides the ability to manage multiple views of
\&\s-1IP\s0 address spaces from \s-1NIOS.\s0 These address spaces could be
overlapping or non-overlapping. When the network view is not
specified during a write operation, the objects are automatically
associated with the system-defined default network view.
.PP
A network view is a single routing domain, with its own networks and
shared networks. You can manage the networks in one network view
independently of the other network views.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 9
\&  my $network = Infoblox::DHCP::View\->new(
\&     name                        => $string,                                                           #Required
\&     comment                     => $string,                                                           #Optional / Default is undefined
\&     ddns_zone_primaries         => [$ddns1, $ddns2, ... ],                                            #Optional / Default is undefined
\&     mgm_private                 => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                                  #Optional / Default is \*(Aqfalse\*(Aq
\&     extensible_attributes       => { $string => $string|$num, $string => [ $string|$num, ...], ... }, #Optional / Default is undefined
\&     external_ddns_primaries     => [ $Nameserver1,$Nameserver2,...],                                  #Optional / Default is undefined
\&     internal_ddns_primaries     => [ $ForwardZone1,$ForwardZone2,...],                                #Optional / Default is undefined
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that can apply to a \s-1DHCP\s0 Network View object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a network view object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Construct an object
\& my $network_view = Infoblox::DHCP::View\->new(
\&        name => "netview",
\& );
\&
\& # Submit for adding network view
\& my $response = $session\->add( $network_view );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching network view objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP Network View object:
\&
\&  name                  \- Required. A name in string format.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  my  @result_array = $session\->get(
\&       object        => "Infoblox::DHCP::View" ,
\&       name          => "netview"
\&  );
\&
\& # get all DHCP view objects with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&    object => "Infoblox::DHCP::View",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a network object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify comment method.
\& $object\->comment("My modified comment");
\& # Submit modification
\& my $response = $session\->modify( $object );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Get the object under the same name
\& my  @result_array = $session\->get(
\&       object        => "Infoblox::DHCP::View" ,
\&       name          => "netview"
\&  );
\&
\& # find the desired object from the retrieved list.
\& my $desired_network_view = $result_array[0];
\&
\& # Submit for removal
\& my $response = $session\->remove( $desired_network_view );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for a \s-1DHCP\s0 Network View object in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DHCP Network View object:
\&
\&  name                  \- Required. A name in string format (regular expression).
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for DHCP Network View object with name \*(Aqnetview\*(Aq
\&     my @retrieved_objs = $session\->search(
\&       object       => "Infoblox::DHCP::Network",
\&       name         => "^netview\e$"
\&     );
\&
\& # search for DHCP views with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DHCP::View",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 Network View object
.SS "associated_dns_views( )"
.IX Subsection "associated_dns_views( )"
.RS 4
Use this method to retrieve the list of \s-1DNS\s0 views associated with this network view. This list is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns an array reference that contains Infoblox::DNS:View object(s).
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get associated_dns_views
\& my $associated_dns_views = $network_view\->associated_dns_views()
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to set or retrieve cloud \s-1API\s0 related information for the Infoblox::DHCP::View object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a Infoblox::Grid::CloudAPI::Info object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get cloud_info
\& my $cloud_info = $network_view\->cloud_info();
\& # Modify cloud_info
\& $network_view\->cloud_info($cloud_info_object);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment of a \s-1DHCP\s0 Network View object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter a descriptive comment for the network view in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get comment
\& my $comment = $network_view\->comment();
\& # Modify comment
\& $network_view\->comment("add a network view");
.Ve
.RE
.RS 4
.RE
.SS "ddns_zone_primaries( )"
.IX Subsection "ddns_zone_primaries( )"
.RS 4
Use this method to set or retrieve an ordered list of zone primaries that will receive \s-1DDNS\s0 updates.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A valid value is a reference to an array of Infoblox::DHCP::DDNS objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get the attribute value
\& $value = $network_view\->ddns_zone_primaries();
\& # Modify the attribute value
\& $network_view\->ddns_zone_primaries([$ddns]);
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 view object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $firstview\->extensible_attributes();
\& #Modify extensible attributes
\& $firstview\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "external_ddns_primaries( )"
.IX Subsection "external_ddns_primaries( )"
.RS 4
Use this method to set or retrieve the network view-level external_ddns_primaries value. This specifies the external zone that is updated dynamically. The \s-1DHCP\s0 server can send dynamic updates to a specified external name server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A valid value is an array reference that contains Infoblox::DNS::Nameserver object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get external_ddns_primaries
\& my $external_ddns_primaries = $network_view\->external_ddns_primaries();
\&
\& # Modify external_ddns_primaries
\& my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&        ddns_zone => "ns1.del.com",
\&        ipv4addr  => "11.11.11.11",
\&    );
\& my $nameserver2 = Infoblox::DNS::Nameserver\->new(
\&         ddns_zone => "3.2.1.in\-addr.arpa",
\&         ipv4addr  => "22.22.22.22",
\&    );
\& 
\& # Nameserver with TSIG security
\& my $nameserver3 = Infoblox::DNS::Nameserver\->new(
\&         ddns_zone     => \*(Aqgrid_level.local\*(Aq,
\&         ipv4addr      => \*(Aq10.102.30.122\*(Aq,
\&         TSIGalgorithm => \*(AqHMAC\-SHA256\*(Aq,
\&         TSIGname      => \*(Aqkk\*(Aq,
\&         TSIGkey       => \*(Aq+NPBBVYjoNC32hfj8vepUw==\*(Aq,
\& );
\&
\& # Nameserver with GSS\-TSIG security
\& my $nameserver4 = Infoblox::DNS::Nameserver\->new(
\&         ipv4addr               => \*(Aq10.102.30.122\*(Aq,
\&         gss_tsig_domain        => \*(AqAD\-31.LOCAL\*(Aq,
\&         ddns_zone              => \*(Aqgrid1_level.local\*(Aq,
\&         gss_tsig_dns_principal => \*(AqDNS/w8s232\-29.ad\-31.local@AD\-31.LOCAL\*(Aq 
\& );
\&
\& $network_view\->external_ddns_primaries([$nameserver1, $nameserver2, $nameserver3, $nameserver4]);
\&
\& # Clear external_ddns_primaries list
\& $network_view\->external_ddns_primaries([]);
.Ve
.RE
.RS 4
.RE
.SS "mgm_private( )"
.IX Subsection "mgm_private( )"
.RS 4
Use this method to set or retrieve the flag that controls whether the object should be synced to the \s-1MGM\s0 or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable synchronization of the managed Grid with the \s-1MGM\s0 or 'false' to forbid it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get mgm_private value
\& my $value = $object\->mgm_private();
\&
\& #Modify mgm_private value
\& $object\->mgm_private(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "\fBmodify_vrf_assignment()\fP"
.IX Subsection "modify_vrf_assignment()"
.RS 4
This method is used to assign (unassign) a list of the virtual networks (VRFs) to the network view.
.IP "\fBParameters\fR" 4
.IX Item "Parameters"
\&\s-1VRF\s0 membership modification mode: \s-1ASSIGN\s0 or \s-1UNASSIGN.\s0
.Sp
A valid list (array reference) that contains Infoblox::Grid::Member::Discovery::VRF object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns true on success operation, otherwise false.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get Network View 
\& my $default_view = $session\->get(object => \*(AqInfoblox::DHCP::View\*(Aq, name => \*(Aqdefault\*(Aq);
\& 
\& # Get Infoblox::Grid::Member::Discovery::VRF objects
\& my $vrf1 = $session\->get(object => \*(AqInfoblox::Grid::Member::Discovery::VRF\*(Aq, name => \*(AqVirtualNetworkMember1\*(Aq);
\& my $vrf2 = $session\->get(object => \*(AqInfoblox::Grid::Member::Discovery::VRF\*(Aq, name => \*(AqVirtualNetworkMember2\*(Aq);
\& 
\& # Assign a list of the VRFs to the Network View
\& my $assign_result = $default_view\->modify_vrf_assignment( 
\&        vrfs => [ $vrf1, $vrf2 ],
\&        mode => \*(AqASSIGN\*(Aq
\& );
\& 
\& # Unassign VRF from Network View
\& my $unassign_result = $default_view\->modify_vrf_assignment( 
\&        vrfs => [ $vrf2 ], 
\&        mode => \*(AqUNASSIGN\*(Aq
\& );
\& 
\& # Check of VRF assignment via Infoblox::Grid::Member::Discovery::VRF object
\& $vrf = $session\->get(object => \*(AqInfoblox::Grid::Member::Discovery::VRF\*(Aq, name => \*(AqVirtualNetworkMember1\*(Aq); 
\&
\& # Get current network view name associated with VRF
\& print $vrf\->network_view;
.Ve
.RE
.RS 4
.RE
.SS "internal_ddns_zones( )"
.IX Subsection "internal_ddns_zones( )"
.RS 4
Use this method to set or retrieve forward mapping zones which are being served in the grid. Only an authoritative zone can be assigned to this list. All other types of zones will generate an error.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A valid value is an array reference that contains Infoblox::DNS::Zone object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get internal_ddns_zones
\& my $internal_ddns_zones = $network_view\->internal_ddns_zones();
\&
\& # Modify internal_ddns_zones
\& my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&        name     => "ns1.del.com",
\&        ipv4addr => "11.11.11.11",
\&    );
\& my $nameserver2 = Infoblox::DNS::Nameserver\->new(
\&        name     => "test",
\&        ipv6addr => "2006::b671",
\&    );
\& my $zone1 = Infoblox::DNS::Zone\->new(
\&        name     => "test1.com",
\&        primary  => [$nameserver1],
\&        secondaries => [$nameserver2],
\&    );
\& my $zone2 = Infoblox::DNS::Zone\->new(
\&        name     => "test2.com",
\&    );
\& $network_view\->internal_ddns_zones([$zone1, $zone2]);
\&
\& # Clear internal_ddns_zones list
\& $network_view\->internal_ddns_zones([]);
.Ve
.RE
.RS 4
.RE
.SS "internal_updates_view( )"
.IX Subsection "internal_updates_view( )"
.RS 4
Use this method to specify or retrieve the internal updates \s-1DNS\s0 view value of a network view. When you enable the appliance to send updates to grid members, you must specify which \s-1DNS\s0 view receives the updates.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A valid value is an Infoblox::DNS::View object for internal dynamic updates.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& # Get internal_updates_view
\& my $internal_updates_view = $network_view\->internal_updates_view();
\& # Modify internal_updates_view
\& my $otherview = Infoblox::DNS::View\->new(
\&        name => "other",
\&     );
\& $network_view\->internal_updates_view($otherview);
.Ve
.RE
.RS 4
.RE
.SS "ms_ad_user_data( )"
.IX Subsection "ms_ad_user_data( )"
.RS 4
Use this method to retrieve Microsoft Active Directory users related information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::MSServer::AdUser::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_ad_user_data
\& my $ms_ad_user_data = $view\->ms_ad_user_data();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of a \s-1DHCP\s0 Network View object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the network view is in string format with a maximum of 64 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get name
\& my $name = $network_view\->name()
\& # Modify name
\& $network_view\->name("netview_renamed");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 Network View insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 Network View object\fR
.PP
.Vb 3
\& my $network_view = Infoblox::DHCP::View\->new(
\&             name     => "netview",
\&            );
\&
\& my $response = $session\->add($network_view)
\&        or die("Add Network View failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network View added successfully\en";
.Ve
.PP
\&\fB#Search for a specific Network View\fR
.PP
.Vb 11
\& #Search the network view
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DHCP::View",
\&     name => \*(Aq^netview$\*(Aq,
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search Network View failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Network found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a Network View attribute\fR
.PP
.Vb 5
\& #Get Network View through the session
\& my  @retrieved_objs = $session\->get(
\&            object => "Infoblox::DHCP::View" ,
\&            name   => "netview",
\&         );
\&
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Get Network View object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Network View found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified Network View attribute
\& $object\->comment("updated comment"); #Apply the changes
\&
\& $session\->modify($object)
\&     or die("Modify Network View attribute failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network View object modified successfully \en";
.Ve
.PP
\&\fB#Remove a Network View Object\fR
.PP
.Vb 5
\&  #Get Network View object through the session
\&  my @retrieved_objs = $session\->get(
\&            object  => "Infoblox::DHCP::View" ,
\&            name    => "netview",
\&        );
\&
\&    my $object = $retrieved_objs[0];
\&
\&    unless ($object) {
\&     die("Get Network View object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Get Network View object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove Network View failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network View removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DNS::View, Infoblox::DHCP::Network, Infoblox::DNS::Zone, Infoblox::DNS::Nameserver, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::DHCP::DDNS, Infoblox::Grid::MSServer::AdUser::Data
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
