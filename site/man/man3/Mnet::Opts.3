.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mnet::Opts 3"
.TH Mnet::Opts 3 "2020-02-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mnet::Opts \- Work with Mnet::Opts objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # requried to use this module
\&    use Mnet::Opts;
\&
\&    # some options can be set as pragmas
\&    use Mnet::Opts::Set::Debug;
\&
\&    # options objects can be created
\&    my $opts = Mnet::Opts({ default => 1 });
\&
\&    # options can be accessed via hash keys
\&    my $value = $opts\->{default};
\&
\&    # options can be accessed via method call
\&    $value = $opts\->default;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mnet::Opts can be used to work with new Mnet::Opts objects, as shown in the
example above.
.PP
Refer also to Mnet::Opts::Cli module, used for parsing command line options.
.SH "METHODS"
.IX Header "METHODS"
Mnet::Opts implements the methods listed below.
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $opts = Mnet::Opts\->new(\e%opts)
.Ve
.PP
The Mnet::Opts\->new class method returns an Mnet::Opts option object.
.PP
The input opts hash reference argument is not required. Any
An input hash reference of options can be supplied but is not required.
.PP
Note that any Mnet::Opts::Set sub-modules that have been used will be set in
the output Mnet::Opts object.
.SS "option methods"
.IX Subsection "option methods"
.Vb 1
\&    $value = $opts\->$option
.Ve
.PP
Option values may be accessed using autoloaded method calls, for example:
.PP
.Vb 3
\&    use Mnet::Opts;
\&    my $opts = Mnet::Opts({ default => 1 });
\&    my $value = $opts\->default;
.Ve
.PP
Note that the universal 'can' method call does not work for these autoloaded
option name methods. Method calls for options that do not exist will return
a value of undefined.
.PP
It is also ok to directly access the values of hash keys in the options object.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mnet
.PP
Mnet::Opts::Cli
.PP
Mnet::Opts::Set
