.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::SmartFolder::QueryItem 3"
.TH Infoblox::Grid::SmartFolder::QueryItem 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::SmartFolder::QueryItem \- Smart Folder Query Item object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Manipulates a Smart Folder Query Item object that contains information about a query to be stored in a global or personal smart folder.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 6
\& my $query_item = Infoblox::Grid::SmartFolder::QueryItem\->new(
\&     name                    => $string,   #Required
\&     is_extensible_attribute => $string,   #Optional / Default is "true"
\&     operator                => "eq" | "ne" | "lt" | "gt" | "leq" | "geq" | "begins with" | "does not begin with" | "ends with" | "does not end with" | "has value" | "does not have value" | "within" | "on" | "today" | "yesterday" | "this week" | "this month",   #Required
\&     value                   => $string | $num | $boolean | type of extensible attribute definition,  #Optional / Default is undefined
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to a query item object.
.SS "Infoblox::Grid::GlobalSmartFolder\->query_items( )"
.IX Subsection "Infoblox::Grid::GlobalSmartFolder->query_items( )"
.RS 4
Use this function to specify a list of query items to store in a global smart folder.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Construct an object
\&   my $query_item1 = Infoblox::Grid::SmartFolder::QueryItem\->new(
\&     name                   => "Building",
\&     is_extensible_attibute => "true",
\&     operator               => "eq",
\&     value                  => "office1"
\& );
\&
\& #Construct an object
\&   my $query_item2 = Infoblox::Grid::SmartFolder::QueryItem\->new(
\&     name                   => "address",
\&     is_extensible_attibute => "false",
\&     operator               => "ne",
\&     value                  => "10.0.0.1"
\& );
\&
\& # Configure query items
\& my $response = $GlobalSmartFolder\->query_items([$query_item1,$query_item2]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a SmartFolder::QueryItem object.
.SS "is_extensible_attribute( )"
.IX Subsection "is_extensible_attribute( )"
.RS 4
Use this method to indicate whether this smart folder query item is an extensible or not. When the attribute is_extensible_attribute is \f(CW"true"\fR, the query item is an extensible attribute. When it is \f(CW"false"\fR, it is a normal attribute.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \f(CW"true"\fR or \f(CW"false"\fR.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting is_extensible_attribute
\& my $is_extensible_attribute = $query_item\->is_extensible_attribute();
\& # Modifying is_extensible_attribute
\& $query_item\->is_extensible_attribute("true");
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of the smart folder query item. The possible values for the name attribute are
.Sp
.Vb 10
\& address
\& circuit_id
\& comment
\& disabled
\& duid
\& is_leaf_network
\& last_discovered_timestamp
\& locked
\& mac_address
\& name
\& network_component_name
\& network_component_port_name
\& network_view
\& port_vlan_name
\& record_type
\& remote_id
\& server_association_type
\& service
\& service_status
\& type
\& unmanaged
\& v_cluster
\& v_datacenter
\& v_entity_type
\& v_host
\& was_conflict
\& zone_func
\& zone_type
.Ve
.Sp
or any valid extensible attribute definition name present in the system.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired name for the smart folder query item.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting name
\& my $name = $query_item\->name();
\& # Modifying name
\& $query_item\->name("Region");
.Ve
.RE
.RS 4
.RE
.SS "operator( )"
.IX Subsection "operator( )"
.RS 4
Use this method to set or retrieve the operator used in the query.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are any of the following strings: \*(L"eq\*(R", \*(L"ne\*(R", \*(L"lt\*(R", \*(L"gt\*(R", \*(L"geq\*(R", \*(L"leq\*(R", \*(L"begins with\*(R", \*(L"does not begin with\*(R", \*(L"ends with\*(R", \*(L"does not end with\*(R", \*(L"has value\*(R", \*(L"does not have value\*(R", \*(L"within\*(R", \*(L"on\*(R", \*(L"today\*(R", \*(L"yesterday\*(R", \*(L"this week\*(R", \*(L"this month\*(R" and \*(L"inheritance state equals\*(R".
.Sp
\&\*(L"has_value\*(R" and \*(L"does not have value\*(R" apply to extensible attribute values only.
.Sp
For valid values for 'value' parameter for the \*(L"within\*(R" operator, please see the description of the 'value' method.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting operator
\& my $operator = $query_item\->operator();
\& # Modifying operator
\& $query_item\->operator("today");
.Ve
.RE
.RS 4
.RE
.SS "value( )"
.IX Subsection "value( )"
.RS 4
Use this method to set or retrieve the value used in the query.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired value in string format.
.Sp
For the \*(L"within\*(R" operator, the following format is supported: n [d/w/m], where n is the number of days/weeks/months depending on the unit following it. The unit is required.  For example, 4d (4 days), 1w (1 week), or 7m (7 months)
.Sp
For the following query items, a boolean value 'true' or 'false' will be expected: \*(L"disabled\*(R", \*(L"is_leaf_network\*(R", \*(L"locked\*(R".
.Sp
For a \*(L"type\*(R" query item, a valid value is one of:
.Sp
.Vb 10
\& \*(AqAll\*(Aq
\& \*(AqAllNetwork\*(Aq
\& \*(AqAllTemplate\*(Aq
\& \*(AqDhcpFailoverAssoc\*(Aq
\& \*(AqDhcpFilter\*(Aq
\& \*(AqDHCPObjects\*(Aq
\& \*(AqDhcpRange\*(Aq
\& \*(AqDhcpRangeTemplate\*(Aq
\& \*(AqDNSObjects\*(Aq
\& \*(AqFixedAddress\*(Aq
\& \*(AqFixedAddressTemplate\*(Aq
\& \*(AqHost\*(Aq
\& \*(AqIPAMObjects\*(Aq
\& \*(AqIPv4DHCPObjects\*(Aq
\& \*(AqIPv6DhcpFilter\*(Aq
\& \*(AqIPv6DHCPObjects\*(Aq
\& \*(AqIPv6DhcpRange\*(Aq
\& \*(AqIPv6DhcpRangeTemplate\*(Aq
\& \*(AqIPv6FixedAddress\*(Aq
\& \*(AqIPv6FixedAddressTemplate\*(Aq
\& \*(AqIPv6Lease\*(Aq
\& \*(AqIPv6Network\*(Aq
\& \*(AqIPv6NetworkTemplate\*(Aq
\& \*(AqIPv6OptionSpace\*(Aq
\& \*(AqIPv6SharedNetwork\*(Aq
\& \*(AqMacFilterAddress\*(Aq
\& \*(AqMember\*(Aq
\& \*(AqNetwork\*(Aq
\& \*(AqNetworkTemplate\*(Aq
\& \*(AqNetwork/Zone/Range/Member\*(Aq
\& \*(AqNsGroup\*(Aq
\& \*(AqOptionFilterMatchRule\*(Aq
\& \*(AqOptionSpace\*(Aq
\& \*(AqReservation\*(Aq
\& \*(AqResourceRecord\*(Aq
\& \*(AqRoamingHost\*(Aq
\& \*(AqSharedNetwork\*(Aq
\& \*(AqSharedRecordGroup\*(Aq
\& \*(AqView\*(Aq
\& \*(AqZone\*(Aq
.Ve
.Sp
For a \*(L"record_type\*(R" query item a valid value is one of:
.Sp
.Vb 9
\& \*(AqA\*(Aq
\& \*(AqAAAA\*(Aq
\& \*(AqAll types\*(Aq
\& \*(AqCNAME\*(Aq
\& \*(AqDNAME\*(Aq
\& \*(AqMX\*(Aq
\& \*(AqPTR\*(Aq
\& \*(AqSRV\*(Aq
\& \*(AqTXT\*(Aq
.Ve
.Sp
For a \*(L"service_status\*(R" query item a valid value is one of:
.Sp
.Vb 5
\& \*(AqFAILED\*(Aq
\& \*(AqINACTIVE\*(Aq
\& \*(AqOFFLINE\*(Aq
\& \*(AqWARNING\*(Aq
\& \*(AqWORKING\*(Aq
.Ve
.Sp
For a \*(L"zone_func\*(R" query item a valid value is one of:
.Sp
.Vb 3
\& \*(AqForward\-mapping Zone\*(Aq
\& \*(AqIPv4 Reverse\-mapping Zone\*(Aq
\& \*(AqIPv6 Reverse\-mapping Zone\*(Aq
.Ve
.Sp
For a \*(L"zone_type\*(R" query item a valid value is one of:
.Sp
.Vb 4
\& \*(AqAuthoritative\*(Aq
\& \*(AqDelegation\*(Aq.
\& \*(AqForward\*(Aq
\& \*(AqStub\*(Aq
.Ve
.Sp
For a \*(L"v_type\*(R" query item a valid value is one of:
.Sp
.Vb 3
\& \*(AqHostSystem\*(Aq
\& \*(AqVirtualCenter\*(Aq
\& \*(AqVirtualMachine\*(Aq
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting value
\& my $value = $query_item\->value();
\& # Modifying value
\& $query_item\->value("Santa Clara");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, modify. This sample also includes error handling for the operations.
.PP
\&\fB##Preparation prior to a smart folder query item object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a smart folder query item object\fR
.PP
.Vb 10
\& my $query_item = Infoblox::Grid::SmartFolder::QueryItem\->new(
\&     name                     => "Country",
\&     is_extensible_attribute  => "true",
\&     operator                 => "eq",
\&     value                    => "Canada",
\& );
\& unless ($query_item){
\&      die("Construct smart folder query item failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& print "SmartFolder::QueryItem object created successfully\en";
.Ve
.PP
\&\fB#Create a personal smart folder and use \f(CB$query_item\fB\fR
.PP
.Vb 5
\&  #create a personal smart folder and use $query_item
\&  my $smart_folder = Infoblox::Grid::PersonalSmartFolder\->new(
\&     name         => "my_personal_folder",
\&     query_items  => [$query_item],
\& );
\&
\& #put smart folder into session
\& $session\->add($smart_folder)
\&   or die("Smart folder creation failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\&
\& print "Smart folder creation successful\en";
.Ve
.PP
\&\fB#Get and modify the query items\fR
.PP
.Vb 5
\& #get the personal smart folder object from session
\& my @result = $session\->get(
\&     object => "Infoblox::Grid::PersonalSmartFolder",
\&     name   => "my_personal_folder"
\& );
\&
\& unless (scalar(@result) == 0) {
\&     my $smart_folder = $result[0];
\&
\&     if ($smart_folder) {
\&
\&       #modify query_items
\&       $query_item\->value("France");
\&       $smart_folder\->query_items([$query_item]);
\&
\&       #update session
\&       $session\->modify($smart_folder)
\&         or die("modify smart_folder my_personal_folder failed: ",
\&             $session\->status_code(), $session\->status_detail());
\&     }
\& } else {
\&   print "No smart folder found.";
\& }
.Ve
.PP
\&\fB#Clean up\fR
.PP
.Vb 4
\& @result = $session\->get(
\&     object => "Infoblox::Grid::PersonalSmartFolder",
\&     name   => "my_personal_folder"
\& );
\&
\& unless (scalar(@result) == 0) {
\&     $session\->remove($result[0]);
\& }
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR,Infoblox::Grid::GlobalSmartFolder,Infoblox::Grid::PersonalSmartFolder
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
