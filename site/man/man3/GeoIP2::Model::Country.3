.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "GeoIP2::Model::Country 3"
.TH GeoIP2::Model::Country 3 "2019-06-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GeoIP2::Model::Country \- Model class for the GeoIP2 Precision: Country and GeoIP2 Country
.SH "VERSION"
.IX Header "VERSION"
version 2.006002
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use 5.008;
\&
\&  use GeoIP2::WebService::Client;
\&
\&  my $client = GeoIP2::WebService::Client\->new(
\&      account_id  => 42,
\&      license_key => \*(Aqabcdef123456\*(Aq,
\&  );
\&
\&  my $country = $client\->country( ip => \*(Aq24.24.24.24\*(Aq );
\&
\&  my $country_rec = $country\->country();
\&  print $country_rec\->iso_code(), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides a model for the data returned by the GeoIP2 Precision:
Country web service and the GeoIP2 Country database.
.SH "METHODS"
.IX Header "METHODS"
This class provides the following methods, each of which returns a record
object.
.ie n .SS "$country\->\fBcontinent()\fP"
.el .SS "\f(CW$country\fP\->\fBcontinent()\fP"
.IX Subsection "$country->continent()"
Returns a GeoIP2::Record::Continent object representing continent data for
the requested \s-1IP\s0 address.
.ie n .SS "$country\->\fBcountry()\fP"
.el .SS "\f(CW$country\fP\->\fBcountry()\fP"
.IX Subsection "$country->country()"
Returns a GeoIP2::Record::Country object representing country data for the
requested \s-1IP\s0 address. This record represents the country where MaxMind
believes the \s-1IP\s0 is located.
.ie n .SS "$country\->\fBmaxmind()\fP"
.el .SS "\f(CW$country\fP\->\fBmaxmind()\fP"
.IX Subsection "$country->maxmind()"
Returns a GeoIP2::Record::MaxMind object representing data about your
MaxMind account.
.ie n .SS "$country\->\fBregistered_country()\fP"
.el .SS "\f(CW$country\fP\->\fBregistered_country()\fP"
.IX Subsection "$country->registered_country()"
Returns a GeoIP2::Record::Country object representing the registered
country data for the requested \s-1IP\s0 address. This record represents the country
where the \s-1ISP\s0 has registered a given \s-1IP\s0 block and may differ from the
user's country.
.ie n .SS "$country\->\fBrepresented_country()\fP"
.el .SS "\f(CW$country\fP\->\fBrepresented_country()\fP"
.IX Subsection "$country->represented_country()"
Returns a GeoIP2::Record::RepresentedCountry object for the country
represented by the requested \s-1IP\s0 address. The represented country may differ
from the \f(CW\*(C`country\*(C'\fR for things like military bases.
.ie n .SS "$country\->\fBtraits()\fP"
.el .SS "\f(CW$country\fP\->\fBtraits()\fP"
.IX Subsection "$country->traits()"
Returns a GeoIP2::Record::Traits object representing the traits for the
requested \s-1IP\s0 address.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through <https://github.com/maxmind/GeoIP2\-perl/issues>.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Dave Rolsky <drolsky@maxmind.com>
.IP "\(bu" 4
Greg Oschwald <goschwald@maxmind.com>
.IP "\(bu" 4
Mark Fowler <mfowler@maxmind.com>
.IP "\(bu" 4
Olaf Alders <oalders@maxmind.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 \- 2019 by MaxMind, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
