.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Array::Split 3"
.TH Array::Split 3 "2017-11-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Array::Split \- split an array into sub\-arrays
.SH "VERSION"
.IX Header "VERSION"
version 1.173190
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Array::Split qw( split_by split_into );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module offers functions to separate all the elements of one array into multiple arrays.
.ie n .SS "split_by ( $split_size, @original )"
.el .SS "split_by ( \f(CW$split_size\fP, \f(CW@original\fP )"
.IX Subsection "split_by ( $split_size, @original )"
Splits up the original array into sub-arrays containing the contents of the original. Each sub-array's size is the same
or less than \f(CW$split_size\fR, with the last one usually being the one to have less if there are not enough elements in
\&\f(CW@original\fR.
.ie n .SS "split_into ( $count, @original )"
.el .SS "split_into ( \f(CW$count\fP, \f(CW@original\fP )"
.IX Subsection "split_into ( $count, @original )"
Splits the given array into even-sized (as even as maths allow) sub-arrays. It tries to create as many sub-arrays as
\&\f(CW$count\fR indicates, but will return less if there are not enough elements in \f(CW@original\fR.
.PP
Returns a list of array references.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Christian Walde (\s-1MITHALDU\s0) <walde.christian@gmail.com>
.IP "\(bu" 4
Tomasz Konojacki (\s-1XENU\s0) <me@xenu.tk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Christian Walde has dedicated the work to the Commons by waiving all of his
or her rights to the work worldwide under copyright law and all related or
neighboring legal rights he or she had in the work, to the extent allowable by
law.
.PP
Works under \s-1CC0\s0 do not require attribution. When citing the work, you should
not imply endorsement by the author.
