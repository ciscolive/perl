.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Log::Handler::Output::Email 3"
.TH Log::Handler::Output::Email 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Handler::Output::Email \- Log messages as email (via Net::SMTP).
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Log::Handler::Output::Email;
\&
\&    my $email = Log::Handler::Output::Email\->new(
\&        host     => "mx.bar.example",
\&        hello    => "EHLO my.domain.example",
\&        timeout  => 120,
\&        debug    => 0,
\&        from     => \*(Aqbar@foo.example\*(Aq,
\&        to       => \*(Aqfoo@bar.example\*(Aq,
\&        subject  => "your subject",
\&        buffer   => 0
\&    );
\&
\&    $email\->log(message => $message);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
With this output module it's possible to log messages via email and it used
Net::SMTP to do it. The date for the email is generated with \f(CW\*(C`Email::Date::format_date\*(C'\fR.
.PP
Net::SMTP is from Graham Barr and it does it's job very well.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBnew()\fP"
.IX Subsection "new()"
Call \f(CW\*(C`new()\*(C'\fR to create a new Log::Handler::Output::Email object.
.PP
The following opts are possible:
.IP "\fBhost\fR" 4
.IX Item "host"
With this option you has to define the \s-1SMTP\s0 host to connect to.
.Sp
.Vb 1
\&    host => "mx.host.com"
\&
\&    # or
\&
\&    host => [ "mx.host.example", "mx.host\-backup.example" ]
.Ve
.IP "\fBhello\fR" 4
.IX Item "hello"
Identify yourself with a \s-1HELO.\s0 The default is set to \f(CW\*(C`EHLO BELO\*(C'\fR.
.IP "\fBtimeout\fR" 4
.IX Item "timeout"
With this option you can set the maximum time in seconds to wait for a
response from the \s-1SMTP\s0 server. The default is set to 120 seconds.
.IP "\fBfrom\fR" 4
.IX Item "from"
The sender address (\s-1MAIL FROM\s0).
.IP "\fBto\fR" 4
.IX Item "to"
The receipient address (\s-1RCPT TO\s0).
.Sp
Additional options are \fBcc\fR and \fBbcc\fR.
.IP "\fBsubject\fR" 4
.IX Item "subject"
The subject of the mail.
.Sp
The default subject is \*(L"Log message from \f(CW$progname\fR\*(R".
.IP "\fBbuffer\fR" 4
.IX Item "buffer"
This opts exists only for security. The thing is that it would be very bad
if something wents wrong in your program and hundreds of mails would be send.
For this reason you can set a buffer to take care.
.Sp
With the buffer you can set the maximum size of the buffer in lines. If you set
.Sp
.Vb 1
\&    buffer => 10
.Ve
.Sp
then 10 messages would be buffered. Set \f(CW\*(C`buffer\*(C'\fR to 0 if you want to disable
the buffer.
.Sp
The default buffer size is set to 20.
.IP "\fBdebug\fR" 4
.IX Item "debug"
With this option it's possible to enable debugging. The information can be
intercepted with \f(CW$SIG\fR{_\|_WARN_\|_}.
.SS "\fBlog()\fP"
.IX Subsection "log()"
Call \f(CW\*(C`log()\*(C'\fR if you want to log a message as email.
.PP
If you set a buffer size then the message will be pushed into the buffer first.
.PP
Example:
.PP
.Vb 1
\&    $email\->log(message => "this message will be mailed");
.Ve
.PP
If you pass the level then its placed into the subject:
.PP
.Vb 3
\&    $email\->log(message => "foo", level => "INFO");
\&    $email\->log(message => "bar", level => "ERROR");
\&    $email\->log(message => "baz", level => "DEBUG");
.Ve
.PP
The lowest level is used:
.PP
.Vb 1
\&    Subject: ERROR: ...
.Ve
.PP
You can pass the level with \f(CW\*(C`Log::Handler\*(C'\fR by setting
.PP
.Vb 1
\&    message_pattern => \*(Aq%L\*(Aq
.Ve
.SS "\fBflush()\fP"
.IX Subsection "flush()"
Call \f(CW\*(C`flush()\*(C'\fR if you want to flush the buffered lines.
.SS "\fBsendmail()\fP"
.IX Subsection "sendmail()"
Call \f(CW\*(C`sendmail()\*(C'\fR if you want to send an email.
.PP
The difference to \f(CW\*(C`log()\*(C'\fR is that the message won't be buffered.
.SS "\fBvalidate()\fP"
.IX Subsection "validate()"
Validate a configuration.
.SS "\fBreload()\fP"
.IX Subsection "reload()"
Reload with a new configuration.
.SS "\fBerrstr()\fP"
.IX Subsection "errstr()"
This function returns the last error message.
.SH "DESTROY"
.IX Header "DESTROY"
\&\f(CW\*(C`DESTROY\*(C'\fR is defined and called \f(CW\*(C`flush()\*(C'\fR.
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.Vb 4
\&    Carp
\&    Email::Date
\&    Net::SMTP
\&    Params::Validate
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
No exports.
.SH "REPORT BUGS"
.IX Header "REPORT BUGS"
Please report all bugs to <jschulz.cpan(at)bloonix.de>.
.PP
If you send me a mail then add Log::Handler into the subject.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonny Schulz <jschulz.cpan(at)bloonix.de>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2007\-2009 by Jonny Schulz. All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
