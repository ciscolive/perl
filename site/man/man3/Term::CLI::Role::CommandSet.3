.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::CLI::Role::CommandSet 3"
.TH Term::CLI::Role::CommandSet 3 "2019-11-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::CLI::Role::CommandSet \- Role for (sub\-)commands in Term::CLI
.SH "VERSION"
.IX Header "VERSION"
version 0.051007
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package Term::CLI::Command {
\&
\&    use Moo;
\&
\&    with(\*(AqTerm::CLI::Role::CommandSet\*(Aq);
\&
\&    ...
\& };
\&
\& my $cmd = Term::CLI::Command\->new( ... );
\&
\& $cmd\->callback\->( %args ) if $cmd\->has_callback;
\&
\& if ( $cmd\->has_commands ) {
\&    my $cmd_ref = $cmd\->find_command( $cmd_name );
\&    die $cmd\->error unless $cmd_ref;
\& }
\&
\& say "command names:", join(\*(Aq, \*(Aq, $cmd\->command_names);
\&
\& $cmd\->callback\->( $cmd, %args ) if $cmd\->has_callback;
\&
\& %args = $cmd\->try_callback( %args );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Role for Term::CLI(3p) elements that contain
a set of Term::CLI::Command(3p) objects.
.PP
This role is used by Term::CLI(3p) and Term::CLI::Command(3p).
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
This role defines two additional attributes:
.IP "\fBcommands\fR => \fIArrayRef\fR" 4
.IX Item "commands => ArrayRef"
Reference to an array containing \f(CW\*(C`Term::CLI::Command\*(C'\fR object
instances that describe the sub-commands that the command takes,
or \f(CW\*(C`undef\*(C'\fR.
.Sp
Note that the elements of the array are copied over to an internal
array, so modifications to the \fIArrayRef\fR will not be seen.
.IP "\fBcallback\fR => \fICodeRef\fR" 4
.IX Item "callback => CodeRef"
Reference to a subroutine that should be called when the command
is executed, or \f(CW\*(C`undef\*(C'\fR.
.SH "ACCESSORS AND PREDICATES"
.IX Header "ACCESSORS AND PREDICATES"
.IP "\fBhas_callback\fR" 4
.IX Xref "has_callback"
.IX Item "has_callback"
.PD 0
.IP "\fBhas_commands\fR" 4
.IX Xref "has_commands"
.IX Item "has_commands"
.PD
Predicate functions that return whether or not any (sub\-)commands
have been added to this object.
.IP "\fBcallback\fR ( [ \fI\s-1CODEREF\s0\fR ] )" 4
.IX Xref "callback"
.IX Item "callback ( [ CODEREF ] )"
\&\fI\s-1CODEREF\s0\fR to be called when the command is executed. The callback
is called as:
.Sp
.Vb 8
\&   OBJ\->callback\->(OBJ,
\&        status       => Int,
\&        error        => Str,
\&        options      => HashRef,
\&        arguments    => ArrayRef[Value],
\&        command_line => Str,
\&        command_path => ArrayRef[InstanceOf[\*(AqTerm::CLI::Command\*(Aq]],
\&   );
.Ve
.Sp
Where:
.RS 4
.IP "\fI\s-1CLI_REF\s0\fR" 4
.IX Item "CLI_REF"
Reference to the current \f(CW\*(C`Term::CLI\*(C'\fR object.
.ie n .IP """status""" 4
.el .IP "\f(CWstatus\fR" 4
.IX Item "status"
Indicates the status of parsing/execution so far.
It has the following meanings:
.RS 4
.IP "\fI< 0\fR" 4
.IX Item "< 0"
Negative status values indicate a parse error. This is a sign that no
action should be taken, but some error handling should be performed.
The actual parse error can be found under the \f(CW\*(C`error\*(C'\fR key. A typical
thing to do in this case is for one of the callbacks in the chain (e.g.
the one on the \f(CW\*(C`Term::CLI\*(C'\fR object to print the error to \fI\s-1STDERR\s0\fR).
.IP "\fI0\fR" 4
.IX Item "0"
The command line parses as valid and execution so far has been successful.
.IP "\fI> 0\fR" 4
.IX Item "> 0"
Some error occurred in the execution of the action. Callback functions need
to set this by themselves.
.RE
.RS 4
.RE
.ie n .IP """error""" 4
.el .IP "\f(CWerror\fR" 4
.IX Item "error"
In case of a negative \f(CW\*(C`status\*(C'\fR, this will contain the parse error. In
all other cases, it may or may not contain useful information.
.ie n .IP """options""" 4
.el .IP "\f(CWoptions\fR" 4
.IX Item "options"
Reference to a hash containing all command line options.
Compatible with the options hash as set by Getopt::Long(3p).
.ie n .IP """arguments""" 4
.el .IP "\f(CWarguments\fR" 4
.IX Item "arguments"
Reference to an array containing all the arguments to the command.
Each value is a scalar value, possibly converted by
its corresponding Term::CLI::Argument's
validate method (e.g. \f(CW\*(C`3e\-1\*(C'\fR may have
been converted to \f(CW0.3\fR).
.ie n .IP """unparsed""" 4
.el .IP "\f(CWunparsed\fR" 4
.IX Item "unparsed"
Reference to an array containing all the words on the command line that
have not been parsed as arguments or sub-commands yet. In case of parse
errors, this often contains elements, and otherwise should be empty.
.ie n .IP """command_line""" 4
.el .IP "\f(CWcommand_line\fR" 4
.IX Item "command_line"
The complete command line as given to the
Term::CLI::execute method.
.ie n .IP """command_path""" 4
.el .IP "\f(CWcommand_path\fR" 4
.IX Item "command_path"
Reference to an array containing the \*(L"parse tree\*(R", i.e. a list
of object references:
.Sp
.Vb 5
\&    [
\&        InstanceOf[\*(AqTerm::CLI\*(Aq],
\&        InstanceOf[\*(AqTerm::CLI::Command\*(Aq],
\&        ...
\&    ]
.Ve
.Sp
The first item in the \f(CW\*(C`command_path\*(C'\fR list is always the top-level
Term::CLI object, while the last is always the same as the
\&\fI\s-1OBJ_REF\s0\fR parameter.
.RE
.RS 4
.Sp
The callback is expected to return a hash (list) containing at least the
same keys. The \f(CW\*(C`command_path\*(C'\fR, \f(CW\*(C`arguments\*(C'\fR, and \f(CW\*(C`options\*(C'\fR should
be considered read-only.
.Sp
Note that a callback can be called even in the case of errors, so you
should always check the \f(CW\*(C`status\*(C'\fR before doing anything.
.RE
.IP "\fBcommands\fR" 4
.IX Xref "commands"
.IX Item "commands"
Return the list of subordinate \f(CW\*(C`Term::CLI::Command\*(C'\fR objects
(i.e. \*(L"sub-commands\*(R") sorted on \f(CW\*(C`name\*(C'\fR.
.IP "\fBparent\fR" 4
.IX Xref "parent"
.IX Item "parent"
Return a reference to the object that \*(L"owns\*(R" this object.
This is typically another object class that consumes this
\&\f(CW\*(C`Term::CLI::Role::CommandSet\*(C'\fR role, such as
\&\f(CW\*(C`Term::CLI\*(C'\fR(3p) or \f(CW\*(C`Term::CLI::Command\*(C'\fR(3p), or \f(CW\*(C`undef\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBadd_command\fR ( \fI\s-1CMD_REF\s0\fR, ... )" 4
.IX Xref "add_command"
.IX Item "add_command ( CMD_REF, ... )"
Add the given \fI\s-1CMD_REF\s0\fR command(s) to the list of (sub\-)commands, setting
each \fI\s-1CMD_REF\s0\fR's parent in the process.
.IP "\fBcommand_names\fR" 4
.IX Xref "command_names"
.IX Item "command_names"
Return the list of (sub\-)command names, sorted alphabetically.
.IP "\fBfind_matches\fR ( \fIStr\fR )" 4
.IX Xref "find_matches"
.IX Item "find_matches ( Str )"
Return a list of all commands in this object that match the \fIStr\fR
prefix.
.IP "\fBfind_command\fR ( \fIStr\fR )" 4
.IX Xref "find_command"
.IX Item "find_command ( Str )"
Check whether \fIStr\fR uniquely matches a command in this \f(CW\*(C`Term::CLI\*(C'\fR
object. Returns a reference to the appropriate
Term::CLI::Command object if successful; otherwise, it 
sets the objects \f(CW\*(C`error\*(C'\fR field and returns \f(CW\*(C`undef\*(C'\fR.
.Sp
Example:
.Sp
.Vb 2
\&    my $sub_cmd = $cmd\->find_command($prefix);
\&    die $cmd\->error unless $sub_cmd;
.Ve
.IP "\fBroot_node\fR" 4
.IX Xref "root_node"
.IX Item "root_node"
Walks parent chain until it can go no further. Returns a
reference to the object at the top. In a functional setup, this
is expected to be a Term::CLI(3p) object.
.IP "\fBtry_callback\fR ( \fI\s-1ARGS\s0\fR )" 4
.IX Xref "try_callback"
.IX Item "try_callback ( ARGS )"
Wrapper function that will call the object's \f(CW\*(C`callback\*(C'\fR function if it
has been set, otherwise simply returns its arguments.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Term::CLI(3p),
Term::CLI::Command(3p).
.SH "AUTHOR"
.IX Header "AUTHOR"
Steven Bakker <sbakker@cpan.org>, 2018.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2018 Steven Bakker
.PP
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See \*(L"perldoc perlartistic.\*(R"
.PP
This software is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
