.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Authen::Simple 3"
.TH Authen::Simple 3 "2012-04-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Authen::Simple \- Simple Authentication
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Authen::Simple;
\&    use Authen::Simple::Kerberos;
\&    use Authen::Simple::SMB;
\&
\&    my $simple = Authen::Simple\->new(
\&        Authen::Simple::Kerberos\->new( realm => \*(AqREALM.COMPANY.COM\*(Aq ),
\&        Authen::Simple::SMB\->new( domain => \*(AqDOMAIN\*(Aq, pdc => \*(AqPDC\*(Aq )
\&    );
\&    
\&    if ( $simple\->authenticate( $username, $password ) ) {
\&        # successfull authentication
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Simple and consistent framework for authentication.
.SH "METHODS"
.IX Header "METHODS"
.IP "\(bu" 4
new
.Sp
This method takes an array of \f(CW\*(C`Authen::Simple\*(C'\fR adapters. Required.
.IP "\(bu" 4
authenticate( \f(CW$username\fR, \f(CW$password\fR )
.Sp
Returns true on success and false on failure.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Authen::Simple::ActiveDirectory.
.PP
Authen::Simple::CDBI.
.PP
Authen::Simple::DBI.
.PP
Authen::Simple::FTP.
.PP
Authen::Simple::HTTP.
.PP
Authen::Simple::Kerberos.
.PP
Authen::Simple::LDAP.
.PP
Authen::Simple::NIS.
.PP
Authen::Simple::PAM.
.PP
Authen::Simple::Passwd.
.PP
Authen::Simple::POP3.
.PP
Authen::Simple::RADIUS.
.PP
Authen::Simple::SMB.
.PP
Authen::Simple::SMTP.
.PP
Authen::Simple::SSH.
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian Hansen \f(CW\*(C`chansen@cpan.org\*(C'\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software, you can redistribute it and/or modify 
it under the same terms as Perl itself.
