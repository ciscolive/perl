.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Record::NS 3"
.TH Infoblox::DNS::Record::NS 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Record::NS \- DNS NS record object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An \s-1NS\s0 record identifies an authoritative \s-1DNS\s0 server for a domain. Each authoritative \s-1DNS\s0 server must have an \s-1NS\s0 record. The appliance automatically creates an \s-1NS\s0 record when you assign a grid member as the primary server for a zone. You can manually create \s-1NS\s0 records for other zones.
.PP
Note that you must specify only one \s-1DNS\s0 view for the attribute \*(L"views\*(R".
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 7
\& my $ns = Infoblox::DNS::Record::NS\->new(
\&     name                => $name,                    #Required
\&     nameserver          => $nameserver,              #Required
\&     addresses           => [$ns1, $ns2, ...],        #Required
\&     ms_delegation_name  => $name,                    #Optional
\&     views               => [$View1]                  #Optional / Default is "default" view
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DNS NS\s0 Record object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Construct an object
\& my $nsrecord = Infoblox::DNS::Record::NS\->new(
\&     nameserver => "ns1.server.isp.org",
\&     name       => "domain.com",
\&     addresses  => [$ns1, $ns2],
\& );
\& # Submit for addition
\& my $response = $session\->add( $nsrecord );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DNS NS Record object:
\&
\&  name        \- Optional.  A domain name in FQDN (Fully Qualified Domain Name) format.
\&  nameserver  \- Optional.  A domain name in FQDN (Fully Qualified Domain Name) format.
\&  view        \- Optional.  The DNS view in which the NS record is located. By default, all DNS views are searched.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  my @retrieved_objs = $session\->get(
\&     object    => "Infoblox::DNS::Record::NS",
\&     name      => "domain.com",
\&     view      => "default" );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the addresses.
\& $nsrecord\->addresses([$ns3]);
\& # Submit modification
\& my $response = $session\->modify( $nsrecord );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& # Get the object under the same name
\& my @retrieved_objs = $session\->get(
\&     object    => "Infoblox::DNS::Record::NS",
\&     name      => "domain.com",
\&     view      => "default" );
\& # Find the desired object from the retrieved list.
\& my $desired_ns = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_ns );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DNS NS\s0 Record objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DNS NS Record object:
\&
\&  name          \- Optional. A domain name in FQDN (Fully Qualified Domain Name) format (regular expression).
\&  nameserver    \- Optional. A domain name in FQDN (Fully Qualified Domain Name) format (regular expression).
\&  view          \- Optional. The DNS view in which the NS record is located. By default, all DNS views are searched.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all DNS NS objects that match "domain.com" in the default DNS view
\&     my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::NS",
\&     name   => \*(Aqdomain\e.com\*(Aq,
\&     view   => "default" );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of an \s-1NS\s0 record.
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to retrieve cloud \s-1API\s0 related information for the Infoblox::DNS::Record::NS object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get cloud_info
\& my $cloud_info = $object\->cloud_info();
.Ve
.RE
.RS 4
.RE
.SS "creator( )"
.IX Subsection "creator( )"
.RS 4
Use this method to retrieve the \s-1NS\s0 record creator. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $object\->creator();
.Ve
.RE
.RS 4
.RE
.SS "dns_name( )"
.IX Subsection "dns_name( )"
.RS 4
Use this method to retrieve the domain name, in punycode format, of the zone to be redirected. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $nsrecord\->dns_name();
.Ve
.RE
.RS 4
.RE
.SS "ms_delegation_name( )"
.IX Subsection "ms_delegation_name( )"
.RS 4
Use this method to set or retrieve the ms_delegation_name field of the \s-1NS\s0 record. This method can be used if the primary server of the zone is a Microsoft (r) server. If this \s-1NS\s0 record is for a subzone zone, it will be the subzone name.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A subzone name.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting ms_delegation_name
\& my $ms_delegation_name = $nsrecord\->ms_delegation_name();
\& # Modifying ms_delegation_name (the full FQDN of the zone is "sub.test.com")
\& $nsrecord\->ms_delegation_name("sub");
.Ve
.RE
.RS 4
.RE
.SS "last_queried( )"
.IX Subsection "last_queried( )"
.RS 4
Use this method to retrieve the time when the associated record was last queried. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. The number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_queried
\& my $last_queried = $nsrecord\->last_queried();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the domain name of the zone to be redirected.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A domain name in \s-1FQDN\s0 format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting name
\& my $name = $nsrecord\->name();
\& # Modifying name
\& $nsrecord\->name("domain.com");
.Ve
.RE
.RS 4
.RE
.SS "nameserver( )"
.IX Subsection "nameserver( )"
.RS 4
Use this method to set or retrieve the domain name of an authoritative server for the redirected zone.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A domain name in \s-1FQDN\s0 format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting nameserver
\& my $nameserver = $nsrecord\->nameserver();
\& # Modifying nameserver
\& $nsrecord\->nameserver("ns1.server.isp.org");
.Ve
.RE
.RS 4
.RE
.SS "addresses( )"
.IX Subsection "addresses( )"
.RS 4
Use this method to set or retrieve the \s-1IP\s0 addresses of the name servers associated with the \s-1NS\s0 record.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DNS::Nameserver::Address objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting addresses
\& my $nslist = $nsrecord\->addresses();
\& # Modifying addresses
\& $nsrecord\->addresses([$ns1, $ns2]);
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to specify or retrieve the \s-1DNS\s0 view of the \s-1NS\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the 'default' view, which means the \s-1NS\s0  record is associated with a zone in the system-defined default view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference of defined Infoblox::DNS::View objects.
.Sp
Note that the array size must be 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get views
\& my $ref_views = $nsrecord\->views();
\& #Modify views, list of Infoblox::DNS::View objects
\& $nsrecord\->views([$view1]);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS NS\s0 record insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the zone prior to NS record insertion
\& my $zone = Infoblox::DNS::Zone\->new(name => "domain.com");
\& unless ($zone) {
\&    die("Construct zone failed: ",
\&      Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& #Verify if the zone exists
\& my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "domain.com");
\& unless ($object) {
\&    print "Zone does not exist on server, safe to add the zone\en";
\&    $session\->add($zone)
\&       or die("Add zone failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Zone added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS NS\s0 record\fR
.PP
.Vb 4
\& my $ns1 = Infoblox::DNS::Nameserver::Address\->new(
\&                                                           address  => \*(Aq10.0.0.1\*(Aq,
\&                                                   auto_create_ptr => \*(Aqfalse\*(Aq
\&                                                   );
\&
\& my $ns2 = Infoblox::DNS::Nameserver::Address\->new(
\&                                                   address         => \*(Aq10.0.0.2\*(Aq,
\&                                                   );
\&
\&  #Construct a DNS NS object
\& my $nsrecord = Infoblox::DNS::Record::NS\->new(
\&     nameserver => "ns1.server.isp.org",
\&     name       => "domain.com",
\&     addresses  => [$ns1, $ns2],
\& );
\&
\& unless ($nsrecord) {
\&    die("Construct DNS record NS failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DNS NS object created successfully\en"; #Add the DNS NS record object to Infoblox appliance through a session
\& $session\->add($nsrecord)
\&     or die("Add record NS failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS NS object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS NS\s0 record\fR
.PP
.Vb 12
\& #Search all NS records that match "domain.com"
\& my @retrieved_objs = $session\->search(
\&     object     => "Infoblox::DNS::Record::NS",
\&     nameserver => "ns1.server.isp.org",
\&     name       => \*(Aqdomain\e.com\*(Aq
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search record NS failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS NS object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS NS\s0  record\fR
.PP
.Vb 6
\& #Get NS record through the session
\& my  @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DNS::Record::NS",
\&     nameserver => "ns1.server.isp.org",
\&     name       => "domain.com",
\& );
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get record NS failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS NS object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified NS record
\& $object\->addresses([$ns1]);
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify record NS failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS NS object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DNS NS\s0  record\fR
.PP
.Vb 12
\&  #Get NS record through the session
\&  my @retrieved_objs = $session\->get(
\&      object     => "Infoblox::DNS::Record::NS",
\&      nameserver => "ns1.server.isp.org",
\&      name       => "domain.com"
\&   );
\&    my $object = $retrieved_objs[0];
\&    unless ($object) {
\&     die("Get record NS failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS NS object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove record NS failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS NS object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::View, Infoblox::DNS::Zone, Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
