.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::FilterRule::Option 3"
.TH Infoblox::DHCP::FilterRule::Option 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::FilterRule::Option \- DHCP filter rule option object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1DHCP\s0 filter rule option object gives the ability to grant and/or deny a lease of an \s-1IP\s0 defined in \s-1DHCP\s0 Range.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 4
\&  my $FilterRuleOption = Infoblox::DHCP::FilterRule::Option\->new(
\&                filter_name  =>  $string,          #Required
\&                permission   =>  "grant" | "deny", #Required
\&            );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to apply to a \s-1DHCP\s0 filter rule option object.
.SS "Infoblox::DHCP::Range\->filters( )"
.IX Subsection "Infoblox::DHCP::Range->filters( )"
.RS 4
Use this function to specify filters at the \s-1DHCP\s0 range level.  See details for Infoblox::DHCP::Range objects
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct DHCP filter rule option object
\& my $filter = Infoblox::DHCP::FilterRule::Option\->new(
\&     filter_name => "filter1",
\&     permission  => "grant"
\& );
\&
\& # Configure  filters
\& my $response = $range\->filters([$res]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 filter rule option object.
.SS "filter_name( )"
.IX Subsection "filter_name( )"
.RS 4
Use this method to set or retrieve the filter name of a \s-1DHCP\s0 filter rule option object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify filter name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get filters from  range
\& my $resp = $range\->filters();
\& # Modify filters
\& $range\->filters([$res]);
.Ve
.RE
.RS 4
.RE
.SS "permission( )"
.IX Subsection "permission( )"
.RS 4
Use this method to set or retrieve the permission of a \s-1DHCP\s0 filter rule option object. When selecting Grant lease, you need to assign addresses from the address range to requesting hosts
whose user class (as defined on their network adapter) matches an entry in the option filter rules.
When selecting Deny lease, you need to refuse an address request from a host whose user class matches an entry in the option filter rules.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The permission can be either \*(L"grant\*(R" or \*(L"deny\*(R". The default value is \*(L"grant\*(R" lease.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get permission
\&  $res\->permission();
\& #modify permission value
\& $res\->permission("deny");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, modify. Also, this sample includes error handling for the operations.
.PP
\&\fB##Preparation prior to a \s-1DHCP\s0 filter rule option object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\&   #Create a DHCP Member object
\& my $memberdhcp = Infoblox::DHCP::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => "192.168.1.2"
\& );
\& unless($memberdhcp) {
\&        die("Construct member failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Member object created successfully\en";
\&
\& #Create the Network object with the member
\& my $network = Infoblox::DHCP::Network\->new(
\&     network => "10.0.0.0/8",
\&     comment => "add network",
\&     members => [ $memberdhcp ]
\& );
\& unless($network) {
\&        die("Construct Network object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network object created successfully\en";
.Ve
.PP
\&\fB#Add the Network object into the Infoblox appliance through a session\fR
.PP
.Vb 4
\& $session\->add($network)
\&     or die("Add Network object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object added to Infoblox appliance successfully\en";
\&
\& my $opt1 = Infoblox::DHCP::Option\->new(
\&       name => "user\-class" ,
\&       value => "77"
\&    );
.Ve
.PP
\&\fB#Create the Option Filter object\fR
.PP
.Vb 3
\& my $option_filter = Infoblox::DHCP::Filter::Option\->new(
\&       name => \*(Aqfilter1\*(Aq ,
\&       option_list => [$opt1],
\&
\& );
\&
\& unless($option_filter) {
\&        die("Construct Option Filter object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Option Filter object created successfully\en";
.Ve
.PP
\&\fB#Add the filter rule option object into the Infoblox appliance\fR
.PP
.Vb 4
\& $session\->add($option_filter)
\&     or die("Add option Filter object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Option Filter object added to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Construct \s-1DHCP\s0 Filter rule Option  object\fR
.PP
.Vb 4
\& my $filter = Infoblox::DHCP::FilterRule::Option\->new(
\&     filter_name => "filter1",
\&     permission  => "grant"
\& );
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 Range object\fR
.PP
.Vb 10
\& my $dhcp_range = Infoblox::DHCP::Range\->new(
\&         end_addr     => "10.0.0.10",
\&         network      => "10.0.0.0/8",
\&         start_addr   => "10.0.0.1",
\&         authority    => "true",
\&         comment      => "add range",
\&         filters      => [$filter],
\&         member       => $memberdhcp,
\& );
\& unless($dhcp_range) {
\&        die("Construct DHCP Range object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Range object created successfully\en";
\&
\& #Add the DHCP Range object into the Infoblox appliance through a session
\& $session\->add($dhcp_range)
\&     or die("Add DHCP Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range object added to the network successfully\en";
.Ve
.PP
\&\fB#Get and modify the filter rule option object\fR
.PP
.Vb 7
\& #get  object from session
\& my @result = $session\->get(
\&     object => "Infoblox::DHCP::Range",
\&     start_addr => "10.0.0.1"
\& );
\& unless (scalar(@result) == 0) {
\&     my $range = $result[0];
\&
\&     if ($range) {
\&     my $resp = $range\->filters();
\&     my @arr = @{$resp};
\&     my $res = $arr[0];
\&
\&         #modify permission value
\&         $res\->permission("deny");
\&         $range\->filters([$res]);
\&         #update session
\&         $session\->modify($range)
\&             or die("modify failed: ",
\&                $session\->status_code(), $session\->status_detail());
\&
\&             print "Modify filter permisson successful\en";
\&            }
\&          } else {
\&              print "No range found.";
\&          }
\& $session\->remove($option_filter);
\& print "Remove filter1 successfull\en";
\&
\&  ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DHCP::Range, Infoblox::DHCP::Network, Infoblox::DHCP::Member, Infoblox::DHCP::Option, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBadd()\fR,
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
