.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::Mojo::IRC 3"
.TH Test::Mojo::IRC 3 "2017-01-14" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Mojo::IRC \- Module for testing Mojo::IRC
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Test::Mojo::IRC \-basic;
\&
\&  my $t   = Test::Mojo::IRC\->start_server;
\&  my $irc = Mojo::IRC\->new(server => $t\->server);
\&
\&  # simulate server/client communication
\&  $t\->run(
\&    [
\&      # Send "welcome.irc" from the DATA section when client sends "NICK"
\&      qr{\ebNICK\eb} => [qw(main motd.irc)],
\&    ],
\&    sub {
\&      my $err;
\&      my $motd = 0;
\&      $t\->on($irc, irc_rpl_motd => sub { $motd++ });
\&      $t\->on($irc, irc_rpl_endofmotd => sub { Mojo::IOLoop\->stop; }); # need to manually stop the IOLoop
\&      $irc\->connect(sub { $err = $_[1]; });
\&      Mojo::IOLoop\->start; # need to manually start the IOLoop
\&      is $err, "", "connected";
\&      is $motd, 3, "message of the day";
\&    },
\&  );
\&
\&  done_testing;
\&
\&  _\|_DATA_\|_
\&  @@ motd.irc
\&  :spectral.shadowcat.co.uk 375 test123 :\- spectral.shadowcat.co.uk Message of the Day \-
\&  :spectral.shadowcat.co.uk 372 test123 :\- We scan all connecting clients for open proxies and other
\&  :spectral.shadowcat.co.uk 372 test123 :\- exploitable nasties. If you don\*(Aqt wish to be scanned,
\&  :spectral.shadowcat.co.uk 372 test123 :\- don\*(Aqt connect again, and sorry for scanning you this time.
\&  :spectral.shadowcat.co.uk 376 test123 :End of /MOTD command.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test::Mojo::IRC is a module for making it easier to test Mojo::IRC
applications.
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
.SS "\s-1TEST_MOJO_IRC_SERVER\s0"
.IX Subsection "TEST_MOJO_IRC_SERVER"
\&\f(CW\*(C`TEST_MOJO_IRC_SERVER\*(C'\fR can be set to point to a live server. If the variable
is set, \*(L"start_server\*(R" will simply return \s-1TEST_MOJO_IRC_SERVER\s0 instead
of setting up a server.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "server"
.IX Subsection "server"
.Vb 1
\&  $str = $self\->server;
.Ve
.PP
Returns the server address, \*(L"host:port\*(R", that \*(L"start_server\*(R" set up.
.SS "welcome_message"
.IX Subsection "welcome_message"
.Vb 2
\&  $str = $self\->welcome_message;
\&  $self = $self\->welcome_message($str);
.Ve
.PP
Holds a message which will be sent to the client on connect.
.SH "METHODS"
.IX Header "METHODS"
.SS "on"
.IX Subsection "on"
.Vb 1
\&  $self\->on($irc, $event, $cb);
.Ve
.PP
Will attach events to the \f(CW$irc\fR object which is removed
after \*(L"run\*(R" has completed. See \*(L"\s-1SYNOPSIS\*(R"\s0 for example code.
.SS "run"
.IX Subsection "run"
.Vb 1
\&  $self\->run($reply_on, sub { my $self = shift });
.Ve
.PP
Used to simulate communication between \s-1IRC\s0 server and client. The way this
works is that the \f(CW$cb\fR will initiate connect or
write to the server and the server will then respond
with the data from either \*(L"welcome_message\*(R" or \f(CW$reply_on\fR on these
events.
.PP
\&\f(CW$reply_on\fR is an array-ref of regex/buffer pairs. Each time a message
from the client match the first regex in the \f(CW$reply_on\fR array the
buffer will be sent back to the client and the regex/buffer will be removed.
This means that the order of the pairs are important. The buffer can be...
.IP "\(bu" 4
Scalar
.Sp
Plain text.
.IP "\(bu" 4
Scalar ref
.Sp
Path to file on disk.
.IP "\(bu" 4
Array ref
.Sp
The module name and file passed on to \*(L"data_section\*(R" in Mojo::Loader. The default
package is \*(L"main\*(R", meaning the two examples below is the same:
.Sp
.Vb 2
\&  $self\->run([qr{JOIN}, ["join\-reply.irc"]], sub { my $self = shift });
\&  $self\->run([qr{JOIN}, ["main", "join\-reply.irc"]], sub { my $self = shift });
.Ve
.PP
Note that starting and stopping the IOLoop is up to you, but
there is also a master timeout which will stop the IOLoop if running for too
long.
.PP
See \*(L"\s-1SYNOPSIS\*(R"\s0 for example.
.SS "start_server"
.IX Subsection "start_server"
.Vb 2
\&  $server = $self\->start_server;
\&  $self   = Test::Mojo::IRC\->start_server;
.Ve
.PP
Will start a test server and return \*(L"server\*(R". It can also be called as
a class method which will return a new object.
.SS "import"
.IX Subsection "import"
.Vb 1
\&  use Test::Mojo::IRC \-basic;
.Ve
.PP
Loading this module with \*(L"\-basic\*(R" will import strict, warnings, utf8,
Test::More and 5.10 features into the caller namespace.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2014, Jan Henning Thorsen
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jan Henning Thorsen \- \f(CW\*(C`jhthorsen@cpan.org\*(C'\fR
