.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::Cast 3"
.TH Data::Object::Cast 3 "2020-04-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::Cast
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Data Type Casting for Perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package main;
\&
\&  use Data::Object::Cast;
\&
\&  local $Data::Object::Cast::To = \*(AqTest::Object\*(Aq;
\&
\&  # Data::Object::Cast::Deduce([1..4]); # Test::Object::Array
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides functions for casting native data types to objects and
the reverse.
.SH "LIBRARIES"
.IX Header "LIBRARIES"
This package uses type constraints from:
.PP
Types::Standard
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
This package implements the following functions:
.SS "deduce"
.IX Subsection "deduce"
.Vb 1
\&  Deduce(Any $value) : Object
.Ve
.PP
The Deduce function returns the argument as a data type object.
.IP "Deduce example #1" 4
.IX Item "Deduce example #1"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Deduce([1..4])
\&
\&  # $array
.Ve
.IP "Deduce example #2" 4
.IX Item "Deduce example #2"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Deduce(sub { shift })
\&
\&  # $code
.Ve
.IP "Deduce example #3" 4
.IX Item "Deduce example #3"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Deduce(1.23)
\&
\&  # $float
.Ve
.IP "Deduce example #4" 4
.IX Item "Deduce example #4"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Deduce({1..4})
\&
\&  # $hash
.Ve
.IP "Deduce example #5" 4
.IX Item "Deduce example #5"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Deduce(123)
\&
\&  # $number
.Ve
.IP "Deduce example #6" 4
.IX Item "Deduce example #6"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Deduce(qr/.*/)
\&
\&  # $regexp
.Ve
.IP "Deduce example #7" 4
.IX Item "Deduce example #7"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Deduce(\e\*(Aqabc\*(Aq)
\&
\&  # $scalar
.Ve
.IP "Deduce example #8" 4
.IX Item "Deduce example #8"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Deduce(\*(Aqabc\*(Aq)
\&
\&  # $string
.Ve
.IP "Deduce example #9" 4
.IX Item "Deduce example #9"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Deduce(undef)
\&
\&  # $undef
.Ve
.SS "deducedeep"
.IX Subsection "deducedeep"
.Vb 1
\&  DeduceDeep(Any @args) : (Object)
.Ve
.PP
The DeduceDeep function returns any arguments as data type objects, including
nested data.
.IP "DeduceDeep example #1" 4
.IX Item "DeduceDeep example #1"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::DeduceDeep([1..4])
\&
\&  # $array <$number>
.Ve
.IP "DeduceDeep example #2" 4
.IX Item "DeduceDeep example #2"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::DeduceDeep({1..4})
\&
\&  # $hash <$number>
.Ve
.SS "detract"
.IX Subsection "detract"
.Vb 1
\&  Detract(Any $value) : Any
.Ve
.PP
The Detract function returns the argument as native Perl data type value.
.IP "Detract example #1" 4
.IX Item "Detract example #1"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Detract(
\&    Data::Object::Cast::Deduce(
\&      [1..4]
\&    )
\&  )
\&
\&  # $arrayref
.Ve
.IP "Detract example #2" 4
.IX Item "Detract example #2"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Detract(
\&    Data::Object::Cast::Deduce(
\&      sub { shift }
\&    )
\&  )
\&
\&  # $coderef
.Ve
.IP "Detract example #3" 4
.IX Item "Detract example #3"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Detract(
\&    Data::Object::Cast::Deduce(
\&      1.23
\&    )
\&  )
\&
\&  # $number
.Ve
.IP "Detract example #4" 4
.IX Item "Detract example #4"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Detract(
\&    Data::Object::Cast::Deduce(
\&      {1..4}
\&    )
\&  )
\&
\&  # $hashref
.Ve
.IP "Detract example #5" 4
.IX Item "Detract example #5"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Detract(
\&    Data::Object::Cast::Deduce(
\&      123
\&    )
\&  )
\&
\&  # $number
.Ve
.IP "Detract example #6" 4
.IX Item "Detract example #6"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Detract(
\&    Data::Object::Cast::Deduce(
\&      qr/.*/
\&    )
\&  )
\&
\&  # $regexp
.Ve
.IP "Detract example #7" 4
.IX Item "Detract example #7"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Detract(
\&    Data::Object::Cast::Deduce(
\&      \e\*(Aqabc\*(Aq
\&    )
\&  )
\&
\&  # $scalarref
.Ve
.IP "Detract example #8" 4
.IX Item "Detract example #8"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Detract(
\&    Data::Object::Cast::Deduce(
\&      \*(Aqabc\*(Aq
\&    )
\&  )
\&
\&  # $string
.Ve
.IP "Detract example #9" 4
.IX Item "Detract example #9"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::Detract(
\&    Data::Object::Cast::Deduce(
\&      undef
\&    )
\&  )
\&
\&  # $undef
.Ve
.SS "detractdeep"
.IX Subsection "detractdeep"
.Vb 1
\&  DetractDeep(Any @args) : (Any)
.Ve
.PP
The DetractDeep function returns any arguments as native Perl data type values,
including nested data.
.IP "DetractDeep example #1" 4
.IX Item "DetractDeep example #1"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::DetractDeep(
\&    Data::Object::Cast::DeduceDeep(
\&      [1..4]
\&    )
\&  )
.Ve
.IP "DetractDeep example #2" 4
.IX Item "DetractDeep example #2"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::DetractDeep(
\&    Data::Object::Cast::DeduceDeep(
\&      {1..4}
\&    )
\&  )
.Ve
.SS "typename"
.IX Subsection "typename"
.Vb 1
\&  TypeName(Any $value) : Maybe[Str]
.Ve
.PP
The TypeName function returns the name of the value's data type.
.IP "TypeName example #1" 4
.IX Item "TypeName example #1"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::TypeName([1..4])
\&
\&  # \*(AqARRAY\*(Aq
.Ve
.IP "TypeName example #2" 4
.IX Item "TypeName example #2"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::TypeName(sub { shift })
\&
\&  # \*(AqCODE\*(Aq
.Ve
.IP "TypeName example #3" 4
.IX Item "TypeName example #3"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::TypeName(1.23)
\&
\&  # \*(AqFLOAT\*(Aq
.Ve
.IP "TypeName example #4" 4
.IX Item "TypeName example #4"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::TypeName({1..4})
\&
\&  # \*(AqHASH\*(Aq
.Ve
.IP "TypeName example #5" 4
.IX Item "TypeName example #5"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::TypeName(123)
\&
\&  # \*(AqNUMBER\*(Aq
.Ve
.IP "TypeName example #6" 4
.IX Item "TypeName example #6"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::TypeName(qr/.*/)
\&
\&  # \*(AqREGEXP\*(Aq
.Ve
.IP "TypeName example #7" 4
.IX Item "TypeName example #7"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::TypeName(\e\*(Aqabc\*(Aq)
\&
\&  # \*(AqSTRING\*(Aq
.Ve
.IP "TypeName example #8" 4
.IX Item "TypeName example #8"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::TypeName(\*(Aqabc\*(Aq)
\&
\&  # \*(AqSTRING\*(Aq
.Ve
.IP "TypeName example #9" 4
.IX Item "TypeName example #9"
.Vb 1
\&  # given: synopsis
\&
\&  Data::Object::Cast::TypeName(undef)
\&
\&  # \*(AqUNDEF\*(Aq
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/foobar/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/foobar/wiki>
.PP
Project <https://github.com/iamalnewkirk/foobar>
.PP
Initiatives <https://github.com/iamalnewkirk/foobar/projects>
.PP
Milestones <https://github.com/iamalnewkirk/foobar/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/foobar/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/foobar/issues>
