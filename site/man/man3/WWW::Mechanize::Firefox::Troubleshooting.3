.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::Mechanize::Firefox::Troubleshooting 3"
.TH WWW::Mechanize::Firefox::Troubleshooting 3 "2018-10-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::Mechanize::Firefox::Troubleshooting \- Things to watch out for
.SH "Installation"
.IX Header "Installation"
.SS "Firefox vs. Waterfox"
.IX Subsection "Firefox vs. Waterfox"
There is a version of the browser codebase that is supposedly still maintained.
It is distributed under the name Waterfox at:
.PP
<https://www.waterfoxproject.org/en\-US/waterfox/desktop/>
.PP
Currently it does not seem to be compatible with the mozrepl plugin, so
WWW::Mechanize::Firefox will not work with Waterfox.
.SS "Tests"
.IX Subsection "Tests"
If you notice that tests get skipped and/or the module installs
but \*(L"does not seem to work\*(R", there are some more steps required
to configure Firefox. Please see WWW::Mechanize::Firefox::Installation
for more information.
.ie n .SS """Failed to connect to , problem connecting to ""localhost"", port 4242: Connection refused at ..."""
.el .SS "\f(CWFailed to connect to , problem connecting to ``localhost'', port 4242: Connection refused at ...\fP"
.IX Subsection "Failed to connect to , problem connecting to ""localhost"", port 4242: Connection refused at ..."
The \f(CW\*(C`mozrepl\*(C'\fR plugin is not correctly installed or not configured
to listen in Firefox on port 4242.
.IP "1." 4
Check that Firefox is listening on port 4242:
.Sp
.Vb 1
\&  telnet localhost 4242
.Ve
.Sp
If this does fail with some error message, you have either a firewall
issue or the \f(CW\*(C`mozrepl\*(C'\fR extension is not properly installed.
.IP "2." 4
Go through the steps in
WWW::Mechanize::Firefox::Installation to verify that the \f(CW\*(C`mozrepl\*(C'\fR
extension is installed.
.SH "Dialogs that break your application"
.IX Header "Dialogs that break your application"
This section lists things that can (and will) happen which might
block your Perl scripts from working properly
with Firefox.
.SS "Save-As Dialog Displays"
.IX Subsection "Save-As Dialog Displays"
If a webserver sends the appropriate headers, Firefox will ask the
user where to save a file. This dialog will pop up and stall
the Perl application until a user clicks \*(L"\s-1OK\*(R"\s0 to confirm where
to save the file.
.PP
\fISolution\fR
.IX Subsection "Solution"
.PP
Find where Firefox pops up the dialog and replace that with a
callback to Perl.
.PP
\fIWorkaround\fR
.IX Subsection "Workaround"
.PP
In many cases, you can instruct Firefox to always save files
into the same folder. This may or may not be acceptable.
You can directly call \f(CW\*(C`\->get\*(C'\fR or \f(CW\*(C`\->save_url\*(C'\fR
and also specify where to save the content by using
.PP
.Vb 1
\&  $mech\->get( $url, \*(Aq:content_file\*(Aq => $tempfile );
.Ve
.PP
or alternatively
.PP
.Vb 1
\&  $mech\->save_url( $url => $target_filename );
.Ve
.PP
Both of these workarounds require you to know the \s-1URL\s0
you want to download.
.SS "Updates to Firefox Add-Ons"
.IX Subsection "Updates to Firefox Add-Ons"
The dialog notification for new versions of Add-Ons is not
yet automated. If Firefox pops up this dialog, your application
will stall until a human closes this dialog.
.PP
\fISolution\fR
.IX Subsection "Solution"
.PP
Find where Firefox pops up this dialog and override the display either
through a setting or through replacing the Javascript code with
the appropriate Perl code.
.PP
\fIWorkaround\fR
.IX Subsection "Workaround"
.PP
Disable checking for and notification about updated Add-Ons.
.SS "Proxy password"
.IX Subsection "Proxy password"
If a fresh Firefox process is launched and a proxy is configured,
Firefox will ask for the credentials needed for that proxy.
The Perl script will stall until a human enters or confirms
the credentials.
.PP
\fISolution\fR
.IX Subsection "Solution"
.PP
Find where Firefox pops up this dialog and override the display
with a function that supplies the appropriate credentials
directly.
.PP
\fIWorkaround\fR
.IX Subsection "Workaround"
.PP
There is no workaround.
.SH "Scripting"
.IX Header "Scripting"
.SS "Clicking on a link makes the Perl script wait forever"
.IX Subsection "Clicking on a link makes the Perl script wait forever"
If you have something like the following code:
.PP
.Vb 1
\&  $mech\->click(\*(Aq#a_link\*(Aq);
.Ve
.PP
WWW::Mechanize::Firefox expects a \s-1HTTP\s0 interaction (\*(L"a web request\*(R") to
ensue and will wait until a new page is loaded. If the element your
script clicks on only changes some aspect of the Javascript page, like
acknowledging a message, then no \s-1HTTP\s0 interaction will occur and
your script will wait forever.
.PP
\fISolution\fR
.IX Subsection "Solution"
.PP
For those requests, pass the \f(CW\*(C`synchronize => 0\*(C'\fR option:
.PP
.Vb 1
\&  $mech\->click({ selector => \*(Aq#a_link\*(Aq, synchronize => 0 });
.Ve
.PP
This will tell WWW::Mechanize::Firefox not to wait for any response
from the webserver.
.SS "A tab remains open even after the program closes"
.IX Subsection "A tab remains open even after the program closes"
If you have something like the following code:
.PP
.Vb 1
\&  my $mech = WWW::Mechanize::Firefox\->new();
\&
\&  sub page_title {
\&      $mech\->selector( \*(Aqdiv.title\*(Aq, single => 1 )\->{innerHTML};
\&  };
.Ve
.PP
then Perl will keep the \f(CW$mech\fR object alive until the program ends
and Global Destruction of all objects starts. As Global Destruction
happens in a non-deterministic order, this will sometimes prevent
the \f(CW$mech\fR object from properly closing the Firefox tab attached to it.
.PP
For debugging whether that is really the cause,
set \f(CW$MozRepl::RemoteObject::WARN_ON_LEAK\fR to a true value. This will
emit warnings to \f(CW\*(C`STDERR\*(C'\fR if objects cannot release their Firefox
counterpart during Global Destruction.
.PP
\fISolution\fR
.IX Subsection "Solution"
.PP
Pass the \f(CW$mech\fR object around as parameter:
.PP
.Vb 1
\&  my $mech = WWW::Mechanize::Firefox\->new();
\&
\&  sub page_title {
\&      my ($mech) = @_;
\&      $mech\->selector( \*(Aqdiv.title\*(Aq, single => 1 )\->{innerHTML};
\&  };
.Ve
.PP
Alternatively, explicitly set \f(CW$mech\fR to \f(CW\*(C`undef\*(C'\fR at the end of
your main program:
.PP
.Vb 2
\&  ...
\&  undef $mech;
.Ve
.SS "The script crashes with maximum input buffer length exceeded"
.IX Subsection "The script crashes with maximum input buffer length exceeded"
When taking a screenshot of a large page, the script crashes with
.PP
.Vb 1
\&  maximum input buffer length exceeded: 1048576 bytes ...
.Ve
.PP
\fISolution\fR
.IX Subsection "Solution"
.PP
Pass the \f(CW\*(C`bufsize\*(C'\fR parameter to the WWW::Mechanize::Firefox constructor
to give Net::Telnet a larger buffer:
.PP
.Vb 3
\&  my $firefox = WWW::Mechanize::Firefox\->new(
\&      bufsize => 10_000_000,
\&  );
.Ve
.ie n .SS "Javascript error ""0x8007000e (\s-1NS_ERROR_OUT_OF_MEMORY\s0)"" on ""\->content_as_png"""
.el .SS "Javascript error ``0x8007000e (\s-1NS_ERROR_OUT_OF_MEMORY\s0)'' on \f(CW\->content_as_png\fP"
.IX Subsection "Javascript error 0x8007000e (NS_ERROR_OUT_OF_MEMORY) on ->content_as_png"
This error is caused because of Firefox 4 bug 649924
(<https://bugzilla.mozilla.org/show_bug.cgi?id=649924>). It seems
that the Firefox \f(CW\*(C`canvas\*(C'\fR element is size-limited when
hardware acceleration is enabled.
.PP
\fIWorkaround\fR
.IX Subsection "Workaround"
.PP
Until that bug is fixed, disable hardware acceleration and restart Firefox 4.
.SH "Known Problems"
.IX Header "Known Problems"
.SS "Page Encoding Versus Perl Encoding"
.IX Subsection "Page Encoding Versus Perl Encoding"
Currently, whatever Firefox delivers as the page content
is decoded to \s-1UTF\-8\s0 unless it already is. This is likely not the case in some
situations, for example with pages encoded in koi\-8. Please send
me test cases where decoding fails or does not produce the
correct data.
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2010\-2018 by Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR.
.PP
All Rights Reserved. This module is free software. It may be used,
redistributed and/or modified under the same terms as Perl itself.
