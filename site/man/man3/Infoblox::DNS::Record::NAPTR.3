.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Record::NAPTR 3"
.TH Infoblox::DNS::Record::NAPTR 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Record::NAPTR  \- NAPTR record object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1DNS NAPTR\s0 object represents a Naming Authority Pointer (\s-1NAPTR\s0) resource record. This resource record specifies a regular expression-based rewrite rule that, when applied to an existing string, produces a new domain name or \s-1URI.\s0
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $naptr = Infoblox::DNS::Record::NAPTR\->new(
\&     name                  => $fqdn,                                                             # Required
\&     order                 => $num,                                                              # Required
\&     preference            => $num,                                                              # Required
\&     flags                 => $string,                                                           # Optional
\&     services              => $string,                                                           # Optional
\&     regexp                => $string,                                                           # Optional
\&     replacement           => $string                                                            # Required
\&     comment               => $string,                                                           # Optional / Default is empty
\&     disable               => "true" | "false",                                                  # Optional / Default is "false"
\&     extattrs              => { $string => $extattr, ... },                                      # Optional / Default is undefined
\&     extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, # Optional / Default is undefined
\&     ttl                   => $num | undef,                                                      # Optional / Default is undefined
\&     views                 => [$View1],                                                          # Optional / Default is "default" view
\&     creator               => "DYNAMIC" | "STATIC",                                              # Optional / Default is "STATIC"
\&     ddns_protected        => "true" | "false",                                                  # Optional / Default is "false"
\&     ddns_principal        => $string,                                                           # Optional / Default is undefined
\&     forbid_reclamation    => "true" | "false",                                                  # Optional / Default is "false"
\& );
.Ve
.PP
Note that you must specify only one \s-1DNS\s0 view for the attribute \*(L"views\*(R".
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that can be applied to an \s-1NAPTR\s0 record object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Construct an object
\& my $naptr = Infoblox::DNS::Record::NAPTR\->new(
\&     name            => \*(Aqnaptr.domain.com\*(Aq,
\&     order           => 100,
\&     preference      => 10,
\&     flags           => \*(AqU\*(Aq,
\&     services        => \*(Aqhttp+E2U\*(Aq,
\&     regexp          => \*(Aq!http://my[.](.*)!1!i\*(Aq,
\&     replacement     => \*(Aqdomain2.com\*(Aq,
\&     comment         => \*(AqSample NAPTR record\*(Aq,
\&     disable         => \*(Aqfalse\*(Aq,
\&     ttl             => 84600,
\&     views           => [$view1],
\& );
\& # Submit for addition
\& my $response = $session\->add( $naptr );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to get specific NAPTR record objects:
\&
\&     comment               \- Optional. Descriptive comment in string format
\&     creator               \- Optional. Record creator.
\&     ddns_principal        \- Optional. GSS\-TSIG principal that owns the record.
\&     reclaimable           \- Optional. The flag that indicates whether the record is reclaimable or not.
\&     extattrs              \- Optional. A hash reference containing extensible attributes.
\&     extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&     flags                 \- Optional. Flags in string format
\&     name                  \- Optional. FQDN of the record in string format
\&     order                 \- Optional. Order parameter (unsigned integer)
\&     preference            \- Optional. Preference parameter (unsigned integer)
\&     replacement           \- Optional. Replacement field in string format
\&     services              \- Optional. Services field in string format
\&     view                  \- Optional. The DNS view in which the NAPTR record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&     zone                  \- Optional. A zone name in FQDN format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::NAPTR",
\&     name   => "naptr1.domain.com",
\&     view   => "default" );
\&
\& #get all DNS A records with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->get(
\&    object => "Infoblox::DNS::Record::NAPTR",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify the comment.
\& $naptr\->comment("this is a modified comment");
\& # Submit the modification
\& my $response = $session\->modify( $naptr );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to submit the removal of an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the object, and then submit it for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& # Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::NAPTR",
\&     name   => "naptr1.domain.com",
\&     view   => "default" );
\& # Find the desired object in the retrieved list.
\& my $desired_rec = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_rec );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to search the NAPTR record objects:
\&
\&     comment               \- Optional. Descriptive comment (regular expression)
\&     creator               \- Optional. Record creator.
\&     ddns_principal        \- Optional. GSS\-TSIG principal that owns the record.
\&     reclaimable           \- Optional. The flag that indicates whether the record is reclaimable or not.
\&     extattrs              \- Optional. A hash reference containing extensible attributes.
\&     extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&     flags                 \- Optional. Flags in string format (regular expression)
\&     name                  \- Optional. FQDN of the record in string format (regular expression)
\&     order                 \- Optional. Order parameter (unsigned integer, exact search)
\&     preference            \- Optional. Preference parameter (unsigned integer, exact search)
\&     replacement           \- Optional. Replacement field in string format (regular expression)
\&     services              \- Optional. Services field in string format (regular expression)
\&     view                  \- Optional. The DNS view in which the NAPTR record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only. Only exact search is supported.
\&     zone                  \- Optional. A zone name in FQDN format (exact search)
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all NAPTR objects that match "domain.com" in the default DNS view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::NAPTR",
\&     name   => \*(Aq.*domain\e.com\*(Aq,
\&     view   => "default" );
\&
\& # search for all NAPTR records in the "domain.com" zone of the default DNS view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::NAPTR",
\&     zone   => "domain.com",
\&     view   => "default" );
\&
\& #get all NAPTR records with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&   object => "Infoblox::DNS::Record::NAPTR",
\&   extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to retrieve the attribute values of an \s-1NAPTR\s0 record object.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment of an \s-1NAPTR\s0 record object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the descriptive comment
\& my $comment = $naptr\->comment();
\& #Modify the comment
\& $naptr\->comment("This is a new comment");
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to retrieve cloud \s-1API\s0 related information for the Infoblox::DNS::Record::NAPTR object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get cloud_info
\& my $cloud_info = $object\->cloud_info();
.Ve
.RE
.RS 4
.RE
.SS "creator( )"
.IX Subsection "creator( )"
.RS 4
Use this method to set or retrieve the record creator.
.Sp
Note that changing creator from or to '\s-1SYSTEM\s0' value is not allowed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParamter\fR" 4
.IX Item "Paramter"
The valid values are '\s-1STATIC\s0' and '\s-1DYNAMIC\s0'. The default value is '\s-1STATIC\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get creator value
\& my $creator = $object\->creator();
\&
\& #Modify creator value
\& $object\->creator("DYNAMIC");
.Ve
.RE
.RS 4
.RE
.SS "creation_time( )"
.IX Subsection "creation_time( )"
.RS 4
Use this method to retrieve the creation time for the record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is a number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get creation_time value
\& my $creation_time = $object\->creation_time();
.Ve
.RE
.RS 4
.RE
.SS "ddns_principal( )"
.IX Subsection "ddns_principal( )"
.RS 4
Use this method to set or retrive the GSS-TSIG principal that owns this record.
.Sp
Note that you cannot set ddns_principal for '\s-1STATIC\s0' and '\s-1SYSTEM\s0' records.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParamter\fR" 4
.IX Item "Paramter"
The GSS-TSIG principal \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the hostname followed by the domain name (example: abc.com). A hostname can have a maximum of 256 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ddns_principal value
\& my $ddns_principal = $object\->ddns_principal();
\&
\& #Modify ddns_principal value
\& $object\->ddns_principal(\*(Aqfoo.com\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_protected( )"
.IX Subsection "ddns_protected( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether \s-1DDNS\s0 updates for this record are allowed or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to protect record from \s-1DDNS\s0 updates and 'false' to allow \s-1DDNS\s0 updates for the specified record.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ddns_protected value
\& my $ddns_protected = $object\->ddns_protected();
\&
\& #Modify ddns_protected value
\& $object\->ddns_protected(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of an \s-1NAPTR\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false, which indicates that the \s-1NAPTR\s0 record is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the disable field
\& my $disable = $naptr\->disable();
.Ve
.RE
.RS 4
.RE
.SS "dns_name( )"
.IX Subsection "dns_name( )"
.RS 4
Use this method to retrieve the \s-1FQDN,\s0 in punycode format, of the \s-1NAPTR\s0 record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $naptr\->dns_name();
.Ve
.RE
.RS 4
.RE
.SS "dns_replacement( )"
.IX Subsection "dns_replacement( )"
.RS 4
Use this method to retrieve the replacement field, in punycode format, of an \s-1NAPTR\s0 record object. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $naptr\->dns_replacement();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1NAPTR\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $naptr\->extattrs();
\& #Modify extattrs
\& $naptr\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with an \s-1NAPTR\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get  extensible attributes
\& my $ref_extensible_attributes = $naptr\->extensible_attributes();
\& #Modify extensible attributes
\& $naptr\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "flags( )"
.IX Subsection "flags( )"
.RS 4
Use this method to retrieve the flags to control the interpretation of the fields of an \s-1NAPTR\s0 record object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Currently supported values for the flags field are \*(L"U\*(R", \*(L"S\*(R", \*(L"P\*(R" and \*(L"A\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the flags field
\& my $flags = $naptr\->flags();
\& #Modify flags
\& $naptr\->flags("U");
.Ve
.RE
.RS 4
.RE
.SS "forbid_reclamation( )"
.IX Subsection "forbid_reclamation( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the reclamation is allowed for the record or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to forbid reclamation for the record and 'false' to allow it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get forbid_reclamation
\& my $forbid_reclamation = $object\->forbid_reclamation();
\& #Modify forbid_reclamation
\& $object\->forbid_reclamation(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "last_queried( )"
.IX Subsection "last_queried( )"
.RS 4
Use this method to retrieve the time when the associated record was last queried. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. The number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_queried
\& my $last_queried = $naptr\->last_queried();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to retrieve the \s-1FQDN\s0 (Fully Qualified Domain Name) of the \s-1NAPTR\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name parameter is a string in \s-1FQDN\s0 format. The \s-1FQDN\s0 consists of the record name followed by the domain name (example: rec.abc.com). A record name can have a maximum of 256 bytes.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the FQDN of the record
\& my $name = $naptr\->name();
\& #Modify the FQDN of the record
\& $naptr\->name("rec2.domain.com");
.Ve
.RE
.RS 4
.RE
.SS "order( )"
.IX Subsection "order( )"
.RS 4
Use this method to retrieve the order parameter of an \s-1NAPTR\s0 record. This parameter specifies the order in which the \s-1NAPTR\s0 rules are applied when multiple rules are present.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The order parameter is a 16\-bit unsigned integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the order parameter
\& my $order = $naptr\->order();
\& #Modify the order
\& $naptr\->order(200);
.Ve
.RE
.RS 4
.RE
.SS "preference( )"
.IX Subsection "preference( )"
.RS 4
Use this method to retrieve the preference field of an \s-1NAPTR\s0 record. The preference field determines the order \s-1NAPTR\s0 records are processed when multiple records with the same order parameter are present.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The preference parameter is a 16\-bit integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the preference attribute value
\& my $preference = $naptr\->preference();
\& #Modify preference
\& $naptr\->preference(300);
.Ve
.RE
.RS 4
.RE
.SS "reclaimable( )"
.IX Subsection "reclaimable( )"
.RS 4
Use this method to retrieve the flag that indicates whether the record is reclaimable or not.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get reclaimable
\& my $reclaimable = $object\->reclaimable();
.Ve
.RE
.RS 4
.RE
.SS "regexp( )"
.IX Subsection "regexp( )"
.RS 4
Use this method to specify the regular expression-based rewriting rule of an \s-1NAPTR\s0 record. This should be a \s-1POSIX\s0 compliant regular expression, including the substitution rule and flags. Refer to \s-1RFC 2915\s0 for the field syntax details.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid parameter is a \s-1POSIX\s0 compliant regular expression or substitution expression.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get regexp
\& my $regexp = $naptr\->regexp();
\& #Modify regexp
\& $naptr\->regexp("!http://(.*)!1!i");
.Ve
.RE
.RS 4
.RE
.SS "replacement( )"
.IX Subsection "replacement( )"
.RS 4
Use this method to retrieve the replacement field of an \s-1NAPTR\s0 record object. For nonterminal \s-1NAPTR\s0 records, this field specifies the next domain name to look up.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The replacement field is in \s-1FQDN\s0 format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the replacement field
\& my $replacement = $naptr\->replacement();
\& #Modify the replacement field
\& $naptr\->replacement("_\|_tcp_\|_.domain.com");
.Ve
.RE
.RS 4
.RE
.SS "services( )"
.IX Subsection "services( )"
.RS 4
Use this field to specify services. The services field contains protocol and service identifiers, for example \*(L"http+E2U\*(R" or \*(L"\s-1SIPS+D2T\*(R".\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The services field in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get services
\& my $services = $naptr\->services();
\& #Modify services
\& $naptr\->services("http+E2U");
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to set or retrieve the Time to Live (\s-1TTL\s0) value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is undefined, which indicates that the record inherits the \s-1TTL\s0 value of the zone.
.Sp
Specify a \s-1TTL\s0 value to override the \s-1TTL\s0 value at the zone level.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (from 0 to 4294967295) that represents the duration, in seconds, that the record is cached. Zero indicates that the record should not be cached.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get the TTL of the record
\& my $ttl = $naptr\->ttl();
\& #Modify TTL
\& $naptr\->ttl(900);
\& #Use zone ttl settings
\& $naptr\->ttl(undef);
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 view of the \s-1NAPTR\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" view, which means the \s-1NAPTR\s0 record is located in the default \s-1DNS\s0 view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference of defined Infoblox::DNS::View objects.
.Sp
Note that the array size must be 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get views
\& my $ref_views = $naptr\->views();
\& #Modify views, list of Infoblox::DNS::View objects
\& $naptr\->views([$view1]);
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of an \s-1NAPTR\s0 record. This method is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get zone
\& my $zone = $naptr\->zone();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the session methods on an \s-1NAPTR\s0 record object.
.PP
\&\fB#Preparation prior to a \s-1NAPTR\s0 record insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
.Ve
.PP
\&\fB#Create a session to the Infoblox appliance\fR
.PP
.Vb 10
\&  my $session = Infoblox::Session\->new(
\&      master   => $host_ip,
\&      username => "admin",
\&      password => "infoblox"
\&  );
\&  unless ($session) {
\&     die("Construct session failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Session created successfully\en";
\&
\&  #Create the zone prior to an A record insertion
\&  my $zone = Infoblox::DNS::Zone\->new(name => "domain.com");
\&  unless ($zone) {
\&     die("Construct zone failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\&  }
\&  print "Zone object created successfully\en";
\&
\&  #Verify if the zone exists
\&  my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "domain.com");
\&  unless ($object) {
\&     print "Zone does not exist on server, safe to add the zone\en";
\&     $session\->add($zone)
\&        or die("Add zone failed: ",
\&               $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Zone added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS NAPTR\s0 record\fR
.PP
.Vb 10
\&  #Construct a DNS NAPTR object
\&  my $bind_naptr = Infoblox::DNS::Record::NAPTR\->new(
\&      name     => "bind_naptr.domain.com",
\&      comment  => " this is a demo bind_naptr record ",
\&      services => "http+E2U",
\&      flags    => "U",
\&      regexp   => "!http://(.*)!1!i",
\&      preference => 100,
\&      order    => 10,
\&      replacement => \*(Aq_http._tcp.domain.com\*(Aq,
\&  );
\&  unless ($bind_naptr) {
\&     die("Construct DNS NAPTR record failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\&  }
\&  print "DNS NAPTR record object created successfully\en";
\&
\&  #Add the DNS NAPTR record object to the Infoblox appliance through a session
\&  $session\->add($bind_naptr)
\&      or die("Adding NAPTR record failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&  print "DNS NAPTR object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS NAPTR\s0 record\fR
.PP
.Vb 11
\&  #Search all NAPTR records in the zone
\&  my @retrieved_objs = $session\->search(
\&      object => "Infoblox::DNS::Record::NAPTR",
\&      name   => \*(Aq.*\e.domain\e.com\*(Aq
\&  );
\&  my $object = $retrieved_objs[0];
\&  unless ($object) {
\&      die("Search for NAPTR record failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Search DNS NAPTR record object found at least 1 matching entry\en";
\&
\&  #Search for all NAPTR records that start with "bind" in the zone
\&  my @retrieved_objs = $session\->search(
\&      object => "Infoblox::DNS::Record::NAPTR",
\&      name   => \*(Aqbind.*\e.domain\e.com\*(Aq
\&  );
\&  my $object = $retrieved_objs[0];
\&  unless ($object) {
\&      die("Search for NAPTR record failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Searching DNS NAPTR object using regexp found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS NAPTR\s0 record\fR
.PP
.Vb 11
\&  #Get a record through the session
\&  my @retrieved_objs = $session\->get(
\&      object => "Infoblox::DNS::Record::NAPTR",
\&      name   => "bind_naptr.domain.com"
\&  );
\&  my $object = $retrieved_objs[0];
\&  unless ($object) {
\&      die("Get NAPTR record failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Get DNS NAPTR object found at least 1 matching entry\en";
\&
\&  #Modify some attributes of the specified NAPTR record
\&  $object\->preference(200);
\&  $object\->order(100);
\&
\&  #Apply the changes
\&  $session\->modify($object)
\&      or die("Modify NAPTR record failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&  print "DNS NAPTR object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DNS NAPTR\s0 record\fR
.PP
.Vb 11
\&  #Get NAPTR record through the session
\&  my @retrieved_objs = $session\->get(
\&      object => "Infoblox::DNS::Record::NAPTR",
\&      name   => "bind_naptr.domain.com"
\&  );
\&  my $object = $retrieved_objs[0];
\&  unless ($object) {
\&      die("Get NAPTR record failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Get NAPTR DNS object found at least 1 matching entry\en";
\&
\&  #Submit the object for removal
\&  $session\->remove($object)
\&      or die("Remove NAPTR record failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&  print "DNS NAPTR object removed successfully \en";
\&
\& #Remove the zone
\&
\& #Get Zone object through the session
\& @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Zone",
\&     name   => "domain.com"
\& );
\& $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get zone failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get zone object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove zone object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Zone object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR,Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::DNS::Zone
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
