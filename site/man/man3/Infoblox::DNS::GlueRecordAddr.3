.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::GlueRecordAddr 3"
.TH Infoblox::DNS::GlueRecordAddr 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::GlueRecordAddr \- Infoblox DNS Glue Record Object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The GlueRecordAddr allows you to specify which interface address the appliance uses to generate the glue record for each view.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::DNS::GlueRecordAddr object is automatically generated upon the successful creation of the Infoblox::DNS::View object. It does not require manual construction.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
This section describes all the functions that you can apply to a GlueRecordAddr object.
.SS "Infoblox::Grid::Member::DNS\->glue_record_addresses( )"
.IX Subsection "Infoblox::Grid::Member::DNS->glue_record_addresses( )"
.RS 4
Use this function to specify a glue record address for a view at the grid member level. See Infoblox::Grid::Member::DNS\->\fBglue_record_addresses()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Retrieve the list of GlueRecordAddr objects from Member DNS object.
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Member::DNS",
\&     name   => "infoblox.localdomain" );
\&
\& #select the desired GlueRecordAddr for the view
\& my $Grid_Member_DNS = $retrieved_objs[0];
\& my $ref_all_glue_record_addr = $Grid_Member_DNS\->glue_record_addresses();
\& my $glue_record_addr = @$ref_all_glue_record_addr[0];
\&
\& # Modify Glue Record Address for the view to use NAT address.
\& $glue_record_addr\->glue_record_address("NAT");
\&
\& #Save modification to Member DNS object.
\& my $response = $Grid_Member_DNS\->glue_record_addresses($ref_all_glue_record_addr);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a GlueRecordAddr object.
.SS "attach_empty_recursive_view( )"
.IX Subsection "attach_empty_recursive_view( )"
.RS 4
Use this method to set or retrieve the attach_empty_recursive_view flag of glue record object. If the attach_empty_recursive_view flag is set to \*(L"true\*(R", then empty view with recursion enabled will be written into the conf file.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the attach_empty_recursive_view flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attach_empty_recursive_view.
\& my $attach_empty_recursive_view = $glue_record_addr\->attach_empty_recursive_view();
\& #Modify attach_empty_recursive_view.
\& $glue_record_addr\->attach_empty_recursive_view("true");
.Ve
.RE
.RS 4
.RE
.SS "glue_record_address( )"
.IX Subsection "glue_record_address( )"
.RS 4
Use this method to set or retrieve the address the appliance uses to generate the glue record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
String which specifies the interface address to use. Valid values are \*(L"interface\*(R", \*(L"\s-1NAT\*(R",\s0 or specify an IPv4 or IPv6 address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get glue record address.
\& my $glue_record_address = $glue_record_addr\->glue_record_address();
\& #Modify glue record address.
\& $glue_record_addr\->glue_record_address("NAT");
.Ve
.RE
.RS 4
.RE
.SS "view( )"
.IX Subsection "view( )"
.RS 4
Use this method to retrieve the view of this Glue Record object
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get view
\& my $glue_record_view = $glue_record_addr\->view();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as get and modify. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS\s0 GlueRecordAddr object modification\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&            master   => "192.168.1.2",
\&            username => "admin",
\&            password => "infoblox"
\& );
\&
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& # Retrieve the list of GlueRecordAddr objects from Member DNS object.
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Member::DNS",
\&     name   => "infoblox.localdomain" );
\&
\& my $Grid_Member_DNS = $retrieved_objs[0];
\& unless ($Grid_Member_DNS) {
\&    die("Retrieve Grid Member DNS object failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Grid Member DNS object retrieve successfully\en";
.Ve
.PP
\&\fB#Modify the Glue Record address\fR
.PP
.Vb 1
\& my $ref_all_glue_record_addr = $Grid_Member_DNS\->glue_record_addresses();
\&
\& # Select the desired GlueRecordAddr for the view
\& my $glue_record_addr = @$ref_all_glue_record_addr[0];
\& unless ($glue_record_addr) {
\&    die("Glue Record Address not found on Grid Member DNS object: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Glue Record Address found on Grid Member DNS object\en";
\&
\& # Modify Glue Record Address for the view to use a custom defined address.
\& $glue_record_addr\->glue_record_address("interface")
\&     or die("modify glue record failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& print "Glue Record Address modified successfully\en";
\&
\& # Save modification to Member DNS object.
\& my $response = $Grid_Member_DNS\->glue_record_addresses($ref_all_glue_record_addr);
\& unless($response) {
\&     die("Modify glue record on Member DNS failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Glue Record Address updated to Grid Member DNS object successfully\en";
\&
\& #submit changes to Infoblox appliance
\& $session\->modify($Grid_Member_DNS)
\&    or die("Modify Member DNS object on Infoblox appliance failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& print "Grid Member DNS modified on Infoblox appliance successfully\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR,Infoblox::Grid::Member::DNS\->\fBglue_record_addresses()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
