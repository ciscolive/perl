.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mnet::Tee 3"
.TH Mnet::Tee 3 "2020-08-09" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mnet::Tee \- Redirect stdout and stderr to a file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # use this module on it\*(Aqs own
\&    use Mnet::Tee;
\&    Mnet::Tee::file($file);
\&
\&    # or use with Mnet command line options
\&    use Mnet::Tee;
\&    use Mnet::Opts::Cli;
\&    my $cli = Mnet::Opts::Cli\->new;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mnet::Tee can be used to capture all stdout and stderr output from the
calling script, saving the combined output to a file. This module is used
by the Mnet::Test module.
.PP
The variables stdout and stderr can be imported from this module to use for
output that should not be captured by the Mnet::Tee module.
.PP
When used with the Mnet::Log module the \-\-tee file will contain log
entries that are not displayed to the terminal due to the use of the \-\-quiet
or \-\-silent options.
.PP
When used with the Mnet::Batch module the output from the batch parent and
all child processes will be merged into a single file.
.PP
Note that output captured by this module is stored in memory during script
execution. That could be a problem for scripts that generate gigabytes of
stdout and/or stderr output.
.PP
The perl tie command is used to implement the functionality of this module
and requires perl 5.010 or newer.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Mnet::Tee implements the functions listed below.
.SS "file"
.IX Subsection "file"
.Vb 1
\&    Mnet::Tee::file($file)
.Ve
.PP
The function can be used to have script output written to the specified file,
including all output prior to the call. The script will abort if unable to
open the new file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mnet
.PP
Mnet::Opts::Cli
.PP
Mnet::Test
