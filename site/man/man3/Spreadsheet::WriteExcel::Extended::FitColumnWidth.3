.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::WriteExcel::Extended::FitColumnWidth 3"
.TH Spreadsheet::WriteExcel::Extended::FitColumnWidth 3 "2012-04-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::WriteExcel::Extended::FitColumnWidth \- Extends Spreadsheet::WriteExcel with autofit of columns and a few other nice things
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Spreadsheet::WriteExcel::Extended::FitColumnWidth where you would otherwise use Spreadsheet::WriteExcel except that the call
to new has been enhanced and there are a number of things done by default, like autofit of columns, setup of header line,
pre defined formats.
.PP
.Vb 3
\& use warnings;
\& use strict;
\& use Spreadsheet::WriteExcel::Extended::FitColumnWidth;
\&
\& my @headings = qw{ Fruit Colour Price/Kg };
\& my $workbook = Spreadsheet::WriteExcel::Extended::FitColumnWidth\->new({
\&        filename  => \*(Aqtest.xls\*(Aq,
\&        sheets    => [ { name => \*(AqTest Data\*(Aq, headings => \e@headings}, ],
\&        font      => \*(Aq/myfonts/arial.ttf\*(Aq    # optional, defaults to \*(Aqc:\ewindows\efonts\earial.ttf\*(Aq
\&        font_bold => \*(Aq/myfonts/arialbd.ttf\*(Aq  # optional, defaults to \*(Aqc:\ewindows\efonts\earialbd.ttf\*(Aq
\&        });
\& my $worksheet = $workbook\->{_\|_extended_sheets_\|_}[0];
\& my $row = 1;  # First row after the header row
\&
\& $worksheet\->write_row($row++, 0, [ \*(AqApple \- Pink Lady\*(Aq, \*(AqRed\*(Aq, \*(Aq3.25\*(Aq ], $workbook\->get_format(\*(Aqred\*(Aq));
\& $worksheet\->write_row($row++, 0, [ \*(AqApple \- Granny Smith\*(Aq, \*(AqGreen\*(Aq, \*(Aq2.95\*(Aq ], $workbook\->{_\|_extended_format_green_\|_});
\& # Note:  The autofit does not currently take bold fonts into account, bit is may soon :)
\& $worksheet\->write_row($row++, 0, [ \*(AqOriginal Carrot\*(Aq, \*(AqPurple\*(Aq, \*(Aq5.95\*(Aq ], $workbook\->{_\|_extended_format_purple_bold_\|_});
\& $worksheet\->write_row($row++, 0, [ \*(AqOrange\*(Aq, \*(AqOrange\*(Aq, \*(Aq6.15\*(Aq ], $workbook\->{_\|_extended_format_orange_bg_\|_});
\&
\& $workbook\->close();
.Ve
.PP
You \fB\s-1MUST\s0\fR call \fBclose()\fR;
.PP
Note that the default font is assumed to be Arial 10pt
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 10
\&  my $workbook = Spreadsheet::WriteExcel::Extended::FitColumnWidth\->new({
\&        filename => \*(Aqfilename.xls\*(Aq,
\&        sheets   => [
\&            { name => \*(AqTest Data\*(Aq, headings => \e@headings},
\&            { name => \*(AqSheet Number 2\*(Aq, headings => [ \*(AqComponent\*(Aq, \*(AqComponent Description\*(Aq ]},
\&            ...
\&            ],
\&        font      => \*(Aqpath/to/default/ttf\*(Aq      # optional, defaults to \*(Aqc:\ewindows\efonts\earial.ttf\*(Aq
\&        font_bold => \*(Aqpath/to/header_row/ttf\*(Aq   # optional, defaults to \*(Aqc:\ewindows\efonts\earialbd.ttf\*(Aq
\&        });
.Ve
.PP
The main difference here is that you pre-define the sheets you want and what heading they should have.
The headings are added with a format of:
.PP
.Vb 4
\& $format_heading\->set_bold();
\& $format_heading\->set_bg_color(\*(Aqsilver\*(Aq);
\& $format_heading\->set_color(\*(Aqblue\*(Aq);
\& $format_heading\->set_align(\*(Aqcenter\*(Aq);
.Ve
.PP
Which is also stored as:
 \f(CW$workbook\fR\->{_\|_extended_format_heading_\|_} = \f(CW$format_heading\fR;
.SS "close"
.IX Subsection "close"
\&\f(CW$workbook\fR\->\fBclose()\fR;
.PP
Don't call this and you will not have any autofit!
.SS "get_format"
.IX Subsection "get_format"
Get one of the predefined formats eg \f(CW$workbook\fR\->get_format('blue');
.PP
Note that the name provided does not include the prefix '_\|_extended_format_' or suffix '_\|_'
.SS "get_worksheets_extended"
.IX Subsection "get_worksheets_extended"
my \f(CW@sheets\fR = \f(CW$workbook\fR\->\fBget_worksheets_extended()\fR;
.PP
Returns an array of Spreadsheet::WriteExcel::Worksheet objects in the order
they were originally defined in the call to new
.SH "PRE DEFINED FORMATS"
.IX Header "PRE DEFINED FORMATS"
The pre defined formats are listed below (as returned by \fBget_formats()\fR)
.SS "get_formats"
.IX Subsection "get_formats"
The following formats are pre defined and accessable as \f(CW$workbook\fR\->{format_name_blow}:
.PP
.Vb 10
\& _\|_extended_format_blue_\|_
\& _\|_extended_format_blue_bg_\|_
\& _\|_extended_format_blue_bold_\|_
\& _\|_extended_format_bold_\|_
\& _\|_extended_format_brown_\|_
\& _\|_extended_format_brown_bg_\|_
\& _\|_extended_format_brown_bold_\|_
\& _\|_extended_format_cyan_\|_
\& _\|_extended_format_cyan_bg_\|_
\& _\|_extended_format_cyan_bold_\|_
\& _\|_extended_format_gray_\|_
\& _\|_extended_format_gray_bg_\|_
\& _\|_extended_format_gray_bold_\|_
\& _\|_extended_format_green_\|_
\& _\|_extended_format_green_bg_\|_
\& _\|_extended_format_green_bold_\|_
\& _\|_extended_format_heading_\|_
\& _\|_extended_format_lightblue_\|_
\& _\|_extended_format_lightblue_bg_\|_
\& _\|_extended_format_lightblue_bold_\|_
\& _\|_extended_format_lightgray_\|_
\& _\|_extended_format_lightgray_bg_\|_
\& _\|_extended_format_lightgreen_\|_
\& _\|_extended_format_lightgreen_bg_\|_
\& _\|_extended_format_lightgreen_bold_\|_
\& _\|_extended_format_lightpurple_\|_
\& _\|_extended_format_lightpurple_bg_\|_
\& _\|_extended_format_lightpurple_bold_\|_
\& _\|_extended_format_lightyellow_\|_
\& _\|_extended_format_lightyellow_bg_\|_
\& _\|_extended_format_lightyellow_bold_\|_
\& _\|_extended_format_lime_\|_
\& _\|_extended_format_lime_bg_\|_
\& _\|_extended_format_lime_bold_\|_
\& _\|_extended_format_magenta_\|_
\& _\|_extended_format_magenta_bg_\|_
\& _\|_extended_format_magenta_bold_\|_
\& _\|_extended_format_navy_\|_
\& _\|_extended_format_navy_bg_\|_
\& _\|_extended_format_navy_bold_\|_
\& _\|_extended_format_orange_\|_
\& _\|_extended_format_orange_bg_\|_
\& _\|_extended_format_orange_bold_\|_
\& _\|_extended_format_pink_\|_
\& _\|_extended_format_pink_bg_\|_
\& _\|_extended_format_pink_bold_\|_
\& _\|_extended_format_purple_\|_
\& _\|_extended_format_purple_bg_\|_
\& _\|_extended_format_purple_bold_\|_
\& _\|_extended_format_red_\|_
\& _\|_extended_format_red_bg_\|_
\& _\|_extended_format_red_bold_\|_
\& _\|_extended_format_silver_\|_
\& _\|_extended_format_silver_bg_\|_
\& _\|_extended_format_silver_bold_\|_
\& _\|_extended_format_white_\|_
\& _\|_extended_format_white_bg_\|_
\& _\|_extended_format_white_bold_\|_
\& _\|_extended_format_yellow_\|_
\& _\|_extended_format_yellow_bg_\|_
\& _\|_extended_format_yellow_bold_\|_
.Ve
.PP
This list can be generated using:
.PP
.Vb 1
\& print "Formats:\en", join("\en", $workbook\->get_formats()), "\en";
.Ve
.SS "get_number_sheets"
.IX Subsection "get_number_sheets"
\&\f(CW$workbook\fR\->\fBget_number_sheets()\fR; returns the number of sheets defined in call to new.
.SH "INTERAL USE ONLY"
.IX Header "INTERAL USE ONLY"
.SS "extended_autofit_columns"
.IX Subsection "extended_autofit_columns"
.SS "extended_store_string_widths"
.IX Subsection "extended_store_string_widths"
.SS "string_width_fancy"
.IX Subsection "string_width_fancy"
.SS "string_width_simple"
.IX Subsection "string_width_simple"
.SH "KNOWN ISSUES"
.IX Header "KNOWN ISSUES"
None
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Spreadsheet::WriteExcel
.PP
The fantastic module by John McNamara (jmcnamara @ cpan.org) which is the basis of this module.
The autofit code is also based on the example code that John put together.
.SH "TODO"
.IX Header "TODO"
\&\- Change autofit to cater for Bold fonts in general (ie other than the header line)
\&\- Allow for different font sizes (currently assumes Arial 10pt)
\&\- Better approach to finding the arial.ttf to allow the use of font metrics (ie with out having to specify a location)
.SH "CVS ID"
.IX Header "CVS ID"
.Vb 1
\& $Id: FitColumnWidth.pm,v 1.2 2012/04/11 11:49:17 Greg Exp $
.Ve
.SH "CVS LOG"
.IX Header "CVS LOG"
.Vb 3
\& $Log: FitColumnWidth.pm,v $
\& Revision 1.2  2012/04/11 11:49:17  Greg
\& \- Minor but annoying correction
\&
\& Revision 1.1  2012/04/10 10:46:29  Greg
\& Initial development
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\& Greg George, IT Technology Solutions P/L,
\& Email: gng@cpan.org
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-spreadsheet\-writeexcel\-extended\-fitcolumnwidth at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Spreadsheet\-WriteExcel\-Extended\-FitColumnWidth>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Spreadsheet::WriteExcel::Extended::FitColumnWidth
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Spreadsheet\-WriteExcel\-Extended\-FitColumnWidth>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Spreadsheet\-WriteExcel\-Extended\-FitColumnWidth>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Spreadsheet\-WriteExcel\-Extended\-FitColumnWidth>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Spreadsheet\-WriteExcel\-Extended\-FitColumnWidth/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
John McNamara the creator of Spreadsheet::WriteExcel and who defined the basis of
this auto column fit code
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2012 Greg George.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
