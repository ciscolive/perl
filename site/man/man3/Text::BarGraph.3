.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::BarGraph 3"
.TH Text::BarGraph 3 "2011-03-31" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::BarGraph \- Text Bar graph generator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Text::BarGraph;
\&
\&  $graph = Text::BarGraph\->new();
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
A module to create text bar graphs
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module takes as input a hash, where the keys are labels for bars on
a graph and the values are the magnitudes of those bars.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 1
\&  $graph = Text::BarGraph\->new();
\&
\&  %hash = (
\&    alpha => 30,
\&    beta  => 40,
\&    gamma => 25
\&  );
\&
\&  print $g\->graph(\e%hash);
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\fInew\fR" 4
.IX Item "new"
.Vb 1
\&  $graph = Text::BarGraph\->new();
.Ve
.Sp
The constructor.
.IP "\fIgraph\fR" 4
.IX Item "graph"
.Vb 1
\&  $graph_text = $graph\->graph(\e%data);
.Ve
.Sp
Return a graph of the data in the supplied hash. The keys in 
the hash are labels, and the values are the magnitudes.
.IP "\fIdot\fR" 4
.IX Item "dot"
.Vb 1
\&  $graph\->dot(\*(Aq.\*(Aq)
.Ve
.Sp
Set the character used in the graph.
.Sp
Default: #
.IP "\fInum\fR" 4
.IX Item "num"
.Vb 1
\&  $graph\->num(0);
.Ve
.Sp
Whether to display the numerical value of each bar
.Sp
Default: 1
.IP "\fIsortvalue\fR" 4
.IX Item "sortvalue"
.Vb 1
\&  $graph\->sortvalue("data");
.Ve
.Sp
Set what to use to sort the graph. Valid values
are \*(L"data\*(R" and \*(L"key\*(R". Key sorts by the bar's label,
data sorts by the bar's magnitude.
.Sp
Default: key
.IP "\fIsorttype\fR" 4
.IX Item "sorttype"
.Vb 1
\&  $graph\->sorttype("string");
.Ve
.Sp
Whether to sort bar labels as strings or numerically.
Valid values are \*(L"string\*(R" and \*(L"numeric\*(R". This option 
is ignored when sorting by 'data'
.Sp
Default: string
.IP "\fIzero\fR" 4
.IX Item "zero"
.Vb 1
\&  $graph\->zero(20);
.Ve
.Sp
Sets the initial value (far left) of the graph. Ignored
if autozero is set. When zero is non-zero, an extra row
will be printed to identify the minimum value.
.Sp
Default: 0
.IP "\fIautozero\fR" 4
.IX Item "autozero"
.Vb 1
\&  $graph\->autozero(1);
.Ve
.Sp
Automatically choose the initial value (far left) of
the graph. Overrides any value set with \fIzero\fR.
.Sp
Default: 0
.IP "\fImax_data\fR" 4
.IX Item "max_data"
.Vb 1
\&  $graph\->max_data(1000);
.Ve
.Sp
Forces the end of the graph (right side) to be larger
than the maximum value in the graph. If the supplied
value is less than the maximum value, it will be ignored.
.Sp
Default: 0
.IP "\fIcolumns\fR" 4
.IX Item "columns"
.Vb 1
\&  $graph\->columns(120);
.Ve
.Sp
Set the number of columns to use when displaying the graph.
This value is ignored if autosize is used.
.Sp
Default: 80
.IP "\fIautosize\fR" 4
.IX Item "autosize"
.Vb 1
\&  $graph\->autosize(0);
.Ve
.Sp
Automatically determine the size of the display. Only works if
Term::ReadKey is installed and a terminal is detected. Otherwise,
the value set by \fIcolumns\fR is used.
.Sp
Default: 1
.IP "\fIenable_color\fR" 4
.IX Item "enable_color"
.Vb 1
\&  $graph\->enable_color(1);
.Ve
.Sp
Whether to use \s-1ANSI\s0 color on the bargraph. Uses
Term::ANSIColor if it is present.
.Sp
Default: 0
.SH "AUTHOR"
.IX Header "AUTHOR"
Kirk Baucom <kbaucom@schizoid.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2011 Kirk Baucom.  All rights reserved.  This package
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
