.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Helper::ResultSet::AutoRemoveColumns 3"
.TH DBIx::Class::Helper::ResultSet::AutoRemoveColumns 3 "2020-03-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Helper::ResultSet::AutoRemoveColumns \- Automatically remove columns from a ResultSet
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package MySchema::Result::Bar;
\&
\& use strict;
\& use warnings;
\&
\& use parent \*(AqDBIx::Class::Core\*(Aq;
\&
\& _\|_PACKAGE_\|_\->table(\*(AqKittenRobot\*(Aq);
\& _\|_PACKAGE_\|_\->add_columns(
\&    id => {
\&       data_type         => \*(Aqinteger\*(Aq,
\&       is_auto_increment => 1,
\&    },
\&    kitten => {
\&       data_type         => \*(Aqinteger\*(Aq,
\&    },
\&    robot => {
\&       data_type         => \*(Aqtext\*(Aq,
\&       is_nullable       => 1,
\&    },
\&    your_mom => {
\&       data_type         => \*(Aqblob\*(Aq,
\&       is_nullable       => 1,
\&       remove_column     => 0,
\&    },
\& );
\&
\& 1;
\&
\& package MySchema::ResultSet::Bar;
\&
\& use strict;
\& use warnings;
\&
\& use parent \*(AqDBIx::Class::ResultSet\*(Aq;
\&
\& _\|_PACKAGE_\|_\->load_components(\*(AqHelper::ResultSet::AutoRemoveColumns\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This component automatically removes \*(L"heavy-weight\*(R" columns.  To be specific,
columns of type \f(CW\*(C`text\*(C'\fR, \f(CW\*(C`ntext\*(C'\fR, \f(CW\*(C`blob\*(C'\fR, \f(CW\*(C`clob\*(C'\fR, or \f(CW\*(C`bytea\*(C'\fR.  You may
use the \f(CW\*(C`remove_column\*(C'\fR key in the column info to specify directly whether or
not to remove the column automatically. See
\&\*(L"\s-1NOTE\*(R"\s0 in DBIx::Class::Helper::ResultSet for a nice way to apply it to your
entire schema.
.SH "METHODS"
.IX Header "METHODS"
.SS "_should_column_fetch"
.IX Subsection "_should_column_fetch"
.Vb 1
\& $self\->_should_column_fetch(\*(Aqkitten\*(Aq)
.Ve
.PP
returns true if a column should be fetched or not.  This fetches a column if it
is not of type \f(CW\*(C`text\*(C'\fR, \f(CW\*(C`ntext\*(C'\fR, \f(CW\*(C`blob\*(C'\fR, \f(CW\*(C`clob\*(C'\fR, or \f(CW\*(C`bytea\*(C'\fR or the
\&\f(CW\*(C`remove_column\*(C'\fR is set to true.  If you only wanted to explicitly state which
columns to remove you might override this method like this:
.PP
.Vb 2
\& sub _should_column_fetch {
\&    my ( $self, $column ) = @_;
\&
\&    my $info = $self\->column_info($column);
\&
\&    return !defined $info\->{remove_column} || $info\->{remove_column};
\& }
.Ve
.SS "fetchable_columns"
.IX Subsection "fetchable_columns"
simply returns a list of columns that are fetchable.
.SH "AUTHOR"
.IX Header "AUTHOR"
Arthur Axel \*(L"fREW\*(R" Schmidt <frioux+cpan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Arthur Axel \*(L"fREW\*(R" Schmidt.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
