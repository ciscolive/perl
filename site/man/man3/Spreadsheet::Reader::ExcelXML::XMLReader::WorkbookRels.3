.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::ExcelXML::XMLReader::WorkbookRels 3"
.TH Spreadsheet::Reader::ExcelXML::XMLReader::WorkbookRels 3 "2017-04-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::ExcelXML::XMLReader::WorkbookRels \-  Workbook Rels XML file unique reader
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        use Types::Standard qw( HashRef );
\&        use MooseX::ShortCut::BuildInstance qw( build_instance );
\&        my      $workbook_instance = build_instance(
\&                        package => \*(AqSpreadsheet::Reader::ExcelXML::Workbook\*(Aq,
\&                        add_attributes =>{
\&                                _rel_lookup =>{
\&                                        isa             => HashRef,
\&                                        traits  => [\*(AqHash\*(Aq],
\&                                        handles =>{ get_rel_info => \*(Aqget\*(Aq, },
\&                                        default => sub{ {
\&                                                \*(AqrId2\*(Aq => \*(AqSheet5\*(Aq,
\&                                                \*(AqrId3\*(Aq => \*(AqSheet1\*(Aq,
\&                                                \*(AqrId1\*(Aq => \*(AqSheet2\*(Aq
\&                                        } },
\&                                },
\&                                _sheet_lookup =>{
\&                                        isa             => HashRef,
\&                                        traits  => [\*(AqHash\*(Aq],
\&                                        handles =>{ get_sheet_info => \*(Aqget\*(Aq, },
\&                                        default => sub{ {
\&                                                \*(AqSheet1\*(Aq => {
\&                                                        \*(Aqsheet_id\*(Aq => \*(Aq1\*(Aq,
\&                                                        \*(Aqsheet_position\*(Aq => 2,
\&                                                        \*(Aqsheet_name\*(Aq => \*(AqSheet1\*(Aq,
\&                                                        \*(Aqis_hidden\*(Aq => 0,
\&                                                        \*(Aqsheet_rel_id\*(Aq => \*(AqrId3\*(Aq
\&                                                },
\&                                                \*(AqSheet2\*(Aq => {
\&                                                        \*(Aqsheet_position\*(Aq => 0,
\&                                                        \*(Aqsheet_name\*(Aq => \*(AqSheet2\*(Aq,
\&                                                        \*(Aqsheet_id\*(Aq => \*(Aq2\*(Aq,
\&                                                        \*(Aqsheet_rel_id\*(Aq => \*(AqrId1\*(Aq,
\&                                                        \*(Aqis_hidden\*(Aq => 0
\&                                                },
\&                                                \*(AqSheet5\*(Aq => {
\&                                                        \*(Aqsheet_position\*(Aq => 1,
\&                                                        \*(Aqsheet_name\*(Aq => \*(AqSheet5\*(Aq,
\&                                                        \*(Aqsheet_id\*(Aq => \*(Aq3\*(Aq,
\&                                                        \*(Aqsheet_rel_id\*(Aq => \*(AqrId2\*(Aq,
\&                                                        \*(Aqis_hidden\*(Aq => 1
\&                                                }
\&                                        } },
\&                                },
\&                        },
\&                        add_methods =>{
\&                                get_sheet_names => sub{ [
\&                                        \*(AqSheet2\*(Aq,
\&                                        \*(AqSheet5\*(Aq,
\&                                        \*(AqSheet1\*(Aq
\&                                ] },
\&                        }
\&                );
\&        my      $file_handle = File::Temp\->new();
\&        print $file_handle \*(Aq<?xml version="1.0"?><NO_FILE/>\*(Aq;# The rels meta data is inferred, not parsed
\&        my      $rels_instance =  build_instance(
\&                        superclasses    => [\*(AqSpreadsheet::Reader::ExcelXML::XMLReader\*(Aq],
\&                        package => \*(AqWorkbookRelsInterface\*(Aq,
\&                        add_roles_in_sequence =>[
\&                                \*(AqSpreadsheet::Reader::ExcelXML::XMLReader::WorkbookRels\*(Aq,
\&                                \*(AqSpreadsheet::Reader::ExcelXML::WorkbookRelsInterface\*(Aq,
\&                        ],
\&                        file => $file_handle,
\&                        workbook_inst => $workbook_instance,
\&                );
\&        print Dumper( $rels_instance\->get_worksheet_list );
\&
\&        ###########################
\&        # SYNOPSIS Screen Output
\&        # 01: $VAR1 = [
\&        # 02:   \*(AqSheet2\*(Aq,
\&        # 03:   \*(AqSheet5\*(Aq,
\&        # 04:   \*(AqSheet1\*(Aq
\&        # 05: ]
\&        ###########################
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation is written to explain ways to use this module when writing your own
excel parser.  To use the general package for excel parsing out of the box please review
the documentation for Workbooks,
Worksheets, and
Cells
.PP
This is the \s-1XML\s0 based file adaptor for reading the workbook rels data and then updating
the general workbook metadata.  All the rels data for flat xml files is inferred so the
primary function is to transform the previously stored meta data for the rels stage.
The transformed data is then accesable through Methods.  The goal is to
standardize the outputs of this transformation metadata from non standard inputs.
.SS "Required Methods"
.IX Subsection "Required Methods"
These are the methods required by the role.  A link to the default implementation of
these methods is provided.
.PP
\&\*(L"get_sheet_info( \f(CW$name\fR )\*(R" in Spreadsheet::Reader::ExcelXML
.PP
\&\*(L"get_sheet_names\*(R" in Spreadsheet::Reader::ExcelXML
.PP
\&\*(L"good_load( \f(CW$state\fR )\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.SS "Methods"
.IX Subsection "Methods"
These are the methods provided by this role (only).
.PP
\fIload_unique_bits\fR
.IX Subsection "load_unique_bits"
.Sp
.RS 4
\&\fBDefinition:\fR This role is meant to run on top of Spreadsheet::Reader::ExcelXML::XMLReader.
When it does the reader will call this function as available when it first starts the file.
Therefore this is where the unique Metadata for this file is found and stored. (in the
attributes)
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR nothing
.RE
.PP
\fIget_sheet_lookup\fR
.IX Subsection "get_sheet_lookup"
.Sp
.RS 4
\&\fBDefinition:\fR The sheet lookup is a hashref with keys as sheet names and the values are a sub
hashref with \f(CW$key\fR => \f(CW$value\fR pairs of sheet meta data containing information like hiddeness and
location.  This method returns the full set.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR a full hashref of hashrefs
.RE
.PP
\fIget_worksheet_list\fR
.IX Subsection "get_worksheet_list"
.Sp
.RS 4
\&\fBDefinition:\fR returns an ordered arrayref conataining only worksheet names in their visible order
from the Excel workbook.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR an arrayref of names
.RE
.PP
\fIget_chartsheet_list\fR
.IX Subsection "get_chartsheet_list"
.Sp
.RS 4
\&\fBDefinition:\fR returns an ordered arrayref conataining only chartsheet names in their visible order
from the Excel workbook.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR an arrayref of names
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::Reader::ExcelXML/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing currently
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Spreadsheet::Reader::ExcelXML \- the package
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::Read \- generic Spreadsheet reader
.Sp
Spreadsheet::ParseExcel \- Excel binary version 2003 and earlier (.xls files)
.Sp
Spreadsheet::XLSX \- Excel version 2007 and later
.Sp
Spreadsheet::ParseXLSX \- Excel version 2007 and later
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
