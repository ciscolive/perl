.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Process::Status 3"
.TH Process::Status 3 "2020-04-08" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Process::Status \- a handle on process termination, like $?
.SH "VERSION"
.IX Header "VERSION"
version 0.009
.SH "OVERVIEW"
.IX Header "OVERVIEW"
When you run a system command with \f(CW\*(C`system\*(C'\fR or \f(CW\*(C`qx\`\`\*(C'\fR or a number of other
mechanisms, the process termination status gets put into \f(CW$?\fR as an integer.
In C, it's just an integer, and it stores a few pieces of data in different
bits.
.PP
Process::Status just provides a few simple methods to make it easier to
inspect.  It exists almost entirely to provide \f(CW\*(C`as_struct\*(C'\fR and \f(CW\*(C`as_string\*(C'\fR,
which provide a simple decomposition of \f(CW$?\fR.
.PP
Methods called on \f(CW\*(C`Process::Status\*(C'\fR without first calling a constructor will
work on an implicitly-constructed object using the current value of \f(CW$?\fR.  To
get an object for a specific value, you can call \f(CW\*(C`new\*(C'\fR and pass an integer.
You can also call \f(CW\*(C`new\*(C'\fR with no arguments to get an object for the current
value of \f(CW$?\fR, if you want to keep that ugly variable out of your code.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 2
\&  my $ps = Process::Status\->new( $status );
\&  my $ps = Process::Status\->new; # acts as if you\*(Aqd passed $?
.Ve
.SS "status_code"
.IX Subsection "status_code"
This returns the value of the integer return value, as you might have found in
\&\f(CW$?\fR.
.SS "is_success"
.IX Subsection "is_success"
This method returns true if the status code is zero.
.SS "exitstatus"
.IX Subsection "exitstatus"
This method returns the exit status encoded in the status.  In other words,
it's the number in the top eight bits.
.SS "signal"
.IX Subsection "signal"
This returns the signal caught by the process, or zero.
.SS "cored"
.IX Subsection "cored"
This method returns true if the process dumped core.
.SS "as_struct"
.IX Subsection "as_struct"
This method returns a hashref describing the status.  Its exact contents may
change over time; it is meant for human, not computer, consumption.
.SS "as_string"
.IX Subsection "as_string"
This method returns a string describing the status.  Its exact contents may
change over time; it is meant for human, not computer, consumption.
.PP
Roughly, you might get things like this:
.PP
.Vb 4
\&  exited 0
\&  exited 92
\&  exited 2, caught SIGDERP
\&  exited 2, caught SIGSEGV; dumped core
.Ve
.SS "assert_ok"
.IX Subsection "assert_ok"
.Vb 1
\&  Process::Status\->assert_ok($program_name);
.Ve
.PP
This method does nothing if \f(CW$?\fR is 0.  Otherwise, it croaks with a message
like:
.PP
.Vb 1
\&  your\-program\-name exited 13, caught SIGNES
.Ve
.PP
If a program name is not provided, \*(L"program\*(R" is used.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo Signes <rjbs@cpan.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Michael McClimon <michael@mcclimon.org>
.IP "\(bu" 4
Ricardo Signes <rjbs@semiotic.systems>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
