.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Walk::Extracted::Dispatch 3"
.TH Data::Walk::Extracted::Dispatch 3 "2016-08-16" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Walk::Extracted::Dispatch \- Dispatch table management
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&        package Data::Walk::Extracted;
\&        use Moose;
\&        with \*(AqData::Walk::Extracted::Dispatch\*(Aq;
\&
\&        my      $main_down_level_data ={
\&                        ###### Purpose: Used to build the generic elements of the next passed ref down
\&                        ###### Recieves: the upper ref value
\&                        ###### Returns: the lower ref value or undef
\&                        name => \*(Aq\- Extracted \- main down level data\*(Aq,
\&                        DEFAULT => sub{ undef },
\&                        before_method => sub{ return $_[1] },
\&                        after_method => sub{ return $_[1] },
\&                        branch_ref => \e&_main_down_level_branch_ref,
\&                };
\&
\&
\&        for my $key ( keys %$upper_ref ){
\&                my $return =    $self\->_dispatch_method(
\&                                                        $main_down_level_data, $key, $upper_ref\->{$key},
\&                                                );
\&                $lower_ref\->{$key} = $return if defined $return;
\&        }
\&
\&        ### this example will not run on it\*(Aqs own it just demonstrates usage!
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This role only serves the purpose of standardizing the handling of dispatch tables.  It
will first attempt to call the passed dispatch call.  If it cannot find it then it will
attempt a '\s-1DEFAULT\s0' call after which it will 'confess' to failure.
.SH "Methods"
.IX Header "Methods"
.ie n .SS "_dispatch_method( $dispatch_ref, $call, @arg_list ) \- internal"
.el .SS "_dispatch_method( \f(CW$dispatch_ref\fP, \f(CW$call\fP, \f(CW@arg_list\fP ) \- internal"
.IX Subsection "_dispatch_method( $dispatch_ref, $call, @arg_list ) - internal"
.RS 4
\&\fBDefinition:\fR To make a class extensible, the majority of the decision points
can be managed by (hash) dispatch tables.  In order to have the dispatch behavior
common across all methods this role can be attached to the class to provided for
common dispatching.  If the hash key requested is not available then the dispatch
method will attempt to call '\s-1DEFAULT\s0'.  If both fail the method will 'confess'.
.Sp
\&\fBAccepts:\fR This method expects to be called by \f(CW$self\fR.  It first receives the
dispatch table (hash) as a data reference. Next, the target hash key is accepted as
\&\f(CW$call\fR.  Finally, any arguments needed by the dispatch table are passed through in
\&\f(CW@arg_list\fR.  if the dispatch table has a name => key the value will be used in any
confessed error message.
.Sp
\&\fBReturns:\fR defined by the dispatch (hash) table
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing yet!
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Data\-Walk\-Extracted/issues <https://github.com/jandrew/Data-Walk-Extracted/issues>
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2013, 2016 by Jed Lund.
.SH "Dependencies"
.IX Header "Dependencies"
.RS 4
version
.Sp
utf8
.Sp
Carp \- confess
.Sp
Moose::Role
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Log::Shiras::Unhide \- Can use to unhide '###InternalExtracteDDispatcH' tags
.Sp
Log::Shiras::TapWarn \- to manage the output of exposed '###InternalExtracteDDispatcH' lines
.Sp
Data::Walk::Extracted
.RE
