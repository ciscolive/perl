.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::CLI::Command::Help 3"
.TH Term::CLI::Command::Help 3 "2019-11-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::CLI::Command::Help \- A generic 'help' command for Term::CLI
.SH "VERSION"
.IX Header "VERSION"
version 0.051007
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Term::CLI;
\&
\& my $cli = Term::CLI\->new(
\&    name => \*(Aqmyapp\*(Aq,
\&    prompt => \*(Aqmyapp> \*(Aq,
\&    commands => [
\&        Term::CLI::Command::Help\->new(),
\&        Term::CLI::Command\->new( name => \*(Aqcopy\*(Aq, ... ),
\&        Term::CLI::Command\->new( name => \*(Aqmove\*(Aq, ... ),
\&    ],
\& );
\&
\& $cli\->execute(\*(Aqhelp\*(Aq);
\& # \-> command summary
\&
\& say "\en\-\-\-\-\en";
\&
\& $cli\->execute(\*(Aqhelp copy\*(Aq);
\& # \-> detailed help on \*(Aqcopy\*(Aq.
.Ve
.PP
(See \s-1EXAMPLE\s0 for a working example.)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Term::CLI::Command::Help\*(C'\fR class is derived from Term::CLI::Command(3p) and implements
a generic \*(L"help\*(R" command for Term::CLI(3p) applications.
.PP
The \f(CW\*(C`help\*(C'\fR command accepts arguments that it will try to match against the commands of its 
Term::CLI(3p) parent.
.PP
It supports completion, as well as a \f(CW\*(C`\-\-pod\*(C'\fR parameter to dump raw \s-1POD\s0 text.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.IP "\fBnew\fR" 4
.IX Xref "new"
.IX Item "new"
Create a new \f(CW\*(C`Term::CLI::Command::Help\*(C'\fR object and return a reference to it.
.Sp
The object provides appropriate default values for all attributes, so there is
no need to provide any.
.Sp
If you want, you can override the default attributes; in that case, see the
Term::CLI::Command(3p) documentation. Attributes that are \*(L"safe\*(R" to override
are:
.RS 4
.IP "\fBdescription\fR => \fIStr\fR" 4
.IX Item "description => Str"
Override the default description for the \f(CW\*(C`help\*(C'\fR command.
.IP "\fBname\fR => \fIStr\fR" 4
.IX Item "name => Str"
Override the name for the help command. Default is \f(CW\*(C`help\*(C'\fR.
.IP "\fBpager\fR => \fIArrayRef\fR[\fIStr\fR]" 4
.IX Item "pager => ArrayRef[Str]"
Override the default pager for help display. See
\&\s-1OUTPUT PAGING\s0. The value should
be a command line split on words, e.g.:
.Sp
.Vb 1
\&    OBJ\->pager( [ \*(Aqcat\*(Aq, \*(Aq\-n\*(Aq, \*(Aq\-e\*(Aq ] );
.Ve
.Sp
If an empty list is provided, no external pager will
be used, and output is printed to \fI\s-1STDOUT\s0\fR directly.
.Sp
See also the pager method.
.IP "\fBsummary\fR =>" 4
.IX Item "summary =>"
Override the default summary for the \f(CW\*(C`help\*(C'\fR command.
.IP "\fBusage\fR =>" 4
.IX Item "usage =>"
Override the automatic usage string for the \f(CW\*(C`help\*(C'\fR command.
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBpager\fR ( [ \fIArrayRef\fR[\fIStr\fR]> ] )" 4
.IX Xref "pager"
.IX Item "pager ( [ ArrayRef[Str]> ] )"
Get or set the pager command.
If an empty list is provided, no external pager will
be used, and output is printed to \fI\s-1STDOUT\s0\fR directly.
.Sp
Example:
.Sp
.Vb 2
\&    $help_cmd\->pager([]); # Print directly to STDOUT.
\&    $help_cmd\->pager([ \*(Aqcat\*(Aq, \*(Aq\-n\*(Aq ]); # Number output lines.
.Ve
.SH "OUTPUT FORMATTING"
.IX Header "OUTPUT FORMATTING"
Help text is assumed to be in \s-1POD\s0 format, and will be formatted
for the terminal using Pod::Text::Termcap(3p).
.SH "OUTPUT PAGING"
.IX Header "OUTPUT PAGING"
The \f(CW\*(C`help\*(C'\fR command will try to pipe the formatted output through a suitable
pager.
.PP
At startup, the pager is selected from the following list, in order of
preference: less, more, pg, \fI\s-1STDOUT\s0\fR.
.PP
This can be overridden by supplying a value to the object's pager
attribute.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Using the following code:
.PP
.Vb 1
\&    use Term::CLI;
\&
\&    my $cli = Term::CLI\->new(
\&        name => \*(Aqmyapp\*(Aq,
\&        prompt => \*(Aqmyapp> \*(Aq,
\&        commands => [
\&            Term::CLI::Command::Help\->new(),
\&
\&            Term::CLI::Command\->new(
\&                name => \*(Aqcopy\*(Aq,
\&                options => [ \*(Aqverbose!\*(Aq ],
\&                summary => \*(Aqcopy I<src> to I<dst>\*(Aq,
\&                description =>
\&                    qq{Copy I<src> to I<dst>.\en}
\&                    .qq{Show progress if C<\-\-verbose> is given.},
\&                arguments => [
\&                    Term::CLI::Argument::Filename\->new(name => \*(Aqsrc\*(Aq),
\&                    Term::CLI::Argument::Filename\->new(name => \*(Aqdst\*(Aq),
\&                ],
\&            ),
\&            Term::CLI::Command\->new(
\&                name => \*(Aqmove\*(Aq,
\&                options => [ \*(Aqverbose!\*(Aq ],
\&                summary => \*(Aqmove I<src> to I<dst>\*(Aq,
\&                description =>
\&                    qq{Move I<src> to I<dst>.\en}
\&                    .qq{Move progress if C<\-\-verbose> is given.},
\&                arguments => [
\&                    Term::CLI::Argument::Filename\->new(name => \*(Aqsrc\*(Aq),
\&                    Term::CLI::Argument::Filename\->new(name => \*(Aqdst\*(Aq),
\&                ],
\&            )
\&        ],
\&    );
\&
\&    say "\en\-\-\-\-\en";
\&
\&    $cli\->execute(\*(Aqhelp\*(Aq);
\&    # \-> command summary
\&
\&    say "\en\-\-\-\-\en";
\&
\&    $cli\->execute(\*(Aqhelp copy\*(Aq);
\&    # \-> detailed help on \*(Aqcopy\*(Aq.
.Ve
.PP
The output would look something like this:
.PP
.Vb 1
\&    \-\-\-\-
\&
\&      Commands:
\&        help [cmd ...]                      Show help.
\&        copy src dst                        copy src to dst
\&        move src dst                        move src to dst
\&
\&    \-\-\-\-
\&
\&      Usage:
\&        copy [\-\-verbose] src dst
\&
\&      Description:
\&        Copy src to dst. Show progress if "\-\-verbose" is given.
\&
\&    \-\-\-\-
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
cat(1),
less(1),
more(1),
perlpod(1),
pg(1),
Pod::Text::Termcap(3p).
Term::CLI(3p),
Term::CLI::Command(3p).
.SH "AUTHOR"
.IX Header "AUTHOR"
Steven Bakker <sbakker@cpan.org>, 2018.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2018 Steven Bakker
.PP
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See \*(L"perldoc perlartistic.\*(R"
.PP
This software is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
