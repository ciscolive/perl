.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Selenium::Remote::Driver 3"
.TH Selenium::Remote::Driver 3 "2020-10-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Selenium::Remote::Driver \- Perl Client for Selenium Remote Driver
.SH "VERSION"
.IX Header "VERSION"
version 1.38
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Selenium::Remote::Driver;
\&
\&    my $driver = Selenium::Remote::Driver\->new;
\&    $driver\->get(\*(Aqhttp://www.google.com\*(Aq);
\&    print $driver\->get_title();
\&    $driver\->quit();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Selenium is a test tool that allows you to write
automated web application \s-1UI\s0 tests in any programming language against
any \s-1HTTP\s0 website using any mainstream JavaScript-enabled browser. This module is
an implementation of the client for the Remote driver that Selenium provides.
You can find bindings for other languages at this location:
.PP
<https://www.seleniumhq.org/download/>
.PP
This module sends commands directly to the Server using \s-1HTTP.\s0 Using this module
together with the Selenium Server, you can automatically control any supported
browser. To use this module, you need to have already downloaded and started
the Selenium Server (Selenium Server is a Java application).
.SH "USAGE"
.IX Header "USAGE"
.SS "Without Standalone Server"
.IX Subsection "Without Standalone Server"
As of v0.25, it's possible to use this module without a standalone
server \- that is, you would not need the \s-1JRE\s0 or the \s-1JDK\s0 to run your
Selenium tests. See Selenium::Chrome, Selenium::PhantomJS,
Selenium::Edge, Selenium::InternetExplorer,and Selenium::Firefox
for details. If you'd like additional browsers besides these,
give us a holler over in
Github <https://github.com/teodesian/Selenium-Remote-Driver/issues>.
.SS "Remote Driver Response"
.IX Subsection "Remote Driver Response"
Selenium::Remote::Driver uses the
JsonWireProtocol <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol>
And the
\&\s-1WC3\s0 WebDriver Protocol <https://www.w3.org/TR/webdriver/>
to communicate with the Selenium Server. If an error occurs while
executing the command then the server sends back an \s-1HTTP\s0 error code
with a \s-1JSON\s0 encoded reponse that indicates the precise
Response Error Code <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#response-status-codes>.
The module will then croak with the error message associated with this
code. If no error occurred, then the subroutine called will return the
value sent back from the server (if a return value was sent).
.PP
So a rule of thumb while invoking methods on the driver is if the method did not
croak when called, then you can safely assume the command was successful even if
nothing was returned by the method.
.SS "WebElement"
.IX Subsection "WebElement"
Selenium Webdriver represents all the \s-1HTML\s0 elements as WebElement, which is
in turn represented by Selenium::Remote::WebElement module. So any method that
deals with WebElements will return and/or expect WebElement object. The \s-1POD\s0 for
that module describes all the methods that perform various actions on the
WebElements like click, submit etc.
.PP
To interact with any WebElement you have to first \*(L"find\*(R" it, read the \s-1POD\s0 for
find_element or find_elements for further info. Once you find the required element
then you can perform various actions. If you don't call find_* method first, all
your further actions will fail for that element. Finally, just remember that you
don't have to instantiate WebElement objects at all \- they will be automatically
created when you use the find_* methods.
.PP
A sub-class of Selenium::Remote::WebElement may be used instead of Selenium::Remote::WebElement,
by providing that class name as an option the constructor:
.PP
.Vb 1
\&   my $driver = Selenium::Remote::Driver\->new( webelement_class => ... );
.Ve
.PP
For example, a testing-subclass may extend the web-element object with testing methods.
.SS "\s-1LWP\s0 Read Timeout errors"
.IX Subsection "LWP Read Timeout errors"
It's possible to make Selenium calls that take longer than the default
LWP::UserAgent timeout. For example, setting the asynchronous
script timeout greater than the LWP::UserAgent timeout and then
executing a long running asynchronous snippet of javascript will
immediately trigger an error like:
.PP
.Vb 2
\&    Error while executing command: executeAsyncScript: Server returned
\&    error message read timeout at...
.Ve
.PP
You can get around this by configuring \s-1LWP\s0's timeout value, either by
constructing your own \s-1LWP\s0 and passing it in to ::Driver during
instantiation
.PP
.Vb 3
\&    my $timeout_ua = LWP::UserAgent\->new;
\&    $timeout_ua\->timeout(360); # this value is in seconds!
\&    my $d = Selenium::Remote::Driver\->new( ua => $timeout_ua );
.Ve
.PP
or by configuring the timeout on the fly as necessary:
.PP
.Vb 2
\&    use feature qw/say/;
\&    use Selenium::Remote::Driver;
\&
\&    my $d = Selenium::Remote::Driver\->new;
\&    say $d\->ua\->timeout; # 180 seconds is the default
\&
\&    $d\->ua\->timeout(2); # LWP wants seconds, not milliseconds!
\&    $d\->set_timeout(\*(Aqscript\*(Aq, 1000); # S::R::D wants milliseconds!
\&
\&    # Async scripts only return when the callback is invoked. Since there
\&    # is no callback here, Selenium will block for the entire duration of
\&    # the async timeout script. This will hit Selenium\*(Aqs async script
\&    # timeout before hitting LWP::UserAgent\*(Aqs read timeout
\&    $d\->execute_async_script(\*(Aqreturn "hello"\*(Aq);
\&
\&    $d\->quit;
.Ve
.SH "TESTING"
.IX Header "TESTING"
If are writing automated tests using this module, you may be
interested in Test::Selenium::Remote::Driver which is also included
in this distribution. It includes convenience testing methods for many
of the selenum methods available here.
.PP
Your other option is to use this module in conjunction with your
choice of testing modules, like Test::Spec or Test::More as
you please.
.SH "WC3 WEBDRIVER COMPATIBILITY"
.IX Header "WC3 WEBDRIVER COMPATIBILITY"
\&\s-1WC3\s0 Webdriver is a constantly evolving standard, so some things may or may not work at any given time.
.PP
Furthermore, out of date drivers probably identify as \s-1WD3,\s0 while only implementing a few methods and retaining JSONWire functionality.
One way of dealing with this is setting:
.PP
.Vb 1
\&    $driver\->{is_wd3} = 0
.Ve
.PP
Of course, this will prevent access of any new \s-1WC3\s0 methods, but will probably make your tests pass until your browser's driver gets it's act together.
.PP
There are also some JSONWire behaviors that we emulate in methods, such as Selenium::Remote::WebElement::get_attribute.
You can get around that by passing an extra flag to the sub, or setting:
.PP
.Vb 1
\&    $driver\->{emulate_jsonwire} = 0;
.Ve
.PP
When in \s-1WC3\s0 Webdriver mode.
.SS "\s-1FINDERS\s0"
.IX Subsection "FINDERS"
This constant is a hashref map of the old element finder aliases from wd2 to wd3.
.PP
.Vb 2
\&    use Data::Dumper;
\&    print Dumper($Selenium::Remote::Driver::FINDERS);
.Ve
.SS "\s-1WC3 WEBDRIVER CURRENT STATUS\s0"
.IX Subsection "WC3 WEBDRIVER CURRENT STATUS"
That said, the following 'sanity tests' in the at/ (acceptance test) directory of the module passed on the following versions:
.IP "Selenium Server: 3.8.1 \- all tests" 4
.IX Item "Selenium Server: 3.8.1 - all tests"
.PD 0
.IP "geckodriver: 0.19.1 \- at/sanity.test, at/firefox.test (Selenium::Firefox)" 4
.IX Item "geckodriver: 0.19.1 - at/sanity.test, at/firefox.test (Selenium::Firefox)"
.IP "chromedriver: 2.35 \- at/sanity\-chrome.test, at/chrome.test (Selenium::Chrome)" 4
.IX Item "chromedriver: 2.35 - at/sanity-chrome.test, at/chrome.test (Selenium::Chrome)"
.IP "edgedriver: 5.16299 \- at/sanity\-edge.test" 4
.IX Item "edgedriver: 5.16299 - at/sanity-edge.test"
.IP "InternetExplorerDriver : 3.8.1 \- at/sanity\-ie.test (be sure to enable 'allow local files to run active content in your 'advanced settings' pane)" 4
.IX Item "InternetExplorerDriver : 3.8.1 - at/sanity-ie.test (be sure to enable 'allow local files to run active content in your 'advanced settings' pane)"
.IP "safaridriver : 11.0.2 \- at/sanity\-safari.test (be sure to enable 'allow automated testing' in the developer menu) \*(-- it appears \s-1WC3\s0 spec is *unimplemented*" 4
.IX Item "safaridriver : 11.0.2 - at/sanity-safari.test (be sure to enable 'allow automated testing' in the developer menu) it appears WC3 spec is *unimplemented*"
.PD
.PP
These tests are intended to be run directly against a working selenium server on the local host with said drivers configured.
.PP
If you are curious as to what 'works and does not' on your driver versions (and a few other quirks),
it is strongly encouraged you look at where the test calls the methods you are interested in.
.PP
While other browsers/drivers (especially legacy ones) likely work fine as well,
any new browser/driver will likely have problems if it's not listed above.
.PP
There is also a 'legacy.test' file available to run against old browsers/selenium (2.x servers, pre geckodriver).
This should only be used to verify backwards-compatibility has not been broken.
.SS "Firefox Notes"
.IX Subsection "Firefox Notes"
If you are intending to pass extra_capabilities to firefox on a \s-1WD3\s0 enabled server with geckodriver, you \s-1MUST\s0 do the following:
.PP
.Vb 1
\&   $Selenium::Remote::Driver::FORCE_WD3=1;
.Ve
.PP
This is because the gecko driver prefers legacy capabilities, both of which are normally passed for compatibility reasons.
.SS "Chrome Notes"
.IX Subsection "Chrome Notes"
Use the option goog:chromeOptions instead of chromeOptions, if you are intending to pass extra_capabilities on a
\&\s-1WD3\s0 enabled server with chromedriver enabled.
.PP
.Vb 1
\&    https://sites.google.com/a/chromium.org/chromedriver/capabilities
.Ve
.PP
Also, if you instantiate the object in \s-1WC3\s0 mode (which is the default), the remote driver will throw exceptions you have no choice but to catch,
rather than falling back to JSONWire methods where applicable like geckodriver does.
.PP
As of chrome 75 (and it's appropriate driver versions), the \s-1WC3\s0 spec has finally been implemented.
As such, to use chrome older than this, you will have to manually force on JSONWire mode:
.PP
.Vb 1
\&    $Selenium::Remote::Driver::FORCE_WD2=1;
.Ve
.SS "Notes on Running Selenium at Scale via selenium.jar"
.IX Subsection "Notes on Running Selenium at Scale via selenium.jar"
When running many, many tests in parallel you can eventually reach resource exhaustion.
You have to instruct the Selenium \s-1JAR\s0 to do some cleanup to avoid explosions:
.PP
Inside of your selenium server's node.json (running a grid), you would put in the following:
.PP
\&\*(L"configuration\*(R" :
{
\&\*(L"cleanUpCycle\*(R":2000
}
Or run the selenium jar with the \-cleanupCycle parameter. Of course use whatever # of seconds is appropriate to your situation.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SS "new"
.IX Subsection "new"
Dies if communication with the selenium server cannot be established.
.PP
Input: (all optional)
.PP
Desired capabilities \- \s-1HASH\s0 \- Following options are accepted:
.IP "\fBremote_server_addr\fR \- <string>   \- \s-1IP\s0 or \s-1FQDN\s0 of the Webdriver server machine. Default: 'localhost'" 4
.IX Item "remote_server_addr - <string> - IP or FQDN of the Webdriver server machine. Default: 'localhost'"
.PD 0
.IP "\fBport\fR               \- <string>   \- Port on which the Webdriver server is listening. Default: 4444" 4
.IX Item "port - <string> - Port on which the Webdriver server is listening. Default: 4444"
.IP "\fBbrowser_name\fR       \- <string>   \- desired browser string: {phantomjs|firefox|internet explorer|MicrosoftEdge|safari|htmlunit|iphone|chrome}" 4
.IX Item "browser_name - <string> - desired browser string: {phantomjs|firefox|internet explorer|MicrosoftEdge|safari|htmlunit|iphone|chrome}"
.IP "\fBversion\fR            \- <string>   \- desired browser version number" 4
.IX Item "version - <string> - desired browser version number"
.IP "\fBplatform\fR           \- <string>   \- desired platform: {WINDOWS|XP|VISTA|MAC|LINUX|UNIX|ANY}" 4
.IX Item "platform - <string> - desired platform: {WINDOWS|XP|VISTA|MAC|LINUX|UNIX|ANY}"
.IP "\fBaccept_ssl_certs\fR   \- <boolean>  \- whether \s-1SSL\s0 certs should be accepted, default is true." 4
.IX Item "accept_ssl_certs - <boolean> - whether SSL certs should be accepted, default is true."
.IP "\fBfirefox_profile\fR    \- Profile    \- Use Selenium::Firefox::Profile to create a Firefox profile for the browser to use." 4
.IX Item "firefox_profile - Profile - Use Selenium::Firefox::Profile to create a Firefox profile for the browser to use."
.IP "\fBjavascript\fR         \- <boolean> \- Whether or not to use Javascript.  You probably won't disable this, as you would be using WWW::Mechanize instead.  Default: True" 4
.IX Item "javascript - <boolean> - Whether or not to use Javascript. You probably won't disable this, as you would be using WWW::Mechanize instead. Default: True"
.IP "\fBauto_close\fR         \- <boolean> \- Whether to automatically close the browser session on the server when the object goes out of scope. Default: False." 4
.IX Item "auto_close - <boolean> - Whether to automatically close the browser session on the server when the object goes out of scope. Default: False."
.IP "\fBdefault_finder\fR     \- <string> \- Default method by which to evaluate selectors.  Default: 'xpath'" 4
.IX Item "default_finder - <string> - Default method by which to evaluate selectors. Default: 'xpath'"
.IP "\fBsession_id\fR         \- <string> \- Provide a Session \s-1ID\s0 to highjack a browser session on the remote server.  Useful for micro-optimizers.  Default: undef" 4
.IX Item "session_id - <string> - Provide a Session ID to highjack a browser session on the remote server. Useful for micro-optimizers. Default: undef"
.IP "\fBpageLoadStrategy\fR   \- \s-1STRING\s0   \- \s-1OPTIONAL,\s0 'normal|eager|none'. default 'normal'. WebDriver3 only." 4
.IX Item "pageLoadStrategy - STRING - OPTIONAL, 'normal|eager|none'. default 'normal'. WebDriver3 only."
.IP "\fBextra_capabilities\fR \- \s-1HASH\s0     \- Any other extra capabilities.  Accepted keys will vary by browser.  If firefox_profile is passed, the args (or profile) key will be overwritten, depending on how it was passed." 4
.IX Item "extra_capabilities - HASH - Any other extra capabilities. Accepted keys will vary by browser. If firefox_profile is passed, the args (or profile) key will be overwritten, depending on how it was passed."
.PD
.PP
On WebDriver3 the 'extra_capabilities' will be automatically converted into the parameter needed by your browser.
For example, extra_capabilities is passed to the server as the moz:firefoxOptions parameter.
.PP
You can also specify some options in the constructor hash that are
not part of the browser-related desired capabilities.
.IP "\fBauto_close\fR        \- <boolean>   \- whether driver should end session on remote server on close." 4
.IX Item "auto_close - <boolean> - whether driver should end session on remote server on close."
.PD 0
.ie n .IP "\fBbase_url\fR          \- <string>    \- \s-1OPTIONAL,\s0 base url for the website Selenium acts on. This can save you from repeating the domain in every call to $driver\->\fBget()\fR" 4
.el .IP "\fBbase_url\fR          \- <string>    \- \s-1OPTIONAL,\s0 base url for the website Selenium acts on. This can save you from repeating the domain in every call to \f(CW$driver\fR\->\fBget()\fR" 4
.IX Item "base_url - <string> - OPTIONAL, base url for the website Selenium acts on. This can save you from repeating the domain in every call to $driver->get()"
.IP "\fBdefault_finder\fR    \- <string>    \- choose default finder used for find_element* {class|class_name|css|id|link|link_text|name|partial_link_text|tag_name|xpath}" 4
.IX Item "default_finder - <string> - choose default finder used for find_element* {class|class_name|css|id|link|link_text|name|partial_link_text|tag_name|xpath}"
.IP "\fBinner_window_size\fR \- <aref[Int]> \- An array ref [ height, width ] that the browser window should use as its initial size immediately after instantiation" 4
.IX Item "inner_window_size - <aref[Int]> - An array ref [ height, width ] that the browser window should use as its initial size immediately after instantiation"
.ie n .IP "\fBerror_handler\fR     \- \s-1CODEREF\s0     \- A \s-1CODEREF\s0 that we will call in event of any exceptions. See ""error_handler"" for more details." 4
.el .IP "\fBerror_handler\fR     \- \s-1CODEREF\s0     \- A \s-1CODEREF\s0 that we will call in event of any exceptions. See ``error_handler'' for more details." 4
.IX Item "error_handler - CODEREF - A CODEREF that we will call in event of any exceptions. See error_handler for more details."
.IP "\fBwebelement_class\fR  \- <string>    \- sub-class of Selenium::Remote::WebElement if you wish to use an alternate WebElement class." 4
.IX Item "webelement_class - <string> - sub-class of Selenium::Remote::WebElement if you wish to use an alternate WebElement class."
.ie n .IP "\fBua\fR                \- LWP::UserAgent instance \- if you wish to use a specific $ua, like from Test::LWP::UserAgent" 4
.el .IP "\fBua\fR                \- LWP::UserAgent instance \- if you wish to use a specific \f(CW$ua\fR, like from Test::LWP::UserAgent" 4
.IX Item "ua - LWP::UserAgent instance - if you wish to use a specific $ua, like from Test::LWP::UserAgent"
.IP "\fBproxy\fR              \- \s-1HASH\s0       \- Proxy configuration with the following keys:" 4
.IX Item "proxy - HASH - Proxy configuration with the following keys:"
.RS 4
.IP "\fBproxyType\fR \- <string> \- \s-1REQUIRED,\s0 Possible values are:" 4
.IX Item "proxyType - <string> - REQUIRED, Possible values are:"
.PD
.Vb 5
\&    direct     \- A direct connection \- no proxy in use,
\&    manual     \- Manual proxy settings configured, e.g. setting a proxy for HTTP, a proxy for FTP, etc,
\&    pac        \- Proxy autoconfiguration from a URL,
\&    autodetect \- proxy autodetection, probably with WPAD,
\&    system     \- Use system settings
.Ve
.IP "\fBproxyAutoconfigUrl\fR \- <string> \- \s-1REQUIRED\s0 if proxyType is 'pac', ignored otherwise. Expected format: http://hostname.com:1234/pacfile or file:///path/to/pacfile" 4
.IX Item "proxyAutoconfigUrl - <string> - REQUIRED if proxyType is 'pac', ignored otherwise. Expected format: http://hostname.com:1234/pacfile or file:///path/to/pacfile"
.PD 0
.IP "\fBftpProxy\fR           \- <string> \- \s-1OPTIONAL,\s0 ignored if proxyType is not 'manual'. Expected format: hostname.com:1234" 4
.IX Item "ftpProxy - <string> - OPTIONAL, ignored if proxyType is not 'manual'. Expected format: hostname.com:1234"
.IP "\fBhttpProxy\fR          \- <string> \- \s-1OPTIONAL,\s0 ignored if proxyType is not 'manual'. Expected format: hostname.com:1234" 4
.IX Item "httpProxy - <string> - OPTIONAL, ignored if proxyType is not 'manual'. Expected format: hostname.com:1234"
.IP "\fBsslProxy\fR           \- <string> \- \s-1OPTIONAL,\s0 ignored if proxyType is not 'manual'. Expected format: hostname.com:1234" 4
.IX Item "sslProxy - <string> - OPTIONAL, ignored if proxyType is not 'manual'. Expected format: hostname.com:1234"
.IP "\fBsocksProxy\fR         \- <string> \- \s-1OPTIONAL,\s0 ignored if proxyType is not 'manual'. Expected format: hostname.com:1234.  WebDriver 3 only." 4
.IX Item "socksProxy - <string> - OPTIONAL, ignored if proxyType is not 'manual'. Expected format: hostname.com:1234. WebDriver 3 only."
.IP "\fBsocksVersion\fR       \- <int>    \- \s-1OPTIONAL,\s0 ignored if proxyType is not 'manual'. WebDriver 3 only." 4
.IX Item "socksVersion - <int> - OPTIONAL, ignored if proxyType is not 'manual'. WebDriver 3 only."
.IP "\fBnoProxy\fR            \- <\s-1ARRAY\s0>  \- \s-1OPTIONAL,\s0 list of URLs to bypass the proxy for. WebDriver3 only." 4
.IX Item "noProxy - <ARRAY> - OPTIONAL, list of URLs to bypass the proxy for. WebDriver3 only."
.IP "\fBfirefox_profile\fR    \- <string> \- Base64 encoded \s-1ZIP\s0 file of a firefox profile directory, for use when you don't want/need Selenium::Firefox::Profile." 4
.IX Item "firefox_profile - <string> - Base64 encoded ZIP file of a firefox profile directory, for use when you don't want/need Selenium::Firefox::Profile."
.RE
.RS 4
.RE
.PD
.PP
Output:
.PP
Selenium::Remote::Driver object
.PP
Usage:
.PP
.Vb 1
\&    my $driver = Selenium::Remote::Driver\->new;
\&
\&    #or
\&    my $driver = Selenium::Remote::Driver\->new(\*(Aqbrowser_name\*(Aq => \*(Aqfirefox\*(Aq,
\&                                               \*(Aqplatform\*(Aq     => \*(AqMAC\*(Aq);
\&
\&    #or (for Firefox 47 or lower on Selenium 3+)
\&    my $driver = Selenium::Remote::Driver\->new(\*(Aqbrowser_name\*(Aq => \*(Aqfirefox\*(Aq,
\&                                               \*(Aqplatform\*(Aq     => \*(AqMAC\*(Aq,
\&                                               \*(Aqextra_capabilities\*(Aq => {
\&                                                    \*(Aqmarionette\*(Aq => \e0,
\&                                              });
\&
\&    #or
\&    my $driver = Selenium::Remote::Driver\->new(\*(Aqremote_server_addr\*(Aq => \*(Aq10.10.1.1\*(Aq,
\&                                               \*(Aqport\*(Aq               => \*(Aq2222\*(Aq,
\&                                               \*(Aqauto_close\*(Aq         => 0);
\&
\&    #or
\&    my $driver = Selenium::Remote::Driver\->new(\*(Aqbrowser_name\*(Aq =>\*(Aqchrome\*(Aq,
\&                                               \*(Aqextra_capabilities\*(Aq => {
\&                                                   \*(Aqgoog:chromeOptions\*(Aq => {
\&                                                       \*(Aqargs\*(Aq  => [
\&                                                           \*(Aqwindow\-size=1260,960\*(Aq,
\&                                                           \*(Aqincognito\*(Aq
\&                                                       ],
\&                                                       \*(Aqprefs\*(Aq => {
\&                                                           \*(Aqsession\*(Aq => {
\&                                                               \*(Aqrestore_on_startup\*(Aq => 4,
\&                                                               \*(Aqurls_to_restore_on_startup\*(Aq => [
\&                                                                   \*(Aqhttp://www.google.com\*(Aq,
\&                                                                   \*(Aqhttp://docs.seleniumhq.org\*(Aq
\&                                                               ]},
\&                                                           \*(Aqfirst_run_tabs\*(Aq => [
\&                                                               \*(Aqhttp://www.google.com\*(Aq,
\&                                                               \*(Aqhttp://docs.seleniumhq.org\*(Aq
\&                                                           ]
\&                                                       }
\&                                                   }
\&                                               });
\&
\&    #or
\&    my $driver = Selenium::Remote::Driver\->new(\*(Aqproxy\*(Aq => {\*(AqproxyType\*(Aq => \*(Aqmanual\*(Aq, \*(AqhttpProxy\*(Aq => \*(Aqmyproxy.com:1234\*(Aq});
\&
\&    #or
\&    my $driver = Selenium::Remote::Driver\->new(\*(Aqdefault_finder\*(Aq => \*(Aqcss\*(Aq);
.Ve
.PP
\fIerror_handler\fR
.IX Subsection "error_handler"
.PP
\fIclear_error_handler\fR
.IX Subsection "clear_error_handler"
.PP
\&\s-1OPTIONAL\s0 constructor arg & associated setter/clearer: if you wish to
install your own error handler, you may pass a code ref in to
\&\f(CW\*(C`error_handler\*(C'\fR during instantiation like follows:
.PP
.Vb 3
\&    my $driver = Selenium::Remote::Driver\->new(
\&        error_handler => sub { print $_[1]; croak \*(Aqgoodbye\*(Aq; }
\&    );
.Ve
.PP
Additionally, you can set and/or clear it at any time on an
already-instantiated driver:
.PP
.Vb 2
\&    # later, change the error handler to something else
\&    $driver\->error_handler( sub { print $_[1]; croak \*(Aqhello\*(Aq; } );
\&
\&    # stop handling errors manually and use the default S:R:D behavior
\&    # (we will croak about the exception)
\&    $driver\->clear_error_handler;
.Ve
.PP
Your error handler will receive three arguments: the first argument is
the \f(CW$driver\fR object itself, and the second argument is the exception
message and stack trace in one multiline string.  The final argument(s) are the
argument array to the command just executed.
.PP
\&\fBN.B.\fR: If you set your own error handler, you are entirely
responsible for handling webdriver exceptions, _including_ croaking
behavior. That is, when you set an error handler, we will no longer
croak on Webdriver exceptions \- it's up to you to do so. For
consistency with the standard S:R:D behavior, we recommend your error
handler also croak when it's done, especially since your test
shouldn't be running into unexpected errors. Catching specific or
desired errors in your error handler makes sense, but not croaking at
all can leave you in unfamiliar territory. Reaching an unexpected
exception might mean your test has gone off the rails, and the further
your test gets from the source of the of the exception, the harder it
will be to debug.
.PP
\&\fBN.B.\fR: Four methods will still croak on their own: \*(L"find_element\*(R",
\&\*(L"find_elements\*(R", \*(L"find_child_element\*(R", and
\&\*(L"find_child_elements\*(R". If these methods throw a Webdriver Exception,
your error handler _will still be_ invoked inside an \f(CW\*(C`eval\*(C'\fR, and then
they'll croak with their own error message that indicates the locator
and strategy used. So, your strategies for avoiding exceptions when
finding elements do not change (either use find_elements and check
the returned array size, wrap your calls to find_element* in an
\&\f(CW\*(C`eval\*(C'\fR, or use the parameterized versions find_element_*).
.SS "new_from_caps"
.IX Subsection "new_from_caps"
.Vb 6
\& Description:
\&    For experienced users who want complete control over the desired
\&    capabilities, use this alternative constructor along with the
\&    C<desired_capabilities> hash key in the init hash. Unlike "new",
\&    this constructor will not assume any defaults for your desired
\&    capabilities.
\&
\&    This alternate constructor IGNORES all other browser\-related
\&    desiredCapability options; the only options that will be respected
\&    are those that are NOT part of the Capabilities JSON Object as
\&    described in the Json Wire Protocol.
\&
\& Input:
\&    The only respected keys in the input hash are:
\&
\&        desired_capabilities \- HASHREF \- defaults to {}
\&        remote_server_addr   \- STRING  \- defaults to localhost
\&        port                 \- INTEGER \- defaults to 4444
\&        default_finder       \- STRING  \- defaults to xpath
\&        webelement_class     \- STRING  \- defaults to Selenium::Remote::WebElement
\&        auto_close           \- BOOLEAN \- defaults to 1
\&        error_handler        \- CODEREF \- defaults to croaking on exceptions
\&
\&    Except for C<desired_capabilities>, these keys perform exactly the
\&    same as listed in the regular "new" constructor.
\&
\&    The hashref you pass in as desired_capabilities only gets json
\&    encoded before being passed to the Selenium server; no default
\&    options of any sort will be added.
\&
\&    This means you must handle normalization and casing of the input
\&    options (like "browser_name" vs "browserName") and take care of
\&    things like encoding the firefox profile if applicable. More
\&    information about the desired capabilities object is available on
\&    the Selenium wiki:
\&
\&    https://code.google.com/p/selenium/wiki/JsonWireProtocol#Capabilities_JSON_Object
\&
\& Output:
\&    Remote Driver object
\&
\& Usage:
\&    my $driver = Selenium::Remote::Driver\->new_from_caps(
\&        \*(Aqdesired_capabilities\*(Aq => {\*(AqbrowserName\*(Aq => \*(Aqfirefox\*(Aq}
\&    );
\&
\&    The above would generate a POST to the webdriver server at
\&    localhost:4444 with the exact payload of \*(Aq{"desiredCapabilities":
\&    {"browserName": "firefox" }}\*(Aq.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new_session (extra_capabilities)"
.IX Subsection "new_session (extra_capabilities)"
Make a new session on the server.
Called by \fBnew()\fR, not intended for regular use.
.PP
Occaisonally handy for recovering from brower crashes.
.PP
\&\s-1DANGER DANGER DANGER\s0
.PP
This will throw away your old session if you have not closed it!
.PP
\&\s-1DANGER DANGER DANGER\s0
.SS "new_desired_session(capabilities)"
.IX Subsection "new_desired_session(capabilities)"
Basically the same as new_session, but with caps.
Sort of an analog to new_from_caps.
.SS "is_webdriver_3"
.IX Subsection "is_webdriver_3"
Print whether the server (or browser) thinks it's implemented webdriver 3.
If this returns true, webdriver 3 methods will be used in the case an action exists in Selenium::Remote::Spec for the method you are trying to call.
If a method you are calling has no webdriver 3 equivalent (or browser extension), the legacy commands implemented in Selenium::Remote::Commands will be used.
.PP
Note how I said *thinks* above.  In the case you want to force usage of legacy methods, set \f(CW$driver\fR\->{is_wd3} to work around various browser issues.
.SS "debug_on"
.IX Subsection "debug_on"
.Vb 4
\&  Description:
\&    Turns on debugging mode and the driver will print extra info like request
\&    and response to stdout. Useful, when you want to see what is being sent to
\&    the server & what response you are getting back.
\&
\&  Usage:
\&    $driver\->debug_on;
.Ve
.SS "debug_off"
.IX Subsection "debug_off"
.Vb 2
\&  Description:
\&    Turns off the debugging mode.
\&
\&  Usage:
\&    $driver\->debug_off;
.Ve
.SS "get_sessions"
.IX Subsection "get_sessions"
.Vb 3
\&  Description:
\&    Returns a list of the currently active sessions. Each session will be
\&    returned as an array of Hashes with the following keys:
\&
\&    \*(Aqid\*(Aq : The session ID
\&    \*(Aqcapabilities: An object describing session\*(Aqs capabilities
\&
\&  Output:
\&    Array of Hashes
\&
\&  Usage:
\&    print Dumper $driver\->get_sessions();
.Ve
.SS "status"
.IX Subsection "status"
.Vb 4
\&  Description:
\&    Query the server\*(Aqs current status. All server implementations
\&    should return two basic objects describing the server\*(Aqs current
\&    platform and when the server was built.
\&
\&  Output:
\&    Hash ref
\&
\&  Usage:
\&    print Dumper $driver\->status;
.Ve
.SS "get_alert_text"
.IX Subsection "get_alert_text"
.Vb 3
\& Description:
\&    Gets the text of the currently displayed JavaScript alert(), confirm()
\&    or prompt() dialog.
\&
\& Example
\&    my $string = $driver\->get_alert_text;
.Ve
.SS "send_keys_to_active_element"
.IX Subsection "send_keys_to_active_element"
.Vb 6
\& Description:
\&    Send a sequence of key strokes to the active element. This command is
\&    similar to the send keys command in every aspect except the implicit
\&    termination: The modifiers are not released at the end of the call.
\&    Rather, the state of the modifier keys is kept between calls, so mouse
\&    interactions can be performed while modifier keys are depressed.
\&
\& Compatibility:
\&    On webdriver 3 servers, don\*(Aqt use this to send modifier keys; use send_modifier instead.
\&
\& Input: 1
\&    Required:
\&        {ARRAY | STRING} \- Array of strings or a string.
\&
\& Usage:
\&    $driver\->send_keys_to_active_element(\*(Aqabcd\*(Aq, \*(Aqefg\*(Aq);
\&    $driver\->send_keys_to_active_element(\*(Aqhijk\*(Aq);
\&
\&    or
\&
\&    # include the WDKeys module
\&    use Selenium::Remote::WDKeys;
\&    $driver\->send_keys_to_active_element(KEYS\->{\*(Aqspace\*(Aq}, KEYS\->{\*(Aqenter\*(Aq});
.Ve
.SS "send_keys_to_alert"
.IX Subsection "send_keys_to_alert"
Synonymous with send_keys_to_prompt
.SS "send_keys_to_prompt"
.IX Subsection "send_keys_to_prompt"
.Vb 2
\& Description:
\&    Sends keystrokes to a JavaScript prompt() dialog.
\&
\& Input:
\&    {string} keys to send
\&
\& Example:
\&    $driver\->send_keys_to_prompt(\*(Aqhello world\*(Aq);
\&  or
\&    ok($driver\->get_alert_text eq \*(AqPlease Input your name\*(Aq,\*(Aqprompt appears\*(Aq);
\&    $driver\->send_keys_to_alert("Larry Wall");
\&    $driver\->accept_alert;
.Ve
.SS "accept_alert"
.IX Subsection "accept_alert"
.Vb 3
\& Description:
\&    Accepts the currently displayed alert dialog.  Usually, this is
\&    equivalent to clicking the \*(AqOK\*(Aq button in the dialog.
\&
\& Example:
\&    $driver\->accept_alert;
.Ve
.SS "dismiss_alert"
.IX Subsection "dismiss_alert"
.Vb 5
\& Description:
\&    Dismisses the currently displayed alert dialog. For comfirm()
\&    and prompt() dialogs, this is equivalent to clicking the
\&    \*(AqCancel\*(Aq button. For alert() dialogs, this is equivalent to
\&    clicking the \*(AqOK\*(Aq button.
\&
\& Example:
\&    $driver\->dismiss_alert;
.Ve
.SS "general_action"
.IX Subsection "general_action"
Provide an 'actions definition' hash to make webdriver use input devices.
Given the spec for the structure of this data is 'non normative',
it is left as an exercise to the reader what that means as to how to use this function.
.PP
That said, it seems most of the data looks something like this:
.PP
.Vb 10
\&    $driver\->general_action( actions => [{
\&        type => \*(Aqpointer|key|none|somethingElseSuperSpecialDefinedByYourBrowserDriver\*(Aq,
\&        id => MUST be mouse|key|none|other.  And by \*(Aqother\*(Aq I mean anything else.  The first 3 are \*(Aqspecial\*(Aq in that they are used in the global actions queue.
\&              If you want say, another mouse action to execute in parallel to other mouse actions (to simulate multi\-touch, for example), call your action \*(AqotherMouseAction\*(Aq or something.
\&        parameters => {
\&            someOption => "basically these are global parameters used by all steps in the forthcoming "action chain".
\&        },
\&        actions => [
\&            {
\&                type => "keyUp|KeyDown if key, pointerUp|pointerDown|pointerMove|pointerCancel if pointer, pause if any type",
\&                key => A raw keycode or character from the keyboard if this is a key event,
\&                duration => how many \*(Aqticks\*(Aq this action should take, you probably want this to be 0 all of the time unless you are evading Software debounce.
\&                button => what number button if you are using a pointer (this sounds terribly like it might be re\-purposed to be a joypad in the future sometime)
\&                origin => Point of Origin if moving a pointer around
\&                x => unit vector to travel along x\-axis if pointerMove event
\&                y => unit vector to travel along y\-axis if pointerMove event
\&            },
\&            ...
\&        ]
\&        },
\&        ...
\&        ]
\&    )
.Ve
.PP
Only available on WebDriver3 capable selenium servers.
.PP
If you have called any legacy shim, such as \fBmouse_move_to_location()\fR previously, your actions passed will be appended to the existing actions queue.
Called with no arguments, it simply executes the existing action queue.
.PP
If you are looking for pre-baked action chains that aren't currently part of Selenium::Remote::Driver,
consider Selenium::ActionChains, which is shipped with this distribution instead.
.SS "release_general_action"
.IX Subsection "release_general_action"
Nukes *all* input device state (modifier key up/down, pointer button up/down, pointer location, and other device state) from orbit.
Call if you forget to do a *Up event in your provided action chains, or just to save time.
.PP
Also clears the current actions queue.
.PP
Only available on WebDriver3 capable selenium servers.
.SS "mouse_move_to_location"
.IX Subsection "mouse_move_to_location"
.Vb 6
\& Description:
\&    Move the mouse by an offset of the specificed element. If no
\&    element is specified, the move is relative to the current mouse
\&    cursor. If an element is provided but no offset, the mouse will be
\&    moved to the center of the element. If the element is not visible,
\&    it will be scrolled into view.
\&
\& Compatibility:
\&    Due to limitations in the Webdriver 3 API, mouse movements have to be executed \*(Aqlazily\*(Aq e.g. only right before a click() event occurs.
\&    This is because there is no longer any persistent mouse location state; mouse movements are now totally atomic.
\&    This has several problematic aspects; for one, I can\*(Aqt think of a way to both hover an element and then do another action relying on the element staying hover()ed,
\&    Aside from using javascript workarounds.
\&
\& Output:
\&    STRING \-
\&
\& Usage:
\&    # element \- the element to move to. If not specified or is null, the offset is relative to current position of the mouse.
\&    # xoffset \- X offset to move to, relative to the top\-left corner of the element. If not specified, the mouse will move to the middle of the element.
\&    # yoffset \- Y offset to move to, relative to the top\-left corner of the element. If not specified, the mouse will move to the middle of the element.
\&
\&    print $driver\->mouse_move_to_location(element => e, xoffset => x, yoffset => y);
.Ve
.SS "move_to"
.IX Subsection "move_to"
Synonymous with mouse_move_to_location
.SS "get_capabilities"
.IX Subsection "get_capabilities"
.Vb 2
\& Description:
\&    Retrieve the capabilities of the specified session.
\&
\& Output:
\&    HASH of all the capabilities.
\&
\& Usage:
\&    my $capab = $driver\->get_capabilities();
\&    print Dumper($capab);
.Ve
.SS "get_timeouts"
.IX Subsection "get_timeouts"
.Vb 2
\&  Description:
\&    Get the currently configured values (ms) for the page load, script and implicit timeouts.
\&
\&  Compatibility:
\&    Only available on WebDriver3 enabled selenium servers.
\&
\&  Usage:
\&    $driver\->get_timeouts();
.Ve
.SS "set_timeout"
.IX Subsection "set_timeout"
.Vb 3
\& Description:
\&    Configure the amount of time that a particular type of operation can execute
\&    for before they are aborted and a |Timeout| error is returned to the client.
\&
\& Input:
\&    type \- <STRING> \- The type of operation to set the timeout for.
\&                      Valid values are:
\&                      "script"    : for script timeouts,
\&                      "implicit"  : for modifying the implicit wait timeout
\&                      "page load" : for setting a page load timeout.
\&    ms \- <NUMBER> \- The amount of time, in milliseconds, that time\-limited
\&            commands are permitted to run.
\&
\& Usage:
\&    $driver\->set_timeout(\*(Aqscript\*(Aq, 1000);
.Ve
.SS "set_async_script_timeout"
.IX Subsection "set_async_script_timeout"
.Vb 4
\& Description:
\&    Set the amount of time, in milliseconds, that asynchronous scripts executed
\&    by execute_async_script() are permitted to run before they are
\&    aborted and a |Timeout| error is returned to the client.
\&
\& Input:
\&    ms \- <NUMBER> \- The amount of time, in milliseconds, that time\-limited
\&            commands are permitted to run.
\&
\& Usage:
\&    $driver\->set_async_script_timeout(1000);
.Ve
.SS "set_implicit_wait_timeout"
.IX Subsection "set_implicit_wait_timeout"
.Vb 8
\& Description:
\&    Set the amount of time the driver should wait when searching for elements.
\&    When searching for a single element, the driver will poll the page until
\&    an element is found or the timeout expires, whichever occurs first.
\&    When searching for multiple elements, the driver should poll the page until
\&    at least one element is found or the timeout expires, at which point it
\&    will return an empty list. If this method is never called, the driver will
\&    default to an implicit wait of 0ms.
\&
\&    This is exactly equivalent to calling L</set_timeout> with a type
\&    arg of C<"implicit">.
\&
\& Input:
\&    Time in milliseconds.
\&
\& Output:
\&    Server Response Hash with no data returned back from the server.
\&
\& Usage:
\&    $driver\->set_implicit_wait_timeout(10);
.Ve
.SS "pause"
.IX Subsection "pause"
.Vb 2
\& Description:
\&    Pause execution for a specified interval of milliseconds.
\&
\& Usage:
\&    $driver\->pause(10000);  # 10 second delay
\&    $driver\->pause();       #  1 second delay default
\&
\& DEPRECATED: consider using Time::HiRes instead.
.Ve
.SS "close"
.IX Subsection "close"
.Vb 2
\& Description:
\&    Close the current window.
\&
\& Usage:
\&    $driver\->close();
\& or
\&    #close a popup window
\&    my $handles = $driver\->get_window_handles;
\&    $driver\->switch_to_window($handles\->[1]);
\&    $driver\->close();
\&    $driver\->switch_to_window($handles\->[0]);
.Ve
.SS "quit"
.IX Subsection "quit"
.Vb 7
\& Description:
\&    DELETE the session, closing open browsers. We will try to call
\&    this on our down when we get destroyed, but in the event that we
\&    are demolished during global destruction, we will not be able to
\&    close the browser. For your own unattended and/or complicated
\&    tests, we recommend explicitly calling quit to make sure you\*(Aqre
\&    not leaving orphan browsers around.
\&
\&    Note that as a Moo class, we use a subroutine called DEMOLISH that
\&    takes the place of DESTROY; for more information, see
\&    https://metacpan.org/pod/Moo#DEMOLISH.
\&
\& Usage:
\&    $driver\->quit();
.Ve
.SS "get_current_window_handle"
.IX Subsection "get_current_window_handle"
.Vb 2
\& Description:
\&    Retrieve the current window handle.
\&
\& Output:
\&    STRING \- the window handle
\&
\& Usage:
\&    print $driver\->get_current_window_handle();
.Ve
.SS "get_window_handles"
.IX Subsection "get_window_handles"
.Vb 2
\& Description:
\&    Retrieve the list of window handles used in the session.
\&
\& Output:
\&    ARRAY of STRING \- list of the window handles
\&
\& Usage:
\&    print Dumper $driver\->get_window_handles;
\& or
\&    # get popup, close, then back
\&    my $handles = $driver\->get_window_handles;
\&    $driver\->switch_to_window($handles\->[1]);
\&    $driver\->close;
\&    $driver\->switch_to_window($handles\->[0]);
.Ve
.SS "get_window_size"
.IX Subsection "get_window_size"
.Vb 2
\& Description:
\&    Retrieve the window size
\&
\& Compatibility:
\&    The ability to get the size of arbitrary handles by passing input only exists in WebDriver2.
\&    You will have to switch to the window first going forward.
\&
\& Input:
\&    STRING \- <optional> \- window handle (default is \*(Aqcurrent\*(Aq window)
\&
\& Output:
\&    HASH \- containing keys \*(Aqheight\*(Aq & \*(Aqwidth\*(Aq
\&
\& Usage:
\&    my $window_size = $driver\->get_window_size();
\&    print $window_size\->{\*(Aqheight\*(Aq}, $window_size\->{\*(Aqwidth\*(Aq};
.Ve
.SS "get_window_position"
.IX Subsection "get_window_position"
.Vb 2
\& Description:
\&    Retrieve the window position
\&
\& Compatibility:
\&    The ability to get the size of arbitrary handles by passing input only exists in WebDriver2.
\&    You will have to switch to the window first going forward.
\&
\& Input:
\&    STRING \- <optional> \- window handle (default is \*(Aqcurrent\*(Aq window)
\&
\& Output:
\&    HASH \- containing keys \*(Aqx\*(Aq & \*(Aqy\*(Aq
\&
\& Usage:
\&    my $window_size = $driver\->get_window_position();
\&    print $window_size\->{\*(Aqx\*(Aq}, $window_size\->(\*(Aqy\*(Aq);
.Ve
.SS "get_current_url"
.IX Subsection "get_current_url"
.Vb 2
\& Description:
\&    Retrieve the url of the current page
\&
\& Output:
\&    STRING \- url
\&
\& Usage:
\&    print $driver\->get_current_url();
.Ve
.SS "navigate"
.IX Subsection "navigate"
.Vb 2
\& Description:
\&    Navigate to a given url. This is same as get() method.
\&
\& Input:
\&    STRING \- url
\&
\& Usage:
\&    $driver\->navigate(\*(Aqhttp://www.google.com\*(Aq);
.Ve
.SS "get"
.IX Subsection "get"
.Vb 2
\& Description:
\&    Navigate to a given url
\&
\& Input:
\&    STRING \- url
\&
\& Usage:
\&    $driver\->get(\*(Aqhttp://www.google.com\*(Aq);
.Ve
.SS "get_title"
.IX Subsection "get_title"
.Vb 2
\& Description:
\&    Get the current page title
\&
\& Output:
\&    STRING \- Page title
\&
\& Usage:
\&    print $driver\->get_title();
.Ve
.SS "go_back"
.IX Subsection "go_back"
.Vb 2
\& Description:
\&    Equivalent to hitting the back button on the browser.
\&
\& Usage:
\&    $driver\->go_back();
.Ve
.SS "go_forward"
.IX Subsection "go_forward"
.Vb 2
\& Description:
\&    Equivalent to hitting the forward button on the browser.
\&
\& Usage:
\&    $driver\->go_forward();
.Ve
.SS "refresh"
.IX Subsection "refresh"
.Vb 2
\& Description:
\&    Reload the current page.
\&
\& Usage:
\&    $driver\->refresh();
.Ve
.SS "has_javascript"
.IX Subsection "has_javascript"
.Vb 2
\& Description:
\&    returns true if javascript is enabled in the driver.
\&
\& Compatibility:
\&    Can\*(Aqt be false on WebDriver 3.
\&
\& Usage:
\&    if ($driver\->has_javascript) { ...; }
.Ve
.SS "execute_async_script"
.IX Subsection "execute_async_script"
.Vb 6
\& Description:
\&    Inject a snippet of JavaScript into the page for execution in the context
\&    of the currently selected frame. The executed script is assumed to be
\&    asynchronous and must signal that is done by invoking the provided
\&    callback, which is always provided as the final argument to the function.
\&    The value to this callback will be returned to the client.
\&
\&    Asynchronous script commands may not span page loads. If an unload event
\&    is fired while waiting for a script result, an error should be returned
\&    to the client.
\&
\& Input: 2 (1 optional)
\&    Required:
\&        STRING \- Javascript to execute on the page
\&    Optional:
\&        ARRAY \- list of arguments that need to be passed to the script.
\&
\& Output:
\&    {*} \- Varied, depending on the type of result expected back from the script.
\&
\& Usage:
\&    my $script = q{
\&        var arg1 = arguments[0];
\&        var callback = arguments[arguments.length\-1];
\&        var elem = window.document.findElementById(arg1);
\&        callback(elem);
\&    };
\&    my $elem = $driver\->execute_async_script($script,\*(Aqmyid\*(Aq);
\&    $elem\->click;
.Ve
.SS "execute_script"
.IX Subsection "execute_script"
.Vb 5
\& Description:
\&    Inject a snippet of JavaScript into the page and return its result.
\&    WebElements that should be passed to the script as an argument should be
\&    specified in the arguments array as WebElement object. Likewise,
\&    any WebElements in the script result will be returned as WebElement object.
\&
\& Input: 2 (1 optional)
\&    Required:
\&        STRING \- Javascript to execute on the page
\&    Optional:
\&        ARRAY \- list of arguments that need to be passed to the script.
\&
\& Output:
\&    {*} \- Varied, depending on the type of result expected back from the script.
\&
\& Usage:
\&    my $script = q{
\&        var arg1 = arguments[0];
\&        var elem = window.document.findElementById(arg1);
\&        return elem;
\&    };
\&    my $elem = $driver\->execute_script($script,\*(Aqmyid\*(Aq);
\&    $elem\->click;
.Ve
.SS "screenshot"
.IX Subsection "screenshot"
.Vb 4
\& Description:
\&    Get a screenshot of the current page as a base64 encoded image.
\&    Optionally pass {\*(Aqfull\*(Aq => 1} as argument to take a full screenshot and not
\&    only the viewport. (Works only with firefox and geckodriver >= 0.24.0)
\&
\& Output:
\&    STRING \- base64 encoded image
\&
\& Usage:
\&    print $driver\->screenshot();
\&    print $driver\->screenshot({\*(Aqfull\*(Aq => 1});
.Ve
.PP
To conveniently write the screenshot to a file, see \*(L"capture_screenshot\*(R".
.SS "capture_screenshot"
.IX Subsection "capture_screenshot"
.Vb 5
\& Description:
\&    Capture a screenshot and save as a PNG to provided file name.
\&    (The method is compatible with the WWW::Selenium method of the same name)
\&    Optionally pass {\*(Aqfull\*(Aq => 1} as second argument to take a full screenshot
\&    and not only the viewport. (Works only with firefox and geckodriver >= 0.24.0)
\&
\& Output:
\&    TRUE \- (Screenshot is written to file)
\&
\& Usage:
\&    $driver\->capture_screenshot($filename);
\&    $driver\->capture_screenshot($filename, {\*(Aqfull\*(Aq => 1});
.Ve
.SS "available_engines"
.IX Subsection "available_engines"
.Vb 2
\& Description:
\&    List all available engines on the machine. To use an engine, it has to be present in this list.
\&
\& Compatibility:
\&    Does not appear to be available on Webdriver3 enabled selenium servers.
\&
\& Output:
\&    {Array.<string>} A list of available engines
\&
\& Usage:
\&    print Dumper $driver\->available_engines;
.Ve
.SS "switch_to_frame"
.IX Subsection "switch_to_frame"
.Vb 5
\& Description:
\&    Change focus to another frame on the page. If the frame ID is null, the
\&    server will switch to the page\*(Aqs default content. You can also switch to a
\&    WebElement, for e.g. you can find an iframe using find_element & then
\&    provide that as an input to this method. Also see e.g.
\&
\& Input: 1
\&    Required:
\&        {STRING | NUMBER | NULL | WebElement} \- ID of the frame which can be one of the three
\&                                   mentioned.
\&
\& Usage:
\&    $driver\->switch_to_frame(\*(Aqframe_1\*(Aq);
\&    or
\&    $driver\->switch_to_frame($driver\->find_element(\*(Aqiframe\*(Aq, \*(Aqtag_name\*(Aq));
.Ve
.SS "switch_to_parent_frame"
.IX Subsection "switch_to_parent_frame"
Webdriver 3 equivalent of calling switch_to_frame with no arguments (e.g. \s-1NULL\s0 frame).
This is actually called in that case, supposing you are using \s-1WD3\s0 capable servers now.
.SS "switch_to_window"
.IX Subsection "switch_to_window"
.Vb 4
\& Description:
\&    Change focus to another window. The window to change focus to may
\&    be specified by its server assigned window handle, or by the value
\&    of the page\*(Aqs window.name attribute.
\&
\&    If you wish to use the window name as the target, you\*(Aqll need to
\&    have set C<window.name> on the page either in app code or via
\&    L</execute_script>, or pass a name as the second argument to the
\&    C<window.open()> function when opening the new window. Note that
\&    the window name used here has nothing to do with the window title,
\&    or the C<< <title> >> element on the page.
\&
\&    Otherwise, use L</get_window_handles> and select a
\&    Webdriver\-generated handle from the output of that function.
\&
\& Input: 1
\&    Required:
\&        STRING \- Window handle or the Window name
\&
\& Usage:
\&    $driver\->switch_to_window(\*(AqMY Homepage\*(Aq);
\& or
\&    # close a popup window and switch back
\&    my $handles = $driver\->get_window_handles;
\&    $driver\->switch_to_window($handles\->[1]);
\&    $driver\->close;
\&    $driver\->switch_to_window($handles\->[0]);
.Ve
.SS "set_window_position"
.IX Subsection "set_window_position"
.Vb 2
\& Description:
\&    Set the position (on screen) where you want your browser to be displayed.
\&
\& Compatibility:
\&    In webDriver 3 enabled selenium servers, you may only operate on the focused window.
\&    As such, the window handle argument below will be ignored in this context.
\&
\& Input:
\&    INT \- x co\-ordinate
\&    INT \- y co\-ordinate
\&    STRING \- <optional> \- window handle (default is \*(Aqcurrent\*(Aq window)
\&
\& Output:
\&    BOOLEAN \- Success or failure
\&
\& Usage:
\&    $driver\->set_window_position(50, 50);
.Ve
.SS "set_window_size"
.IX Subsection "set_window_size"
.Vb 2
\& Description:
\&    Set the size of the browser window
\&
\& Compatibility:
\&    In webDriver 3 enabled selenium servers, you may only operate on the focused window.
\&    As such, the window handle argument below will be ignored in this context.
\&
\& Input:
\&    INT \- height of the window
\&    INT \- width of the window
\&    STRING \- <optional> \- window handle (default is \*(Aqcurrent\*(Aq window)
\&
\& Output:
\&    BOOLEAN \- Success or failure
\&
\& Usage:
\&    $driver\->set_window_size(640, 480);
.Ve
.SS "maximize_window"
.IX Subsection "maximize_window"
.Vb 2
\& Description:
\&    Maximizes the browser window
\&
\& Compatibility:
\&    In webDriver 3 enabled selenium servers, you may only operate on the focused window.
\&    As such, the window handle argument below will be ignored in this context.
\&
\&    Also, on chromedriver maximize is actually just setting the window size to the screen\*(Aqs
\&    available height and width.
\&
\& Input:
\&    STRING \- <optional> \- window handle (default is \*(Aqcurrent\*(Aq window)
\&
\& Output:
\&    BOOLEAN \- Success or failure
\&
\& Usage:
\&    $driver\->maximize_window();
.Ve
.SS "minimize_window"
.IX Subsection "minimize_window"
.Vb 2
\& Description:
\&    Minimizes the currently focused browser window (webdriver3 only)
\&
\& Output:
\&    BOOLEAN \- Success or failure
\&
\& Usage:
\&    $driver\->minimize_window();
.Ve
.SS "fullscreen_window"
.IX Subsection "fullscreen_window"
.Vb 2
\& Description:
\&    Fullscreens the currently focused browser window (webdriver3 only)
\&
\& Output:
\&    BOOLEAN \- Success or failure
\&
\& Usage:
\&    $driver\->fullscreen_window();
.Ve
.SS "get_all_cookies"
.IX Subsection "get_all_cookies"
.Vb 3
\& Description:
\&    Retrieve all cookies visible to the current page. Each cookie will be
\&    returned as a HASH reference with the following keys & their value types:
\&
\&    \*(Aqname\*(Aq \- STRING
\&    \*(Aqvalue\*(Aq \- STRING
\&    \*(Aqpath\*(Aq \- STRING
\&    \*(Aqdomain\*(Aq \- STRING
\&    \*(Aqsecure\*(Aq \- BOOLEAN
\&
\& Output:
\&    ARRAY of HASHES \- list of all the cookie hashes
\&
\& Usage:
\&    print Dumper($driver\->get_all_cookies());
.Ve
.SS "add_cookie"
.IX Subsection "add_cookie"
.Vb 2
\& Description:
\&    Set a cookie on the domain.
\&
\& Input: 2 (4 optional)
\&    Required:
\&        \*(Aqname\*(Aq   \- STRING
\&        \*(Aqvalue\*(Aq  \- STRING
\&
\&    Optional:
\&        \*(Aqpath\*(Aq   \- STRING
\&        \*(Aqdomain\*(Aq \- STRING
\&        \*(Aqsecure\*(Aq   \- BOOLEAN \- default false.
\&        \*(Aqhttponly\*(Aq \- BOOLEAN \- default false.
\&        \*(Aqexpiry\*(Aq   \- TIME_T  \- default 20 years in the future
\&
\& Usage:
\&    $driver\->add_cookie(\*(Aqfoo\*(Aq, \*(Aqbar\*(Aq, \*(Aq/\*(Aq, \*(Aq.google.com\*(Aq, 0, 1)
.Ve
.SS "delete_all_cookies"
.IX Subsection "delete_all_cookies"
.Vb 2
\& Description:
\&    Delete all cookies visible to the current page.
\&
\& Usage:
\&    $driver\->delete_all_cookies();
.Ve
.SS "get_cookie_named"
.IX Subsection "get_cookie_named"
Basically get only the cookie with the provided name.
Probably preferable to pick it out of the list unless you expect a *really* long list.
.PP
.Vb 2
\& Input:
\&    Cookie Name \- STRING
.Ve
.PP
Returns cookie definition hash, much like the elements in \fBget_all_cookies()\fR;
.PP
.Vb 2
\&  Compatibility:
\&    Only available on webdriver3 enabled selenium servers.
.Ve
.SS "delete_cookie_named"
.IX Subsection "delete_cookie_named"
.Vb 3
\& Description:
\&    Delete the cookie with the given name. This command will be a no\-op if there
\&    is no such cookie visible to the current page.
\&
\& Input: 1
\&    Required:
\&        STRING \- name of cookie to delete
\&
\& Usage:
\&    $driver\->delete_cookie_named(\*(Aqfoo\*(Aq);
.Ve
.SS "get_page_source"
.IX Subsection "get_page_source"
.Vb 2
\& Description:
\&    Get the current page source.
\&
\& Output:
\&    STRING \- The page source.
\&
\& Usage:
\&    print $driver\->get_page_source();
.Ve
.SS "find_element"
.IX Subsection "find_element"
.Vb 6
\& Description:
\&    Search for an element on the page, starting from the document
\&    root. The located element will be returned as a WebElement
\&    object. If the element cannot be found, we will CROAK, killing
\&    your script. If you wish for a warning instead, use the
\&    parameterized version of the finders:
\&
\&        find_element_by_class
\&        find_element_by_class_name
\&        find_element_by_css
\&        find_element_by_id
\&        find_element_by_link
\&        find_element_by_link_text
\&        find_element_by_name
\&        find_element_by_partial_link_text
\&        find_element_by_tag_name
\&        find_element_by_xpath
\&
\&    These functions all take a single STRING argument: the locator
\&    search target of the element you want. If the element is found, we
\&    will receive a WebElement. Otherwise, we will return 0. Note that
\&    invoking methods on 0 will of course kill your script.
\&
\& Input: 2 (1 optional)
\&    Required:
\&        STRING \- The search target.
\&    Optional:
\&        STRING \- Locator scheme to use to search the element, available schemes:
\&                 {class, class_name, css, id, link, link_text, partial_link_text,
\&                  tag_name, name, xpath}
\&                 Defaults to \*(Aqxpath\*(Aq if not configured global during instantiation.
\&
\& Output:
\&    Selenium::Remote::WebElement \- WebElement Object
\&        (This could be a subclass of L<Selenium::Remote::WebElement> if C<webelement_class> was set.
\&
\& Usage:
\&    $driver\->find_element("//input[\e@name=\*(Aqq\*(Aq]");
.Ve
.SS "find_elements"
.IX Subsection "find_elements"
.Vb 3
\& Description:
\&    Search for multiple elements on the page, starting from the document root.
\&    The located elements will be returned as an array of WebElement object.
\&
\& Input: 2 (1 optional)
\&    Required:
\&        STRING \- The search target.
\&    Optional:
\&        STRING \- Locator scheme to use to search the element, available schemes:
\&                 {class, class_name, css, id, link, link_text, partial_link_text,
\&                  tag_name, name, xpath}
\&                 Defaults to \*(Aqxpath\*(Aq if not configured global during instantiation.
\&
\& Output:
\&    ARRAY or ARRAYREF of WebElement Objects
\&
\& Usage:
\&    $driver\->find_elements("//input");
.Ve
.SS "find_child_element"
.IX Subsection "find_child_element"
.Vb 3
\& Description:
\&    Search for an element on the page, starting from the identified element. The
\&    located element will be returned as a WebElement object.
\&
\& Input: 3 (1 optional)
\&    Required:
\&        Selenium::Remote::WebElement \- WebElement object from where you want to
\&                                       start searching.
\&        STRING \- The search target. (Do not use a double whack(\*(Aq//\*(Aq)
\&                 in an xpath to search for a child element
\&                 ex: \*(Aq//option[@id="something"]\*(Aq
\&                 instead use a dot whack (\*(Aq./\*(Aq)
\&                 ex: \*(Aq./option[@id="something"]\*(Aq)
\&    Optional:
\&        STRING \- Locator scheme to use to search the element, available schemes:
\&                 {class, class_name, css, id, link, link_text, partial_link_text,
\&                  tag_name, name, xpath}
\&                 Defaults to \*(Aqxpath\*(Aq if not configured global during instantiation.
\&
\& Output:
\&    WebElement Object
\&
\& Usage:
\&    my $elem1 = $driver\->find_element("//select[\e@name=\*(Aqned\*(Aq]");
\&    # note the usage of ./ when searching for a child element instead of //
\&    my $child = $driver\->find_child_element($elem1, "./option[\e@value=\*(Aqes_ar\*(Aq]");
.Ve
.SS "find_child_elements"
.IX Subsection "find_child_elements"
.Vb 4
\& Description:
\&    Search for multiple element on the page, starting from the identified
\&    element. The located elements will be returned as an array of WebElement
\&    objects.
\&
\& Input: 3 (1 optional)
\&    Required:
\&        Selenium::Remote::WebElement \- WebElement object from where you want to
\&                                       start searching.
\&        STRING \- The search target.
\&    Optional:
\&        STRING \- Locator scheme to use to search the element, available schemes:
\&                 {class, class_name, css, id, link, link_text, partial_link_text,
\&                  tag_name, name, xpath}
\&                 Defaults to \*(Aqxpath\*(Aq if not configured global during instantiation.
\&
\& Output:
\&    ARRAY of WebElement Objects.
\&
\& Usage:
\&    my $elem1 = $driver\->find_element("//select[\e@name=\*(Aqned\*(Aq]");
\&    # note the usage of ./ when searching for a child element instead of //
\&    my $child = $driver\->find_child_elements($elem1, "./option");
.Ve
.SS "find_element_by_class"
.IX Subsection "find_element_by_class"
See \*(L"find_element\*(R".
.SS "find_element_by_class_name"
.IX Subsection "find_element_by_class_name"
See \*(L"find_element\*(R".
.SS "find_element_by_css"
.IX Subsection "find_element_by_css"
See \*(L"find_element\*(R".
.SS "find_element_by_id"
.IX Subsection "find_element_by_id"
See \*(L"find_element\*(R".
.SS "find_element_by_link"
.IX Subsection "find_element_by_link"
See \*(L"find_element\*(R".
.SS "find_element_by_link_text"
.IX Subsection "find_element_by_link_text"
See \*(L"find_element\*(R".
.SS "find_element_by_name"
.IX Subsection "find_element_by_name"
See \*(L"find_element\*(R".
.SS "find_element_by_partial_link_text"
.IX Subsection "find_element_by_partial_link_text"
See \*(L"find_element\*(R".
.SS "find_element_by_tag_name"
.IX Subsection "find_element_by_tag_name"
See \*(L"find_element\*(R".
.SS "find_element_by_xpath"
.IX Subsection "find_element_by_xpath"
See \*(L"find_element\*(R".
.SS "get_active_element"
.IX Subsection "get_active_element"
.Vb 3
\& Description:
\&    Get the element on the page that currently has focus.. The located element
\&    will be returned as a WebElement object.
\&
\& Output:
\&    WebElement Object
\&
\& Usage:
\&    $driver\->get_active_element();
.Ve
.SS "cache_status"
.IX Subsection "cache_status"
.Vb 2
\& Description:
\&    Get the status of the html5 application cache.
\&
\& Usage:
\&    print $driver\->cache_status;
\&
\& Output:
\&    <number> \- Status code for application cache: {UNCACHED = 0, IDLE = 1, CHECKING = 2, DOWNLOADING = 3, UPDATE_READY = 4, OBSOLETE = 5}
.Ve
.SS "set_geolocation"
.IX Subsection "set_geolocation"
.Vb 4
\& Description:
\&    Set the current geographic location \- note that your driver must
\&    implement this endpoint, or else it will crash your session. At the
\&    very least, it works in v2.12 of Chromedriver.
\&
\& Input:
\&    Required:
\&        HASH: A hash with key C<location> whose value is a Location hashref. See
\&        usage section for example.
\&
\& Usage:
\&    $driver\->set_geolocation( location => {
\&        latitude  => 40.714353,
\&        longitude => \-74.005973,
\&        altitude  => 0.056747
\&    });
\&
\& Output:
\&    BOOLEAN \- success or failure
.Ve
.SS "get_geolocation"
.IX Subsection "get_geolocation"
.Vb 5
\& Description:
\&    Get the current geographic location. Note that your webdriver must
\&    implement this endpoint \- otherwise, it will crash your session. At
\&    the time of release, we couldn\*(Aqt get this to work on the desktop
\&    FirefoxDriver or desktop Chromedriver.
\&
\& Usage:
\&    print $driver\->get_geolocation;
\&
\& Output:
\&    { latitude: number, longitude: number, altitude: number } \- The current geo location.
.Ve
.SS "get_log"
.IX Subsection "get_log"
.Vb 2
\& Description:
\&    Get the log for a given log type. Log buffer is reset after each request.
\&
\& Input:
\&    Required:
\&        <STRING> \- Type of log to retrieve:
\&        {client|driver|browser|server}. There may be others available; see
\&        get_log_types for a full list for your driver.
\&
\& Usage:
\&    $driver\->get_log( $log_type );
\&
\& Output:
\&    <ARRAY|ARRAYREF> \- An array of log entries since the most recent request.
.Ve
.SS "get_log_types"
.IX Subsection "get_log_types"
.Vb 4
\& Description:
\&    Get available log types. By default, every driver should have client,
\&    driver, browser, and server types, but there may be more available,
\&    depending on your driver.
\&
\& Usage:
\&    my @types = $driver\->get_log_types;
\&    $driver\->get_log($types[0]);
\&
\& Output:
\&    <ARRAYREF> \- The list of log types.
.Ve
.SS "set_orientation"
.IX Subsection "set_orientation"
.Vb 2
\& Description:
\&    Set the browser orientation.
\&
\& Input:
\&    Required:
\&        <STRING> \- Orientation {LANDSCAPE|PORTRAIT}
\&
\& Usage:
\&    $driver\->set_orientation( $orientation  );
\&
\& Output:
\&    BOOLEAN \- success or failure
.Ve
.SS "get_orientation"
.IX Subsection "get_orientation"
.Vb 2
\& Description:
\&    Get the current browser orientation. Returns either LANDSCAPE|PORTRAIT.
\&
\& Usage:
\&    print $driver\->get_orientation;
\&
\& Output:
\&    <STRING> \- your orientation.
.Ve
.SS "send_modifier"
.IX Subsection "send_modifier"
.Vb 2
\& Description:
\&    Send an event to the active element to depress or release a modifier key.
\&
\& Input: 2
\&    Required:
\&      value \- String \- The modifier key event to be sent. This key must be one \*(AqCtrl\*(Aq,\*(AqShift\*(Aq,\*(AqAlt\*(Aq,\*(Aq or \*(AqCommand\*(Aq/\*(AqMeta\*(Aq as defined by the send keys command
\&      isdown \- Boolean/String \- Whether to generate a key down or key up
\&
\& Usage:
\&    $driver\->send_modifier(\*(AqAlt\*(Aq,\*(Aqdown\*(Aq);
\&    $elem\->send_keys(\*(Aqc\*(Aq);
\&    $driver\->send_modifier(\*(AqAlt\*(Aq,\*(Aqup\*(Aq);
\&
\&    or
\&
\&    $driver\->send_modifier(\*(AqAlt\*(Aq,1);
\&    $elem\->send_keys(\*(Aqc\*(Aq);
\&    $driver\->send_modifier(\*(AqAlt\*(Aq,0);
.Ve
.SS "compare_elements"
.IX Subsection "compare_elements"
.Vb 2
\& Description:
\&    Test if two element IDs refer to the same DOM element.
\&
\& Input: 2
\&    Required:
\&        Selenium::Remote::WebElement \- WebElement Object
\&        Selenium::Remote::WebElement \- WebElement Object
\&
\& Output:
\&    BOOLEAN
\&
\& Usage:
\&    $driver\->compare_elements($elem_obj1, $elem_obj2);
.Ve
.SS "click"
.IX Subsection "click"
.Vb 2
\& Description:
\&    Click any mouse button (at the coordinates set by the last moveto command).
\&
\& Input:
\&    button \- any one of \*(AqLEFT\*(Aq/0 \*(AqMIDDLE\*(Aq/1 \*(AqRIGHT\*(Aq/2
\&             defaults to \*(AqLEFT\*(Aq
\&    queue \- (optional) queue the click, rather than executing it.  WD3 only.
\&
\& Usage:
\&    $driver\->click(\*(AqLEFT\*(Aq);
\&    $driver\->click(1); #MIDDLE
\&    $driver\->click(\*(AqRIGHT\*(Aq);
\&    $driver\->click;  #Defaults to left
.Ve
.SS "double_click"
.IX Subsection "double_click"
.Vb 2
\& Description:
\&    Double\-clicks at the current mouse coordinates (set by moveto).
\&
\& Compatibility:
\&    On webdriver3 enabled servers, you can double click arbitrary mouse buttons.
\&
\& Usage:
\&    $driver\->double_click(button);
.Ve
.SS "button_down"
.IX Subsection "button_down"
.Vb 5
\& Description:
\&    Click and hold the left mouse button (at the coordinates set by the
\&    last moveto command). Note that the next mouse\-related command that
\&    should follow is buttonup . Any other mouse command (such as click
\&    or another call to buttondown) will yield undefined behaviour.
\&
\& Compatibility:
\&    On WebDriver 3 enabled servers, all this does is queue a button down action.
\&    You will either have to call general_action() to perform the queue, or an action like click() which also clears the queue.
\&
\& Usage:
\&    $self\->button_down;
.Ve
.SS "button_up"
.IX Subsection "button_up"
.Vb 5
\& Description:
\&    Releases the mouse button previously held (where the mouse is
\&    currently at). Must be called once for every buttondown command
\&    issued. See the note in click and buttondown about implications of
\&    out\-of\-order commands.
\&
\& Compatibility:
\&    On WebDriver 3 enabled servers, all this does is queue a button down action.
\&    You will either have to call general_action() to perform the queue, or an action like click() which also clears the queue.
\&
\& Usage:
\&    $self\->button_up;
.Ve
.SS "upload_file"
.IX Subsection "upload_file"
.Vb 4
\& Description:
\&    Upload a file from the local machine to the selenium server
\&    machine. That file then can be used for testing file upload on web
\&    forms. Returns the remote\-server\*(Aqs path to the file.
\&
\&    Passing raw data as an argument past the filename will upload
\&    that rather than the file\*(Aqs contents.
\&
\&    When passing raw data, be advised that it expects a zipped
\&    and then base64 encoded version of a single file.
\&    Multiple files and/or directories are not supported by the remote server.
\&
\& Usage:
\&    my $remote_fname = $driver\->upload_file( $fname );
\&    my $element = $driver\->find_element( \*(Aq//input[@id="file"]\*(Aq );
\&    $element\->send_keys( $remote_fname );
.Ve
.SS "get_text"
.IX Subsection "get_text"
.Vb 2
\& Description:
\&    Get the text of a particular element. Wrapper around L<find_element()>
\&
\& Usage:
\&    $text = $driver\->get_text("//div[\e@name=\*(Aqq\*(Aq]");
.Ve
.SS "get_body"
.IX Subsection "get_body"
.Vb 3
\& Description:
\&    Get the current text for the whole body. If you want the entire raw HTML instead,
\&    See L<get_page_source>.
\&
\& Usage:
\&    $body_text = $driver\->get_body();
.Ve
.SS "get_path"
.IX Subsection "get_path"
.Vb 2
\& Description:
\&     Get the path part of the current browser location.
\&
\& Usage:
\&     $path = $driver\->get_path();
.Ve
.SS "get_user_agent"
.IX Subsection "get_user_agent"
.Vb 3
\& Description:
\&    Convenience method to get the user agent string, according to the
\&    browser\*(Aqs value for window.navigator.userAgent.
\&
\& Usage:
\&    $user_agent = $driver\->get_user_agent()
.Ve
.SS "set_inner_window_size"
.IX Subsection "set_inner_window_size"
.Vb 4
\& Description:
\&     Set the inner window size by closing the current window and
\&     reopening the current page in a new window. This can be useful
\&     when using browsers to mock as mobile devices.
\&
\&     This sub will be fired automatically if you set the
\&     C<inner_window_size> hash key option during instantiation.
\&
\& Input:
\&     INT \- height of the window
\&     INT \- width of the window
\&
\& Output:
\&     BOOLEAN \- Success or failure
\&
\& Usage:
\&     $driver\->set_inner_window_size(640, 480)
.Ve
.SS "get_local_storage_item"
.IX Subsection "get_local_storage_item"
.Vb 2
\& Description:
\&     Get the value of a local storage item specified by the given key.
\&
\& Input: 1
\&    Required:
\&        STRING \- name of the key to be retrieved
\&
\& Output:
\&     STRING \- value of the local storage item
\&
\& Usage:
\&     $driver\->get_local_storage_item(\*(Aqkey\*(Aq)
.Ve
.SS "delete_local_storage_item"
.IX Subsection "delete_local_storage_item"
.Vb 2
\& Description:
\&     Get the value of a local storage item specified by the given key.
\&
\& Input: 1
\&    Required
\&        STRING \- name of the key to be deleted
\&
\& Usage:
\&     $driver\->delete_local_storage_item(\*(Aqkey\*(Aq)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see those modules/websites for more information related to this module.
.IP "\(bu" 4
 \- the main selenium \s-1RC\s0 project
.IX Xref "https: github.com SeleniumHQ selenium"
.IP "\(bu" 4
 \- the \*(L"legacy\*(R" webdriver specification
.IX Xref "https: github.com SeleniumHQ selenium wiki JsonWireProtocol"
.IP "\(bu" 4
 \- the \s-1WC3\s0 WebDriver 3 specification
.IX Xref "https: www.w3.org TR webdriver"
.IP "\(bu" 4
<https://github.com/teodesian/Selenium\-Remote\-Driver/wiki>
.IP "\(bu" 4
Brownie
.IP "\(bu" 4
Wight
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
<https://github.com/teodesian/Selenium\-Remote\-Driver/issues>
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH "AUTHORS"
.IX Header "AUTHORS"
Current Maintainers:
.IP "\(bu" 4
Daniel Gempesaw <gempesaw@gmail.com>
.IP "\(bu" 4
Emmanuel Peroumalnaïk <peroumalnaik.emmanuel@gmail.com>
.PP
Previous maintainers:
.IP "\(bu" 4
Luke Closs <cpan@5thplane.com>
.IP "\(bu" 4
Mark Stosberg <mark@stosberg.com>
.PP
Original authors:
.IP "\(bu" 4
Aditya Ivaturi <ivaturi@gmail.com>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Allen Lew <allen@alew.org>
.IP "\(bu" 4
A.MacLeay <a.macleay@gmail.com>
.IP "\(bu" 4
Andy Jack <andyjack@users.noreply.github.com>
.IP "\(bu" 4
Andy Jack <github@veracity.ca>
.IP "\(bu" 4
Bas Bloemsaat <bas@bloemsaat.com>
.IP "\(bu" 4
Blake \s-1GH\s0 <blake@mobiusconsortium.org>
.IP "\(bu" 4
Brian Horakh <brianh@zoovy.com>
.IP "\(bu" 4
Charles Howes <charles.howes@globalrelay.net>
.IP "\(bu" 4
Chris Davies <FMQA@users.noreply.github.com>
.IP "\(bu" 4
Daniel Fackrell <dfackrell@bluehost.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
Dmitry Karasik <dmitry@karasik.eu.org>
.IP "\(bu" 4
Doug Bell <doug@preaction.me>
.IP "\(bu" 4
Dylan Streb <dylan.streb@oneil.com>
.IP "\(bu" 4
Eric Johnson <eric.git@iijo.org>
.IP "\(bu" 4
Gabor Szabo <gabor@szabgab.com>
.IP "\(bu" 4
George S. Baugh <george.b@cpanel.net>
.IP "\(bu" 4
Gerhard Jungwirth <gjungwirth@sipwise.com>
.IP "\(bu" 4
Gordon Child <gordon@gordonchild.com>
.IP "\(bu" 4
GreatFlamingFoo <greatflamingfoo@gmail.com>
.IP "\(bu" 4
Ivan Kurmanov <duraley@gmail.com>
.IP "\(bu" 4
Joe Higton <draxil@gmail.com>
.IP "\(bu" 4
Jon Hermansen <jon.hermansen@gmail.com>
.IP "\(bu" 4
Keita Sugama <sugama@jamadam.com>
.IP "\(bu" 4
Ken Swanson <kswanson@genome.wustl.edu>
.IP "\(bu" 4
lembark <lembark@wrkhors.com>
.IP "\(bu" 4
Luke Closs <lukec@users.noreply.github.com>
.IP "\(bu" 4
Martin Gruner <martin.gruner@otrs.com>
.IP "\(bu" 4
Matthew Spahr <matthew.spahr@cpanel.net>
.IP "\(bu" 4
Max O'Cull <maxattax97@gmail.com>
.IP "\(bu" 4
Michael Prokop <mprokop@sipwise.com>
.IP "\(bu" 4
mk654321 <kosmichal@gmail.com>
.IP "\(bu" 4
Peter Mottram (SysPete) <peter@sysnix.com>
.IP "\(bu" 4
Phil Kania <phil@vivox.com>
.IP "\(bu" 4
Phil Mitchell <phil.mitchell@pobox.com>
.IP "\(bu" 4
Prateek Goyal <prateek.goyal5@gmail.com>
.IP "\(bu" 4
Richard Sailer <richard@weltraumpflege.org>
.IP "\(bu" 4
Robert Utter <utter.robert@gmail.com>
.IP "\(bu" 4
rouzier <rouzier@gmail.com>
.IP "\(bu" 4
Tetsuya Tatsumi <ttatsumi@ra2.so\-net.ne.jp>
.IP "\(bu" 4
Tod Hagan <42418406+tod222@users.noreply.github.com>
.IP "\(bu" 4
Tom Hukins <tom@eborcom.com>
.IP "\(bu" 4
Vangelis Katsikaros <vangelis@adzuna.com>
.IP "\(bu" 4
Vangelis Katsikaros <vkatsikaros@gmail.com>
.IP "\(bu" 4
Vishwanath Janmanchi <jvishwanath@gmail.com>
.IP "\(bu" 4
Viťas Strádal <vitas@matfyz.cz>
.IP "\(bu" 4
Yves Lavoie <ylavoie@yveslavoie.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2010\-2011 Aditya Ivaturi, Gordon Child
.PP
Copyright (c) 2014\-2017 Daniel Gempesaw
.PP
Licensed under the Apache License, Version 2.0 (the \*(L"License\*(R");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
.PP
http://www.apache.org/licenses/LICENSE\-2.0
.PP
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \*(L"\s-1AS IS\*(R" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\s0 either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 3657:" 4
.IX Item "Around line 3657:"
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.Sp
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.IP "Around line 3661:" 4
.IX Item "Around line 3661:"
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.Sp
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.IP "Around line 3665:" 4
.IX Item "Around line 3665:"
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.Sp
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
