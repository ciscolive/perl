.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::Regexp 3"
.TH Data::Object::Regexp 3 "2020-04-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::Regexp
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Regexp Class for Perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package main;
\&
\&  use Data::Object::Regexp;
\&
\&  my $re = Data::Object::Regexp\->new(qr(\ew+));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides methods for manipulating regexp data.
.SH "INHERITS"
.IX Header "INHERITS"
This package inherits behaviors from:
.PP
Data::Object::Kind
.SH "INTEGRATES"
.IX Header "INTEGRATES"
This package integrates behaviors from:
.PP
Data::Object::Role::Dumpable
.PP
Data::Object::Role::Proxyable
.PP
Data::Object::Role::Throwable
.SH "LIBRARIES"
.IX Header "LIBRARIES"
This package uses type constraints from:
.PP
Data::Object::Types
.SH "METHODS"
.IX Header "METHODS"
This package implements the following methods:
.SS "defined"
.IX Subsection "defined"
.Vb 1
\&  defined() : Num
.Ve
.PP
The defined method returns true if the object represents a value that meets the
criteria for being defined, otherwise it returns false.
.IP "defined example #1" 4
.IX Item "defined example #1"
.Vb 1
\&  my $re = Data::Object::Regexp\->new;
\&
\&  $re\->defined; # 1
.Ve
.SS "eq"
.IX Subsection "eq"
.Vb 1
\&  eq(Any $arg1) : Any
.Ve
.PP
The eq method will throw an exception if called.
.IP "eq example #1" 4
.IX Item "eq example #1"
.Vb 1
\&  my $re = Data::Object::Regexp\->new(qr//);
\&
\&  $re\->eq(qr//);
.Ve
.SS "ge"
.IX Subsection "ge"
.Vb 1
\&  ge(Any $arg1) : Any
.Ve
.PP
The ge method will throw an exception if called.
.IP "ge example #1" 4
.IX Item "ge example #1"
.Vb 1
\&  my $re = Data::Object::Regexp\->new(qr//);
\&
\&  $re\->ge(qr//);
.Ve
.SS "gt"
.IX Subsection "gt"
.Vb 1
\&  gt(Any $arg1) : Any
.Ve
.PP
The gt method will throw an exception if called.
.IP "gt example #1" 4
.IX Item "gt example #1"
.Vb 1
\&  my $re = Data::Object::Regexp\->new(qr//);
\&
\&  $re\->gt(qr//);
.Ve
.SS "le"
.IX Subsection "le"
.Vb 1
\&  le(Any $arg1) : Any
.Ve
.PP
The le method will throw an exception if called.
.IP "le example #1" 4
.IX Item "le example #1"
.Vb 1
\&  my $re = Data::Object::Regexp\->new(qr//);
\&
\&  $re\->le(qr//);
.Ve
.SS "lt"
.IX Subsection "lt"
.Vb 1
\&  lt(Any $arg1) : Any
.Ve
.PP
The lt method will throw an exception if called.
.IP "lt example #1" 4
.IX Item "lt example #1"
.Vb 1
\&  my $re = Data::Object::Regexp\->new(qr//);
\&
\&  $re\->lt(qr//);
.Ve
.SS "ne"
.IX Subsection "ne"
.Vb 1
\&  ne(Any $arg1) : Any
.Ve
.PP
The ne method will throw an exception if called.
.IP "ne example #1" 4
.IX Item "ne example #1"
.Vb 1
\&  my $re = Data::Object::Regexp\->new(qr//);
\&
\&  $re\->ne(qr//);
.Ve
.SS "replace"
.IX Subsection "replace"
.Vb 1
\&  replace(Str $arg1, Str $arg2) : ReplaceObject
.Ve
.PP
The replace method performs a regular expression substitution on the given
string. The first argument is the string to match against. The second argument
is the replacement string. The optional third argument might be a string
representing flags to append to the s///x operator, such as 'g' or 'e'.  This
method will always return a Data::Object::Replace object which can be used
to introspect the result of the operation.
.IP "replace example #1" 4
.IX Item "replace example #1"
.Vb 1
\&  my $re = Data::Object::Regexp\->new(qr/test/);
\&
\&  $re\->replace(\*(Aqthis is a test\*(Aq, \*(Aqdrill\*(Aq);
.Ve
.IP "replace example #2" 4
.IX Item "replace example #2"
.Vb 1
\&  my $re = Data::Object::Regexp\->new(qr/test/);
\&
\&  $re\->replace(\*(Aqtest 1 test 2 test 3\*(Aq, \*(Aqdrill\*(Aq, \*(Aqgi\*(Aq);
.Ve
.SS "search"
.IX Subsection "search"
.Vb 1
\&  search(Str $arg1) : SearchObject
.Ve
.PP
The search method performs a regular expression match against the given string,
this method will always return a Data::Object::Search object which can be
used to introspect the result of the operation.
.IP "search example #1" 4
.IX Item "search example #1"
.Vb 1
\&  my $re = Data::Object::Regexp\->new(qr/test/);
\&
\&  $re\->search(\*(Aqthis is a test\*(Aq);
.Ve
.IP "search example #2" 4
.IX Item "search example #2"
.Vb 1
\&  my $re = Data::Object::Regexp\->new(qr/test/);
\&
\&  $re\->search(\*(Aqthis does not match\*(Aq, \*(Aqgi\*(Aq);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/data-object/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/data-object/wiki>
.PP
Project <https://github.com/iamalnewkirk/data-object>
.PP
Initiatives <https://github.com/iamalnewkirk/data-object/projects>
.PP
Milestones <https://github.com/iamalnewkirk/data-object/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/data-object/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/data-object/issues>
