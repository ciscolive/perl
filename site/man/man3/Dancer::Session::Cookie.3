.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dancer::Session::Cookie 3"
.TH Dancer::Session::Cookie 3 "2018-03-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Session::Cookie \- Encrypted cookie\-based session backend for Dancer
.SH "VERSION"
.IX Header "VERSION"
version 0.30
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Your \fIconfig.yml\fR:
.PP
.Vb 2
\&    session: "cookie"
\&    session_cookie_key: "this random key IS NOT very random"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements a session engine for sessions stored entirely
in cookies. Usually only the \fBsession id\fR is stored in cookies and
the session data itself is saved in some external storage, e.g.
a database. This module allows you to avoid using external storage at
all.
.PP
Since a server cannot trust any data returned by clients in cookies, this
module uses cryptography to ensure integrity and also secrecy. The
data your application stores in sessions is completely protected from
both tampering and analysis on the client-side.
.PP
Do be aware that browsers limit the size of individual cookies, so this method
is not suitable if you wish to store a large amount of data.  Browsers typically
limit the size of a cookie to 4KB, but that includes the space taken to store
the cookie's name, expiration and other attributes as well as its content.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
The setting \fBsession\fR should be set to \f(CW\*(C`cookie\*(C'\fR in order to use this session
engine in a Dancer application. See Dancer::Config.
.PP
Another setting is also required: \fBsession_cookie_key\fR, which should
contain a random string of at least 16 characters (shorter keys are
not cryptographically strong using \s-1AES\s0 in \s-1CBC\s0 mode).
.PP
The optional \fBsession_expires\fR setting can also be passed,
which will provide the duration time of the cookie. If it's not present, the
cookie won't have an expiration value.
.PP
Here is an example configuration to use in your \fIconfig.yml\fR:
.PP
.Vb 3
\&    session: "cookie"
\&    session_cookie_key: "kjsdf07234hjf0sdkflj12*&(@*jk"
\&    session_expires: 1 hour
.Ve
.PP
Compromising \fBsession_cookie_key\fR will disclose session data to
clients and proxies or eavesdroppers and will also allow tampering,
for example session theft. So, your \fIconfig.yml\fR should be kept at
least as secure as your database passwords or even more.
.PP
Also, changing \fBsession_cookie_key\fR will have an effect of immediate
invalidation of all sessions issued with the old value of key.
.PP
\&\fBsession_cookie_path\fR can be used to control the path of the session
cookie.  The default is \f(CW\*(C`/\*(C'\fR.
.PP
The global \fBsession_secure\fR setting is honored and a secure (https
only) cookie will be used if set.
.SH "DEPENDENCY"
.IX Header "DEPENDENCY"
This module depends on Session::Storage::Secure.  Legacy support is provided
using Crypt::CBC, Crypt::Rijndael, String::CRC32, Storable and
MIME::Base64.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See Dancer::Session for details about session usage in route handlers.
.PP
See Plack::Middleware::Session::Cookie,
Catalyst::Plugin::CookiedSession, \*(L"session\*(R" in Mojolicious::Controller for alternative implementation of this mechanism.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Alex Kapranoff <kappa@cpan.org>
.IP "\(bu" 4
Alex Sukria <sukria@cpan.org>
.IP "\(bu" 4
David Golden <dagolden@cpan.org>
.IP "\(bu" 4
Yanick Champoux <yanick@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2018, 2015, 2014, 2011 by Alex Kapranoff.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
