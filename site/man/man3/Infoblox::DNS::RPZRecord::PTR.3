.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::RPZRecord::PTR 3"
.TH Infoblox::DNS::RPZRecord::PTR 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::RPZRecord::PTR \- Response Policy Zone (RPZ) Substitute (PTR Record) Rule object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule object represents a Pointer (\s-1PTR\s0) resource record. To define a specific address-to-name mapping, add an \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule to a previously defined Response Policy Zone.
.PP
This record represents the substitution rule for \s-1DNS PTR\s0 records.
.PP
Note that you must specify only one view for the attribute \*(L"views\*(R".
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& #Constructor for an IPv4 Substitute (PTR Record) Rule object
\& my $bind_ptr = Infoblox::DNS::RPZRecord::PTR\->new (
\&         ipv4addr => $ipv4addr,             #Required
\&         ptrdname => $fqdn,                 #Required
\&         rp_zone  => $rp_zone,              #Required
\&         comment  => $string,               #Optional / Default is empty
\&         disable  => "true" | "false"       #Optional / Default "false"
\&         extattrs              => { $string => $extattr, ... },      #Optional / Default is undefined
\&         extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, #Optional / Default is undefined
\&         last_discovered  => $string,       #Optional / Default is empty
\&         name     => $fqdn,                 #Optional
\&         ttl      => $num | undef,          #Optional / Default is undefined
\&         views    => [$View1],              #Optional / Default is "default" view
\&     );
\&
\& #Constructor for an IPv6 Substitute (PTR Record) Rule object
\& my $bind_ptr = Infoblox::DNS::RPZRecord::PTR\->new (
\&         ipv6addr => $ipv6addr,             #Required
\&         ptrdname => $fqdn,                 #Required
\&         rp_zone  => $rp_zone,              #Required
\&         comment  => $string,               #Optional / Default is empty
\&         disable  => "true" | "false"       #Optional / Default "false"
\&         extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, #Optional / Default is undefined
\&         name     => $fqdn,                 #Optional
\&         ttl      => $nun | undef,          #Optional / Default is undefined
\&         views    => [$View1],              #Optional / Default is "default" view
\&     );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session that you can apply to a Substitute (\s-1PTR\s0 Record) Rule object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& #Constructor for an IPv4 Substitute (PTR Record) Rule object
\& my $bind_ptr = Infoblox::DNS::RPZRecord::PTR\->new (
\&     ipv4addr => "10.0.0.1",
\&     ptrdname => "bind_ptr.domain.com",
\&     comment => "this is a demo RPZ Substitute (PTR Record) Rule",
\&     disable => "true",
\&     ttl => "33",
\&     views => [$view1],
\&     rp_zone => $response_policy_zone  );
\&  # Submit for addition
\&  my $response = $session\->add( $bind_ptr );
\&
\& #Constructor for an IPv6 Substitute (PTR Record) Rule object
\& my $bind_ptr = Infoblox::DNS::RPZRecord::PTR\->new(
\&     ptrdname     => "ip6host.this.com",
\&     comment  => " this is a demo ipv6 RPZ Substitute (PTR Record) Rule ",
\&     disable => "true",
\&     ttl => "333",
\&     ipv6addr => "1234:5678:9abc:1000::1",
\&     rp_zone => $response_policy_zone  );
\&  # Submit for addition
\&  my $response = $session\->add( $bind_ptr );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve existing objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to get a specific Substitute (PTR Record) Rule object:
\&
\& name | ipv4addr | ipv6addr | ptrdname \- Optional. name/ptrdname is in FQDN format. ipv4addr is an IPv4 address with a 32\-bit number in dotted decimal notation. ipv6addr is the IPv6 (128 bits) address of the Substitute (PTR Record) Rule. ptrdname is the domain name of the Substitute (PTR Record) Rule.
\& view \- Optional. The DNS view in which the RPZ Substitute (PTR Record) Rule is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\& zone \- Optional. A zone name in FQDN format.
\& extattrs     \- Optional. A hash reference containing extensible attributes.
\& extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #To get an IPv4 Substitute (PTR Record) Rule object by name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::RPZRecord::PTR",
\&     name   => "1.0.0.10.in\-addr.arpa.rpz.com",
\&     view   => "default" );
\&
\& #To get an IPv4 Substitute (PTR Record) Rule object by ipv4addr
\& my @retrieved_objs = $session\->get(
\&     object   => "Infoblox::DNS::RPZRecord::PTR",
\&     ipv4addr => "10.0.0.1",
\&     view     => "default" );
\&
\& #To get an IPv4 Substitute (PTR Record) Rule object by ptrdname
\& my @retrieved_objs = $session\->get(
\&     object   => "Infoblox::DNS::RPZRecord::PTR",
\&     ptrdname => "bind_ptr.domain.com",
\&     view     => "default" );
\&
\& #To get an IPv6 Substitute (PTR Record) Rule object by name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::RPZRecord::PTR",
\&     name   => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa.rpz.com",
\&     view   => "default" );
\&
\& #To get an IPv6 Substitute (PTR Record) Rule object by ipv6addr
\& my @retrieved_objs = $session\->get(
\&     object   => "Infoblox::DNS::RPZRecord::PTR",
\&     ipv6addr => "1234:5678:9abc:1000::1",
\&     view     => "default" );
\&
\& #To get an IPv6 Substitute (PTR Record) Rule object by ptrdname
\& my @retrieved_objs = $session\->get(
\&     object   => "Infoblox::DNS::RPZRecord::PTR",
\&     ptrdname => "ip6host.this.com",
\&     view     => "default" );
\&
\& # get all Substitute (PTR Record) Rule objects with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::RPZRecord::PTR",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify objects in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use method to modify the comment for IPv4 or IPv6 object.
\& $bind_ptr\->comment("this is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $bind_ptr );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this function to submit the remove of an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
\&\fB#Remove an object with a unique name\fR
.Sp
.Vb 9
\& # Get the object with the same name for IPv4 object
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::RPZRecord::PTR",
\&     name   => "1.0.0.10.in\-addr.arpa.rpz.com",
\&     view   => "default" );
\& # find the desired object from retrieved list.
\& my $desired_ptr = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_ptr );
\&
\& # Get the object with the same name for an IPv6 object
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::RPZRecord::PTR",
\&     name   => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa.rpz.com",
\&     view   => "default" );
\& # find the desired object from retrieved list.
\& my $desired_ptr = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_ptr );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for existing Substitute (\s-1PTR\s0 Record) Rule objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to search for a Substitute (PTR Record) Rule object:
\&
\& name | ipv4addr | ipv6addr | ptrdname \- Optional. The IPv4 or IPv6 address of the RPZ Substitute (PTR Record) Rule, or the domain name in FQDN (Fully Qualified Domain Name) format (regular expression).
\& view                                  \- Optional. The DNS view in which the RPZ Substitute (PTR Record) Rule is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\& comment                               \- Optional. A comment in string format (regular expression).
\& extattrs                              \- Optional. A hash reference containing extensible attributes.
\& extensible_attributes                 \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # search for all IPv4 Substitute (PTR Record) Rule objects in the default DNS view that match 10.0.0.0/8 and that contain "bind" in the comment field
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DNS::RPZRecord::PTR",
\&     name    => "10.in\-addr.arpa.rpz.com",
\&     comment => "bind*",
\&     view    => "default" );
\&
\& my @retrieved_objs = $session\->search(
\&     object   => "Infoblox::DNS::RPZRecord::PTR",
\&     ipv4addr => \*(Aq10\e..*\e..*\e..*\*(Aq,
\&     comment  => "bind*",
\&     view     => "default" );
\&
\& my @retrieved_objs = $session\->search(
\&     object   => "Infoblox::DNS::RPZRecord::PTR",
\&     ptrdname => "bind_ptr.domain.com",
\&     comment  => "bind*",
\&     view     => "default" );
\&
\& # search for all IPv6 Substitute (PTR Record) Rule objects under 1234:5678:9abc::/48 which have bind in comment field in default view
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DNS::RPZRecord::PTR",
\&     name    => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa.rpz.com",
\&     comment => "bind*",
\&     view    => "default" );
\&
\& my @retrieved_objs = $session\->search(
\&     object   => "Infoblox::DNS::RPZRecord::PTR",
\&     ipv6addr => "1234:5678:9abc:1000::1",
\&     comment  => "bind*",
\&     view     => "default" );
\&
\& my @retrieved_objs = $session\->search(
\&     object   => "Infoblox::DNS::RPZRecord::PTR",
\&     ptrdname => "ip6host.this.com",
\&     comment  => "bind*",
\&     view     => "default" );
\&
\& # search for all Substitute (PTR Record) Rule objects in the "10.10.10.in\-addr.arpa" zone of the default view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::RPZRecord::PTR",
\&     zone   => "10.10.10.in\-addr.arpa",
\&     view   => "default"
\&     );
\&
\& # search all RPZ Substitute (PTR Record) Rules with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DNS::RPZRecord::MX",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute value of an \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $rpz_ptr\->comment();
\& #Modify comment
\& $rpz_ptr\->comment("Modifying the Substitute (PTR Record) Rule comment");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DNS\s0 record.
.Sp
Include the specific parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false, therefore the \s-1DNS\s0 record is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $rpz_ptr\->disable();
\& #Modify disable
\& $rpz_ptr\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $rpz_ptr\->extattrs();
\& #Modify extattrs
\& $rpz_ptr\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with an \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $rpz_ptr\->extensible_attributes();
\& #Modify extensible attributes
\& $rpz_ptr\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "ipv4addr( )"
.IX Subsection "ipv4addr( )"
.RS 4
Use this method to set or retrieve the IPv4 address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv4addr
\& my $ipv4addr = $rpz_ptr\->ipv4addr();
\& #Modify ipv4addr
\& $bind_ptr\->ipv4addr("10.0.0.2");
.Ve
.RE
.RS 4
.RE
.SS "ipv6addr( )"
.IX Subsection "ipv6addr( )"
.RS 4
Use this method to set or retrieve the IPv6 address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The IPv6 (128 bits) of the Substitute (\s-1PTR\s0 Record) Rule (example: aaaa:bbbb:cccc:dddd:eeee:ffff:0000:1111).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6addr
\& my $ipv6addr = $rpz_ptr\->ipv6addr();
\& #Modify ipv6addr
\& $bind_ptr\->ipv6addr("1234:5678:9abc:1000::2");
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the \s-1FQDN\s0 of the \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
\&\s-1FQDN\s0 of the \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $rpz_ptr\->name();
\& #Modify name
\& $rpz_ptr\->name(\*(Aq12.0.0.1.in\-addr.arpa.rpz.com\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ptrdname( )"
.IX Subsection "ptrdname( )"
.RS 4
Use this method to set or retrieve the Substitute (\s-1PTR\s0 Record) Rule domain name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the domain name for the Substitute (\s-1PTR\s0 Record) Rule.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ptrdname
\& my $ptrdname = $rpz_ptr\->ptrdname();
\& #Modify ptrdname
\& $rpz_ptr\->ptrdname("new domain name");
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to configure or retrieve the Time to Live (\s-1TTL\s0) value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is undefined; therefore the record inherits the \s-1TTL\s0 value from the zone level.
.Sp
With a specified \s-1TTL\s0 value, the method overrides the zone values with the specified \s-1TTL\s0 value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration ,in seconds, that the record is cached. Zero indicates that the record should not be cached.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get ttl
\& my $ttl = $rpz_ptr\->ttl();
\& #Modify ttl
\& $rpz_ptr\->ttl(1800);
\& #Un\-override ttl
\& $rpz_ptr\->ttl(undef);
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to specify or retrieve the view in which the \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule is located.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" view, which means the \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule is located in the default \s-1DNS\s0 view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An array reference of defined Infoblox::DNS::View objects.
.Sp
Note that the array size must be 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter,the method returns true when the modification succeeds,and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get views
\& my $ref_views = $rpz_ptr\->views();
\& #Modify views, an array of Infoblox::DNS::View objects
\& $rpz_ptr\->views([$view1]);
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of a Substitute (\s-1PTR\s0 Record) Rule. This method is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get zone
\& my $zone = $rpz_ptr\->zone();
.Ve
.RE
.RS 4
.RE
.SS "rp_zone( )"
.IX Subsection "rp_zone( )"
.RS 4
Use this method to set or retrieve the zone object of a Substitute (\s-1PTR\s0 Record) Rule.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An Infoblox::DNS::Zone object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get rp_zone
\& my $rp_zone = $rpz_ptr\->rp_zone();
\& #Modify rp_zone, reference of Infoblox::DNS::Zone object
\& $rpz_ptr\->rp_zone($response_policy_zone);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to an object, such as create, search, modify, and remove an object. This sample code also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS\s0 IPv4 \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the zone prior to an RPZ Substitute (PTR Record) Rule insertion
\& my $zone = Infoblox::DNS::Zone\->new(name => "10.0.0.0/8");
\& unless ($zone) {
\&    die("Construct zone failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& #Verify if the zone exists
\& my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "10.in\-addr.arpa");
\& unless ($object) {
\&    print "Zone does not exist on server, safe to add the zone\en";
\&    $session\->add($zone)
\&       or die("Add zone failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Zone added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS\s0 IPv4 \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule\fR
.PP
.Vb 10
\& my $bind_ptr = Infoblox::DNS::RPZRecord::PTR\->new(
\&    ptrdname     => "bind_ptr.domain.com",
\&    comment  => " this is a demo RPZ Substitute (PTR Record) Rule ",
\&    ipv4addr => "10.0.0.1"
\&  );
\&  unless ($bind_ptr) {
\&     die("Construct Substitute (PTR Record) Rule failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\&  }
\& print "Substitute (PTR Record) Rule object created successfully\en";
\&
\& #Add the Substitute (PTR Record) Rule object to the Infoblox appliance through a session
\& $session\->add($bind_ptr)
\&     or die("Add Substitute (PTR Record) Rule failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Substitute (PTR Record) Rule object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS\s0 IPv4 \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule\fR
.PP
.Vb 11
\& #Search for all RPZ Substitute (PTR Record) Rules that match "10.in\-addr.arpa"
\& my @retrieved_objs = $session\->search(
\&     "object" => "Infoblox::DNS::RPZRecord::PTR",
\&     "name" => \*(Aq10\e.in\-addr.arpa\*(Aq,
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search Substitute (PTR Record) Rule failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Substitute (PTR Record) Rule object found at least 1 matching entry\en";
\&
\& #Search all RPZ Substitute (PTR Record) Rules that have "bind" in the comment
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::RPZRecord::PTR",
\&     name   => \*(Aq10\e.*\e.in\-addr.arpa\*(Aq,
\&     comment => "bind*"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search Substitute (PTR Record) Rule failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Substitute (PTR Record) Rule object using regexp found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS\s0 IPv4 \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule\fR
.PP
.Vb 10
\& #Get an RPZ Substitute (PTR Record) Rule through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::RPZRecord::PTR",
\&     name   => "1.0.0.10.in\-addr.arpa.rpz.com",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Substitute (PTR Record) Rule failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Substitute (PTR Record) Rule object found at least 1 matching entry\en";
\&#Modify one of the attributes of the specified RPZ Substitute (PTR Record) Rule
\& $object\->comment ("modified comment");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify Substitute (PTR Record) Rule failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Substitute (PTR Record) Rule object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DNS\s0 IPv4 \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule\fR
.PP
.Vb 5
\& #Get an RPZ Substitute (PTR Record) Rule through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::RPZRecord::PTR",
\&     name   => "1.0.0.10.in\-addr.arpa.rpz.com",
\& );
\&
\&  my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Substitute (PTR Record) Rule failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Substitute (PTR Record) Rule object found at least 1 matching entry\en";
\&
\& #submit the object for removal
\& $session\->remove($object)
\&     or die("Remove Substitute (PTR Record) Rule failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Substitute (PTR Record) Rule object removed successfully \en";
.Ve
.PP
\&\fB#Preparation prior to a \s-1DNS\s0 IPv6 \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the zone prior to a Substitute (PTR Record) Rule insertion
\& my $zone = Infoblox::DNS::Zone\->new(name => "rpz.com",
\&                                     rpz_policy => "GIVEN");
\& unless ($zone) {
\& die("Construct zone failed: ",
\&     Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& #Verify if the zone exists
\& my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "rpz.com");
\& unless ($object) {
\& print "Zone does not exist on server, safe to add the zone\en";
\& $session\->add($zone)
\&    or die("Add zone failed: ",
\&           $session\->status_code() . ":" . $session\->status_detail());
\& }
.Ve
.PP
\&\fB#Create a \s-1DNS\s0 IPv6 \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule\fR
.PP
.Vb 10
\& my $bind_ptr = Infoblox::DNS::RPZRecord::PTR\->new(
\&     ptrdname     => "ip6host.this.com",
\&     comment  => " this is a demo RPZ Substitute (PTR Record) Rule ",
\&     ipv6addr => "1234:5678:9abc:1000::1",
\&     rp_zone  => $zone,
\& );
\& unless ($bind_ptr) {
\&  die("Construct DNS Substitute (PTR Record) Rule failed: ",
\&      Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Substitute (PTR Record) Rule object created successfully\en";
\& #Add the Substitute (PTR Record) Rule object to the Infoblox  appliance through a session
\& $session\->add($bind_ptr)
\&     or die("Add Substitute (PTR Record) Rule failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Substitute (PTR Record) Rule object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS\s0 IPv6 \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule\fR
.PP
.Vb 11
\& #Search for an RPZ Substitute (PTR Record) Rule in the zone
\& my @retrieved_objs = $session\->search(
\&  "object" => "Infoblox::DNS::RPZRecord::PTR",
\&  "name" => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa.rpz.com",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&  die("Search Substitute (PTR Record) Rule failed: ",
\&      $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Substitute (PTR Record) Rule object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS\s0 IPv6 \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule\fR
.PP
.Vb 11
\& #Get RPZ Substitute (PTR Record) Rule through the session
\& my @retrieved_objs = $session\->get(
\&  object => "Infoblox::DNS::RPZRecord::PTR",
\&  name   => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa.rpz.com",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&  die("Get Substitute (PTR Record) Rule failed: ",
\&      $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Substitute (PTR Record) Rule object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified RPZ Substitute (PTR Record) Rule
\& $object\->comment ("modified comment");
\&
\& #Apply the changes
\& $session\->modify($object)
\&  or die("Modify Substitute (PTR Record) Rule failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\& print "Substitute (PTR Record) Rule object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DNS\s0 IPv6 \s-1RPZ\s0 Substitute (\s-1PTR\s0 Record) Rule\fR
.PP
.Vb 11
\& #Get RPZ Substitute (PTR Record) Rule through the session
\& my @retrieved_objs = $session\->get(
\&  object => "Infoblox::DNS::RPZRecord::PTR",
\&  name   => "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.c.b.a.9.8.7.6.5.4.3.2.1.ip6.arpa.rpz.com",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&  die("Get Substitute (PTR Record) Rule failed: ",
\&       $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Substitute (PTR Record) Rule object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&  or die("Remove Substitute (PTR Record) Rule failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Substitute (PTR Record) Rule object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::View, Infoblox::DNS::Zone, Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
