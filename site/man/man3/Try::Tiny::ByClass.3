.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Try::Tiny::ByClass 3"
.TH Try::Tiny::ByClass 3 "2013-01-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Try::Tiny::ByClass \- selectively catch exceptions by class name
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Try::Tiny::ByClass;
\&  
\&  try {
\&        die $exception_object;
\&  } catch_case [
\&    \*(AqSome::Class\*(Aq => sub {
\&      # handle Some::Class exceptions
\&    },
\&    \*(AqException::DivByZero\*(Aq => sub {
\&      # handle Exception::DivByZero exceptions
\&    },
\&  ], finally {
\&    # always do this
\&  };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a simple wrapper around \f(CW\*(C`Try::Tiny\*(C'\fR, which see. It
re-exports \f(CW\*(C`try\*(C'\fR, \f(CW\*(C`catch\*(C'\fR, and
\&\f(CW\*(C`finally\*(C'\fR.
.PP
In addition, it provides a way to catch only some exceptions by filtering on
the class (including superclasses and consumed roles) of an exception object.
.SS "Functions"
.IX Subsection "Functions"
.IP "catch_case ($;@)" 4
.IX Item "catch_case ($;@)"
Intended to be used instead of \f(CW\*(C`catch\*(C'\fR in the second
argument position of \f(CW\*(C`try\*(C'\fR.
.Sp
Instead of a block it takes a reference to an array of \f(CW\*(C`CLASS => CODEREF\*(C'\fR
pairs, which it passes on to \f(CW\*(C`dispatch\*(C'\fR in
\&\f(CW\*(C`Dispatch::Class\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Try::Tiny, Dispatch::Class
.SH "AUTHOR"
.IX Header "AUTHOR"
Lukas Mai, \f(CW\*(C`<l.mai at web.de>\*(C'\fR
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2013 Lukas Mai.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
