.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::tt 3"
.TH App::tt 3 "2020-09-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::tt \- Time tracking application
.SH "VERSION"
.IX Header "VERSION"
0.13
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
App::tt is an application that can track how much time you spend on an
project from command line.
.PP
It is inspired by App::TimeTracker and share the same log file format,
but it has (in my humble opinion) a simpler interface and easier to install.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The application is built up by specifying an command and optional arguments.
Here is a list of example usages, but you can get more details by adding \*(L"\-h\*(R"
after each command.
.PP
.Vb 4
\&  # Register forgotten time
\&  $ tt register 2020\-01\-01T09:00:00 17:00:00 \-p "project\-name"
\&  $ tt register 2020\-01\-01T09:00:00 17:00:00 \-p "project\-name" \-t "tag1,tag2"
\&  $ tt register 2020\-01\-01T09:00:00 17:00:00 \-p "project\-name" \-d "description" \-t "tag1,tag2"
\&
\&  # Edit the last entry, or a specific file
\&  $ tt edit
\&  $ tt edit ~/.TimeTracker/2020/01/20200106\-150000_nms.trc
\&
\&  # See the log
\&  $ tt log
\&  $ tt log \-0year                  # Log for this year
\&  $ tt log \-1year \-t meetings      # Log for last year, for tag "meetings"
\&  $ tt log \-p project\-name \-1month # Log for last month, for project "project\-name"
\&  $ tt log \-2                      # Log for two months back
\&
\&  # Start tracking time
\&  $ tt start
\&  $ tt start \-p project\-name \-t tag1,tag2
\&  $ tt start \-p project\-name \-t tag1,tag2 09:03
\&
\&  # Current status
\&  $ tt
\&  $ tt status
\&
\&  # Stop tracking time. Specifiying a time will go back to yesterday,
\&  # in case you forgot to stop it.
\&  $ tt stop
\&  $ tt stop 18:04
.Ve
.PP
Basic usage;
.PP
.Vb 3
\&  # Start to track time
\&  $ cd $HOME/git/my\-project
\&  $ tt start
\&
\&  # Work, work, work, cd ..., do other stuff
\&  $ tt stop
.Ve
.PP
A more complex example:
.PP
.Vb 2
\&  # Start to work on an event and add a tag
\&  $ tt start \-t ISSUE\-999 \-p some\-project\-at\-work
\&
\&  # Add another tag to the same event and add a \-\-comment and specify when
\&  # you stopped working
\&  $ tt stop \-t GITHUB\-1005 "Today I was mostly in meetings" 15:24
.Ve
.SH "ACTIONS"
.IX Header "ACTIONS"
Each command can tak \f(CW\*(C`\-h\*(C'\fR for more details. Example:
.PP
.Vb 1
\&  $ tt start \-h
.Ve
.SS "edit"
.IX Subsection "edit"
This command can be used to rewrite a log entry.
.PP
.Vb 2
\&  # Edit the last entry with your favorite $EDITOR
\&  $ tt edit
\&
\&  # Edit a given file with your favorite $EDITOR
\&  $ tt edit ~/.TimeTracker/2017/12/20171220\-092000_rg.trc
\&
\&  # Rewrite all the log entries with a perl script
\&  # See source code before running this command. (Internals might change)
\&  $ cat rewrite.pl | tt edit
.Ve
.SS "export"
.IX Subsection "export"
This will export a given set of records as \s-1CSV.\s0
.PP
.Vb 5
\&  $ tt export         # this month
\&  $ tt export \-2      # two months ago
\&  $ tt export year    # log for year
\&  $ tt export \-1y     # last year
\&  $ tt export \-p foo  # Filter by project name
.Ve
.SS "log"
.IX Subsection "log"
This command will report how much time you have spent on various
events.
.PP
.Vb 5
\&  $ tt log         # this month
\&  $ tt log \-2      # two months ago
\&  $ tt log year    # log for year
\&  $ tt log \-1y     # last year
\&  $ tt log \-p foo  # Filter by project name
.Ve
.PP
If you set the \*(L"\s-1TT_HOURS_PER_MONTH\*(R"\s0 environment variable to the number of hours
you plan to work per month, then \*(L"tt log\*(R" will also print how many hours you
have to work in average to meet the target. Example:
.PP
.Vb 3
\&  $ TT_HOURS_PER_MONTH=150 tt log \-p my_job
\&  ...
\&  Remaining this month: 21d,  7:08h/d.
.Ve
.SS "register"
.IX Subsection "register"
This command is used to import data from other sources. \*(L"project-name\*(R" default to
\&\*(L"\-p\*(R" or current git project, \*(L"some description\*(R" default to \*(L"\-d\*(R" and tags can be
specified by \-t foo \-t bar
.PP
.Vb 1
\&  $ tt register 2020\-01\-01T09:00:00 17:00:00 \-p project\-name \-d "some description" \-t foo \-t bar
.Ve
.SS "start"
.IX Subsection "start"
This command will start tracking a new event. It will also stop the current
event if any event is in process. This command takes the \*(L"\-p\*(R" and \*(L"\-t\*(R"
switches. \*(L"\-p\*(R" (project) is not required if you start from a git repository.
.PP
.Vb 2
\&  # Specify a tag and custom project name
\&  $ tt start \-t ISSUE\-999 some\-project\-name
\&
\&  # Started working at 08:00 instead of now
\&  $ tt start 08:00
.Ve
.SS "status"
.IX Subsection "status"
This is the default command and will return the current status:
Are you working on something or not?
.PP
.Vb 1
\&  $ tt status
.Ve
.SS "stop"
.IX Subsection "stop"
This command will stop tracking the current event.
.PP
.Vb 2
\&  # Stop working at 16:00 instead of now
\&  $ tt stop 16:00
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2014, Jan Henning Thorsen
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jan Henning Thorsen \- \f(CW\*(C`jhthorsen@cpan.org\*(C'\fR
