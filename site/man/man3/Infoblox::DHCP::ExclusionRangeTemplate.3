.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::ExclusionRangeTemplate 3"
.TH Infoblox::DHCP::ExclusionRangeTemplate 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::ExclusionRangeTemplate \- DHCP ExclusionRangeTemplate object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1DHCP\s0 exclusion range template describes the range of \s-1IP\s0 addresses that can be excluded in an address range template. If static \s-1IP\s0 addresses are assigned to certain hosts in the middle of an address range, those addresses can be excluded from the address range so the \s-1DHCP\s0 server does not assign those \s-1IP\s0 addresses to the clients.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 5
\& my $exclusion_range_template = Infoblox::DHCP::ExclusionRangeTemplate\->new(
\&       offset               => $num,          #Required
\&       number_of_addresses  => $num,          #Required
\&       comment              => $string,       #Optional / Default is empty
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to be applied to a \s-1DHCP\s0 exclusion range template object.
.SS "Infoblox::DHCP::RangeTemplate\->exclude( )"
.IX Subsection "Infoblox::DHCP::RangeTemplate->exclude( )"
.RS 4
Use this function to specify exclusion range for the \s-1DHCP\s0 range template object. See Infoblox::DHCP::RangeTemplate\->\fBexclude()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     #Construct a DHCP ExclusionRangeTemplate object
\&     my $exclusion_range_template = Infoblox::DHCP::ExclusionRangeTemplate\->new(
\&              offset               => "10",
\&              number_of_addresses  => "5",
\&              comment              => "Exclude five IP addresses"
\&     );
\&
\&     # Configure DHCP ExclusionRangeTemplate on the DHCP Range template object
\&     my $response = $dhcp_range_template\->exclude([$exclusion_range_template]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 exclusion range template object.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment of a \s-1DHCP\s0 exclusion range template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get comment
\&     my $comment = $exclusion_range_template\->comment();
\&     #Modify comment
\&     $exclusion_range_template\->comment("Modifying the DHCP exclusion range template comment");
.Ve
.RE
.RS 4
.RE
.SS "number_of_addresses( )"
.IX Subsection "number_of_addresses( )"
.RS 4
Use this method to set or retrieve the number of addresses in the \s-1DHCP\s0 exclusion range template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The number of addresses in this exclusion range template.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get number_of_addresses
\&     my $number_of_addresses = $exclusion_range_template\->number_of_addresses();
\&     #Modify number_of_addresses
\&     $exclusion_range_template\->number_of_addresses("10");
.Ve
.RE
.RS 4
.RE
.SS "offset( )"
.IX Subsection "offset( )"
.RS 4
Use this method to set or retrieve the address offset of the \s-1DHCP\s0 exclusion range template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The address offset of this exclusion range template. The offset is calculated from the start address of network template to which the \s-1DHCP\s0 range template is assigned to. For example, if offset is set to 10 and number_of_addresses is set to 10, and network is set to 10.0.0.0/8, then start address of exclusion range created from this exclusion range template will be 10.0.0.10 and end address will be 10.0.0.20.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get offset
\&     my $offset = $exclusion_range_template\->offset();
\&     #Modify offset
\&     $exclusion_range_template\->offset("10");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a \s-1DHCP\s0 exclusion range object such as add, modify, and remove. Also, this sample includes error handling for the operations.
.PP
\&\fB#PROGRAM \s-1STARTS:\s0 Include all the modules that will be used\fR
.PP
.Vb 2
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create the \s-1DHCP\s0 Range template object\fR
.PP
.Vb 12
\& my $dhcp_range_template = Infoblox::DHCP::RangeTemplate\->new(
\&         name                    => "custom_range_template",
\&         offset                  => "10",
\&         number_of_addresses     => "10",
\&         authority               => "TRUE",
\&         bootfile                => "bootfile1.com",
\& );
\& unless($dhcp_range_template) {
\&        die("Construct DHCP Range template object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Range template object created successfully\en";
\&
\& #Add the DHCP Range object into the Infoblox appliance through a session
\& $session\->add($dhcp_range_template)
\&     or die("Add DHCP Range template object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range object added to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 exclusion range templat object\fR
.PP
.Vb 10
\& my $exclusion_range_template = Infoblox::DHCP::ExclusionRangeTemplate\->new(
\&          offset              => "10",
\&          number_of_addresses => "5",
\&          comment             => "Exclude five IP addresses"
\& );
\& unless($exclusion_range_template) {
\&        die("Construct DHCP exclusion range template object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP exclusion range template object created successfully\en";
.Ve
.PP
\&\fB#Add \s-1DHCP\s0 exclusion range template to \s-1DHCP\s0 Range template\fR
.PP
.Vb 11
\& #Get the DHCP Range template object
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DHCP::RangeTemplate",
\&     name       => "custom_range_template"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP Range template object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP Range template object found at least 1 matching entry\en";
\&
\& #Apply the changes to the DHCP Range template object
\& $object\->exclude([$exclusion_range_template]);
\&
\& #Submit the changes to the Session
\& $session\->modify($object)
\&     or die("Adding DHCP exclusion range to DHCP Range template object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range template with exclusion range template updated to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Remove \s-1DHCP\s0 exclusion range template\fR
.PP
.Vb 2
\& #Remove the exclusion range template from the DHCP Range template object.
\& $object\->exclude([]);
\&
\& #Update DHCP Range template object through the Infoblox session.
\& $session\->modify($object)
\&   or die("Modify DHCP Range template object failed: ",
\&   $session\->status_code() . ":" . $session\->status_detail());
\& print "Removed DHCP exclusion range template from DHCP Range successfully\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,Infoblox::DHCP::RangeTemplate,Infoblox::DHCP::NetworkTemplate
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
