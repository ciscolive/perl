.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::Layer3 3"
.TH SNMP::Info::Layer3 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::Layer3 \- SNMP Interface to network devices serving Layer3 or
Layers 2 & 3
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Baker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& # Let SNMP::Info determine the correct subclass for you.
\& my $l3 = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class = $l3\->class();
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
\&
\& # Let\*(Aqs get some basic Port information
\& my $interfaces = $l3\->interfaces();
\& my $i_up       = $l3\->i_up();
\& my $i_speed    = $l3\->i_speed();
\& foreach my $iid (keys %$interfaces) {
\&    my $port  = $interfaces\->{$iid};
\&    my $up    = $i_up\->{$iid};
\&    my $speed = $i_speed\->{$iid}
\&    print "Port $port is $up. Port runs at $speed.\en";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is usually used as a superclass for more specific device classes
listed under SNMP::Info::Layer3::*   Please read all docs under SNMP::Info
first.
.PP
Provides generic methods for accessing \s-1SNMP\s0 data for Layer 3 network devices.
Includes support for Layer2+3 devices.
.PP
For speed or debugging purposes you can call the subclass directly, but not
after determining a more specific class using the method above.
.PP
.Vb 1
\& my $l3 = new SNMP::Info::Layer3(...);
.Ve
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.IP "SNMP::Info" 4
.IX Item "SNMP::Info"
.PD 0
.IP "SNMP::Info::Bridge (For L2/L3 devices)" 4
.IX Item "SNMP::Info::Bridge (For L2/L3 devices)"
.IP "SNMP::Info::EtherLike" 4
.IX Item "SNMP::Info::EtherLike"
.IP "SNMP::Info::Entity" 4
.IX Item "SNMP::Info::Entity"
.IP "SNMP::Info::PowerEthernet" 4
.IX Item "SNMP::Info::PowerEthernet"
.IP "SNMP::Info::IPv6" 4
.IX Item "SNMP::Info::IPv6"
.IP "SNMP::Info::LLDP" 4
.IX Item "SNMP::Info::LLDP"
.IP "SNMP::Info::DocsisHE" 4
.IX Item "SNMP::Info::DocsisHE"
.IP "SNMP::Info::AdslLine" 4
.IX Item "SNMP::Info::AdslLine"
.PD
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fIIP-MIB\fR" 4
.IX Item "IP-MIB"
.PD 0
.IP "\fIISIS-MIB\fR" 4
.IX Item "ISIS-MIB"
.IP "\fIOSPF-MIB\fR" 4
.IX Item "OSPF-MIB"
.IP "\fI\s-1BGP4\-MIB\s0\fR" 4
.IX Item "BGP4-MIB"
.PD
.SS "Inherited MIBs"
.IX Subsection "Inherited MIBs"
See \*(L"\s-1REQUIREMENTS\*(R"\s0 in SNMP::Info for its \s-1MIB\s0 requirements.
.PP
See \*(L"Required MIBs\*(R" in SNMP::Info::Bridge for its \s-1MIB\s0 requirements.
.PP
See \*(L"Required MIBs\*(R" in SNMP::Info::EtherLike for its \s-1MIB\s0 requirements.
.PP
See \*(L"Required MIBs\*(R" in SNMP::Info::Entity for its \s-1MIB\s0 requirements.
.PP
See \*(L"Required MIBs\*(R" in SNMP::Info::PowerEthernet for its \s-1MIB\s0 requirements.
.PP
See \*(L"Required MIBs\*(R" in SNMP::Info::IPv6 for its \s-1MIB\s0 requirements.
.PP
See \*(L"Required MIBs\*(R" in SNMP::Info::LLDP for its \s-1MIB\s0 requirements.
.PP
See \*(L"Required MIBs\*(R" in SNMP::Info::DocsisHE for its \s-1MIB\s0 requirements.
.PP
See \*(L"Required MIBs\*(R" in SNMP::Info::AdslLine for its \s-1MIB\s0 requirements.
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP\s0
.ie n .IP "$l3\->\fBmac()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBmac()\fR" 4
.IX Item "$l3->mac()"
Returns root port mac address
.Sp
(\f(CW\*(C`ifPhysAddress.1\*(C'\fR)
.ie n .IP "$l3\->\fBrouter_ip()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBrouter_ip()\fR" 4
.IX Item "$l3->router_ip()"
(\f(CW\*(C`ospfRouterId.0\*(C'\fR)
.ie n .IP "$l3\->\fBbgp_id()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBbgp_id()\fR" 4
.IX Item "$l3->bgp_id()"
(\f(CW\*(C`bgpIdentifier.0\*(C'\fR)
.Sp
Returns the \s-1BGP\s0 identifier of the local system
.ie n .IP "$l3\->\fBbgp_local_as()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBbgp_local_as()\fR" 4
.IX Item "$l3->bgp_local_as()"
Returns the local autonomous system number
.Sp
(\f(CW\*(C`bgpLocalAs.0\*(C'\fR)
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$l3\->\fBmodel()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBmodel()\fR" 4
.IX Item "$l3->model()"
Tries to reference \f(CW$l3\fR\->\fBid()\fR to one of the product MIBs listed above
.Sp
Removes 'cisco'  from cisco devices for readability.
.ie n .IP "$l3\->\fBserial()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBserial()\fR" 4
.IX Item "$l3->serial()"
Returns a serial number if found from \fIENTITY-MIB\fR and \fI\s-1OLD\-CISCO\-\s0\fR... \s-1MIB.\s0
.ie n .IP "$l3\->\fBvendor()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBvendor()\fR" 4
.IX Item "$l3->vendor()"
Tries to cull a Vendor name from \f(CW\*(C`sysDescr\*(C'\fR
.ie n .IP "$l3\->\fBroot_ip()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBroot_ip()\fR" 4
.IX Item "$l3->root_ip()"
Returns the primary \s-1IP\s0 used to communicate with the device.  Returns the first
found:  \s-1OSPF\s0 Router \s-1ID\s0 (\f(CW\*(C`ospfRouterId\*(C'\fR) or any \s-1OSPF\s0 Host \s-1IP\s0 Address
(\f(CW\*(C`ospfHostIpAddress\*(C'\fR).
.SS "Globals imported from SNMP::Info"
.IX Subsection "Globals imported from SNMP::Info"
See \*(L"\s-1USAGE\*(R"\s0 in SNMP::Info for details.
.SS "Global Methods imported from SNMP::Info::Bridge"
.IX Subsection "Global Methods imported from SNMP::Info::Bridge"
See \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::Bridge for details.
.SS "Global Methods imported from SNMP::Info::EtherLike"
.IX Subsection "Global Methods imported from SNMP::Info::EtherLike"
See \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::EtherLike for details.
.SS "Global Methods imported from SNMP::Info::Entity"
.IX Subsection "Global Methods imported from SNMP::Info::Entity"
See \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::Entity for details.
.SS "Global Methods imported from SNMP::Info:PowerEthernet"
.IX Subsection "Global Methods imported from SNMP::Info:PowerEthernet"
See \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::PowerEthernet for details.
.SS "Global Methods imported from SNMP::Info::IPv6"
.IX Subsection "Global Methods imported from SNMP::Info::IPv6"
See \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::IPv6 for details.
.SS "Global Methods imported from SNMP::Info::LLDP"
.IX Subsection "Global Methods imported from SNMP::Info::LLDP"
See \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::LLDP for details.
.SS "Global Methods imported from SNMP::Info::DocsisHE"
.IX Subsection "Global Methods imported from SNMP::Info::DocsisHE"
See \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::DocsisHE for details.
.SS "Global Methods imported from SNMP::Info::AdslLine"
.IX Subsection "Global Methods imported from SNMP::Info::AdslLine"
See \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::AdslLine for details.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$l3\->\fBinterfaces()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBinterfaces()\fR" 4
.IX Item "$l3->interfaces()"
Returns the map between \s-1SNMP\s0 Interface Identifier (iid) and physical port
name.
.Sp
Only returns those iids that have a description listed in \f(CW$l3\fR\->\fBi_description()\fR
.ie n .IP "$l3\->\fBi_name()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBi_name()\fR" 4
.IX Item "$l3->i_name()"
Returns reference to hash of iid to human set name.
.Sp
Defaults to \f(CW\*(C`ifName\*(C'\fR, but checks for an \f(CW\*(C`ifAlias\*(C'\fR
.ie n .IP "$l3\->\fBi_duplex()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBi_duplex()\fR" 4
.IX Item "$l3->i_duplex()"
Returns reference to hash of iid to current link duplex setting.
.Sp
Maps \f(CW$l3\fR\->\fBel_index()\fR to \f(CW$l3\fR\->el_duplex, then culls out
full,half, or auto and sets the map to that value.
.Sp
See SNMP::Info::EtherLike for the \fBel_index()\fR and \fBel_duplex()\fR methods.
.ie n .SS "\fIIP-MIB\fP Arp Cache Table (""ipNetToMediaTable"")"
.el .SS "\fIIP-MIB\fP Arp Cache Table (\f(CWipNetToMediaTable\fP)"
.IX Subsection "IP-MIB Arp Cache Table (ipNetToMediaTable)"
.ie n .IP "$l3\->\fBat_index()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBat_index()\fR" 4
.IX Item "$l3->at_index()"
Returns reference to hash.  Maps \s-1ARP\s0 table entries to Interface IIDs
.Sp
(\f(CW\*(C`ipNetToMediaIfIndex\*(C'\fR)
.Sp
If the device doesn't support \f(CW\*(C`ipNetToMediaIfIndex\*(C'\fR, this will try
the deprecated \f(CW\*(C`atIfIndex\*(C'\fR.
.ie n .IP "$l3\->\fBat_paddr()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBat_paddr()\fR" 4
.IX Item "$l3->at_paddr()"
Returns reference to hash.  Maps \s-1ARP\s0 table entries to \s-1MAC\s0 addresses.
.Sp
(\f(CW\*(C`ipNetToMediaPhysAddress\*(C'\fR)
.Sp
If the device doesn't support \f(CW\*(C`ipNetToMediaPhysAddress\*(C'\fR, this will try
the deprecated \f(CW\*(C`atPhysAddress\*(C'\fR.
.ie n .IP "$l3\->\fBat_netaddr()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBat_netaddr()\fR" 4
.IX Item "$l3->at_netaddr()"
Returns reference to hash.  Maps \s-1ARP\s0 table entries to \s-1IP\s0 addresses.
.Sp
(\f(CW\*(C`ipNetToMediaNetAddress\*(C'\fR)
.Sp
If the device doesn't support \f(CW\*(C`ipNetToMediaNetAddress\*(C'\fR, this will try
the deprecated \f(CW\*(C`atNetAddress\*(C'\fR.
.SS "\s-1ARP\s0 Cache Entries"
.IX Subsection "ARP Cache Entries"
The \f(CW\*(C`atTable\*(C'\fR has been deprecated since 1991.  You should never need
to use these methods.  See \f(CW\*(C`ipNetToMediaTable\*(C'\fR above.
.ie n .IP "$l3\->\fBold_at_index()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBold_at_index()\fR" 4
.IX Item "$l3->old_at_index()"
Returns reference to map of \s-1IID\s0 to Arp Cache Entry
.Sp
(\f(CW\*(C`atIfIndex\*(C'\fR)
.ie n .IP "$l3\->\fBold_at_paddr()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBold_at_paddr()\fR" 4
.IX Item "$l3->old_at_paddr()"
Returns reference to hash of Arp Cache Entries to \s-1MAC\s0 address
.Sp
(\f(CW\*(C`atPhysAddress\*(C'\fR)
.ie n .IP "$l3\->\fBold_at_netaddr()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBold_at_netaddr()\fR" 4
.IX Item "$l3->old_at_netaddr()"
Returns reference to hash of Arp Cache Entries to \s-1IP\s0 Address
.Sp
(\f(CW\*(C`atNetAddress\*(C'\fR)
.ie n .SS "\s-1BGP\s0 Peer Table (""bgpPeerTable"")"
.el .SS "\s-1BGP\s0 Peer Table (\f(CWbgpPeerTable\fP)"
.IX Subsection "BGP Peer Table (bgpPeerTable)"
.ie n .IP "$l3\->\fBbgp_peers()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBbgp_peers()\fR" 4
.IX Item "$l3->bgp_peers()"
Returns reference to hash of \s-1BGP\s0 peer to local \s-1IP\s0 address
.Sp
(\f(CW\*(C`bgpPeerLocalAddr\*(C'\fR)
.ie n .IP "$l3\->\fBbgp_peer_id()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBbgp_peer_id()\fR" 4
.IX Item "$l3->bgp_peer_id()"
Returns reference to hash of \s-1BGP\s0 peer to \s-1BGP\s0 peer identifier
.Sp
(\f(CW\*(C`bgpPeerIdentifier\*(C'\fR)
.ie n .IP "$l3\->\fBbgp_peer_state()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBbgp_peer_state()\fR" 4
.IX Item "$l3->bgp_peer_state()"
Returns reference to hash of \s-1BGP\s0 peer to \s-1BGP\s0 peer state
.Sp
(\f(CW\*(C`bgpPeerState\*(C'\fR)
.ie n .IP "$l3\->\fBbgp_peer_as()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBbgp_peer_as()\fR" 4
.IX Item "$l3->bgp_peer_as()"
Returns reference to hash of \s-1BGP\s0 peer to \s-1BGP\s0 peer autonomous system number
.Sp
(\f(CW\*(C`bgpPeerRemoteAs\*(C'\fR)
.ie n .IP "$l3\->\fBbgp_peer_addr()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBbgp_peer_addr()\fR" 4
.IX Item "$l3->bgp_peer_addr()"
Returns reference to hash of \s-1BGP\s0 peer to \s-1BGP\s0 peer \s-1IP\s0 address
.Sp
(\f(CW\*(C`bgpPeerRemoteAddr\*(C'\fR)
.ie n .IP "$l3\->\fBbgp_peer_fsm_est_trans()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBbgp_peer_fsm_est_trans()\fR" 4
.IX Item "$l3->bgp_peer_fsm_est_trans()"
Returns reference to hash of \s-1BGP\s0 peer to the total number of times the \s-1BGP FSM\s0
transitioned into the established state
.Sp
(\f(CW\*(C`bgpPeerFsmEstablishedTransitions\*(C'\fR)
.ie n .IP "$l3\->\fBbgp_peer_in_tot_msgs()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBbgp_peer_in_tot_msgs()\fR" 4
.IX Item "$l3->bgp_peer_in_tot_msgs()"
Returns reference to hash of \s-1BGP\s0 peer to the total number of messages received
from the remote peer on this connection
.Sp
(\f(CW\*(C`bgpPeerInTotalMessages\*(C'\fR)
.ie n .IP "$l3\->\fBbgp_peer_in_upd_el_time()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBbgp_peer_in_upd_el_time()\fR" 4
.IX Item "$l3->bgp_peer_in_upd_el_time()"
Returns reference to hash of \s-1BGP\s0 peer to the elapsed time in seconds since
the last \s-1BGP UPDATE\s0 message was received from the peer.
.Sp
(\f(CW\*(C`bgpPeerInUpdateElapsedTime\*(C'\fR)
.ie n .IP "$l3\->\fBbgp_peer_in_upd()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBbgp_peer_in_upd()\fR" 4
.IX Item "$l3->bgp_peer_in_upd()"
Returns reference to hash of \s-1BGP\s0 peer to the number of \s-1BGP UPDATE\s0 messages
received on this connection
.Sp
(\f(CW\*(C`bgpPeerInUpdates\*(C'\fR)
.ie n .IP "$l3\->\fBbgp_peer_out_tot_msgs()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBbgp_peer_out_tot_msgs()\fR" 4
.IX Item "$l3->bgp_peer_out_tot_msgs()"
Returns reference to hash of \s-1BGP\s0 peer to the total number of messages
transmitted to the remote peer on this connection
.Sp
(\f(CW\*(C`bgpPeerOutTotalMessages\*(C'\fR)
.ie n .IP "$l3\->\fBbgp_peer_out_upd()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBbgp_peer_out_upd()\fR" 4
.IX Item "$l3->bgp_peer_out_upd()"
Returns reference to hash of \s-1BGP\s0 peer to the number of \s-1BGP UPDATE\s0 messages
transmitted on this connection
.Sp
(\f(CW\*(C`bgpPeerOutUpdates\*(C'\fR)
.ie n .SS "\s-1OSPF\s0 Interface Table (""ospfIfTable"")"
.el .SS "\s-1OSPF\s0 Interface Table (\f(CWospfIfTable\fP)"
.IX Subsection "OSPF Interface Table (ospfIfTable)"
.ie n .IP "$l3\->\fBospf_if_ip()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBospf_if_ip()\fR" 4
.IX Item "$l3->ospf_if_ip()"
Returns reference to hash of \s-1OSPF\s0 interface \s-1IP\s0 addresses
.Sp
(\f(CW\*(C`ospfIfIpAddress\*(C'\fR)
.ie n .IP "$l3\->\fBospf_if_area()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBospf_if_area()\fR" 4
.IX Item "$l3->ospf_if_area()"
Returns reference to hash of the \s-1OSPF\s0 area to which the interfaces connect
.Sp
(\f(CW\*(C`ospfIfAreaId\*(C'\fR)
.ie n .IP "$l3\->\fBospf_if_type()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBospf_if_type()\fR" 4
.IX Item "$l3->ospf_if_type()"
Returns reference to hash of the \s-1OSPF\s0 interfaces' type
.Sp
(\f(CW\*(C`ospfIfType\*(C'\fR)
.ie n .IP "$l3\->\fBospf_if_hello()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBospf_if_hello()\fR" 4
.IX Item "$l3->ospf_if_hello()"
Returns reference to hash of the \s-1OSPF\s0 interfaces' hello interval
.Sp
(\f(CW\*(C`ospfIfHelloInterval\*(C'\fR)
.ie n .IP "$l3\->\fBospf_if_dead()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBospf_if_dead()\fR" 4
.IX Item "$l3->ospf_if_dead()"
Returns reference to hash of the \s-1OSPF\s0 interfaces' dead interval
.Sp
(\f(CW\*(C`ospfIfRtrDeadInterval\*(C'\fR)
.ie n .IP "$l3\->\fBospf_if_admin()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBospf_if_admin()\fR" 4
.IX Item "$l3->ospf_if_admin()"
Returns reference to hash of the \s-1OSPF\s0 interfaces' administrative status
.Sp
(\f(CW\*(C`ospfIfAdminStat\*(C'\fR)
.ie n .IP "$l3\->\fBospf_if_state()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBospf_if_state()\fR" 4
.IX Item "$l3->ospf_if_state()"
Returns reference to hash of the \s-1OSPF\s0 interfaces' state
.Sp
(\f(CW\*(C`ospfIfState\*(C'\fR)
.ie n .SS "\s-1OSPF\s0 Neighbor Table (""ospfNbrTable"")"
.el .SS "\s-1OSPF\s0 Neighbor Table (\f(CWospfNbrTable\fP)"
.IX Subsection "OSPF Neighbor Table (ospfNbrTable)"
.ie n .IP "$l3\->\fBospf_peers()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBospf_peers()\fR" 4
.IX Item "$l3->ospf_peers()"
Returns reference to hash of \s-1IP\s0 addresses the neighbor is using in its
\&\s-1IP\s0 Source Addresses
.Sp
(\f(CW\*(C`ospfNbrIpAddr\*(C'\fR)
.ie n .IP "$l3\->\fBospf_peer_id()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBospf_peer_id()\fR" 4
.IX Item "$l3->ospf_peer_id()"
Returns reference to hash of neighbor Router IDs
.Sp
(\f(CW\*(C`ospfNbrRtrId\*(C'\fR)
.ie n .IP "$l3\->\fBospf_peer_state()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBospf_peer_state()\fR" 4
.IX Item "$l3->ospf_peer_state()"
Returns reference to hash of state of the relationship with the neighbor
routers
.Sp
(\f(CW\*(C`ospfNbrState\*(C'\fR)
.SS "IS-IS Circuit Table"
.IX Subsection "IS-IS Circuit Table"
.ie n .IP "$l3\->\fBisis_circ_if_idx()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBisis_circ_if_idx()\fR" 4
.IX Item "$l3->isis_circ_if_idx()"
Returns reference to hash of the interface index associated with the IS-IS
circuit
(\f(CW\*(C`isisCircIfIndex\*(C'\fR)
.ie n .IP "$l3\->\fBisis_circ_admin()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBisis_circ_admin()\fR" 4
.IX Item "$l3->isis_circ_admin()"
Returns reference to hash of the IS-IS circuit's admin status
.Sp
(\f(CW\*(C`isisCircAdminState\*(C'\fR)
.ie n .IP "$l3\->\fBisis_circ_type()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBisis_circ_type()\fR" 4
.IX Item "$l3->isis_circ_type()"
Returns reference to hash of the IS-IS circuit's type
.Sp
(\f(CW\*(C`isisCircType\*(C'\fR)
.ie n .IP "$l3\->\fBisis_circ_level_type()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBisis_circ_level_type()\fR" 4
.IX Item "$l3->isis_circ_level_type()"
Returns reference to hash of the IS-IS circuit's level
.Sp
(\f(CW\*(C`isisCircLevelType\*(C'\fR)
.SS "IS-IS Adjacency Table"
.IX Subsection "IS-IS Adjacency Table"
.ie n .IP "$l3\->\fBisis_adj_id()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBisis_adj_id()\fR" 4
.IX Item "$l3->isis_adj_id()"
Returns reference to hash of the peer id of adjacencies.
.Sp
(\f(CW\*(C`isisISAdjNeighSysID\*(C'\fR)
.ie n .IP "$l3\->\fBisis_adj_type()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBisis_adj_type()\fR" 4
.IX Item "$l3->isis_adj_type()"
Returns reference to hash of the type of adjacencies (Level 1
Intermediate System, Level 2 Intermediate System, Level 1+2
Intermediate System, unknown)
.Sp
(\f(CW\*(C`isisISAdjNeighSysType\*(C'\fR)
.ie n .IP "$l3\->\fBisis_adj_usage()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBisis_adj_usage()\fR" 4
.IX Item "$l3->isis_adj_usage()"
Returns reference to hash of the type of adjacencies in use
(undefined, Level 1, Level 2, Level1+2)
.Sp
(\f(CW\*(C`isisISAdjNeighUsage\*(C'\fR)
.ie n .IP "$l3\->\fBisis_adj_ip_type()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBisis_adj_ip_type()\fR" 4
.IX Item "$l3->isis_adj_ip_type()"
Returns reference to hash of type of address (IPv4, IPv6, etc) on adjacencies.
.Sp
(\f(CW\*(C`isisISAdjIPAddrType\*(C'\fR)
.ie n .IP "$l3\->\fBisis_adj()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBisis_adj()\fR" 4
.IX Item "$l3->isis_adj()"
Returns reference to hash of addresses (IPv4, IPv6, etc) on adjacencies.
Note this returns hash-strings, for IPs, use \f(CW$l3\fR\->\fBisis_peers()\fR
.Sp
(\f(CW\*(C`isisISAdjIPAddrAddress\*(C'\fR)
.ie n .IP "$l3\->\fBisis_peers()\fR" 4
.el .IP "\f(CW$l3\fR\->\fBisis_peers()\fR" 4
.IX Item "$l3->isis_peers()"
Returns reference to hash of addresses (IPv4, IPv6) on adjacencies.
Convert hash strings from isis_adj to proper
\&\s-1IP\s0 (v4 and v6) formatting.
.SS "Table Methods imported from SNMP::Info"
.IX Subsection "Table Methods imported from SNMP::Info"
See \*(L"\s-1USAGE\*(R"\s0 in SNMP::Info for details.
.SS "Table Methods imported from SNMP::Info::Bridge"
.IX Subsection "Table Methods imported from SNMP::Info::Bridge"
See \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::Bridge for details.
.SS "Table Methods imported from SNMP::Info::EtherLike"
.IX Subsection "Table Methods imported from SNMP::Info::EtherLike"
See \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::EtherLike for details.
.SS "Table Methods imported from SNMP::Info::Entity"
.IX Subsection "Table Methods imported from SNMP::Info::Entity"
See \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::Entity for details.
.SS "Table Methods imported from SNMP::Info::PowerEthernet"
.IX Subsection "Table Methods imported from SNMP::Info::PowerEthernet"
See \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::PowerEthernet for details.
.SS "Table Methods imported from SNMP::Info::IPv6"
.IX Subsection "Table Methods imported from SNMP::Info::IPv6"
See \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::IPv6 for details.
.SS "Table Methods imported from SNMP::Info::LLDP"
.IX Subsection "Table Methods imported from SNMP::Info::LLDP"
See \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::LLDP for details.
.SS "Table Methods imported from SNMP::Info::DocsisHE"
.IX Subsection "Table Methods imported from SNMP::Info::DocsisHE"
See \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::DocsisHE for details.
.SS "Table Methods imported from SNMP::Info::AdslLine"
.IX Subsection "Table Methods imported from SNMP::Info::AdslLine"
See \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::AdslLine for details.
