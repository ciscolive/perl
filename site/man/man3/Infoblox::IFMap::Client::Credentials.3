.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::IFMap::Client::Credentials 3"
.TH Infoblox::IFMap::Client::Credentials 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::IFMap::Client::Credentials \- IF\-MAP Credentials object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object represents the credentials used by an IF-MAP Federation Connector object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 7
\& my $credentials = Infoblox::IFMap::Federation::Connector::Credentials\->new(
\&     authentication => <"basic" | "certificate">,               #Required
\&     password => <STRING>,                                      #Required if authentication = "basic"
\&     server_ca_cert => $cacert,                                 #Optional
\&     server_url => <STRING>,                                    #Optional
\&     username => <STRING>,                                      #Required if authentication = "basic"
\& );
.Ve
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of an IF-MAP Credentials object.
.SS "authentication( )"
.IX Subsection "authentication( )"
.RS 4
Use this method to set or retrieve the value of the authentication attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A string that represents the attribute. Valid strings are \*(L"basic\*(R" or \*(L"certificate\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the authentication attribute.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get authentication
\& my $authentication = $credentials\->authentication( );
\&
\& # Change it
\& $credentials\->authentication("basic");
.Ve
.RE
.RS 4
.RE
.SS "password( )"
.IX Subsection "password( )"
.RS 4
Use this method to set the value of the password attribute. This value is not returned by the server when you use the \fBget()\fR and \fBsearch()\fR session methods. This password is used for Basic Authentication and is required if authentication is set to \*(L"basic\*(R". This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A string that specifies the password.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Set it
\& $credentials\->password("secret");
.Ve
.RE
.RS 4
.RE
.SS "server_ca_cert( )"
.IX Subsection "server_ca_cert( )"
.RS 4
Use this method to set or retrieve the value of the server_ca_cert attribute. This configures the \s-1CA\s0 certificate to use for server certificate validation.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An Infoblox::IFMap::CACertificate object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute server_ca_cert.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get server_ca_cert
\& my $server_ca_cert = $credentials\->server_ca_cert( );
\&
\& # Change it
\& $credentials\->server_ca_cert($ca_cert);
.Ve
.RE
.RS 4
.RE
.SS "server_url( )"
.IX Subsection "server_url( )"
.RS 4
Use this method to set or retrieve the value of the server_url attribute. It specifies the \s-1URL\s0 of the federated IF-MAP service.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The \s-1URL\s0 of the IF-MAP service. For example \*(L"https://ifmap.infoblox.com:443/ifmap\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute server_url.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get server_url
\& my $server_url = $credentials\->server_url( );
\&
\& # Change it
\& $credentials\->server_url("https://ifmap.infoblox.com:443/ifmap");
.Ve
.RE
.RS 4
.RE
.SS "username( )"
.IX Subsection "username( )"
.RS 4
Use this method to set or retrieve the value of the username attribute. This username is used for Basic Authentication and is required if authentication is set to \*(L"basic\*(R". It has to be unique per server, specified by the server_url attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A string that represents the attribute.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute username.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get username
\& my $username = $credentials\->username( );
\&
\& # Change it
\& $credentials\->username("user1");
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::IFMap::CACertificate
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
