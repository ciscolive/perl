.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::SNMP::User 3"
.TH Infoblox::Grid::SNMP::User 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::SNMP::User \- Grid SNMP User object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Grid \s-1SNMP\s0 User object is used to set, get, search, modify, or remove an SNMPv3 user. An SNMPv3 user is a managment system that sends queries and receives traps from the appliance.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 11
\& #Constructor for a Grid SNMP User object
\& my $snmp_user = Infoblox::Grid::SNMP::User\->new(
\&         name                => $string,                #Required
\&         auth_protocol       => "none"| "md5" | "sha",  #Required
\&         privacy_protocol    => "none"| "des" | "aes",  #Required
\&         auth_password       => $string,                #Optional. Required for MD5/SHA authentication
\&         comment             => $string,                #Optional / Default is undefined
\&         disable             => "true" | "false",       #Optional / Default is "false"
\&         privacy_password    => $string,                #Optional. Required for MD5/SHA authentication
\&         extattrs            => { $string => $extattr, ... },      #Optional / Default is undefined
\&  );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session that you can apply to a Grid \s-1SNMP\s0 User object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve existing objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to get a Grid SNMP User object:
\&
\& name     \-  user name in string format
\& comment  \-  comment string
\& extattrs \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&         object      => "Infoblox::Grid::SNMP::User",
\&         name        => "testuser" );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify objects in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify the comment
\& $snmp_user\->comment("This is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $snmp_user );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for Grid \s-1SNMP\s0 User objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a Grid SNMP User object:
\&
\&  name \-  user name (regular expression)
\&  comment \- comment string (regular expression)
\&  extattrs \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Search for all Grid SNMP User objects that start with "test"
\& my @retrieved_objs = $session\->search(
\&     object      => "Infoblox::Grid::SNMP::User",
\&     name        => "test.*",
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the object, and then submit it for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Get Grid SNMP User objects with the same starting name
\& my @retrieved_objs = $session\->get(
\&     object      => "Infoblox::Grid::SNMP::User",
\&     name        => "testuser" );
\& # find the desired object from the retrieved list.
\& my $desired_user = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_user );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of an SNMPv3 user.
.SS "auth_password( )"
.IX Subsection "auth_password( )"
.RS 4
Use this method to provide an authentication password for the user. This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Authentication password of the user in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If a parameter is specified, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set the password
\& $snmp_user\->auth_password("mysecret");
.Ve
.RE
.RS 4
.RE
.SS "auth_protocol( )"
.IX Subsection "auth_protocol( )"
.RS 4
Use this method to specify the authentication protocol of the user.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Possible values for the authentication protocol are:
.Sp
.Vb 3
\& none
\& md5
\& sha
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get auth_protocol
\& my $proto = $snmp_user\->auth_protocol();
\& #Set the protocol
\& $snmp_user\->auth_protocol("md5");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to provide a comment for the SNMPv3 User object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $snmp_user\->comment();
\& #Set the comment
\& $snmp_user\->comment("This is a sample comment");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to configure or retrieve the \*(L"disable\*(R" flag.
.Sp
The default value is false; that is, the user is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable flag
\& my $disabled = $snmp_user\->disable();
\& #Set the disable flag
\& $snmp_user\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "engine_id( )"
.IX Subsection "engine_id( )"
.RS 4
Use this method to retrieve the \s-1SNMP\s0 engine \s-1ID.\s0
.Sp
This field is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When called without parameters, the method returns the attribute value. Calling this method with a parameter results in an error.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get engine_id
\& my $engine_id = $snmp_user\->engine_id();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1SNMP\s0 user object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $snmp_user\->extattrs();
\& #Modify extattrs
\& $snmp_user\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of an SNMPv3 user.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the name of the user.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $snmp_user\->name();
\& #Modify name
\& $snmp_user\->name("test_user");
.Ve
.RE
.RS 4
.RE
.SS "privacy_password( )"
.IX Subsection "privacy_password( )"
.RS 4
Use this method to provide a password for the privacy protocol. This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Password in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set the password
\& $snmp_user\->privacy_password("mysecret");
.Ve
.RE
.RS 4
.RE
.SS "privacy_protocol( )"
.IX Subsection "privacy_protocol( )"
.RS 4
Use this method to specify encryption protocol for the \s-1SNMP\s0 packets.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Possible values for the encryption protocol are:
.Sp
.Vb 3
\& none
\& des
\& aes
.Ve
.Sp
The values are case insensitive.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get privacy_protocol
\& my $proto = $snmp_user\->privacy_protocol();
\& #Set the protocol
\& $snmp_user\->privacy_protocol("aes");
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::SNMP::TrapReceiver,Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
