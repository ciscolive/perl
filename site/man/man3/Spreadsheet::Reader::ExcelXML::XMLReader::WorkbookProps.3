.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::ExcelXML::XMLReader::WorkbookProps 3"
.TH Spreadsheet::Reader::ExcelXML::XMLReader::WorkbookProps 3 "2017-04-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::ExcelXML::XMLReader::WorkbookProps \- Workbook docProps XML file unique reader
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        #!/usr/bin/env perl
\&        use MooseX::ShortCut::BuildInstance qw( build_instance );
\&        use Types::Standard qw( HashRef );
\&        use Spreadsheet::Reader::ExcelXML::XMLReader;
\&        use Spreadsheet::Reader::ExcelXML::WorkbookFileInterface;
\&        use Spreadsheet::Reader::ExcelXML::ZipReader::WorkbookProps;
\&        use Spreadsheet::Reader::ExcelXML::WorkbookPropsInterface;
\&        my      $extractor_instance = build_instance(
\&                        superclasses => [\*(AqSpreadsheet::Reader::ExcelXML::XMLReader\*(Aq],
\&                        package => \*(AqExtractorInstance\*(Aq,
\&                        file => \*(Aq../../../../t/test_files/TestBook.xml\*(Aq,
\&                        add_roles_in_sequence =>[
\&                                \*(AqSpreadsheet::Reader::ExcelXML::WorkbookFileInterface\*(Aq,
\&                        ],
\&                );
\&        my      $file_handle = $extractor_instance\->extract_file( qw( DocumentProperties ) );
\&        my      $test_instance = build_instance(
\&                        superclasses    => [\*(AqSpreadsheet::Reader::ExcelXML::XMLReader\*(Aq],
\&                        package => \*(AqWorkbookPropsInterface\*(Aq,
\&                        add_roles_in_sequence =>[
\&                                \*(AqSpreadsheet::Reader::ExcelXML::XMLReader::WorkbookProps\*(Aq,
\&                                \*(AqSpreadsheet::Reader::ExcelXML::WorkbookPropsInterface\*(Aq,
\&                        ],
\&                        file => $file_handle,
\&                );
\&        print $test_instance\->$get_date_created . "\en";
\&
\&        ###########################
\&        # SYNOPSIS Screen Output
\&        # 01: 2013\-11\-10T08:27:01Z
\&        ###########################
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation is written to explain ways to use this module when writing your own
excel parser.  To use the general package for excel parsing out of the box please review
the documentation for Workbooks,
Worksheets, and
Cells
.PP
This is the \s-1XML\s0 based file adaptor for reading the workbook docProps data and then
updating the general workbook metadata.  The extracted data is accessible through
Methods.  The goal of this module is to standardize the outputs of this
metadata from non standard inputs.
.SS "Required Methods"
.IX Subsection "Required Methods"
These are the methods required by the role.  A link to the default implementation of
these methods is provided.
.PP
\&\*(L"advance_element_position( \f(CW$element\fR, [$iterations] )\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.PP
\&\*(L"good_load( \f(CW$state\fR )\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.PP
\&\*(L"close_the_file\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.PP
\&\*(L"parse_element( [$depth] )\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.PP
\&\*(L"squash_node( \f(CW$node\fR )\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.SS "Methods"
.IX Subsection "Methods"
These are the methods provided by this role (only).
.PP
\fIload_unique_bits\fR
.IX Subsection "load_unique_bits"
.Sp
.RS 4
\&\fBDefinition:\fR This role is meant to run on top of Spreadsheet::Reader::ExcelXML::XMLReader.
When it does the reader will call this function as available when it first starts the file.
Therefore this is where the unique Metadata for this file is found and stored. (in the
attributes)
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR nothing
.RE
.PP
\fIget_creator\fR
.IX Subsection "get_creator"
.Sp
.RS 4
\&\fBDefinition:\fR This returns the string stored in the file by Excel for the file creator.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR the creator identification string
.RE
.PP
\fIget_modified_by\fR
.IX Subsection "get_modified_by"
.Sp
.RS 4
\&\fBDefinition:\fR This returns the string stored in the file by Excel for the last file
modification entity.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR the identification string for the last entity to modify the file
.RE
.PP
\fIget_date_created\fR
.IX Subsection "get_date_created"
.Sp
.RS 4
\&\fBDefinition:\fR returns the date string for when the file was created in Excel
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR a date string
.RE
.PP
\fIget_date_modified\fR
.IX Subsection "get_date_modified"
.Sp
.RS 4
\&\fBDefinition:\fR returns the date string for when the file was last modified in Excel
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR a date string
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::Reader::ExcelXML/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing currently
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Spreadsheet::Reader::ExcelXML \- the package
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::Read \- generic Spreadsheet reader
.Sp
Spreadsheet::ParseExcel \- Excel binary version 2003 and earlier (.xls files)
.Sp
Spreadsheet::XLSX \- Excel version 2007 and later
.Sp
Spreadsheet::ParseXLSX \- Excel version 2007 and later
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
