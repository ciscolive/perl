.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Milter::Authentication::Net::Milter 3"
.TH Mail::Milter::Authentication::Net::Milter 3 "2020-09-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Milter::Authentication::Net::Milter \- Local modified copy of Net::Milter
.SH "VERSION"
.IX Header "VERSION"
version 2.20200930.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Net::Milter;
\&    my $milter = new Net::Milter;
\&    $milter\->open(\*(Aq127.0.0.1\*(Aq,5513,\*(Aqtcp\*(Aq);
\&
\&    my ($milter_version,$returned_actions_ref,$returned_protocol_ref) =
\&    $milter\->protocol_negotiation();
\&
\&    my (@results) = $milter\->send_header(\*(AqFrom\*(Aq,\*(Aqmartin@localhost\*(Aq);
\&    foreach (@results) {
\&      if ($$_{action} eq \*(Aqreject\*(Aq)  {exit;}
\&    }
.Ve
.PP
Also see example in scripts directory.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl module to provide a pure Perl implementation of the \s-1MTA\s0 part the
milter interface. The goal of this module is to allow other email
systems to easily integrate with the various email filters that accept
content via milter.
.PP
This implementation of milter is developed from the description provided
by Todd Vierling,
cvs.sourceforge.net/viewcvs.py/pmilter/pmilter/doc/milter\-protocol.txt?rev=1.2
and from examining the tcp output from Sendmail.
.SS "Attributes"
.IX Subsection "Attributes"
.IP "action_types" 4
.IX Item "action_types"
Reference to an array of the set of actions defined within Sendmail's milter code.
.IP "content_types" 4
.IX Item "content_types"
Reference to an array of the set of content types which may be witheld.
.SS "Methods"
.IX Subsection "Methods"
.IP "new" 4
.IX Item "new"
Constructor, creates a new blank Net::Milter object.
.IP "open" 4
.IX Item "open"
Open a socket to a milter filter. Takes three arguments, the last
argument, can be 'tcp' or 'unix' depending if the connection is to be
made to a \s-1TCP\s0 socket or through a \s-1UNIX\s0 file system socket. For \s-1TCP\s0
sockets, the first two argument are the \s-1IP\s0 address and the port number;
for \s-1UNIX\s0 sockets the first argument is the file path, the second the
timeout value.
Accepted synonyms for tcp and unix are inet and local respecively.
.Sp
e.g.
.Sp
.Vb 1
\&    $milter\->open(\*(Aq127.0.0.1\*(Aq,5513,\*(Aqtcp\*(Aq);
.Ve
.Sp
to open a connection to port 5513 on address 127.0.0.1,
or
.Sp
.Vb 1
\&    $milter\->open(\*(Aq/tmp/file.sck\*(Aq,10,\*(Aqunix\*(Aq);
.Ve
.Sp
to open a connection to /tmp/file.sck with a timeout of 10 seconds.
.Sp
The method creates the attribute, 'socket' containing an IO::Handle
object.
.IP "protocol_negotiation" 4
.IX Item "protocol_negotiation"
Talk to the milter filter, describing the list of actions it may
perform, and any email content that won't be sent.
Accepts as argument the hash of allowable actions and withheld content.
The hash keys are :
Allowable actions by the filter :
.RS 4
.IP "\s-1SMFIF_ADDHDRS\s0 \- Add message headers." 4
.IX Item "SMFIF_ADDHDRS - Add message headers."
.PD 0
.IP "\s-1SMFIF_CHGBODY\s0 \- Alter the message body." 4
.IX Item "SMFIF_CHGBODY - Alter the message body."
.IP "\s-1SMFIF_ADDRCPT\s0 \- Add recipients to the message." 4
.IX Item "SMFIF_ADDRCPT - Add recipients to the message."
.IP "\s-1SMFIF_DELRCPT\s0 \- Delete recipients from the message." 4
.IX Item "SMFIF_DELRCPT - Delete recipients from the message."
.IP "\s-1SMFIF_CHGHDRS\s0 \- Change or delete message headers." 4
.IX Item "SMFIF_CHGHDRS - Change or delete message headers."
.RE
.RS 4
.PD
.Sp
The default is to allow all actions, setting the value to be '0' of any
of these keys in the argument hash informs the filter not perform the
action.
.Sp
e.g.
.Sp
.Vb 4
\&    $milter\->protocol_negotiation(
\&        SMFIF_ADDHDRS => 0,
\&        SMFIF_CHGBODY => 1
\&        );
.Ve
.Sp
informs the filter it is able to change the contents of the message
body, but it may not add message headers.
.Sp
Withheld content :
.IP "\s-1SMFIP_NOCONNECT\s0 \- Do not expect the connection details." 4
.IX Item "SMFIP_NOCONNECT - Do not expect the connection details."
.PD 0
.IP "\s-1SMFIP_NOHELO\s0 \- Do not expect the \s-1HELO\s0 string." 4
.IX Item "SMFIP_NOHELO - Do not expect the HELO string."
.IP "\s-1SMFIP_NOMAIL\s0 \- Do not expect the \s-1MAIL FROM\s0 string." 4
.IX Item "SMFIP_NOMAIL - Do not expect the MAIL FROM string."
.IP "\s-1SMFIP_NORCPT\s0 \- Do not expect the \s-1RCPT TO\s0 string." 4
.IX Item "SMFIP_NORCPT - Do not expect the RCPT TO string."
.IP "\s-1SMFIP_NOBODY\s0 \- Do not expect the email body." 4
.IX Item "SMFIP_NOBODY - Do not expect the email body."
.IP "\s-1SMFIP_NOHDRS\s0 \- Do not expect any email headers." 4
.IX Item "SMFIP_NOHDRS - Do not expect any email headers."
.IP "\s-1SMFIP_NOEOH\s0 \- Do not expect an end of headers signal." 4
.IX Item "SMFIP_NOEOH - Do not expect an end of headers signal."
.RE
.RS 4
.PD
.Sp
The default is to inform the filter to expect everything, setting the
value of the key to '1' informs the filter to not expect the content.
.Sp
e.g.
.Sp
.Vb 6
\&    $milter\->protocol_negotiation(
\&        SMFIF_ADDHDRS => 0,
\&        SMFIF_CHGBODY => 1,
\&        SMFIP_NOEHO => 1,
\&        SMFIP_NOCONNECT => 1
\&    );
.Ve
.Sp
informs the filter it is able to change the contents of the message
body, but it may not add message headers, it will not receive an end
of headers signal, nor will it receive the connection details.
.Sp
The method returns three parameters, the protocol version, an array
reference containing all the names of the actions the filter
understands it is able to perform, and an array reference
containing the names of the content it understands it won't be sent.
.RE
.IP "send_abort" 4
.IX Item "send_abort"
Send an abort signal to the mail filter.
Accepts nothing, returns nothing.
.IP "send_body" 4
.IX Item "send_body"
Send the body of the email to the mail filter.
\&\s-1NOTE\s0 the filter will only accept up to 65535 bytes of body at a time.
Feed the body to the filter piece by piece by repeat calls to send_body
with each body chunk until all the body is sent.
Accepts the message body, returns reference to an array of return codes
(see \s-1RETURN CODE\s0 section).
.IP "send_end_body" 4
.IX Item "send_end_body"
Send an end of body signal, i.e. no more body information will
follow. Returns a reference to an array of return codes (see \s-1RETURN
CODE\s0 section).
.IP "send_connect" 4
.IX Item "send_connect"
Send the \s-1SMTP\s0 connect information to the mail filter.
Accepts the hostname, the family ('unix' for file sockets, 'tcp4' for
tcp connections (v4), 'tcp6' for version 6 tcp connections), the sending
connection port, the \s-1IP\s0 address of the sender. Returns a reference to an
array of return codes (see \s-1RETURN CODE\s0 section).
.Sp
e.g.
.Sp
.Vb 6
\&    $milter\->send_connect(
\&                          \*(Aqhost.domain\*(Aq,
\&                          \*(Aqtcp4\*(Aq,
\&                          \*(Aq12345\*(Aq,
\&                          \*(Aq127.0.0.1\*(Aq
\&                          );
.Ve
.Sp
The machine host.domain with \s-1IP\s0 address 127.0.0.1 connected to
us from port 12345 using \s-1TCP\s0 version 4.
.IP "send_helo" 4
.IX Item "send_helo"
Send the \s-1HELO\s0 (or \s-1EHLO\s0) string provided by the connecting computer.
Accepts the \s-1HELO\s0 string as an argument. Returns a reference to an array
of return codes (see \s-1RETURN CODE\s0 section).
.IP "send_header" 4
.IX Item "send_header"
Send a single header name and contents to the filter, accepts two
arguments, the header name and the header contents. Returns a reference
to an array of return codes (see \s-1RETURN CODE\s0 section).
.IP "send_mail_from" 4
.IX Item "send_mail_from"
Send the \s-1MAIL FROM\s0 string to the filter, accepts the \s-1MAIL FROM\s0 data as
an argument. Returns a reference to an array of return codes (see
\&\s-1RETURN CODE\s0 section).
.IP "send_end_headers" 4
.IX Item "send_end_headers"
Send an end of headers signal, i.e. no more header information will
follow. Returns a reference to an array of return codes (see \s-1RETURN
CODE\s0 section).
.IP "send_rcpt_to" 4
.IX Item "send_rcpt_to"
Send the \s-1RCPT TO\s0 string to the filter, accepts an array of \s-1RCPT TO\s0
recipients as argument. Returns a reference to an array of return
codes (see \s-1RETURN CODE\s0 section).
.IP "send_quit" 4
.IX Item "send_quit"
Quit the milter communication, accepts nothing, returns nothing.
.IP "send_macros" 4
.IX Item "send_macros"
Send Sendmail macro information to the filter. The method accepts a
hash of the Sendmail macro names, returns  a reference to an array of
return codes (see \s-1RETURN CODE\s0 section).
.Sp
The potential macro names (hash keys) are :
.RS 4
.IP "_              \- email address of the Sendmail user." 4
.IX Item "_ - email address of the Sendmail user."
.PD 0
.IP "j              \- canonical hostname of the recipeint machine." 4
.IX Item "j - canonical hostname of the recipeint machine."
.IP "{daemon_name}  \- name of the daemon from DaemonPortOptions." 4
.IX Item "{daemon_name} - name of the daemon from DaemonPortOptions."
.IP "{if_name}      \- hostname of the incoming connection." 4
.IX Item "{if_name} - hostname of the incoming connection."
.IP "{if_addr}      \- \s-1IP\s0 address of the incoming connection." 4
.IX Item "{if_addr} - IP address of the incoming connection."
.IP "{tls_version}  \- \s-1TLS/SSL\s0 version used for connection." 4
.IX Item "{tls_version} - TLS/SSL version used for connection."
.IP "{cipher}       \- cipher suite used for the connection." 4
.IX Item "{cipher} - cipher suite used for the connection."
.IP "{cipher_bits}  \- keylength of the encryption algorith." 4
.IX Item "{cipher_bits} - keylength of the encryption algorith."
.IP "{cert_subject} \- distinguished name of the presented certificate." 4
.IX Item "{cert_subject} - distinguished name of the presented certificate."
.IP "{cert_issuer}  \- name of the certificate authority." 4
.IX Item "{cert_issuer} - name of the certificate authority."
.IP "i              \- queue \s-1ID.\s0" 4
.IX Item "i - queue ID."
.IP "{auth_type}    \- \s-1SMTP\s0 authentication mechanism." 4
.IX Item "{auth_type} - SMTP authentication mechanism."
.IP "{auth_authen}  \- client's authenticated username." 4
.IX Item "{auth_authen} - client's authenticated username."
.IP "{auth_ssf}     \- keylength of encryption algorithm." 4
.IX Item "{auth_ssf} - keylength of encryption algorithm."
.IP "{auth_author}  \- authorization identity." 4
.IX Item "{auth_author} - authorization identity."
.IP "{mail_mailer}  \- mailer from \s-1SMTP MAIL\s0 command." 4
.IX Item "{mail_mailer} - mailer from SMTP MAIL command."
.IP "{mail_host}    \- host from \s-1SMTP MAIL\s0 command." 4
.IX Item "{mail_host} - host from SMTP MAIL command."
.IP "{mail_addr}    \- address from \s-1SMTP MAIL\s0 command." 4
.IX Item "{mail_addr} - address from SMTP MAIL command."
.IP "{rcpt_mailer}  \- mailer from \s-1SMTP RCPT\s0 command." 4
.IX Item "{rcpt_mailer} - mailer from SMTP RCPT command."
.IP "{rcpt_host}    \- host from \s-1SMTP RCPT\s0 command." 4
.IX Item "{rcpt_host} - host from SMTP RCPT command."
.IP "{rcpt_addr}    \- address from \s-1SMTP RCPT\s0 command." 4
.IX Item "{rcpt_addr} - address from SMTP RCPT command."
.RE
.RS 4
.PD
.Sp
Yes I know most of this is redundant, since other methods repeat this
information, but this is what the spec says.
.Sp
e.g.
    \f(CW$milter\fR\->send_macros(
        mail_addr => '127.0.0.1',
        mail_host => 'localhost',
        rcpt_addr => '127.0.0.1',
        rcpt_addr => 'postmaster@localhost.localdomain'
    );
.Sp
For further explanation of macros see :
.Sp
http://people.freenet.de/slgig/op_en/macros.html
and
http://www.sendmail.com/idemo/prod_guide/switch/switchdemo/helplets/en/Macros.html
.RE
.SH "NAME"
Net::Milter \- Masquerade as the MTA to communicate with email
filters through a milter interface.
.SH "RETURN CODES"
.IX Header "RETURN CODES"
Many methods return an array of hash references. Each hash describes
one response from the filter, a filter may return more than one
response to any sent data, such as 'add a header','modify body',
\&'continue'.
The hash keys are :
.IP "command \- the response from the filter" 4
.IX Item "command - the response from the filter"
.PD 0
.IP "explanation \- verbose explanation of the required action" 4
.IX Item "explanation - verbose explanation of the required action"
.IP "action \- action to perform, may be \fIadd\fR, \fIdelete\fR, \fIaccept\fR, \fIreplace\fR, \fIcontinue\fR or \fIreject\fR" 4
.IX Item "action - action to perform, may be add, delete, accept, replace, continue or reject"
.IP "header \- the name of header the action refers to (may be equal to 'body' to refer to the message body)" 4
.IX Item "header - the name of header the action refers to (may be equal to 'body' to refer to the message body)"
.IP "value \- the value relating to the action" 4
.IX Item "value - the value relating to the action"
.PD
.SH "TIPS"
.IX Header "TIPS"
Call the various methods in the order that they would be called if accepting
a \s-1SMTP\s0 stream, ie \fBsend_connect()\fR, \fBsend_helo()\fR,  \fBsend_mail_from()\fR, \fBsend_rcpt_to()\fR,
\&\fBsend_header()\fR, \fBsend_end_headers()\fR, \fBsend_body()\fR. Some milter filters expect this
and refuse to return values when expected.
Equally continuing to send data when a filter has rejected or accepted a
message may confuse it, and refuse to return values for subsequent data, so
always check the codes returned.
.PP
In some circumstantes 'read' has not worked, now replaced by 'sysread' which is
reported to fix the problem. If this doesn't work, change 'sysread' to 'read' and
email me please.
.PP
Some filters appear to expect a bitwise negation of the protocol field. This is
now disabled as default. If you wish to enable this, please set
\&\s-1PROTOCOL_NEGATION\s0 => 1
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is the Yang to Ying's Sendmail::Milter, which can act as the other end
of the communication.
.SH "NAMING"
.IX Header "NAMING"
I choose not to put this module in the Sendmail namespace, as it has nothing to do
with Sendmail itself, neither is it anything to do with \s-1SMTP,\s0 its a net protocol,
hence the Net namespace.
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Lee, MessageLabs Ltd. (mlee@messagelabs.com)
.PP
Copyright (c) 2003 Star Technology Group Ltd / 2004 MessageLabs Ltd.
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Marc Bradshaw.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
