.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::Role::Dumpable 3"
.TH Data::Object::Role::Dumpable 3 "2020-04-24" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::Role::Dumpable
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Dumpable Role for Perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package Example;
\&
\&  use Moo;
\&
\&  with \*(AqData::Object::Role::Dumpable\*(Aq;
\&
\&  package main;
\&
\&  my $example = Example\->new;
\&
\&  # $example\->dump
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides methods for dumping the object and underlying value.
.SH "METHODS"
.IX Header "METHODS"
This package implements the following methods:
.SS "dump"
.IX Subsection "dump"
.Vb 1
\&  dump() : Str
.Ve
.PP
The dump method returns a string representation of the underlying data.
.IP "dump example #1" 4
.IX Item "dump example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $dumped = $example\->dump;
.Ve
.SS "pretty_dump"
.IX Subsection "pretty_dump"
.Vb 1
\&  pretty_dump() : Str
.Ve
.PP
The pretty_dump method returns a string representation of the underlying data
that is human-readable and useful for debugging.
.IP "pretty_dump example #1" 4
.IX Item "pretty_dump example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $dumped = $example\->pretty_dump;
.Ve
.SS "pretty_print"
.IX Subsection "pretty_print"
.Vb 1
\&  pretty_print(Any @args) : Int
.Ve
.PP
The pretty_print method prints a stringified human-readable representation of
the underlying data.
.IP "pretty_print example #1" 4
.IX Item "pretty_print example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $printed = $example\->pretty_print;
.Ve
.IP "pretty_print example #2" 4
.IX Item "pretty_print example #2"
.Vb 1
\&  # given: synopsis
\&
\&  my $printed = $example\->pretty_print({1..4});
.Ve
.SS "pretty_say"
.IX Subsection "pretty_say"
.Vb 1
\&  pretty_say(Any @args) : Int
.Ve
.PP
The pretty_say method prints a stringified human-readable representation of the
underlying data, with a trailing newline.
.IP "pretty_say example #1" 4
.IX Item "pretty_say example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $printed = $example\->pretty_say;
.Ve
.IP "pretty_say example #2" 4
.IX Item "pretty_say example #2"
.Vb 1
\&  # given: synopsis
\&
\&  my $printed = $example\->pretty_say({1..4});
.Ve
.SS "print"
.IX Subsection "print"
.Vb 1
\&  print(Any @args) : Int
.Ve
.PP
The print method prints a stringified representation of the underlying data.
.IP "print example #1" 4
.IX Item "print example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $printed = $example\->print;
.Ve
.IP "print example #2" 4
.IX Item "print example #2"
.Vb 1
\&  # given: synopsis
\&
\&  my $printed = $example\->print({1..4});
.Ve
.SS "say"
.IX Subsection "say"
.Vb 1
\&  say(Any @args) : Int
.Ve
.PP
The say method prints a stringified representation of the underlying data, with
a trailing newline.
.IP "say example #1" 4
.IX Item "say example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $printed = $example\->say;
.Ve
.IP "say example #2" 4
.IX Item "say example #2"
.Vb 1
\&  # given: synopsis
\&
\&  my $printed = $example\->say({1..4});
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/data-object-role-dumpable/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/data-object-role-dumpable/wiki>
.PP
Project <https://github.com/iamalnewkirk/data-object-role-dumpable>
.PP
Initiatives <https://github.com/iamalnewkirk/data-object-role-dumpable/projects>
.PP
Milestones <https://github.com/iamalnewkirk/data-object-role-dumpable/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/data-object-role-dumpable/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/data-object-role-dumpable/issues>
