.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::RecordNamePolicy 3"
.TH Infoblox::Grid::RecordNamePolicy 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::RecordNamePolicy \- Manages the DNS record name policies defined at the grid level.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Record name policy defines the \s-1DNS\s0 record name format restrictions at the grid level.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 4
\& my $policy = Infoblox::Grid::RecordNamePolicy\->new(
\&              name  => $string, #Required
\&              regex => $regex   #Required
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to apply to the record name policy object.
.SS "Infoblox::Grid::DNS\->record_name_policies( )"
.IX Subsection "Infoblox::Grid::DNS->record_name_policies( )"
.RS 4
Use this function to specify a record name policy at the grid level in the Infoblox appliance.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Create a RecordNamePolicy object.
\& my $policy = Infoblox::Grid::RecordNamePolicy\->new(
\&                  name  => "test",
\&                  regex => "^[a\-zA\-Z0\-9]+\e$",
\&                );
\&
\& #Configure record name policy on the Infoblox grid object
\& my $response = $grid_dns\->record_name_policies([$policy]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attributes values of a record name policy object.
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the record name policy name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
String with the name of the record name policy.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $policy\->name();
\& #Modify name
\& $policy\->name("new_name");
.Ve
.RE
.RS 4
.RE
.SS "regex( )"
.IX Subsection "regex( )"
.RS 4
Use this method to set or retrieve the record name policy in regular expression format.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The record name policy in regular expression format. It should follow \s-1POSIX\s0 regular expression rules.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get regex
\& my $regex = $policy\->regex();
\& #Modify regex
\& $policy\->regex("^[a\-zA\-Z0\-9]*\e$");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to a record name policy object, such  as create, modify, and remove. This sample code also includes error handling for the operations.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a record name policy object\fR
.PP
.Vb 9
\& my $policy1 = Infoblox::Grid::RecordNamePolicy\->new(
\&     name  => "Allow Any",
\&     regex => ".+",
\&     );
\& unless ($policy1) {
\&      die("Construct record name policy1 object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Record name policy1 object created successfully\en";
\&
\& my $policy2 = Infoblox::Grid::RecordNamePolicy\->new(
\&       name  => "Allow Underscore",
\&       regex => "^[\-a\-zA\-Z0\-9_.]+\e$",
\&     );
\&
\& unless ($policy2) {
\&      die("Construct record name policy1 object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Record name policy2 object created successfully\en";
\&
\& my $policy3 = Infoblox::Grid::RecordNamePolicy\->new(
\&       name  => "Strict Hostname Checking",
\&       regex => "^[a\-zA\-Z0\-9]\e$|^[a\-zA\-Z0\-9][\-a\-zA\-Z0\-9.]*[a\-zA\-Z0\-9]\e$",
\&     );
\&
\& unless ($policy3) {
\&      die("Construct record name policy3 object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Record name policy3 object created successfully\en";
\&
\& my $policy4 = Infoblox::Grid::RecordNamePolicy\->new(
\&     name  => "test",
\&     regex => "^[a\-zA\-Z0\-9]+\e$",
\&     );
\& unless ($policy4) {
\&      die("Construct record name policy3 object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Record name policy4 object created successfully\en";
.Ve
.PP
\&\fB#Get the Member \s-1DNS\s0 object to add a record name policy object to it\fR
.PP
.Vb 1
\& my $grid_dns = $session\->get( "object" => "Infoblox::Grid::DNS", "grid" => "Infoblox");
\&
\& unless ($grid_dns) {
\&          die("Get Grid DNS failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&  }
\& $grid_dns\->record_name_policies([$policy1,$policy2,$policy3,$policy4]);
\& $session\->modify($grid_dns)
\&       or die("modify Grid DNS failed:" ,
\&       $session\->status_code(), $session\->status_detail());
\& print "Modify grid DNS successful for record name policy object\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::DNS, Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
