.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Member::BGP::Neighbor 3"
.TH Infoblox::Grid::Member::BGP::Neighbor 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Member::BGP::Neighbor \- BGP (Border Gateway Protocol) neighbor object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An Infoblox::BGP::Neighbor object represents the \s-1BGP\s0 neighbor that is configured in an Autonomous System (\s-1AS\s0). \s-1BGP\s0 neighbors are configured at the grid member level.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 12
\& my $neighbor = Infoblox::Grid::Member::BGP::Neighbor\->new(
\&     neighbor_ip         => $ipv4addr | $ipv6addr, # Required
\&     remote_as           => $num,                  # Required
\&     bgp_neighbor_pass   => $string,               # Required if  authentication_mode set to "MD5"
\&     authentication_mode => "NONE" | "MD5",        # Optional / default is "NONE"
\&     bfd_template        => $string,               # Optional / default is undefined
\&     comment             => $string,               # Optional / default is undefined
\&     enable_bfd          => "true" | "false",      # Optional / default is "false"
\&     enable_multihop     => "true" | "false",      # Optional / default is "false"
\&     interface           => $string,               # Optional / default is "LAN_HA"
\&     multihop_ttl        => $uint | undef,         # Optional / default is undefined
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to a \s-1BGP AS\s0 object.
.SS "Infoblox::Grid::Member::BGP::AS\->neighbors( )"
.IX Subsection "Infoblox::Grid::Member::BGP::AS->neighbors( )"
.RS 4
Use this function to specify \s-1BGP\s0 Autonomous Systems for the grid member. See Infoblox::Grid::Member::BGP::AS\->\fBneighbors()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Construct a BGP neighbor
\& my $neighbor = Infoblox::Grid::Member::BGP::Neighbor\->new(
\&     neighbor_ip           => "172.16.0.1",
\&     remote_as             => 1234,
\&     authentication_mode   => "NONE",
\&     interface             => "LAN_HA",
\& );
\&
\& #Construct a BGP AS
\& my $autonomous_system = Infoblox::Grid::Member::BGP::AS\->new(
\&     as          => 269,
\&     keepalive       => 4,
\&     holddown        => 16,
\&     neighbors       => [ $neighbor ]
\& );
\&
\& # Configure BGP on the Grid Member object
\& my $response = $Grid_Member\->bgp_as([$as]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of an Infoblox::BGP::AS object.
.SS "enable_multihop( )"
.IX Subsection "enable_multihop( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the multihop option is enabled or not.
.Sp
By default, \s-1BGP\s0 connects to external peers residing on directly connected networks. Usually the ttl in \s-1IP\s0 header
(hop-limit IPv6) is set to 1 to avoid \s-1BGP\s0 packets crossing networks. \s-1EBGP\s0 multihop option allows connection to
peers which have one or more non-BGP routers in between.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable multihop option and 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_multihop value
\& my $enable_multihop = $object\->enable_multihop();
\& #Modify enable_multihop value
\& $object\->enable_multihop("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_bfd( )"
.IX Subsection "enable_bfd( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the Bidirectional Forwarding Detection (\s-1BFD\s0) fallover is enabled or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1BFD\s0 fallover and false to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_bfd value
\& my $enable_bfd = $object\->enable_bfd();
\& #Modify enable_bfd value
\& $object\->enable_bfd(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "interface( )"
.IX Subsection "interface( )"
.RS 4
Use this method to set or retrieve the interface that sends \s-1BGP\s0 advertisement information.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the interface in string format. The only supported value is \*(L"\s-1LAN_HA\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get interface
\& my $interface = $neighbor\->interface();
\& #Modify interface
\& $neighbor\->interface("LAN_HA");
.Ve
.RE
.RS 4
.RE
.SS "multihop_ttl( )"
.IX Subsection "multihop_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1TTL\s0 setting for multihop option.
.Sp
By default, \s-1BGP\s0 connects to external peers residing on directly connected networks. Usually the ttl in \s-1IP\s0 header
(hop-limit IPv6) is set to 1 to avoid \s-1BGP\s0 packets crossing networks. \s-1EBGP\s0 multihop option allows connection to
peers which have one or more non-BGP routers in between.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 255. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get multihop_ttl value
\& my $multihop_ttl = $object\->multihop_ttl();
\& #Modify multihop_ttl value
\& $object\->multihop_ttl(200);
.Ve
.RE
.RS 4
.RE
.SS "neighbor_ip( )"
.IX Subsection "neighbor_ip( )"
.RS 4
Use this method to set or retrieve the \s-1IP\s0 address of the \s-1BGP\s0 neighbor.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The IPv4 or IPv6 address of the \s-1BGP\s0 neighbor.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Get neighbor IP address
\& my $neighbor_ip = $neighbor\->neighbor_ip();
\& #Modify neighbor IP address
\& $neighbor\->neighbor_ip("192.168.1.2");
\& $neighbor\->neighbor_ip("2001::1");
.Ve
.RE
.RS 4
.RE
.SS "remote_as( )"
.IX Subsection "remote_as( )"
.RS 4
Use this method to set or retrieve the remote \s-1AS\s0 number of the \s-1BGP\s0 neighbor.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An \s-1AS\s0 number is a 16\-bit number from 1 to 65535.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get neighbor remote AS number
\& my $remote_as = $neighbor\->remote_as();
\& #Modify remote AS number
\& $neighbor\->remote_as(269);
.Ve
.RE
.RS 4
.RE
.SS "authentication_mode( )"
.IX Subsection "authentication_mode( )"
.RS 4
Use this method to set or retrieve the attribute about whether \s-1BGP\s0 authentication has been set for each neighbor.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set parameter to \*(L"\s-1MD5\*(R"\s0 to enable \s-1BGP\s0 authentication for a definite neighbor.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get neighbor enable authentication
\& my $remote_as = $neighbor\->authentication_mode();
\& #Modify enable authentication
\& $neighbor\->authentication_mode("MD5");
.Ve
.RE
.RS 4
.RE
.SS "bfd_template( )"
.IX Subsection "bfd_template( )"
.RS 4
Use this method to set or retrieve the Bidirectional Forwarding Detection (\s-1BFD\s0) template name.
.Sp
\&\s-1BFD\s0 template is used to configure advanced \s-1BFD\s0 settings such as timer intervals, authentication.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired \s-1BFD\s0 template in string format. Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get bfd_template value
\& my $bfd_template = $object\->bfd_template();
\& #Modify bfd_template value
\& $object\->bfd_template("template1");
.Ve
.RE
.RS 4
.RE
.SS "bgp_neighbor_pass( )"
.IX Subsection "bgp_neighbor_pass( )"
.RS 4
Use this method to set the password for a \s-1BGP\s0 neighbor. This is required only if authentication_mode is set to \*(L"\s-1MD5\*(R".\s0 When the password is entered, the value is preserved even if authentication_mode is changed to \*(L"\s-1NONE\*(R".\s0 This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The bgp_neighbor_pass in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Modify authentication password per neighbor
\& $neighbor\->bgp_neighbor_pass("authpassword");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get neighbor comment
\& my $comment = $neighbor\->comment();
\& #Modify comment
\& $neighbor\->comment("my comment");
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\& L<Infoblox::Grid::Member::BGP::AS|Infoblox::Grid::Member::BGP::AS>
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
