.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LWP::ConsoleLogger::Everywhere 3"
.TH LWP::ConsoleLogger::Everywhere 3 "2019-06-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
LWP::ConsoleLogger::Everywhere \- LWP tracing everywhere
.SH "VERSION"
.IX Header "VERSION"
version 0.000042
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use LWP::ConsoleLogger::Everywhere;
\&
\&    # somewhere deep down in the guts of your program
\&    # there is some other module that creates an LWP::UserAgent
\&    # and now it will tell you what it\*(Aqs up to
\&
\&    # somewhere else you can access and fine\-tune those loggers
\&    # individually:
\&    my $loggers = LWP::ConsoleLogger::Everywhere\->loggers;
\&    $loggers\->[0]\->pretty(0);
\&
\&    # or all of them at once:
\&    LWP::ConsoleLogger::Everywhere\->set( pretty => 1);
\&    
\&    # Redact sensitive data for all user agents
\&    $ENV{LWPCL_REDACT_HEADERS} = \*(AqAuthorization,Foo,Bar\*(Aq;
\&    $ENV{LWPCL_REDACT_PARAMS} = \*(Aqseekrit,password,credit_card\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module turns on LWP::ConsoleLogger::Easy debugging for every LWP::UserAgent or Mojo::UserAgent
based user agent anywhere in your code. It doesn't matter what package or class it is in,
or if you have access to the object itself. All you need to do is \f(CW\*(C`use\*(C'\fR this module
anywhere in your code and it will work.
.PP
You can access and configure the loggers individually after they have been created
using the \f(CW\*(C`loggers\*(C'\fR class method. To change all of them at once, use the \f(CW\*(C`set\*(C'\fR class
method instead.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "set( <setting> => <value> )"
.IX Subsection "set( <setting> => <value> )"
.Vb 1
\&    LWP::ConsoleLogger::Everywhere\->set( dump_content => 0 );
.Ve
.PP
This class method changes the given setting on all logger objects that have been created
so far. The first argument is the accessor name of the setting you want to change, and the
second argument is the new value. This cannot be used to access current values. See
\&\*(L"\s-1METHODS\*(R"\s0 in LWP::ConsoleLogger#SUBROUTINES for what those settings are.
.SS "loggers"
.IX Subsection "loggers"
.Vb 5
\&    my $loggers = LWP::ConsoleLogger::Everywhere\->loggers;
\&    foreach my $logger ( @{ $loggers } ) {
\&        # stop dumping headers
\&        $logger\->dump_headers( 0 );
\&    }
.Ve
.PP
This class method returns an array reference of all LWP::ConsoleLogger objects that have
been created so far, with the newest one last. You can use them to fine-tune settings. If there
is more than one user agent in your application you will need to figure out which one is which.
Since this is for debugging only, trial and error is a good strategy here.
.SH "CAVEATS"
.IX Header "CAVEATS"
If there are several different user agents in your application, you will get debug
output from all of them. This could be quite cluttered.
.PP
Since LWP::ConsoleLogger::Everywhere does its magic during compile time it will
most likely catch every user agent in your application, unless
you \f(CW\*(C`use LWP::ConsoleLogger::Everywhere\*(C'\fR inside a file that gets loaded at runtime.
If the user agent you wanted to debug had already been created at that time it
cannot hook into the constructor any more.
.PP
LWP::ConsoleLogger::Everywhere works by catching new user agents directly in
LWP::UserAgent when they are created. That way all properly implemented sub classes
like WWW::Mechanize will go through it. But if you encounter one that installs its
own handlers into the user agent after calling \f(CW\*(C`new\*(C'\fR in LWP::UserAgent
that might overwrite the ones LWP::ConsoleLogger installed.
.PP
LWP::ConsoleLogger::Everywhere will keep references to all user agents that were
ever created during for the lifetime of your application. If you have a lot of lexical
user agents that you recycle all the time they will not actually go away and might
consume memory.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For more information or if you want more detailed control see LWP::ConsoleLogger.
.SH "AUTHOR"
.IX Header "AUTHOR"
Olaf Alders <olaf@wundercounter.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2014\-2019 by MaxMind, Inc.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
