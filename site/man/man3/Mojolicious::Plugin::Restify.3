.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Restify 3"
.TH Mojolicious::Plugin::Restify 3 "2017-04-17" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Restify \- Route shortcuts & helpers for REST collections
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # Mojolicious example (Mojolicious::Lite isn\*(Aqt supported)
\&  package MyApp;
\&  use Mojo::Base \*(AqMojolicious\*(Aq;
\&
\&  sub startup {
\&    my $self = shift;
\&
\&    # imports the \`collection\*(Aq route shortcut and \`restify\*(Aq helpers
\&    $self\->plugin(\*(AqRestify\*(Aq);
\&
\&    # add REST collection endpoints manually
\&    my $r = $self\->routes;
\&    my $accounts = $r\->collection(\*(Aqaccounts\*(Aq);      # /accounts
\&    $accounts\->collection(\*(Aqinvoices\*(Aq);              # /accounts/:accounts_id/invoices
\&
\&    # or add the equivalent REST routes with an ARRAYREF (the helper will
\&    # create chained routes from the path \*(Aqaccounts/invoices\*(Aq so you don\*(Aqt need
\&    # to set [\*(Aqaccounts\*(Aq, \*(Aqaccounts/invoices\*(Aq])
\&    my $r = $self\->routes;
\&    $self\->restify\->routes($r, [\*(Aqaccounts/invoices\*(Aq]);
\&
\&    # or add the equivalent REST routes with a HASHREF (might be easier to
\&    # visualise how collections are chained together)
\&    my $r = $self\->routes;
\&    $self\->restify\->routes($r, {
\&      accounts => {
\&        invoices => undef
\&      }
\&    });
\&  }
.Ve
.PP
Next create your controller for accounts.
.PP
.Vb 5
\&  # Restify controller depicting the REST actions for the /accounts collection.
\&  # (The name of the controller is the Mojo::Util::camelized version of the
\&  # collection path.)
\&  package MyApp::Controller::Accounts;
\&  use Mojo::Base \*(AqMojolicious::Controller\*(Aq;
\&
\&  sub resource_lookup {
\&    my $c = shift;
\&
\&    # To consistenly get the element\*(Aqs ID relative to the resource_lookup
\&    # action, use the helper as shown below. If you need to access an element ID
\&    # from a collection further up the chain, you can access it from the stash.
\&    #
\&    # The naming convention is the name of the collection appended with \*(Aq_id\*(Aq.
\&    # E.g., $c\->stash(\*(Aqaccounts_id\*(Aq).
\&    my $account = your_lookup_account_resource_func($c\->restify\->current_id);
\&
\&    # By stashing the $account here, it will now be available in the delete,
\&    # read, patch, and update actions. This resource_lookup action is optional,
\&    # but added to every collection by default to help reduce your code.
\&    $c\->stash(account => $account);
\&
\&    # must return a positive value to continue the dispatch chain
\&    return 1 if $account;
\&
\&    # inform the end user that this specific resource does not exist
\&    $c\->reply\->not_found and return 0;
\&  }
\&
\&  sub create { ... }
\&
\&  sub delete { ... }
\&
\&  sub list { ... }
\&
\&  sub read {
\&    my $c = shift;
\&
\&    # account was placed in the stash in the resource_lookup action
\&    $c\->render(json => $c\->stash(\*(Aqaccount\*(Aq));
\&  }
\&
\&  sub patch { ... }
\&
\&  sub update { ... }
\&
\&  1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::Restify is a Mojolicious::Plugin. It simplifies
generating all of the Mojolicious::Routes for a typical \s-1REST\s0 \fIcollection\fR
endpoint (e.g., \f(CW\*(C`/accounts\*(C'\fR or \f(CW\*(C`/invoices\*(C'\fR) and maps the common \s-1HTTP\s0 verbs
(\f(CW\*(C`DELETE\*(C'\fR, \f(CW\*(C`GET\*(C'\fR, \f(CW\*(C`PATCH\*(C'\fR, \f(CW\*(C`POST\*(C'\fR, \f(CW\*(C`PUT\*(C'\fR) to underlying controller class
methods.
.PP
For example, creating a \fIcollection\fR called \f(CW\*(C`/accounts\*(C'\fR would create the
routes as shown below. N.B. The \f(CW\*(C`over\*(C'\fR option in the example below corresponds
to the name of a route condition. See \*(L"conditions\*(R" in Mojolicious::Routes.
.PP
.Vb 10
\&  # The collection route shortcut below creates the following routes, and maps
\&  # them to controllers of the camelized route\*(Aqs name.
\&  #
\&  # Pattern           Methods   Name                        Class::Method Name
\&  # \-\-\-\-\-\-\-           \-\-\-\-\-\-\-   \-\-\-\-                        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  # /accounts         *         accounts
\&  #   +/              GET       "accounts_list"             Accounts::list
\&  #   +/              POST      "accounts_create"           Accounts::create
\&  #   +/:accounts_id  *         "accounts"
\&  #     +/            *         "accounts_resource_lookup"  Accounts::resource_lookup
\&  #       +/          DELETE    "accounts_delete"           Accounts::delete
\&  #       +/          GET       "accounts_read"             Accounts::read
\&  #       +/          PATCH     "accounts_patch"            Accounts::patch
\&  #       +/          PUT       "accounts_update"           Accounts::update
\&
\&  # expects the element id (:accounts_id) for this collection to be a uuid
\&  my $route = $r\->collection(\*(Aqaccounts\*(Aq, over => \*(Aquuid\*(Aq);
.Ve
.PP
Mojolicious::Plugin::Restify tries not to make too many assumptions, but the
author's recent experience writing a REST-based \s-1API\s0 using Mojolicious has
helped shaped this plugin, and might unwittingly express some of his bias.
.SH "HELPERS"
.IX Header "HELPERS"
Mojolicious::Plugin::Restify implements the following helpers.
.SS "restify\->current_id"
.IX Subsection "restify->current_id"
.Vb 1
\&  my $id = $c\->restify\->current_id;
.Ve
.PP
Returns the \fIelement\fR id at the current point in the dispatch chain.
.PP
This is the only way to guarantee the correct \fIelement\fR's resource \s-1ID\s0 in a
Mojolicious::Plugin::Restify \fIaction\fR. The \f(CW\*(C`resource_lookup\*(C'\fR \fIaction\fR,
which is added by default in both \*(L"collection\*(R" and \*(L"restify-routes\*(R", is
added at different positions of the dispatch chain. As such, the router might
not have added the value of any placeholders to the
\&\*(L"stash\*(R" in Mojolicious::Controller yet.
.SS "restify\->routes"
.IX Subsection "restify->routes"
This helper is a wrapper around the \*(L"collection\*(R" route shortcut. It
facilitates creating \s-1REST\s0 \fIcollections\fR using either an \f(CW\*(C`ARRAYREF\*(C'\fR or
\&\f(CW\*(C`HASHREF\*(C'\fR.
.PP
It takes a Mojolicious::Routes object, the \fIpaths\fR to create, and optionally
\&\fIoptions\fR which are passed to the \*(L"collection\*(R" route shortcut.
.PP
.Vb 3
\&  # /accounts
\&  # /accounts/1234
\&  $self\->restify\->routes($self\->routes, [\*(Aqaccounts\*(Aq], {over => \*(Aqint\*(Aq});
\&
\&  # /invoices
\&  # /invoices/76be1f53\-8363\-4ac6\-bd83\-8b49e07b519c
\&  $self\->restify\->routes($self\->routes, [\*(Aqinvoices\*(Aq], {over => \*(Aquuid\*(Aq});
.Ve
.PP
Maybe you want to chain them.
.PP
.Vb 9
\&  # /accounts
\&  # /accounts/1234
\&  #   /accounts/1234/invoices
\&  #   /accounts/1234/invoices/76be1f53\-8363\-4ac6\-bd83\-8b49e07b519c
\&  $self\->restify\->routes(
\&    $self\->routes,
\&    [\*(Aqaccounts\*(Aq, [\*(Aqaccounts/invoices\*(Aq => {over => \*(Aquuid\*(Aq}]],
\&    {over => \*(Aqint\*(Aq}
\&  );
.Ve
.IP "\s-1ARRAYREF\s0" 4
.IX Item "ARRAYREF"
Using the elements of the array, invokes \*(L"collection\*(R", passing any route\-
specific options.
.Sp
It will automatically create and chain parent routes if you pass a full path
e.g., \f(CW\*(C`[\*(Aqa/very/long/path\*(Aq]\*(C'\fR. This is equivalent to the shell command
\&\f(CW\*(C`mkdir \-p\*(C'\fR.
.Sp
.Vb 10
\&  my $restify_routes = [
\&    # /area\-codes
\&    #   /area\-codes/:area_codes_id/numbers
\&    \*(Aqarea\-codes/numbers\*(Aq,
\&    # /news
\&    \*(Aqnews\*(Aq,
\&    # /payments
\&    [\*(Aqpayments\*(Aq => {over => \*(Aqint\*(Aq}],   # overrides default uuid route condition
\&    # /users
\&    #   /users/:users_id/messages
\&    #     /users/:users_id/messages/:messages_id/recipients
\&    \*(Aqusers/messages/recipients\*(Aq,
\&  ];
\&
\&  $self\->restify\->routes($self\->routes, $restify_routes, {over => \*(Aquuid\*(Aq});
.Ve
.Sp
In its most basic form, \f(CW\*(C`REST\*(C'\fR routes are created from a \f(CW\*(C`SCALAR\*(C'\fR.
.Sp
.Vb 2
\&  # /accounts
\&  my $restify_routes = [\*(Aqaccounts\*(Aq];
.Ve
.IP "\s-1HASHREF\s0" 4
.IX Item "HASHREF"
Using the key/values of the hash, invokes \*(L"collection\*(R", passing any route\-
specific options.
.Sp
It automatically chains routes to each parent, and progressively builds a
namespace as it traverses through each key.
.Sp
N.B., This was implemented before the \f(CW\*(C`ARRAYREF\*(C'\fR version, and is arguably a bit
more confusing. It might be dropped in a later version to simplify the \s-1API.\s0
.Sp
.Vb 10
\&  my $restify_routes = {
\&    # /area\-codes
\&    #   /area\-codes/:area_codes_id/numbers
\&    \*(Aqarea\-codes\*(Aq => {
\&      \*(Aqnumbers\*(Aq => undef
\&    },
\&    # /news
\&    \*(Aqnews\*(Aq => undef,
\&    # /payments
\&    \*(Aqpayments\*(Aq => [undef, {over => \*(Aqint\*(Aq}],   # overrides default uuid route condition
\&    # /users
\&    #   /users/:users_id/messages
\&    #     /users/:users_id/messages/:messages_id/recipients
\&    \*(Aqusers\*(Aq => {
\&      \*(Aqmessages\*(Aq => {
\&        \*(Aqrecipients\*(Aq => undef
\&      }
\&    },
\&  };
\&
\&  $self\->restify\->routes($self\->routes, $restify_routes, {over => \*(Aquuid\*(Aq});
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::Restify inherits all methods from Mojolicious::Plugin
and implements the following new ones.
.SS "register"
.IX Subsection "register"
.Vb 1
\&  $plugin\->register(Mojolicious\->new);
.Ve
.PP
Register plugin in Mojolicious application.
.SH "ROUTE CONDITIONS"
.IX Header "ROUTE CONDITIONS"
Mojolicious::Plugin::Restify implements the following route conditions. These
conditions can be used with the \f(CW\*(C`over\*(C'\fR option in the \*(L"collection\*(R" shortcut.
.PP
Checks are made for the existence of the \f(CW\*(C`int\*(C'\fR, \f(CW\*(C`standard\*(C'\fR and \f(CW\*(C`uuid\*(C'\fR
conditions before adding them. This allows you to replace them with your own
conditions of the same name by creating them before registering this plugin.
.PP
See \*(L"Adding-conditions\*(R" in Mojolicious::Guides::Routing to add your own.
.SS "int"
.IX Subsection "int"
.Vb 5
\&  # /numbers/1        # GOOD
\&  # /numbers/0        # GOOD
\&  # /numbers/one      # BAD
\&  # /numbers/\-1       # BAD
\&  # /numbers/0.114    # BAD (the standard :placeholder notation doesn\*(Aqt allow a \*(Aq.\*(Aq)
\&
\&  my $r = $self\->routes;
\&  $r\->collection(\*(Aqnumbers\*(Aq, over => \*(Aqint\*(Aq);
.Ve
.PP
A Mojolicious route condition (see \*(L"conditions\*(R" in Mojolicious::Routes) which
restricts a route's \fIcollection\fR's \fIelement\fR id to whole positive integers
which are \f(CW\*(C`>= 0\*(C'\fR.
.SS "standard"
.IX Subsection "standard"
.Vb 2
\&  my $r = $self\->routes;
\&  $r\->collection(\*(Aqnumbers\*(Aq, over => \*(Aqstandard\*(Aq);
.Ve
.PP
A \fIcollection\fR's \fIelement\fR resource \s-1ID\s0 is captured using
\&\*(L"Standard-placeholders\*(R" in Mojolicious::Guides::Routing. This route condition
allows everything the standard placeholder allows, which is similar to the
regular expression \f(CW\*(C`([^/.]+)\*(C'\fR.
.PP
This is the default \fIover\fR option for a \*(L"collection\*(R".
.SS "uuid"
.IX Subsection "uuid"
.Vb 4
\&  # /uuids/8ebef0d0\-d6cf\-11e4\-8830\-0800200c9a66     GOOD
\&  # /uuids/8EBEF0D0\-D6CF\-11E4\-8830\-0800200C9A66     GOOD
\&  # /uuids/8ebef0d0d6cf11e488300800200c9a66         GOOD
\&  # /uuids/malformed\-uuid                           BAD
\&
\&  my $r = $self\->routes;
\&  $r\->collection(\*(Aquuids\*(Aq, over => \*(Aquuid\*(Aq);
.Ve
.PP
A Mojolicious route condition (see \*(L"conditions\*(R" in Mojolicious::Routes) which
restricts a route's \fIcollection\fR's \fIelement\fR id to UUIDs only (with or without
the separating hyphens).
.SH "ROUTE SHORTCUTS"
.IX Header "ROUTE SHORTCUTS"
Mojolicious::Plugin::Restify implements the following route shortcuts.
.SS "collection"
.IX Subsection "collection"
.Vb 10
\&  my $r = $self\->routes;
\&  $r\->collection(\*(Aqaccounts\*(Aq);
\&  $r\->collection(\*(Aqaccounts\*(Aq, collection_method_map => {delete => \*(Aqdelete_collection\*(Aq});
\&  $r\->collection(\*(Aqaccounts\*(Aq, controller            => \*(Aqdifferentmodule\*(Aq);
\&  $r\->collection(\*(Aqaccounts\*(Aq, element               => 0);
\&  $r\->collection(\*(Aqaccounts\*(Aq, element_method_map    => {get => \*(Aqread\*(Aq});
\&  $r\->collection(\*(Aqaccounts\*(Aq, over                  => \*(Aquuid\*(Aq);
\&  $r\->collection(\*(Aqaccounts\*(Aq, placeholder           => \*(Aq*\*(Aq);
\&  $r\->collection(\*(Aqaccounts\*(Aq, prefix                => \*(Aqv1\*(Aq);
\&  $r\->collection(\*(Aqaccounts\*(Aq, resource_lookup       => \*(Aq0\*(Aq);
.Ve
.PP
A Mojolicious route shortcut which helps
create the most common \s-1REST\s0 routes for a
\&\fIcollection\fR endpoint and its associated \fIelement\fR.
.PP
A \fIcollection\fR endpoint (e.g., \f(CW\*(C`/accounts\*(C'\fR) supports \fIlist\fR (\f(CW\*(C`GET\*(C'\fR) and
\&\fIcreate\fR (\f(CW\*(C`POST\*(C'\fR) actions. The \fIcollection\fR's \fIelement\fR (e.g.,
\&\f(CW\*(C`/accounts/:accounts_id\*(C'\fR) supports \fIdelete\fR (\f(CW\*(C`DELETE\*(C'\fR), \fIread\fR (\f(CW\*(C`GET\*(C'\fR),
\&\fIpatch\fR (\f(CW\*(C`PATCH\*(C'\fR), and \fIupdate\fR (\f(CW\*(C`PUT\*(C'\fR) actions.
.PP
By default, every \s-1HTTP\s0 request to a \fIcollection\fR's \fIelement\fR is routed through
a \f(CW\*(C`resource_lookup\*(C'\fR \fIaction\fR (see \*(L"under\*(R" in Mojolicious::Routes::Route). This
helps reduce the process of looking up a \fIcollection\fR's resource to a single
location. See \*(L"\s-1SYNOPSIS\*(R"\s0 for an example of its use.
.PP
options
.IX Subsection "options"
.PP
The following options allow a \fIcollection\fR to be fine-tuned.
.IP "collection_method_map" 4
.IX Item "collection_method_map"
.Vb 11
\&  $r\->collection(
\&    \*(Aqinvoices\*(Aq,
\&    {
\&      collection_method_map => {
\&        get  => \*(Aqlist\*(Aq,
\&        post => \*(Aqcreate\*(Aq,
\&        # delete => \*(Aqdelete_collection\*(Aq,  # delete all\-the\-things!
\&        # put    => \*(Aqupdate_collection\*(Aq   # update all\-the\-things!
\&      }
\&    }
\&  );
.Ve
.Sp
The above represents the default \s-1HTTP\s0 method mappings for \f(CW\*(C`collections\*(C'\fR. It's
possible to change the mappings globally (when importing the plugin) or per
collection (as above).
.Sp
These \s-1HTTP\s0 method mappings only apply to the \f(CW\*(C`collection\*(C'\fR. e.g., \f(CW\*(C`/invoices\*(C'\fR.
Please see \f(CW\*(C`element_method_map\*(C'\fR if you want to apply different \s-1HTTP\s0 mappings
to an \f(CW\*(C`element\*(C'\fR like \f(CW\*(C`/invoices/:id\*(C'\fR.
.IP "controller" 4
.IX Item "controller"
.Vb 3
\&  # collection doesn\*(Aqt build a namespace for subroutes by default
\&  my $accounts = $r\->collection(\*(Aqaccounts\*(Aq);    # MyApp::Controller::Accounts
\&  $accounts\->collection(\*(Aqinvoices\*(Aq);            # MyApp::Controller::Invoices
\&
\&  # collection can build namespaces, but can be difficult to keep track of. Use
\&  # the restify helper if namespaces are important to you.
\&  #
\&  # MyApp::Controller::Accounts
\&  my $accounts = $r\->collection(\*(Aqaccounts\*(Aq);
\&  # MyApp::Controller::Accounts::Invoices
\&  my $invoices = $accounts\->collection(\*(Aqinvoices\*(Aq, controller => \*(Aqaccounts\*(Aq);
\&  # MyApp::Controller::Accounts::Invoices::Foo
\&  $invoices\->collection(\*(Aqfoo\*(Aq, controller => \*(Aqaccounts\-invoices\*(Aq);
.Ve
.Sp
Prepends the controller name (which is automatically generated based on the path
name) with this option value if present. Used internally by \*(L"restify\*(R" to build
a perlish namespace from the paths. \*(L"collection\*(R" does not build a namespace by
default.
.IP "element" 4
.IX Item "element"
.Vb 3
\&  # GET,POST                      /messages     200
\&  # DELETE,GET,PATCH,PUT,UPDATE   /messages/1   200
\&  $r\->collection(\*(Aqmessages\*(Aq);     # element routes are created by default
\&
\&  # GET,POST                      /messages     200
\&  # DELETE,GET,PATCH,PUT,UPDATE   /messages/1   404
\&  $r\->collection(\*(Aqmessages\*(Aq, element => 0);
.Ve
.Sp
Enables or disables chaining an \fIelement\fR to the \fIcollection\fR. Disabling the
element portion of a \fIcollection\fR means that only the \fIcreate\fR and \fIlist\fR
actions will be created.
.IP "element_method_map" 4
.IX Item "element_method_map"
.Vb 11
\&  $r\->collection(
\&    \*(Aqinvoices\*(Aq,
\&    {
\&      element_method_map  => {
\&        \*(Aqdelete\*(Aq => \*(Aqdelete\*(Aq,
\&        \*(Aqget\*(Aq    => \*(Aqread\*(Aq,
\&        \*(Aqpatch\*(Aq  => \*(Aqpatch\*(Aq,
\&        \*(Aqput\*(Aq    => \*(Aqupdate\*(Aq,
\&      }
\&    }
\&  );
.Ve
.Sp
The above represents the default \s-1HTTP\s0 method mappings. It's possible to change
the mappings globally (when importing the plugin) or per collection (as above).
.Sp
These \s-1HTTP\s0 method mappings only apply to the \f(CW\*(C`collection\*(C'\fR's \f(CW\*(C`element\*(C'\fR. e.g.,
\&\f(CW\*(C`/invoices/:id\*(C'\fR.
.IP "over" 4
.IX Item "over"
.Vb 3
\&  $r\->collection(\*(Aqinvoices\*(Aq, over => \*(Aqint\*(Aq);
\&  $r\->collection(\*(Aqinvoices\*(Aq, over => \*(Aqstandard\*(Aq);
\&  $r\->collection(\*(Aqaccounts\*(Aq, over => \*(Aquuid\*(Aq);
.Ve
.Sp
Allows a \fIcollection\fR's \fIelement\fR to be restricted to a specific data type
using Mojolicious' route conditions. \*(L"int\*(R", \*(L"standard\*(R" and \*(L"uuid\*(R" are
added automatically if they don't already exist.
.IP "placeholder" 4
.IX Item "placeholder"
.Vb 3
\&  # /versions/:versions_id      { versions_id => \*(Aq123\*(Aq}
\&  # /versions/#versions_id      { versions_id => \*(Aq123.00\*(Aq}
\&  # /versions/*versions_id      { versions_id => \*(Aq123.00/1\*(Aq}
.Ve
.Sp
The placeholder is used to capture the \fIelement\fR id within a route. It can be
one of \f(CW\*(C`standard \*(Aq:\*(Aq\*(C'\fR, \f(CW\*(C`relaxed \*(Aq#\*(Aq\*(C'\fR or \f(CW\*(C`wildcard \*(Aq*\*(Aq\*(C'\fR. You might need to
adjust the placholder option in certain scenarios, but the \f(CW\*(C`standard\*(C'\fR
placeholder should suffice for most normal \s-1REST\s0 endpoints.
.Sp
.Vb 1
\&  $r\->collection(\*(Aq/messages\*(Aq, placeholder => \*(Aq:\*(Aq);
.Ve
.Sp
\&\fIElements\fR are chained to a \fIcollection\fR using the standard placeholder by
default. They match all characters except \f(CW\*(C`/\*(C'\fR and \f(CW\*(C`.\*(C'\fR. See
\&\*(L"Standard-placeholders\*(R" in Mojolicious::Guides::Routing.
.Sp
.Vb 1
\&  $r\->collection(\*(Aq/relaxed\-messages\*(Aq, placeholder => \*(Aq#\*(Aq);
.Ve
.Sp
Placeholders can be relaxed, matching all characters expect \f(CW\*(C`/\*(C'\fR. Useful if you
need to capture a domain name within a route. See
\&\*(L"Relaxed-placeholders\*(R" in Mojolicious::Guides::Routing.
.Sp
.Vb 1
\&  $r\->collection(\*(Aq/wildcard\-messages\*(Aq, placeholder => \*(Aq*\*(Aq);
.Ve
.Sp
Or they can be greedy, matching everything, inclusive of \f(CW\*(C`/\*(C'\fR and \f(CW\*(C`.\*(C'\fR. Useful
if you need to capture everything within a route. See
\&\*(L"Wildcard-placeholders\*(R" in Mojolicious::Guides::Routing.
.IP "prefix" 4
.IX Item "prefix"
.Vb 3
\&  # without a prefix
\&  $r\->collection(\*(Aqinvoices\*(Aq);
\&  say $c\->url_for(\*(Aqinvoices\*(Aq, invoices_id => 1);
\&
\&  # with a prefix
\&  $r\->collection(\*(Aqinvoices\*(Aq, prefix => \*(Aqv1\*(Aq);
\&  say $c\->url_for(\*(Aqv1_invoices\*(Aq, invoices_id => 1);
.Ve
.Sp
Adds a prefix to the automatically generated route
name for each \fIcollection\fR and \fIelement\fR
\&\fIaction\fR.
.IP "resource_lookup" 4
.IX Item "resource_lookup"
.Vb 1
\&  $r\->collection(\*(Aqnolookup\*(Aq, resource_lookup => 0);
.Ve
.Sp
Enables or disables adding a \f(CW\*(C`resource_lookup\*(C'\fR \fIaction\fR to the \fIelement\fR of
the \fIcollection\fR.
.SS "element"
.IX Subsection "element"
.Vb 3
\&  my $r    = $self\->routes;
\&  my $news = $r\->get(\*(Aq/news\*(Aq)\->to(\*(Aqfoo#news\*(Aq);
\&  $news\->element(\*(Aqnews\*(Aq);
.Ve
.PP
A Mojolicious route shortcut called internally
by \*(L"collection\*(R" to add the \fIelement\fR routes to a \fIcollection\fR. You shouldn't
need to call this shortcut directly.
.PP
When an element is added to a \fIcollection\fR's route, the resource \s-1ID\s0 is captured
using a standard placeholder by default.
.SH "CREDITS"
.IX Header "CREDITS"
In alphabetical order:
.Sp
.RS 2
Castaway
.Sp
Dragoș\-Robert Neagu
.RE
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2015\-2017, Paul Williams.
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Williams <kwakwa@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Plugin::REST, Mojolicious::Plugin::RESTRoutes.
