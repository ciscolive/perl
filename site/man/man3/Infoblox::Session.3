.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Session 3"
.TH Infoblox::Session 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Session \- Session object to manipulate data within a grid.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Infoblox::Session object is the key object that is used to manipulate data within a grid. Creating a Session object establishes a communications channel with the grid master.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 9
\& my $session = Infoblox::Session\->new(
\&     master   => $address,  #Required 
\&     password => $string,   #Required unless SSL_cert_file and SSL_key_file provided
\&     username => $string,   #Required unless SSL_cert_file and SSL_key_file provided
\&     new_password => $string, #Optional
\&     timeout  => $num,      #Optional, default is to use the LWP::UserAgent default timeout (180 seconds)
\&     connection_timeout => $num  #Optional, see below for more details
\&     default_maximum_objects_returned  => $num, #Optional, default is to return all matching objects for search operations
\&     default_partial_subobjects  => 0 / 1, #Optional, default is 0 (no partial subobjects for search operations)
\&
\&     # The following options will be passed to LWP::UserAgent if specified. Please see the module documentation for more details.
\&     verify_hostname => 0 / 1, #Optional. If set to 1, ensures that the hostname of the server will match the hostname in its certificate.
\&     SSL_ca_path => $string, #Optional. The path to a directory that contains the Certificate Authority certificates. Ignored unless verify_hostname is 1.
\&     SSL_ca_file => $string, #Optional. The path to a file that contains the Certificate Authority certificates. Ignored unless verify_hostname is 1.
\&     SSL_cert_file => $string, #Optional, The path to a file that contains the OCSP Client Certificate. SSL_key_file and SSL_cert_file should be defined together.
\&     SSL_key_file  => $string, #Optional, The path to a file that contains the OCSP Client Private Key. SSL_key_file and SSL_cert_file should be defined together.
\& );
.Ve
.PP
If connection_timeout is provided and is greater than zero, the \s-1API\s0 will try to connect to the master's \s-1IP\s0 address with the specified connection_timeout first; and if it's successful, it will proceed to the log-in process.
.PP
The new_password option is required when the force password reset policy is enabled or when the user password is expired.
.PP
When the product is in Common Criteria mode, verify_hostname is automatically forced to 1. If verify_hostname is set to 1, SSL_ca_path and SSL_ca_file must be set unless the server certificate is signed by a Certificate Authority recognized by libwww-perl.
.PP
Note that \s-1SSL\s0 errors are not reported by the Perl \s-1API\s0 when debugging \s-1SSL\s0 connection issues (1006 'can't connect' errors). Infoblox recommends that you add either
.PP
.Vb 1
\& use IO::Socket::SSL qw(debug3);
.Ve
.PP
or
.PP
.Vb 2
\& use Net::SSLeay;
\& $Net::SSLeay::trace = 3;
.Ve
.PP
to your Perl program before the \*(L"use Infoblox; line\*(R" to receive more complete debugging information.
.PP
For Common Criteria and \s-1SSL\s0 operation with certificate options in general, older versions of libwww-perl and supporting libraries might not work correctly. The following have been tested: libwww-perl 6.03, LWP::Protocol::https 6.02, IO::Socket::SSL 1.52, Net::SSLeay 1.42. Infoblox recommends performing a negative test in your environment to make sure connections with incorrect certificates will fail as expected.
.PP
For IPv6 operations, the \s-1PAPI\s0 library should also be imported with the :ipv6connection option. Note that older versions of libwww-perl might not allow connection to explicit IPv6 addresses, but only to Grid members via their FQDNs (Fully Qualified Domain Names).
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a Session object.
.SS "add( )"
.IX Subsection "add( )"
.RS 4
Use this method to add an object to the Infoblox appliance.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The Infoblox object to be created in the Infoblox appliance. See individual objects for the necessary parameters.
.Sp
scheduled_at       \- Optional. Scheduled date and time in \s-1ISO 8601\s0 extended format (e.g., 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z) or 'now' which will set scheduled date and time to the current date and time. See details.
.Sp
predecessor_task   \- Optional. An Infoblox::Grid::ScheduledTask object this task depends on. It is mandatory to set scheduled_at parameter if predecessor_task parameter is set.
.Sp
approval_comment   \- Optional. Comment provided by the submitter on approval.
.Sp
approval_ticket_number \- Optional. Ticket number provided by the submitter on approval.
.Sp
ip_validation      \- Optional. A list of Infoblox::Grid::IPValidationInfo objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails. When an operation fails, the error code and error message are reported in the \fBstatus_code()\fR and \fBstatus_detail()\fR attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Construct an object
\& my $bind_a = Infoblox::DNS::Record::A\->new (
\&     ipv4addr => "1.1.1.1",
\&     name     => "bind_a.domain.com" );
\& # Submit for add
\& my $response = $session\->add( $bind_a );
\& my $ipam_network = Infoblox::Grid::IPAM::Network\->new(
\&    address => \*(Aq10.20.0.0\*(Aq,
\& );
\&
\& my $response = $session\->add($ipam_network);
.Ve
.RE
.RS 4
.RE
.SS "cc_mode( )"
.IX Subsection "cc_mode( )"
.RS 4
Use this method to determine if appliance is in Common Criteria mode.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns \*(L"true\*(R" when the appliance is in Common Criteria mode.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get cc_mode
\& my $cc_mode = $session\->cc_mode();
.Ve
.RE
.RS 4
.RE
.SS "clear_dns_cache( )"
.IX Subsection "clear_dns_cache( )"
.RS 4
Use this method to clear the \s-1DNS\s0 cache.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
member          \- Required. The IPv4 address of the member on which you want to clear the \s-1DNS\s0 cache.
.Sp
domain          \- Optional. The name of the domain to which the clear operation will be limited. The default is all domains.
.Sp
view            \- Optional. The name of the \s-1DNS\s0 view to which the clear operation will be limited. The default is all views.
.Sp
clear_full_tree \- Optional. The flag that indicates whether the clear operation should be performed on all subdomains of the domain or not. The default is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails. When an operation fails, the error code and error message are reported in the \fBstatus_code()\fR and \fBstatus_detail()\fR attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& # clear the entire DNS cache
\& my $response = $session\->clear_dns_cache(
\&        member => "192.168.1.2");
\&
\& unless($response) {
\&    die("Clear DNS cache failed");
\& }
\&
\& # clear a DNS view from the DNS cache
\& $response = $session\->clear_dns_cache(
\&        member => "192.168.1.2",
\&        view => "new_view",
\& );
\&
\& unless($response) {
\&    die("Clear DNS view from DNS cache failed");
\& }
\&
\& # clear a domain (including it\*(Aqs all subdomains) from the DNS cache
\& $response = $session\->clear_dns_cache(
\&        member          => "192.168.1.2",
\&        domain          => "foo.bar.com",
\&        clear_full_tree => "true",
\& );
\&
\& unless($response) {
\&    die("Clear the domain \e"foo.bar.com\e" from DNS cache failed");
\& }
.Ve
.RE
.RS 4
.RE
.SS "clear_outbound_worker_log( )"
.IX Subsection "clear_outbound_worker_log( )"
.RS 4
Use this method to clear the outbound worker log.
.IP "\fBParameters\fR" 4
.IX Item "Parameters"
.Vb 1
\& endpoint \- Required. The endpoint name.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is 0 if operation fails to occur or Infoblox::Grid::TestResult otherwise.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& #Clear outbound worker log
\& my $result = $session\->clear_outbound_worker_log(
\&     endpoint => \*(Aqdxl_endpoint1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "clear_unmanaged( )"
.IX Subsection "clear_unmanaged( )"
.RS 4
Use this method to clear unmanaged addresses.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
type                 \- Required. Valid values are \*(L"\s-1GLOBAL\*(R", \*(L"NETWORK\*(R",\s0 and \*(L"\s-1IP_ADDRESS\*(R".\s0
.Sp
network              \- Optional. Required when type is \*(L"\s-1NETWORK\*(R"\s0 or \*(L"\s-1IP_ADDRESS\*(R",\s0 and the ip_address value is an IPv4 address.
.Sp
network_view         \- Optional. The network view to which the clear operation will be limited. The default value is the system-defined default network view.
.Sp
ip_address           \- Optional. Required when type is \*(L"\s-1IP_ADDRESS\*(R".\s0 The value can be an IPv4 or IPv6 address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails. When an operation fails, the error code and error message are reported in the \fBstatus_code()\fR and \fBstatus_detail()\fR attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& # type is GLOBAL
\& my $response = $session\->clear_unmanaged(
\&        type => \*(AqGLOBAL\*(Aq);
\&
\& unless($response) {
\&    die("Clear unmanaged address failed");
\& }
\&
\& # with a non\-default network view
\& my $nview = Infoblox::DHCP::View\->new(
\&        name => \*(Aqnetview\*(Aq,
\& );
\& my $response = $session\->clear_unmanaged(
\&        type => \*(AqGLOBAL\*(Aq,
\&        network_view => $nview);
\&
\& unless($response) {
\&    die("Clear unmanaged address failed");
\& }
\&
\& # type is NETWORK
\& $response = $session\->clear_unmanaged(
\&        type => \*(AqNETWORK\*(Aq,
\&        network => \*(Aq10.0.0.0/24\*(Aq);
\&
\& unless($response) {
\&    die("Clear unmanaged address failed");
\& }
\&
\& # type is IP_ADDRESS
\& $response = $session\->clear_unmanaged(
\&        type => \*(AqIP_ADDRESS\*(Aq,
\&        network => \*(Aq10.0.0.0/24\*(Aq,
\&        ip_address => \*(Aq10.0.0.10\*(Aq);
\&
\& unless($response) {
\&    die("Clear unmanaged address failed");
\& }
\&
\& ####PROGRAM ENDS####
.Ve
.RE
.RS 4
.RE
.SS "copy_records( )"
.IX Subsection "copy_records( )"
.RS 4
Copy records between \s-1DNS\s0 views.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
dest_view                \- Required. The destination \s-1DNS\s0 view.
.Sp
dest_zone                \- Required. The destination \s-1DNS\s0 zone.
.Sp
view                     \- Required. The source \s-1DNS\s0 view.
.Sp
zone                     \- Required. The source \s-1DNS\s0 zone.
.Sp
clear_dest_zone          \- Optional. Remove all records in the destination zone before copying the records. Default is \*(L"false\*(R".
.Sp
copy_all_rr              \- Optional. Copy all records. Default is \*(L"false\*(R".
.Sp
copy_bind_srv            \- Optional. Copy \s-1SRV\s0 records. Default is \*(L"false\*(R".
.Sp
copy_bind_txt            \- Optional. Copy \s-1TXT\s0 records. Default is \*(L"false\*(R".
.Sp
copy_bind_ptr            \- Optional. Copy \s-1PTR\s0 records. Default is \*(L"false\*(R".
.Sp
copy_bulk_host           \- Optional. Copy Bulk Host records. Default is \*(L"false\*(R".
.Sp
copy_bind_a              \- Optional. Copy A records. Default is \*(L"false\*(R".
.Sp
copy_bind_aaaa           \- Optional. Copy \s-1AAAA\s0 records. Default is \*(L"false\*(R".
.Sp
copy_bind_cname          \- Optional. Copy \s-1CNAME\s0 records. Default is \*(L"false\*(R".
.Sp
copy_bind_dname          \- Optional. Copy \s-1DNAME\s0 records. Default is \*(L"false\*(R".
.Sp
copy_bind_mx             \- Optional. Copy \s-1MX\s0 records. Default is \*(L"false\*(R".
.Sp
copy_bind_naptr          \- Optional. Copy \s-1NAPTR\s0 records. Default is \*(L"false\*(R".
.Sp
copy_host                \- Optional. Copy Host records. Default is \*(L"false\*(R".
.Sp
replace_existing_records \- Optional. Replace any existing records with the copied records if duplicate records are not allowed. Default is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #copy records from default view to new_view
\& $session\->copy_records(
\&     view                     => "default",
\&     zone                     => "domain.com",
\&     dest_view                => "new_view",
\&     dest_zone                => "domain.com",
\&     copy_bind_srv            => "true",
\&     copy_bind_txt            => "true",
\&     copy_bind_ptr            => "false",
\&     copy_bulk_host           => "false",
\&     copy_bind_a              => "true",
\&     copy_bind_aaaa           => "true",
\&     copy_bind_cname          => "true",
\&     copy_bind_dname          => "true",
\&     copy_bind_mx             => "true",
\&     copy_host                => "true",
\&     replace_existing_records => "false",
\&     clear_dest_zone          => "false",
\&     copy_all_rr              => "false" );
.Ve
.RE
.RS 4
.RE
.SS "copy_rpz_records( )"
.IX Subsection "copy_rpz_records( )"
.RS 4
Copy \s-1RPZ\s0 records (rules) between \s-1DNS\s0 views.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
dest_view                          \- Required. The destination \s-1DNS\s0 view.
.Sp
dest_zone                          \- Required. The destination \s-1DNS\s0 zone.
.Sp
view                               \- Required. The source \s-1DNS\s0 view.
.Sp
zone                               \- Required. The source \s-1DNS\s0 zone.
.Sp
clear_dest_zone                    \- Optional. Remove all records in the destination zone before copying the records. Default is \*(L"false\*(R".
.Sp
copy_all_rr                        \- Optional. Copy all records. Default is \*(L"false\*(R".
.Sp
copy_passthru_ip_addr              \- Optional. Copy \s-1PASSTHRUIPADDR\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_passthru_domain               \- Optional. Copy \s-1PASSTHRUDOMAIN\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_block_nxd_ip_addr             \- Optional. Copy \s-1BLOCKNXDOMAINIPADDR\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_block_nxd_domain              \- Optional. Copy \s-1BLOCKNXDOMAINDOMAIN\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_block_nodata_ip_addr          \- Optional. Copy \s-1BLOCKNODATAIPADDR\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_block_nodata_domain           \- Optional. Copy \s-1BLOCKNODATADOMAIN\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_subst_cname                   \- Optional. Copy \s-1SUBSTITUTE_CNAME\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_subst_a                       \- Optional. Copy \s-1SUBSTITUTE_A_RECORD\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_subst_aaaa                    \- Optional. Copy \s-1SUBSTITUTE_AAAA_RECORD\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_subst_mx                      \- Optional. Copy \s-1SUBSTITUTE_MX_RECORD\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_subst_ptr                     \- Optional. Copy \s-1SUBSTITUTE_PTR_RECORD\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_subst_naptr                   \- Optional. Copy \s-1SUBSTITUTE_NAPTR_RECORD\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_subst_srv                     \- Optional. Copy \s-1SUBSTITUTE_SRV_RECORD\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_subst_txt                     \- Optional. Copy \s-1SUBSTITUTE_TXT_RECORD\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_subst_ipv4_addr               \- Optional. Copy \s-1SUBSTITUTE_IPV4ADDRESS_RECORD\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_subst_ipv6_addr               \- Optional. Copy \s-1SUBSTITUTE_IPV6ADDRESS_RECORD\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_subst_ipaddr_cname            \- Optional. Copy \s-1SUBSTITUTE_IPADDR_CNAME\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_subst_client_ipaddr_cname     \- Optional. Copy \s-1SUBSTITUTE_CLIENTIPADDR_CNAME\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_passthru_client_ipaddr        \- Optional. Copy \s-1PASSTHRUCLIENTIPADDR\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_block_nxdomain_client_ipaddr  \- Optional. Copy \s-1BLOCKNXDOMAINCLIENTIPADDR\s0 rules. Default is \*(L"false\*(R".
.Sp
copy_block_no_data_client_ipaddr   \- Optional. Copy \s-1BLOCKNODATACLIENTIPADDR\s0 rules. Default is \*(L"false\*(R".
.Sp
replace_existing_records           \- Optional. Replace any existing records with the copied records if duplicate records are not allowed. Default is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 12
\& #copy rules (records) from default view to new_view
\& $session\->copy_rpz_records(
\&     view                     => "default",
\&     zone                     => "rpz.com",
\&     dest_view                => "new_view",
\&     dest_zone                => "rpz.com",
\&     copy_subst_ipv4_addr     => "true",
\&     copy_subst_cname         => "true",
\&     copy_passthru_ip_addr    => "false",
\&     replace_existing_records => "false",
\&     clear_dest_zone          => "false",
\&     copy_all_rr              => "false" );
.Ve
.RE
.RS 4
.RE
.SS "csv_import_control( )"
.IX Subsection "csv_import_control( )"
.RS 4
Use this method to control the execution of the \s-1CSV\s0 import task.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 2
\& action    \- Required. Valid value is \*(AqSTOP\*(Aq which stops the CSV import task.
\& import_id \- Required. The id of the import task to control.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns 1 if operation succeeds.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Stop CSV Import Task
\& my $result = $session\->csv_import_control(action => \*(AqSTOP\*(Aq, import_id => \*(Aq123456\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "get_all_template_vendor_id( )"
.IX Subsection "get_all_template_vendor_id( )"
.RS 4
Use this method to retrieve the list of vendor identifiers associated with \s-1REST API\s0 templates.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
outbound_type \- Optional. The outbound type for the vendor identifier. The valid values are '\s-1REST\s0' and '\s-1DXL\s0'. Default is '\s-1REST\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns an array of vendor identifiers in a string format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get vendor identifiers
\& my $result = $session\->get_all_template_vendor_id(outbound_type => \*(AqDXL\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "get_rpz_members( )"
.IX Subsection "get_rpz_members( )"
.RS 4
Use this method to get a list of Infoblox::DNS::Member objects that are conformed to passed arguments.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
rpz_licensed \- Optional. Requests members that have \s-1RPZ\s0 license properly installed. Default is \*(L"false\*(R".
.Sp
rpz_enabled  \- Optionl. Requests members that have \s-1RPZ\s0 license properly installed and recursion enabled. Default is \*(L"false\*(R".
.Sp
view         \- Optional. The \s-1DNS\s0 view to which the zone being added or updated belongs. If omitted, the default \s-1DNS\s0 view is used.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a list of Infoblox::DNS::Member objects when the requested members are found. It returns an empty list if no member conforms to the request.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& #get RPZ enabled members
\& $session\->get_rpz_members(
\&        rpz_enabled = > "true");
.Ve
.RE
.RS 4
.RE
.SS "get_template_schema_versions( )"
.IX Subsection "get_template_schema_versions( )"
.RS 4
Use this method to retrieve the list of schema versions for the RESTful \s-1API\s0 templates.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
.Vb 1
\& schema_type \- Required. The REST API template type. The valid values are \*(AqREST_EVENT\*(Aq and \*(AqREST_ENDPOINT\*(Aq.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns an array of template schema versions in a string format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get template schema versions 
\& my $result = $session\->get_template_schema_versions();
.Ve
.RE
.RS 4
.RE
.SS "default_maximum_objects_returned( )"
.IX Subsection "default_maximum_objects_returned( )"
.RS 4
Use this method to set or retrieve the default for the maximum objects returned in \fBsearch()\fR and \fBget()\fR operations.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An unsigned integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set a new default
\& $session\->default_maximum_objects_returned(100);
.Ve
.RE
.RS 4
.RE
.SS "default_partial_subobjects( )"
.IX Subsection "default_partial_subobjects( )"
.RS 4
Use this method to set or retrieve the default for the partial subobjects feature in \fBsearch()\fR operations.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid parameters are 0 or 1, where 1 means that the partial subobjects functionality is enabled.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Enable partial_subobjects for searches
\& $session\->default_partial_subobjects(1);
.Ve
.RE
.RS 4
.RE
.SS "empty_recycle_bin( )"
.IX Subsection "empty_recycle_bin( )"
.RS 4
Remove the \s-1DNS/DHCP\s0 data from the recycle bin.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #empty recycle bin
\& my $response = $session\->empty_recycle_bin ();
.Ve
.RE
.RS 4
.RE
.SS "export_data( )"
.IX Subsection "export_data( )"
.RS 4
Use this method to download data from the Infoblox appliance to the local system.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
path \- Required. The absolute path of the destination file for the data you want to export.
.Sp
type \- Required. The data type to export. Following is a list of available data types for export:
.Sp
.Vb 10
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | admin_cert       \- Export a member certificate. Exported file is in "pem" format.                                 |
\& | member           \- Required. The member from which you want to export the certificate.                            |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | backup          \- Export Infoblox appliance database. Exported file is in "tar.gz" format.                        |
\& | backup_type     \- Optional. Valid values are LOCAL and SCP. Default is LOCAL.                                     |
\& | backup_server   \- Optional. The IPv4 address of the backup server.                                                |
\& | user            \- Optional. The user name of the backup server.                                                   |
\& | password        \- Optional. The user password of the backup server.                                               |
\& | nios_data       \- Optional. Export NIOS data. Valid value is "true" or "false".                                   |
\& |                   If nios_data, splunk_app_data and discovery_data are not defined, nios_data is \*(Aqtrue\*(Aq.          |
\& | discovery_data  \- Optional. Export Network Automation data. Valid value is "true" or "false".                     |
\& |                   If nios_data, splunk_app_data and discovery_data are not defined, discovery_data is \*(Aqfalse\*(Aq.    |
\& | splunk_app_data \- Optional. Export Splunk application data. Valid value is "true" or "false".                     |
\& |                   If nios_data, splunk_app_data and discovery_data are not defined, splunk_app_data is \*(Aqfalse\*(Aq.   |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | captive_portal_cert   \- Exports the server certificate of the captive portal.                                     |
\& | dn                    \- Required. The distinguished name (dn) of the certificate subject.                         |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | csv               \- Export data in a CSV file                                                                     |
\& |                                                                                                                   |
\& | object_type       \- Required. The object type of the object to be exported                                        |
\& | separator         \- Optional. CSV separator character. Valid values are \*(Aqcomma\*(Aq, \*(Aqsemicolon\*(Aq, \*(Aqspace\*(Aq and \*(Aqtab\*(Aq.  |
\& |                               The default is \*(Aqcomma\*(Aq.                                                             |
\& |                                                                                                                   |
\& | <various>         \- Optional. A list of search parameters that identify the object(s) you want to                 |
\& |                               export. See the individual API object pages for the parameters, which are           |
\& |                               the same as the parameters that are passed to $session\->search(). This document     |
\& |                               provides information about the supported objects.                                   |
\& |                                                                                                                   |
\& |                               If the objects you want to export have a search parameter named type, path,         |
\& |                               object_type or separator, pass the search parameter with a prepended                |
\& |                               underscore, such as \*(Aq_type\*(Aq, \*(Aq_separator\*(Aq, etc.                                     |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | csv_snapshot_file \- Export the CSV import snapshot file.                                                          |
\& |                                                                                                                   |
\& | import_id         \- Optional. The ID of the import task for which the snapshot file was exported.                 |
\& |                               If not specified, the current export task will be used.                             |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | csv_uploaded_file \- Export the original CSV import file.                                                          |
\& |                                                                                                                   |
\& | import_id         \- Optional. The ID of the import task for which the original CSV file was exported.             |
\& |                               If not specified, the current export task will be used.                             |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | csv_error_log  \- Export the CSV import error log file.                                                            |
\& | import_id      \- Optional. The ID of the import task for the log file you want to export. If not specified,       |
\& |                  the current export task ID is used.                                                              |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | dnsCache       \- Export the DNS dnsCache.db file of a member. Exported file is in "tar.gz" format. The            |
\& |                  following parameter is also available:                                                           |
\& | member         \- Required. The member from which you want to download the dns cache file.                         |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | dnsAccelerationCache \- Export the DNS acceleration cache of a member. Exported file is in "tar.gz" format. The    |
\& |                        following parameter is also available:                                                     |
\& | member               \- Required. The member from which you want to download the DNS acceleration cache file.      |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | dnsStats       \- Export the DNS statistics file of a member. Exported file is in "tar.gz" format. The             |
\& |                  following parameter is also available:                                                           |
\& | member         \- Required. The member from which you want to download the DNS statistics file.                    |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | dhcpd_conf     \- Export the DHCP configuration file of a member. Exported file is in "tar.gz" format. The         |
\& |                  following parameter is also available:                                                           |
\& | member         \- Required. The member from which you want to download the DHCP configuration file.                |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | dhcpdv6_conf   \- Export the DHCPv6 configuration file of a member. Exported file is in "tar.gz" format. The       |
\& |                  following parameter is also available:                                                           |
\& | member         \- Required. The member from which you want to download the DHCPv6 configuration file.              |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | dhcp_expert_mode_config \- Export the DHCP configuration file of a member in expert mode. Exported file is in      |
\& |                           "dhcpd.conf" format. The following parameter is also available:                         |
\& | member                  \- Required. The member from which you want to download the DHCP configuration export mode |
\& |                           file.                                                                                   |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | dns_conf     \- Export the DNS configuration file of a member. Exported file is in "tar.gz" format. The            |
\& |                  following parameter is also available:                                                           |
\& | member       \- Required. The member from which you want to download the DNS configuration file.                  |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | ds_records     \- Export the keyset associated with a given zone. This is useful for sending to the parent zone    |
\& |                  for signing.                                                                                     |
\& | zone           \- Required. The zone that contain the keys to be exported.                                         |
\& |                  Specify either the FQDN of the zone or the Infoblox::DNS::Zone object.                           |
\& | view           \- Optional. The DNS view that contains the zone. Specify either the DNS view name                  |
\& |                  or Infoblox::DNS::View object. The default is the "default" view.                                |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | eap_ca_cert    \- Export an Extensible Authentication Protocol Certificate Authority (EAP CA) certificate from the |
\& |                  Infoblox appliance. Exported file is in "pem" format. The following parameter is also            |
\& |                  available:                                                                                       |
\& | dn             \- Required. The distinguished name (dn) of your certificate\*(Aqs subject.                             |
\& |                            Examples of dn: CN="Testing",OU="Sales",O="Infoblox",L="Santa Clara",ST="CA",C="US"    |
\& |                                            O="My Company",ST="CA",C="US"                                          |
\& |                                            CN="Test Common Name"                                                  |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | generate_captive_portal_csr    \- Generate and export a certificate signing request (CSR) for a captive portal     |
\& |                    Exported file is in "pem" format.                                                              |
\& | cn               \- Required. Common name for the certificate.                                                     |
\& | member           \- Required. The member for which you want to generate the CSR.                                   |
\& | key_size         \- Optional.  Number of bits in the key. It must be 1024, 2048 or 4096. Default is 2048.          |
\& | algorithm        \- Optional.  Digest algorithm. It must be either SHA\-1 or SHA\-256. Default is SHA\-256.           |
\& | org_unit         \- Optional.  Organizational unit used to construct the distinguished name of the subject.        |
\& | org              \- Optional.  Organization used to construct the distinguished name of the subject.               |
\& | locality         \- Optional.  Location (e.g., city, town) used to construct the distinguished name of the subject.|
\& | state            \- Optional.  State or province used to construct the distinguished name of the subject.          |
\& | country          \- Optional.  2\-letter country code used to construct the distinguished name of the subject.      |
\& | email            \- Optional.  Contact email address used to construct the distinguished name of the subject.      |
\& | comment          \- Optional.  A descriptive comment about the certificate to be signed.                           |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | generate_csr     \- Generate and export a certificate signing request (CSR) for a grid member                      |
\& |                    Exported file is in "pem" format.                                                              |
\& | cn               \- Required. Common name for the certificate.                                                     |
\& | member           \- Required. The member for which you want to generate the CSR.                                   |
\& | key_size         \- Optional.  Number of bits in the key. It must be 1024, 2048 or 4096. Default is 2048.          |
\& | algorithm        \- Optional.  Digest algorithm. It must be either SHA\-1 or SHA\-256. Default is SHA\-256.           |
\& | org_unit         \- Optional.  Organizational unit used to construct the distinguished name of the subject.        |
\& | org              \- Optional.  Organization used to construct the distinguished name of the subject.               |
\& | locality         \- Optional.  Location (e.g., city, town) used to construct the distinguished name of the subject.|
\& | state            \- Optional.  State or province used to construct the distinguished name of the subject.          |
\& | country          \- Optional.  2\-letter country code used to construct the distinguished name of the subject.      |
\& | email            \- Optional.  Contact e\-mail address used to construct the distinguished name of the subject.     |
\& | comment          \- Optional.  A descriptive comment about the certificate to be signed.                           |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | generate_ifmap_dhcp_csr \- Generate and export a certificate signing request (CSR) for the IF\-MAP DHCP             |
\& |                    Exported file is in "pem" format.                                                              |
\& | cn               \- Required. Common name for the certificate.                                                     |
\& | member           \- Required. The member for which you want to generate the CSR.                                   |
\& | key_size         \- Optional.  Number of bits in the key. It must be 1024, 2048 or 4096. Default is 2048.          |
\& | algorithm        \- Optional.  Digest algorithm. It must be either SHA\-1 or SHA\-256. Default is SHA\-256.           |
\& | org_unit         \- Optional.  Organizational unit used to construct the distinguished name of the subject.        |
\& | org              \- Optional.  Organization used to construct the distinguished name of the subject.               |
\& | locality         \- Optional.  Location (e.g., city, town) used to construct the distinguished name of the subject.|
\& | state            \- Optional.  State or province used to construct the distinguished name of the subject.          |
\& | country          \- Optional.  2\-letter country code used to construct the distinguished name of the subject.      |
\& | email            \- Optional.  Contact email address used to construct the distinguished name of the subject.      |
\& | comment          \- Optional.  A descriptive comment about the certificate to be signed.                           |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | generate_self_signed_admin_cert \- Generate and export a self\-signed certificate for a grid member                 |
\& |                    Exported file is in "pem" format.                                                              |
\& | cn               \- Required. Common name for the certificate.                                                     |
\& | days_valid       \- Required. Validity period for the certificate.                                                 |
\& | member           \- Required. The member for which you want to generate the certificate.                           |
\& | key_size         \- Optional.  Number of bits in the key. It must be 1024, 2048 or 4096. Default is 2048.          |
\& | algorithm        \- Optional.  Digest algorithm. It must be either SHA\-1 or SHA\-256. Default is SHA\-256.           |
\& | org_unit         \- Optional.  Organizational unit used to construct the distinguished name of the subject.        |
\& | org              \- Optional.  Organization used to construct the distinguished name of the subject.               |
\& | locality         \- Optional.  Location (e.g., city, town) used to construct the distinguished name of the subject.|
\& | state            \- Optional.  State or province used to construct the distinguished name of the subject.          |
\& | country          \- Optional.  2\-letter country code used to construct the distinguished name of the subject.      |
\& | email            \- Optional.  Contact email address used to construct the distinguished name of the subject.      |
\& | comment          \- Optional.  A descriptive comment about the certificate to be signed.                           |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | generate_self_signed_captive_portal_cert \- Generate and export a self\-signed certificate for a captive portal     |
\& |                    Exported file is in "pem" format.                                                              |
\& | cn               \- Required. Common name for the certificate.                                                     |
\& | days_valid       \- Required. Validity period for the certificate.                                                 |
\& | member           \- Required. The member for which you want to generate the certificate.                           |
\& | key_size         \- Optional.  Number of bits in the key. It must be 1024, 2048 or 4096. Default is 2048.          |
\& | algorithm        \- Optional.  Digest algorithm. It must be either SHA\-1 or SHA\-256. Default is SHA\-256.           |
\& | org_unit         \- Optional.  Organizational unit used to construct the distinguished name of the subject.        |
\& | org              \- Optional.  Organization used to construct the distinguished name of the subject.               |
\& | locality         \- Optional.  Location (e.g., city, town) used to construct the distinguished name of the subject.|
\& | state            \- Optional.  State or province used to construct the distinguished name of the subject.          |
\& | country          \- Optional.  2\-letter country code used to construct the distinguished name of the subject.      |
\& | email            \- Optional.  Contact email address used to construct the distinguished name of the subject.      |
\& | comment          \- Optional.  A descriptive comment about the certificate to be signed.                           |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | generate_self_signed_ifmap_dhcp_cert \- Generate and export a self\-signed certificate for the IF\-MAP DHCP          |
\& |                    Exported file is in "pem" format.                                                              |
\& | cn               \- Required. Common name for the certificate.                                                     |
\& | days_valid       \- Required. Validity period for the certificate.                                                 |
\& | member           \- Required. The member for which you want to generate the certificate.                           |
\& | key_size         \- Optional.  Number of bits in the key. It must be 1024, 2048 or 4096. Default is 2048.          |
\& | algorithm        \- Optional.  Digest algorithm. It must be either SHA\-1 or SHA\-256. Default is SHA\-256.           |
\& | org_unit         \- Optional.  Organizational unit used to construct the distinguished name of the subject.        |
\& | org              \- Optional.  Organization used to construct the distinguished name of the subject.               |
\& | locality         \- Optional.  Location (e.g., city, town) used to construct the distinguished name of the subject.|
\& | state            \- Optional.  State or province used to construct the distinguished name of the subject.          |
\& | country          \- Optional.  2\-letter country code used to construct the distinguished name of the subject.      |
\& | email            \- Optional.  Contact email address used to construct the distinguished name of the subject.      |
\& | comment          \- Optional.  A descriptive comment about the certificate to be signed.                           |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | ifmap_dhcp_cert  \- Export an IF\-MAP DHCP certificate. Exported file is in "pem" format.                           |
\& | member           \- Required. The member from which you want to export the certificate.                            |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | log_files        \- Export the specified log files from a member. Exported file is in "tar.gz" format (except
\&                      \*(AqOUTBOUND\*(Aq in case of which the exported file format is plane text. The following parameters   |
\&                      are also available:                                                                            |
\& | member           \- The member from which you are downloading the logs.                                            |
\& |                    You must specify a member, endpoint or a Microsoft(r) server.                                  |
\& | msserver         \- The Microsoft server from which you are downloading the logs. You must specify a member or     |
\& |                    a Microsoft server.                                                                            |
\& | endpoint         \- The REST API endpoint name.                                                                    |
\& | node_type        \- Optional. Node type. Valid values are "active" and "passive". The default is "active".         |
\& | log_type         \- Optional. Log type. Valid values are "audit", "msmgmt", "outbound" and "syslog". The default   |
\& |                    is "syslog".                                                                                   |
\& | include_rotated  \- Optional. Include rotated out log files. The default is false                                  |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | lease_history  \- Export the DHCP lease history. Exported file is in "gz" format.                                  |
\& | start_time     \- Optional. The start time of the exported lease history in the format yyyy\-mm\-ddThh:mm:ss,        |
\& |                  yyyy/mm/dd hh:mm:ss, or mm/dd/yyyy hh:mm:ss.                                                     |
\& | end_time       \- Optional. The end time of the exported lease history in the format yyyy\-mm\-ddThh:mm:ss,          |
\& |                  yyyy/mm/dd hh:mm:ss, or mm/dd/yyyy hh:mm:ss.                                                     |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | snmp_mibs      \- Export the Infoblox SNMP MIB files. Exported file is in "tar.gz" format.                         |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | support_bundle        \- Export the support bundle from a member. Exported file is in "tar.gz" format. The         |
\& |                         following parameters are also available:                                                  |
\& | member                \- Required. The member from which you are downloading the support bundle.                   |
\& | filter_optional_files \- Optional. Filter optional files. Default is "true".                                       |
\& | core_files            \- Optional. Include core files in support bundle. Default is "true".                        |
\& | log_files             \- Optional. Include log files in support bundle. Default is "true".                         |
\& | rotate_log_files      \- Optional. Include rotate_log files in support bundle. Default is "true".                  |
\& | cached_zone_data      \- Optional. Include cached zone data files in support bundle. Default is "false".           |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | serial_numbers \- Export the serial numbers of all nodes in the grid. Exported file is in plain text format.       |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | traffic_capture_file  \- Export the member\*(Aqs traffic capture file. The exported file is in "tar.gz" format         |
\& |                                                                                                                   |
\& | member           \- Required: The member from which you are downloading the traffic capture file.                  |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | trust_anchors  \- Export trust anchors, i.e. our public keys to allow creation of the island of security.          |
\& |                                                                                                                   |
\& | zone           \- Required. The zone that contains the keys to be exported.                                        |
\& |                  Specify either the FQDN of the zone or the Infoblox::DNS::Zone object.                           |
\& | view           \- Optional. The DNS view that contains the zone. Specify either the DNS view name or the           |
\& |                  Infoblox::DNS::View object. The default is the "default" view.                                   |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | restapi_template \- Export the REST API template in JSON format.                                                   |
\& |                                                                                                                   |
\& | template         \- Required. An Infoblox::Notification::REST::Template object.                                    |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | restapi_template_schema \- Export the REST API template schema in JSON format.                                     |
\& |                                                                                                                   |
\& | schema_type             \- Requred. Schema type to export: \*(AqREST_ENDPOINT\*(Aq or \*(AqREST_EVENT\*(Aq.                        |
\& | version                 \- Optional. Schema version to export. The default is the latest version.                  |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | dxl_endpoint_certs \- Export DXL endpoint client and CA certificates. Path argument is the destination for the     |
\& |                      DXL endpoint client certificate.                                                             |
\& |                                                                                                                   |
\& | ca_cert_path \- Required. The absolute path of the destination file for the CA certificate you want to export.     |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | safenet_client_cert   \- Export a SafeNet HSM client certificate. Exported file is in "pem" format.                |
\& | member                \- Required. The member from which you want to export the certificate.                       |
\& | algorithm             \- Required. Signature algorithm of a new SafeNet HSM client certificate.                    |
\& |                         The value can be \*(AqRSASHA1\*(Aq or \*(AqRSASHA256\*(Aq.                                                |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | namedacl(type)        \- Validate access control items of the Named ACL object. If access control items of         |
\& |                         Named ACL object are ok, the server doesn\*(Aqt return a result file, otherwise exported file |
\& |                         is in CSV format.                                                                         |
\& | namedacl              \- Required. The Named ACL object.                                                           |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.Sp
For \s-1CSV\s0 export, the following objects are supported:
.Sp
.Vb 10
\& Infoblox::DHCP::FailOver
\& Infoblox::DHCP::Filter::Fingerprint
\& Infoblox::DHCP::Filter::MAC
\& Infoblox::DHCP::Filter::NAC
\& Infoblox::DHCP::Filter::Option
\& Infoblox::DHCP::Filter::RelayAgent
\& Infoblox::DHCP::Fingerprint
\& Infoblox::DHCP::FixedAddr
\& Infoblox::DHCP::HostAddr
\& Infoblox::DHCP::IPv6DhcpRange
\& Infoblox::DHCP::IPv6FixedAddress
\& Infoblox::DHCP::IPv6HostAddr
\& Infoblox::DHCP::IPv6Network
\& Infoblox::DHCP::IPv6NetworkContainer
\& Infoblox::DHCP::IPv6NetworkContainer
\& Infoblox::DHCP::IPv6OptionDefinition
\& Infoblox::DHCP::IPv6OptionSpace
\& Infoblox::DHCP::IPv6SharedNetwork
\& Infoblox::DHCP::Lease
\& Infoblox::DHCP::MAC
\& Infoblox::DHCP::Network
\& Infoblox::DHCP::NetworkContainer
\& Infoblox::DHCP::NetworkContainer
\& Infoblox::DHCP::OptionDefinition
\& Infoblox::DHCP::OptionSpace
\& Infoblox::DHCP::Range
\& Infoblox::DHCP::SharedNetwork
\& Infoblox::DHCP::View
\& Infoblox::DNS::AllRPZRecords
\& Infoblox::DNS::AllRecords
\& Infoblox::DNS::BulkHost
\& Infoblox::DNS::Host
\& Infoblox::DNS::RPZRecord::A
\& Infoblox::DNS::RPZRecord::AAAA
\& Infoblox::DNS::RPZRecord::AAAAIpAddress
\& Infoblox::DNS::RPZRecord::AIpAddress
\& Infoblox::DNS::RPZRecord::CNAME
\& Infoblox::DNS::RPZRecord::CNAME::ClientIpAddress
\& Infoblox::DNS::RPZRecord::CNAME::ClientIpAddressDN
\& Infoblox::DNS::RPZRecord::CNAME::IpAddress
\& Infoblox::DNS::RPZRecord::CNAME::IpAddressDN
\& Infoblox::DNS::RPZRecord::MX
\& Infoblox::DNS::RPZRecord::NAPTR
\& Infoblox::DNS::RPZRecord::PTR
\& Infoblox::DNS::RPZRecord::SRV
\& Infoblox::DNS::RPZRecord::TXT
\& Infoblox::DNS::Record::A
\& Infoblox::DNS::Record::AAAA
\& Infoblox::DNS::Record::CNAME
\& Infoblox::DNS::Record::DNAME
\& Infoblox::DNS::Record::MX
\& Infoblox::DNS::Record::NAPTR
\& Infoblox::DNS::Record::NS
\& Infoblox::DNS::Record::PTR
\& Infoblox::DNS::Record::SRV
\& Infoblox::DNS::Record::TLSA
\& Infoblox::DNS::Record::TXT
\& Infoblox::DNS::Ruleset
\& Infoblox::DNS::View
\& Infoblox::DNS::Zone
\& Infoblox::DTC::Topology
\& Infoblox::DTC::Topology::Rule
\& Infoblox::Grid::Analytics::WhiteList
\& Infoblox::Grid::DHCP
\& Infoblox::Grid::DNS
\& Infoblox::Grid::DNS::DNS64Group
\& Infoblox::Grid::DNS::Nsgroup
\& Infoblox::Grid::Member
\& Infoblox::Grid::Member::DHCP
\& Infoblox::Grid::Member::DNS
\& Infoblox::Grid::NamedACL
\& Infoblox::Grid::ThreatProtection::Profile
\& Infoblox::Grid::ThreatProtection::Profile::Rule
\& Infoblox::Grid::UpgradeGroup
.Ve
.Sp
For more information about the \s-1CSV\s0 file format please refer to the Infoblox \s-1CSV\s0 Import Reference.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails. The exported data is stored in the path specified.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Export backup
\& $session\->export_data(
\&     type   => "backup",
\&     path   => "/tmp/infoblox/database.tar.gz" );
\&
\& #Secured backup
\& my $result = $session\->export_data(
\&     type   => "backup",
\&     backup_type => "SCP",
\&     path   => "/tmp/infoblox/database.tar.gz",
\&     backup_server => "192.168.0.5",
\&     user => "testuser",
\&     password => "test\-password",
\&     );
\&
\& #CSV export
\& $session\->export_data(
\&                       type        => "csv",
\&                       path        => "/tmp/infoblox/exported_data.csv",
\&                       object_type => "Infoblox::DNS::Record::A",
\&                       separator   => "comma",
\&
\&                       # search parameters
\&                       name        => ".*test_exportimport.com");
\&
\& #CSV error log export
\& $session\->export_data(
\&                       type      => "csv_error_log",
\&                       path      => "/tmp/infoblox/error_log.txt",
\&                       import_id => 12345);
\&
\& #Export dnsCache.db
\& my $result = $session\->export_data(
\&     type   => "dnsCache",
\&     path   => "/tmp/infoblox/dnsCache.tar.gz",
\&     member => "192.168.1.2" );
\&
\& #Export dnsStats
\& my $result = $session\->export_data(
\&     type   => "dnsStats",
\&     path   => "/tmp/infoblox/dnsStats.tar.gz",
\&     member => "192.168.1.2" );
\&
\& #Export dhcpd_conf
\& my $result = $session\->export_data(
\&     type   => "dhcpd_conf",
\&     path   => "/tmp/infoblox/dhcpd_conf.tar.gz",
\&     member => "192.168.1.2" );
\&
\& #Export dhcpdv6_conf
\& my $result = $session\->export_data(
\&     type   => "dhcpdv6_conf",
\&     path   => "/tmp/infoblox/dhcpdv6_conf.tar.gz",
\&     member => "192.168.1.2" );
\&
\& #Export dhcp_expert_mode_config
\& my $result = $session\->export_data(
\&     type   => "dhcp_expert_mode_config",
\&     path   => "/tmp/infoblox/dhcpd_expert.conf",
\&     member => "192.168.1.2" );
\&
\& #Export dns_conf
\& my $result = $session\->export_data(
\&     type   => "dns_conf",
\&     path   => "/tmp/infoblox/dns_conf.tar.gz",
\&     member => "192.168.1.2" );
\&
\& #Export DS records
\& my $result = $session\->export_data(
\&     type   => "ds_records",
\&     zone   => "mydnsseczone.com",
\&     view   => "dnssec_view",
\&     path   => "/tmp/infoblox/ds_records.txt" );
\&
\& #Export captive_portal_cert
\& my $result = $session\->export_data(
\&     type => "captive_portal_cert",
\&     path => "/tmp/infoblox/captive_portal_cert.pem",
\&     dn   => \*(AqCN="My CA Certificate",C="US"\*(Aq );
\&
\& #Export eap_ca_cert
\& my $result = $session\->export_data(
\&     type => "eap_ca_cert",
\&     path => "/tmp/infoblox/eap_ca_cert.pem",
\&     dn   => \*(AqCN="My CA Certificate",C="US"\*(Aq );
\&
\& #Generate and export a CSR For captive portal
\& my $result = $session\->export_data(
\&     type     => "generate_captive_portal_csr",
\&     path     => "/tmp/infoblox/csr.pem",
\&     cn       => "My Signing Request",
\&     key_size =>  2048,
\&     org_unit => "My Dept.",
\&     org      => "My Company, Inc.",
\&     locality => "Santa Clara",
\&     state    => "California",
\&     member   => "192.168.1.2",
\&     country  => "US",
\&     email    => "me\e@mycompany.com",
\&     comment  => "This is my certificate." );
\&
\& #Generate and export a CSR For IF\-MAP DHCP
\& my $result = $session\->export_data(
\&     type     => "generate_ifmap_dhcp_csr",
\&     path     => "/tmp/infoblox/dhcp_csr.pem",
\&     cn       => "My Signing Request",
\&     key_size =>  2048,
\&     org_unit => "My Dept.",
\&     org      => "My Company, Inc.",
\&     locality => "Santa Clara",
\&     state    => "California",
\&     member   => "192.168.1.2",
\&     country  => "US",
\&     email    => "me\e@mycompany.com",
\&     comment  => "This is my certificate." );
\&
\& #Generate and export a self\-signed admin certificate
\& my $result = $session\->export_data(
\&     type       => "generate_self_signed_admin_cert",
\&     path       => "/tmp/infoblox/selfsigned.pem",
\&     cn         => "Self\-Signed Admin Cert",
\&     member     => "192.168.1.2",
\&     days_valid => 365,
\&     key_size   => 2048,
\&     org_unit   => "My Dept.",
\&     org        => "My Company, Inc.",
\&     locality   => "Santa Clara",
\&     state      => "California",
\&     country    => "US",
\&     email      => "me\e@mycompany.com",
\&     comment    => "This certificate is self\-signed." );
\&
\& #Generate and export a self\-signed captive portal certificate
\& my $result = $session\->export_data(
\&     type       => "generate_self_signed_captive_portal_cert",
\&     path       => "/tmp/infoblox/selfsigned.pem",
\&     cn         => "Self\-Signed Captive Portal Cert",
\&     member     => "192.168.1.2",
\&     days_valid => 365,
\&     key_size   => 2048,
\&     org_unit   => "My Dept.",
\&     org        => "My Company, Inc.",
\&     locality   => "Santa Clara",
\&     state      => "California",
\&     country    => "US",
\&     email      => "me\e@mycompany.com",
\&     comment    => "This certificate is self\-signed." );
\&
\& #Generate and export a self\-signed IF\-MAP DHCP certificate
\& my $result = $session\->export_data(
\&     type       => "generate_self_signed_ifmap_dhcp_cert",
\&     path       => "/tmp/infoblox/selfsigned.pem",
\&     cn         => "Self\-Signed IF\-MAP DHCP Cert",
\&     member     => "192.168.1.2",
\&     days_valid => 365,
\&     key_size   => 2048,
\&     org_unit   => "My Dept.",
\&     org        => "My Company, Inc.",
\&     locality   => "Santa Clara",
\&     state      => "California",
\&     country    => "US",
\&     email      => "me\e@mycompany.com",
\&     comment    => "This certificate is self\-signed." );
\&
\& #Generate and export a CSR
\& my $result = $session\->export_data(
\&     type     => "generate_csr",
\&     path     => "/tmp/infoblox/csr.pem",
\&     cn       => "My Signing Request",
\&     key_size =>  2048,
\&     org_unit => "My Dept.",
\&     org      => "My Company, Inc.",
\&     locality => "Santa Clara",
\&     state    => "California",
\&     member   => "192.168.1.2",
\&     country  => "US",
\&     email    => "me\e@mycompany.com",
\&     comment  => "This is my certificate." );
\&
\& #Export an IF\-MAP DHCP certificate
\& my $result = $session\->export_data(
\&     type   => "ifmap_dhcp_cert",
\&     member => "192.168.1.2",
\&     path   => "/tmp/infoblox/ifmap_cert.pem");
\&
\& #Export lease_history
\& $session\->export_data(
\&     type   => "lease_history",
\&     path   => "/tmp/infoblox/lease_history.gz",
\&     start_time  => "2005/09/01 00:00:00",
\&     end_time    => "2005/09/01 11:59:59" );
\&
\& #Export the audit log
\& $session\->export_data(
\&     type   => "log_files",
\&     path   => "/tmp/infoblox/auditlog.tar.gz",
\&     member => "192.168.1.2",
\&     node_type => "active",
\&     log_type => "audit");
\&
\& #Export snmp_mibs
\& $session\->export_data(
\&     type   => "snmp_mibs",
\&     path   => "/tmp/infoblox/snmp_mibs.tar.gz" );
\&
\& #Export support_bundle
\& my $result = $session\->export_data(
\&     type   => "support_bundle",
\&     path   => "/tmp/infoblox/supportBundle.tar.gz",
\&     member => "192.168.1.2" );
\&
\& #Export support_bundle but exclude core files
\& my $result = $session\->export_data(
\&     type   => "support_bundle",
\&     path   => "/tmp/infoblox/supportBundle.tar.gz",
\&     core_files => \*(Aqfalse\*(Aq,
\&     member => "192.168.1.2" );
\&
\& #Export support_bundle but exclude log files
\& my $result = $session\->export_data(
\&     type   => "support_bundle",
\&     path   => "/tmp/infoblox/supportBundle.tar.gz",
\&     log_files => \*(Aqfalse\*(Aq,
\&     member => "192.168.1.2" );
\&
\& #Export serial number of all nodes
\& my $result = $session\->export_data(
\&     type   => "serial_numbers",
\&     path   => "/tmp/infoblox/serial_nos.txt" );
\&
\& #Export trust anchors
\& my $result= $session\->export_data(
\&     type   => "trust_anchors",
\&     zone   => "mysignedzone.com",
\&     view   => "my_dnssec_view",
\&     path   => "/tmp/infoblox/trusted_keys.txt" );
.Ve
.RE
.RS 4
.RE
.SS "fill_partial_object( )"
.IX Subsection "fill_partial_object( )"
.RS 4
Takes an object returned by a search method call with return_methods and
fills it.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
object \- Required. An object or a reference to an array of objects
returned by a search method call using return_methods call, or from an
AllRecords 'record' member. It is legal, but meaningless, to call this
method for complete objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method will return a complete object corresponding to the
\&'partial' object passed as a parameter. The object returned may be the
same object (modified to have all methods initialized) or a new object.
In the case of an error, undef will be returned and the appropriate
status code will be set.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # $partial_bind_object is an object returned by a search using return_methods
\& my $full_bind_object = $session\->fill_partial_object($partial_bind_object);
\&
\& # @partial_objects is an array of objects returned by a search using return_methods
\& my @full_objects = $session\->fill_partial_object(\e@partial_objects);
.Ve
.RE
.RS 4
.RE
.SS "gen_tsig_key( )"
.IX Subsection "gen_tsig_key( )"
.RS 4
Generates a \s-1TSIG\s0 key.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The following parameters are supported:
.Sp
.Vb 2
\& algorithm => "HMAC\-MD5" | "HMAC\-SHA256" # Optional. If not specified, the algorithm is "HMAC\-MD5".
\& keylen => 128 | 256 | 512 # Optional. If not specified, the key length is 128.
.Ve
.Sp
Note that the algorithm \*(L"\s-1HMAC\-SHA256\*(R"\s0 does not support a key length of 512.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a randomly generated \s-1TSIG\s0 key.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $tsig = $session\->gen_tsig_key(keylen => 256, algorithm => \*(AqHMAC\-SHA256\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "gen_hsm_client_cert( )"
.IX Subsection "gen_hsm_client_cert( )"
.RS 4
Generate a new SafeNet \s-1HSM\s0 client certificate.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
member  \- Required. The member for which you want to generate a new SafeNet \s-1HSM\s0 client certificate.
.Sp
algorithm \- Required. Signature algorithm of a new SafeNet \s-1HSM\s0 client certificate. The value can be '\s-1RSASHA1\s0' or '\s-1RSASHA256\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when a new SafeNet \s-1HSM\s0 client certificate is generated successfully, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $result = $session\->gen_hsm_client_cert(\*(Aqmember\*(Aq => \*(Aq192.168.1.2\*(Aq, \*(Aqalgorithm\*(Aq => \*(AqRSASHA1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "get( )"
.IX Subsection "get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
object \- Required. The Infoblox object to retrieve.
.Sp
key reference \- Required. The attribute and value that refer to the desired object(s) to retrieve. See individual objects for available key references.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Return an array in list context containing all matching objects. For failures and objects not found, it returns an empty array in list context and undefined in scalar context. When an operation fails, the error code and error message are reported in the \fBstatus_code()\fR and \fBstatus_detail()\fR attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting an A record from the Infoblox appliance.
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::A",
\&     name   => "bind_a.domain.com"  );
\&
\& unless (@retrieved_objs) {
\&     die("Get DNS record A failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
.Ve
.RE
.RS 4
.RE
.SS "get_ksk_rollover( )"
.IX Subsection "get_ksk_rollover( )"
.RS 4
Use this method to retrieve the \s-1KSK\s0 rollover information.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
days  \- Optional. The number of days since the warning was sent and before the rollover period expires. The default is 7 days.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a reference to an array that contains references to hashes representing the zones' \s-1KSK\s0 information. These hashes contain the following key/value pairs:
.Sp
.Vb 3
\& name => The zone name
\& view => The name of the view to which the zone belongs.
\& days => The number of days that are left before the rollover period expires. If the rollover period has expired, this will be a negative number.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Retrieve the KSK information:
\& my $resultref = $session\->get_ksk_rollover();
\&
\& #Assuming that there is at least one zone requiring rollover:
\& $zone = @$resultref[0]
\&
\& #Now $zone contains the above parameters. To print the zone name:
\& print $zone\->{\*(Aqname\*(Aq};
.Ve
.RE
.RS 4
.RE
.SS "get_rpz_threat_details( )"
.IX Subsection "get_rpz_threat_details( )"
.RS 4
Use this method to make a RESTful \s-1API\s0 call to the ThreatStop RESTful \s-1API\s0 to receive threat details.
.Sp
Include the specified parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string containing rpz_rule_name. This is a required parameter.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns an Infoblox::Grid::RPZ::ThreatDetails structure when the fetch succeeds.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Retrieve rpz_threat_details:
\& my $rpz_threat_details = $session\->get_rpz_threat_details(rpz_rule_name => "b.com.a.com");
.Ve
.RE
.RS 4
.RE
.SS "get_ms_ad_dc_ns_record_creation_list( )"
.IX Subsection "get_ms_ad_dc_ns_record_creation_list( )"
.RS 4
Use this method to get the list of Domain Controllers allowed for creation of \s-1NS\s0 Record.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 3
\& zone       \- Required if query_type is \*(AqZONE\*(Aq or no \*(Aqms_server\*(Aq is given. The Infoblox::DNS::Zone object.
\& ms_server  \- Required if query_type is \*(AqSERVERS_IN_DOMAIN\*(Aq or no \*(Aqzone\*(Aq is given. The Infoblox::Grid::MSServer object.
\& query_type \- Optional. Default value is \*(AqZONE\*(Aq if zone argument is given, \*(AqSERVERS_IN_DOMAIN\*(Aq if ms_server argument is given.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an array of Infoblox::Grid::MSServer::DCNSRecordCreation objects or empty list.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $dcnsrecordcr = $session\->get_ms_ad_dc_ns_record_creation_list(zone => $dns_zone);
.Ve
.RE
.RS 4
.RE
.SS "get_grid_revert_status( )"
.IX Subsection "get_grid_revert_status( )"
.RS 4
Retrieves the revert status of an Infoblox Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a reference to a hash containing the following members.
.Sp
.Vb 2
\& revert_allowed => "true" | "false". Indicates whether revert is allowed for the Grid.
\& revert_version => $string. The version to which the Grid reverts.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $revertref = $session\->get_grid_revert_status();
.Ve
.RE
.RS 4
.RE
.SS "grid_upgrade( )"
.IX Subsection "grid_upgrade( )"
.RS 4
This method will perform the specified function on the Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The following required parameter is supported:
.Sp
.Vb 1
\& action => one of the following: "UPGRADE_PAUSE", "UPGRADE_RESUME", "DISTRIBUTION_PAUSE", "DISTRIBUTION_RESUME", "DISTRIBUTION_START", "DISTRIBUTION_STOP", "DOWNGRADE", "REVERT", "UPGRADE", "UPGRADE_TEST_START", "UPGRADE_TEST_STOP", or "UPLOAD".
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #grid upgrade
\& my $response = $session\->grid_upgrade(action => "UPGRADE_PAUSE");
.Ve
.RE
.RS 4
.RE
.SS "import_data( )"
.IX Subsection "import_data( )"
.RS 4
Use this method to upload data to the Infoblox appliance from the local system.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
path \- Required. The complete path of the file to import.
.Sp
type \- Required. The data type to import. Following is a list of available data types for import:
.Sp
.Vb 10
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | threat_analytics_file_upload \- Import Apache Spark or Threat Analytics Whitelist update.                          | 
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | restapi_template \- Import the REST API template from file in JSON format.                                         |
\& | overwrite        \- Optional. If \*(Aqtrue\*(Aq overwrites the existing template based on the template name, vendor        |
\& |                    identifier, event type, and action type. The default is \*(Aqfalse\*(Aq.                               |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | admin_cert       \- Import a certificate signed by a CA for a certificate signing request previously given by a    |
\& |                    member. The input file should be in "pem" format.                                              |
\& | member           \- Required. The member to which you want to upload the certificate.                              |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | backup          \- Restore an existing database backup. Supported file type is "tar.gz". The following parameters  |
\& |                   are also available:                                                                             |
\& | force           \- Optional. Force restore a database that was backed up from                                      |
\& |                   a different grid. Default is "false".                                                           |
\& | keep_grid_ip    \- Optional. Used with the force restore option to retain the current grid IP address and ignore   |
\& |                   the IP address from the backup. Default is "true".                                              |
\& | nios_data       \- Optional. Restore NIOS data. Valid value is "true" or "false".                                  |
\& |                   If nios_data, discovery_data and splunk_app_data are not defined, nios_data is \*(Aqtrue\*(Aq.          |
\& | discovery_data  \- Optional. Restore Network Automation data. Valid value is "true" or "false".                    |
\& |                   If nios_data, splunk_app_data and discovery_data are not defined, discovery_data is \*(Aqfalse\*(Aq.    |
\& | splunk_app_data \- Optional. Restore Splunk application data. Vali value is "true" or "false".                     |
\& |                   If nios_data, splunk_app_data and discovery_data are not defined, splunk_app_data is \*(Aqfalse\*(Aq.   |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | dsb            \- Import device support bundle. Supported file type is "tar.gz".                                   |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | captive_portal_cert   \- Import a server certificate for the captive portal.                                       |
\& |                         Supported file type is "pem".                                                             |
\& | member                \- Required. The captive portal to which you want to upload the certificate.                 |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | captive_portal_file   \- Import a file to be used by the captive portal.                                           |
\& |                         Supported file types are .jpg, .gif and .png (when cp_type is one of \*(Aqlogo\*(Aq, \*(Aqfooter\*(Aq or  |
\& |                         \*(Aqheader\*(Aq) or .txt (when cp_type is set to \*(Aqaup\*(Aq)                                          |
\& | member                \- Required. The captive portal to which you want to upload the file.                        |
\& | cp_type               \- Required. Indicates how the file is used in the captive portal. Valid values are:         |
\& |                                   \*(Aqlogo\*(Aq, \*(Aqfooter\*(Aq, \*(Aqheader\*(Aq, \*(Aqaup\*(Aq.                                              |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | clone          \- For cloned data from the backup of another system. Supported file type is "tar.gz".              |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | csv               \- Import DNS and DHCP data via CSV files. See export_data/csv for the supported object types.   |
\& |                     For more information about the CSV file format, refer to the Infoblox CSV Import Reference.   |
\& |                     Use Infoblox::Grid::CSVImportStatus to check import task status.                              |
\& |                                                                                                                   |
\& | csv_action        \- Optional. Valid values are "start" and "test". The default value is "start".                  |
\& |                               You cannot set csv_action to "test" if operation is not "replace".                  |
\& | operation         \- Optional. Valid values are "insert", "update", "replace", "custom" and "delete".              |
\& |                               The default value is "insert".                                                      |
\& | override          \- Optional. Valid values are "override" and "merge". The default value is "override".           |
\& | separator         \- Optional. CSV separator character. Valid values are \*(Aqcomma\*(Aq, \*(Aqsemicolon\*(Aq, \*(Aqspace\*(Aq or \*(Aqtab\*(Aq.   |
\& |                               The default value is \*(Aqcomma\*(Aq.                                                       |
\& | continue_on_error \- Optional. Continue import in case of errors. Valid values are "true" or "false".              |
\& |                               The default is "false". If the value is "true", the import continues even if there  |
\& |                               are errors. Note that file format errors are reported immediately.                  |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | dhcp_expert_mode_config \- Import a custom DHCP configuration file from the local system to the Infoblox           |
\& |                           appliance. Supported file type is "dhcpd.conf". The following parameter is also         |
\& |                           available:                                                                              |
\& | member                  \- Required. The member to which you want to upload the DHCP configuration expert mode     |
\& |                           file.                                                                                   |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | downgrade      \- NIOS image file that will be used to downgrade the Grid.                                         |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | ds_records     \- Import DS records from a file. The file format is either a DSset (DS records) or a keyset        |
\& |                  (DNSKEY records).                                                                                |
\& | zone           \- Required.  The zone that will contain the records.                                               |
\& |                  Specify either the FQDN of the zone ore the Infoblox::DNS::Zone object.                          |
\& | view           \- Optional. The DNS view that contains the zone. Specify either the DNS view name or the           |
\& |                  Infoblox::DNS::View object. The default is the "default" view.                                   |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | eap_ca_cert    \- Import an Extensible Authentication Protocol Certificate Authority (EAP CA) certificate.         |
\& |                  Supported file type is "pem".                                                                    |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | ifmap_dhcp_cert  \- Import a certificate signed by a CA for a certificate signing request previously given by a    |
\& |                    member for the IF\-MAP DHCP service. The input file must be in "pem" format.                    |
\& | member           \- Required. The member to which you want to upload the certificate.                              |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | join_multi_grid    \- Joins the Master Grid.                                                                       |
\& | token              \- Required. The token string corresponding to the file to be imported.                         |
\& | address            \- Required. The Multi\-Grid Master\*(Aqs address or FQDN.                                           |
\& | port               \- Optional. The Multi\-Grid Master\*(Aqs port. If it is not specified, 1194 is used.                |
\& | grid_name          \- Optional. The SubGrid name. The default value is \*(AqInfoblox\*(Aq.                                 |
\& | use_mgmt_port      \- Optional. Use the MGMT port to connect to the grid.                                          |
\& |                      The valid values are \*(Aqtrue\*(Aq and \*(Aqfalse\*(Aq. The default value is \*(Aqfalse\*(Aq.                       |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | leases           \- Import DHCP leases from the local system to the Infoblox appliance. Supported file type is     |
\& |                    "dhcpd.leases". The following parameters are also available:                                   |
\& | format           \- Optional. The format of the data file. Only "ISC" is supported. Default is "ISC".              |
\& | lease_precedence \- Indicates whether existing leases are overwritten. Valid values are "keep\-previous",           |
\& |                    "replace\-previous", and "keep\-newest". Default is "keep\-newest".                               |
\& | network_view     \- Optional. The name of the network view from which the lease data is imported.                  |
\& |                    The default value is the system\-defined default network view.                                  |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | leases6          \- Import IPv6 DHCP leases from the local system to the Infoblox appliance. Supported file type is|
\& |                    "dhcpd.leases". The following parameters are also available:                                   |
\& | format           \- Optional. The format of the data file. Only "ISC" is supported. Default is "ISC".              |
\& | lease_precedence \- Indicates whether existing leases are overwritten. Valid values are "keep\-previous",           |
\& |                    "replace\-previous", and "keep\-newest". Default is "keep\-newest".                               |
\& | network_view     \- Optional. The name of the network view from which the lease data is imported.                  |
\& |                    The default value is the system\-defined default network view.                                  |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | lease_history  \- Import the DHCP lease history. Supported file type is "gz".                                      |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | tftp_file      \- Import file from the local system to a TFTP directory on the Infoblox appliance. All file types  |
\& |                  are supported. The following parameter is also available:                                        |
\& | directory      \- Required. The TFTP directory in which the file is stored.                                        |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | discovery_csv  \- Import the file from the local system to the Infoblox appliance. Supported file type is a CSV    |
\& |                  file using comma as field sepearator. The following parameter is also available:                 |
\& | network_view   \- Optional. The name of the network view from which the CSV data is imported.                      |
\& |                  The default value is the system\-defined default network view.                                    |
\& | merge_data     \- The flag indicates whether the GM sorter replaces or merges the discovered data with existing    |
\& |                  data. The valid values are "true" and "false". The default value is "true".                      |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | upgrade        \- NIOS image file that will be used to upgrade the Grid.                                           |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | uploadkeytab   \- Upload keytab file to the server not assigning the keys. The function has no parameters. Note    |
\& |                  that method with such type returns L<Infoblox::Grid::KerberosKey|Infoblox::Grid::KerberosKey>    |
\& |                  objects list if the upload succeeds, and returns false when the operation fails.                 |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | trusted_ca_cert  \- Import a generic Certificate Authority (CA) certificate.  Supported file type is "pem".        |
\& |                    Allows multiple certificates per single file.                                                  |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | threat_protection_rule_update \- Import Threat Protection rules to the Infoblox appliance. Supported file type is  |
\& |                                 "bin2" provided by Infoblox Inc.                                                  |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | dxl_endpoint_brokers \- Import DXL endpoint brokers as configuration file and retrieve the list of                 |
\& |                        Infoblox::DXL::Endpoint::Broker objects.                                                   |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #import backup
\& $session\->import_data(
\&     type  => "backup",
\&     force => "false",
\&     path  => "/tmp/infoblox/database.tar.gz" );
\&
\& #csv import
\& $session\->import_data(
\&     type  => "csv",
\&     continue_on_error => \*(Aqtrue\*(Aq,
\&     operation => \*(Aqupdate\*(Aq,
\&     override => \*(Aqoverride\*(Aq,
\&     path  => "/tmp/infoblox/import_data.csv" );
\&
\& #import clone
\& $session\->import_data(
\&     type => "clone",
\&     path => "/tmp/infoblox/clone_database.tar.gz" );
\&
\& #import dhcp_expert_mode_config
\& $session\->import_data(
\&     type   => "dhcp_expert_mode_config",
\&     member => "192.168.1.2",
\&     path   => "/tmp/infoblox/dhcpd.conf" );
\&
\& #import captive_portal_cert
\& $session\->import_data(
\&     type => "captive_portal_cert",
\&     path => "/tmp/infoblox/eap_ca_cert.pem",
\&     member => "192.168.1.2" );
\&
\& #import captive_portal_file
\& $session\->import_data(
\&     type => "captive_portal_file",
\&     path => "/tmp/infoblox/logo_file.jpg",
\&     member => "192.168.1.2",
\&     cp_type => "logo" );
\&
\& #import eap_ca_cert
\& $session\->import_data(
\&     type => "eap_ca_cert",
\&     path => "/tmp/infoblox/eap_ca_cert.pem" );
\&
\& #import the  IF\-MAP DHCP certificate
\& $session\->import_data(
\&     type => "ifmap_dhcp_cert",
\&     path => "/tmp/infoblox/ifmap_dhcp_cert.pem" );
\&
\& #upload keytab
\& my $kerberos_keys = $session\->import_data(
\&     type => "uploadkeytab",
\&     path => "/tmp/infoblox/keytab.key");
\&
\& #import leases
\& $session\->import_data(
\&     type             => "leases",
\&     format           => "ISC",
\&     path             => "/tmp/infoblox/dhcpd.leases",
\&     lease_precedence => "keep\-newest" );
\&
\& #import leases from a non\-default network view
\& $session\->import_data(
\&     type             => "leases",
\&     format           => "ISC",
\&     path             => "/tmp/infoblox/dhcpd.leases",
\&     lease_precedence => "keep\-newest",
\&     network_view     => "netview" );
\&
\& #import lease_history
\&  $session\->import_data(
\&     type => "lease_history",
\&     path => "/tmp/infoblox/lease_history.gz" );
\&
\& #import tftp_file
\& $session\->import_data(
\&     type      => "tftp_file",
\&     directory => "/",
\&     path      => "/tmp/infoblox/voip_settings.txt" );
\&
\& #import discovery CSV file in a given network view
\& $session\->import_data(
\&     type             => "discovery_csv",
\&     network_view     => "netview" );
\&
\& #import DS records
\& $session\->import_data(
\&     type             => "ds_records",
\&     path             => "/tmp/infoblox/ds_records.txt",
\&     zone             => "myzone.test.com",
\&     view             => "dns_view", );
.Ve
.RE
.RS 4
.RE
.SS "join_grid( )"
.IX Subsection "join_grid( )"
.RS 4
Join an Infoblox appliance to an existing grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
grid_name     \- Required. The name of the grid.
.Sp
master        \- Required. The virtual \s-1IP\s0 address of the grid master.
.Sp
shared_secret \- Required. The shared secret string of the grid.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my $result = $session\->join_grid(
\&     grid_name     => "infoblox",
\&     master        => "192.168.1.2",
\&     shared_secret => "test" );
.Ve
.RE
.RS 4
.RE
.SS "leave_multi_grid( )"
.IX Subsection "leave_multi_grid( )"
.RS 4
Disconnect an Infoblox appliance from the Master Grid.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $result = $session\->leave_multi_grid();
.Ve
.RE
.RS 4
.RE
.SS "logout( )"
.IX Subsection "logout( )"
.RS 4
Use this function to log out of the current session.
.Sp
If you want to log in to the server again, create a new Infoblox::Session object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
None
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& $session\->logout();
.Ve
.RE
.RS 4
.RE
.SS "member_upgrade( )"
.IX Subsection "member_upgrade( )"
.RS 4
Use this function to upgrade a single member that was reverted during the staged upgrade process or to revert a single member if it does not behave properly after an upgrade.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The following parameters are supported:
.Sp
.Vb 2
\& member \- The FQDN of the member to be upgraded. # Required
\& action \- The action to execute. # Optional
.Ve
.Sp
The action parameter can be \*(L"\s-1UPGRADE\*(R"\s0 or \*(L"\s-1REVERT\*(R".\s0 If not specified, the action parameter defaults to \*(L"\s-1UPGRADE\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #upgrade the member
\& my $response = $session\->member_upgrade(member => "hostname.com");
\& #revert the member
\& my $response = $session\->member_upgrade(member => "hostname.com", action => "REVERT");
.Ve
.RE
.RS 4
.RE
.SS "modify( )"
.IX Subsection "modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance.
.Sp
To modify a specific object, use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, make the desired modifications to this object, and then submit it for modification.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The object to be modified in the Infoblox appliance. See individual objects for the necessary parameters.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
scheduled_at       \- Optional. The scheduled date and time in \s-1ISO 8601\s0 extended format (e.g. 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z) or 'now' which will set scheduled date and time to the current date and time. See details.
.Sp
predecessor_task   \- Optional. An Infoblox::Grid::ScheduledTask object this task depends on. It is mandatory to set scheduled_at parameter if predecessor_task parameter is set.
.Sp
approval_comment   \- Optional. Comment provided by the submitter on approval.
.Sp
approval_ticket_number \- Optional. Ticket number provided by the submitter on approval.
.Sp
ip_validation      \- Optional. A list of Infoblox::Grid::IPValidationInfo objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails. When an operation fails, the error code and error message are reported in the \fBstatus_code()\fR and \fBstatus_detail()\fR attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& # Use get() to retrieve the object.
\& my @retrieved_obj = $session\->get(
\&     object => "Infoblox::DNS::Record::A",
\&     name   => "bind_a.domain.com" );
\& # select the specific object.
\& my $bind_a = $retrieved_obj[0];
\& # Use object method to modify the comment.
\& $bind_a\->comment("this is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $bind_a );
.Ve
.RE
.RS 4
.RE
.SS "new_cursor( )"
.IX Subsection "new_cursor( )"
.RS 4
Use this method to return a cursor object. See Infoblox::Cursor for more information.
.RE
.SS "network_discovery_control( )"
.IX Subsection "network_discovery_control( )"
.RS 4
Use this method to control the network discovery task
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
action                 \- Required. Valid values are \*(L"\s-1START\*(R", \*(L"PAUSE\*(R", \*(L"RESUME\*(R",\s0 and \*(L"\s-1END\*(R".\s0
.Sp
scheduled_at           \- Optional. Scheduled time in \s-1ISO 8601\s0 extended format for date and time (e.g. 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z). Note that this can only be used with the \*(L"\s-1START\*(R"\s0 action.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails. When an operation fails, the error code and error message are reported in the \fBstatus_code()\fR and \fBstatus_detail()\fR attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& # start network discovery
\& my $response = $session\->network_discovery_control(
\&        action => \*(AqSTART\*(Aq);
\&
\& unless($response) {
\&    die("Start network discovery failed");
\& }
.Ve
.RE
.RS 4
.RE
.SS "publish_changes( )"
.IX Subsection "publish_changes( )"
.RS 4
Use this method to publish configuration changes.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
grid_member         \- Optional. The Grid member name.
.Sp
services            \- Required. The service name. The valid value is '\s-1ALL\s0' or '\s-1ATP\s0'.
.Sp
member_order        \- Required if Grid_member is not defined. Otherwise this parameter is not used. Option to publish changes on all members with or without delay. The valid value is '\s-1SEQUENTIALLY\s0' or '\s-1SIMULTANEOUSLY\s0'.
.Sp
sequential_delay    \- Optional if Grid_member is not defined. Otherwise this parameter is not used. The delay between publishing configuration changes on members in seconds.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails. When an operation fails, the error code and error message are reported in the \fBstatus_code()\fR and \fBstatus_detail()\fR attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # publish changes on the Grid
\& my $res = $session\->publish_changes(
\&    \*(Aqsequential_delay\*(Aq => 1,
\&    \*(Aqmember_order\*(Aq     => \*(AqSIMULTANEOUSLY\*(Aq,
\&    \*(Aqservices\*(Aq         => \*(AqALL\*(Aq,
\& );
\&
\& # publish changes on the Grid member
\& $res = $session\->publish_changes(
\&    \*(Aqgrid_member\*(Aq => \*(Aqinfoblox.localdomain\*(Aq,
\&    \*(Aqservices\*(Aq    => \*(AqALL\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SS "query_fqdn_on_member( )"
.IX Subsection "query_fqdn_on_member( )"
.RS 4
Use this method to query \s-1FQDN\s0 on the specified member.
.Sp
This methods forces Grid Master to execute \s-1RPC\s0 call to invoke dig on the member for a specific \s-1FQDN.\s0
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::Member::QueryFQDNParameter object or \s-1HASH\s0 that contains following values:
.Sp
.Vb 5
\& fqdn            \- Required. FQDN to query.
\& member          \- Optional. Member to invoke dig on. The default is Grid Master.
\& name_server     \- Optional. Nameserver to query.
\& record_type     \- Optional. Query resource record type. The default is ANY.
\& recursive_query \- Optional. \*(Aqtrue\*(Aq to set recursive query flag. The default is \*(Aqtrue\*(Aq.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns an Infoblox::Grid::Member::QueryFQDNResponse object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Recursively query any record for the domain, \*(Aqfoo.com\*(Aq on the Grid Master.
\& my $response = $session\->query_fqdn_on_member(fqdn => \*(Aqfoo.com\*(Aq);
\&
\& #Recursively query nameserver 5.5.5.5 for A record for \*(Aqbar.com\*(Aq.
\& #domain via \*(Aqmember1\*(Aq dig
\& my $response = $session\->query_fqdn_on_member(
\&     fqdn        => \*(Aqbar.com\*(Aq,
\&     member      => \*(Aqmember1\*(Aq,
\&     name_server => \*(Aq5.5.5.5\*(Aq,
\&     record_type => \*(AqA\*(Aq,
\& );
\&
\& #Same, but using Infoblox::Grid::Member::QueryFQDNParameter
\&
\& #Construct parameters object
\& my $query_fqdn = Infoblox::Grid::Member::QueryFQDNParameter\->new(
\&     fqdn        => \*(Aqbar.com\*(Aq,
\&     member      => \*(Aqmember1\*(Aq,
\&     name_server => \*(Aq5.5.5.5\*(Aq,
\&     record_type => \*(AqA\*(Aq,
\& );
\&
\& #Query
\& my $response = $session\->query_fqdn_on_member($query_fqdn);
.Ve
.RE
.RS 4
.RE
.SS "refresh_hsm( )"
.IX Subsection "refresh_hsm( )"
.RS 4
Use this method to re-sync with the \s-1HSM\s0 data repository.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
hsm_group             \- Required. An \s-1HSM\s0 group object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns one of the following values : \*(L"\s-1PASSED\*(R", \*(L"INACTIVE\*(R" , \*(L"FAILED\*(R".\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& # Refresh HSM
\& my $response = $session\->refresh_hsm(
\&        hsm_group => $hsm_group_object);
\&
\& unless($response) {
\&    die("Refresh HSM failed");
\& }
.Ve
.RE
.RS 4
.RE
.SS "remove( )"
.IX Subsection "remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The object to be removed from the Infoblox appliance. See individual objects for the necessary parameters.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
scheduled_at       \- Optional. Scheduled time in \s-1ISO 8601\s0 extended format for date and time (e.g. 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z) or 'now' which will set scheduled date and time to the current date and time. See details.
.Sp
predecessor_task   \- Optional. An Infoblox::Grid::ScheduledTask object this task depends on. It is mandatory to set scheduled_at parameter if predecessor_task parameter is set.
.Sp
approval_comment   \- Optional. Comment provided by the submitter on approval.
.Sp
approval_ticket_number \- Optional. Ticket number provided by the submitter on approval.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Use get() to retrieve the object.
\& my @retrieved_obj = $session\->get(
\&     object => "Infoblox::DNS::Record::A",
\&     name   => "bind_a.domain.com" );
\& # Select the specific object.
\& my $bind_a = $retrieved_obj[0];
\& # Submit for removal
\& my $response = $session\->remove( $bind_a );
.Ve
.RE
.RS 4
.RE
.SS "remove_data( )"
.IX Subsection "remove_data( )"
.RS 4
Use this method to remove data from the Infoblox appliance or purge \s-1DHCP\s0 IF-MAP data.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
type \- Required. The type of data to remove. Following is a list of data types that can be removed:
.Sp
.Vb 11
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& | nac_auth_cache           \- Purge the NAC authentication cache.                                                        |
\& | member                   \- Required. The IPv4 address of the member on which the NAC authentication cache is cleared. |
\& | mac_addr                 \- Optional. The MAC address for which the authentication result in the NAC authentication    |
\& |                            cache is to be cleared. if this field is not present, the entire cache will be flushed.    |
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& | ifmap_dhcp_data          \- Sends a purge request that removes any IF\-MAP data published by the DHCP IF\-MAP client     |
\& |                            running on this member. The following parameters are also available:                       |
\& |                                                                                                                       |
\& | member                   \- Required. The IP address of the grid member.                                               |
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # purge DHCP IF\-MAP data published by member 1.2.3.4
\& $session\->remove_data(
\&     "type"      => "ifmap_dhcp_data",
\&     "member" => "1.2.3.4");
\&
\& # purge the entire NAC authentication cache for member 1.2.3.4
\& $session\->remove_data(
\&     "type"      => "nac_auth_cache",
\&     "member" => "1.2.3.4");
\&
\& # Clear authentication data for MAC address a1:a1:a1:a1:a1:a1 from the NAC authentication cache for member 1.2.3.4
\& $session\->remove_data(
\&     "type"          => "nac_auth_cache",
\&     "member"    => "1.2.3.4",
\&     "mac_addr" => "a1:a1:a1:a1:a1:a1");
.Ve
.RE
.RS 4
.RE
.SS "remove_eap_ca_cert( )"
.IX Subsection "remove_eap_ca_cert( )"
.RS 4
Remove an Extensible Authentication Protocol Certificate Authority (\s-1EAP CA\s0) certificate.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
dn \- Required. Distinguished Name (\s-1DN\s0) of the Certificate Authority (\s-1CA\s0) certificate you want to remove.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& my $result = $session\->remove_eap_ca_cert(
\&     dn => \*(AqCN="My Server Certificate",C="US"\*(Aq );
.Ve
.RE
.RS 4
.RE
.SS "remove_tftp_file( )"
.IX Subsection "remove_tftp_file( )"
.RS 4
Remove a file from a \s-1TFTP\s0 directory on the Infoblox appliance.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
directory \- Required. The parent directory of the file in \s-1TFTP\s0 storage.
.Sp
name \- Required. The name of the file.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my $result = $session\->remove_tftp_file(
\&     directory => "/",
\&     name      => "voip_settings.txt" );
.Ve
.RE
.RS 4
.RE
.SS "reset_discovery_timestamp( )"
.IX Subsection "reset_discovery_timestamp( )"
.RS 4
This method is deprecated and is provided only to maintain backward compatibility with previous releases.
.Sp
Calling this method will perform the same action as calling the \fB\fBreset_discovery_data()\fB\fR method.
.RE
.SS "reset_discovery_data( )"
.IX Subsection "reset_discovery_data( )"
.RS 4
Use this method to reset the discovery related attributes for an \s-1IP\s0 address.
.Sp
The following attributes are reset:
.Sp
.Vb 10
\&    os
\&    netbios
\&    first_discovered
\&    last_discovered
\&    network_component_type
\&    network_component_name
\&    network_component_description
\&    network_component_ip
\&    network_component_port_number
\&    network_component_port_name
\&    network_component_port_description
\&    port_vlan_name
\&    port_vlan_number
\&    port_speed
\&    port_duplex
\&    port_status
\&    port_link_status
\&    discovered_name
\&    discoverer
.Ve
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
type                 \- Required. Valid values are \*(L"\s-1GLOBAL\*(R", \*(L"NETWORK\*(R",\s0 and \*(L"\s-1IP_ADDRESS\*(R".\s0
.Sp
network              \- Optional. Required when type is \*(L"\s-1NETWORK\*(R"\s0 or \*(L"\s-1IP_ADDRESS\*(R",\s0 and the ip_address value is an IPv4 address..
.Sp
network_view         \- Optional. The network view to which the reset operation will be limited. The default value is the system-defined default network view.
.Sp
ip_address           \- Optional. Required when type is \*(L"\s-1IP_ADDRESS\*(R".\s0 The value can be an IPv4 or IPv6 address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails. When an operation fails, the error code and error message are reported in the \fBstatus_code()\fR and \fBstatus_detail()\fR attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& # type is GLOBAL
\& my $response = $session\->reset_discovery_data(
\&        type => \*(AqGLOBAL\*(Aq);
\&
\& unless($response) {
\&    die("reset discovery datafailed");
\& }
\&
\& # with a non\-default network view
\& my $nview = Infoblox::DHCP::View\->new(
\&        name => \*(Aqnetview\*(Aq,
\& );
\& my $response = $session\->reset_discovery_data(
\&        type => \*(AqGLOBAL\*(Aq,
\&        network_view => $nview);
\&
\& unless($response) {
\&    die("reset discovery data failed");
\& }
\&
\& # type is NETWORK
\& $response = $session\->reset_discovery_data(
\&        type => \*(AqNETWORK\*(Aq,
\&        network => \*(Aq10.0.0.0/24\*(Aq);
\&
\& unless($response) {
\&    die("reset discovery data failed");
\& }
\&
\& # type is IP_ADDRESS
\& $response = $session\->reset_discovery_data(
\&        type => \*(AqIP_ADDRESS\*(Aq,
\&        network => \*(Aq10.0.0.0/24\*(Aq,
\&        ip_address => \*(Aq10.0.0.10\*(Aq);
\&
\& unless($response) {
\&    die("reset discovery data failed");
\& }
.Ve
.RE
.RS 4
.RE
.SS "reset_threat_protection_object( )"
.IX Subsection "reset_threat_protection_object( )"
.RS 4
Use this method to reset the Threat Protection object to the factory defaults.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 2
\& object              \- Required. An Infoblox::Grid::ThreatProtection::Rule, Infoblox::Grid::ThreatProtection::Ruleset or Infoblox::Grid::ThreatProtection::RuleCategory.
\& delete_custom_rules \- Optional. Flag that indicates whether the custom rules are removed or not. The default value is \*(Aqtrue\*(Aq.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails. When an operation fails, the error code and error message are reported in the \fBstatus_code()\fR and \fBstatus_detail()\fR attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my $res = $session\->reset_threat_protection_object(
\&     object => $rule,
\&     delete_custom_rules => \*(Aqfalse\*(Aq
\& );
.Ve
.RE
.RS 4
.RE
.SS "restart( )"
.IX Subsection "restart( )"
.RS 4
Restart a service on the Infoblox appliance.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
mode          \- Optional. The restart service mode. Valid values are '\s-1GROUPED\s0', '\s-1SEQUENTIAL\s0', '\s-1SIMULTANEOUS\s0'. Default is '\s-1SIMULTANEOUS\s0'.
.Sp
force_restart \- Optional. Valid values are \*(L"true\*(R" or \*(L"false\*(R".
.Sp
members       \- Optional. The restart service members. Valid value is an array of Grid Member objects. Note that objects should be retrieved from the server first. Only one parameter for members and groups can be used in the same call.
.Sp
groups        \- Optional. The restart service groups. Valid value is an array of Grid Restart Service Group objects. Note that objects should be retrieved from the server first. Only one parameter for members and groups can be used in the same call.
.Sp
services      \- Optional. Valid value is an array, which can contain the following values: '\s-1ALL\s0', '\s-1DHCP\s0', '\s-1DHCPV4\s0', '\s-1DHCPV6\s0' and '\s-1DNS\s0'. Default is ['\s-1ALL\s0'].
.Sp
scheduled_at  \- Optional. Scheduled time in \s-1ISO 8601\s0 extended format for date and time (e.g. 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z).
.Sp
user_name     \- Optional. Name of the user requesting the restart.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails. If no attribute is specified, the method returns
the pending schedule.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& my $result = $session\->restart(
\&    groups        => [$group1, $group2],
\&    mode          => \*(AqGROUPED\*(Aq,
\&    force_restart => \*(Aqtrue\*(Aq,
\&    services      => [\*(AqDNS\*(Aq, \*(AqDHCPV6\*(Aq],
\&    user_name     => \*(Aqib\-admin\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SS "restart_status( )"
.IX Subsection "restart_status( )"
.RS 4
Use this method to retrieve all the services that need to restart.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns an array of strings for all the services that need to restart ('dhcp', 'dns').
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my @restart_list = $session\->restart_status();
.Ve
.RE
.RS 4
.RE
.SS "rollback_db_snapshot( )"
.IX Subsection "rollback_db_snapshot( )"
.RS 4
Use this method to rollback OneDB snapshot if one exists.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails. When an operation fails, the error code and error message are reported in the \fBstatus_code()\fR and \fBstatus_detail()\fR attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $res = $session\->rollback_db_snapshot();
.Ve
.RE
.RS 4
.RE
.SS "rotate_log_files( )"
.IX Subsection "rotate_log_files( )"
.RS 4
Use this method to rotate the specified log file for the Grid Master or specified member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
log_type \- Required. The type of log file. Valid values are 'audit', 'msmgmt', or 'sys'.
.Sp
member \- Optional. Hostname of the Grid member on which log rotation is performed. Only required if 'log_type' is 'sys' or 'msmgmt'.
.Sp
node_type \- Optional. \s-1HA\s0 node type ('\s-1ACTIVE\s0' or '\s-1PASSIVE\s0'). Only required if 'log_type' is 'sys' or 'msmgmt'.
.Sp
server \- Optional. \s-1IP\s0 address or \s-1FQDN\s0 of the Microsoft server. Only required if 'log_type' is 'msmgmt'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns '1' when there are no errors and sets session error code and text when there is an error.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # rotate the syslog
\& my %args;
\& $args{\*(Aqlog_type\*(Aq} = "sys";
\& $args{\*(Aqnode_type\*(Aq} = "ACTIVE";
\& $args{\*(Aqmember\*(Aq} = "infoblox.localdomain";
\&
\& $session\->rotate_log_files(%args);
.Ve
.RE
.RS 4
.RE
.SS "run_scavenging( )"
.IX Subsection "run_scavenging( )"
.RS 4
Use this method to perform the scavenging of the \s-1DNS\s0 Records.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
object       \- Required. The \s-1DNS\s0 object on which scavenging is performed. The valid values are Infoblox::Grid::DNS, Infoblox::DNS::Zone and Infoblox::DNS::View.
action       \- Optional. The scavenging action to perform. The valid values are '\s-1ANALYZE\s0', '\s-1RECLAIM\s0', '\s-1ANALYZE_RECLAIM\s0' and '\s-1RESET\s0'. The default value is '\s-1ANALYZE\s0'.
scheduled_at \- Optional. Scheduled date and time in \s-1ISO 8601\s0 extended format (e.g., 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z) or 'now' which will set scheduled date and time to the current date and time. See details.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns 1 when the operation succeeds and sets session error code an text when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my $res = $session\->run_scavenging(
\&     object => $grid_dns,
\&     action => \*(AqRESET\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SS "save_db_snapshot( )"
.IX Subsection "save_db_snapshot( )"
.RS 4
Use this method to take OneDB snapshot.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& comment \- Required. A descriptive comment in string format.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails. When an operation fails, the error code and error message are reported in the \fBstatus_code()\fR and \fBstatus_detail()\fR attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $res = $session\->save_db_snapshot(comment => \*(Aqsave snapshot demo\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "search( )"
.IX Subsection "search( )"
.RS 4
Use this method to search and retrieve all the matching objects from the Infoblox appliance.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
object        \- Required. The Infoblox object to retrieve.
.Sp
return_methods \- Optional. The member fields to return.
.Sp
maximum_objects_returned \- Optional. The maximum number of objects to retrieve (this overrides default_maximum_objects_returned if specified, but will be overridden by an individual object's limit if it is lower).
.Sp
partial_subobjects \- Optional. Indicates whether the partial subobjects feature is enabled (this overrides default_partial_subobjects for this call).
.Sp
key reference \- Required. The attribute and value that refer to the desired object(s) to retrieve. Many key references are given as regular expressions. See individual objects for available key references.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Return an array in list context containing all matching objects. For failures or objects not found, it returns an empty array in list context and undefined in scalar context. When an operation fails, the error code and error message are reported in the \fBstatus_code()\fR and \fBstatus_detail()\fR attributes.
.Sp
return_methods can be specified in the following way:
.Sp
.Vb 3
\& +method_name \- This adds the specified method to the returned methods (useful for "optional" methods).
\& \-method_name \- This returns all methods, except the specified method.
\&  method_name \- This returns only the specified method.
.Ve
.Sp
The return_methods above can be specified together. Note that  specifying \-method_name in a list that contains method_name entries will be ignored (because only method_name entries will be returned). Specifying +method_name for members that are not optional will similarly be ignored. Following are usage axamples:
.Sp
.Vb 3
\& [\*(Aqmethod1\*(Aq,\*(Aqmethod2\*(Aq]  = Returns only method1 and method2.
\& [\*(Aq\-method1\*(Aq]           = Returns all object methods, except method1.
\& [\*(Aq+method1\*(Aq]           = Returns all object methods and method1, if method1 is not a method that is returned by default.
.Ve
.Sp
Note that objects returned when method_name and/or \-method_name are specified cannot be used directly for modify( ) calls; fill_partial_object must be called for them first.
.Sp
Member methods that represent actions/operations rather than values (e.g.,
Infoblox::DHCP::NetworkContainer\->\fBresize()\fR) cannot be specified as return_methods.
.Sp
When the partial subobjects feature is enabled, objects returned from searches do not retrieve all of their subobjects (if any), but only a few of their fields. These subobjects are supported:
.Sp
.Vb 2
\& Infoblox::DNS::View  \- only \*(Aqname\*(Aq and \*(Aqcomment\*(Aq will be returned
\& Infoblox::DHCP::View \- only \*(Aqname\*(Aq and \*(Aqcomment\*(Aq will be returned
.Ve
.Sp
Therefore, if an object that is returned by 'search' has one of the supported subobjects as a method value, then the subobject is treated as if it was retrieved with 'return_methods' set and can be completed by calling fill_partial_object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Searching for all A records under "domain.com" from the Infoblox appliance.
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::A",
\&     name   => \*(Aq.*\e.domain\e.com\*(Aq );
\&
\& unless (@retrieved_objs) {
\&     die("Search DNS record A failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& #Searching for all A records under "domain.com" from the Infoblox appliance and returning only their addresses and TTL\*(Aqs.
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::A",
\&     name   => \*(Aq.*\e.domain\e.com\*(Aq,
\&     return_methods => [\*(Aqttl\*(Aq,\*(Aqipv4addr\*(Aq]
\& );
\&
\& unless (@retrieved_objs) {
\&     die("Search DNS record A failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& #Searching for all A records under "domain.com" from the Infoblox appliance and returning everything but their TTL\*(Aqs.
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::A",
\&     name   => \*(Aq.*\e.domain\e.com\*(Aq,
\&     return_methods => [\*(Aq\-ttl\*(Aq]
\& );
\&
\& unless (@retrieved_objs) {
\&     die("Search DNS record A failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& #Searching for all A records under "domain.com" from the Infoblox appliance and returning their views member as a partial object.
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::A",
\&     name   => \*(Aq.*\e.domain\e.com\*(Aq,
\&     partial_subobjects => 1
\& );
\&
\& unless (@retrieved_objs) {
\&     die("Search DNS record A failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
.Ve
.RE
.RS 4
.RE
.SS "search with limit parameters"
.IX Subsection "search with limit parameters"
Some object methods support searches where limits are specified. Assuming that 'X' and 'Y' are valid searchable values for a particular method, the following are supported:
.IP "\fB\fR 'X' \- Matches, as usual, if the method value is \s-1EXACTLY X.\s0" 4
.IX Item " 'X' - Matches, as usual, if the method value is EXACTLY X."
.PD 0
.IP "\fB\fR '> X' or '< X' \- Matches if the method value is \s-1GREATER\s0 or \s-1LESS\s0 than X respectively." 4
.IX Item " '> X' or '< X' - Matches if the method value is GREATER or LESS than X respectively."
.IP "\fB\fR '>= X' or '<= X' \- Matches if the method value is \s-1GREATER THAN OR EQUALS\s0 or is \s-1LESS THAN OR EQUALS X\s0 respectively." 4
.IX Item " '>= X' or '<= X' - Matches if the method value is GREATER THAN OR EQUALS or is LESS THAN OR EQUALS X respectively."
.IP "\fB\fR '!= X' or '/= X' \- Matches if the method value \s-1DOES NOT EQUAL X.\s0" 4
.IX Item " '!= X' or '/= X' - Matches if the method value DOES NOT EQUAL X."
.IP "\fB\fR '>=< X,Y' \- Matches if the method value is \s-1GREATER THAN OR EQUALS X AND\s0 is \s-1LESS THAN OR EQUALS Y.\s0" 4
.IX Item " '>=< X,Y' - Matches if the method value is GREATER THAN OR EQUALS X AND is LESS THAN OR EQUALS Y."
.PD
.Sp
.RS 4
Following are examples of limit searches:
.Sp
.Vb 5
\& # This searches for tasks scheduled exactly on 2011\-09\-18T10:20:20Z
\& @result = $session\->search(
\&                            object         => "Infoblox::Grid::ScheduledTask",
\&                            scheduled_time => \*(Aq2011\-09\-18T10:20:20Z\*(Aq,
\&                           );
\&
\& # This searches for tasks scheduled before 2011\-09\-18T10:20:20Z
\& @result = $session\->search(
\&                            object         => "Infoblox::Grid::ScheduledTask",
\&                            scheduled_time => \*(Aq< 2011\-09\-18T10:20:20Z\*(Aq,
\&                           );
\&
\& # This searches for tasks scheduled before or on 2011\-09\-18T10:20:20Z
\& @result = $session\->search(
\&                            object         => "Infoblox::Grid::ScheduledTask",
\&                            scheduled_time => \*(Aq<= 2011\-09\-18T10:20:20Z\*(Aq,
\&                           );
\&
\& # This searches for tasks scheduled not on 2011\-09\-18T11:20:20Z
\& @result = $session\->search(
\&                            object         => "Infoblox::Grid::ScheduledTask",
\&                            scheduled_time => \*(Aq!= 2011\-09\-18T11:20:20Z\*(Aq,
\&                           );
\&
\& # This searches for tasks scheduled between 2011\-09\-18T10:20:20Z and 2011\-10\-18T10:20:20Z, inclusive
\& @result = $session\->search(
\&                            object         => "Infoblox::Grid::ScheduledTask",
\&                            scheduled_time => \*(Aq>=< 2011\-09\-18T10:20:20Z,2011\-10\-18T10:20:20Z\*(Aq,
\&                           );
.Ve
.RE
.SS "server_version( )"
.IX Subsection "server_version( )"
.RS 4
Check the current server version.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the current Infoblox appliance version.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $version = $session\->server_version( );
.Ve
.RE
.RS 4
.RE
.SS "set_dhcp_failover_partner_down( )"
.IX Subsection "set_dhcp_failover_partner_down( )"
.RS 4
Set a \s-1DHCP\s0 failover association peer to the Partner Down state.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
dhcp_failover \- Required. The name of the \s-1DHCP\s0 failover association with the
peer that you are setting to the Partner Down state.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
peer_type \- Required. The peer that you are setting to the Partner Down state. Valid values are
\&'primary' or 'secondary'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my $result = $session\->set_dhcp_failover_partner_down(
\&    dhcp_failover => \*(Aqtest_failover\*(Aq,
\&    peer_type     => \*(Aqprimary\*(Aq
\& );
.Ve
.RE
.RS 4
.RE
.SS "set_dhcp_failover_secondary_recover( )"
.IX Subsection "set_dhcp_failover_secondary_recover( )"
.RS 4
Set the secondary peer to the Recover state.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
dhcp_failover \- Required. The name of the \s-1DHCP\s0 failover association with the secondary
peer that you are setting to the Recover state.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my $result = $session\->set_dhcp_failover_secondary_recover(
\&    dhcp_failover => \*(Aqtest_failover\*(Aq
\& );
.Ve
.RE
.RS 4
.RE
.SS "skip_member_upgrade( )"
.IX Subsection "skip_member_upgrade( )"
.RS 4
This function allows the specified member to skip the upgrade process.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The following required parameter is supported:
.Sp
.Vb 1
\& member \- The FQDN of the member that will skip the upgrade process.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #skip member
\& my $response = $session\->skip_member_upgrade(member => "hostname.com");
.Ve
.RE
.RS 4
.RE
.SS "status_code( )"
.IX Subsection "status_code( )"
.RS 4
Get the status code of the last function called.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the status code of the last function/operation called.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $status_code = $session\->status_code( );
.Ve
.RE
.RS 4
.RE
.SS "status_detail( )"
.IX Subsection "status_detail( )"
.RS 4
Get the status detail of the last function called.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the status detail of the last function/operation called.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $status_detail = $session\->status_detail( );
.Ve
.RE
.RS 4
.RE
.SS "test( )"
.IX Subsection "test( )"
.RS 4
A generic test function.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
object                   \- Required. An Infoblox object.
timeout                  \- Optional, if object type is 'Infoblox::LDAP::Server'. The timeout in seconds.
ldap_service             \- Optional, if object type is 'Infoblox::LDAP::Server'. An Infoblox::LDAP::AuthService object that has been retrieved from the appliance.
certificate_auth_service \- Optional, if object type is 'Infoblox::Grid::Admin::CertificateAuthService'. An Infoblox::Grid::Admin::CertificateAuthService or it's name in a string format.
member                   \- Optional, if object type is 'Infoblox::Grid::SyslogBackupServer'. The name of the Grid member which performs the connection test. By default, the connection test is performed from the Grid Master.
event_text               \- Required, if object type is 'Infoblox::Notification::Rule'. An event to trigger notification rule in a \s-1JSON\s0 text string.
.Sp
.Vb 10
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | Object type                   Description                                                                                    |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | Infoblox::OCSP::Responder              \- Performs validation of OCSP responder object.                                       |
\& |                                          The valid return value is one of the following: "CANNOT_RESOLVE_FQDN",              |
\& |                                          "CANNOT_CONNECT", "FAILED_TEST", "TEST_OK", or "TEST_OK_RESPONSE_NOT_VERIFIED".     |
\& | Infoblox::LDAP::Server                 \- Tests connectivity to the LDAP server.                                              |
\& | Infoblox::CiscoISE::Endpoint           \- Tests connectivity to the CiscoISE endpoint. The valid return values are            |
\& |                                          \*(AqCANNOT_RESOLVE_FQDN\*(Aq, \*(AqFAIL\*(Aq, \*(AqOK\*(Aq and \*(AqWARN\*(Aq.                                     |
\& | Infoblox::Notification::REST::Endpoint \- Tests connectivity to the REST API endpoint. The valid return value is 0 if         |
\& |                                          connectivity tests fail to occur or Infoblox::Grid::TestResult otherwise.           |
\& | Infoblox::Notification::Rule           \- Tests applicability of event to be triggered.                                       |
\& | Infoblox::DXL::Endpoint::Broker        \- Tests connectivity to the DXL broker. Parameters:                                   |
\& |                                              endpoint           \- Optional. The Infoblox::DXL::Endpoint object.              |
\& |                                              client_certificate \- Optional. The DXL broker client certificate.               |
\& |                                          Note that at least one of the arguments (\*(Aqendpoint\*(Aq and \*(Aqclient_certificate\*(Aq)       |
\& |                                          should be set in order to perform the connectivity test.                            |
\& |                                          The valid return value is 0 if the connectivity tests fail to occur or              |
\& |                                          Infoblox::Grid::TestResult otherwise.                                               |
\& | Infoblox::Grid::SyslogServer           \- Tests connectivity to the Syslog server.                                            |
\& | Infoblox::Grid::SyslogBackupServer     \- Tests connectivity to the Syslog backup server.                                     |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a test result.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Performs validation of OCSP responder object
\& my $ocsp_responder = Infoblox::OCSP::Responder\->new(
\&                       \*(Aqaddress\*(Aq     => \*(Aqdomain.com\*(Aq,
\&                       \*(Aqcertificate\*(Aq => \*(Aqresponder.pem\*(Aq,
\& );
\&
\& my $result = $session\->test(\*(Aqobject\*(Aq => $ocsp_responder);
\&
\& my $syslog_server = Infoblox::Grid::SyslogServer\->new(
\&    address         => \*(Aq10.32.1.55\*(Aq,
\&    connection_type => \*(Aqtcp\*(Aq,
\&    port            => 514,
\& );
\&
\& my $result = $session\->test(\*(Aqobject\*(Aq => $syslog_server);
\&
\& my $backup_syslog_server = Infoblox::Grid::BackupSyslogServer\->new(
\&    address => \*(Aq10.32.1.55\*(Aq,
\& );
\&
\& my $result = $session\->test(\*(Aqobject\*(Aq => $backup_syslog_server);
\&
\& my $notif_rule = Infoblox::Notification::Rule\->new(
\&                           event_type          => \*(AqDNS_RPZ\*(Aq,
\&                           expression_list     => [@rule_expr1],
\&                           name                => \*(Aqnotif_rule1\*(Aq,
\&                           notification_action => \*(AqRESTAPI_TEMPLATE_INSTANCE\*(Aq,
\&                           notification_target => $endpoint,
\&                           template_instance   => $instances[0],
\&                           disable             => \*(Aqfalse\*(Aq,
\&    );
\& my $event_text = \*(Aq{"destination_ip": "10.0.0.0","timestamp": "1973\-03\-03T09:46:41Z",\*(Aq.
\&                   \*(Aq"vnode_oid": 0, "thread_id": 0, "sequence_id": 0, "member_name": "infoblox.localdomain",\*(Aq.
\&                   \*(Aq"rpz_policy": "PASSTHRU", "member_ip": "192.168.1.2", "source_ip": "10.0.0.55",\*(Aq .
\&                   \*(Aq"network.network_view": "test_view", "rpz_severity": "WARNING"}\*(Aq;
\&
\& my $result = $session\->test(\*(Aqobject\*(Aq => $notif_rule, event_text => $event_text);
.Ve
.RE
.RS 4
.RE
.SS "test_hsm_status( )"
.IX Subsection "test_hsm_status( )"
.RS 4
Performs a signing test using an active \s-1HSM\s0 group.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
hsm_group             \- Required. An \s-1HSM\s0 group object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the status detail of signing test. The valid return value is one of the following : \*(L"\s-1PASSED\*(R", \*(L"INACTIVE\*(R",\*(L"KEY_GEN\*(R", \*(L"SIGNING\*(R" .\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& my $response = $session\->test_hsm_status(
\&                            hsm_group => $hsm_group_object);
\&
\& unless($response) {
\&    die("Test HSM status failed");
.Ve
.RE
.RS 4
.RE
.SS "upgrade_group_now( )"
.IX Subsection "upgrade_group_now( )"
.RS 4
This function allows the specified group to immediately upgrade.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The following required parameter is supported:
.Sp
.Vb 1
\& group_name \- The name of the group to upgrade.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the operation succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Upgrade group now
\& my $response = $session\->upgrade_group_now(group_name => "group1");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
\&\fB#Create an Infoblox::Session object\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& if ($session\->status_code()) {
\&    die("Construct session failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Add a \s-1DNS\s0 zone object\fR
.PP
.Vb 7
\& #Construct the zone
\& my $zone = Infoblox::DNS::Zone\->new(name => "domain.com");
\& unless ($zone) {
\&    die("Construct zone failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& #Add the zone to the Infoblox appliance
\& $session\->add($zone)
\&     or die("Add zone failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Zone added successfully\en";
.Ve
.PP
\&\fB#Restart service\fR
.PP
.Vb 5
\& $session\->restart(
\&      "member" => "192.168.1.2",
\&      "when"   => "03/20/2007 01:00:00",
\&      "time_zone" => "(UMT \- 6:00) Central Time (US and Canada)"
\& );
\&
\& #To cancel the previous restart schedule.
\&
\&  $session\->restart("cancel" => "true");
.Ve
.PP
\&\fB#Get restart services\fR
.PP
.Vb 1
\& my @services = $session\->restart_status();
.Ve
.PP
\&\fB#Get zone object\fR
.PP
.Vb 9
\& my @retrieved_objs = $session\->get(
\&     object    => "Infoblox::DNS::Zone",
\&     name      => "domain.com" );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Zone object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS zone object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Remove zone object\fR
.PP
.Vb 4
\& $session\->remove( $object )
\&   or die("Remove DNS zone failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS Zone object removed successfully \en";
.Ve
.PP
\&\fB#Show the current version\fR
.PP
.Vb 2
\& my $version = $session\->server_version();
\& print "Current server version is $version\en";
.Ve
.PP
\&\fB#Generate a \s-1TSIG\s0 key\fR
.PP
.Vb 2
\& my $tsig = $session\->gen_tsig_key();
\& print "Generated a TSIG key: $tsig\en";
.Ve
.PP
\&\fB#Show status_code and status_detail\fR
.PP
.Vb 4
\& my $status_code = $session\->status_code();
\& my $status_detail = $session\->status_detail();
\& print "Previous operation status_code is: $status_code\en";
\& print "Previous operation status_detail is: $status_detail\en";
.Ve
.PP
\&\fB#clear unmanaged address\fR
.PP
.Vb 5
\& # Creating new network and checking
\& my $network = Infoblox::DHCP::Network\->new(network => "10.0.0.0/24");
\& unless($network) {
\&    die("Create network object failed.");
\& }
\&
\& # Adding into Session and testing
\& $session\->add($network)
\&    or die("Add network failed.");
\&
\& # Creating a new network view
\& my $network_view = Infoblox::DHCP::View\->new(name => "netview");
\& unless($network_view) {
\&    die("Create network view object failed.");
\& }
\& $session\->add($network_view)
\&    or die("Add network view failed.");
\&
\& # Creating a second network in the network view
\& my $network2 = Infoblox::DHCP::Network\->new(
\&                  network => "10.0.0.0/24",
\&                  network_view => $network_view);
\& unless($network2) {
\&    die("Create second network object failed.");
\& }
\& $session\->add($network2)
\&    or die("Add second network object failed.");
\&
\& # type is GLOBAL
\& my $response = $session\->clear_unmanaged(
\&    type => \*(AqGLOBAL\*(Aq);
\&
\& unless($response) {
\&    die("Clear unmanaged failed");
\& }
\&
\& my $response = $session\->clear_unmanaged(
\&    type => \*(AqGLOBAL\*(Aq,
\&    network_view => $network_view);
\&
\& unless($response) {
\&    die("Clear unmanaged failed");
\& }
\& # type is NETWORK
\& $response = $session\->clear_unmanaged(
\&    type => \*(AqNETWORK\*(Aq,
\&    network => \*(Aq10.0.0.0/24\*(Aq);
\&
\& unless($response) {
\&    die("Clear unmanaged failed");
\& }
\&
\& $response = $session\->clear_unmanaged(
\&    type => \*(AqNETWORK\*(Aq,
\&    network => \*(Aq10.0.0.0/24\*(Aq,
\&    network_view => $network_view);
\&
\& unless($response) {
\&    die("Clear unmanaged failed");
\& }
\&
\& # type is IP_ADDRESS
\& $response = $session\->clear_unmanaged(
\&    type => \*(AqIP_ADDRESS\*(Aq,
\&    network => \*(Aq10.0.0.0/24\*(Aq,
\&    ip_address => \*(Aq10.0.0.10\*(Aq);
\&
\& unless($response) {
\&    die("Clear unmanaged failed");
\& }
\&
\& $response = $session\->clear_unmanaged(
\&    type => \*(AqIP_ADDRESS\*(Aq,
\&    network => \*(Aq10.0.0.0/24\*(Aq,
\&    network_view => $network_view,
\&    ip_address => \*(Aq10.0.0.10\*(Aq);
\&
\& unless($response) {
\&    die("Clear unmanaged failed");
\& }
.Ve
.PP
\&\fB#reset discovery data\fR
.PP
.Vb 3
\& # type is GLOBAL
\& my $response = $session\->reset_discovery_data(
\&    type => \*(AqGLOBAL\*(Aq);
\&
\& unless($response) {
\&    die("reset discovery data failed");
\& }
\&
\& my $response = $session\->reset_discovery_data(
\&    type => \*(AqGLOBAL\*(Aq,
\&    network_view => $network_view);
\&
\& unless($response) {
\&    die("reset discovery data failed");
\& }
\&
\& # type is NETWORK
\& $response = $session\->reset_discovery_data(
\&    type => \*(AqNETWORK\*(Aq,
\&    network => \*(Aq10.0.0.0/24\*(Aq);
\&
\& unless($response) {
\&    die("reset discovery data failed");
\& }
\&
\& $response = $session\->reset_discovery_data(
\&    type => \*(AqNETWORK\*(Aq,
\&    network => \*(Aq10.0.0.0/24\*(Aq,
\&    network_view => $network_view);
\&
\& unless($response) {
\&    die("reset discovery data failed");
\& }
\&
\& # type is IP_ADDRESS
\& $response = $session\->reset_discovery_data(
\&    type => \*(AqIP_ADDRESS\*(Aq,
\&    network => \*(Aq10.0.0.0/24\*(Aq,
\&    ip_address => \*(Aq10.0.0.10\*(Aq);
\&
\& unless($response) {
\&    die("reset discovery data failed");
\& }
\&
\& $response = $session\->reset_discovery_data(
\&    type => \*(AqIP_ADDRESS\*(Aq,
\&    network => \*(Aq10.0.0.0/24\*(Aq,
\&    network_view => $network_view,
\&    ip_address => \*(Aq10.0.0.10\*(Aq);
\&
\& unless($response) {
\&    die("reset discovery data failed");
\& }
.Ve
.PP
\&\fB#Control the network discovery task\fR
.PP
.Vb 4
\& # stop network discovery
\& my $response = $session\->network_discovery_control(
\&        action => \*(AqEND\*(Aq,
\&        network => \*(Aq10.0.0.0/24\*(Aq);
\&
\& unless($response) {
\&    die("Stop network discovery failed");
\& }
.Ve
.PP
\&\fB#Clean up\fR
.PP
.Vb 12
\& #Remove the network
\& $network = $session\->get(
\&              object => \*(AqInfoblox::DHCP::Network\*(Aq,
\&              network => \*(Aq10.0.0.0/24\*(Aq,
\&              network_view => \*(Aqdefault\*(Aq);
\& unless($network) {
\&    die("network \*(Aq10.0.0.0/24\*(Aq couldn\*(Aqt be retrieved");
\& }
\& $session\->remove($network)
\&    or die("Remove DHCP network failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP network object removed successfully \en";
\&
\& #Remove the network view
\& # (network2 will be removed with the view)
\& $network_view = $session\->get(
\&              object => \*(AqInfoblox::DHCP::View\*(Aq,
\&              name => \*(Aqnetview\*(Aq);
\& unless($network_view) {
\&    die("network view \*(Aqnetview\*(Aq couldn\*(Aqt be retrived");
\& }
\& $session\->remove($network_view)
\&    or die("Remove DHCP network view failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP network view object removed successfully \en";
.Ve
.SH "SCHEDULED OBJECT USAGE DETAILS"
.IX Header "SCHEDULED OBJECT USAGE DETAILS"
The following are the object types for which you can schedule tasks:
.PP
.Vb 10
\&    Infoblox::DHCP::FixedAddr
\&    Infoblox::DHCP::NetworkContainer
\&    Infoblox::DHCP::IPv6NetworkContainer
\&    Infoblox::DHCP::Network
\&    Infoblox::DHCP::IPv6Network
\&    Infoblox::DHCP::SharedNetwork
\&    Infoblox::DHCP::Range
\&    Infoblox::DHCP::RoamingHost
\&    Infoblox::DNS::BulkHost
\&    Infoblox::DNS::Host
\&    Infoblox::DNS::Record::A
\&    Infoblox::DNS::Record::AAAA
\&    Infoblox::DNS::Record::CNAME
\&    Infoblox::DNS::Record::DNAME
\&    Infoblox::DNS::Record::MX
\&    Infoblox::DNS::Record::PTR
\&    Infoblox::DNS::Record::SRV
\&    Infoblox::DNS::Record::TLSA
\&    Infoblox::DNS::Record::TXT
\&    Infoblox::DNS::SharedRecord::A
\&    Infoblox::DNS::SharedRecord::AAAA
\&    Infoblox::DNS::SharedRecord::MX
\&    Infoblox::DNS::SharedRecord::SRV
\&    Infoblox::DNS::SharedRecord::TXT
\&    Infoblox::DNS::Zone
\&    Infoblox::DNS::SRG
\&    Infoblox::DNS::View
\&    Infoblox::DTC::LBDN
\&    Infoblox::DTC::Pool
\&    Infoblox::DTC::Server
\&    Infoblox::DTC::Topology
\&    Infoblox::DTC::Monitor::HTTP
\&    Infoblox::DTC::Monitor::SIP
\&    Infoblox::DTC::Monitor::ICMP
\&    Infoblox::DTC::Monitor::PDP
\&    Infoblox::DTC::Monitor::TCP
.Ve
.PP
The following are the functions for which you can schedule tasks:
.PP
.Vb 2
\&    restart
\&    network_discovery_control
.Ve
.PP
To allow limited-access admins to use the scheudling feature, add the permission with resource_type = \*(L"Scheduling\*(R" to the appropriate admin group (see Infoblox::Grid::Admin::Permission).
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::Record::A,
Infoblox::DNS::Zone,
Infoblox::DNS::View,
Infoblox::DHCP::FailOver,
Infoblox::DHCP::Network,
Infoblox::DHCP::NetworkContainer,
Infoblox::DHCP::View,
Infoblox::Grid::CSVImportStatus,
Infoblox::Grid::Member::QueryFQDNParameter,
Infoblox::Grid::Member::QueryFQDNResponse,
Infoblox::Grid::GlobalSmartFolder,
Infoblox::Grid::PersonalSmartFolder,
Infoblox::Grid::ScheduledTask
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
