.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Cisco::UCS 3"
.TH Cisco::UCS 3 "2016-05-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cisco::UCS \- A Perl interface to the Cisco UCS XML API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Cisco::UCS;
\&
\&        my $ucs = Cisco::UCS\->new (
\&                                cluster         => $cluster, 
\&                                username        => $username,
\&                                passwd          => $password
\&                                );
\&
\&        $ucs\->login();
\&
\&        @errors = $ucs\->get_errors(severity=>"critical",ack="no");
\&
\&        foreach my $error_id (@errors) {
\&                my %this_error = $ucs\->get_error_id($error_id);
\&                print "Error ID: $error_id.  Severity: $this_error{severity}."
\&                        . "  Description: $this_error{descr}\en";
\&        }
\&
\&        print "Interconnect A serial : " 
\&                . $ucs\->interconnect(A)\->serial 
\&                . "\en";
\&
\&        # prints "Interconnect A serial : BFG9000"
\&
\&        foreach my $chassis ($ucs\->chassis) {
\&                print "Chassis " . $chassis\->id 
\&                        . " serial : " . $chassis\->serial . "\en"
\&        }
\&
\&        # prints:
\&        # "Chassis 1 serial : ABC1234"
\&        # "Chassis 2 serial : ABC1235"
\&        # etc.
\&
\&        print "Interconnect A Ethernet 1/1 TX bytes: " 
\&                . $ucs\->interconnect(A)\->card(1)\->eth_port(1)\->tx_total_bytes;
\&
\&        # prints "Interconnect A Ethernet 1/1 TX bytes: 83462486"
\&
\&        $ucs\->logout();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides an abstracted interface to the Cisco \s-1UCS\s0 Manager \s-1XML API\s0 
and Cisco \s-1UCS\s0 Management Information Model.
.PP
The Cisco \s-1UCS\s0 Manager (\s-1UCSM\s0) is an embedded software agent providing access to 
the hardware and configuration management features of attached Cisco \s-1UCS\s0 
hardware.  The Management Information Model for the \s-1UCSM\s0 is organised into a 
structured heirachy of both physical and virtual objects.  Accessing objects 
within the heirachy is done through a number of high level calls to heirachy 
search and traversal methods.
.PP
The primary aim of this package is to provide a simplified and abstract 
interface to this management heirachy.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
\fInew ( \s-1CLUSTER, PORT, PROTO, USERNAME, PASSWORD\s0 )\fR
.IX Subsection "new ( CLUSTER, PORT, PROTO, USERNAME, PASSWORD )"
.PP
.Vb 7
\&        my $ucs = Cisco::UCS\->new (     
\&                                cluster  => $cluster, 
\&                                port     => $port,
\&                                proto    => $proto,
\&                                username => $username,
\&                                passwd   => $passwd
\&                                );
.Ve
.PP
Constructor method.  Creates a new Cisco::UCS object representing a connection 
to the Cisco \s-1UCSM XML API.\s0
.PP
Parameters are:
.IP "cluster" 3
.IX Item "cluster"
The common name of the target cluster.  This name should be resolvable on the 
host from which the script is run.
.IP "username" 3
.IX Item "username"
The username to use for the connection.  This username needs to have the 
correct \s-1RBAC\s0 role for the operations that one intends to perform.
.IP "passwd" 3
.IX Item "passwd"
The plaintext password of the username specified for the \fBusername\fR attribute 
for the connection.
.IP "port" 3
.IX Item "port"
The port on which to connect to the \s-1UCSM XML API\s0 on the target cluster.  This 
parameter is optional and will default to 443 if not provided.
.IP "proto" 3
.IX Item "proto"
The protocol with which to connect to the \s-1UCSM XML API\s0 on the target cluster.  
This value is optional hould be one of 'http' or 'https' and will default to 
\&'https' if not provided.
.PP
\fIlogin ()\fR
.IX Subsection "login ()"
.PP
.Vb 2
\&        $ucs\->login;
\&        print "Authentication token is $ucs\->cookie\en";
.Ve
.PP
Creates a connection to the \s-1XML API\s0 interface of a \s-1USCM\s0 management instance.  
If sucessful, the attributes of the \s-1UCSM\s0 management instance are inherited by 
the object.  Most important of these parameters is 'cookie' representing the 
authetication token that uniquely identifies the connection and which is 
subsequently passed transparently on all further communications.
.PP
The default time-out value for a token is 10 minutes, therefore if you intend 
to create a long-running session you should periodically call refresh.
.PP
\fIrefresh ()\fR
.IX Subsection "refresh ()"
.PP
.Vb 1
\&        $ucs\->refresh;
.Ve
.PP
Resets the expiry time limit of the existing authentication token to the 
default timeout period of 10m.  Usually not necessary for short-lived 
connections.
.PP
\fIlogout ()\fR
.IX Subsection "logout ()"
.PP
.Vb 1
\&        $ucs\->logout;
.Ve
.PP
Expires the current authentication token.  This method should always be called 
on completion of a script to expire the authentication token and free the 
current session for use by others.  The \s-1UCS XML API\s0 has a maximum number of 
available connections, and a maximum number of sessions per user.  In order to 
ensure that the session remain available (especially if using common 
credentials), you should always call this method on completion of a script, as 
an argument to die, or in any eval where a script may fail and exit before 
logging out;
.PP
\fIcookie ()\fR
.IX Subsection "cookie ()"
.PP
.Vb 1
\&        print $ucs\->cookie;
.Ve
.PP
Returns the value of the authentication token.
.PP
\fIcluster ()\fR
.IX Subsection "cluster ()"
.PP
.Vb 1
\&        print $ucs\->cluster;
.Ve
.PP
Returns the value of cluster as given in the constructor.
.PP
\fIdn ()\fR
.IX Subsection "dn ()"
.PP
.Vb 1
\&        print $ucs\->dn;
.Ve
.PP
Returns the distinguished name that specifies the base scope of the Cisco::UCS 
object.
.PP
\fIget_error_id ( \f(CI$ID\fI )\fR
.IX Subsection "get_error_id ( $ID )"
.PP
.Vb 1
\&        my %error = $ucs\->get_error_id($id);
\&
\&        while (my($key,$value) = each %error) {
\&                print "$key:\et$value\en";
\&        }
.Ve
.PP
\&\fBThis method is deprecated, please use the equivalent get_error method\fR.
.PP
Returns a hash containing the \s-1UCSM\s0 event detail for the given error id.  This 
method takes a single argument; the \s-1UCSM\s0 error_id of the desired error.
.PP
\fIerror ( \f(CI$id\fI )\fR
.IX Subsection "error ( $id )"
.PP
.Vb 2
\&        my $error = $ucs\->get_error($id);
\&        print $error\->id . ":" . $error\->desc . "\en";
.Ve
.PP
Returns a Cisco::UCS::Fault object representing the specified error.  Note 
that this is a caching method and will return a cached object that has been 
retrieved on previous queries should on be available.
.PP
If you require a fresh object, consider using the equivalent non-caching 
\&\fBget_error\fR method below.
.ie n .SS "get_error ( $ID )"
.el .SS "get_error ( \f(CW$ID\fP )"
.IX Subsection "get_error ( $ID )"
Returns a Cisco::UCS::Fault object representing the specified error.  Note 
that this is a non-caching method and that the \s-1UCSM\s0 will always be queried 
for information.  Consequently this method may be more expensive than the 
equivalent caching method \fBerror\fR described above.
.PP
\fIget_errors ()\fR
.IX Subsection "get_errors ()"
.PP
.Vb 8
\&        map {
\&                print \*(Aq\-\*(Aqx50,"\en";
\&                print "ID               : " . $_\->id . "\en";
\&                print "Severity         : " . $_\->severity . "\en";
\&                print "Description      : " . $_\->description . "\en";
\&        } grep {
\&                $_\->severity !~ /cleared/i;
\&        } $ucs\->get_errors;
.Ve
.PP
Returns an array of Cisco::UCS::Fault objects with each object representative 
of a fault on the target system.
.PP
\fIresolve_class ( \f(CI%ARGS\fI )\fR
.IX Subsection "resolve_class ( %ARGS )"
.PP
This method is used to retrieve objects from the \s-1UCSM\s0 management heirachy by 
resolving the classId for specific object types.  This method reflects one of 
the base methods provided by the \s-1UCS XML API\s0 for resolution of objects. The 
method returns an XML::Simple parsed object from the \s-1UCSM\s0 containing the 
response.
.PP
This method accepts a hash containing the value of the classID to be resolved 
and unless you have read the \s-1UCS XML API\s0 Guide and are certain that you know 
what you want to do, you shouldn't need to alter this method.
.PP
\fIresolve_classes ( \f(CI%ARGS\fI )\fR
.IX Subsection "resolve_classes ( %ARGS )"
.PP
This method is used to retrieve objects from the \s-1UCSM\s0 management heirachy by 
resolving several classIds for specific object types.  This method reflects 
one of the base methods provided by the \s-1UCS XML API\s0 for resolution of objects. 
The method returns an XML::Simple object from the \s-1UCSM\s0 containing the parsed 
response.
.PP
Unless you have read the \s-1UCS XML API\s0 Guide and are certain that you know what 
you want to do, you shouldn't need to alter this method.
.PP
\fIresolve_dn ( \f(CI%ARGS\fI )\fR
.IX Subsection "resolve_dn ( %ARGS )"
.PP
.Vb 1
\&        my $blade = $ucs\->resolve_dn( dn => \*(Aqsys/chassis\-1/blade\-2\*(Aq);
.Ve
.PP
This method is used to retrieve objects from the \s-1UCSM\s0 management heirachy by 
resolving a specific distinguished name (dn) for a managed object.  This 
method reflects one of the base methods provided by the \s-1UCS XML API\s0 for 
resolution of objects. The method returns an XML::Simple parsed object from 
the \s-1UCSM\s0 containing the response.
.PP
The method accepts a single key/value pair, with the value being the 
distinguished name of the object.  If not known, the dn can be usually be 
retrieved by first using one of the other methods to retrieve a list of all 
object types (i.e. get_blades) and then enumerating the results to extract the 
dn from the desired object.
.PP
.Vb 1
\&        my @blades = $ucs\->get_blades;
\&
\&        foreach my $blade in (@blades) {
\&                print "Dn is $blade\->{dn}\en";
\&        }
.Ve
.PP
Unless you have read the \s-1UCS XML API\s0 Guide and are certain that you know what you want to do, you shouldn't need
to alter this method.
.PP
\fIresolve_children ( \f(CI%ARGS\fI )\fR
.IX Subsection "resolve_children ( %ARGS )"
.PP
.Vb 1
\&        use Data::Dumper;
\&
\&        my $children = $ucs\->resolve_children(dn => \*(Aqsys\*(Aq);
\&        print Dumper($children);
.Ve
.PP
This method is used to resolve all child objects for a given distinguished 
named (dn) object in the \s-1UCSM\s0 management heirachy.  This method reflects one 
of the base methods provided by the \s-1UCS XML API\s0 for resolution of objects. The 
method returns an XML::Simple parsed object from the \s-1UCSM\s0 containing the 
response.
.PP
In combination with Data::Dumper this is an extremely useful method for further
development by enumerating the child objects of the specified dn.  Note 
however, that the response returned from \s-1UCSM\s0 may not always accurately reflect
all elements due to folding.
.PP
Unless you have read the \s-1UCS XML API\s0 Guide and are certain that you know what 
you want to do, you shouldn't need to alter this method.
.PP
\fIget_cluster_status ()\fR
.IX Subsection "get_cluster_status ()"
.PP
.Vb 1
\&        my $status = $ucs\->get_cluster_status;
.Ve
.PP
This method returns an anonymous hash representing a brief overall cluster 
status.  In the standard configuration of a \s-1HA\s0 pair of Fabric Interconnects, 
this status is representative of the cluster as a single managed entity.
.PP
\fIresolve_class_filter ( \f(CI%ARGS\fI )\fR
.IX Subsection "resolve_class_filter ( %ARGS )"
.PP
.Vb 5
\&        my $associated_servers = 
\&                $ucs\->resolve_class_filter(     
\&                                        classId         => \*(AqcomputeBlade\*(Aq,
\&                                        association     => \*(Aqassociatied\*(Aq        
\&                                        );
.Ve
.PP
This method is used to retrieve objects from the \s-1UCSM\s0 management heirachy by 
resolving the classId for specific object types matching a specified filter 
composed of any number of key/value pairs that correlate to object attributes.
.PP
This method is very similar to the \fBresolve_class\fR method, however a filter 
can be specified to restrict the objects returned to those having certain 
characteristics.  This method is largely exploited by subclasses to return 
specific object types.
.PP
The filter is to be specified as any number of name/value pairs in addition to
the classId parameter.
.PP
\fIversion ()\fR
.IX Subsection "version ()"
.PP
.Vb 1
\&        my $version = $ucs\->version;
.Ve
.PP
This method returns a string containign the running \s-1UCSM\s0 software version.
.PP
\fImgmt_entity ( \f(CI$id\fI )\fR
.IX Subsection "mgmt_entity ( $id )"
.PP
.Vb 3
\&        print "HA status : " 
\&                . $ucs\->mgmt_entity(A)\->ha_readiness 
\&                . "\en";
\&        
\&        my $mgmt_entity = $ucs\->mgmt_entity(\*(AqB\*(Aq);
\&        print $mgmt_entity\->leadership;
.Ve
.PP
Returns a Cisco::UCS::MgmtEntity object for the specified management instance 
(either 'A' or 'B').
.PP
This is a caching method and will return a cached copy of a previously 
retrieved Cisco::UCS::MgmtEntity object should one be available.  If you 
require a fresh copy of the object then consider using the \fBget_mgmt_entity\fR
method below.
.PP
Please see the \fBCaching Methods\fR section in \fB\s-1NOTES\s0\fR for further information.
.PP
\fIget_mgmt_entity ( \f(CI$id\fI )\fR
.IX Subsection "get_mgmt_entity ( $id )"
.PP
.Vb 3
\&        print "Management services state : " 
\&                . $ucs\->get_mgmt_entity(A)\->mgmt_services_state 
\&                . "\en";
.Ve
.PP
Returns a Cisco::UCS::MgmtEntity object for the specified management instance 
(either 'A' or 'B').
.PP
This method always queries the \s-1UCSM\s0 for information on the specified management
entity \- consequently this method may be more expensive that the equivalent 
caching method \fIget_mgmt_entity\fR.
.PP
Please see the \fBCaching Methods\fR section in \fB\s-1NOTES\s0\fR for further information.
.PP
\fIget_mgmt_entities ()\fR
.IX Subsection "get_mgmt_entities ()"
.PP
.Vb 1
\&        my @mgmt_entities = $ucs\->get_mgmt_entities;
\&
\&        foreach $entity ( @mgmt_entities ) {
\&                print "Management entity " 
\&                        . $entity\->id 
\&                        . " is the " 
\&                        . $entity\->leadership 
\&                        . " entity\en";
\&        }
.Ve
.PP
Returns an array of Cisco::UCS::MgmtEntity objects representing all management 
entities in the cluster (usually two \- 'A' and 'B').
.PP
\fIget_primary_mgmt_entity ()\fR
.IX Subsection "get_primary_mgmt_entity ()"
.PP
.Vb 2
\&        my $primary = $ucs\->get_primary_mgmt_entity;
\&        print "Management entity $entity\->{id} is primary\en";
.Ve
.PP
Returns an anonymous hash containing information on the primary \s-1UCSM\s0 management
entity object.  This is the active managing instance of \s-1UCSM\s0 in the target 
cluster.
.PP
\fIget_subordinate_mgmt_entity ()\fR
.IX Subsection "get_subordinate_mgmt_entity ()"
.PP
.Vb 4
\&        print   \*(AqManagement entity \*(Aq, 
\&                $ucs\->get_subordinate_mgmt_entity\->{id}, 
\&                \*(Aq is the subordinate management entity in cluster \*(Aq,
\&                $ucs\->{cluster},"\en";
.Ve
.PP
Returns an anonymous hash containing information on the subordinate \s-1UCSM\s0 
management entity object.
.PP
\fIservice_profile ( \f(CI$ID\fI )\fR
.IX Subsection "service_profile ( $ID )"
.PP
Returns a Cisco::UCS::ServiceProfile object where \f(CW$ID\fR is the user-specified 
name of the service profile.
.PP
This is a caching method and will return a cached copy of a previously 
retrieved Cisco::UCS::ServiceProfile object should one be available.  If you 
require a fresh copy of the object then consider using the 
\&\fBget_service_profile\fR method below.
.PP
Please see the \fBCaching Methods\fR section in \fB\s-1NOTES\s0\fR for further information.
.PP
\fIget_service_profile ( \f(CI$ID\fI )\fR
.IX Subsection "get_service_profile ( $ID )"
.PP
Returns a Cisco::UCS::ServiceProfile object where \f(CW$ID\fR is the user-specified 
name of the service profile.
.PP
This method always queries the \s-1UCSM\s0 for information on the specified service 
profile \- consequently this method may be more expensive that the equivalent 
caching method \fIservice_profile\fR.
.PP
Please see the \fBCaching Methods\fR section in \fB\s-1NOTES\s0\fR for further information.
.PP
\fIget_service_profiles ()\fR
.IX Subsection "get_service_profiles ()"
.PP
.Vb 1
\&        my @service_profiles = $ucs\->get_service_profiles;
\&
\&        foreach my $service_profile (@service_profiles) {
\&                print "Service Profile: " 
\&                        . $service_profile\->name 
\&                        . " associated to blade: " 
\&                        . $service_profile\->pnDn 
\&                        . "\en";
\&        }
.Ve
.PP
Returns an array of Cisco::UCS::ServiceProfile objects representing all service
profiles currently present on the target \s-1UCS\s0 cluster.
.PP
\fIinterconnect ( \f(CI$ID\fI )\fR
.IX Subsection "interconnect ( $ID )"
.PP
.Vb 1
\&        my $serial = $ucs\->interconnect(A)\->serial;
\&
\&        print "Interconnect $_ serial: " 
\&                . $ucs\->interconnect($_) 
\&                . "\en" 
\&        for qw(A B);
.Ve
.PP
Returns a Cisco::UCS::Interconnect object for the specified interconnect \s-1ID\s0 
(either A or B).
.PP
Note that the default behaviour of this method is to return a cached copy of a 
previously retrieved Cisco::UCS::Interconnect object if one is available.  
Please see the \fBCaching Methods\fR section in \fB\s-1NOTES\s0\fR for further information.
.PP
\fIget_interconnect ( \f(CI$ID\fI )\fR
.IX Subsection "get_interconnect ( $ID )"
.PP
.Vb 1
\&        my $interconnect = $ucs\->get_interconnect(A);
\&
\&        print $interconnect\->model;
.Ve
.PP
Returns a Cisco::UCS::Interconnect object for the specified interconnect \s-1ID\s0
(either A or B).
.PP
This method always queries the \s-1UCSM\s0 for information on the specified 
interconnect \- contrast this with the behaviour of the caching method 
\&\fI\f(BIinterconnect()\fI\fR.
.PP
Please see the \fBCaching Methods\fR section in \fB\s-1NOTES\s0\fR for further information.
.PP
\fIget_interconnects ()\fR
.IX Subsection "get_interconnects ()"
.PP
.Vb 1
\&        my @interconnects = $ucs\->get_interconnects;
\&
\&        foreach my $ic (@interconnects) {
\&                print "Interconnect $ic\->id operability is $ic\->operability\en";
\&        }
.Ve
.PP
Returns an array of Cisco::UCS::Interconnect objects.  This is a non-caching 
method.
.PP
\fIblade ( \f(CI$ID\fI )\fR
.IX Subsection "blade ( $ID )"
.PP
.Vb 1
\&        print "Blade 1/1 serial : " . $ucs\->blade(\*(Aq1/1\*(Aq)\->serial . "\en;
.Ve
.PP
Returns a Cisco::UCS::Blade object representing the specified blade as given by
the value of \f(CW$ID\fR.  The blade \s-1ID\s0 should be given using the standard Cisco \s-1UCS\s0 
blade identification form as used in the \s-1UCSM CLI\s0; namely 
\&\fBchassis_id/blade_id\fR where both chassis_id and blade_id are valid numerical 
values for the target cluster.  Note that you will have to enclose the value of
\&\f(CW$ID\fR in quotation marks to avoid a syntax error.
.PP
Note that this is a caching method and the default behaviour of this method is 
to return a cached copy of a previously retrieved Cisco::UCS::Blade object if 
one is available.  If a non-cached object is required, then please consider 
using the equivalent \fBget_blade\fR method below.
.PP
Please see the \fBCaching Methods\fR section in \fB\s-1NOTES\s0\fR for further information.
.PP
\fIget_blade ( \f(CI$ID\fI )\fR
.IX Subsection "get_blade ( $ID )"
.PP
.Vb 1
\&        print "Blade 1/1 serial : " . $ucs\->get_blade(\*(Aq1/1\*(Aq)\->serial . "\en;
.Ve
.PP
Returns a Cisco::UCS::Blade object representing the specified blade as given by
the value of \f(CW$ID\fR.  The blade \s-1ID\s0 should be given using the standard Cisco \s-1UCS\s0 
blade identification form as used in the \s-1UCSM CLI\s0; namely 
\&\fBchassis_id/blade_id\fR where both chassis_id and blade_id are valid numerical 
values for the target cluster.  Note that you will have to enclose the value of
\&\f(CW$ID\fR in quotation marks to avoid a syntax error.
.PP
Note that this method is non-caching and always queries the \s-1UCSM\s0 for 
information.  Consequently may be more expensive than the equivalent caching 
\&\fBblade\fR method described above.
.PP
\fIget_blades ()\fR
.IX Subsection "get_blades ()"
.PP
.Vb 1
\&        my @blades = $ucs\->get_blades();
\&
\&        foreach my $blade ( @blades ) {
\&                print "Model: $blade\->{model}\en";
\&        }
.Ve
.PP
Returns an array of \fBCisco::UCS::Blade\fR objects with each object representing 
a blade within the \s-1UCS\s0 cluster.
.PP
\fIchassis ( \f(CI$ID\fI )\fR
.IX Subsection "chassis ( $ID )"
.PP
.Vb 4
\&        my $chassis = $ucs\->chassis(1);
\&        print "Chassis 1 serial : " . $chassis\->serial . "\en";
\&        # or
\&        print "Chassis 1 serial : " . $ucs\->chassis(1)\->serial . "\en";
\&
\&        foreach my $psu ( $ucs\->chassis(1)\->get_psus ) {
\&                print $psu\->id . " thermal : " . $psu\->thermal . "\en"
\&        }
.Ve
.PP
Returns a Cisco::UCS::Chassis object representing the chassis identified by by 
the specified value of \s-1ID.\s0
.PP
Note that this is a caching method and the default behaviour of this method is 
to return a cached copy of a previously retrieved Cisco::UCS::Chassis object if
one is available.  If a non-cached object is required, then please consider 
using the equivalent \fBget_chassis\fR method below.
.PP
Please see the \fBCaching Methods\fR section in \fB\s-1NOTES\s0\fR for further information.
.PP
\fIget_chassis ( \f(CI$ID\fI )\fR
.IX Subsection "get_chassis ( $ID )"
.PP
.Vb 4
\&        my $chassis = $ucs\->get_chassis(1);
\&        print "Chassis 1 label : " . $chassis\->label . "\en";
\&        # or
\&        print "Chassis 1 label : " . $ucs\->get_chassis(1)\->label . "\en";
.Ve
.PP
Returns a Cisco::UCS::Chassis object representing the chassis identified by the
specified value of \s-1ID.\s0
.PP
Note that this method is non-caching and always queries the \s-1UCSM\s0 for 
information.  Consequently may be more expensive than the equivalent caching 
\&\fBchassis\fR method described above.
.PP
\fIget_chassiss\fR
.IX Subsection "get_chassiss"
.PP
.Vb 1
\&        my @chassis = $ucs\->get_chassiss();
\&
\&        foreach my $chassis (@chassis) {
\&                print "Chassis $chassis\->{id} serial number: $chassis\->{serial}\en";
\&        }
.Ve
.PP
Returns an array of Cisco::UCS::Chassis objects representing all chassis 
present within the cluster.
.PP
Note that this method is named get_chassiss (spelt with two sets of double-s's)
as there exists no English language collective plural for the word chassis.
.PP
\fIfull_state_backup\fR
.IX Subsection "full_state_backup"
.PP
This method generates a new \*(L"full state\*(R" type backup for the target \s-1UCS\s0 
cluster.  Internally, this method is implemented as a wrapper method around the
private backup method.  Required parameters for this method:
.IP "backup_proto" 3
.IX Item "backup_proto"
The protocol to use for transferring the backup from the target \s-1UCS\s0 cluster to 
the backup host.  Must be one of: ftp, tftp, scp or sftp.
.IP "backup_host" 3
.IX Item "backup_host"
The host to which the backup will be transferred.
.IP "backup_target" 3
.IX Item "backup_target"
The fully qualified name of the file to which the backup is to be saved on the 
backup host.  This should include the full directory path and the target 
filename.
.IP "backup_username" 3
.IX Item "backup_username"
The username to be used for creation of the backup file on the backup host.  
This username should have write/modify file system access to the backup target 
location on the backup host using the protocol specified in the backup-proto 
attribute.
.IP "backup_passwd" 3
.IX Item "backup_passwd"
The plaintext password of the user specified for the backup_username attribute.
.PP
\fIall_config_backup\fR
.IX Subsection "all_config_backup"
.PP
This method generates a new \*(L"all configuration\*(R" backup for the target \s-1UCS\s0 
cluster.  Internally, this method is implemented as a wrapper method around the
private backup method.  For the required parameters for this method, please 
refer to the documentation of the \fBfull_state_backup\fR method.
.PP
\fIsystem_config_backup\fR
.IX Subsection "system_config_backup"
.PP
This method generates a new \*(L"system configuration\*(R" backup for the target \s-1UCS\s0 
cluster.  Internally, this method is implemented as a wrapper method around the
private backup method.  For the required parameters for this method, please 
refer to the documentation of the \fBfull_state_backup\fR method.
.PP
\fIlogical_config_backup\fR
.IX Subsection "logical_config_backup"
.PP
This method generates a new \*(L"logical configuration\*(R" backup for the target \s-1UCS\s0 
cluster.  Internally, this method is implemented as a wrapper method around the
private backup method.  For the required parameters for this method, please 
refer to the documentation of the \fBfull_state_backup\fR method.
.SH "NOTES"
.IX Header "NOTES"
.SS "Caching Methods"
.IX Subsection "Caching Methods"
Several methods in the module return cached objects that have been previously 
retrieved by querying \s-1UCSM,\s0 this is done to improve the performance of methods 
where a cached copy is satisfactory for the intended purpose.  The trade off 
for the speed and lower resource requirement is that the cached copy is not 
guaranteed to be an up-to-date representation of the current state of the 
object.
.PP
As a matter of convention, all caching methods are named after the singular 
object (i.e. \fBinterconnect()\fR, \fBchassis()\fR) whilst non-caching methods are named 
\&\fIget_<object\fR>.  Non-caching methods will always query \s-1UCSM\s0 for the object,
as will requests for cached objects not present in cache.
.IP "\(bu" 3
The documentation could be cleaner and more thorough.  The module was written 
some time ago with only minor amounts of time and effort invested since.
There's still a vast opportunity for improvement.
.IP "\(bu" 3
Better error detection and handling.  Liberal use of Carp::croak should ensure 
that we get some minimal diagnostics and die nicely, and if used according to 
instructions, things should generally work.  When they don't however, it would 
be nice to know why.
.IP "\(bu" 3
Detection of request and return type.  Most of the methods are fairly 
explanatory in what they return, however it would be nice to make better use of
wantarray to detect what the user wants and handle it accordingly.
.IP "\(bu" 3
Clean up of the \s-1UCS\s0 package to remove unused methods and improve the ones that 
we keep.  I'm still split on leaving some of the methods common to most object 
type (fans, psus) in the main package.
.SH "AUTHOR"
.IX Header "AUTHOR"
Luke Poskitt, \f(CW\*(C`<ltp at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-cisco\-ucs at rt.cpan.org\*(C'\fR, 
or through the web interface at 
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Cisco\-UCS>.  I will be 
notified, and then you'll automatically be notified of progress on your bug as 
I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Cisco::UCS
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Cisco\-UCS>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Cisco\-UCS>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Cisco\-UCS>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Cisco\-UCS/>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2012 Luke Poskitt.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
