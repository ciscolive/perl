.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooX::Types::MooseLike::Numeric 3"
.TH MooX::Types::MooseLike::Numeric 3 "2017-01-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooX::Types::MooseLike::Numeric \- Moo types for numbers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  package MyPackage;
\&  use Moo;
\&  use MooX::Types::MooseLike::Numeric qw(PositiveInt);
\&
\&  has "daily_breathes" => (
\&    is  => \*(Aqrw\*(Aq,
\&    isa => PositiveInt
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A set of numeric types to be used in Moo-based classes. Adapted from MooseX::Types::Common::Numeric
.SH "TYPES (subroutines)"
.IX Header "TYPES (subroutines)"
Available types are listed below.
.IP "PositiveNum" 4
.IX Item "PositiveNum"
.PD 0
.IP "PositiveOrZeroNum" 4
.IX Item "PositiveOrZeroNum"
.IP "PositiveInt" 4
.IX Item "PositiveInt"
.IP "PositiveOrZeroInt" 4
.IX Item "PositiveOrZeroInt"
.IP "NegativeNum" 4
.IX Item "NegativeNum"
.IP "NegativeOrZeroNum" 4
.IX Item "NegativeOrZeroNum"
.IP "NegativeInt" 4
.IX Item "NegativeInt"
.IP "NegativeOrZeroInt" 4
.IX Item "NegativeOrZeroInt"
.IP "SingleDigit" 4
.IX Item "SingleDigit"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MooX::Types::MooseLike \- a type builder.
.PP
MooX::Types::MooseLike::Base \- a set of basic types.
.PP
MooX::Types::MooseLike::Email, MooX::Types::MooseLike::DateTime
.SH "AUTHOR"
.IX Header "AUTHOR"
mateu \- Mateu X. Hunter (cpan:MATEU) <hunter@missoula.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
amidos \- Dmitry Matrosov (cpan:AMIDOS) <amidos@amidos.ru>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2011\-2015 the MooX::Types::MooseLike::Numeric \*(L"\s-1AUTHOR\*(R"\s0
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
