.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::Pg::Migrations 3"
.TH Mojo::Pg::Migrations 3 "2020-10-24" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Pg::Migrations \- Migrations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::Pg::Migrations;
\&
\&  my $migrations = Mojo::Pg::Migrations\->new(pg => $pg);
\&  $migrations\->from_file(\*(Aq/home/sri/migrations.sql\*(Aq)\->migrate;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Pg::Migrations is used by Mojo::Pg to allow database schemas to evolve easily over time. A migration file
is just a collection of sql blocks, with one or more statements, separated by comments of the form \f(CW\*(C`\-\- VERSION
UP/DOWN\*(C'\fR.
.PP
.Vb 5
\&  \-\- 1 up
\&  CREATE TABLE messages (message TEXT);
\&  INSERT INTO messages VALUES (\*(AqI ♥ Mojolicious!\*(Aq);
\&  \-\- 1 down
\&  DROP TABLE messages;
\&
\&  \-\- 2 up (...you can comment freely here...)
\&  CREATE TABLE stuff (whatever INT);
\&  \-\- 2 down
\&  DROP TABLE stuff;
.Ve
.PP
The idea is to let you migrate from any version, to any version, up and down. Migrations are very safe, because they
are performed in transactions and only one can be performed at a time. If a single statement fails, the whole migration
will fail and get rolled back. Every set of migrations has a \*(L"name\*(R", which is stored together with the currently
active version in an automatically created table named \f(CW\*(C`mojo_migrations\*(C'\fR.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::Pg::Migrations implements the following attributes.
.SS "name"
.IX Subsection "name"
.Vb 2
\&  my $name    = $migrations\->name;
\&  $migrations = $migrations\->name(\*(Aqfoo\*(Aq);
.Ve
.PP
Name for this set of migrations, defaults to \f(CW\*(C`migrations\*(C'\fR.
.SS "pg"
.IX Subsection "pg"
.Vb 2
\&  my $pg      = $migrations\->pg;
\&  $migrations = $migrations\->pg(Mojo::Pg\->new);
.Ve
.PP
Mojo::Pg object these migrations belong to. Note that this attribute is weakened.
.SH "METHODS"
.IX Header "METHODS"
Mojo::Pg::Migrations inherits all methods from Mojo::Base and implements the following new ones.
.SS "active"
.IX Subsection "active"
.Vb 1
\&  my $version = $migrations\->active;
.Ve
.PP
Currently active version.
.SS "from_data"
.IX Subsection "from_data"
.Vb 3
\&  $migrations = $migrations\->from_data;
\&  $migrations = $migrations\->from_data(\*(Aqmain\*(Aq);
\&  $migrations = $migrations\->from_data(\*(Aqmain\*(Aq, \*(Aqfile_name\*(Aq);
.Ve
.PP
Extract migrations from a file in the \s-1DATA\s0 section of a class with \*(L"data_section\*(R" in Mojo::Loader, defaults to using
the caller class and \*(L"name\*(R".
.PP
.Vb 7
\&  _\|_DATA_\|_
\&  @@ migrations
\&  \-\- 1 up
\&  CREATE TABLE messages (message TEXT);
\&  INSERT INTO messages VALUES (\*(AqI ♥ Mojolicious!\*(Aq);
\&  \-\- 1 down
\&  DROP TABLE messages;
.Ve
.SS "from_file"
.IX Subsection "from_file"
.Vb 1
\&  $migrations = $migrations\->from_file(\*(Aq/home/sri/migrations.sql\*(Aq);
.Ve
.PP
Extract migrations from a file.
.SS "from_string"
.IX Subsection "from_string"
.Vb 6
\&  $migrations = $migrations\->from_string(
\&    \*(Aq\-\- 1 up
\&     CREATE TABLE foo (bar INT);
\&     \-\- 1 down
\&     DROP TABLE foo;\*(Aq
\&  );
.Ve
.PP
Extract migrations from string.
.SS "latest"
.IX Subsection "latest"
.Vb 1
\&  my $version = $migrations\->latest;
.Ve
.PP
Latest version available.
.SS "migrate"
.IX Subsection "migrate"
.Vb 2
\&  $migrations = $migrations\->migrate;
\&  $migrations = $migrations\->migrate(3);
.Ve
.PP
Migrate from \*(L"active\*(R" to a different version, up or down, defaults to using \*(L"latest\*(R". All version numbers need
to be positive, with version \f(CW0\fR representing an empty database.
.PP
.Vb 2
\&  # Reset database
\&  $migrations\->migrate(0)\->migrate;
.Ve
.SS "sql_for"
.IX Subsection "sql_for"
.Vb 1
\&  my $sql = $migrations\->sql_for(5, 10);
.Ve
.PP
Get \s-1SQL\s0 to migrate from one version to another, up or down.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
You can set the \f(CW\*(C`MOJO_MIGRATIONS_DEBUG\*(C'\fR environment variable to get some advanced diagnostics information printed to
\&\f(CW\*(C`STDERR\*(C'\fR.
.PP
.Vb 1
\&  MOJO_MIGRATIONS_DEBUG=1
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojo::Pg, Mojolicious::Guides, <https://mojolicious.org>.
