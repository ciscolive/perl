.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catmandu::Fix::Bind::hashmap 3"
.TH Catmandu::Fix::Bind::hashmap 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catmandu::Fix::Bind::hashmap \- a binder to add key/value pairs to an internal hashmap
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& # Find non unique ISBN numbers in the record stream
\& do hashmap(join: \*(Aq,\*(Aq)
\&    copy_field(isbn,key)
\&    copy_field(_id,value)
\& end
\&
\& # will export to the JSON exporter a hash map containing all isbn occurrences in the stream
\&
\& { "_id": "9781565920422" , "value": "rec0001,rec0329,rec1032" }
\& { "_id": "9780596004927" , "value": "rec0718" }
\&
\& # Ignore the values. Count the number of ISBN occurrences in a stream
\& # File: count.fix:
\& do hashmap(count: 1)
\&    copy_field(isbn,key)
\& end
\&
\& # Use the Null exporter to suppress the normal output
\& $ cat /tmp/data.json | catmandu convert JSON \-\-fix count.fix to Null
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The hashmap binder will insert all key/value pairs given to a internal hashmap
that can be exported using an Catmandu::Exporter.
.PP
The 'key' fields in the internal hashmap will be exported as '_id' field.
.PP
If the key in the hashmap Bind is an \s-1ARRAY,\s0 then multiple key/value pairs will
be inserted into the hashmap.
.PP
By default all the values will be added as an array to the hashmap. Every key
will have one or more values. Use the 'join' parameter to create a string
out of this array.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.SS "exporter: \s-1EXPORTER\s0"
.IX Subsection "exporter: EXPORTER"
The name of an exporter to send the results to. Default: \s-1JSON\s0  Extra parameters can be added:
.PP
.Vb 3
\&    do hashmap(exporter: JSON, file:/tmp/data.json, count: 1)
\&      ...
\&    end
.Ve
.SS "store: \s-1STORE\s0"
.IX Subsection "store: STORE"
Send the output to a store instead of an exporter. Extra parameters can be added:
.PP
.Vb 3
\&    do hashmap(store: MongoDB, database_name: test, bag: data, count: 1)
\&      ...
\&    end
.Ve
.SS "uniq: 0|1"
.IX Subsection "uniq: 0|1"
When set to 1, then all values in the key 'value' will be made unique
.SS "join: \s-1CHAR\s0"
.IX Subsection "join: CHAR"
Join all the values of a key using a delimiter.
.SS "count: 0|1"
.IX Subsection "count: 0|1"
Don't store the values only count the number of key occurrences.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catmandu::Fix::Bind
