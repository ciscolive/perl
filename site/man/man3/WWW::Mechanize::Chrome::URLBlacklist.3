.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::Mechanize::Chrome::URLBlacklist 3"
.TH WWW::Mechanize::Chrome::URLBlacklist 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::Mechanize::Chrome::URLBlacklist \- blacklist URLs from fetching
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use WWW::Mechanize::Chrome;
\&    use WWW::Mechanize::Chrome::URLBlacklist;
\&
\&    my $mech = WWW::Mechanize::Chrome\->new();
\&    my $bl = WWW::Mechanize::Chrome::URLBlacklist\->new(
\&        blacklist => [
\&            qr!\ebgoogleadservices\eb!,
\&        ],
\&        whitelist => [
\&            qr!\ebcorion\e.net\eb!,
\&        ],
\&
\&        # fail all unknown URLs
\&        default => \*(AqfailRequest\*(Aq,
\&        # allow all unknown URLs
\&        # default => \*(AqcontinueRequest\*(Aq,
\&
\&        on_default => sub {
\&            warn "Ignored URL $_[0] (action was \*(Aq$_[1]\*(Aq)",
\&        },
\&    );
\&    $bl\->enable($mech);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module allows an easy approach to whitelisting/blacklisting URLs
so that Chrome does not make requests to the blacklisted URLs.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.ie n .SS """whitelist"""
.el .SS "\f(CWwhitelist\fP"
.IX Subsection "whitelist"
Arrayref containing regular expressions of URLs to always allow fetching.
.ie n .SS """blacklist"""
.el .SS "\f(CWblacklist\fP"
.IX Subsection "blacklist"
Arrayref containing regular expressions of URLs to always deny fetching unless
they are matched by something in the \f(CW\*(C`whitelist\*(C'\fR.
.ie n .SS """default"""
.el .SS "\f(CWdefault\fP"
.IX Subsection "default"
.Vb 1
\&  default => \*(AqcontinueRequest\*(Aq
.Ve
.PP
The action to take if an \s-1URL\s0 appears neither in the \f(CW\*(C`whitelist\*(C'\fR nor
in the \f(CW\*(C`blacklist\*(C'\fR. The default is \f(CW\*(C`continueRequest\*(C'\fR. If you want to block
all unknown URLs, use \f(CW\*(C`failRequest\*(C'\fR
.ie n .SS """on_default"""
.el .SS "\f(CWon_default\fP"
.IX Subsection "on_default"
.Vb 4
\&  on_default => sub {
\&      my( $url, $action ) = @_;
\&      warn "Unknown URL <$url>";
\&  };
.Ve
.PP
This callback is invoked for every \s-1URL\s0 that is neither in the whitelist nor
in the blacklist. This is useful to see what URLs are still missing a category.
.ie n .SS """_mech"""
.el .SS "\f(CW_mech\fP"
.IX Subsection "_mech"
(internal) The WWW::Mechanize::Chrome instance we are connected to
.ie n .SS """_request_listener"""
.el .SS "\f(CW_request_listener\fP"
.IX Subsection "_request_listener"
(internal) The request listener created by WWW::Mechanize::Chrome while listening
for \s-1URL\s0 messages
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """\->new"""
.el .SS "\f(CW\->new\fP"
.IX Subsection "->new"
.Vb 12
\&  my $bl = WWW::Mechanize::Chrome::URLBlacklist\->new(
\&      blacklist => [
\&          qr!\ebgoogleadservices\eb!,
\&          qr!\eioam\e.de\eb!,
\&          qr!\eburchin\e.js$!,
\&          qr!.*\e.(?:woff|ttf)$!,
\&          qr!.*\e.css(\e?\ew+)?$!,
\&          qr!.*\e.png$!,
\&          qr!.*\ebfavicon.ico$!,
\&      ],
\&  );
\&  $bl\->enable( $mech );
.Ve
.PP
Creates a new instance of a blacklist, but does \fBnot\fR activate it yet.
See \f(CW\*(C`\->enable\*(C'\fR for that.
.ie n .SS """\->enable"""
.el .SS "\f(CW\->enable\fP"
.IX Subsection "->enable"
.Vb 1
\&  $bl\->enable( $mech );
.Ve
.PP
Attaches the blacklist to a WWW::Mechanize::Chrome object.
.ie n .SS """\->enable"""
.el .SS "\f(CW\->enable\fP"
.IX Subsection "->enable"
.Vb 1
\&  $bl\->disable( $mech );
.Ve
.PP
Removes the blacklist to a WWW::Mechanize::Chrome object.
.SH "REPOSITORY"
.IX Header "REPOSITORY"
The public repository of this module is
<https://github.com/Corion/www\-mechanize\-chrome>.
.SH "SUPPORT"
.IX Header "SUPPORT"
The public support forum of this module is <https://perlmonks.org/>.
.SH "TALKS"
.IX Header "TALKS"
I've given a German talk at \s-1GPW 2017,\s0 see <http://act.yapc.eu/gpw2017/talk/7027>
and <https://corion.net/talks> for the slides.
.PP
At The Perl Conference 2017 in Amsterdam, I also presented a talk, see
<http://act.perlconference.org/tpc\-2017\-amsterdam/talk/7022>.
The slides for the English presentation at TPCiA 2017 are at
<https://corion.net/talks/WWW\-Mechanize\-Chrome/www\-mechanize\-chrome.en.html>.
.SH "BUG TRACKER"
.IX Header "BUG TRACKER"
Please report bugs in this module via the \s-1RT CPAN\s0 bug queue at
<https://rt.cpan.org/Public/Dist/Display.html?Name=WWW\-Mechanize\-Chrome>
or via mail to www\-mechanize\-Chrome\-Bugs@rt.cpan.org <mailto:www-mechanize-Chrome-Bugs@rt.cpan.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR
.SH "COPYRIGHT (c)"
.IX Header "COPYRIGHT (c)"
Copyright 2010\-2020 by Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
This module is released under the same terms as Perl itself.
