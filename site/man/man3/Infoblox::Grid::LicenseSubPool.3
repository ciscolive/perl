.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::LicenseSubPool 3"
.TH Infoblox::Grid::LicenseSubPool 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::LicenseSubPool \- a license subpool object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The license subpool object shows the license installments that have the same expiry date.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::Grid::LicenseSubPool object is a read-only object and does not require manual construction.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The object does not support any session methods.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
.SS "Infoblox::Grid::LicensePool\->subpools( )"
.IX Subsection "Infoblox::Grid::LicensePool->subpools( )"
.RS 4
Use this method to retrieve the license pool subpools.
For parameters and return values see Infoblox::Grid::LicensePool\->subpools.
.Sp
\&\fBExample\fR
.Sp
.Vb 2
\& #Get subpools value
\& my $value = $object\->subpools();
.Ve
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of a license subpool object.
.SS "expiration( )"
.IX Subsection "expiration( )"
.RS 4
Use this method to retrieve the license subpool expiration timestamp. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the number of seconds elapsed since January 1, 1970, in \s-1UTC\s0 format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get expiration value
\& my $expiration = $object\->expiration();
.Ve
.RE
.RS 4
.RE
.SS "installed( )"
.IX Subsection "installed( )"
.RS 4
Use this method to retrive the total number of dynamic licenses allowed for this license sub pool. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get installed value
\& my $value = $object\->installed();
.Ve
.RE
.RS 4
.RE
.SS "key( )"
.IX Subsection "key( )"
.RS 4
Use this method to retrieve the license string for the license subpool. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get key value
\& my $value = $object\->key();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,
Infoblox::Grid::LicensePool,
Infoblox::Grid::LicensePool\->subpools,
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 21:" 4
.IX Item "Around line 21:"
You can't have =items (as at line 26) unless the first thing after the =over is an =item
.IP "Around line 33:" 4
.IX Item "Around line 33:"
=back without =over
