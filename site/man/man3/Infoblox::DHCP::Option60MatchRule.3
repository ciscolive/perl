.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::Option60MatchRule 3"
.TH Infoblox::DHCP::Option60MatchRule 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::Option60MatchRule \- DHCP  Option60MatchRule object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An Option60MatchRule object allows specifying match rules for Option 60 globally.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 7
\& my $option60_match_rule = Infoblox::DHCP::Option60MatchRule\->new(
\&                            match_value      => $string,          #Required
\&                            option_space     => $string,          #Required
\&                            is_substring     => "true" | "false", #Optional / Default is undefined
\&                            substring_offset => $num,             #Optional / Default is undefined
\&                            substring_length => $num              #Optional / Default is undefined
\&                          );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to be applied to a \s-1DHCP\s0 Option60MatchRule object.
.SS "Infoblox::Grid::DHCP\->option60_match_rules( )"
.IX Subsection "Infoblox::Grid::DHCP->option60_match_rules( )"
.RS 4
Use this function to specify match rule for option60 at grid level. See Infoblox::Grid::DHCP\->\fBoption60_match_rules()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Construct a DHCP Option60MatchRule object
\& my $option60_match_rule = Infoblox::DHCP::Option60MatchRule\->new(
\&                                        "option_space" => "infospace",
\&                                        "match_value" => "Nortel\-i2004\-A",
\&                                        "is_substring" => "true",
\&                                        "substring_offset" => "8",
\&                                        "substring_length" => "14"
\&                                      );
\&
\& # Configure DHCP Option60MatchRule on the Grid DHCP object
\& my $response = $grid_dhcp\->option60_match_rules([$option60_match_rule]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member::DHCP\->option60_match_rules( )"
.IX Subsection "Infoblox::Grid::Member::DHCP->option60_match_rules( )"
.RS 4
Use this function to specify match rule for option60 at member level. See Infoblox::Grid::Member::DHCP\->\fBoption60_match_rules()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Construct a DHCP Option60MatchRule object
\& my $option60_match_rule = Infoblox::DHCP::Option60MatchRule\->new(
\&                                        "option_space" => "infospace",
\&                                        "match_value" => "Nortel\-i2004\-A",
\&                                        "is_substring" => "true",
\&                                        "substring_offset" => "10",
\&                                        "substring_length" => "24"
\&                                      );
\&
\& # Configure DHCP Option60MatchRule on the Grid Member DHCP object
\& my $response = $grid_member_dhcp\->option60_match_rules([$option60_match_rule]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 Option60MatchRule object.
.SS "match_value( )"
.IX Subsection "match_value( )"
.RS 4
Use this method to set or retrieve the match value of a \s-1DHCP\s0 Option60MatchRule object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired match value in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get match_value
\& my $match_value = $option60_match_rule\->match_value();
\& # Modify match_value
\& $option60_match_rule\->match_value("SUNW");
.Ve
.RE
.RS 4
.RE
.SS "option_space( )"
.IX Subsection "option_space( )"
.RS 4
Use this method to set or retrieve the option space of a \s-1DHCP\s0 Option60MatchRule object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an string that contains defined Infoblox::DHCP::OptionSpace object. See Infoblox::DHCP::OptionSpace for parameters and return values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get option_space
\& my $match_value = $option60_match_rule\->option_space();
\& # Modify option_space
\& $option60_match_rule\->option_space("new_option");
.Ve
.RE
.RS 4
.RE
.SS "is_substring( )"
.IX Subsection "is_substring( )"
.RS 4
Use this method to set or retrieve the is_substring flag of a \s-1DHCP\s0 Option60MatchRule object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the is_substring flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get is_substring
\& my $is_substring = $option60_match_rule\->is_substring();
\& # Modify is_substring
\& $option60_match_rule\->is_substring("true");
.Ve
.RE
.RS 4
.RE
.SS "substring_offset( )"
.IX Subsection "substring_offset( )"
.RS 4
Use this method to set or retrieve the substring_offset of a \s-1DHCP\s0 Option60MatchRule object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The substring_offset for the \s-1DHCP\s0 Option60MatchRule object (range from 0 to 65535). The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get substring_offset
\& my $substring_offset = $option60_match_rule\->substring_offset();
\& # Modify substring_offset
\& $option60_match_rule\->substring_offset("10");
.Ve
.RE
.RS 4
.RE
.SS "substring_length( )"
.IX Subsection "substring_length( )"
.RS 4
Use this method to set or retrieve the substring_length of a \s-1DHCP\s0 Option60MatchRule object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The substring_length for the \s-1DHCP\s0 Option60MatchRule object (range from 0 to 65535). The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get substring_length
\& my $substring_length = $option60_match_rule\->substring_length();
\& # Modify substring_length
\& $option60_match_rule\->substring_length("23");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, and remove. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 Option60MatchRule insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& my $option_space1 = Infoblox::DHCP::OptionSpace\->new(
\&                                                "name" => "infospace"
\&                                                );
\& my $response = $session\->add( $option_space1);
\& print "Add option space operation success \en" if ($response );
\& print "Add option space operation failed  \en" if ( not $response );
\&
\& #Create a DHCP OptionDefinition object.>
\& my $option60_match_rule = Infoblox::DHCP::Option60MatchRule\->new(
\&                                                 "option_space" => "infospace",
\&                                                 "match_value" => "Nortel\-i2004\-A",
\&                                                 "is_substring" => "true",
\&                                                 "substring_offset" => "0",
\&                                                 "substring_length" => "14"
\&                                                 );
\& unless ($option60_match_rule) {
\&      die("Construct DHCP Option60MatchRule failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& #Get on Grid DHCP object to add Option60MatchRule object>
\& my @result = $session\->get(
\&     object => "Infoblox::Grid::DHCP",
\&     grid   => "Infoblox"
\&     )
\&     or die("get DHCP failed: ",
\&                $session\->status_code(). ":" .$session\->status_detail());
\& print "get grid DHCP Objcet successful.\en";
\&
\& unless (scalar(@result) == 0) {
\& my $griddhcp = $result[0];
\& if ($griddhcp) {
\&
\&  $griddhcp\->option60_match_rules([$option60_match_rule]);
\&
\&   #Applying the changes to appliance through session.
\&   $session\->modify($griddhcp)
\&       or die("Modify DHCP failed: ",
\&          $session\->status_code(). ":" .$session\->status_detail());
\&   print"Modified Grid DHCP Object successfully.\en";
\&  }
\&  } else {
\&       print "No Grid DHCP object found.";
\& }
\&
\& #To remove Option60MatchRule object in Grid DHCP object>
\& my @result = $session\->get(
\&     object => "Infoblox::Grid::DHCP",
\&     grid   => "Infoblox"
\&     )
\&     or die("get DHCP failed: ",
\&                $session\->status_code(). ":" .$session\->status_detail());
\& print "get grid DHCP Objcet successful.\en";
\&
\& unless (scalar(@result) == 0) {
\& my $griddhcp = $result[0];
\& if ($griddhcp) {
\&
\& $griddhcp\->option60_match_rules(undef);
\&
\&   #Applying the changes to appliance through session.
\&   $session\->modify($griddhcp)
\&       or die("Modify DHCP failed: ",
\&          $session\->status_code(). ":" .$session\->status_detail());
\&   print"Modified Grid DHCP Object successfully to remove Option60MatchRule object.\en";
\&   }
\&  } else {
\&       print "No Grid DHCP object found.";
\& }
\&
\& #Get OptionSpace object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::OptionSpace",
\&     name   => "infospace"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get OptionSpace object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get OptionSpace object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove OptionSpace object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "OptionSpace object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,Infoblox::Grid::DHCP, Infoblox::Grid::Member::DHCP,Infoblox::DHCP::OptionSpace, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
