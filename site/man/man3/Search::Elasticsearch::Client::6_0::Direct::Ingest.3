.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search::Elasticsearch::Client::6_0::Direct::Ingest 3"
.TH Search::Elasticsearch::Client::6_0::Direct::Ingest 3 "2020-06-26" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Search::Elasticsearch::Client::6_0::Direct::Ingest \- A client for accessing the Ingest API
.SH "VERSION"
.IX Header "VERSION"
version 6.81
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides methods to access the Ingest \s-1API,\s0 such as creating,
getting, deleting and simulating ingest pipelines.
.PP
It does Search::Elasticsearch::Role::Client::Direct.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """put_pipeline()"""
.el .SS "\f(CWput_pipeline()\fP"
.IX Subsection "put_pipeline()"
.Vb 4
\&    $response = $e\->ingest\->put_pipeline(
\&        id   => $id,                # required
\&        body => { pipeline defn }   # required
\&    );
.Ve
.PP
The \f(CW\*(C`put_pipeline()\*(C'\fR method creates or updates a pipeline with the specified \s-1ID.\s0
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`timeout\*(C'\fR
.PP
See the put pipeline docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/put-pipeline-api.html>
for more information.
.ie n .SS """get_pipeline()"""
.el .SS "\f(CWget_pipeline()\fP"
.IX Subsection "get_pipeline()"
.Vb 3
\&    $response = $e\->ingest\->get_pipeline(
\&        id   => \e@id,               # optional
\&    );
.Ve
.PP
The \f(CW\*(C`get_pipeline()\*(C'\fR method returns pipelines with the specified IDs (or all pipelines).
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`timeout\*(C'\fR
.PP
See the get pipeline docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/get-pipeline-api.html>
for more information.
.ie n .SS """delete_pipeline()"""
.el .SS "\f(CWdelete_pipeline()\fP"
.IX Subsection "delete_pipeline()"
.Vb 3
\&    $response = $e\->ingest\->delete_pipeline(
\&        id   => $id,                # required
\&    );
.Ve
.PP
The \f(CW\*(C`delete_pipeline()\*(C'\fR method deletes the pipeline with the specified \s-1ID.\s0
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`master_timeout\*(C'\fR,
    \f(CW\*(C`timeout\*(C'\fR
.PP
See the delete pipeline docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-pipeline-api.html>
for more information.
.ie n .SS """simulate()"""
.el .SS "\f(CWsimulate()\fP"
.IX Subsection "simulate()"
.Vb 4
\&    $response = $e\->ingest\->put_pipeline(
\&        id   => $id,                # optional
\&        body => { simulate args }   # required
\&    );
.Ve
.PP
The \f(CW\*(C`simulate()\*(C'\fR method executes the pipeline specified by \s-1ID\s0 or inline in the body
against the docs provided in the body and provides debugging output of the execution
process.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`verbose\*(C'\fR
.PP
See the simulate pipeline docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/simulate-pipeline-api.html>
for more information.
.ie n .SS """simulate()"""
.el .SS "\f(CWsimulate()\fP"
.IX Subsection "simulate()"
.Vb 4
\&    $response = $e\->ingest\->put_pipeline(
\&        id   => $id,                # optional
\&        body => { simulate args }   # required
\&    );
.Ve
.PP
The \f(CW\*(C`simulate()\*(C'\fR method executes the pipeline specified by \s-1ID\s0 or inline in the body
against the docs provided in the body and provides debugging output of the execution
process.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`verbose\*(C'\fR
.PP
See the simulate pipeline docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/simulate-pipeline-api.html>
for more information.
.ie n .SS """processor_grok"""
.el .SS "\f(CWprocessor_grok\fP"
.IX Subsection "processor_grok"
.Vb 1
\&    $response = $e\->inges\->processor_grok()
.Ve
.PP
Retrieves the configured patterns associated with the Grok processor.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the grok processor docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/grok-processor.html>
for more information.
.SH "AUTHOR"
.IX Header "AUTHOR"
Enrico Zimuel <enrico.zimuel@elastic.co>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Elasticsearch \s-1BV.\s0
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
