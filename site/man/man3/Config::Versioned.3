.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Config::Versioned 3"
.TH Config::Versioned 3 "2014-06-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Config::Versioned \- Simple, versioned access to configuration data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Config::Versioned;
\&
\&    my $cfg = Config::Versioned\->new();
\&    my $param1 = $cfg\->get(\*(Aqsubsystem1.group.param1\*(Aq);
\&    my $old1 = $cfg\->get(\*(Aqsubsystem1.group.param1\*(Aq, $version);
\&    my @keys = $cfg\->list(\*(Aqsubsys1.db\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Config::Versioned allows an application to access configuration parameters
not only by parameter name, but also by version number. This allows for
the configuration subsystem to store previous versions of the configuration
parameters. When requesting the value for a specific attribute, the programmer
specifies whether to fetch the most recent value or a previous value.
.PP
This is useful for long-running tasks such as in a workflow-based application
where task-specific values (e.g.: profiles) are static over the life of a
workflow, while global values (e.g.: name of an \s-1LDAP\s0 server to be queried)
should always be the most recent.
.PP
Config::Versioned handles the versions by storing the configuration data
in an internal Git repository. Each import of configuration files into
the repository is documented with a commit. When a value is fetched, it is
this commit that is referenced directly when specifying the version.
.PP
The access to the individual attributes is via a named-parameter scheme, where 
the key is a dot-separated string.
.PP
Currently, \f(CW\*(C`Config::Std\*(C'\fR is used for the import of the data files into the 
internal Git repository. Support for other configuration modules (e.g.:
\&\f(CW\*(C`Config::Any\*(C'\fR) is planned.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBinit()\fP"
.IX Subsection "init()"
This is invoked automatically via \fBimport()\fR. It is called when running the
following code:
.PP
.Vb 1
\& use Config::Versioned;
.Ve
.PP
The \fBinit()\fR method reads the configuration data from the configuration files
and populates an internal data structure.
.PP
Optionally, parameters may be passed to \fBinit()\fR. The following
named-parameters are supported:
.IP "path" 8
.IX Item "path"
Specifies an anonymous array contianing the names of the directories to
check for the configuration files.
.Sp
.Vb 1
\& path => qw( /etc/yourapp/etc /etc/yourapp/local/etc . ),
.Ve
.Sp
The default path is just the current directory.
.IP "filename" 8
.IX Item "filename"
Specifies the name of the configuration file to be found in the given path.
.Sp
.Vb 1
\& filename => qw( yourapp.conf ),
.Ve
.Sp
If no filename is given, no new configuration data will be imported and
the internal git repository will be used.
.IP "dbpath" 8
.IX Item "dbpath"
The directory for the internal git repository that stores the config.
.Sp
.Vb 1
\& dbpath => qw( config.git ),
.Ve
.Sp
The default is \*(L"cfgver.git\*(R".
.IP "author_name, author_mail" 8
.IX Item "author_name, author_mail"
The name and e\-mail address to use in the internal git repository for
commits.
.IP "autocreate" 8
.IX Item "autocreate"
If no internal git repository exists, it will be created during code
initialization. Note that if an import filename is specified, this 
automatically sets autocreate to true.
.Sp
.Vb 1
\& autocreate => 1,
.Ve
.Sp
The default is \*(L"0\*(R".
.Sp
Note: this option might become deprecated. I just wanted some extra
\&\*(L"insurance\*(R" during the early stages of development.
.IP "commit_time" 8
.IX Item "commit_time"
This sets the time to use for the commits in the internal git repository.
It is used for debugging purposes only!
.Sp
Note: this must be a DateTime object instance.
.IP "delimiter" 8
.IX Item "delimiter"
Specifies the delimiter used to separate the different levels in the
string used to designate the location of a configuration parameter. [Default: '.']
.IP "delimiter_regex" 8
.IX Item "delimiter_regex"
Specifies the delimiter used to separate the different levels in the
string used to designate the location of a configuration parameter.
[Default: qr/ \e. /xms]
.IP "log_get_callback" 8
.IX Item "log_get_callback"
Specifies a callback function to be called by \fBget()\fR after fetching
the value for the given key. The subroutine should accept the
parameters \s-1LOCATION, VERSION, VALUE.\s0 The \s-1VALUE\s0 may either be a single
scalar value or an array reference containing a list of values.
.Sp
.Vb 5
\&    sub cb_log_get {
\&        my $self = shift;
\&        my $loc = shift;
\&        my $ver = shift;
\&        my $val = shift;
\&
\&        warn "Access config parameter: $loc ($ver) => ",
\&            ref($val) eq \*(AqARRAY\*(Aq
\&                ? join(\*(Aq, \*(Aq, @{ $val })
\&                : $val,
\&            "\en";
\&    }
\&    my $cfg = Config::Versioned\->new( { log_get_callback => \*(Aqcb_log_get\*(Aq } );
.Ve
.Sp
Note: if log_get_callback is a code ref, it will be called as a function.
Otherwise, the log_get_callback will specify a method name that is to be
called on the current object instance.
.SS "\s-1BUILD\s0( { \s-1PARAMS\s0 } )"
.IX Subsection "BUILD( { PARAMS } )"
\&\s-1NOTE:\s0 This is used internally, so the typical user shouldn't bother with this.
.PP
This is called after an object is created. When cloning, it is important that
the new instance gets a reference to the same Git::PurePerl instance. This
will prevent two instances from getting out of sync if modifications are made
to the configuration data at runtime. To handle this, the parameter '\s-1GITREF\s0'
must be passed when cloning.
.PP
Note 2: this should be handled automatically in the _near_ future.
.PP
.Vb 1
\&    my $cv2 = $cv1\->new( GITREF => $cv1\->_git() );
.Ve
.SS "get( \s-1LOCATION\s0 [, \s-1VERSION\s0 ] )"
.IX Subsection "get( LOCATION [, VERSION ] )"
This is the accessor for fetching the value(s) of the given parameter. The
value may either be zero or more elements.
.PP
In list context, the values are returned. In scalar context, \f(CW\*(C`undef\*(C'\fR is 
returned if the variable is empty. Otherwise, the first element is returned.
.PP
Optionally, a \s-1VERSION\s0 may be specified to return the value for that
specific version.
.SS "kind ( \s-1LOCATION\s0 [, \s-1VERSION\s0 ] )"
.IX Subsection "kind ( LOCATION [, VERSION ] )"
The \fBget()\fR method tries to return a scalar when the location corresponds
to a single value and a list when the location has child nodes. Sometimes,
however, it is helpful to have a definitive answer on what a location 
contains.
.PP
The \fBkind()\fR method returns the object type that the given location accesses.
This can be one of the following values:
.IP "tree" 4
.IX Item "tree"
The given location contains a tree object containing zero or more child 
objects. The \fBget()\fR method will return a list of the entry names.
.IP "blob" 4
.IX Item "blob"
The data node that usually contains a scalar value, but in future implementations
may contain other encoded data.
.PP
\&\fBNote:\fR As a side-effect, this can be used to test whether the given location
exists at all in the configuration. If not found, \f(CW\*(C`undef\*(C'\fR is returned.
.SS "listattr( \s-1LOCATION\s0 [, \s-1VERSION\s0 ] )"
.IX Subsection "listattr( LOCATION [, VERSION ] )"
This fetches a list of the parameters available for a given location in the 
configuration tree.
.SS "dumptree( [ \s-1VERSION\s0 ] )"
.IX Subsection "dumptree( [ VERSION ] )"
This fetches the entire tree for the given version (default: newest version)
and returns a hashref to a named-parameter list.
.SS "version"
.IX Subsection "version"
This returns the current version of the configuration database, which
happens to be the \s-1SHA1\s0 hash of the \s-1HEAD\s0 of the internal git repository.
.PP
Optionally, a version hash may be passed and \fBversion()\fR will return a true
value if it is found.
.SH "INTERNALS"
.IX Header "INTERNALS"
.SS "_init_repo"
.IX Subsection "_init_repo"
Initializes the internal git repository used for storing the config
values.
.PP
If the \fIobjects\fR directory in the \f(CW\*(C`dbpath\*(C'\fR does not exist, an
\&\f(CW\*(C`init()\*(C'\fR on the \f(CW\*(C`Git::PurePerl\*(C'\fR class is run. Otherwise, the 
instance is initialized using the existing bare repository.
.PP
On error, it returns \f(CW\*(C`undef\*(C'\fR and the reason is in \f(CW$@\fR.
.SS "_get_anon_scalar"
.IX Subsection "_get_anon_scalar"
Creates an anonymous scalar for representing symlinks in the tree structure.
.SS "parser \s-1ARGS\s0"
.IX Subsection "parser ARGS"
Imports the configuration read and writes it to the internal database. If no
filename is passed as an argument, then it will quietly skip the commit.
.PP
Note: if you override this method in a child class, it must create an
anonymous hash tree and pass the reference to the \fBcommit()\fR method. Here
is a simple example:
.PP
.Vb 4
\&    sub parser {
\&        my $self = shift;
\&        my $args = shift;
\&        $args\->{comment} = \*(Aqimport from my perl hash\*(Aq;
\&        
\&        my $cfg = {
\&            group1 => {
\&                subgroup1 => {
\&                    param1 => \*(Aqval1\*(Aq,
\&                    param2 => \*(Aqval2\*(Aq,
\&                },
\&            },
\&            group2 => {
\&                subgroup1 => {
\&                    param3 => \*(Aqval3\*(Aq,
\&                    param4 => \*(Aqval4\*(Aq,
\&                },
\&            },
\&            # This creates a symlink from \*(Aqgroup3.subgroup3\*(Aq to \*(Aqconnector1/group4\*(Aq.
\&            # Note the use of the scalar reference using the backslash.
\&            group3 => {
\&                subgroup3 => \e\*(Aqconnector1/group4\*(Aq,
\&            },
\&
\&        };
\&        
\&        # pass original args, appended with a comment string for the commit
\&        $self\->commit( $cfg, $args );
\&    }
.Ve
.PP
In the comment, you should include details on where the config came from
(i.e.: the filename or directory).
.SS "commit CFGHASH[, \s-1ARGS\s0]"
.IX Subsection "commit CFGHASH[, ARGS]"
Import the configuration tree in the \s-1CFGHASH\s0 anonymous hash and commit
the modifications to the internal git bare repository.
.PP
\&\s-1ARGS\s0 is a ref to a named-parameter list (e.g. \s-1HASH\s0) that may contain the
following keys to override the instance defaults:
.PP
.Vb 1
\&    author_name, author_mail, comment, commit_time
.Ve
.SS "_mknode \s-1LOCATION\s0"
.IX Subsection "_mknode LOCATION"
Creates a node at the given \s-1LOCATION,\s0 creating parent nodes if necessary.
.PP
A reference to the node at the \s-1LOCATION\s0 is returned.
.SS "_findobjx \s-1LOCATION\s0 [, \s-1VERSION\s0 ]"
.IX Subsection "_findobjx LOCATION [, VERSION ]"
Returns the Git::PurePerl and Git::PurePerl::DirectoryEntry objects found in
the file path at \s-1LOCATION.\s0
.PP
.Vb 2
\&    my ($ref1, $de1) = $cfg\->_findnode("smartcard.ldap.uri");
\&    my $ref2, $de2) = $cfg\->_findnode("certs.signature.duration", $wfcfgver);
.Ve
.PP
In most cases, the \f(CW\*(C`_findobj\*(C'\fR version is sufficient. This extended version
is used to look at the attribtes of the directory entry for things like whether
the blob is a symlink.
.SS "_findobj \s-1LOCATION\s0 [, \s-1VERSION\s0 ]"
.IX Subsection "_findobj LOCATION [, VERSION ]"
Returns the Git::PurePerl object found in the file path at \s-1LOCATION.\s0
.PP
.Vb 2
\&    my $ref1 = $cfg\->_findnode("smartcard.ldap.uri");
\&    my $ref2 = $cfg\->_findnode("certs.signature.duration", $wfcfgver);
.Ve
.SS "_get_sect_key \s-1LOCATION\s0"
.IX Subsection "_get_sect_key LOCATION"
Returns the section and key needed by Config::Std to access the
configuration values. The given \s-1LOCATION\s0 is split on the last delimiter. 
The resulting section and key are returned as a list.
.SS "_which( \s-1NAME, DIR ...\s0 )"
.IX Subsection "_which( NAME, DIR ... )"
Searches the directory list \s-1DIR,\s0 returning the full path in which the file \s-1NAME\s0 was
found.
.SS "_read_config_path \s-1SELF, FILENAME, CFGREF, PATH\s0"
.IX Subsection "_read_config_path SELF, FILENAME, CFGREF, PATH"
Searches for \s-1FILENAME\s0 in the given directories in \s-1PATH.\s0 When found,
the file is parsed and a data structure is written to the location
in \s-1CFGREF.\s0
.PP
Note: this is the wrapper around the underlying libs that read the
configuration data from the files.
.SS "_debugtree( \s-1OBJREF\s0 | \s-1SHA1\s0 )"
.IX Subsection "_debugtree( OBJREF | SHA1 )"
This fetches the entire tree for the given \s-1SHA1\s0 and dumps it in a
human-readable format.
.SS "hdump"
.IX Subsection "hdump"
Return hexdump of given data.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Was based on the \s-1CPAN\s0 module App::Options, but since been converted to Moose.
.SH "AUTHOR"
.IX Header "AUTHOR"
Scott T. Hardin, \f(CW\*(C`<mrscotty at cpan.org>\*(C'\fR
.PP
Martin Bartosch
.PP
Oliver Welter
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-config\-versioned at
rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Config\-Versioned>.
I will be notified, and then you'll automatically be notified of progress
on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Config::Versioned
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Config\-Versioned>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Config\-Versioned>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Config\-Versioned>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Config\-Versioned/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2011 Scott T. Hardin, all rights reserved.
.PP
This program is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
