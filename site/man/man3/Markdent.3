.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Markdent 3"
.TH Markdent 3 "2020-07-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Markdent \- An event\-based Markdown parser toolkit
.SH "VERSION"
.IX Header "VERSION"
version 0.37
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Markdent::Simple::Document;
\&
\&    my $parser = Markdent::Simple::Document\->new();
\&    my $html   = $parser\->markdown_to_html(
\&        title    => \*(AqMy Document\*(Aq,
\&        markdown => $markdown,
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This distribution provides a toolkit for parsing Markdown (and Markdown
variants, aka dialects). Unlike the other Markdown Perl tools, this module can
be used for more than just generating \s-1HTML.\s0 The core parser generates events
(like \s-1XML\s0's \s-1SAX\s0), making it easy to analyze a Markdown document in any number
of ways.
.PP
If you're only interested in converting Markdown to \s-1HTML,\s0 you can use the
Markdent::Simple::Document class to do this, although you can just as well
use better battle-tested tools like Text::Markdown.
.PP
See Markdent::Manual for more details on how Markdent works and how you can
use it.
.SH "QUICK MARKDOWN TO HTML CONVERSION"
.IX Header "QUICK MARKDOWN TO HTML CONVERSION"
If you just want to do some quick Markdown to \s-1HTML\s0 conversion use either the
Markdent::Simple::Document or Markdent::Simple::Fragment class.
.PP
This distribution also ships with a command line tool called
markdent-html. See that tool's documentation for details on how to use it.
.SH "PROCESSING PIPELINES"
.IX Header "PROCESSING PIPELINES"
If you want to create a Markdown processing pipeline, start by looking at the
various handler classes:
.IP "\(bu" 4
Markdent::Handler::HTMLStream::Document
.IP "\(bu" 4
Markdent::Handler::HTMLStream::Fragment
.IP "\(bu" 4
Markdent::Handler::HTMLStream::Multiplexer
.IP "\(bu" 4
Markdent::Handler::HTMLStream::HTMLFilter
.IP "\(bu" 4
Markdent::Handler::HTMLStream::CaptureEvents
.PP
You will probably also want to write your own handler class as part of the
pipeline. This will need to implement the Markdent::Role::Handler role.
.PP
To do that you'll need to review the many \f(CW\*(C`Markdent::Event::*\*(C'\fR classes. Each
event represents something seen by the parse, such as a piece of the start or
end of a piece of block (paragraph, header) or span markup (strong, link) or
some text.
.PP
The start of a pipeline will generally be either the Markdent::Parser or
Markdent::CapturedEvents class.
.SH "CUSTOM DIALECTS"
.IX Header "CUSTOM DIALECTS"
You may also want to implement a custom dialect to add some additional
features to the parser. Your parser classes will need to consume either the
Markdent::Role::Dialect::BlockParser or the
Markdent::Role::Dialect::SpanParser role. The best way to understand how a
dialect is implemented is to look at one of the existing dialect classes:
.IP "\(bu" 4
Markdent::Dialect::GitHub::BlockParser
.IP "\(bu" 4
Markdent::Dialect::GitHub::SpanParser
.IP "\(bu" 4
Markdent::Dialect::Theory::BlockParser
.IP "\(bu" 4
Markdent::Dialect::Theory::SpanParser
.PP
You'll also need to dig into the core Markdent::Parser::BlockParser and
Markdent::Parser::SpanParser classes in order to see how these dialects
interact with the core parser.
.SH "DONATIONS"
.IX Header "DONATIONS"
If you'd like to thank me for the work I've done on this module,
please consider making a \*(L"donation\*(R" to me via PayPal. I spend a lot of
free time creating free software, and would appreciate any support
you'd care to offer.
.PP
Please note that \fBI am not suggesting that you must do this\fR in order
for me to continue working on this particular software. I will
continue to do so, inasmuch as I have in the past, for as long as it
interests me.
.PP
Similarly, a donation made in this way will probably not make me work
on this software much more, unless I get so many donations that I can
consider working on free software full time, which seems unlikely at
best.
.PP
To donate, log into PayPal and send money to autarch@urth.org or use
the button on this page:
<http://www.urth.org/~autarch/fs\-donation.html>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-markdent@rt.cpan.org\*(C'\fR,
or through the web interface at <http://rt.cpan.org>.  I will be
notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.PP
Bugs may be submitted at <https://github.com/houseabsolute/Markdent/issues>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Markdent can be found at <https://github.com/houseabsolute/Markdent>.
.SH "DONATIONS"
.IX Header "DONATIONS"
If you'd like to thank me for the work I've done on this module, please
consider making a \*(L"donation\*(R" to me via PayPal. I spend a lot of free time
creating free software, and would appreciate any support you'd care to offer.
.PP
Please note that \fBI am not suggesting that you must do this\fR in order for me
to continue working on this particular software. I will continue to do so,
inasmuch as I have in the past, for as long as it interests me.
.PP
Similarly, a donation made in this way will probably not make me work on this
software much more, unless I get so many donations that I can consider working
on free software full time (let's all have a chuckle at that together).
.PP
To donate, log into PayPal and send money to autarch@urth.org, or use the
button at <https://www.urth.org/fs\-donation.html>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Andrew Speer <andrew.speer@isolutions.com.au>
.IP "\(bu" 4
Denis Ibaev <dionys@gmail.com>
.IP "\(bu" 4
Jason McIntosh <jmac@appleseed\-sc.com>
.IP "\(bu" 4
Jonas Smedegaard <dr@jones.dk>
.IP "\(bu" 4
Polina Shubina <925043@mai.com>
.IP "\(bu" 4
Shlomi Fish <shlomif@shlomifish.org>
.IP "\(bu" 4
Stefan Hornburg (Racke) <racke@linuxia.de>
.IP "\(bu" 4
Tom Hukins <tom@eborcom.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Dave Rolsky.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.PP
The full text of the license can be found in the
\&\fI\s-1LICENSE\s0\fR file included with this distribution.
