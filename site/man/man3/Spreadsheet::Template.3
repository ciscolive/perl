.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Template 3"
.TH Spreadsheet::Template 3 "2015-03-26" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Template \- generate spreadsheets from a template
.SH "VERSION"
.IX Header "VERSION"
version 0.05
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Spreadsheet::Template;
\&
\&  my $template = Spreadsheet::Template\->new;
\&  my $in = do { local $/; <> };
\&  my $out = $template\->render($in);
\&  open my $fh, \*(Aq>\*(Aq, \*(Aqout.xlsx\*(Aq;
\&  binmode $fh;
\&  $fh\->print($out);
\&  $fh\->close;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is used to render spreadsheets from \s-1JSON\s0 files which describe the
desired content and formatting. These \s-1JSON\s0 files can be preprocessed with a
template engine such as Text::Xslate in order to customize the spreadsheet
contents before generation, in a similar way to how \s-1HTML\s0 pages can be rendered
with templates.
.PP
The typical workflow for using this module is to create a sample spreadsheet in
Excel with the desired layout and formatting, and use
Spreadsheet::Template::Generator (or the included \f(CW\*(C`spreadsheet_to_template\*(C'\fR
script) to generate a base template. That base template can then be edited
to add in template declarations, and then this module can be used to generate
new spreadsheets based on the template.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "processor_class"
.IX Subsection "processor_class"
Name of the Spreadsheet::Template::Processor class to use to preprocess the
template. Defaults to Spreadsheet::Template::Processor::Xslate.
.SS "processor_options"
.IX Subsection "processor_options"
Arguments to pass to the \f(CW\*(C`processor_class\*(C'\fR constructor.
.SS "writer_class"
.IX Subsection "writer_class"
Name of the Spreadsheet::Template::Writer class to use to preprocess the
template. Defaults to Spreadsheet::Template::Writer::XLSX.
.SS "writer_options"
.IX Subsection "writer_options"
Arguments to pass to the \f(CW\*(C`writer_class\*(C'\fR constructor.
.SS "json"
.IX Subsection "json"
Instance of a \s-1JSON\s0 class that will handle decoding. Defaults to an instance of \s-1JSON\s0.
Passing in a \s-1JSON\s0 obj with \->\fBrelaxed\fR\|(1) set will allow for trailing commas in your templates.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "render($template, $vars)"
.el .SS "render($template, \f(CW$vars\fP)"
.IX Subsection "render($template, $vars)"
Calls \f(CW\*(C`process\*(C'\fR on the Spreadsheet::Template::Processor instance with
\&\f(CW$template\fR and \f(CW$vars\fR as arguments, decodes the result as \s-1JSON,\s0 and returns
the result of passing that data to the \f(CW\*(C`write\*(C'\fR method of the
Spreadsheet::Template::Writer instance.
.SH "DATA FORMAT"
.IX Header "DATA FORMAT"
The intermediate data format that should be produced after the template has
been preprocessed is a \s-1JSON\s0 file, with a structure that looks like this:
.PP
.Vb 10
\&  {
\&     "selection" : 0,
\&     "worksheets" : [
\&        {
\&           "column_widths" : [ 10, 10, 10 ],
\&           "name"          : "Sheet1",
\&           "row_heights"   : [ 18, 18, 18 ],
\&           "selection"     : [ 0, 0 ],
\&           "autofilter"    : [
\&               [ [0, 0], [0, 2] ]
\&           ],
\&           "cells"         : [
\&              [
\&                 {
\&                    "contents" : "This is cell A1",
\&                    "format"   : {
\&                       "color" : "#000000",
\&                       "size" : 14,
\&                       "text_wrap" : true,
\&                       "valign" : "vcenter"
\&                    },
\&                    "type"     : "string"
\&                 },
\&                 {
\&                    "contents" : "3.25",
\&                    "format"   : {
\&                       "color" : "#000000",
\&                       "num_format" : "\e"$\e"#,##0.00_);[Red]\e\e(\e"$\e"#,##0.00\e\e)",
\&                       "size" : 14
\&                    },
\&                    "type"     : "number"
\&                 }
\&              ],
\&              [
\&                 {
\&                    "contents" : "2013\-03\-20T00:00:00",
\&                    "format"   : {
\&                       "color" : "#000000",
\&                       "align" : "center",
\&                       "num_format" : "d\-mmm",
\&                       "size" : 14,
\&                       "border_color" : [
\&                          "#000000",
\&                          "#000000",
\&                          "#000000",
\&                          "#000000"
\&                       ],
\&                       "border" : [
\&                          "thin",
\&                          "thin",
\&                          "thin",
\&                          "thin"
\&                       ]
\&                    },
\&                    "type"     : "date_time"
\&                 },
\&                 {
\&                    "contents" : "3.25",
\&                    "formula"  : "SUM(B1:B1)",
\&                    "format"   : {
\&                       "bg_color" : "#d8d8d8",
\&                       "bold" : true,
\&                       "color" : "#000000",
\&                       "num_format" : "\e"$\e"#,##0.00_);[Red]\e\e(\e"$\e"#,##0.00\e\e)",
\&                       "pattern" : "solid",
\&                       "size" : 14
\&                    },
\&                    "type"     : "string"
\&                 }
\&              ]
\&           ],
\&           "merge" : [
\&              {
\&                  "range"    : [ [1, 0], [1, 2] ],
\&                  "contents" : "Merged Contents",
\&                  "format"   : {
\&                      "color" : "#000000"
\&                  },
\&                  "type"     : "string"
\&              }
\&           ]
\&        }
\&     ]
\&  }
.Ve
.SS "workbook"
.IX Subsection "workbook"
The entire \s-1JSON\s0 document describes a workbook to be produced. The document
should be a \s-1JSON\s0 object with these keys:
.IP "selection" 4
.IX Item "selection"
The (zero-based) index of the worksheet to be initially selected when the
spreadsheet is opened.
.IP "worksheets" 4
.IX Item "worksheets"
An array of worksheet objects.
.SS "worksheet"
.IX Subsection "worksheet"
Each element of the \f(CW\*(C`worksheets\*(C'\fR array in the workbook object should be a \s-1JSON\s0
object with these keys:
.IP "name" 4
.IX Item "name"
The name of the worksheet.
.IP "column_widths" 4
.IX Item "column_widths"
An array of numbers corresponding to the widths of the columns in the
spreadsheet.
.IP "row_heights" 4
.IX Item "row_heights"
An array of numbers corresponding to the heights of the rows in the
spreadsheet.
.IP "selection" 4
.IX Item "selection"
An array of two numbers corresponding to the (zero-based) row and column of the
cell that should be selected when the worksheet is first displayed.
.IP "autofilter" 4
.IX Item "autofilter"
Enables autofilter behavior for each range of cells listed. Cell ranges are
specified by an array of two arrays of two numbers, corresponding to the row
and column of the top left and bottom right cell of the autofiltered range.
.IP "cells" 4
.IX Item "cells"
An array of arrays of cell objects. Each innermost array represents a row,
containing all of the cell data for that row.
.IP "merge" 4
.IX Item "merge"
An array of merge objects. Merge objects are identical to cell objects, except
that they contain an additional \f(CW\*(C`range\*(C'\fR key, which has a value of an array of
two arrays of two numbers, corresponding to the row and column of the top left
and bottom right cell of the range to be merged.
.SS "cell"
.IX Subsection "cell"
Each element of the two-dimensional \f(CW\*(C`cells\*(C'\fR array in a worksheet object should
be a \s-1JSON\s0 object with these keys:
.IP "contents" 4
.IX Item "contents"
The unformatted contents of the cell. For cells with a \f(CW\*(C`type\*(C'\fR of \f(CW\*(C`string\*(C'\fR,
this should be a string, for cells with a \f(CW\*(C`type\*(C'\fR of \f(CW\*(C`number\*(C'\fR, this should be
a number, and for cells with a \f(CW\*(C`type\*(C'\fR of \f(CW\*(C`date_time\*(C'\fR, this should be a string
containing the \s-1ISO8601\s0 representation of the date and time.
.IP "format" 4
.IX Item "format"
The format object describing how the cell's contents should be formatted.
.IP "type" 4
.IX Item "type"
The type of the data in the cell. Can be either \f(CW\*(C`string\*(C'\fR, \f(CW\*(C`number\*(C'\fR, or
\&\f(CW\*(C`date_time\*(C'\fR.
.IP "formula" 4
.IX Item "formula"
The formula used to calculate the cell contents. This field is optional. If you
want the generated spreadsheet to be able to be read by programs other than
full spreadsheet applications (such as by Spreadsheet::Template::Generator,
then you should ensure that you include an accurate value for \f(CW\*(C`contents\*(C'\fR as
well, since most simple spreadsheet parsers don't include a full formula
calculation engine.
.SS "format"
.IX Subsection "format"
Each cell object contains a \f(CW\*(C`format\*(C'\fR key whose value should be a \s-1JSON\s0 object
with these (all optional) keys:
.IP "size" 4
.IX Item "size"
The font size for the cell contents.
.IP "color" 4
.IX Item "color"
The font color for the cell contents.
.IP "bold" 4
.IX Item "bold"
True if the cell contents are bold.
.IP "italic" 4
.IX Item "italic"
True if the cell contents are italic.
.IP "pattern" 4
.IX Item "pattern"
The background pattern for the cell. Can have any of these values (with
\&\f(CW\*(C`none\*(C'\fR being the default if nothing is specified):
.Sp
.Vb 10
\&  none
\&  solid
\&  medium_gray
\&  dark_gray
\&  light_gray
\&  dark_horizontal
\&  dark_vertical
\&  dark_down
\&  dark_up
\&  dark_grid
\&  dark_trellis
\&  light_horizontal
\&  light_vertical
\&  light_down
\&  light_up
\&  light_grid
\&  light_trellis
\&  gray_125
\&  gray_0625
.Ve
.IP "bg_color" 4
.IX Item "bg_color"
The background color for the cell. Only has meaning if a \f(CW\*(C`pattern\*(C'\fR other than
\&\f(CW\*(C`none\*(C'\fR is chosen.
.IP "fg_color" 4
.IX Item "fg_color"
The foreground color for the cell. Only has meaning if a \f(CW\*(C`pattern\*(C'\fR other than
\&\f(CW\*(C`none\*(C'\fR or \f(CW\*(C`solid\*(C'\fR is chosen.
.IP "border" 4
.IX Item "border"
The border style for the cell. This should be an array with four elements,
corresponding to the left, right, top, and bottom borders. Each element can
have any of these values (with \f(CW\*(C`none\*(C'\fR being the default if nothing is
specified):
.Sp
.Vb 10
\&  none
\&  thin
\&  medium
\&  dashed
\&  dotted
\&  thick
\&  double
\&  hair
\&  medium_dashed
\&  dash_dot
\&  medium_dash_dot
\&  dash_dot_dot
\&  medium_dash_dot_dot
\&  slant_dash_dot
.Ve
.IP "border_color" 4
.IX Item "border_color"
The border color for the cell. This should be an array with four elements,
corresponding to the left, right, top, and bottom borders.
.IP "align" 4
.IX Item "align"
The horizontal alignment for the cell contents. Can have any of these values,
with \f(CW\*(C`none\*(C'\fR being the default:
.Sp
.Vb 7
\&  none
\&  left
\&  center
\&  right
\&  fill
\&  justify
\&  center_across
.Ve
.IP "valign" 4
.IX Item "valign"
The vertical alignment for the cell contents. Can have any of these values,
with \f(CW\*(C`bottom\*(C'\fR being the default:
.Sp
.Vb 4
\&  top
\&  vcenter
\&  bottom
\&  vjustify
.Ve
.IP "text_wrap" 4
.IX Item "text_wrap"
True if the contents of the cell should be text-wrapped.
.IP "num_format" 4
.IX Item "num_format"
The numeric format for the cell. Only meaningful if the cell's type is
\&\f(CW\*(C`number\*(C'\fR or \f(CW\*(C`date_time\*(C'\fR. This is the string representation of the format as
understood by Excel itself.
.SH "BUGS"
.IX Header "BUGS"
.IP "\(bu" 4
Default values aren't handled properly \- spreadsheets can set defaults for
things like font sizes, but this isn't actually handled, so cells that are
supposed to use the default may get an incorrect value.
.PP
Please report any bugs to GitHub Issues at
<https://github.com/doy/spreadsheet\-template/issues>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Excel::Template
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find this documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Spreadsheet::Template
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
MetaCPAN
.Sp
<https://metacpan.org/release/Spreadsheet\-Template>
.IP "\(bu" 4
Github
.Sp
<https://github.com/doy/spreadsheet\-template>
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Spreadsheet\-Template>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Spreadsheet\-Template>
.SH "SPONSORS"
.IX Header "SPONSORS"
Parts of this code were paid for by
.IP "Socialflow <http://socialflow.com>" 4
.IX Item "Socialflow <http://socialflow.com>"
.SH "AUTHOR"
.IX Header "AUTHOR"
Jesse Luehrs <doy@tozt.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2015 by Jesse Luehrs.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The MIT (X11) License
.Ve
