.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::GenerateXLSX 3"
.TH Spreadsheet::GenerateXLSX 3 "2019-12-17" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::GenerateXLSX \- function to generate XLSX spreadsheet from array ref(s)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Spreadsheet::GenerateXLSX qw/ generate_xlsx /;
\&
\& my @data = (
\&             [\*(AqHeading 1\*(Aq, \*(AqHeading 2\*(Aq, \*(AqHeading 2\*(Aq],
\&             [\*(Aqblah\*(Aq,      \*(Aqblah\*(Aq,      \*(Aqblah\*(Aq],
\&             [\*(Aqblah\*(Aq,      \*(Aqblah\*(Aq,      \*(Aqblah\*(Aq],
\&            );
\& generate_xlsx(\*(Aqexample.xlsx\*(Aq, \e@data);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a function \f(CW\*(C`generate_xlsx\*(C'\fR which takes
an array of Perl data and generates a simple Excel spreadsheet
in the \s-1XLSX\s0 format.
The generated sheets have the first row frozen,
and auto filters enabled for every column.
.PP
Each sheet in the spreadsheet is generated from an array of rows,
where each row is an arrayref.
The first row is treated as a header row.
Here's an example:
.PP
.Vb 6
\& my @sheet1 = (
\&    [\*(AqPokemon\*(Aq,  \*(AqType\*(Aq,      \*(AqNumber\*(Aq],
\&    [\*(AqPikachu\*(Aq,  \*(AqElectric\*(Aq,  25],
\&    [\*(AqVulpix\*(Aq,   \*(AqFire\*(Aq,      37],
\&    [\*(AqDitto\*(Aq,    \*(AqNormal\*(Aq,    132],
\& );
.Ve
.PP
The generated spreadsheet can have any numbers of sheets:
.PP
.Vb 1
\& generate_xslx(\*(Aqpokemon.xlsx\*(Aq, \e@sheet1, \e@sheet2);
.Ve
.PP
If you just pass arrayrefs, the sheets will be named \fBSheet1\fR, \fBSheet2\fR, etc.
You can also pass the name of the sheet:
.PP
.Vb 1
\& generate_xslx(\*(Aqpokemon.xlsx\*(Aq, \*(AqAll Pokemon\*(Aq => \e@sheet1, \*(AqHit List\*(Aq => \e@sheet2);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The following modules can all generate the \s-1XLSX\s0 format.
I also wrote a blog post <http://neilb.org/2016/12/10/spreadsheet-generate-xlsx.html>
which gives more details on some of these.
.Sp
.RS 4
Excel::Writer::XLSX \- the underlying module used to generate the spreadsheet.
Gives you full control over the spreadsheet generated, but as a result has a much
more complex interface.
.Sp
Spreadsheet::WriteExcel::Styler \- helps with formatting of cells when
using \f(CW\*(C`Excel::Writer::XLSX\*(C'\fR or \f(CW\*(C`Spreadsheet::WriteExcel\*(C'\fR.
.Sp
Spreadsheet::Template \- used to generate spreadsheets from
\&\*(L"\s-1JSON\s0 files which describe the desired content and formatting\*(R".
By default it generates \s-1XLSX\s0 format.
.Sp
Data::Table::Excel \- converts between Data::Table objects and \s-1XLS\s0 or \s-1XLSX\s0 format spreadsheets.
.Sp
XLS::Simple \- provides a simple interface for both reading and writing spreadsheets.
Minimal documentation, and what there is is written in Japanese.
The function for creating a spreadsheet is called `\fBwrite_xls()\fR`,
but it generates the \s-1XLSX\s0 format.
.RE
.PP
The following modules only generate Microsoft's earlier xls binary format.
.Sp
.RS 4
Spreadsheet::WriteExcel \- provides the same interface as \f(CW\*(C`Excel::Writer::XLSX\*(C'\fR,
but generates the \s-1XLS\s0 format.
.Sp
Spreadsheet::WriteExcel::FromDB \- converts a database table to an \s-1XLS\s0 format spreadsheet.
.Sp
Spreadsheet::WriteExcel::FromDB::Query \- converts a query to an \s-1XLS\s0 spreadsheet,
as opposed to a table.
.Sp
Spreadsheet::WriteExcel::Simple \- provides a simpler \s-1OO\s0 interface
for generating single-sheet \s-1XLS\s0 spreadsheets.
.Sp
Spreadsheet::Write \- another simplified \s-1OO\s0 interface, which can write \s-1CSV\s0 or \s-1XLS\s0 output,
but not \s-1XLSX.\s0
.Sp
Spreadsheet::Wright \- a fork of \f(CW\*(C`Spreadsheet::Write\*(C'\fR which supports more output formats
(\s-1CSV, XLS, HTML, XHTML, XML, ODS,\s0 and \s-1JSON\s0), but doesn't (appear to) support \s-1XLSX.\s0
.Sp
Spreadsheet::DataToExcel \- provides a simple \s-1OO\s0 interface for generating \s-1XLS\s0 spreadsheets,
and provides some control over the generated format.
But, as with most of the modules listed here, only \s-1XLS\s0 output is supported.
.Sp
Spreadsheet::WriteExcel::Simple::Tabs \- a very simple \s-1OO\s0 interface built on \f(CW\*(C`Spreadsheet::WriteExcel\*(C'\fR.
This one is close to the spirit of \f(CW\*(C`Spreadsheet::GenerateXLSX\*(C'\fR, but only generates \s-1XLS.\s0
.RE
.SH "TODO"
.IX Header "TODO"
.Vb 3
\& * smarter auto\-formatting of columns
\& * more tests
\& * better error handler
.Ve
.SH "REPOSITORY"
.IX Header "REPOSITORY"
<https://github.com/neilb/Spreadsheet\-GenerateXLSX>
.SH "AUTHOR"
.IX Header "AUTHOR"
Neil Bowers <neilb@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2016 by Neil Bowers <neilb@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
