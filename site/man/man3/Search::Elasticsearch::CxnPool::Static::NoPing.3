.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search::Elasticsearch::CxnPool::Static::NoPing 3"
.TH Search::Elasticsearch::CxnPool::Static::NoPing 3 "2020-09-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Search::Elasticsearch::CxnPool::Static::NoPing \- A CxnPool for connecting to a remote cluster without the ability to ping.
.SH "VERSION"
.IX Header "VERSION"
version 7.30
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    $e = Search::Elasticsearch\->new(
\&        cxn_pool => \*(AqStatic::NoPing\*(Aq
\&        nodes    => [
\&            \*(Aqsearch1:9200\*(Aq,
\&            \*(Aqsearch2:9200\*(Aq
\&        ],
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Static::NoPing connection
pool (like the Static pool) should be used
when your access to the cluster is limited.  However, the \f(CW\*(C`Static\*(C'\fR pool needs
to be able to ping nodes in the cluster, with a \f(CW\*(C`HEAD /\*(C'\fR request.  If you
can't ping your nodes, then you should use the \f(CW\*(C`Static::NoPing\*(C'\fR
connection pool instead.
.PP
Because the cluster cannot be pinged, this CxnPool cannot use a short
ping request to determine whether nodes are live or not \- it just has to
send requests to the nodes to determine whether they are alive or not.
.PP
Most of the time, a dead node will cause the request to fail quickly.
However, in situations where node failure takes time (eg malfunctioning
routers or firewalls), a failure may not be reported until the request
itself times out (see \*(L"request_timeout\*(R" in Search::Elasticsearch::Cxn).
.PP
Failed nodes will be retried regularly to check if they have recovered.
.PP
This class does Search::Elasticsearch::Role::CxnPool::Static::NoPing and
Search::Elasticsearch::Role::Is_Sync.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.ie n .SS """nodes"""
.el .SS "\f(CWnodes\fP"
.IX Subsection "nodes"
The list of nodes to use to serve requests.  Can accept a single node,
multiple nodes, and defaults to \f(CW\*(C`localhost:9200\*(C'\fR if no \f(CW\*(C`nodes\*(C'\fR are
specified. See \*(L"node\*(R" in Search::Elasticsearch::Role::Cxn for details of the node
specification.
.SS "See also"
.IX Subsection "See also"
.IP "\(bu" 4
\&\*(L"request_timeout\*(R" in Search::Elasticsearch::Role::Cxn
.IP "\(bu" 4
\&\*(L"dead_timeout\*(R" in Search::Elasticsearch::Role::Cxn
.IP "\(bu" 4
\&\*(L"max_dead_timeout\*(R" in Search::Elasticsearch::Role::Cxn
.SS "Inherited configuration"
.IX Subsection "Inherited configuration"
From Search::Elasticsearch::Role::CxnPool::Static::NoPing
.IP "\(bu" 4
max_retries
.PP
From Search::Elasticsearch::Role::CxnPool
.IP "\(bu" 4
randomize_cxns
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """next_cxn()"""
.el .SS "\f(CWnext_cxn()\fP"
.IX Subsection "next_cxn()"
.Vb 1
\&    $cxn = $cxn_pool\->next_cxn
.Ve
.PP
Returns the next available node  in round robin fashion \- either a live node
which has previously responded successfully, or a previously failed
node which should be retried. If all nodes are dead, it will throw
a \f(CW\*(C`NoNodes\*(C'\fR error.
.SS "Inherited methods"
.IX Subsection "Inherited methods"
From Search::Elasticsearch::Role::CxnPool::Static::NoPing
.IP "\(bu" 4
\&\fBshould_mark_dead()\fR
.IP "\(bu" 4
\&\fBschedule_check()\fR
.PP
From Search::Elasticsearch::Role::CxnPool
.IP "\(bu" 4
\&\fBcxn_factory()\fR
.IP "\(bu" 4
\&\fBlogger()\fR
.IP "\(bu" 4
\&\fBserializer()\fR
.IP "\(bu" 4
\&\fBcurrent_cxn_num()\fR
.IP "\(bu" 4
\&\fBcxns()\fR
.IP "\(bu" 4
\&\fBseed_nodes()\fR
.IP "\(bu" 4
\&\fBnext_cxn_num()\fR
.IP "\(bu" 4
\&\fBset_cxns()\fR
.IP "\(bu" 4
\&\fBrequest_ok()\fR
.IP "\(bu" 4
\&\fBrequest_failed()\fR
.IP "\(bu" 4
\&\fBshould_retry()\fR
.IP "\(bu" 4
\&\fBshould_mark_dead()\fR
.IP "\(bu" 4
\&\fBcxns_str()\fR
.IP "\(bu" 4
\&\fBcxns_seeds_str()\fR
.IP "\(bu" 4
\&\fBretries()\fR
.IP "\(bu" 4
\&\fBreset_retries()\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Enrico Zimuel <enrico.zimuel@elastic.co>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Elasticsearch \s-1BV.\s0
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
