.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "URI::Template 3"
.TH URI::Template 3 "2018-09-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
URI::Template \- Object for handling URI templates (RFC 6570)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use URI::Template;
\&   
\&    my $template = URI::Template\->new( \*(Aqhttp://example.com/{x}\*(Aq );
\&    my $uri      = $template\->process( x => \*(Aqy\*(Aq );
\&    
\&    # or
\&    
\&    my $template = URI::Template\->new();
\&    $template\->template( \*(Aqhttp://example.com/{x}\*(Aq );
\&    my $uri      = $template\->process( x => \*(Aqy\*(Aq );
\&    
\&    # uri is a URI object with value \*(Aqhttp://example.com/y\*(Aq
.Ve
.PP
or
.PP
.Vb 1
\&    use URI::Template \*(Aq:template_process\*(Aq
\&    
\&    my $uri = template_process ( \*(Aqhttp://example.com/{x}\*(Aq, x => \*(Aqy\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a wrapper around \s-1URI\s0 templates as described in \s-1RFC 6570:\s0 
<http://tools.ietf.org/html/rfc6570>.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
.Vb 4
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new( $template )"
.el .SS "new( \f(CW$template\fP )"
.IX Subsection "new( $template )"
Creates a new URI::Template instance with the template passed in
as the first parameter (optional).
.ie n .SS "template( $template )"
.el .SS "template( \f(CW$template\fP )"
.IX Subsection "template( $template )"
This method returns the original template string. If provided, it will also set and parse a 
new template string.
.SS "variables"
.IX Subsection "variables"
Returns an array of unique variable names found in the template (in the order of appearance).
.SS "expansions"
.IX Subsection "expansions"
This method returns an list of expansions found in the template.  Currently,
these are just coderefs.  In the future, they will be more interesting.
.SS "process( \e%vars )"
.IX Subsection "process( %vars )"
Given a list of key-value pairs or an array ref of values (for
positional substitution), it will \s-1URI\s0 escape the values and
substitute them in to the template. Returns a \s-1URI\s0 object.
.SS "process_to_string( \e%vars )"
.IX Subsection "process_to_string( %vars )"
Processes input like the \f(CW\*(C`process\*(C'\fR method, but doesn't inflate the result to a
\&\s-1URI\s0 object.
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.ie n .SS "template_process( $template => \e%vars )"
.el .SS "template_process( \f(CW$template\fP => \e%vars )"
.IX Subsection "template_process( $template => %vars )"
This is the same as \f(CW\*(C`URI::Template\->new($template)\->process(\e%vars)\*(C'\fR But
shorter, and usefull for quick and easy genrating a nice \s-1URI\s0 form parameters.
.PP
Returns an \s-1URI\s0 object
.ie n .SS "template_process_as_string( $template => \e%vars )"
.el .SS "template_process_as_string( \f(CW$template\fP => \e%vars )"
.IX Subsection "template_process_as_string( $template => %vars )"
Same as above, but obviously, returns a string.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Brian Cassidy <bricas@cpan.org>
.IP "\(bu" 4
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "CONTRIBUTERS"
.IX Header "CONTRIBUTERS"
.IP "\(bu" 4
Theo van Hoesel <Th.J.v.Hoesel@THEMA\-MEDIA.nl>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2007\-2018 by Brian Cassidy
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 470:" 4
.IX Item "Around line 470:"
You forgot a '=back' before '=head1'
