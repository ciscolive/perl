.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::BIMI 3"
.TH Mail::BIMI 3 "2020-09-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::BIMI \- BIMI object
.SH "VERSION"
.IX Header "VERSION"
version 2.20200930.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Brand Indicators for Message Identification (\s-1BIMI\s0) retrieval, validation, and processing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  # Assuming we have a message, and have verified it has exactly one From Header domain, and passes
\&  # any other BIMI and local site requirements not related to BIMI record validation...
\&  # For example, relevant DKIM coverage of any BIMI\-Selector header
\&  my $message = ...Specifics of adding headers and Authentication\-Results is left to the reader...
\&
\&  my $domain = "example.com"; # domain from From header
\&  my $selector = "default";   # selector from From header
\&  my $spf = Mail::SPF\->new( ...See Mail::SPF POD for options... );
\&  my $dmarc = Mail::DMARC::PurePerl\->new( ...See Mail::DMARC POD for options... );
\&  $dmarc\->validate;
\&
\&  my $bimi = Mail::BIMI\->new(
\&    dmarc_object => $dmarc,
\&    spf_object => $spf,
\&    domain => $domain,
\&    selector => $selector,
\&  );
\&
\&  my $auth_results = $bimi\->get_authentication_results_object;
\&  my $bimi_result = $bimi\->result;
\&
\&  $message\->add_auth_results($auth_results); # See Mail::AuthenticationResults POD for usage
\&
\&  if ( $bimi_result\->result eq \*(Aqpass\*(Aq ) {
\&    my $headers = $result\->headers;
\&    if ($headers) {
\&      $message\->add_header( \*(AqBIMI\-Location\*(Aq, $headers\->{\*(AqBIMI\-Location\*(Aq} if exists $headers\->{\*(AqBIMI\-Location\*(Aq};
\&      $message\->add_header( \*(AqBIMI\-Indicator\*(Aq, $headers\->{\*(AqBIMI\-Indicator\*(Aq} if exists $headers\->{\*(AqBIMI\-Indicator\*(Aq};
\&    }
\&  }
.Ve
.SH "INPUTS"
.IX Header "INPUTS"
These values are used as inputs for lookups and verifications, they are typically set by the caller based on values found in the message being processed
.SS "dmarc_object"
.IX Subsection "dmarc_object"
is=rw
.PP
Validated Mail::DMARC::PurePerl object from parsed message
.SS "domain"
.IX Subsection "domain"
is=rw
.PP
Domain to lookup/domain record was retrieved from
.SS "resolver"
.IX Subsection "resolver"
is=rw
.PP
Net::DNS::Resolver object to use for \s-1DNS\s0 lookups; default used if not set
.SS "selector"
.IX Subsection "selector"
is=rw
.PP
Selector to lookup/selector record was retrieved from
.SS "spf_object"
.IX Subsection "spf_object"
is=rw
.PP
Mail::SPF::Result object from parsed message
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
These values are derived from lookups and verifications made based upon the input values, it is however possible to override these with other values should you wish to, for example, validate a record before it is published in \s-1DNS,\s0 or validate an Indicator which is only available locally
.SS "dmarc_pp_object"
.IX Subsection "dmarc_pp_object"
is=rw
.PP
Relevant Mail::DMARC::PurePerl object
.SS "dmarc_result_object"
.IX Subsection "dmarc_result_object"
is=rw
.PP
Relevant Mail::DMARC::Result object
.SS "errors"
.IX Subsection "errors"
is=rw
.SS "options"
.IX Subsection "options"
is=rw
.PP
Options class
.SS "record"
.IX Subsection "record"
is=rw
.PP
Mail::BIMI::Record object
.SS "result"
.IX Subsection "result"
is=rw
.PP
Mail::BIMI::Result object
.SS "time"
.IX Subsection "time"
is=ro
.PP
time of retrieval \- useful in testing
.SH "CONSUMES"
.IX Header "CONSUMES"
.IP "\(bu" 4
Mail::BIMI::Role::HasError
.SH "EXTENDS"
.IX Header "EXTENDS"
.IP "\(bu" 4
Moose::Object
.SH "METHODS"
.IX Header "METHODS"
.SS "\fI\fP\f(BIfinish()\fP\fI\fP"
.IX Subsection "finish()"
Finish and clean up, write cache if enabled.
.SS "\fI\fP\f(BIlog_verbose()\fP\fI\fP"
.IX Subsection "log_verbose()"
Output given text if in verbose mode.
.SH "REQUIRES"
.IX Header "REQUIRES"
.IP "\(bu" 4
Mail::BIMI::Options
.IP "\(bu" 4
Mail::BIMI::Prelude
.IP "\(bu" 4
Mail::BIMI::Record
.IP "\(bu" 4
Mail::BIMI::Result
.IP "\(bu" 4
Mail::DMARC::PurePerl
.IP "\(bu" 4
Moose
.IP "\(bu" 4
Moose::Util::TypeConstraints
.IP "\(bu" 4
Net::DNS::Resolver
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Marc Bradshaw.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
