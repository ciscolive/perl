.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Checkpoint::Management::v1 3"
.TH Net::Checkpoint::Management::v1 3 "2020-09-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Checkpoint::Management::v1 \- Checkpoint Management API version 1.x client library
.SH "VERSION"
.IX Header "VERSION"
version 0.001008
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use strict;
\&    use warnings;
\&    use Net::Checkpoint::Management::v1;
\&
\&    my $cpmgmt = Net::Checkpoint::Management::v1\->new(
\&        server      => \*(Aqhttps://cpmgmt.example.com\*(Aq,
\&        user        => \*(Aqusername\*(Aq,
\&        passwd      => \*(Aq$password\*(Aq,
\&        clientattrs => { timeout => 30 },
\&    );
\&
\&    $cpmgmt\->login;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a client library for the Checkpoint Management \s-1API\s0 version 1.x.
Currently it is developed and tested against version R80.40.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "api_versions"
.IX Subsection "api_versions"
Returns a list of all available \s-1API\s0 versions which gets populated on the first
call.
Only works on \s-1API\s0 version 1.1 and higher.
.SS "api_version"
.IX Subsection "api_version"
The \s-1API\s0 version used by all methods. Is automatically set to the highest
version available by the \*(L"login\*(R" method.
.SH "METHODS"
.IX Header "METHODS"
.SS "login"
.IX Subsection "login"
Logs into the Checkpoint Manager \s-1API\s0 using version 1.
.SS "logout"
.IX Subsection "logout"
Logs out of the Checkpoint Manager \s-1API\s0 using version 1.
.SS "publish"
.IX Subsection "publish"
Publishes all previously submitted changes.
Returns the task id on success.
.SS "discard"
.IX Subsection "discard"
Discards all previously submitted changes.
Returns a hashref containing the operation status message and the number of
discarded changes.
.SS "verify_policy"
.IX Subsection "verify_policy"
Verifies the policy of the given package.
.PP
Takes a policy name.
.PP
Returns the task id on success.
.SS "install_policy"
.IX Subsection "install_policy"
Installs the policy of the given package onto the given target(s).
.PP
Takes a policy name, target(s) and an optional hashref of additional
parameters.
The target(s) can be a single name or uid or a list of names or uids.
.PP
Returns the task id on success.
.SS "wait_for_task"
.IX Subsection "wait_for_task"
Takes a task id and checks its status every second until it isn't
\&'in progress' any more and return the status.
Takes an optional callback coderef which is called for every check with the
task as argument.
.SH "AUTHOR"
.IX Header "AUTHOR"
Alexander Hartmaier <abraxxa@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Alexander Hartmaier.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
