.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::PgAsync 3"
.TH Mojolicious::Plugin::PgAsync 3 "2013-09-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::PgAsync \- Mojolicious Plugin for asynchronous operation with PostgreSQL
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        # Mojolicious::Lite
\&        plugin PgAsync => {dbi => [\*(Aqdbi:Pg:dbname=test\*(Aq, \*(Aqpostgres\*(Aq, \*(Aq\*(Aq, {AutoCommit => 1, RaiseError => 1}]};
\&
\&        # in controller
\&        $self\->pg(\*(AqSELECT 3 as id, pg_sleep(?)\*(Aq, undef, 3,
\&                sub {
\&                        my $db = shift;
\&                        my $info = $db\->sth\->fetchall_arrayref({});
\&                        $self\->render(text => $info\->[0]{id});
\&                }
\&        );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::PgAsync is a plugin for Mojolicious apps for asynchronous operation (non-blocking)
with PostgreSQL using DBD::Pg, include \fIlisten\fR feature. Plugin uses own connections pool.
.SH "HELPERS"
.IX Header "HELPERS"
Mojolicious::Plugin::PgAsync contains two helpers: \f(CW\*(C`pg\*(C'\fR and \f(CW\*(C`pg_listen\*(C'\fR.
.ie n .SS """pg"""
.el .SS "\f(CWpg\fP"
.IX Subsection "pg"
Like \s-1DBI\s0 method do or selectall_arrayref execute a single statement.
Callback return object Mojolicious::Plugin::PgAsync::Db contains methods \f(CW\*(C`dbh\*(C'\fR and \f(CW\*(C`sth\*(C'\fR for fetch result
or commit transaction.
.PP
.Vb 7
\&        $self\->pg(\*(AqUPDATE test SET name=?\*(Aq, undef, \*(Aqfoo\*(Aq,
\&                sub {
\&                        my $db = shift;
\&                        my $rv = $db\->sth\->rows;
\&                        $db\->dbh\->commit if $rv == 1;
\&                }
\&        );
.Ve
.ie n .SS """pg_listen"""
.el .SS "\f(CWpg_listen\fP"
.IX Subsection "pg_listen"
Listen for a notification.
.PP
.Vb 4
\&        $self\->pg_listen(\*(Aqfoo\*(Aq, sub {
\&                my $notify = shift;
\&                $self\->render(text => \*(Aqchannel \*(Aq.$notify\->{channel});
\&        });
.Ve
.PP
Callback return hashref with keys \fIchannel\fR(alias \fIname\fR), \fIpid\fR and \fIpayload\fR.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Plugin::PgAsync contains the following attributes:
.ie n .SS """dbi"""
.el .SS "\f(CWdbi\fP"
.IX Subsection "dbi"
Arrayref of \s-1DBI\s0 parameters for connect to PostgreSQL \s-1DB.\s0
.ie n .SS """ttl"""
.el .SS "\f(CWttl\fP"
.IX Subsection "ttl"
Time to life for idle connections, seconds. Default \- 30.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
After 2 seconds print \fIlisten foo bar\fR
.PP
.Vb 1
\&        plugin PgAsync => {dbi => [\*(Aqdbi:Pg:dbname=test\*(Aq, \*(Aqpostgres\*(Aq, \*(Aq\*(Aq, {AutoCommit => 0, RaiseError => 1}]};
\&
\&        get \*(Aq/listen\*(Aq => sub {
\&                my $self = shift\->render_later;
\&
\&                Mojo::IOLoop\->delay(
\&                        sub {
\&                                my $delay = shift;
\&
\&                                $self\->pg_listen(\*(Aqfoo\*(Aq, $delay\->begin);
\&                                $self\->pg_listen(\*(Aqbar\*(Aq, $delay\->begin);
\&                        },
\&                        sub {
\&                                my $delay = shift;
\&                                my($notify1, $notify2) = @_;
\&
\&                                $self\->render(text => "listen $notify1\->{name} $notify2\->{name}");
\&                        },
\&                );
\&
\&                Mojo::IOLoop\->delay(
\&                        sub {
\&                                my $delay = shift;
\&
\&                                Mojo::IOLoop\->timer(2 => $delay\->begin);
\&                        },
\&                        sub {
\&                                my $delay = shift;
\&
\&                                $self\->pg(q/SELECT pg_notify(\*(Aqfoo\*(Aq)/, $delay\->begin);
\&                                $self\->pg(q/SELECT pg_notify(\*(Aqbar\*(Aq)/, $delay\->begin);
\&                        },
\&                        sub {
\&                                my $delay = shift;
\&                                my($db1, $db2) = @_;
\&
\&                                $db1\->dbh\->commit;
\&                                $db2\->dbh\->commit;
\&                        },
\&                );
\&        };
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Alexander Romanenko romanenko@cpan.org
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (C) 2013 by Alexander Romanenko.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
