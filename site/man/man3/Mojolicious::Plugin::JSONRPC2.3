.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::JSONRPC2 3"
.TH Mojolicious::Plugin::JSONRPC2 3 "2018-04-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::JSONRPC2 \- JSON\-RPC 2.0 over HTTP
.SH "VERSION"
.IX Header "VERSION"
This document describes Mojolicious::Plugin::JSONRPC2 version v2.0.1
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use JSON::RPC2::Server;
\&
\&    # in Mojolicious app
\&    sub startup {
\&        my $app = shift;
\&        $app\->plugin(\*(AqJSONRPC2\*(Aq);
\&
\&        my $server = JSON::RPC2::Server\->new();
\&
\&        $r\->jsonrpc2(\*(Aq/rpc\*(Aq, $server);
\&        $r\->jsonrpc2_get(\*(Aq/rpc\*(Aq, $server)\->over(
\&            headers => { $app\->jsonrpc2_headers }
\&        );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::JSONRPC2 is a plugin that allow you to handle
some routes in Mojolicious app using JSON-RPC 2.0 over \s-1HTTP\s0 protocol.
.PP
Implements this spec: <http://www.simple\-is\-better.org/json\-rpc/transport_http.html>.
The \*(L"pipelined Requests/Responses\*(R" is not supported yet.
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "defaults"
.IX Subsection "defaults"
.Vb 1
\&    $app\->defaults( \*(Aqjsonrpc2.timeout\*(Aq => 300 );
.Ve
.PP
Configure timeout for \s-1RPC\s0 requests in seconds (default value 5 minutes).
.SS "jsonrpc2"
.IX Subsection "jsonrpc2"
.Vb 1
\&    $app\->routes\->jsonrpc2( $path, $server );
.Ve
.PP
Add handler for JSON-RPC 2.0 over \s-1HTTP\s0 protocol on \f(CW$path\fR
(with \f(CW\*(C`format=>0\*(C'\fR) using \f(CW\*(C`POST\*(C'\fR method.
.PP
\&\s-1RPC\s0 functions registered with \f(CW$server\fR will be called only with their
own parameters (provided with \s-1RPC\s0 request) \- if they will need access to
Mojolicious app you'll have to provide it manually (using global vars or
closures).
.SS "jsonrpc2_get"
.IX Subsection "jsonrpc2_get"
.Vb 1
\&    $app\->routes\->jsonrpc2_get( $path, $server_safe_idempotent );
.Ve
.PP
\&\fB\s-1WARNING\s0!\fR In most cases you don't need it. In other cases usually you'll
have to use different \f(CW$server\fR objects for \f(CW\*(C`POST\*(C'\fR and \f(CW\*(C`GET\*(C'\fR because
using \f(CW\*(C`GET\*(C'\fR you can provide only \fBsafe and idempotent\fR \s-1RPC\s0 functions
(because of \f(CW\*(C`GET\*(C'\fR semantic, caching/proxies, etc.).
.PP
Add handler for JSON-RPC 2.0 over \s-1HTTP\s0 protocol on \f(CW$path\fR
(with \f(CW\*(C`format=>0\*(C'\fR) using \f(CW\*(C`GET\*(C'\fR method.
.PP
\&\s-1RPC\s0 functions registered with \f(CW$server_safe_idempotent\fR will be called only with their
own parameters (provided with \s-1RPC\s0 request) \- if they will need access to
Mojolicious app you'll have to provide it manually (using global vars or
closures).
.SS "jsonrpc2_headers"
.IX Subsection "jsonrpc2_headers"
.Vb 1
\&    $app\->routes\->over(headers => { $app\->jsonrpc2_headers });
.Ve
.PP
You can use this condition to distinguish between JSON-RPC 2.0 and other
request types on same \f(CW$path\fR \- for example if you want to serve web page
and \s-1RPC\s0 on same url you can do this:
.PP
.Vb 3
\&    my $r = $app\->routes;
\&    $r\->jsonrpc2_get(\*(Aq/\*(Aq, $server)\->over(headers=>{$app\->jsonrpc2_headers});
\&    $r\->get(\*(Aq/\*(Aq)\->to(\*(Aqcontroller#action\*(Aq);
.Ve
.PP
If you don't use this condition and plugin's handler will get request with
wrong headers it will reply with \f(CW\*(C`415 Unsupported Media Type\*(C'\fR.
.SH "OPTIONS"
.IX Header "OPTIONS"
Mojolicious::Plugin::JSONRPC2 has no options.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::JSONRPC2 inherits all methods from
Mojolicious::Plugin and implements the following new ones.
.SS "register"
.IX Subsection "register"
.Vb 1
\&  $plugin\->register(Mojolicious\->new);
.Ve
.PP
Register hooks in Mojolicious application.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
JSON::RPC2::Server, Mojolicious, MojoX::JSONRPC2::HTTP.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker
at <https://github.com/powerman/perl\-Mojolicious\-Plugin\-JSONRPC2/issues>.
You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software. The code repository is available for
public review and contribution under the terms of the license.
Feel free to fork the repository and submit pull requests.
.PP
<https://github.com/powerman/perl\-Mojolicious\-Plugin\-JSONRPC2>
.PP
.Vb 1
\&    git clone https://github.com/powerman/perl\-Mojolicious\-Plugin\-JSONRPC2.git
.Ve
.SS "Resources"
.IX Subsection "Resources"
.IP "\(bu" 4
MetaCPAN Search
.Sp
<https://metacpan.org/search?q=Mojolicious\-Plugin\-JSONRPC2>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/dist/Mojolicious\-Plugin\-JSONRPC2>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Mojolicious\-Plugin\-JSONRPC2>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Matrix
.Sp
<http://matrix.cpantesters.org/?dist=Mojolicious\-Plugin\-JSONRPC2>
.IP "\(bu" 4
\&\s-1CPANTS: A CPAN\s0 Testing Service (Kwalitee)
.Sp
<http://cpants.cpanauthors.org/dist/Mojolicious\-Plugin\-JSONRPC2>
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex Efros <powerman@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2014\- by Alex Efros <powerman@cpan.org>.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The MIT (X11) License
.Ve
