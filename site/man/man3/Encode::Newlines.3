.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Encode::Newlines 3"
.TH Encode::Newlines 3 "2016-01-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Encode::Newlines \- Normalize line ending sequences
.SH "VERSION"
.IX Header "VERSION"
This document describes version 0.04 of Encode::Newlines, released 
September 4, 2007.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Encode;
\&    use Encode::Newlines;
\&
\&    # Convert to native newlines
\&    # Note that decode() and encode() are equivalent here
\&    $native = decode(Native => $string);
\&    $native = encode(Native => $string);
\&
\&    {
\&        # Allow mixed newlines in $mixed
\&        local $Encode::Newlines::AllowMixed = 1;
\&        $cr = encode(CR => $mixed);
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides the \f(CW\*(C`CR\*(C'\fR, \f(CW\*(C`LF\*(C'\fR, \f(CW\*(C`CRLF\*(C'\fR and \f(CW\*(C`Native\*(C'\fR encodings,
to aid in normalizing line endings.
.PP
It converts whatever line endings the source uses to the designated newline
sequence, for both \f(CW\*(C`encode\*(C'\fR and \f(CW\*(C`decode\*(C'\fR operations.
.PP
If you specify two different line endings joined by a \f(CW\*(C`\-\*(C'\fR, it will use the
first one for decoding and the second one for encoding.  For example, the
\&\f(CW\*(C`LF\-CRLF\*(C'\fR encoding means that all input should be normalized to \f(CW\*(C`LF\*(C'\fR, and
all output should be normalized to \f(CW\*(C`CRLF\*(C'\fR.
.PP
If the source has an inconsistent line ending style, then a \f(CW\*(C`Mixed newlines\*(C'\fR
exception is raised on behalf of the caller.  However, if the package variable
\&\f(CW$Encode::Newlines::AllowMixed\fR is set to a true value, then it will silently
convert all three line endings.
.SH "CAVEATS"
.IX Header "CAVEATS"
This module is not suited for working with PerlIO::encoding, because it
cannot guarantee that the chunk bounaries won't happen within a \s-1CR/LF\s0 
sequence.  See PerlIO::eol for how to deal with this correctly.
.PP
An optional \s-1XS\s0 implemenation would be nice.
.SH "AUTHORS"
.IX Header "AUTHORS"
Audrey Tang <audreyt@audreyt.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004\-2007 by Audrey Tang <audreyt@audreyt.org>.
.PP
This program is free software; you can redistribute it and/or 
modify it under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
