.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mo::Inline 3"
.TH Mo::Inline 3 "2016-07-06" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In your Mo module:
.PP
.Vb 4
\&    # This is effectively your own private Mo(ose) setup
\&    package MyModule::Mo;
\&    # use Mo qw\*(Aqbuild builder default import\*(Aq;
\&    1;
.Ve
.PP
From the command line:
.PP
.Vb 1
\&    > mo\-inline lib/MyModule/Mo.pm
.Ve
.PP
or:
.PP
.Vb 1
\&    > mo\-inline lib/
.Ve
.PP
or (if you are really lazy):
.PP
.Vb 1
\&    > mo\-inline
.Ve
.PP
Then from another module:
.PP
.Vb 2
\&    package MyModule::Foo;
\&    use MyModule::Mo;       # gets build, builder and default automatically
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mo is so small that you can easily inline it, along with any feature modules.
Mo provides a script called \f(CW\*(C`mo\-inline\*(C'\fR that will do it for you.
.PP
All you need to do is comment out the line that uses Mo, and run \f(CW\*(C`mo\-inline\*(C'\fR
on the file. \f(CW\*(C`mo\-inline\*(C'\fR will find such comments and do the inlining for you.
It will also replace any old inlined Mo with the latest version.
.PP
What Mo could you possibly want?
.SH "AUTOMATIC FEATURES"
.IX Header "AUTOMATIC FEATURES"
By using the Mo::import feature, all uses of your Mo class will turn on all
the features you specified. You can override it if you want, but that will be
the default.
.SH "REAL WORLD EXAMPLES"
.IX Header "REAL WORLD EXAMPLES"
For real world examples of Mo inlined using \f(CW\*(C`mo\-inline\*(C'\fR, see YAML::Mo,
Pegex::Mo and TestML::Mo.
