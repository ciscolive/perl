.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::ExcelXML::Error 3"
.TH Spreadsheet::Reader::ExcelXML::Error 3 "2017-04-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::ExcelXML::Error \- Moose class for remembering the last error
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    #!/usr/bin/env perl
\&    $|=1;
\&        use MooseX::ShortCut::BuildInstance qw( build_instance );
\&        use Spreadsheet::Reader::ExcelXML::Error;
\&
\&        my      $action = build_instance(
\&                        add_attributes =>{
\&                                error_inst =>{
\&                                        handles =>[ qw( error set_error clear_error set_warnings if_warn ) ],
\&                                },
\&                        },
\&                        error_inst => Spreadsheet::Reader::ExcelXML::Error\->new(
\&                                should_warn => 1,# 0 to turn off cluck when the error is set
\&                        ),
\&                );
\&        print   $action\->dump;
\&                        $action\->set_error( "You did something wrong" );
\&        print   $action\->dump;
\&        print   $action\->error . "\en";
\&
\&    ##############################################################################
\&    # SYNOPSIS Screen Output
\&    # 01: $VAR1 = bless( {
\&    # 02:             \*(Aqerror_inst\*(Aq => bless( {
\&    # 03:                                 \*(Aqshould_warn\*(Aq => 1,
\&    # 04:                                 \*(Aqspew_longmess\*(Aq => 1
\&    # 04:                             }, \*(AqSpreadsheet::Reader::ExcelXML::Error\*(Aq )
\&    # 05:         }, \*(AqANONYMOUS_SHIRAS_MOOSE_CLASS_1\*(Aq );
\&    # 06: You did something wrong at ~~error_string (defined at ../../../../lib/Spreadsheet/Reader/ExcelXML/Error.pm line 43) line 13.
\&    # 08:    Spreadsheet::Reader::ExcelXML::Error::::set_error(Spreadsheet::Reader::ExcelXML::Error=HASH(0x31e398), "You did something wrong") called at ~~ line 110
\&    # 09:    ANONYMOUS_SHIRAS_MOOSE_CLASS_1::set_error(ANONYMOUS_SHIRAS_MOOSE_CLASS_1=HASH(0x3300f0), "You did something wrong") called at error_example.pl line 18
\&    # 10: $VAR1 = bless( {
\&    # 11:             \*(Aqerror_inst\*(Aq => bless( {
\&    # 12:                                 \*(Aqshould_warn\*(Aq => 1,
\&    # 13:                                 \*(Aqerror_string\*(Aq => \*(AqYou did something wrong\*(Aq
\&    # 14:                                 \*(Aqspew_longmess\*(Aq => 1,
\&    # 15:                             }, \*(AqSpreadsheet::Reader::ExcelXML::Error\*(Aq )
\&    # 16:         }, \*(AqANONYMOUS_SHIRAS_MOOSE_CLASS_1\*(Aq );
\&    # 17: You did something wrong
\&    ##############################################################################
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation is written to explain ways to use this module when writing your own excel
parser.  To use the general package for excel parsing out of the box please review the
documentation for Workbooks,
Worksheets, and
Cells
.PP
This Moose class contains two attributes.  It is intended
to be used through (by) delegation in other classes.  The first
attribute is used to store the current error string.  The second, is set to turn on or off
pushing the error string to \s-1STDERR\s0 when the first attribute is (re)set.
.SS "Attributes"
.IX Subsection "Attributes"
Data passed to new when creating an instance.   For modification of
these attributes see the listed 'attribute methods'. For more information on
attributes see Moose::Manual::Attributes.
.PP
\fIerror_string\fR
.IX Subsection "error_string"
.Sp
.RS 4
\&\fBDefinition:\fR This stores an error string for recall later.
.Sp
\&\fBDefault\fR undef (init_arg = undef)
.Sp
\&\fBRange\fR any string (error objects with the 'as_string' or 'message' are auto coerced to
a string)
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.RE
.PP
error
.IX Subsection "error"
.Sp
.RS 4
\&\fBDefinition:\fR returns the currently stored error string
.RE
.PP
clear_error
.IX Subsection "clear_error"
.Sp
.RS 4
\&\fBDefinition:\fR clears the currently stored error string
.RE
.PP
set_error( \f(CW$error_string\fR )
.IX Subsection "set_error( $error_string )"
.Sp
.RS 4
\&\fBDefinition:\fR sets the attribute with \f(CW$error_string\fR.
.RE
.PP
\fIshould_warn\fR
.IX Subsection "should_warn"
.Sp
.RS 4
\&\fBDefinition:\fR This determines if the package will push any low level errors logged
during processing to \s-1STDERR\s0 when they occur. (rather than just made available) It
should be noted that failures that kill the package should push to \s-1STDERR\s0 by default.
If your Excel sheet is malformed it can error without failing.  Sometimes this package
will handle those cases correctly and sometimes it wont.  If you want to know more
behind the scenes about the unexpected behaviour of the sheet then turn this attribute
on.
.Sp
\&\fBDefault\fR 1 \-> it will push to \s-1STDERR\s0
.Sp
\&\fBRange\fR Boolean values
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.RE
.PP
set_warnings( \f(CW$bool\fR )
.IX Subsection "set_warnings( $bool )"
.Sp
.RS 4
\&\fBDefinition:\fR Turn pushed warnings on or off
.RE
.PP
if_warn
.IX Subsection "if_warn"
.Sp
.RS 4
\&\fBDefinition:\fR Returns the current setting of this attribute
.RE
.PP
\fIspew_longmess\fR
.IX Subsection "spew_longmess"
.Sp
.RS 4
\&\fBDefinition:\fR This (the Error) class is capable of pulling the \*(L"longmess\*(R" in Carp
for each error in order to understand what happened.  If that is just too much
you can change the behaviour
.Sp
\&\fBDefault\fR 1 \-> it will pull the longmess (using Carp);
.Sp
\&\fBRange\fR Boolean values
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.RE
.PP
should_spew_longmess( \f(CW$bool\fR )
.IX Subsection "should_spew_longmess( $bool )"
.Sp
.RS 4
\&\fBDefinition:\fR add the longmess to errors
.RE
.PP
spewing_longmess
.IX Subsection "spewing_longmess"
.Sp
.RS 4
\&\fBDefinition:\fR Returns the current setting of this attribute
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::Reader::ExcelXML/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR get clases in this package to return error numbers and or error strings and
then provide opportunity for this class to localize.
.Sp
\&\fB2.\fR Get the \f(CW@CARP_NOT\fR section to work and skip most of the Moose level reporting
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.RS 4
Jed Lund
.Sp
jandrew@cpan.org
.RE
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Spreadsheet::Reader::ExcelXML \- the package
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::Read \- generic Spreadsheet reader
.Sp
Spreadsheet::ParseExcel \- Excel binary version 2003 and earlier (.xls files)
.Sp
Spreadsheet::XLSX \- Excel version 2007 and later
.Sp
Spreadsheet::ParseXLSX \- Excel version 2007 and later
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
