.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "POE::Test::Loops 3"
.TH POE::Test::Loops 3 "2014-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
POE::Test::Loops \- Reusable tests for POE::Loop authors
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        #!/usr/bin/perl \-w
\&
\&        use strict;
\&        use Getopt::Long;
\&        use POE::Test::Loops;
\&
\&        my ($dir_base, $flag_help, @loop_modules, $flag_verbose);
\&        my $result = GetOptions(
\&                \*(Aqdirbase=s\*(Aq => \e$dir_base,
\&                \*(Aqloop=s\*(Aq => \e@loop_modules,
\&                \*(Aqverbose\*(Aq => \e$flag_verbose,
\&                \*(Aqhelp\*(Aq => \e$flag_help,
\&        );
\&
\&        if (
\&                !$result or !$dir_base or $flag_help or !@loop_modules
\&        ) {
\&                die(
\&                        "$0 usage:\en",
\&                        "  \-\-dirbase DIR   (required) base directory for tests\en",
\&                        "  \-\-loop MODULE   (required) loop modules to test\en",
\&                        "  \-\-verbose   show some extra output\en",
\&                        "  \-\-help   you\*(Aqre reading it\en",
\&                );
\&        }
\&
\&        POE::Test::Loops::generate($dir_base, \e@loop_modules, $flag_verbose);
\&        exit 0;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
POE::Test::Loops contains one function, \fBgenerate()\fR, which will
generate all the loop tests for one or more POE::Loop subclasses.
.PP
The \*(L"\s-1SYNOPSIS\*(R"\s0 example is a version of poe-gen-tests, which is a
stand-alone utility to generate the actual tests.  poe-gen-tests
also documents the POE::Test::Loops system in more detail.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "generate( $DIRBASE, \e@LOOPS, $VERBOSE )"
.el .SS "generate( \f(CW$DIRBASE\fP, \e@LOOPS, \f(CW$VERBOSE\fP )"
.IX Subsection "generate( $DIRBASE, @LOOPS, $VERBOSE )"
Generates the loop tests.  \s-1DIRBASE\s0 is the (relative) directory in
which a subdirectory for each of the \s-1LOOPS\s0 is created.  If \s-1VERBOSE\s0 is
set to a \s-1TRUE\s0 value some progress reporting is printed.
.PP
.Vb 5
\&        POE::Test::Loops::generate(
\&                "./t",
\&                [ "POE::Loop::Yours" ],
\&                1,
\&        );
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
POE::Loop and poe-gen-tests.
.SH "AUTHOR & COPYRIGHT"
.IX Header "AUTHOR & COPYRIGHT"
See poe-gen-tests.
