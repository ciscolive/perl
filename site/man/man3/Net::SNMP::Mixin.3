.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::SNMP::Mixin 3"
.TH Net::SNMP::Mixin 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SNMP::Mixin \- mixin framework for Net::SNMP
.SH "VERSION"
.IX Header "VERSION"
Version 0.14
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Thin framework to access cooked \s-1SNMP\s0 information from \s-1SNMP\s0 agents with various mixins to Net::SNMP.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Net::SNMP;
\&  use Net::SNMP::Mixin;
\&
\&  my $session = Net::SNMP\->session( \-hostname => \*(Aqexample.com\*(Aq );
\&  
\&  # method mixin and initialization
\&  $session\->mixer(qw/Net::SNMP::Mixin::Foo Net::SNMP::Mixin::Bar/);
\&  $session\->init_mixins();
\&  
\&  # event_loop in case of nonblocking sessions
\&  snmp_dispatcher();
\&
\&  # check for initialization errors
\&  $session\->init_ok();
\&
\&  die scalar $session\->errors if $session\->errors;
\&
\&  # use mixed\-in methods to retrieve cooked SNMP info
\&  my $a = $session\->get_foo_a();
\&  my $b = $session\->get_bar_b();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::SNMP implements already the methods to retrieve raw \s-1SNMP\s0 values from the agents. With the help of specialized mixins, the access to these raw \s-1SNMP\s0 values is simplified and necessary calculations on these values are already done for gaining high level information.
.PP
This module provides helper functions in order to mixin methods into the inheritance tree of the Net::SNMP session instances or the Net::SNMP class itself.
.PP
The standard Net::SNMP get_... methods are still supported and the mixins fetch itself the needed \s-1SNMP\s0 values during initialization with these standard get_... methods. Blocking and non blocking sessions are supported. The mixins don't change the Net::SNMP session instance, besides storing additional payload in the object space prefixed with the unique mixin module names as the hash key.
.SH "DEFAULT EXPORTS"
.IX Header "DEFAULT EXPORTS"
These methods are exported by default into the \fBNet::SNMP\fR namespace:
.IP "\(bu" 4
mixer
.IP "\(bu" 4
init_mixins
.IP "\(bu" 4
init_ok
.IP "\(bu" 4
errors
.PP
Please see the following description for details.
.SS "\fBmixer(@module_names)\fP"
.IX Subsection "mixer(@module_names)"
.Vb 2
\&  # class method
\&  Net::SNMP\->mixer(qw/Net::SNMP::Mixin::Foo/);
\&
\&  # instance method
\&  $session\->mixer(qw/Net::SNMP::Mixin::Yazz Net::SNMP::Mixin::Brazz/)
.Ve
.PP
Called as class method mixes the methods for all session instances. This is useful for agents supporting the same set of MIBs.
.PP
Called as instance method mixes only for the calling session instance. This is useful for \s-1SNMP\s0 agents not supporting the same set of MIBs and therefore not the same set of mixin modules.
.PP
Even the \s-1SNMP\s0 agents from a big network company don't support the most useful standard MIBs. They always use proprietary private enterprise MIBs (ring, ring, Cisco, do you hear the bells, grrrmmml).
.PP
The name of the modules to mix-in is passed to this method as a list. You can mix class and instance mixins as you like, but importing the same mixin module twice is an error.
.PP
Returns the invocant for chaining method calls, dies on error.
.SS "\fBinit_mixins($reload)\fP"
.IX Subsection "init_mixins($reload)"
This method should be called in void context.
.PP
.Vb 2
\&  $session\->init_mixins();
\&  $session\->init_mixins(1);
.Ve
.PP
This method redispatches to every \fI\f(BI_init()\fI\fR method in the loaded mixin modules. The raw \s-1SNMP\s0 values for the mixins are loaded during this call \- or via callbacks during the snmp_dispatcher event loop for nonblocking sessions \- and stored in the object space. The mixed methods deliver afterwards cooked meal from these values.
.PP
The \s-1MIB\s0 values are reloaded for the mixins if the argument \f(CW$reload\fR is true. It's an error calling this method twice without forcing \f(CW$reload\fR.
.PP
If there is an error in a mixin, the rest of the initialization is skipped to preserve the current Net::SNMP error message.
.PP
With the \fBinit_ok()\fR method, after the snmp_dispatcher run, the successful initialization must be checked.
.PP
.Vb 4
\&  $session\->init_mixins;
\&  snmp_dispatcher;
\&  $session\->init_ok();
\&  die scalar $session\->errors if $session\->errors;
.Ve
.SS "\fBinit_ok($mixin)\fP"
.IX Subsection "init_ok($mixin)"
.Vb 2
\&  $session\->init_ok();
\&  $session\->init_ok(\*(AqNet::SNMP::Mixin::MyMixin\*(Aq);
.Ve
.PP
Test if all mixins or a single mixin is proper initialized.
.PP
Returns undef on error. The error is pushed on the sessions error buffer.
.PP
.Vb 1
\&  die scalar $session\->errors unless $session\->init_ok();
.Ve
.SS "\fBerrors($clear)\fP"
.IX Subsection "errors($clear)"
.Vb 2
\&  @errors = $session\->errors();
\&  @errors = $session\->errors(1);
.Ve
.PP
\&\fBNet::SNMP::error()\fR has only one slot for errors. During nonblocking calls it's possible that an error followed by a successful transaction is cleared before the user gets the chance to see the error. For the mixin modules we use an error buffer until they are explicit cleared.
.PP
This method returns the list of all errors pushed by any mixin module. Called in scalar context returns a string of all \f(CW@errors\fR joined with \*(L"\en\*(R".
.PP
The error buffer is cleared if the argument \f(CW$clear\fR is true.
.SH "GUIDELINES FOR MIXIN AUTHORS"
.IX Header "GUIDELINES FOR MIXIN AUTHORS"
See the Net::SNMP::Mixin::System module as a blueprint for a simple mixin module.
.PP
As a mixin-module author you must respect the following design guidelines:
.IP "\(bu" 4
Write more separate mixin-modules instead of 'one module fits all'.
.IP "\(bu" 4
Don't build mutual dependencies with other mixin-modules.
.IP "\(bu" 4
In no circumstance change the given attributes of the calling Net::SNMP session instance. In any case stay with the given behavior for blocking, translation, debug, retries, timeout, ... of the object. Remember it's a mixin and no sub\- or superclass.
.IP "\(bu" 4
Don't assume the translation of the \s-1SNMP\s0 values by default. Due to the asynchronous nature of the \s-1SNMP\s0 calls, you can't rely on the output of \f(CW$session\fR\->translate. If you need a special representation of a value, you have to check the values itself and perhaps translate or untranslate it when needed. See the source of Net::SNMP::Mixin::Dot1qVlanStatic for an example.
.IP "\(bu" 4
Implement the \fI\f(BI_init()\fI\fR method and fetch \s-1SNMP\s0 values only during this call. If the session instance is nonblocking use a callback to work properly with the \fI\f(BIsnmp_dispatcher()\fI\fR event loop. In no circumstance load additonal \s-1SNMP\s0 values outside the  \fI\f(BI_init()\fI\fR method.
.IP "\(bu" 4
Don't \fBdie()\fR on \s-1SNMP\s0 errors during \fI\f(BI_init()\fI\fR, just return premature with no value. The caller is responsible to check the \fI\f(CI$session\fI\->\f(BIerror()\fI\fR method.
.IP "\(bu" 4
Use Sub::Exporter and export the mixin methods by default.
.SH "DEVELOPER INFORMATION"
.IX Header "DEVELOPER INFORMATION"
If \fBmixer()\fR is called as a class method, the mixin-methods are just imported into the Net::SNMP package.
.PP
If called as an instance method for the first time, the methods are imported into a newly generated, unique package for this session. The session instance is \fBreblessed\fR into this new package. The new package \fBinherits\fR from the Net::SNMP class. Successive calls for this session instance imports just the additional mixin-methods into the already generated package for this instance.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Sub::Exporter, and the Net::SNMP::Mixin::... documentations for more details about the provided mixin methods.
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
Net::SNMP, Sub::Exporter, Package::Generator, Package::Reaper
.SH "BUGS, PATCHES & FIXES"
.IX Header "BUGS, PATCHES & FIXES"
There are no known bugs at the time of this release. However, if you spot a bug or are experiencing difficulties that are not explained within the \s-1POD\s0 documentation, please submit a bug to the \s-1RT\s0 system (see link below). However, it would help greatly if you are able to pinpoint problems or even supply a patch.
.PP
Fixes are dependant upon their severity and my availablity. Should a fix not be forthcoming, please feel free to (politely) remind me by sending an email to gaissmai@cpan.org .
.PP
.Vb 1
\&  RT: http://rt.cpan.org/Public/Dist/Display.html?Name=Net\-SNMP\-Mixin
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Karl Gaissmaier <karl.gaissmaier at uni\-ulm.de>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008\-2015 Karl Gaissmaier, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
