.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Radius::Packet 3"
.TH Data::Radius::Packet 3 "2020-07-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Radius::Packet \- module to encode/decode RADIUS messages
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 2
\&    use Data::Radius::Constants qw(:all);
\&    use Data::Radius::Packet;
\&
\&    my $dictionary = Data::Radius::Dictionary\->load_file(\*(Aq./radius/dictionary\*(Aq);
\&    my $packet = Data::Radius::Packet\->new(secret => \*(Aqtop\-secret\*(Aq, dict => $dictionary);
\&
\&    # build request packet:
\&    my ($request, $req_id, $authenticator) = $packet\->build(
\&        type => ACCESS_REQUEST,
\&        av_list => [
\&            { Name => \*(AqUser\-Name\*(Aq, Value => \*(AqJonSnow\*(Aq},
\&            { Name => \*(AqUser\-Password\*(Aq, Value => \*(AqCastle Black\*(Aq },
\&            { Name => \*(AqMessage\-Authenticator\*(Aq, Value => \*(Aq\*(Aq },
\&        ],
\&    );
\&
\&    # ... send $request and read $reply binary packets from RADIUS server
\&
\&    # parse reply packet:
\&    my ($reply_type, $reply_id, $reply_authenticator, $av_list) = $packet\->parse($reply, $authenticator);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Data::Radius::Packet\*(C'\fR module provides a methods to encode/decode \s-1RADIUS\s0 messages.
It can be used to implement both Radius client or Radius server.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( secret => \s-1SECRET,\s0 dict => \s-1DICTIONARY\s0 )" 4
.IX Item "new ( secret => SECRET, dict => DICTIONARY )"
Create a new object.
All arguments are optional. Dictionary is object of \f(CW\*(C`Data::Radius::Dictionary\*(C'\fR which allow to use attribute names instead of codes.
Secret is global secret string, can be overrided when building a new packet.
.SH "METHODS"
.IX Header "METHODS"
.IP "build ( type => \s-1CODE,\s0 av_list => \s-1AVLIST,\s0 [ authenticator => \s-1AUTH\s0 ], [ dict => \s-1DICTIONARY\s0 ], [ secret => \s-1SECRET\s0 ], [ with_msg_auth => \s-1BOOL\s0 ], [ request_id => \s-1BYTE\s0 ])" 4
.IX Item "build ( type => CODE, av_list => AVLIST, [ authenticator => AUTH ], [ dict => DICTIONARY ], [ secret => SECRET ], [ with_msg_auth => BOOL ], [ request_id => BYTE ])"
Build a binary-encoded \s-1RADIUS\s0 packet.
.Sp
\&\f(CW\*(C`type\*(C'\fR identify type of \s-1RADIUS\s0 request. They are defined in Data::Radius::Constants.
.Sp
\&\f(CW\*(C`av_list\*(C'\fR is ARRAY-REF of attributes, each defined as HASH-REF with keys {Name, Value, [Tag]} or {Id, [VendorId], Value}
Tagged attributes can be also specified using 'Name:Tag' format.
.Sp
\&\f(CW\*(C`authenticator\*(C'\fR is optional for request (by default the random value will be used), but required for replies.
.Sp
\&\f(CW\*(C`secret\*(C'\fR and \f(CW\*(C`dict\*(C'\fR can be used to override values from constructor (for example to use individual secrets for different Radius servers).
.Sp
\&\f(CW\*(C`with_msg_auth\*(C'\fR can be passed to append Message-Authenticator attribute.
It also can be archived by adding this attribyte to \s-1AV\s0 list with empty value
Note that this attribute usually must not be used for \s-1ACCOUNTING\s0 requests.
.Sp
\&\f(CW\*(C`request_id\*(C'\fR \- allow to define own it. By default internal sequence is used. Value must be in range 0\-255 (1byte)
.IP "parse ($radius_packet, [$request_authenticator])" 4
.IX Item "parse ($radius_packet, [$request_authenticator])"
Parse binary-encoded \s-1RADIUS\s0 packet to list of attributes
.Sp
Returns multiple values: \s-1RADIUS\s0 code, request id, authenticator, ARRAY-REF of attributes
.IP "request_id ($radius_packet)" 4
.IX Item "request_id ($radius_packet)"
Returns request id from packet without parsing it's attribues.
Can be used to choose request authenticator before parsing the response packet in full.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Data::Radius::Constants, Data::Radius::Dictionary
.SH "AUTHOR"
.IX Header "AUTHOR"
Sergey Leschenko <sergle.ua at gmail.com>
.PP
PortaOne Development Team <perl\-radius at portaone.com> is the current module's maintainer at \s-1CPAN.\s0
