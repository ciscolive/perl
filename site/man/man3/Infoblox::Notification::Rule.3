.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Notification::Rule 3"
.TH Infoblox::Notification::Rule 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Notification::Rule \- A notification rule object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The notification rule object provides configuration for notification of endpoints when the appropriate event occurs.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $notification_rule = Infoblox::Notification::Rule\->new(
\&     event_type                          => \*(AqDNS_RPZ\*(Aq | \*(AqDHCP_LEASES\*(Aq | \*(AqSECURITY_ADP\*(Aq |
\&                                            \*(AqIPAM\*(Aq,                                           # Required
\&     expression_list                     => [$rule_op1, $rule_op2, ...],                      # Required
\&     name                                => $string,                                          # Required
\&     notification_action                 => \*(AqCISCOISE_QUARANTINE\*(Aq | \*(AqCISCOISE_PUBLISH\*(Aq |
\&                                            \*(AqRESTAPI_TEMPLATE_INSTANCE\*(Aq,                      # Required
\&     notification_target                 => $ise_endpoint | $rest_endpoint | $dxl_endpoint    # Required
\&     all_members                         => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                 # Optional / if no selected_members given default is \*(Aqtrue\*(Aq
\&     comment                             => $string,                                          # Optional / Default is undefined
\&     disable                             => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                 # Optional / Default is \*(Aqfalse\*(Aq
\&     override_publish_settings           => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                 # Optional default is \*(Aqfalse\*(Aq
\&     publish_settings                    => $publish_settings,                                # Optional / Default is undefined
\&     selected_members                    => [$member1, $member2, ...],                        # Optional / Default is empty list
\&     template_instance                   => $instance,                                        # Optional / Default is undefined
\&     enable_event_deduplication          => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                 # Optional / Default is \*(Aqfalse\*(Aq
\&     event_deduplication_lookback_period => $uint,                                            # Optional / Default is 600
\&     enable_event_deduplication_log      => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                 # Optional / Default is \*(Aqfalse\*(Aq
\&     event_deduplication_fields          => [ \*(AqSOURCE_IP\*(Aq | \*(AqQUERY_NAME\*(Aq | \*(AqRPZ_POLICY\*(Aq |
\&                                              \*(AqRPZ_TYPE\*(Aq | \*(AqQUERY_TYPE\*(Aq | \*(AqNETWORK\*(Aq |
\&                                              \*(AqNETWORK_VIEW\*(Aq, ... ],                          # Optional / Default is empty list
\&                                                                                              # Required if enable_event_deduplication is set to \*(Aqtrue\*(Aq
\&     
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a notification rule object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add the object to the Infoblox appliance.
See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Construct an object
\& my $object = Infoblox::Notification::Rule\->new(
\&     event_type          => \*(AqDNS_RPZ\*(Aq,
\&     expression_list     => [$rule_start_list, $rule_op1, $rule_op2, $rule_end_list],
\&     name                => \*(Aqise_rule1\*(Aq,
\&     notification_action => \*(AqCISCOISE_QUARANTINE\*(Aq,
\&     notification_target => $endpoint,
\& );
\&
\& #Submit for addition
\& my $response = $session\->add($object);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance.
See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific notification rule object:
\&
\&  comment             \- Optional. The notification rule comment in string format.
\&  name                \- Optional. The notification rule name in string format.
\&  event_type          \- Optional. The notification rule event type in string format.
\&  notification_action \- Optional. The notification rule notification action in string format.
\&  notification_target \- Optional. The Infoblox::CiscoISE::Endpoint, Infoblox::Notification::REST::Endpoint or Infoblox::DXL::Endpoint object.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::Notification::Rule\*(Aq,
\&     name   => \*(Aqise_rule1\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify the object in the Infoblox appliance.
See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Modify comment value
\& $object\->comment(\*(Aqthis is a modified comment\*(Aq);
\&
\& #Submit modification
\& my $response = $session\->modify($object);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove the object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific \s-1DHCP\s0 range object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Get the objects
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::Notification::Rule\*(Aq,
\&     name   => \*(Aqise_rule1\*(Aq,
\& );
\&
\& #Find the desired object from the retrieved list
\& my $desired_object = $retrieved_objs[0];
\&
\& #Submit for removal
\& my $response = $session\->remove($desired_object);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for the notification rule object:
\&
\&  comment             \- Optional. The notification rule comment in string format (regexp).
\&  name                \- Optional. The notification rule name in string format (regexp).
\&  event_type          \- Optional. The notification rule event type in string format (exact)
\&  notification_action \- Optional. The notification rule notification action in string format (exact).
\&  notification_target \- Optional. The Infoblox::CiscoISE::Endpoint, Infoblox::Notification::REST::Endpoint or Infoblox::DXL::Endpoint object.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 6
\& # search for objects
\& my @retrieved_objs = $session\->search(
\&     object  => \*(AqInfoblox::Notification::Rule\*(Aq,
\&     name    => \*(Aq^ise.*\*(Aq,
\&     comment => \*(Aq.*comment\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a notification rule.
.SS "all_members( )"
.IX Subsection "all_members( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the notification rule engine is run on all member or on selected members.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to run notification rule engine on all members, or 'false' to run it on selected members. The default value unless selected_members are given is 'true'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get all_members value
\& my $all_members = $object\->all_members();
\&
\& #Modify all_members value
\& $object\->all_members(\*(Aqfalse\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the notification rule comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired comment in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get comment value
\& my $comment = $object\->comment();
\&
\& #Modify comment value
\& $object\->comment(\*(Aqise comment\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the notification rule is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to disable the notification rule or 'false' to enable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get disable value
\& my $disable = $object\->disable();
\&
\& #Modify disable value
\& $object\->disable(\*(Aqfalse\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_event_deduplication( )"
.IX Subsection "enable_event_deduplication( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the notification rule for event deduplication is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameters\fR" 4
.IX Item "Parameters"
Specify 'true' to enable event deduplication or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_event_deduplication value
\& my $enable_event_deduplication = $object\->enable_event_deduplication();
\&
\& #Modify enable_event_deduplication value
\& $object\->enable_event_deduplication(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_event_deduplication_log( )"
.IX Subsection "enable_event_deduplication_log( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the notification rule event deduplication syslog is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameters\fR" 4
.IX Item "Parameters"
Specify 'true' to enable event deduplication syslog or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_event_deduplication_log value
\& my $enable_event_deduplication_log = $object\->enable_event_deduplication_log();
\&
\& #Modify enable_event_deduplication_log value
\& $object\->enable_event_deduplication_log(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "event_deduplication_fields( )"
.IX Subsection "event_deduplication_fields( )"
.RS 4
Use this method to set or retrieve the fields in the notification rule for event deduplication.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameters\fR" 4
.IX Item "Parameters"
The valid value is an array reference that contains following values: '\s-1SOURCE_IP\s0', '\s-1QUERY_NAME\s0', '\s-1RPZ_POLICY\s0', '\s-1RPZ_TYPE\s0',
\&'\s-1QUERY_TYPE\s0', '\s-1NETWORK\s0', '\s-1NETWORK_VIEW\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get event_deduplication_fields value
\& my $event_deduplication_fields = $object\->event_deduplication_fields();
\&
\& #Modify event_deduplication_fields value
\& $object\->event_deduplication_fields([\*(AqSOURCE_IP\*(Aq, \*(AqQUERY_TYPE\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "event_deduplication_lookback_period( )"
.IX Subsection "event_deduplication_lookback_period( )"
.RS 4
Use this method to set or retrieve the lookback period for the notification rule for event deduplication.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameters\fR" 4
.IX Item "Parameters"
The valid value is an unsigned integer between 5 and 900 that represents the lookback period (in seconds).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get event_deduplication_lookback_period value
\& my $event_deduplication_lookback_period = $object\->event_deduplication_lookback_period();
\&
\& #Modify event_deduplication_lookback_period value
\& $object\->event_deduplication_lookback_period(300);
.Ve
.RE
.RS 4
.RE
.SS "event_type( )"
.IX Subsection "event_type( )"
.RS 4
Use this method to set or retrieve the notification rule event type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1DNS_RPZ\s0', '\s-1IPAM\s0', '\s-1DHCP_LEASES\s0', '\s-1ANALYTICS_DNS_TUNNEL\s0', '\s-1SECURITY_ADP\s0', '\s-1DB_CHANGE_DHCP_FIXED_ADDRESS_IPV4\s0',
\&'\s-1DB_CHANGE_DHCP_FIXED_ADDRESS_IPV6\s0', '\s-1DB_CHANGE_DHCP_NETWORK_IPV4\s0', '\s-1DB_CHANGE_DHCP_NETWORK_IPV6\s0', '\s-1DB_CHANGE_DHCP_RANGE_IPV4\s0',
\&'\s-1DB_CHANGE_DHCP_RANGE_IPV6\s0', '\s-1DB_CHANGE_DNS_HOST_ADDRESS_IPV4\s0' and '\s-1DB_CHANGE_DNS_HOST_ADDRESS_IPV6\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get event_type value
\& my $event_type = $object\->event_type();
\&
\& #Modify event_type value
\& $object\->event_type(\*(AqSECURITY_ADP\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "expression_list( )"
.IX Subsection "expression_list( )"
.RS 4
Use this method to set or retrieve the notification rule condition expression.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of Infoblox::Notification::RuleExpressionOp objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get expression_list value
\& my $expression_list = $object\->expression_list();
\&
\& #Set event_type value
\& $object\->event_type(\*(AqSECURITY_ADP\*(Aq);
\&
\& #Construct (\*(AqSECURITY_AD_RULE_SEVERY\*(Aq LESS_SEVERE \*(AqMAJOR\*(Aq
\& # AND SOURCE_IP EQUALS \*(Aq10.0.0.10\*(Aq) expression
\&
\& my $start_list = Infoblox::Grid::ExpressionOp\->new(
\&     op1_type => \*(AqLIST\*(Aq,
\&     op       => \*(AqAND\*(Aq,
\& );
\&
\& my $op1 = Infoblox::Grid::ExpressionOp\->new(
\&     op1_type => \*(AqFIELD\*(Aq,
\&     op1      => \*(AqSECURITY_AD_RULE_SEVERY\*(Aq,
\&     op       => \*(AqLE\*(Aq,
\&     op2      => \*(AqMAJOR\*(Aq,
\&     op2_type => \*(AqSTRING\*(Aq,
\& );
\&
\& my $op2 = Infoblox::Grid::ExpressionOp\->new(
\&     op1_type => \*(AqFIELD\*(Aq,
\&     op1      => \*(AqSOURCE_IP\*(Aq,
\&     op       => \*(AqEQ\*(Aq,
\&     op2      => \*(Aq10.0.0.10\*(Aq,
\&     op2_type => \*(AqSTRING\*(Aq,
\& );
\&
\& my $end_list = Infoblox::Grid::ExpressionOp\->new(
\&     op1_type => \*(AqLIST\*(Aq,
\&     op       => \*(AqENDLIST\*(Aq,
\& );
\&
\& #Modify expression_list value
\& $object\->expression_list([$start_list, $op1, $op2, $end_list]);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the notification rule name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name value
\& my $name = $object\->name();
\&
\& #Modify name value
\& $object\->name(\*(Aqrule1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "notification_action( )"
.IX Subsection "notification_action( )"
.RS 4
Use this method to set or retrieve the notification rule action.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1CISCOISE_QUARANTINE\s0', '\s-1CISCOISE_PUBLISH\s0' and '\s-1RESTAPI_TEMPLATE_INSTANCE\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get notification_action value
\& my $notification_action = $object\->notification_action();
\&
\& #Modify notification_action value
\& $object\->notification_action(\*(AqCISCOISE_QUARANTINE\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "notification_target( )"
.IX Subsection "notification_target( )"
.RS 4
Use this method to set or retrieve the notification rule target.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::CiscoISE::Endpoint, Infoblox::Notification::REST::Endpoint or Infoblox::DXL::Endpoint object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get notification_target value
\& my $notification_target = $object\->notification_target();
\&
\& #Modify notification_target value
\& $object\->notification_target($endpoint);
.Ve
.RE
.RS 4
.RE
.SS "override_publish_settings( )"
.IX Subsection "override_publish_settings( )"
.RS 4
The override_publish_settings attribute controls whether the publish_settings method values of the member are used, instead of the target endpoint default.
.Sp
The override_publish_settings attribute can be specified explicitly. It is also set implicitly when publish_settings is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the endpoint level setting for publish_settings. Set the parameter to \*(L"false\*(R" to inherit the endpoint level setting for publish_settings.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_publish_settings value
\& my $override_publish_settings = $object\->override_publish_settings( );
\& #Modify override_publish_settings value
\& $object\->override_publish_settings("true");
.Ve
.RE
.RS 4
.RE
.SS "publish_settings( )"
.IX Subsection "publish_settings( )"
.RS 4
Use this method to set or retrieve the notification rule publish settings.
.Sp
Setting this method to a defined value implicitly sets the override_publish_settings method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the endpoint default and automatically resets the override_publish_settings method to \*(L"false\*(R".
.Sp
Note that when publish_settings is set to a defined value and override_publish_settings is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->publish_settings($value); \f(CW$object\fR\->override_publish_settings(\*(L"false\*(R"); will set override_publish_settings to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_publish_settings(\*(L"false\*(R"); \f(CW$object\fR\->publish_settings($value); will result in override_publish_settings=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::CiscoISE::PublishSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get publish_settings value
\& my $publish_settings = $object\->publish_settings();
\&
\& #Modify publish_settings value
\& $object\->publish_settings($publish_settings);
.Ve
.RE
.RS 4
.RE
.SS "selected_members( )"
.IX Subsection "selected_members( )"
.RS 4
Use this method to set or retrieve the member host names on which you run the publish engine.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of desired selected member host names in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get selected_members value
\& my $selected_members = $object\->selected_members();
\&
\& #Modify selected_members value
\& $object\->selected_members([\*(Aqmember1.com\*(Aq, \*(Aqmember2.com\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "template_instance( )"
.IX Subsection "template_instance( )"
.RS 4
Use this method to set or retrieve the \s-1REST API\s0 template instance.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Notification::REST::TemplateInstance object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get template_instance value
\& my $template_instance = $object\->template_instance();
\&
\& #Modify template_instance value
\& $object\->template_instance($instance);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,
Infoblox::Session\->\fBadd()\fR,
Infoblox::Session\->\fBget()\fR,
Infoblox::Session\->\fBmodify()\fR,
Infoblox::Session\->\fBremove()\fR,
Infoblox::Session\->\fBsearch()\fR,
Infoblox::CiscoISE::PublishSetting,
Infoblox::CiscoISE::Endpoint, 
Infoblox::DXL::Endpoint, 
Infoblox::Notification::RuleExpressionOp, 
Infoblox::Notification::REST::Endpoint, 
Infoblox::Notification::REST::TemplateInstance,
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
