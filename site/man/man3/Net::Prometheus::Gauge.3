.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Prometheus::Gauge 3"
.TH Net::Prometheus::Gauge 3 "2020-07-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"Net::Prometheus::Gauge" \- a snapshot value\-reporting metric
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use Net::Prometheus;
\&
\&   my $client = Net::Prometheus\->new;
\&
\&   my $gauge = $client\->new_gauge(
\&      name => "users",
\&      help => "Number of current users",
\&   );
\&
\&   my %users;
\&   ...
\&
\&   $gauge\->set( scalar keys %users );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides a gauge metric \- an arbitrary value that observes some
snapshot of state at some instant in time. This is often used to report on the
current usage of resources by the instrumented program, in a way that can
decrease as well as increase. It is a subclass of Net::Prometheus::Metric.
.SS "Value-Reporting Functions"
.IX Subsection "Value-Reporting Functions"
As an alternative to using the \f(CW\*(C`set\*(C'\fR method to update the value of the gauge,
a callback function can be used instead which should return the current value
to report for that gauge. This function is invoked at collection time, meaning
the reported value is up-to-date.
.PP
These functions are invoked inline as part of the collection process, so they
should be as small and lightweight as possible. Typical applications involve
reporting the size of an array or hash within the implementation's code.
.PP
.Vb 1
\&   $gauge\->set_function( sub { scalar @items } );
\&
\&   $gauge\->set_function( sub { scalar keys %things } );
.Ve
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
Instances of this class are not usually constructed directly, but instead via
the Net::Prometheus object that will serve it:
.PP
.Vb 1
\&   $gauge = $prometheus\->new_gauge( %args )
.Ve
.PP
This takes the same constructor arguments as documented in
Net::Prometheus::Metric.
.SH "METHODS"
.IX Header "METHODS"
.SS "set"
.IX Subsection "set"
.Vb 2
\&   $gauge\->set( @label_values, $value )
\&   $gauge\->set( \e%labels, $value )
\&
\&   $child\->set( $value )
.Ve
.PP
Sets the current value for the gauge.
.PP
If the gauge has any labels defined, the values for them must be given first.
.SS "set_function"
.IX Subsection "set_function"
.Vb 2
\&   $gauge\->set_function( @label_values, $func )
\&   $gauge\->set_function( \e%labels, $func )
\&
\&   $child\->set_function( $func )
.Ve
.PP
Sets a value-returning callback function for the gauge. If the gauge is
labeled, each label combination requires its own function.
.PP
When invoked, the function will be passed no arguments and is expected to
return a single value
.PP
.Vb 1
\&   $value = $func\->()
.Ve
.SS "inc"
.IX Subsection "inc"
.Vb 2
\&   $gauge\->inc( @label_values, $delta )
\&   $gauge\->inc( \e%labels, $delta )
\&
\&   $child\->inc( $delta )
.Ve
.PP
Increment the current value for the gauge. \f(CW$delta\fR will default to 1 if not
supplied.
.SS "dec"
.IX Subsection "dec"
.Vb 2
\&   $gauge\->dec( @label_values, $delta )
\&   $gauge\->dec( \e%labels, $delta )
\&
\&   $child\->dec( $delta )
.Ve
.PP
Decrement the current value for the gauge. \f(CW$delta\fR will default to 1 if not
supplied.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Evans <leonerd@leonerd.org.uk>
