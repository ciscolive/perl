.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::Format::FmtDefault 3"
.TH Spreadsheet::Reader::Format::FmtDefault 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::Format::FmtDefault \- Default number and string formats
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        #!/usr/bin/env perl
\&        use Spreadsheet::Reader::Format::FmtDefault;
\&        my              $formatter = Spreadsheet::Reader::Format::FmtDefault\->new(
\&                                                target_encoding => \*(Aqlatin1\*(Aq,
\&                                                epoch_year              => 1904,
\&                                        );
\&        my              $excel_format_string = $formatter\->get_defined_excel_format( 0x0E );
\&        print   $excel_format_string . "\en";
\&                        $excel_format_string = $formatter\->get_defined_excel_format( \*(Aq0x0E\*(Aq );
\&        print   $excel_format_string . "\en";
\&                        $excel_format_string = $formatter\->get_defined_excel_format( 14 );
\&        print   $excel_format_string . "\en";
\&                        $formatter\->set_defined_excel_formats( \*(Aq0x17\*(Aq => \*(AqMySpecialFormat\*(Aq );#Won\*(Aqt really translate!
\&                        $excel_format_string = $formatter\->get_defined_excel_format( 23 );
\&        print   $excel_format_string . "\en";
\&
\&        ###########################
\&        # SYNOPSIS Screen Output
\&        # 01: yyyy\-mm\-dd
\&        # 02: yyyy\-mm\-dd
\&        # 03: yyyy\-mm\-dd
\&        # 04: MySpecialFormat
\&        ###########################
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the default localization class used by Spreadsheet::Reader::Format.  It is
separate from the other parts of the formatter class to isolate the basic elements of
localization to allow for the least work swapping it out.  This class can be configured
or adjused without replacing it or you can use it as a template for a new localization.
To use the class as it stands just adjust the attributes to change the outcome of the
methods.  If you re-write this class it is used as a base class and must provide the
same methods.
.PP
This class provides two basic functionalities.  First, it stores and can retreive defined
excel format strings.  Excel uses these (common) formats to assign conversions to various
cells in the sheet rather than storing a conversion string.  Specifically these are the
conversions provided to Excel end users in the pull down menu if they do not want to
write their own custom conversion strings.  This specific class represents the standard
set of parsing strings localized for the United States found in Excel.  There is one
exception where position 14 (0x0E) is different than the Excel implementation since the
Excel setting for that position breaks so many database data types.  Where excel users
have written their own custom conversion definition strings they are stored in the
Styles file of the zipped archive.  These strings
are implemented by a parsing engine to convert raw values to formatted values.  The rules
for these conversions are layed out in the Excel documentation
 <https://support.office.com/en-us/article/Create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4>.
The default implementation of these rules is done in
Spreadsheet::Reader::Format::ParseExcelFormatStrings.  The second
functionality is string decoding.  It is assumed that any file encoding is handled by
the Excel file reader. However, once the file has been read into memory you may wish
to decode it to some specific output format.  The attribute target_encoding
 and the method change_output_encoding
use Encode to do this.
.PP
For an explanation of functionality for a fully built Formatter class see the
documentation for Spreadsheet::Reader::Format.
.SS "Attributes"
.IX Subsection "Attributes"
Data passed to new when creating an instance containing this class. For modification
of these attributes see the listed 'attribute methods' and Methods.  For
more information on attributes see Moose::Manual::Attributes.
.PP
\fIexcel_region\fR
.IX Subsection "excel_region"
.Sp
.RS 4
\&\fBDefinition:\fR This records the target region of this localization role (Not the region of the
Excel workbook being parsed).  It's mostly a reference value.
.Sp
\&\fBDefault:\fR en = english
.Sp
\&\fBAttribute required:\fR no
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fBget_excel_region\fR
.Sp
.RS 4
\&\fBDefinition:\fR returns the value of the attribute (en)
.RE
.RE
.RS 4
.Sp
\&\fBset_excel_region( \f(CB$region\fB )\fR
.Sp
.RS 4
\&\fBDefinition:\fR sets the value of the attribute.
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fItarget_encoding\fR
.IX Subsection "target_encoding"
.Sp
.RS 4
\&\fBDefinition:\fR This is the target output encoding.  If it is not defined the string
transformation step change_output_encoding becomes a
passthrough.  When the value is loaded it is used as a 'decode' target by Encode
to transform the internally (unicode) stored perl string to some target 'output'
formatting.
.Sp
\&\fBAttribute required:\fR no
.Sp
\&\fBDefault:\fR none
.Sp
\&\fBRange:\fR Any encoding recognized by Encode
(No type certification is done)
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fBset_target_encoding( \f(CB$encoding\fB )\fR
.Sp
.RS 4
\&\fBDefinition:\fR This should be recognized by \*(L"Listing available encodings\*(R" in Encode
\&\fIno testing of this compatability is done\fR
.RE
.RE
.RS 4
.Sp
\&\fBget_target_encoding\fR
.Sp
.RS 4
\&\fBDefinition:\fR Returns the currently set attribute value
.RE
.RE
.RS 4
.Sp
\&\fBhas_target_encoding\fR
.Sp
.RS 4
\&\fBDefinition:\fR Returns positive if the target_encoding has been set
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fIdefined_excel_translations\fR
.IX Subsection "defined_excel_translations"
.Sp
.RS 4
\&\fBDefinition:\fR In Excel part of localization is the way numbers are displayed.
Excel manages that with a default list of format strings that make the numbers appear
in a familiar way.  These are the choices provided in the pull down menu for formats
if you did not want to write your own custom format string.  This is where you store
that list for this package.  In this case the numbers are stored as hash key => value
pairs where the keys are array positions (written in hex) and the values are the Excel
readable format strings (definitions).  Beware that if you change the list your
parser may break if you don't supply replacements for all the values in the default
list.  If you just want to replace some of the values use the method
set_defined_excel_formats.
.Sp
\&\fBAttribute required:\fR yes
.Sp
\&\fBDefault:\fR
.Sp
.Vb 10
\&        {
\&                0x00 => \*(AqGeneral\*(Aq,
\&                0x01 => \*(Aq0\*(Aq,
\&                0x02 => \*(Aq0.00\*(Aq,
\&                0x03 => \*(Aq#,##0\*(Aq,
\&                0x04 => \*(Aq#,##0.00\*(Aq,
\&                0x05 => \*(Aq$#,##0_);($#,##0)\*(Aq,
\&                0x06 => \*(Aq$#,##0_);[Red]($#,##0)\*(Aq,
\&                0x07 => \*(Aq$#,##0.00_);($#,##0.00)\*(Aq,
\&                0x08 => \*(Aq$#,##0.00_);[Red]($#,##0.00)\*(Aq,
\&                0x09 => \*(Aq0%\*(Aq,
\&                0x0A => \*(Aq0.00%\*(Aq,
\&                0x0B => \*(Aq0.00E+00\*(Aq,
\&                0x0C => \*(Aq# ?/?\*(Aq,
\&                0x0D => \*(Aq# ??/??\*(Aq,
\&                0x0E => \*(Aqyyyy\-mm\-dd\*(Aq,      # Was \*(Aqm\-d\-yy\*(Aq, which is bad as system default
\&                0x0F => \*(Aqd\-mmm\-yy\*(Aq,
\&                0x10 => \*(Aqd\-mmm\*(Aq,
\&                0x11 => \*(Aqmmm\-yy\*(Aq,
\&                0x12 => \*(Aqh:mm AM/PM\*(Aq,
\&                0x13 => \*(Aqh:mm:ss AM/PM\*(Aq,
\&                0x14 => \*(Aqh:mm\*(Aq,
\&                0x15 => \*(Aqh:mm:ss\*(Aq,
\&                0x16 => \*(Aqm\-d\-yy h:mm\*(Aq,
\&                0x1F => \*(Aq#,##0_);(#,##0)\*(Aq,
\&                0x20 => \*(Aq#,##0_);[Red](#,##0)\*(Aq,
\&                0x21 => \*(Aq#,##0.00_);(#,##0.00)\*(Aq,
\&                0x22 => \*(Aq#,##0.00_);[Red](#,##0.00)\*(Aq,
\&                0x23 => \*(Aq_(*#,##0_);_(*(#,##0);_(*"\-"_);_(@_)\*(Aq,
\&                0x24 => \*(Aq_($*#,##0_);_($*(#,##0);_($*"\-"_);_(@_)\*(Aq,
\&                0x25 => \*(Aq_(*#,##0.00_);_(*(#,##0.00);_(*"\-"??_);_(@_)\*(Aq,
\&                0x26 => \*(Aq_($*#,##0.00_);_($*(#,##0.00);_($*"\-"??_);_(@_)\*(Aq,
\&                0x27 => \*(Aqmm:ss\*(Aq,
\&                0x28 => \*(Aq[h]:mm:ss\*(Aq,
\&                0x29 => \*(Aqmm:ss.0\*(Aq,
\&                0x2A => \*(Aq##0.0E+0\*(Aq,
\&                0x2B => \*(Aq@\*(Aq,
\&                0x31 => \*(Aq@\*(Aq,
\&        }
.Ve
.Sp
\&\fBRange:\fR Any hashref of formats recognized by
Spreadsheet::Reader::Format::ParseExcelFormatStrings
.Sp
\&\fBattribute methods\fR Methods provided to by the attribute to adjust it.
.Sp
.RS 4
\&\fBtotal_defined_excel_formats\fR
.Sp
.RS 4
\&\fBDefinition:\fR get the count of the current key => value pairs
.RE
.RE
.RS 4
.Sp
See get_defined_excel_format and
set_defined_excel_formats
.RE
.RE
.RS 4
.RE
.SS "Methods"
.IX Subsection "Methods"
These are methods to use this class.  For additional FmtDefault options see the
Attributes section.
.PP
\fIget_defined_excel_format( \f(CI$position\fI )\fR
.IX Subsection "get_defined_excel_format( $position )"
.Sp
.RS 4
\&\fBDefinition:\fR This will return the preset excel format string for the stored position
from the attribute defined_excel_translations.
The positions are actually stored in a hash where the keys are integers representing a
position in an order list.
.Sp
\&\fBAccepts:\fR an integer or an octal number or octal string for the format string
\&\f(CW$position\fR
.Sp
\&\fBReturns:\fR an excel format string (not a built coercion)
.RE
.PP
\fIset_defined_excel_formats( \f(CI%args\fI )\fR
.IX Subsection "set_defined_excel_formats( %args )"
.Sp
.RS 4
\&\fBDefinition:\fR This will set the excel format strings for the indicated positions
in the attribute defined_excel_translations.
.Sp
\&\fBAccepts:\fR a Hash list, a hash ref (both with keys representing positions), or an arrayref
of strings with the update strings in the target position.  All passed argument \fBlists\fR greater
than one will be assumed to be hash arguments and must come in pairs.  If a single argument is
passed then that value is checked to see if it is a hashref or an arrayref.  For passed
arrayrefs all empty positions are ignored meaning that any preexisting value in that positions
is left in force.  To erase the default value send '@' (passthrough) as the format string for
that position.  This function does not do any string validation.  The validation is done when
the coercion is generated.
.Sp
\&\fBReturns:\fR 1 for success
.RE
.PP
\fIchange_output_encoding( \f(CI$string\fI )\fR
.IX Subsection "change_output_encoding( $string )"
.Sp
.RS 4
\&\fBDefinition:\fR This should be called on the output string prior to performing any
coercion.
.Sp
\&\fBAccepts:\fR a perl unicode coded string
.Sp
\&\fBReturns:\fR the converted \f(CW$string\fR decoded to the defined format
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::Reader::Format/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-format/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
Nothing yet.
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.RS 4
Jed Lund
.Sp
jandrew@cpan.org
.RE
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Spreadsheet::Reader::Format
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::ParseExcel \- Excel 2003 and earlier
.Sp
Spreadsheet::XLSX \- 2007+
.Sp
Spreadsheet::ParseXLSX \- 2007+
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
