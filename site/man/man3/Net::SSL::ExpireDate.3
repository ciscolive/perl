.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SSL::ExpireDate 3"
.TH Net::SSL::ExpireDate 3 "2020-06-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SSL::ExpireDate \- obtain expiration date of certificate
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::SSL::ExpireDate;
\&
\&    $ed = Net::SSL::ExpireDate\->new( https => \*(Aqexample.com\*(Aq );
\&    $ed = Net::SSL::ExpireDate\->new( https => \*(Aqexample.com:10443\*(Aq );
\&    $ed = Net::SSL::ExpireDate\->new( ssl   => \*(Aqexample.com:465\*(Aq ); # smtps
\&    $ed = Net::SSL::ExpireDate\->new( ssl   => \*(Aqexample.com:995\*(Aq ); # pop3s
\&    $ed = Net::SSL::ExpireDate\->new( file  => \*(Aq/etc/ssl/cert.pem\*(Aq );
\&
\&    if (defined $ed\->expire_date) {
\&      # do something
\&      $expire_date = $ed\->expire_date;         # return DateTime instance
\&
\&      $expired = $ed\->is_expired;              # examine already expired
\&
\&      $expired = $ed\->is_expired(\*(Aq2 months\*(Aq);  # will expire after 2 months
\&      $expired = $ed\->is_expired(DateTime::Duration\->new(months=>2));  # ditto
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::SSL::ExpireDate get certificate from network (\s-1SSL\s0) or local
file and obtain its expiration date.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  $ed = Net::SSL::ExpireDate\->new( %option )
.Ve
.PP
This method constructs a new \*(L"Net::SSL::ExpireDate\*(R" instance and
returns it. \f(CW%option\fR is to specify certificate.
.PP
.Vb 5
\&  KEY    VALUE
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  ssl    "hostname[:port]"
\&  https  (same as above ssl)
\&  file   "path/to/certificate"
.Ve
.SS "expire_date"
.IX Subsection "expire_date"
.Vb 1
\&  $expire_date = $ed\->expire_date;
.Ve
.PP
Return expiration date by \*(L"DateTime\*(R" instance.
.SS "begin_date"
.IX Subsection "begin_date"
.Vb 1
\&  $begin_date  = $ed\->begin_date;
.Ve
.PP
Return beginning date by \*(L"DateTime\*(R" instance.
.SS "not_after"
.IX Subsection "not_after"
Synonym for expire_date.
.SS "not_before"
.IX Subsection "not_before"
Synonym for begin_date.
.SS "is_expired"
.IX Subsection "is_expired"
.Vb 1
\&  $expired = $ed\->is_expired;
.Ve
.PP
Obtain already expired or not.
.PP
You can specify interval to obtain will expire on the future time.
Acceptable intervals are human readable string (parsed by
\&\*(L"Time::Duration::Parse\*(R") and \*(L"DateTime::Duration\*(R" instance.
.PP
.Vb 3
\&  # will expire after 2 months
\&  $expired = $ed\->is_expired(\*(Aq2 months\*(Aq);
\&  $expired = $ed\->is_expired(DateTime::Duration\->new(months=>2));
.Ve
.SS "type"
.IX Subsection "type"
return type of examinee certificate. \*(L"ssl\*(R" or \*(L"file\*(R".
.SS "target"
.IX Subsection "target"
return hostname or path of examinee certificate.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No bugs have been reported.
.PP
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-net\-ssl\-expiredate@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\s-1HIROSE\s0 Masaaki <hirose31 _at_ gmail.com>
.SH "REPOSITORY"
.IX Header "REPOSITORY"
<http://github.com/hirose31/net\-ssl\-expiredate>
.PP
.Vb 1
\&  git clone git://github.com/hirose31/net\-ssl\-expiredate.git
.Ve
.PP
patches and collaborators are welcome.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright \s-1HIROSE\s0 Masaaki
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
