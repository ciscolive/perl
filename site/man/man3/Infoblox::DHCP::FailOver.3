.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::FailOver 3"
.TH Infoblox::DHCP::FailOver 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::FailOver \- DHCP Failover object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1DHCP\s0 failover is a protocol designed to allow a backup \s-1DHCP\s0 server to take over for a main server if the main server is taken off the network for any reason. \s-1DHCP\s0 failover can be used to configure two \s-1DHCP\s0 servers to operate as a redundant pair.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $dhcp_failover = Infoblox::DHCP::FailOver\->new(
\&     name                   => $string,                           #Required
\&     primary                => $ipv4addr | $Member                #Required
\&     secondary              => $ipv4addr | $Member                #Required
\&     comment                => $string,                           #Optional / Default is empty
\&     extattrs               => { $string => $extattr, ... },      #Optional / Default is undefined
\&     extensible_attributes  => { $string => $string | $num, $string => [ $string | $num, ... ], ... }, #Optional / Default is undefined
\&     load_balance_split     => $num,                              #Optional / Default value is 128
\&     max_load_balance_delay => $num,                              #Optional / Default value is 3
\&     max_client_lead_time   => $num,                              #Optional / Default value is 3600
\&     max_unacked_updates    => $num,                              #Optional / Default value is 10
\&     max_response_delay     => $num,                              #Optional / Default value is 60
\&     recycle_leases         => "true" | "false" | undef,          #Optional / Default value is undefined
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that can be applied to a \s-1DHCP\s0 failover object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP\s0 failover object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Create a DHCP Member object
\& my $memberdhcp = Infoblox::DHCP::Member\->new(
\&       name     => "infoblox.localdomain",
\&       ipv4addr => "192.168.1.2"
\& );
\&
\& #Construct an object
\& my $dhcp_failover = Infoblox::DHCP::FailOver\->new(
\&     name                   => "peer1",
\&     primary                => $memberdhcp,
\&     secondary              => "1.1.1.1",
\&     load_balance_split     => 128,
\&     max_load_balance_delay => 3,
\&     max_client_lead_time   => 3600,
\&     max_unacked_updates    => 10,
\&     max_response_delay     => 60,
\&     recycle_leases         => "false",
\& );
\&
\& # Submit for addition
\& my $response = $session\->add( $dhcp_failover );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching \s-1DHCP\s0 failover objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP failover object:
\&
\& name \- Required. Name of a DHCP failover in string format.
\& extattrs     \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&                       object     => "Infoblox::DHCP::FailOver",
\&                       name       => "peer1" );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 failover object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use method to modify the load_balance_split.
\& $dhcp_failover\->load_balance_split(130);
\& # Submit modification
\& my $response = $session\->modify( $dhcp_failover );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1DHCP\s0 failover object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific \s-1DHCP\s0 failover object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object  => "Infoblox::DHCP::FailOver",
\&     name    => "peer1" );
\& # Find the desired object from the retrieved list.
\& my $desired_dhcp_failover = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_dhcp_failover );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DHCP\s0 failover objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes, to search for a DHCP failover object:
\&
\&      name    \- Optional. The name of a DHCP failover object. Regular expression supported.
\&      comment \- Optional. The comment of the DHCP failover object. Regular expression supported.
\&      extattrs     \- Optional. A hash reference containing extensible attributes.
\&      extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # search for DHCP failover object with name as peer1
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DHCP::FailOver",
\&     name    => "pe.*" );
\&
\& # search all DHCP failover associations with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DHCP::FailOver",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 failover object.
.SS "association_type( )"
.IX Subsection "association_type( )"
.RS 4
Use this method to retrieve the value indicating whether the failover assocation is Microsoft or Grid based. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The return value can be \*(L"\s-1MS\*(R"\s0 or \*(L"\s-1GRID\*(R".\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get association type
\& my $association_type = $failover\->association_type();
.Ve
.RE
.RS 4
.RE
.SS "ms_association_mode( )"
.IX Subsection "ms_association_mode( )"
.RS 4
Use this method to retrieve the value that indicates whether the failover association is read-write or read-only. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return values are \*(L"\s-1RO\*(R"\s0 and \*(L"\s-1RW\*(R".\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get association_mode
\& my $association_mode = $failover\->ms_association_mode();
.Ve
.RE
.RS 4
.RE
.SS "ms_enable_authentication( )"
.IX Subsection "ms_enable_authentication( )"
.RS 4
Use this method to enable or disable authentication for the failover association.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable authentication for the failover association or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ms_enable_authentication value
\& my $enable_authentication_value = $failover\->ms_enable_authentication();
\& #Modify ms_enable_authentication value
\& $failover\->ms_enable_authentication("true");
.Ve
.RE
.RS 4
.RE
.SS "ms_enable_switchover_interval( )"
.IX Subsection "ms_enable_switchover_interval( )"
.RS 4
Use this method to enable or disable the switchover interval.
.Sp
The ms_enable_switchover_interval attribute can be specified explicitly. It is also set implicitly when ms_switchover_interval is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the switchover interval or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ms_enable_switchover_interval value
\& my $enable_switchover_interval = $failover\->ms_enable_switchover_interval();
\& #Modify ms_enable_switchover_interval value
\& $failover\->ms_enable_switchover_interval("true");
.Ve
.RE
.RS 4
.RE
.SS "ms_failover_mode( )"
.IX Subsection "ms_failover_mode( )"
.RS 4
Use this method to set or retrieve the mode for the failover association.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid parameters are \*(L"\s-1LOADBALANCE\*(R"\s0 and \*(L"\s-1HOTSTANDBY\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ms_failover_mode
\& my $failover_mode = $failover\->ms_failover_mode();
\& #Modify ms_failover_mode
\& $failover\->ms_failover_mode("HOTSTANDBY");
.Ve
.RE
.RS 4
.RE
.SS "ms_failover_partner( )"
.IX Subsection "ms_failover_partner( )"
.RS 4
Use this method to set or retrieve the failover partner defined in the association for the Microsoft Server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note that the failover partner must be retrieved from the server settings and cannot be changed after being written.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid parameter is an Infoblox::Grid::MSServer object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ms_failover_partner
\& my $failover_partner = $failover\->ms_failover_partner();
\& #Modify ms_failover_partner
\& $failover\->ms_failover_partner($failover_partner);
.Ve
.RE
.RS 4
.RE
.SS "ms_hotstandby_partner_role( )"
.IX Subsection "ms_hotstandby_partner_role( )"
.RS 4
Use this method to set or retrieve the partner role in the case of HotStandby.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are \*(L"\s-1ACTIVE\*(R"\s0 and \*(L"\s-1PASSIVE\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ms_hotstandby_partner_role
\& my $partner_role = $failover\->ms_hotstandby_partner_role();
\& #Modify ms_hotstandby_partner_role
\& $failover\->ms_hotstandby_partner_role("ACTIVE");
.Ve
.RE
.RS 4
.RE
.SS "ms_is_conflict( )"
.IX Subsection "ms_is_conflict( )"
.RS 4
Use this method to retrieve the flag used to indicate whether the matching Microsfot failover association (if any) is in synchronization (False) or not (True). The method returns False if there is no matching failover association. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return values are \*(L"true\*(R" and \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_is_conflict value
\& my $is_conflict = $failover\->ms_is_conflict();
.Ve
.RE
.RS 4
.RE
.SS "ms_server( )"
.IX Subsection "ms_server( )"
.RS 4
Use this method to set or retrieve the primary Microsoft Server object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note that the Microsoft server must be retrieved from the server settings and cannot be changed after being written.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid parameter is an Infoblox::Grid::MSServer object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ms_server
\& my $server = $failover\->ms_server();
\& #Modify ms_failover_partner
\& $failover\->ms_server($server);
.Ve
.RE
.RS 4
.RE
.SS "ms_shared_secret( )"
.IX Subsection "ms_shared_secret( )"
.RS 4
Use this method to set the shared secret for the failover association authentication. This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string that contains the shared secret for the failover association authentication.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set ms_shared_secret value
\& $failover\->ms_shared_secret($shared_secret);
.Ve
.RE
.RS 4
.RE
.SS "ms_state( )"
.IX Subsection "ms_state( )"
.RS 4
Use this method to retrieve the failover association state. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return values are \*(L"\s-1NO_STATE\*(R", \*(L"INIT\*(R", \*(L"STARTUP\*(R", \*(L"NORMAL\*(R", \*(L"COMMUNICATION_INIT\*(R", \*(L"PARTNER_DOWN\*(R", \*(L"POTENTIAL_CONFLICT\*(R", \*(L"CONFLICT_DONE\*(R", \*(L"RESOLUTION_INIT\*(R", \*(L"RECOVER\*(R", \*(L"RECOVER_DONE\*(R", \*(L"RECOVER_WAIT\*(R".\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_state value
\& my $state = $failover\->ms_state();
.Ve
.RE
.RS 4
.RE
.SS "ms_switchover_interval( )"
.IX Subsection "ms_switchover_interval( )"
.RS 4
Use this method to set or retrieve the time (in seconds) that DHCPv4 server will wait before transitioning the server from the COMMUNICATION-INT state to PARTNER-DOWN state.
.Sp
Setting this method to a defined value implicitly sets the ms_enable_switchover_interval method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the ms_enable_switchover_interval method to \*(L"false\*(R".
.Sp
Note that when ms_switchover_interval is set to a defined value and ms_enable_switchover_interval is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ms_switchover_interval(20); \f(CW$object\fR\->ms_enable_switchover_interval(\*(L"false\*(R"); will set ms_enable_switchover_interval to \*(L"false\*(R", and the sequence \f(CW$object\fR\->ms_enable_switchover_interval(\*(L"false\*(R"); \f(CW$object\fR\->ms_switchover_interval(20); will result in ms_enable_switchover_interval=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value are integers between 1 and 65535.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ms_switchover_interval value
\& my $so_interval = $failover\->ms_switchover_interval();
\& #Modify ms_switchover_interval value
\& $failover\->ms_switchover_interval(1000);
.Ve
.RE
.RS 4
.RE
.SS "ms_previous_state( )"
.IX Subsection "ms_previous_state( )"
.RS 4
Use this method to retrieve the previous failover association state. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return values are \*(L"\s-1NO_STATE\*(R", \*(L"INIT\*(R", \*(L"STARTUP\*(R", \*(L"NORMAL\*(R", \*(L"COMMUNICATION_INIT\*(R", \*(L"PARTNER_DOWN\*(R", \*(L"POTENTIAL_CONFLICT\*(R", \*(L"CONFLICT_DONE\*(R", \*(L"RESOLUTION_INIT\*(R", \*(L"RECOVER\*(R", \*(L"RECOVER_DONE\*(R", \*(L"RECOVER_WAIT\*(R".\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_previous_state value
\& my $previous_state = $failover\->ms_previous_state();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of a \s-1DHCP\s0 failover object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $dhcp_failover\->name();
\& #Modify name
\& $dhcp_failover\->name("peer2");
.Ve
.RE
.RS 4
.RE
.SS "primary( )"
.IX Subsection "primary( )"
.RS 4
Use this method to set or retrieve primary server of a \s-1DHCP\s0 failover object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify external primary server in IPv4 address format or grid primary server in a defined Infoblox::DHCP::Member object. An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get primary
\& my $primary = $dhcp_failover\->primary();
\& #Modify primary
\& $dhcp_failover\->primary($member); #$member is a Infoblox::DHCP::Member object
.Ve
.RE
.RS 4
.RE
.SS "secondary( )"
.IX Subsection "secondary( )"
.RS 4
Use this method to set or retrieve secondary server of a \s-1DHCP\s0 failover object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify external secondary server in IPv4 address format or grid secondary server in a defined Infoblox::DHCP::Member object. An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get secondary
\& my $secondary = $dhcp_failover\->secondary();
\& #Modify secondary
\& $dhcp_failover\->secondary("2.2.2.2");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment about a \s-1DHCP\s0 failover object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter a descriptive comment for the network in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get comment
\& my $comment = $dhcp_failover\->comment();
\& # Modify comment
\& $dhcp_failover\->comment("add a network");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 failover object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $dhcp_failover\->extattrs();
\& #Modify extattrs
\& $dhcp_failover\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 failover object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $dhcp_failover\->extensible_attributes();
\& #Modify extensible attributes
\& $dhcp_failover\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "load_balance_split( )"
.IX Subsection "load_balance_split( )"
.RS 4
Use this method to set or retrieve a load balancing split value of a \s-1DHCP\s0 failover object.
.Sp
Load balancing split determines which server handles \s-1IP\s0 address requests. This parameter is specified on the primary only.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the value of the maximum load balancing delay in a 8\-bit integer format (range from 0 to 255). The default value is 128.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get load_balance_split
\& my $load_balance_split = $dhcp_failover\->load_balance_split();
\& #Modify load_balance_split
\& $dhcp_failover\->load_balance_split(200);
.Ve
.RE
.RS 4
.RE
.SS "max_load_balance_delay( )"
.IX Subsection "max_load_balance_delay( )"
.RS 4
Use this method to set or retrieve the maximum load balancing delay value of a \s-1DHCP\s0 failover object.
.Sp
Maximum load balancing delay specifies the cutoff after which load balancing is disabled. The cutoff is based on the number of seconds since the client sent its first \s-1DHCPDISCOVER\s0 or \s-1DHCPREQUEST\s0 message. For instance, if one of the failover peers gets into a state where it is responding to failover messages, but not responding to some client requests, the other failover peer will take over its client load automatically as the clients retry.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the value of the maximum load balancing delay in a 32\-bit integer format (range from 0 to 4294967295) that represents the duration in seconds. The default value is 3.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get max_load_balance_delay
\& my $max_load_balance_delay = $dhcp_failover\->max_load_balance_delay();
\& #Modify max_load_balance_delay
\& $dhcp_failover\->max_load_balance_delay("500");
.Ve
.RE
.RS 4
.RE
.SS "max_client_lead_time( )"
.IX Subsection "max_client_lead_time( )"
.RS 4
Use this method to set or retrieve the maximum client lead time value of a \s-1DHCP\s0 failover object.
.Sp
Maximum client lead time value specifies the length of time that a failover peer can renew a lease without contacting the other peer. The larger the number, the longer it takes for the peer server to recover \s-1IP\s0 addresses after moving to the Partner Down mode. The smaller the number, the more load your servers experience when they are not communicating. This is specified on the primary server only.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the value of the maximum client lead time in a 32\-bit integer format (range from 0 to 4294967295) that represents the duration in seconds. The default value is 3600.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get max_client_lead_time
\& my $max_client_lead_time = $dhcp_failover\->max_client_lead_time();
\& #Modify max_client_lead_time
\& $dhcp_failover\->max_client_lead_time(600);
.Ve
.RE
.RS 4
.RE
.SS "max_unacked_updates( )"
.IX Subsection "max_unacked_updates( )"
.RS 4
Use this method to set or retrieve the maximum number of unacked updates value of a \s-1DHCP\s0 failover object.
.Sp
Maximum number of unacked updates value specifies how many update messages the server can send before it should receive an \s-1ACK\s0 from the failover peer. If no \s-1ACK\s0 is received after these messages are sent, failover occurs.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the value of the maximum number of unacked updates in a 32\-bit integer format (range from 0 to 4294967295) that represents the number of messages. The default value is 10.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get max_unacked_updates
\& my $max_unacked_updates = $dhcp_failover\->max_unacked_updates();
\& #Modify max_unacked_updates
\& $dhcp_failover\->max_unacked_updates(700);
.Ve
.RE
.RS 4
.RE
.SS "max_response_delay( )"
.IX Subsection "max_response_delay( )"
.RS 4
Use this method to set or retrieve the maximum response delay value of a \s-1DHCP\s0 failover object.
.Sp
Maximum response delay value before failover specifies how many seconds can transpire before the primary server assumes its peer (the secondary server) is not sending messages due to failure.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the value of the maximum response delay in a 32\-bit integer format (range from 0 to 4294967295) that represents the duration in seconds. The default value is 60.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get max_response_delay
\& my $max_response_delay = $dhcp_failover\->max_response_delay();
\& #Modify max_response_delay
\& $dhcp_failover\->max_response_delay(800);
.Ve
.RE
.RS 4
.RE
.SS "primary_state( )"
.IX Subsection "primary_state( )"
.RS 4
Use this method to retrieve the primary server status of a \s-1DHCP\s0 failover object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get primary_state
\& my $primary_state = $dhcp_failover\->primary_state();
.Ve
.RE
.RS 4
.RE
.SS "recycle_leases( )"
.IX Subsection "recycle_leases( )"
.RS 4
Use this method to set or retrieve the recycle leases flag of a \s-1DHCP\s0 failover object.
.Sp
If the flag is enabled, the leases are kept in recycle bin until one week after expiration and when the flag is disabled, the leases are irrecoverably deleted.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the recycle_leases flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get recycle_leases
\& my $recycle_leases = $dhcp_failover\->recycle_leases();
\& #Modify recycle_leases
\& $dhcp_failover\->recycle_leases("true");
\& #Un\-override recycle_leases
\& $dhcp_failover\->recycle_leases(undef);
.Ve
.RE
.RS 4
.RE
.SS "secondary_state( )"
.IX Subsection "secondary_state( )"
.RS 4
Use this method to retrieve the secondary server status of a \s-1DHCP\s0 failover object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get secondary_state
\& my $secondary_state = $dhcp_failover\->secondary_state();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a \s-1DHCP\s0 failover object such as add, search, modify, and remove. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 failover object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create a DHCP Member object
\& my $memberdhcp = Infoblox::DHCP::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => "192.168.1.2"
\& );
\& unless($memberdhcp) {
\&        die("Construct member failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Member object created successfully\en";
\&
\& #Create the Network object with member
\& my $network = Infoblox::DHCP::Network\->new(
\&     network => "10.0.0.0/8",
\&     comment => "add network",
\&     members => [ $memberdhcp ]
\& );
\& unless($network) {
\&        die("Construct Network object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network object created successfully\en";
\&
\& #Add the Network object into the Infoblox appliance through a session
\& $session\->add($network)
\&     or die("Add Network object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object added to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 failover object\fR
.PP
.Vb 10
\& my $dhcp_failover = Infoblox::DHCP::FailOver\->new(
\&     name                   => "peer1",
\&     primary                => $memberdhcp,
\&     secondary              => "1.1.1.1",
\&     load_balance_split     => 128,
\&     max_load_balance_delay => 3,
\&     max_client_lead_time   => 3600,
\&     max_unacked_updates    => 10,
\&     max_response_delay     => 60,
\&     recycle_leases         => "true",
\& );
\& unless($dhcp_failover) {
\&        die("Construct DHCP failover object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP failover object created successfully\en";
\&
\& #Add a DHCP failover object into the Infoblox appliance through a session
\& $session\->add($dhcp_failover)
\&     or die("Add DHCP failover object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP failover object added to the network successfully\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DHCP\s0 failover\fR
.PP
.Vb 11
\& #Get a DHCP failover through the session
\& my @retrieved_objs = $session\->get(
\&     object  => "Infoblox::DHCP::FailOver",
\&     name    => "peer1",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP failover failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP failover object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified DHCP failover
\& $object\->max_client_lead_time(3500);
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify DHCP failover failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP failover object modified successfully \en";
.Ve
.PP
\&\fB#Search a \s-1DHCP\s0 failover\fR
.PP
.Vb 5
\& # search for DHCP failover object with name starting with letter "pe"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DHCP::FailOver",
\&     name   => "pe.*"
\& );
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search DHCP failover failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DHCP failover object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Add a \s-1DHCP\s0 range with failover\fR
.PP
.Vb 12
\& #Construct the DHCP range with failover peer1
\& my $dhcp_range = Infoblox::DHCP::Range\->new(
\&         end_addr       => "10.0.0.10",
\&         network        => "10.0.0.0/8",
\&         start_addr     => "10.0.0.1",
\&         failover_assoc => "peer1"
\& );
\& unless($dhcp_range) {
\&        die("Construct DHCP Range object with failover failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Range object with failover peer1 created successfully\en";
\&
\& #Add the DHCP Range object with failover into the Infoblox appliance through a session
\& $session\->add($dhcp_range)
\&     or die("Add DHCP Range object with failover failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range object with failover added to the network successfully\en";
\&
\& #submit the network object for removal
\& $session\->remove($network)
\&     or die("Remove Network failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Network removed successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DHCP\s0 failover\fR
.PP
.Vb 5
\& #Get a DHCP failover through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::FailOver",
\&     name   => "peer1"
\& );
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP failover failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP failover object found at least 1 matching entry\en";
\&
\& #submit the object for removal
\& $session\->remove($object)
\&     or die("Remove DHCP failover failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP failover object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::DHCP::Member
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
