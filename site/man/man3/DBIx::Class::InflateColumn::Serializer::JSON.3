.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::InflateColumn::Serializer::JSON 3"
.TH DBIx::Class::InflateColumn::Serializer::JSON 3 "2017-01-14" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::InflateColumn::Serializer::JSON \- JSON Inflator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package MySchema::Table;
\&  use base \*(AqDBIx::Class\*(Aq;
\&
\&  _\|_PACKAGE_\|_\->load_components(\*(AqInflateColumn::Serializer\*(Aq, \*(AqCore\*(Aq);
\&  _\|_PACKAGE_\|_\->add_columns(
\&    \*(Aqdata_column\*(Aq => {
\&      \*(Aqdata_type\*(Aq => \*(AqVARCHAR\*(Aq,
\&      \*(Aqsize\*(Aq      => 255,
\&      \*(Aqserializer_class\*(Aq   => \*(AqJSON\*(Aq,
\&      \*(Aqserializer_options\*(Aq => { allow_blessed => 1, convert_blessed => 1, pretty => 1 },    # optional
\&    }
\&  );
.Ve
.PP
Then in your code...
.PP
.Vb 3
\&  my $struct = { \*(AqI\*(Aq => { \*(Aqam\*(Aq => \*(Aqa struct\*(Aq };
\&  $obj\->data_column($struct);
\&  $obj\->update;
.Ve
.PP
And you can recover your data structure with:
.PP
.Vb 2
\&  my $obj = ...\->find(...);
\&  my $struct = $obj\->data_column;
.Ve
.PP
The data structures you assign to \*(L"data_column\*(R" will be saved in the database in \s-1JSON\s0 format.
.PP
Any arguments included in \f(CW\*(C`serializer_options\*(C'\fR will be passed to the JSON::MaybeXS constructor,
to be used by the \s-1JSON\s0 backend for both serializing and deserializing.
.IP "get_freezer" 4
.IX Item "get_freezer"
Called by DBIx::Class::InflateColumn::Serializer to get the routine that serializes
the data passed to it. Returns a coderef.
.IP "get_unfreezer" 4
.IX Item "get_unfreezer"
Called by DBIx::Class::InflateColumn::Serializer to get the routine that deserializes
the data stored in the column. Returns a coderef.
