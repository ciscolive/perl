.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Graph::Reader 3"
.TH Graph::Reader 3 "2016-08-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Graph::Reader \- base class for Graph file format readers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  package Graph::Reader::MyFormat;
\&  use Graph::Reader;
\&  use vars qw(@ISA);
\&  @ISA = qw(Graph::Reader);
\&
\&  sub _read_graph
\&  {
\&    my ($self, $graph, $FILE) = @_;
\&
\&    # read $FILE and populate $graph
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBGraph::Reader\fR is a base class for Graph file format readers.
A particular subclass of Graph::Reader will handle a specific
file format, and generate a Graph, represented using Jarkko Hietaniemi's
Graph class.
.PP
You should never create an instance of this class yourself,
it is only meant for subclassing. If you try to create an instance
of Graph::Reader, the constructor will throw an exception.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBnew()\fP"
.IX Subsection "new()"
Constructor \- generate a new reader instance. This
is a virtual method, or whatever the correct lingo is.
You're not meant to call this on the base class,
it is inherited by the subclasses. Ie if you do something like:
.PP
.Vb 1
\&  $reader = Graph::Reader\->new();
.Ve
.PP
It will throw an exception.
.SS "\fBread_graph()\fP"
.IX Subsection "read_graph()"
Read a graph from the specified file:
.PP
.Vb 1
\&  $graph = $reader\->read_graph($file);
.Ve
.PP
The \f(CW$file\fR argument can either be a filename,
or a filehandle for a previously opened file.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
To create your own graph format reader, create a module
which subclasses \fBGraph::Reader\fR. For example, suppose
\&\s-1DGF\s0 is a directed graph format \- create a \fBGraph::Reader::DGF\fR module,
with the following structure:
.PP
.Vb 1
\&  package Graph::Reader::DGF;
\&
\&  use Graph::Reader;
\&  use vars qw(@ISA);
\&  @ISA = qw(Graph::Reader);
\&
\&  sub _read_graph
\&  {
\&    my $self  = shift;
\&    my $graph = shift;
\&    my $FILE  = shift;
\&
\&    while (<$FILE>)
\&    {
\&    }
\&
\&    return 1;
\&  }
\&
\&  1;
.Ve
.PP
Note the leading underscore on the \fB\fB_read_graph()\fB\fR method.
The base class provides the public method, and invokes the
private method which you're expected to provide, as above.
.PP
If you want to perform additional initialisation at
construction time, you can provide an \fB\fB_init()\fB\fR method,
which will be invoked by the base class's constructor.
You should invoke the superclass's initialiser as well,
as follows:
.PP
.Vb 3
\&  sub _init
\&  {
\&    my $self = shift;
\&
\&    $self\->SUPER::_init();
\&
\&    # your initialisation here
\&  }
.Ve
.PP
Someone can then use your class as follows:
.PP
.Vb 1
\&  use Graph::Reader::DGF;
\&
\&  $reader = Graph::Reader::DGF\->new();
\&  $graph = $reader\->read_graph(\*(Aqfoo.dgf\*(Aq);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Graph" 4
.IX Item "Graph"
Jarkko Hietaniemi's modules for representing directed graphs,
available from \s-1CPAN\s0 under modules/by\-module/Graph/
.IP "Algorithms in Perl" 4
.IX Item "Algorithms in Perl"
This O'Reilly book has a chapter on directed graphs,
which is based around Jarkko's modules.
.IP "Graph::Reader::XML" 4
.IX Item "Graph::Reader::XML"
A simple subclass of this class for reading a simple \s-1XML\s0 format
for directed graphs.
.IP "Graph::Writer" 4
.IX Item "Graph::Writer"
A baseclass for Graph file format writers.
.SH "REPOSITORY"
.IX Header "REPOSITORY"
<https://github.com/neilb/Graph\-ReadWrite>
.SH "AUTHOR"
.IX Header "AUTHOR"
Neil Bowers <neil@bowers.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2012, Neil Bowers. All rights reserved.
Copyright (c) 2001, Canon Research Centre Europe. All rights reserved.
.PP
This script is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
