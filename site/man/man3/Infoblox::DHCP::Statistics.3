.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::Statistics 3"
.TH Infoblox::DHCP::Statistics 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::Statistics \- Manages DHCP statistics.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1DHCP\s0 statistics object is used to view the \s-1DHCP\s0 statistics of the network in an Infoblox appliance.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::DHCP::Statistics object is automatically generated upon the successful creation of the Infoblox::DHCP::Network object. It does not require manual construction.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session that can be applied to a \s-1DHCP\s0 statistics object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to get the DHCP statistics:
\&
\& statistics_object \- Required. An object returned via Infoblox::Session\->get() or Infoblox::Session\->search(). Supported objects are Infoblox::DHCP::Network, Infoblox::DHCP::Range, Infoblox::DHCP::SharedNetwork, and Infoblox::DHCP::MSSuperscope.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\&  # API can return more than 1 answer for DHCP::Statistics
\&  # for each member of the network
\&  my @network_stats = $session\->get(
\&           object            => "Infoblox::DHCP::Statistics",
\&           statistics_object => $network);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to retrieve the attribute values of a \s-1DHCP\s0 statistics object.
.SS "available_hosts( )"
.IX Subsection "available_hosts( )"
.RS 4
Use this method to retrieve the number of available \s-1IP\s0 addresses in the given network.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get available_hosts
\& my $available_hosts = $network_stats\->available_hosts();
.Ve
.RE
.RS 4
.RE
.SS "dynamic_hosts( )"
.IX Subsection "dynamic_hosts( )"
.RS 4
Use this method to retrieve number of hosts which are assigned dynamic \s-1IP\s0 address.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dynamic_hosts
\& my $dynamic_hosts = $network_stats\->dynamic_hosts();
.Ve
.RE
.RS 4
.RE
.SS "dhcp_utilization_status( )"
.IX Subsection "dhcp_utilization_status( )"
.RS 4
Use this method to retrieve the \s-1DHCP\s0 utilization status.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. The returned value is one of \*(L"\s-1FULL\*(R", \*(L"HIGH\*(R", \*(L"LOW\*(R"\s0 or \*(L"\s-1NORMAL\*(R".\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get member
\& my $status = $network_stats\->dhcp_utilization_status();
.Ve
.RE
.RS 4
.RE
.SS "static_hosts( )"
.IX Subsection "static_hosts( )"
.RS 4
Use this method to retrieve the number of hosts with fixed addresses.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get static_hosts
\& my $static_hosts = $network_stats\->static_hosts();
.Ve
.RE
.RS 4
.RE
.SS "usage( )"
.IX Subsection "usage( )"
.RS 4
Use this method to retrieve the percentage used of \s-1DHCP\s0 addresses in the network.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get usage
\& my $usage = $network_stats\->usage();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the get session method on  a \s-1DHCP\s0 statistics object. Also, this sample code also includes error handling for the operations.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
.Ve
.PP
\&\fB#Preparation prior to getting \s-1DHCP\s0 statistics\fR
.PP
.Vb 11
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& my $member = Infoblox::DHCP::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => "192.168.1.2",
\& );
\&
\& unless($member) {
\&      die("Construct member failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Member object created successfully\en";
\&
\& #Create a Network View object
\& my $network_view = Infoblox::DHCP::View\->new(
\&                     name => "my_network_view",
\& );
\& unless($network_view) {
\&             die("Construct Network View object failed: ",
\&                   Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network View object created successfully\en";
\&
\& #Add the Network View object into the Infoblox appliance through a session
\& $session\->add($network_view)
\&      or die("Add Network View object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Network View added successfully\en";
\&
\& #Create the Network object with this member
\& my $network = Infoblox::DHCP::Network\->new(
\&                     network => "1.0.0.0/255.0.0.0",
\&                     members => [ $member ],
\&                     network_view => $network_view,
\& );
\& unless($network) {
\&             die("Construct Network object failed: ",
\&                   Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network object created successfully\en";
\&
\& #Add the Network object into the Infoblox appliance through a session
\& $session\->add($network)
\&      or die("Add Network object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Network added successfully\en";
\&
\& #Create the DHCP Range object with this member
\& my $dhcp_range = Infoblox::DHCP::Range\->new(
\&     network    => "1.0.0.0/8",
\&     start_addr => "1.0.0.1",
\&     end_addr   => "1.0.0.10",
\&     member     => $member,
\&     network_view => $network_view,
\& );
\& unless($dhcp_range) {
\&      die("Construct DHCP Range failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP range object created successfully\en";
\&
\& $session\->add($dhcp_range)
\&      or die("Add DHCP range object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP range added successfully\en";
\&
\& #Create the Fixed Address object
\& my $fixed_address = Infoblox::DHCP::FixedAddr\->new(
\&                                                "network" => "1.0.0.0/8",
\&                                                "ipv4addr" => "1.0.0.2",
\&                                                "mac" => "22:22:22:22:22:22",
\&                                                "network_view" => $network_view,
\&                                                );
\& unless($fixed_address) {
\&      die("Construct DHCP Fixed address failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Fixed address object created successfully\en";
\&
\& $session\->add($fixed_address)
\&      or die("Add DHCP Fixed address object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Fixed address added successfully\en";
.Ve
.PP
\&\fB#Get the \s-1DHCP\s0 statistics\fR
.PP
.Vb 4
\&  my  @result_array = $session\->get(
\&      object  => "Infoblox::DHCP::Network",
\&      network => "1.0.0.0/8",
\&      network_view => "my_network_view");
\&
\&  my $network = $result_array[0];
\&  unless ($network) {
\&      die("Get Network failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&
\&  @result_array = $session\->get(
\&                                object  => "Infoblox::DHCP::Statistics",
\&                                statistics_object  => $network,
\&                               );
\&
\&  my $network_stats = $result_array[0];
\&  unless ($network_stats) {
\&      die("Get Network statistics failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&
\&  print "Get Network Statistics successful\en";
.Ve
.PP
\&\fB#Clean up\fR
  # Remove the Network Statistics object that was just retrieved
  \f(CW$session\fR\->remove($network_stats);
.PP
.Vb 10
\&  # Retrieve and remove the Network View object
\&  my $network_view = $session\->get(
\&          object => "Infoblox::DHCP::View",
\&          name => "my_network_view",
\&  );
\&  unless ($network_view) {
\&       die("Get Network View failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  $session\->remove($network_view);
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DHCP::Network,Infoblox::DHCP::View,Infoblox::DHCP::FixedAddr,Infoblox::DHCP::Range,Infoblox::Session\->\fBadd()\fR,Infoblox::Session\->\fBget()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
