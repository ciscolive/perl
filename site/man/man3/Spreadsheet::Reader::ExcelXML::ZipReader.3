.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::ExcelXML::ZipReader 3"
.TH Spreadsheet::Reader::ExcelXML::ZipReader 3 "2017-04-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::ExcelXML::ZipReader \- Base Zip file reader
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        #!/usr/bin/env perl
\&        use MooseX::ShortCut::BuildInstance qw( build_instance );
\&        use lib \*(Aq../../../../lib\*(Aq;
\&        use Spreadsheet::Reader::ExcelXML::ZipReader;
\&        use Spreadsheet::Reader::ExcelXML::WorkbookFileInterface;
\&        my      $test_file = \*(Aq../../../../t/test_files/TestBook.xlsx\*(Aq;
\&        my      $test_instance =  build_instance(
\&                        package => \*(AqWorkbookFileInterface\*(Aq,
\&                        superclasses => [\*(AqSpreadsheet::Reader::ExcelXML::ZipReader\*(Aq],
\&                        add_roles_in_sequence =>[
\&                                \*(AqSpreadsheet::Reader::ExcelXML::WorkbookFileInterface\*(Aq,
\&                        ],
\&                        file => $test_file,
\&                );
\&        my $sub_file = $test_instance\->extract_file( \*(Aqxl/workbook.xml\*(Aq );
\&        print $sub_file\->getline;
\&
\&        ##############################################################
\&        # SYNOPSIS Screen Output
\&        # 01: <?xml version="1.0" encoding="UTF\-8" standalone="yes"?>
\&        ##############################################################
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation is written to explain ways to use this module when writing your own
excel parser.  To use the general package for excel parsing out of the box please review
the documentation for Workbooks,
Worksheets, and
Cells
.PP
This module provides a way to open a zip file or file handle and then extract sub files.
This package uses Archive::Zip.  Not all versions of Archive::Zip work for everyone.
I have tested this with Archive::Zip 1.30.  Please let me know if this does not work with
a sucessfully installed (read passed the full test suit) version of Archive::Zip newer
than that.
.SS "Attributes"
.IX Subsection "Attributes"
Data passed to new when creating an instance.  For modification of these attributes see
the listed 'attribute methods'. For general information on attributes see
Moose::Manual::Attributes.  For ways to manage the instance when opened see the
Methods.
.PP
\fIfile\fR
.IX Subsection "file"
.Sp
.RS 4
\&\fBDefinition:\fR This attribute holds the file handle for the file being read.  If the full
file name and path is passed to the attribute it is coerced to an IO::File file handle.
This file handle will be expected to pass the test
.Sp
\&\fBDefault:\fR no default \- this must be provided to read a file
.Sp
\&\fBRequired:\fR yes
.Sp
\&\fBRange:\fR any Zip file name and path or IO::File file handle for a zip file
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fBset_file\fR
.Sp
.RS 4
\&\fBDefinition:\fR change the file value in the attribute (this will reboot
the file instance and lock the file)
.RE
.RE
.RS 4
.Sp
\&\fBget_file\fR
.Sp
.RS 4
\&\fBDefinition:\fR Returns the file handle of the file even if a file name
was passed
.RE
.RE
.RS 4
.Sp
\&\fBhas_file\fR
.Sp
.RS 4
\&\fBDefinition:\fR this is used to see if the file loaded correctly.
.RE
.RE
.RS 4
.Sp
\&\fBclear_file\fR
.Sp
.RS 4
\&\fBDefinition:\fR this clears (and unlocks) the file handle
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
\&\fBDelegated Methods\fR
.Sp
.RS 4
close
.Sp
.RS 4
closes the file handle
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fIfile_type\fR
.IX Subsection "file_type"
.Sp
.RS 4
\&\fBDefinition:\fR This stores the file type for this file.  The type defaults to 'zip'
for this reader.
.Sp
\&\fBDefault:\fR zip
.Sp
\&\fBRange:\fR 'zip'
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fBget_file_type\fR
.Sp
.RS 4
\&\fBDefinition:\fR returns the attribute value
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fIworkbook_inst\fR
.IX Subsection "workbook_inst"
.Sp
.RS 4
\&\fBDefinition:\fR This attribute holds a reference to the top level workbook (parser).
The purpose is to use some of the methods provided there.
.Sp
\&\fBDefault:\fR no default
.Sp
\&\fBRequired:\fR not strictly for this class but the attribute is provided to give
self referential access to general workbook settings and methods for composed
classes that inherit this a base class.
.Sp
\&\fBRange:\fR isa => 'Spreadsheet::Reader::ExcelXML::Workbook'
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fBset_workbook_inst\fR
.Sp
.RS 4
set the attribute with a workbook instance
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
\&\fBDelegated Methods (required)\fR Methods delegated to this module by the
attribute.  All methods are delegated with the method name unchanged.
Follow the link to review documentation of the provider for each method.
As you can see several are delegated through the Workbook level and
don't originate there.
.Sp
.RS 4
\&\*(L"set_error( \f(CW$error_string\fR )\*(R" in Spreadsheet::Reader::ExcelXML::Error
.RE
.RE
.RS 4
.RE
.SS "Methods"
.IX Subsection "Methods"
These are the methods provided by this class.
.PP
\fIextract_file( \f(CI$zip_sub_file\fI )\fR
.IX Subsection "extract_file( $zip_sub_file )"
.Sp
.RS 4
\&\fBDefinition:\fR This will pull a subfile from the zipped package using the Archive::Zip
method memberNamed and load it to a new
\&'IO::File\->new_tmpfile' file handle.
.Sp
\&\fBAccepts:\fR \f(CW$zip_sub_file\fR compliant with the Archive::Zip method 'memberNamed'
.Sp
\&\fBReturns:\fR an IO::File handle loaded with the extracted target sub file for reading
.RE
.PP
\fIloaded_correctly\fR
.IX Subsection "loaded_correctly"
.Sp
.RS 4
\&\fBDefinition:\fR This will indicate if the zip reader was able to open the base file
with Archive::Zip as a zip file.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR (1|0) 1 = good file
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::Reader::ExcelXML/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing currently
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Spreadsheet::Reader::ExcelXML \- the package
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::Read \- generic Spreadsheet reader
.Sp
Spreadsheet::ParseExcel \- Excel binary version 2003 and earlier (.xls files)
.Sp
Spreadsheet::XLSX \- Excel version 2007 and later
.Sp
Spreadsheet::ParseXLSX \- Excel version 2007 and later
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
