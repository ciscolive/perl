.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mnet::Log 3"
.TH Mnet::Log 3 "2020-08-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mnet::Log \- Logging, compatible with Log4perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # imports DEBUG, INFO, WARN, and FATAL
\&    use Mnet::Log qw( DEBUG INFO WARN FATAL );
\&
\&    # options can be set for Mnet::Log objects
\&    my $log = Mnet::Log\->new();
\&
\&    # output to standard out and err is captured
\&    syswrite STDOUT, $text;
\&    syswrite STDERR, $text;
\&
\&    # dbg entries
\&    DEBUG($text);
\&    $log\->debug($text);
\&
\&    # inf entries
\&    INFO($text);
\&    $log\->info($text);
\&
\&    # WRN entries
\&    WARN($text);
\&    $log\->warn($text);
\&
\&    # ERR entries
\&    #  note that eval warnings are output as normal
\&    #  evals can use local $SIG{_\|_WARN_\|_} = sub { die @_ };
\&    warn $text;
\&    die $text;
\&
\&    # DIE entries
\&    FATAL($text);
\&    $log\->fatal($text);
\&
\&    # first line of first WRN/ERR/DIE entry
\&    $text = Mnet::Log::error();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mnet::Log supports generating the following types of log entries
.PP
.Vb 6
\&    dbg   stdout   detailed info, visible when debug option is set
\&    inf   stdout   normal informational entries intended for users
\&    \-\-\-   stdout   reserved for Mnet notices, ignored by \-\-test
\&    WRN   stderr   logged warning entries, execution continues
\&    ERR   stderr   perl die and warn outputs with stack trace
\&    DIE   stderr   logged fatal errors, execution aborts
.Ve
.PP
The following options can be used to control log outputs:
.PP
.Vb 3
\&    debug   enable dbg log outputs
\&    quiet   disable all stdout log outputs
\&    silent  disable all stdout and stderr log outputs
.Ve
.PP
Note that this module also installs _\|_DIE_\|_, _\|_WARN_\|_, \s-1INT,\s0 and \s-1TERM\s0 signal
handlers, in order to augment the logging of these events. These are made so
that compile and eval signals are processed by perl as normal.
.PP
Note that timestamps and other varying data are filtered out of log outputs
when the \-\-record, \-\-replay, or \-\-test cli options are enabled or if the
Mnet::Log::Test module is otherwise loaded.
.SH "METHODS"
.IX Header "METHODS"
Mnet::Log implements the methods listed below.
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $log = Mnet::Log\->new(\e%opts)
.Ve
.PP
This class method creates a new Mnet::Log object. The opts hash ref
argument is not requried but may be used to override any parsed cli options
parsed with the Mnet::Opts::Cli module.
.PP
The returned object may be used to call other documented methods in this module.
.PP
The input opts hash ref may contain a log_id key which may be set to a device
name or other identifier which will be prepended to all entries made using the
returned Mnet::Log object. A warning will be issued if the log_id contains any
spaces.
.PP
Refer to the \s-1SYNOPSIS\s0 section of this perldoc for more information.
.SS "Mnet::Log::error"
.IX Subsection "Mnet::Log::error"
.Vb 1
\&    $error = Mnet::Log::error();
.Ve
.PP
This function returns the first line of error text from the perl warn or die
commands or Mnet::Log warn or fatal outputs.
.PP
A value of undefined is returned if there have not yet been any errors.
.SS "debug"
.IX Subsection "debug"
.Vb 1
\&    $log\->debug($text)
.Ve
.PP
Output a debug entry to stdout with an Mnet::Log prefix of dbg.
.SS "info"
.IX Subsection "info"
.Vb 1
\&    $log\->info($text)
.Ve
.PP
Output an info entry to stdout with an Mnet::Log prefix of inf.
.SS "warn"
.IX Subsection "warn"
.Vb 1
\&    $log\->warn($text)
.Ve
.PP
Output a warn entry to stderr with an Mnet::Log prefix of \s-1WRN.\s0
.SS "fatal"
.IX Subsection "fatal"
.Vb 1
\&    $log\->fatal($text)
.Ve
.PP
Output a fatal entry to stderr with an Mnet::log prefix of \s-1DIE.\s0 Note that calls
to fatal are handled in an eval the same as calls to die.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Mnet::Log also implements the functions listed below.
.SS "\s-1DEBUG\s0"
.IX Subsection "DEBUG"
.Vb 1
\&    DEBUG($text)
.Ve
.PP
Output a debug entry to stdout with an Mnet::Log prefix of dbg.
.SS "\s-1INFO\s0"
.IX Subsection "INFO"
.Vb 1
\&    INFO($text)
.Ve
.PP
Output an info entry to stdout with an Mnet::Log prefix of inf.
.SS "\s-1WARN\s0"
.IX Subsection "WARN"
.Vb 1
\&    WARN($text)
.Ve
.PP
Output a warn entry to stderr with an Mnet::Log prefix of \s-1WRN.\s0
.SS "\s-1FATAL\s0"
.IX Subsection "FATAL"
.Vb 1
\&    FATAL($text)
.Ve
.PP
Output a fatal entry to stderr with an Mnet::Log prefix of \s-1DIE.\s0 Note that calls
to fatal are handled in an eval the same as calls to die.
.SH "TESTING"
.IX Header "TESTING"
When used with the Mnet::Test \-\-record option all stdout and stderr log
entry output from this module is captured with the exception of dbg entries.
.PP
Refer to the Mnet::Test module for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mnet
.PP
Mnet::Log::Conditional
.PP
Mnet::Log::Test
.PP
Mnet::Opts::Cli
.PP
Mnet::Opts::Set::Debug
.PP
Mnet::Opts::Set::Quiet
.PP
Mnet::Opts::Set::Silent
.PP
Mnet::Test
.PP
Mnet::Version
