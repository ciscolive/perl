.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::ReplyTable 3"
.TH Mojolicious::Plugin::ReplyTable 3 "2020-06-02" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::ReplyTable \- Easily render rectangular data in many formats using Mojolicious
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Mojolicious::Lite;
\&  plugin \*(AqReplyTable\*(Aq;
\&
\&  any \*(Aq/table\*(Aq => sub {
\&    my $c = shift;
\&    my $data = [
\&      [qw/a b c d/],
\&      [qw/e f g h/],
\&    ];
\&    $c\->reply\->table($data);
\&  };
\&
\&  app\->start;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::ReplyTable adds the \f(CW\*(C`reply\->table\*(C'\fR helper which can render a table of data in one of several user-selected formats.
The format is selected by the client via the usual Mojolicious Content Negotiation mechanisms.
.PP
Loading the plugin also sets up several \s-1MIME\s0 types (using Mojolicious::Types, see \*(L"types\*(R" in Mojolicious), and appends the module to the list of rendering classes (See \*(L"renderer\*(R" in Mojolicious).
.SH "HELPERS"
.IX Header "HELPERS"
.SS "reply\->table"
.IX Subsection "reply->table"
.Vb 2
\&  $c\->reply\->table([[...], [...], ... ]]);
\&  $c\->reply\->table($default => $data, html => sub { ... });
.Ve
.PP
Renders an arrayref of arrayrefs (the inner arrayref being a row) in one of several formats listed below.
An optional leading argument is used as the default format when one is not otherwise requested.
Optional trailing key-value pairs are merged into the arguments to \*(L"respond_to\*(R" in Mojolicious::Controller.
.PP
Any additional options, particularly those governing formatting details, are via stash keys prefixed by \f(CW\*(C`reply_table.\*(C'\fR.
Note that the prefix \f(CW\*(C`reply_table.private.\*(C'\fR is reserved for internal use.
.PP
The formats currently include:
.PP
\fIcsv\fR
.IX Subsection "csv"
.PP
Implemented via Text::CSV using the default values with \f(CW\*(C`binary\*(C'\fR enabled.
To override these defaults set the stash key \f(CW\*(C`reply_table.csv_options\*(C'\fR to a hashref containing attributes to pass to Text::CSV.
For example, to create a \s-1PSV\s0 (pipe delimited) file:
.PP
.Vb 1
\&  $c\->stash(\*(Aqreply_table.csv_options\*(Aq => { sep_char => "|" });
.Ve
.PP
See \*(L"new\*(R" in Text::CSV for available options.
.PP
\fIhtml\fR
.IX Subsection "html"
.PP
Implemented via the standard Mojolicious rendering functionality and a template named \f(CW\*(C`reply_table\*(C'\fR.
Setting the stash key \f(CW\*(C`reply_table.header_row\*(C'\fR to a true value will cause the default template to use the first row as header values.
This default template may be overloaded to change the formatting, the table is available to the template via the stash key \f(CW\*(C`reply_table.table\*(C'\fR.
.PP
\fIjson\fR
.IX Subsection "json"
.PP
Implemented via the standard Mojo::JSON handling.
.PP
\fItxt\fR
.IX Subsection "txt"
.PP
A textual representation of the table.
This format is intended for human consumption and the specific formatting should not be relied upon.
.PP
If Text::Table::Tiny is available, it will be used to format the data (can be overridden with \f(CW\*(C`reply_table.tablify\*(C'\fR).
It can be controlled via the stash keys \f(CW\*(C`reply_table.header_row\*(C'\fR and \f(CW\*(C`reply_table.separate_rows\*(C'\fR as noted in that module's documentation.
Otherwise it is generated via Mojo::Util::tablify.
.PP
\fIxls\fR
.IX Subsection "xls"
.PP
Binary Microsoft Excel format (for older editions of Excel), provided by optional module Spreadsheet::WriteExcel.
If that module is not installed, the client will receive an error status 406.
.PP
\fIxlsx\fR
.IX Subsection "xlsx"
.PP
\&\s-1XML\s0 Microsoft Excel format (for newer editions of Excel), provided by optional module Excel::Writer::XLSX.
If that module is not installed, the client will receive an error status 406.
.SH "METHODS"
.IX Header "METHODS"
This module inherits all the methods from Mojolicious::Plugin and implements the following new ones
.SS "register"
.IX Subsection "register"
The typical mechanism of loading a Mojolicious::Plugin.
No pass-in options are currently available.
.SH "FUTURE WORK"
.IX Header "FUTURE WORK"
Beyond what is mentioned in the specifc formats above, the following work is planned.
If any of it tickles your fancy, pull-requests are always welcome.
.IP "\(bu" 4
Better tests for generated Excel documents.
.IP "\(bu" 4
Exposing the formatters so that they can be used directly.
.IP "\(bu" 4
Add additional formats, like OpenOffice/LibreOffice.
If needed these can be appended via additional handlers to the helper.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Mojolicious" 4
.IX Item "Mojolicious"
.PD 0
.IP "<https://metacpan.org/pod/Mojolicious::Plugin::WriteExcel>" 4
.IX Item "<https://metacpan.org/pod/Mojolicious::Plugin::WriteExcel>"
.PD
.SH "SOURCE REPOSITORY"
.IX Header "SOURCE REPOSITORY"
<http://github.com/jberger/Mojolicious\-Plugin\-ReplyTable>
.SH "SPECIAL THANKS"
.IX Header "SPECIAL THANKS"
Pharmetika Software, <http://pharmetika.com>
.SH "AUTHOR"
.IX Header "AUTHOR"
Joel Berger, <joel.a.berger@gmail.com>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.RS 4
Nils Diewald (Akron)
.Sp
\&\s-1XXXXXXXX XXXXX\s0 (kberov)
.Sp
Ryan Perry
.Sp
Ilya Chesnokov (ichesnokov)
.RE
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2015 by \*(L"\s-1AUTHOR\*(R"\s0 and \*(L"\s-1CONTRIBUTORS\*(R"\s0.
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
