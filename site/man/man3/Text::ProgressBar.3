.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::ProgressBar 3"
.TH Text::ProgressBar 3 "2012-11-16" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::ProgressBar \- indicates the progress of a lengthy operation
visually on your terminal
.SH "VERSION"
.IX Header "VERSION"
Version 0.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Text::ProgressBar::Bar;
\&
\&    my $pbar = Text::ProgressBar\->new();
\&    $pbar\->start();
\&    for my $i (1..100) {
\&        sleep 0.2;
\&        $pbar\->update($i);
\&    }
\&    $pbar\->finish;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Text::ProgressBar is customizable, you can specify different kinds of
widgets so as you can create your own widget. It is also possible that
you combine more than one widget to find your own style.
.PP
The printing (output ascii) characters can also be modified and changed.
A default set is defined for each widget, but user can change them
during calling constructor or later by calling the corresponding methods
(see individual widget).
.PP
Each 'widget' draws a different text on the screen. For an example for
each 'widget' see its class \s-1POD\s0!
.PP
When implementing your own widget, you create an \fIupdate\fR method and
pass a reference current object of ProgressBar to it. As a result, you
have access to the ProgressBar methods and attributes.
.PP
Following 'widgets' (class inheritance structure illustrated) are
currently implemented. They can be used or extended or a new widgets can
be created similar to them.
.PP
.Vb 10
\&    Widget
\&    |\-\- AnimatedMarker
\&    |\-\- Counter
\&    |\-\- FileTransferSpeed
\&    |\-\- Percentage
\&    |\-\- SimpleProgress
\&    |\-\- Timer
\&    |   |\-\- ETA
\&    |   \`\-\- FormatLabel
\&    \`\-\- WidgetHFill
\&        \`\-\- Bar
\&            |\-\- BouncingBar
\&            \`\-\- ReverseBar
.Ve
.PP
Useful methods and attributes include (Public \s-1API\s0):
.IP "\(bu" 4
term_width : current terminal width, if it is given, it sets the
terminal width, otherwise actual terminal length will be get from system
.IP "\(bu" 4
currval: current progress (0 <= currval <= maxval)
.IP "\(bu" 4
maxval: maximum (and final) value
.IP "\(bu" 4
finished: True if the bar has finished (reached 100%)
.IP "\(bu" 4
start_time: the time when \fBstart()\fR method of ProgressBar was called
.IP "\(bu" 4
seconds_elapsed: seconds elapsed since start_time and last
call to update
.IP "\(bu" 4
percentage: progress in percent [0..100]
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "\s-1BUILD\s0"
.IX Subsection "BUILD"
.SS "_handle_resize"
.IX Subsection "_handle_resize"
Tries to catch resize signals sent from the terminal
.SS "setup_signal"
.IX Subsection "setup_signal"
handle terminal window resize events (transmitted via the \s-1WINCH\s0 signal)
.SS "_build_widgets"
.IX Subsection "_build_widgets"
builder for all widgets \- used by Moose
.SS "percentage"
.IX Subsection "percentage"
Returns the progress as a percentage
.SS "_format_widgets"
.IX Subsection "_format_widgets"
format all widgets
.SS "_format_line"
.IX Subsection "_format_line"
Joins the widgets and justifies the line
.SS "_need_update"
.IX Subsection "_need_update"
Returns whether the ProgressBar should redraw the line
.SS "_update_widgets"
.IX Subsection "_update_widgets"
Checks all widgets for the time sensitive bit
.SS "update"
.IX Subsection "update"
Updates the ProgressBar to a new value.
.SS "start"
.IX Subsection "start"
Starts measuring time, and prints the bar at 0%
.SS "finish"
.IX Subsection "finish"
Puts the ProgressBar bar in the finished state.
.SH "AUTHOR"
.IX Header "AUTHOR"
Farhad Fouladi, \f(CW\*(C`<farhad at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-text\-progressbar at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Text\-ProgressBar>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Text::ProgressBar
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Text\-ProgressBar>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Text\-ProgressBar>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Text\-ProgressBar>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Text\-ProgressBar/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
\&'Nilton Volpato' for original idea
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There are many 'ProgressBar' in \s-1CPAN\s0 written in Perl. But only through this
module user can choose from a set of different 'widgets' in different
forms and behaviours and addititionally combine these widgets to make a
nicer output.
.PP
There are currently a good number of widgets, you can put them in any
type in any order, but you can write your own widget. A new user-defined
widget can be easily implemented. Herefor user can add a new subclass of
existing widgets and add his own widget with new functionalities in it.
.PP
This module support resizing of terminal during execution, not all other
\&'ProgressBar' module support that.
.PP
Some of the other modules:
.PP
Smart::Comments, Term::ProgressBar, Term::Spinner,
String::ProgressBar, ProgressBar::Stack
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2012 Farhad Fouladi.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
