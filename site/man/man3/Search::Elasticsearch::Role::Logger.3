.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search::Elasticsearch::Role::Logger 3"
.TH Search::Elasticsearch::Role::Logger 3 "2020-09-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Search::Elasticsearch::Role::Logger \- Provides common functionality to Logger implementations
.SH "VERSION"
.IX Header "VERSION"
version 7.30
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This role provides common functionality to Logger implementations, to enable
the logging of events and the tracing of request-response conversations
with Elasticsearch nodes.
.PP
See Search::Elasticsearch::Logger::LogAny for the default implementation.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.ie n .SS """log_to"""
.el .SS "\f(CWlog_to\fP"
.IX Subsection "log_to"
Parameters passed to \f(CW\*(C`log_to\*(C'\fR are used by Search::Elasticsearch::Role::Logger
implementations to setup the \*(L"\fBlog_handle()\fR\*(R".  See
Search::Elasticsearch::Logger::LogAny for details.
.ie n .SS """log_as"""
.el .SS "\f(CWlog_as\fP"
.IX Subsection "log_as"
By default, events emitted by \*(L"\fBdebug()\fR\*(R", \*(L"\fBinfo()\fR\*(R", \*(L"\fBwarning()\fR\*(R",
\&\*(L"\fBerror()\fR\*(R" and \*(L"\fBcritical()\fR\*(R" are logged to the \*(L"\fBlog_handle()\fR\*(R" under the
category \f(CW"elasticsearch.event"\fR, which can be configured with \f(CW\*(C`log_as\*(C'\fR.
.ie n .SS """trace_to"""
.el .SS "\f(CWtrace_to\fP"
.IX Subsection "trace_to"
Parameters passed to \f(CW\*(C`trace_to\*(C'\fR are used by Search::Elasticsearch::Role::Logger
implementations to setup the \*(L"\fBtrace_handle()\fR\*(R". See
Search::Elasticsearch::Logger::LogAny for details.
.ie n .SS """trace_as"""
.el .SS "\f(CWtrace_as\fP"
.IX Subsection "trace_as"
By default, trace output emitted by \*(L"\fBtrace_request()\fR\*(R", \*(L"\fBtrace_response()\fR\*(R",
\&\*(L"\fBtrace_error()\fR\*(R" and \*(L"\fBtrace_comment()\fR\*(R" are logged under the category
\&\f(CW\*(C`elasticsearch.trace\*(C'\fR, which can be configured with \f(CW\*(C`trace_as\*(C'\fR.
.ie n .SS """deprecate_to"""
.el .SS "\f(CWdeprecate_to\fP"
.IX Subsection "deprecate_to"
Parameters passed to \f(CW\*(C`deprecate_to\*(C'\fR are used by Search::Elasticsearch::Role::Logger
implementations to setup the \*(L"\fBdeprecate_handle()\fR\*(R".  See
Search::Elasticsearch::Logger::LogAny for details.
.ie n .SS """deprecate_as"""
.el .SS "\f(CWdeprecate_as\fP"
.IX Subsection "deprecate_as"
By default, events emitted by \*(L"\fBdeprecation()\fR\*(R" are logged to the
\&\*(L"\fBdeprecate_handle()\fR\*(R" under the
category \f(CW"elasticsearch.deprecation"\fR, which can be configured with \f(CW\*(C`deprecate_as\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """log_handle()"""
.el .SS "\f(CWlog_handle()\fP"
.IX Subsection "log_handle()"
Returns an object which can handle the methods:
\&\f(CW\*(C`debug()\*(C'\fR, \f(CW\*(C`debugf()\*(C'\fR, \f(CW\*(C`is_debug()\*(C'\fR, \f(CW\*(C`info()\*(C'\fR, \f(CW\*(C`infof()\*(C'\fR, \f(CW\*(C`is_info()\*(C'\fR,
\&\f(CW\*(C`warning()\*(C'\fR, \f(CW\*(C`warningf()\*(C'\fR, \f(CW\*(C`is_warning()\*(C'\fR, \f(CW\*(C`error()\*(C'\fR, \f(CW\*(C`errorf()\*(C'\fR,
\&\f(CW\*(C`is_error()\*(C'\fR, \f(CW\*(C`critical()\*(C'\fR, \f(CW\*(C`criticalf()\*(C'\fR and  \f(CW\*(C`is_critical()\*(C'\fR.
.ie n .SS """trace_handle()"""
.el .SS "\f(CWtrace_handle()\fP"
.IX Subsection "trace_handle()"
Returns an object which can handle the methods:
\&\f(CW\*(C`trace()\*(C'\fR, \f(CW\*(C`tracef()\*(C'\fR and \f(CW\*(C`is_trace()\*(C'\fR.
.ie n .SS """deprecate_handle()"""
.el .SS "\f(CWdeprecate_handle()\fP"
.IX Subsection "deprecate_handle()"
Returns an object which can handle the \f(CW\*(C`warnf()\*(C'\fR method.
.ie n .SS """trace_request()"""
.el .SS "\f(CWtrace_request()\fP"
.IX Subsection "trace_request()"
.Vb 1
\&    $logger\->trace_request($cxn,\e%request);
.Ve
.PP
Accepts a Cxn object and request parameters and logs them if tracing is
enabled.
.ie n .SS """trace_response()"""
.el .SS "\f(CWtrace_response()\fP"
.IX Subsection "trace_response()"
.Vb 1
\&    $logger\->trace_response($cxn,$code,$response,$took);
.Ve
.PP
Logs a successful \s-1HTTP\s0 response, where \f(CW$code\fR is the \s-1HTTP\s0 status code,
\&\f(CW$response\fR is the \s-1HTTP\s0 body and \f(CW$took\fR is the time the request
took in seconds
.ie n .SS """trace_error()"""
.el .SS "\f(CWtrace_error()\fP"
.IX Subsection "trace_error()"
.Vb 1
\&    $logger\->trace_error($cxn,$error);
.Ve
.PP
Logs a failed \s-1HTTP\s0 response, where \f(CW$error\fR is an Search::Elasticsearch::Error
object.
.ie n .SS """trace_comment()"""
.el .SS "\f(CWtrace_comment()\fP"
.IX Subsection "trace_comment()"
.Vb 1
\&    $logger\->trace_comment($comment);
.Ve
.PP
Used to insert debugging comments into trace output.
.ie n .SS """deprecation()"""
.el .SS "\f(CWdeprecation()\fP"
.IX Subsection "deprecation()"
.Vb 1
\&    $logger\->deprecation($warning,$request)
.Ve
.PP
Issues a deprecation warning to the deprecation logger.
.SH "AUTHOR"
.IX Header "AUTHOR"
Enrico Zimuel <enrico.zimuel@elastic.co>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Elasticsearch \s-1BV.\s0
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
