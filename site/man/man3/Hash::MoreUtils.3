.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Hash::MoreUtils 3"
.TH Hash::MoreUtils 3 "2018-06-08" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Hash::MoreUtils \- Provide the stuff missing in Hash::Util
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Hash::MoreUtils qw(:all);
\&  
\&  my %h = (foo => "bar", FOO => "BAR", true => 1, false => 0);
\&  my %s = slice \e%h, qw(true false); # (true => 1, false => 0)
\&  my %f = slice_false \e%h; # (false => 0)
\&  my %u = slice_grep { $_ =~ m/^[A\-Z]/ }, \e%h; # (FOO => "BAR")
\&  
\&  my %r = safe_reverse \e%h; # (bar => "foo", BAR => "FOO", 0 => "false", 1 => "true")
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Similar to List::MoreUtils, \f(CW\*(C`Hash::MoreUtils\*(C'\fR contains trivial
but commonly-used functionality for hashes. The primary focus for
the moment is providing a common \s-1API\s0 \- speeding up by \s-1XS\s0 is far
away at the moment.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS """slice"" HASHREF[, \s-1LIST\s0]"
.el .SS "\f(CWslice\fP HASHREF[, \s-1LIST\s0]"
.IX Subsection "slice HASHREF[, LIST]"
Returns a hash containing the (key, value) pair for every
key in \s-1LIST.\s0
.PP
If no \f(CW\*(C`LIST\*(C'\fR is given, all keys are assumed as \f(CW\*(C`LIST\*(C'\fR.
.ie n .SS """slice_def"" HASHREF[, \s-1LIST\s0]"
.el .SS "\f(CWslice_def\fP HASHREF[, \s-1LIST\s0]"
.IX Subsection "slice_def HASHREF[, LIST]"
As \f(CW\*(C`slice\*(C'\fR, but only includes keys whose values are
defined.
.PP
If no \f(CW\*(C`LIST\*(C'\fR is given, all keys are assumed as \f(CW\*(C`LIST\*(C'\fR.
.ie n .SS """slice_exists"" HASHREF[, \s-1LIST\s0]"
.el .SS "\f(CWslice_exists\fP HASHREF[, \s-1LIST\s0]"
.IX Subsection "slice_exists HASHREF[, LIST]"
As \f(CW\*(C`slice\*(C'\fR but only includes keys which exist in the
hashref.
.PP
If no \f(CW\*(C`LIST\*(C'\fR is given, all keys are assumed as \f(CW\*(C`LIST\*(C'\fR.
.ie n .SS """slice_without"" HASHREF[, \s-1LIST\s0 ]"
.el .SS "\f(CWslice_without\fP HASHREF[, \s-1LIST\s0 ]"
.IX Subsection "slice_without HASHREF[, LIST ]"
As \f(CW\*(C`slice\*(C'\fR but without any (key/value) pair whose key is
in \s-1LIST.\s0
.PP
If no \f(CW\*(C`LIST\*(C'\fR is given, in opposite to slice an empty list
is assumed, thus nothing will be deleted.
.ie n .SS """slice_missing"" HASHREF[, \s-1LIST\s0]"
.el .SS "\f(CWslice_missing\fP HASHREF[, \s-1LIST\s0]"
.IX Subsection "slice_missing HASHREF[, LIST]"
Returns a \s-1HASH\s0 containing the (key => undef) pair for every
\&\f(CW\*(C`LIST\*(C'\fR element (as key) that does not exist hashref.
.PP
If no \f(CW\*(C`LIST\*(C'\fR is given there are obviously no non-existent
keys in \f(CW\*(C`HASHREF\*(C'\fR so the returned \s-1HASH\s0 is empty.
.ie n .SS """slice_notdef"" HASHREF[, \s-1LIST\s0]"
.el .SS "\f(CWslice_notdef\fP HASHREF[, \s-1LIST\s0]"
.IX Subsection "slice_notdef HASHREF[, LIST]"
Searches for undefined slices with the given \f(CW\*(C`LIST\*(C'\fR
elements as keys in the given \f(CW\*(C`HASHREF\*(C'\fR.
Returns a \f(CW\*(C`HASHREF\*(C'\fR containing the slices (key \-> undef)
for every undefined item.
.PP
To search for undefined slices \f(CW\*(C`slice_notdef\*(C'\fR needs a
\&\f(CW\*(C`LIST\*(C'\fR with items to search for (as keys). If no \f(CW\*(C`LIST\*(C'\fR
is given it returns an empty \f(CW\*(C`HASHREF\*(C'\fR even when the given
\&\f(CW\*(C`HASHREF\*(C'\fR contains undefined slices.
.ie n .SS """slice_true"" HASHREF[, \s-1LIST\s0]"
.el .SS "\f(CWslice_true\fP HASHREF[, \s-1LIST\s0]"
.IX Subsection "slice_true HASHREF[, LIST]"
A special \f(CW\*(C`slice_grep\*(C'\fR which returns only those elements
of the hash which's values evaluates to \f(CW\*(C`TRUE\*(C'\fR.
.PP
If no \f(CW\*(C`LIST\*(C'\fR is given, all keys are assumed as \f(CW\*(C`LIST\*(C'\fR.
.ie n .SS """slice_false"" HASHREF[, \s-1LIST\s0]"
.el .SS "\f(CWslice_false\fP HASHREF[, \s-1LIST\s0]"
.IX Subsection "slice_false HASHREF[, LIST]"
A special \f(CW\*(C`slice_grep\*(C'\fR which returns only those elements
of the hash which's values evaluates to \f(CW\*(C`FALSE\*(C'\fR.
.PP
If no \f(CW\*(C`LIST\*(C'\fR is given, all keys are assumed as \f(CW\*(C`LIST\*(C'\fR.
.ie n .SS """slice_grep"" \s-1BLOCK,\s0 HASHREF[, \s-1LIST\s0]"
.el .SS "\f(CWslice_grep\fP \s-1BLOCK,\s0 HASHREF[, \s-1LIST\s0]"
.IX Subsection "slice_grep BLOCK, HASHREF[, LIST]"
As \f(CW\*(C`slice\*(C'\fR, with an arbitrary condition.
.PP
If no \f(CW\*(C`LIST\*(C'\fR is given, all keys are assumed as \f(CW\*(C`LIST\*(C'\fR.
.PP
Unlike \f(CW\*(C`grep\*(C'\fR, the condition is not given aliases to
elements of anything.  Instead, \f(CW%_\fR is set to the
contents of the hashref, to avoid accidentally
auto-vivifying when checking keys or values.  Also,
\&'uninitialized' warnings are turned off in the enclosing
scope.
.ie n .SS """slice_map"" HASHREF[, \s-1MAP\s0]"
.el .SS "\f(CWslice_map\fP HASHREF[, \s-1MAP\s0]"
.IX Subsection "slice_map HASHREF[, MAP]"
Returns a hash containing the (key, value) pair for every
key in \f(CW\*(C`MAP\*(C'\fR.
.PP
If no \f(CW\*(C`MAP\*(C'\fR is given, all keys of \f(CW\*(C`HASHREF\*(C'\fR are assumed mapped to themselves.
.ie n .SS """slice_def_map"" HASHREF[, \s-1MAP\s0]"
.el .SS "\f(CWslice_def_map\fP HASHREF[, \s-1MAP\s0]"
.IX Subsection "slice_def_map HASHREF[, MAP]"
As \f(CW\*(C`slice_map\*(C'\fR, but only includes keys whose values are
defined.
.PP
If no \f(CW\*(C`MAP\*(C'\fR is given, all keys of \f(CW\*(C`HASHREF\*(C'\fR are assumed mapped to themselves.
.ie n .SS """slice_exists_map"" HASHREF[, \s-1MAP\s0]"
.el .SS "\f(CWslice_exists_map\fP HASHREF[, \s-1MAP\s0]"
.IX Subsection "slice_exists_map HASHREF[, MAP]"
As \f(CW\*(C`slice_map\*(C'\fR but only includes keys which exist in the
hashref.
.PP
If no \f(CW\*(C`MAP\*(C'\fR is given, all keys of \f(CW\*(C`HASHREF\*(C'\fR are assumed mapped to themselves.
.ie n .SS """slice_missing_map"" HASHREF[, \s-1MAP\s0]"
.el .SS "\f(CWslice_missing_map\fP HASHREF[, \s-1MAP\s0]"
.IX Subsection "slice_missing_map HASHREF[, MAP]"
As \f(CW\*(C`slice_missing\*(C'\fR but checks for missing keys (of \f(CW\*(C`MAP\*(C'\fR) and map to the value (of \f(CW\*(C`MAP\*(C'\fR) as key in the returned \s-1HASH.\s0
The slices of the returned \f(CW\*(C`HASHREF\*(C'\fR are always undefined.
.PP
If no \f(CW\*(C`MAP\*(C'\fR is given, \f(CW\*(C`slice_missing\*(C'\fR will be used on \f(CW\*(C`HASHREF\*(C'\fR which will return an empty \s-1HASH.\s0
.ie n .SS """slice_notdef_map"" HASHREF[, \s-1MAP\s0]"
.el .SS "\f(CWslice_notdef_map\fP HASHREF[, \s-1MAP\s0]"
.IX Subsection "slice_notdef_map HASHREF[, MAP]"
As \f(CW\*(C`slice_notdef\*(C'\fR but checks for undefined keys (of \f(CW\*(C`MAP\*(C'\fR) and map to the value (of \f(CW\*(C`MAP\*(C'\fR) as key in the returned \s-1HASH.\s0
.PP
If no \f(CW\*(C`MAP\*(C'\fR is given, \f(CW\*(C`slice_notdef\*(C'\fR will be used on \f(CW\*(C`HASHREF\*(C'\fR which will return an empty \s-1HASH.\s0
.ie n .SS """slice_true_map"" HASHREF[, \s-1MAP\s0]"
.el .SS "\f(CWslice_true_map\fP HASHREF[, \s-1MAP\s0]"
.IX Subsection "slice_true_map HASHREF[, MAP]"
As \f(CW\*(C`slice_map\*(C'\fR, but only includes pairs whose values are
\&\f(CW\*(C`TRUE\*(C'\fR.
.PP
If no \f(CW\*(C`MAP\*(C'\fR is given, all keys of \f(CW\*(C`HASHREF\*(C'\fR are assumed mapped to themselves.
.ie n .SS """slice_false_map"" HASHREF[, \s-1MAP\s0]"
.el .SS "\f(CWslice_false_map\fP HASHREF[, \s-1MAP\s0]"
.IX Subsection "slice_false_map HASHREF[, MAP]"
As \f(CW\*(C`slice_map\*(C'\fR, but only includes pairs whose values are
\&\f(CW\*(C`FALSE\*(C'\fR.
.PP
If no \f(CW\*(C`MAP\*(C'\fR is given, all keys of \f(CW\*(C`HASHREF\*(C'\fR are assumed mapped to themselves.
.ie n .SS """slice_grep_map"" \s-1BLOCK,\s0 HASHREF[, \s-1MAP\s0]"
.el .SS "\f(CWslice_grep_map\fP \s-1BLOCK,\s0 HASHREF[, \s-1MAP\s0]"
.IX Subsection "slice_grep_map BLOCK, HASHREF[, MAP]"
As \f(CW\*(C`slice_map\*(C'\fR, with an arbitrary condition.
.PP
If no \f(CW\*(C`MAP\*(C'\fR is given, all keys of \f(CW\*(C`HASHREF\*(C'\fR are assumed mapped to themselves.
.PP
Unlike \f(CW\*(C`grep\*(C'\fR, the condition is not given aliases to
elements of anything.  Instead, \f(CW%_\fR is set to the
contents of the hashref, to avoid accidentally
auto-vivifying when checking keys or values.  Also,
\&'uninitialized' warnings are turned off in the enclosing
scope.
.ie n .SS """hashsort"" [\s-1BLOCK,\s0] \s-1HASHREF\s0"
.el .SS "\f(CWhashsort\fP [\s-1BLOCK,\s0] \s-1HASHREF\s0"
.IX Subsection "hashsort [BLOCK,] HASHREF"
.Vb 2
\&  my @array_of_pairs  = hashsort \e%hash;
\&  my @pairs_by_length = hashsort sub { length($a) <=> length($b) }, \e%hash;
.Ve
.PP
Returns the (key, value) pairs of the hash, sorted by some
property of the keys.  By default (if no sort block given), sorts the
keys with \f(CW\*(C`cmp\*(C'\fR.
.PP
I'm not convinced this is useful yet.  If you can think of
some way it could be more so, please let me know.
.ie n .SS """safe_reverse"" [\s-1BLOCK,\s0] \s-1HASHREF\s0"
.el .SS "\f(CWsafe_reverse\fP [\s-1BLOCK,\s0] \s-1HASHREF\s0"
.IX Subsection "safe_reverse [BLOCK,] HASHREF"
.Vb 1
\&  my %dup_rev = safe_reverse \e%hash
\&
\&  sub croak_dup {
\&      my ($k, $v, $r) = @_;
\&      exists( $r\->{$v} ) and
\&        croak "Cannot safe reverse: $v would be mapped to both $k and $r\->{$v}";
\&      $v;
\&  };
\&  my %easy_rev = safe_reverse \e&croak_dup, \e%hash
.Ve
.PP
Returns safely reversed hash (value, key pairs of original hash). If no
\&\f(CW\*(C`BLOCK\*(C'\fR is given, following routine will be used:
.PP
.Vb 6
\&  sub merge_dup {
\&      my ($k, $v, $r) = @_;
\&      return exists( $r\->{$v} )
\&             ? ( ref($r\->{$v}) ? [ @{$r\->{$v}}, $k ] : [ $r\->{$v}, $k ] )
\&             : $k;
\&  };
.Ve
.PP
The \f(CW\*(C`BLOCK\*(C'\fR will be called with 3 arguments:
.ie n .IP """key""" 8
.el .IP "\f(CWkey\fR" 8
.IX Item "key"
The key from the \f(CW\*(C`( key, value )\*(C'\fR pair in the original hash
.ie n .IP """value""" 8
.el .IP "\f(CWvalue\fR" 8
.IX Item "value"
The value from the \f(CW\*(C`( key, value )\*(C'\fR pair in the original hash
.ie n .IP """ref\-hash""" 8
.el .IP "\f(CWref\-hash\fR" 8
.IX Item "ref-hash"
Reference to the reversed hash (read-only)
.PP
The \f(CW\*(C`BLOCK\*(C'\fR is expected to return the value which will used
for the resulting hash.
.SH "AUTHOR"
.IX Header "AUTHOR"
Hans Dieter Pearcey, \f(CW\*(C`<hdp@cpan.org>\*(C'\fR,
Jens Rehsack, \f(CW\*(C`<rehsack@cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-hash\-moreutils@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Hash\-MoreUtils>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Hash::MoreUtils
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Hash\-MoreUtils>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Hash\-MoreUtils>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Hash\-MoreUtils>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Hash\-MoreUtils/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2005 Hans Dieter Pearcey, all rights reserved.
Copyright 2010\-2018 Jens Rehsack
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
