.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Connector::Tee 3"
.TH Connector::Tee 3 "2019-06-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
Connector::Tee
.SH "Description"
.IX Header "Description"
This connector can be used to search for a value over multiple branches
in a way that is transparent to the caller.
.SH "Configurarion Example"
.IX Header "Configurarion Example"
.Vb 6
\&  class: Connector::Tee
\&  accept: "\e\eA[a\-zA\-Z]+\e\ez"
\&  branches:
\&   \- static
\&   \- conn1
\&   \- conn2
\&
\&  nodes:
\&    static:
\&       test1: NO
\&       test2: YES
\&       test3: 0
\&    conn1@: connector:connectors.conn1
\&    conn2@: connector:connectors.conn2
.Ve
.PP
If the connector with the above configuration is called with \fIget('test1')\fR,
the request is dispatched to nodes.static.test1 which evaluates to \fI\s-1NO\s0\fR
and is returned as the overall result.
.PP
If you call \fIget('test3')\fR, the result is \s-1NOT\s0 \fI0\fR as this does not match
the regex given as accept pattern! The request is therefore resend to
nodes.conn1.test3 which is revolved to another connector call. In case
the result of this connector does also not match the pattern (or is empty),
the same request is send to nodes.conn2.test3.
.PP
For the scalar \fIget\fR call, the value given to accept is evaluated as a
case-sensitive regex pattern using qr// internally. If you set accept to
the empty string, any defined value is accepted.
.PP
For \fIget_hash\fR, an empty value for accept will let the empty hash pass,
if accept is set to any true value, only non-empty hashes are accepted.
.PP
For \fIget_list\fR, accept is ignored and only non-empty lists are accepted.
