.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Generic::Hash 3"
.TH Module::Generic::Hash 3 "2020-08-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Generic::Hash \- Hash Manipulation Object Class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    my $h = Module::Generic::Hash\->new({
\&        first_name => \*(AqJohn\*(Aq,
\&        last_name => \*(AqDoe\*(Aq,
\&        age => 30,
\&        email => \*(Aqjohn.doe@example.com\*(Aq,
\&    });
\&
\&    # or
\&
\&    my $h = Module::Generic::Hash\->new({
\&        first_name => \*(AqJohn\*(Aq,
\&        last_name => \*(AqDoe\*(Aq,
\&        age => 30,
\&        email => \*(Aqjohn.doe@example.com\*(Aq,
\&    }, { debug => 2 });
\&
\&    my $keys = $h\->keys # Module::Generic::Array returned
\&    $h\->keys\->length # e.g. 10
\&    $keys\->pop # See Module::Generic::Array
\&    print( $h\->as_string, "\en" );
\&    # or
\&    print( "$h\en" );
\&    # Produces:
\&    {
\&    "age" => 30,
\&    "email" => "john.doe\e@example.com",
\&    "first_name" => "John",
\&    "last_name" => "Doe"
\&    }
\&
\&    $h\->json({ pretty => 1 });
\&    # Produces
\&    {
\&    "age" : 30,
\&    "email" : "john.doe@example.com",
\&    "first_name" : "John",
\&    "last_name" : "Doe"
\&    }
\&    # Or
\&    $h\->json
\&    # Produces
\&    {"age":30,"email":"john.doe@example.com","first_name":"John","last_name":"Doe"}
\&    # Adding a key and value as usual:
\&    $h\->{role} = \*(Aqcustomer\*(Aq;
\&    $h\->defined( \*(Aqrole\*(Aq ) # True
\&    $h\->delete( \*(Aqrole\*(Aq ) # Removes and returns \*(Aqcustomer\*(Aq
\&    $h\->each(sub
\&    {
\&        my( $k, $v ) = @_;
\&        print( "Key $k has value \*(Aq$v\*(Aq\en" );
\&    });
\&    exists( $h\->{age} );
\&    # same as
\&    $h\->exists( \*(Aqage\*(Aq );
\&    # Same as $h\->foreach(sub{ #.. });
\&    $h\->for(sub{
\&        my( $k, $v ) = @_;
\&        print( "Key $k has value \*(Aq$v\*(Aq\en" );
\&    });
\&    $h\->length # Returns a Module::Generic::Number
\&    my $hash2 =
\&    {
\&        address =>
\&        {
\&        line1 => \*(Aq1\-2\-3 Kudan\-minami, Chiyoda\-ku\*(Aq,
\&        line2 => \*(AqBig bld 7F\*(Aq,
\&        postal_code => \*(Aq123\-4567\*(Aq,
\&        city => \*(AqTokyo\*(Aq,
\&        country => \*(Aqjp\*(Aq,
\&        },
\&        last_name => \*(AqSmith\*(Aq,
\&    };
\&    my $h2 = Module::Generic::Hash\->new( $hash2 );
\&    $h\->merge( $hash2 );
\&    # same as $h\->merge( $h2 );
\&    $h > $h2 # True
\&    $h gt $h2 # True
\&    $h >= $h2 # True
\&    $h2 < $h # True
\&    $h2 lt $h # True
\&    $h2 <= $h # True
\&    3 < $h # True
\&
\&    # Merge $hash2 into $h, but without overwriting existing entries
\&    $h\->merge( $hash2, { overwrite => 0 });
\&    # Otherwise, bluntly overwriting existing entries, if any
\&    $h\->merge( $hash2 );
\&
\&    # Same copy
\&    my $h3 = $h\->clone;
\&
\&    my $vals = $h\->values; # Returns a Module::Generic::Array
\&    # Must return an empty list to prevent the entry from being added to the result, as per perlfunc documentation, see map
\&    my $vals = $h\->values(sub{
\&        ref( $_[0] ) ? () : $_[0];
\&    }, { sort => 1 });
.Ve
.SH "VERSION"
.IX Header "VERSION"
.Vb 1
\&    v0.1.0
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The purpos of this class/package is to provide a lightweight object-oriented approach to hash manipulation.
.PP
This uses perl core functions only and Clone for cloning. This module's methods act as a wrapper to them.
.PP
The object is overloaded, so it returns the hash representation, as dumped by Data::Dumper when used as a string.
.PP
.Vb 1
\&    print( "I have a nice $hash\en" );
.Ve
.PP
Would produce something like:
.PP
.Vb 6
\&    I have a nice {
\&    "age" => 30,
\&    "email" => "john.doe\e@example.com",
\&    "first_name" => "John",
\&    "last_name" => "Doe"
\&    }
.Ve
.PP
Because the object is overloaded, you can use the variable with comparison perl operators, such as :
.PP
.Vb 3
\&    $h > 3 # True
\&    $h <= 3 # False
\&    # etc...
.Ve
.PP
You can also compare two hashes reliably, such as :
.PP
.Vb 1
\&    $h1 eq $h2 # True
.Ve
.PP
But if you use \f(CW\*(C`==\*(C'\fR, it will compare the hash size, i.e. the number of keys
.PP
.Vb 1
\&    $h1 == $h2
.Ve
.PP
Which could be true if both hashes have the same number of keys (\f(CW\*(C`==\*(C'\fR), but may not be true if they are not the same (\f(CW\*(C`eq\*(C'\fR)
.PP
Otherwise, the hash can be accessed like a regular hash. For example :
.PP
.Vb 1
\&    print( "Customer is $h\->{first_name} $h\->{last_name}\en" );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Provided with a hash reference, some optional parameters and this returns a new object.
.PP
Possible optional parameters are:
.IP "\fIdebug\fR" 4
.IX Item "debug"
Provided with an integer and this actives or deactivates debugging messages. Nothing meaningful happens below 3
.SS "as_string"
.IX Subsection "as_string"
Return a string version of the hash as produced by Data::Dumper
.PP
.Vb 3
\&    print( "$h\en" );
\&    # or
\&    print( $h\->as_string, "\en" );
\&
\&    # Produces
\&    {
\&    "age" => 30,
\&    "email" => "john.doe\e@example.com",
\&    "first_name" => "John",
\&    "last_name" => "Doe"
\&    }
.Ve
.SS "clone"
.IX Subsection "clone"
Produce a deep clone of the hash and return a new object. This uses \*(L"clone\*(R" in Clone to achieve that.
.SS "debug"
.IX Subsection "debug"
Sets or gets the debug level
.SS "defined"
.IX Subsection "defined"
Provided with a hash key and this returns true if there is a value defined for this key. See \*(L"defined\*(R" in perlfunc
.SS "delete"
.IX Subsection "delete"
Provided with a hash key and this remove the hash entry and return the previous value, exactly as \*(L"delete\*(R" in perlfunc does.
.SS "dump"
.IX Subsection "dump"
Returns a string representation of the hash. This uses Data::Dumper to produce the result.
.SS "each"
.IX Subsection "each"
Provided with with a reference to a subroutine, this will do a loop using \*(L"each\*(R" in perlfunc and this will call the code, passing it the hash key and its value.
.PP
If the code returns false, it will exit the \*(L"while\*(R" in perlfunc loop.
.PP
To exit the loop, return \f(CW\*(C`undef()\*(C'\fR, for example:
.PP
.Vb 6
\&    $a\->each(sub
\&    {
\&        my( $k, $v ) = @_;
\&        return if( $key eq $not_this_one );
\&        print( "ok, this one\en" );
\&    });
.Ve
.SS "exists"
.IX Subsection "exists"
Given a hash key, this will return true or false depending if the hash key exists. This uses \*(L"exists\*(R" in perlfunc.
.SS "for"
.IX Subsection "for"
This is simply an alias for \*(L"foreach\*(R"
.SS "foreach"
.IX Subsection "foreach"
Same as \*(L"foreach\*(R" in perlfunc, given a reference to a subroutine, and this will execute foreach and call the code providing it as arguments the hash key and value. For convenience, \f(CW$_\fR is also available and represent the 2nd argument, i.e. the value.
.PP
To exit the loop, return \f(CW\*(C`undef()\*(C'\fR, for example:
.PP
.Vb 6
\&    $a\->foreach(sub
\&    {
\&        my( $k, $v ) = @_;
\&        return if( $key eq $not_this_one );
\&        print( "ok, this one\en" );
\&    });
.Ve
.SS "get"
.IX Subsection "get"
Provided with an hash key and this will return whatever value was set.
.PP
.Vb 1
\&    $a\->get( \*(Aqlast_name\*(Aq ); # Return \*(AqDoe\*(Aq maybe?
.Ve
.PP
See \*(L"set\*(R" for the opposite method, i.e. setting a key value.
.SS "json"
.IX Subsection "json"
This returns a \s-1JSON\s0 representation of the hash. You can provided optionally an hash reference of parameters. Currently, only one parameter is supported: \fIpretty\fR, which will make the json result more human readable. With it enabled, you would get something like this :
.PP
.Vb 6
\&    {
\&    "age" : 30,
\&    "email" : "john.doe@example.com",
\&    "first_name" : "John",
\&    "last_name" : "Doe"
\&    }
.Ve
.PP
Otherwise, you would get a more terse result, such as :
.PP
.Vb 1
\&    {"age":30,"email":"john.doe@example.com","first_name":"John","last_name":"Doe"}
.Ve
.SS "keys"
.IX Subsection "keys"
Returns the hash keys as a Module::Generic::Array object.
.PP
Also note that if you have a multi-level hash, this will return only the first level keys, just like \*(L"keys\*(R" in perlfunc would do.
.PP
.Vb 1
\&    printf( "%d hash keys found\en", $h\->keys\->length );
.Ve
.PP
And even, chaining through different objects :
.PP
.Vb 4
\&    if( $h\->keys\->length\->is_positive )
\&    {
\&        # Do something
\&    }
.Ve
.PP
This returns the keys as an Module::Generic::Array object, then returns the size of the array as a Module::Generic::Number object.
.SS "length"
.IX Subsection "length"
This returns the number of keys in the hash, as a Module::Generic::Number object.
.SS "map"
.IX Subsection "map"
Provided with a code reference and this calls \*(L"map\*(R" in perlfunc and pass the code reference the hash key and its value.
.PP
It returns a regular list, i.e. not an object, just like perl's \*(L"map\*(R" in perlfunc would do.
.SS "map_array"
.IX Subsection "map_array"
Does the same as \*(L"map\*(R" above, except it returns a new array as a Module::Generic::Array object.
.SS "map_hash"
.IX Subsection "map_hash"
Does the same as \*(L"map\*(R" above, except it returns a new Module::Generic::Hash object.
.PP
For this to work properly, the code reference needs to return a key-value pair.
.SS "merge"
.IX Subsection "merge"
Provided with an hash reference and an optional hash of parameters and this will mergge the given hash with hash in our object. It does so recursively and prevents looping by using \*(L"refaddr\*(R" in Scalar::Util.
.PP
Currently the only parameter possible is \fIoverwrite\fR. By default this is set to a true value, and you can provide this argument to specifically indicates you do not want the hash key value to be overwriten.
.SS "reset"
.IX Subsection "reset"
This simply empty the hash. See also \*(L"undef\*(R" for the same result.
.SS "set"
.IX Subsection "set"
Provided with a key and a value, and this adds it to the hash, possibly overwriting any previous entry.
.PP
See \*(L"get\*(R" for the opposite method, i.e. to get the key value.
.SS "undef"
.IX Subsection "undef"
This simply empty the hash. See also \*(L"reset\*(R" for the same result.
.SS "values"
.IX Subsection "values"
This returns the values of the hash as a Module::Generic::Array, but please note that jsut like the \*(L"values\*(R" in perlfunc, it only provides the first level values.
.PP
If an optional reference to a subroutine is provided, the code will be called for each value as its sole argument, and the subroutine can decide what to do with it, possibly altering the value and discarding it by returning the value, possibly altered, or an empty list to indicte this entry shoul be discarded. For example :
.PP
.Vb 3
\&    my $vals = $h\->values(sub{
\&        ref( $_[0] ) ? () : $_[0];
\&    });
.Ve
.PP
This will make sure to get all values, except the ones that are reference (perlref)
.PP
To return entries with uppercase first :
.PP
.Vb 3
\&    my $vals = $h\->values(sub{
\&        join( \*(Aq \*(Aq, map( ucfirst( lc( $_ ) ), split( /[[:blank:]]+/, $_[0] ) ) );
\&    });
.Ve
.PP
And if one of the value were \f(CW\*(C`JohN  DOE\*(C'\fR, this would result in \f(CW\*(C`John Doe\*(C'\fR
.PP
If the parameter \fIsort\fR is provided, then it will sort the array before returning the values and before executing the reference of the subroutine on each entry.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Module::Generic::Scalar, Module::Generic::Array, Module::Generic::Boolean, Module::Generic::Number, Module::Generic::Dynamic
.PP
Math::BigInt
.SH "AUTHOR"
.IX Header "AUTHOR"
Jacques Deguest <\fIjack@deguest.jp\fR>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (c) 2000\-2020 \s-1DEGUEST\s0 Pte. Ltd.
.PP
You can use, copy, modify and redistribute this package and associated
files under the same terms as Perl itself.
