.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Record::DNSKEY 3"
.TH Infoblox::DNS::Record::DNSKEY 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Record::DNSKEY  \- DNSKEY Record object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1DNSKEY\s0 resource record stores public keys for the \s-1DNSSEC\s0 authentication process. The \s-1DNSKEY\s0 records are generated automatically when the corresponding authoritative zone is signed. The the \s-1DNSKEY\s0 resource record object is read-only.
.PP
The \s-1DNSKEY\s0 resource record is defined in \s-1RFC 4034.\s0
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::DNS::Record::DNSKEY object is a read-only object and does not require manual construction.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session that can be applied to a \s-1DNSKEY\s0 Record object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to get the DNSKEY Record object(s):
\&
\&     algorithm \- Optional. The public key encryption algorithm. The allowed values are \*(Aq1\*(Aq,\*(Aq3\*(Aq,\*(Aq5\*(Aq,\*(Aq6\*(Aq,\*(Aq7\*(Aq,\*(AqRSAMD5\*(Aq,\*(AqRSASHA1\*(Aq,\*(AqDSA\*(Aq,\*(AqNSEC3RSASHA1\*(Aq,\*(AqNSEC3DSA\*(Aq,\*(AqRSASHA256\*(Aq,\*(AqRSASHA512\*(Aq,\*(AqNSEC3RSASHA256\*(Aq and \*(AqNSEC3RSASHA512\*(Aq.
\&     flags     \- Optional. Flags field to identify the type of the key. 
\&     key_tag   \- Optional. Key tag to identify the public key.
\&     name      \- Optional. FQDN of the DNSKEY record.
\&     public_key\- Optional. Public key in the base\-64 encoding.
\&     ttl       \- Optional. TTL of the DNSKEY record. 
\&     view      \- Optional. The DNS view in which the record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&     zone      \- Optional. A zone name in FQDN format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # get all the DNSKEY records for the zone \*(Aqdomain.com\*(Aq in the default view.
\& my @retrieved_objs = $session\->get(
\&                       object => "Infoblox::DNS::Record::DNSKEY",
\&                       name   => "domain.com",
\&                       view   => "default" );
\&
\& # get all the DNSKEY records in the "domain.com" zone of the default view
\& # with algorithm field having the value "RSASHA1" and "flags" having value 257
\& my @retrieved_objs = $session\->get(
\&                       object    => "Infoblox::DNS::Record::DNSKEY",
\&                       name      => "domain.com",
\&                       algorithm => "RSASHA1",
\&                       flags     => 257,
\&                       view      => "default" );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to search the DNSKEY Record object(s):
\&
\&     algorithm \- Optional. The public key encryption algorithm. The allowed values are \*(Aq1\*(Aq,\*(Aq3\*(Aq,\*(Aq5\*(Aq,\*(Aq6\*(Aq,\*(Aq7\*(Aq,\*(AqRSAMD5\*(Aq,\*(AqRSASHA1\*(Aq,\*(AqDSA\*(Aq,\*(AqNSEC3RSASHA1\*(Aq,\*(AqNSEC3DSA\*(Aq,\*(AqRSASHA256\*(Aq,\*(AqRSASHA512\*(Aq,\*(AqNSEC3RSASHA256\*(Aq and \*(AqNSEC3RSASHA512\*(Aq.
\&     flags     \- Optional. Flags field to identify the type of the key.
\&     key_tag   \- Optional. Key tag to identify the public key.
\&     name      \- Optional. FQDN of the DNSKEY record (regular expression).
\&     public_key\- Optional. Public key in the base\-64 encoding (regular expression).
\&     ttl       \- Optional. TTL of the DNSKEY record. 
\&     view      \- Optional. The DNS view in which the record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&     zone      \- Optional. A zone name in FQDN format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search the DNSKEY records in the default view by zone name.
\& my @retrieved_objs = $session\->search(
\&                       object => "Infoblox::DNS::Record::DNSKEY",
\&                       name   => ".*[.]com",
\&                       view   => "default" );
\&
\& # search for all DNSKEY records in the "domain.com" zone of the default view
\& # Note that the \*(Aqdefault\*(Aq view is assumed implicitly here
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::DNSKEY",
\&     zone   => "domain.com",
\&    );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to retrieve the attribute values of a \s-1DNSKEY\s0 Record object.
.SS "algorithm( )"
.IX Subsection "algorithm( )"
.RS 4
Use this method to retrieve the public key encryption algorithm of a \s-1DNSKEY\s0 Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the public key encryption algorithm attribute value. Returned values are one of the following:
.RS 4
.IP "\s-1RSAMD5\s0" 4
.IX Item "RSAMD5"
.PD 0
.IP "\s-1DSA\s0" 4
.IX Item "DSA"
.IP "\s-1RSASHA1\s0" 4
.IX Item "RSASHA1"
.IP "\s-1NSEC3DSA\s0" 4
.IX Item "NSEC3DSA"
.IP "\s-1NSEC3RSASHA1\s0" 4
.IX Item "NSEC3RSASHA1"
.IP "\s-1RSASHA256\s0" 4
.IX Item "RSASHA256"
.IP "\s-1RSASHA512\s0" 4
.IX Item "RSASHA512"
.RE
.RS 4
.RE
.IP "\fBExample\fR" 4
.IX Item "Example"
.PD
.Vb 2
\& #Get the public key encryption algorithm.
\& my $algorithm = $dnskey\->algorithm();
.Ve
.RE
.RS 4
.RE
.SS "creator( )"
.IX Subsection "creator( )"
.RS 4
Use this method to retrieve the \s-1DNSKEY\s0 record creator. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $dnskey\->creator();
.Ve
.RE
.RS 4
.RE
.SS "dns_name( )"
.IX Subsection "dns_name( )"
.RS 4
Use this method to retrieve the \s-1FQDN,\s0 in punycode format, of the zone that owns the \s-1DNSKEY\s0 record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $dnskey\->dns_name();
.Ve
.RE
.RS 4
.RE
.SS "flags( )"
.IX Subsection "flags( )"
.RS 4
Use this method to retrieve the flags of a \s-1DNSKEY\s0 Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the flags attribute value. The flags field is a 16\-bit unsigned integer. Currently, only two bits of this value are used\*(--the least significant bit and bit 7. The other bits are reserved for future use and must be zero. If bit 7 is set to 1, the key is a \s-1DNS\s0 zone key. Otherwise, the key is not a zone key and cannot be used to verify zone data. The least significant bit indicates \*(L"secure entry point property\*(R". If it is not zero, the key is a key signing key (\s-1KSK\s0 type). Otherwise, the key type is \s-1ZSK.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Getting flags   
\& my $flags = $dnskey\->flags();
.Ve
.RE
.RS 4
.RE
.SS "key_tag( )"
.IX Subsection "key_tag( )"
.RS 4
Use this method to retrieve the key tag identifying the public key of a \s-1DNSKEY\s0 Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the key tag of the public key value. A key tag is a 16\-bit integer key fingerprint. It is used to distinguish one key from another when multiple keys are associated with the same zone.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the key tag of the public key
\& my $key_tag = $dnskey\->key_tag();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to retrieve the \s-1FQDN\s0 of the zone that owns the \s-1DNSKEY\s0 record.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the  \s-1FQDN\s0 of the zone that contains the given \s-1DNSKEY\s0 record.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the FQDN of the DNSKEY record
\& my $name = $dnskey\->name();
.Ve
.RE
.RS 4
.RE
.SS "public_key( )"
.IX Subsection "public_key( )"
.RS 4
Use this method to retrieve the public key.  The format of the returned value depend on the key algorithm.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the  public key. The  exact format of the returned value depends on the algorithm of the key.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get public key.
\& my $public_key = $dnskey\->public_key();
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to retrieve the Time to Live (\s-1TTL\s0) value of a \s-1DNSKEY\s0 Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1TTL\s0 attribute value. The returned parameter is a 32\-bit integer (range from 0 to 4294967295) that represents the duration, in seconds, that the record is cached. Zero indicates that the record should not be cached.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the TTL value 
\& my $ttl = $dnskey\->ttl();
.Ve
.RE
.RS 4
.RE
.SS "view( )"
.IX Subsection "view( )"
.RS 4
Use this method to retrieve the \s-1DNS\s0 View object that contains the \s-1DNSKEY\s0 Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the Infoblox::DNS::View object that contains the \s-1DNSKEY\s0 record.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the view
\& my $view = $dnskey\->view();
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of a \s-1DNSKEY\s0 record.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the name of the zone that contains the given \s-1DNSKEY\s0 record. The returned value is a string in \s-1FQDN\s0 format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get zone
\& my $zone = $dnskey\->zone();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the session methods on a \s-1DNSKEY\s0 Record object.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox device
\&        my $session = Infoblox::Session\->new(
\&            master   => "192.168.1.2",
\&            username => "admin",
\&            password => "infoblox"
\&        );
\&        unless ($session) {
\&           die("Construct session failed: ",
\&               $session\->status_code() . ":" . $session\->status_detail());
\&        }
\&        print "Session created successfully\en";
\&
\&        #Enable DNSSEC in the default view
\&
\&        my $default_view=$session\->get(
\&                                       object=> "Infoblox::DNS::View",
\&                                       name => "default"
\&                                      );
\&        unless($default_view) {
\&            die("Getting the default view failed:",
\&               Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&        print "Got the default view successfully\en";
\&
\&        $default_view\->dnssec_enabled("true")
\&            or die("Changing the dnssec_enabled in the default view failed:",
\&                    Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        $session\->modify($default_view)
\&            or die("Changing the dnssec_enabled in the default view failed:",
\&                    Infoblox::status_code() . ":" . Infoblox::status_detail());
\&
\&        #Create the zone
\&
\&        print "Creating Member primary server for the zone\en";
\&        my $primary=Infoblox::DNS::Member\->new(
\&                                                ipv4addr => "192.168.1.2",
\&                                                name => "infoblox.localdomain"
\&                                              );
\&        unless($primary) {
\&           die("Unable to create primary server object: ",
\&               Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&
\&        my $zone = Infoblox::DNS::Zone\->new(
\&                                             name => "domain.com",
\&                                             primary => $primary
\&                                           );
\&        unless ($zone) {
\&           die("Construct zone failed: ",
\&               Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&        print "Zone object created successfully\en";
\&
\&        #Verify if the zone exists
\&        my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "domain.com");
\&        unless ($object) {
\&           print "Zone does not exist on server, safe to add the zone\en";
\&           $session\->add($zone)
\&              or die("Add zone failed: ",
\&                     $session\->status_code() . ":" . $session\->status_detail());
\&        }
\&        print "Zone added successfully\en";
\&
\&        #Retrieving zone back from the server in order to sign it
\&        $zone = $session\->get(object => "Infoblox::DNS::Zone", name => "domain.com");
\&        unless($zone) {
\&           die("Retrieving zone back failed: ",
\&                Infoblox::status_code( ). ":". Infoblox::status_detail( ));
\&        }
\&        print "Zone retrieved for signing successfully.\en";
\&
\&        $zone\->dnssec_ksk_algorithm("NSEC3RSASHA1") &&
\&        $zone\->dnssec_zsk_algorithm("NSEC3RSASHA1") &&
\&        $zone\->dnssec_ksk_size(640) &&
\&        $zone\->dnssec_zsk_size(640)
\&          or die("Changing the zone DNSSEC setting failed: ",
\&                 Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        $session\->modify($zone)
\&          or die("Modifying dnssec values in zone failed: ",
\&                 Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        print "Zone modified successfully\en";
\&
\&        #Signing the zone
\&        $zone\->dnssec_signed("true")
\&           or die("Signing of the zone failed: ",
\&                   Infoblox::status_code() . ":" . Infoblox::status_detail());
\&       print "Zone signed successfully\en";
.Ve
.PP
\&\fB#Getting the \s-1DNSKEY\s0 record\fR
.PP
.Vb 12
\&       my $ksk_dnskey=$session\->get(
\&                                    object => "Infoblox::DNS::Record::DNSKEY",
\&                                    flags  => 257,
\&                                    name   => "domain.com",
\&                                    view   => "default"
\&                                   );
\&      unless($ksk_dnskey) {
\&         die("Getting ksk_dnskey failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\&      }
\&      print "Got Key\-signing key DNSKEY record successfully\en";
\&      print "Key value: ".$ksk_dnskey\->public_key()."\en";
\&
\&      my $zsk_dnskey=$session\->get(
\&                                    object => "Infoblox::DNS::Record::DNSKEY",
\&                                    flags  => 256,
\&                                    name   => "domain.com",
\&                                    view   => "default"
\&                                   );
\&      unless($zsk_dnskey) {
\&         die("Getting zsk_dnskey failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\&      }
\&      print "Got Zone\-signing key DNSKEY record successfully\en";
\&      print "Key value: ".$zsk_dnskey\->public_key()."\en";
.Ve
.PP
\&\fB#Searching for \s-1DNSKEY\s0 object\fR
.PP
.Vb 9
\&      my @retrieved_objs=$session\->search(
\&                                           object => "Infoblox::DNS::Record::DNSKEY",
\&                                           name   => ".*com",
\&                                           view   => "default"
\&                                         );
\&     unless(@retrieved_objs>0) {
\&         die("Searching for DNSKEY objects failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\&     }
\&
\&      #Removing the created zone and cleaning up the view
\&      $session\->remove($zone)
\&        or die("Unable to remove the zone: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\&      print "Zone removed successfully\en";
\&
\&      $default_view\->dnssec_enabled("false")
\&      && $default_view\->override_dnssec("false")
\&      && $session\->modify($default_view)
\&       or die("Restoring dnssec_enabled value in the default view failed: ",
\&              Infoblox::status_code() . ":" . Infoblox::status_detail());
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::DNS::Record::DS, Infoblox::DNS::Record::RRSIG, Infoblox::DNS::View, Infoblox::DNS::Zone
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 32:" 4
.IX Item "Around line 32:"
Non-ASCII character seen before =encoding in 'key. '. Assuming \s-1UTF\-8\s0
