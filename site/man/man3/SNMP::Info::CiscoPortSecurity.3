.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::CiscoPortSecurity 3"
.TH SNMP::Info::CiscoPortSecurity 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::CiscoPortSecurity \- SNMP Interface to data from
CISCO\-PORT\-SECURITY\-MIB, CISCO\-PAE\-MIB and CISCO\-ERR\-DISABLE\-MIB.
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Miller
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& # Let SNMP::Info determine the correct subclass for you.
\& my $cps = new SNMP::Info(
\&                        AutoSpecify => 1,
\&                        Debug       => 1,
\&                        DestHost    => \*(Aqmyswitch\*(Aq,
\&                        Community   => \*(Aqpublic\*(Aq,
\&                        Version     => 2
\&                        )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class      = $cps\->class();
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SNMP::Info::CiscoPortSecurity is a subclass of SNMP::Info that provides
an interface to the \fICISCO-PORT-SECURITY-MIB\fR, \fICISCO-PAE-MIB\fR and
\&\fICISCO-ERR-DISABLE-MIB\fR. These MIBs are used across the Catalyst
family under CatOS and \s-1IOS.\s0
.PP
Use or create in a subclass of SNMP::Info.  Do not use directly.
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
None.
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fICISCO-PORT-SECURITY-MIB\fR" 4
.IX Item "CISCO-PORT-SECURITY-MIB"
.PD 0
.IP "\fICISCO-PAE-MIB\fR" 4
.IX Item "CISCO-PAE-MIB"
.IP "\fI\s-1IEEE8021\-PAE\-MIB\s0\fR" 4
.IX Item "IEEE8021-PAE-MIB"
.IP "\fICISCO-ERR-DISABLE-MIB\fR" 4
.IX Item "CISCO-ERR-DISABLE-MIB"
.PD
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar values from \s-1SNMP\s0
.SS "\fICISCO-PORT-SECURITY-MIB\fP globals"
.IX Subsection "CISCO-PORT-SECURITY-MIB globals"
.ie n .IP "$cps\->\fBcps_clear()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_clear()\fR" 4
.IX Item "$cps->cps_clear()"
(\f(CW\*(C`cpsGlobalClearSecureMacAddresses\*(C'\fR)
.ie n .IP "$cps\->\fBcps_notify()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_notify()\fR" 4
.IX Item "$cps->cps_notify()"
(\f(CW\*(C`cpsGlobalSNMPNotifControl\*(C'\fR)
.ie n .IP "$cps\->\fBcps_rate()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_rate()\fR" 4
.IX Item "$cps->cps_rate()"
(\f(CW\*(C`cpsGlobalSNMPNotifRate\*(C'\fR)
.ie n .IP "$cps\->\fBcps_enable()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_enable()\fR" 4
.IX Item "$cps->cps_enable()"
(\f(CW\*(C`cpsGlobalPortSecurityEnable\*(C'\fR)
.ie n .IP "$cps\->\fBcps_mac_count()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_mac_count()\fR" 4
.IX Item "$cps->cps_mac_count()"
(\f(CW\*(C`cpsGlobalTotalSecureAddress\*(C'\fR)
.ie n .IP "$cps\->\fBcps_mac_max()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_mac_max()\fR" 4
.IX Item "$cps->cps_mac_max()"
(\f(CW\*(C`cpsGlobalMaxSecureAddress\*(C'\fR)
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
.ie n .SS """CISCO\-PORT\-SECURITY\-MIB"" \- Interface Config Table"
.el .SS "\f(CWCISCO\-PORT\-SECURITY\-MIB\fP \- Interface Config Table"
.IX Subsection "CISCO-PORT-SECURITY-MIB - Interface Config Table"
.ie n .IP "$cps\->\fBcps_i_limit_val()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_limit_val()\fR" 4
.IX Item "$cps->cps_i_limit_val()"
(\f(CW\*(C`cpsIfInvalidSrcRateLimitValue\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_limit()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_limit()\fR" 4
.IX Item "$cps->cps_i_limit()"
(\f(CW\*(C`cpsIfInvalidSrcRateLimitEnable\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_sticky()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_sticky()\fR" 4
.IX Item "$cps->cps_i_sticky()"
(\f(CW\*(C`cpsIfStickyEnable\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_clear_type()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_clear_type()\fR" 4
.IX Item "$cps->cps_i_clear_type()"
(\f(CW\*(C`cpsIfClearSecureMacAddresses\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_shutdown()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_shutdown()\fR" 4
.IX Item "$cps->cps_i_shutdown()"
(\f(CW\*(C`cpsIfShutdownTimeout\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_flood()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_flood()\fR" 4
.IX Item "$cps->cps_i_flood()"
(\f(CW\*(C`cpsIfUnicastFloodingEnable\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_clear()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_clear()\fR" 4
.IX Item "$cps->cps_i_clear()"
(\f(CW\*(C`cpsIfClearSecureAddresses\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_mac()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_mac()\fR" 4
.IX Item "$cps->cps_i_mac()"
(\f(CW\*(C`cpsIfSecureLastMacAddress\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_count()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_count()\fR" 4
.IX Item "$cps->cps_i_count()"
(\f(CW\*(C`cpsIfViolationCount\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_action()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_action()\fR" 4
.IX Item "$cps->cps_i_action()"
(\f(CW\*(C`cpsIfViolationAction\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_mac_static()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_mac_static()\fR" 4
.IX Item "$cps->cps_i_mac_static()"
(\f(CW\*(C`cpsIfStaticMacAddrAgingEnable\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_mac_type()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_mac_type()\fR" 4
.IX Item "$cps->cps_i_mac_type()"
(\f(CW\*(C`cpsIfSecureMacAddrAgingType\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_mac_age()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_mac_age()\fR" 4
.IX Item "$cps->cps_i_mac_age()"
(\f(CW\*(C`cpsIfSecureMacAddrAgingTime\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_mac_count()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_mac_count()\fR" 4
.IX Item "$cps->cps_i_mac_count()"
(\f(CW\*(C`cpsIfCurrentSecureMacAddrCount\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_mac_max()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_mac_max()\fR" 4
.IX Item "$cps->cps_i_mac_max()"
(\f(CW\*(C`cpsIfMaxSecureMacAddr\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_status()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_status()\fR" 4
.IX Item "$cps->cps_i_status()"
(\f(CW\*(C`cpsIfPortSecurityStatus\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_enable()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_enable()\fR" 4
.IX Item "$cps->cps_i_enable()"
(\f(CW\*(C`cpsIfPortSecurityEnable\*(C'\fR)
.ie n .SS """CISCO\-PORT\-SECURITY\-MIB::cpsIfVlanTable"""
.el .SS "\f(CWCISCO\-PORT\-SECURITY\-MIB::cpsIfVlanTable\fP"
.IX Subsection "CISCO-PORT-SECURITY-MIB::cpsIfVlanTable"
.ie n .IP "$cps\->\fBcps_i_v_mac_count()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_v_mac_count()\fR" 4
.IX Item "$cps->cps_i_v_mac_count()"
(\f(CW\*(C`cpsIfVlanCurSecureMacAddrCount\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_v_mac_max()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_v_mac_max()\fR" 4
.IX Item "$cps->cps_i_v_mac_max()"
(\f(CW\*(C`cpsIfVlanMaxSecureMacAddr\*(C'\fR)
.ie n .SS """CISCO\-PORT\-SECURITY\-MIB::cpsIfVlanSecureMacAddrTable"""
.el .SS "\f(CWCISCO\-PORT\-SECURITY\-MIB::cpsIfVlanSecureMacAddrTable\fP"
.IX Subsection "CISCO-PORT-SECURITY-MIB::cpsIfVlanSecureMacAddrTable"
.ie n .IP "$cps\->\fBcps_i_v_mac_status()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_v_mac_status()\fR" 4
.IX Item "$cps->cps_i_v_mac_status()"
(\f(CW\*(C`cpsIfVlanSecureMacAddrRowStatus\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_v_mac_age()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_v_mac_age()\fR" 4
.IX Item "$cps->cps_i_v_mac_age()"
(\f(CW\*(C`cpsIfVlanSecureMacAddrRemainAge\*(C'\fR)
.ie n .IP "$cps\->\fBcps_i_v_mac_type()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_i_v_mac_type()\fR" 4
.IX Item "$cps->cps_i_v_mac_type()"
(\f(CW\*(C`cpsIfVlanSecureMacAddrType\*(C'\fR)
.ie n .SS """CISCO\-PORT\-SECURITY\-MIB::cpsSecureMacAddressTable"""
.el .SS "\f(CWCISCO\-PORT\-SECURITY\-MIB::cpsSecureMacAddressTable\fP"
.IX Subsection "CISCO-PORT-SECURITY-MIB::cpsSecureMacAddressTable"
.ie n .IP "$cps\->\fBcps_m_status()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_m_status()\fR" 4
.IX Item "$cps->cps_m_status()"
(\f(CW\*(C`cpsSecureMacAddrRowStatus\*(C'\fR)
.ie n .IP "$cps\->\fBcps_m_age()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_m_age()\fR" 4
.IX Item "$cps->cps_m_age()"
(\f(CW\*(C`cpsSecureMacAddrRemainingAge\*(C'\fR)
.ie n .IP "$cps\->\fBcps_m_type()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcps_m_type()\fR" 4
.IX Item "$cps->cps_m_type()"
(\f(CW\*(C`cpsSecureMacAddrType\*(C'\fR)
.ie n .SS """IEEE8021\-PAE\-MIB::dot1xPaePortEntry"""
.el .SS "\f(CWIEEE8021\-PAE\-MIB::dot1xPaePortEntry\fP"
.IX Subsection "IEEE8021-PAE-MIB::dot1xPaePortEntry"
.ie n .IP "$cps\->\fBpae_i_capabilities()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBpae_i_capabilities()\fR" 4
.IX Item "$cps->pae_i_capabilities()"
\&\f(CW\*(C`dot1xPaePortCapabilities\*(C'\fR
.Sp
Indicates the \s-1PAE\s0 functionality that this Port supports
and that may be managed through this \s-1MIB\s0 munged to return either
\&\f(CW\*(Aqdot1xPaePortAuthCapable\*(Aq\fR or \f(CW\*(Aqdot1xPaePortSuppCapable\*(Aq\fR.
.ie n .IP "$cps\->\fBpae_i_last_eapol_frame_source()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBpae_i_last_eapol_frame_source()\fR" 4
.IX Item "$cps->pae_i_last_eapol_frame_source()"
\&\f(CW\*(C`dot1xAuthLastEapolFrameSource\*(C'\fR
.Sp
The source \s-1MAC\s0 address carried in the most recently received \s-1EAPOL\s0 frame.
.ie n .SS """CISCO\-ERR\-DISABLE\-MIB::cErrDisableIfStatusEntry"""
.el .SS "\f(CWCISCO\-ERR\-DISABLE\-MIB::cErrDisableIfStatusEntry\fP"
.IX Subsection "CISCO-ERR-DISABLE-MIB::cErrDisableIfStatusEntry"
.ie n .IP "$cps\->\fBcerr_i_cause()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBcerr_i_cause()\fR" 4
.IX Item "$cps->cerr_i_cause()"
\&\f(CW\*(C`cErrDisableIfStatusCause\*(C'\fR
.Sp
Indicates the feature/event that caused the {interface, vlan} (or the entire
interface) to be error-disabled.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """i_err_disable_cause""" 4
.el .IP "\f(CWi_err_disable_cause\fR" 4
.IX Item "i_err_disable_cause"
Returns a \s-1HASH\s0 reference mapping ifIndex to err-disabled cause. The returned
data is sparse, so if the ifIndex is not present in the return value, the port
is not err-disabled.
.SH "Data Munging Callback Subroutines"
.IX Header "Data Munging Callback Subroutines"
.ie n .IP "$cps\->\fBmunge_pae_capabilities()\fR" 4
.el .IP "\f(CW$cps\fR\->\fBmunge_pae_capabilities()\fR" 4
.IX Item "$cps->munge_pae_capabilities()"
Return either \f(CW\*(Aqdot1xPaePortAuthCapable\*(Aq\fR or \f(CW\*(Aqdot1xPaePortSuppCapable\*(Aq\fR
based upon bit value.
