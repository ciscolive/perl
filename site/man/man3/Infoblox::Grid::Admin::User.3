.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Admin::User 3"
.TH Infoblox::Grid::Admin::User 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Admin::User \- User Admin object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An admin account provides access to the Infoblox appliance. An admin account inherits the privileges and properties of the group to which it belongs.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $user = Infoblox::Grid::Admin::User\->new(
\&     admin_group                       => $string,                                                               # Required
\&     auth_type                         => \*(AqLOCAL\*(Aq | \*(AqREMOTE\*(Aq,                                                    # Optional / Default is \*(AqLOCAL\*(Aq
\&     name                              => $string,                                                               # Required
\&     password                          => $string,                                                               # Required
\&     ca_certificate_issuer             => $string,                                                               # Optional / Default is undefined
\&     client_certificate_serial_number  => $string,                                                               # Optional / Default is undefined
\&     comment                           => $string,                                                               # Optional / Default is undefined
\&     disabled                          => "true" | "false",                                                      # Optional / Default is "false"
\&     enable_certificate_authentication => "true" | "false",                                                      # Optional / Default is undefined
\&     extattrs                          => { $string => $extattr, ... },                                          # Optional / Default is undefined
\&     extensible_attributes             => { $string => $string | $num, $string => [ $string | $num, ... ], ... } # Optional / Default is undefined
\&     email                             => $email,                                                                # Optional / Default is undefined
\&     time_zone                         => $TimeZone | undef                                                      # Optional / Default value is undefined
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to an Admin User object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& #Construct the user object
\& my $user = Infoblox::Grid::Admin::User\->new(
\&     admin_group => "admin\-group",
\&     name        => "testuser",
\&     password    => "infoblox",
\&     comment     => "test user account"
\&     disabled    => "true",
\&     email       => "testuser\e@test.com",
\& );
\& # Submit for addition
\& my $response = $session\->add( $user );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific User object:
\&
\&  name                             \- Optional. Optional. The name of the user in string format.
\&  extattrs                         \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes            \- Optional. A hash reference containing extensible attributes.
\&  role                             \- Optional. A role in string format or undef.
\&  ca_certificate_issuer            \- Optional. The name of the CA certificate issuer in string format.
\&  client_certificate_serial_number \- Optional. The serial number of the client certificate in string format.
.Ve
.Sp
When searching by role, admins assigned to the specified role, regardless of group, will be retrieved. If undef is passed as a get parameter for the role attribute, users that have no assigned roles, regardless of admin group, will be retrieved.
.Sp
Note that name and role cannot be specified at the same time.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&     object      => "Infoblox::Grid::Admin::User",
\&     name        => "testuser" );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use method to modify the comment.
\& $user\->comment("This is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $user );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, use \fBget()\fR or \fBsearch()\fR to retrieve the specific object first, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Get the user objects with the same starting name
\& my @retrieved_objs = $session\->get(
\&     object      => "Infoblox::Grid::Admin::User",
\&     name        => "testuser" );
\& # find the desired object from the retrieved list.
\& my $desired_user = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_user );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for Admin User objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a specific User object:
\&
\&  name                             \- Optional. The name of the user in string format (regular expression).
\&  admin_group                      \- Optional. The name of the admin group in string format.
\&  extattrs                         \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes            \- Optional. A hash reference containing extensible attributes.
\&  role                             \- Optional. A role in string format or undef.
\&  ca_certificate_issuer            \- Optional. The name of the CA certificate issuer in string format.
\&  client_certificate_serial_number \- Optional. The serial number of the client certificate in string format (regular expression).
.Ve
.Sp
When searching by role, the matching users will be users member of a group that has the specified role. If undef is passed as a search parameter for role, matching users will be ones belonging to groups with no roles assigned.
.Sp
Note that name and role cannot be specified at the same time.
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all User objects that start with "test"
\& my @retrieved_objs = $session\->search(
\&     object      => "Infoblox::Grid::Admin::User",
\&     name        => "test.*",
\&     admin_group => "admin\-group" );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a User object.
.SS "admin_group( )"
.IX Subsection "admin_group( )"
.RS 4
Use this method to set or retrieve the admin_group.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Admin group to which the user belongs. A user can belong to only one admin group at a time.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get admin group
\& my $admin_group = $user\->admin_group();
\& #Modify name
\& $user\->name("admin\-group");
.Ve
.RE
.RS 4
.RE
.SS "auth_type( )"
.IX Subsection "auth_type( )"
.RS 4
Use this method to set or retrieve the user authentication type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1LOCAL\s0' and '\s-1REMOTE\s0'. The default value is '\s-1LOCAL\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get auth_type value
\& my $auth_type = $user\->auth_type();
\& #Modify auth_type value
\& $user\->auth_type(\*(AqREMOTE\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ca_certificate_issuer( )"
.IX Subsection "ca_certificate_issuer( )"
.RS 4
Use this method to set or retrieve the name of the \s-1CA\s0 certificate issuer that is used for user lookup during authentication.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the \s-1CA\s0 certificate issuer that is used for user lookup during authentication in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ca_certificate_issuer
\& my $ca_certificate_issuer = $user\->ca_certificate_issuer();
\&
\& #Modify ca_certificate_issuer
\& $user\->ca_certificate_issuer("issuer");
.Ve
.RE
.RS 4
.RE
.SS "client_certificate_serial_number( )"
.IX Subsection "client_certificate_serial_number( )"
.RS 4
Use this method to set or retrieve a parameter that is used in pair with the name of the \s-1CA\s0 certificate issuer.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The parameter in string format that is used in pair with the name of the \s-1CA\s0 certificate issuer. Serial number can be either integer or hex. Serial number is unique for a particular issuer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get client_certificate_serial_number
\& my $client_certificate_serial_number = $user\->client_certificate_serial_number();
\&
\& #Modify client_certificate_serial_number
\& $user\->client_certificate_serial_number("11223344");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Pertinent information about the administrator, such as location or department. Comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $user\->comment();
\& #Modify comment
\& $user\->comment("This is the modified comment for admin user");
.Ve
.RE
.RS 4
.RE
.SS "disabled( )"
.IX Subsection "disabled( )"
.RS 4
Use this method to set or retrieve the \*(L"disabled\*(R" flag.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false. The admin is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disabled
\& my $disabled = $user\->disabled();
\& #Modify disabled
\& $user\->disabled("true");
.Ve
.RE
.RS 4
.RE
.SS "email( )"
.IX Subsection "email( )"
.RS 4
Use this method to set or retrieve the e\-mail address of an administrator.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The e\-mail address of an administrator. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get email
\& my $email = $user\->email();
\& #Modify email
\& $user\->email("usertest\e@infoblox.com");
.Ve
.RE
.RS 4
.RE
.SS "enable_certificate_authentication( )"
.IX Subsection "enable_certificate_authentication( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the user is allowed to log in only with the certificate.
Regular username/password authentication will be disabled for this user.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable certificate-only user authentification and 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_certificate_authentication
\& my $value = $object\->enable_certificate_authentication();
\&
\& #Modify enable_certificate_authentication
\& $object\->enable_certificate_authentication(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with an User object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $user\->extattrs();
\& #Modify extattrs
\& $user\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a User object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $user\->extensible_attributes();
\& #Modify extensible attributes
\& $user\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of an administrator.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the name of the admin.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $user\->name();
\& #Modify name
\& $user\->name("test_user");
.Ve
.RE
.RS 4
.RE
.SS "password( )"
.IX Subsection "password( )"
.RS 4
Use this method to set the password of an administrator. This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Password for the administrator to use when logging in.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Modify password
\& $user\->password("infobloxone");
.Ve
.RE
.RS 4
.RE
.SS "roles( )"
.IX Subsection "roles( )"
.RS 4
Use this method to retrieve the list of roles assigned to the admin's group.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a reference to an array of strings of the role names.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the roles
\& my $roles = $user\->roles();
.Ve
.RE
.RS 4
.RE
.SS "time_zone( )"
.IX Subsection "time_zone( )"
.RS 4
Use this method to set or retrieve the time zone of the administrator.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The \s-1UTC\s0 string that represents the time zone. For example \*(L"(\s-1UTC\s0 \- 6:00) Central Time (\s-1US\s0 and Canada)\*(R". Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get time zone
\& my $time_zone = $user\->time_zone();
\& #Modify time zone
\& $user\->time_zone("(UTC \- 6:00) Central Time (US and Canada)");
\& #Undef time zone
\& $user\->time_zone(undef);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to an Admin User object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\&                );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create an Admin User object\fR
.PP
.Vb 8
\& my $user = Infoblox::Grid::Admin::User\->new(
\&     name        => "testuser",
\&     password    => "infoblox",
\&     admin_group => "admin\-group",
\&     email       => "testuser\e@test.com",
\&     disabled    => "false",
\&     comment     => "test user account"
\& );
\&
\& unless ($user) {
\&        die("Construct user object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "User object created successfully\en";
\&
\& #Add the user object to the Infoblox appliance through a session
\& $session\->add($user)
\&        or die("Add User object failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin User object added to server successfully\en";
.Ve
.PP
\&\fB#Search for all users\fR
.PP
.Vb 6
\& my @retrieved_objs = $session\->search(
\&                object      => "Infoblox::Grid::Admin::User",
\&                name        => "test.*",
\&                admin_group => "admin\-group"
\&               );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search User object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Admin User object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a User object\fR
.PP
.Vb 6
\& #Get the user object from Infoblox appliance through a session
\& my @retrieved_objs = $session\->get(
\&             object      => "Infoblox::Grid::Admin::User",
\&             name        => "testuser",
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Get User object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Admin User object found at least 1 matching entry\en";
\&
\& #Modify the password of the User object
\& $object\->password("infoblox123");
\&
\& #Apply the changes.
\& $session\->modify($object)
\&        or die("Modify User object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "User object modified successfully \en";
.Ve
.PP
\&\fB#Remove the User object\fR
.PP
.Vb 11
\& #Get the User object through the session
\& my @retrieved_objs = $session\->get(
\&             object      => "Infoblox::Grid::Admin::User",
\&             name        => "testuser",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get User object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get User object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&        or die("Remove User object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin User object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::Admin::Group,Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
