.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::DMARC::Report::URI 3"
.TH Mail::DMARC::Report::URI 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::DMARC::Report::URI \- a DMARC report URI
.SH "VERSION"
.IX Header "VERSION"
version 1.20200214
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  use Mail::DMARC::URI;
\&  my $duri = Mail::DMARC::URI\->new;
\&  my $uri_ref = $duri\->parse(\*(Aqmailto:rua@example.com,mailto:rua@external.otherdomain.com\*(Aq);
\&  foreach my $u ( @$uri_ref ) {
\&      my $method = $u\->{uri};
\&      my $max    = $u\->{max_bytes};
\&      ... do some URI stuff ...
\&  };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
defines a generic syntax for identifying a resource.  The \s-1DMARC\s0
mechanism uses this as the format by which a Domain Owner specifies
the destination for the two report types that are supported.
.PP
The place such URIs are specified (see Section 6.2) allows a list of
these to be provided.  A report is to be sent to each listed \s-1URI.\s0
Mail Receivers \s-1MAY\s0 impose a limit on the number of URIs that receive
reports, but \s-1MUST\s0 support at least two.  The list of URIs is
separated by commas (\s-1ASCII\s0 0x2C).
.PP
Each \s-1URI\s0 can have associated with it a maximum report size that may
be sent to it.  This is accomplished by appending an exclamation
point (\s-1ASCII\s0 0x21), followed by a maximum size indication, before a
separating comma or terminating semi-colon.
.PP
Thus, a \s-1DMARC URI\s0 is a \s-1URI\s0 within which any commas or exclamation
points are percent-encoded per [\s-1URI\s0], followed by an \s-1OPTIONAL\s0
exclamation point and a maximum size specification, and, if there are
additional reporting URIs in the list, a comma and the next \s-1URI.\s0
.PP
For example, the \s-1URI\s0 \*(L"mailto:reports@example.com!50m\*(R" would request a
report be sent via email to \*(L"reports@example.com\*(R" so long as the
report payload does not exceed 50 megabytes.
.PP
A formal definition is provided in Section 6.3.
.SH "ABNF"
.IX Header "ABNF"
.Vb 3
\&  dmarc\-uri = URI [ "!" 1*DIGIT [ "k" / "m" / "g" / "t" ] ]
\&            ; "URI" is imported from [URI]; commas (ASCII 0x2c)
\&            ; and exclamation points (ASCII 0x21) MUST be encoded
.Ve
.PP
\&\s-1URI\s0 is imported from \s-1RFC 3986:\s0 https://www.ietf.org/rfc/rfc3986.txt
.PP
Only mailto, http, and https URIs are currently supported, examples:
.PP
.Vb 2
\&    https://www.ietf.org/rfc/rfc3986.txt
\&    mailto:John.Doe@example.com
.Ve
.PP
With an optional size limit (see \s-1SIZE LIMIT\s0).
.SH "SIZE LIMIT"
.IX Header "SIZE LIMIT"
A size limitation in a dmarc-uri, if provided, is interpreted as a
count of units followed by an \s-1OPTIONAL\s0 unit size (\*(L"k\*(R" for kilobytes,
\&\*(L"m\*(R" for megabytes, \*(L"g\*(R" for gigabytes, \*(L"t\*(R" for terabytes).  Without a
unit, the number is presumed to be a basic byte count.  Note that the
units are considered to be powers of two; a kilobyte is 2^10, a
megabyte is 2^20, etc.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Matt Simerson <msimerson@cpan.org>
.IP "\(bu" 4
Davide Migliavacca <shari@cpan.org>
.IP "\(bu" 4
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Matt Simerson.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
