.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Connector::Proxy::Net::LDAP::Simple 3"
.TH Connector::Proxy::Net::LDAP::Simple 3 "2020-06-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Connector::Proxy::Net::LDAP::Simple
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Get/Set scalar values on unique ldap entries.
The connector will die if multiple entries are found.
.SH "configuration options"
.IX Header "configuration options"
See Connector::Proxy::Net::LDAP for basic configuration options
.PP
.Vb 4
\& connector:
\&    LOCATION:...
\&    ....
\&    attrs: Str|Array
.Ve
.PP
The class needs one or more attribtues to look for. You can pass them either as
space delimited string or array ref in the \fIattrs\fR parameter.
.SH "accessor methods"
.IX Header "accessor methods"
.SS "get"
.IX Subsection "get"
The attrs list must contain at least one argument. You can specify multiple
attributes but you will receive only the first non undef value which is found.
If the attribute itself is multivalued, only the first value is returned.
.SS "get_meta"
.IX Subsection "get_meta"
If called with an empty path, returns { \s-1TYPE\s0 => \*(L"connector\*(R" }.
Otherwise calls get internally and returns undef if not found
or the value accompanied with \s-1TYPE\s0 => scalar.
.SS "get_list / get_size / get_hash / get_keys"
.IX Subsection "get_list / get_size / get_hash / get_keys"
Not supported.
.SS "set"
.IX Subsection "set"
If you want to use the set method, your attribute map must contain exactly
one value that denotes the attribute to which the value is written. You can
set only a scalar value.
.PP
You can control how existing attributes in the node are treated and if missing
nodes are created on the fly. See \fIConnector::Proxy::Net::LDAP\fR for details.
