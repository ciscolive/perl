.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Harness::Util::JSON 3"
.TH Test2::Harness::Util::JSON 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Harness::Util::JSON \- Utility class to help Test2::Harness pick the best
JSON implementation.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides functions for encoding/decoding json, and uses the best
json tools available.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test2::Harness::Util::JSON qw/encode_json decode_json/;
\&
\&    my $data = { foo => 1 };
\&    my $json = encode_json($data);
\&    my $copy = decode_json($json);
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
.ie n .IP "$package = \s-1\fBJSON\s0()\fR" 4
.el .IP "\f(CW$package\fR = \s-1\fBJSON\s0()\fR" 4
.IX Item "$package = JSON()"
This returns the \s-1JSON\s0 package being used by yath.
.ie n .IP "$bool = \s-1\fBJSON_IS_PP\s0()\fR" 4
.el .IP "\f(CW$bool\fR = \s-1\fBJSON_IS_PP\s0()\fR" 4
.IX Item "$bool = JSON_IS_PP()"
True if yath is using \s-1JSON::PP\s0.
.ie n .IP "$bool = \s-1\fBJSON_IS_XS\s0()\fR" 4
.el .IP "\f(CW$bool\fR = \s-1\fBJSON_IS_XS\s0()\fR" 4
.IX Item "$bool = JSON_IS_XS()"
True if yath is using \s-1JSON::XS\s0.
.ie n .IP "$bool = \s-1\fBJSON_IS_CPANEL\s0()\fR" 4
.el .IP "\f(CW$bool\fR = \s-1\fBJSON_IS_CPANEL\s0()\fR" 4
.IX Item "$bool = JSON_IS_CPANEL()"
True if yath is using Cpanel::JSON::XS.
.ie n .IP "$bool = \s-1\fBJSON_IS_CPANEL_OR_XS\s0()\fR" 4
.el .IP "\f(CW$bool\fR = \s-1\fBJSON_IS_CPANEL_OR_XS\s0()\fR" 4
.IX Item "$bool = JSON_IS_CPANEL_OR_XS()"
True if either \s-1JSON::XS\s0 or Cpanel::JSON::XS are being used.
.ie n .IP "$string = encode_json($data)" 4
.el .IP "\f(CW$string\fR = encode_json($data)" 4
.IX Item "$string = encode_json($data)"
Encode data into json. String will be 1\-line.
.ie n .IP "$data = decode_json($string)" 4
.el .IP "\f(CW$data\fR = decode_json($string)" 4
.IX Item "$data = decode_json($string)"
Decode json data from the string.
.ie n .IP "$string = encode_pretty_json($data)" 4
.el .IP "\f(CW$string\fR = encode_pretty_json($data)" 4
.IX Item "$string = encode_pretty_json($data)"
Encode into human-friendly json.
.ie n .IP "$string = encode_canon_json($data)" 4
.el .IP "\f(CW$string\fR = encode_canon_json($data)" 4
.IX Item "$string = encode_canon_json($data)"
Encode into canon-json.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
