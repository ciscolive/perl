.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::DNS::Nsgroup::StubMember 3"
.TH Infoblox::Grid::DNS::Nsgroup::StubMember 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::DNS::Nsgroup::StubMember \- A stub member group.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The stub member group provides stub servers configuration for stub zones.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 7
\& my $object = Infoblox::Grid::DNS::Nsgroup::StubMember\->new(
\&     name                  => $string,                                                              #Required
\&     stub_members          => [$grid_member1, $grid_member2, ...],                                  #Required
\&     comment               => $string,                                                              #Optional / Default is undefined
\&     extattrs              => { $string => $extattr, ... },                                         #Optional / Default is undefined
\&     extensible_attributes => {$string => $string | $num, $string => [ $string | $num, ... ], ... } #Optional / Default is undefined
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a stub members group object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add the object to the Infoblox appliance.
See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct an object
\& my $object = Infoblox::Grid::DNS::Nsgroup::StubMember\->new(
\&     name         => \*(Aqstubgroup\*(Aq,
\&     stub_members => [\*(Aqmember1.com\*(Aq, \*(Aqmember2.com\*(Aq],
\& );
\&
\& #Submit for addition
\& my $response = $session\->add($object);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance.
See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to get a specific stub member group object:
\&
\&  comment               \- Optional. The stub member group comment in a string format.
\&  name                  \- Optional. The stub member group name in a string format.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::Grid::DNS::Nsgroup::StubMember\*(Aq,
\&     name   => \*(Aqstubgroup\*(Aq,
\& );
\&
\& my @retrieved_objs = $session\->get(
\&     object                => \*(AqInfoblox::Grid::DNS::Nsgroup::StubMember\*(Aq,
\&     extensible_attributes => {\*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq},
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify the object in the Infoblox appliance.
See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Modify comment value
\& $object\->comment(\*(Aqthis is a modified comment\*(Aq);
\&
\& #Submit modification
\& my $response = $session\->modify($object);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove the object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific \s-1DHCP\s0 range object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Get the objects
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::Grid::DNS::Nsgroup::StubMember\*(Aq,
\&     name   => \*(Aqstubgroup\*(Aq,
\& );
\&
\& #Find the desired object from the retrieved list
\& my $desired_object = $retrieved_objs[0];
\&
\& #Submit for removal
\& my $response = $session\->remove($desired_object);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to search for the stub member group object:
\&
\&  comment               \- Optional. The stub member group comment in a string format (regexp).
\&  name                  \- Optional. The stub member group name in a string format (regexp).
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # search for objects
\& my @retrieved_objs = $session\->search(
\&     object  => \*(AqInfoblox::Grid::DNS::Nsgroup::StubMember\*(Aq,
\&     name    => \*(Aq^stub.*\*(Aq,
\&     comment => \*(Aq.*comment\*(Aq,
\& );
\&
\& # search for objects defining \*(AqSanta Clara\*(Aq for \*(AqSite\*(Aq extensible attribute
\& my @retrieved_objs = $session\->search(
\&     object                => \*(AqInfoblox::Grid::DNS::Nsgroup::StubMember\*(Aq,
\&     extensible_attributes => {\*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq},
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a stub member group.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the stub member group comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired comment in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get comment value
\& my $comment = $object\->comment();
\&
\& #Modify comment value
\& $object\->comment(\*(Aqstub comment\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a stub member group object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference that contains the names of extensible attributes and their associated values (Infoblox::Grid::Extattr objects).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get extattrs value
\& my $extattrs = $object\->extattrs();
\&
\& #Modify extattrs value
\& $object\->extattrs({\*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2});
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a stub member group object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes value
\& my $extensible_attributes = $object\->extensible_attributes();
\& #Modify extensible attributes
\& $object\->extensible_attributes({\*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [\*(AqPeter\*(Aq, \*(AqTom\*(Aq]});
.Ve
.RE
.RS 4
.RE
.SS "stub_members( )"
.IX Subsection "stub_members( )"
.RS 4
Use this method to set or retrieve the list of stub members.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of Grid Member host names in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get stub_members value
\& my $stub_members = $object\->stub_members();
\&
\& #Modify stub_members value
\&
\& #Set stub_members value
\& $object\->stub_members([\*(Aqmember1.com\*(Aq, \*(Aqmember2.com\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the stub member group name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired name in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name value
\& my $name = $object\->name();
\&
\& #Modify name value
\& $object\->name(\*(Aqstubg1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as modify and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to an Stub Member Nsgroup object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& my ($session, $result);
\&
\& #Create a session to the Infoblox device
\& $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create an Stub Member Nsgroup object\fR
.PP
.Vb 5
\& #Creating a forwarding nsgroup object.
\& my $stub_nsg1 = Infoblox::Grid::DNS::Nsgroup::StubMember\->new(
\&     name         => "stub_group_1",
\&     stub_members => ["infoblox.localdomain"],
\& );
\&
\& unless ($stub_nsg1) {
\&    die("Construct Stub Member Nsgroup failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& print "Stub Member Nsgroup object constructed successfully\en";
.Ve
.PP
\&\fB#Add the Nsgroup object\fR
.PP
.Vb 1
\& $result = $session\->add($stub_nsg1);
\& 
\& unless ($result) {
\&     die("Add Stub Member Nsgroup to session failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Stub Member Nsgroup object created successfully\en";
.Ve
.PP
\&\fB#Search and Modify the Nsgroup object\fR
.PP
.Vb 4
\& my @result_array = $session\->search(
\&     object => "Infoblox::Grid::DNS::Nsgroup::StubMember",
\&     name   => "stub_.*",
\& );
\&
\& my $object = $result_array[0];
\&
\& unless ($object) {
\&    die("Search for Stub Member Nsgroup failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& $result = $object\->comment("stub member");
\&
\& unless ($result) {
\&     die("Modify Stub Member Nsgroup failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& $result = $session\->modify($object);
\&
\& unless ($result) {
\&     die("Submit modification to the session failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Stub Member Nsgroup object modified successfully\en";
.Ve
.PP
\&\fB#Remove a Nsgroup object\fR
.PP
.Vb 4
\& my @result_array = $session\->get(
\&     object => "Infoblox::Grid::DNS::Nsgroup::StubMember",
\&     name   => "stub_group_1",
\& );
\&
\& my $object = $result_array[0];
\&
\& unless ($object) {
\&    die("Get Stub Member Nsgroup failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& $result = $session\->remove($object);
\&
\& unless ($result) {
\&     die("Remove Nsgroup failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Stub Member Nsgroup object removed successfully\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,
Infoblox::Session\->\fBadd()\fR,
Infoblox::Session\->\fBget()\fR,
Infoblox::Session\->\fBmodify()\fR,
Infoblox::Session\->\fBremove()\fR,
Infoblox::Session\->\fBsearch()\fR,
Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values, 
Infoblox::Grid::Extattr
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 67:" 4
.IX Item "Around line 67:"
alternative text 'Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes' contains non-escaped | or /
.IP "Around line 151:" 4
.IX Item "Around line 151:"
alternative text 'Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes' contains non-escaped | or /
.IP "Around line 250:" 4
.IX Item "Around line 250:"
alternative text 'Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values' contains non-escaped | or /
.IP "Around line 446:" 4
.IX Item "Around line 446:"
alternative text 'Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values' contains non-escaped | or /
