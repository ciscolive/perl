.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::AssetPack::Guides::Tutorial 3"
.TH Mojolicious::Plugin::AssetPack::Guides::Tutorial 3 "2018-09-08" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::AssetPack::Guides::Tutorial \- AssetPack tutorial
.SH "OVERVIEW"
.IX Header "OVERVIEW"
This guide will give detailed information about how to define assets and
include them into your templates.
.PP
See \*(L"\s-1DESCRIPTION\*(R"\s0 in Mojolicious::Plugin::AssetPack for a short description of
AssetPack.
.SH "GUIDE"
.IX Header "GUIDE"
.SS "Loading the plugin"
.IX Subsection "Loading the plugin"
The plugin needs to be installed an loaded before any assets can be defined:
.PP
.Vb 1
\&  $app\->plugin(AssetPack => \e%args);
.Ve
.PP
Details about \f(CW%args\fR can be found under
\&\*(L"register\*(R" in Mojolicious::Plugin::AssetPack, but there is one mandatory
argument worth noting: \*(L"pipes\*(R". \*(L"pipes\*(R" need to be a list of all the pipes
you need to process your assets. Example:
.PP
.Vb 1
\&  $app\->plugin(AssetPack => {pipes => [qw(Sass Css Combine)]});
.Ve
.PP
Loading the plugin with the list above will enable AssetPack to process Sass
and Css files, minify them and combine them into a single asset in production.
.SS "Optional dependencies"
.IX Subsection "Optional dependencies"
AssetPack has only optional dependencies. The reason for that is that the
dependencies should only be required while developing, and not for running
the application. See <https://github.com/jhthorsen/mojolicious\-plugin\-assetpack/blob/v2/cpanfile>
for a complete list, but here are the current list:
.IP "\(bu" 2
CSS::Minifier::XS 0.09
.Sp
Used to minify \s-1CSS.\s0
.IP "\(bu" 2
CSS::Sass 3.3.0
.Sp
Used to process and minify \s-1CSS.\s0
.IP "\(bu" 2
Imager::File::PNG 0.90
.Sp
\&\s-1TODO:\s0 Used to generate \s-1CSS\s0 sprites.
.IP "\(bu" 2
JavaScript::Minifier::XS 0.11
.Sp
Used to minify JavaScript.
.SS "Pipes"
.IX Subsection "Pipes"
AssetPack does not do any heavy lifting itself: All the processing is left to
the pipe objects.
.IP "\(bu" 2
Mojolicious::Plugin::AssetPack::Pipe::CoffeeScript
.Sp
Process CoffeeScript coffee files. Should be loaded before
Mojolicious::Plugin::AssetPack::Pipe::JavaScript.
.IP "\(bu" 2
Mojolicious::Plugin::AssetPack::Pipe::Combine
.Sp
Combine multiple assets to one. Should be loaded last.
.IP "\(bu" 2
Mojolicious::Plugin::AssetPack::Pipe::Css
.Sp
Minify \s-1CSS.\s0
.IP "\(bu" 2
Mojolicious::Plugin::AssetPack::Pipe::Favicon
.Sp
There is a special topic called \*(L"favicon.ico\*(R", combined with the
Mojolicious::Plugin::AssetPack::Pipe::Favicon pipe which can be used to
describe favicons, touch icons and tile icons.
.IP "\(bu" 2
Mojolicious::Plugin::AssetPack::Pipe::Fetch
.Sp
Will look for \*(L"url(...)\*(R" in \s-1CSS\s0 files and download the related assets.
.IP "\(bu" 2
Mojolicious::Plugin::AssetPack::Pipe::JavaScript
.Sp
Minify JavaScript.
.IP "\(bu" 2
Mojolicious::Plugin::AssetPack::Pipe::Jpeg
.Sp
Used to crush \*(L"jpeg\*(R" image files.
.IP "\(bu" 2
Mojolicious::Plugin::AssetPack::Pipe::Less
.Sp
Process Less \s-1CSS\s0 files. Should be loaded before
Mojolicious::Plugin::AssetPack::Pipe::Css.
.IP "\(bu" 2
Mojolicious::Plugin::AssetPack::Pipe::Png
.Sp
Used to crush \*(L"png\*(R" image files.
.IP "\(bu" 2
Mojolicious::Plugin::AssetPack::Pipe::Riotjs
.Sp
Process <http://riotjs.com/> tag files. Should be loaded before
Mojolicious::Plugin::AssetPack::Pipe::JavaScript.
.IP "\(bu" 2
Mojolicious::Plugin::AssetPack::Pipe::Sass
.Sp
Process sass and scss files. Should be loaded before
Mojolicious::Plugin::AssetPack::Pipe::Css.
.SS "Where to place source files"
.IX Subsection "Where to place source files"
The source/input files that make up a virtual asset (topic) can come from
either...
.PP
\fIOn disk\fR
.IX Subsection "On disk"
.PP
AssetPack will look for source files in the \*(L"assets\*(R" directory, relative to the
application home. Unlike the \*(L"public\*(R" directory, this directory is
not shared on the internet, but the generated assets will still be available
thanks to a custom route.
.PP
Mojolicious::Plugin::AssetPack::Store is a sub class of
Mojolicious::Static, allowing it to find files relative to
\&\*(L"paths\*(R" in Mojolicious::Static. For example, to change asset search paths, you
can do:
.PP
.Vb 1
\&    $app\->asset\->store\->paths(["/some/new/location", "/other/location"]);
.Ve
.PP
\fI\s-1DATA\s0 section\fR
.IX Subsection "DATA section"
.PP
Mojolicious::Plugin::AssetPack::Store is a sub class of
Mojolicious::Static, allowing it to look for files in \s-1DATA\s0 sections of
\&\*(L"classes\*(R" in Mojolicious::Static.
.PP
The \s-1DATA\s0 section can also be used to lookup \*(L"@import\*(R" files. (Currently only
supported by Mojolicious::Plugin::AssetPack::Pipe::Sass)
.PP
\fIWeb\fR
.IX Subsection "Web"
.PP
Any file starting with \*(L"http\*(R" or \*(L"https\*(R" will be downloaded from web using
\&\*(L"ua\*(R" in Mojolicious::Plugin::AssetPack.
.PP
It will also parse recursively \*(L"@import\*(R" files and download those as well.
(Currently only supported by Mojolicious::Plugin::AssetPack::Pipe::Sass)
.PP
Assets from web will be cached locally to prevent downloading new and untested
assets on each application startup.
.PP
\fICurrent Mojolicious application\fR
.IX Subsection "Current Mojolicious application"
.PP
See \*(L"\s-1DYNAMIC ASSETS\*(R"\s0 in Mojolicious::Plugin::Assets::Guides::Cookbook.
.SS "Process assets"
.IX Subsection "Process assets"
Assets should be defined when you application starts. This can either be done
using a definition file or inside you
application.
.PP
\fIDefining assets in the application\fR
.IX Subsection "Defining assets in the application"
.PP
Assets can be defined using the \*(L"process\*(R" in Mojolicious::Plugin::AssetPack
method:
.PP
.Vb 7
\&  $app\->asset\->process(
\&    "app.css" => (
\&      "sass/bar.scss",
\&      "foo/bar.css",
\&      "https://github.com/Dogfalo/materialize/blob/master/sass/materialize.scss",
\&    )
\&  );
.Ve
.PP
In the example above we have defined a topic named \*(L"app.css\*(R" which
later can be included in templates. The list of files
following are the source files which will make up the final asset.
.PP
\fIDefining assets in a definition file\fR
.IX Subsection "Defining assets in a definition file"
.PP
Moving the definition to an external file can be useful for keeping the
application code tidy. The definition file should be located in the
assets directory, or optionally
defined it in the \*(L"\s-1DATA\*(R"\s0 section. The default file is called
\&\*(L"assetpack.def\*(R" and will be looked up if
\&\*(L"process\*(R" in Mojolicious::Plugin::AssetPack is called without arguments. Example
file:
.PP
.Vb 4
\&  ! app.css
\&  < sass/bar.scss
\&  << https://github.com/Dogfalo/materialize/blob/master/sass/materialize.scss
\&  < sass/main.scss
.Ve
.PP
Empty lines and lines starting with \*(L"#\*(R" will be skipped. Each line starting
with \*(L"!\*(R" will be used to define a topic (virtual asset name), and \*(L"<\*(R" will
define a source file. This means that the file above will result in (almost)
the same as in the example above.
.PP
The idea of the line starting with \*(L"<<\*(R" is to download an external (remote)
file for your convenience, which can be imported in your \s-1SASS/LESS\s0 files. The
downloaded file is not included in the output asset. For example, you have
\&\*(L"sass/main.scss\*(R" which depends on \*(L"materialize.scss\*(R" (remote file) and you need
this \*(L"materialize.scss\*(R" file locally available to be imported in
\&\*(L"sass/main.scss\*(R".  If you want to include a remote file in your output asset,
use '<' insteaf of '<<'.
.PP
It is also possible to add conditions:
.PP
.Vb 3
\&  ! app.css
\&  < development.css [mode==development] [minify==0]
\&  < production.css  [mode!=development]
.Ve
.PP
\&\*(L"development.css\*(R" will be processed if \*(L"mode\*(R" in Mojolicious is \*(L"development\*(R" and
\&\*(L"minify\*(R" in Mojolicious::Plugin::AssetPack is \*(L"0\*(R". \*(L"production.css\*(R" will be
processed if \*(L"mode\*(R" in Mojolicious is something else than \*(L"development\*(R". This is
especially useful if you want to include a JavaScript with debug flags set
while developing, but switch to a smaller version without debug in production.
.SS "Using assets"
.IX Subsection "Using assets"
Any processed asset can be accessed by referring to a topic.
.PP
\fITemplate\fR
.IX Subsection "Template"
.PP
An asset can be included in a template using the
\&\*(L"asset\*(R" in Mojolicious::Plugin::AssetPack helper:
.PP
.Vb 4
\&  <head>
\&    %= asset "app.css"
\&    %= asset "app.js"
\&  </head>
.Ve
.PP
The \*(L"asset\*(R" in Mojolicious::Plugin::AssetPack helper takes additional arguments
which will be passed on directly to either the
\&\*(L"javascript\*(R" in Mojolicious::Plugin::TagHelpers helper or
\&\*(L"stylesheet\*(R" in Mojolicious::Plugin::TagHelpers helper. Example:
.PP
.Vb 1
\&    %= asset "app.css", media => "print"
.Ve
.PP
In production mode, the helper above will just result in one \*(L"link\*(R" tag. On the
other hand, if you are in \*(L"development\*(R" mode, it will result in on \*(L"link\*(R" tag
per source asset.
.PP
\fIAsset objects\fR
.IX Subsection "Asset objects"
.PP
It is also possible to retrieve the processed asset objects. The example
below will retrieve a Mojo::Collection object holding zero or more
Mojolicious::Plugin::AssetPack::Asset objects:
.PP
.Vb 2
\&  my $collection = $app\->asset\->processed("app.css");
\&  print $collection\->map("checksum")\->join(", ");
.Ve
.PP
This can also be used to inline assets in a template:
.PP
.Vb 1
\&  %= stylesheet sub { asset\->processed(\*(Aqapp.css\*(Aq)\->map(\*(Aqcontent\*(Aq)\->join }
.Ve
.SS "Application mode"
.IX Subsection "Application mode"
The application mode will define if the assets should be
combined and minified. The \*(L"minify\*(R" in Mojolicious::Plugin::AssetPack attribute
can also be set manually if you have special needs.
.PP
\fIDevelopment\fR
.IX Subsection "Development"
.PP
The assets will be processed, but not minified/combined if \s-1MOJO_MODE\s0 or
\&\*(L"mode\*(R" in Mojolicious is set to \*(L"development\*(R". This is to make it easier to
map JavaScript or \s-1CSS\s0 bugs to a specific file and line. \*(L"development\*(R" is
the default mode while running morbo:
.PP
.Vb 1
\&  $ morbo \-w assets/ \-w lib/ \-w templates/ script/myapp
.Ve
.PP
\fIAny other mode\fR
.IX Subsection "Any other mode"
.PP
Any \*(L"production\*(R" mode will result in one combined and minified asset. This will
save bandwidth and roundtrip time to the server.
.SS "Caching"
.IX Subsection "Caching"
Processed assets will be cached to disk when possible. The process step is run
so if such a processed asset exists, the process step will not be run again.
Again, the external tools (less, coffee, ...) and modules
(JavaScript::Minifier::XS, CSS::Sass) will only be required while
developing, but can be skipped when installing an already built application.
.SS "Assets without topics"
.IX Subsection "Assets without topics"
One nifty feature is to use Mojolicious::Plugin::AssetPack for assets which
do not have any pipe to process them. The reason why this comes in handy is to
avoid cache issues, since changing the file on disk will generate a new \s-1URL.\s0
.PP
These assets can also be defined directly in the templates, without having to
be defined in the application startup process. Examples:
.PP
.Vb 2
\&  # <img src="/asset/52e98718f0/foo.gif">
\&  %= asset "/image/foo.gif"
\&
\&  # <img src="/asset/87652910af/baz.svg">
\&  %= asset "/image/baz.svg"
\&
\&  # <link rel="icon" href="/asset/65428718f1/bar.ico">
\&  %= asset "/image/bar.ico"
\&
\&  # <source src="/asset/87652718f0/baz.mp3" type="audio/mpeg">
\&  %= asset "/audio/baz.mp3"
\&
\&  # <source src="/asset/52e87652f0/foo.mp4" type="video/mp4">
\&  %= asset "/video/foo.mp4"
\&
\&  # <source src="/asset/52eaz7613a/bar.ogg" type="audio/ogg">
\&  %= asset "/audio/bar.ogg"
\&
\&  # <source src="/asset/baf72618f1/foo.ogv" type="audio/ogv">
\&  %= asset "/video/foo.ogv"
\&
\&  # <source src="/asset/92118711f0/bar.webm" type="audio/webm">
\&  %= asset "/video/bar.webm"
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious::Plugin::AssetPack,
Mojolicious::Plugin::AssetPack::Guides::Developing and
Mojolicious::Plugin::AssetPack::Guides::Cookbook.
