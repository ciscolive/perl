.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Record::NSEC 3"
.TH Infoblox::DNS::Record::NSEC 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Record::NSEC  \- NSEC Record object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1NSEC\s0 resource record is one of the resource records included in the \s-1DNS\s0 security extension mechanism (\s-1DNSSEC\s0). This record is used to provide authenticated denial of existence of a resource record in
responce to a resolver query.
.PP
The \s-1NSEC\s0 record is defined in \s-1RFC 4034.\s0
.PP
The \s-1NSEC\s0 records are automatically generated upon the signing of an authoritative zone. The \s-1NSEC\s0 Record object is read-only.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::DNS::Record::NSEC object is a read-only object and does not require manual construction.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session that can be applied to an \s-1NSEC\s0 Record object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to get the NSEC Record object(s):
\&
\&     name            \- Optional. FQDN of the NSEC record (.e., FQDN of the owning RRset).
\&     next_domain_name \- Optional. Next owner name (in the canonical ordering of the zone) that has authoritative data
\&     ttl              \- Optional. TTL value for the record
\&     types           \- Optional. Identifies the RRset types that exists at the NSEC RR\*(Aqs owner name
\&     view            \- Optional. The DNS view in which the record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&     zone            \- Optional. A zone name in FQDN format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\&   #get an NSEC record by name, DNS view name and record type
\&   my $nsec=$session\->get(
\&                           object => "Infoblox::DNS::Record::NSEC",
\&                           name   => "a_record.test.com",
\&                           types  => "A",
\&                           view   => "default"
\&                         );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to search the NSEC Record object(s):
\&
\&     name            \- Optional. FQDN of the NSEC record. Regular expression.
\&     next_domain_name \- Optional. Next owner name (in the canonical ordering of the zone) that has authoritative data (regular expression).
\&     ttl              \- Optional. TTL value for the record.
\&     types           \- Optional. Identifies the RRset types that exist at the NSEC RR\*(Aqs owner name (regular expression)
\&     view            \- Optional. The DNS view in which the record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&     zone            \- Optional. A zone name in FQDN format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&   #search for all NSEC records that match the regular expression for name and record type
\&   my @retrieved_objs=$session\->search(
\&                           object => "Infoblox::DNS::Record::NSEC",
\&                           name   => "rec.*[.]test[.]com",
\&                           types  => "A|MX",
\&                         );
\&
\& # search for all NSEC records in the "domain.com" zone of the default DNS view
\& # Note that the \*(Aqdefault\*(Aq view is assumed implicitly here
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::NSEC",
\&     zone   => "domain.com",
\&    );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to retrieve the attribute values of an \s-1NSEC\s0 Record object.
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to retrieve cloud \s-1API\s0 related information for the Infoblox::DNS::Record::NSEC object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get cloud_info
\& my $cloud_info = $object\->cloud_info();
.Ve
.RE
.RS 4
.RE
.SS "creator( )"
.IX Subsection "creator( )"
.RS 4
Use this method to retrieve the \s-1NSEC\s0 record creator. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $object\->creator();
.Ve
.RE
.RS 4
.RE
.SS "dns_name( )"
.IX Subsection "dns_name( )"
.RS 4
Use this method to retrieve the \s-1FQDN,\s0 in punycode format, of the \s-1NSEC\s0 record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $nsec\->dns_name();
.Ve
.RE
.RS 4
.RE
.SS "dns_next_domain_name( )"
.IX Subsection "dns_next_domain_name( )"
.RS 4
Use this method to retrieve the next owner name in punycode format. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $nsec\->dns_next_domain_name();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to retrieve the \s-1FQDN\s0 of the \s-1NSEC\s0 record (which is the same as the name of the owning record).
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1FQDN\s0 of the \s-1NSEC\s0 record attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the FQDN of the NSEC record
\& my $name = $nsec\->name();
.Ve
.RE
.RS 4
.RE
.SS "next_domain_name( )"
.IX Subsection "next_domain_name( )"
.RS 4
Use this method to retrieve the next owner name, in the canonical order of the zone, that has authoritative data.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the  next owner name (in the canonical ordering of the zone) that has authoritative data. The returned data is a string in \s-1FQDN\s0 format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get  next owner name (in the canonical ordering of the zone) that has authoritative data
\& my $next_domain_name = $nsec\->next_domain_name();
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to retrieve the Time to Live (\s-1TTL\s0) value of an \s-1NSEC\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1TTL\s0 attribute value. The returned parameter is a 32\-bit integer (range from 0 to 4294967295) that represents the duration, in seconds, that the record is cached. Zero indicates that the record should not be cached.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get TTL
\& my $ttl = $nsec\->ttl();
.Ve
.RE
.RS 4
.RE
.SS "types( )"
.IX Subsection "types( )"
.RS 4
Use this method to retrieve the types field of an \s-1NSEC\s0 record. This field identifies the RRSet types that exist at the original owner name of the \s-1NSEC RR.\s0
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the RRSet types that exist at the owner name of the \s-1NSEC RR\s0 attribute value. The returned value is a string containing \s-1RR\s0 type mnemonics separated by a space; for example, \*(L"\s-1NS SOA RRSIG DNSKEY\*(R".\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the types field value
\& my $types = $nsec\->types();
.Ve
.RE
.RS 4
.RE
.SS "view( )"
.IX Subsection "view( )"
.RS 4
Use this method to retrieve the \s-1DNS\s0 view object that contains the \s-1NSEC\s0 Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the Infoblox::DNS::View object that contains the \s-1NSEC\s0 record.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the view
\& my $view = $nsec\->view();
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of an \s-1NSEC\s0 record.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns the zone name in \s-1FQDN\s0 format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get zone
\& my $zone = $nsec\->zone();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the session methods on an \s-1NSEC\s0 record object.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&        my $session = Infoblox::Session\->new(
\&            master   => "192.168.1.2",
\&            username => "admin",
\&            password => "infoblox"
\&        );
\&        unless ($session) {
\&           die("Construct session failed: ",
\&               $session\->status_code() . ":" . $session\->status_detail());
\&        }
\&        print "Session created successfully\en";
\&
\&        #Enable DNSSEC in the default view
\&
\&        my $default_view=$session\->get(
\&                                       object=> "Infoblox::DNS::View",
\&                                       name => "default"
\&                                      );
\&        unless($default_view) {
\&            die("Getting the default view failed:",
\&               Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&        print "Got the default view successfully\en";
\&
\&        $default_view\->dnssec_enabled("true")
\&            or die("Changing the dnssec_enabled in the default view failed:",
\&                    Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        $session\->modify($default_view)
\&            or die("Changing the dnssec_enabled in the default view failed:",
\&                    Infoblox::status_code() . ":" . Infoblox::status_detail());
.Ve
.PP
\&\fB#Create a signed zone and populate it with an A record to demonstrate \s-1NSEC\s0 record\fR
.PP
.Vb 9
\&        print "Creating Member primary server for the zone\en";
\&        my $primary=Infoblox::DNS::Member\->new(
\&                                                ipv4addr => "192.168.1.2",
\&                                                name => "infoblox.localdomain",
\&                                              );
\&        unless($primary) {
\&           die("Unable to create primary server object: ",
\&               Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&
\&        my $zone = Infoblox::DNS::Zone\->new(
\&                                             name => "domain.com",
\&                                             primary => $primary
\&                                           );
\&        unless ($zone) {
\&           die("Construct zone failed: ",
\&               Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&        print "Zone object created successfully\en";
\&
\&        #Verify if the zone exists
\&        my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "domain.com");
\&        unless ($object) {
\&           print "Zone does not exist on server, safe to add the zone\en";
\&           $session\->add($zone)
\&              or die("Add zone failed: ",
\&                     $session\->status_code() . ":" . $session\->status_detail());
\&        }
\&        print "Zone added successfully\en";
\&
\&        #Adding A record to the zone to demonstrate the corresponding NSEC record
\&        my $a_record=Infoblox::DNS::Record::A\->new(
\&                                                    ipv4addr => "10.9.8.7",
\&                                                    name => "recorda.domain.com"
\&                                                  );
\&        unless($a_record) {
\&           die("Creating A record failed : ",
\&              Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&
\&        $object = $session\->get( object => "Infoblox::DNS::Record::A", name => "recorda.domain.com" );
\&        unless ($object) {
\&           print "A record does not exist on the server, safe to add the A record\en";
\&           $session\->add($a_record)
\&             or die("Adding A record failed: ",
\&                    Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&        print "A record added to the zone successfully\en";
\&
\&        #Retrieving zone back from the server in order to sign it
\&        $zone = $session\->get(object => "Infoblox::DNS::Zone", name => "domain.com");
\&        unless($zone) {
\&           die("Retrieving zone back failed: ",
\&                Infoblox::status_code( ). ":". Infoblox::status_detail( ));
\&        }
\&        print "Zone retrieved for signing successfully.\en";
\&
\&        $zone\->dnssec_ksk_algorithm("RSASHA1") &&
\&        $zone\->dnssec_zsk_algorithm("RSASHA1") &&
\&        $zone\->dnssec_ksk_size(640) &&
\&        $zone\->dnssec_zsk_size(640)
\&          or die("Changing the zone DNSSEC setting failed: ",
\&                 Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        $session\->modify($zone)
\&          or die("Modifying dnssec values in zone failed: ",
\&                 Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        print "Zone modified successfully\en";
\&
\&        #Signing the zone
\&        $zone\->dnssec_signed("true")
\&           or die("Signing of the zone failed: ",
\&                   Infoblox::status_code() . ":" . Infoblox::status_detail());
\&       print "Zone signed successfully\en";
.Ve
.PP
\&\fB#Getting the \s-1NSEC\s0 record corresponding to the A record\fR
.PP
.Vb 10
\&       my $nsec_record_a=$session\->get(
\&                                    object => "Infoblox::DNS::Record::NSEC",
\&                                    name   => "recorda.domain.com",
\&                                    view   => "default"
\&                                   );
\&      unless($nsec_record_a) {
\&         die("Getting NSEC corresponding to the A record failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\&      }
\&      print "Got NSEC record successfully, next_domain_name value: ".$nsec_record_a\->next_domain_name()."\en";
.Ve
.PP
\&\fB#Searching for \s-1NSEC\s0 objects using regular expressions\fR
.PP
.Vb 11
\&      my @retrieved_objs=$session\->search(
\&                                           object => "Infoblox::DNS::Record::NSEC",
\&                                           name   => ".*domain[.]com",
\&                                           types  => "A|MX|SOA",
\&                                           view   => "default"
\&                                         );
\&     unless(@retrieved_objs>0) {
\&         die("Searching for NSEC objects failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\&     }
\&     print "Search for the NSEC objects successful, ".scalar(@retrieved_objs)." objects found\en";
.Ve
.PP
\&\fB#Removing the created zone and cleaning up the view\fR
.PP
.Vb 4
\&      $session\->remove($zone)
\&        or die("Unable to remove the zone: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\&      print "Zone removed successfully\en";
\&
\&      $default_view\->dnssec_enabled("false")
\&      && $default_view\->override_dnssec("false")
\&      && $session\->modify($default_view)
\&       or die("Restoring dnssec_enabled value in the default view failed: ",
\&              Infoblox::status_code() . ":" . Infoblox::status_detail());
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::DNS::Record::NSEC3, Infoblox::DNS::Record::NSEC3PARAM, Infoblox::DNS::View, Infoblox::DNS::Zone
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
