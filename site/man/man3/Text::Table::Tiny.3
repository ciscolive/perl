.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::Table::Tiny 3"
.TH Text::Table::Tiny 3 "2020-09-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Table::Tiny \- generate simple text tables from 2D arrays
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Text::Table::Tiny 1.02 qw/ generate_table /;
\&
\& my $rows = [
\&   [qw/ Pokemon     Type     Count /],
\&   [qw/ Abra        Psychic      5 /],
\&   [qw/ Ekans       Poison     123 /],
\&   [qw/ Feraligatr  Water     5678 /],
\& ];
\&
\& print generate_table(rows => $rows, header_row => 1), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a single function, \f(CW\*(C`generate_table\*(C'\fR, which formats
a two-dimensional array of data as a text table.
It handles text that includes \s-1ANSI\s0 escape codes and wide Unicode characters.
.PP
There are a number of options for adjusting the output format,
but the intention is that the default option is good enough for most uses.
.PP
The example shown in the \s-1SYNOPSIS\s0 generates the following table:
.PP
.Vb 7
\& +\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-+
\& | Pokemon    | Type    | Count |
\& +\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-+
\& | Abra       | Psychic | 5     |
\& | Ekans      | Poison  | 123   |
\& | Feraligatr | Water   | 5678  |
\& +\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-+
.Ve
.PP
Support for wide characters was added in 1.02,
so if you need that,
you should specify that as your minimum required version,
as per the \s-1SYNOPSIS.\s0
.PP
The interface changed with version 0.04,
so if you use the \f(CW\*(C`generate_table()\*(C'\fR function illustrated above,
then you need to require at least version 0.04 of this module.
.PP
Some of the options described below were added in version 1.00,
so your best bet is to require at least version 1.00.
.SS "\fBgenerate_table()\fP"
.IX Subsection "generate_table()"
The \f(CW\*(C`generate_table\*(C'\fR function understands a number of arguments,
which are passed as a hash.
The only required argument is \fBrows\fR.
Where arguments were not supported in the original release,
the first supporting version is noted.
.PP
If you pass an unknown argument,
\&\f(CW\*(C`generate_table\*(C'\fR will die with an error message.
.IP "\(bu" 4
rows
.Sp
Takes an array reference which should contain one or more rows
of data, where each row is an array reference.
.IP "\(bu" 4
header_row
.Sp
If given a true value, the first row in the data will be interpreted
as a header row, and separated from the rest of the table with a ruled line.
.IP "\(bu" 4
separate_rows
.Sp
If given a true value, a separator line will be drawn between every row in
the table,
and a thicker line will be used for the header separator.
.IP "\(bu" 4
top_and_tail
.Sp
If given a true value, then the top and bottom border lines will be skipped.
This reduces the vertical height of the generated table.
.Sp
Added in 0.04.
.IP "\(bu" 4
align
.Sp
This takes an array ref with one entry per column,
to specify the alignment of that column.
Legal values are 'l', 'c', and 'r'.
You can also specify a single alignment for all columns.
\&\s-1ANSI\s0 escape codes are handled.
.Sp
Added in 1.00.
.IP "\(bu" 4
style
.Sp
Specifies the format of the output table.
The default is \f(CW\*(Aqclassic\*(Aq\fR,
but other options are \f(CW\*(Aqboxrule\*(Aq\fR and \f(CW\*(Aqnorule\*(Aq\fR.
.Sp
If you use the \f(CW\*(C`boxrule\*(C'\fR style,
you'll probably need to run \f(CW\*(C`binmode(STDOUT, \*(Aq:utf8\*(Aq)\*(C'\fR.
.Sp
Added in 1.00.
.IP "\(bu" 4
indent
.Sp
Specify an indent that should be prefixed to every line
of the generated table.
This can either be a string of spaces,
or an integer giving the number of spaces wanted.
.Sp
Added in 1.00.
.IP "\(bu" 4
compact
.Sp
If set to a true value then we omit the single space padding on either
side of every column.
.Sp
Added in 1.00.
.SS "\s-1EXAMPLES\s0"
.IX Subsection "EXAMPLES"
If you just pass the data and no other options:
.PP
.Vb 1
\& generate_table(rows => $rows);
.Ve
.PP
You get minimal ruling:
.PP
.Vb 6
\& +\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-+
\& | Pokemon    | Type    | Count |
\& | Abra       | Psychic | 5     |
\& | Ekans      | Poison  | 123   |
\& | Feraligatr | Water   | 5678  |
\& +\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-+
.Ve
.PP
If you want a separate header, set the header_row option to a true value,
as shown in the \s-1SYNOPSIS.\s0
.PP
To take up fewer lines,
you can miss out the top and bottom rules,
by setting \f(CW\*(C`top_and_tail\*(C'\fR to a true value:
.PP
.Vb 1
\& generate_table(rows => $rows, header_row => 1, top_and_tail => 1);
.Ve
.PP
This will generate the following:
.PP
.Vb 5
\& | Pokemon    | Type    | Count |
\& +\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-+
\& | Abra       | Psychic | 5     |
\& | Ekans      | Poison  | 123   |
\& | Feraligatr | Water   | 5678  |
.Ve
.PP
If you want a more stylish looking table,
set the \f(CW\*(C`style\*(C'\fR parameter to \f(CW\*(Aqboxrule\*(Aq\fR:
.PP
.Vb 2
\& binmode(STDOUT,\*(Aq:utf8\*(Aq);
\& generate_table(rows => $rows, header_row => 1, style => \*(Aqboxrule\*(Aq);
.Ve
.PP
This uses the \s-1ANSI\s0 box rule characters.
Note that you will need to ensure \s-1UTF\s0 output.
.PP
.Vb 7
\& ┌────────────┬─────────┬───────┐
\& │ Pokemon    │ Type    │ Count │
\& ├────────────┼─────────┼───────┤
\& │ Abra       │ Psychic │ 5     │
\& │ Ekans      │ Poison  │ 123   │
\& │ Feraligatr │ Water   │ 5678  │
\& └────────────┴─────────┴───────┘
.Ve
.PP
You might want to right-align numeric values:
.PP
.Vb 1
\& generate_table( ... , align => [qw/ l l r /] );
.Ve
.PP
The \f(CW\*(C`align\*(C'\fR parameter can either take an arrayref,
or a string with an alignment to apply to all columns:
.PP
.Vb 7
\& ┌────────────┬─────────┬───────┐
\& │ Pokemon    │ Type    │ Count │
\& ├────────────┼─────────┼───────┤
\& │ Abra       │ Psychic │     5 │
\& │ Ekans      │ Poison  │   123 │
\& │ Feraligatr │ Water   │  5678 │
\& └────────────┴─────────┴───────┘
.Ve
.PP
If you're using the boxrule style,
you might feel you can remove the padding on either side of every column,
done by setting \f(CW\*(C`compact\*(C'\fR to a true value:
.PP
.Vb 7
\& ┌──────────┬───────┬─────┐
\& │Pokemon   │Type   │Count│
\& ├──────────┼───────┼─────┤
\& │Abra      │Psychic│    5│
\& │Ekans     │Poison │  123│
\& │Feraligatr│Water  │ 5678│
\& └──────────┴───────┴─────┘
.Ve
.PP
You can also ask for a rule between each row,
in which case the header rule becomes stronger.
This works best when combined with the boxrule style:
.PP
.Vb 1
\& generate_table( ... , separate_rows => 1 );
.Ve
.PP
Which results in the following:
.PP
.Vb 9
\& ┌────────────┬─────────┬───────┐
\& │ Pokemon    │ Type    │ Count │
\& ╞════════════╪═════════╪═══════╡
\& │ Abra       │ Psychic │     5 │
\& ├────────────┼─────────┼───────┤
\& │ Ekans      │ Poison  │   123 │
\& ├────────────┼─────────┼───────┤
\& │ Feraligatr │ Water   │  5678 │
\& └────────────┴─────────┴───────┘
.Ve
.PP
You can use this with the other styles,
but I'm not sure you'd want to.
.PP
If you just want columnar output,
use the \f(CW\*(C`norule\*(C'\fR style:
.PP
.Vb 1
\& generate_table( ... , style => \*(Aqnorule\*(Aq );
.Ve
.PP
which results in:
.PP
.Vb 1
\&  Pokemon      Type      Count
\&  
\&  Abra         Psychic       5
\&  Ekans        Poison      123
\&  Feraligatr   Water      5678
.Ve
.PP
Note that everywhere you saw a line on the previous tables,
there will be a space character in this version.
So you may want to combine the \f(CW\*(C`top_and_tail\*(C'\fR option,
to suppress the extra blank lines before and after
the body of the table.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
My blog post <http://neilb.org/2019/08/06/text-table-tiny-changes.html>
where I described changes to formatting;
this has more examples.
.PP
There are many modules for formatting text tables on \s-1CPAN.
A\s0 good number of them are listed in the
See Also <https://metacpan.org/pod/Text::Table::Manifold#See-Also>
section of the documentation for Text::Table::Manifold.
.SH "REPOSITORY"
.IX Header "REPOSITORY"
<https://github.com/neilb/Text\-Table\-Tiny>
.SH "AUTHOR"
.IX Header "AUTHOR"
Neil Bowers <neilb@cpan.org>
.PP
The original version was written by Creighton Higgins <chiggins@chiggins.com>,
but the module was entirely rewritten for 0.05_01.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Neil Bowers.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
