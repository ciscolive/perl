.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DTC::Server 3"
.TH Infoblox::DTC::Server 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DTC::Server \- A DTC Server object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1DTC\s0 Server object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 12
\& my $server = Infoblox::DTC::Server\->new(
\&    name                    => $string,                                                               #Required
\&    host                    => $string,                                                               #Reqiured
\&    auto_create_host_record => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                                      #Optional Default is \*(Aqfalse\*(Aq
\&    comment                 => $string,                                                               #Optional / Default is undefined
\&    disable                 => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                                      #Optional / Default is \*(Aqfalse\*(Aq
\&    sni_hostname            => $fqdn,                                                                 #Optional / Default is undefined
\&    override_sni_hostname   => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                                      #Optional / Default is \*(Aqfalse\*(Aq
\&    monitors                => [$dtc_server_monitor1, $dtc_server_monitor2, ...],                     #Optional / Default is empty list
\&    extattrs                => { $string => $extattr, ... },                                          #Optional / Default is undefined
\&    extensible_attributes   => { $string => $string | $num, $string => [ $string | $num, ... ], ... } #Optional / Default is undefined
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in a Session module that you can apply to a \s-1DTC\s0 Server object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #construct an object
\& my $server = Infoblox::DTC::Server\->new(
\&    name  => \*(Aqserver1\*(Aq,
\&    host  => \*(Aq192.168.1.2\*(Aq,
\& );
\&
\& #submit for addition
\& my $response = $session\->add($server);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attribute to get a specific object:
\&
\&  name                  \- Optional. A DTC Server name in a string format.
\&  host                  \- Optional. A DTC Server host address or FQDN.
\&  comment               \- Optional. A DTC Server comment.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference that contains extensible attributes.
\&  pool                  \- Optional. A DTC Pool which is linked with a DTC Server.
\&  status_member         \- Optional. A member that provides the object health status. The default is Grid.
\&  sni_hostname          \- Optional. A hostname for Server Network Indication (SNI) to be used with the HTTPS monitor.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DTC::Server\*(Aq,
\&     name   => \*(Aqserver1\*(Aq,
\&     host   => \*(Aq192.168.1.2\*(Aq
\& );
\&
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DTC::Server\*(Aq,
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the comment.
\& $server\->comment(\*(Aqthis is a modified comment\*(Aq);
\& #Submit modification
\& my $response = $session\->modify($server);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DTC::Server\*(Aq,
\&     name   => \*(Aqserver1\*(Aq,
\& );
\& #Find the desired object from the retrieved list.
\& my $desired_server = $retrieved_objs[0];
\& #Submit for removal
\& my $response = $session\->remove($desired_server);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attribute to get a specific object:
\&
\&  name                  \- Optional. A DTC Server name in a string format.
\&  host                  \- Optional. A DTC Server host address or FQDN.
\&  comment               \- Optional. A DTC Server comment.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference that contains extensible attributes.
\&  pool                  \- Optional. A DTC Pool which is linked with a DTC Server.
\&  status_member         \- Optional. A member that provides the object health status. The default is Grid.
\&  sni_hostname          \- Optional. A hostname for Server Network Indication (SNI) to be used with the HTTPS monitor.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DTC::Server\*(Aq,
\&     name   => \*(Aqserver1\*(Aq,
\&     host   => \*(Aq192.168.1.2\*(Aq
\& );
\&
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DTC::Server\*(Aq,
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of the object.
.SS "auto_create_host_record( )"
.IX Subsection "auto_create_host_record( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the generation of resource records that represents the host is allowed or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to allow host record generation and 'false' to forbid it. The default value is 'true'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get auto_create_host_record value
\& my $auto_create_host_record = $server\->auto_create_host_record();
\&
\& #modify auto_create_host_record value
\& $server\->auto_create_host_record(\*(Aqfalse\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a comment in string format (\s-1UTF\-8\s0) with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get comment value
\& my $comment = $server\->comment();
\&
\& #modify comment value
\& $server\->comment(\*(Aqdesired comment\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to enable or disable a \s-1DTC\s0 Server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to disable a \s-1DTC\s0 Server or 'false' to enable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get disable value
\& my $disable = $server\->disable();
\&
\& #modify disable value
\& $server\->disable(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DTC\s0 Server object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values (Infoblox::Grid::Extattr objects).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get extattrs value
\& my $ref_extattrs = $server\->extattrs();
\&
\& #Modify extattrs
\& $server\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DTC\s0 Server object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get extensible attributes
\& my $ref_extensible_attributes = $server\->extensible_attributes();
\&
\& #Modify extensible attributes
\& $server\->extensible_attributes({\*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [\*(AqPeter\*(Aq, \*(AqTom\*(Aq]});
.Ve
.RE
.RS 4
.RE
.SS "health( )"
.IX Subsection "health( )"
.RS 4
Use this method to retrieve a \s-1DTC\s0 Server health information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::DTC::Health object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get health value
\& my $health = $server\->health();
.Ve
.RE
.RS 4
.RE
.SS "host( )"
.IX Subsection "host( )"
.RS 4
Use this method to set or retrieve an address or \s-1FQDN\s0 of a \s-1DTC\s0 Server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string containing an address or \s-1FQDN\s0 of a \s-1DTC\s0 server.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get host value
\& my $host = $server\->host();
\&
\& #modify host value
\& $server\->host(\*(Aq192.168.1.2\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "monitors( )"
.IX Subsection "monitors( )"
.RS 4
Use this method to set or retrieve the list of \s-1DTC\s0 health monitors for the \s-1DTC\s0 Server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
\&\fBParameters\fR
.Sp
The valid value is an array reference that contains Infoblox::DTC::Server::Monitor objects.
.Sp
\&\fBReturns\fR
.Sp
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.Sp
\&\fBExample\fR
.Sp
.Vb 2
\& #get monitors value
\& my $monitors = $server\->monitors();
\&
\& #retrieve TCP monitor
\& my $tcp_monitor = $session\->get(
\&     object => \*(AqInfoblox::DTC::Monitor::TCP\*(Aq,
\&     name   => \*(Aqtcp_monitor\*(Aq,
\& );
\&
\& #construct DTC server monitor
\& my $monitor = Infoblox::DTC::Server::Monitor\->new(
\&     monitor => $tcp_monitor,
\&     host    => \*(Aq192.168.1.10\*(Aq,
\& );
\&
\& #modify monitors value
\& $server\->monitors([$monitor]);
.Ve
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the \s-1DTC\s0 Server name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired name in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get name value
\& my $name = $server\->name();
\&
\& #modify name value
\& $server\->name(\*(Aqserver_name\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "sni_hostname( )"
.IX Subsection "sni_hostname( )"
.RS 4
Use this method to set or retrieve the hostname for Server Network Indication (\s-1SNI\s0) to be used with the \s-1HTTPS\s0 monitor.
.Sp
Setting this method to a defined value implicitly sets the override_sni_hostname method to 'true'. Setting the parameter to undefined causes the \s-1HTTPS\s0 monitor to use \s-1DTC\s0 server's hostname with \s-1SNI\s0 option and automatically resets the override_sni_hostname method to 'false'.
.Sp
Note that when sni_hostname is set to a defined value and override_sni_hostname is set to 'false', the last operation takes precedence.
Thus the sequence \f(CW$object\fR\->sni_hostname('sni\-host.infoblox.localdomain'); \f(CW$object\fR\->override_sni_hostname('false'); will set override_sni_hostname to 'false',
and the sequence \f(CW$object\fR\->override_sni_hostname('false'); \f(CW$object\fR\->sni_hostname('sni\-host.infoblox.localdomain'); will result in override_sni_hostname='true'.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is the \s-1FQDN\s0 for the desired host in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get sni_hostname value
\& my $sni_hostname = $server\->sni_hostname();
\&
\& #modify sni_hostname value
\& $server\->sni_hostname(\*(Aqsni\-host.infoblox.localdomain\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_sni_hostname( )"
.IX Subsection "override_sni_hostname( )"
.RS 4
The override_sni_hostname attribute controls whether the sni_hostname method values of the \s-1DTC\s0 server are used, instead of the \s-1DTC\s0 server name.
.Sp
The override_sni_hostname attribute can be specified explicitly. It is also set implicitly when sni_hostname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to 'true' to allow usage of the sni_hostname. Set the parameter to 'false' to use the \s-1DTC\s0 server name with the \s-1SNI\s0 option.
.Sp
The default value of this parameter is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get override_sni_hostname value
\& my $override_sni_hostname = $server\->override_sni_hostname();
\&
\& #Modify override_sni_hostname value
\& $server\->override_sni_hostname(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Grid::Extattr, Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values, Infoblox::DTC::Health.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 398:" 4
.IX Item "Around line 398:"
You can't have =items (as at line 404) unless the first thing after the =over is an =item
.IP "Around line 436:" 4
.IX Item "Around line 436:"
=back without =over
