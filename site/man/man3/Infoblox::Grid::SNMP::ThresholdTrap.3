.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::SNMP::ThresholdTrap 3"
.TH Infoblox::Grid::SNMP::ThresholdTrap 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::SNMP::ThresholdTrap  \- Threshold Trap object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Grid \s-1SNMP\s0 ThresholdTrap object is used to set the values of the thresholds of the \s-1SNMP\s0 traps.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
Use the following attributes to construct an Infoblox::Grid::SNMP::ThresholdTrap object.
.PP
.Vb 5
\& my $threshold_trap = Infoblox::Grid::SNMP::ThresholdTrap\->new(
\&    trap_type       =>   $string,     #Required
\&    trap_reset      =>   $uint,       #Optional
\&    trap_trigger    =>   $uint,       #Optional
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
This section describes all the methods in the other modules that can be applied to a Threshold Trap object.
.SS "Infoblox::Grid\->threshold_traps( )"
.IX Subsection "Infoblox::Grid->threshold_traps( )"
.RS 4
Use this function to specify threshold traps at the grid level. See
Infoblox::Grid\->\fBthreshold_traps()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Get threshold traps
\& my $threshold_traps = $grid\->threshold_traps();
\& #Modify threshold traps
\& my $threshold_traps = $grid\->threshold_traps();
\& foreach(@$threshold_traps){if $_\->trap_name() eq \*(AqRootfs\*(Aq; $_\->trap_reset=60;} #Change value for \*(AqRootfs\*(Aq trap
\& $grid\->threshold_traps($threshold_traps);
\& $session\->modify($grid);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member\->threshold_traps( )"
.IX Subsection "Infoblox::Grid::Member->threshold_traps( )"
.RS 4
Use this function to specify threshold traps at the member level. See Infoblox::Grid::Member\->\fBthreshold_traps()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Get threshold traps
\& my $threshold_traps = $member\->threshold_traps();
\& #Modify threshold traps
\& my $threshold_traps = $member\->threshold_traps();
\& foreach(@$threshold_traps){if $_\->trap_name() eq \*(AqRootfs\*(Aq; $_\->trap_reset=60;} #Change value for \*(AqRootfs\*(Aq trap
\& $grid\->threshold_traps($threshold_traps);
\& $session\->modify($member);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to retrieve the attribute values of a Threshold Trap object.
.SS "trap_reset( )"
.IX Subsection "trap_reset( )"
.RS 4
Use this method to specify the threshold value to reset the trap.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The trap_reset parameter is a positive integer. The default value depends on the trap_type.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the trap reset value
\& my $trap_reset = $threshold_trap\->trap_reset();
\& #Set the trap reset value
\& $threshold_trap\->trap_reset();
.Ve
.RE
.RS 4
.RE
.SS "trap_trigger( )"
.IX Subsection "trap_trigger( )"
.RS 4
Use this method to specify the threshold value to trigger the trap. The default value depends on the trap_type.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The trap_trigger parameter is a positive integer. The default value depends on the trap_type.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the trap trigger
\& my $trap_trigger = $threshold_trap\->trap_trigger();
\& #Set the trap trigger
\& $threshold_trap\->trap_trigger();
.Ve
.RE
.RS 4
.RE
.SS "trap_type( )"
.IX Subsection "trap_type( )"
.RS 4
Use this method to get the type of a given trap.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
String that contains the trap type.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the trap type
\& my $trap_type = $threshold_trap\->trap_type();
\& #Set the trap type
\& $threshold_trap\->trap_type();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the session methods of a Threshold Trap object.
.PP
\&\fB#Preparation prior to getting and modifying a grid member object\fR
.PP
.Vb 2
\&  use strict;
\&  use Infoblox;
\&
\&  my $session = Infoblox::Session\->new(
\&             master   => "192.168.2.1",
\&             username => "admin",
\&             password => "infoblox"
\&  );
\&
\&  unless ($session) {
\&     die("Session construction failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\&  }
\&  print "Session created successfully\en";
.Ve
.PP
\&\fB#Getting the grid level trap list from appliance through session\fR
.PP
.Vb 10
\&  #Getting the Grid object
\&  my @result = $session\->get(
\&     object => "Infoblox::Grid",
\&     name   => "Infoblox"
\&     ); my $grid = $result[0];
\&  unless ($grid) {
\&        die("Get Grid object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Get Grid object found at least 1 matching entry\en";
\&
\&  #Extracting threshold traps
\&  my $ref_threshold_traps = $grid\->threshold_traps();
\&  unless($ref_threshold_traps && ref($ref_threshold_traps) eq \*(AqARRAY\*(Aq ){
\&      die("Get threshold traps list failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  my @current_threshold_traps = @$ref_threshold_traps;
.Ve
.PP
\&\fB#Modify threshold traps list\fR
.PP
.Vb 10
\&  #Delete some traps from the list
\&  my @new_list = grep {$_\->trap_type() ne "NetworkCapacity" && $_\->trap_type() ne "Rootfs" } @current_threshold_traps;
\&  #Create new "Rootfs" threshold trap
\&  my $new_rootfs_trap = Infoblox::Grid::SNMP::ThresholdTrap\->new(
\&       trap_type => "Rootfs",
\&       trap_trigger => 95,
\&       trap_reset => 80,
\&   );
\&  unless($new_rootfs_trap){
\&      die("Creating new threshold trap failed: ",
\&          Infoblox::status_code() . ":" . Infoblox::status_detail());
\&  }
\&  push @new_list, $new_rootfs_trap;
\&  #Modify grid object
\&  unless($grid\->threshold_traps(\e@new_list)){
\&      die("Modifying threshold traps failed: ",
\&          Infoblox::status_code() . ":" . Infoblox::status_detail());
\&  }
\&B<#Update Grid object through the Infoblox session.>
\&  $session\->modify($grid)
\&             or die("modify Grid object failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&        print "Modified threshold traps of Grid object successful\en";
.Ve
.PP
\&\fB#Restore the old threshold traps\fR
.PP
.Vb 5
\&  #Apply changes to the Grid object to Un\-def SNMP Admin object.
\&  $grid\->threshold_traps(\e@current_threshold_traps);  #Update Grid object through the Infoblox session.
\&  $session\->modify($grid)
\&             or die("Restore threshold traps for Grid object failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&
\&        print "Restored Grid object successful\en";
\&
\&        ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
