.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Notification::REST::Template 3"
.TH Infoblox::Notification::REST::Template 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Notification::REST::Template \- REST API template object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1REST API\s0 template object used to define particular template configuration.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 6
\& my $templ = Infoblox::Notification::REST::Template\->new(
\&     name          => $string,        #Required
\&     content       => $string,        #Required
\&     comment       => $string,        #Optional / Default is undefined
\&     outbound_type => \*(AqREST\*(Aq | \*(AqDXL\*(Aq, #Optional / Default is \*(AqREST\*(Aq
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a \s-1REST API\s0 template object.
.PP
Note that template object does not support 'add' method. Use Infoblox::Session\->\fBimport_data()\fR of a 'restapi_template' type instead.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance.
See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific REST API template object:
\&
\&  comment       \- Optional. The REST API template comment in string format.
\&  name          \- Optional. The REST API template name in string format.
\&  action_name   \- Optional. The REST API template action name in string format.
\&  outbound_type \- Optional. The template type.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::Notification::REST::Template\*(Aq,
\&     name   => \*(Aqtemplate1\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify the object in the Infoblox appliance.
See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Modify comment value
\& $object\->comment(\*(Aqthis is a modified comment\*(Aq);
\&
\& #Submit modification
\& my $response = $session\->modify($object);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove the object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific \s-1REST API\s0 template object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Get the objects
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::Notification::REST::Template\*(Aq,
\&     name   => \*(Aqtemplate1\*(Aq,
\& );
\&
\& #Find the desired object from the retrieved list
\& my $desired_object = $retrieved_objs[0];
\&
\& #Submit for removal
\& my $response = $session\->remove($desired_object);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for the REST API template object:
\&
\&  comment       \- Optional. The REST API template comment in string format (regexp).
\&  name          \- Optional. The REST API template name in string format (regexp).
\&  action_name   \- Optional. The REST API template action name in string format (regexp).
\&  outbound_type \- Optional. The template type.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\& # search for objects
\& my @retrieved_objs = $session\->search(
\&     object => \*(AqInfoblox::Notification::REST::Template\*(Aq,
\&     name   => \*(Aqtempl.*\*(Aq,
\&);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a \s-1REST API\s0 template instance object.
.SS "action_name( )"
.IX Subsection "action_name( )"
.RS 4
Use this method to retrieve the template action name. This is a read-only attribute.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get action_name value
\& my $action_name = $object\->action_name();
.Ve
.RE
.RS 4
.RE
.SS "added_on( )"
.IX Subsection "added_on( )"
.RS 4
Use this method to retrieve the timestamp the template was added. This is a read-only attribute.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value, the number of seconds that have elapsed since January 1st, 1970.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get added_on value
\& my $added_on = $object\->added_on();
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired comment in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you have specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get comment value
\& my $comment = $object\->comment();
\&
\& #Modify comment value
\& $object\->comment(\*(Aqnew comment\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "content( )"
.IX Subsection "content( )"
.RS 4
Use this method to set or retrieve the template content.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an well formed \s-1JSON\s0 string.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you have specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get content value
\& my $content = $object\->content();
\&
\& #Modify content value
\& $object\->content($content);
.Ve
.RE
.RS 4
.RE
.SS "event_type( )"
.IX Subsection "event_type( )"
.RS 4
Use this method to retrieve the template event type. This is a read-only attribute.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get event_type value
\& my $event_type = $object\->event_type();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the template name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you have specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name value
\& my $name = $object\->name();
\&
\& #Modify name value
\& $object\->name(\*(Aqnew_name\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "outbound_type( )"
.IX Subsection "outbound_type( )"
.RS 4
Use this method to set or retrieve the outbound type for the template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is '\s-1REST\s0' or '\s-1DXL\s0'. The default value is '\s-1REST\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you have specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get outbound_type value
\& my $outbound_type = $object\->outbound_type();
\&
\& #Modify outbound_type value
\& $object\->outbound_type(\*(AqDXL\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "template_type( )"
.IX Subsection "template_type( )"
.RS 4
Use this method to retrieve the template type. This is a read-only attribute.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get template_type value
\& my $template_type = $object\->template_type();
.Ve
.RE
.RS 4
.RE
.SS "vendor_identifier( )"
.IX Subsection "vendor_identifier( )"
.RS 4
Use this method to retrieve the template vendor identifier. This is a read-only attribute.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get vendor_identifier value
\& my $vendor_identifier = $object\->vendor_identifier();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,
Infoblox::Session\->\fBget()\fR,
Infoblox::Session\->\fBmodify()\fR,
Infoblox::Session\->\fBremove()\fR,
Infoblox::Session\->\fBsearch()\fR,
Infoblox::Session\->\fBimport_data()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
