.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Selenium::Firefox 3"
.TH Selenium::Firefox 3 "2020-10-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Selenium::Firefox \- Use FirefoxDriver without a Selenium server
.SH "VERSION"
.IX Header "VERSION"
version 1.38
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # These two are the same, and will only work with Firefox 48+
\&    my $driver = Selenium::Firefox\->new;
\&    $driver = Selenium::Firefox\->new( marionette_enabled => 1 );
\&
\&    #Do stuff...
\&
\&    $driver\->shutdown_binary;
\&
\&    # For Firefox 47 and older, disable marionette:
\&    $driver = Selenium::Firefox\->new( marionette_enabled => 0 );
\&    $driver\->shutdown_binary;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBBreaking Changes:\fR There are breaking changes in v1.0+ of this
module if you're using it to start \s-1FF47\s0; please see \*(L"\s-1BREAKING
CHANGES\*(R"\s0. You can ignore this if you're using v1.0+ of this module to
start \s-1FF48.\s0
.PP
This class allows you to use the FirefoxDriver without needing the \s-1JRE\s0
or a selenium server running. Unlike starting up an instance of
S::R::D, do not pass the \f(CW\*(C`remote_server_addr\*(C'\fR and \f(CW\*(C`port\*(C'\fR arguments,
and we will search for the Firefox executable in your \f(CW$PATH\fR. We'll
try to start the binary, connect to it, and shut it down at the end of
the test.
.PP
If the Firefox application is not found in the expected places, we'll
fall back to the default Selenium::Remote::Driver behavior of
assuming defaults of 127.0.0.1:4444 after waiting a few seconds.
.PP
If you specify a remote server address, or a port, our assumption is
that you are doing standard S::R::D behavior and we will not attempt
any binary startup.
.PP
If you're curious whether your Selenium::Firefox instance is using a
separate Firefox binary, or through the selenium server, you can check
the value of the \f(CW\*(C`binary_mode\*(C'\fR attr after instantiation.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "binary"
.IX Subsection "binary"
Optional: specify the path to the \f(CW\*(C`geckodriver\*(C'\fR binary \- this is \s-1NOT\s0
the path to the Firefox browser. To specify the path to your Firefox
browser binary, see the \*(L"firefox_binary\*(R" attr.
.PP
For Firefox 48 and greater, this is the path to your \f(CW\*(C`geckodriver\*(C'\fR
executable. If you don't specify anything, we'll search for
\&\f(CW\*(C`geckodriver\*(C'\fR in your \f(CW$PATH\fR.
.PP
For Firefox 47 and older, this attribute does not apply, because the
older \s-1FF\s0 browsers do not use the separate driver binary startup.
.SS "binary_port"
.IX Subsection "binary_port"
Optional: specify the port that we should bind to. If you don't
specify anything, we'll default to the driver's default port. Since
there's no a priori guarantee that this will be an open port, this is
_not_ necessarily the port that we end up using \- if the port here is
already bound, we'll search above it until we find an open one.
.PP
See \*(L"port\*(R" in Selenium::CanStartBinary for more details, and
\&\*(L"port\*(R" in Selenium::Remote::Driver after instantiation to see what the
actual port turned out to be.
.SS "firefox_profile"
.IX Subsection "firefox_profile"
Optional: Pass in an instance of Selenium::Firefox::Profile
pre-configured as you please. The preferences you specify will be
merged with the ones necessary for setting up webdriver, and as a
result some options may be overwritten or ignored.
.PP
.Vb 4
\&    my $profile = Selenium::Firefox::Profile\->new;
\&    my $firefox = Selenium::Firefox\->new(
\&        firefox_profile => $profile
\&    );
.Ve
.SS "marionette_binary_port"
.IX Subsection "marionette_binary_port"
Optional: specify the port that we should bind marionette to. If you don't
specify anything, we'll default to the marionette's default port. Since
there's no a priori guarantee that this will be an open port, this is
_not_ necessarily the port that we end up using \- if the port here is
already bound, we'll search above it until we find an open one.
.PP
.Vb 4
\&    Selenium::Firefox\->new(
\&        marionette_enabled     => 1,
\&        marionette_binary_port => 12345,
\&    );
.Ve
.PP
Attempting to specify a \f(CW\*(C`marionette_binary_port\*(C'\fR in conjunction with
setting \f(CW\*(C`marionette_enabled\*(C'\fR does not make sense and will most likely
not do anything useful.
.SS "marionette_enabled"
.IX Subsection "marionette_enabled"
Optional: specify whether
marionette <https://developer.mozilla.org/en-US/docs/Mozilla/QA/Marionette>
should be enabled or not. By default, marionette is enabled, which
assumes you are running with Firefox 48 or newer. To use this module to
start Firefox 47 or older, you must pass \f(CW\*(C`marionette_enabled => 0\*(C'\fR.
.PP
.Vb 2
\&    my $ff48 = Selenium::Firefox\->new( marionette_enabled => 1 ); # defaults to 1
\&    my $ff47 = Selenium::Firefox\->new( marionette_enabled => 0 );
.Ve
.SS "firefox_binary"
.IX Subsection "firefox_binary"
Optional: specify the path to the Firefox browser executable. Although
we will attempt to locate this in your \f(CW$PATH\fR, you may specify it
explicitly here. Note that path here must point to a file that exists
and is executable, or we will croak.
.PP
For Firefox 48 and newer, this will be passed to \f(CW\*(C`geckodriver\*(C'\fR such
that it will attempt to start up the Firefox at the specified path. If
you do not specify anything, we will look for the Firefox browser on
our own in the normal places, but if the browser cannot be found,
we'll probably \f(CW\*(C`die\*(C'\fR during instantiation.
.PP
For Firefox 47 and older, this browser path should be the file that we
directly start up.
.SS "custom_args"
.IX Subsection "custom_args"
Optional: specify any additional command line arguments you'd like
invoked during the binary startup. See
\&\*(L"custom_args\*(R" in Selenium::CanStartBinary for more information.
.PP
For Firefox 48 and newer, these arguments will be passed to
geckodriver during start up.
.PP
For Firefox 47 and older, these arguments will be passed to the
Firefox browser during start up.
.SS "startup_timeout"
.IX Subsection "startup_timeout"
Optional: specify how long to wait for the binary to start itself and
listen on its port. The default duration is arbitrarily 10 seconds. It
accepts an integer number of seconds to wait: the following will wait
up to 20 seconds:
.PP
.Vb 1
\&    Selenium::Firefox\->new( startup_timeout => 20 );
.Ve
.PP
See \*(L"startup_timeout\*(R" in Selenium::CanStartBinary for more information.
.SS "fixed_ports"
.IX Subsection "fixed_ports"
Optional: Throw instead of searching for additional ports; see
\&\*(L"fixed_ports\*(R" in Selenium::CanStartBinary for more info.
.SH "METHODS"
.IX Header "METHODS"
.SS "shutdown_binary"
.IX Subsection "shutdown_binary"
Call this method instead of \*(L"quit\*(R" in Selenium::Remote::Driver to ensure
that the binary executable is also closed, instead of simply closing
the browser itself. If the browser is still around, it will call
\&\f(CW\*(C`quit\*(C'\fR for you. After that, it will try to shutdown the browser
binary by making a \s-1GET\s0 to /shutdown and on Windows, it will attempt to
do a \f(CW\*(C`taskkill\*(C'\fR on the binary \s-1CMD\s0 window.
.PP
.Vb 1
\&    $self\->shutdown_binary;
.Ve
.PP
It doesn't take any arguments, and it doesn't return anything.
.PP
We do our best to call this when the \f(CW$driver\fR option goes out of
scope, but if that happens during global destruction, there's nothing
we can do.
.SH "BREAKING CHANGES"
.IX Header "BREAKING CHANGES"
In version v1.0+ and newer, the default behavior is to enable
marionette & geckodriver mode. This means that an existing script that
works with v0.2701 and Firefox v47 will require modification if you
upgrade Selenium::Firefox to v1.0+. That is,
.PP
.Vb 5
\&    # v0.2701 of Selenium::Firefox works with FF47 like such; this will not
\&    # work for FF47 after upgrade:
\&    my $fx47_old = Selenium::Firefox\->new;
\&    ...
\&    $fx47_old\->shutdown_binary;
\&
\&    # v1.0 of Selenium::Firefox works with FF47 like this
\&    my $fx47_new = Selenium::Firefox\->new( marionette_enabled => 0);
\&    ...
\&    $fx47_new\->shutdown_binary;
.Ve
.PP
We default to assuming \s-1FF48\s0 and geckodriver mode because all
forthcoming versions of the Firefox browser will be using the
geckodriver architecture, and also because that's consistent with the
rest of the driver setups, which all have separate driver binaries
apart from the browser itself. This means that:
.PP
.Vb 1
\&    # v0.2701 of Selenium::Firefox cannot start up FF48 at all
\&
\&    # v1.0+ of Selenium::Firefox works with FF48+ like this:
\&    my $fx48 = Selenium::Firefox\->new;
.Ve
.PP
As with the other drivers, Selenium::Firefox in marionette/geckodriver
mode requires a \f(CW\*(C`geckodriver\*(C'\fR executable in the path or provided
during startup, and it will also attempt to find the path to your
Firefox browser. During testing, we found that it was necessary for us
to pass the Firefox browser file path to the \f(CW\*(C`geckodriver\*(C'\fR executable
during start up, or else \f(CW\*(C`geckodriver\*(C'\fR would have trouble finding
Firefox.
.SS "get_context"
.IX Subsection "get_context"
.Vb 4
\& Description:
\&    Firefox extension: Retrieve browser\*(Aqs scope (chrome or content).
\&    Chrome is a privileged scope where you can access things like the
\&    Firefox UI itself. Content scope is where things like webpages live.
\&
\& Output:
\&    STRING \- context {CHROME|CONTENT}
\&
\& Usage:
\&    print $firefox_driver\->get_context();
.Ve
.SS "set_context"
.IX Subsection "set_context"
.Vb 4
\& Description:
\&    Firefox extension: Set browser\*(Aqs scope (chrome or content).
\&    Chrome is a privileged scope where you can access things like the
\&    Firefox UI itself. Content scope is where things like webpages live.
\&
\& Input:
\&    Required:
\&        <STRING> \- context {CHROME|CONTENT}
\&
\& Usage:
\&    $firefox_driver\->set_context( $context );
\&
\& Output:
\&    BOOLEAN \- success or failure
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see those modules/websites for more information related to this module.
.IP "\(bu" 4
Selenium::Remote::Driver
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
<https://github.com/teodesian/Selenium\-Remote\-Driver/issues>
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH "AUTHORS"
.IX Header "AUTHORS"
Current Maintainers:
.IP "\(bu" 4
Daniel Gempesaw <gempesaw@gmail.com>
.IP "\(bu" 4
Emmanuel Peroumalnaïk <peroumalnaik.emmanuel@gmail.com>
.PP
Previous maintainers:
.IP "\(bu" 4
Luke Closs <cpan@5thplane.com>
.IP "\(bu" 4
Mark Stosberg <mark@stosberg.com>
.PP
Original authors:
.IP "\(bu" 4
Aditya Ivaturi <ivaturi@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2010\-2011 Aditya Ivaturi, Gordon Child
.PP
Copyright (c) 2014\-2017 Daniel Gempesaw
.PP
Licensed under the Apache License, Version 2.0 (the \*(L"License\*(R");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
.PP
http://www.apache.org/licenses/LICENSE\-2.0
.PP
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \*(L"\s-1AS IS\*(R" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\s0 either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
