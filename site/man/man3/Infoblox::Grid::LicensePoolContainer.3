.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::LicensePoolContainer 3"
.TH Infoblox::Grid::LicensePoolContainer 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::LicensePoolContainer \- License Pool Container object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
License Pool Container is the list of all license pools existing for a Grid.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::Grid::LicensePoolContainer object is a read-only object and does not require manual construction.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a License Pool Container object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $retrieved_objs = $session\->get(object => "Infoblox::Grid::LicensePoolContainer");
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of a License Pool Container object.
.SS "lpc_uid( )"
.IX Subsection "lpc_uid( )"
.RS 4
Use this method to retrieve the world-wide unique \s-1ID\s0 for the license pool container. This attribute is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the unique ID for the license pool container
\& my $lpc_uid = $license_pool_container\->lpc_uid();
.Ve
.RE
.RS 4
.RE
.SS "last_entitlement_update( )"
.IX Subsection "last_entitlement_update( )"
.RS 4
Use this method to retrieve the timestamp of the last entitlement pool update. This attribute is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the last entitlement pool update
\& my $last_entitlement_update = $license_pool_container\->last_entitlement_update();
.Ve
.RE
.RS 4
.RE
.SS "update_licenses( )"
.IX Subsection "update_licenses( )"
.RS 4
Use this method to upload new license file.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
\&\*(L"path\*(R"            \- Required. Path to the signed file with static/dynamic licenses to upload.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
None.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& $license_pool_container\->update_licenses(path => $path_to_license);
.Ve
.RE
.RS 4
.RE
.SS "allocate_licenses( )"
.IX Subsection "allocate_licenses( )"
.RS 4
Use this method to allocate dynamic licenses to a node.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
\&\*(L"hwid\*(R"            \- Required. The hardware \s-1ID\s0 of a physical node to install dynamic licenses to.
.Sp
\&\*(L"license_pools\*(R"   \- Required. The license pools from which you allocate dynamic licenses. An array containing Infoblox::Grid::LicensePool objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
None.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& $license_pool_container\->allocate_licenses(hwid => $hwid,
\&                                            license_pools => [$licence_pool1, $licence_pool2]);
.Ve
.RE
.RS 4
.RE
.SS "download_pool_status( )"
.IX Subsection "download_pool_status( )"
.RS 4
Use this method to to download signed file with static licenses/license pools.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
\&\*(L"path\*(R"            \- The path to the file with licenses to download.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& $hash_with_path = $license_pool_container\->download_pool_status();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to a License Pool object. This sample code also includes error handling for the operations.
.PP
\&\fB#Preparation prior License Pool Container fetching\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox device
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\&
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Fetching the License Pool Container objects\fR
.PP
.Vb 1
\& my $retrieved_objs=$session\->get(object=> "Infoblox::Grid::LicensePoolContainer");
\&
\& unless($retrieved_objs) {
\&     die("Getting the license pool container failed:",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Got the license pool container successfully\en";
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Grid::LicensePool
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
