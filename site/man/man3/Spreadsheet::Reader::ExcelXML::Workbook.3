.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::ExcelXML::Workbook 3"
.TH Spreadsheet::Reader::ExcelXML::Workbook 3 "2017-04-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::ExcelXML::Workbook \- Complicated self referential worbook class
.SH "DESCRIPTION (TL;DR)"
.IX Header "DESCRIPTION (TL;DR)"
Don't use this module by itself.  Because it has a bit of twisty self referencing, it won't
garbage collect <http://www.perlmonks.org/?node_id=1156896> the way you expect unless you
use Spreadsheet::Reader::ExcelXML to manage the garbage collection.  From a practical
standpoint the necessary end user attributes and methods in this code can be effectivly used
against Spreadsheet::Reader::ExcelXML.  Thanks Moose for making that easy
\&.  As a consequence all the end user methods
and attributes contained in this module are documented in Spreadsheet::Reader::ExcelXML
instead.  (the down side is the raw code and the documentation are two different files)
.SS "Methods"
.IX Subsection "Methods"
There are a few methods exported by this class that are not meant to be used by the end user
of the package but will still be delegated to Spreadsheet::Reader::ExcelXML in order to
handle the twisty self referencing.  As a consequence they will be documented here.  (and not
there)
.PP
\fIbuild_workbook( \f(CI$file\fI )\fR
.IX Subsection "build_workbook( $file )"
.Sp
.RS 4
\&\fBDefinition:\fR If the passed \f(CW$file\fR is not a file handle it will store the value for
retrieval by \*(L"file_name\*(R" in Spreadsheet::Reader::ExcelXML later.  It will then coerce
the \f(CW$file\fR into a file handle.  At that point it will reset the whole workbook and extract
the meta data from the workbook file in preparation for reading the sheets.
.Sp
\&\fBAccepts:\fR \f(CW$file\fR which can either be a full file path string or a file handle
.Sp
\&\fBReturns:\fR a built and ready to use Spreadsheet::Reader::ExcelXML::Workbook instance
or undef on fail.  It does not return a Spreadsheet::Reader::Excel object even when
called as an exported method in Spreadsheet::Reader::Excel.  (Part of the twisty
nature of this class)
.RE
.PP
\fIdemolish_the_workbook\fR
.IX Subsection "demolish_the_workbook"
.Sp
.RS 4
\&\fBDefinition:\fR Perl would normally delay garbage cleanup for this class until the script
exits since this has twisty self references.  In order to allow the class to close and
clear when it goes out of scope Spreadsheet::Reader::ExcelXML has to manually clear
this class when it goes out of scope.  This is the method it uses to do that.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR nothing but all the self referencing attributes in the instance are cleared
allowing perl garbage collection to work when the Spreadsheet::Reader::ExcelXML
instance goes out of scope. (after this method is called)
.RE
.PP
\fIhas_shared_strings_interface\fR
.IX Subsection "has_shared_strings_interface"
.Sp
.RS 4
\&\fBDefinition:\fR Indicates if a shared_strings_interface file was loaded and is available for
content extraction
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR true if the interface is stored
.RE
.PP
\fIget_shared_string\fR
.IX Subsection "get_shared_string"
.PP
Delegated from \*(L"get_shared_string( \f(CW$positive_int\fR|$name )\*(R" in Spreadsheet::Reader::ExcelXML::SharedStrings
.PP
\fIhas_styles_interface\fR
.IX Subsection "has_styles_interface"
.Sp
.RS 4
\&\fBDefinition:\fR Indicates if a styles_interface file was loaded and is available for
content extraction
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR true if the interface is stored
.RE
.PP
\fIget_format\fR
.IX Subsection "get_format"
.PP
Delegated from \*(L"get_format( ($position|$name), [$header], [$exclude_header] )\*(R" in Spreadsheet::Reader::ExcelXML::SharedStrings
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::Reader::ExcelXML/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing currently
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
\&\fBSpreadsheet::Reader::ExcelXML\fR \- 2003 xml style and 2007+ (.xlsx) excel sheet reader
.Sp
\&\fBSpreadsheet::Reader::ExcelXML::Worksheet\fR \- Worksheet level interface
.Sp
\&\fBSpreadsheet::Reader::ExcelXML::Cell\fR \- Cell level interface
.Sp
Archive::Zip \- 1.30
.Sp
Carp \- confess longmess
.Sp
Clone \- clone
.Sp
Data::Dumper
.Sp
FileHandle
.Sp
IO::File
.Sp
IO::Handle
.Sp
Modern::Perl \- 1.20150127
.Sp
Moose
.Sp
MooseX::StrictConstructor
.Sp
MooseX::HasDefaults::RO
.Sp
MooseX::StrictConstructor
.Sp
MooseX::ShortCut::BuildInstance
.Sp
Spreadsheet::Reader::Format \- v0.2.010
.Sp
Spreadsheet::Reader::Format::FmtDefault
.Sp
Spreadsheet::Reader::Format::ParseExcelFormatStrings
.Sp
Type::Library \- 1.000
.Sp
Types::Utils
.Sp
Types::Standard \-  qw(
 		InstanceOf			Str       			StrMatch			Enum
		HashRef				ArrayRef			CodeRef				Int
		HasMethods			Bool				is_Object			is_HashRef
		ConsumerOf
    )
.Sp
lib
.Sp
perl 5.010 <https://metacpan.org/pod/release/RGARCIA/perl-5.10.0/pod/perl.pod>
.Sp
strict
.Sp
version \- 0.77
.Sp
warnings
.Sp
Spreadsheet::Reader::ExcelXML::ZipReader
.Sp
Spreadsheet::Reader::ExcelXML::CellToColumnRow
.Sp
Spreadsheet::Reader::ExcelXML::Chartsheet
.Sp
Spreadsheet::Reader::ExcelXML::Error
.Sp
Spreadsheet::Reader::ExcelXML::Row
.Sp
Spreadsheet::Reader::ExcelXML::SharedStrings
.Sp
Spreadsheet::Reader::ExcelXML::Styles
.Sp
Spreadsheet::Reader::ExcelXML::WorkbookFileInterface
.Sp
Spreadsheet::Reader::ExcelXML::WorkbookMetaInterface
.Sp
Spreadsheet::Reader::ExcelXML::WorkbookPropsInterface
.Sp
Spreadsheet::Reader::ExcelXML::WorkbookRelsInterface
.Sp
Spreadsheet::Reader::ExcelXML::WorksheetToRow
.Sp
Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
Spreadsheet::Reader::ExcelXML::XMLReader::FileWorksheet
.Sp
Spreadsheet::Reader::ExcelXML::XMLReader::NamedSharedStrings
.Sp
Spreadsheet::Reader::ExcelXML::XMLReader::NamedStyles
.Sp
Spreadsheet::Reader::ExcelXML::XMLReader::NamedWorksheet
.Sp
Spreadsheet::Reader::ExcelXML::XMLReader::PositionSharedStrings
.Sp
Spreadsheet::Reader::ExcelXML::XMLReader::PositionStyles
.Sp
Spreadsheet::Reader::ExcelXML::XMLReader::WorkbookMeta
.Sp
Spreadsheet::Reader::ExcelXML::XMLReader::WorkbookProps
.Sp
Spreadsheet::Reader::ExcelXML::XMLReader::WorkbookRels
.Sp
Spreadsheet::Reader::ExcelXML::ZipReader::WorkbookMeta
.Sp
Spreadsheet::Reader::ExcelXML::ZipReader::WorkbookProps
.Sp
Spreadsheet::Reader::ExcelXML::ZipReader::WorkbookRels
.Sp
Spreadsheet::Reader::ExcelXML::Types \- qw( XLSXFile IOFileType is_XMLFile )
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::Read \- generic Spreadsheet reader
.Sp
Spreadsheet::ParseExcel \- Excel binary version 2003 and earlier (.xls files)
.Sp
Spreadsheet::XLSX \- Excel version 2007 and later
.Sp
Spreadsheet::ParseXLSX \- Excel version 2007 and later
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
