.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::DNS::ToolKit::RR::TYPE 3"
.TH Net::DNS::ToolKit::RR::TYPE 3 "2011-11-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::ToolKit::RR::TYPE \- Unknown Resource Record Handler
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  DO NOT use Net::DNS::ToolKit::RR::TYPE
\&  DO NOT require Net::DNS::ToolKit::RR::TYPE
\&
\&  Net::DNS::ToolKit::RR::TYPE is autoloaded by 
\&  class Net::DNS::ToolKit::RR and its methods
\&  are instantiated in a \*(Aqspecial\*(Aq manner.
\&
\&  use Net::DNS::ToolKit::RR;
\&  ($get,$put,$parse) = new Net::DNS::ToolKit::RR;
\&
\&  ($newoff,$name,$type,$class,$ttl,$rdlength,
\&        $textdata) = $get\->UnknownType(\e$buffer,$offset);
\&
\&  Note: the $get\->UnknownType method is normally called
\&  via:  @stuff = $get\->next(\e$buffer,$offset);
\&
\&  ($newoff,@dnptrs)=$put\->UnknownType(\e$buffer,$offset,\e@dnptrs,
\&        $name,$type,$class,$ttl,$rdlength,$textdata);
\&
\&  $NAME,$TYPE,$CLASS,$TTL,$rdlength,$textdata) 
\&    = $parse\->UnknownType($name,$type,$class,$ttl,$rdlength,
\&        $textdata);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBNet::DNS::ToolKit::RR:TYPE\fR is loaded once for all unknown types and their
methods redirected to the \s-1TYPE\s0 module. i.e. for \s-1TYPE61,\s0 this code snippet is
autoloaded.
.PP
.Vb 4
\&        package NET::DNS::ToolKit::RR::TYPE61
\&        *get   = \e&Net::DNS::ToolKit::RR::TYPE::get;
\&        *put   = \e&Net::DNS::ToolKit::RR::TYPEnn::put;
\&        *parse = \e&Net::DNS::ToolKit::RR::TYPEnn::parse;
\&
\&  Description from RFC3597
\&
\&  5. Text Representation
\&
\&   In the "type" field of a master file line, an unknown RR type is
\&   represented by the word "TYPE" immediately followed by the decimal RR
\&   type number, with no intervening whitespace.  In the "class" field,
\&   an unknown class is similarly represented as the word "CLASS"
\&   immediately followed by the decimal class number.
\&
\&   This convention allows types and classes to be distinguished from
\&   each other and from TTL values, allowing the "[<TTL>] [<class>]
\&   <type> <RDATA>" and "[<class>] [<TTL>] <type> <RDATA>" forms of
\&   [RFC1035] to both be unambiguously parsed.
\&
\&   The RDATA section of an RR of unknown type is represented as a
\&   sequence of white space separated words as follows:
\&
\&      The special token \e# (a backslash immediately followed by a hash
\&      sign), which identifies the RDATA as having the generic encoding
\&      defined herein rather than a traditional type\-specific encoding.
\&
\&      An unsigned decimal integer specifying the RDATA length in octets.
\&
\&      Zero or more words of hexadecimal data encoding the actual RDATA
\&      field, each containing an even number of hexadecimal digits.
\&
\&   If the RDATA is of zero length, the text representation contains only
\&   the \e# token and the single zero representing the length.
\&
\&        i.e.
\&        CLASS32     TYPE731         \e# 6 abcd012345
.Ve
.IP "\(bu" 4
\&\f(CW@stuff\fR = \f(CW$get\fR\->UnknownType(\e$buffer,$offset);
.Sp
.Vb 1
\&  Get the contents of the resource record.
\&
\&  USE: @stuff = $get\->next(\e$buffer,$offset);
\&
\&  where: @stuff = (
\&  $newoff $name,$type,$class,$ttl,$rdlength,
\&  $TYPEdata );
.Ve
.Sp
All except the last item, \fB\f(CB$textdata\fB\fR, is provided by
the class loader, \fBNet::DNS::ToolKit::RR\fR. The code in this method knows
how to retrieve \fB\f(CB$TYPEdata\fB\fR.
.Sp
.Vb 5
\&  input:        pointer to buffer,
\&                offset into buffer
\&  returns:      offset to next resource,
\&                @common RR elements,
\&                TYPEdata
.Ve
.IP "\(bu" 4
($newoff,@dnptrs)=$put\->UnknownType(\e$buffer,$offset,\e@dnptrs,
	\f(CW$name\fR,$type,$class,$ttl,$rdlength,$TYPEdata);
.Sp
Append an unknown record to \f(CW$buffer\fR.
.Sp
.Vb 2
\&  where @common = (
\&        $name,$type,$class,$ttl);
.Ve
.Sp
The method will insert the \f(CW$rdlength\fR and \f(CW$TYPEdata\fR, then
pass through the updated pointer to the array of compressed names
.Sp
The class loader, \fBNet::DNS::ToolKit::RR\fR, inserts the \f(CW@common\fR elements and
returns updated \f(CW@dnptrs\fR. This module knows how to insert its \s-1RDATA\s0 and
calculate the \f(CW$rdlength\fR.
.Sp
.Vb 8
\&  input:        pointer to buffer,
\&                offset (normally end of buffer), 
\&                pointer to compressed name array,
\&                @common RR elements,
\&                TYPEdata
\&  output:       offset to next RR,
\&                new compressed name pointer array,
\&           or   empty list () on error.
.Ve
.IP "\(bu" 4
(@COMMON,$TYPEdata) = \f(CW$parse\fR\->UnknownType(@common,$TYPEdata);
.Sp
Converts binary/numeric field data into human readable form. The common \s-1RR\s0
elements are supplied by the class loader, \fBNet::DNS::ToolKit::RR\fR.
For UnknownType \s-1RR\s0's, this returns the hex string described in \s-1RFC3597\s0
.Sp
.Vb 2
\&  input:        unknown binary
\&  returns:      hex string
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.Vb 2
\&        Net::DNS::ToolKit
\&        Net::DNS::Codes
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
.Vb 1
\&        none
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Robinton <michael@bizsystems.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&    Copyright 2003 \- 2011, Michael Robinton <michael@bizsystems.com>
.Ve
.PP
Michael Robinton <michael@bizsystems.com>
.PP
All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of either:
.PP
.Vb 3
\&  a) the GNU General Public License as published by the Free
\&  Software Foundation; either version 2, or (at your option) any
\&  later version, or
\&
\&  b) the "Artistic License" which comes with this distribution.
.Ve
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of 
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See either    
the \s-1GNU\s0 General Public License or the Artistic License for more details.
.PP
You should have received a copy of the Artistic License with this
distribution, in the file named \*(L"Artistic\*(R".  If not, I'll be glad to provide
one.
.PP
You should also have received a copy of the \s-1GNU\s0 General Public License
along with this program in the file named \*(L"Copying\*(R". If not, write to the
.PP
.Vb 3
\&        Free Software Foundation, Inc.                        
\&        59 Temple Place, Suite 330
\&        Boston, MA  02111\-1307, USA
.Ve
.PP
or visit their web page on the internet at:
.PP
.Vb 1
\&        http://www.gnu.org/copyleft/gpl.html.
.Ve
.SH "See also:"
.IX Header "See also:"
\&\fBNet::DNS::Codes\fR\|(3), \fBNet::DNS::ToolKit\fR\|(3)
