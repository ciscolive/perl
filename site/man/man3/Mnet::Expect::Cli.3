.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mnet::Expect::Cli 3"
.TH Mnet::Expect::Cli 3 "2019-11-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mnet::Expect::Cli \- Expect sessions to command line interfaces
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # refer also to Mnet::Expect
\&    use Mnet::Expect::Cli;
\&
\&    # prepare ssh command with host/key checking disabled
\&    my @ssh = qw(
\&        ssh \-o StrictHostKeyChecking=no \-o UserKnownHostsFile=/dev/null
\&    );
\&
\&    # connect via ssh for user to specified host, prompt for password
\&    my $expect = Mnet::Expect::Cli\->new({
\&        spawn       => [ @ssh, "user\e@1.2.3.4" ],
\&        password_in => 1,
\&    });
\&
\&    # gather output for specified command over ssh
\&    my $output = $expect\->command("ls");
\&
\&    # close ssh session
\&    $expect\->close;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mnet::Expect::Cli can be used to spawn Expect processes, which can be
used to programmatically control command line sessions to devices, with
support for Mnet options, logging, caching, and testing.
.PP
Refer to the perl Expect module for more information. Also refer to the
Mnet::Expect and Mnet::Expect::Cli::Ios modules.
.SH "METHODS"
.IX Header "METHODS"
Mnet::Expect::Cli implements the methods listed below.
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $expect = Mnet::Expect::Cli\->new(\e%opts)
.Ve
.PP
This method can be used to create new Mnet::Expect::Cli objects.
.PP
The following input opts may be specified, in addition to options documented
in the Mnet::Expect module new method:
.PP
.Vb 10
\&    delay           millseconds delay for command prompt detection
\&    eol_unix        default true for output with unix /n eol chars only
\&    failed_re       set to speed login failures, disabled by default
\&    log_login       default undef uses Mnet::Expect log_expect logging
\&    paging_key      default space key to send for pagination prompt
\&    paging_re       default handles common prompts, refer to paging_re
\&    password        set to password for spawned command, if needed
\&    password_in     stderr prompt for stdin entry of password if not set
\&    password_re     undef to skip password/code/phrase prompt detection
\&    prompt_re       undef to disable prompt detect, refer to prompt_re
\&    timeout         seconds for Expect restart_timeout_upon_receive
\&    username        set to username for spawned command, if needed
\&    username_re     undef to skip login/user/username promt detection
\&
\&    An error is issued if there are login problems.
.Ve
.PP
For example, the following call will start an ssh expect session to a device
with host key checking disabled:
.PP
.Vb 4
\&    # refer to SYNOPSIS example for ssh with host/key checks disabled
\&    my $expect = Mnet::Expect::Cli\->new({
\&        spawn => "ssh user@1.2.3.4", password_in => 1
\&    });
.Ve
.PP
Set failed_re to detect failed logins faster, as long as there's no conflict
with text that appears in login banners. For example:
.PP
.Vb 1
\&    (?i)(closed|error|denied|fail|incorrect|invalid|refused|sorry)
.Ve
.PP
Refer to the Mnet::Expect module for more information.
.SS "close"
.IX Subsection "close"
.Vb 1
\&    $expect\->close($command)
.Ve
.PP
This method sends closes the current expect session, sending the optional
input command first. Timeouts are gracefully handled. Refer to the close
method in the Mnet::Expect module for more information.
.SS "command"
.IX Subsection "command"
.Vb 1
\&    $output = $expect\->command($command, $timeout, \e@prompts)
.Ve
.PP
This method returns output from the specified command from the current expect
cli session, or undefined if there was a timeout.
.PP
The timeout input argument can be used to override the timeout for the current
object.
.PP
.Vb 2
\&    # sends $command, uses default timeout, defines some prompts
\&    my $output = $expect\->command($command, undef, [
\&
\&        # send 1.2.3.4 if matched by expect \-re /ip/
\&        \*(Aqip\*(Aq => \*(Aq1.2.3.4\er\*(Aq,
\&
\&        # code ref
\&        \*(Aqconfirm? \*(Aq => sub { my $output = shift; return "y" },
\&
\&        # returns prior output on timeout, might be undef
\&        undef => undef,
\&
\&    ]);
.Ve
.PP
The prompts reference argument can be used to handle prompts that occur after
entering a command, such as confirmation prompts. It should contain pairs of
regex strings and responses. The regex string values should be what goes in
between the forward slash characters of a regular expression. The response can
be a string that is sent to the expect session without a carraige return, or
may be a code reference that gets the current object and output as input args
and returns a response string. An null prompt regex string is activated for
timeouts. An undef prompt response causes an immediate return of output.
.PP
Refer also to the command_cache_clear method for more info.
.SS "command_cache_clear"
.IX Subsection "command_cache_clear"
.Vb 1
\&    $expect\->command_cache_clear
.Ve
.PP
This method can be used to clear the cache used by the command method.
.PP
Normally the the command method caches the outputs for all executed commands,
returning cached output when the same command is executed subsequently. When
the cache is cleared the command method will execute the next instance of any
specific command instead of returning cached output.
.SS "delay"
.IX Subsection "delay"
.Vb 1
\&    $delay = $expect\->delay($delay)
.Ve
.PP
Get and/or set a new delay time in milliseconds for the current object. This
delay is used when detecting extra command, prompt, or pagination output.
.PP
A good rule of thumb may be to set this delay to at least the round trip
response time for a response from the connected process.
.SS "paging_re"
.IX Subsection "paging_re"
.Vb 1
\&    $paging_re = $expect\->paging_re($paging_re)
.Ve
.PP
Get and/or set new paging_re for the current object.
.PP
Following are known pagination prompts covered by the default paging_re:
.PP
.Vb 4
\&    junos           =~ /^\-\-\-\e(more( \ed\ed?%)?\e)\-\-\-$/
\&    cisco ASA       =~ /<\-\-\- More \-\-\->/
\&    cisco ios       =~ /\-\-more\-\-/
\&    cisco ios 15    =~ /\-\-More\-\-/
.Ve
.PP
Following are other observed pagination prompts, not covered by default:
.PP
.Vb 1
\&    linux more cmd  =~ /\-\-More\-\-\e(\ed\ed?%\e)/
.Ve
.PP
Note that matched pagination text is not appended to command output. Refer also
to the command method in this module for more information.
.SS "prompt_re"
.IX Subsection "prompt_re"
.Vb 1
\&    $prompt_re = $expect\->prompt_re($prompt_re)
.Ve
.PP
Get and/or set new prompt_re for the current object.
.PP
By default prompts that end with $ % # : > are recognized, and the first prompt
detected after login is used as prompt_re for the rest of the expect session.
.PP
Note that prompt_re should start with a regex caret symbol and end with a regex
dollar sign, to ensure it works correctly. Also the /Q and /E escape sequences
do not appear to work in an expect regex.
.SS "timeout"
.IX Subsection "timeout"
.Vb 1
\&    $timeout = $expect\->timeout($timeout)
.Ve
.PP
Get and/or set a new timeout for the current object, refer to the Expect
module for more information.
.SH "TESTING"
.IX Header "TESTING"
Mnet::Test \-\-record and \-\-replay command line options are supported by this
module, and will record and replay command method outputs associated with calls
to the command method, integrated with the command_cache_clear method.
.PP
Refer to the Mnet::Test module for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Expect
.PP
Mnet
.PP
Mnet::Expect
.PP
Mnet::Expect::Cli::Ios
.PP
Mnet::Log
.PP
Mnet::Opts::Cli
.PP
Mnet::Test
