.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Async::Ping 3"
.TH Net::Async::Ping 3 "2018-01-24" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Async::Ping \- asyncronously check remote host for reachability
.SH "VERSION"
.IX Header "VERSION"
version 0.004001
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use IO::Async::Loop;
\& use Net::Async::Ping;
\&
\& my $p = Net::Async::Ping\->new;
\& my $loop = IO::Async::Loop\->new;
\&
\& my $future = $p\->ping($loop, \*(Aqmyrealbox.com\*(Aq);
\&
\& $future\->on_done(sub {
\&    say "good job the host is running!"
\& });
\& $future\->on_fail(sub {
\&    say "the host is down!!!";
\& });
\&
\& # With a timer
\& my $timer;
\& $timer = IO::Async::Timer::Periodic\->new(
\&    interval => 1,
\&    on_tick  => sub {
\&        $timer\->adopt_future(
\&            $p\->ping($loop, \*(Aqmyrealbox.com\*(Aq)
\&                \->on_done(sub { say "good job the host is running!" })
\&                \->on_fail(sub { say "the host is down!!!" })
\&                \->else_done
\&        );
\&    },
\& );
\& $timer\->start;
\&
\& $l\->add( $timer );
\& $l\->run;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module's goal is to eventually be able to test remote hosts
on a network with a number of different socket types and protocols.
Currently it only supports \s-1TCP\s0 and \s-1ICMP,\s0 but \s-1UDP,\s0 and Syn are planned.
If you need one of those feel free to work up a patch.
.PP
This module was originally forked off of Net::Ping, so it shares \fBsome\fR of it's interface, but only where it makes sense.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 3
\& my $p = Net::Async::Ping\->new(
\&   $proto, $def_timeout, $bytes, $device, $tos, $ttl,
\& );
.Ve
.PP
All arguments to new are optional, but if you want to provide one in the
middle you must provide all the ones to the left of it.  The default
protocol is \f(CW\*(C`tcp\*(C'\fR.  The default timeout is 5 seconds.
\&\f(CW\*(C`device\*(C'\fR is what host to bind the socket to, ie what to ping \fBfrom\fR.
\&\f(CW\*(C`bytes\*(C'\fR, \f(CW\*(C`tos\*(C'\fR and \f(CW\*(C`ttl\*(C'\fR do not currently apply.
.PP
Alternately, you can use a new constructor:
.PP
.Vb 7
\& my $p = Net::Async::Ping\->new(
\&   tcp => {
\&      default_timeout => 10,
\&      bind            => \*(Aq192.168.1.1\*(Aq,
\&      port_number     => 80,
\&   },
\& );
.Ve
.PP
All of the above arguments are optional. Bind is the same as device from
before.
.PP
See Net::Async::Ping::TCP and Net::Async::Ping::ICMP for module specific
options.
.SS "ping"
.IX Subsection "ping"
.Vb 1
\& my $future = $p\->ping($loop, $host, $timeout);
.Ve
.PP
Returns a Future representing the ping.  \f(CW\*(C`loop\*(C'\fR should be an
IO::Async::Loop, host is the host, and timeout is optional and defaults to
the default set above.
.PP
It's also possible to omit the \f(CW$loop\fR, and add the pinger to a loop afterwards:
.PP
.Vb 3
\& my $loop = IO::Async::Loop\->new;
\& $p\->ping($host);
\& $loop\->add( $p );
.Ve
.PP
The return value of the future depends on the protocol. See
Net::Async::Ping::TCP and Net::Async::Ping::ICMP.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Arthur Axel \*(L"fREW\*(R" Schmidt <frioux+cpan@gmail.com>
.IP "\(bu" 4
Alexander Hartmaier <abraxxa@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2018 by Arthur Axel \*(L"fREW\*(R" Schmidt, Alexander Hartmaier.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
