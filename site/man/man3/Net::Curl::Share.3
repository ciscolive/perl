.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Curl::Share 3"
.TH Net::Curl::Share 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Curl::Share \- Perl interface for curl_share_* functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Net::Curl::Share qw(:constants);
\&
\& my $share = Net::Curl::Share\->new();
\& $share\->setopt( CURLSHOPT_SHARE, CURL_LOCK_DATA_COOKIE );
\& $share\->setopt( CURLSHOPT_SHARE, CURL_LOCK_DATA_DNS );
\&
\& $easy_one\->setopt( CURLOPT_SHARE() => $share );
\&
\& $easy_two\->setopt( CURLOPT_SHARE() => $share );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module wraps share handle from libcurl and all related functions and
constants. It does not export by default anything, but constants can be
exported upon request.
.PP
.Vb 1
\& use Net::Curl::Share qw(:constants);
.Ve
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "new( [\s-1BASE\s0] )" 4
.IX Item "new( [BASE] )"
Creates new Net::Curl::Share object. If \s-1BASE\s0 is specified it will be used
as object base, otherwise an empty hash will be used. \s-1BASE\s0 must be a valid
reference which has not been blessed already. It will not be used by the
object.
.Sp
.Vb 1
\& my $share = Net::Curl::Share\->new( [qw(my very private data)] );
.Ve
.Sp
Calls \fBcurl_share_init\fR\|(3) <https://curl.haxx.se/libcurl/c/curl_share_init.html>.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "setopt( \s-1OPTION, VALUE\s0 )" 4
.IX Item "setopt( OPTION, VALUE )"
Set an option. \s-1OPTION\s0 is a numeric value, use one of CURLSHOPT_* constants.
\&\s-1VALUE\s0 depends on whatever that option expects.
.Sp
.Vb 1
\& $share\->setopt( CURLSHOPT_SHARE, CURL_LOCK_DATA_COOKIE );
.Ve
.Sp
Calls \fBcurl_share_setopt\fR\|(3) <https://curl.haxx.se/libcurl/c/curl_share_setopt.html>.
Throws \*(L"Net::Curl::Share::Code\*(R" on error.
.SS "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
None of those functions are exported, you must use fully qualified names.
.IP "strerror( [\s-1WHATEVER\s0], \s-1CODE\s0 )" 4
.IX Item "strerror( [WHATEVER], CODE )"
Return a string for error code \s-1CODE.\s0
.Sp
.Vb 1
\& my $message = Net::Curl::Share::strerror( CURLSHE_BAD_OPTION );
.Ve
.Sp
See \fBcurl_share_strerror\fR\|(3) <https://curl.haxx.se/libcurl/c/curl_share_strerror.html> for more info.
.SS "\s-1CONSTANTS\s0"
.IX Subsection "CONSTANTS"
.IP "CURLSHOPT_*" 4
.IX Item "CURLSHOPT_*"
Values for \fBsetopt()\fR.
.IP "CURL_LOCK_ACCESS_*" 4
.IX Item "CURL_LOCK_ACCESS_*"
Values passed to lock callbacks. Unused.
.IP "CURL_LOCK_DATA_*" 4
.IX Item "CURL_LOCK_DATA_*"
Values passed to lock and unlock callbacks. Unused.
.IP "\s-1CURL_LOCK_DATA_COOKIE, CURL_LOCK_DATA_DNS\s0" 4
.IX Item "CURL_LOCK_DATA_COOKIE, CURL_LOCK_DATA_DNS"
Values used to enable/disable shareing.
.SS "\s-1CALLBACKS\s0"
.IX Subsection "CALLBACKS"
Reffer to libcurl documentation for more detailed info on each of those.
.IP "\s-1CURLSHOPT_LOCKFUNC\s0 ( \s-1CURLSHOPT_USERDATA\s0 )" 4
.IX Item "CURLSHOPT_LOCKFUNC ( CURLSHOPT_USERDATA )"
Not supported. Locking is done internally.
.IP "\s-1CURLSHOPT_UNLOCKFUNC\s0 ( \s-1CURLSHOPT_USERDATA\s0 )" 4
.IX Item "CURLSHOPT_UNLOCKFUNC ( CURLSHOPT_USERDATA )"
Not supported. (Un)Locking is done internally.
.SS "Net::Curl::Share::Code"
.IX Subsection "Net::Curl::Share::Code"
Net::Curl::Share setopt method on failure throws a Net::Curl::Share::Code error
object. It has both numeric value and, when used as string, it calls \fBstrerror()\fR
function to display a nice message.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Curl
Net::Curl::Easy
Net::Curl::Multi
Net::Curl::examples
\&\fBlibcurl\-share\fR\|(3)
\&\fBlibcurl\-errors\fR\|(3)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2011\-2015 Przemyslaw Iskra <sparky at pld\-linux.org>.
.PP
You may opt to use, copy, modify, merge, publish, distribute and/or sell
copies of the Software, and permit persons to whom the Software is furnished
to do so, under the terms of the \s-1MPL\s0 or the MIT/X\-derivate licenses. You may
pick one of these licenses.
