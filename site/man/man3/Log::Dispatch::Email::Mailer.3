.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Log::Dispatch::Email::Mailer 3"
.TH Log::Dispatch::Email::Mailer 3 "2020-09-16" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Dispatch::Email::Mailer \- Log::Dispatch::Email subclass that sends mail using Email::Mailer
.SH "VERSION"
.IX Header "VERSION"
version 1.08
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Log::Dispatch;
\&
\&    # simple text email alert via Log::Dispatch
\&    my $log = Log::Dispatch\->new(
\&        outputs => [
\&            [
\&                \*(AqEmail::Mailer\*(Aq,
\&                min_level => \*(Aqalert\*(Aq,
\&                to        => [ qw( foo@example.com bar@example.org ) ],
\&                subject   => \*(AqAlert Log Message\*(Aq,
\&            ],
\&        ],
\&    );
\&    $log\->alert(\*(AqThis is to alert you something happened.\*(Aq);
\&
\&    # simple text email alert via direct instantiation
\&    my $email = Log::Dispatch::Email::Mailer\->new(
\&        min_level => \*(Aqalert\*(Aq,
\&        to        => [ qw( foo@example.com bar@example.org ) ],
\&        subject   => \*(AqAlert Log Message\*(Aq,
\&    );
\&    $email\->log(
\&        message => \*(AqThis is to alert you something happened.\*(Aq,
\&        level   => \*(Aqalert\*(Aq,
\&    );
\&
\&    # simple text email using an Email::Mailer object with explicit transport
\&    $log = Log::Dispatch\->new(
\&        outputs => [
\&            [
\&                \*(AqEmail::Mailer\*(Aq,
\&                min_level => \*(Aqalert\*(Aq,
\&                to        => [ qw( foo@example.com bar@example.org ) ],
\&                subject   => \*(AqAlert Log Message\*(Aq,
\&                mailer    => Email::Mailer\->new(
\&                    transport => Email::Sender::Transport::SMTP\->new({
\&                        host => \*(Aqsmtp.example.com\*(Aq,
\&                        port => 25,
\&                    }),
\&                ),
\&            ],
\&        ],
\&    );
\&    $log\->alert(\*(AqThis is to alert you something happened.\*(Aq);
\&
\&    # HTML email alert with attached log file using Template Toolkit
\&    use Template;
\&    my $tt = Template\->new;
\&    $log   = Log::Dispatch\->new(
\&        outputs => [
\&            [
\&                \*(AqEmail::Mailer\*(Aq,
\&                min_level => \*(Aqalert\*(Aq,
\&                to        => [ qw( foo@example.com bar@example.org ) ],
\&                subject   => \*(AqAlert Log Message\*(Aq,
\&                html      => \eq{
\&                    <pre>[% message %]</pre>
\&                    <p>[% messages.join("<br>") %]</p>
\&                },
\&                attachments => [
\&                    {
\&                        ctype   => \*(Aqtext/plain\*(Aq,
\&                        content => \*(AqThis is plain text attachment content.\*(Aq,
\&                        name    => \*(Aqlog_file.txt\*(Aq,
\&                    },
\&                ],
\&                process => sub {
\&                    my ( $template, $data ) = @_;
\&                    my $content;
\&                    $tt\->process( \e$template, $data, \e$content );
\&                    return $content;
\&                },
\&            ],
\&        ],
\&    );
\&    $log\->alert(\*(AqThis is to alert you something happened.\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of Log::Dispatch::Email that implements the \f(CW\*(C`send_email()\*(C'\fR
method using the Email::Mailer module. Much like the Email::Mailer module,
you can send email in a great variety of ways including text-only, \s-1HTML\s0 with
text auto-generated, including attachments, and even using your favorite
templating system.
.SS "Simple Text Email"
.IX Subsection "Simple Text Email"
The simplest way to use this module is to setup an \*(L"outputs\*(R" record with
Log::Dispatch much like you would any other email subclass.
.PP
.Vb 11
\&    my $log = Log::Dispatch\->new(
\&        outputs => [
\&            [
\&                \*(AqEmail::Mailer\*(Aq,
\&                min_level => \*(Aqalert\*(Aq,
\&                to        => [ qw( foo@example.com bar@example.org ) ],
\&                subject   => \*(AqAlert Log Message\*(Aq,
\&            ],
\&        ],
\&    );
\&    $log\->alert(\*(AqThis is to alert you something happened.\*(Aq);
.Ve
.PP
By default, log messages are buffered and sent either when \f(CW$log\fR is destroyed
or when you call \f(CW\*(C`$log\->flush\*(C'\fR.
.PP
.Vb 3
\&    $log\->alert(\*(AqThis message will appear in an email.\*(Aq);
\&    $log\->alert(\*(AqThis message will appear in the same email, but not yet...\*(Aq);
\&    $log\->flush; # now both alerts will get sent in one email
.Ve
.PP
Note that unlike many other Log::Dispatch::Email subclasses, multiple
buffered messages won't be concatenated together without spaces. Instead, the
messages will appear in a text-only email as independent lines.
.PP
As an alternative to buffering, you can explicitly set buffering off to have
each log line send a single email.
.PP
.Vb 10
\&    my $log = Log::Dispatch\->new(
\&        outputs => [
\&            [
\&                \*(AqEmail::Mailer\*(Aq,
\&                min_level => \*(Aqalert\*(Aq,
\&                to        => [ qw( foo@example.com bar@example.org ) ],
\&                subject   => \*(AqAlert Log Message\*(Aq,
\&                buffer    => 0,
\&            ],
\&        ],
\&    );
\&    $log\->alert(\*(AqThis will be in one email.\*(Aq);
\&    $log\->alert(\*(AqThis will be in a second email.\*(Aq);
.Ve
.SS "Simple Text Email with Explicit Transport"
.IX Subsection "Simple Text Email with Explicit Transport"
By default, this module will create its own Email::Mailer object through
which to send email. You can provide a \*(L"mailer\*(R" value of an explicit
Email::Mailer object you create and control, thus allowing you to set things
like an explicit transport mechanism.
.PP
.Vb 10
\&    my $log = Log::Dispatch\->new(
\&        outputs => [
\&            [
\&                \*(AqEmail::Mailer\*(Aq,
\&                min_level => \*(Aqalert\*(Aq,
\&                to        => [ qw( foo@example.com bar@example.org ) ],
\&                subject   => \*(AqAlert Log Message\*(Aq,
\&                mailer    => Email::Mailer\->new(
\&                    transport => Email::Sender::Transport::SMTP\->new({
\&                        host => \*(Aqsmtp.example.com\*(Aq,
\&                        port => 25,
\&                    }),
\&                ),
\&            ],
\&        ],
\&    );
\&    $log\->alert(\*(AqThis is to alert you something happened.\*(Aq);
.Ve
.SS "\s-1HTML\s0 Email with Attached File Using Template Toolkit"
.IX Subsection "HTML Email with Attached File Using Template Toolkit"
If you want to have some real fun with sending email log messages (and let's be
real here, who doesn't), try using this module to send templated \s-1HTML\s0 email
with attachments. Any key/value you can pass to Email::Mailer, you can pass
as part of the \*(L"outputs\*(R" element.
.PP
The following example uses an \s-1HTML\s0 template (which per Email::Mailer needs
to be a scalar reference) and a very simple Template Toolkit process subref.
.PP
.Vb 10
\&    use Template;
\&    my $tt  = Template\->new;
\&    my $log = Log::Dispatch\->new(
\&        outputs => [
\&            [
\&                \*(AqEmail::Mailer\*(Aq,
\&                min_level => \*(Aqalert\*(Aq,
\&                to        => [ qw( foo@example.com bar@example.org ) ],
\&                subject   => \*(AqAlert Log Message\*(Aq,
\&                html      => \eq{
\&                    <pre>[% message %]</pre>
\&                    <p>[% messages.join("<br>") %]</p>
\&                },
\&                attachments => [
\&                    {
\&                        ctype   => \*(Aqtext/plain\*(Aq,
\&                        content => \*(AqThis is plain text attachment content.\*(Aq,
\&                        name    => \*(Aqlog_file.txt\*(Aq,
\&                    },
\&                ],
\&                process => sub {
\&                    my ( $template, $data ) = @_;
\&                    my $content;
\&                    $tt\->process( \e$template, $data, \e$content );
\&                    return $content;
\&                },
\&            ],
\&        ],
\&    );
\&    $log\->alert(\*(AqThis is to alert you something happened.\*(Aq);
.Ve
.PP
What's happening behind the scenes is that the \*(L"data\*(R" value that you'd normally
pass to Email::Mailer that would work its way down into the \*(L"process\*(R" subref
is in this case being generated for you. It gets populated with two sub-keys:
message and messages. The first is a \*(L"\en\*(R"\-separated string of log messages.
The second is an arrayref of those strings.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Email::Mailer, Log::Dispatch::Email, Log::Dispatch.
.PP
You can also look for additional information at:
.IP "\(bu" 4
GitHub <https://github.com/gryphonshafer/Log-Dispatch-Email-Mailer>
.IP "\(bu" 4
MetaCPAN <https://metacpan.org/pod/Log::Dispatch::Email::Mailer>
.IP "\(bu" 4
Travis \s-1CI\s0 <https://travis-ci.org/gryphonshafer/Log-Dispatch-Email-Mailer>
.IP "\(bu" 4
Coveralls <https://coveralls.io/r/gryphonshafer/Log-Dispatch-Email-Mailer>
.IP "\(bu" 4
\&\s-1CPANTS\s0 <http://cpants.cpanauthors.org/dist/Log-Dispatch-Email-Mailer>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers <http://www.cpantesters.org/distro/D/Log-Dispatch-Email-Mailer.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Gryphon Shafer <gryphon@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Gryphon Shafer.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
