.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::IRC::UA 3"
.TH Mojo::IRC::UA 3 "2017-02-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::IRC::UA \- IRC Client with sugar on top
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Mojo::IRC::UA;
\&  my $irc = Mojo::IRC::UA\->new;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::IRC::UA is a module which extends Mojo::IRC with methods
that can track changes in state on the \s-1IRC\s0 server.
.PP
This module is \s-1EXPERIMENTAL\s0 and can change without warning.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::IRC::UA inherits all attributes from Mojo::IRC and implements the
following new ones.
.SS "op_timeout"
.IX Subsection "op_timeout"
.Vb 2
\&  $int = $self\->op_timeout;
\&  $self = $self\->op_timeout($int);
.Ve
.PP
Max number of seconds to wait for a response from the \s-1IRC\s0 server.
.SH "EVENTS"
.IX Header "EVENTS"
Mojo::IRC::UA inherits all events from Mojo::IRC and implements the
following new ones.
.SH "METHODS"
.IX Header "METHODS"
Mojo::IRC::UA inherits all methods from Mojo::IRC and implements the
following new ones.
.SS "channels"
.IX Subsection "channels"
.Vb 1
\&  $self = $self\->channels(sub { my ($self, $err, $channels) = @_; });
.Ve
.PP
Will retrieve available channels on the \s-1IRC\s0 server. \f(CW$channels\fR has this
structure on success:
.PP
.Vb 3
\&  {
\&    "#convos" => {n_users => 4, topic => "[+nt] some cool topic"},
\&  }
.Ve
.PP
\&\s-1NOTE:\s0 This might take a long time, if the server has a lot of channels.
.SS "channel_topic"
.IX Subsection "channel_topic"
.Vb 2
\&  $self = $self\->channel_topic($channel, $topic, sub { my ($self, $err) = @_; });
\&  $self = $self\->channel_topic($channel, sub { my ($self, $err, $res) = @_; });
.Ve
.PP
Used to get or set topic for a channel. \f(CW$res\fR is a hash with a key \*(L"topic\*(R" which
holds the current topic.
.SS "channel_users"
.IX Subsection "channel_users"
.Vb 1
\&  $self = $self\->channel_users($channel, sub { my ($self, $err, $users) = @_; });
.Ve
.PP
This can retrieve the users in a channel. \f(CW$users\fR contains this structure:
.PP
.Vb 4
\&  {
\&    jhthorsen => {mode => "o"},
\&    Superman  => {mode => ""},
\&  }
.Ve
.PP
This method is \s-1EXPERIMENTAL\s0 and can change without warning.
.SS "join_channel"
.IX Subsection "join_channel"
.Vb 1
\&  $self = $self\->join_channel($channel => sub { my ($self, $err, $info) = @_; });
.Ve
.PP
Used to join an \s-1IRC\s0 channel. \f(CW$err\fR will be false (empty string) on a
successful join. \f(CW$info\fR will contain information about the joined channel:
.PP
.Vb 9
\&  {
\&    name     => "#channel_name",
\&    topic    => "some cool topic",
\&    topic_by => "jhthorsen",
\&    users    => {
\&      jhthorsen => {mode => "@"},
\&      Superman  => {mode => ""},
\&    },
\&  }
.Ve
.PP
\&\*(L"name\*(R" in \f(CW$info\fR holds the actual channel name that is joined. This will not
be the same as \f(CW$channel\fR in case of \*(L"\s-1ERR_LINKCHANNEL\*(R"\s0 (470) events, where you
are automatically redirected to another channel.
.PP
\&\s-1NOTE\s0! This method will fail if the channel is already joined. Unfortunately,
the way it will fail is simply by not calling the callback. This should be
fixed \- Just don't know how yet.
.SS "kick"
.IX Subsection "kick"
.Vb 1
\&  $self = $self\->kick("#channel superman", sub { my ($self, $err, $res) = @_; });
.Ve
.PP
Used to kick a user. \f(CW$res\fR looks like this:
.PP
.Vb 1
\&  {reason => "you don\*(Aqt behave"}
.Ve
.SS "mode"
.IX Subsection "mode"
.Vb 3
\&  $self = $self\->mode(sub { my ($self, $err, $mode) = @_; });
\&  $self = $self\->mode("\-i", sub { my ($self, $err, $mode) = @_; });
\&  $self = $self\->mode("#channel +k secret", sub { my ($self, $err, $mode) = @_; });
.Ve
.PP
This method is used to get or set a user mode or set a channel mode.
.PP
\&\f(CW$mode\fR is \s-1EXPERIMENTAL,\s0 but holds a hash, with \*(L"mode\*(R" as key.
.PP
Note that this method seems to be unstable. Working on a fix:
<https://github.com/jhthorsen/mojo\-irc/issues/28>.
.SS "nick"
.IX Subsection "nick"
.Vb 2
\&  $self = $self\->nick($nick => sub { my ($self, $err) = @_; });
\&  $self = $self\->nick(sub { my ($self, $err, $nick) = @_; });
.Ve
.PP
Used to set or get the nick for this connection.
.PP
Setting the nick will change \*(L"nick\*(R" \fIafter\fR the nick is actually
changed on the server.
.SS "part_channel"
.IX Subsection "part_channel"
.Vb 1
\&  $self = $self\->part_channel($channel => sub { my ($self, $err) = @_; });
.Ve
.PP
Used to part/leave a channel.
.SS "whois"
.IX Subsection "whois"
.Vb 1
\&  $self = $self\->whois($target, sub { my ($self, $err, $info) = @_; });
.Ve
.PP
Used to retrieve information about a user. \f(CW$info\fR contains this information
on success:
.PP
.Vb 9
\&  {
\&    channels => {"#convos => {mode => "@"}],
\&    host     => "example.com",
\&    idle_for => 17454,
\&    name     => "Jan Henning Thorsen",
\&    nick     => "batman",
\&    server   => "hybrid8.debian.local",
\&    user     => "jhthorsen",
\&  },
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2014, Jan Henning Thorsen
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jan Henning Thorsen \- \f(CW\*(C`jhthorsen@cpan.org\*(C'\fR
