.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Tree 3"
.TH DBIx::Class::Tree 3 "2011-01-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Tree \- Manipulate and anaylze tree structured data.
.SH "GETTING HELP/SUPPORT"
.IX Header "GETTING HELP/SUPPORT"
The community can be found via:
.IP "\(bu" 4
\&\s-1IRC:\s0 irc.perl.org#dbix\-class
.IP "\(bu" 4
Mailing list: <http://lists.scsys.co.uk/mailman/listinfo/dbix\-class>
.IP "\(bu" 4
\&\s-1RT\s0 Bug Tracker: <https://rt.cpan.org/Dist/Display.html?Queue=DBIx\-Class\-Tree>
.IP "\(bu" 4
gitweb: <http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=dbsrgits/DBIx\-Class\-Tree.git>
.IP "\(bu" 4
git: <git://git.shadowcat.co.uk/dbsrgits/DBIx\-Class\-Tree.git>
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The tree modules provide the tools to represent, modify, and analyze
trees of data with DBIx::Class.
.SH "COMPONENTS"
.IX Header "COMPONENTS"
DBIx::Class::Tree::AdjacencyList \- Manage a tree of data using the
common adjacency list model.
.PP
DBIx::Class::Tree::AdjacencyList::Ordered \- Glue DBIx::Class::Ordered
and DBIx::Class::Tree::AdjacencyList together.
.SH "DAG"
.IX Header "DAG"
All tree related modules must conform to have and use the basic traversal
methods of a \s-1DAG.\s0  For the most part this just means that Tree modules
must provide the appearance of having multiple parents per node (via a
\&\fBparents()\fR method) but may very well never return more than one parent.
All utility modules, such as a Visitor module, should do its best to
never assume that a node only has one parent.  There are situations
where this is not possible \- in those cases the module's documentation
should clearly state that it is not compatible with DAGs.
.PP
So far there is no Tree::DAG module, but there will be.  These requirements
are vague, and the requirements of Tree modules to be \s-1DAG\s0 compatible will
become more defined in due course.
.SH "AUTHOR"
.IX Header "AUTHOR"
Aran Clary Deltac <bluefeet@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
