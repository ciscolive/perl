.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Cisco::Reconfig 3"
.TH Cisco::Reconfig 3 "2013-09-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cisco::Reconfig \- Parse and generate Cisco configuration files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use Cisco::Reconfig;
\&        my $config = readconfig("/my/cisco/config");
\&
\&        use Cisco::Reconfig qw(stringconfig);
\&        my $config = stringconfig("cisco config", "goes here");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Cisco::Reconfig makes it easier to write programs to generate changes to Cisco
configuration files.
.PP
Cisco::Reconfig is a module that parses Cisco router configuration files.  It
doesn't have any real understanding of Cisco configurations so it
might be useful for other similar configuration languages.  It knows
that nesting is shown by indentation.  It knows that \f(CW\*(C`!\*(C'\fR means a
comment.  It knows that \f(CW\*(C`no\*(C'\fR may proceed a line without changing
where that line exists in the hierarchy.  It doesn't know much else.
.PP
Cisco::Reconfig can be used to modify configurations.  The \f(CW\*(C`set()\*(C'\fR method 
will check the current configruation and return commands to change
it if it is other than what is wanted (as passed to the \f(CW\*(C`set()\*(C'\fR
method).
.SS "\s-1DETAILS\s0"
.IX Subsection "DETAILS"
Some of the accessor methods return a special \*(L"undef\*(R" object instead
of a proper undef.  This is so that code that uses accessors 
doesn't have to be paranoid about undefined values.  This \*(L"undef\*(R" object
tests as false in boolean context however it is \f(CW\*(C`defined()\*(C'\fRed.
.PP
Methods that return configuration items can return items that
represent any particular word in the configruation file.  For
example, with the following configuration & code, the return
value for the \f(CW\*(C`get()\*(C'\fR method would represent the word
\&\f(CW\*(C`access\-list\*(C'\fR in both of the lines:
.PP
.Vb 2
\&        ip as\-path access\-list 111 deny _10993_
\&        ip as\-path access\-list 111 permit .*
\&
\&        $config\->get(\*(Aqip as\-path access\-list\*(Aq);
.Ve
.PP
Most of the time you don't need to worry about the fact that the
object represents a word.  Another way to look at it is that the
object represents a selection of lines from the configuration file.
Sometimes that selection is a single line.  Sometimes it is a block.
Sometimes it is a few lines that start with the same tokens.
.PP
To look at all the different as-path access
lists, the following would work:
.PP
.Vb 1
\&        $config\->get(\*(Aqip as\-path access\-list\*(Aq)\->all;
.Ve
.PP
The word \f(CW\*(C`no\*(C'\fR is handled specially: it is discarded.  Many cisco
directives start with the word \f(CW\*(C`no\*(C'\fR.  To make the module more
usable, the word \f(CW\*(C`no\*(C'\fR is ignored during parsing.  It is kept in
the text so, if you look for something that might have a \f(CW\*(C`no\*(C'\fR 
in front of it, you'll get a hit if the \f(CW\*(C`no\*(C'\fR is there or isn't
there.  For example:
.PP
.Vb 6
\&        my (@cdp_disabled);
\&        for my $context ($config\->get(\*(Aqinterface\*(Aq)\->all(qr{^ether}i)) {
\&                my $cdp = $context\->get(\*(Aqcdp enable\*(Aq);
\&                push(@cdp_disabled, $context)
\&                        if $cdp =~ /no cdp enable/;
\&        }
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
There is just one function provided: \f(CW\*(C`readconfig()\*(C'\fR.  Readconfig
takes a single argument: a filename or file handle.  It parses
the file and returns an Cisco::Reconfig object.
.SH "MAIN METHODS"
.IX Header "MAIN METHODS"
.IP "\->get(@designators)" 4
.IX Item "->get(@designators)"
The \f(CW\*(C`get()\*(C'\fR method is the key to looking up items in a configuration
file.  It takes an array of designators as an argument.  A designator
is simply something that identifies a portion of a configuration
file.  For example \f(CW\*(C`(\*(Aqinterface\*(Aq)\*(C'\fR is a designator for all the interfaces
and \f(CW\*(C`(\*(Aqip route\*(Aq)\*(C'\fR is a designator for all the static routes.
.Sp
When multiple designators are specified, they are used for nested
configuration items.  For example, 
\&\f(CW\*(C`(\*(Aqrouter bgp\*(Aq, \*(Aqneighbor\*(Aq)\*(C'\fR would be a designator for all the
\&\s-1BGP\s0 neighbors.  This assumes that there is only one \f(CW\*(C`router bgp\*(C'\fR
defined.
.Sp
In array context, \f(CW\*(C`get()\*(C'\fR will follow multiple paths to find 
configuration items that match the specification.  For example
\&\f(CW\*(C`(\*(Aqinterface\*(Aq, \*(Aqip address\*(Aq)\*(C'\fR would return a list of ip address
items across multiple interfaces.
.Sp
Designators must exactly match words in the configuration.  You may
not abbr anythng.
.ie n .IP "\->set(@designators, $newvalue)" 4
.el .IP "\->set(@designators, \f(CW$newvalue\fR)" 4
.IX Item "->set(@designators, $newvalue)"
The \f(CW\*(C`set()\*(C'\fR method will generate Cisco configuration snippets
that will modify the configuration of an item.  For example,
the following code:
.Sp
.Vb 3
\&        my $ser0 = $config\->get(\*(Aqinterface Serial0\*(Aq);
\&        print $ser0\->set(\*(Aqip address\*(Aq, 
\&                \*(Aqip address 207.181.198.194 255.255.255.252\*(Aq);
.Ve
.Sp
Will print:
.Sp
.Vb 3
\&        interface Serial0
\&         ip address 207.181.198.194 255.255.255.252
\&        exit
.Ve
.Sp
If the configuration already matches the \f(CW$newvalue\fR then
nothing would be printed.
.Sp
The designator(s) say what will be modified.  This should either
be represent a line or an entire block.  When multiple designators
are needed, pass them as an anonymous array.  The above example
could also have been written as:
.Sp
.Vb 2
\&        print $config\->set(\*(Aqinterface Serial0\*(Aq, \*(Aqip address\*(Aq,
\&                \*(Aqip address 207.181.198.194 255.255.255.252\*(Aq);
.Ve
.Sp
If no designators are needed, don't pass any.  The following
is nearly the same as the preceeding;
.Sp
.Vb 2
\&        my $ipaddr = $config\->get(\*(Aqinterface Serial0\*(Aq, \*(Aqip address\*(Aq);
\&        print $ipaddr\->set( \*(Aqip address 207.181.198.194 255.255.255.252\*(Aq);
.Ve
.Sp
When providing code snippets to \f(CW\*(C`set()\*(C'\fR, indent blocks just like
Ciscos do when they display their configuration.  For example, the
following:
.Sp
.Vb 5
\&        print $config\->set("ip access\-list extended all\-addresses", <<END);
\&                ip access\-list extended all\-addresses
\&                 permit ip any any
\&                !
\&        END
.Ve
.Sp
Will print the following if the access list ins't already set as
listed:
.Sp
.Vb 3
\&        ip access\-list extended all\-addresses
\&         permit ip any any
\&        exit
.Ve
.Sp
When modifying a block, include the configruation line that starts
the block in the replacement text.  For example, when setting an entire
interface, provide the entire block:
.Sp
.Vb 6
\&        print $config\->set(\*(Aqinterface Serial0\*(Aq,<<END);
\&                interface Serial0 point\-to\-point
\&                 ip address 219.22.221.3 255.255.255.252
\&                 bandwidth 3022
\&                !
\&        END
.Ve
.IP "\->all($regex)" 4
.IX Item "->all($regex)"
The \f(CW\*(C`all()\*(C'\fR method can be used to expand and select configuration
items.
.Sp
For example, to make sure that all loopback interfaces use a 
netmask of 255.255.255.255, use the following:
.Sp
.Vb 5
\&        for my $loop ($config\->get(\*(Aqinterface\*(Aq)\->all(qr{^Loop})) {
\&                my $ip = $loop\->get(\*(Aqip address\*(Aq);
\&                next unless $ip\->text =~ /\eA\es*ip address (\eS+) \eS+\es*\eZ/;
\&                print $ip\->set(undef, "ip address $1 255.255.255.255");
\&        }
.Ve
.Sp
The \f(CW$regex\fR paramater is optional.
.SH "ACCESSOR METHODS"
.IX Header "ACCESSOR METHODS"
.IP "\->\fBsingle()\fR" 4
.IX Item "->single()"
Cisco::Reconfig objects may represent any word in a configruation file.
For example the word \*(L"address\*(R" in the following is represented by
an object that would be returned by the code that follows.
.Sp
.Vb 4
\&        interface Loopback0 
\&         ip access\-group 151 in
\&         ip address 218.28.41.38 255.255.255.255
\&        !
\&
\&        my $address_word = $config\->get(\*(Aqinterface Loopback0\*(Aq, \*(Aqip\*(Aq)
\&                \->all(qr{^address});
.Ve
.Sp
\&\f(CW\*(C`single()\*(C'\fR answers the question: does this Cisco::Reconfig object
uniquely specify a single point in the configuration?  In the example
above, the object for word \f(CW\*(C`ip\*(C'\fR (above) does not but the object
for the word \f(CW\*(C`address\*(C'\fR does.
.Sp
\&\f(CW\*(C`single()\*(C'\fR returns an object (representing the last word on the
line) or undef.
.IP "\->\fBzoom()\fR" 4
.IX Item "->zoom()"
\&\f(CW\*(C`zoom()\*(C'\fR is the same as to \f(CW\*(C`single()\*(C'\fR except that it will always
return a valid Cisco::Reconfig object.
.IP "\->\fBendpt()\fR" 4
.IX Item "->endpt()"
Returns an Cisco::Reconfig object representing the last word on a configuration
line that could follow from the current \s-1ZYZ\s0 object.  When there are
multiple possibilities the object picked is nearly random.
.IP "\->\fBnext()\fR" 4
.IX Item "->next()"
\&\f(CW\*(C`next()\*(C'\fR returns an Cisco::Reconfig object representing the last word on the
suceeding line of the current configuration block.
.Sp
When used at the beginning of a block, it returns the last word of
the first line in the block.
.IP "\->\fBcontext()\fR" 4
.IX Item "->context()"
Returns the configuration object that represents the surounding context.
.Sp
.Vb 2
\&        # returns the "undefined" object
\&        $config\->context 
\&
\&        # returns $config
\&        $config\->get(\*(Aqinterface Loopback0\*(Aq)\->context 
\&
\&        # returns $config\->get(\*(Aqinterface Loopback0\*(Aq)
\&        $config\->get(\*(Aqinterface Loopback0\*(Aq, \*(Aqip address\*(Aq)\->context
.Ve
.Sp
\&\f(CW\*(C`context()\*(C'\fR always returns a configuration object.
.IP "\->\fBsubs()\fR" 4
.IX Item "->subs()"
For Cisco::Reconfig objects that represent a word in a line that introduces
a block of configuration items (such as most \f(CW\*(C`interface\*(C'\fR lines),
the \f(CW\*(C`subs()\*(C'\fR function returns an Cisco::Reconfig object that represents the
contents of the block.
.Sp
If the Cisco::Reconfig object in question does not represent the start of a
configuration block, the \*(L"undefined\*(R" object is returned.
.IP "\->\fBkids()\fR" 4
.IX Item "->kids()"
For Cisco::Reconfig objects that do not uniquely specify a single line
(ie: \f(CW\*(C`! \-\*(C'\fR\fBsingle()\fR>), the \->\fBkids()\fR method will return an array
of objects representing the possible following words.
.Sp
If there is only one possibility, that one possibility is returned.
.Sp
If the Cisco::Reconfig object represents the last word on a configuration line
then that word is returned.
.SH "MISCELLANEOUS METHODS"
.IX Header "MISCELLANEOUS METHODS"
.IP "\->\fBtext()\fR" 4
.IX Item "->text()"
Returns the text from the original configuration file (in original
order) of all of the lines that could follow from the current Cisco::Reconfig
object.
.Sp
When the invoking Cisco::Reconfig object represents a single line \f(CW\*(C`text()\*(C'\fR
returns that line.  When the invoking Cisco::Reconfig object represents a 
block \f(CW\*(C`text()\*(C'\fR returns the entire block.  When the Cisco::Reconfig object
represents a word with multiple possible completions, \f(CW\*(C`text()\*(C'\fR
returns all the completions.
.IP "\->\fBalltext()\fR" 4
.IX Item "->alltext()"
Returns the text from the original configuration file of all the lines that could
follow from the current Cisco::Reconfig object and all lines that are introduced
by the current object.
.Sp
To get the text of all interface definitions in their entirety, use;
.Sp
.Vb 1
\&        $config\->get(\*(Aqinterface\*(Aq)\->alltext
.Ve
.IP "\->\fBsetcontext()\fR" 4
.IX Item "->setcontext()"
Returns an array of configuration lines that define the block
surrounding the invoking object.
.IP "\->\fBunsetcontext()\fR" 4
.IX Item "->unsetcontext()"
Returns an array of the word \f(CW\*(C`exit\*(C'\fR repeated as many times as
nessasary to undo a \f(CW\*(C`setcontext()\*(C'\fR.
.IP "\->\fBblock()\fR" 4
.IX Item "->block()"
Returns true if the object represents a whole configuration block.
.SH "TWEAKS"
.IX Header "TWEAKS"
Some cisco configurations have a minus one indent beginning with the
\&\f(CW\*(C`class\*(C'\fR keyword.  This exception is matched and handled.  To change the
regex for what is accepted for a minus-one indent, override
\&\f(CW$Cisco::Reconfig::allow_minus_one_indent\fR to a new regex.  Set to \f(CW\*(C`undef\*(C'\fR
to disable this override.
.PP
Some cisco configurations have a plus one indent beginning with the
\&\f(CW\*(C`service\-index\*(C'\fR keyword.  This exception is matched and handled.  To change the
regex for what is accepted for a plus-one indent, override
\&\f(CW$Cisco::Reconfig::allow_plus_one_indent\fR to a new regex.  Set to \f(CW\*(C`undef\*(C'\fR
to disable this override.
.PP
If you encounter other broken indents, please let the maintiner know.  If it
can be handled with the above overrides, do so.  If it cannot, you can change
\&\f(CW$Cisco::Reconfig::bad_indent_policy\fR to \f(CW\*(C`WARN\*(C'\fR or \f(CW\*(C`IGNORE\*(C'\fR.  The default
behavior is to die.
.SH "OVERLOADING"
.IX Header "OVERLOADING"
Two operators are overloaded: boolean tests and stringification.
Cisco::Reconfig objects booleanify as true if they are the special undefined
objects.  Cisco::Reconfig objects stringify as their text lines.
.SH "CAVEATS"
.IX Header "CAVEATS"
Since Cisco::Reconfig doesn't really understand Cisco configuration files
it can't know things that you might think it should.
.PP
For example, it doesn't know that \f(CW\*(C`interface Serial0\*(C'\fR is the
same as \f(CW\*(C`int ser 0\*(C'\fR nor even \f(CW\*(C`interface Serial 0\*(C'\fR.  Be very
careful about where Cisco's actually put spaces and where they 
don't.
.PP
No attempt has been made to make this module particularly fast
or efficient for the computer.
.PP
Cisco::Reconfig objects don't automatically garbage collect themselves because
they are highly self-referrential.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2002\-2010 David Muir Sharnoff <cpan@dave.sharnoff.org>
Copyright (C) 2011\-2012 Google, Inc.
This module may be licensed on the same terms as Perl itself.
