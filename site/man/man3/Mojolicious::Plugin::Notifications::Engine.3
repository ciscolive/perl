.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Notifications::Engine 3"
.TH Mojolicious::Plugin::Notifications::Engine 3 "2019-05-14" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Notifications::Engine \- Abstract Class for Notification Engines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Mojolicious::Plugin::Notifications::MyEngine;
\&  use Mojo::Base \*(AqMojolicious::Plugin::Notifications::Engine\*(Aq;
\&
\&  # Define notifications helper
\&  sub notifications {
\&    my ($self, $c, $notifications) = @_;
\&
\&    my $string = \*(Aq\*(Aq;
\&    foreach (@$notifications) {
\&      $string .= \*(Aq<blink class="\*(Aq . $_\->[0] . \*(Aq">\*(Aq . $_\->[\-1] . \*(Aq</blink>\*(Aq;
\&    };
\&    return $c\->b($string);
\&  };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::Notifications::Engine is an abstract class
for creating notification engines. It is meant to be used as the base
of notification engine classes.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::Notifications::Engine inherits all methods
from Mojolicious::Plugin and implements the following new ones.
.SS "register"
.IX Subsection "register"
.Vb 4
\&  sub register {
\&    my ($self, $app, $param) = @_;
\&    # ...
\&  };
.Ve
.PP
Called when the engine is registered.
This by default does nothing, but the engine may define assets, helpers, hooks etc.
overriding this method.
The optional parameter will be passed as defined in the registration.
.SS "scripts"
.IX Subsection "scripts"
.Vb 2
\&  $self\->scripts(\*(Aq/mybasescript.js\*(Aq, \*(Aq/myscript.js\*(Aq);
\&  print $self\->scripts;
.Ve
.PP
Add further script assets, to be used by the
scripts helper.
.SS "styles"
.IX Subsection "styles"
.Vb 2
\&  $self\->styles(\*(Aq/mystyles.css\*(Aq, \*(Aq/mycolors.css\*(Aq);
\&  print $self\->styles;
.Ve
.PP
Add further style assets, to be used by the
styles helper.
.SS "notifications"
.IX Subsection "notifications"
.Vb 3
\&  # Define notifications method
\&  sub notifications {
\&    my ($self, $c, $notifications) = @_;
\&
\&    my $string = \*(Aq\*(Aq;
\&    foreach my $note (@$notifications) {
\&      $string .= \*(Aq<blink class="\*(Aq . $note\->[0] . \*(Aq">\*(Aq . $note\->[\-1] . \*(Aq</blink>\*(Aq;
\&    };
\&    return $c\->b($string);
\&  };
.Ve
.PP
Create a notification method.
.PP
The \f(CW\*(C`notifications\*(C'\fR method will be called whenever notifications are rendered.
The first parameter passed is the plugin object, the second parameter is the current
controller object and the third parameter is a Mojo::Collection object containing all
notifications as array references.
.PP
The first element of the notification is the
notification type, the last element is the message. An optional second element may
contain further parameters in a hash reference.
.PP
To support confirmations, it is necessary to support the parameters \f(CW\*(C`ok\*(C'\fR and \f(CW\*(C`cancel\*(C'\fR.
If not, it is recommended to log a warning, that confirmations are not supported
by the engine.
.PP
.Vb 1
\&  %= notifications \*(AqMyEngine\*(Aq, \-no_include
.Ve
.PP
Possible flags (boolean parameters marked with a dash) are passed as a hash reference.
All other parameters passed to the notifications helper are simply appended.
.PP
The bundled engines can serve as good examples on how
to write an engine, especially the simple
\&\s-1HTML\s0 engine.
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
.Vb 1
\&  https://github.com/Akron/Mojolicious\-Plugin\-Notifications
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2014\-2018, Nils Diewald <http://nils-diewald.de/>.
.PP
This program is free software, you can redistribute it
and/or modify it under the terms of the Artistic License version 2.0.
