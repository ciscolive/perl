.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::NaCl::Sodium::shorthash 3"
.TH Crypt::NaCl::Sodium::shorthash 3 "2015-12-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::NaCl::Sodium::shorthash \- Short\-input hashing (SipHash\-2\-4)
.SH "VERSION"
.IX Header "VERSION"
version 1.0.8.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Crypt::NaCl::Sodium qw( :utils );
\&
\&    # for converting to 64\-bit integers
\&    use Math::BigInt;
\&
\&    my $crypto_shorthash = Crypt::NaCl::Sodium\->shorthash();
\&
\&    my ($key, $mac, $msg);
\&
\&    # generate secret key
\&    $key = $crypto_shorthash\->keygen();
\&
\&    # list of short file names for which we are computing the checksums
\&    my @files = ...;
\&
\&    for my $file ( @files ) {
\&        my $mac = $crypto_shorthash\->mac( $file, $key );
\&
\&        # MAC is 64\-bit string
\&        print "$file\et", $mac\->to_hex, "\en";
\&
\&        # which can be converted to 64\-bit integer
\&        print "$file\et", Math::BigInt\->from_hex($mac\->to_hex), "\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Many applications and programming language implementations were
recently found to be vulnerable to denial-of-service
attacks when a hash function with weak security guarantees,
such as \fIMurmurhash 3\fR, was used to construct a hash table.
.PP
In order to address this, \f(CW\*(C`crypto_shorthash\*(C'\fR outputs short but
unpredictable (without knowing the secret key) values suitable
for picking a list in a hash table for a given key.
.PP
This function is optimized for short inputs.
.PP
The output of this function is only 64 bits. Therefore, it
should not be considered collision-resistant.
.PP
Use cases:
.IP "\(bu" 4
Hash tables
.IP "\(bu" 4
Probabilistic data structures such as Bloom filters
.IP "\(bu" 4
Integrity checking in interactive protocols
.SH "METHODS"
.IX Header "METHODS"
.SS "keygen"
.IX Subsection "keygen"
.Vb 1
\&    my $key = $crypto_shorthash\->keygen();
.Ve
.PP
Helper method to generate a random key to be used by \f(CW$crypto_shorthash\fR.
.PP
The length of the \f(CW$key\fR equals \*(L"\s-1KEYBYTES\*(R"\s0.
.PP
\&\fB\s-1NOTE:\s0\fR keep the key confidential.
.PP
Returns Data::BytesLocker object.
.SS "mac"
.IX Subsection "mac"
.Vb 1
\&    my $mac = $crypto_shorthash\->mac( $msg, $key );
.Ve
.PP
Computes the \s-1MAC\s0 of the \f(CW$msg\fR using given \f(CW$key\fR.
.PP
The length of the \f(CW$mac\fR equals \*(L"\s-1BYTES\*(R"\s0.
.PP
Returns Data::BytesLocker object.
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.SS "\s-1KEYBYTES\s0"
.IX Subsection "KEYBYTES"
.Vb 1
\&    my $key_length = $crypto_shorthash\->KEYBYTES;
.Ve
.PP
Returns the length of key.
.SS "\s-1BYTES\s0"
.IX Subsection "BYTES"
.Vb 1
\&    my $mac_length = $crypto_shorthash\->BYTES;
.Ve
.PP
Returns the length of \s-1MAC.\s0
.SH "SECURITY MODEL"
.IX Header "SECURITY MODEL"
\&\f(CW\*(C`crypto_shorthash\*(C'\fR uses \fISipHash\-2\-4\fR pseudorandom hash optimized for speed on
short messages.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Data::BytesLocker \- guarded data storage
.IP "\(bu" 4
SipHash: a fast short-input \s-1PRF\s0 <https://131002.net/siphash/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex J. G. Burzyński <ajgb@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2015 by Alex J. G. Burzyński <ajgb@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
