.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mo::Features 3"
.TH Mo::Features 3 "2016-07-06" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Mo Features"
.IX Header "Mo Features"
Mo is absolutely minimal, but it let's you easily add many features like this:
.PP
.Vb 1
\&    use Mo qw[default builder other features];
.Ve
.PP
This will load the modules Mo::default, etc, and have them modify your Mo
reality.
.PP
Here's a list of the current feature modules that ship with Mo:
.IP "Mo::builder" 4
.IX Item "Mo::builder"
Add \f(CW\*(C`builder\*(C'\fR feature to \f(CW\*(C`has\*(C'\fR.
.IP "Mo::chain" 4
.IX Item "Mo::chain"
Add \f(CW\*(C`chain\*(C'\fR feature to \f(CW\*(C`has\*(C'\fR.
.IP "Mo::coerce" 4
.IX Item "Mo::coerce"
Add \f(CW\*(C`coerce\*(C'\fR feature to \f(CW\*(C`has\*(C'\fR.
.IP "Mo::default" 4
.IX Item "Mo::default"
Add \f(CW\*(C`default\*(C'\fR feature to \f(CW\*(C`has\*(C'\fR.
.IP "Mo::exporter" 4
.IX Item "Mo::exporter"
Exporter for Mo::Inline usage. Only works with inlined Mo.
.IP "Mo::import" 4
.IX Item "Mo::import"
Finalizer for Mo::Inline usage. Only works with inlined Mo.
.IP "Mo::is" 4
.IX Item "Mo::is"
Add \f(CW\*(C`is\*(C'\fR feature to \f(CW\*(C`has\*(C'\fR.
.IP "Mo::Moose" 4
.IX Item "Mo::Moose"
Use Moose in place of Mo for everything.
.IP "Mo::Mouse" 4
.IX Item "Mo::Mouse"
Use Mouse in place of Mo for everything.
.IP "Mo::option" 4
.IX Item "Mo::option"
Add \f(CW\*(C`option\*(C'\fR feature to \f(CW\*(C`has\*(C'\fR.
.IP "Mo::required" 4
.IX Item "Mo::required"
Add \f(CW\*(C`required\*(C'\fR feature to \f(CW\*(C`has\*(C'\fR.
.IP "Mo::xs" 4
.IX Item "Mo::xs"
Use \s-1XS\s0 modules to make things faster.
.Sp
Requires Class::XSAccessor.
.PP
There are also feature modules that ship outside of the Mo distribution. You
can search \s-1CPAN,\s0 but here's a starter list:
.IP "Mo::xxx" 4
.IX Item "Mo::xxx"
Exports the \s-1XXX\s0 functions for debugging. Handy!
.SH "NOTE"
.IX Header "NOTE"
Don't assume that all feature modules will work together. Sometimes the order
you specify them in may affect how they work together. Read the feature docs
and test your assumptions.
.PP
We continue to make more and more things work together, and when they don't we
try to document it. Let us know if you feel like something critical is broken.
See Mo::Hacking.
