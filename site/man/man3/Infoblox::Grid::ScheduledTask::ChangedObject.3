.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::ScheduledTask::ChangedObject 3"
.TH Infoblox::Grid::ScheduledTask::ChangedObject 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::ScheduledTask::ChangedObject \- Scheduled Task Changed Object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Scheduled Task Changed Object is used to retrieve information about objects with changes that were scheduled in Infoblox::Grid::ScheduledTask.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::Grid::ScheduledTask::ChangedObject is a read-only object and does not require manual construction.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to a ChangedObject object.
.SS "Infoblox::Grid::ScheduledTask\->changed_objects( )"
.IX Subsection "Infoblox::Grid::ScheduledTask->changed_objects( )"
.RS 4
Use this function to retrieve the changed objects list. See Infoblox::Grid::ScheduledTask\->\fBchanged_objects()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Retrieve the list of ScheduledTask objects
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::ScheduledTask",
\&     submitter => "admin" );
\&
\& my $task = $retrieved_objs[0];
\&
\& # get ChangedObject
\& my $changed_objects = $task\->changed_objects();
\& my $obj = $changed_objects\->[0];
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to retrieve the attribute values of a ChangedObject object.
.SS "action( )"
.IX Subsection "action( )"
.RS 4
Use this method to retrieve the operation performed on the objects.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the operation in string format. Possible values are:
.RS 4
.IP "\(bu" 4
\&\*(L"Network Discovery\*(R" for network_discovery_control( ) service,
.IP "\(bu" 4
\&\*(L"Restart Services\*(R" for restart( ) services,
.IP "\(bu" 4
\&\*(L"Add\*(R", \*(L"Modify\*(R", \*(L"Delete\*(R" for all other objects.
.RE
.RS 4
.RE
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get action
\& my $action = $changed_object\->action();
.Ve
.RE
.RS 4
.RE
.SS "changed_properties( )"
.IX Subsection "changed_properties( )"
.RS 4
Use this method to retrieve the list of changed properties in the object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a reference to an array of strings. Each string in the array describes the changes. The descriptions are similiar to the entries in the Change Audit Log column in the \s-1GUI.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Get changed_properties value
\& my $changed_properties = $changed_object\->changed_properties();
\& for (@$changed_properties) {
\&     print $_,"\en";
\& }
.Ve
.RE
.RS 4
.RE
.SS "object_name( )"
.IX Subsection "object_name( )"
.RS 4
Use this method to retrieve the name of the changed object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the object name in string format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get object_name
\& my $object_name = $changed_object\->object_name();
.Ve
.RE
.RS 4
.RE
.SS "object_type( )"
.IX Subsection "object_type( )"
.RS 4
Use this method to retrieve the type of the changed object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns an object type in string format, such as \*(L"A Record\*(R" or \*(L"Shared \s-1TXT\s0 Record\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get object_type
\& my $object_type = $changed_object\->object_type();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a ScheduledTask object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\&                );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& my $network = Infoblox::DHCP::Network\->new(
\&     network => "10.0.0.0/24",
\& );
\& unless ($network) {
\&     die("Construct Network failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network created successfully\en";
\&
\& $session\->add($network)
\&     or die("Add Network object failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object added to server successfully\en";
.Ve
.PP
\&\fB#Create a ScheduledTask object\fR
.PP
.Vb 10
\& # Create a fixed address
\& my $fixed_addr = Infoblox::DHCP::FixedAddr\->new(
\&     ipv4addr    => \*(Aq10.0.0.3\*(Aq,
\&     mac         => \*(Aq11:22:33:44:55:66\*(Aq
\& );
\& unless ($fixed_addr) {
\&     die("Construct FixedAddr failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "FixedAddr created successfully\en";
\&
\& # Schedule the addition of a fixed address
\& $session\->add($fixed_addr, scheduled_at => "2020\-01\-01T14:52:00Z")
\&     or die("Schedule fixed address add failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "Fixed address add scheduled successfully\en";
.Ve
.PP
\&\fB#Search for a ScheduledTask\fR
.PP
.Vb 5
\& my @retrieved_objs = $session\->search(
\&     object    => "Infoblox::Grid::ScheduledTask",
\&     submitter => "admin"
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Search for a ScheduledTask object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search for a ScheduledTask object found at least 1 matching entry\en";
\& my $objs = $object\->changed_objects;
\& my $changed_obj = $objs\->[0];
\& my $action = $changed_obj\->action();
\& my $object_name= $changed_obj\->object_name();
\& my $object_type= $changed_obj\->object_type();
\& my $changed_properties= $changed_obj\->changed_properties();
\& my $property1 = $changed_properties\->[0];
.Ve
.PP
\&\fB#Get and modify a ScheduledTask object\fR
.PP
.Vb 6
\& #Get the ScheduledTask object from Infoblox appliance through a session
\& my @retrieved_objs = $session\->get(
\&     object         => "Infoblox::Grid::ScheduledTask",
\&     scheduled_time => "2020\-01\-01T14:52:00Z"
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Get ScheduledTask object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get ScheduledTask object found at least 1 matching entry\en";
\&
\& #Modify the ScheduledTask object
\& $object\->scheduled_time("2020\-02\-01T14:52:00Z");
\&
\& #Apply the changes.
\& $session\->modify($object)
\&     or die("Modify ScheduledTask object failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "ScheduledTask object modified successfully \en";
.Ve
.PP
\&\fB#Remove a ScheduledTask object\fR
.PP
.Vb 11
\& #Get the ScheduledTask object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::ScheduledTask",
\&     action => "Add"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get ScheduledTask object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get ScheduledTask object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove ScheduledTask object failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "ScheduledTask object removed successfully \en";
.Ve
.PP
\&\fB#Cleanup\fR
.PP
.Vb 11
\& #Get the Network object through the session
\& my @retrieved_objs = $session\->get(
\&     object  => "Infoblox::DHCP::Network",
\&     network => "10.0.0.0/24"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Network object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Network object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove Network object failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::ScheduledTask, Infoblox::Grid::ScheduledTask\->\fBchanged_objects()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
