.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::Attributes 3"
.TH Data::Object::Attributes 3 "2020-03-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::Attributes
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Attribute Builder for Perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package Example;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  has \*(Aqdata\*(Aq;
\&
\&  package main;
\&
\&  my $example = Example\->new;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides options for defining class attributes. Specifically, this
package wraps the \f(CW\*(C`has\*(C'\fR attribute keyword and adds shortcuts and enhancements.
If no directives are specified, the attribute is declared as \f(CW\*(C`read\-write\*(C'\fR and
\&\f(CW\*(C`optional\*(C'\fR.
.SH "SCENARIOS"
.IX Header "SCENARIOS"
This package supports the following scenarios:
.SS "has"
.IX Subsection "has"
.Vb 1
\&  package Example::Has;
\&
\&  use Moo;
\&
\&  has \*(Aqdata\*(Aq => (
\&    is => \*(Aqro\*(Aq,
\&    isa => sub { die }
\&  );
\&
\&  package Example::HasData;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  extends \*(AqExample::Has\*(Aq;
\&
\&  has \*(Aq+data\*(Aq => (
\&    is => \*(Aqro\*(Aq,
\&    isa => sub { 1 }
\&  );
\&
\&  package main;
\&
\&  my $example = Example::HasData\->new(data => time);
.Ve
.PP
This package supports the \f(CW\*(C`has\*(C'\fR keyword function and all of its
configurations. See the Moo documentation for more details.
.SS "has-bld"
.IX Subsection "has-bld"
.Vb 1
\&  package Example::HasBld;
\&
\&  use Moo;
\&  use routines;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    bld => 1
\&  );
\&
\&  method _build_data() {
\&
\&    return time;
\&  }
\&
\&  package main;
\&
\&  my $example = Example::HasBld\->new;
.Ve
.PP
This package supports the \f(CW\*(C`bld\*(C'\fR and \f(CW\*(C`builder\*(C'\fR directives, expects a \f(CW1\fR, a
method name, or coderef and builds the attribute value if it wasn't provided to
the constructor. See the Moo documentation for more details.
.SS "has-clr"
.IX Subsection "has-clr"
.Vb 1
\&  package Example::HasClr;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    clr => 1
\&  );
\&
\&  package main;
\&
\&  my $example = Example::HasClr\->new(data => time);
\&
\&  # $example\->clear_data;
.Ve
.PP
This package supports the \f(CW\*(C`clr\*(C'\fR and \f(CW\*(C`clearer\*(C'\fR directives expects a \f(CW1\fR or a
method name of the clearer method. See the Moo documentation for more
details.
.SS "has-crc"
.IX Subsection "has-crc"
.Vb 1
\&  package Example::HasCrc;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    crc => sub {\*(Aq0\*(Aq}
\&  );
\&
\&  package main;
\&
\&  my $example = Example::HasCrc\->new(data => time);
.Ve
.PP
This package supports the \f(CW\*(C`crc\*(C'\fR and \f(CW\*(C`coerce\*(C'\fR directives denotes whether an
attribute's value should be automatically coerced. See the Moo documentation
for more details.
.SS "has-def"
.IX Subsection "has-def"
.Vb 1
\&  package Example::HasDef;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    def => \*(Aq0\*(Aq
\&  );
\&
\&  package main;
\&
\&  my $example = Example::HasDef\->new;
.Ve
.PP
This package supports the \f(CW\*(C`def\*(C'\fR and \f(CW\*(C`default\*(C'\fR directives expects a
non-reference or a coderef to be used to build a default value if one is not
provided to the constructor. See the Moo documentation for more details.
.SS "has-hnd"
.IX Subsection "has-hnd"
.Vb 1
\&  package Example::Time;
\&
\&  use Moo;
\&  use routines;
\&
\&  method maketime() {
\&
\&    return time;
\&  }
\&
\&  package Example::HasHnd;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    hnd => [\*(Aqmaketime\*(Aq]
\&  );
\&
\&  package main;
\&
\&  my $example = Example::HasHnd\->new(data => Example::Time\->new);
.Ve
.PP
This package supports the \f(CW\*(C`hnd\*(C'\fR and \f(CW\*(C`handles\*(C'\fR directives denotes the methods
created on the object which dispatch to methods available on the attribute's
object. See the Moo documentation for more details.
.SS "has-is"
.IX Subsection "has-is"
.Vb 1
\&  package Example::HasIs;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq
\&  );
\&
\&  package main;
\&
\&  my $example = Example::HasIs\->new(data => time);
.Ve
.PP
This package supports the \f(CW\*(C`is\*(C'\fR directive, used to denote whether the attribute
is read-only or read-write. See the Moo documentation for more details.
.SS "has-isa"
.IX Subsection "has-isa"
.Vb 1
\&  package Example::HasIsa;
\&
\&  use Moo;
\&  use registry;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    isa => \*(AqStr\*(Aq # e.g. Types::Standard::Str
\&  );
\&
\&  package main;
\&
\&  my $example = Example::HasIsa\->new(data => time);
.Ve
.PP
This package supports the \f(CW\*(C`isa\*(C'\fR directive, used to define the type constraint
to validate the attribute against. See the Moo documentation for more
details.
.SS "has-lzy"
.IX Subsection "has-lzy"
.Vb 1
\&  package Example::HasLzy;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    def => sub {time},
\&    lzy => 1
\&  );
\&
\&  package main;
\&
\&  my $example = Example::HasLzy\->new;
.Ve
.PP
This package supports the \f(CW\*(C`lzy\*(C'\fR and \f(CW\*(C`lazy\*(C'\fR directives denotes whether the
attribute will be constructed on-demand, or on-construction. See the Moo
documentation for more details.
.SS "has-mod"
.IX Subsection "has-mod"
.Vb 1
\&  package Example::HasNomod;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqrw\*(Aq,
\&    opt => 1
\&  );
\&
\&  package Example::HasMod;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  extends \*(AqExample::HasNomod\*(Aq;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    req => 1,
\&    mod => 1
\&  );
\&
\&  package main;
\&
\&  my $example = Example::HasMod\->new;
.Ve
.PP
This package supports the \f(CW\*(C`mod\*(C'\fR and \f(CW\*(C`modify\*(C'\fR directives denotes whether a
pre-existing attribute's definition is being modified. This ability is not
supported by the Moo object superclass.
.SS "has-new"
.IX Subsection "has-new"
.Vb 1
\&  package Example::HasNew;
\&
\&  use Moo;
\&  use routines;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    new => 1
\&  );
\&
\&  fun new_data($self) {
\&
\&    return time;
\&  }
\&
\&  package main;
\&
\&  my $example = Example::HasNew\->new(data => time);
.Ve
.PP
This package supports the \f(CW\*(C`new\*(C'\fR directive, if truthy, denotes that the
attribute will be constructed on-demand, i.e. is lazy, with a builder named
new_{attribute}. This ability is not supported by the Moo object superclass.
.SS "has-opt"
.IX Subsection "has-opt"
.Vb 1
\&  package Example::HasOpt;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    opt => 1
\&  );
\&
\&  package main;
\&
\&  my $example = Example::HasOpt\->new(data => time);
.Ve
.PP
This package supports the \f(CW\*(C`opt\*(C'\fR and \f(CW\*(C`optional\*(C'\fR directives, used to denote if
an attribute is optional or required. See the Moo documentation for more
details.
.SS "has-pre"
.IX Subsection "has-pre"
.Vb 1
\&  package Example::HasPre;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    pre => 1
\&  );
\&
\&  package main;
\&
\&  my $example = Example::HasPre\->new(data => time);
.Ve
.PP
This package supports the \f(CW\*(C`pre\*(C'\fR and \f(CW\*(C`predicate\*(C'\fR directives expects a \f(CW1\fR or
a method name and generates a method for checking the existance of the
attribute. See the Moo documentation for more details.
.SS "has-rdr"
.IX Subsection "has-rdr"
.Vb 1
\&  package Example::HasRdr;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    rdr => \*(Aqget_data\*(Aq
\&  );
\&
\&  package main;
\&
\&  my $example = Example::HasRdr\->new(data => time);
.Ve
.PP
This package supports the \f(CW\*(C`rdr\*(C'\fR and \f(CW\*(C`reader\*(C'\fR directives denotes the name of
the method to be used to \*(L"read\*(R" and return the attribute's value. See the
Moo documentation for more details.
.SS "has-req"
.IX Subsection "has-req"
.Vb 1
\&  package Example::HasReq;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    req => 1 # required
\&  );
\&
\&  package main;
\&
\&  my $example = Example::HasReq\->new(data => time);
.Ve
.PP
This package supports the \f(CW\*(C`req\*(C'\fR and \f(CW\*(C`required\*(C'\fR directives, used to denote if
an attribute is required or optional. See the Moo documentation for more
details.
.SS "has-tgr"
.IX Subsection "has-tgr"
.Vb 1
\&  package Example::HasTgr;
\&
\&  use Moo;
\&  use routines;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    tgr => 1
\&  );
\&
\&  method _trigger_data() {
\&    $self\->{triggered} = 1;
\&
\&    return $self;
\&  }
\&
\&  package main;
\&
\&  my $example = Example::HasTgr\->new(data => time);
.Ve
.PP
This package supports the \f(CW\*(C`tgr\*(C'\fR and \f(CW\*(C`trigger\*(C'\fR directives expects a \f(CW1\fR or a
coderef and is executed whenever the attribute's value is changed. See the
Moo documentation for more details.
.SS "has-use"
.IX Subsection "has-use"
.Vb 1
\&  package Example::HasUse;
\&
\&  use Moo;
\&  use routines;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    use => [\*(Aqservice\*(Aq, \*(Aqtime\*(Aq]
\&  );
\&
\&  method service($type, @args) {
\&    $self\->{serviced} = 1;
\&
\&    return time if $type eq \*(Aqtime\*(Aq;
\&  }
\&
\&  package main;
\&
\&  my $example = Example::HasUse\->new;
.Ve
.PP
This package supports the \f(CW\*(C`use\*(C'\fR directive denotes that the attribute will be
constructed on-demand, i.e. is lazy, using a custom builder meant to perform
service construction. This directive exists to provide a simple dependency
injection mechanism for class attributes. This ability is not supported by the
Moo object superclass.
.SS "has-wkr"
.IX Subsection "has-wkr"
.Vb 1
\&  package Example::HasWkr;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    wkr => 1
\&  );
\&
\&  package main;
\&
\&  my $data = do {
\&    my ($a, $b);
\&
\&    $a = { time => time };
\&    $b = { time => $a };
\&
\&    $a\->{time} = $b;
\&    $a
\&  };
\&
\&  my $example = Example::HasWkr\->new(data => $data);
.Ve
.PP
This package supports the \f(CW\*(C`wkr\*(C'\fR and \f(CW\*(C`weak_ref\*(C'\fR directives is used to denote if
the attribute's value should be weakened. See the Moo documentation for more
details.
.SS "has-wrt"
.IX Subsection "has-wrt"
.Vb 1
\&  package Example::HasWrt;
\&
\&  use Moo;
\&
\&  use Data::Object::Attributes;
\&
\&  has data => (
\&    is => \*(Aqro\*(Aq,
\&    wrt => \*(Aqset_data\*(Aq
\&  );
\&
\&  package main;
\&
\&  my $example = Example::HasWrt\->new;
.Ve
.PP
This package supports the \f(CW\*(C`wrt\*(C'\fR and \f(CW\*(C`writer\*(C'\fR directives denotes the name of
the method to be used to \*(L"write\*(R" and return the attribute's value. See the
Moo documentation for more details.
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/data-object-attributes/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/data-object-attributes/wiki>
.PP
Project <https://github.com/iamalnewkirk/data-object-attributes>
.PP
Initiatives <https://github.com/iamalnewkirk/data-object-attributes/projects>
.PP
Milestones <https://github.com/iamalnewkirk/data-object-attributes/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/data-object-attributes/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/data-object-attributes/issues>
