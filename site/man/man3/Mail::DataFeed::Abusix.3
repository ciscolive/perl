.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::DataFeed::Abusix 3"
.TH Mail::DataFeed::Abusix 3 "2020-06-17" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::DataFeed::Abusix \- Send SMTP transaction data to the Abusix transaction feed
.SH "VERSION"
.IX Header "VERSION"
version 1.20200617.1
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mail::DataFeed::Abusix;
\&
\&  my $abusix_feed = Mail::DataFeed::Abusix\->new(
\&    feed_name => \*(Aqtesting_feed\*(Aq,
\&    feed_dest => \*(Aqtest.endpoint.example.com:1234\*(Aq,
\&    feed_key => \*(Aqthis_is_a_secret\*(Aq,
\&  );
\&
\&  $abusix_feed\->port(25);
\&  $abusix_feed\->ip_address(\*(Aq1.2.3.4\*(Aq);
\&  $abusix_feed\->reverse_dns(\*(Aqtest.example.org\*(Aq);
\&  $abusix_feed\->helo(\*(Aqserver.example.org\*(Aq);
\&  $abusix_feed\->used_esmtp(1);
\&  $abusix_feed\->used_tls(1);
\&  $abusix_feed\->used_auth(0);
\&  $abusix_feed\->mail_from_domain(\*(Aqfrom.example.org\*(Aq);
\&
\&  $abusix_feed\->send();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Send \s-1SMTP\s0 transaction data via udp to the Abusix real-time transaction feed.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SS "\fInew(%args)\fP"
.IX Subsection "new(%args)"
.Vb 1
\&  Create a new Abusix feed object
\&
\&  Required args
\&
\&  * feed_name \- This identifies the feed to the collector.
\&  * feed_key \- This authenticates the feed data against the feed_name to the collector
\&  * feed_dest \-  The host or host:port where the data should be sent.
\&                 If the port is not specified then it defaults to port 12211.
\&                 Multiple destinations can be specified using comma, semicolon or whitespace to delimit the hosts.
\&                 If multiple hosts are specified then the data is sent to them all.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "\fIport($port)\fP"
.IX Subsection "port($port)"
.Vb 1
\&  Set the port used to connect to the SMTP server
.Ve
.SS "\fIip_address($ip_address)\fP"
.IX Subsection "ip_address($ip_address)"
.Vb 1
\&  Set the IP address (ipv4 or ipv6) connecting to the SMTP server
.Ve
.SS "\fIreverse_dns($hostname)\fP"
.IX Subsection "reverse_dns($hostname)"
.Vb 1
\&  Set the reverse DNS of the connecting IP address.
.Ve
.SS "\fIhelo($helo)\fP"
.IX Subsection "helo($helo)"
.Vb 1
\&  Set the HELO string used to connect to the SMTP server.
.Ve
.SS "\fI\fP\f(BIused_esmtp()\fP\fI\fP"
.IX Subsection "used_esmtp()"
.Vb 2
\&  Set to true if ESMTP (EHLO) was used in the connection.
\&  Set to false if SMTP (HELO) was used in the connection.
.Ve
.SS "\fI\fP\f(BIused_tls()\fP\fI\fP"
.IX Subsection "used_tls()"
.Vb 2
\&  Set to true if TLS was used in the connection.
\&  Set to false if TLS was NOT used in the connection.
.Ve
.SS "\fI\fP\f(BIused_auth()\fP\fI\fP"
.IX Subsection "used_auth()"
.Vb 2
\&  Set to true if SMTP authentication was used in the connection.
\&  Set to false if SMTP authentication was NOT used in the connection.
.Ve
.SS "\fI\fP\f(BImail_from_domain()\fP\fI\fP"
.IX Subsection "mail_from_domain()"
.Vb 1
\&  Set the mail from domain.
.Ve
.SS "\fI\fP\f(BIsend()\fP\fI\fP"
.IX Subsection "send()"
.Vb 1
\&  Send the report to abusix.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Marc Bradshaw.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
