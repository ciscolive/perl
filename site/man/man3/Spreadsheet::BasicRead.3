.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BasicRead 3"
.TH BasicRead 3 "2017-05-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::BasicRead \- Methods to easily read data from spreadsheets (.xls, .xlxs and .xlxm)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides methods for simple reading of a Excel spreadsheet row
at a time returning the row as an array of column values.
Properties can be set so that blank rows are skipped.  The heading
row can also be set so that reading always starts at this row which
is the first row of the sheet by default.
Properties can also be set to skip the heading row.
.PP
.Vb 1
\& Note 1. Leading and trailing white space is removed from cell values.
\&
\& Note 2. Row and column references are zero (0) indexed. That is cell
\&         A1 is row 0, column 0
\&
\& Note 3. Now handles .xlxs and .xlsm files
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Spreadsheet::BasicRead;
\&
\& my $xlsFileName = \*(AqTest.xls\*(Aq;
\&
\& my $ss = new Spreadsheet::BasicRead($xlsFileName) ||
\&    die "Could not open \*(Aq$xlsFileName\*(Aq: $!";
\&
\& # Print the row number and data for each row of the
\& # spreadsheet to stdout using \*(Aq|\*(Aq as a separator
\& my $row = 0;
\& while (my $data = $ss\->getNextRow())
\& {
\&    $row++;
\&    print join(\*(Aq|\*(Aq, $row, @$data), "\en";
\& }
\&
\& # Print the number of sheets
\& print "There are ", $ss\->numSheets(), " in the spreadsheet\en";
\&
\& # Set the heading row to 4
\& $ss\->setHeadingRow(4);
\&
\& # Skip the first data line, it\*(Aqs assumed to be a heading
\& $ss\->skipHeadings(1);
\&
\& # Print the name of the current sheet
\& print "Sheet name is ", $ss\->currentSheetName(), "\en";
\&
\& # Reset back to the first row of the sheet
\& $ss\->getFirstRow();
.Ve
.SH "REQUIRED MODULES"
.IX Header "REQUIRED MODULES"
The following modules are required:
.PP
.Vb 2
\& Spreadsheet::ParseExcel
\& Spreadsheet::XLSX
.Ve
.PP
Optional module File::Log can be used to allow simple logging of errors.
.SH "METHODS"
.IX Header "METHODS"
There are no class methods, the object methods are described below.
Private class method start with the underscore character '_' and
should be treated as \fIPrivate\fR.
.SS "new"
.IX Subsection "new"
Called to create a new BasicReadNamedCol object.  The arguments can
be either a single string (see '\s-1SYNOPSIS\s0')
which is taken as the filename of the spreadsheet of as named arguments.
.PP
.Vb 7
\& eg.  my $ss = Spreadsheet::BasicReadNamedCol\->new(
\&                  fileName      => \*(AqMyExcelSpreadSheet.xls\*(Aq,
\&                  skipHeadings  => 1,
\&                  skipBlankRows => 1,
\&                  log           => $log,
\&                  oldCell       => 1,
\&              );
.Ve
.PP
The following named arguments are available:
.IP "skipHeadings" 4
.IX Item "skipHeadings"
Don't output the headings line in the first call to
\&'getNextRow' if true.  This is the first row of the
spreadsheet unless the setHeadingRow function has been called to set
the heading row.
.IP "skipBlankRows" 4
.IX Item "skipBlankRows"
Skip blank lines in the spreadsheet if true.
.IP "log" 4
.IX Item "log"
Use the File::Log object to log exceptions.
If not provided error conditions are logged to \s-1STDERR\s0
.IP "fileName" 4
.IX Item "fileName"
The name (and optionally path) of the spreadsheet file to process.
.IP "oldCell" 4
.IX Item "oldCell"
Empty cells returned undef pre version 1.5.  They now return ''.
.Sp
The old functionality can be turned on by setting argument \fIoldCell\fR to true
.PP
\&\fBNote that new will die if the spreadsheet can not be successfully opened.\fR
As such you may wish to wrap the call to new in a eval block. See xlsgrep|EXAMPLE \s-1APPLICATIONS\s0
for an example of when this might be desirable.
.SS "\fBgetNextRow()\fP"
.IX Subsection "getNextRow()"
Get the next row of data from the spreadsheet.  The data is
returned as an array reference.
.PP
.Vb 1
\& eg.  $rowDataArrayRef = $ss\->getNextRow();
.Ve
.SS "\fBnumSheets()\fP"
.IX Subsection "numSheets()"
Returns the number of sheets in the spreadsheet
.SS "openSpreadsheet(fileName)"
.IX Subsection "openSpreadsheet(fileName)"
Open a new spreadsheet file and set the current sheet to the first
sheet.  The name and optionally path of the
spreadsheet file is a required argument to this method.
.SS "\fBcurrentSheetNum()\fP"
.IX Subsection "currentSheetNum()"
Returns the current sheet number or undef if there is no current sheet.
\&'setCurrentSheetNum' can be called to set the
current sheet.
.SS "\fBcurrentSheetName()\fP"
.IX Subsection "currentSheetName()"
Return the name of the current sheet or undef if the current sheet is
not defined.  see 'setCurrentSheetNum'.
.SS "setCurrentSheetNum(num)"
.IX Subsection "setCurrentSheetNum(num)"
Sets the current sheet to the integer value 'num' passed as the required
argument to this method.  Note that this should not be bigger than
the value returned by 'numSheets'.
.SS "\fBgetNextSheet()\fP"
.IX Subsection "getNextSheet()"
Returns the next sheet \*(L"ssBook\*(R" object or undef if there are no more sheets
to process.  If there is no current sheet defined the first sheet
is returned.
.SS "\fBgetFirstSheet()\fP"
.IX Subsection "getFirstSheet()"
Returns the first sheet \*(L"ssBook\*(R" object.
.SS "cellValue(row, col)"
.IX Subsection "cellValue(row, col)"
Returns the value of the cell defined by (row, col)in the current sheet.
.SS "\fBgetFirstRow()\fP"
.IX Subsection "getFirstRow()"
Returns the first row of data from the spreadsheet (possibly skipping the
column headings  'skipHeadings' as an array reference.
.SS "setHeadingRow(rowNumber)"
.IX Subsection "setHeadingRow(rowNumber)"
Sets the effective minimum row for the spreadsheet to 'rowNumber', since it
is assumed that the heading is on this row and anything above the heading is
not relavent.
.PP
\&\fBNote:\fR the row (and column) numbers are zero indexed.
.SS "setRow(rowNumber)"
.IX Subsection "setRow(rowNumber)"
Sets the row to be returned by the next call to 'getNextRow'.
Note that if the heading row has been defined and the row number set with setRow
is less than the heading row, data will be returned from the heading row regardless,
unless skip heading row has been set, in which case it will be the row after the
heading row.
.SS "\fBgetRowNumber()\fP"
.IX Subsection "getRowNumber()"
Returns the number of the current row (that has been retrieved).  Note that
row numbers are zero indexed.  If a row has not been retrieved as yet, \-1 is
returned.
.SS "logexp(message)"
.IX Subsection "logexp(message)"
Logs an exception message (can be a list of strings) using the File::Log
object if it was defined and then calls die message.
.SS "logmsg(debug, message)"
.IX Subsection "logmsg(debug, message)"
If a File::Log object was passed as a named argument 'new' and
if 'debug' (integer value) is equal to or greater than the current debug
Level (see File::Log) then the message is added to the log file.
.PP
If a File::Log object was not passed to new then the message is output to
\&\s-1STDERR.\s0
.SH "EXAMPLE APPLICATIONS"
.IX Header "EXAMPLE APPLICATIONS"
Two sample (but usefull) applications are included with this distribution.
.PP
The simplest is dumpSS.pl which will dump the entire contents of a spreadsheet
to \s-1STDOUT.\s0  Each sheet is preceeded by the sheet name (enclosed in ***) on
a line, followed by each row of the spreadsheet, with cell values separated by
the pipe '|' character.  There is no special handling provided for cells containing
the pipe character.
.PP
A more complete example is xlsgrep.  This application can be used to do a perl
pattern match for cell values within xls files in the current and sub directories.
There are no special grep flags, however this should not be a problem since perl's
pattern matching allows for most requirements within the search pattern.
.PP
.Vb 1
\& Usage is: xlsgrep.pl pattern
.Ve
.PP
To do a case insensative search for \*(L"Some value\*(R" in any xls file in the current directory
you would use:
.PP
.Vb 1
\& xlsgrep \*(Aq(?i)Some value\*(Aq
.Ve
.PP
For further details, see each applications \s-1POD.\s0
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
I would like to acknowledge the input and patches recieved from the following:
.PP
Ilia Lobsanov, Bryan Maloney, Bill (from Datacraft), nadim and D. Dewey Allen
.SH "KNOWN ISSUES"
.IX Header "KNOWN ISSUES"
None, however please contact the author at gng@cpan.org should you
find any problems and I will endevour to resolve then as soon as
possible.
.PP
If you have any enhancement suggestions please send me
an email and I will try to accommodate your suggestion.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Spreadsheet:ParseExcel on \s-1CPAN\s0 does all the hard work, thanks
Kawai Takanori (Hippo2000) kwitknr@cpan.org
.PP
The included applications dumpSS.pl and xlsgrep.pl
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\& Greg George, IT Technology Solutions P/L, Australia
\& Mobile: +61\-404\-892\-159, Email: gng@cpan.org
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 1999\- Greg George. All rights reserved. This
program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
.SH "VERSION"
.IX Header "VERSION"
This is version 1.12
.SH "UPDATE HISTORY"
.IX Header "UPDATE HISTORY"
.Vb 3
\& Revision 1.12  2017/05/01 Greg
\& \- Added handling of .xlxs & .xlxm files
\& \- Added utf8 conversion for .xls[x|m] files as well as decoding of html escapes &amp; &lt; and &gt;
\&
\& Revision 1.11  2012/04/10 11:08:42  Greg
\& \- Added handling of .xlxs files
\&
\& Revision 1.10  2006/04/30 05:35:13  Greg
\& \- added getRowNumber()
\&
\& Revision 1.9  2006/03/05 02:43:34  Greg
\& \- Update of Acknowledgments
\&
\& Revision 1.8  2006/03/05 02:31:41  Greg
\& \- Changes to cellValue return to cater for \*(AqGENERAL\*(Aq value sometimes returned from OpenOffice spreadsheets
\&   patch provided by Ilia Lobsanov <samogon@gmail.com>
\&   see http://www.annocpan.org/~KWITKNR/Spreadsheet\-ParseExcel\-0.2602/ParseExcel.pm#note_18
\&
\& Revision 1.7  2006/01/25 22:17:47  Greg
\& \- Correction to reading of the first row of the next sheet (without calling getFirstRow).
\&   Error detected and reported by Tim Rossiter
\& \- Reviewed memory useage as reported by Ilia Lobsanov \- this seems to be in the underlying OLE::Storage_Lite
\&
\& Revision 1.6  2005/02/21 09:54:08  Greg
\& \- Update to setCurrentSheetNum() so that the new sheet is handled by BasicRead functions
\&
\& Revision 1.5  2004/10/08 22:40:27  Greg
\& \- Changed cellValue to return \*(Aq\*(Aq for an empty cell rather than undef (requested by D D Allen).  Old functionality can be maintained by setting named parameter \*(AqoldCell\*(Aq to true in call to new().
\& \- Added examples to POD
\&
\& Revision 1.4  2004/10/01 11:02:21  Greg
\& \- Updated getNextRow to skip sheets that have nothing on them
\&
\& Revision 1.3  2004/09/30 12:32:25  Greg
\& \- Update to currentSheetNum and getNextSheet functions
\&
\& Revision 1.2  2004/08/21 02:30:29  Greg
\& \- Added setHeadingRow and setRow
\& \- Updated documentation
\& \- Remove irrelavant use lib;
\&
\& Revision 1.1.1.1  2004/07/31 07:45:02  Greg
\& \- Initial release to CPAN
.Ve
