.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Role::REST::Client 3"
.TH Role::REST::Client 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Role::REST::Client \- REST Client Role
.SH "VERSION"
.IX Header "VERSION"
version 0.23
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        {
\&                package RESTExample;
\&
\&                use Moose;
\&                with \*(AqRole::REST::Client\*(Aq;
\&
\&                sub bar {
\&                        my ($self) = @_;
\&                        my $res = $self\->post(\*(Aq/foo/bar/baz\*(Aq, {foo => \*(Aqbar\*(Aq});
\&                        my $code = $res\->code;
\&                        my $data = $res\->data;
\&                        return $data if $code == 200;
\&           }
\&
\&        }
\&
\&        my $foo = RESTExample\->new(
\&                server =>      \*(Aqhttp://localhost:3000\*(Aq,
\&                type   =>      \*(Aqapplication/json\*(Aq,
\&                clientattrs => {timeout => 5},
\&        );
\&
\&        $foo\->bar;
\&
\&        # controller
\&        sub foo : Local {
\&                my ($self, $c) = @_;
\&                my $res = $c\->model(\*(AqMyData\*(Aq)\->post(\*(Aq/foo/bar/baz\*(Aq, {foo => \*(Aqbar\*(Aq});
\&                my $code = $res\->code;
\&                my $data = $res\->data;
\&                ...
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This \s-1REST\s0 Client role makes \s-1REST\s0 connectivity easy.
.PP
Role::REST::Client will handle encoding and decoding when using the \s-1HTTP\s0 verbs.
.PP
.Vb 6
\&        GET
\&        HEAD
\&        PUT
\&        POST
\&        DELETE
\&        OPTIONS
.Ve
.PP
Currently Role::REST::Client supports these encodings
.PP
.Vb 4
\&        application/json
\&        application/x\-www\-form\-urlencoded
\&        application/xml
\&        application/yaml
.Ve
.PP
x\-www-form-urlencoded only works for \s-1GET\s0 and \s-1POST,\s0 and only for encoding, not decoding.
.PP
Responses which claim to not be serialised data (eg \f(CW\*(C`text/plain\*(C'\fR,
\&\f(CW\*(C`application/octet\-stream\*(C'\fR) will by default not be serialised. When the
response is none of these, and it is impossible to determine what encoding is
used, the content will be treated as \s-1JSON\s0 by default.
.SH "NAME"
Role::REST::Client \- REST Client Role
.SH "METHODS"
.IX Header "METHODS"
.SS "methods"
.IX Subsection "methods"
Role::REST::Client implements the standard \s-1HTTP 1.1\s0 verbs as methods
.PP
These methods can \s-1NOT\s0 have a request body
.PP
.Vb 2
\&        get
\&        head
.Ve
.PP
These methods can take a request body.
.PP
.Vb 4
\&        post
\&        put
\&        delete
\&        options
.Ve
.PP
All methods take these parameters
.PP
.Vb 4
\&        url \- The REST service
\&        data \- The data structure (hashref, arrayref) to send. The data will be encoded
\&                according to the value of the I<type> attribute.
\&        args \- hashref with arguments to augment the way the call is handled.
.Ve
.PP
args \- the optional argument parameter can have these entries
.PP
.Vb 2
\&        deserializer \- if you KNOW that the content\-type of the response is incorrect,
\&        you can supply the correct content type, like
\&
\&        my $res = $self\->post(\*(Aq/foo/bar/baz\*(Aq, {foo => \*(Aqbar\*(Aq}, {deserializer => \*(Aqapplication/yaml\*(Aq});
\&
\&        Alternatively, if you KNOW that the response is not serial data, you can
\&        disable deserialization by setting this to undef.
\&
\&        preserve_headers \- set this to true if you want to keep the headers between calls
.Ve
.PP
All methods return a response object dictated by _rest_response_class. Set to Role::REST::Client::Response by default.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "user_agent"
.IX Subsection "user_agent"
.Vb 1
\&  sub _build_user_agent { HTTP::Thin\->new }
.Ve
.PP
A User Agent object which has a \f(CW\*(C`\->request\*(C'\fR method suitably compatible with HTTP::Tiny. It should accept arguments like this: \f(CW\*(C`$ua\->request($method, $uri, $opts)\*(C'\fR, and needs to return a hashref as HTTP::Tiny does, or an HTTP::Response object.  To set your own default, use a \f(CW\*(C`_build_user_agent\*(C'\fR method.
.SS "server"
.IX Subsection "server"
\&\s-1URL\s0 of the \s-1REST\s0 server.
.PP
e.g. 'http://localhost:3000'
.SS "type"
.IX Subsection "type"
\&\s-1MIME\s0 Content-Type header,
.PP
e.g. application/json
.SS "persistent_headers"
.IX Subsection "persistent_headers"
.Vb 4
\&  $self\->set_persistent_header(\*(AqHeader\*(Aq => \*(Aqfoo\*(Aq, ... );
\&  $self\->get_persistent_header(\*(AqHeader\-Name\*(Aq);
\&  $self\->has_no_persistent_headers;
\&  $self\->clear_persistent_headers;
.Ve
.PP
A hashref containing headers you want to use for all requests. Use the methods
described above to manipulate it.
.PP
To set your own defaults, override the default or call \f(CW\*(C`set_persistent_header()\*(C'\fR in your
\&\f(CW\*(C`BUILD\*(C'\fR method.
.PP
.Vb 3
\&  has \*(Aq+persistent_headers\*(Aq => (
\&    default => sub { ... },
\&  );
.Ve
.SS "httpheaders"
.IX Subsection "httpheaders"
.Vb 4
\&  $self\->set_header(\*(AqHeader\*(Aq => \*(Aqfoo\*(Aq, ... );
\&  $self\->get_header(\*(AqHeader\-Name\*(Aq);
\&  $self\->has_no_headers;
\&  $self\->clear_headers;
.Ve
.PP
You can set any http header you like with set_header, e.g.
\&\f(CW$self\fR\->set_header($key, \f(CW$value\fR) but the content-type header will be overridden.
.PP
http_headers will be reset after each request, unless there's a reserve_headers
argument, but it's a hack. The recommended way to keep headers across requests
is to store them in the persistent_headers.
.PP
\&\f(CW$self\fR\->httpheaders will return the combined hashref of persistent_headers and
what's been added with set_header.
.PP
For historical reasons, the two methods clear_headers and reset_headers are
equal. Both will clear the headers for the current request, but \s-1NOT\s0 the
persistent headers.
.PP
To clear \s-1ALL\s0 headers, use
.PP
.Vb 1
\&  $self\->clear_all_headers;
.Ve
.SS "clientattrs"
.IX Subsection "clientattrs"
Attributes to feed the user agent object (which defaults to HTTP::Thin)
.PP
e.g. {timeout => 10}
.SS "serializer_class"
.IX Subsection "serializer_class"
You can override the serializer class and use your own. Default is 'Role::REST::Client::Serializer'
.SS "serializer_options"
.IX Subsection "serializer_options"
Options for the serializer instantiation.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Breno G. de Oliveira, <garu@cpan.org>
.PP
Mark Stosberg, <mark@stosberg.com>
.PP
Matt Phillips, (cpan:MATTP) <mattp@cpan.org>
.PP
Wallace Reis, <wallace@reis.me>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to bug-role-rest-client at rt.cpan.org, or through the
web interface at http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Role\-REST\-Client.
.SH "AUTHOR"
.IX Header "AUTHOR"
Kaare Rasmussen <kaare at cpan dot org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2018 by Kaare Rasmussen.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
