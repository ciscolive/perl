.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Parallel::Fork::BossWorkerAsync 3"
.TH Parallel::Fork::BossWorkerAsync 3 "2017-01-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parallel::Fork::BossWorkerAsync \- Perl extension for creating asynchronous forking queue processing applications.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  use Parallel::Fork::BossWorkerAsync ();
\&  my $bw = Parallel::Fork::BossWorkerAsync\->new(
\&    work_handler    => \e&work,
\&    result_handler  => \e&handle_result,
\&    global_timeout  => 2,
\&  );
\&
\&  # Jobs are hashrefs
\&  $bw\->add_work( {a => 3, b => 4} );
\&  while ($bw\->pending()) {
\&    my $ref = $bw\->get_result();
\&    if ($ref\->{ERROR}) {
\&      print STDERR $ref\->{ERROR};
\&    } else {
\&      print "$ref\->{product}\en";
\&      print "$ref\->{string}\en";
\&    }
\&  }
\&  $bw\->shut_down();
\&
\&  sub work {
\&    my ($job)=@_;
\&
\&    # Uncomment to test timeout
\&    # sleep(3);
\&    
\&    # Uncomment to test worker error
\&    # die("rattle");
\&    
\&    # do something with hash ref $job
\&    my $c = $job\->{a} * $job\->{b};
\&
\&    
\&    # Return values are hashrefs
\&    return { product => $c };
\&  }
\&
\&  sub handle_result {
\&    my ($result)=@_;
\&    if (exists($result\->{product})) {
\&      $result\->{string} = "the answer is: $result\->{product}";
\&    }
\&    return $result;
\&  }
\&
\&  _\|_END_\|_
\&  Prints:
\&  12
\&  the answer is: 12
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Parallel::Fork::BossWorkerAsync is a multiprocess preforking server.  On construction, the current process forks a \*(L"Boss\*(R" process (the server), which then forks one or more \*(L"Worker\*(R" processes.  The Boss acts as a manager, accepting jobs from the main process, queueing and passing them to the next available idle Worker.  The Boss then listens for, and collects any responses from the Workers as they complete jobs, queueing them for the main process.
.PP
The main process can collect available responses from the Boss, and/or send it more jobs, at any time. While waiting for jobs to complete, the main process can enter a blocking wait loop, or do something else altogether, opting to check back later.
.PP
In general, it's a good idea to construct the object early in a program's life, before any threads are spawned, and before much memory is allocated, as the Boss, and each Worker will inherit the memory footprint.
.PP
The 0.09 release includes Windows compatibility! (see Credits below)
.SH "METHODS"
.IX Header "METHODS"
.SS "new(...)"
.IX Subsection "new(...)"
Creates and returns a new Parallel::Fork::BossWorkerAsync object.
.PP
.Vb 10
\&  my $bw = Parallel::Fork::BossWorkerAsync\->new(
\&    work_handler    => \e&work_sub,
\&    result_handler  => \e&result_sub,
\&    init_handler    => \e&init_sub,
\&    exit_handler    => \e&exit_sub,
\&    global_timeout  => 0,
\&    worker_count    => 3,
\&    msg_delimiter   => "\e0\e0\e0",
\&    read_size       => 1024 * 1024,
\&  );
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`work_handler => \e&work_sub\*(C'\fR
.Sp
work_handler is the only required argument.  The sub is called with it's first and only argument being one of the values (hashrefs) in the work queue. Each worker calls this sub each time it receives work from the boss process. The handler may trap \f(CW$SIG\fR{\s-1ALRM\s0}, which may be called if global_timeout is specified.
.Sp
The work_handler should clean up after itself, as the workers may call the work_handler more than once.
.Sp
The work_handler is expected to return a hashref.
.IP "\(bu" 4
\&\f(CW\*(C`result_handler => \e&result_sub\*(C'\fR
.Sp
The result_handler argument is optional. The sub is called with it's first and only argument being the return value of work_handler, which is expected to be a hashref. If defined, the boss process calls this sub each time the application requests (and receives) a result. This handler is not timed out via \f(CW$SIG\fR{\s-1ALRM\s0}.
.Sp
The result_handler is expected to return a hashref.
.IP "\(bu" 4
\&\f(CW\*(C`init_handler => \e&init_sub\*(C'\fR
.Sp
The init_handler argument is optional.  The referenced function receives no arguments and returns nothing.  It is called only once by each worker, just after it's forked off from the boss, and before entering the job processing loop. This subroutine is not affected by the value of global_timeout.  This could be used to connect to a database, instantiate a non-shared object, etc.
.IP "\(bu" 4
\&\f(CW\*(C`exit_handler => \e&exit_sub\*(C'\fR
.Sp
The exit_handler argument is optional.  The referenced function receives no arguments and returns nothing.  It is called only once by each worker, just before exiting.  This subroutine is not affected by the value of global_timeout.  This could be used to disconnect from a database, etc.
.IP "\(bu" 4
\&\f(CW\*(C`global_timeout => $seconds\*(C'\fR
.Sp
By default, a handler can execute forever. If global_timeout is specified, an alarm is setup to terminate the work_handler so processing can continue.
.IP "\(bu" 4
\&\f(CW\*(C`worker_count => $count\*(C'\fR
.Sp
By default, 3 workers are started to process the data queue. Specifying worker_count can scale the worker count to any number of workers you wish.
.IP "\(bu" 4
\&\f(CW\*(C`msg_delimiter => $delimiter\*(C'\fR
.Sp
Sending messages to and from the child processes is accomplished using Data::Dumper. When transmitting data, a delimiter must be used to identify the breaks in messages. By default, this delimiter is \*(L"\e0\e0\e0\*(R".  This delimiter may not appear in your data.
.IP "\(bu" 4
\&\f(CW\*(C`read_size => $number_of_bytes\*(C'\fR
.Sp
The default read buffer size is 1 megabyte. The application, the boss, and each worker all \fBsysread()\fR from their respective socket connections. Ideally, the read buffer is just large enough to hold all the data that's ready to read. Depending on your application, the default might be ridiculously large, if for example you only pass lookup keys in, and error codes out. If you're running in a memory-constrained environment, you might lower the buffer significantly, perhaps to 64k (1024 * 64), or all the way down to 1k (1024 bytes). If for example you're passing (copying) high resolution audio/video, you will likely benefit from increasing the buffer size.
.Sp
An issue has cropped up, reported in more detail under the Bugs section below. Regardless of how large you set the read buffer with this parameter, \s-1BSD\s0 ignores this, and uses 8192 bytes instead. This can be a big problem if you pass megs of data back and forth, resulting in so many small reads tha the application appears to hang. It will eventually complete, but it's not pretty. Bottom line: don't pass huge chunks of data cross-process under \s-1BSD.\s0
.SS "add_work(\e%work)"
.IX Subsection "add_work(%work)"
Adds work to the instance's queue.  It accepts a list of hash refs.  \fBadd_work()\fR can be called at any time before \fBshut_down()\fR.  All work can be added at the beginning, and then the results gathered, or these can be interleaved: add a few jobs, grab the results of one of them, add a few more, grab more results, etc.
.PP
Note: Jobs are not guaranteed to be processed in the order they're added.  This is because they are farmed out to multiple workers running concurrently.
.PP
.Vb 1
\&  $bw\->add_work({data => "my data"}, {data => "more stuff"}, ...);
.Ve
.SS "\fBpending()\fP"
.IX Subsection "pending()"
This simple function returns a true value if there are jobs that have been submitted for which the results have not yet been retrieved.
.PP
Note: This says nothing about the readiness of the results.  Just that at some point, now or in the future, the results will be available for collection.
.PP
.Vb 1
\&  while ($bw\->pending()) { }
.Ve
.SS "\fBget_result()\fP"
.IX Subsection "get_result()"
Requests the next single available job result from the Boss' result queue.  Returns the return value of the work_handler.  If there is a result_handler defined, it's called here, and the return value of this function is returned instead.  Return from either function is expected to be a hashref. Depending on what your work_handler, or result_handler, does, it may not be interesting to capture this result.
.PP
By default, \fBget_result()\fR is a blocking call.  If there are no completed job results available, main application processing will stop here and wait.
.PP
.Vb 1
\&  my $href = $bw\->get_result();
.Ve
.PP
If you want nonblocking behavior:
.PP
.Vb 3
\&  my $href = $bw\->get_result( blocking => 0 );
\&  \-OR\-
\&  my $href = $bw\->get_result_nb();
.Ve
.PP
In this case, if the call would block, because there is no result to retrieve, it returns immediately, returning undef.
.SS "\fBshut_down()\fP"
.IX Subsection "shut_down()"
Tells the Boss and all Workers to exit.  All results should have been retrieved via \fBget_result()\fR prior to calling \fBshut_down()\fR.  If \fBshut_down()\fR is called earlier, the queue *will* be processed, but depending on timing the subsequent calls to \fBget_result()\fR may fail if the boss has already written all result data into the socket buffer and exited.
.PP
.Vb 1
\&  $bw\->shut_down();
.Ve
.PP
If you just want the Boss and Workers to go away, and don't care about work in progress, use:
.PP
.Vb 1
\&  $bw\->shut_down( force => 1 );
.Ve
.SH "Error handling"
.IX Header "Error handling"
Errors generated by your work_handler do not cause the worker process to die. These are stuffed in the result hash with a key of '\s-1ERROR\s0'. The value is $@.
.PP
If global_timeout is set, and a timeout occurs, the worker returns:
  { \s-1ERROR\s0 => 'BossWorkerAsync: timed out' }
.SH "BUGS"
.IX Header "BUGS"
Please report bugs to jvann.cpan@gmail.com.
.PP
The Boss and Worker processes are long-lived. There is no restart mechanism for processes that exit prematurely. If it's the Boss, you're dead anyway, but if it's one or more Workers, the app will continue running, but throughput will suck.
.PP
The code should in some way overcome the tiny socket buffer limitations of \s-1BSD\s0 operating systems. Unbuffered reads are limited to 8192 byte chunks. If you pass megabytes of data with each job, the processing will not fail, but it will seem to be hung \*(-- it can get \s-1VERY\s0 slow! This is not an issue on Linux, and will not be a problem on \s-1BSD\s0 if you pass less then say, 64k, between processes. If you know how to force an unbuffered socket read to use an arbitrarily large buffer (1 megabyte, for example), please shoot me an email.
.SH "CREDITS"
.IX Header "CREDITS"
I'd like to thank everyone who has reported a bug, asked a question, or offered a suggestion.
.PP
Jeff Rodriguez: wrote the module Parallel::Fork::BossWorker, which inspired this module.
.PP
Rob Navarro: reported \*(-- and fixed! \*(-- errors in \fBfork()\fR error handling, and in the reaping of dead child processes.
.PP
Mario Roy: contributed the Windows socket code.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009\-2013 by joe vannucci, <jvann.cpan@gmail.com>
.PP
All rights reserved.  This library is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
