.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::Layer3::Huawei 3"
.TH SNMP::Info::Layer3::Huawei 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::Layer3::Huawei \- SNMP Interface to Huawei switches and routers.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jeroen van Ingen and Eric Miller
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& # Let SNMP::Info determine the correct subclass for you.
\& my $huawei = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyrouter\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class      = $huawei\->class();
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Subclass for Huawei switches
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.IP "SNMP::Info::Layer3" 4
.IX Item "SNMP::Info::Layer3"
.PD 0
.IP "SNMP::Info::IEEE802dot3ad" 4
.IX Item "SNMP::Info::IEEE802dot3ad"
.PD
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fIHUAWEI-MIB\fR" 4
.IX Item "HUAWEI-MIB"
.PD 0
.IP "\fIHUAWEI-PORT-MIB\fR" 4
.IX Item "HUAWEI-PORT-MIB"
.IP "\fIHUAWEI-IF-EXT-MIB\fR" 4
.IX Item "HUAWEI-IF-EXT-MIB"
.IP "\fI\s-1HUAWEI\-L2IF\-MIB\s0\fR" 4
.IX Item "HUAWEI-L2IF-MIB"
.IP "\fIHUAWEI-POE-MIB\fR" 4
.IX Item "HUAWEI-POE-MIB"
.IP "\fIHUAWEI-ENTITY-EXTENT-MIB\fR" 4
.IX Item "HUAWEI-ENTITY-EXTENT-MIB"
.IP "Inherited Classes' MIBs" 4
.IX Item "Inherited Classes' MIBs"
.PD
See SNMP::Info::Layer3 for its own \s-1MIB\s0 requirements.
.Sp
See SNMP::Info::IEEE802dot3ad for its own \s-1MIB\s0 requirements.
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP\s0
.ie n .IP "$huawei\->\fBvendor()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBvendor()\fR" 4
.IX Item "$huawei->vendor()"
Returns 'huawei'.
.ie n .IP "$huawei\->\fBos()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBos()\fR" 4
.IX Item "$huawei->os()"
Returns '\s-1VRP\s0' if contained in \f(CW\*(C`sysDescr\*(C'\fR, 'huawei' otherwise.
.ie n .IP "$huawei\->\fBos_ver()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBos_ver()\fR" 4
.IX Item "$huawei->os_ver()"
Returns the software version derived from the \f(CW\*(C`ENTITY\-MIB\*(C'\fR or
extracted from \f(CW\*(C`sysDescr\*(C'\fR.
.ie n .IP "$huawei\->\fBmac()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBmac()\fR" 4
.IX Item "$huawei->mac()"
Base \s-1MAC\s0 of the device.
.Sp
(\f(CW\*(C`dot1dBaseBridgeAddress\*(C'\fR)
.ie n .IP "$huawei\->\fBfan()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBfan()\fR" 4
.IX Item "$huawei->fan()"
Return the status of all fans from the \fIHUAWEI-ENTITY-EXTENT-MIB\fR. Returns
a string indicating the number of fans '\s-1OK\s0' or identification of any fan without
a 'normal' operating status
.ie n .IP "$huawei\->\fBps1_status()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBps1_status()\fR" 4
.IX Item "$huawei->ps1_status()"
Return the status of the first power supply in each chassis or switch from
the \fIHUAWEI-ENTITY-EXTENT-MIB\fR
.ie n .IP "$huawei\->\fBps2_status()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBps2_status()\fR" 4
.IX Item "$huawei->ps2_status()"
Return the status of the second power supply in each chassis or switch from
the \fIHUAWEI-ENTITY-EXTENT-MIB\fR
.SS "Globals imported from SNMP::Info::Layer3"
.IX Subsection "Globals imported from SNMP::Info::Layer3"
See documentation in SNMP::Info::Layer3 for details.
.SH "TABLE ENTRIES"
.IX Header "TABLE ENTRIES"
These are methods that return tables of information in the form of a reference
to a hash.
.ie n .IP "$huawei\->\fBi_duplex()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBi_duplex()\fR" 4
.IX Item "$huawei->i_duplex()"
Returns reference to map of IIDs to current link duplex.
.ie n .IP "$huawei\->\fBi_duplex_admin()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBi_duplex_admin()\fR" 4
.IX Item "$huawei->i_duplex_admin()"
Returns reference to hash of IIDs to admin duplex setting.
.SS "\s-1POE\s0 Slot Table"
.IX Subsection "POE Slot Table"
.ie n .IP "$huawei\->\fBpeth_power_watts()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBpeth_power_watts()\fR" 4
.IX Item "$huawei->peth_power_watts()"
The slot's power supply's capacity, in watts.
.Sp
\&\f(CW\*(C`hwPoeSlotMaximumPower\*(C'\fR
.ie n .IP "$huawei\->\fBpeth_power_consumption()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBpeth_power_consumption()\fR" 4
.IX Item "$huawei->peth_power_consumption()"
How much power, in watts, this power supply has been committed to
deliver.
.Sp
\&\f(CW\*(C`hwPoeSlotConsumingPower\*(C'\fR
.ie n .IP "$huawei\->\fBpeth_power_threshold()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBpeth_power_threshold()\fR" 4
.IX Item "$huawei->peth_power_threshold()"
The threshold (in percent) of consumption required to raise an
alarm.
.Sp
\&\f(CW\*(C`hwPoeSlotPowerUtilizationThreshold\*(C'\fR
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$huawei\->\fBi_ignore()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBi_ignore()\fR" 4
.IX Item "$huawei->i_ignore()"
Returns reference to hash.  Increments value of \s-1IID\s0 if port is to be ignored.
.Sp
Ignores InLoopback and Console interfaces
.ie n .IP "$huawei\->\fBbp_index()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBbp_index()\fR" 4
.IX Item "$huawei->bp_index()"
Returns a mapping between \f(CW\*(C`ifIndex\*(C'\fR and the Bridge Table. Uses
\&\f(CW\*(C`hwL2IfPortIfIndex\*(C'\fR for the most complete mapping and falls back to
\&\f(CW\*(C`dot1dBasePortIfIndex\*(C'\fR if not available.
.ie n .IP """agg_ports""" 4
.el .IP "\f(CWagg_ports\fR" 4
.IX Item "agg_ports"
Returns a \s-1HASH\s0 reference mapping from slave to master port for each member of
a port bundle on the device. Keys are ifIndex of the slave ports, Values are
ifIndex of the corresponding master ports. Attempts to use \f(CW\*(C`hwTrunkIfTable\*(C'\fR
first and then \f(CW\*(C`dot3adAggPortListPorts\*(C'\fR if that is unavailable.
.ie n .IP """i_mtu""" 4
.el .IP "\f(CWi_mtu\fR" 4
.IX Item "i_mtu"
Interface \s-1MTU\s0 value. Overridden with corresponding frame size entry from
\&\f(CW\*(C`hwEthernetJumboframeMaxLength\*(C'\fR if one exists.
.SS "Power Port Table"
.IX Subsection "Power Port Table"
The index of these methods have been normalized to slot.port and values
munged to provide compatibility with the \s-1IEEE 802\s0.3af \fIPOWER-ETHERNET-MIB\fR
and equivalent SNMP::Info::PowerEthernet methods.
.ie n .IP "$huawei\->\fBpeth_port_admin()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBpeth_port_admin()\fR" 4
.IX Item "$huawei->peth_port_admin()"
Administrative status: is this port permitted to deliver power?
.ie n .IP "$huawei\->\fBpeth_port_status()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBpeth_port_status()\fR" 4
.IX Item "$huawei->peth_port_status()"
Current status: is this port delivering power, searching, disabled, etc?
.ie n .IP "$huawei\->\fBpeth_port_class()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBpeth_port_class()\fR" 4
.IX Item "$huawei->peth_port_class()"
Device class: if status is delivering power, this represents the 802.3af
class of the device being powered.
.ie n .IP "$huawei\->\fBpeth_port_power()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBpeth_port_power()\fR" 4
.IX Item "$huawei->peth_port_power()"
Power supplied the port, in milliwatts
.ie n .IP "$huawei\->\fBpeth_port_ifindex()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBpeth_port_ifindex()\fR" 4
.IX Item "$huawei->peth_port_ifindex()"
Returns an index of slot.port to an \f(CW\*(C`ifIndex\*(C'\fR. Slot defaults to zero
meaning chassis or box if there is no \f(CW\*(C`ifIndex\*(C'\fR to slot mapping available in
\&\f(CW\*(C`hwPhysicalPortInSlot\*(C'\fR. Mapping the index to slot.port is a normalization
function to provide compatibility with the \s-1IEEE 802\s0.3af \fIPOWER-ETHERNET-MIB\fR.
.ie n .IP "$huawei\->\fBpeth_port_neg_power()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBpeth_port_neg_power()\fR" 4
.IX Item "$huawei->peth_port_neg_power()"
The power, in milliwatts, that has been committed to this port.
This value is derived from the 802.3af class of the device being
powered.
.SS "Table Methods imported from SNMP::Info::Layer3"
.IX Subsection "Table Methods imported from SNMP::Info::Layer3"
See documentation in SNMP::Info::Layer3 for details.
.SS "Table Methods imported from SNMP::Info::IEEE802dot3ad"
.IX Subsection "Table Methods imported from SNMP::Info::IEEE802dot3ad"
See documentation in SNMP::Info::IEEE802dot3ad for details.
.SH "Data Munging Callback Subroutines"
.IX Header "Data Munging Callback Subroutines"
.ie n .IP "$huawei\->\fBmunge_hw_peth_admin()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBmunge_hw_peth_admin()\fR" 4
.IX Item "$huawei->munge_hw_peth_admin()"
Normalizes \f(CW\*(C`hwPoePortEnable\*(C'\fR values to 'true' or 'false'.
.ie n .IP "$huawei\->\fBmunge_hw_peth_class()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBmunge_hw_peth_class()\fR" 4
.IX Item "$huawei->munge_hw_peth_class()"
Normalizes \f(CW\*(C`hwPoePortPdClass\*(C'\fR values by prepending 'class'.
.ie n .IP "$huawei\->\fBmunge_hw_peth_power()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBmunge_hw_peth_power()\fR" 4
.IX Item "$huawei->munge_hw_peth_power()"
Converts and rounds to a whole number milliwatts to watts.
.ie n .IP "$huawei\->\fBmunge_hw_peth_status()\fR" 4
.el .IP "\f(CW$huawei\fR\->\fBmunge_hw_peth_status()\fR" 4
.IX Item "$huawei->munge_hw_peth_status()"
Normalizes \f(CW\*(C`hwPoePortPowerStatus\*(C'\fR values to those that would be returned by
the the \s-1IEEE 802\s0.3af \fIPOWER-ETHERNET-MIB\fR.
