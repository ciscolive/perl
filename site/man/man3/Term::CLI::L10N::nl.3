.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::CLI::L10N::nl 3"
.TH Term::CLI::L10N::nl 3 "2019-11-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::CLI::L10N::nl \- Dutch localizations for Term::CLI
.SH "VERSION"
.IX Header "VERSION"
version 0.051007
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Term::CLI::L10N;
\&
\& Term::CLI::L10N\->set_language(\*(Aqnl\*(Aq);
\& 
\& say loc("ERROR"); # \-> FOUT
\&
\& say Term::CLI::L10N\->quant(1, \*(Aqdingen\*(Aq); # \-> 1 ding
\& say Term::CLI::L10N\->quant(1, \*(Aqleraren\*(Aq); # \-> 1 leraar
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Term::CLI::L10N::nl\*(C'\fR module is derived from the
Term::CLI::L10N(3p) class to provide Dutch translations for
the messages of the Term::CLI(3p) library.
.PP
It implements its own \f(CW\*(C`numerate\*(C'\fR method that reverses the
meaning of its \*(L"form\*(R" arguments (because it's easier to derive
the singular noun from the plural in Dutch).
.PP
It defines its lexicon using Locale::Maketext::Lexicon::Gettext(3p)
and the \f(CW\*(C`_\|_DATA_\|_\*(C'\fR block.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
Inherits its constructor from Term::CLI::L10N, though it should
not be called directly.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBsingularise\fR ( \fIStr\fR )" 4
.IX Item "singularise ( Str )"
.PD 0
.IP "\fBsingularize\fR ( \fIStr\fR )" 4
.IX Item "singularize ( Str )"
.PD
Take \fIStr\fR as a plural noun and return its singular form.
.IP "\fBnumerate\fR ( \fI\f(CI$num\fI\fR, \fI\f(CI$plural\fI\fR [, \fI\f(CI$singular\fI\fR] )" 4
.IX Item "numerate ( $num, $plural [, $singular] )"
Overrides the parent's \f(CW\*(C`numerate\*(C'\fR method, see Locale::Maketext(3p).
.Sp
Note that the \fI\f(CI$plural\fI\fR and \fI\f(CI$singular\fI\fR forms are reversed here, and
that there is no \f(CW$negative\fR (or, if given, it will be ignored).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Term::CLI::L10N(3p),
Term::CLI(3p),
perl(1).
.SH "AUTHOR"
.IX Header "AUTHOR"
Steven Bakker <sbakker@cpan.org>.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2018 Steven Bakker; All rights reserved.
.PP
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See \*(L"perldoc perlartistic.\*(R"
.PP
This software is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
