.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Member::StaticRoute 3"
.TH Infoblox::Grid::Member::StaticRoute 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Member::StaticRoute \- Static route member object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A StaticRoute object provides static route information for a grid member.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 4
\& my $route = Infoblox::Grid::Member::StaticRoute\->new(
\&        "network" => $network,          #Required
\&        "gateway" => $ip_address,       #Required
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to a StaticRoute object.
.SS "Infoblox::Grid::Member\->static_routes( )"
.IX Subsection "Infoblox::Grid::Member->static_routes( )"
.RS 4
Use this function to specify a StaticRoute object for the grid member. See Infoblox::Grid::Member\->\fBstatic_routes()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get static routes list
\& my $static_routes = $grid_member\->static_routes();
\& #Modify static routes list
\& my $route = Infoblox::Grid::Member::StaticRoute\->new(
\&        "network" => "192.168.2.0/24",
\&        "gateway" => "192.168.1.1",
\& );
\& $grid_member\->static_routes([$route]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a StaticRoute object.
.SS "network( )"
.IX Subsection "network( )"
.RS 4
Use this method to set or retrieve the network address of a StaticRoute object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the address and netmask of network in \s-1CIDR\s0 format (example: 192.168.2.0/24).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network address
\& my $network= $route\->network();
\& #Modify network address
\& $route\-\->network("192.168.2.0/24");
.Ve
.RE
.RS 4
.RE
.SS "gateway( )"
.IX Subsection "gateway( )"
.RS 4
Use this method to set or retrieve the gateway of the StaticRoute object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the gateway address in IPv4 address format. An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get gateway address
\& my $gateway= $route\->gateway();
\& #Modify gateway address
\& $route\-\->gateway("192.168.2.0");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a StaticRoute object such as add, modify, and remove. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a StaticRoute object insertion\fR
.PP
.Vb 3
\& use strict;
\& use warnings;
\& use Infoblox;
\&
\& my $host_name = "infoblox.localdomain";
\& my $host_ip   = "192.168.1.2";
\& #Creating a session to the Infoblox appliance.
\& my $session = Infoblox::Session\->new(
\&     master   => $host_ip,
\&     username => "admin",
\&     password => "infoblox"
\& );
\&
\& unless ($session) {
\&     die(qq(constructor for session failed: ),
\&         join(":", Infoblox::status_code(), Infoblox::status_detail()));
\& }
\& print "Session created successfully \en";
.Ve
.PP
\&\fB#Create a StaticRoute object\fR
.PP
.Vb 7
\& #Creating a StaticRoute object.
\& my $route = Infoblox::Grid::Member::StaticRoute\->new(
\&        "network" => "192.168.2.0/24",
\&        "gateway" => "192.168.1.1",
\& ) or die(qq(Constructor for StaticRoute failed: ),
\&    join(":", Infoblox::status_code(), Infoblox::status_detail()));
\& print "StaticRoute object constructed successfully \en";
.Ve
.PP
\&\fB#Add a StaticRoute object to the static routes list of the grid member\fR
.PP
.Vb 7
\& #Getting the Grid Member object from the appliance through a session.
\& my @result = $session\->get(
\&     object => "Infoblox::Grid::Member",
\&     name   => $host_name,
\&     ) or die(qq(Get Grid Member failed: ),
\&     join(":", $session\->status_code(), $session\->status_detail()));
\& print "Get Grid Member successful\en";
\&
\& my $result = $result[0];
\& if ($result) {
\&     #Modifying the value of the StaticRoute method from the member object.
\&     $result\->static_routes([$route]);
\&     #Applying the changes to appliance through session.
\&     $session\->modify($result)
\&         or die(qq(Modify Grid Member failed: ),
\&         join(":", $session\->status_code(), $session\->status_detail()));
\& }
\& print "StaticRoute object added to Grid Member successfully\en";
.Ve
.PP
\&\fB#Remove the static routes list\fR
.PP
.Vb 2
\& #Remove the StaticRoute object from the Grid Member object.
\& $result\->static_routes([]);
\&
\& #Update the Grid Member object through the Infoblox session.
\& $session\->modify($result)
\&   or die("Modify Grid Member object failed: ",
\&   $session\->status_code() . ":" . $session\->status_detail());
\& print "Removed StaticRoute object from Grid Member successfully\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::Member
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
