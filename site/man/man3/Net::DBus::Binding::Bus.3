.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::DBus::Binding::Bus 3"
.TH Net::DBus::Binding::Bus 3 "2013-08-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DBus::Binding::Bus \- Handle to a well\-known message bus instance
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::DBus::Binding::Bus;
\&
\&  # Get a handle to the system bus
\&  my $bus = Net::DBus::Binding::Bus\->new(type => &Net::DBus::Binding::Bus::SYSTEM);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a specialization of the Net::DBus::Binding::Connection
module providing convenience constructor for connecting to one of
the well-known bus types. There is no reason to use this module
directly, instead get a handle to the bus with the \f(CW\*(C`session\*(C'\fR or
\&\f(CW\*(C`system\*(C'\fR methods in Net::DBus.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "my $bus = Net::DBus::Binding::Bus\->new(type => $type);" 4
.el .IP "my \f(CW$bus\fR = Net::DBus::Binding::Bus\->new(type => \f(CW$type\fR);" 4
.IX Item "my $bus = Net::DBus::Binding::Bus->new(type => $type);"
.PD 0
.ie n .IP "my $bus = Net::DBus::Binding::Bus\->new(address => $addr);" 4
.el .IP "my \f(CW$bus\fR = Net::DBus::Binding::Bus\->new(address => \f(CW$addr\fR);" 4
.IX Item "my $bus = Net::DBus::Binding::Bus->new(address => $addr);"
.PD
Open a connection to a message bus, either a well known bus type
specified using the \f(CW\*(C`type\*(C'\fR parameter, or an arbitrary bus specified
using the \f(CW\*(C`address\*(C'\fR parameter. If the \f(CW\*(C`private\*(C'\fR parameter is set
to a true value, then a private connection to the bus is obtained.
The caller must explicitly disconnect this bus instance before
releasing the last instance of the object.
.ie n .IP "$bus\->request_name($service_name)" 4
.el .IP "\f(CW$bus\fR\->request_name($service_name)" 4
.IX Item "$bus->request_name($service_name)"
Send a request to the bus registering the well known name
specified in the \f(CW$service_name\fR parameter. If another client
already owns the name, registration will be queued up, pending
the exit of the other client.
.ie n .IP "my $name = $bus\->get_unique_name" 4
.el .IP "my \f(CW$name\fR = \f(CW$bus\fR\->get_unique_name" 4
.IX Item "my $name = $bus->get_unique_name"
Returns the unique name by which this processes' connection to
the bus is known. Unique names are never re-used for the entire
lifetime of the bus daemon.
.ie n .IP "$bus\->add_match($rule)" 4
.el .IP "\f(CW$bus\fR\->add_match($rule)" 4
.IX Item "$bus->add_match($rule)"
Register a signal match rule with the bus controller, allowing
matching broadcast signals to routed to this client.
.ie n .IP "$bus\->remove_match($rule)" 4
.el .IP "\f(CW$bus\fR\->remove_match($rule)" 4
.IX Item "$bus->remove_match($rule)"
Unregister a signal match rule with the bus controller, preventing
further broadcast signals being routed to this client
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel P. Berrange
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2004\-2011 Daniel P. Berrange
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::DBus::Binding::Connection, Net::DBus
