.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Milter::Authentication 3"
.TH Mail::Milter::Authentication 3 "2020-09-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Milter::Authentication \- A Perl Mail Authentication Milter
.SH "VERSION"
.IX Header "VERSION"
version 2.20200930.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Subclass of Net::Server::PreFork for bringing up the main server process for authentication_milter.
.PP
This class handles the server aspects of Authentication Milter.
.PP
For individual Protocol handling please see the Mail::Milter::Authentication::Protocol::* classes
.PP
For request handling please see Mail::Milter::Authentication::Handler
.PP
Please see Net::Server docs for more detail of the server code.
.PP
Please see the output of 'authentication_milter \-\-help' for usage help.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Perl Implementation of email authentication standards rolled up into a single easy to use milter.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "preload_modules( $from, $matching )"
.el .SS "preload_modules( \f(CW$from\fP, \f(CW$matching\fP )"
.IX Subsection "preload_modules( $from, $matching )"
Preload (pre-fork) lazy loading modules.
.PP
Takes a Package Name and a Base module, and loads all modules which match.
.SS "\fI\fP\f(BIwrite_to_log_hook()\fP\fI\fP"
.IX Subsection "write_to_log_hook()"
Hook which runs to write logs
.SS "\fI\fP\f(BIidle_loop_hook()\fP\fI\fP"
.IX Subsection "idle_loop_hook()"
Hook which runs in the parent periodically.
.SS "\fI\fP\f(BIpre_loop_hook()\fP\fI\fP"
.IX Subsection "pre_loop_hook()"
Hook which runs in the parent before looping.
.SS "\fI\fP\f(BIrun_n_children_hook()\fP\fI\fP"
.IX Subsection "run_n_children_hook()"
Hook which runs in parent before it forks children.
.SS "\fI\fP\f(BIchild_init_hook()\fP\fI\fP"
.IX Subsection "child_init_hook()"
Hook which runs after forking, sets up per process items.
.SS "\fI\fP\f(BIchild_finish_hook()\fP\fI\fP"
.IX Subsection "child_finish_hook()"
Hook which runs when the child is about to finish.
.SS "\fI\fP\f(BIpre_server_close_hook()\fP\fI\fP"
.IX Subsection "pre_server_close_hook()"
Hook which runs before the server closes.
.SS "\fI\fP\f(BIdequeue()\fP\fI\fP"
.IX Subsection "dequeue()"
Call the dequeue handlers
.SS "\fI\fP\f(BIget_client_proto()\fP\fI\fP"
.IX Subsection "get_client_proto()"
Get the protocol of the connecting client.
.SS "\fI\fP\f(BIget_client_port()\fP\fI\fP"
.IX Subsection "get_client_port()"
Get the port of the connecting client.
.SS "\fI\fP\f(BIget_client_host()\fP\fI\fP"
.IX Subsection "get_client_host()"
Get the host of the connecting client.
.SS "\fI\fP\f(BIget_client_path()\fP\fI\fP"
.IX Subsection "get_client_path()"
Get the path of the connecting client.
.SS "\fI\fP\f(BIget_client_details()\fP\fI\fP"
.IX Subsection "get_client_details()"
Get the details of the connecting client.
.SS "\fI\fP\f(BIprocess_request()\fP\fI\fP"
.IX Subsection "process_request()"
Hook which runs for each request, passes control to metrics handler or process_main as appropriate.
.SS "\fI\fP\f(BIprocess_main()\fP\fI\fP"
.IX Subsection "process_main()"
Method which runs for each request, sets up per request items and processes the request.
.SS "\fI\fP\f(BIsend_exception_email()\fP\fI\fP"
.IX Subsection "send_exception_email()"
Send an email to the administrator with details of a problem.
.SS "\fIfatal($error)\fP"
.IX Subsection "fatal($error)"
Log a fatal error and die in child
.SS "\fIfatal_global($error)\fP"
.IX Subsection "fatal_global($error)"
Log a fatal error and die in child and parent
.SS "\fI\fP\f(BIsetup_handlers()\fP\fI\fP"
.IX Subsection "setup_handlers()"
Setup the Handler objects.
.SS "\fIload_handler( \fP\f(CI$name\fP\fI )\fP"
.IX Subsection "load_handler( $name )"
Load the \f(CW$name\fR Handler module
.SS "\fIsetup_handler( \fP\f(CI$name\fP\fI )\fP"
.IX Subsection "setup_handler( $name )"
Setup the \f(CW$name\fR Handler object
.SS "\fIdestroy_handler( \fP\f(CI$name\fP\fI )\fP"
.IX Subsection "destroy_handler( $name )"
Remove the \f(CW$name\fR Handler
.SS "\fIregister_callback( \fP\f(CI$name\fP\fI, \fP\f(CI$callback\fP\fI )\fP"
.IX Subsection "register_callback( $name, $callback )"
Register the specified callback
.SS "\fI\fP\f(BIsort_all_callbacks()\fP\fI\fP"
.IX Subsection "sort_all_callbacks()"
Sort the callbacks into the order in which they must be called
.SS "\fIsort_callbacks( \fP\f(CI$callback\fP\fI )\fP"
.IX Subsection "sort_callbacks( $callback )"
Sort the callbacks for the \f(CW$callback\fR callback into the right order
.SS "\fI\fP\f(BIdestroy_objects()\fP\fI\fP"
.IX Subsection "destroy_objects()"
Remove references to all objects
.SS "\fI\fP\f(BIget_queue_id()\fP\fI\fP"
.IX Subsection "get_queue_id()"
Return the queue \s-1ID\s0 (for logging) if possible.
.SS "\fI\fP\f(BIenable_extra_debugging()\fP\fI\fP"
.IX Subsection "enable_extra_debugging()"
Turn on extra debugging mode, will cause child to exit on close.
.SS "\fIextra_debugging( \fP\f(CI$line\fP\fI )\fP"
.IX Subsection "extra_debugging( $line )"
Cause \f(CW$line\fR to be written to log if extra debugging mode is enabled.
.SS "\fIlogerror( \fP\f(CI$line\fP\fI )\fP"
.IX Subsection "logerror( $line )"
Log to the error log.
.SS "\fIloginfo( \fP\f(CI$line\fP\fI )\fP"
.IX Subsection "loginfo( $line )"
Log to the info log.
.SS "\fIlogdebug( \fP\f(CI$line\fP\fI )\fP"
.IX Subsection "logdebug( $line )"
Log to the debug log.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "\fI\fP\f(BIget_installed_handlers()\fP\fI\fP"
.IX Subsection "get_installed_handlers()"
Return an array ref of installed handler modules.
.SS "\fI\fP\f(BIsend_panic_email()\fP\fI\fP"
.IX Subsection "send_panic_email()"
Send an email to the administrator with details of a problem.
.PP
Called from the parent process if the server exits.
.SS "\fIget_valid_pid($pid_file)\fP"
.IX Subsection "get_valid_pid($pid_file)"
Given a pid file, check for a valid process \s-1ID\s0 and return if valid.
.SS "\fI\fP\f(BIfind_process()\fP\fI\fP"
.IX Subsection "find_process()"
Search the process table for an authentication_milter parent process
.SS "\fIcontrol($command)\fP"
.IX Subsection "control($command)"
Run a daemon command.  Command can be one of start/restart/stop/status.
.SS "\fIstart($hashref)\fP"
.IX Subsection "start($hashref)"
Start the server. This method does not return.
.PP
.Vb 4
\&    $hashref = {
\&        \*(Aqpid_file\*(Aq   => \*(AqThe pid file to use\*(Aq, #
\&        \*(Aqdaemon\*(Aq     => 1/0,                   # Daemonize process?
\&    }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Marc Bradshaw.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
