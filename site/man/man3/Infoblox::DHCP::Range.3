.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::Range 3"
.TH Infoblox::DHCP::Range 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::Range \- DHCP Range object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1DHCP\s0 range defines the specified range of \s-1IP\s0 addresses in a network. A \s-1DHCP\s0 range should be added for a network so the Infoblox appliance can assign \s-1IP\s0 addresses within that specified range to \s-1DHCP\s0 clients. If the client is on a network that is assigned a \s-1DHCP\s0 range, the device distributes an available \s-1IP\s0 address from that range to the \s-1DHCP\s0 client, or to a \s-1DHCP\s0 relay agent if the request came through an agent. The \s-1DHCP\s0 range should also be assigned with a device. If devices are in a grid, the particular member serving \s-1DHCP\s0 for the \s-1DHCP\s0 range must be specified. If the server is an independent device, this device must be specified as the member that serves the \s-1DHCP\s0 range.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 1
\& my $dhcp_range = Infoblox::DHCP::Range\->new(
\&
\&     end_addr                        => $ipv4addr,                                 #Required
\&     network                         => $network,                                  #Optional
\&     network_view                    => $NetworkView,                              #Optional / Default is system\-defined default network view
\&     start_addr                      => $ipv4addr,                                 #Required
\&     always_update_dns               => "true" | "false",                          #Optional / Default is "false"
\&     bootfile                        => $filename | undef,                         #Optional / Default is undefined
\&     bootserver                      => $ipv4addr | $fqdn | undef,                #Optional / Default is undefined
\&     comment                         => $string,                                   #Optional / Default is undefined
\&     ddns_domainname                 => $string | undef,                           #Optional / Default is undefined
\&     ddns_generate_hostname          => "true" | "false",                          #Optional / Default is undefined
\&     deny_all_clients                => "true" | "false",                          #Optional / Default is "false"
\&     deny_bootp                      => "true" | "false" | undef,                  #Optional / Default is undefined
\&     disable                         => "true" | "false",                          #Optional / Default is "false"
\&     email_list                      => [ "admin\e@test.com",...] | undef,          #Optional / Default is undefined
\&     enable_ddns                     => "true" | "false",                          #Optional / Default is undefined
\&     enable_dhcp_thresholds          => "true" | "false",                          #Optional / Default is "false"
\&     enable_email_warnings           => "true" | "false",                          #Optional / Default is "false"
\&     enable_ifmap_publishing         => "true" | "false",                          #Optional / Default is undefined
\&     enable_known_clients_option     => "true" | "false",                          #Optional / Default is "false"
\&     enable_snmp_warnings            => "true" | "false",                          #Optional / Default is "false"
\&     enable_unknown_clients_option   => "true" | "false",                          #Optional / Default is "false"
\&     exclude                         => [$ExclusionRange1,$ExclusionRange2,...],   #Optional / Default is empty
\&     extattrs                        => { $string => $extattr, ... },              #Optional / Default is undefined
\&     extensible_attributes           => { $string => $string | $num, $string => [ $string | $num, ... ], ... } #Optional / Default is undefined
\&     failover_assoc                  => $string,                                   #Optional / Default is undefined
\&     filters                         => [$MAC, $RelayAgent, $Option...],           #Optional / Default is empty
\&     ignore_dhcp_option_list_request => "true" | "false" | undef,                  #Optional / Default is undefined
\&     ignore_id                       => \*(AqNONE\*(Aq | \*(AqCLIENT\*(Aq | \*(AqMACADDR\*(Aq,             #Optional / Default is \*(AqNONE\*(Aq
\&     ignore_mac_addresses            => [ "mac_addr", ... ] | undef                #Optional / Default is undefined
\&     known_clients_option            => "Allow" | "Deny",                          #Optional / Default is undefined
\&     lease_scavenge_time             => $number,                                   #Optional / Default is \-1
\&     member                          => $Member,                                   #Optional / Default is undefined
\&     ms_options                      => [$MSOption1,$MSOption2,...],               #Optional / Default is empty
\&     name                            => $string,                                   #Optional / Default is undefined
\&     nextserver                      => $ipv4addr | $fqdn | undef,                 #Optional / Default is undefined
\&     options                         => [$Option1,$Option2,...],                   #Optional / Default is empty
\&     logic_filters                   => [ $filter_name | $filter_obj, ...],        #Optional / Default is undefined
\&     override_logic_filters          => "true\*(Aq | \*(Aqfalse",                          #Optional / Default value is "false"
\&     override_ddns_domainname        => "true" | "false",                          #Optional / Default value is "false"
\&     override_enable_ifmap_publishing => "true" | "false",                         #Optional / Default value is "false"
\&     override_lease_scavenge_time    => "true" | "false",                          #Optional / Default value is "false"
\&     override_update_dns_on_lease_renewal  => "true" | "false",                    #Optional / Default value is "false"
\&     override_ignore_id              => "true" | "false",                          #Optional / Default value is "false"
\&     pxe_lease_time                  => $num,                                      #Optional / Default is undefined
\&     range_high_water_mark           => $num,                                      #Optional / Default is 95
\&     range_high_water_mark_reset     => $num,                                      #Optional / Default is 95
\&     range_low_water_mark            => $num,                                      #Optional / Default is 0
\&     range_low_water_mark_reset      => $num,                                      #Optional / Default is 0
\&     recycle_leases                  => "true" | "false",                          #Optional / Default is undefined
\&     server_association_type         => "NONE" | "MEMBER" | "FAILOVER" | "MS_SERVER" #Optional / Default is undefined
\&     split_member                    => $member,                                   #Optional / Default is undefined
\&     split_scope_exclusion_percent   => $num                                       #Optional / Default is undefined
\&     template                        => $string,                                   #Optional / Default is undefined
\&     unknown_clients_option          => "Allow" | "Deny",                          #Optional / Default is undefined
\&     update_dns_on_lease_renewal     => "true" | "false",                          #Optional / Default value is "false"
\&     discovery_blackout_setting      => $blackout,                                 #Optional
\&     port_control_blackout_setting   => $blackout,                                 #Optional
\&     override_blackout_setting       => "true" | "false",                          #Optional / Default value is "false"
\&     same_port_control_discovery_blackout => "true" | "false",                     #Optional / Default value is "false"
\&     subscribe_settings          => $subscribe_settings,                           #Optional / Default is undefined
\&     override_subscribe_settings => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                              #Optional / Default is \*(Aqfalse\*(Aq
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a \s-1DHCP\s0 range object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP\s0 range object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Construct an object
\& my $dhcp_range = Infoblox::DHCP::Range\->new(
\&         end_addr                => "10.0.0.10",
\&         network                 => "10.0.0.0/8",
\&         start_addr              => "10.0.0.1",
\&         bootfile                => "bootfile1.com",
\&         bootserver              => "someserver.com",
\&         comment                 => "add range",
\&         ddns_generate_hostname  => "true",
\&         deny_all_clients        => "true",
\&         deny_bootp              => "true",
\&         disable                 => "true",
\&         enable_ddns             => "true",
\&         exclude                 => [$exclusion_range],
\&         filters                 => [$filter],
\&         member                  => $memberdhcp,
\&         network                 => $nview,
\&         nextserver              => "3.3.3.3",
\&         options                 => [$option1],
\&         pxe_lease_time          => "3600",
\&         recycle_leases          => "true",
\& );
\&
\& # Submit for addition
\& my $response = $session\->add( $dhcp_range );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP range object:
\&
\& start_addr             \- Optional. Starting IP address of DHCP range within the network.
\& network_view           \- Optional. Network view in which the DHCP range is located. By default, all network views are searched.
\& extattrs               \- Optional. A hash reference containing extensible attributes.
\& extensible_attributes  \- Optional. A hash reference containing extensible attributes.
\& failover_assoc         \- Optional. The name of the associated failover peer.
\& member                 \- Optional. The member or Microsoft server serving the range. The valid value is an Infoblox::DHCP::Member, Infoblox::DHCP::MSServer, Infoblox::Grid::Member::DHCP or Infoblox::Grid::MSServer::DHCP object.
\& server_association_type \- Optional. The server association type for the range.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&                       object     => "Infoblox::DHCP::Range",
\&                       start_addr => "10.0.0.1" );
\&
\& my @retrieved_objs = $session\->get(
\&                       object       => "Infoblox::DHCP::Range",
\&                       start_addr   => "10.0.0.1",
\&                       network_view => "default" );
\&
\& my @retrieved_objs = $session\->get(
\&                       object                => "Infoblox::DHCP::Range",
\&                       extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 range object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use method to modify the comment.
\& $dhcp_range\->comment("this is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $dhcp_range );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1DHCP\s0 range object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific \s-1DHCP\s0 range object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& # Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object       => "Infoblox::DHCP::Range",
\&     start_addr   => "10.0.0.1",
\&     newtork_view => "default" );
\& # Find the desired object from the retrieved list.
\& my $desired_dhcp_range = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_dhcp_range );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DHCP\s0 range objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DHCP range object:
\&
\&  network      \- Optional. Network in CIDR format (regular expression).
\&  network_view \- Optional. Network view in which the DHCP range is located. By default, all network views are searched.
\&  start_addr   \- Optional. IPv4 address in dotted decimal notation (regular expression).
\&  end_addr     \- Optional. IPv4 address in dotted decimal notation (regular expression).
\&  comment      \- Optional. Comment in string format (regular expression).
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&  failover_assoc        \- Optional. The name of the associated failover peer.
\&  member                \- Optional. The member or Microsoft server serving the range. The valid value is an Infoblox::DHCP::Member, Infoblox::DHCP::MSServer, Infoblox::Grid::Member::DHCP or Infoblox::Grid::MSServer::DHCP object.
\&  server_association_type \- Optional. The server association type for the range.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 7
\& # search for DHCP range object with start address having last octet as 1
\& my @retrieved_objs = $session\->search(
\&     object       => "Infoblox::DHCP::Range",
\&     network      => "10.0.0.0/.",
\&     network_view => "default",
\&     start_addr   => ".*1",
\&     comment      => ".*comment" );
\&
\& # search for DHCP range objects defining "Santa Clara" for "Site" extensible attribute
\& my @retrieved_objs = $session\->search(
\&     object                => "Infoblox::DHCP::Range",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a \s-1DHCP\s0 range.
.SS "always_update_dns( )"
.IX Subsection "always_update_dns( )"
.RS 4
Use this method to set or retrieve the always_update_dns flag of a \s-1DHCP\s0 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This flag only applies if the range is associated with a Microsoft (r) server. If it is set to \*(L"true\*(R", the \s-1DHCP\s0 server will always update \s-1DNS,\s0 regardless of the requests from the \s-1DHCP\s0 clients. If this flag is set to false, clients will be allowed to update \s-1DNS\s0 when they request it.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the always_update_dns flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get always_update_dns
\& my $always_update_dns = $dhcp_range\->always_update_dns();
\& #Modify always_update_dns
\& $dhcp_range\->always_update_dns("false");
.Ve
.RE
.RS 4
.RE
.SS "bootfile( )"
.IX Subsection "bootfile( )"
.RS 4
Use this method to set or retrieve a bootfile name which is the name of the file the client must download.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::Range\->\fBbootserver()\fR and Infoblox::DHCP::Range\->\fBnextserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The boot file name in string format with a maximum of 128 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get bootfile
\& my $bootfile = $dhcp_range\->bootfile();
\& #Modify bootfile
\& $dhcp_range\->bootfile("bootfile2.com");
\& #Un\-override bootfile
\& $dhcp_range\->bootfile(undef);
.Ve
.RE
.RS 4
.RE
.SS "bootserver( )"
.IX Subsection "bootserver( )"
.RS 4
Use this method to set or retrieve a bootserver name which is the name of the server where the boot file is stored.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::Range\->\fBbootfile()\fR and Infoblox::DHCP::Range\->\fBnextserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The boot server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A boot server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get bootserver
\& my $bootserver = $dhcp_range\->bootserver();
\& #Modify bootserver
\& $dhcp_range\->bootserver("anotherserver.com");
\& #Un\-override bootserver
\& $dhcp_range\->bootserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $dhcp_range\->comment();
\& #Modify comment
\& $dhcp_range\->comment("Modifying the DHCP range comment");
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to set or retrieve cloud \s-1API\s0 related information for the Infoblox::DHCP::Range object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a Infoblox::Grid::CloudAPI::Info object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get cloud_info
\& my $cloud_info = $dhcp_range\->cloud_info();
\& # Modify cloud_info
\& $dhcp_range\->cloud_info($cloud_info_object);
.Ve
.RE
.RS 4
.RE
.SS "ddns_domainname( )"
.IX Subsection "ddns_domainname( )"
.RS 4
Use this method to set or retrieve the ddns_domainname value of a \s-1DHCP\s0 Range object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_domainname method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_ddns_domainname attribute to \*(L"false\*(R".
.Sp
Note that when ddns_domainname is set to a defined value and override_dddns_domainname is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); will set override_ddns_domainname to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); will result in override_ddns_domainname=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The dynamic \s-1DNS\s0 domain name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ddns_domainname
\& my $ddns_domainname = $dhcp_range\->ddns_domainname();
\& #Modify ddns_domainname
\& $dhcp_range\->ddns_domainname("test_domain.com");
.Ve
.RE
.RS 4
.RE
.SS "ddns_generate_hostname( )"
.IX Subsection "ddns_generate_hostname( )"
.RS 4
Use this method to set or retrieve the ddns_generate_hostname flag of a \s-1DHCP\s0 range.
.Sp
Enable this method to allow only the \s-1DHCP\s0 server to generate a hostname.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the ddns_generate_hostname flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ddns_generate_hostname
\& my $ddns_generate_hostname = $dhcp_range\->ddns_generate_hostname();
\& #Modify ddns_generate_hostname
\& $dhcp_range\->ddns_generate_hostname("false");
.Ve
.RE
.RS 4
.RE
.SS "deny_all_clients( )"
.IX Subsection "deny_all_clients( )"
.RS 4
Use this method to set or retrieve the deny_all_clients flag of a \s-1DHCP\s0 range.
.Sp
Enable this method to deny all lease requests for the \s-1DHCP\s0 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the deny_all_clients flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is false.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get deny_all_clients
\& my $deny_all_clients = $dhcp_range\->deny_all_clients();
\& #Modify deny_all_clients
\& $dhcp_range\->deny_all_clients("false");
.Ve
.RE
.RS 4
.RE
.SS "deny_bootp( )"
.IX Subsection "deny_bootp( )"
.RS 4
Use this method to set or retrieve the deny_bootp flag of a \s-1DHCP\s0 range.
.Sp
Enable this method to deny all \s-1BOOTP\s0 requests.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the deny_bootp flag or \*(L"false\*(R" to deactivate/unset it. The default value is false which indicates that this attribute inherit the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get deny_bootp
\& my $deny_bootp = $dhcp_range\->deny_bootp();
\& #Modify deny_bootp
\& $dhcp_range\->deny_bootp("false");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DHCP\s0 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is false.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $dhcp_range\->disable();
\& #Modify disable
\& $dhcp_range\->disable("false");
.Ve
.RE
.RS 4
.RE
.SS "discovery_basic_poll_setting( )"
.IX Subsection "discovery_basic_poll_setting( )"
.RS 4
Use this method to set or retrieve the discovery_basic_poll_setting value of a \s-1DHCP\s0 Range.
.Sp
Include the specified parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is object of Infoblox::Grid::Discovery::BasicPollSettings.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get discovery_basic_poll_setting
\& my $discovery_basic_poll_setting = $dhcp_range\->discovery_basic_poll_setting();
\& #Modify discovery_basic_poll_setting
\& $dhcp_range\->discovery_basic_poll_setting($poll_setting);
.Ve
.RE
.RS 4
.RE
.SS "discovery_member( )"
.IX Subsection "discovery_member( )"
.RS 4
Use this method to set or retrieve the discovery_member value of a \s-1DHCP\s0 Range.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The discovery member name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get discovery_member
\& my $discovery_member = $dhcp_range\->discovery_member();
\& #Modify discovery_member
\& $dhcp_range\->discovery_member("test.localdomain");
.Ve
.RE
.RS 4
.RE
.SS "discover_now_status( )"
.IX Subsection "discover_now_status( )"
.RS 4
Use this method to retrieve the current discovery status. This attribute is read-only.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1COMPLETE\s0', '\s-1FAILED\s0', '\s-1NONE\s0', '\s-1PENDING\s0' or '\s-1RUNNING\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discover_now_status
\& my $discover_now_status = $dhcp_range\->discover_now_status();
.Ve
.RE
.RS 4
.RE
.SS "discovery_blackout_setting( )"
.IX Subsection "discovery_blackout_setting( )"
.RS 4
Use this method to set or retrieve the discovery blackout setting.
.Sp
Setting this method to a defined value implicitly sets the override_blackout_setting method to \*(L"true\*(R". If port_control_blackout_setting is undefined, setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_blackout_setting attribute to \*(L"false\*(R".
.Sp
Note that when discovery_blackout_setting is set to a defined value and override_blackout_setting is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$network\fR\->discovery_blackout_setting($blackout); \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); will set override_blackout_setting to \*(L"false\*(R", and the sequence \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); \f(CW$network\fR\->discovery_blackout_setting($blackout); will result in override_blackout_setting=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::Properties::BlackoutSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get discovery_blackout_setting
\& my $discovery_blackout_setting = $dhcp_range\->discovery_blackout_setting();
\& #Modify discovery_blackout_setting
\& $dhcp_range\->discovery_blackout_setting($blackout);
.Ve
.RE
.RS 4
.RE
.SS "enable_discovery( )"
.IX Subsection "enable_discovery( )"
.RS 4
Use this method to set or retrieve the enable_discovery value of a \s-1DHCP\s0 Range.  This setting overrides the member level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_enable_discovery method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_enable_discovery attribute to \*(L"false\*(R".
.Sp
Enable this flag if you want to set discovery for this object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_discovery flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_discovery
\& my $enable_discovery = $dhcp_range\->enable_discovery();
\& #Modify enable_discovery
\& $dhcp_range\->enable_discovery("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_immediate_discovery( )"
.IX Subsection "enable_immediate_discovery( )"
.RS 4
Use this method to set or retrieve enable_immediate_discovery value of a \s-1DHCP\s0 Range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_immediate_discovery flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_immediate_discovery
\& my $enable_immediate_discovery = $dhcp_range\->enable_immediate_discovery();
\& #Modify enable_immediate_discovery
\& $dhcp_range\->enable_immediate_discovery("false");
.Ve
.RE
.RS 4
.RE
.SS "email_list( )"
.IX Subsection "email_list( )"
.RS 4
Use this method to set or retrieve the email list to which the appliance sends notifications when \s-1DHCP\s0 address usage for the grid crosses a threshold.
.Sp
If you enter email addresses in the email_list, then the appliance sends \s-1DHCP\s0 threshold alarms to the email addresses.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains string objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get email_list
\& my @email_list = $range\->email_list();
\& #Modify email_list
\& $range\->email_list( [ "admin\e@test.com" ] );
.Ve
.RE
.RS 4
.RE
.SS "enable_ddns( )"
.IX Subsection "enable_ddns( )"
.RS 4
Use this method to set or retrieve the enable_ddns flag of a \s-1DHCP\s0 range.
.Sp
Enable this method to allow dynamic \s-1DNS\s0 updates.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_ddns flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_ddns
\& my $enable_ddns = $dhcp_range\->enable_ddns();
\& #Modify enable_ddns
\& $dhcp_range\->enable_ddns("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_dhcp_thresholds( )"
.IX Subsection "enable_dhcp_thresholds( )"
.RS 4
Use this method to set or retrieve \s-1DHCP\s0 thresholds at the \s-1DHCP\s0 address range level. These thresholds are the high and low watermarks. If \s-1DHCP\s0 range usage goes above or below these percentage values, the Infoblox appliance generates a syslog message and sends an \s-1SNMP\s0 trap, if configured.
.Sp
Enable this flag to set \s-1DHCP\s0 threshold values.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_dhcp_thresholds flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_dhcp_thresholds
\& my $enable_dhcp_thresholds = $range\->enable_dhcp_thresholds();
\& #Modify enable_dhcp_thresholds
\& $range\->enable_dhcp_thresholds("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_ifmap_publishing( )"
.IX Subsection "enable_ifmap_publishing( )"
.RS 4
Use this method to set or retrieve the ifmap publishing option of a \s-1DHCP\s0 Range object. This setting overrides the member level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set ifmap publishing option or \*(L"false\*(R" to deactivate/unset it. The default value is 'false', which indicates that this attribute inherits the member level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get enable ifmap publishing
\& my $enable_ifmap_publishing = $dhcp_range\->enable_ifmap_publishing()
\& # Modify enable_ifmap_publishing
\& $dhcp_range\->enable_ifmap_publishing("true");
\& # Un\-override enable_ifmap_publishing
\& $dhcp_range\->enable_ifmap_publishing(undef);
.Ve
.RE
.RS 4
.RE
.SS "enable_email_warnings( )"
.IX Subsection "enable_email_warnings( )"
.RS 4
Use this method to enable the appliance to send email notifications when \s-1DHCP\s0 address usage crosses a high or low watermark threshold.
.Sp
Enable this flag if you want the appliance to send \s-1DHCP\s0 threshold warnings to the \*(L"email_list\*(R" provided when \s-1DHCP\s0 threshold is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_email_warnings flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_email_warnings
\& my $enable_email_warnings = $range\->enable_email_warnings();
\& #Modify enable_email_warnings
\& $range\->enable_email_warnings("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_known_clients_option( )"
.IX Subsection "enable_known_clients_option( )"
.RS 4
Use this method to set or retrieve the enable_known_clients_option flag of a \s-1DHCP\s0 range.
.Sp
You must set the enable_known_clients_option flag to true in order to use the known_clients_option attribute.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_known_clients_option flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_known_clients_option
\& my $enable_known_clients_option = $dhcp_range\->enable_known_clients_option();
\& #Modify enable_known_clients_option
\& $dhcp_range\->enable_known_clients_option("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_snmp_warnings( )"
.IX Subsection "enable_snmp_warnings( )"
.RS 4
Use this method to enable the appliance to send an \s-1SNMP\s0 trap when \s-1DHCP\s0 address usage crosses a watermark threshold.
.Sp
If the flag is enabled, then the appliance sends \s-1SNMP\s0 traps when \s-1DHCP\s0 address usage crosses a watermark threshold when \s-1DHCP\s0 threshold is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_snmp_warnings flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_snmp_warnings
\& my $enable_snmp_warnings = $range\->enable_snmp_warnings();
\& #Modify enable_snmp_warnings
\& $range\->enable_snmp_warnings("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_unknown_clients_option( )"
.IX Subsection "enable_unknown_clients_option( )"
.RS 4
Use this method to set or retrieve the enable_unknown_clients_option flag of a \s-1DHCP\s0 range.
.Sp
You must set the enable_unknown_clients_option flag to true in order to use the unknown_clients_option attribute.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_unknown_clients_option flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_unknown_clients_option
\& my $enable_unknown_clients_option = $dhcp_range\->enable_unknown_clients_option();
\& #Modify enable_unknown_clients_option
\& $dhcp_range\->enable_unknown_clients_option("false");
.Ve
.RE
.RS 4
.RE
.SS "end_addr( )"
.IX Subsection "end_addr( )"
.RS 4
Use this method to set or retrieve the end address of the \s-1DHCP\s0 range.
.Sp
An end address is the last \s-1IP\s0 address in the \s-1DHCP\s0 range available for the clients.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the end address of the \s-1DHCP\s0 range in IPv4 address format. An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get end_addr
\& my $end_addr = $dhcp_range\->end_addr();
\& #Modify end_addr
\& $dhcp_range\->end_addr("10.0.0.20");
.Ve
.RE
.RS 4
.RE
.SS "endpoint_sources( )"
.IX Subsection "endpoint_sources( )"
.RS 4
Use this method to retrieve the list of endpoints that provide object data. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an array of Infoblox::CiscoISE::Endpoint objects.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get endpoint_sources value
\& my $endpoint_sources = $object\->endpoint_sources();
.Ve
.RE
.RS 4
.RE
.SS "exclude( )"
.IX Subsection "exclude( )"
.RS 4
Use this method to set or retrieve the exclusion range of \s-1IP\s0 addresses in the \s-1DHCP\s0 range which should not be assigned to clients.
.Sp
If static addresses in the middle of an \s-1DHCP\s0 range are assigned to certain hosts, those addresses can be excluded from the \s-1DHCP\s0 range using this method.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains defined Infoblox::DHCP::ExclusionRange objects. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get exclude
\& my $ref_exclude = $dhcp_range\->exclude();
\& #Modify exclude
\& $dhcp_range\->exclude([$exl1]); #$exl1 is an Infoblox::DHCP::ExclusionRange object
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 range object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $dhcp_range\->extattrs();
\& #Modify extattrs
\& $dhcp_range\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 range object
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $dhcp_range\->extensible_attributes();
\& #Modify extensible attributes
\& $dhcp_range\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "failover_assoc( )"
.IX Subsection "failover_assoc( )"
.RS 4
Use this method to set or retrieve the failover peer association name of the \s-1DHCP\s0 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
If the attribute is set, the server_association_type attribute will also be set to \*(L"\s-1FAILOVER\*(R"\s0 if the name is defined, or to \*(L"\s-1NONE\*(R"\s0 if the member is also undefined.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the failover peer association name in string format. The default value is undefined.
.Sp
Use an empty string ('') to remove a failover peer association from the \s-1DHCP\s0 range.  Using undef is deprecated and may be changed in the future.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get failover_assoc
\& my $failover_assoc = $dhcp_range\->failover_assoc();
\& #Modify failover_assoc
\& $dhcp_range\->failover_assoc("peer2");
\& #Remove failover_assoc (using undef for removal is deprecated)
\& $dhcp_range\->failover_assoc("");
.Ve
.RE
.RS 4
.RE
.SS "filters( )"
.IX Subsection "filters( )"
.RS 4
Use this method to set or retrieve the filters of the \s-1DHCP\s0 range.
.Sp
Filters are used to screen the address assignments if the addresses in the \s-1DHCP\s0 range needs to be assigned to specific hosts.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains defined Infoblox::DHCP::FilterRule::MAC, Infoblox::DHCP::FilterRule::NAC, Infoblox::DHCP::FilterRule::RelayAgent, Infoblox::DHCP::FilterRule::Option, Infoblox::DHCP::FilterRule::Fingerprint  objects. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get filters
\& my $ref_filters = $dhcp_range\->filters();
\& #Modify filters
\& $dhcp_range\->filters([$exl1]); #$exl1 is an Infoblox::DHCP::FilterRule::MAC, Infoblox::DHCP::FilterRule::NAC, Infoblox::DHCP::FilterRule::RelayAgent, Infoblox::DHCP::FilterRule::Option or Infoblox::DHCP::FilterRule::Fingerprint object.
.Ve
.RE
.RS 4
.RE
.SS "ignore_id( )"
.IX Subsection "ignore_id( )"
.RS 4
Use this method to set or retrieve the ignore_id type of a \s-1DHCP\s0 range object. Indicates whether the appliance will ignore \s-1DHCP\s0 client IDs or \s-1MAC\s0 addresses. This setting overrides the upper-level settings.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1NONE\s0', '\s-1CLIENT\s0', or '\s-1MACADDR\s0'. The default is '\s-1NONE\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get attribute value
\& $value = $dhcp_range\->ignore_id();
\& # Modify attribute value
\& $dhcp_range\->ignore_id(\*(AqCLIENT\*(Aq);
\& #Un\-override ignore_id
\& $dhcp_range\->ignore_id(undef);
.Ve
.RE
.RS 4
.RE
.SS "ignore_mac_addresses( )"
.IX Subsection "ignore_mac_addresses( )"
.RS 4
Use this method to set or retrieve the ignore_mac_addresses list of a \s-1DHCP\s0 range object. A list of \s-1MAC\s0 addresses the appliance will ignore. This setting overrides the upper-level settings.
.Sp
If you enter \s-1MAC\s0 addresses in the ignore_mac_addresses, then the appliance will ignore them. If you enter empty array, then the appliance will ignore any \s-1MAC\s0 address.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains string objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& $value = $dhcp_range\->ignore_mac_addresses();
\& # Modify attribute value
\& $dhcp_range\->ignore_mac_addresses(["11::11::11::11::11::11"]);
.Ve
.RE
.RS 4
.RE
.SS "is_split_scope( )"
.IX Subsection "is_split_scope( )"
.RS 4
Use this method to retrieve the is_split_scope flag of the \s-1DHCP\s0 range. This flag is \*(L"true\*(R" when the range is part of a split scope.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get is_split_scope
\& my $is_split_scope = $dhcp_range\->is_split_scope();
.Ve
.RE
.RS 4
.RE
.SS "known_clients_option( )"
.IX Subsection "known_clients_option( )"
.RS 4
Use this method to set or retrieve the known_clients_option option of a \s-1DHCP\s0 range.
.Sp
Set this option to \*(L"Allow\*(R" or \*(L"Deny\*(R" to allow or prevent the allocation of an \s-1IP\s0 address from this pool to any client that has a host declaration.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"Allow\*(R" or \*(L"Deny\*(R" to set the known_clients_option flag value. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get known_clients_option
\& my $known_clients_option = $dhcp_range\->known_clients_option();
\& #Modify known_clients_option
\& $dhcp_range\->known_clients_option("Deny");
.Ve
.RE
.RS 4
.RE
.SS "lease_scavenge_time( )"
.IX Subsection "lease_scavenge_time( )"
.RS 4
Use this method to set or retrieve the lease_scavenge_time value of a \s-1DHCP\s0 Range object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_lease_scavenge_time method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_lease_scavenge_time attribute to \*(L"false\*(R".
.Sp
Note that when lease_scavenge_time is set to a defined value and override_lease_scavenge_time is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->lease_scavenge_time(604800); \f(CW$object\fR\->override_lease_scavenge_time(\*(L"false\*(R"); will set override_lease_scavenge_time to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_lease_scavenge_time(\*(L"false\*(R"); \f(CW$object\fR\->lease_scavenge_time(604800); will result in override_lease_scavenge_time=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An integer that specifies the period of time, in seconds, that free and backup leases remain in the database before they are automatically deleted. To disable lease scavenging, set the parameter to \-1. The minimum positive value must be greater than 86400 seconds (1 day). The default value of this parameter is \-1, which means that lease scavenging is disabled.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lease_scavenge_time
\& my $lease_scavenge = $dhcp_range\->lease_scavenge_time();
\& #Modify lease_scavenge_time
\& $dhcp_range\->lease_scavenge_time(30 * 24 * 60 * 60);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve a descriptive name for the range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The desired name in string format with a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $dhcp_range\->name();
\& #Modify name
\& $dhcp_range\->name("external");
.Ve
.RE
.RS 4
.RE
.SS "next_available_ip( )"
.IX Subsection "next_available_ip( )"
.RS 4
Use this method to get the next available \s-1IP\s0 address(es) in the \s-1DHCP\s0 range object that was retrieved. Note that to use this method, the object \s-1MUST\s0 be retrieved via a get or search call, or created with an add call.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The method accepts the following optional parameters:
.Sp
.Vb 2
\&  requested_num \- The number of IP addresses requested. It must be a value between 1 and 20, inclusive.
\&  excluded \- A reference to an array of addresses to be excluded from the results.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns the next available \s-1IP\s0 address(es) in the range. If requested_num is not specified, a string with the next available address will be returned; otherwise, the method will return a reference to an array of addresses.
.Sp
Within a \s-1DHCP\s0 Range object, the next available \s-1IP\s0 address(es) are the first addresses in this range that match all of the following rules:
.Sp
.Vb 5
\&   * Are not part of the passed \*(Aqexcluded\*(Aq parameter (if specified).
\&   * There is no fixed address or host address record matching this IP address
\&   * There is no unmanaged record matching this IP address
\&   * The IP address is not contained in any excluded range of this DHCP range
\&   * There is no active lease matching this IP address (Deleted leases in the recycle bin are not considered.)
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Retrieve a particular range
\& my @retrieved_objs = $session\->get(
\&                           object     => "Infoblox::DHCP::Range",
\&                           start_addr => "10.0.0.20"
\& );
\&
\& $dhcp_range = $retrieved_objs[0];
\&
\& # Print the next available IP address in the range
\& print $dhcp_range\->next_available_ip() . "\en";
\&
\& # This will retrieve the next 10 available addresses and print the first one.
\& my $addressesref = $dhcp_range\->next_available_ip(requested_num => 10);
\& print @$addressesref[0] . "\en";
\&
\& # This will retrieve the next 10 available addresses and exclude a couple.
\& my $addressesref = $dhcp_range\->next_available_ip(requested_num => 10, excluded => ["10.0.0.21", "10.0.0.22"]);
.Ve
.RE
.RS 4
.RE
.SS "ignore_dhcp_option_list_request( )"
.IX Subsection "ignore_dhcp_option_list_request( )"
.RS 4
Use this method to set or retrieve the ignore_dhcp_option_list_request flag of a \s-1DHCP\s0 shared network object. If this flag is set to false all the defined \s-1DHCP\s0 options will be returned to the client. This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the  ignore_dhcp_option_list_request flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined which indicates that this attribute inherit the upper-level setting..
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ignore_dhcp_option_list_request
\& my $ignore_dhcp_option_list_request = $dhcp_range\->ignore_dhcp_option_list_request();
\& # Un\-override ignore_dhcp_option_list_request
\& $dhcp_range\->ignore_dhcp_option_list_request(undef);
\& # Modify ignore_dhcp_option_list_request
\& $dhcp_range\->ignore_dhcp_option_list_request("true");
.Ve
.RE
.RS 4
.RE
.SS "member( )"
.IX Subsection "member( )"
.RS 4
Use this method to set or retrieve the member or Microsoft server that serves the \s-1DHCP\s0 range.
.Sp
The member or Microsoft server that serves \s-1DHCP\s0 for this \s-1IP\s0 address range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
If the attribute is set, the server_association_type attribute will also be set to \*(L"\s-1MEMBER\*(R"\s0 if setting member to an Infoblox::DHCP::Member object, to \*(L"\s-1MS_SERVER\*(R"\s0 if setting member to an Infoblox::DHCP::MSServer object, or to \*(L"\s-1NONE\*(R"\s0 if failover_assoc is also empty.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a defined Infoblox::DHCP::Member or Infoblox::DHCP::MSServer object. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get member
\& my $ref_member = $dhcp_range\->member();
\& #Modify member
\& $dhcp_range\->member($member1); #$member is an Infoblox::DHCP::Member object
.Ve
.RE
.RS 4
.RE
.SS "ms_ad_user_data( )"
.IX Subsection "ms_ad_user_data( )"
.RS 4
Use this method to retrieve Microsoft Active Directory users related information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::MSServer::AdUser::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_ad_user_data
\& my $ms_ad_user_data = $dhcp_range\->ms_ad_user_data();
.Ve
.RE
.RS 4
.RE
.SS "ms_options( )"
.IX Subsection "ms_options( )"
.RS 4
Use this method to set or retrieve the Microsoft server custom \s-1DHCP\s0 options that are associated with this \s-1DHCP\s0 range.
.Sp
Note: You can set only options that are included in both the Microsoft server and \s-1NIOS\s0 predefined option definitions. Options that are not common to both are read only and cannot be modified.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains defined Infoblox::DHCP::MSOption objects. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get options
\& my $ref_options = $dhcp_range\->ms_options();
\& #Modify options
\& $dhcp_range\->ms_options([$option12]); #$option12 is an Infoblox::DHCP::MSOption object
.Ve
.RE
.RS 4
.RE
.SS "network( )"
.IX Subsection "network( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 network of the address range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the address and netmask of network in \s-1CIDR\s0 format (example: 10.0.0.0/8).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network
\& my $network = $dhcp_range\->network();
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the network view of the \s-1DHCP\s0 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" network view, which means the \s-1DHCP\s0 range is in the default network view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a defined Infoblox::DHCP::View object. The default network view value is the system-defined default network view object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network view
\& my $nview = $dhcp_range\->network_view();
\& #Modify network view, with an Infoblox::DHCP::View object
\& $dhcp_range\->network_view($nview);
.Ve
.RE
.RS 4
.RE
.SS "nextserver( )"
.IX Subsection "nextserver( )"
.RS 4
Use this method to set or retrieve the nextserver \s-1IP\s0 address which is the boot file server where the boot file is stored.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::Range\->\fBbootfile()\fR and Infoblox::DHCP::Range\->\fBbootserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The next server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A next server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get nextserver
\& my $nextserver = $dhcp_range\->nextserver();
\& #Modify nextserver
\& $dhcp_range\->nextserver("4.4.4.4");
\& #Un\-override nextserver
\& $dhcp_range\->nextserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "options( )"
.IX Subsection "options( )"
.RS 4
Use this method to set or retrieve the options of the \s-1DHCP\s0 range.
.Sp
\&\s-1DHCP\s0 options describe network configuration settings and various services available on the network. Setting the \s-1DHCP\s0 options for the \s-1DHCP\s0 range overrides the options set at the network level.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains defined Infoblox::DHCP::Option objects. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get options
\& my $ref_options = $dhcp_range\->options();
\& #Modify options
\& $dhcp_range\->options([$option12]); #$option12 is an Infoblox::DHCP::Option object
.Ve
.RE
.RS 4
.RE
.SS "logic_filters( )"
.IX Subsection "logic_filters( )"
.RS 4
Use this method to set or retrieve all the logic (ordered) filters associated with the \s-1DHCP\s0 Range.
.Sp
Filters are used to screen address assignments in a \s-1DHCP\s0 Range if the addresses are to be assigned to specific hosts.
.Sp
Setting this method to a defined value implicitly sets the override_logic_filters method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_logic_filters attribute to \*(L"false\*(R".
.Sp
Note that when logic_filters is set to a defined value and override_dlogic_filters is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->logic_filters($filters); \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); will set override_logic_filters to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); \f(CW$object\fR\->logic_filters($filters); will result in override_logic_filters=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains either the Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC, Infoblox::DHCP::Filter::Option objects or the names of the corresponding filters. The filters in the list must satisfy the following conditions:
.RS 4
.IP "Filter name must be globally unique." 4
.IX Item "Filter name must be globally unique."
.PD 0
.IP "Filters without expressions must be at the end of the list." 4
.IX Item "Filters without expressions must be at the end of the list."
.IP "The filters should not be disabled." 4
.IX Item "The filters should not be disabled."
.RE
.RS 4
.PD
.Sp
The default value of the parameter is undefined.
.RE
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get logic_filters
\& my $ref_logic_filters = $dhcp_range\->logic_filters();
\& #Modify logic_filters
\& $dhcp_range\->logic_filters(["filter_1","filter_2",$exl1]); #$exl1 is an Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC or Infoblox::DHCP::Filter::Option object.
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_domainname( )"
.IX Subsection "override_ddns_domainname( )"
.RS 4
The override_ddns_domainname attribute controls whether the ddns_domainname value in the \s-1DHCP\s0 range is used, instead of the grid default.
.Sp
The override_ddns_domainname attribute can be specified explicitly. It is also set implicitly when ddns_domainname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for ddns_domainname. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for ddns_domainname.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_domainname
\&    my $override_ddns_domainname=$dhcp_range\->override_ddns_domainname( );
\&    #Modifying override_ddns_domainname
\&    $dhcp_range\->override_ddns_domainname("true");
.Ve
.RE
.RS 4
.RE
.SS "override_enable_ifmap_publishing( )"
.IX Subsection "override_enable_ifmap_publishing( )"
.RS 4
The override_enable_ifmap_publishing controls whether the enable_ifmap_publishing in the \s-1DHCP\s0 Range is used, instead of the grid default.
.Sp
The override_enable_ifmap_publishing can be specified explicitly. It is also set implicitly when enable_ifmap_publishing is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for enable_ifmap_publishing. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for enable_ifmap_publishing.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_enable_ifmap_publishing
\&    my $override_enable_ifmap_publishing=$dhcp_range\->override_enable_ifmap_publishing( );
\&    #Modifying override_enable_ifmap_publishing
\&    $dhcp_range\->override_enable_ifmap_publishing("true");
.Ve
.RE
.RS 4
.RE
.SS "override_blackout_setting( )"
.IX Subsection "override_blackout_setting( )"
.RS 4
The override_blackout_setting attribute controls whether the discovery_blackout_setting and port_control_blackout_setting values in the object are used, instead of the grid default.
.Sp
The override_blackout_setting attribute can be specified explicitly. It is also set implicitly when discovery_blackout_setting or port_control_blackout_setting is set to a defined value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_blackout_setting flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $dhcp_range\->override_blackout_setting();
\& # Modify attribute value
\& $dhcp_range\->override_blackout_setting(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_ignore_id( )"
.IX Subsection "override_ignore_id( )"
.RS 4
The override_ignore_id controls whether the ignore_id in the \s-1DHCP\s0 Range is used, instead of the upper-level default.
.Sp
The override_ignore_id can be specified explicitly. It is also set implicitly when ignore_id is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ignore_id and ignore_mac_addresses. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ignore_id and ignore_mac_addresses.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get attrubute value
\&    my $value=$dhcp_range\->override_ignore_id();
\&    #Modifying attribute value
\&    $dhcp_range\->override_ignore_id(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_lease_scavenge_time( )"
.IX Subsection "override_lease_scavenge_time( )"
.RS 4
The override_lease_scavenge_time attribute controls whether the lease_scavenge_time value in the  \s-1DHCP\s0 range is used, instead of the upper-level default.
.Sp
The override_lease_scavenge_time attribute can be specified explicitly. It is also set implicitly when lease_scavenge_time is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for lease_scavenge_time. Set the parameter to \*(L"false\*(R" to inherit the setting for lease_scavenge_time from the upper level.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_lease_scavenge_time
\&    my $override_lease_scavenge_time=$dhcp_range\->override_lease_scavenge_time( );
\&    #Modifying override_lease_scavenge_time
\&    $dhcp_range\->override_lease_scavenge_time("true");
.Ve
.RE
.RS 4
.RE
.SS "override_logic_filters( )"
.IX Subsection "override_logic_filters( )"
.RS 4
The override_logic_filters attribute controls whether the logic_filters value in the \s-1DHCP\s0 Range is used, instead of the Grid default.
.Sp
The override_logic_filters attribute can be specified explicitly. It is also set implicitly when logic_filters is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for logic_filters. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for logic_filters.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_logic_filters
\& my $override_logic_filters=$dhcp_range\->override_logic_filters( );
\& #Modifying override_logic_filters
\& $dhcp_range\->override_logic_filters("true");
.Ve
.RE
.RS 4
.RE
.SS "override_subscribe_settings( )"
.IX Subsection "override_subscribe_settings( )"
.RS 4
The override_subscribe_settings attribute controls whether the subscribe_settings method values of the member are used, instead of the Grid default.
.Sp
The override_subscribe_settings attribute can be specified explicitly. It is also set implicitly when subscribe_settings is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for subscribe_settings. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for subscribe_settings.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_subscribe_settings value
\& my $override_subscribe_settings = $object\->override_subscribe_settings( );
\& #Modify override_subscribe_settings value
\& $object\->override_subscribe_settings("true");
.Ve
.RE
.RS 4
.RE
.SS "override_update_dns_on_lease_renewal( )"
.IX Subsection "override_update_dns_on_lease_renewal( )"
.RS 4
The override_update_dns_on_lease_renewal attribute controls whether the update_dns_on_lease_renewal value in the \s-1DHCP\s0 range is used, instead of the grid default.
.Sp
The override_update_dns_on_lease_renewal attribute can be specified explicitly. It is also set implicitly when update_dns_on_lease_renewal is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for update_dns_on_lease_renewal. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for update_dns_on_lease_renewal.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_update_dns_on_lease_renewal
\&    my $override_update_dns_on_lease_renewal=$dhcp_range\->override_update_dns_on_lease_renewal( );
\&    #Modifying override_update_dns_on_lease_renewal
\&    $dhcp_range\->override_update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SS "port_control_blackout_setting"
.IX Subsection "port_control_blackout_setting"
.RS 4
Use this method to set or retrieve the port control blackout setting.
.Sp
Setting this method to a defined value implicitly sets the override_blackout_setting method to \*(L"true\*(R". If discovery_blackout_setting is undefined, setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_blackout_setting attribute to \*(L"false\*(R".
.Sp
Note that when port_control_blackout_setting is set to a defined value and override_blackout_setting is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$network\fR\->port_control_blackout_setting($blackout); \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); will set override_blackout_setting to \*(L"false\*(R", and the sequence \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); \f(CW$network\fR\->port_control_blackout_setting($blackout); will result in override_blackout_setting=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::Properties::BlackoutSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get port_control_blackout_setting
\& my $port_control_blackout_setting = $dhcp_range\->port_control_blackout_setting();
\& #Modify port_control_blackout_setting
\& $dhcp_range\->port_control_blackout_setting($blackout);
.Ve
.RE
.RS 4
.RE
.SS "pxe_lease_time( )"
.IX Subsection "pxe_lease_time( )"
.RS 4
Use this method to set or retrieve \s-1PXE\s0 Lease Time value of the \s-1DHCP\s0 range.
.Sp
The Preboot Execution Environment Lease Time value is used by some hosts to boot remotely from a server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) represents the duration in seconds that the record is cached. Zero indicates that the record should not be cached. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get pxe_lease_time
\& my $pxe_lease_time = $dhcp_range\->pxe_lease_time();
\& #Modify pxe_lease_time
\& $dhcp_range\->pxe_lease_time("7200");
.Ve
.RE
.RS 4
.RE
.SS "range_high_water_mark( )"
.IX Subsection "range_high_water_mark( )"
.RS 4
Use this method to set or retrieve the range_high_water_mark value. If the percentage of allocated addresses exceeds this value, an \s-1SNMP\s0 trap is sent, unless this is a range served by a Microsoft server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The high watermark value must be greater than the low watermark value. The default value is 95.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get range_high_water_mark
\& my $range_high_water_mark = $range\->range_high_water_mark();
\& #Modify range_high_water_mark
\& $range\->range_high_water_mark(80);
.Ve
.RE
.RS 4
.RE
.SS "range_high_water_mark_reset( )"
.IX Subsection "range_high_water_mark_reset( )"
.RS 4
Use this method to set or retrieve the range_high_water_mark_reset value. If the percentage of allocated addresses drops below this value, a corresponding \s-1SNMP\s0 trap is reset.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The high watermark reset value must be lower than the high watermark value. The default value is 85.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get range_high_water_mark_reset
\& my $range_high_water_mark_reset = $range\->range_high_water_mark_reset();
\& #Modify range_high_water_mark_reset
\& $range\->range_high_water_mark_reset(70);
.Ve
.RE
.RS 4
.RE
.SS "range_low_water_mark( )"
.IX Subsection "range_low_water_mark( )"
.RS 4
Use this method to set or retrieve the range_low_water_mark value. If the percentage of allocated addresses drops below this watermark, an \s-1SNMP\s0 trap is sent, unless this is a range served by a Microsoft server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number that specifies the percentage of allocated addresses. The range is from 1 to 100.  The low watermark value must be lower than the high watermark value. The default low watermark number is 0.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get range_low_water_mark
\& my $range_low_water_mark = $range\->range_low_water_mark();
\& #Modify range_low_water_mark
\& $range\->range_low_water_mark(10);
.Ve
.RE
.RS 4
.RE
.SS "range_low_water_mark_reset( )"
.IX Subsection "range_low_water_mark_reset( )"
.RS 4
Use this method to set or retrieve the range_low_water_mark_reset value. If the percentage of allocated addresses exceeds this value, a corresponding \s-1SNMP\s0 trap is reset.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number that specifies the percentage of allocated addresses. The range is from 1 to 100.  The low watermark reset value must be higher than the low watermark value. The default low watermark reset number is 0.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get range_low_water_mark_reset
\& my $range_low_water_mark_reset = $range\->range_low_water_mark_reset();
\& #Modify range_low_water_mark_reset
\& $range\->range_low_water_mark_reset(10);
.Ve
.RE
.RS 4
.RE
.SS "restart_if_needed( )"
.IX Subsection "restart_if_needed( )"
.RS 4
Use this method to set the flag that indicates whether \s-1DHCP\s0 service should be restarted on a member that is serving \s-1DHCP\s0 for the changed object referenced in a cloud \s-1API\s0 request.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify true to restart the \s-1DHCP\s0 service.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
None
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Modify
\& $network\->restart_if_needed(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "recycle_leases( )"
.IX Subsection "recycle_leases( )"
.RS 4
Use this method to set or retrieve the recycle_leases flag of the \s-1DHCP\s0 range.
.Sp
If the flag is enabled, the leases are kept in recycle bin until one week after expiration. When the flag is disabled, the leases are irrecoverably deleted.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the recycle_leases flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get recycle_leases
\& my $recycle_leases = $dhcp_range\->recycle_leases();
\& #Modify recycle_leases
\& $dhcp_range\->recycle_leases("false");
.Ve
.RE
.RS 4
.RE
.SS "same_port_control_discovery_blackout( )"
.IX Subsection "same_port_control_discovery_blackout( )"
.RS 4
Use this method to set or retrieve the flag that enables using the same discovery blackout for port control blackout.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to use same discovery blackout for port control blackout or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $dhcp_range\->same_port_control_discovery_blackout();
\& # Modify attribute value
\& $dhcp_range\->same_port_control_discovery_blackout(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "server_association_type( )"
.IX Subsection "server_association_type( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 range server association type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The server_association_type attribute can be specified explicitly. It is also set implicitly when member or failover_assoc are set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1NONE\*(R", \*(L"FAILOVER\*(R", \*(L"MS_SERVER\*(R"\s0 and \*(L"\s-1MEMBER\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get server_association_type
\& my $server_association_type = $dhcp_range\->server_association_type();
\& #Modify server_association_type
\& $dhcp_range\->server_association_type("MEMBER");
.Ve
.RE
.RS 4
.RE
.SS "split_member"
.IX Subsection "split_member"
.RS 4
Use this method to set the address or \s-1FQDN\s0 of the Microsoft server that is serving the split scope. Note that this method applies only when the range is first added.
.Sp
Include the specified parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a defined Infoblox::DHCP::MSServer object. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set split_member prior to the range insertion
\& $dhcp_range\->split_member($member); #$member is an Infoblox::DHCP::Member object
.Ve
.RE
.RS 4
.RE
.SS "split_scope_exclusion_percent"
.IX Subsection "split_scope_exclusion_percent"
.RS 4
Use this method to set the percentage for the split scope exclusion. For example, if this is set to 40, then 60% of the range will be assigned to the Microsoft server specified in split_member. Note this method has an effect only when the range is first added.
.Sp
Include the specified parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An unsigned integer between 1 and 99. The default is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set split_scope_exclusion_percent prior to the range insertion
\& $dhcp_range\->split_scope_exclusion_percent(35);
.Ve
.RE
.RS 4
.RE
.SS "start_addr( )"
.IX Subsection "start_addr( )"
.RS 4
Use this method to set or retrieve the start address of the \s-1DHCP\s0 range.
.Sp
A start address is the first \s-1IP\s0 address in the \s-1DHCP\s0 range available for the clients.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the start address of the \s-1DHCP\s0 range in IPv4 address format. An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get start_addr
\& my $start_addr = $dhcp_range\->start_addr();
\& #Modify start_addr
\& $dhcp_range\->start_addr("10.0.0.2");
.Ve
.RE
.RS 4
.RE
.SS "subscribe_settings( )"
.IX Subsection "subscribe_settings( )"
.RS 4
Use this method to set or retrieve the Cisco \s-1ISE\s0 subscribe settings.
.Sp
Setting this method to a defined value implicitly sets the override_subscribe_settings method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Cisco \s-1ISE\s0 endpoint default and automatically resets the override_subscribe_settings method to \*(L"false\*(R".
.Sp
Note that when subscribe_settings is set to a defined value and override_subscribe_settings is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->subscribe_settings($value); \f(CW$object\fR\->override_subscribe_settings(\*(L"false\*(R"); will set override_subscribe_settings to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_subscribe_settings(\*(L"false\*(R"); \f(CW$object\fR\->subscribe_settings($value); will result in override_subscribe_settings=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::CiscoISE::SubscribeSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get subscribe_settings value
\& my $subscribe_settings = $object\->subscribe_settings();
\& #Modify subscribe_settings value
\& $object\->subscribe_settings($settings);
.Ve
.RE
.RS 4
.RE
.SS "template( )"
.IX Subsection "template( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 range template name for a \s-1DHCP\s0 Range object.
.Sp
Template is the name of a \s-1DHCP\s0 range template which will be used to create the \s-1DHCP\s0 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid name in sting format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
The template parameter can be used to only add a new \s-1DHCP\s0 range and cannot be used during object modify or returned during object get.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get template
\& my $template = $dhcp_range\->template();
\& #Modify template
\& $dhcp_range\->template("Template_Name");
.Ve
.RE
.RS 4
.RE
.SS "unknown_clients_option( )"
.IX Subsection "unknown_clients_option( )"
.RS 4
Use this method to set or retrieve the unknown_clients_option option of a \s-1DHCP\s0 range.
.Sp
Set this option to \*(L"Allow\*(R" or \*(L"Deny\*(R" to allow or prevent the allocation of an \s-1IP\s0 address from this pool to any client that has no host declaration.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"Allow\*(R" or \*(L"Deny\*(R" to set the unknown_clients_option flag value. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get unknown_clients_option
\& my $unknown_clients_option = $dhcp_range\->unknown_clients_option();
\& #Modify unknown_clients_option
\& $dhcp_range\->unknown_clients_option("Deny");
.Ve
.RE
.RS 4
.RE
.SS "update_dns_on_lease_renewal( )"
.IX Subsection "update_dns_on_lease_renewal( )"
.RS 4
The update_dns_on_lease_renewal attribute controls whether the \s-1DHCP\s0 server updates \s-1DNS\s0 when a \s-1DHCP\s0 lease is renewed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_update_dns_on_lease_renewal method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_update_dns_on_lease_renewal attribute to \*(L"false\*(R".
.Sp
Note that when update_dns_on_lease_renewal is set to a defined value and override_update_dns_on_lease_renewal is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); will set override_update_dns_on_lease_renewal to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); will result in override_update_dns_on_lease_renewal=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the update_dns_on_lease_renewal flag or \*(L"false\*(R" to deactivate/unset it.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get update_dns_on_lease_renewal
\&    my $update_dns_on_lease_renewal=$dhcp_range\->update_dns_on_lease_renewal( );
\&    #Modify update_dns_on_lease_renewal
\&    $dhcp_range\->update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a \s-1DHCP\s0 range object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 Range object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create a DHCP Member object
\& my $memberdhcp = Infoblox::DHCP::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => "192.168.1.2"
\& );
\& unless($memberdhcp) {
\&        die("Construct member failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Member object created successfully\en";
\&
\& #Create the Network object with the member
\& my $network = Infoblox::DHCP::Network\->new(
\&     network => "10.0.0.0/8",
\&     comment => "add network",
\&     members => [ $memberdhcp ]
\& );
\& unless($network) {
\&        die("Construct Network object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network object created successfully\en";
\&
\& #Add the Network object into the Infoblox appliance through a session
\& $session\->add($network)
\&     or die("Add Network object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object added to Infoblox appliance successfully\en";
\&
\& #Create the Mac Filter object
\& my $mac_filter = Infoblox::DHCP::Filter::MAC\->new(
\&     "name"    => "filter1",
\&     "comment" => "5 minutes"
\& );
\&
\& unless($mac_filter) {
\&        die("Construct Mac Filter object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Mac Filter object created successfully\en";
\&
\& #Add the Mac Filter object into the Infoblox appliance through a session
\& $session\->add($mac_filter)
\&     or die("Add Mac Filter object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Mac Filter object added to Infoblox appliance successfully\en";
\&
\& #Construct Custom Option object
\& my $option1 = Infoblox::DHCP::Option\->new(
\&     type  => "1",
\&     value => "255.0.0.0", );
\&
\& #Construct DHCP Mac Filter rule object
\& my $filter = Infoblox::DHCP::FilterRule::MAC\->new(
\&     filter_name => "filter1",
\&     permission  => "grant"
\& );
\&
\& #Construct exclusion range object
\& my $exclusion_range = Infoblox::DHCP::ExclusionRange\->new(
\&     start_address => "10.0.0.5",
\&     end_address   => "10.0.0.7",
\&     comment       => "Excluded range"
\& );
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 Range object\fR
.PP
.Vb 10
\& my $dhcp_range = Infoblox::DHCP::Range\->new(
\&         end_addr                => "10.0.0.10",
\&         network                 => "10.0.0.0/8",
\&         start_addr              => "10.0.0.1",
\&         bootfile                => "bootfile1.com",
\&         bootserver              => "someserver.com",
\&         comment                 => "add range",
\&         ddns_generate_hostname  => "true",
\&         deny_all_clients        => "true",
\&         deny_bootp              => "true",
\&         disable                 => "true",
\&         enable_ddns             => "true",
\&         exclude                 => [$exclusion_range],
\&         filters                 => [$filter],
\&         member                  => $memberdhcp,
\&         nextserver              => "3.3.3.3",
\&         options                 => [$option1],
\&         pxe_lease_time          => "3600",
\&         recycle_leases          => "true",
\& );
\& unless($dhcp_range) {
\&        die("Construct DHCP Range object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Range object created successfully\en";
\&
\& #Add the DHCP Range object into the Infoblox appliance through a session
\& $session\->add($dhcp_range)
\&     or die("Add DHCP Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range object added to the network successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 Range object using a template\fR
.PP
.Vb 10
\& my $dhcp_range_template = Infoblox::DHCP::RangeTemplate\->new(
\&         name                    => "custom_range_template",
\&         offset                  => "10",
\&         number_of_addresses     => "10",
\& );
\& unless($dhcp_range_template) {
\&        die("Construct DHCP Range template object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Range template object created successfully\en";
\&
\& #Add the DHCP Range template object into the Infoblox appliance through a session
\& $session\->add($dhcp_range_template)
\&     or die("Add DHCP Range template object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range template object added to the network successfully\en";
\&
\& my $dhcp_range = Infoblox::DHCP::Range\->new(
\&         start_addr              => "10.0.0.11",
\&         end_addr                => "10.0.0.15",
\&         network                 => "10.0.0.0/8",
\&         template                => "custom_range_template"
\& );
\& unless($dhcp_range) {
\&        die("Construct DHCP Range object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Range object created successfully\en";
\&
\& #Add the DHCP Range object into the Infoblox appliance through a session
\& $session\->add($dhcp_range)
\&     or die("Add DHCP Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range object added to the network successfully\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DHCP\s0 Range\fR
.PP
.Vb 11
\& #Get a DHCP Range through the session
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DHCP::Range",
\&     start_addr => "10.0.0.1",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP Range failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP Range object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified DHCP Range
\& $object\->comment ("modified comment");
\&
\& #Un\-override bootfile
\& $object\->bootfile(undef);
\&
\& #Un\-override bootserver
\& $object\->bootserver(undef);
\&
\& #Un\-override nextserver
\& $object\->nextserver(undef);
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify DHCP Range failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range object modified successfully \en";
.Ve
.PP
\&\fB#Search a \s-1DHCP\s0 Range\fR
.PP
.Vb 7
\& # search for DHCP range object with start address having last octet as 1
\& my @retrieved_objs = $session\->search(
\&     object     => "Infoblox::DHCP::Range",
\&     network    => "10.0.0.0/.",
\&     start_addr => ".*1",
\&     comment    => ".*comment"
\&);
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search DHCP range failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DHCP range object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Remove a \s-1DHCP\s0 Range\fR
.PP
.Vb 6
\& #Get a DHCP Range through the session
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DHCP::Range",
\&     start_addr => "10.0.0.1",
\&     end_addr   => "10.0.0.10",
\& );
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP Range failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP Range object found at least 1 matching entry\en";
\&
\& #submit the object for removal
\& $session\->remove($object)
\&     or die("Remove DHCP Range failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range object removed successfully \en";
\&
\& #submit the Range Template object for removal
\& $session\->remove($dhcp_range_template)
\&     or die("Remove DHCP Range Tempate failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range Templateobject removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR,Infoblox::DHCP::ViewInfoblox::DHCP::ExclusionRange, Infoblox::DHCP::FilterRule::MAC, Infoblox::DHCP::FilterRule::NAC, Infoblox::DHCP::FilterRule::RelayAgent, Infoblox::DHCP::FilterRule::Option, Infoblox::DHCP::Member, Infoblox::DHCP::Option, Infoblox::DHCP::RangeTemplate, Infoblox::Grid::MSServer::AdUser::Data
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
