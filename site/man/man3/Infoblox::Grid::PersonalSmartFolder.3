.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::PersonalSmartFolder 3"
.TH Infoblox::Grid::PersonalSmartFolder 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::PersonalSmartFolder \- Personal Smart Folder object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Personal Smart Folder object is used for data organization.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 6
\& my $group = Infoblox::Grid::PersonalSmartFolder\->new(
\&     name                => $string,                                                              #Required
\&     comment             => $string,                                                              #Optional / Default is undefined
\&     group_bys           => [$GroupbyItem1, $GroupbyItem2],                                       #Optional / Default is undefined
\&     query_items         => [$QueryItem1, $QueryItem2],                                           #Optional / Default is undefined
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a Personal Smart Folder object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Construct the QueryItem in\-memory object
\& my $query_item1 = Infoblox::Grid::SmartFolder::QueryItem\->new(
\&     name                 => "location",
\&     operator             => "eq",
\&     value                => "Santa Clara",
\& );
\&
\& #Construct the PersonalSmartFolder object
\& my $group_by_state = Infoblox::Grid::SmartFolder::GroupBy\->new(
\&                                                                enable_grouping => \*(Aqtrue\*(Aq,
\&                                                                value => "State",
\&                                                                value_type => "EXTATTR",
\&                                                               );
\&
\& my $smart_folder = Infoblox::Grid::PersonalSmartFolder\->new(
\&     name                 => "smartfolder1",
\&     comment              => "personal smart folder",
\&     group_bys            => [$group_by_state],
\&     query_items          => [$query_item1],
\& );
\& # Submit for addition
\& my $response = $session\->add( $smart_folder );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific PersonalSmartFolder object:
\&
\&  name      \- Required. PersonalSmartFolder name in string format.
\&  comment   \- Optional. Comment in string format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::Grid::PersonalSmartFolder",
\&     name       => "smartfolder1" );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify the comment.
\& $smart_folder\->comment("This is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $smart_folder );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, use \fBget()\fR or \fBsearch()\fR to retrieve the specific object first, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Get the PersonalSmartFolder objects using a name
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::Grid::PersonalSmartFolder",
\&     name       => "smartfolder1" );
\& # find the desired object from the retrieved list.
\& my $desired_smart_folder = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_smart_folder );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for Personal Smart Folder objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a specific PersonalSmartFolder object:
\&
\&  name      \- Optional. PersonalSmartFolder name in string format (regular expression).
\&  comment   \- Optional. Comment in string format (regular expression).
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # search for all PersonalSmartFolder objects that start with "smartfolder"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::PersonalSmartFolder",
\&     name   => "smartfolder.*" );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a PersonalSmartFolder object.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Pertinent information about the personal smart folder. Comment in string format with a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $smart_folder\->comment();
\& #Modify comment
\& $smart_folder\->comment("This is the modified comment for smartfolder1");
.Ve
.RE
.RS 4
.RE
.SS "group_bys( )"
.IX Subsection "group_bys( )"
.RS 4
Use this method to set or retrieve the group_bys value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::Grid::SmartFolder::GroupBy object(s). The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& my $group_by_state = Infoblox::Grid::SmartFolder::GroupBy\->new(
\&                                                             enable_grouping => \*(Aqtrue\*(Aq,
\&                                                             value => "State",
\&                                                             value_type => "EXTATTR",
\&                                                            );
\&
\& #Get group_by value
\& my $group_by = $smart_folder\->group_by();
\& #Modify group_by value
\& $smart_folder\->group_bys([$group_by_state]);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of a personal smart folder.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the name of the personal smart folder.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name
\& my $name = $smart_folder\->name();
.Ve
.RE
.RS 4
.RE
.SS "query_items( )"
.IX Subsection "query_items( )"
.RS 4
Use this method to set or retrieve the query items. If query items are not specified when you \fBadd()\fR a smart folder, the server automatically assigns a default query item for the smart folder. This default query item is \*(L"type=Network/Zone/Range/Member\*(R". This ensures that objects are included in searches for these 4 types, by default. When you \fBmodify()\fR a smart folder, the server keeps the query items provided by the client and does not add the default items.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::Grid::SmartFolder::QueryItem object(s). The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get query items
\& my $query_items = $smart_folder\->query_items();
\&
\& #Modify query items
\& my $query_item1 = Infoblox::Grid::SmartFolder::QueryItem\->new(
\&     name                 => "location",
\&     operator             => "eq",
\&     value                => "Santa Clara",
\& );
\& $smart_folder\->query_items([$query_items1]);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to an PersonalSmartFolder object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\&                );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& # Add a network with extensible attributes
\&
\& my %extensible_attributes=(
\&     \*(AqRegion\*(Aq => \*(AqSanta Clara County\*(Aq,
\&     \*(AqCountry\*(Aq => \*(AqUSA\*(Aq,
\&     \*(AqState\*(Aq => \*(AqCalifornia\*(Aq,
\&     \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq,
\&     \*(AqBuilding\*(Aq => \*(AqHQ\*(Aq,
\&     \*(AqVLAN\*(Aq => \*(Aq1\*(Aq,
\& );
\&
\& my $network = Infoblox::DHCP::Network\->new(
\&     network => "10.0.0.0/24",
\&     extensible_attributes => \e%extensible_attributes,
\& );
\& unless ($network) {
\&     die("Construct Network failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network created successfully\en";
\&
\& $session\->add($network)
\&     or die("Add Network object failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object added to server successfully\en";
.Ve
.PP
\&\fB#Create a PersonalSmartFolder object\fR
.PP
.Vb 6
\& my $query_item = Infoblox::Grid::SmartFolder::QueryItem\->new(
\&     name                     => "Country",
\&     is_extensible_attribute  => "true",
\&     operator                 => "eq",
\&     value                    => "USA",
\& );
\&
\& unless ($query_item) {
\&     die("Construct query item object failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Smart folder query item object created successfully\en";
\&
\& my $smart_folder = Infoblox::Grid::PersonalSmartFolder\->new(
\&     name                     => "my_folder_personal",
\&     comment                  => "my personal folder",
\&     query_items              => [$query_item],
\& );
\&
\& unless ($smart_folder) {
\&     die("Construct personal smart folder object failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Smart folder object created successfully\en";
\&
\& #Add the PersonalSmartFolder object to the Infoblox appliance through a session
\& $session\->add($smart_folder)
\&     or die("Add PersonalSmartFolder object failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "PersonalSmartFolder object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a PersonalSmartFolder\fR
.PP
.Vb 5
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::PersonalSmartFolder",
\&     name   => "my_folder.*"
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Search for a PersonalSmartFolder object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search for a PersonalSmartFolder object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a PersonalSmartFolder object\fR
.PP
.Vb 6
\& #Get the PersonalSmartFolder object from Infoblox appliance through a session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::PersonalSmartFolder",
\&     name   => "my_folder_personal"
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Get PersonalSmartFolder object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get PersonalSmartFolder object found at least 1 matching entry\en";
\&
\& #Modify the PersonalSmartFolder object
\& $object\->name("my_folder_personal_renamed");
\& $object\->comment("modified personal smart folder");
\&
\& #Apply the changes.
\& $session\->modify($object)
\&     or die("Modify PersonalSmartFolder object failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "PersonalSmartFolder object modified successfully \en";
.Ve
.PP
\&\fB#Remove a PersonalSmartFolder object\fR
.PP
.Vb 11
\& #Get the PersonalSmartFolder object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::PersonalSmartFolder",
\&     name   => "my_folder_personal_renamed"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get PersonalSmartFolder object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get PersonalSmartFolder object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove PersonalSmartFolder object failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "PersonalSmartFolder object removed successfully \en";
.Ve
.PP
\&\fB#Cleanup\fR
.PP
.Vb 11
\& #Get the Network object through the session
\& my @retrieved_objs = $session\->get(
\&     object  => "Infoblox::DHCP::Network",
\&     network => "10.0.0.0/24"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Network object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Network object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove Network object failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::SmartFolderChildren, Infoblox::Grid::PersonalSmartFolder, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR,Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
