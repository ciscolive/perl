.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Excel::Template::Container::Loop 3"
.TH Excel::Template::Container::Loop 3 "2012-04-29" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Excel::Template::Container::Loop \- Excel::Template::Container::Loop
.SH "PURPOSE"
.IX Header "PURPOSE"
To provide looping
.SH "NODE NAME"
.IX Header "NODE NAME"
\&\s-1LOOP\s0
.SH "INHERITANCE"
.IX Header "INHERITANCE"
Excel::Template::Container
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "\(bu" 4
\&\s-1NAME\s0
.Sp
This is the name of the loop. It's used to identify within the parameter set
what variables to expose to the children nodes each iteration.
.SH "CHILDREN"
.IX Header "CHILDREN"
None
.SH "EFFECTS"
.IX Header "EFFECTS"
None
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
None
.SH "USAGE"
.IX Header "USAGE"
.Vb 3
\&  <loop name="LOOPY">
\&    ... Children here ...
\&  </loop>
.Ve
.PP
In the above example, the children nodes would have access to the \s-1LOOPY\s0 array
of hashes as parameters. Each iteration through the array would expose a
different hash of parameters to the children.
.PP
These loops work just like HTML::Template's loops. (I promise I'll give more
info here!)
.PP
There is one difference \- I prefer using Perl-like scoping, so accessing of
variables outside the \s-1LOOP\s0 scope from within is perfectly acceptable. You can
also hide outside variables with inner values, if you desire, just like Perl.
.SH "AUTHOR"
.IX Header "AUTHOR"
Rob Kinyon (rob.kinyon@gmail.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
