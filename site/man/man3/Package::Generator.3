.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Package::Generator 3"
.TH Package::Generator 3 "2013-12-29" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Package::Generator \- generate new packages quickly and easily
.SH "VERSION"
.IX Header "VERSION"
version 1.106
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Package::Generator;
\&
\&    my $package = Package::Generator\->new_package;
\&    ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module lets you quickly and easily construct new packages.  It gives them
unused names and sets up their package data, if provided.
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "new_package"
.IX Subsection "new_package"
.Vb 1
\&  my $package = Package::Generator\->new_package(\e%arg);
.Ve
.PP
This returns the newly generated package.  It can be called with no arguments,
in which case it just returns the name of a pristene package.  The \f(CW\*(C`base\*(C'\fR
argument can be provided to generate the package under an existing namespace.
A \f(CW\*(C`make_unique\*(C'\fR argument can also be provided; it must be a coderef which will
be passed the base package name and returns a unique package name under the
base name.
.PP
A \f(CW\*(C`data\*(C'\fR argument may be passed as a reference to an array of pairs.  These
pairs will be used to set up the data in the generated package.  For example,
the following call will create a package with a \f(CW$foo\fR set to 1 and a \f(CW@foo\fR
set to the first ten counting numbers.
.PP
.Vb 6
\&  my $package = Package::Generator\->new_package({
\&    data => [
\&      foo => 1,
\&      foo => [ 1 .. 10 ],
\&    ]
\&  });
.Ve
.PP
For convenience, \f(CW\*(C`isa\*(C'\fR and \f(CW\*(C`version\*(C'\fR arguments may be passed to
\&\f(CW\*(C`new_package\*(C'\fR.  They will set up \f(CW@ISA\fR, \f(CW$VERSION\fR, or \f(CW&VERSION\fR, as
appropriate.  If a single scalar value is passed as the \f(CW\*(C`isa\*(C'\fR argument, it
will be used as the only value to assign to \f(CW@ISA\fR.  (That is, it will not
cause \f(CW$ISA\fR to be assigned;  that wouldn't be very helpful.)
.SS "assign_symbols"
.IX Subsection "assign_symbols"
.Vb 1
\&  Package::Generator\->assign_symbols($package, \e@key_value_pairs);
.Ve
.PP
This routine is used by \f(CW"new_package"\fR to set up the data in a package.
.SS "package_exists"
.IX Subsection "package_exists"
.Vb 1
\&  ... if Package::Generator\->package_exists($package);
.Ve
.PP
This method returns true if something has already created a symbol table for
the named package.  This is equivalent to:
.PP
.Vb 1
\&  ... if defined *{$package . \*(Aq::\*(Aq};
.Ve
.PP
It's just a little less voodoo-y.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2005 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
