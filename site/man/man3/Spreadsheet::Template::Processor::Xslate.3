.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Template::Processor::Xslate 3"
.TH Spreadsheet::Template::Processor::Xslate 3 "2015-03-26" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Template::Processor::Xslate \- preprocess templates with Xslate
.SH "VERSION"
.IX Header "VERSION"
version 0.05
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  my $template = Spreadsheet::Template\->new(
\&      processor_class   => \*(AqSpreadsheet::Template::Processor::Xslate\*(Aq,
\&      processor_options => {
\&          syntax => \*(AqTTerse\*(Aq
\&      },
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class implements Spreadsheet::Template::Processor to run the template
data through Text::Xslate. In addition to allowing you to use the provided
variables, it also provides some convenience macros to use when writing your
templates:
.ie n .IP "format($name, $options)" 4
.el .IP "format($name, \f(CW$options\fR)" 4
.IX Item "format($name, $options)"
Declares a named format, which can be used with the \f(CW\*(C`c\*(C'\fR helper. \f(CW$name\fR is
the name to use for the format, and \f(CW$options\fR is a hashref to use as the
value for the \f(CW\*(C`format\*(C'\fR entry in the cell.
.ie n .IP "c($contents, $format, $type, %args)" 4
.el .IP "c($contents, \f(CW$format\fR, \f(CW$type\fR, \f(CW%args\fR)" 4
.IX Item "c($contents, $format, $type, %args)"
Returns the representation of a cell. \f(CW$contents\fR is the cell contents,
\&\f(CW$format\fR is either the name of a format declared with the \f(CW\*(C`format\*(C'\fR helper,
or a hashref of format options, \f(CW$type\fR is either \f(CW"string"\fR, \f(CW"number"\fR, or
\&\f(CW"date_time"\fR, and \f(CW%args\fR contains any other parameters (such as \f(CW\*(C`formula\*(C'\fR,
for instance) to declare for the cell. \f(CW$type\fR is optional, and if not passed,
defaults to \f(CW"string"\fR.
.ie n .IP "merge($range, $content, $format, $type, %args)" 4
.el .IP "merge($range, \f(CW$content\fR, \f(CW$format\fR, \f(CW$type\fR, \f(CW%args\fR)" 4
.IX Item "merge($range, $content, $format, $type, %args)"
Returns representation of a range of cells to be merged. \f(CW$content\fR,
\&\f(CW$format\fR, \f(CW$type\fR, and \f(CW%args\fR are identical to the parameters listed above
for the \f(CW\*(C`c\*(C'\fR helper, and \f(CW$range\fR describes the range of cells to be merged.
The range can be specified either by an array of two arrays corresponding to
the row and column indices of the top left and bottom right cell, or by an
Excel-style range (like \f(CW\*(C`A1:C3\*(C'\fR).
.IP "true" 4
.IX Item "true"
Returns \f(CW\*(C`JSON::true\*(C'\fR.
.IP "false" 4
.IX Item "false"
Returns \f(CW\*(C`JSON::false\*(C'\fR.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "syntax"
.IX Subsection "syntax"
Which Xslate syntax engine to use. Defaults to \f(CW\*(C`Metakolon\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jesse Luehrs <doy@tozt.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2015 by Jesse Luehrs.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The MIT (X11) License
.Ve
