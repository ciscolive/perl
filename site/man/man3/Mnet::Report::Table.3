.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mnet::Report::Table 3"
.TH Mnet::Report::Table 3 "2020-08-29" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mnet::Report::Table \- Output rows of report data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    # create an example new table object, with csv file output
\&    my $table = Mnet::Report::Table\->new({
\&        output  => "csv:file.csv",
\&        columns => [
\&            device  => "string",
\&            time    => "time",
\&            data    => "Integer",
\&            error   => "error"
\&        ],
\&    });
\&
\&    # output error row if script aborts with unreported errors
\&    $table\->row_on_error({ device => $device });
\&
\&    # output a normal report row, call again to output more
\&    $table\->row({ device => $device, data => $data });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mnet::Report::Table can be used to create new report table objects, with a row
method call to add data, a row_on_error method to ensure errors always appear,
with various output options including csv, json, sql, and perl Data::Dumper
formats.
.SH "METHODS"
.IX Header "METHODS"
Mnet::Report::Table implements the methods listed below.
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $table = Mnet::Report::Table\->new(\e%opts)
.Ve
.PP
A new Mnet::Report::Table object can be created with the options showm in
the example below:
.PP
.Vb 10
\&    my $table = Mnet::Report::Table\->new({
\&        columns => [                # ordered column names and types
\&            device  => "string",    #   strips eol chars in csv output
\&            count   => "integer",   #   +/\- integer numbers
\&            error   => "error",     #   first error, see row_on_error()
\&            time    => "time",      #   time as yyyy/mm/dd hh:mm:ss
\&            unix    => "epoch",     #   unix time, see perldoc \-f time
\&        ],
\&        output  => "csv:$file",     # see this module\*(Aqs OUTPUT section
\&        append  => $boolean,        # set to append output to file
\&        log_id  => $string,         # see perldoc Mnet::Log new method
\&        nodefer => $boolean,        # set to output rows immediately
\&    });
.Ve
.PP
The columns option is required, and is an array reference containing an ordered
list of hashed column names of type string, integer, error, time, or epoch.
.PP
Columns of type string and integer are set by the user for new rows using the
row method in this module. Columns of type error, time, and epoch are set
automatically for each row of output.
.PP
The output option should be used to specify an output format and filename, as
in the example above. Refer to the \s-1OUTPUT\s0 section below for more information.
.PP
The append option opens the output file for appending and doesn't write a
heading row, Otherwise the default is to overwrite the output file when the
new table object is created.
.PP
The nodefer option can be used so that report data rows are output immediately
when the row method is called. Otherwise row data is output when the script
exits. This can affect the reporting of errors, refer to the row_on_error
method below for more information.
.PP
Note that new Mnet::Report::Table objects should be created before forking
batch children if the Mnet::Batch module is being used.
.PP
Errors are issued for invalid options.
.SS "row"
.IX Subsection "row"
.Vb 1
\&    $table\->row(\e%data)
.Ve
.PP
This method will add a row of specified data to the current report table
object, as in the following example:
.PP
.Vb 4
\&    $table\->row({
\&        device  => $string,
\&        sample  => $integer,
\&    })
.Ve
.PP
Note that an error is issued if any keys in the data were not defined as string
or integer columns when the new method was used to create the current object.
.SS "row_on_error"
.IX Subsection "row_on_error"
.Vb 1
\&    $table\->row_on_error(\e%data)
.Ve
.PP
This method can be used to ensure that an Mnet::Report::Table object with an
error column outputs an error row when the script exits if no prior output row
reflected that there was an error, as in the example below:
.PP
.Vb 10
\&    # declare report object as a global
\&    use Mnet::Report::Table;
\&    my $table = Mnet::Report::Table\->new({
\&        output  => "json:file.json",
\&        columns => [
\&            input => "text",
\&            error => "error",
\&            ttl   => "integer"
\&        ],
\&    });
\&
\&    # call Mnet::Batch::fork here, if using Mnet::Batch module
\&
\&    # output error row at exit if there was an unreported error
\&    $table\->row_on_error({ input => "error" });
\&
\&    # output first row, no error, always present in output
\&    $table\->row({ input => "first" });
\&
\&    # lots of code could go here, with possibility of errors...
\&    die if int(rand) > .5;
\&
\&    # output second row, no error, present if die did not occur
\&    $table\->row({ input => "second" });
\&
\&    # row_on_error output at exit for unpreported errors
\&    exit;
.Ve
.PP
This ensures that a script does not die after the row_on_error call without
any indication of an error in the report output.
.PP
The default is to output all report data rows when the script exits. At this
time all error columns for all rows will be set with the first of any prior
script errors. In this case row_on_error will output an error row if there
was an error and the row method was never called.
.PP
If the nodefer option was set when a new Mnet::Report::Table object was created
then row data is output immediately each time the row method is called, with
the error column set only if there was an error before the row method call. Any
errors afterward could go unreported. In this case row_on_error will output an
extra row at script exit if there was an error after the last row method call,
or the row method was never called.
.SH "OUTPUT OPTIONS"
.IX Header "OUTPUT OPTIONS"
When a new Mnet::Report::Table object is created the output option can be set
to any of the output format types listed in the documentation sections below.
.PP
If the Mnet::Log module is loaded report rows are always logged with the
info method.
.PP
Note the Mnet::Test module \-\-test command line option silently overrides all
other report output options, outputting report data using the Mnet::Log
module if loaded or sending report output to stdout in Data::Dumper format,
for consistant test results.
.PP
Output files are opened when an Mnet::Report object is created, with a heading
row if necessary. Refer to the new method in this documentation for information
on the append and nodefer options that control how the output file is opened
and when row data is written.
.PP
Output options below can use /dev/stdout as the output file, which works nicely
with the Mnet::Log \-\-silent option used with the Mnet::Batch \-\-batch
option, allowing report output from all concurrently executing batch children
to be easily piped or redirected in aggregate as necessary. However be aware
thet /dev/stdout report output is not captured by the Mnet::Tee module.
.PP
Note the Mnet::Test module \-\-test command line option silently overrides
all other report output options, outputting report data using the Mnet::Log
module if loaded or sending report output to stdout in Data::Dumper format,
for consistant test results.
.SS "output csv"
.IX Subsection "output csv"
.Vb 2
\&    csv
\&    csv:$file
.Ve
.PP
The csv output option can be used to output a csv file, /dev/stdout by default.
.PP
All csv outputs are doule quoted. Double quotes in the outut data are escaped
with an extra double quote.
.PP
All end of line carraige return and linefeed characters are replaced with
spaces in the csv output. Multiline csv output data is not supported.
.PP
The output csv file will be created with a heading row when the new method is
called unless the append option was set when the new method was called.
.PP
Refer to the \s-1OUTPUT OPTIONS\s0 section of this module for more info.
.SS "output dump"
.IX Subsection "output dump"
.Vb 3
\&    dump
\&    dump $var
\&    dump:$var:$file
.Ve
.PP
The dump output option writes one row per line in Data::Dumper format
prefixed by the specified var name, defaulting to 'dump' and /dev/stdout.
.PP
This dump output can be read back into a perl script as follows:
.PP
.Vb 7
\&    use Data::Dumper;
\&    while (<STDIN>) {
\&        my ($line, $var) = ($_, undef);
\&        my $table = $1 if $line =~ s/^\e$(\eS+)/\e$var/ or die;
\&        eval "$line";
\&        print Dumper($var);
\&    }
.Ve
.PP
Refer to the \s-1OUTPUT OPTIONS\s0 section of this module for more info.
.SS "output json"
.IX Subsection "output json"
.Vb 3
\&    json
\&    json:$var
\&    json:$var:$file
.Ve
.PP
The json output option writes one row per line in json format prefixed by the
specified var name, defaulting to 'json' and /dev/stdout. This requires that
the \s-1JSON\s0 module is available.
.PP
The output json looks something like the example below:
.PP
.Vb 1
\&    var = {"device":"test","error":null};
.Ve
.PP
This json output can be read back into a perl script as follows:
.PP
.Vb 8
\&    use JSON;
\&    use Data::Dumper;
\&    while (<STDIN>) {
\&        my ($line, $var) = ($_, undef);
\&        my $table = $1 if $line =~ s/^(\eS+) = // or die;
\&        $var = decode_json($line);
\&        print Dumper($var);
\&    }
.Ve
.PP
Refer to the \s-1OUTPUT OPTIONS\s0 section of this module for more info.
.SS "output sql"
.IX Subsection "output sql"
.Vb 5
\&    sql
\&    sql:$table
\&    sql:"$table"
\&    sql:$table:$file
\&    sql:"$table":$file
.Ve
.PP
The sql output option writes one row per line as sql insert statements using
the specified table name, double-quoting non-word table names, defaulting to
\&\*(L"table\*(R" and /dev/stdout, in the following format:
.PP
.Vb 1
\&    INSERT INTO <table> (<column>, ...) VALUES (<value>, ...);
.Ve
.PP
Table and column names are double quoted, and values are single quoted. Single
quotes in values are escaped with an extra single quote character, \s-1LF\s0 and \s-1CR\s0
characters are escaped as '+CHAR(10)+' and '+CHAR(13)+' respectively.
.PP
Refer to the \s-1OUTPUT OPTIONS\s0 section of this module for more info.
.SH "TESTING"
.IX Header "TESTING"
Mnet::Report::Table supports the Mnet::Test module test, record, and replay
functionality, tracking report data so it can be included in test results.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Data::Dumper
.PP
\&\s-1JSON\s0
.PP
Mnet
.PP
Mnet::Batch
.PP
Mnet::Log
.PP
Mnet::Test
