.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::Boolean 3"
.TH Data::Object::Boolean 3 "2020-04-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::Boolean
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Boolean Class for Perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package main;
\&
\&  use Data::Object::Boolean;
\&
\&  my $bool = Data::Object::Boolean\->new; # false
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides functions and representation for boolean values.
.SH "INHERITS"
.IX Header "INHERITS"
This package inherits behaviors from:
.PP
Data::Object::Kind
.SH "LIBRARIES"
.IX Header "LIBRARIES"
This package uses type constraints from:
.PP
Data::Object::Types
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
This package implements the following functions:
.SS "false"
.IX Subsection "false"
.Vb 1
\&  False() : Object
.Ve
.PP
The False method returns a boolean object representing false.
.IP "False example #1" 4
.IX Item "False example #1"
.Vb 1
\&  Data::Object::Boolean::False(); # false
.Ve
.SS "isfalse"
.IX Subsection "isfalse"
.Vb 1
\&  IsFalse(Maybe[Any] $arg) : Object
.Ve
.PP
The IsFalse method returns a boolean object representing false if no arugments
are passed, otherwise this function will return a boolean object based on the
argument provided.
.IP "IsFalse example #1" 4
.IX Item "IsFalse example #1"
.Vb 1
\&  Data::Object::Boolean::IsFalse(); # true
.Ve
.IP "IsFalse example #2" 4
.IX Item "IsFalse example #2"
.Vb 1
\&  Data::Object::Boolean::IsFalse(0); # true
.Ve
.IP "IsFalse example #3" 4
.IX Item "IsFalse example #3"
.Vb 1
\&  Data::Object::Boolean::IsFalse(1); # false
.Ve
.SS "istrue"
.IX Subsection "istrue"
.Vb 1
\&  IsTrue() : Object
.Ve
.PP
The IsTrue method returns a boolean object representing truth if no arugments
are passed, otherwise this function will return a boolean object based on the
argument provided.
.IP "IsTrue example #1" 4
.IX Item "IsTrue example #1"
.Vb 1
\&  Data::Object::Boolean::IsTrue(); # false
.Ve
.IP "IsTrue example #2" 4
.IX Item "IsTrue example #2"
.Vb 1
\&  Data::Object::Boolean::IsTrue(1); # true
.Ve
.IP "IsTrue example #3" 4
.IX Item "IsTrue example #3"
.Vb 1
\&  Data::Object::Boolean::IsTrue(0); # false
.Ve
.SS "to_json"
.IX Subsection "to_json"
.Vb 1
\&  TO_JSON(Any $arg) : Ref[\*(AqSCALAR\*(Aq]
.Ve
.PP
The \s-1TO_JSON\s0 method returns a scalar ref representing truthiness or falsiness
based on the arguments passed, this function is commonly used by \s-1JSON\s0 encoders
and instructs them on how they should represent the value.
.IP "\s-1TO_JSON\s0 example #1" 4
.IX Item "TO_JSON example #1"
.Vb 1
\&  my $bool = Data::Object::Boolean\->new(1);
\&
\&  $bool\->TO_JSON; # \e1
.Ve
.IP "\s-1TO_JSON\s0 example #2" 4
.IX Item "TO_JSON example #2"
.Vb 3
\&  Data::Object::Boolean::TO_JSON(
\&    Data::Object::Boolean::True()
\&  );
\&
\&  # \e1
.Ve
.IP "\s-1TO_JSON\s0 example #3" 4
.IX Item "TO_JSON example #3"
.Vb 1
\&  my $bool = Data::Object::Boolean\->new(0);
\&
\&  $bool\->TO_JSON(0); # \e0
.Ve
.IP "\s-1TO_JSON\s0 example #4" 4
.IX Item "TO_JSON example #4"
.Vb 3
\&  Data::Object::Boolean::TO_JSON(
\&    Data::Object::Boolean::False()
\&  );
\&
\&  # \e0
.Ve
.SS "true"
.IX Subsection "true"
.Vb 1
\&  True() : Object
.Ve
.PP
The True method returns a boolean object representing truth.
.IP "True example #1" 4
.IX Item "True example #1"
.Vb 1
\&  Data::Object::Boolean::True(); # true
.Ve
.SS "type"
.IX Subsection "type"
.Vb 1
\&  Type() : Str
.Ve
.PP
The Type method returns either \*(L"True\*(R" or \*(L"False\*(R" based on the truthiness or
falsiness of the argument provided.
.IP "Type example #1" 4
.IX Item "Type example #1"
.Vb 1
\&  Data::Object::Boolean::Type(); # False
.Ve
.IP "Type example #2" 4
.IX Item "Type example #2"
.Vb 1
\&  Data::Object::Boolean::Type(1); # True
.Ve
.IP "Type example #3" 4
.IX Item "Type example #3"
.Vb 1
\&  Data::Object::Boolean::Type(0); # False
.Ve
.IP "Type example #4" 4
.IX Item "Type example #4"
.Vb 3
\&  Data::Object::Boolean::Type(
\&    Data::Object::Boolean::True()
\&  );
\&
\&  # True
.Ve
.IP "Type example #5" 4
.IX Item "Type example #5"
.Vb 3
\&  Data::Object::Boolean::Type(
\&    Data::Object::Boolean::False()
\&  );
\&
\&  # False
.Ve
.SH "METHODS"
.IX Header "METHODS"
This package implements the following methods:
.SS "new"
.IX Subsection "new"
.Vb 1
\&  new(Maybe[Any] $arg) : Object
.Ve
.PP
The new method returns a boolean object based on the value of the argument
provided.
.IP "new example #1" 4
.IX Item "new example #1"
.Vb 1
\&  my $bool = Data::Object::Boolean\->new(1); # true
.Ve
.IP "new example #2" 4
.IX Item "new example #2"
.Vb 1
\&  my $bool = Data::Object::Boolean\->new(0); # false
.Ve
.IP "new example #3" 4
.IX Item "new example #3"
.Vb 1
\&  my $bool = Data::Object::Boolean\->new(\*(Aq\*(Aq); # false
.Ve
.IP "new example #4" 4
.IX Item "new example #4"
.Vb 1
\&  my $bool = Data::Object::Boolean\->new(undef); # false
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/data-object/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/data-object/wiki>
.PP
Project <https://github.com/iamalnewkirk/data-object>
.PP
Initiatives <https://github.com/iamalnewkirk/data-object/projects>
.PP
Milestones <https://github.com/iamalnewkirk/data-object/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/data-object/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/data-object/issues>
