.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Milter::Authentication::Tester::HandlerTester 3"
.TH Mail::Milter::Authentication::Tester::HandlerTester 3 "2020-09-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Milter::Authentication::Tester::HandlerTester \- Class for testing handlers
.SH "VERSION"
.IX Header "VERSION"
version 2.20200930.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Emulates an Authentication Milter environment with methods for testing Handlers.
.PP
Can snapshot and restore state at any point.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Make testing of Authentication Milter Handler modules easier.
.SH "NAME"
Mail::Milter::Authentication::Tester::HandlerTester \- Test harness for testing Authentication Milter Handlers
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.ie n .IP "new( $args )" 4
.el .IP "new( \f(CW$args\fR )" 4
.IX Item "new( $args )"
Instantiate a new HandlerTester object.
.Sp
\&\f(CW$args\fR is a hashref with the following entries.
.RS 4
.IP "prefix" 4
.IX Item "prefix"
Required
.Sp
The Prefix path containing the authentication milter config file(s). This should contain
all configuration files required for your test, the main authentication_milter.json file
can be overridden by the handler_config option (see below).
.Sp
This location should, for example, contain a valid mail\-dmarc.ini for any tests using
the \s-1DMARC\s0 handler.
.IP "handler_config" 4
.IX Item "handler_config"
If present, the config will be built from a generic default \s-1SMTP\s0 environment, with the given
\&\s-1HASHREF\s0 substituted as the Handler configuration. This eliminates the need to have a config file
for each handler configuration you wish to test.
.IP "zonedata" 4
.IX Item "zonedata"
The zonefile data for use with Net::DNS::Resolver::Mock
.IP "zonefile" 4
.IX Item "zonefile"
A zonefile for use with Net::DNS::Resolver::Mock
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "snapshot( $name )" 4
.el .IP "snapshot( \f(CW$name\fR )" 4
.IX Item "snapshot( $name )"
Save a snapshot with the given name
.ie n .IP "switch( $name )" 4
.el .IP "switch( \f(CW$name\fR )" 4
.IX Item "switch( $name )"
Restore state from the given snapshot
.IP "\fBhandler()\fR" 4
.IX Item "handler()"
Returns the Handler object
.ie n .IP "connect( $name, $ip )" 4
.el .IP "connect( \f(CW$name\fR, \f(CW$ip\fR )" 4
.IX Item "connect( $name, $ip )"
Call the connect callbacks with the given data.
.Sp
Returns the value of \fBget_return()\fR
.ie n .IP "helo( $name )" 4
.el .IP "helo( \f(CW$name\fR )" 4
.IX Item "helo( $name )"
Call the helo callbacks with the given data.
.Sp
Returns the value of \fBget_return()\fR;
.ie n .IP "mailfrom( $email )" 4
.el .IP "mailfrom( \f(CW$email\fR )" 4
.IX Item "mailfrom( $email )"
Call the envfrom callbacks with the given data.
.Sp
Returns the value of \fBget_return()\fR;
.ie n .IP "rcptto( $email )" 4
.el .IP "rcptto( \f(CW$email\fR )" 4
.IX Item "rcptto( $email )"
Call the envrcpt callbacks with the given data.
.Sp
Returns the value of \fBget_return()\fR;
.ie n .IP "header( $key, $value )" 4
.el .IP "header( \f(CW$key\fR, \f(CW$value\fR )" 4
.IX Item "header( $key, $value )"
Call the header callbacks with the given data.
.Sp
Returns the value of \fBget_return()\fR
.IP "\fBend_of_headers()\fR" 4
.IX Item "end_of_headers()"
Call the end_of_headers callbacks.
.Sp
Returns the value of \fBget_return()\fR
.ie n .IP "body( $body_chunk )" 4
.el .IP "body( \f(CW$body_chunk\fR )" 4
.IX Item "body( $body_chunk )"
Call the body callbacks with the given data.
.Sp
Returns the value of \fBget_return()\fR
.IP "\fBend_of_message()\fR" 4
.IX Item "end_of_message()"
Call the eom callbacks.
.Sp
Returns the value of \fBget_return()\fR
.IP "\fBclose()\fR" 4
.IX Item "close()"
Call the close callbacks.
.Sp
Returns the value of \fBget_return()\fR
.IP "\fBabort()\fR" 4
.IX Item "abort()"
Call the abort callbacks.
.IP "\fBaddheader()\fR" 4
.IX Item "addheader()"
Call the addheader callbacks.
.ie n .IP "run( $args )" 4
.el .IP "run( \f(CW$args\fR )" 4
.IX Item "run( $args )"
Run with a given set of data as defined in \f(CW$args\fR hashref.
.Sp
Dies if the mail would be rejected.
.Sp
Arguments of \f(CW$args\fR are.
.RS 4
.IP "connect_name" 4
.IX Item "connect_name"
The name of the connecting server.
.IP "connect_ip" 4
.IX Item "connect_ip"
The ip address of the connecting server.
.IP "helo" 4
.IX Item "helo"
The helo string.
.IP "mailfrom" 4
.IX Item "mailfrom"
The envelope \s-1MAILFROM\s0 address.
.IP "rcptto" 4
.IX Item "rcptto"
Arrayref of the envelope \s-1RCPTTO\s0 addresses.
.IP "body" 4
.IX Item "body"
The email body.
.RE
.RS 4
.RE
.IP "\fBget_return()\fR" 4
.IX Item "get_return()"
Returns the value of \fBget_return()\fR from the current handler object.
.IP "\fBget_reject_mail()\fR" 4
.IX Item "get_reject_mail()"
Returns the value of \fBget_reject_mail()\fR from the current handler object.
.IP "\fBservername()\fR" 4
.IX Item "servername()"
Returns a dummy authservid servername.
.IP "\fBget_authresults_header()\fR" 4
.IX Item "get_authresults_header()"
Returns a Mail::AuthenticationResults::Header object representing the authentication results
header which would be added to the message.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.Vb 10
\&  Carp
\&  Clone
\&  Mail::AuthenticationResults::Header
\&  Mail::AuthenticationResults::Header::AuthServID
\&  Mail::Milter::Authentication
\&  Mail::Milter::Authentication::Protocol::Milter
\&  Mail::Milter::Authentication::Protocol::SMTP
\&  Mail::Milter::Authentication::Config
\&  Module::Load
\&  Net::DNS::Resolver::Mock
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2018
.PP
This library is free software; you may redistribute it and/or
modify it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Marc Bradshaw.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
