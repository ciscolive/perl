.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Sys::Filesystem 3"
.TH Sys::Filesystem 3 "2020-10-21" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Sys::Filesystem \- Retrieve list of filesystems and their properties
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use strict;
\&    use Sys::Filesystem ();
\&    
\&    # Method 1
\&    my $fs = Sys::Filesystem\->new();
\&    my @filesystems = $fs\->filesystems();
\&    for (@filesystems)
\&    {
\&        printf("%s is a %s filesystem mounted on %s\en",
\&                          $fs\->mount_point($_),
\&                          $fs\->format($_),
\&                          $fs\->device($_)
\&                   );
\&    }
\&    
\&    # Method 2
\&    my $weird_fs = Sys::Filesystem\->new(
\&                          fstab => \*(Aq/etc/weird/vfstab.conf\*(Aq,
\&                          mtab  => \*(Aq/etc/active_mounts\*(Aq,
\&                          xtab  => \*(Aq/etc/nfs/mounts\*(Aq
\&                    );
\&    my @weird_filesystems = $weird_fs\->filesystems();
\&    
\&    # Method 3 (nice but naughty)
\&    my @filesystems = Sys::Filesystem\->filesystems();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Sys::Filesystem is intended to be a portable interface to list and query
filesystem names and their properties. At the time of writing there were only
Solaris and Win32 modules available on \s-1CPAN\s0 to perform this kind of operation.
This module hopes to provide a consistent \s-1API\s0 to list all, mounted, unmounted
and special filesystems on a system, and query as many properties as possible
with common aliases wherever possible.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\&  Sys::Filesystem
\&  ISA UNIVERSAL
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "new" 4
.IX Item "new"
Creates a new Sys::Filesystem object. \f(CW\*(C`new\*(C'\fR accepts following optional key
value pairs to help or force where mount information is gathered from. These
values are not otherwise defaulted by the main Sys::Filesystem object, but
left to the platform specific helper modules to determine as an exercise of
common sense.
.RS 4
.IP "canondev" 4
.IX Item "canondev"
Specify whether device path's shall be resolved when they're a symbolic
link.
.Sp
\&\f(CW$Sys::Filesystem::CANONDEV\fR is used when no key \f(CW\*(C`canondev\*(C'\fR is passed.
.IP "fstab" 4
.IX Item "fstab"
Specify the full path and filename of the filesystem table (or fstab for
short). Not all platforms have such a file and so this option may be
ignored on some systems.
.Sp
\&\f(CW$Sys::Filesystem::FSTAB\fR is used when no key \f(CW\*(C`fstab\*(C'\fR is passed.
.IP "mtab" 4
.IX Item "mtab"
Specify the full path and filename of the mounted filesystem table (or mtab
for short). Not all platforms have such a file and so this option may be
ignored on some systems.
.Sp
\&\f(CW$Sys::Filesystem::MTAB\fR is used when no key \f(CW\*(C`mtab\*(C'\fR is passed.
.IP "xtab" 4
.IX Item "xtab"
\&\fB\s-1DEPRECIATED\s0\fR Specify the full path and filename of the mounted \s-1NFS\s0
filesystem table (or xtab for short). This is usually only pertinent
to Unix bases systems.  Not all helper modules will query \s-1NFS\s0 mounts
as a separate exercise, and therefore this option may be ignored on
some systems.
.Sp
\&\fBNone\fR of the \s-1OS\s0 plugins use that tunable (anymore?), so now a warning
is raised when it's used. The entire support will be removed not before
2015. Once that happened, using \f(CW\*(C`xtab\*(C'\fR will raise an exception.
.IP "aliases" 4
.IX Item "aliases"
Overrides internal aliasing table used to match queries against \s-1OS\s0
plugin. This should be used only when dealing with closed source platform
helper module(s).
.RE
.RS 4
.RE
.IP "supported" 4
.IX Item "supported"
Returns true if the operating system is supported by Sys::Filesystem.
Unsupported operating systems may get less information, e.g. the mount
state couldn't determined or which file system type is special isn't
known.
.SS "Listing Filesystems"
.IX Subsection "Listing Filesystems"
.IP "\fBfilesystems()\fR" 4
.IX Item "filesystems()"
Returns a list of all filesystem. May accept an optional list of key pair
values in order to filter/restrict the results which are returned. The
restrictions are evaluated to match as much as possible, so asking for
regular and special file system (or mounted and special file systems),
you'll get all.
.Sp
For better understanding, please imagine the parameters like:
.Sp
.Vb 3
\&  @fslist = $fs\->filesystems( mounted => 1, special => 1 );
\&  # results similar as
\&  SELECT mountpoint FROM filesystems WHERE mounted = 1 OR special = 1
.Ve
.Sp
If you need other selection choices, please take a look at DBD::Sys.
.Sp
Valid values are as follows:
.RS 4
.ie n .IP "device => ""string""" 4
.el .IP "device => ``string''" 4
.IX Item "device => string"
Returns only filesystems that are mounted using the device of \*(L"string\*(R".
For example:
.Sp
.Vb 1
\&    my $fdd_filesytem = Sys::Filesystem\->filesystems(device => "/dev/fd0");
.Ve
.IP "mounted => 1" 4
.IX Item "mounted => 1"
Returns only filesystems which can be confirmed as actively mounted.
(Filesystems which are mounted).
.Sp
The \fBmounted_filesystems()\fR method is an alias for this syntax.
.IP "unmounted => 1" 4
.IX Item "unmounted => 1"
Returns only filesystems which cannot be confirmed as actively mounted.
(Filesystems which are not mounted).
.Sp
The \fBunmounted_filesystems()\fR method is an alias for this syntax.
.IP "special => 1" 4
.IX Item "special => 1"
Returns only filesystems which are regarded as special in some way. A
filesystem is marked as special by the operating specific helper
module. For example, a tmpfs type filesystem on one operating system
might be regarded as a special filesystem, but not on others. Consult
the documentation of the operating system specific helper module for
further information about your system. (Sys::Filesystem::Linux for Linux
or Sys::Filesystem::Solaris for Solaris etc).
.Sp
This parameter is mutually exclusive to \f(CW\*(C`regular\*(C'\fR.
.Sp
The \fBspecial_filesystems()\fR method is an alias for this syntax.
.IP "regular => 1" 4
.IX Item "regular => 1"
Returns only fileystems which are not regarded as special. (Normal
filesystems).
.Sp
This parameter is mutually exclusive to \f(CW\*(C`special\*(C'\fR.
.Sp
The \fBregular_filesystems()\fR method is an alias for this syntax.
.RE
.RS 4
.RE
.IP "\fBmounted_filesystems()\fR" 4
.IX Item "mounted_filesystems()"
Returns a list of all filesystems which can be verified as currently
being mounted.
.IP "\fBunmounted_filesystems()\fR" 4
.IX Item "unmounted_filesystems()"
Returns a list of all filesystems which cannot be verified as currently
being mounted.
.IP "\fBspecial_filesystems()\fR" 4
.IX Item "special_filesystems()"
Returns a list of all fileystems which are considered special. This will
usually contain meta and swap partitions like /proc and /dev/shm on Linux.
.IP "\fBregular_filesystems()\fR" 4
.IX Item "regular_filesystems()"
Returns a list of all filesystems which are not considered to be special.
.SS "Filesystem Properties"
.IX Subsection "Filesystem Properties"
Available filesystem properties and their names vary wildly between platforms.
Common aliases have been provided wherever possible. You should check the
documentation of the specific platform helper module to list all of the
properties which are available for that platform. For example, read the
Sys::Filesystem::Linux documentation for a list of all filesystem properties
available to query under Linux.
.IP "\fBmount_point()\fR or \fBfilesystem()\fR" 4
.IX Item "mount_point() or filesystem()"
Returns the friendly name of the filesystem. This will usually be the same
name as appears in the list returned by the \fBfilesystems()\fR method.
.IP "\fBmounted()\fR" 4
.IX Item "mounted()"
Returns boolean true if the filesystem is mounted.
.IP "\fBlabel()\fR" 4
.IX Item "label()"
Returns the fileystem label.
.Sp
This functionality may need to be retrofitted to some original \s-1OS\s0 specific
helper modules as of Sys::Filesystem 1.12.
.IP "\fBvolume()\fR" 4
.IX Item "volume()"
Returns the volume that the filesystem belongs to or is mounted on.
.Sp
This functionality may need to be retrofitted to some original \s-1OS\s0 specific
helper modules as of Sys::Filesystem 1.12.
.IP "\fBdevice()\fR" 4
.IX Item "device()"
Returns the physical device that the filesystem is connected to.
.IP "\fBspecial()\fR" 4
.IX Item "special()"
Returns boolean true if the filesystem type is considered \*(L"special\*(R".
.IP "\fBtype()\fR or \fBformat()\fR" 4
.IX Item "type() or format()"
Returns the type of filesystem format. fat32, ntfs, ufs, hpfs, ext3, xfs etc.
.IP "\fBoptions()\fR" 4
.IX Item "options()"
Returns the options that the filesystem was mounted with. This may commonly
contain information such as read-write, user and group settings and
permissions.
.IP "\fBmount_order()\fR" 4
.IX Item "mount_order()"
Returns the order in which this filesystem should be mounted on boot.
.IP "\fBcheck_order()\fR" 4
.IX Item "check_order()"
Returns the order in which this filesystem should be consistency checked
on boot.
.IP "\fBcheck_frequency()\fR" 4
.IX Item "check_frequency()"
Returns how often this filesystem is checked for consistency.
.SH "OS SPECIFIC HELPER MODULES"
.IX Header "OS SPECIFIC HELPER MODULES"
.SS "Dummy"
.IX Subsection "Dummy"
The Dummy module is there to provide a default failover result to the main
Sys::Filesystem module if no suitable platform specific module can be found
or successfully loaded. This is the last module to be tried, in order of
platform, Unix (if not on Win32), and then Dummy.
.SS "Unix"
.IX Subsection "Unix"
The Unix module is intended to provide a \*(L"best guess\*(R" failover result to the
main Sys::Filesystem module if no suitable platform specific module can be
found, and the platform is not 'MSWin32'.
.PP
This module requires additional work to improve it's guestimation abilities.
.SS "Darwin"
.IX Subsection "Darwin"
First written by Christian Renz <crenz@web42.com>.
.SS "Win32"
.IX Subsection "Win32"
Provides \f(CW\*(C`mount_point\*(C'\fR and \f(CW\*(C`device\*(C'\fR of mounted filesystems on Windows.
.SS "\s-1AIX\s0"
.IX Subsection "AIX"
Please be aware that the \s-1AIX\s0 /etc/filesystems file has both a \*(L"type\*(R" and
\&\*(L"vfs\*(R" field. The \*(L"type\*(R" field should not be confused with the filesystem
format/type (that is stored in the \*(L"vfs\*(R" field). You may wish to use the
\&\*(L"format\*(R" field when querying for filesystem types, since it is aliased to
be more reliable accross different platforms.
.SS "Other"
.IX Subsection "Other"
Linux, Solaris, Cygwin, FreeBSD, NetBSD, HP-UX.
.SS "\s-1OS\s0 Identifiers"
.IX Subsection "OS Identifiers"
The following list is taken from perlport. Please refer to the original
source for the most up to date version. This information should help anyone
who wishes to write a helper module for a new platform. Modules should have
the same name as ^O in title caps. Thus 'openbsd' becomes 'Openbsd.pm'.
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
Sys::Filesystem requires Perl >= 5.6 to run.
.SH "TODO"
.IX Header "TODO"
Add support for Tru64, MidnightBSD, Haiku, Minix, DragonflyBSD and OpenBSD.
Please contact me if you would like to provide code for these operating
systems.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Sys::Filesystem
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Sys\-Filesystem>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Sys\-Filesystem>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/s/Sys\-Filesystem>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Sys\-Filesystem/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlport, Solaris::DeviceTree, Win32::DriveInfo, Sys::Filesystem::MountPoint
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicola Worthington <nicolaw@cpan.org> \- <http://perlgirl.org.uk>
.PP
Jens Rehsack <rehsack@cpan.org> \- <http://www.rehsack.de/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
See \s-1CREDITS\s0 in the distribution tarball.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2004,2005,2006 Nicola Worthington.
.PP
Copyright 2008\-2020 Jens Rehsack.
.PP
This software is licensed under The Apache Software License, Version 2.0.
.PP
<http://www.apache.org/licenses/LICENSE\-2.0>
