.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Devel::PatchPerl::Plugin 3"
.TH Devel::PatchPerl::Plugin 3 "2020-06-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::PatchPerl::Plugin \- Devel::PatchPerl plugins explained
.SH "VERSION"
.IX Header "VERSION"
version 2.00
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document explains the Devel::PatchPerl plugin system.
.PP
Plugins are a mechanism for providing additional functionality to
Devel::PatchPerl.
.PP
Plugins are searched for in the Devel::PatchPerl::Plugin namespace.
.SH "INITIALISATION"
.IX Header "INITIALISATION"
The plugin constructor is \f(CW\*(C`patchperl\*(C'\fR.
.PP
A plugin is specified using the \f(CW\*(C`PERL5_PATCHPERL_PLUGIN\*(C'\fR environment
variable. It may either be specified in full (ie. \f(CW\*(C`Devel::PatchPerl::Plugin::Feegle\*(C'\fR)
or as the short part (ie. \f(CW\*(C`Feegle\*(C'\fR).
.PP
.Vb 1
\&  $ export PERL5_PATCHPERL_PLUGIN=Devel::PatchPerl::Plugin::Feegle
\&
\&  $ export PERL5_PATCHPERL_PLUGIN=Feegle
.Ve
.PP
When Devel::PatchPerl has identified the perl source patch and done its patching
it will attempt to load the plugin identified. It will then call the class method
\&\f(CW\*(C`patchperl\*(C'\fR for the plugin package, with the following parameters:
.PP
.Vb 3
\&  \*(Aqversion\*(Aq, the Perl version of the source tree;
\&  \*(Aqsource\*(Aq, the absolute path to the Perl source tree;
\&  \*(Aqpatchexe\*(Aq, the \*(Aqpatch\*(Aq utility that can be used;
.Ve
.PP
Plugins are called with the current working directory being the root of the
Perl source tree, ie. \f(CW\*(C`source\*(C'\fR.
.PP
Summarised:
.PP
.Vb 1
\&  $ENV{PERL5_PATCHPERL_PLUGIN} = \*(AqDevel::PatchPerl::Plugin::Feegle\*(Aq;
\&
\&  my $plugin = $ENV{PERL5_PATCHPERL_PLUGIN};
\&
\&  eval "require $plugin";
\&
\&  eval {
\&    $plugin\->patchperl( version => $vers, source => $srcdir, patchexe => $patch );
\&  };
.Ve
.SH "WHAT CAN PLUGINS DO?"
.IX Header "WHAT CAN PLUGINS DO?"
Anything you desire to a Perl source tree.
.SH "WHY USE AN ENVIRONMENT VARIABLE TO SPECIFY PLUGINS?"
.IX Header "WHY USE AN ENVIRONMENT VARIABLE TO SPECIFY PLUGINS?"
So that indicating a plugin to use can be specified independently of whatever mechanism is
calling Devel::PatchPerl to do its bidding.
.PP
Think perlbrew.
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Williams <chris@bingosnet.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Chris Williams and Marcus Holland-Moritz.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
