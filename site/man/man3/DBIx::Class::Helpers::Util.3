.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Helpers::Util 3"
.TH DBIx::Class::Helpers::Util 3 "2020-03-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Helpers::Util \- Helper utilities for DBIx::Class components
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use DBIx::Class::Helpers::Util \*(Aq:all\*(Aq;
\&
\& my ($namespace, $class) = get_namespace_parts(\*(AqMyApp:Schema::Person\*(Aq);
\& is $namespace, \*(AqMyApp::Schema\*(Aq;
\& is $class, \*(AqPerson\*(Aq;
\&
\& if (is_load_namespaces(\*(AqMyApp::Schema::Result::Person\*(Aq)) {
\&   print \*(Aqcorrectly structured project\*(Aq;
\& }
\&
\& if (is_not_load_namespaces(\*(AqMyApp::Schema::Person\*(Aq)) {
\&   print \*(Aqincorrectly structured project\*(Aq;
\& }
\&
\& if (assert_similar_namespaces(\*(AqMyApp::Schema::Person\*(Aq, \*(AqFooApp::Schema::People\*(Aq)) {
\&   print \*(Aqboth projects are structured similarly\*(Aq;
\& }
\&
\& if (assert_similar_namespaces(\*(AqMyApp::Schema::Result::Person\*(Aq, \*(AqFooApp::Schema::Result::People\*(Aq)) {
\&   print \*(Aqboth projects are structured similarly\*(Aq;
\& }
\&
\& # in a resultset
\&
\& sub search {
\&    my ($self, $search, $attrs) = @_;
\&
\&    $attrs\->{order_by} = order_by_visitor($attrs\->{order_by}, sub {
\&       my $field = shift;
\&
\&       return \*(Aqfoo_bar\*(Aq if $field eq \*(Aqfoo.bar\*(Aq;
\&       return $field;
\&    }) if $attrs && $attrs\->{order_by};
\&
\&    $self\->next::method($search, $attrs);
\& }
\&
\& # in schema
\&
\& sub connection {
\&    my $self = shift;
\&
\&    my $args = normalize_connect_info(@_);
\&    $args\->{quote_names} = 1;
\&
\&    $self\->next::method($args)
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A collection of various helper utilities for DBIx::Class stuff.  Probably
only useful for components.
.SH "EXPORTS"
.IX Header "EXPORTS"
.SS "order_by_visitor"
.IX Subsection "order_by_visitor"
This function allows you to easily transform \f(CW\*(C`order_by\*(C'\fR clauses. See
\&\*(L"\s-1SYNOPSIS\*(R"\s0 for example.
.SS "get_namespace_parts"
.IX Subsection "get_namespace_parts"
Returns the namespace and class name of a package.  See \*(L"\s-1SYNOPSIS\*(R"\s0 for example.
.SS "is_load_namespaces"
.IX Subsection "is_load_namespaces"
Returns true if a package is structured in a way that would work for
load_namespaces.  See \*(L"\s-1SYNOPSIS\*(R"\s0 for example.
.SS "is_not_load_namespaces"
.IX Subsection "is_not_load_namespaces"
Returns true if a package is structured in a way that would not work for
load_namespaces.  See \*(L"\s-1SYNOPSIS\*(R"\s0 for example.
.SS "assert_similar_namespaces"
.IX Subsection "assert_similar_namespaces"
Dies if both packages are structured in the same way.  The same means both are
load_namespaces or both are not.  See \*(L"\s-1SYNOPSIS\*(R"\s0 for example.
.SS "normalize_connect_info"
.IX Subsection "normalize_connect_info"
Takes all of the various and interesting
forms that can be passed to connect and
normalizes them into the final and simplest form, a single hashref.
.SH "AUTHOR"
.IX Header "AUTHOR"
Arthur Axel \*(L"fREW\*(R" Schmidt <frioux+cpan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Arthur Axel \*(L"fREW\*(R" Schmidt.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
