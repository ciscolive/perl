.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Simplex 3"
.TH Simplex 3 "2019-04-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDL::Opt::Simplex \-\- Simplex optimization routines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use PDL::Opt::Simplex;
\&
\& ($optimum,$ssize,$optval) = simplex($init,$initsize,$minsize,
\&                 $maxiter,
\&                 sub {evaluate_func_at($_[0])},
\&                 sub {display_simplex($_[0])}
\&                 );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package implements the commonly used simplex optimization
algorithm. The basic idea of the algorithm is to move
a \*(L"simplex\*(R" of N+1 points in the N\-dimensional search space
according to certain rules. The main
benefit of the algorithm is that you do not need to calculate
the derivatives of your function.
.PP
\&\f(CW$init\fR is a 1D vector holding the initial values of the N fitted
parameters, \f(CW$optimum\fR is a vector holding the final solution.
\&\f(CW$optval\fR is the evaluation of the final solution.
.PP
\&\f(CW$initsize\fR is the size of \f(CW$init\fR (more...)
.PP
\&\f(CW$minsize\fR is some sort of convergence criterion (more...)
\&\- e.g. \f(CW$minsize\fR = 1e\-6
.PP
The sub is assumed to understand more than 1 dimensions and threading.
Its signature is 'inp(nparams); [ret]\fBout()\fR'. An example would be
.PP
.Vb 6
\&        sub evaluate_func_at {
\&                my($xv) = @_;
\&                my $x1 = $xv\->slice("(0)");
\&                my $x2 = $xv\->slice("(1)");
\&                return $x1**4 + ($x2\-5)**4 + $x1*$x2;
\&        }
.Ve
.PP
Here \f(CW$xv\fR is a vector holding the current values of the parameters
being fitted which are then sliced out explicitly as \f(CW$x1\fR and \f(CW$x2\fR.
.PP
\&\f(CW$ssize\fR gives a very very approximate estimate of how close we might
be \- it might be miles wrong. It is the euclidean distance between
the best and the worst vertices. If it is not very small, the algorithm
has not converged.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "simplex"
.IX Subsection "simplex"
Simplex optimization routine
.PP
.Vb 5
\& ($optimum,$ssize,$optval) = simplex($init,$initsize,$minsize,
\&                 $maxiter,
\&                 sub {evaluate_func_at($_[0])},
\&                 sub {display_simplex($_[0])}
\&                 );
.Ve
.PP
See module \f(CW\*(C`PDL::Opt::Simplex\*(C'\fR for more information.
.SH "CAVEATS"
.IX Header "CAVEATS"
Do not use the simplex method if your function has local minima.
It will not work. Use genetic algorithms or simulated annealing
or conjugate gradient or momentum gradient descent.
.PP
They will not really work either but they are not guaranteed not to work ;)
(if you have infinite time, simulated annealing is guaranteed to work
but only after it has visited every point in your space).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Ron Shaffer's chemometrics web page and references therein:
\&\f(CW\*(C`http://chem1.nrl.navy.mil/~shaffer/chemoweb.html\*(C'\fR.
.PP
Numerical Recipes (bla bla bla \s-1XXX\s0 ref).
.PP
The demonstration (Examples/Simplex/tsimp.pl and tsimp2.pl).
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright(C) 1997 Tuomas J. Lukka. 
All rights reserved. There is no warranty. You are allowed
to redistribute this software / documentation under certain
conditions. For details, see the file \s-1COPYING\s0 in the \s-1PDL\s0 
distribution. If this file is separated from the \s-1PDL\s0 distribution, 
the copyright notice should be included in the file.
