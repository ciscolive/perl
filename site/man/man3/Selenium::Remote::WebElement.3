.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Selenium::Remote::WebElement 3"
.TH Selenium::Remote::WebElement 3 "2020-10-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Selenium::Remote::WebElement \- Representation of an HTML Element used by Selenium Remote Driver
.SH "VERSION"
.IX Header "VERSION"
version 1.38
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Selenium Webdriver represents all the \s-1HTML\s0 elements as WebElements.
This module provides a mechanism to represent them as objects &
perform various actions on the related elements. This module should
not be instantiated directly by the end user. Selenium::Remote::Driver
instantiates this module when required. Typically, the find_element
method in Selenium::Remote::Driver returns this object on which
various element related operations can be carried out.
.PP
What is probably most useful on this page is the list of methods below
that you can perform on an element once you've found one and S::R::D
has made an instance of this for you.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SS "new"
.IX Subsection "new"
.IP "\fBid\fR" 4
.IX Item "id"
Required: Pass in a string representing the \s-1ID\s0 of the object. The
string should be obtained from the response object of making one of
the \f(CW\*(C`find_element\*(C'\fR calls from Selenium::Remote::Driver.
.Sp
The attribute is also set up to handle spec compliant element response
objects via its `coerce` such that any of the following will work and
are all equivalent:
.Sp
.Vb 4
\&    my $old_elem = Selenium::Remote::WebElement\->new(
\&        id => 1,
\&        driver => $driver
\&    );
\&
\&    my $new_remote_elem = Selenium::Remote::WebElement\->new(
\&        id => { ELEMENT => 1 },
\&        driver => $driver
\&    );
\&
\&    my $new_spec_elem = Selenium::Remote::WebElement\->new(
\&        id => { \*(Aqelement\-6066\-11e4\-a52e\-4f735466cecf\*(Aq => 1 },
\&        driver => $driver
\&    );
.Ve
.Sp
and then after instantiation, all three would give the following for
`id`:
.Sp
.Vb 1
\&    print $elem\->id; # prints 1
.Ve
.IP "\fBdriver\fR" 4
.IX Item "driver"
Required: Pass in a Selenium::Remote::Driver instance or one of its
subclasses. The WebElement needs the appropriate Driver session to
execute its commands properly.
.PP
For typical usage of S::R::D and this module, none of this
matters and it should Just Work without you having to worry about it
at all. For further reading, the W3C
spec <https://www.w3.org/TR/webdriver/#elements> strictly dictates the
exact behavior.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "child(selector, method)"
.IX Subsection "child(selector, method)"
.SS "children(selector, method)"
.IX Subsection "children(selector, method)"
Alias to Selenium::Remote::Driver::find_child_element and find_child_elements, respectively.
.SS "click"
.IX Subsection "click"
.Vb 2
\& Description:
\&    Click the element.
\&
\& Usage:
\&    $elem\->click();
.Ve
.SS "submit"
.IX Subsection "submit"
.Vb 3
\& Description:
\&    Submit a FORM element. The submit command may also be applied to any element
\&    that is a descendant of a FORM element.
\&
\& Compatibility:
\&    On webdriver3 enabled servers, this uses a JS shim, which WILL NOT submit correctly unless your element is an <input>.
\&    Try clicking it if possible instead.
\&
\& Usage:
\&    $elem\->submit();
.Ve
.SS "send_keys"
.IX Subsection "send_keys"
.Vb 4
\& Description:
\&    Send a sequence of key strokes to an element. If you want to send specific
\&    Keyboard events, then use the WDKeys module along with theis method. See e.g.
\&    for reference
\&
\& Input: 1
\&    Required:
\&        {ARRAY | STRING} \- Array of strings or a string.
\&
\& Usage:
\&    $elem\->send_keys(\*(Aqabcd\*(Aq, \*(Aqefg\*(Aq);
\&    $elem\->send_keys(\*(Aqhijk\*(Aq);
\&
\&    or
\&
\&    # include the WDKeys module
\&    use Selenium::Remote::WDKeys;
\&    .
\&    .
\&    $elem\->send_keys(KEYS\->{\*(Aqspace\*(Aq}, KEYS\->{\*(Aqenter\*(Aq});
.Ve
.SS "is_selected"
.IX Subsection "is_selected"
.Vb 3
\& Description:
\&    Determine if an OPTION element, or an INPUT element of type checkbox or
\&    radiobutton is currently selected.
\&
\& Output:
\&    BOOLEAN \- whether the element is selected
\&
\& Usage:
\&    $elem\->is_selected();
.Ve
.SS "set_selected"
.IX Subsection "set_selected"
.Vb 3
\& Description:
\&    Select an OPTION element, or an INPUT element of type checkbox or radiobutton.
\&    Forces selected=1 on the element..
\&
\& Usage:
\&    $elem\->set_selected();
.Ve
.SS "toggle"
.IX Subsection "toggle"
.Vb 3
\& Description:
\&    Toggle whether an OPTION element, or an INPUT element of type checkbox or
\&    radiobutton is currently selected.
\&
\& Output:
\&    BOOLEAN \- Whether the element is selected after toggling its state.
\&
\& Usage:
\&    $elem\->toggle();
.Ve
.SS "is_enabled"
.IX Subsection "is_enabled"
.Vb 2
\& Description:
\&    Determine if an element is currently enabled.
\&
\& Output:
\&    BOOLEAN \- Whether the element is enabled.
\&
\& Usage:
\&    $elem\->is_enabled();
.Ve
.SS "get_element_location"
.IX Subsection "get_element_location"
.Vb 3
\& Description:
\&   Determine an element\*(Aqs location on the page. The point (0, 0) refers to the
\&   upper\-left corner of the page.
\&
\& Compatibility:
\&    On WebDriver 3 enabled servers, this is an alias for get_element_rect().
\&
\& Output:
\&    HASH \- The X and Y coordinates for the element on the page.
\&
\& Usage:
\&    $elem\->get_element_location();
\&
\& This method is DEPRECATED on webdriver3 enabled servers.
.Ve
.SS "get_size"
.IX Subsection "get_size"
.Vb 3
\& Description:
\&    Determine an element\*(Aqs size in pixels. The size will be returned with width
\&    and height properties.
\&
\& Compatibility:
\&    On WebDriver 3 enabled servers, this is an alias for get_element_rect().
\&
\& Output:
\&    HASH \- The width and height of the element, in pixels.
\&
\& Usage:
\&    $elem\->get_size();
\&
\& This method is DEPRECATED on webdriver3 enabled servers.
.Ve
.SS "get_element_rect"
.IX Subsection "get_element_rect"
Get the element's size \s-1AND\s0 location in a hash.
.PP
Example Output:
.PP
.Vb 1
\&    { x => 0, y => 0, height => 10, width => 10 }
.Ve
.SS "get_element_location_in_view"
.IX Subsection "get_element_location_in_view"
.Vb 3
\& Description:
\&    Determine an element\*(Aqs location on the screen once it has been scrolled
\&    into view.
\&
\&    Note: This is considered an internal command and should only be used to
\&    determine an element\*(Aqs location for correctly generating native events.
\&
\& Compatibility:
\&    On Webdriver3 servers, we have to implement this with a JS shim.
\&    This means in some contexts, you won\*(Aqt get any position returned, as the element isn\*(Aqt considered an element internally.
\&    You may have to go up the element stack to find the element that actually has the bounding box.
\&
\& Output:
\&    {x:number, y:number} The X and Y coordinates for the element on the page.
\&
\& Usage:
\&    $elem\->get_element_location_in_view();
.Ve
.SS "get_tag_name"
.IX Subsection "get_tag_name"
.Vb 2
\& Description:
\&    Query for an element\*(Aqs tag name.
\&
\& Output:
\&    STRING \- The element\*(Aqs tag name, as a lowercase string.
\&
\& Usage:
\&    $elem\->get_tag_name();
.Ve
.SS "clear"
.IX Subsection "clear"
.Vb 2
\& Description:
\&    Clear a TEXTAREA or text INPUT element\*(Aqs value.
\&
\& Usage:
\&    $elem\->clear();
.Ve
.SS "get_attribute"
.IX Subsection "get_attribute"
.Vb 2
\& Description:
\&    Get the value of an element\*(Aqs attribute.
\&
\& Compatibility:
\&    In older webDriver, this actually got the value of an element\*(Aqs property.
\&    If you want to get the initial condition (e.g. the values in the tag hardcoded in HTML), pass 1 as the second argument.
\&
\&    Or, set $driver\->{emulate_jsonwire} = 0 to not have to pass the extra arg.
\&
\&    This can only done on WebDriver 3 enabled servers.
\&
\& Input: 2
\&    Required:
\&        STRING \- name of the attribute of the element
\&    Optional:
\&        BOOLEAN \- "I really mean that I want the initial condition, quit being so compatible!!!"
\&
\&
\& Output:
\&    {STRING | NULL} The value of the attribute, or null if it is not set on the element.
\&
\& Usage:
\&    $elem\->get_attribute(\*(Aqname\*(Aq,1);
.Ve
.SS "get_property"
.IX Subsection "get_property"
Gets the \f(CW\*(C`Current Value\*(C'\fR of an element's attribute.
.PP
Takes a named property as an argument.
.PP
Only available on WebDriver 3 enabled servers.
.SS "get_value"
.IX Subsection "get_value"
.Vb 2
\& Description:
\&    Query for the value of an element, as determined by its value attribute.
\&
\& Output:
\&    {STRING | NULL} The element\*(Aqs value, or null if it doesn\*(Aqt have a value attribute.
\&
\& Usage:
\&    $elem\->get_value();
.Ve
.SS "is_displayed"
.IX Subsection "is_displayed"
.Vb 3
\& Description:
\&    Determine if an element is currently displayed.
\&    Note: This does *not* tell you an element\*(Aqs \*(Aqvisibility\*(Aq property; as it still takes up space in the DOM and is therefore considered \*(Aqdisplayed\*(Aq.
\&
\& WC3 Compatibility:
\&    On JSONWire this method really only checked to see whether the element\*(Aqs style was display:none, or whether it was a hidden input.
\&    This is because "displayedness" was pretty loosely defined until fairly late on into the process, and much grief resulted.
\&    In WC3 webdriver, it additionally does a viewport check, to account for the firmer definition of "displayedness":
\&    https://w3c.github.io/webdriver/#element\-displayedness
\&
\& Output:
\&    BOOLEAN \- Whether the element is displayed.
\&
\& Usage:
\&    $elem\->is_displayed();
.Ve
.SS "is_hidden"
.IX Subsection "is_hidden"
.Vb 2
\& Description:
\&    Determine if an element is currently hidden.
\&
\& Output:
\&    BOOLEAN \- Whether the element is hidden.
\&
\& Usage:
\&    $elem\->is_hidden();
.Ve
.SS "drag"
.IX Subsection "drag"
Alias for \fBSelenium::ActionChains::drag_and_drop()\fR.
.PP
Provide element you wish to drag to as argument.
.PP
.Vb 3
\&    my $target = $driver\->find_element(\*(Aqreceptacle\*(Aq,\*(Aqid\*(Aq);
\&    my $subject = $driver\->find_element(\*(Aqthingy\*(Aq,\*(Aqid\*(Aq);
\&    $subject\->drag($target);
.Ve
.SS "get_text"
.IX Subsection "get_text"
.Vb 2
\& Description:
\&    Get the innerText of the element.
\&
\& Output:
\&    STRING \- innerText of an element
\&
\& Usage:
\&    $elem\->get_text();
.Ve
.SS "get_css_attribute"
.IX Subsection "get_css_attribute"
.Vb 4
\& Description:
\&    Query the value of an element\*(Aqs computed CSS property. The CSS property to
\&    query should be specified using the CSS property name, not the JavaScript
\&    property name (e.g. background\-color instead of backgroundColor).
\&
\& Input: 1
\&    Required:
\&        STRING \- name of the css\-attribute
\&
\& Output:
\&    STRING \- Value of the css attribute
\&
\& Usage:
\&    $elem\->get_css_attribute(\*(Aqbackground\-color\*(Aq);
.Ve
.SS "describe"
.IX Subsection "describe"
.Vb 2
\& Description:
\&    Describe the identified element
\&
\& Usage:
\&    $elem\->describe();
\&
\& Note: DEPRECATED as of 2.42.2 \-\- use get_text, get_value, is_displayed, or
\& whatever appropriate WebElement function you need instead
\&
\& Entirely unsupported on WebDriver 3 enabled servers.
.Ve
.SS "screenshot"
.IX Subsection "screenshot"
.Vb 2
\& Description:
\&    Get a screenshot of the visible region that is a subset of the element\*(Aqs bounding box as a base64 encoded image.
\&
\& Compatibility:
\&    Only available on Webdriver3 enabled selenium servers.
\&
\& Input (optional):
\&    $scroll_into_view \- BOOLEAN default true.  If false, will not scroll the element into the viewport first.
\&    Failing to do so may result in an image being cropped partially or entirely.
\&
\& Output:
\&    STRING \- base64 encoded image
\&
\& Usage:
\&    print $element\->screenshot();
.Ve
.PP
To conveniently write the screenshot to a file, see \*(L"capture_screenshot\*(R".
.SS "capture_screenshot"
.IX Subsection "capture_screenshot"
.Vb 2
\& Description:
\&    Capture a screenshot of said element and save as a PNG to provided file name.
\&
\& Compatibility:
\&    Only available on Webdriver3 enabled selenium servers.
\&
\& Input (optional):
\&    $scroll_into_view \- BOOLEAN default true.  If false, will not scroll the element into the viewport first.
\&    Failing to do so may result in an image being cropped partially or entirely.
\&
\& Output:
\&    TRUE \- (Screenshot is written to file)
\&
\& Usage:
\&    $element\->capture_screenshot($filename);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see those modules/websites for more information related to this module.
.IP "\(bu" 4
Selenium::Remote::Driver
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
<https://github.com/teodesian/Selenium\-Remote\-Driver/issues>
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH "AUTHORS"
.IX Header "AUTHORS"
Current Maintainers:
.IP "\(bu" 4
Daniel Gempesaw <gempesaw@gmail.com>
.IP "\(bu" 4
Emmanuel Peroumalnaïk <peroumalnaik.emmanuel@gmail.com>
.PP
Previous maintainers:
.IP "\(bu" 4
Luke Closs <cpan@5thplane.com>
.IP "\(bu" 4
Mark Stosberg <mark@stosberg.com>
.PP
Original authors:
.IP "\(bu" 4
Aditya Ivaturi <ivaturi@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2010\-2011 Aditya Ivaturi, Gordon Child
.PP
Copyright (c) 2014\-2017 Daniel Gempesaw
.PP
Licensed under the Apache License, Version 2.0 (the \*(L"License\*(R");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
.PP
http://www.apache.org/licenses/LICENSE\-2.0
.PP
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \*(L"\s-1AS IS\*(R" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\s0 either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
