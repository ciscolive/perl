.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Alien::Base::ModuleBuild 3"
.TH Alien::Base::ModuleBuild 3 "2020-10-08" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Alien::Base::ModuleBuild \- A Module::Build subclass for building Alien:: modules and their libraries
.SH "VERSION"
.IX Header "VERSION"
version 1.15
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In your Build.PL:
.PP
.Vb 1
\& use Alien::Base::ModuleBuild;
\& 
\& my $builder = Alien::Base::ModuleBuild\->new(
\&   module_name => \*(AqAlien::MyLibrary\*(Aq,
\& 
\&   configure_requires => {
\&     \*(AqAlien::Base::ModuleBuild\*(Aq => \*(Aq0.005\*(Aq,
\&     \*(AqModule::Build\*(Aq => \*(Aq0.28\*(Aq
\&   },
\&   requires => {
\&     \*(AqAlien::Base\*(Aq => \*(Aq0.005\*(Aq,
\&   },
\& 
\&   alien_name => \*(Aqmylibrary\*(Aq, # the pkg\-config name if you want
\&                              # to use pkg\-config to discover
\&                              # system version of the mylibrary
\& 
\&   alien_repository => {
\&     protocol => \*(Aqhttp\*(Aq,
\&     host     => \*(Aqmyhost.org\*(Aq,
\&     location => \*(Aq/path/to/tarballs\*(Aq,
\&     pattern  => qr{^mylibrary\-([0\-9\e.]+)\e.tar\e.gz$},
\&   },
\& 
\&   # this is the default:
\&   alien_build_commands => [
\&     "%c \-\-prefix=%s", # %c is a platform independent version of ./configure
\&     "make",
\&   ],
\& 
\&   # this is the default for install:
\&   alien_install_commands => [
\&     "make install",
\&   ],
\& 
\&   alien_isolate_dynamic => 1,
\& );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1NOTE\s0\fR: Please consider for new development of Aliens that you use
Alien::Build and alienfile instead.  Like this module they work
with Alien::Base.  Unlike this module they are more easily customized
and handle a number of corner cases better.  For a good place to start,
please see Alien::Build::Manual::AlienAuthor.  Although the
Alien-Base / Alien-Build team will continue to maintain this module,
(we will continue to fix bugs where appropriate), we aren't adding any
new features to this module.
.PP
This is a subclass of Module::Build, that with Alien::Base allows
for easy creation of Alien distributions.  This module is used during the
build step of your distribution.  When properly configured it will
.IP "use pkg-config to find and use the system version of the library" 4
.IX Item "use pkg-config to find and use the system version of the library"
.PD 0
.IP "download, build and install the library if the system does not provide it" 4
.IX Item "download, build and install the library if the system does not provide it"
.PD
.SH "METHODS"
.IX Header "METHODS"
.SS "alien_check_installed_version"
.IX Subsection "alien_check_installed_version"
[version 0.001]
.PP
.Vb 1
\& my $version = $abmb\->alien_check_installed_version;
.Ve
.PP
This function determines if the library is already installed as part of
the operating system, and returns the version as a string.  If it can't
be detected then it should return empty list.
.PP
The default implementation relies on \f(CW\*(C`pkg\-config\*(C'\fR, but you will probably
want to override this with your own implementation if the package you are
building does not use \f(CW\*(C`pkg\-config\*(C'\fR.
.SS "alien_check_built_version"
.IX Subsection "alien_check_built_version"
[version 0.006]
.PP
.Vb 1
\& my $version = $amb\->alien_check_built_version;
.Ve
.PP
This function determines the version of the library after it has been
built from source.  This function only gets called if the operating
system version can not be found and the package is successfully built.
The version is returned on success.  If the version can't be detected
then it should return empty list.  Note that failing to detect a version
is considered a failure and the corresponding \f(CW\*(C`./Build\*(C'\fR action will
fail!
.PP
Any string is valid as a version as far as Alien::Base is concerned.
The most useful value would be a number or dotted decimal that most
software developers recognize and that software tools can differentiate.
In some cases packages will not have a clear version number, in which
case the string \f(CW\*(C`unknown\*(C'\fR would be a reasonable choice.
.PP
The default implementation relies on \f(CW\*(C`pkg\-config\*(C'\fR, and other heuristics,
but you will probably want to override this with your own implementation
if the package you are building does not use \f(CW\*(C`pkg\-config\*(C'\fR.
.PP
When this method is called, the current working directory will be the
build root.
.PP
If you see an error message like this:
.PP
.Vb 1
\& Library looks like it installed, but no version was determined
.Ve
.PP
After the package is built from source code then you probably need to
provide an implementation for this method.
.SS "alien_extract_archive"
.IX Subsection "alien_extract_archive"
[version 0.024]
.PP
.Vb 1
\&  my $dir = $amb\->alien_extract_archive($filename);
.Ve
.PP
This function unpacks the given archive and returns the directory
containing the unpacked files.
.PP
The default implementation relies on Archive::Extract that is able
to handle most common formats. In order to handle other formats or
archives requiring some special treatment you may want to override
this method.
.SS "alien_do_system"
.IX Subsection "alien_do_system"
[version 0.024]
.PP
.Vb 1
\&  my %result = $amb\->alien_do_system($cmd)
.Ve
.PP
Similar to Module::Build::do_system, also sets the path and several
environment variables in accordance to the object configuration
(i.e. \f(CW\*(C`alien_bin_requires\*(C'\fR) and performs the interpolation of the
patterns described in \*(L"\s-1COMMAND
INTERPOLATION\*(R"\s0 in Alien::Base::ModuleBuild::API.
.PP
Returns a set of key value pairs including \f(CW\*(C`stdout\*(C'\fR, \f(CW\*(C`stderr\*(C'\fR,
\&\f(CW\*(C`success\*(C'\fR and \f(CW\*(C`command\*(C'\fR.
.SS "alien_do_commands"
.IX Subsection "alien_do_commands"
.Vb 1
\& $amb\->alien_do_commands($phase);
.Ve
.PP
Executes the commands for the given phase.
.SS "alien_interpolate"
.IX Subsection "alien_interpolate"
.Vb 1
\& my $string = $amb\->alien_interpolate($string);
.Ve
.PP
Takes the input string and interpolates the results.
.SH "GUIDE TO DOCUMENTATION"
.IX Header "GUIDE TO DOCUMENTATION"
The documentation for \f(CW\*(C`Module::Build\*(C'\fR is broken up into sections:
.IP "General Usage (Module::Build)" 4
.IX Item "General Usage (Module::Build)"
This is the landing document for Alien::Base::ModuleBuild's parent class.
It describes basic usage and background information.
Its main purpose is to assist the user who wants to learn how to invoke
and control \f(CW\*(C`Module::Build\*(C'\fR scripts at the command line.
.Sp
It also lists the extra documentation for its use. Users and authors of Alien::
modules should familiarize themselves with these documents. Module::Build::API
is of particular importance to authors.
.IP "Alien-Specific Usage (Alien::Base::ModuleBuild)" 4
.IX Item "Alien-Specific Usage (Alien::Base::ModuleBuild)"
This is the document you are currently reading.
.IP "Authoring Reference (Alien::Base::Authoring)" 4
.IX Item "Authoring Reference (Alien::Base::Authoring)"
This document describes the structure and organization of
\&\f(CW\*(C`Alien::Base\*(C'\fR based projects, beyond that contained in
\&\f(CW\*(C`Module::Build::Authoring\*(C'\fR, and the relevant concepts needed by authors who are
writing \fIBuild.PL\fR scripts for a distribution or controlling
\&\f(CW\*(C`Alien::Base::ModuleBuild\*(C'\fR processes programmatically.
.Sp
Note that as it contains information both for the build and use phases of
Alien::Base projects, it is located in the upper namespace.
.IP "\s-1API\s0 Reference (Alien::Base::ModuleBuild::API)" 4
.IX Item "API Reference (Alien::Base::ModuleBuild::API)"
This is a reference to the \f(CW\*(C`Alien::Base::ModuleBuild\*(C'\fR \s-1API\s0 beyond that contained
in \f(CW\*(C`Module::Build::API\*(C'\fR.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\fB\s-1ALIEN_VERBOSE\s0\fR" 4
.IX Item "ALIEN_VERBOSE"
Enables verbose output from M::B::do_system.
.IP "\fB\s-1ALIEN_FORCE\s0\fR" 4
.IX Item "ALIEN_FORCE"
Skips checking for an installed version and forces reinstalling the Alien target.
.IP "\fB\s-1ALIEN_INSTALL_TYPE\s0\fR" 4
.IX Item "ALIEN_INSTALL_TYPE"
Set to 'share' or 'system' to override the install type.  Set to 'default' or unset
to restore the default.
.IP "\fB\s-1ALIEN_ARCH\s0\fR" 4
.IX Item "ALIEN_ARCH"
Set to a true value to install to an arch-specific directory.
.IP "\fBALIEN_${\s-1MODULENAME\s0}_REPO_${\s-1PROTOCOL\s0}_${\s-1KEY\s0}\fR" 4
.IX Item "ALIEN_${MODULENAME}_REPO_${PROTOCOL}_${KEY}"
Overrides \f(CW$KEY\fR in the given module's repository configuration matching \f(CW$PROTOCOL\fR.
For example, \f(CW\*(C`ALIEN_OPENSSL_REPO_FTP_HOST=ftp.example.com\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Alien::Build" 4
.IX Item "Alien::Build"
.PD 0
.IP "alienfile" 4
.IX Item "alienfile"
.IP "Alien::Build::Manual::AlienAuthor" 4
.IX Item "Alien::Build::Manual::AlienAuthor"
.IP "Alien" 4
.IX Item "Alien"
.PD
.SH "THANKS"
.IX Header "THANKS"
Thanks also to
.IP "Christian Walde (Mithaldu)" 4
.IX Item "Christian Walde (Mithaldu)"
For productive conversations about component interoperability.
.IP "kmx" 4
.IX Item "kmx"
For writing Alien::Tidyp from which I drew many of my initial ideas.
.IP "David Mertens (run4flat)" 4
.IX Item "David Mertens (run4flat)"
For productive conversations about implementation.
.IP "Mark Nunberg (mordy, mnunberg)" 4
.IX Item "Mark Nunberg (mordy, mnunberg)"
For graciously teaching me about rpath and dynamic loading,
.SH "AUTHOR"
.IX Header "AUTHOR"
Original author: Joel A Berger <joel.a.berger@gmail.com>
.PP
Current maintainer: Graham Ollis <plicease@cpan.org>
.PP
Contributors:
.PP
David Mertens (run4flat)
.PP
Mark Nunberg (mordy, mnunberg)
.PP
Christian Walde (Mithaldu)
.PP
Brian Wightman (MidLifeXis)
.PP
Graham Ollis (plicease)
.PP
Zaki Mughal (zmughal)
.PP
mohawk2
.PP
Vikas N Kumar (vikasnkumar)
.PP
Flavio Poletti (polettix)
.PP
Salvador Fandin\*~o (salva)
.PP
Gianni Ceccarelli (dakkar)
.PP
Pavel Shaydo (zwon, trinitum)
.PP
Kang-min Liu (\s-1XXX,\s0 gugod)
.PP
Nicholas Shipp (nshp)
.PP
Petr Pisar (ppisar)
.PP
Alberto Simo\*~es (ambs)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012\-2020 by Joel A Berger.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
