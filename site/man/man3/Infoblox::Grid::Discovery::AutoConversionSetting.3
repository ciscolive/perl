.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Discovery::AutoConversionSetting 3"
.TH Infoblox::Grid::Discovery::AutoConversionSetting 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Discovery::AutoConversionSetting \- Auto conversion setting.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The object contains settings for automatic conversion of discovered data to managed objects.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 7
\& my $object = Infoblox::Grid::Discovery::AutoConversionSetting\->new(
\&    \*(Aqcomment\*(Aq          => $string,    # Optional
\&    \*(Aqcondition\*(Aq        => $string,    # Optional
\&    \*(Aqformat\*(Aq           => $string,    # Required
\&    \*(Aqnetwork_view\*(Aq     => $string,    # Required
\&    \*(Aqtype\*(Aq             => \*(AqA_AND_PTR_RECORD\*(Aq | \*(AqHOST_RECORD\*(Aq | \*(AqFIXED_ADDRESS\*(Aq, # Required
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The object does not support any session methods.
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of the object.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the comment for the automatic conversion setting.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The comment in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->comment();
\& # Modify attribute value
\& $object\->comment(\*(Aqcomment\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "condition( )"
.IX Subsection "condition( )"
.RS 4
Use this method to set or retrieve the condition for automatic conversion settings.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The string contains the condition for automatic conversion settings.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->condition();
\& # Modify attribute value
\& $object\->condition(\*(Aq${discovered_name} == "unknown"\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "format( )"
.IX Subsection "format( )"
.RS 4
Use this method to set or retrieve the format of the template for conversion.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Template string used to generate host names.
.Sp
Note that using double quotes may lead to interpolation of variables. Instead, use single quotes or encapsulated '$' characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->format();
\& # Modify attribute value
\& $object\->format(\*(Aq${discovered_name}.test.com\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the name of the network view which contains discovered data for convert.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the network view.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->network_view();
\& # Modify attribute value
\& $object\->network_view(\*(Aqdefault\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "type( )"
.IX Subsection "type( )"
.RS 4
Use this method to set or retrieve the type of the converted object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The object type used to define the converted object. Valid value is one of the following object types: 'A_AND_PTR_RECORD', '\s-1HOST_RECORD\s0', '\s-1FIXED_ADDRESS\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->type();
\& # Modify attribute value
\& $object\->type(\*(AqFIXED_ADDRESS\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
