.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SMS::Send::AU::Test 3"
.TH SMS::Send::AU::Test 3 "2011-11-09" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SMS::Send::AU::Test \- SMS::Send Regional\-Class Testing Driver
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Create a testing sender
\&  my $send = SMS::Send\->new( \*(AqAU\-Test\*(Aq );
\&  
\&  # Clear the message trap
\&  $send\->clear;
\&  
\&  # Send a message
\&  $send\->send_sms(
\&        text => \*(AqHi there\*(Aq,
\&        to   => \*(Aq+61 (4) 1234 5678\*(Aq,
\&        );
\&  
\&  # Get the message from the trap
\&  my @messages = $send\->messages;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SMS::Send supports two classes of drivers.
.PP
An international class named in the format \f(CW\*(C`SMS::Send::Foo\*(C'\fR, which only
accept international numbers in \f(CW\*(C`+1 XXX XXXXX\*(C'\fR format, and
regional-context drivers in the format \f(CW\*(C`SMS::Send::XX::Foo\*(C'\fR which will
also accept a non-leading-plus number in the format applicable within that
region (in the above case, Australia).
.PP
SMS::Send::AU::Test is the testing driver for the regional class of
drivers. Except for the name, it is otherwise identical to
SMS::Send::Test.
.PP
Its two roles are firstly to always exist (be installed) and secondly
to act as a \*(L"trap\*(R" for messages. Messages sent via SMS::Send::AU::Test
always succeed, and the messages can be recovered for testing after
sending.
.PP
Note that the trap is done on a per-driver-handle basis, and is not
shared between multiple driver handles.
.SH "METHODS"
.IX Header "METHODS"
SMS::Send::AU::Test inherits all the methods of the parent SMS::Send::Driver
class, and adds the following.
.SS "messages"
.IX Subsection "messages"
The \f(CW\*(C`messages\*(C'\fR method retrieves as a list all of the messages in the
message trap.
.SS "clear"
.IX Subsection "clear"
The \f(CW\*(C`clear\*(C'\fR method clears the message trap. This should be done before
each chunk of test code to ensure you are starting from a known state.
.PP
Returns true as a convenience.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs should be reported via the \s-1CPAN\s0 bug tracker at
.PP
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=SMS\-Send>
.PP
For other issues, contact the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2005 \- 2011 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
