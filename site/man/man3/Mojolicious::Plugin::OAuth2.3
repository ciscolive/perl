.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::OAuth2 3"
.TH Mojolicious::Plugin::OAuth2 3 "2019-07-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::OAuth2 \- Auth against OAuth2 APIs
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This Mojolicious plugin allows you to easily authenticate against a
OAuth2 <http://oauth.net> provider. It includes configurations for a few
popular providers, but you can add your own easily as well.
.PP
Note that OAuth2 requires https, so you need to have the optional Mojolicious
dependency required to support it. Run the command below to check if
IO::Socket::SSL is installed.
.PP
.Vb 1
\&   $ mojo version
.Ve
.SS "References"
.IX Subsection "References"
.IP "\(bu" 4
<http://oauth.net/documentation/>
.IP "\(bu" 4
<http://aaronparecki.com/articles/2012/07/29/1/oauth2\-simplified>
.IP "\(bu" 4
<http://homakov.blogspot.jp/2013/03/oauth1\-oauth2\-oauth.html>
.IP "\(bu" 4
<http://en.wikipedia.org/wiki/OAuth#OAuth_2.0>
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Example non-blocking application"
.IX Subsection "Example non-blocking application"
.Vb 1
\&  use Mojolicious::Lite;
\&
\&  plugin "OAuth2" => {
\&    facebook => {
\&      key    => "some\-public\-app\-id",
\&      secret => $ENV{OAUTH2_FACEBOOK_SECRET},
\&    },
\&  };
\&
\&  get "/connect" => sub {
\&    my $c = shift;
\&    my $get_token_args = {redirect_uri => $c\->url_for("connect")\->userinfo(undef)\->to_abs};
\&
\&    $c\->oauth2\->get_token_p(facebook => $get_token_args)\->then(sub {
\&      return unless my $provider_res = shift; # Redirct to Facebook
\&      $c\->session(token => $provider_res\->{access_token});
\&      $c\->redirect_to("profile");
\&    })\->catch(sub {
\&      $c\->render("connect", error => shift);
\&    });
\&  };
.Ve
.SS "Custom connect button"
.IX Subsection "Custom connect button"
You can add a \*(L"connect link\*(R" to your template using the \*(L"oauth2.auth_url\*(R"
helper. Example template:
.PP
.Vb 2
\&  Click here to log in:
\&  <%= link_to "Connect!", $c\->oauth2\->auth_url("facebook", scope => "user_about_me email") %>
.Ve
.SS "Configuration"
.IX Subsection "Configuration"
This plugin takes a hash as config, where the keys are provider names and the
values are configuration for each provider. Here is a complete example:
.PP
.Vb 8
\&  plugin "OAuth2" => {
\&    custom_provider => {
\&      key           => "APP_ID",
\&      secret        => "SECRET_KEY",
\&      authorize_url => "https://provider.example.com/auth",
\&      token_url     => "https://provider.example.com/token",
\&    },
\&  };
.Ve
.PP
To make it a bit easier, Mojolicious::Plugin::OAuth2 has already
values for \f(CW\*(C`authorize_url\*(C'\fR and \f(CW\*(C`token_url\*(C'\fR for the following providers:
.IP "\(bu" 4
dailymotion
.Sp
Authentication for Dailymotion video site.
.IP "\(bu" 4
eventbrite
.Sp
Authentication for <https://www.eventbrite.com> event site.
.Sp
See also <http://developer.eventbrite.com/docs/auth/>.
.IP "\(bu" 4
facebook
.Sp
OAuth2 for Facebook's graph \s-1API,\s0 <http://graph.facebook.com/>. You can find
\&\f(CW\*(C`key\*(C'\fR (App \s-1ID\s0) and \f(CW\*(C`secret\*(C'\fR (App Secret) from the app dashboard here:
<https://developers.facebook.com/apps>.
.Sp
See also <https://developers.facebook.com/docs/reference/dialogs/oauth/>.
.Sp
= item * instagram
.Sp
OAuth2 for Instagram \s-1API.\s0 You can find \f(CW\*(C`key\*(C'\fR (Client \s-1ID\s0) and
\&\f(CW\*(C`secret\*(C'\fR (Client Secret) from the app dashboard here:
<https://www.instagram.com/developer/clients/manage/>.
.Sp
See also <https://www.instagram.com/developer/authentication/>.
.IP "\(bu" 4
github
.Sp
Authentication with Github.
.Sp
See also <https://developer.github.com/v3/oauth/>.
.IP "\(bu" 4
google
.Sp
OAuth2 for Google. You can find the \f(CW\*(C`key\*(C'\fR (\s-1CLIENT ID\s0) and \f(CW\*(C`secret\*(C'\fR
(\s-1CLIENT SECRET\s0) from the app console here under \*(L"APIs & Auth\*(R" and
\&\*(L"Credentials\*(R" in the menu at <https://console.developers.google.com/project>.
.Sp
See also <https://developers.google.com/+/quickstart/>.
.Sp
= item * vkontakte
.Sp
OAuth2 for Vkontakte. You can find \f(CW\*(C`key\*(C'\fR (App \s-1ID\s0) and \f(CW\*(C`secret\*(C'\fR
(Secure key) from the app dashboard here: <https://vk.com/apps?act=manage>.
.Sp
See also <https://vk.com/dev/authcode_flow_user>.
.SS "Testing"
.IX Subsection "Testing"
\&\s-1THIS API IS EXPERIMENTAL AND CAN CHANGE WITHOUT NOTICE.\s0
.PP
To enable a \*(L"mocked\*(R" OAuth2 api, you need to give the special \*(L"mocked\*(R"
provider a \*(L"key\*(R":
.PP
.Vb 1
\&  plugin "OAuth2" => { mocked => {key => 42} };
.Ve
.PP
The code above will add two new routes to your application:
.IP "\(bu" 4
\&\s-1GET\s0 /mocked/oauth/authorize
.Sp
This route is a web page which contains a link that takes you back to
\&\*(L"redirect_uri\*(R", with a \*(L"code\*(R". The \*(L"code\*(R" default to \*(L"fake_code\*(R", but
can be configured:
.Sp
.Vb 1
\&  $c\->app\->oauth2\->providers\->{mocked}{return_code} = "...";
.Ve
.Sp
The route it self can also be customized:
.Sp
.Vb 1
\&  plugin "OAuth2" => { mocked => {authorize_url => \*(Aq...\*(Aq} };
.Ve
.IP "\(bu" 4
\&\s-1POST\s0 /mocked/oauth/token
.Sp
This route is will return a \*(L"access_token\*(R" which is available in your
\&\*(L"oauth2.get_token\*(R" callback. The default is \*(L"fake_token\*(R", but it can
be configured:
.Sp
.Vb 1
\&  $c\->app\->oauth2\->providers\->{mocked}{return_token} = "...";
.Ve
.Sp
The route it self can also be customized:
.Sp
.Vb 1
\&  plugin "OAuth2" => { mocked => {token_url => \*(Aq...\*(Aq} };
.Ve
.SH "HELPERS"
.IX Header "HELPERS"
.SS "oauth2.auth_url"
.IX Subsection "oauth2.auth_url"
.Vb 1
\&  $url = $c\->oauth2\->auth_url($provider => \e%args);
.Ve
.PP
Returns a Mojo::URL object which contain the authorize \s-1URL.\s0 This is
useful if you want to add the authorize \s-1URL\s0 as a link to your webpage
instead of doing a redirect like \*(L"oauth2.get_token\*(R" does. \f(CW%args\fR is optional,
but can contain:
.IP "\(bu" 4
host
.Sp
Useful if your provider uses different hosts for accessing different accounts.
The default is specified in the provider configuration.
.Sp
.Vb 1
\&  $url\->host($host);
.Ve
.IP "\(bu" 4
authorize_query
.Sp
Either a hash-ref or an array-ref which can be used to give extra query
params to the \s-1URL.\s0
.Sp
.Vb 1
\&  $url\->query($authorize_url);
.Ve
.IP "\(bu" 4
redirect_uri
.Sp
Useful if you want to go back to a different page than what you came from.
The default is:
.Sp
.Vb 1
\&  $c\->url_for\->to_abs\->to_string
.Ve
.IP "\(bu" 4
scope
.Sp
Scope to ask for credentials to. Should be a space separated list.
.IP "\(bu" 4
state
.Sp
A string that will be sent to the identity provider. When the user returns
from the identity provider, this exact same string will be carried with the user,
as a \s-1GET\s0 parameter called \f(CW\*(C`state\*(C'\fR in the \s-1URL\s0 that the user will return to.
.SS "oauth2.get_token"
.IX Subsection "oauth2.get_token"
.Vb 5
\&  $data = $c\->oauth2\->get_token($provider_name => \e%args);
\&  $c    = $c\->oauth2\->get_token($provider_name => \e%args, sub {
\&            my ($c, $err, $data) = @_;
\&            # do stuff with $data\->{access_token} if it exists.
\&          });
.Ve
.PP
\&\*(L"oauth2.get_token\*(R" is used to either fetch access token from OAuth2 provider,
handle errors or redirect to OAuth2 provider. This method can be called in either
blocking or non-blocking mode. \f(CW$err\fR holds a error description if something
went wrong. Blocking mode will \f(CW\*(C`die($err)\*(C'\fR instead of returning it to caller.
\&\f(CW$data\fR is a hash-ref containing the access token from the OAauth2 provider.
\&\f(CW$data\fR in blocking mode can also be \f(CW\*(C`undef\*(C'\fR if a redirect has been issued
by this module.
.PP
In more detail, this method will do one of two things:
.IP "1." 4
If called from an action on your site, it will redirect you to the
\&\f(CW$provider_name\fR's \f(CW\*(C`authorize_url\*(C'\fR. This site will probably have some
sort of \*(L"Connect\*(R" and \*(L"Reject\*(R" button, allowing the visitor to either
connect your site with his/her profile on the OAuth2 provider's page or not.
.IP "2." 4
The OAuth2 provider will redirect the user back to your site after clicking the
\&\*(L"Connect\*(R" or \*(L"Reject\*(R" button. \f(CW$data\fR will then contain a key \*(L"access_token\*(R"
on \*(L"Connect\*(R" and a false value (or die in blocking mode) on \*(L"Reject\*(R".
.PP
The method takes these arguments: \f(CW$provider_name\fR need to match on of
the provider names under \*(L"Configuration\*(R" or a custom provider defined
when registering the plugin.
.PP
\&\f(CW%args\fR can have:
.IP "\(bu" 4
host
.Sp
Useful if your provider uses different hosts for accessing different accounts.
The default is specified in the provider configuration.
.IP "\(bu" 4
redirect
.Sp
Set \f(CW\*(C`redirect\*(C'\fR to 0 to disable automatic redirect.
.IP "\(bu" 4
scope
.Sp
Scope to ask for credentials to. Should be a space separated list.
.SS "oauth2.get_token_p"
.IX Subsection "oauth2.get_token_p"
.Vb 1
\&  $promise = $c\->oauth2\->get_token_p($provider_name => \e%args);
.Ve
.PP
Same as \*(L"oauth2.get_token\*(R", but returns a Mojo::Promise. See \*(L"\s-1SYNOPSIS\*(R"\s0
for example usage.
.SS "oauth2.providers"
.IX Subsection "oauth2.providers"
This helper allow you to access the raw providers mapping, which looks
something like this:
.PP
.Vb 9
\&  {
\&    facebook => {
\&      authorize_url => "https://graph.facebook.com/oauth/authorize",
\&      token_url     => "https://graph.facebook.com/oauth/access_token",
\&      key           => ...,
\&      secret        => ...,
\&    },
\&    ...
\&  }
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "providers"
.IX Subsection "providers"
Holds a hash of provider information. See \*(L"oauth2.providers\*(R".
.SH "METHODS"
.IX Header "METHODS"
.SS "register"
.IX Subsection "register"
Will register this plugin in your application. See \*(L"\s-1SYNOPSIS\*(R"\s0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Marcus Ramberg \- \f(CW\*(C`mramberg@cpan.org\*(C'\fR
.PP
Jan Henning Thorsen \- \f(CW\*(C`jhthorsen@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
This software is licensed under the same terms as Perl itself.
