.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search::Elasticsearch::Client::7_0::Direct::ILM 3"
.TH Search::Elasticsearch::Client::7_0::Direct::ILM 3 "2020-09-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Search::Elasticsearch::Client::7_0::Direct::ILM \- Plugin providing index lifecycle management APIs for Search::Elasticsearch 7.x
.SH "VERSION"
.IX Header "VERSION"
version 7.30
.SS "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
This module provides methods to use the index lifecycle management feature.
.PP
The full documentation for \s-1ILM\s0 is available here:
<https://www.elastic.co/guide/en/elasticsearch/reference/current/index\-lifecycle\-management.html>
.SH "POLICY METHODS"
.IX Header "POLICY METHODS"
.ie n .SS """put_lifecycle()"""
.el .SS "\f(CWput_lifecycle()\fP"
.IX Subsection "put_lifecycle()"
.Vb 4
\&    $response = $es\->ilm\->put_lifecycle(
\&        policy  => $policy  # required
\&        body    => {...}    # required
\&    )
.Ve
.PP
The \f(CW\*(C`put_lifecycle()\*(C'\fR method creates or updates a lifecycle policy.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1ILM\s0 put_lifecycle docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-put-lifecycle.html>
for more information.
.ie n .SS """put_lifecycle()"""
.el .SS "\f(CWput_lifecycle()\fP"
.IX Subsection "put_lifecycle()"
.Vb 4
\&    $response = $es\->ilm\->put_lifecycle(
\&        policy  => $policy  # required
\&        body    => {...}    # required
\&    )
.Ve
.PP
The \f(CW\*(C`put_lifecycle()\*(C'\fR method creates or updates a lifecycle policy.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1ILM\s0 put_lifecycle docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-put-lifecycle.html>
for more information.
.ie n .SS """get_lifecycle()"""
.el .SS "\f(CWget_lifecycle()\fP"
.IX Subsection "get_lifecycle()"
.Vb 3
\&    $response = $es\->ilm\->get_lifecycle(
\&        policy  => $policy  # required
\&    )
.Ve
.PP
The \f(CW\*(C`get_lifecycle()\*(C'\fR method retrieves the specified policy
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1ILM\s0 get_lifecycle docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-get-lifecycle.html>
for more information.
.ie n .SS """delete_lifecycle()"""
.el .SS "\f(CWdelete_lifecycle()\fP"
.IX Subsection "delete_lifecycle()"
.Vb 3
\&    $response = $es\->ilm\->delete_lifecycle(
\&        policy  => $policy  # required
\&    )
.Ve
.PP
The \f(CW\*(C`delete_lifecycle()\*(C'\fR method deletes the specified policy
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1ILM\s0 delete_lifecycle docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-remove-lifecycle.html>
for more information.
.SH "INDEX MANAGEMENT METHODS"
.IX Header "INDEX MANAGEMENT METHODS"
.ie n .SS """move_to_step()"""
.el .SS "\f(CWmove_to_step()\fP"
.IX Subsection "move_to_step()"
.Vb 4
\&    $response = $es\->ilm\->move_to_step(
\&        index  => $index,       # required
\&        body   => {...}         # required
\&    )
.Ve
.PP
The \f(CW\*(C`move_to_step()\*(C'\fR method triggers execution of a specific step in the lifecycle policy.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1ILM\s0 move_to_step docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-move-to-step.html>
for more information.
.ie n .SS """retry()"""
.el .SS "\f(CWretry()\fP"
.IX Subsection "retry()"
.Vb 3
\&    $response = $es\->ilm\->retry(
\&        index  => $index,       # required
\&    )
.Ve
.PP
The \f(CW\*(C`retry()\*(C'\fR method retries executing the policy for an index that is in the \s-1ERROR\s0 step.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1ILM\s0 retry docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-retry.html>
for more information.
.ie n .SS """remove_lifecycle()"""
.el .SS "\f(CWremove_lifecycle()\fP"
.IX Subsection "remove_lifecycle()"
.Vb 3
\&    $response = $es\->ilm\->remove_lifecycle(
\&        index  => $index  # required
\&    )
.Ve
.PP
The \f(CW\*(C`remove_lifecycle()\*(C'\fR method removes a lifecycle from the specified index.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1ILM\s0 remove_lifecycle docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-remove-lifecycle.html>
for more information.
.ie n .SS """explain_lifecycle()"""
.el .SS "\f(CWexplain_lifecycle()\fP"
.IX Subsection "explain_lifecycle()"
.Vb 3
\&    $response = $es\->ilm\->explain_lifecycle(
\&        index  => $index  # required
\&    )
.Ve
.PP
The \f(CW\*(C`explain_lifecycle()\*(C'\fR method returns information about the indexâ€™s current lifecycle state.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1ILM\s0 explain_lifecycle docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-explain-lifecycle.html>
for more information.
.SH "OPERATION MANAGEMENT APIS"
.IX Header "OPERATION MANAGEMENT APIS"
.ie n .SS """status()"""
.el .SS "\f(CWstatus()\fP"
.IX Subsection "status()"
.Vb 1
\&    $response = $es\->ilm\->status;
.Ve
.PP
The \f(CW\*(C`status()\*(C'\fR method returns the current operating mode for \s-1ILM.\s0
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1ILM\s0 status docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-get-status.html>
for more information.
.ie n .SS """start()"""
.el .SS "\f(CWstart()\fP"
.IX Subsection "start()"
.Vb 1
\&    $response = $es\->ilm\->start;
.Ve
.PP
The \f(CW\*(C`start()\*(C'\fR method starts the index lifecycle management process.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1ILM\s0 start docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-start.html>
for more information.
.ie n .SS """stop()"""
.el .SS "\f(CWstop()\fP"
.IX Subsection "stop()"
.Vb 1
\&    $response = $es\->ilm\->stop;
.Ve
.PP
The \f(CW\*(C`stop()\*(C'\fR method stops the index lifecycle management process.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1ILM\s0 stop docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-stop.html>
for more information.
.SH "AUTHOR"
.IX Header "AUTHOR"
Enrico Zimuel <enrico.zimuel@elastic.co>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Elasticsearch \s-1BV.\s0
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
