.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::Blessed::Reconstruct 3"
.TH MooseX::Blessed::Reconstruct 3 "2018-09-26" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Blessed::Reconstruct \- A Data::Visitor for creating Moose objects from blessed placeholders
.SH "VERSION"
.IX Header "VERSION"
version 1.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use MooseX::Blessed::Reconstruct;
\&
\&
\&        my $obj = bless( {
\&                init_arg_foo => "Blah",
\&                arf => "yay",
\&        }, "Foo" );
\&
\&        my $proper = MooseX::Blessed::Reconstruct\->new\->visit($obj);
\&
\&
\&        # equivalent to:
\&
\&        my $proper = Foo\->meta\->new_object(%$obj);
\&
\&        # but recursive (and works with shared references)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The purpose of this module is to \*(L"fix up\*(R" blessed data into a real Moose
object.
.SH "METHODS"
.IX Header "METHODS"
See Data::Visitor
.SS "new"
.IX Subsection "new"
Constructor.
.PP
\fIarguments\fR
.IX Subsection "arguments"
.IP "load_classes" 4
.IX Item "load_classes"
If \f(CW\*(C`true\*(C'\fR (which is the default), we will try to require its class 
when the target object is \f(CW\*(C`visit\*(C'\fRed.
.SS "load_classes"
.IX Subsection "load_classes"
Read/write accessor to the \f(CW\*(C`load_classes\*(C'\fR attribute.
If \f(CW\*(C`true\*(C'\fR, we try to require its class when a target object is \f(CW\*(C`visit\*(C'\fRed.
.ie n .SS "visit_object $object"
.el .SS "visit_object \f(CW$object\fP"
.IX Subsection "visit_object $object"
Calls \*(L"load_class\*(R" in Class::MOP on the \f(CW\*(C`ref\*(C'\fR of \f(CW$object\fR.
.PP
If there's a metaclass, calls \f(CW\*(C`visit_object_with_meta\*(C'\fR, otherwise \f(CW\*(C`visit_ref\*(C'\fR
is used to walk the object brutishly.
.PP
Returns a deep clone of the input structure with all the Moose objects
reconstructed \*(L"properly\*(R".
.ie n .SS "visit_object_with_meta $obj, $meta"
.el .SS "visit_object_with_meta \f(CW$obj\fP, \f(CW$meta\fP"
.IX Subsection "visit_object_with_meta $obj, $meta"
Uses the metaclass \f(CW$meta\fR to create a new instance, registers the instance
with Data::Visitor's cycle tracking, and then inflates it using
\&\*(L"new_object\*(R" in Moose::Meta::Class.
.ie n .SS "prepare_args $obj"
.el .SS "prepare_args \f(CW$obj\fP"
.IX Subsection "prepare_args $obj"
Collapses \f(CW$obj\fR into key value pairs to be used as init args to
\&\*(L"new_object\*(R" in Moose::Meta::Class.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Yuval Kogman <nothingmuch@woobling.org>
.IP "\(bu" 4
Jonathan Rockway <jrockway@cpan.org>
.IP "\(bu" 4
Yanick Champoux <yanick@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2018, 2014 by Infinity Interactive, Yuval Kogman.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
