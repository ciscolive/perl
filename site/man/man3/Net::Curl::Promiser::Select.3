.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Curl::Promiser::Select 3"
.TH Net::Curl::Promiser::Select 3 "2020-07-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Curl::Promiser::Select
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements Net::Curl::Promiser via Perl’s
\&\fBselect()\fR built-in.
.PP
See \fI/examples\fR in the distribution for a fleshed-out demonstration.
.PP
This is “the hard way” to do this, by the way. Your life will be simpler
if you use (or create) an event-loop-based implementation like
Net::Curl::Promiser::AnyEvent or Net::Curl::Promiser::IOAsync.
See \fI/examples\fR for comparisons.
.SH "METHODS"
.IX Header "METHODS"
The following are added in addition to the base class methods:
.ie n .SS "($rmask, $wmask, $emask) = \fI\s-1OBJ\s0\fP\->\fBget_vecs()\fP;"
.el .SS "($rmask, \f(CW$wmask\fP, \f(CW$emask\fP) = \fI\s-1OBJ\s0\fP\->\fBget_vecs()\fP;"
.IX Subsection "($rmask, $wmask, $emask) = OBJ->get_vecs();"
Returns the bitmasks to use as input to \f(CW\*(C`select()\*(C'\fR.
.PP
Note that, since these are copies of \fI\s-1OBJ\s0\fR’s internal values, you don’t
need to copy them again before calling \f(CW\*(C`select()\*(C'\fR.
.ie n .SS "@fds = \fI\s-1OBJ\s0\fP\->\fBget_fds()\fP;"
.el .SS "\f(CW@fds\fP = \fI\s-1OBJ\s0\fP\->\fBget_fds()\fP;"
.IX Subsection "@fds = OBJ->get_fds();"
Returns the file descriptors that \fI\s-1OBJ\s0\fR tracks—or, in scalar context, the
count of such. Useful to check for exception events.
.ie n .SH """process( $READ_MASK, $WRITE_MASK )"""
.el .SH "\f(CWprocess( $READ_MASK, $WRITE_MASK )\fP"
.IX Header "process( $READ_MASK, $WRITE_MASK )"
Tell the underlying Net::Curl::Multi object which socket events have
happened. \f(CW$READ_MASK\fR and \f(CW$WRITE_MASK\fR are as “left” by Perl’s
\&\f(CW\*(C`select()\*(C'\fR built-in.
.PP
If, in fact, no events have happened, then this calls
\&\f(CW\*(C`socket_action(CURL_SOCKET_TIMEOUT)\*(C'\fR on the
Net::Curl::Multi object (similar to \f(CW\*(C`time_out()\*(C'\fR).
.PP
Finally, this reaps whatever pending \s-1HTTP\s0 responses may be ready and
resolves or rejects the corresponding Promise objects.
.PP
Returns \fI\s-1OBJ\s0\fR.
.ie n .SS "$is_active = \fI\s-1OBJ\s0\fP\->\fBtime_out()\fP;"
.el .SS "\f(CW$is_active\fP = \fI\s-1OBJ\s0\fP\->\fBtime_out()\fP;"
.IX Subsection "$is_active = OBJ->time_out();"
Tell the underlying Net::Curl::Multi object that a timeout happened,
and reap whatever pending \s-1HTTP\s0 responses may be ready.
.PP
Calls \f(CW\*(C`socket_action(CURL_SOCKET_TIMEOUT)\*(C'\fR on the
underlying Net::Curl::Multi object. The return is the same as
that operation returns.
.PP
Since \f(CW\*(C`process()\*(C'\fR can also do the work of this function, a call to this
function is just an optimization.
.PP
This should only be called from event loop logic.
.ie n .SS "$num = \fI\s-1OBJ\s0\fP\->\fBget_timeout()\fP"
.el .SS "\f(CW$num\fP = \fI\s-1OBJ\s0\fP\->\fBget_timeout()\fP"
.IX Subsection "$num = OBJ->get_timeout()"
Like libcurl’s \fBcurl_multi_timeout\fR\|(3), but sometimes returns different
values depending on the needs of \fI\s-1OBJ\s0\fR.
.PP
(\s-1NB:\s0 This value is in \fImilliseconds\fR.)
.PP
This should only be called (if it’s called at all) from event loop logic.
