.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::Netdisco::DB::Result::Device 3"
.TH App::Netdisco::DB::Result::Device 3 "2020-11-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "RELATIONSHIPS"
.IX Header "RELATIONSHIPS"
.SS "device_ips"
.IX Subsection "device_ips"
Returns rows from the \f(CW\*(C`device_ip\*(C'\fR table which relate to this Device. That is,
all the interface \s-1IP\s0 aliases configured on the Device.
.SS "device_ips_by_address_or_name"
.IX Subsection "device_ips_by_address_or_name"
Returns rows from the \f(CW\*(C`device_ip\*(C'\fR table which relate to this Device. That is,
all the interface \s-1IP\s0 aliases configured on the Device. However you probably
want to use the \f(CW\*(C`device_ips_with_address_or_name\*(C'\fR ResultSet method instead,
so you can pass the \s-1MAC\s0 address part.
.SS "vlans"
.IX Subsection "vlans"
Returns the \f(CW\*(C`device_vlan\*(C'\fR entries for this Device. That is, the list of VLANs
configured on or known by this Device.
.SS "ports"
.IX Subsection "ports"
Returns the set of ports on this Device.
.SS "ports_by_mac"
.IX Subsection "ports_by_mac"
Returns the set of ports on this Device, filtered by \s-1MAC.\s0 However you probably
want to use the \f(CW\*(C`ports_with_mac\*(C'\fR ResultSet method instead, so you can pass the
\&\s-1MAC\s0 address part.
.SS "modules"
.IX Subsection "modules"
Returns the set chassis modules on this Device.
.SS "power_modules"
.IX Subsection "power_modules"
Returns the set of power modules on this Device.
.SS "port_vlans"
.IX Subsection "port_vlans"
Returns the set of VLANs known to be configured on Ports on this Device,
either tagged or untagged.
.PP
The \s-1JOIN\s0 is of type \*(L"\s-1RIGHT\*(R"\s0 meaning that the results are constrained to VLANs
only on Ports on this Device.
.SS "port_vlans_filter"
.IX Subsection "port_vlans_filter"
A \s-1JOIN\s0 condition which can be used to filter a set of Devices to those known
carrying a given \s-1VLAN\s0 on its ports. Uses an \s-1INNER JOIN\s0 to achieve this.
.SS "wireless_ports"
.IX Subsection "wireless_ports"
Returns the set of wireless IDs known to be configured on Ports on this
Device.
.SS "ssids"
.IX Subsection "ssids"
Returns the set of SSIDs known to be configured on Ports on this Device.
.SS "properties_ports"
.IX Subsection "properties_ports"
Returns the set of ports known to have recorded properties
.SS "powered_ports"
.IX Subsection "powered_ports"
Returns the set of ports known to have PoE capability
.SS "community"
.IX Subsection "community"
Returns the row from the community string table, if one exists.
.SS "throughput"
.IX Subsection "throughput"
Returns a sum of speeds on all ports on the device.
.SH "ADDITIONAL METHODS"
.IX Header "ADDITIONAL METHODS"
.SS "is_pseudo"
.IX Subsection "is_pseudo"
Returns true if the vendor of the device is \*(L"netdisco\*(R".
.ie n .SS "has_layer( $number )"
.el .SS "has_layer( \f(CW$number\fP )"
.IX Subsection "has_layer( $number )"
Returns true if the device provided sysServices and supports the given layer.
.ie n .SS "renumber( $new_ip )"
.el .SS "renumber( \f(CW$new_ip\fP )"
.IX Subsection "renumber( $new_ip )"
Will update this device and all related database records to use the new \s-1IP\s0
\&\f(CW$new_ip\fR. Returns \f(CW\*(C`undef\*(C'\fR if \f(CW$new_ip\fR seems invalid, otherwise returns the
Device row object.
.SH "ADDITIONAL COLUMNS"
.IX Header "ADDITIONAL COLUMNS"
.SS "oui"
.IX Subsection "oui"
Returns the first half of the device \s-1MAC\s0 address.
.SS "port_count"
.IX Subsection "port_count"
Returns the number of ports on this device. Enable this
column by applying the \f(CW\*(C`with_port_count()\*(C'\fR modifier to \f(CW\*(C`search()\*(C'\fR.
.SS "uptime_age"
.IX Subsection "uptime_age"
Formatted version of the \f(CW\*(C`uptime\*(C'\fR field.
.PP
The format is in \*(L"X days/months/years\*(R" style, similar to:
.PP
.Vb 1
\& 1 year 4 months 05:46:00
.Ve
.SS "first_seen_stamp"
.IX Subsection "first_seen_stamp"
Formatted version of the \f(CW\*(C`creation\*(C'\fR field, accurate to the minute.
.PP
The format is somewhat like \s-1ISO 8601\s0 or \s-1RFC3339\s0 but without the middle \f(CW\*(C`T\*(C'\fR
between the date stamp and time stamp. That is:
.PP
.Vb 1
\& 2012\-02\-06 12:49
.Ve
.SS "last_discover_stamp"
.IX Subsection "last_discover_stamp"
Formatted version of the \f(CW\*(C`last_discover\*(C'\fR field, accurate to the minute.
.PP
The format is somewhat like \s-1ISO 8601\s0 or \s-1RFC3339\s0 but without the middle \f(CW\*(C`T\*(C'\fR
between the date stamp and time stamp. That is:
.PP
.Vb 1
\& 2012\-02\-06 12:49
.Ve
.SS "last_macsuck_stamp"
.IX Subsection "last_macsuck_stamp"
Formatted version of the \f(CW\*(C`last_macsuck\*(C'\fR field, accurate to the minute.
.PP
The format is somewhat like \s-1ISO 8601\s0 or \s-1RFC3339\s0 but without the middle \f(CW\*(C`T\*(C'\fR
between the date stamp and time stamp. That is:
.PP
.Vb 1
\& 2012\-02\-06 12:49
.Ve
.SS "last_arpnip_stamp"
.IX Subsection "last_arpnip_stamp"
Formatted version of the \f(CW\*(C`last_arpnip\*(C'\fR field, accurate to the minute.
.PP
The format is somewhat like \s-1ISO 8601\s0 or \s-1RFC3339\s0 but without the middle \f(CW\*(C`T\*(C'\fR
between the date stamp and time stamp. That is:
.PP
.Vb 1
\& 2012\-02\-06 12:49
.Ve
.SS "since_last_discover"
.IX Subsection "since_last_discover"
Number of seconds which have elapsed since the value of \f(CW\*(C`last_discover\*(C'\fR.
.SS "since_last_macsuck"
.IX Subsection "since_last_macsuck"
Number of seconds which have elapsed since the value of \f(CW\*(C`last_macsuck\*(C'\fR.
.SS "since_last_arpnip"
.IX Subsection "since_last_arpnip"
Number of seconds which have elapsed since the value of \f(CW\*(C`last_arpnip\*(C'\fR.
