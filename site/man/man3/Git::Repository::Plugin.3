.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Git::Repository::Plugin 3"
.TH Git::Repository::Plugin 3 "2019-08-31" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Git::Repository::Plugin \- Base class for Git::Repository plugins
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package Git::Repository::Plugin::Hello;
\&
\&    use Git::Repository::Plugin;
\&    our @ISA = qw( Git::Repository::Plugin );
\&
\&    sub _keywords { return qw( hello hello_gitdir ) }
\&
\&    sub hello        { return "Hello, git world!\en"; }
\&    sub hello_gitdir { return "Hello, " . $_[0]\->git_dir . "!\en"; }
\&
\&    1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Git::Repository::Plugin allows one to define new methods for
Git::Repository, that will be imported in the Git::Repository
namespace.
.PP
The \s-1SYNOPSIS\s0 provides a full example.
.PP
The documentation of Git::Repository describes how to load plugins
with all the methods they provide, or only a selection of them.
.SH "METHODS"
.IX Header "METHODS"
Git::Repository::Plugin provides a single method:
.SS "install"
.IX Subsection "install"
.Vb 1
\&    $plugin\->install( @keywords );
.Ve
.PP
Install all keywords provided in the Git::Repository namespace.
.PP
If called with an empty list, will install all available keywords.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
.SS "Adding methods to Git::Repository"
.IX Subsection "Adding methods to Git::Repository"
When creating a plugin, the new keywords (i.e. methods) that are added
by the plugin to Git::Repository must be returned by a \f(CW\*(C`_keywords()\*(C'\fR
method.
.SS "Adding attributes to Git::Repository"
.IX Subsection "Adding attributes to Git::Repository"
Git::Repository is a blessed hash reference.
.PP
If extra attributes are needed, the recommended name for the hash key (to
avoid name clashes between plugins) is \f(CW\*(C`_plugin_\f(CIname\f(CW_\f(CIattribute\f(CW\*(C'\fR,
where \fIname\fR is the plugin lowercase name, and \fIattribute\fR is the
attribute name.
.SH "AUTHOR"
.IX Header "AUTHOR"
Philippe Bruhat (BooK) <book@cpan.org>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to Todd Rinaldo, who wanted to add more methods to
Git::Repository, which made me look for a solution that would preserve
the minimalism of Git::Repository.
.PP
After a not-so-good design using \f(CW@ISA\fR (so Git::Repository would
\&\fIinherit\fR the extra methods), further discussions with Aristotle
Pagaltzis and a quick peek at Dancer's plugin management helped me
come up with the current design. Thank you Aristotle and the Dancer
team.
.PP
Further improvements to the plugin system proposed by Aristotle Pagaltzis.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2010\-2016 Philippe Bruhat (BooK), all rights reserved.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
