.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "QQ::weixin::work 3"
.TH QQ::weixin::work 3 "2020-03-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
QQ::weixin::work
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
腾讯企业微信\->服务端API接口文档
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
<https://work.weixin.qq.com/api/doc/90000/90135/90664>
.PP
服务端API开放了丰富的能力接口，开发者可以借助接口能力，实现企业服务及企业微信的集成。
.PP
支持的能力，通过目录导航可以快速预览，目录树按功能块聚合归类，如通讯录管理、消息推送等。
.SS "企业开发流程如下："
.IX Subsection "企业开发流程如下："
.Vb 1
\&    1.获取企业微信的CorpID和CorpSecret：企业微信管理员通过启用应用，获取CorpID和CorpSecret
\&
\&    2.开发对接相关接口：开发测试应用，对接企业微信接口
.Ve
.SH "权限说明"
.IX Header "权限说明"
每个应用有不同的secret，代表了对应用的不同权限
.SH "FUNCTION"
.IX Header "FUNCTION"
.SS "gettoken(corpid,corpsecrect);"
.IX Subsection "gettoken(corpid,corpsecrect);"
获取ACCESS_TOKEN
.PP
\fI\s-1SYNOPSIS\s0\fR
.IX Subsection "SYNOPSIS"
.PP
<https://work.weixin.qq.com/api/doc/90000/90135/91039>
.PP
\fI参数说明\fR
.IX Subsection "参数说明"
.PP
.Vb 3
\&    参数          必须  说明
\&    corpid      是   企业ID，获取方式参考：术语说明\-corpid L<https://work.weixin.qq.com/api/doc/90000/90135/91039#14953/corpid>
\&    corpsecret  是   应用的凭证密钥，获取方式参考：术语说明\-secret L<https://work.weixin.qq.com/api/doc/90000/90135/91039#14953/secret>
.Ve
.PP
\fI\s-1RETURN\s0 返回结果\fR
.IX Subsection "RETURN 返回结果"
.PP
.Vb 6
\&  {
\&    "errcode": 0,
\&    "errmsg": "ok",
\&    "access_token": "accesstoken000001",
\&    "expires_in": 7200
\&  }
.Ve
.PP
\s-1RETURN\s0 参数说明
.IX Subsection "RETURN 参数说明"
.PP
.Vb 5
\&    参数              说明
\&    errcode            出错返回码，为0表示成功，非0表示调用失败
\&    errmsg             返回码提示语
\&    access_token         获取到的凭证，最长为512字节
\&    expires_in     凭证的有效时间（秒）
.Ve
.PP
\fI注意事项\fR
.IX Subsection "注意事项"
.PP
.Vb 1
\&  开发者需要缓存access_token，用于后续接口的调用（注意：不能频繁调用gettoken接口，否则会受到频率拦截）。当access_token失效或过期时，需要重新获取。
\&
\&  access_token的有效期通过返回的expires_in来传达，正常情况下为7200秒（2小时），有效期内重复获取返回相同结果，过期后获取会返回新的access_token。
\&
\&  由于企业微信每个应用的access_token是彼此独立的，所以进行缓存时需要区分应用来进行存储。
\&
\&  access_token至少保留512字节的存储空间。
\&
\&  企业微信可能会出于运营需要，提前使access_token失效，开发者应实现access_token失效时重新获取的逻辑。
.Ve
.SS "getcallbackip(corpid,corpsecrect);"
.IX Subsection "getcallbackip(corpid,corpsecrect);"
获取企业微信服务器的ip段
.PP
\fI\s-1SYNOPSIS\s0\fR
.IX Subsection "SYNOPSIS"
.PP
<https://work.weixin.qq.com/api/doc/90000/90135/90930>
.PP
\fI参数说明\fR
.IX Subsection "参数说明"
.PP
.Vb 2
\&    参数          必须  说明
\&    access_token        是       调用接口凭证
.Ve
.PP
\fI\s-1RETURN\s0 返回结果\fR
.IX Subsection "RETURN 返回结果"
.PP
.Vb 8
\&  {
\&    "ip_list":[
\&      "182.254.11.176",
\&      "182.254.78.66"
\&      ],
\&      "errcode":0,
\&      "errmsg":"ok"
\&  }
.Ve
.PP
\s-1RETURN\s0 参数说明
.IX Subsection "RETURN 参数说明"
.PP
.Vb 4
\&    参数       类型       说明
\&    ip_list     StringArray     企业微信回调的IP段
\&    errcode     int     错误码，0表示成功，非0表示调用失败
\&    errmsg      string  错误信息，调用失败会有相关的错误信息返回
.Ve
.PP
\fI注意事项\fR
.IX Subsection "注意事项"
.PP
.Vb 1
\&  若调用失败，会返回errcode及errmsg（判断是否调用失败，根据errcode存在并且值非0）
\&
\&  根据errcode值非0，判断调用失败。以下是access_token过期的返回示例：
\&
\&  {
\&    "ip_list":[],
\&    "errcode":42001,
\&    "errmsg":"access_token expired, hint: [1576065934_28_e0fae07666aa64636023c1fa7e8f49a4], from ip: 9.30.0.138, more info at https://open.work.weixin.qq.com/devtool/query?e=42001"
\&  }
.Ve
