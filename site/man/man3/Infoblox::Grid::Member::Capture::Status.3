.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Member::Capture::Status 3"
.TH Infoblox::Grid::Member::Capture::Status 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Member::Capture::Status \- Traffic capture status object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You can retrieve the traffic capture status for a grid member via this object.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to be applied to a traffic capture status object.
.SS "Infoblox::Grid::Member\->traffic_capture( )"
.IX Subsection "Infoblox::Grid::Member->traffic_capture( )"
.RS 4
Use this function to retrieve the traffic capture status for the Grid Member. See Infoblox::Grid::Member\->\fBtraffic_capture()\fR for parameters and return values. Note that the member object must be retrieved from the appliance in order for the traffic capture method to be available.
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that explain a grid member's traffic capture status. All members are read-only.
.SS "file_exists( )"
.IX Subsection "file_exists( )"
.RS 4
Use this method to retrieve a traffic capture file if it exists for the member. If the file exists, it can be downloaded using the export_data method in Infoblox::Session.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value, which can be \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&   #Get file_exists
\&   $exists = capstatus\->file_exists();
.Ve
.RE
.RS 4
.RE
.SS "file_size( )"
.IX Subsection "file_size( )"
.RS 4
Use this method to retrieve the size of the traffic capture file for the member.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value, which is the file size in bytes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&   #Get the file_size
\&   $size = capstatus\->file_size();
.Ve
.RE
.RS 4
.RE
.SS "status( )"
.IX Subsection "status( )"
.RS 4
Use this method to retrieve the status of the capture operation for the grid member.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value, which can be \*(L"\s-1RUNNING\*(R", \*(L"STOPPED\*(R"\s0 or \*(L"\s-1UNKNOWN\*(R".\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&   #Get the status
\&   $status = capstatus\->status();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a capture status object. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to traffic capture object operations\fR
.PP
.Vb 1
\& #PROGRAM STARTS: Include all the modules that will be used
\&
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Start traffic capture for a member\fR
.PP
.Vb 5
\& # Get the grid member object.
\& my $object = $session\->get(
\&     object => "Infoblox::Grid::Member",
\&     name => "infoblox.localdomain",
\& );
\&
\& unless ($object) {
\&       die("get grid member failed: ",
\&       $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "grid member get successful\en";
\&
\& my $capture = Infoblox::Grid::Member::Capture::Status\->new(
\&                                                             action => \*(AqSTART\*(Aq,
\&                                                             interface => \*(AqALL\*(Aq,
\&                                                             seconds_to_run => 2,
\&                                                            );
\& unless ($object\->traffic_capture($capture)) {
\&       die("traffic capture failed: ",
\&       $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "traffic capture started\en";
\&
\& my $capstatus = $object\->traffic_capture();
\&
\& print "The capture is " . $capstatus\->status() . "\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Grid::Member
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
