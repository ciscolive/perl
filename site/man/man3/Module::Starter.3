.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Starter 3"
.TH Module::Starter 3 "2020-09-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Starter \- a simple starter kit for any module
.SH "VERSION"
.IX Header "VERSION"
version 1.77
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Nothing in here is meant for public consumption.  Use module-starter
from the command line.
.PP
.Vb 2
\&    module\-starter \-\-module=Foo::Bar,Foo::Bat \e
\&        \-\-author="Andy Lester" \-\-email=andy@petdance.com
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the core module for Module::Starter.  If you're not looking to extend
or alter the behavior of this module, you probably want to look at
module-starter instead.
.PP
Module::Starter is used to create a skeletal \s-1CPAN\s0 distribution, including basic
builder scripts, tests, documentation, and module code.  This is done through
just one method, \f(CW\*(C`create_distro\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.SS "Module::Starter\->create_distro(%args)"
.IX Subsection "Module::Starter->create_distro(%args)"
\&\f(CW\*(C`create_distro\*(C'\fR is the only method you should need to use from outside this
module; all the other methods are called internally by this one.
.PP
This method creates orchestrates all the work; it creates distribution and
populates it with the all the requires files.
.PP
It takes a hash of params, as follows:
.PP
.Vb 6
\&    distro       => $distroname,      # distribution name (defaults to first module)
\&    modules      => [ module names ], # modules to create in distro
\&    dir          => $dirname,         # directory in which to build distro
\&    builder      => \*(AqModule::Build\*(Aq,  # defaults to ExtUtils::MakeMaker
\&                                      # or specify more than one builder in an
\&                                      # arrayref
\&
\&    license      => $license,  # type of license; defaults to \*(Aqartistic2\*(Aq
\&    author       => $author,   # author\*(Aqs full name (taken from C<getpwuid> if not provided)
\&    email        => $email,    # author\*(Aqs email address (taken from C<EMAIL> if not provided)
\&    ignores_type => $type,     # ignores file type (\*(Aqgeneric\*(Aq, \*(Aqcvs\*(Aq, \*(Aqgit\*(Aq, \*(Aqhg\*(Aq, \*(Aqmanifest\*(Aq )
\&    fatalize     => $fatalize, # generate code that makes warnings fatal
\&
\&    verbose      => $verbose,  # bool: print progress messages; defaults to 0
\&    force        => $force     # bool: overwrite existing files; defaults to 0
.Ve
.PP
The ignores_type is a new feature that allows one to create SCM-specific ignore files.
These are the mappings:
.PP
.Vb 5
\&    ignores_type => \*(Aqgeneric\*(Aq  # default, creates \*(Aqignore.txt\*(Aq
\&    ignores_type => \*(Aqcvs\*(Aq      # creates .cvsignore
\&    ignores_type => \*(Aqgit\*(Aq      # creates .gitignore
\&    ignores_type => \*(Aqhg\*(Aq       # creates .hgignore
\&    ignores_type => \*(Aqmanifest\*(Aq # creates MANIFEST.SKIP
.Ve
.PP
It is also possible to provide an array ref with multiple types wanted:
.PP
.Vb 1
\&    ignores_type => [ \*(Aqgit\*(Aq, \*(Aqmanifest\*(Aq ]
.Ve
.SH "PLUGINS"
.IX Header "PLUGINS"
Module::Starter itself doesn't actually do anything.  It must load plugins that
implement \f(CW\*(C`create_distro\*(C'\fR and other methods.  This is done by the class's \f(CW\*(C`import\*(C'\fR
routine, which accepts a list of plugins to be loaded, in order.
.PP
For more information, refer to Module::Starter::Plugin.
.SH "AUTHORS"
.IX Header "AUTHORS"
Dan Book, \f(CW\*(C`<dbook at cpan.org>\*(C'\fR
.PP
Sawyer X, \f(CW\*(C`<xsawyerx at cpan.org>\*(C'\fR
.PP
Andy Lester, \f(CW\*(C`<petdance at cpan.org>\*(C'\fR
.PP
Ricardo Signes, \f(CW\*(C`<rjbs at cpan.org>\*(C'\fR
.PP
C.J. Adams-Collier, \f(CW\*(C`<cjac at colliertech.org>\*(C'\fR
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Module::Starter
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
Source code at GitHub
.Sp
<https://github.com/xsawyerx/module\-starter>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/dist/Module\-Starter>
.IP "\(bu" 4
GitHub issue tracker
.Sp
<https://github.com/xsawyerx/module\-starter/issues>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<https://metacpan.org/release/Module\-Starter>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to the bugtracker for this project
on GitHub at: <https://github.com/xsawyerx/module\-starter/issues>. I will be
notified, and then you'll automatically be notified of progress on your bug
as I make changes.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2005\-2009 Andy Lester, Ricardo Signes and C.J. Adams-Collier,
All Rights Reserved.
.PP
Copyright 2010 Sawyer X, All Rights Reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "mbtiny" 4
.IX Item "mbtiny"
Minimal authoring tool to create and manage distributions using
Module::Build::Tiny as an installer.
.IP "Dist::Milla" 4
.IX Item "Dist::Milla"
Easy to use and powerful authoring tool using Dist::Zilla to create and
manage distributions.
.IP "Minilla" 4
.IX Item "Minilla"
Authoring tool similar to Dist::Milla but without using Dist::Zilla.
.IP "Dist::Zilla" 4
.IX Item "Dist::Zilla"
Very complex, fully pluggable and customizable distribution builder.
