.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::FixedAddrTemplate 3"
.TH Infoblox::DHCP::FixedAddrTemplate 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::FixedAddrTemplate \- DHCP Fixed Address template object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A fixed address template works as a 'cookie cutter' and can be used to create a real fixed address object in a quick and consistant way.
A Fixed address object created from a fixed address template will inherit most properties defined in fixed address template object so most of the fixed address template properties are the same as the  fixed address object properties.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $fixed_addr_template = Infoblox::DHCP::FixedAddrTemplate \-> new(
\&       name                             => $string,                     #Required
\&       number_of_addresses              => $num | undef,                #Optional / Default is undefined
\&       offset                           => $num | undef,                #Optional / Default is undefined
\&       bootfile                         => $filename | undef,           #Optional / Default is undefined
\&       bootserver                       => $ipv4addr | $fqdn | undef,   #Optional / Default is undefined
\&       comment                          => $string,                     #Optional / Default is empty
\&       deny_bootp                       => "true" | "false" | undef,    #Optional / Default is undefined
\&       enable_ddns                      => "true" | "false",            #Optional / Default is false
\&       ddns_domainname                  => $string | undef,             #Optional / Default is undefined
\&       ddns_hostname                    => $string | undef,             #Optional / Default is undefined
\&       extattrs                         => { $string => $extattr, ... },      #Optional / Default is undefined
\&       extensible_attributes            => { $string => $string | $num, $string => [ $string | $num, ... ], ... } #Optional / Default is undefined
\&
\&       ignore_dhcp_option_list_request  => "true" | "false" | undef,    #Optional / Default is false
\&       nextserver                       => $ipv4addr | $fqdn | undef,   #Optional / Default is undefined
\&       options                          => [$option1, $option2, ...]    #Optional / Default is empty
\&       override_ddns_domainname         => "true" | "false",            #Optional / Default value is "false"
\&       pxe_lease_time                   => $time,                       #Optional / Default is empty
\&       logic_filters                    => [ $filter_name | $filter_obj, ...], # Optional / Default is undefined
\&       override_logic_filters           => "true\*(Aq | \*(Aqfalse",                   # Optional / Default value is "false"
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to be applied to a \s-1DHCP\s0 fixed address template  object.
.SS "Infoblox::DHCP::NetworkTemplate\-> fixed_address_templates( )"
.IX Subsection "Infoblox::DHCP::NetworkTemplate-> fixed_address_templates( )"
.RS 4
Use this function to specify a fixed address template at network template on the Infoblox appliance. See Infoblox::DHCP::NetworkTemplate\->\fBfixed_address_templates()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\&  #Create the Network Template object with fixed address template
\&   my $template = Infoblox::DHCP::Template\->new(
\&     name                    => "custom_fa_template"
\&   );
\&   my $network_template = Infoblox::DHCP::NetworkTemplate\->new(
\&     name                    => "custom_network_template",
\&     comment                 => "add network",
\&     fixed_address_templates => [$template]
\&   );
.Ve
.RE
.RS 4
.RE
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that can be applied to a \s-1DHCP\s0 Fixed Address template object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP\s0 Fixed Address template object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\&     #Construct a DHCP Fixed Address template object
\&     my $fixed_addr_template = Infoblox::DHCP::FixedAddrTemplate\->new(
\&            "name"                  => "custom_fa_template",
\&            "offset"                => "10",
\&            "number_of_addresses"   => "1",
\&            "bootfile"              => "bootfile",
\&            "bootserver"            => "bootserver.com",
\&            "comment"               => "add fixed address",
\&            "deny_bootp"            => "false",
\&            "enable_ddns"           => "false",
\&            "nextserver"            => "3.3.3.3",
\&            "options"               => [ $option1,  $option2 ],
\&            "pxe_lease_time"        => "3600",
\&     );
\&
\&     #Submit for addition
\&     my $response = $session\->add($fixed_addr_template);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR  for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\&  Apply the following attributes to get a specific DHCP Fixed Address template object:
\&
\&  name \- Optional. The name of the Fixed address template.
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\&     #Get DHCP Fixed Address template object through the session
\&     my @retrieved_objs = $session\->get(
\&         object => "Infoblox::DHCP::FixedAddrTemplate",
\&         name   => "custom_fa_template",
\&     );
\&
\&     my @retrieved_objs = $session\->get(
\&       object                => "Infoblox::DHCP::FixedAddrTemplate",
\&       extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\&     );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR  for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\&  Apply the following attributes to search for a DHCP Fixed Address template object:
\&
\&  name    \- Optional. The name of the fixed address template (regular expression).
\&  comment \- Optional. The comment of the fixed address template (regular expression).
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 6
\&     #Search DHCP Fixed Address template object through the session
\&     my @retrieved_objs = $session\->search(
\&         object  => "Infoblox::DHCP::FixedAddrTemplate",
\&         name    => "custom_fa_template",
\&         comment => ".*",
\&     );
\&
\&    #Search for DHCP Fixed Address template objects defining "Santa Clara" for "Site" extensible attribute
\&    my @retrieved_objs = $session\->search(
\&        object                => "Infoblox::DHCP::FixedAddrTemplate",
\&        extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\&    );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 Fixed Address template object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Use method to modify the pxe_lease_time
\&     $fixed_addr_templateess\->pxe_lease_time("1234");
\&     #Submit modification
\&     my $response = $session\->modify( $fixed_addr_templateess );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1DHCP\s0 Fixed Address template object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR  for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR to retrieve the specific \s-1DHCP\s0 Fixed Address template object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\&     #Get DHCP Fixed Address template object through the session
\&     my @retrieved_objs = $session\->get(
\&         object => "Infoblox::DHCP::FixedAddrTemplate",
\&         name   => "custom_fa_template",
\&     );
\&     #Find the desired object from the retrieved list.
\&     my $desired_fixed_addr_template = $retrieved_objs[0];
\&     #Submit for removal
\&     my $response = $session\->remove( $desired_fixed_addr_template );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to set and retrieve the attribute values of a \s-1DHCP\s0 Fixed Address template object.
.SS "bootfile( )"
.IX Subsection "bootfile( )"
.RS 4
Use this method to set or retrieve the bootfile value of a \s-1DHCP\s0 Fixed Address template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::FixedAddrTemplate\->\fBbootserver()\fR and Infoblox::DHCP::FixedAddrTemplate\->\fBnextserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the file that the client must download. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     #Get bootfile
\&     my $bootfile = $fixed_addr_template\->bootfile();
\&     #Modify bootfile
\&     $fixed_addr_template\->bootfile("boot_file");
\&     #Un\-override bootfile
\&     $fixed_addr_template\->bootfile(undef);
.Ve
.RE
.RS 4
.RE
.SS "bootserver( )"
.IX Subsection "bootserver( )"
.RS 4
Use this method to set or retrieve the bootserver of a \s-1DHCP\s0 Fixed Address template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::FixedAddrTemplate\->\fBbootfile()\fR and Infoblox::DHCP::FixedAddrTemplate\->\fBnextserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The boot server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A boot server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     #Get bootserver
\&     my $bootserver = $fixed_addr_template\->bootserver();
\&     #Modify bootserver
\&     $fixed_addr_template\->bootserver("bootserver2.com");
\&     #Un\-override bootserver
\&     $fixed_addr_template\->bootserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment of a \s-1DHCP\s0 Fixed Address template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get comment
\&     my $comment = $fixed_addr_template\->comment();
\&     #Modify comment
\&     $fixed_addr_template\->comment("Modified DHCP Fixed Address template object comment");
.Ve
.RE
.RS 4
.RE
.SS "deny_bootp( )"
.IX Subsection "deny_bootp( )"
.RS 4
Use this method to set or retrieve the deny_bootp flag of a \s-1DHCP\s0 Fixed Address template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the deny_bootp flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined which indicates that this attribute inherits the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get deny_bootp
\&     my $deny_bootp = $fixed_addr_template\->deny_bootp();
\&     #Modify deny_bootp
\&     $fixed_addr_template\->deny_bootp("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_ddns( )"
.IX Subsection "enable_ddns( )"
.RS 4
Use this method to set or retrieve the enable_ddns flag of a \s-1DHCP\s0 Fixed Address template object.
If enable_ddns value is specified as \*(L"true\*(R", then the A and \s-1PTR\s0 records corresponding to the Fixed Address template object will be placed on the \s-1DNS\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_ddns flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get enable_ddns
\&     my $enable_ddns = $fixed_addr_template\->enable_ddns();
\&     #Modify enable_ddns
\&     $fixed_addr_template\->enable_ddns("true");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Fixed Address template object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $fixed_addr_template\->extattrs();
\& #Modify extattrs
\& $fixed_addr_template\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Fixed Address template object
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $fixed_addr_template\->extensible_attributes();
\& #Modify extensible attributes
\& $fixed_addr_template\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "ddns_domainname( )"
.IX Subsection "ddns_domainname( )"
.RS 4
Use this method to set or retrieve the ddns_domainname value of a \s-1DHCP\s0 Fixed Address template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_domainname method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_ddns_domainname attribute to \*(L"false\*(R".
.Sp
Note that when ddns_domainname is set to a defined value and override_dddns_domainname is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); will set override_ddns_domainname to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); will result in override_ddns_domainname=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired name for the dynamic \s-1DNS\s0 domain name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ddns_domainname
\& my $ddns_domainname = $fixed_addr\->ddns_domainname();
\& #Modify ddns_domainname
\& $fixed_addr\->ddns_domainname("test_domain.com");
.Ve
.RE
.RS 4
.RE
.SS "ddns_hostname( )"
.IX Subsection "ddns_hostname( )"
.RS 4
Use this method to set or retrieve the ddns_hostname value of a \s-1DHCP\s0 Fixed Address template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired name for the dynamic \s-1DNS\s0 host name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ddns_hostname
\& my $ddns_hostname = $fixed_addr\->ddns_hostname();
\& #Modify ddns_hostname
\& $fixed_addr\->ddns_hostname("test_host");
.Ve
.RE
.RS 4
.RE
.SS "ignore_dhcp_option_list_request( )"
.IX Subsection "ignore_dhcp_option_list_request( )"
.RS 4
Use this method to set or retrieve the ignore_dhcp_option_list_request flag of a \s-1DHCP\s0 fixed address teplate object. If this flag is set to false all the defined \s-1DHCP\s0 options will be returned to the client. This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the ignore_dhcp_option_list_request flag or \*(L"false\*(R" to deactivate it. The default value is false.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ignore_dhcp_option_list_request
\& my $ignore_dhcp_option_list_request = $fixed_addr_template\->ignore_dhcp_option_list_request();
\& # Modify ignore_dhcp_option_list_request
\& $fixed_addr_template\->ignore_dhcp_option_list_request("true");
\& # Un\-override ignore_dhcp_option_list_request
\& $fixed_addr_template\->ignore_dhcp_option_list_request(undef);
.Ve
.RE
.RS 4
.RE
.SS "logic_filters( )"
.IX Subsection "logic_filters( )"
.RS 4
Use this method to set or retrieve all the logic (ordered) filters associated with the \s-1DHCP\s0 Fixed Address Template.
.Sp
Filters are used to screen address assignments for the \s-1DHCP\s0 Fixed Address Template if the addresses are to be assigned to specific hosts.
.Sp
Setting this method to a defined value implicitly sets the override_logic_filters method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_logic_filters attribute to \*(L"false\*(R".
.Sp
Note that when logic_filters is set to a defined value and override_dlogic_filters is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->logic_filters($filters); \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); will set override_logic_filters to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); \f(CW$object\fR\->logic_filters($filters); will result in override_logic_filters=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains either the Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC, Infoblox::DHCP::Filter::Option objects or the names of the corresponding filters. The filters in the list must satisfy the following conditions:
.RS 4
.IP "Filter name must be globally unique." 4
.IX Item "Filter name must be globally unique."
.PD 0
.IP "Filters without expressions must be at the end of the list." 4
.IX Item "Filters without expressions must be at the end of the list."
.IP "The filters should not be disabled." 4
.IX Item "The filters should not be disabled."
.RE
.RS 4
.PD
.Sp
The default value of the parameter is undefined.
.RE
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get logic_filters
\& my $ref_logic_filters = $fixed_addr_template\->logic_filters();
\& #Modify logic_filters
\& $fixed_addr_template\->logic_filters(["filter_1","filter_2",$exl1]); #$exl1 is an Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC or Infoblox::DHCP::Filter::Option object.
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of a \s-1DHCP\s0 Fixed Address template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Name of the fixed address template in string format with a maximum of 64 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get name
\&     my $name = $fixed_address_template\->name();
\&     #Modify name
\&     $fixed_address_template\->name("custom_fa_template");
.Ve
.RE
.RS 4
.RE
.SS "nextserver( )"
.IX Subsection "nextserver( )"
.RS 4
Use this method to set or retrieve the nextserver value of a \s-1DHCP\s0 Fixed Address template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::FixedAddrTemplate\->\fBbootfile()\fR and Infoblox::DHCP::FixedAddrTemplate\->\fBbootserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The next server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A next server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     #Get nextserver
\&     my $nextserver = $fixed_addr_template\->nextserver();
\&     #Modify nextserver
\&     $fixed_addr_template\->nextserver("3.3.3.4");
\&     #Un\-override nextserver
\&     $fixed_addr_template\->nextserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "number_of_addresses( )"
.IX Subsection "number_of_addresses( )"
.RS 4
Use this method to set or retrieve the number of addresses in a \s-1DHCP\s0 Fixed Address template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The number of addresses in this fixed address template.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get number_of_addresses
\&     my $number_of_addresses = $fixed_address_template\-> number_of_addresses();
\&     #Modify number_of_addresses
\&     $fixed_address_template\->number_of_addresses("10");
.Ve
.RE
.RS 4
.RE
.SS "offset( )"
.IX Subsection "offset( )"
.RS 4
Use this method to set or retrieve the address offset of a Fixed Address template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The address offset of this fixed address template. The offset is calculated from the start address of network template to which the fixed address template is assigned to. For example, if offset is set to 10 and number_of_addresses is set to 10, and network is set to 10.0.0.0/8, then there will be 10 fixed address object created and start address will be 10.0.0.10 and end address will be 10.0.0.20.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get offset
\&     my $offset = $fixed_address_template\->offset();
\&     #Modify offset
\&     $fixed_address_template\->offset("10");
.Ve
.RE
.RS 4
.RE
.SS "options( )"
.IX Subsection "options( )"
.RS 4
Use this method to set or retrieve the options of a \s-1DHCP\s0 Fixed Address template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
See Infoblox::DHCP::Option for parameters and methods available for this object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Options describe network configuration settings and various services available on the network. These options occur as variable-length fields at the end of \s-1DHCP\s0 messages.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get options
\&     my $options = $fixed_addr_template\->options();
\&     #Modify options
\&     $fixed_addr_template\->options([$option1, $option2]);
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_domainname( )"
.IX Subsection "override_ddns_domainname( )"
.RS 4
The override_ddns_domainname attribute controls whether the ddns_domainname value in the \s-1DHCP\s0 Fixed Address is used, instead of the grid default.
.Sp
The override_ddns_domainname attribute can be specified explicitly. It is also set implicitly when ddns_domainname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for ddns_domainname. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for ddns_domainname.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_domainname
\&    my $override_ddns_domainname=$fixed_addr_template\->override_ddns_domainname( );
\&    #Modifying override_ddns_domainname
\&    $fixed_addr_template\->override_ddns_domainname("true");
.Ve
.RE
.RS 4
.RE
.SS "override_logic_filters( )"
.IX Subsection "override_logic_filters( )"
.RS 4
The override_logic_filters attribute controls whether the logic_filters value of the \s-1DHCP\s0 Fixed Address Template is used, instead of the Grid default.
.Sp
The override_logic_filters attribute can be specified explicitly. It is also set implicitly when logic_filters is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for logic_filters. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for logic_filters.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_logic_filters
\& my $override_logic_filters=$fixed_addr_template\->override_logic_filters( );
\& #Modifying override_logic_filters
\& $fixed_addr_template\->override_logic_filters("true");
.Ve
.RE
.RS 4
.RE
.SS "pxe_lease_time( )"
.IX Subsection "pxe_lease_time( )"
.RS 4
Use this method to set or retrieve the pxe_lease_time value of a \s-1DHCP\s0 Fixed Address template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter appropriate values in the Days, Hours, Mins and Secs fields. User can specify the duration of time it takes a host to connect to a boot server, such as a \s-1TFTP\s0 server, and download the file it needs to boot.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get pxe_lease_time
\&     my $pxe_lease_time = $fixed_addr_template\->pxe_lease_time();
\&     #Modify pxe_lease_time
\&     $fixed_addr_template\->pxe_lease_time("369");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, get, modify, and remove. Also, this sample includes error handling for the operations.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& my $option1 = Infoblox::DHCP::Option\->new(
\&                                           "name"  => "fqdn",
\&                                           "value" => "mydomain.com"
\&                                          );
\& unless($option1) {
\&      die("Construct option1 object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "option1 object created successfully\en";
\&
\& my $option2 = Infoblox::DHCP::Option\->new(
\&                                           "name"     => "merit\-dump",
\&                                            "value"   => "sometextdump",
\&                                          );
\& unless($option2) {
\&      die("Construct option2 object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "option2 object created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 Fixed Address template object\fR
.PP
.Vb 10
\& #Create a DHCP Fixed Address template object
\& my $fixed_addr_template = Infoblox::DHCP::FixedAddrTemplate\->new(
\&     "name"                  => "custom_fa_template",
\&     "offset"                => "10",
\&     "number_of_addresses"   => "1",
\&     "comment"               => "add fixed address template",
\&     "enable_ddns"           => "TRUE",
\&     "ddns_domainname"       => "test_domain.com",
\&     "ddns_hostname"         => "test_host",
\&     "pxe_lease_time"        => "3600",
\&     "bootserver"            => "someserver.com",
\&     "nextserver"            => "3.3.3.3",
\&     "bootfile"              => "bootfile.com",
\&     "options"               => [ $option1, $option2 ],
\& );
\& unless($fixed_addr_template) {
\&      die("Construct Fixed Address template failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Fixed Address template object created successfully\en";
\&
\& #Verify if the DHCP Fixed Address templateexists in the Infoblox appliance
\& my $object = $session\->get(
\&        object => "Infoblox::DHCP::FixedAddrTemplate",
\&        name   => "custom_fa_template"
\& );
\&
\& unless ($object) {
\&    print "Fixed Address template does not exist on server, safe to add the fixed address template\en";
\&    $session\->add($fixed_addr_template)
\&       or die("Add Fixed Address template failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "DHCP Fixed Address template added successfully\en";
.Ve
.PP
\&\fB #Search a \s-1DHCP\s0 Fixed Address template object\fR
.PP
.Vb 6
\& #Search DHCP Fixed Address template object through the session
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DHCP::FixedAddrTemplate",
\&     name   => "custom_fa_template",
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Search Fixed Address template object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Fixed Address template object found at least 1 matching entry\en";
.Ve
.PP
\&\fB #Get and modify a \s-1DHCP\s0 Fixed Address template object\fR
.PP
.Vb 6
\& #Get DHCP Fixed Address template object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::FixedAddrTemplate",
\&     name   => "custom_fa_template",
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Get Fixed Address template object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Fixed Address template object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the obtained Fixed Address template object
\& $object\->pxe_lease_time("1234");
\&
\& #Un\-override bootfile
\& $object\->bootfile(undef);
\&
\& #Un\-override bootserver
\& $object\->bootserver(undef);
\&
\& #Un\-override nextserver
\& $object\->nextserver(undef);
\&
\& #Apply the changes
\& $session\->modify($object)
\&   or die("Modify Fixed Address template failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP Fixed Address template added successfully\en";
.Ve
.PP
\&\fB #Create the Network Template object with fixed address template\fR
.PP
.Vb 3
\& my $template = Infoblox::DHCP::Template\->new(
\&     name => "custom_fa_template",
\& );
\&
\& my $network_template = Infoblox::DHCP::NetworkTemplate\->new(
\&     name    => "custom_network_template",
\&     comment => "add network",
\&     fixed_address_templates => [$template]
\& );
\&
\& unless($network_template) {
\&        die("Construct Network template object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& print "Network template object created successfully\en";
\&
\& #Add the Network template object into the Infoblox appliance through a session
\& my $resp = $session\->add($network_template)
\& or die("Add Network object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network template object added to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Remove a Fixed Address template object\fR
.PP
.Vb 5
\& #Remove a Network Template object
\& $session\->remove($network_template)
\&     or die("Remove Network Template template object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Network Template object removed successfully \en";
\&
\& #Get Fixed Address template object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::FixedAddrTemplate",
\&     name   => "custom_fa_template",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Fixed Address template object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Fixed Address template object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove Fixed Address template object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Fixed Address template object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR,  Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::DHCP::NetworkTemplate, Infoblox::DHCP::RangeTemplate,Infoblox::DHCP::Template,Infoblox::Session, Infoblox::DHCP::Option
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
