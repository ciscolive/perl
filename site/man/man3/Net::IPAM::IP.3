.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::IPAM::IP 3"
.TH Net::IPAM::IP 3 "2020-08-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::IPAM::IP \- A library for reading, formatting, sorting and converting IP\-addresses.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::IPAM::IP;
\&
\&  # parse and normalize
\&  $ip1 = Net::IPAM::IP\->new(\*(Aq1.2.3.4\*(Aq) // die \*(Aqwrong format,\*(Aq;
\&  $ip2 = Net::IPAM::IP\->new(\*(Aqfe80::1\*(Aq) // die \*(Aqwrong format,\*(Aq;
\&
\&  $ip3 = $ip2\->incr // die \*(Aqoverflow,\*(Aq;
\&
\&  say $ip1;    # 1.2.3.4
\&  say $ip2;    # fe80::1
\&  say $ip3;    # fe80::2
\&
\&  $ip3 = $ip2\->decr // die \*(Aqunderflow,\*(Aq;
\&
\&  say $ip1;    # 1.2.3.4
\&  say $ip2;    # fe80::1
\&  say $ip3;    # fe80::0
\&
\&  say $ip1\->cmp($ip2);    # \-1
\&
\&  say $ip2\->expand;       # fe80:0000:0000:0000:0000:0000:0000:0001
\&  say $ip2\->reverse;      # 1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f
\&
\&  $ip = Net::IPAM::IP\->new_from_bytes( pack( \*(AqC4\*(Aq, 192,    168,   0, 1 ) );                 # 192.168.0.1
\&  $ip = Net::IPAM::IP\->new_from_bytes( pack( \*(Aqn8\*(Aq, 0x2001, 0xdb8, 0, 0, 0, 0, 0, 1, ) );    # 2001:db8::1
\&
\&  @ips = Net::IPAM::IP\->getaddrs(\*(Aqdns.google.\*(Aq);
\&  say "@ips";  #  8.8.8.8 8.8.4.4 2001:4860:4860::8844 2001:4860:4860::8888
.Ve
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  $ip = Net::IPAM::IP\->new("::1");
.Ve
.PP
Parse the input string as IPv4/IPv6 address and returns the \s-1IP\s0 address object.
.PP
IPv4\-mapped\-IPv6 addresses are normalized and sorted as IPv4 addresses.
.PP
.Vb 1
\&  ::ffff:1.2.3.4    => 1.2.3.4
.Ve
.PP
Returns undef on illegal input.
.SS "new_from_bytes"
.IX Subsection "new_from_bytes"
.Vb 1
\&  $ip = Net::IPAM::IP\->new_from_bytes("\ex0a\ex00\ex00\ex01")
.Ve
.PP
Parse the input as packed IPv4/IPv6/IPv4\-mapped\-IPv6 address and returns the \s-1IP\s0 address object.
.PP
Croaks on illegal input.
.PP
Can be used for cloning the object:
.PP
.Vb 1
\&  $clone = $obj\->new_from_bytes($obj\->bytes);
.Ve
.SS "getaddrs($name, [$error_cb])"
.IX Subsection "getaddrs($name, [$error_cb])"
Returns a list of ip objects for a given \f(CW$name\fR or undef if there is no \s-1RR\s0 record for \f(CW$name\fR.
.PP
.Vb 2
\&  my @ips = Net::IPAM::IP\->getaddrs(\*(Aqdns.google.\*(Aq);
\&  say "@ips";  #  8.8.8.8 8.8.4.4 2001:4860:4860::8844 2001:4860:4860::8888
.Ve
.PP
\&\*(L"getaddrs\*(R" calls the Socket function \f(CW\*(C`getaddrinfo()\*(C'\fR under the hood.
.PP
With no error callback \*(L"getaddrs\*(R" just calls \f(CW\*(C`carp()\*(C'\fR with underlying Socket errors.
.PP
For granular error handling use your own error callback:
.PP
.Vb 5
\&  my $my_error_cb = sub {
\&    my $error = shift;
\&    # check the $error and do what you want
\&    ...
\&  }
\&
\&  my @ips = Net::IPAM::IP\->getaddrs( $name, $my_error_cb );
.Ve
.PP
or shut up the default error handler with:
.PP
.Vb 1
\&  my @ips = Net::IPAM::IP\->getaddrs( $name, sub { } );
.Ve
.PP
\&\s-1ANNOTATION:\s0 This constructor could also be named \f(CW\*(C`new_from_name\*(C'\fR but it behaves differently
because it returns a \fBlist\fR of objects and supports an optional argument as error callback,
reporting underlying Socket errors.
.SH "METHODS"
.IX Header "METHODS"
Net::IPAM::IP implements the following methods:
.SS "cmp"
.IX Subsection "cmp"
Compare \s-1IP\s0 objects, returns \-1, 0, +1
.PP
.Vb 1
\&  $this\->cmp($other)
\&
\&  @sorted_ips = sort { $a\->cmp($b) } @unsorted_ips;
.Ve
.PP
Fast bytewise lexical comparison of the binary representation in network byte order.
.PP
IPv4 addresses are \fBalways\fR treated as smaller than IPv6 addresses (::ffff:0.0.0.0 < ::)
.SS "version"
.IX Subsection "version"
.Vb 1
\&  $v = Net::IPAM::IP\->new(\*(Aqfe80::1\*(Aq)\->version    # 6
.Ve
.PP
Returns 4 or 6.
.SS "to_string"
.IX Subsection "to_string"
Returns the input string in canonical form.
.PP
.Vb 3
\&  lower case hexadecimal characters
\&  zero compression
\&  remove leading zeros
\&
\&  say Net::IPAM::IP\->new(\*(AqFe80::0001\*(Aq)\->to_string;  # fe80::1
.Ve
.PP
Stringification is overloaded with \*(L"to_string\*(R"
.PP
.Vb 2
\&  my $ip = Net::IPAM::IP\->new(\*(AqFe80::0001\*(Aq) // die \*(Aqwrong format\*(Aq;
\&  say $ip; # fe80::1
.Ve
.SS "incr"
.IX Subsection "incr"
Returns the next \s-1IP\s0 address, returns undef on overflow.
.PP
.Vb 2
\&  $next_ip = Net::IPAM::IP\->new(\*(Aqfe80::1\*(Aq)\->incr // die \*(Aqoverflow,\*(Aq;
\&  say $next_ip;   # fe80::2
.Ve
.SS "decr"
.IX Subsection "decr"
Returns the previous \s-1IP\s0 address, returns undef on underflow.
.PP
.Vb 2
\&  $prev_ip = Net::IPAM::IP\->new(\*(Aqfe80::1\*(Aq)\->decr // die \*(Aqoverflow,\*(Aq;
\&  say $prev_ip;   # fe80::
.Ve
.SS "expand"
.IX Subsection "expand"
Expand \s-1IP\s0 address into canonical form, useful for \f(CW\*(C`grep\*(C'\fR, aligned output and lexical \f(CW\*(C`sort\*(C'\fR
.PP
.Vb 2
\&        Net::IPAM::IP\->new(\*(Aq1.2.3.4\*(Aq)\->expand;   # \*(Aq001.002.003.004\*(Aq
\&        Net::IPAM::IP\->new(\*(Aqfe80::1\*(Aq)\->expand;   # \*(Aqfe80:0000:0000:0000:0000:0000:0000:0001\*(Aq
.Ve
.SS "reverse"
.IX Subsection "reverse"
Reverse \s-1IP\s0 address, needed for \s-1PTR\s0 entries in \s-1DNS\s0 zone files.
.PP
.Vb 2
\& Net::IPAM::IP\->new(\*(Aqfe80::1\*(Aq)\->reverse; # \*(Aq1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f\*(Aq
\& Net::IPAM::IP\->new(\*(Aq1.2.3.4\*(Aq)\->reverse; # \*(Aq4.3.2.1\*(Aq
.Ve
.SS "getname([$error_cb])"
.IX Subsection "getname([$error_cb])"
Returns the \s-1DNS\s0 name for the ip object or undef if there is no \s-1PTR RR.\s0
.PP
.Vb 1
\&  say Net::IPAM::IP\->new(\*(Aq2001:4860:4860::8888\*(Aq)\->getname;   # dns.google.
.Ve
.PP
\&\*(L"getname\*(R" calls the Socket function \f(CW\*(C`getnameinfo()\*(C'\fR under the hood.
.PP
With no error callback \*(L"getname\*(R" just calls \f(CW\*(C`carp()\*(C'\fR with underlying Socket errors.
.PP
\fI\s-1LIMITATION:\s0\fR
.IX Subsection "LIMITATION:"
.PP
Returns just one name even if the \s-1IP\s0 has more than one \s-1PTR RR.\s0 This is a limitation
of Socket::getnameinfo. If you need all names for IPs with more than one \s-1PTR RR\s0 then you should
use Net::DNS or similar modules.
.SS "bytes"
.IX Subsection "bytes"
.Vb 2
\&  $ip = Net::IPAM::IP\->new(\*(Aqfe80::\*(Aq);
\&  $bytes = $ip\->bytes;    # "\exfe\ex80\ex00\ex00\ex00\ex00\ex00\ex00\ex00\ex00\ex00\ex00\ex00\ex00\ex00\ex00"
\&
\&  $ip    = Net::IPAM::IP\->new(\*(Aq10.0.0.1\*(Aq);
\&  $bytes = $ip\->bytes;    # "\ex0a\ex00\ex00\ex01"
.Ve
.PP
Returns the packed \s-1IP\s0 address as byte-string. It's the opposite to \*(L"new_from_bytes\*(R"
.SH "OPERATORS"
.IX Header "OPERATORS"
Net::IPAM::IP overloads the following operators.
.SS "bool"
.IX Subsection "bool"
.Vb 1
\&  my $bool = !!$ip;
.Ve
.PP
Always true.
.SS "stringify"
.IX Subsection "stringify"
.Vb 1
\&  my $str = "$ip";
.Ve
.PP
Alias for \*(L"to_string\*(R".
.SH "WARNING"
.IX Header "WARNING"
Some Socket::inet_XtoY implementations are hopelessly buggy.
.PP
Tests are made during loading and in case of errors, these functions are redefined
with a (slower) pure-perl implementation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Karl Gaissmaier, \f(CW\*(C`<karl.gaissmaier(at)uni\-ulm.de>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-net\-ipam\-ip at rt.cpan.org\*(C'\fR, or through
the web interface at <https://rt.cpan.org/NoAuth/ReportBug.html?Queue=Net\-IPAM\-IP>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Net::IPAM::IP
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
on github
.Sp
\&\s-1TODO\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::IPAM::Util
Net::IPAM::Block
Net::IPAM::Tree
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This software is copyright (c) 2020 by Karl Gaissmaier.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
