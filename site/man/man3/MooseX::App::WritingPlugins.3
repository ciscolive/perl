.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::App::WritingPlugins 3"
.TH MooseX::App::WritingPlugins 3 "2019-05-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::App::WritingPlugins \- Writing plugins for MooseX::App
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package MooseX::App::Plugin::MyPlugin;
\& 
\& use Moose::Role;
\& 
\& sub plugin_metaroles {
\&     my ($self,$class) = @_;
\&     return {
\&         class   => [\*(AqMooseX::App::Plugin::MyPlugin::Meta::Class\*(Aq],
\&     }
\& }
\& 
\& around \*(Aqinitialize_command_class\*(Aq => sub {
\&    ...
\& };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Plugins are implemented as Moose roles and must reside in the
MooseX::App::Plugin::* namespace. Metaclasses can be altered via the
\&'plugin_metaroles' callback method. Furthermore Moose method modifiers
(around, after, before) can be used to alter the behaviour of MooseX::App or
its meta classes.
.SH "CALLBACKS"
.IX Header "CALLBACKS"
.SS "plugin_metaroles"
.IX Subsection "plugin_metaroles"
Optional callback method that should return a hash reference specifying which
metaroles will be applied to the class metaclass and its contained metaclasses
and helper classes.
.PP
Each key should in turn point to an array reference of role names.
.PP
It accepts the following keys:
.IP "\(bu" 4
class
.IP "\(bu" 4
attribute
.IP "\(bu" 4
method
.IP "\(bu" 4
wrapped_method
.IP "\(bu" 4
instance
.IP "\(bu" 4
constructor
.IP "\(bu" 4
destructor
.IP "\(bu" 4
error
.SH "METACLASSES"
.IX Header "METACLASSES"
Most of MooseX-App behaviour is implemented in metaclass roles. When writing
plugins you will most likely need to alter/augument the behaviour of these
roles. Implementation details can be found in the respective packages.
.IP "\(bu" 4
MooseX::App::Meta::Role::Class::Base is applied to the base metaclass
.IP "\(bu" 4
MooseX::App::Meta::Role::Class::Command is applied to the command metaclass
.IP "\(bu" 4
MooseX::App::Meta::Role::Attribute::Option is applied to all attributes
in the base and command meta classes
