.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::Mechanize::Firefox::Examples 3"
.TH WWW::Mechanize::Firefox::Examples 3 "2018-10-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Examples \- WWW::Mechanize::Firefox example programs.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a documentation only module showing the examples that are
included in the WWW::Mechanize::Firefox distribution.
.PP
This file was auto-generated via the \f(CW\*(C`gen_examples_pod.pl\*(C'\fR
program that is also included in the examples directory.
.SH "Example programs"
.IX Header "Example programs"
The following is a list of the 12 example programs that are included in the WWW::Mechanize::Firefox distribution.
.IP "\(bu" 4
\&\*(L"Example: open\-local\-file.pl\*(R" Open a local file in Firefox
.IP "\(bu" 4
\&\*(L"Example: open\-url.pl\*(R" Open an \s-1URL\s0 in Firefox
.IP "\(bu" 4
\&\*(L"Example: screenshot.pl\*(R" Take a screenshot of a website
.IP "\(bu" 4
\&\*(L"Example: dump\-links.pl\*(R" Dump links on a webpage
.IP "\(bu" 4
\&\*(L"Example: bcat.pl\*(R" Send console text to the browser
.IP "\(bu" 4
\&\*(L"Example: manipulate\-javascript.pl\*(R" Make changes to Javascript values in a webpage
.IP "\(bu" 4
\&\*(L"Example: javascript.pl\*(R" Execute Javascript in the webpage context
.IP "\(bu" 4
\&\*(L"Example: js\-console.pl\*(R" Send messages to the Error Console
.IP "\(bu" 4
\&\*(L"Example: tail\-console.pl\*(R" Display messages from the Error Console to \s-1STDOUT\s0
.IP "\(bu" 4
\&\*(L"Example: urlbar.pl\*(R" Listen to changes in the location bar
.IP "\(bu" 4
\&\*(L"Example: fullscreen.pl\*(R" Switch the browser to full screen
.IP "\(bu" 4
\&\*(L"Example: proxy\-settings.pl\*(R" Change the proxy settings and other settings in Firefox
.SS "Example: open\-local\-file.pl"
.IX Subsection "Example: open-local-file.pl"
.Vb 3
\&    #!perl \-w
\&    use strict;
\&    use WWW::Mechanize::Firefox;
\&    
\&    my $mech = WWW::Mechanize::Firefox\->new();
\&    $mech\->get_local(\*(Aqdatei.html\*(Aq);
\&    
\&    <>;
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-Firefox\-0.80/examples/open\-local\-file.pl>
.SS "Example: open\-url.pl"
.IX Subsection "Example: open-url.pl"
.Vb 3
\&    #!perl \-w
\&    use strict;
\&    use WWW::Mechanize::Firefox;
\&    
\&    my $mech = WWW::Mechanize::Firefox\->new(
\&        activate => 1, # bring the tab to the foreground
\&    );
\&    $mech\->get(\*(Aqhttp://www.perlworkshop.de\*(Aq);
\&    
\&    <>;
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-Firefox\-0.80/examples/open\-url.pl>
.SS "Example: screenshot.pl"
.IX Subsection "Example: screenshot.pl"
.Vb 5
\&    #!perl \-w
\&    use strict;
\&    use WWW::Mechanize::Firefox;
\&    use Getopt::Long;
\&    use Pod::Usage;
\&    
\&    GetOptions(
\&        \*(Aqmozrepl|m:s\*(Aq => \emy $mozrepl,
\&        \*(Aqoutfile|o:s\*(Aq => \emy $outfile,
\&        \*(Aqtab|t:s\*(Aq => \emy $tab,
\&        \*(Aqtarget\-width|tw:s\*(Aq => \emy $target_w,
\&        \*(Aqtarget\-height|th:s\*(Aq => \emy $target_h,
\&        \*(Aqtarget\-scale|s:s\*(Aq => \emy $target_scale,
\&        \*(Aqtarget\-scale\-x|sx:s\*(Aq => \emy $target_scale_w,
\&        \*(Aqtarget\-scale\-y|sy:s\*(Aq => \emy $target_scale_h,
\&        \*(Aqcurrent|c\*(Aq => \emy $current,
\&    ) or pod2usage();
\&    $outfile ||= \*(Aqscreenshot.png\*(Aq;
\&    
\&    my @args;
\&    if (! @ARGV) {
\&        push @args, tab => \*(Aqcurrent\*(Aq;
\&    };
\&    
\&    if ($tab) {
\&        $tab = qr/$tab/;
\&    } elsif ($current) {
\&        $tab = $current
\&    };
\&    
\&    my $mech = WWW::Mechanize::Firefox\->new(
\&        launch => \*(Aqfirefox\*(Aq,
\&        create => 1,
\&        tab => $tab,
\&        autoclose => (!$tab),
\&        @args
\&    );
\&    
\&    if (@ARGV) {
\&        $mech\->get($ARGV[0]);
\&    };
\&    
\&    my $png = $mech\->content_as_png(undef,undef,
\&        {
\&            width => $target_w,
\&            height => $target_h,
\&            scalex => ($target_scale_w||$target_scale),
\&            scaley => ($target_scale_h||$target_scale),
\&        }
\&    );
\&    
\&    open my $out, \*(Aq>\*(Aq, $outfile
\&        or die "Couldn\*(Aqt create \*(Aq$outfile\*(Aq: $!";
\&    binmode $out;
\&    print {$out} $png;
\&    
\&    =head1 NAME
\&    
\&    screenshot.pl \- take a screenshot of a webpage
\&    
\&    =head1 SYNOPSIS
\&    
\&    screenshot.pl [options] [url]
\&    
\&    Options:
\&       \-\-outfile        name of output file
\&       \-\-mozrepl        connection string to Firefox
\&       \-\-tab            name of the tab title to use
\&       \-\-current        use currently active tab
\&       \-\-target\-width   width of target image (in pixels)
\&       \-\-target\-height  height of target image (in pixels)
\&       \-\-target\-scale   scale of target image (ratio)
\&    
\&    =head1 OPTIONS
\&    
\&    =over 4
\&    
\&    =item B<\-\-outfile>
\&    
\&    Name of the output file. The image will always be written
\&    in PNG format.
\&    
\&    =item B<\-\-mozrepl>
\&    
\&    Connection information for the mozrepl instance to use.
\&    
\&    =back
\&    
\&    =head1 DESCRIPTION
\&    
\&    B<This program> will take a screenshot
\&    of the given URL (including plugins) and
\&    write it to the given file or the file C<screenshot.png>.
\&    
\&    =cut
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-Firefox\-0.80/examples/screenshot.pl>
.SS "Example: dump\-links.pl"
.IX Subsection "Example: dump-links.pl"
.Vb 3
\&    #!perl \-w
\&    use strict;
\&    use WWW::Mechanize::Firefox;
\&    
\&    my $mech = WWW::Mechanize::Firefox\->new();
\&    $mech\->get_local(\*(Aqlinks.html\*(Aq);
\&    
\&    $mech\->highlight_node(
\&      $mech\->selector(\*(Aqa.download\*(Aq));
\&      
\&    print $_\->{href}, " \- ", $_\->{innerHTML}, "\en"
\&      for $mech\->selector(\*(Aqa.download\*(Aq);
\&    
\&    <>;
\&    
\&    =head1 NAME
\&    
\&    dump\-links.pl \- Dump links on a webpage
\&    
\&    =head1 SYNOPSIS
\&    
\&    dump\-links.pl
\&    
\&    =head1 DESCRIPTION
\&    
\&    This program demonstrates how to read elements out of the Firefox
\&    DOM and how to get at text within nodes.
\&    
\&    It also demonstrates how you can modify elements in a webpage.
\&    
\&    =cut
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-Firefox\-0.80/examples/dump\-links.pl>
.SS "Example: bcat.pl"
.IX Subsection "Example: bcat.pl"
Find out whether we have \s-1HTML:\s0
if (! \f(CW$encode_type\fR) {
    #!perl \-w
    use strict;
    use WWW::Mechanize::Firefox;
    use Getopt::Long;
    use Pod::Usage;
    use Cwd qw(getcwd);
.PP
.Vb 9
\&    GetOptions(
\&        \*(Aqmozrepl|m:s\*(Aq => \emy $mozrepl,
\&        \*(Aqtab:s\*(Aq => \emy $tab,
\&        \*(Aqcurrent|c\*(Aq => \emy $use_current_tab,
\&        \*(Aqclose|q\*(Aq => \emy $close,
\&        \*(Aqtitle|t:s\*(Aq => \emy $title,
\&        \*(Aqtype:s\*(Aq => \emy $encode_type,
\&        #\*(Aqfocus|f\*(Aq => \emy $focus,
\&    ) or pod2usage();
\&    
\&    $tab = $use_current_tab ? \*(Aqcurrent\*(Aq
\&           : $tab ? qr/$tab/
\&           : undef
\&           ;
\&    
\&    $title ||= getcwd;
\&    
\&    my $mech = WWW::Mechanize::Firefox\->new(
\&        tab     => $tab,
\&        repl    => $mozrepl,
\&        create  => 1,
\&        autoclose => $close,
\&    );
\&    
\&    local $/;
\&    binmode STDIN;
\&    my $html = <>;
\&    
\&    # Find out whether we have HTML:
\&    if (! $encode_type) {
\&        if ($html =~ /^\es*</sm) {
\&            $encode_type = \*(Aqhtml\*(Aq
\&        } else {
\&            $encode_type = \*(Aqtext\*(Aq,
\&        };
\&    };
\&    
\&    if (\*(Aqtext\*(Aq eq $encode_type) {
\&        my %map = (
\&        \*(Aq<\*(Aq => \*(Aq&lt;\*(Aq,
\&        \*(Aq>\*(Aq => \*(Aq&gt;\*(Aq,
\&        \*(Aq&\*(Aq => \*(Aq&amp;\*(Aq,
\&        );
\&        $html =~ s/([<>&])/$map{$1} || $1/ge;
\&        $html =~ s/\er?\en/<br>/g;
\&        $html = "<html><head><title>$title</title><body><pre>$html</pre></body></html>";
\&    };
\&    
\&    $mech\->update_html($html);
\&    
\&    =head1 NAME
\&    
\&    bcat.pl \- cat HTML to browser
\&    
\&    =head1 SYNOPSIS
\&    
\&      bcat.pl <index.html
\&    
\&    Options:
\&       \-\-tab            title of tab to reuse (regex)
\&       \-\-current        reuse current tab
\&       \-\-title          title of the page
\&       \-\-mozrepl        connection string to Firefox
\&       \-\-close          automatically close the tab at the end of input
\&       \-\-type TYPE      Fix the type to \*(Aqhtml\*(Aq or \*(Aqtext\*(Aq
\&    
\&    =head1 OPTIONS
\&    
\&    =over 4
\&    
\&    =item B<\-\-tab>
\&    
\&    Name of the tab to (re)use. A substring is enough.
\&    
\&    =item B<\-\-current>
\&    
\&    Use the currently focused tab.
\&    
\&    =item B<\-\-title>
\&    
\&    Give the title of the page that is shown.
\&    
\&    =item B<\-\-close>
\&    
\&    Automatically close the tab when the input closes. This is good
\&    for displaying intermediate information.
\&    
\&    =item B<\-\-type TYPE>
\&    
\&    Force the type to be either C<html> or C<text>. If the type is
\&    C<text>, line wrapping will be added.
\&    
\&    =item B<\-\-mozrepl>
\&    
\&    Connection information for the mozrepl instance to use.
\&    
\&    =back
\&    
\&    =head1 DESCRIPTION
\&    
\&    B<This program> will display HTML read from STDIN
\&    in a browser tab.
\&    
\&    =head1 SEE ALSO
\&    
\&    The original C<bcat> utility which inspired this program
\&    at L<http://rtomayko.github.com/bcat/>.
\&    
\&    =cut
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-Firefox\-0.80/examples/bcat.pl>
.SS "Example: manipulate\-javascript.pl"
.IX Subsection "Example: manipulate-javascript.pl"
.Vb 3
\&    #!perl \-w
\&    use strict;
\&    use WWW::Mechanize::Firefox;
\&    
\&    my $mech = WWW::Mechanize::Firefox\->new();
\&    $mech\->get_local(\*(Aqjavascript.html\*(Aq);
\&    
\&    my ($val,$type) = $mech\->eval_in_page(<<\*(AqJS\*(Aq);
\&        secret
\&    JS
\&    
\&    if ($type ne \*(Aqstring\*(Aq) {
\&        die "Unbekannter Ergebnistyp: $type";
\&    };
\&    print "Das Kennwort ist $val";
\&    
\&    $mech\->value(\*(Aqpass\*(Aq,$val);
\&    
\&    <>;
\&    
\&    =head1 NAME
\&    
\&    manipulate\-javascript.pl \- demonstrate how to manipulate Javascript in a page
\&    
\&    =head1 SYNOPSIS
\&    
\&    manipulate\-javascript.pl
\&    
\&    =head1 DESCRIPTION
\&    
\&    This program demonstrates that you have write access to Javascript
\&    variables in Firefox and in webpages displayed through Firefox.
\&    
\&    =cut
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-Firefox\-0.80/examples/manipulate\-javascript.pl>
.SS "Example: javascript.pl"
.IX Subsection "Example: javascript.pl"
.Vb 3
\&    #!perl \-w
\&    use strict;
\&    use WWW::Mechanize::Firefox;
\&    
\&    my $mech = WWW::Mechanize::Firefox\->new();
\&    $mech\->get_local(\*(Aqlinks.html\*(Aq);
\&    
\&    $mech\->eval_in_page(<<\*(AqJS\*(Aq);
\&        alert(\*(AqHallo Frankfurt.pm\*(Aq);
\&    JS
\&    
\&    <>;
\&    
\&    =head1 NAME
\&    
\&    javascript.pl \- execute Javascript in a page
\&    
\&    =head1 SYNOPSIS
\&    
\&    javascript.pl
\&    
\&    =head1 DESCRIPTION
\&    
\&    B<This program> demonstrates how to execute simple
\&    Javascript in a page.
\&    
\&    =cut
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-Firefox\-0.80/examples/javascript.pl>
.SS "Example: js\-console.pl"
.IX Subsection "Example: js-console.pl"
.Vb 6
\&    #!perl \-w
\&    use strict;
\&    use WWW::Mechanize::Firefox;
\&    use Time::HiRes;
\&    use Getopt::Long;
\&    use Pod::Usage;
\&    
\&    GetOptions(
\&        \*(Aqclear|c\*(Aq => \emy $clear,
\&        \*(Aqmozrepl|m:s\*(Aq => \emy $mozrepl,
\&        \*(Aqtext|t:s\*(Aq => \emy $text,
\&    ) or pod2usage();
\&    
\&    my $mech = WWW::Mechanize::Firefox\->new(
\&        #log => [\*(Aqdebug\*(Aq],
\&        mozrepl => $mozrepl,
\&    );
\&    
\&    my $console = $mech\->js_console;
\&    
\&    $mech\->clear_js_errors
\&        if ($clear);
\&    
\&    if ($text) {
\&            $console\->logStringMessage($text);
\&    } else {
\&        while (<>) {
\&            $console\->logStringMessage($_);
\&        };
\&    };
\&    
\&    =head1 NAME
\&    
\&    js\-console.pl \- send STDIN to the Javascript Console
\&    
\&    =head1 SYNOPSIS
\&    
\&        echo "Hello World" | js\-console.pl
\&    
\&    Options:
\&       \-\-clear          Clear console before sending text
\&       \-\-mozrepl        connection string to Firefox
\&       \-\-close          automatically close the tab at the end of input
\&       \-\-type TYPE      Fix the type to \*(Aqhtml\*(Aq or \*(Aqtext\*(Aq
\&    
\&    =head1 OPTIONS
\&    
\&    =over 4
\&    
\&    =item B<\-\-clear>
\&    
\&    Clear the console before sending the text.
\&    
\&    =item B<\-\-text TEXT>
\&    
\&    Send the text TEXT instead of reading from STDIN.
\&    
\&    =item B<\-\-mozrepl>
\&    
\&    Connection information for the mozrepl instance to use.
\&    
\&    =back
\&    
\&    =head1 DESCRIPTION
\&    
\&    This program sends text read from standard input to the
\&    Javascript Console in Firefox. This can be convenient
\&    if you want to do testing and log the start or stop
\&    of a test run to the console.
\&    
\&    =head1 SEE ALSO
\&    
\&    L<https://developer.mozilla.org/en/Error_Console>
\&    
\&    L<https://developer.mozilla.org/en/nsIConsoleService> \- the underlying
\&    Console Service that also shows how to listen to events getting
\&    added.
\&    
\&    =cut
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-Firefox\-0.80/examples/js\-console.pl>
.SS "Example: tail\-console.pl"
.IX Subsection "Example: tail-console.pl"
.Vb 6
\&    #!perl \-w
\&    use strict;
\&    use WWW::Mechanize::Firefox;
\&    use Time::HiRes;
\&    use Getopt::Long;
\&    use Pod::Usage;
\&    
\&    GetOptions(
\&        \*(Aqmozrepl|m:s\*(Aq => \emy $mozrepl,
\&        \*(Aqfollow|f\*(Aq    => \emy $install_listener,
\&        \*(Aqclear|c\*(Aq     => \emy $clear,
\&        \*(Aqnumber|n:i\*(Aq  => \emy $lines,
\&    ) or pod2usage(2);
\&    $lines ||= 5;
\&    
\&    my $mech = WWW::Mechanize::Firefox\->new(
\&        #log => [\*(Aqdebug\*(Aq],
\&        mozrepl => $mozrepl,
\&    );
\&    
\&    sub install_listener {
\&        warn "Creating logListener";
\&        my $logListener = $mech\->repl\->declare(<<\*(AqJS\*(Aq);
\&        function(callback) {
\&            return {
\&                observe: callback,
\&                QueryInterface: function (iid) {
\&                    if (!iid.equals(Components.interfaces.nsIConsoleListener) &&
\&                        !iid.equals(Components.interfaces.nsISupports)) {
\&                            throw Components.results.NS_ERROR_NO_INTERFACE;
\&                    }
\&                    return this;
\&                },
\&            };
\&        }
\&    JS
\&    
\&        warn "Creating registerListener";
\&    
\&        my $registerListener = $mech\->repl\->declare(<<\*(AqJS\*(Aq);
\&            function (listener) {
\&                var aConsoleService = Components.classes["@mozilla.org/consoleservice;1"]
\&                    .getService(Components.interfaces.nsIConsoleService);
\&                aConsoleService.registerListener(listener);
\&            };
\&    JS
\&    
\&        my $listener = $logListener\->(sub {output_message($_[0])});
\&        $registerListener\->($listener);
\&    };
\&    
\&    sub output_message {
\&        print "$_[0]\->{message}\en";
\&    };
\&    
\&    my $console = $mech\->js_console;
\&    
\&    $mech\->clear_js_errors
\&        if ($clear);
\&    
\&    output_message $_ for reverse (grep {defined} ($mech\->js_errors)[\-$lines..0]);
\&    
\&    if ($install_listener) {
\&        my $l = install_listener;
\&        while (1) {
\&            $mech\->repl\->poll;
\&            sleep 0.25;
\&        };
\&    };
\&    
\&    =head1 NAME
\&    
\&    js\-console.pl \- send STDIN to the Javascript Console
\&    
\&    =head1 SYNOPSIS
\&    
\&        tail\-console.pl \-f
\&    
\&    Options:
\&       \-\-clear          Clear console before receiving new messages
\&       \-\-follow         Read more messages as they are being added
\&       \-\-mozrepl        connection string to Firefox
\&    
\&    =head1 OPTIONS
\&    
\&    =over 4
\&    
\&    =item B<\-\-clear>
\&    
\&    Clear the console before sending the text.
\&    
\&    =item B<\-\-follow>
\&    
\&    Keep watching the console and output text as it gets added.
\&    
\&    =item B<\-\-mozrepl>
\&    
\&    Connection information for the mozrepl instance to use.
\&    
\&    =back
\&    
\&    =head1 DESCRIPTION
\&    
\&    This program reads messages from the Error Console and sends them
\&    to STDOUT.
\&    
\&    =head1 SEE ALSO
\&    
\&    L<https://developer.mozilla.org/en/Error_Console>
\&    
\&    L<https://developer.mozilla.org/en/nsIConsoleService> \- the underlying
\&    Console Service that also shows how to listen to events getting
\&    added.
\&    
\&    =cut
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-Firefox\-0.80/examples/tail\-console.pl>
.SS "Example: urlbar.pl"
.IX Subsection "Example: urlbar.pl"
.Vb 4
\&    #!perl \-w
\&    use strict;
\&    use WWW::Mechanize::Firefox;
\&    use Time::HiRes;
\&    
\&    my $mech = WWW::Mechanize::Firefox\->new(
\&        #log => [\*(Aqdebug\*(Aq],
\&    );
\&    $mech\->get(\*(Aqhttp://www.cpan.org\*(Aq);
\&    
\&    my $mk_listener = $mech\->repl\->declare(<<\*(AqJS\*(Aq);
\&    function (myListener,source) {
\&        myListener.source = source;
\&        const STATE_START = Components.interfaces.nsIWebProgressListener.STATE_START;
\&        const STATE_STOP = Components.interfaces.nsIWebProgressListener.STATE_STOP;
\&        var callbacks = [\*(AqonStateChange\*(Aq,
\&                       \*(AqonLocationChange\*(Aq,
\&                       "onProgressChange",
\&                   "onStatusChange",
\&                   "onSecurityChange",
\&                            ];
\&        for (var h in callbacks) {
\&            var e = callbacks[h];
\&            if (! myListener[e]) {
\&                myListener[e] = function(){}
\&            };
\&        };
\&        myListener.QueryInterface = function(aIID) {
\&        if (aIID.equals(Components.interfaces.nsIWebProgressListener) ||
\&           aIID.equals(Components.interfaces.nsISupportsWeakReference) ||
\&           aIID.equals(Components.interfaces.nsISupports))
\&            return this;
\&        throw Components.results.NS_NOINTERFACE;
\&        };
\&        return myListener
\&    }
\&    JS
\&    
\&    =begin JSDoc
\&    
\&          "onStateChange": handlers[
\&          function(aWebProgress, aRequest, aFlag, aStatus)
\&          {
\&           // If you use myListener for more than one tab/window, use
\&           // aWebProgress.DOMWindow to obtain the tab/window which triggers the state change
\&           if(aFlag & STATE_START)
\&           {
\&         // This fires when the load event is initiated
\&            onLoadStart(aWebProgress,aRequest,aStatus);
\&           }
\&           if(aFlag & STATE_STOP)
\&           {
\&         // This fires when the load finishes
\&            onLoadStop(aWebProgress,aRequest,aStatus);
\&           }
\&          },
\&    
\&          "onLocationChange": function(aProgress, aRequest, aURI)
\&          {
\&           // This fires when the location bar changes; i.e load event is confirmed
\&           // or when the user switches tabs. If you use myListener for more than one tab/window,
\&           // use aProgress.DOMWindow to obtain the tab/window which triggered the change.
\&          },
\&    
\&          // For definitions of the remaining functions see related documentation
\&          "onProgressChange": function(aWebProgress, aRequest, curSelf, maxSelf, curTot, maxTot) { },
\&          "onStatusChange": function(aWebProgress, aRequest, aStatus, aMessage) { },
\&          "onSecurityChange": function(aWebProgress, aRequest, aState) { },
\&        };
\&    =cut
\&    
\&    sub onStateChange {
\&        my ($progress,$request,$flag,$status) = @_;
\&        print "@_\en";
\&    }
\&    
\&    sub onLocationChange {
\&        my ($progress,$request,$uri) = @_;
\&        print "Location :", $uri\->{spec},"\en";
\&    }
\&    
\&    my $NOTIFY_STATE_DOCUMENT = $mech\->repl\->expr(\*(AqComponents.interfaces.nsIWebProgress.NOTIFY_STATE_DOCUMENT\*(Aq);
\&    sub event_listener {
\&        my ($source,%handlers) = @_;
\&        my ($obj) = $mech\->repl\->expr(\*(Aqnew Object\*(Aq);
\&        for my $key (keys %handlers) {
\&            $obj\->{$key} = $handlers{$key};
\&        };
\&        my $lsn = $mk_listener\->($obj,$source);
\&        $lsn\->_\|_release_action(\*(Aqself.source.removeEventListener(self)\*(Aq);
\&        $source\->addProgressListener($lsn,$NOTIFY_STATE_DOCUMENT);
\&        $lsn;
\&    };
\&    
\&    my $browser = $mech\->repl\->expr(\*(Aqwindow.getBrowser()\*(Aq);
\&    
\&    my $eventlistener = event_listener(
\&        $browser,
\&        onLocationChange => \e&onLocationChange,
\&    );
\&    
\&    while (1) {
\&        $mech\->repl\->poll();
\&        sleep 1;
\&    };
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-Firefox\-0.80/examples/urlbar.pl>
.SS "Example: fullscreen.pl"
.IX Subsection "Example: fullscreen.pl"
.Vb 4
\&    #!perl \-w
\&    use strict;
\&    use WWW::Mechanize::Firefox;
\&    use Time::HiRes;
\&    
\&    my $mech = WWW::Mechanize::Firefox\->new(
\&        #log => [\*(Aqdebug\*(Aq],
\&    );
\&    
\&    my ($window, $type) = $mech\->eval(\*(Aqwindow\*(Aq);
\&    
\&    print "Going fullscreen\en";
\&    $window\->{fullScreen} = 1;
\&    
\&    sleep 10;
\&    
\&    print "Going back to normal\en";
\&    $window\->{fullScreen} = 0;
\&    
\&    =head1 NAME
\&    
\&    fullscreen.pl \- toggle fullscreen mode of Firefox
\&    
\&    =head1 SYNOPSIS
\&    
\&    fullscreen.pl
\&    
\&    =head1 DESCRIPTION
\&    
\&    This program switches Firefox into fullscreen mode. It shows
\&    how to access Firefox\-internal variables and how to manipulate them.
\&    
\&    =cut
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-Firefox\-0.80/examples/fullscreen.pl>
.SS "Example: proxy\-settings.pl"
.IX Subsection "Example: proxy-settings.pl"
Check the network proxy settings
my \f(CW$prefs\fR = \f(CW$ff\fR\->repl\->expr(<<'\s-1JS\s0');
    #!perl \-w
    use strict;
    use Getopt::Long;
    use Firefox::Application;
.PP
.Vb 1
\&    my $ff = Firefox::Application\->new();
\&    
\&    # Check the network proxy settings
\&    my $prefs = $ff\->repl\->expr(<<\*(AqJS\*(Aq);
\&      Components.classes["@mozilla.org/preferences\-service;1"]
\&        .getService(Components.interfaces.nsIPrefBranch);
\&    JS
\&    
\&    print "Your proxy settings are\en";
\&    print "Proxy type\et",  $prefs\->getIntPref(\*(Aqnetwork.proxy.type\*(Aq),"\en";
\&    print "HTTP  proxy\et", $prefs\->getCharPref(\*(Aqnetwork.proxy.http\*(Aq),"\en";
\&    print "HTTP  port\et",  $prefs\->getIntPref(\*(Aqnetwork.proxy.http_port\*(Aq),"\en";
\&    print "SOCKS proxy\et", $prefs\->getCharPref(\*(Aqnetwork.proxy.socks\*(Aq),"\en";
\&    print "SOCKS port\et",  $prefs\->getIntPref(\*(Aqnetwork.proxy.socks_port\*(Aq),"\en";
\&    
\&    # Switch off the proxy
\&    if ($prefs\->getIntPref(\*(Aqnetwork.proxy.type\*(Aq) != 0) {
\&        $prefs\->setIntPref(\*(Aqnetwork.proxy.type\*(Aq,0);
\&    };
\&    
\&    # Switch on the manual proxy configuration
\&    $prefs\->setIntPref(\*(Aqnetwork.proxy.type\*(Aq,1);
\&    
\&    
\&    =head1 NAME
\&    
\&    proxy\-settings.pl \- display and change the proxy settings of Firefox
\&    
\&    =head1 SYNOPSIS
\&    
\&    proxy\-settings.pl
\&    
\&    =head1 DESCRIPTION
\&    
\&    This shows how to read and write configuration settings
\&    from L<about:config> . Particularly, it shows how
\&    to switch the proxy settings in Firefox on and off.
\&    
\&    =cut
.Ve
.PP
Download this example: <http://cpansearch.perl.org/src/CORION/WWW\-Mechanize\-Firefox\-0.80/examples/proxy\-settings.pl>
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR
.PP
Contributed examples contain the original author's name.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2009\-2012 by Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR.
.PP
All Rights Reserved. This module is free software. It may be used, redistributed and/or modified under the same terms as Perl itself.
