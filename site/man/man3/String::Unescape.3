.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "String::Unescape 3"
.TH String::Unescape 3 "2015-01-02" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
String::Unescape \- Unescape perl\-escaped string
.SH "VERSION"
.IX Header "VERSION"
version v0.0.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Call as class method
\&  print String::Unescape\->unescape(\*(Aq\et\ec@\ex41\en\*(Aq);
\&
\&  # Call as function
\&  use String::Escape qw(unescape);
\&  print unescape(\*(Aq\et\ec@\ex41\en\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides just one function, Perl's unescaping without variable interpolation. Sometimes, I want to provide a string including a character difficult to represent without escaping, outside from Perl. Also, sometimes, I can not rely on shell expansion.
.PP
.Vb 2
\&  # App\-count
\&  count \-t \*(Aq\et\*(Aq
.Ve
.PP
\&\f(CW\*(C`eval\*(C'\fR can handle this situation but it has too more power than required. This is the purpose for this module.
.PP
This module is intented to be compatible with Perl's native unescaping as much as possible, with the following limitation.
If the result is different from one by Perl beyond the limitation, it is considered as a bug. Please report it.
.SS "\s-1LIMITATION\s0"
.IX Subsection "LIMITATION"
There are the following exceptions that Perl's behavior is not emulated.
.IP "1." 4
Whether warning is produced or not.
.IP "2." 4
Strings that perl doesn't accept. For those strings, the results by this module are undefined.
.IP "3." 4
\&\eL in \eU and \eU in \eL. By perl, they are not stacked, which means all \eQ, \eL, \eU and \eF (if available) modifiers from the prior \eL, \eU or \eF become to have no effect then restart the new \eL, \eU or \eF conversion. By this module, stacked.
.IP "4." 4
\&\eL\eu and \eU\el. By Perl, they are swapped as \eu\eL and \el\eU, respectively. By this module, not swapped.
.PP
For 3 and 4, t/quirks_in_perl.t contains actual examples.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """unescape($str)"""
.el .SS "\f(CWunescape($str)\fP"
.IX Subsection "unescape($str)"
Returns unescaped \f(CW$str\fR. For escaping, see \*(L"Quote-and-Quote-like-Operators\*(R" in perlop.
.SH "REMARKS"
.IX Header "REMARKS"
charnames in Perl 5.6 does not have required functionality that is Unicode name <\-> code conversion in runtime, thus Perl 5.6 support is explicitly dropped.
.SH "AUTHOR"
.IX Header "AUTHOR"
Yasutaka \s-1ATARASHI\s0 <yakex@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Yasutaka \s-1ATARASHI.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
