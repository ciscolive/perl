.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::NamedACL 3"
.TH Infoblox::Grid::NamedACL 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::NamedACL \- Named ACL object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Named \s-1ACL\s0 object represents a named list of access control entries.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 8
\& my $nacl = Infoblox::Grid::NamedACL\->new(
\&    \*(Aqname\*(Aq                  => $string,                                                                      # Required
\&    \*(Aqcomment\*(Aq               => $string,                                                                      # Optional
\&    \*(Aqaccess_list\*(Aq           => [ $ipv4addr | $ipv4_subnet/prefix | $ipv6addr |                               # Optional
\&                                 $ipv6_subnet/prefix | $TSIGKey | $NamedACL, ... ],
\&    \*(Aqextattrs\*(Aq              => { $string => $extattr, ... },                                                 # Optional / Default is undefined
\&    \*(Aqextensible_attributes\*(Aq => { $string => $string | $num, $string => [ $string | $num, ... ], ... },       # Optional
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a Named \s-1ACL\s0 object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific Named ACL object:
\&
\&  name    \- Optional. The name of Named ACL object.
\&  comment \- Optional. The comment in string format.
\&  extattrs\- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&    object => \*(AqInfoblox::Grid::NamedACL\*(Aq,
\&    name   => \*(Aqnacl\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.Sp
If you have applied an access control list to an object, you must restart services after you update the access control list for the changes to take effect. See Infoblox::Session\->\fBrestart()\fR method.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify comment of Named ACL object.
\& $nacl\->comment(\*(Aqnew comment\*(Aq);
\& # Submit modification
\& my $response = $session\->modify( $nacl );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::NamedACL",
\&     name   => "nacl");
\& # Find the desired object from the retrieved list.
\& my $desired_nacl = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_nacl );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for Named \s-1ACL\s0 objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for Named ACL objects:
\&
\&  name    \- Optional. The name of Named ACL object (regular expression).
\&  comment \- Optional. The comment in string format (regular expression).
\&  extattrs\- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->search(
\&    object => \*(AqInfoblox::Grid::NamedACL\*(Aq,
\&    name   => \*(Aqnacl\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
Retrieved Named \s-1ACL\s0 objects in an access list are considered 'partial' objects. See Infoblox::Session\->\fBfill_partial_object()\fR for more information on how it can be converted to a 'full' \s-1API\s0 object.
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of Named \s-1ACL\s0 object.
.SS "access_list( )"
.IX Subsection "access_list( )"
.RS 4
Use this method to set or retrieve an access list of Named \s-1ACL\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains IPv4/IPv6 addresses, networks, Infoblox::DNS::TSIGKey objects and/or Infoblox::Grid::NamedACL objects.
.Sp
To deny queries from certain \s-1IP\s0 addresses and networks, add \*(L"!\*(R" as a prefix to the \s-1IP\s0 addresses and networks.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $nacl\->access_list();
\& # Modify attribute value
\& $nacl\->access_list([\*(Aq10.0.0.1\*(Aq, $tsigkey, $nacl]);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment about Named \s-1ACL\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $nacl\->comment();
\& # Modify attribute value
\& $nacl\->comment(\*(Aqmodified comment\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "exploded_access_list( )"
.IX Subsection "exploded_access_list( )"
.RS 4
Use this method to retrieve the exploded access list of the Named \s-1ACL\s0 object. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.Sp
The valid value is an array reference that contains IPv4/IPv6 addresses, networks and/or Infoblox::DNS::TSIGKey objects.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $nacl\->exploded_access_list();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Named \s-1ACL\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $nacl\->extattrs();
\& #Modify extattrs
\& $nacl\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with Named \s-1ACL\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $nacl\->extensible_attributes();
\& # Modify attribute value
\& $nacl\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of the Named \s-1ACL\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the Named \s-1ACL\s0 object in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $nacl\->name();
\& # Modify attribute value
\& $nacl\->name(\*(Aqnew_nacl\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, get, modify, search and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to getting and modifying an object\fR
.PP
.Vb 2
\& use strict;
\& use Infoblox;
\&
\& #refers to Infoblox Appliance IP address
\& my $host_ip = "192.168.1.2";
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&     master   => $host_ip,
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create an object\fR
.PP
.Vb 10
\& my $nacl = Infoblox::Grid::NamedACL\->new(
\&     name          => "NACL",
\&     access_list   => [\*(Aq10.0.0.1\*(Aq, \*(Aq20.0.0.0/24\*(Aq],
\&     comment       => "Script Generated",
\&     );
\& unless ($nacl) {
\&        die("Construct object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "The object created successfully\en";
\&
\& #Adding the object to appliance through session
\& my $response = $session\->add( $nacl );
\&
\& unless ($response) {
\&     die("Add object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"The object was added successfully \en";
.Ve
.PP
\&\fB#Search for the object\fR
.PP
.Vb 4
\&  my @retrieved_objs = $session\->search(
\&      object => "Infoblox::Grid::NamedACL",
\&      name   => ".*");
\&  my $object = $retrieved_objs[0];
\&
\&  unless ($object) {
\&         die("Search the object failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Search the object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify the object\fR
.PP
.Vb 6
\& #Get the object through session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::NamedACL",
\&     name   => "NACL"
\&     );
\& my $nacl = $retrieved_objs[0];
\&
\& unless ($nacl) {
\&     die("Get the object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Retrieved the object successfully \en";
\&
\& # Modify one of the attributes of selected object.
\&
\& $nacl\->comment("Modified object");
\&
\& #Applying the changes
\& $session\->modify($nacl)
\&    or die("Modify the object failed",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print"The object was modified successfully \en";
.Ve
.PP
\&\fB#Remove the object\fR
.PP
.Vb 6
\& #Get the object through session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::NamedACL",
\&     name   => "NACL"
\&     );
\& my $desired_nacl = $retrieved_objs[0];
\&
\& unless ($desired_nacl) {
\&     die("Get the object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Retrieved the object successfully \en";
\&
\& #Submit the object for removal
\& $session\->remove( $desired_nacl )
\&     or die("Remove the object failed",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print"The object was removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DNS::TSIGKey, Infoblox::Grid::ExtensibleAttributeDef
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
