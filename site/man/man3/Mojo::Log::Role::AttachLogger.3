.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::Log::Role::AttachLogger 3"
.TH Mojo::Log::Role::AttachLogger 3 "2020-03-31" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Log::Role::AttachLogger \- Use other loggers for Mojo::Log
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Mojo::Log;
\&  my $log = Mojo::Log\->with_roles(\*(Aq+AttachLogger\*(Aq)\->new\->unsubscribe(\*(Aqmessage\*(Aq);
\&  
\&  # Log::Any
\&  use Log::Any::Adapter {category => \*(AqMojo::Log\*(Aq}, \*(AqSyslog\*(Aq;
\&  $log\->attach_logger(\*(AqLog::Any\*(Aq, \*(AqSome::Category\*(Aq);
\&  
\&  # Log::Contextual
\&  use Log::Contextual::WarnLogger;
\&  use Log::Contextual \-logger => Log::Contextual::WarnLogger\->new({env_prefix => \*(AqMYAPP\*(Aq});
\&  $log\->attach_logger(\*(AqLog::Contextual\*(Aq);
\&  
\&  # Log::Dispatch
\&  use Log::Dispatch;
\&  my $logger = Log::Dispatch\->new(outputs => [\*(AqFile::Locked\*(Aq,
\&    min_level => \*(Aqwarning\*(Aq,
\&    filename  => \*(Aq/path/to/file.log\*(Aq,
\&    mode      => \*(Aqappend\*(Aq,
\&    newline   => 1,
\&    callbacks => sub { my %p = @_; \*(Aq[\*(Aq . localtime() . \*(Aq] \*(Aq . $p{message} },
\&  ]);
\&  $log\->attach_logger($logger);
\&  
\&  # Log::Dispatchouli
\&  use Log::Dispatchouli;
\&  my $logger = Log::Dispatchouli\->new({ident => \*(AqMyApp\*(Aq, facility => \*(Aqdaemon\*(Aq, to_file => 1});
\&  $log\->attach_logger($logger);
\&  
\&  # Log::Log4perl
\&  use Log::Log4perl;
\&  Log::Log4perl\->init(\*(Aq/path/to/log.conf\*(Aq);
\&  $log\->attach_logger(\*(AqLog::Log4perl\*(Aq, \*(AqSome::Category\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Log::Role::AttachLogger is a Role::Tiny role for Mojo::Log that
redirects log messages to an external logging framework. \*(L"attach_logger\*(R"
currently recognizes the strings \f(CW\*(C`Log::Any\*(C'\fR, \f(CW\*(C`Log::Contextual\*(C'\fR,
\&\f(CW\*(C`Log::Log4perl\*(C'\fR, and objects of the classes \f(CW\*(C`Log::Any::Proxy\*(C'\fR,
\&\f(CW\*(C`Log::Dispatch\*(C'\fR, \f(CW\*(C`Log::Dispatchouli\*(C'\fR, and \f(CW\*(C`Mojo::Log\*(C'\fR.
.PP
The default \*(L"message\*(R" in Mojo::Log event handler is not suppressed by
\&\*(L"attach_logger\*(R", so if you want to suppress the default behavior, you
should unsubscribe from the message event first. Unsubscribing from the message
event will also remove any loggers attached by \*(L"attach_logger\*(R".
.PP
Since Mojolicious 8.06, the \*(L"message\*(R" in Mojo::Log event will not be sent
for messages below the log level set in the Mojo::Log object, so the
attached logger will only receive log messages exceeding the configured level.
.PP
Mojolicious::Plugin::Log::Any can be used to attach a logger to the
Mojolicious application logger and suppress the default message event
handler.
.SH "METHODS"
.IX Header "METHODS"
Mojo::Log::Role::AttachLogger composes the following methods.
.SS "attach_logger"
.IX Subsection "attach_logger"
.Vb 1
\&  $log = $log\->attach_logger($logger, $options);
.Ve
.PP
Subscribes to \*(L"message\*(R" in Mojo::Log and passes log messages to the given
logging framework or object. The second argument is optionally a category
(default \f(CW\*(C`Mojo::Log\*(C'\fR) or hashref of options. The log level will be prepended
to the message in square brackets (except when passing to another Mojo::Log
object, or \*(L"prepend_level\*(R" is false).
.PP
The following loggers are recognized:
.IP "Log::Any" 4
.IX Item "Log::Any"
The string \f(CW\*(C`Log::Any\*(C'\fR will use a global Log::Any logger with the specified
category (defaults to \f(CW\*(C`Mojo::Log\*(C'\fR).
.IP "Log::Any::Proxy" 4
.IX Item "Log::Any::Proxy"
A Log::Any::Proxy object can be passed directly and will be used for logging
in the standard manner, using the object's existing category.
.IP "Log::Contextual" 4
.IX Item "Log::Contextual"
The string \f(CW\*(C`Log::Contextual\*(C'\fR will use the global Log::Contextual logger.
Package loggers are not supported. Note that \*(L"with_logger\*(R" in Log::Contextual
may be difficult to use with Mojolicious logging due to the asynchronous
nature of the dispatch cycle.
.IP "Log::Dispatch" 4
.IX Item "Log::Dispatch"
A Log::Dispatch object can be passed to be used for logging. The \f(CW\*(C`fatal\*(C'\fR
log level will be mapped to \f(CW\*(C`critical\*(C'\fR.
.IP "Log::Dispatchouli" 4
.IX Item "Log::Dispatchouli"
A Log::Dispatchouli object can be passed to be used for logging. The
\&\f(CW\*(C`fatal\*(C'\fR log level will log messages even if the object is \f(CW\*(C`muted\*(C'\fR, but an
exception will not be thrown as \*(L"log_fatal\*(R" in Log::Dispatchouli normally does.
.IP "Log::Log4perl" 4
.IX Item "Log::Log4perl"
The string \f(CW\*(C`Log::Log4perl\*(C'\fR will use a global Log::Log4perl logger with the
specified category (defaults to \f(CW\*(C`Mojo::Log\*(C'\fR).
.IP "Mojo::Log" 4
.IX Item "Mojo::Log"
Another Mojo::Log object can be passed to be used for logging.
.PP
The following options are supported:
.IP "category" 4
.IX Item "category"
Category name (defaults to Mojo::Log).
.IP "prepend_level" 4
.IX Item "prepend_level"
Prepend the log level to messages in the form \f(CW\*(C`[$level]\*(C'\fR (default for
non\-Mojo::Log loggers). Set false to disable.
.SH "BUGS"
.IX Header "BUGS"
Report any issues on the public bugtracker.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dan Book <dbook@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2017 by Dan Book.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojo::Log, Log::Any, Log::Contextual, Log::Dispatch,
Log::Dispatchouli, Log::Log4perl
