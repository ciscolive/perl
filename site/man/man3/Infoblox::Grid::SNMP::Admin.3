.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::SNMP::Admin 3"
.TH Infoblox::Grid::SNMP::Admin 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::SNMP::Admin \- Manages a SNMP Admin object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1SNMP\s0 (Simple Network Management Protocol) is a protocol that administrators use to manage network devices and
monitor their processes. An SNMP-managed appliance, such as an Infoblox appliance, has an \s-1SNMP\s0 agent that collects data and stores them as objects in MIBs (Management Information Bases).
You can configure an Infoblox appliance as an SNMP-managed appliance. Infoblox appliances support \s-1SNMP\s0 versions 1, 2, and 3. You can enter values for sysContact, sysLocation, sysName, sysDescr managed objects in MIB-II, the standard \s-1MIB\s0 defined in \s-1RFC 1213.\s0
Once these values are set on the appliance, the administrators can send queries for these values from management systems that are allowed to send queries to the appliance.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
For \s-1SNMP\s0 Admin objects used as part of an \s-1HA\s0 pair
.PP
.Vb 10
\& my $snmp = Infoblox::Grid::SNMP::Admin\->new(
\&     sysContact_node1  => $string,      #Optional / Default is empty
\&     sysDescr_node1    => $string,      #Optional / Default is empty
\&     sysLocation_node1 => $string,  #Optional / Default is empty
\&     sysName_node1     => $string,  #Optional / Default is hostname of appliance
\&     sysContact_node2  => $string,      #Optional / Default is empty
\&     sysDescr_node2    => $string,      #Optional / Default is empty
\&     sysLocation_node2 => $string,  #Optional / Default is empty
\&     sysName_node2     => $string,  #Optional / Default is hostname of appliance
\&  );
.Ve
.PP
otherwise
.PP
.Vb 6
\& my $snmp = Infoblox::Grid::SNMP::Admin\->new(
\&     sysContact  => $string,  #Optional / Default is empty
\&     sysDescr    => $string,  #Optional / Default is empty
\&     sysLocation => $string,  #Optional / Default is empty
\&     sysName     => $string,  #Optional / Default is hostname of appliance
\&  );
.Ve
.PP
When the \s-1SNMP\s0 Admin object is not used as part of an \s-1HA\s0 pair, sysContact/sysContact_node1, sysDescr/sysDescr_node1, ... are equivalent. The _node2 fields will be empty.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to apply to an \s-1SNMP\s0 admin object.
.SS "Infoblox::Grid\->snmp_admin( )"
.IX Subsection "Infoblox::Grid->snmp_admin( )"
.RS 4
Use this function to specify an \s-1SNMP\s0 admin at the grid level. See
Infoblox::Grid\->\fBsnmp_admin()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\&  #Construct an object
\&   my $snmp = Infoblox::Grid::SNMP::Admin\->new(
\&     sysContact  => "Somebody",
\&     sysDescr    => "SunOS noc1 5.6 Generic_105181\-03 sun4u",
\&     sysLocation => "Infoblox Headquarter",
\&     sysName     => "noc1"
\&  );
\&
\&  #Configure snmp at grid level
\&  my $response = $grid\->snmp_admin($snmp);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member\->snmp_admin( )"
.IX Subsection "Infoblox::Grid::Member->snmp_admin( )"
.RS 4
Use this function to specify an \s-1SNMP\s0 admin at the member level. See Infoblox::Grid::Member\->\fBsnmp_admin()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Construct an object
\&   my $snmp = Infoblox::Grid::SNMP::Admin\->new(
\&     sysContact_node1  => "Somebody",
\&     sysDescr_node1    => "SunOS noc1 5.6 Generic_105181\-03 sun4u",
\&     sysLocation_node1 => "Infoblox Headquarter",
\&     sysName_node1     => "noc1"
\& );
\&
\& # Configure snmp at member level
\& $member\->snmp_admin($snmp);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of an \s-1SNMP\s0 admin object.
.SS "sysContact( )"
.IX Subsection "sysContact( )"
.RS 4
Use this method to set or retrieve the name of the contact person for the Simple Network Management Protocol (\s-1SNMP\s0) agent host.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the contact person in string format. The maximum length of the name is 50 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get sysContact
\& my $sysContact = $snmp\->sysContact();
\& #Modify sysContact
\& $snmp\->sysContact("Infoblox");
.Ve
.RE
.RS 4
.RE
.SS "sysContact_node1( )"
.IX Subsection "sysContact_node1( )"
.RS 4
Use this method to set or retrieve the name of the contact person for the Simple Network Management Protocol (\s-1SNMP\s0) agent host on node 1 of an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the contact person in string format. The maximum length of the name is 50 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get sysContact_node1
\& my $sysContact_node1 = $snmp\->sysContact_node1();
\& #Modify sysContact_node1
\& $snmp\->sysContact_node1("Infoblox");
.Ve
.RE
.RS 4
.RE
.SS "sysContact_node2( )"
.IX Subsection "sysContact_node2( )"
.RS 4
Use this method to set or retrieve the name of the contact person for the Simple Network Management Protocol (\s-1SNMP\s0) agent host on node 2 of an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the contact person in string format. The maximum length of the name is 50 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get sysContact_node2
\& my $sysContact_node2 = $snmp\->sysContact_node2();
\& #Modify sysContact_node2
\& $snmp\->sysContact_node2("Infoblox");
.Ve
.RE
.RS 4
.RE
.SS "sysDescr( )"
.IX Subsection "sysDescr( )"
.RS 4
Use this method to set or retrieve the name and version \s-1ID\s0 of the system's hardware type, the software Operational System (\s-1OS\s0), and networking software that the appliance is running.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Useful information about the hardware and software described in string format. The maximum length of the sysDescr is 50 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get sysDescr
\& my $sysDescr = $snmp\->sysDescr();
\& #Modify sysDescr
\& $snmp\->sysDescr("SunOS noc2 5.6 Generic_105181\-03 sun5u");
.Ve
.RE
.RS 4
.RE
.SS "sysDescr_node1( )"
.IX Subsection "sysDescr_node1( )"
.RS 4
Use this method to set or retrieve the name and version \s-1ID\s0 of the system's hardware type, the software Operational System (\s-1OS\s0), and networking software that the appliance is running on node 1 of an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Useful information about the hardware and software described in string format. The maximum length of the sysDescr_node1 is 50 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get sysDescr_node1
\& my $sysDescr_node1 = $snmp\->sysDescr_node1();
\& #Modify sysDescr_node1
\& $snmp\->sysDescr_node1("SunOS noc2 5.6 Generic_105181\-03 sun5u");
.Ve
.RE
.RS 4
.RE
.SS "sysDescr_node2( )"
.IX Subsection "sysDescr_node2( )"
.RS 4
Use this method to set or retrieve the name and version \s-1ID\s0 of the system's hardware type, the software Operational System (\s-1OS\s0), and networking software that the appliance is running on node 2 of an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Useful information about the hardware and software described in string format. The maximum length of the sysDescr_node2 is 50 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get sysDescr_node2
\& my $sysDescr_node2 = $snmp\->sysDescr_node2();
\& #Modify sysDescr_node2
\& $snmp\->sysDescr_node2("SunOS noc2 5.6 Generic_105181\-03 sun5u");
.Ve
.RE
.RS 4
.RE
.SS "sysLocation( )"
.IX Subsection "sysLocation( )"
.RS 4
Use this method to set or retrieve the physical location of the appliance.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The physical location of the appliance in string format. The maximum length of the sysLocation is 50 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get sysLocation
\& my $sysLocation = $snmp\->sysLocation();
\& #Modify sysLocation
\& $snmp\->sysLocation("Infoblox Headquarter5");
.Ve
.RE
.RS 4
.RE
.SS "sysLocation_node1( )"
.IX Subsection "sysLocation_node1( )"
.RS 4
Use this method to set or retrieve the physical location of the appliance on node 1 of an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The physical location of the appliance in string format. The maximum length of the sysLocation_node1 is 50 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get sysLocation_node1
\& my $sysLocation_node1 = $snmp\->sysLocation_node1();
\& #Modify sysLocation_node1
\& $snmp\->sysLocation_node1("Infoblox Headquarter5");
.Ve
.RE
.RS 4
.RE
.SS "sysLocation_node2( )"
.IX Subsection "sysLocation_node2( )"
.RS 4
Use this method to set or retrieve the physical location of the appliance on node 2 of an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The physical location of the appliance in string format. The maximum length of the sysLocation_node2 is 50 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get sysLocation_node2
\& my $sysLocation_node2 = $snmp\->sysLocation_node2();
\& #Modify sysLocation_node2
\& $snmp\->sysLocation_node2("Infoblox Headquarter5");
.Ve
.RE
.RS 4
.RE
.SS "sysName( )"
.IX Subsection "sysName( )"
.RS 4
Use this method to set or retrieve the fully qualified domain name (\s-1FQDN\s0) of the appliance.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The fully qualified domain name (\s-1FQDN\s0) of the appliance in string format. The maximum length of the sysName is 50 characters. The default value of sysName is the hostname of the Infoblox appliance.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get sysName
\& my $sysName = $snmp\->sysName();
\& #Modify sysName
\& $snmp\->sysName("Infobloxnoc2");
.Ve
.RE
.RS 4
.RE
.SS "sysName_node1( )"
.IX Subsection "sysName_node1( )"
.RS 4
Use this method to set or retrieve the fully qualified domain name (\s-1FQDN\s0) of the appliance on node 1 of an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The fully qualified domain name (\s-1FQDN\s0) of the appliance in string format. The maximum length of the sysName_node1 is 50 characters. The default value of sysName_node1 is the hostname of the Infoblox appliance.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get sysName_node1
\& my $sysName_node1 = $snmp\->sysName_node1();
\& #Modify sysName_node1
\& $snmp\->sysName_node1("Infobloxnoc2");
.Ve
.RE
.RS 4
.RE
.SS "sysName_node2( )"
.IX Subsection "sysName_node2( )"
.RS 4
Use this method to set or retrieve the fully qualified domain name (\s-1FQDN\s0) of the appliance on node 2 of an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The fully qualified domain name (\s-1FQDN\s0) of the appliance in string format. The maximum length of the sysName_node2 is 50 characters. The default value of sysName_node2 is the hostname of the Infoblox appliance.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get sysName_node2
\& my $sysName_node2 = $snmp\->sysName_node2();
\& #Modify sysName_node2
\& $snmp\->sysName_node2("Infobloxnoc2");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, modify and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to an \s-1SNMP\s0 admin object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Creating an \s-1SNMP\s0 admin object\fR
.PP
.Vb 11
\& my $snmp = Infoblox::Grid::SNMP::Admin\->new(
\&     sysContact  => "Somebody",
\&     sysDescr    => "SunOS noc1 5.6 Generic_105181\-03 sun4u",
\&     sysLocation => "Infoblox Headquarter",
\&     sysName     => "noc1"
\&     );
\& unless($snmp) {
\&      die("Construct a SNMP Admin failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "SNMP Admin object created successfully\en";
.Ve
.PP
\&\fB#Getting the grid object from the appliance through session\fR
.PP
.Vb 4
\&  my @result = $session\->get(
\&     object => "Infoblox::Grid",
\&     name   => "Infoblox"
\&     );
\&
\& my $grid = $result[0];
\& unless ($grid) {
\&        die("Get Grid object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Grid object found at least 1 matching entry\en";
\&
\&       #Modifying the value of the specified object.
\&         $grid\->snmp_admin($snmp);  #Applying the changes.
\&         $session\->modify($grid);
\&         print "SNMP Admin modified successfully\en";
.Ve
.PP
\&\fB#Modify \s-1SNMP\s0 admin attribute sysName\fR
.PP
.Vb 2
\&  #Modify existing attribute sysName
\&  $snmp\->sysName("noc2.infoblox.com");
\&
\&  #Apply changes to the Grid object.
\&  $grid\->snmp_admin($snmp);
\&
\&  #Update Grid object through the Infoblox session.
\&  $session\->modify($grid)
\&             or die("modify Grid object failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&        print "Modified SNMP Admin sysName of Grid object successful\en";
.Ve
.PP
\&\fB#Remove \s-1SNMP\s0 admin attribute from Grid object\fR
.PP
.Vb 2
\&  #Apply changes to the Grid object to Un\-def SNMP Admin object.
\&  $grid\->snmp_admin(undef);
\&
\&  #Update Grid object through the Infoblox session.
\&  $session\->modify($grid)
\&             or die("Remove SNMP Admin from Grid object failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&        print "Removed SNMP Admin from Grid object successful\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Grid
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
