.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mnet::Opts::Set 3"
.TH Mnet::Opts::Set 3 "2019-10-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mnet::Opts::Set \- Check for loaded Mnet::Opts::Set pragma sub\-modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Mnet::Opts::Set;
\&    $opts = Mnet::Opts::Set::pragmas();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module can be used to check what Mnet::Opts::Set pragma sub-modules are
currently loaded.
.PP
Scripts should not need to use or call this module. Normally scripts would use
the Mnet::Opts and Mnet::Opts::Cli modules, which handle checking the
status of Mnet::Opts::Set pragma sub-modules.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Mnet::Opts::Set implements the functions listed below.
.SS "Mnet::Opts::Set::pragmas"
.IX Subsection "Mnet::Opts::Set::pragmas"
.Vb 1
\&    $opts = Mnet::Opts::Set::pragmas()
.Ve
.PP
This function returns a hash containing true values for any Mnet::Opts::Set
pragma sub-modules that have been loaded with the perl 'use' command.
.PP
Refer to the \s-1SEE ALSO\s0 section of this document for a list of these sub-modules.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mnet
.PP
Mnet::Opts
.PP
Mnet::Opts::Cli
.PP
Mnet::Opts::Set::Debug
.PP
Mnet::Opts::Set::Quiet
.PP
Mnet::Opts::Set::Silent
