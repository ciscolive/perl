.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::Layer3::HP9300 3"
.TH SNMP::Info::Layer3::HP9300 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::Layer3::HP9300 \- SNMP Interface to HP Foundry OEM Network Devices
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Miller
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& # Let SNMP::Info determine the correct subclass for you.
\& my $hp9300 = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class = $hp9300\->class();
\&
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Abstraction subclass for \s-1HP\s0 network devices which Foundry Networks was the
Original Equipment Manufacturer (\s-1OEM\s0) such as the \s-1HP\s0 ProCurve 9300 series.
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.IP "SNMP::Info::Layer3;" 4
.IX Item "SNMP::Info::Layer3;"
.PD 0
.IP "SNMP::Info::FDP;" 4
.IX Item "SNMP::Info::FDP;"
.PD
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fIHP-SN-ROOT-MIB\fR" 4
.IX Item "HP-SN-ROOT-MIB"
.PD 0
.IP "\fIHP-SN-AGENT-MIB\fR" 4
.IX Item "HP-SN-AGENT-MIB"
.IP "\fIHP-SN-SWITCH-GROUP-MIB\fR" 4
.IX Item "HP-SN-SWITCH-GROUP-MIB"
.IP "Inherited Classes' MIBs" 4
.IX Item "Inherited Classes' MIBs"
.PD
See \*(L"Required MIBs\*(R" in SNMP::Info::Layer3 for its own \s-1MIB\s0 requirements.
.Sp
See \*(L"Required MIBs\*(R" in SNMP::Info::FDP for its own \s-1MIB\s0 requirements.
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP\s0
.ie n .IP "$hp9300\->\fBmodel()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBmodel()\fR" 4
.IX Item "$hp9300->model()"
Returns model type.  Checks \f(CW$hp9300\fR\->\fBid()\fR against the \fIHP-SN-ROOT-MIB\fR
and removes \f(CW\*(C`hpSwitch\*(C'\fR.
.ie n .IP "$hp9300\->\fBvendor()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBvendor()\fR" 4
.IX Item "$hp9300->vendor()"
Returns 'hp'
.ie n .IP "$hp9300\->\fBos()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBos()\fR" 4
.IX Item "$hp9300->os()"
Returns 'hp'
.ie n .IP "$hp9300\->\fBos_ver()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBos_ver()\fR" 4
.IX Item "$hp9300->os_ver()"
Returns the software version.
.ie n .IP "$hp9300\->\fBmac()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBmac()\fR" 4
.IX Item "$hp9300->mac()"
Returns \s-1MAC\s0 Address of root port.
.Sp
(\f(CW\*(C`ifPhysAddress.1\*(C'\fR)
.ie n .IP "$hp9300\->\fBchassis()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBchassis()\fR" 4
.IX Item "$hp9300->chassis()"
Returns Chassis type.
.Sp
(\f(CW\*(C`entPhysicalDescr.1\*(C'\fR)
.ie n .IP "$hp9300\->\fBserial()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBserial()\fR" 4
.IX Item "$hp9300->serial()"
Returns serial number of device.
.ie n .IP "$hp9300\->\fBtemp()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBtemp()\fR" 4
.IX Item "$hp9300->temp()"
Returns the chassis temperature
.Sp
(\f(CW\*(C`snChasActualTemperature\*(C'\fR)
.ie n .IP "$hp9300\->\fBps1_type()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBps1_type()\fR" 4
.IX Item "$hp9300->ps1_type()"
Returns the Description for the power supply
.Sp
(\f(CW\*(C`snChasPwrSupplyDescription.1\*(C'\fR)
.ie n .IP "$hp9300\->\fBps1_status()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBps1_status()\fR" 4
.IX Item "$hp9300->ps1_status()"
Returns the status of the power supply.
.Sp
(\f(CW\*(C`snChasPwrSupplyOperStatus.1\*(C'\fR)
.ie n .IP "$hp9300\->\fBfan()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBfan()\fR" 4
.IX Item "$hp9300->fan()"
Returns the status of the chassis fan.
.Sp
(\f(CW\*(C`snChasFanOperStatus.1\*(C'\fR)
.SS "Global Methods imported from SNMP::Info::Layer3"
.IX Subsection "Global Methods imported from SNMP::Info::Layer3"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::Layer3 for details.
.SS "Global Methods imported from SNMP::Info::FDP"
.IX Subsection "Global Methods imported from SNMP::Info::FDP"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::FDP for details.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$hp9300\->\fBinterfaces()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBinterfaces()\fR" 4
.IX Item "$hp9300->interfaces()"
Returns reference to hash of interface names to iids.
.ie n .IP "$hp9300\->\fBi_ignore()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBi_ignore()\fR" 4
.IX Item "$hp9300->i_ignore()"
Returns reference to hash of interfaces to be ignored.
.Sp
Ignores interfaces with descriptions of  tunnel,loopback,null
.ie n .IP "$hp9300\->\fBi_duplex()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBi_duplex()\fR" 4
.IX Item "$hp9300->i_duplex()"
Returns reference to hash of interface link duplex status.
.Sp
Crosses \f(CW$hp9300\fR\->\fBsw_duplex()\fR with \f(CW$hp9300\fR\->\fBsw_index()\fR
.ie n .SS "Switch Port Information Table (""snSwPortIfTable"")"
.el .SS "Switch Port Information Table (\f(CWsnSwPortIfTable\fP)"
.IX Subsection "Switch Port Information Table (snSwPortIfTable)"
.ie n .IP "$hp9300\->\fBsw_index()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBsw_index()\fR" 4
.IX Item "$hp9300->sw_index()"
Returns reference to hash.  Maps Table to Interface \s-1IID.\s0
.Sp
(\f(CW\*(C`snSwPortIfIndex\*(C'\fR)
.ie n .IP "$hp9300\->\fBsw_duplex()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBsw_duplex()\fR" 4
.IX Item "$hp9300->sw_duplex()"
Returns reference to hash.   Current duplex status for switch ports.
.Sp
(\f(CW\*(C`snSwPortInfoChnMode\*(C'\fR)
.ie n .IP "$hp9300\->\fBsw_type()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBsw_type()\fR" 4
.IX Item "$hp9300->sw_type()"
Returns reference to hash.  Current Port Type .
.Sp
(\f(CW\*(C`snSwPortInfoMediaType\*(C'\fR)
.ie n .IP "$hp9300\->\fBsw_speed()\fR" 4
.el .IP "\f(CW$hp9300\fR\->\fBsw_speed()\fR" 4
.IX Item "$hp9300->sw_speed()"
Returns reference to hash.  Current Port Speed.
.Sp
(\f(CW\*(C`snSwPortInfoSpeed\*(C'\fR)
.SS "Table Methods imported from SNMP::Info::Layer3"
.IX Subsection "Table Methods imported from SNMP::Info::Layer3"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::Layer3 for details.
.SS "Table Methods imported from SNMP::Info::FDP"
.IX Subsection "Table Methods imported from SNMP::Info::FDP"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::FDP for details.
