.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Firefox::Application 3"
.TH Firefox::Application 3 "2018-10-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Firefox::Application \- inspect and automate the Firefox UI
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Firefox::Application;
\&  my $ff = Firefox::Application\->new();
.Ve
.PP
This module will let you automate Firefox through the
Mozrepl plugin. You need to have installed
that plugin in your Firefox.
.PP
For more examples see WWW::Mechanize::Firefox::Examples.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """Firefox::Application\->new( %args )"""
.el .SS "\f(CWFirefox::Application\->new( %args )\fP"
.IX Subsection "Firefox::Application->new( %args )"
.Vb 2
\&  use Firefox::Application;
\&  my $ff = Firefox::Application\->new();
.Ve
.PP
Creates a new instance and connects it to Firefox.
.PP
Note that Firefox must have the \f(CW\*(C`mozrepl\*(C'\fR
extension installed and enabled.
.PP
The following options are recognized:
.IP "\(bu" 4
\&\f(CW\*(C`launch\*(C'\fR \- name of the program to launch if we can't connect to it on
the first try.
.IP "\(bu" 4
\&\f(CW\*(C`log\*(C'\fR \- array reference to log levels, passed through to MozRepl::RemoteObject
.IP "\(bu" 4
\&\f(CW\*(C`bufsize\*(C'\fR \- Net::Telnet buffer size, if the default of 1MB is not enough
.IP "\(bu" 4
\&\f(CW\*(C`repl\*(C'\fR \- a premade MozRepl::RemoteObject instance or a connection string
suitable for initializing one.
.IP "\(bu" 4
\&\f(CW\*(C`use_queue\*(C'\fR \- whether to enable MozRepl::RemoteObject command queueing
.IP "\(bu" 4
\&\f(CW\*(C`api\*(C'\fR \- class for the \s-1API\s0 wrapper
.Sp
You almost never want to use this parameter, as Firefox::Application
asks Firefox about its version.
.ie n .SS """$ff\->repl"""
.el .SS "\f(CW$ff\->repl\fP"
.IX Subsection "$ff->repl"
.Vb 1
\&  my ($value,$type) = $ff\->repl\->expr(\*(Aq2+2\*(Aq);
.Ve
.PP
Gets the MozRepl::RemoteObject instance that is used.
.SH "APPLICATION INFORMATION"
.IX Header "APPLICATION INFORMATION"
.ie n .SS """$ff\->appinfo"""
.el .SS "\f(CW$ff\->appinfo\fP"
.IX Subsection "$ff->appinfo"
.Vb 4
\&    my $info = $ff\->appinfo;
\&    print \*(AqID      : \*(Aq, $info\->{ID};
\&    print \*(Aqname    : \*(Aq, $info\->{name};
\&    print \*(Aqversion : \*(Aq, $info\->{version};
.Ve
.PP
Returns information about Firefox.
.ie n .SS """$ff\->addons( %args )"""
.el .SS "\f(CW$ff\->addons( %args )\fP"
.IX Subsection "$ff->addons( %args )"
.Vb 5
\&  for my $addon ($ff\->addons) {
\&      print sprintf "Name: %s\en", $addon\->{name};
\&      print sprintf "Version: %s\en", $addon\->{version};
\&      print sprintf "GUID: %s\en", $addon\->{id};
\&  };
.Ve
.PP
Returns the list of installed addons as \f(CW\*(C`nsIUpdateItem\*(C'\fRs (\s-1FF 3.5+\s0)
or \f(CW\*(C`Addon\*(C'\fRs (\s-1FF4+\s0).
See <https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIUpdateItem>
or <https://developer.mozilla.org/en/Addons/Add\-on_Manager/Addon>,
depending on your Firefox version.
.ie n .SS """$ff\->locales( %args )"""
.el .SS "\f(CW$ff\->locales( %args )\fP"
.IX Subsection "$ff->locales( %args )"
.Vb 5
\&  for my $locale ($ff\->locales) {
\&      print sprintf "Name: %s\en", $locale\->{name};
\&      print sprintf "Version: %s\en", $locale\->{version};
\&      print sprintf "GUID: %s\en", $locale\->{id};
\&  };
.Ve
.PP
Returns the list of installed locales as \f(CW\*(C`nsIUpdateItem\*(C'\fRs.
.ie n .SS """$ff\->themes( %args )"""
.el .SS "\f(CW$ff\->themes( %args )\fP"
.IX Subsection "$ff->themes( %args )"
.Vb 5
\&  for my $theme ($ff\->themes) {
\&      print sprintf "Name: %s\en", $theme\->{name};
\&      print sprintf "Version: %s\en", $theme\->{version};
\&      print sprintf "GUID: %s\en", $theme\->{id};
\&  };
.Ve
.PP
Returns the list of installed locales as \f(CW\*(C`nsIUpdateItem\*(C'\fRs.
.ie n .SS """$ff\->updateitems( %args )"""
.el .SS "\f(CW$ff\->updateitems( %args )\fP"
.IX Subsection "$ff->updateitems( %args )"
.Vb 5
\&  for my $item ($ff\->updateitems) {
\&      print sprintf "Name: %s\en", $item\->{name};
\&      print sprintf "Version: %s\en", $item\->{version};
\&      print sprintf "GUID: %s\en", $item\->{id};
\&  };
.Ve
.PP
Returns the list of updateable items. The type of item
can be restricted by the \f(CW\*(C`type\*(C'\fR option.
.IP "\(bu" 4
\&\f(CW\*(C`type\*(C'\fR \- type of items to fetch
.Sp
\&\f(CW\*(C`ANY\*(C'\fR \- fetch any item
.Sp
\&\f(CW\*(C`ADDON\*(C'\fR \- fetch add-ons
.Sp
\&\f(CW\*(C`LOCALE\*(C'\fR \- fetch locales
.Sp
\&\f(CW\*(C`THEME\*(C'\fR \- fetch themes
.ie n .SS """$ff\->current_profile"""
.el .SS "\f(CW$ff\->current_profile\fP"
.IX Subsection "$ff->current_profile"
.Vb 1
\&    print $ff\->current_profile\->{name}, "\en";
.Ve
.PP
Returns currently selected profile as \f(CW\*(C`nsIToolkitProfile\*(C'\fR.
.PP
See <https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIToolkitProfile>.
.ie n .SS """$ff\->find_profile( $name )"""
.el .SS "\f(CW$ff\->find_profile( $name )\fP"
.IX Subsection "$ff->find_profile( $name )"
.Vb 1
\&    print $ff\->find_profile("")\->{localDir}, "\en";
.Ve
.PP
Returns the profile given its name. Dies
if the profile cannot be found.
.ie n .SS """$ff\->profiles"""
.el .SS "\f(CW$ff\->profiles\fP"
.IX Subsection "$ff->profiles"
.Vb 3
\&    for ($ff\->profiles) {
\&        print "Profile: ", $_\->{name}, "\en";
\&    }
.Ve
.PP
Lists the installed profiles as \f(CW\*(C`nsIToolkitProfile\*(C'\fRs.
.PP
See <https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIToolkitProfile>.
.SH "UI METHODS"
.IX Header "UI METHODS"
.ie n .SS """$ff\->addTab( %options )"""
.el .SS "\f(CW$ff\->addTab( %options )\fP"
.IX Subsection "$ff->addTab( %options )"
.Vb 1
\&    my $new = $ff\->addTab();
.Ve
.PP
Creates a new tab and returns it.
The tab will be automatically closed upon program exit.
.PP
If you want the tab to remain open, pass a false value to the the \f(CW\*(C` autoclose \*(C'\fR
option.
.PP
The recognized options are:
.IP "\(bu" 4
\&\f(CW\*(C`repl\*(C'\fR \- the repl to use. By default it will use \f(CW\*(C`$ff\->repl\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`autoclose\*(C'\fR \- whether to automatically close the tab at program exit. Default is
to close the tab.
.ie n .SS """$ff\->selectedTab( %options )"""
.el .SS "\f(CW$ff\->selectedTab( %options )\fP"
.IX Subsection "$ff->selectedTab( %options )"
.Vb 1
\&    my $curr = $ff\->selectedTab();
.Ve
.PP
Sets the currently active tab.
.ie n .SS """$ff\->closeTab( $tab [,$repl] )"""
.el .SS "\f(CW$ff\->closeTab( $tab [,$repl] )\fP"
.IX Subsection "$ff->closeTab( $tab [,$repl] )"
.Vb 1
\&    $ff\->closeTab( $tab );
.Ve
.PP
Close the given tab.
.ie n .SS """$ff\->openTabs( [$repl] )"""
.el .SS "\f(CW$ff\->openTabs( [$repl] )\fP"
.IX Subsection "$ff->openTabs( [$repl] )"
.Vb 3
\&    my @tab_info = $ff\->openTabs();
\&    print "$_\->{title}, $_\->{location}, \en"
\&        for @tab_info;
.Ve
.PP
Returns a list of information about the currently open tabs.
.ie n .SS """$ff\->activateTab( [ $tab [, $repl ]] )"""
.el .SS "\f(CW$ff\->activateTab( [ $tab [, $repl ]] )\fP"
.IX Subsection "$ff->activateTab( [ $tab [, $repl ]] )"
.Vb 1
\&    $ff\->activateTab( $mytab ); # bring to foreground
.Ve
.PP
Activates the tab passed in.
.ie n .SS """$ff\->browser( [$repl] )"""
.el .SS "\f(CW$ff\->browser( [$repl] )\fP"
.IX Subsection "$ff->browser( [$repl] )"
.Vb 1
\&    my $b = $ff\->browser();
.Ve
.PP
Returns the current Firefox browser instance, or opens a new browser
window if none is available, and returns its browser instance.
.PP
If you need to call this as a class method, pass in the MozRepl::RemoteObject
bridge to use.
.ie n .SS """$ff\->getMostRecentWindow"""
.el .SS "\f(CW$ff\->getMostRecentWindow\fP"
.IX Subsection "$ff->getMostRecentWindow"
Returns the most recently used Firefox window.
.ie n .SS """$ff\->set_tab_content( $tab, $html [,$repl] )"""
.el .SS "\f(CW$ff\->set_tab_content( $tab, $html [,$repl] )\fP"
.IX Subsection "$ff->set_tab_content( $tab, $html [,$repl] )"
.Vb 1
\&    $ff\->set_tab_content(\*(Aq<html><h1>Hello</h1></html>\*(Aq);
.Ve
.PP
This is a more general method that allows you to replace
the \s-1HTML\s0 of an arbitrary tab, and not only the tab that
WWW::Mechanize::Firefox is associated with.
.PP
It has the flaw of not waiting until the tab has
loaded.
.ie n .SS """$ff\->quit( %options )"""
.el .SS "\f(CW$ff\->quit( %options )\fP"
.IX Subsection "$ff->quit( %options )"
.Vb 2
\&  $ff\->quit( restart => 1 ); # restart
\&  $ff\->quit(); # quit
.Ve
.PP
Quits or restarts the application
.ie n .SS """$ff\->bool_ff_to_perl $val"""
.el .SS "\f(CW$ff\->bool_ff_to_perl $val\fP"
.IX Subsection "$ff->bool_ff_to_perl $val"
Normalizes the (checkbox) truth value \f(CW$val\fR to 1 or 0.
.PP
Different Firefox versions return \f(CW\*(C`true\*(C'\fR or \f(CW\*(C`false\*(C'\fR
as the checkbox values. This function converts
a Firefox checkbox value to 1 or 0.
.ie n .SS """$ff\->bool_perl_to_ff $val"""
.el .SS "\f(CW$ff\->bool_perl_to_ff $val\fP"
.IX Subsection "$ff->bool_perl_to_ff $val"
Normalizes the truth value \f(CW$val\fR to 1 or 0.
.PP
Different Firefox versions want \f(CW\*(C`true\*(C'\fR or \f(CW\*(C`false\*(C'\fR
as the checkbox values. This function converts
a Perl truth value to 1 or 0 respectively \f(CW\*(C`true\*(C'\fR or \f(CW\*(C`false\*(C'\fR,
depending on what Firefox wants.
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
Consider how to roll <http://kb.mozillazine.org/Command_line_arguments>
into this module for convenient / versatile launching of Firefox
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR
.SH "COPYRIGHT (c)"
.IX Header "COPYRIGHT (c)"
Copyright 2009\-2013 by Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
This module is released under the same terms as Perl itself.
