.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BigIP::iControl 3"
.TH BigIP::iControl 3 "2015-11-02" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BigIP::iControl \- A Perl interface to the F5 iControl API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use BigIP::iControl;
\&
\&        my $ic = BigIP::iControl\->new(
\&                                server          => \*(Aqbigip.company.com\*(Aq,
\&                                username        => \*(Aqapi_user\*(Aq,
\&                                password        => \*(Aqmy_password\*(Aq,
\&                                port            => 443,
\&                                proto           => \*(Aqhttps\*(Aq
\&                        );
\&
\&        my $virtual     = ($ic\->get_vs_list())[0];
\&
\&        my %stats       = $ic\->get_vs_statistics_stringified($virtual);;
\&
\&        print \*(Aq*\*(Aqx50,"\enVirtual: $virtual\en",\*(Aq*\*(Aqx50,"\enTimestamp: $stats{timestamp}\en";
\&
\&        foreach my $s (sort keys %{$stats{stats}}) {
\&                print "$s\et$stats{stats}{$s}\en"
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides a Perl interface to the F5 BigIP iControl \s-1API.\s0
.PP
The F5 BigIP iControl \s-1API\s0 is an open \s-1SOAP/XML\s0 for communicating with supported F5 BigIP products.
.PP
The primary aim of this package is to provide a simplified interface to an already simple and
intutive \s-1API\s0 and to allow the user to do more with less code.  By reducing the \s-1API\s0 invocations
to methods returning simple types, it is hoped that this module will provide a simple alternative
for common tasks.
.PP
The secondary aim for this package is to provide a simple interface for accessing statistical
data from the iControl \s-1API\s0 for monitoring, recording, archival and display in other systems.
This objective has largely been obsoleted in v11 with the introduction of new statistical
monitoring and display features in the web \s-1UI.\s0
.PP
This package generally provides two methods for each each task; a raw method typically returning
the response as received from iControl, and a \*(L"stringified\*(R" method returning a parsed response.
.PP
In general, the stringified methods will typically fufill most requirements and should usually
be easier to use.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
\fInew (%args)\fR
.IX Subsection "new (%args)"
.PP
.Vb 8
\&        my $ic = BigIP::iControl\->new(
\&                                server          => \*(Aqbigip.company.com\*(Aq,
\&                                username        => \*(Aqapi_user\*(Aq,
\&                                password        => \*(Aqmy_password\*(Aq,
\&                                port            => 443,
\&                                proto           => \*(Aqhttps\*(Aq,
\&                                verify_hostname => 0
\&                        );
.Ve
.PP
Constructor method.  Creates a new BigIP::iControl object representing a single interface into the iControl 
\&\s-1API\s0 of the target system.
.PP
Required parameters are:
.IP "server" 3
.IX Item "server"
The target F5 \s-1BIGIP\s0 device.  The supplied value may be either an \s-1IP\s0 address, \s-1FQDN\s0 or resolvable hostname.
.IP "username" 3
.IX Item "username"
The username with which to connect to the iControl \s-1API.\s0
.IP "password" 3
.IX Item "password"
The password with which to connect to the iControl \s-1API.\s0
.IP "port" 3
.IX Item "port"
The port on which to connect to the iControl \s-1API.\s0  If not specified this value will default to 443.
.IP "proto" 3
.IX Item "proto"
The protocol with to use for communications with the iControl \s-1API\s0 (should be either http or https).  If not specified
this value will default to https.
.IP "verify_hostname" 3
.IX Item "verify_hostname"
If \s-1TRUE\s0 when used with a secure connection then the client will ensure that the target server has a valid certificate 
matching the expected hostname.
.PP
\fIget_system_information\fR
.IX Subsection "get_system_information"
.PP
Return a SystemInformation struct containing the identifying attributes of the operating system.
The struct information is described below;
.PP
.Vb 10
\&        Member                                  Type            Description
\&        \-\-\-\-\-\-\-\-\-\-                              \-\-\-\-\-\-\-\-\-\-      \-\-\-\-\-\-\-\-\-\-
\&        system_name                             String          The name of the operating system implementation.
\&        host_name                               String          The host name of the system.
\&        os_release                              String          The release level of the operating system.
\&        os_machine                              String          The hardware platform CPU type.
\&        os_version                              String          The version string for the release of the operating system.
\&        platform                                String          The platform of the device.
\&        product_category                        String          The product category of the device.
\&        chassis_serial                          String          The chassis serial number.
\&        switch_board_serial                     String          The serial number of the switch board.
\&        switch_board_part_revision              String          The part revision number of the switch board.
\&        host_board_serial                       String          The serial number of the host motherboard.
\&        host_board_part_revision                String          The part revision number of the host board.
\&        annunciator_board_serial                String          The serial number of the annuciator board.
\&        annunciator_board_part_revision         String          The part revision number of the annunciator board.
.Ve
.PP
\fIget_system_id ()\fR
.IX Subsection "get_system_id ()"
.PP
Gets the unique identifier for the system.
.PP
\fIget_cpu_metrics ()\fR
.IX Subsection "get_cpu_metrics ()"
.PP
Gets the \s-1CPU\s0 metrics for the \s-1CPU\s0(s) on the platform.
.PP
\fIget_cpu_metrics_stringified ()\fR
.IX Subsection "get_cpu_metrics_stringified ()"
.PP
Gets the \s-1CPU\s0 metrics for the \s-1CPU\s0(s) on the platform.
.PP
\fIget_cpu_fan_speed ($cpu)\fR
.IX Subsection "get_cpu_fan_speed ($cpu)"
.PP
Returns the current \s-1CPU\s0 fan speed in \s-1RPM\s0 for the specified \s-1CPU.\s0
.PP
\fIget_cpu_temp ($cpu)\fR
.IX Subsection "get_cpu_temp ($cpu)"
.PP
Returns the current \s-1CPU\s0 temperature degrees celcius for the specified \s-1CPU.\s0
.PP
\fIget_cpu_usage_extended_information ()\fR
.IX Subsection "get_cpu_usage_extended_information ()"
.PP
\fIget_cpu_usage_extended_information_stringified ()\fR
.IX Subsection "get_cpu_usage_extended_information_stringified ()"
.PP
\fIget_cluster_list ()\fR
.IX Subsection "get_cluster_list ()"
.PP
Gets a list of the cluster names.
.PP
\fIget_failover_mode ()\fR
.IX Subsection "get_failover_mode ()"
.PP
Gets the current fail-over mode that the device is running in.
.PP
\fIget_failover_state ()\fR
.IX Subsection "get_failover_state ()"
.PP
Gets the current fail-over state that the device is running in.
.PP
\fIis_redundant ()\fR
.IX Subsection "is_redundant ()"
.PP
Returns a boolean indicating the redundancy state of the device.
.PP
\fIget_cluster_enabled_state ()\fR
.IX Subsection "get_cluster_enabled_state ()"
.PP
Gets the cluster enabled states.
.PP
\fIget_service_list ()\fR
.IX Subsection "get_service_list ()"
.PP
Returns a list of all supported services on this host.
.PP
\fIget_service_status ()\fR
.IX Subsection "get_service_status ()"
.PP
Returns the status of the specified service.
.PP
\fIget_all_service_statuses ()\fR
.IX Subsection "get_all_service_statuses ()"
.PP
Returns the status of all services.
.PP
\fIsave_configuration ($filename)\fR
.IX Subsection "save_configuration ($filename)"
.PP
.Vb 1
\&        $ic\->save_configuration(\*(Aqbackup.ucs\*(Aq);
\&
\&        # is equivalent to
\&
\&        $ic\->save_configuration(\*(Aqbackup\*(Aq);
\&        
\&        # Not specifying a filename will use today\*(Aqs date in the
\&        # format YYYYMMDD as the filename.
\&
\&        $ic\->save_configuration();
\&
\&        # is equivalent to
\&
\&        $ic\->save_configuration(\*(Aqtoday\*(Aq);
.Ve
.PP
Saves the current configurations on the target device.
.PP
This method takes a single optional parameter; the filename to which the configuration should be saved.  The file
extension \fB.ucs\fR will be suffixed to the filename if missing from the supplied filename.
.PP
Specifying no optional filename parameter or using the filename \fBtoday\fR will use the current date as the filename
of the saved configuration file in the format \fB\s-1YYYYMMDD\s0\fR.
.PP
\fIsave_base_configuration ()\fR
.IX Subsection "save_base_configuration ()"
.PP
.Vb 1
\&        $ic\->save_base_configuration();
.Ve
.PP
Saves only the base configuration (VLANs, self IPs...). The filename specified when used with this mode will 
be ignored, since configuration will be saved to /config/bigip_base.conf by default.
.PP
\fIsave_high_level_configuration ()\fR
.IX Subsection "save_high_level_configuration ()"
.PP
.Vb 1
\&        $ic\->save_high_level_configuration();
.Ve
.PP
Saves only the high-level configuration (virtual servers, pools, members, monitors...). The filename specified 
when used with this mode will be ignored, since configuration will be saved to /config/bigip.conf by default.
.PP
\fIdownload_configuration ($filename)\fR
.IX Subsection "download_configuration ($filename)"
.PP
This method downloads a saved \s-1UCS\s0 configuration from the target device.
.PP
\fIget_configuration_list ()\fR
.IX Subsection "get_configuration_list ()"
.PP
.Vb 1
\&        my %config_list = $ic\->get_configuration_list();
.Ve
.PP
Returns a list of the configuration archives present on the system.  the list is returned as a hash
with the name of the configuration archive as the key, and the creation date of the configuration 
archive as the value.
.PP
The creation date uses the native date format of:
.PP
.Vb 1
\&        Day Mon D HH:MM:SS YYYY
.Ve
.PP
Where \fBDay\fR is the three-letter common abbreviation of the day name, \fBMon\fR is the three letter common
abbreviation of the month name and \fBD\fR has the value range 1\-31 with no leading zeros.
.PP
\fIdelete_configuration ()\fR
.IX Subsection "delete_configuration ()"
.PP
.Vb 1
\&        $ic\->delete_configuration(\*(Aqfile.ucs\*(Aq);
.Ve
.PP
Deletes the specified configuration archive from the system.
.PP
\fIdownload_file ( \f(CI$FILE\fI )\fR
.IX Subsection "download_file ( $FILE )"
.PP
.Vb 2
\&        # Print the bigip.conf file to the terminal
\&        print $ic\->download_file(\*(Aq/config/bigip.conf\*(Aq);
.Ve
.PP
This method provides direct access to files on the target system. The method returns a scalar containing
the contents of the file.
.PP
This method may be useful for downloading configuration files for versioning or backups.
.PP
\fIget_interface_list ()\fR
.IX Subsection "get_interface_list ()"
.PP
.Vb 1
\&        my @interfaces = $ic\->get_interface_list();
.Ve
.PP
Retuns an ordered list of all interfaces on the target device.
.PP
\fIget_interface_enabled_state ($interface)\fR
.IX Subsection "get_interface_enabled_state ($interface)"
.PP
Returns the enabled state of the specific interface.
.PP
\fIget_interface_media_status ($interface)\fR
.IX Subsection "get_interface_media_status ($interface)"
.PP
Returns the media status of the specific interface.
.PP
\fIget_interface_media_speed ($interface)\fR
.IX Subsection "get_interface_media_speed ($interface)"
.PP
Returns the media speed of the specific interface in Mbps.
.PP
\fIget_interface_statistics ($interface)\fR
.IX Subsection "get_interface_statistics ($interface)"
.PP
Returns all statistics for the specified interface as a InterfaceStatistics object.  Unless you specifically
require access to the raw object, consider using \fBget_interface_statistics_stringified\fR for a pre-parsed hash 
in an easy-to-digest format.
.PP
\fIget_interface_statistics_stringified ($interface)\fR
.IX Subsection "get_interface_statistics_stringified ($interface)"
.PP
.Vb 2
\&        my $inet        = ($ic\->get_interface_list())[0];
\&        my %stats       = $ic\->get_interface_statistics_stringified($inet);
\&
\&        print "Interface: $inet \- Bytes in: $stats{stats}{STATISTIC_BYTES_IN} \- Bytes out: STATISTIC_BYTES_OUT";
.Ve
.PP
Returns all statistics for the specified interface as a hash having the following structure;
.PP
.Vb 8
\&        {
\&        timestamp       => \*(AqYYYY\-MM\-DD\-hh\-mm\-ss\*(Aq,
\&        stats           =>      {
\&                                statistic_1     => value
\&                                ...
\&                                statistic_n     => value
\&                                }
\&        }
.Ve
.PP
Where the keys of the stats hash are the names of the statistic types defined in a InterfaceStatistics object.
Refer to the official \s-1API\s0 documentation for the exact structure of the InterfaceStatistics object.
.PP
\fIget_trunk_list ()\fR
.IX Subsection "get_trunk_list ()"
.PP
.Vb 1
\&        my @trunks = $ic\->get_trunk_list();
.Ve
.PP
Returns an array of the configured trunks present on the device.
.PP
\fIget_active_trunk_members ()\fR
.IX Subsection "get_active_trunk_members ()"
.PP
.Vb 1
\&        print "Trunk $t has " . $ic\->get_active_trunk_members() . " active members.\en";
.Ve
.PP
Returns the number of the active members for the specified trunk.
.PP
\fIget_configured_trunk_members ()\fR
.IX Subsection "get_configured_trunk_members ()"
.PP
.Vb 1
\&        print "Trunk $t has " . $ic\->get_configured_trunk_members() . " configured members.\en";
.Ve
.PP
Returns the number of configured members for the specified trunk.
.PP
\fIget_trunk_interfaces ()\fR
.IX Subsection "get_trunk_interfaces ()"
.PP
.Vb 1
\&        my @t_inets = $ic\->get_trunk_interfaces();
.Ve
.PP
Returns an array containing the interfaces of the members of the specified trunk.
.PP
\fIget_trunk_media_speed ()\fR
.IX Subsection "get_trunk_media_speed ()"
.PP
.Vb 1
\&        print "Trunk $t operating at " . $ic\->get_trunk_media_speed($t) . "Mbps\en";
.Ve
.PP
Returns the current operational media speed (in Mbps) of the specified trunk.
.PP
\fIget_trunk_media_status ()\fR
.IX Subsection "get_trunk_media_status ()"
.PP
.Vb 1
\&        print "Trunk $t media status is " . $ic\->get_trunk_media_status($t) . "\en";
.Ve
.PP
Returns the current operational media status of the specified trunk.
.PP
\fIget_trunk_lacp_enabled_state ()\fR
.IX Subsection "get_trunk_lacp_enabled_state ()"
.PP
Returns the enabled state of \s-1LACP\s0 for the specified trunk.
.PP
\fIget_trunk_lacp_active_state ()\fR
.IX Subsection "get_trunk_lacp_active_state ()"
.PP
Returns the active state of \s-1LACP\s0 for the specified trunk.
.PP
\fIget_trunk_statistics ()\fR
.IX Subsection "get_trunk_statistics ()"
.PP
Returns the traffic statistics for the specified trunk.  The statistics are returned as a TrunkStatistics object
hence this method is useful where access to raw statistical data is required.
.PP
For parsed statistic data, see \fBget_trunk_statistics_stringified\fR.
.PP
For specific information regarding data and units of measurement for statistics methods, please see the \fBNotes\fR section.
.PP
\fIget_trunk_statistics_stringified ()\fR
.IX Subsection "get_trunk_statistics_stringified ()"
.PP
Returns all statistics for the specified trunk as a hash of hases with the following structure:
.PP
.Vb 9
\&        {       
\&                timestamp       => \*(Aqyyyy\-mm\-dd\-hh\-mm\-ss\*(Aq,
\&                stats           => {
\&                                        stats_1 => value,
\&                                        stats_3 => value,
\&                                        ...
\&                                        stats_n => value
\&                                }
\&        }
.Ve
.PP
This function accepts a single parameter; the trunk for which the statistics are to be returned.
.PP
For specific information regarding data and units of measurement for statistics methods, please see the \fBNotes\fR section.
.PP
\fIget_self_ip_list\fR
.IX Subsection "get_self_ip_list"
.PP
Returns a list of all self \s-1IP\s0 addresses on the target device.
.PP
\fIget_self_ip_vlan ( \f(CI$SELF_IP\fI )\fR
.IX Subsection "get_self_ip_vlan ( $SELF_IP )"
.PP
Returns the \s-1VLAN\s0 associated with the specified self \s-1IP\s0 address on the target device.
.PP
\fIget_vs_list ()\fR
.IX Subsection "get_vs_list ()"
.PP
.Vb 1
\&        my @virtuals    = $ic\->get_vs_list();
.Ve
.PP
\&\fBPlease note\fR: this method has been deprecated in future releases.  Please use get_ltm_vs_list instead.
.PP
Returns an array of all defined \s-1LTM\s0 virtual servers.
.PP
\fIget_ltm_vs_list ()\fR
.IX Subsection "get_ltm_vs_list ()"
.PP
.Vb 1
\&        my @ltm_virtuals = $ic\->get_ltm_vs_list();
.Ve
.PP
Returns an array of all defined \s-1LTM\s0 virtual servers.
.PP
\fIget_gtm_vs_list ()\fR
.IX Subsection "get_gtm_vs_list ()"
.PP
.Vb 1
\&        my @gtm_virtuals = $ic\->get_gtm_vs_list();
.Ve
.PP
Returns an array of the names of all defined \s-1GTM\s0 virtual servers.
.PP
\fIget_vs_destination ($virtual_server)\fR
.IX Subsection "get_vs_destination ($virtual_server)"
.PP
.Vb 1
\&        my $destination = $ic\->get_vs_destination($vs);
.Ve
.PP
Returns the destination of the specified virtual server in the form ipv4_address%route_domain:port.
.PP
\fIget_vs_enabled_state ($virtual_server)\fR
.IX Subsection "get_vs_enabled_state ($virtual_server)"
.PP
.Vb 1
\&        print "LTM Virtual server $vs is in state ",$ic\->get_vs_enabled_state($vs),"\en";
.Ve
.PP
\&\fBPlease note\fR: this method has been deprecated in future releases.  Please use the \fB\fBget_ltm_vs_enabled_state()\fB\fR instead.
.PP
Return the enabled state of the specified \s-1LTM\s0 virtual server.
.PP
\fIget_ltm_vs_enabled_state ($virtual_server)\fR
.IX Subsection "get_ltm_vs_enabled_state ($virtual_server)"
.PP
.Vb 1
\&        print "LTM Virtual server $vs is in state ",$ic\->get_ltm_vs_enabled_state($vs),"\en";
.Ve
.PP
Return the enabled state of the specified \s-1LTM\s0 virtual server.
.PP
\fIget_gtm_vs_enabled_state ($virtual_server)\fR
.IX Subsection "get_gtm_vs_enabled_state ($virtual_server)"
.PP
.Vb 1
\&        print "GTM Virtual server $vs is in state ",$ic\->get_gtm_vs_enabled_state($vs),"\en";
.Ve
.PP
Return the enabled state of the specified \s-1GTM\s0 virtual server.  The \s-1GTM\s0 server should be provided as a name only such as that
returned from the \fBget_gtm_vs_list\fR method.
.PP
\fIget_vs_all_statistics ()\fR
.IX Subsection "get_vs_all_statistics ()"
.PP
\&\fBPlease Note\fR: This method has been deprecated in future releases.  Please use \fBget_ltm_vs_all_statistics\fR.
.PP
Returns the traffic statistics for all configured \s-1LTM\s0 virtual servers.  The statistics are returned as 
VirtualServerStatistics struct hence this method is useful where access to raw statistical data is required.
.PP
For parsed statistic data, see \fBget_ltm_vs_statistics_stringified\fR.
.PP
For specific information regarding data and units of measurement for statistics methods, please see the \fBNotes\fR section.
.PP
\fIget_ltm_vs_all_statistics ()\fR
.IX Subsection "get_ltm_vs_all_statistics ()"
.PP
Returns the traffic statistics for all configured \s-1LTM\s0 virtual servers.  The statistics are returned as 
VirtualServerStatistics struct hence this method is useful where access to raw statistical data is required.
.PP
For parsed statistic data, see \fBget_ltm_vs_statistics_stringified\fR.
.PP
For specific information regarding data and units of measurement for statistics methods, please see the \fBNotes\fR section.
.PP
\fIget_vs_statistics ($virtual_server)\fR
.IX Subsection "get_vs_statistics ($virtual_server)"
.PP
.Vb 1
\&        my $statistics = $ic\->get_vs_statistics($vs);
.Ve
.PP
Returns all statistics for the specified virtual server as a VirtualServerStatistics object.  Consider using get_vs_statistics_stringified
for accessing virtual server statistics in a pre-parsed hash structure.
.PP
For specific information regarding data and units of measurement for statistics methods, please see the \fBNotes\fR section.
.PP
\fIget_vs_statistics_stringified ($virtual_server)\fR
.IX Subsection "get_vs_statistics_stringified ($virtual_server)"
.PP
.Vb 1
\&        my $statistics = $ic\->get_vs_statistics_stringified($vs);
\&
\&        foreach (sort keys %{$stats{stats}}) {
\&                print "$_: $stats{stats}{$_}\en";
\&        }
.Ve
.PP
Returns all statistics for the specified virtual server as a multidimensional hash (hash of hashes).  The hash has the following structure:
.PP
.Vb 9
\&        {
\&                timestamp       => \*(Aqyyyy\-mm\-dd\-hh\-mm\-ss\*(Aq,
\&                stats           => {
\&                                        statistic_1     => value,
\&                                        statistic_2     => value,
\&                                        ...
\&                                        statistic_n     => value
\&                                }
\&        }
.Ve
.PP
This function accepts a single parameter; the virtual server for which the statistics are to be returned.
.PP
For specific information regarding data and units of measurement for statistics methods, please see the \fBNotes\fR section.
.PP
\fIget_ltm_vs_rules ($virtual_server)\fR
.IX Subsection "get_ltm_vs_rules ($virtual_server)"
.PP
\fIget_ltm_snat_pool ($virtual_server)\fR
.IX Subsection "get_ltm_snat_pool ($virtual_server)"
.PP
\fIget_ltm_snat_type ($virtual_server)\fR
.IX Subsection "get_ltm_snat_type ($virtual_server)"
.PP
\fIget_default_pool_name ($virtual_server)\fR
.IX Subsection "get_default_pool_name ($virtual_server)"
.PP
.Vb 2
\&        print "Virtual Server: $virtual_server\enDefault Pool: ", 
\&                $ic\->get_default_pool_name($virtual_server), "\en";
.Ve
.PP
Returns the default pool names for the specified virtual server.
.PP
\fIget_pool_list ()\fR
.IX Subsection "get_pool_list ()"
.PP
.Vb 1
\&        print join " ", ($ic\->get_pool_list());
.Ve
.PP
Returns a list of all \s-1LTM\s0 pools in the target system.
.PP
Note that this method has been deprecated in future releases \- please use \fBget_ltm_vs_list\fR instead.
.PP
\fIget_ltm_pool_list ()\fR
.IX Subsection "get_ltm_pool_list ()"
.PP
.Vb 1
\&        print join " ", ($ic\->get_ltm_pool_list());
.Ve
.PP
Returns a list of all \s-1LTM\s0 pools in the target system.
.PP
\fIget_pool_members ($pool)\fR
.IX Subsection "get_pool_members ($pool)"
.PP
.Vb 2
\&        foreach my $pool ($ic\->get_pool_list()) {
\&                print "\en\en$pool:\en";
\&
\&                foreach my $member ($ic\->get_pool_members($pool)) {
\&                        print "\et$member\en";
\&                }
\&        }
.Ve
.PP
\&\fBPlease note\fR: this method has been deprecated in future releases.  Please use the \fBget_ltm_pool_members\fR method instead.
.PP
Returns a list of the pool members for the specified \s-1LTM\s0 pool.  This method takes one mandatory parameter; the name of the pool.
.PP
Pool member are returned in the format \fBIP_address:service_port\fR.
.PP
\fIget_ltm_pool_members ($pool)\fR
.IX Subsection "get_ltm_pool_members ($pool)"
.PP
.Vb 2
\&        foreach my $pool ($ic\->get_ltm_pool_list()) {
\&                print "\en\en$pool:\en";
\&
\&                foreach my $member ($ic\->get_ltm_pool_members($pool)) {
\&                        print "\et$member\en";
\&                }
\&        }
.Ve
.PP
Returns a list of the pool members for the specified \s-1LTM\s0 pool.  This method takes one mandatory parameter; the name of the pool.
.PP
Pool member are returned in the format \fBIP_address:service_port\fR.
.PP
\fIget_gtm_pool_members ($pool)\fR
.IX Subsection "get_gtm_pool_members ($pool)"
.PP
Returns a list of the pool members for the specified \s-1GTM\s0 pool.  This method takes one mandatory parameter; the name of the pool.
.PP
Pool member are returned in the format \fBIP_address:service_port\fR.
.PP
\fIget_pool_statistics ($pool)\fR
.IX Subsection "get_pool_statistics ($pool)"
.PP
.Vb 1
\&        my %stats = $ic\->get_pool_statistics($pool);
.Ve
.PP
Returns the statistics for the specified pool as a PoolStatistics object.  For pre-parsed pool statistics consider using
the \fBget_pool_statistics_stringified\fR method.
.PP
\fIget_pool_statistics_stringified ($pool)\fR
.IX Subsection "get_pool_statistics_stringified ($pool)"
.PP
.Vb 2
\&        my %stats = $ic\->get_pool_statistics_stringified($pool);
\&        print "Pool $pool bytes in: $stats{stat}{STATISTIC_SERVER_SIDE_BYTES_OUT}";
.Ve
.PP
Returns a hash containing all pool statistics for the specified pool in a delicious, easily digestable and improved formula.
.PP
\fIget_pool_member_statistics ($pool)\fR
.IX Subsection "get_pool_member_statistics ($pool)"
.PP
Returns all pool member statistics for the specified pool as an array of MemberStatistics objects.  Unless you feel like 
playing with Data::Dumper on a rainy Sunday afternoon, consider using \fBget_pool_member_statistics_stringified\fR method.
.PP
\fIget_pool_member_object_status ($pool)\fR
.IX Subsection "get_pool_member_object_status ($pool)"
.PP
Returns all pool member stati for the specified pool as an array of MemberObjectStatus objects.
.PP
\fIget_pool_member_statistics_stringified ($pool)\fR
.IX Subsection "get_pool_member_statistics_stringified ($pool)"
.PP
.Vb 1
\&        my %stats = $ic\->get_pool_member_statistics_stringified($pool);
\&
\&        print "Member\et\et\et\etRequests\en",\*(Aq\-\*(Aqx5,"\et\et\et\et",\*(Aq\-\*(Aqx5,"\en";
\&        
\&        foreach my $member (sort keys %stats) {
\&                print "$member\et\et$stats{$member}{stats}{STATISTIC_TOTAL_REQUESTS}\en";
\&        }
\&
\&        # Prints a list of requests per pool member
.Ve
.PP
Returns a hash containing all pool member statistics for the specified pool.  The hash has the following
structure;
.PP
.Vb 10
\&        member_1 =>     {
\&                        timestamp       => \*(AqYYYY\-MM\-DD\-hh\-mm\-ss\*(Aq,
\&                        stats           =>      {
\&                                                statistics_1    => value
\&                                                ...
\&                                                statistic_n     => value
\&                                                }
\&                        }
\&        member_2 =>     {
\&                        ...
\&                        }
\&        member_n =>     {
\&                        ...
\&                        }
.Ve
.PP
Each pool member is specified in the form ipv4_address%route_domain:port.
.PP
\fIget_all_pool_member_statistics ($pool)\fR
.IX Subsection "get_all_pool_member_statistics ($pool)"
.PP
Returns all pool member statistics for the specified pool.  This method is analogous to the \fB\fBget_pool_member_statistics()\fB\fR
method and the two will likely be merged in a future release.
.PP
\fIget_ltm_pool_status ($pool)\fR
.IX Subsection "get_ltm_pool_status ($pool)"
.PP
Returns the status of the specified pool as a ObjectStatus object.
.PP
For formatted pool status information, see the \fB\fBget_ltm_pool_status_as_string()\fB\fR method.
.PP
\fIget_ltm_pool_member_status ($pool, \f(CI$member\fI)\fR
.IX Subsection "get_ltm_pool_member_status ($pool, $member)"
.PP
Returns the status of the specified member in the specified pool as a ObjectStatus object.
.PP
\fIget_ltm_pool_availability_status ($pool)\fR
.IX Subsection "get_ltm_pool_availability_status ($pool)"
.PP
Retuns the availability status of the specified pool.
.PP
\fIget_ltm_pool_enabled_status ($pool)\fR
.IX Subsection "get_ltm_pool_enabled_status ($pool)"
.PP
Retuns the enabled status of the specified pool.
.PP
\fIget_ltm_pool_status_description ($pool)\fR
.IX Subsection "get_ltm_pool_status_description ($pool)"
.PP
Returns a descriptive status of the specified pool.
.PP
\fIget_ltm_pool_status_as_string ($pool)\fR
.IX Subsection "get_ltm_pool_status_as_string ($pool)"
.PP
Returns the pool status as a descriptive string.
.PP
\fIget_connection_list ()\fR
.IX Subsection "get_connection_list ()"
.PP
Returns a list of active connections as a list of ConnectionID objects.
.PP
\fIget_all_active_connections ()\fR
.IX Subsection "get_all_active_connections ()"
.PP
Gets all active connections in details on the device.
.PP
\fI\f(BIget_active_connections_count()\fI\fR
.IX Subsection "get_active_connections_count()"
.PP
Returns the number of all active connections on the device.
.PP
\fIget_node_list ()\fR
.IX Subsection "get_node_list ()"
.PP
.Vb 1
\&        print join "\en", ($ic\->get_node_list());
.Ve
.PP
Returns a list of all configured nodes in the target system.
.PP
Nodes are returned as ipv4 addresses.
.PP
\fIget_screen_name ($node)\fR
.IX Subsection "get_screen_name ($node)"
.PP
.Vb 3
\&        foreach ($ic\->get_node_list()) {
\&                print "Node: $_ (" . $ic\->get_screen_name($_) . ")\en";
\&        }
.Ve
.PP
Retuns the screen name of the specified node.
.PP
\fIget_node_status ($node)\fR
.IX Subsection "get_node_status ($node)"
.PP
.Vb 1
\&        $ic\->get_node_status(
.Ve
.PP
Returns the status of the specified node as a ObjectStatus object.
.PP
For formatted node status information, see the \fB\fBget_node_status_as_string()\fB\fR method.
.PP
\fIget_node_availability_status ($node)\fR
.IX Subsection "get_node_availability_status ($node)"
.PP
Retuns the availability status of the node.
.PP
\fIget_node_enabled_status ($node)\fR
.IX Subsection "get_node_enabled_status ($node)"
.PP
Retuns the enabled status of the node.
.PP
\fIget_node_status_description ($node)\fR
.IX Subsection "get_node_status_description ($node)"
.PP
Returns a descriptive status of the specified node.
.PP
\fIget_node_status_as_string ($node)\fR
.IX Subsection "get_node_status_as_string ($node)"
.PP
Returns the node status as a descriptive string.
.PP
\fIget_node_monitor_status ($node)\fR
.IX Subsection "get_node_monitor_status ($node)"
.PP
Gets the current availability status of the specified node addresses.
.PP
\fIget_node_statistics ($node)\fR
.IX Subsection "get_node_statistics ($node)"
.PP
Returns all statistics for the specified node.
.PP
\fIget_node_statistics_stringified\fR
.IX Subsection "get_node_statistics_stringified"
.PP
.Vb 1
\&        my %stats = $ltm\->get_node_statistics_stringified($node);
\&
\&        foreach (sort keys %{stats{stats}}) {
\&                print "$_:\et$stats{stats}{$_}{high}\et$stats{stats}{$_}{low}\en";
\&        }
.Ve
.PP
Returns a multidimensional hash containing all current statistics for the specified node.  The hash has the following structure:
.PP
.Vb 9
\&        {
\&                timestamp       => \*(Aqyyyy\-mm\-dd\-hh\-mm\-ss\*(Aq,
\&                stats           => {
\&                                        statistic_1     => value,
\&                                        statistic_2     => value,
\&                                        ...
\&                                        statistic_n     => value
\&                                }
\&        }
.Ve
.PP
This function accepts a single parameter; the node for which the statistics are to be returned.
.PP
For specific information regarding data and units of measurement for statistics methods, please see the \fBNotes\fR section.
.PP
\fIget_gtm_pool_list ()\fR
.IX Subsection "get_gtm_pool_list ()"
.PP
Returns a list of \s-1GTM\s0 pools.
.PP
\fIget_gtm_pool_description ()\fR
.IX Subsection "get_gtm_pool_description ()"
.PP
Returns a description of the specified \s-1GTM\s0 pool.
.PP
\fIget_gtm_vs_all_statistics ()\fR
.IX Subsection "get_gtm_vs_all_statistics ()"
.PP
Returns the traffic statistics for all configured \s-1GTM\s0 virtual servers.  The statistics are returned as 
VirtualServerStatistics struct hence this method is useful where access to raw statistical data is required.
.PP
For parsed statistic data, see \fBget_gtm_vs_statistics_stringified\fR.
.PP
For specific information regarding data and units of measurement for statistics methods, please see the \fBNotes\fR section.
.PP
\fIget_ltm_address_class_list ()\fR
.IX Subsection "get_ltm_address_class_list ()"
.PP
Returns a list of all existing address classes.
.PP
\fIget_ltm_string_class_list ()\fR
.IX Subsection "get_ltm_string_class_list ()"
.PP
Returns a list of all existing string classes.
.PP
\fIget_ltm_string_class ( \f(CI$class_name\fI )\fR
.IX Subsection "get_ltm_string_class ( $class_name )"
.PP
Return the specified \s-1LTM\s0 string class.
.PP
\fIget_ltm_string_class_members ( \f(CI$class\fI )\fR
.IX Subsection "get_ltm_string_class_members ( $class )"
.PP
Returns the specified \s-1LTM\s0 string class members.
.PP
\fIadd_ltm_string_class_member ( \f(CI$class\fI, \f(CI$member\fI )\fR
.IX Subsection "add_ltm_string_class_member ( $class, $member )"
.PP
Add the provided member to the specified class.
.PP
\fIdelete_ltm_string_class_member ( \f(CI$class\fI, \f(CI$member\fI )\fR
.IX Subsection "delete_ltm_string_class_member ( $class, $member )"
.PP
Deletes the provided member from the specified class.
.PP
\fIset_ltm_string_class_member ( \f(CI$class\fI, \f(CI$member\fI, value )\fR
.IX Subsection "set_ltm_string_class_member ( $class, $member, value )"
.PP
Sets the value of the member to the provided value in the specified class.
.PP
\fIget_db_variable ( \f(CI$VARIABLE\fI )\fR
.IX Subsection "get_db_variable ( $VARIABLE )"
.PP
.Vb 2
\&        # Prints the value of the configsync.state database variable.
\&        print "Config state is " . $ic\->get_db_variable(\*(Aqconfigsync.state\*(Aq) . "\en";
.Ve
.PP
Returns the value of the specified db variable.
.PP
\fIget_event_subscription_list\fR
.IX Subsection "get_event_subscription_list"
.PP
Returns an array of event subscription IDs for all registered event subscriptions.
.PP
\fIget_event_subscription\fR
.IX Subsection "get_event_subscription"
.PP
\fIremove_event_subscription\fR
.IX Subsection "remove_event_subscription"
.PP
\fIget_event_subscription_state\fR
.IX Subsection "get_event_subscription_state"
.PP
\fIget_event_subscription_url\fR
.IX Subsection "get_event_subscription_url"
.PP
\fIget_subscription_list\fR
.IX Subsection "get_subscription_list"
.PP
This method is an analog of \fBget_event_subscription\fR
.PP
\fIcreate_subscription_list (%args)\fR
.IX Subsection "create_subscription_list (%args)"
.PP
.Vb 9
\&        my $subscription = $ic\->create_subscription_list (
\&                                                name                            => \*(Aqmy_subscription_name\*(Aq,
\&                                                url                             => \*(Aqhttp://company.com/my/eventnotification/endpoint,
\&                                                username                        => \*(Aqusername\*(Aq,
\&                                                password                        => \*(Aqpassword\*(Aq,
\&                                                ttl                             => \-1,
\&                                                min_events_per_timeslice        => 10,
\&                                                max_timeslice                   => 10
\&                                        );
.Ve
.PP
Creates an event subscription with the target system.  This method requires the following parameters:
.IP "name" 3
.IX Item "name"
A user-friendly name for the subscription.
.IP "url" 3
.IX Item "url"
The target \s-1URL\s0 endpoint for the event notification interface to send event notifications.
.IP "username" 3
.IX Item "username"
The basic authentication username required to access the \s-1URL\s0 endpoint.
.IP "password" 3
.IX Item "password"
The basic authentication password required to access the \s-1URL\s0 endpoint.
.IP "ttl" 3
.IX Item "ttl"
The time to live (in seconds) for this subscription. After the ttl is reached, the subscription
will be removed from the system. A value of \-1 indicates an infinite life time.
.IP "min_events_per_timeslice" 3
.IX Item "min_events_per_timeslice"
The minimum number of events needed to trigger a notification. If this value is 50, then this
means that when 50 events are queued up they will be sent to the notification endpoint no matter
what the max_timeslice is set to.
.IP "max_timeslice" 3
.IX Item "max_timeslice"
This maximum time to wait (in seconds) before event notifications are sent to the notification
endpoint. If this value is 30, then after 30 seconds a notification will be sent with the events
in the subscription queue.
.SH "NOTES"
.IX Header "NOTES"
\fIStatistic Methods\fR
.IX Subsection "Statistic Methods"
.PP
Within iControl, statistical values are a 64\-bit unsigned integer represented as a \fBCommon::ULong64\fR object.
The ULong64 object is a stuct of two 32\-bit values.  This representation is used as there is no native 
support for the encoding of 64\-bit numbers in \s-1SOAP.\s0
.PP
The ULong object has the following structure;
.PP
.Vb 6
\&        ({
\&                STATISTIC_NAME  => {
\&                                high    => long
\&                                low     => long
\&                        }
\&        }, bless Common::ULong64)
.Ve
.PP
Where high is the unsigned 32\-bit integer value of the high-order portion of the measured value and low is 
the unsigned 32\-bit integer value of the low-order portion of the measured value.
.PP
In non-stringified statistic methods, these return values are ULong64 objects as returned by the iControl \s-1API.\s0
In stringified statistic method calls, the values are processed on the client side into a local 64\-bit representation
of the value using the following form.
.PP
.Vb 1
\&        $value = ($high<<32)|$low;
.Ve
.PP
Stringified method calls are guaranteed to return a correct localised 64\-bit representation of the value.
.PP
It is the callers responsibility to convert the ULong struct for all other non-stringified statistic method calls.
.SH "AUTHOR"
.IX Header "AUTHOR"
Luke Poskitt, <ltp@cpan.org>
.PP
Thanks to Eric Welch, <erik.welch@gmail.com>, for input and feedback.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
