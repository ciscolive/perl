.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Filter::cpp 3"
.TH Filter::cpp 3 "2020-08-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Filter::cpp \- cpp source filter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Filter::cpp ;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This source filter pipes the current source file through the C
pre-processor (cpp) if it is available.
.PP
As with all source filters its scope is limited to the current source
file only. Every file you want to be processed by the filter must have a
.PP
.Vb 1
\&    use Filter::cpp ;
.Ve
.PP
near the top.
.PP
Here is an example script which uses the filter:
.PP
.Vb 1
\&    use Filter::cpp ;
\&
\&    #define FRED 1
\&    $a = 2 + FRED ;
\&    print "a = $a\en" ;
\&    #ifdef FRED
\&    print "Hello FRED\en" ;
\&    #else
\&    print "Where is FRED\en" ;
\&    #endif
.Ve
.PP
And here is what it will output:
.PP
.Vb 2
\&    a = 3
\&    Hello FRED
.Ve
.PP
This example below, provided by Michael G Schwern, shows a clever way
to get Perl to use a C pre-processor macro when the Filter::cpp module
is available, or to use a Perl sub when it is not.
.PP
.Vb 2
\&    # use Filter::cpp if we can.
\&    BEGIN { eval \*(Aquse Filter::cpp\*(Aq }
\&
\&    sub PRINT {
\&        my($string) = shift;
\&
\&    #define PRINT($string) \e
\&        (print $string."\en")
\&    }
\&     
\&    PRINT("Mu");
.Ve
.PP
Look at Michael's Tie::VecArray module for a practical use.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Marquess
.SH "DATE"
.IX Header "DATE"
11th December 1995.
