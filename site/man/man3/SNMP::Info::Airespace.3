.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::Airespace 3"
.TH SNMP::Info::Airespace 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::Airespace \- SNMP Interface to data from AIRESPACE\-WIRELESS\-MIB
and AIRESPACE\-SWITCHING\-MIB
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Miller
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    my $airespace = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\&    my $class = $airespace\->class();
\&    print " Using device sub class : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SNMP::Info::Airespace is a subclass of SNMP::Info that provides an interface
to \fIAIRESPACE-WIRELESS-MIB\fR and \fIAIRESPACE-SWITCHING-MIB\fR.  These MIBs are
used in Airespace wireless switches, as well as, products from Cisco, Nortel,
and Alcatel which are based upon the Airespace platform.
.PP
The Airespace platform utilizes intelligent wireless switches which control
thin access points.  The thin access points themselves are unable to be polled
for end station information.
.PP
This class emulates bridge functionality for the wireless switch. This enables
end station \s-1MAC\s0 addresses collection and correlation to the thin access point
the end station is using for communication.
.PP
Use or create a subclass of SNMP::Info that inherits this one.
Do not use directly.
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.IP "None." 4
.IX Item "None."
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.PD 0
.IP "\fIAIRESPACE-WIRELESS-MIB\fR" 4
.IX Item "AIRESPACE-WIRELESS-MIB"
.IP "\fIAIRESPACE-SWITCHING-MIB\fR" 4
.IX Item "AIRESPACE-SWITCHING-MIB"
.PD
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP\s0
.ie n .IP "$airespace\->\fBairespace_type()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_type()\fR" 4
.IX Item "$airespace->airespace_type()"
(\f(CW\*(C`agentInventoryMachineType\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_model()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_model()\fR" 4
.IX Item "$airespace->airespace_model()"
(\f(CW\*(C`agentInventoryMachineModel\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_serial()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_serial()\fR" 4
.IX Item "$airespace->airespace_serial()"
(\f(CW\*(C`agentInventorySerialNumber\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_maint_ver()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_maint_ver()\fR" 4
.IX Item "$airespace->airespace_maint_ver()"
(\f(CW\*(C`agentInventoryMaintenanceLevel\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_mac()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_mac()\fR" 4
.IX Item "$airespace->airespace_mac()"
(\f(CW\*(C`agentInventoryBurnedInMacAddress\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_os()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_os()\fR" 4
.IX Item "$airespace->airespace_os()"
(\f(CW\*(C`agentInventoryOperatingSystem\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_vendor()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_vendor()\fR" 4
.IX Item "$airespace->airespace_vendor()"
(\f(CW\*(C`agentInventoryManufacturerName\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_prod_name()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_prod_name()\fR" 4
.IX Item "$airespace->airespace_prod_name()"
(\f(CW\*(C`agentInventoryProductName\*(C'\fR)
.ie n .IP "$airespace\->\fBos_ver()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBos_ver()\fR" 4
.IX Item "$airespace->os_ver()"
(\f(CW\*(C`agentInventoryProductVersion\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_bssid_mode()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_bssid_mode()\fR" 4
.IX Item "$airespace->airespace_bssid_mode()"
(\f(CW\*(C`agentNetworkBroadcastSsidMode\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_mc_mode()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_mc_mode()\fR" 4
.IX Item "$airespace->airespace_mc_mode()"
(\f(CW\*(C`agentNetworkMulticastMode\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_lwapp_mode()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_lwapp_mode()\fR" 4
.IX Item "$airespace->airespace_lwapp_mode()"
The \s-1LWAPP\s0 transport mode decides if the switch is operating in the Layer2 or
Layer3 mode.
.Sp
(\f(CW\*(C`agentSwitchLwappTransportMode\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ul_mode()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ul_mode()\fR" 4
.IX Item "$airespace->airespace_ul_mode()"
Transfer upload mode configures the mode to use when uploading from the
switch.  Normal usage tftp.
.Sp
(\f(CW\*(C`agentTransferUploadMode\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ul_ip()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ul_ip()\fR" 4
.IX Item "$airespace->airespace_ul_ip()"
Transfer upload tftp server ip configures the \s-1IP\s0 address of the server. It is
valid only when the Transfer Mode is tftp.
.Sp
(\f(CW\*(C`agentTransferUploadServerIP\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ul_path()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ul_path()\fR" 4
.IX Item "$airespace->airespace_ul_path()"
Transfer upload tftp path configures the directory path where the file is to
be uploaded to. The switch remembers the last file path used.
.Sp
(\f(CW\*(C`agentTransferUploadPath\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ul_file()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ul_file()\fR" 4
.IX Item "$airespace->airespace_ul_file()"
(\f(CW\*(C`agentTransferUploadFilename\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ul_type()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ul_type()\fR" 4
.IX Item "$airespace->airespace_ul_type()"
Transfer upload datatype configures the type of file to upload from the
switch.
.Sp
.Vb 6
\&    The types for upload are:
\&    config(2)
\&    errorlog(3)
\&    systemtrace(4)
\&    traplog(5)
\&    crashfile(6)
.Ve
.Sp
(\f(CW\*(C`agentTransferUploadDataType\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ul_start()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ul_start()\fR" 4
.IX Item "$airespace->airespace_ul_start()"
(\f(CW\*(C`agentTransferUploadStart\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ul_status()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ul_status()\fR" 4
.IX Item "$airespace->airespace_ul_status()"
(\f(CW\*(C`agentTransferUploadStatus\*(C'\fR)
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$airespace\->\fBlayers()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBlayers()\fR" 4
.IX Item "$airespace->layers()"
Returns 00000111.  Class emulates Layer 2 functionality for Thin APs through
proprietary MIBs.
.ie n .IP "$airespace\->\fBserial()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBserial()\fR" 4
.IX Item "$airespace->serial()"
(\f(CW\*(C`agentInventorySerialNumber\*(C'\fR)
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.ie n .IP "$airespace\->\fBi_ssidlist()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBi_ssidlist()\fR" 4
.IX Item "$airespace->i_ssidlist()"
Returns reference to hash.  \s-1SSID\s0's recognized by the radio interface.
.ie n .IP "$airespace\->\fBi_ssidbcast()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBi_ssidbcast()\fR" 4
.IX Item "$airespace->i_ssidbcast()"
Returns reference to hash.  Indicates whether the \s-1SSID\s0 is broadcast.
.ie n .IP "$airespace\->\fBi_80211channel()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBi_80211channel()\fR" 4
.IX Item "$airespace->i_80211channel()"
Returns reference to hash.  Current operating frequency channel of the radio
interface.
.ie n .IP "$airespace\->\fBdot11_cur_tx_pwr_mw()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBdot11_cur_tx_pwr_mw()\fR" 4
.IX Item "$airespace->dot11_cur_tx_pwr_mw()"
Returns reference to hash.  Current transmit power, in milliwatts, of the
radio interface.
.ie n .IP "$airespace\->\fBi_ssidmac()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBi_ssidmac()\fR" 4
.IX Item "$airespace->i_ssidmac()"
With the same keys as i_ssidlist, returns the Basic service set
identification (\s-1BSSID\s0), \s-1MAC\s0 address, the \s-1AP\s0 is using for the \s-1SSID.\s0
.ie n .SS "Dot11 Ess Table  (""bsnDot11EssTable"")"
.el .SS "Dot11 Ess Table  (\f(CWbsnDot11EssTable\fP)"
.IX Subsection "Dot11 Ess Table (bsnDot11EssTable)"
Ess(\s-1WLAN\s0) Configuration Table. Maximum of 17 WLANs can be created on
Airespace Switch. Index of 17 is reserved for \s-1WLAN\s0 for Third Party
APs(non\-Airespace APs).
.ie n .IP "$airespace\->\fBairespace_ess_idx()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ess_idx()\fR" 4
.IX Item "$airespace->airespace_ess_idx()"
(\f(CW\*(C`bsnDot11EssIndex\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ess_ssid()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ess_ssid()\fR" 4
.IX Item "$airespace->airespace_ess_ssid()"
\&\s-1SSID\s0 assigned to \s-1ESS\s0(\s-1WLAN\s0)
.Sp
(\f(CW\*(C`bsnDot11EssSsid\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ess_macflt()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ess_macflt()\fR" 4
.IX Item "$airespace->airespace_ess_macflt()"
Select to filter clients by \s-1MAC\s0 address.  By selecting this Security, you need
to create \s-1MAC\s0 Filters in \f(CW\*(C`bsnUsersTable\*(C'\fR or have \s-1MAC\s0 Filters configured on
Radius Servers specified in \f(CW\*(C`bsnRadiusAuthenticationTable\*(C'\fR
.Sp
(\f(CW\*(C`bsnDot11EssMacFiltering\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ess_status()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ess_status()\fR" 4
.IX Item "$airespace->airespace_ess_status()"
Administrative Status of \s-1ESS\s0(\s-1WLAN\s0).
.Sp
(\f(CW\*(C`bsnDot11EssAdminStatus\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ess_sec_auth()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ess_sec_auth()\fR" 4
.IX Item "$airespace->airespace_ess_sec_auth()"
Type of 802.11 Authentication.
.Sp
(\f(CW\*(C`bsnDot11EssSecurityAuthType\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ess_radio_pol()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ess_radio_pol()\fR" 4
.IX Item "$airespace->airespace_ess_radio_pol()"
Radio Policy for a \s-1WLAN.\s0 It can either be All where it will be applicable
to \s-1ALL\s0 types of protocols or it can be set to apply to combinations of
802.11a, 802.11b, 802.11g.
.Sp
(\f(CW\*(C`bsnDot11EssRadioPolicy\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ess_qos()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ess_qos()\fR" 4
.IX Item "$airespace->airespace_ess_qos()"
Quality of Service for a \s-1WLAN.\s0
.Sp
(\f(CW\*(C`bsnDot11EssQualityOfService\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ess_ifname()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ess_ifname()\fR" 4
.IX Item "$airespace->airespace_ess_ifname()"
Name of the interface used by this \s-1WLAN.\s0
.Sp
(\f(CW\*(C`bsnDot11EssInterfaceName\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ess_aclname()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ess_aclname()\fR" 4
.IX Item "$airespace->airespace_ess_aclname()"
Name of \s-1ACL\s0 for the \s-1WLAN.\s0 This is applicable only when Web Authentication is
enabled.
.Sp
(\f(CW\*(C`bsnDot11EssAclName\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ess_bcast()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ess_bcast()\fR" 4
.IX Item "$airespace->airespace_ess_bcast()"
This attribute when enabled allows the switch to broadcast this \s-1SSID.\s0
.Sp
(\f(CW\*(C`bsnDot11EssBroadcastSsid\*(C'\fR)
.ie n .SS "\s-1AP\s0 Table (""bsnAPTable"")"
.el .SS "\s-1AP\s0 Table (\f(CWbsnAPTable\fP)"
.IX Subsection "AP Table (bsnAPTable)"
Table of Airespace APs managed by this Airespace Switch.
.ie n .IP "$airespace\->\fBairespace_ap_mac()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ap_mac()\fR" 4
.IX Item "$airespace->airespace_ap_mac()"
The \s-1MAC\s0 address of the 802.3 interface of the \s-1AP.\s0
.Sp
(\f(CW\*(C`bsnAPDot3MacAddress\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ap_name()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ap_name()\fR" 4
.IX Item "$airespace->airespace_ap_name()"
Name assigned to this \s-1AP.\s0 If an \s-1AP\s0 is not configured its factory default name
will be ap:<last three byte of \s-1MAC\s0 Address>.  e.g. ap:af:12:be
.Sp
(\f(CW\*(C`bsnAPName\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ap_ip()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ap_ip()\fR" 4
.IX Item "$airespace->airespace_ap_ip()"
Ip address of the \s-1AP.\s0 This will not be available when the switch is operating
in the Layer2 mode. In this case, the attribute will return 0 as value.
.Sp
(\f(CW\*(C`bsnApIpAddress\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ap_loc()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ap_loc()\fR" 4
.IX Item "$airespace->airespace_ap_loc()"
User specified location of this \s-1AP.\s0
.Sp
(\f(CW\*(C`bsnAPLocation\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ap_sw()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ap_sw()\fR" 4
.IX Item "$airespace->airespace_ap_sw()"
(\f(CW\*(C`bsnAPSoftwareVersion\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ap_fw()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ap_fw()\fR" 4
.IX Item "$airespace->airespace_ap_fw()"
(\f(CW\*(C`bsnAPBootVersion\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ap_model()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ap_model()\fR" 4
.IX Item "$airespace->airespace_ap_model()"
(\f(CW\*(C`bsnAPModel\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ap_serial()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ap_serial()\fR" 4
.IX Item "$airespace->airespace_ap_serial()"
(\f(CW\*(C`bsnAPSerialNumber\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ap_type()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ap_type()\fR" 4
.IX Item "$airespace->airespace_ap_type()"
(\f(CW\*(C`bsnAPType\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_ap_status()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_ap_status()\fR" 4
.IX Item "$airespace->airespace_ap_status()"
(\f(CW\*(C`bsnAPAdminStatus\*(C'\fR)
.ie n .SS "\s-1AP\s0 Interface Table (""bsnAPIfTable"")"
.el .SS "\s-1AP\s0 Interface Table (\f(CWbsnAPIfTable\fP)"
.IX Subsection "AP Interface Table (bsnAPIfTable)"
Table of 802.11 interfaces in an Airespace APs.
.ie n .IP "$airespace\->\fBairespace_apif_slot()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_apif_slot()\fR" 4
.IX Item "$airespace->airespace_apif_slot()"
The slot Id of this interface. Value will be 0 for a 802.11a (5Ghz) interface
and will be 1 for 802.11b/g (2.4Ghz) interface.
.Sp
(\f(CW\*(C`bsnAPIfSlotId\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_apif_type()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_apif_type()\fR" 4
.IX Item "$airespace->airespace_apif_type()"
(\f(CW\*(C`bsnAPIfType\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_apif_ch_num()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_apif_ch_num()\fR" 4
.IX Item "$airespace->airespace_apif_ch_num()"
(\f(CW\*(C`bsnAPIfPhyChannelNumber\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_apif_power()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_apif_power()\fR" 4
.IX Item "$airespace->airespace_apif_power()"
The transmit power level N currently being used to transmit data.
.Sp
(\f(CW\*(C`bsnAPIfPhyTxPowerLevel\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_apif()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_apif()\fR" 4
.IX Item "$airespace->airespace_apif()"
(\f(CW\*(C`bsnAPIfOperStatus\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_apif_oride()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_apif_oride()\fR" 4
.IX Item "$airespace->airespace_apif_oride()"
This flag when disabled implies that all WLANs are available from this radio.
However, if this is enabled, then only those WLANs that appear in the
(\f(CW\*(C`bsnApIfWlanOverrideTable\*(C'\fR) will be available from this radio.
.Sp
(\f(CW\*(C`bsnAPIfWlanOverride\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_apif_admin()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_apif_admin()\fR" 4
.IX Item "$airespace->airespace_apif_admin()"
(\f(CW\*(C`bsnAPIfAdminStatus\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_apif_a_pwr()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_apif_a_pwr()\fR" 4
.IX Item "$airespace->airespace_apif_a_pwr()"
List of comma separated absolute power levels supported by the radio.
.Sp
(\f(CW\*(C`bsnAPIfAbsolutePowerList\*(C'\fR)
.ie n .SS "Mobile Station Table (""bsnMobileStationTable"")"
.el .SS "Mobile Station Table (\f(CWbsnMobileStationTable\fP)"
.IX Subsection "Mobile Station Table (bsnMobileStationTable)"
.ie n .IP "$airespace\->\fBairespace_sta_mac()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_sta_mac()\fR" 4
.IX Item "$airespace->airespace_sta_mac()"
Mac Address of the \s-1AP\s0 on which Mobile Station is associated.
.Sp
(\f(CW\*(C`bsnMobileStationAPMacAddr\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_sta_slot()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_sta_slot()\fR" 4
.IX Item "$airespace->airespace_sta_slot()"
Slot Id of \s-1AP\s0 If on which mobile station is associated.
.Sp
(\f(CW\*(C`bsnMobileStationAPIfSlotId\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_sta_ess_idx()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_sta_ess_idx()\fR" 4
.IX Item "$airespace->airespace_sta_ess_idx()"
Ess Index of the Wlan(\s-1SSID\s0) that is being used by Mobile Station to connect
to the \s-1AP.\s0
.Sp
(\f(CW\*(C`bsnMobileStationEssIndex\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_sta_ssid()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_sta_ssid()\fR" 4
.IX Item "$airespace->airespace_sta_ssid()"
The \s-1SSID\s0 Advertised by the Mobile Station.
.Sp
(\f(CW\*(C`bsnMobileStationSsid\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_sta_delete()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_sta_delete()\fR" 4
.IX Item "$airespace->airespace_sta_delete()"
Action to Deauthenticate the Mobile Station. Set the State to delete.
.Sp
(\f(CW\*(C`bsnMobileStationDeleteAction\*(C'\fR)
.ie n .SS "Users Table (""bsnUsersTable"")"
.el .SS "Users Table (\f(CWbsnUsersTable\fP)"
.IX Subsection "Users Table (bsnUsersTable)"
The (conceptual) table listing Wlan Users.
.ie n .IP "$airespace\->\fBairespace_user_name()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_user_name()\fR" 4
.IX Item "$airespace->airespace_user_name()"
User name.  For \s-1MAC\s0 filters, this will be the \s-1MAC\s0 address (e.g. 000123456789).
.Sp
(\f(CW\*(C`bsnUserName\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_user_pw()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_user_pw()\fR" 4
.IX Item "$airespace->airespace_user_pw()"
User Password.  For \s-1MAC\s0 filters, this will be \*(L"nopassword\*(R".
.Sp
(\f(CW\*(C`bsnUserPassword\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_user_ess_idx()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_user_ess_idx()\fR" 4
.IX Item "$airespace->airespace_user_ess_idx()"
User \s-1WLAN ID.\s0 Value 0 implies that this applies to any \s-1WLAN ID.\s0
.Sp
(\f(CW\*(C`bsnUserEssIndex\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_user_access()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_user_access()\fR" 4
.IX Item "$airespace->airespace_user_access()"
For \s-1MAC\s0 filters, this will be \*(L"readOnly\*(R".
.Sp
(\f(CW\*(C`bsnUserAccessMode\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_user_type()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_user_type()\fR" 4
.IX Item "$airespace->airespace_user_type()"
User Access Mode. For \s-1MAC\s0 filters, this will be \*(L"macFilter\*(R".
.Sp
(\f(CW\*(C`bsnUserType\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_user_ifname()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_user_ifname()\fR" 4
.IX Item "$airespace->airespace_user_ifname()"
\&\s-1ACL\s0 for \s-1MAC\s0 Filters.  An interface name from \f(CW\*(C`agentInterfaceConfigTable\*(C'\fR
.Sp
(\f(CW\*(C`bsnUserInterfaceName\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_user_rstat()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_user_rstat()\fR" 4
.IX Item "$airespace->airespace_user_rstat()"
(\f(CW\*(C`bsnUserRowStatus\*(C'\fR)
.ie n .SS "Black List Client Table (""bsnBlackListClientTable"")"
.el .SS "Black List Client Table (\f(CWbsnBlackListClientTable\fP)"
.IX Subsection "Black List Client Table (bsnBlackListClientTable)"
The table listing Wlan Black Listed Clients
.ie n .IP "$airespace\->\fBairespace_bl_mac()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_bl_mac()\fR" 4
.IX Item "$airespace->airespace_bl_mac()"
(\f(CW\*(C`bsnBlackListClientMacAddress\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_bl_descr()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_bl_descr()\fR" 4
.IX Item "$airespace->airespace_bl_descr()"
(\f(CW\*(C`bsnBlackListClientDescription\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_bl_rstat()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_bl_rstat()\fR" 4
.IX Item "$airespace->airespace_bl_rstat()"
(\f(CW\*(C`bsnBlackListClientRowStatus\*(C'\fR)
.ie n .SS "\s-1AP\s0 Interface \s-1WLAN\s0 Override Table (""bsnAPIfWlanOverrideTable"")"
.el .SS "\s-1AP\s0 Interface \s-1WLAN\s0 Override Table (\f(CWbsnAPIfWlanOverrideTable\fP)"
.IX Subsection "AP Interface WLAN Override Table (bsnAPIfWlanOverrideTable)"
Each entry represents an \s-1SSID\s0 added to the \s-1AP\s0 when the attribute
\&\f(CW\*(C`bsnAPIfWlanOverride\*(C'\fR on the radio is enabled.  This means only those WLANs
on the switch that are added to this table will be available on such a radio.
.ie n .IP "$airespace\->\fBairespace_oride_id()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_oride_id()\fR" 4
.IX Item "$airespace->airespace_oride_id()"
Index of the \s-1WLAN\s0 (\f(CW\*(C`bsnDot11EssIndex\*(C'\fR) added to the radio.
.Sp
(\f(CW\*(C`bsnAPIfWlanOverrideId\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_oride_ssid()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_oride_ssid()\fR" 4
.IX Item "$airespace->airespace_oride_ssid()"
\&\s-1SSID\s0 assigned to the override \s-1WLAN.\s0
.Sp
(\f(CW\*(C`bsnAPIfWlanOverrideSsid\*(C'\fR)
.ie n .SS "Interface Config Table (""agentInterfaceConfigTable"")"
.el .SS "Interface Config Table (\f(CWagentInterfaceConfigTable\fP)"
.IX Subsection "Interface Config Table (agentInterfaceConfigTable)"
A table of the switch's Interface Config entries. Typically, it will contain
entries	for Service Port Interface, \s-1DS\s0 Port Interface and Virtual Gateway
Interface apart from other entries.
.ie n .IP "$airespace\->\fBairespace_if_name()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_if_name()\fR" 4
.IX Item "$airespace->airespace_if_name()"
Interface Name. This values is 'management' for \s-1DS\s0 port, 'service\-port' for
service port and 'virtual' for virtual gateway. For other interfaces, the
name can be anything. These interfaces are already created by default.
.Sp
(\f(CW\*(C`agentInterfaceName\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_if_vlan()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_if_vlan()\fR" 4
.IX Item "$airespace->airespace_if_vlan()"
\&\s-1VLAN\s0 Id configured for the Interface.
.Sp
(\f(CW\*(C`agentInterfaceVlanId\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_if_type()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_if_type()\fR" 4
.IX Item "$airespace->airespace_if_type()"
The interface's type. The static type is set for the interfaces that are
created by default on the switch and these cannot be deleted. Any other
interface that is created is of type dynamic which can be deleted.
.Sp
(\f(CW\*(C`agentInterfaceType\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_if_mac()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_if_mac()\fR" 4
.IX Item "$airespace->airespace_if_mac()"
Interface \s-1MAC\s0 Address. This is only applicable in case of management and
service-port interfaces.
.Sp
(\f(CW\*(C`agentInterfaceMacAddress\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_if_ip()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_if_ip()\fR" 4
.IX Item "$airespace->airespace_if_ip()"
(\f(CW\*(C`agentInterfaceIPAddress\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_if_mask()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_if_mask()\fR" 4
.IX Item "$airespace->airespace_if_mask()"
(\f(CW\*(C`agentInterfaceIPNetmask\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_if_acl()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_if_acl()\fR" 4
.IX Item "$airespace->airespace_if_acl()"
Name of the Access Control List applied to the interface. This attribute is
applicable only to the management interface and other dynamic interfaces.
If it is required to remove the \s-1ACL\s0 name for an interface, it should be set
to an empty string.
.Sp
(\f(CW\*(C`agentInterfaceAclName\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_if_rstat()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_if_rstat()\fR" 4
.IX Item "$airespace->airespace_if_rstat()"
(\f(CW\*(C`agentInterfaceRowStatus\*(C'\fR)
.ie n .SS "Port Config Table (""agentPortConfigTable"")"
.el .SS "Port Config Table (\f(CWagentPortConfigTable\fP)"
.IX Subsection "Port Config Table (agentPortConfigTable)"
.ie n .IP "$airespace\->\fBairespace_duplex_admin()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_duplex_admin()\fR" 4
.IX Item "$airespace->airespace_duplex_admin()"
(\f(CW\*(C`agentPortPhysicalMode\*(C'\fR)
.ie n .IP "$airespace\->\fBairespace_duplex()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBairespace_duplex()\fR" 4
.IX Item "$airespace->airespace_duplex()"
(\f(CW\*(C`agentPortPhysicalStatus\*(C'\fR)
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$airespace\->\fBi_index()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBi_index()\fR" 4
.IX Item "$airespace->i_index()"
Returns reference to map of IIDs to Interface index.
.Sp
Extends \f(CW\*(C`ifIndex\*(C'\fR to support thin APs and \s-1WLAN\s0 virtual interfaces as device
interfaces.
.ie n .IP "$airespace\->\fBinterfaces()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBinterfaces()\fR" 4
.IX Item "$airespace->interfaces()"
Returns reference to map of IIDs to ports.  Thin APs are implemented as device
interfaces.  The thin \s-1AP MAC\s0 address \fBairespace_ap_mac()\fR and Slot \s-1ID\s0
\&\fBairespace_apif_slot()\fR are used as the port identifier.  Virtual interfaces
use \fBairespace_if_name()\fR as the port identifier.
.ie n .IP "$airespace\->\fBi_name()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBi_name()\fR" 4
.IX Item "$airespace->i_name()"
Returns reference to map of IIDs to interface names.  Returns \f(CW\*(C`ifName\*(C'\fR for
Ethernet interfaces, \fBairespace_ap_name()\fR for thin \s-1AP\s0 interfaces, and
\&\fBairespace_if_name()\fR for virtual interfaces.
.ie n .IP "$airespace\->\fBi_description()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBi_description()\fR" 4
.IX Item "$airespace->i_description()"
Returns reference to map of IIDs to interface descriptions.  Returns
\&\f(CW\*(C`ifDescr\*(C'\fR for Ethernet interfaces, \fBairespace_ap_loc()\fR for thin \s-1AP\s0
interfaces, and \fBairespace_if_name()\fR for virtual interfaces.
.ie n .IP "$airespace\->\fBi_type()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBi_type()\fR" 4
.IX Item "$airespace->i_type()"
Returns reference to map of IIDs to interface types.  Returns \f(CW\*(C`ifType\*(C'\fR
for Ethernet interfaces, \fBairespace_apif_type()\fR for thin \s-1AP\s0 interfaces, and
\&\fBairespace_if_type()\fR for virtual interfaces.
.ie n .IP "$airespace\->\fBi_up()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBi_up()\fR" 4
.IX Item "$airespace->i_up()"
Returns reference to map of IIDs to link status of the interface.  Returns
\&\f(CW\*(C`ifOperStatus\*(C'\fR for Ethernet interfaces and \fBairespace_apif()\fR for thin \s-1AP\s0
interfaces.
.ie n .IP "$airespace\->\fBi_up_admin()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBi_up_admin()\fR" 4
.IX Item "$airespace->i_up_admin()"
Returns reference to map of IIDs to administrative status of the interface.
Returns \f(CW\*(C`ifAdminStatus\*(C'\fR for Ethernet interfaces and \fBairespace_apif_admin()\fR
for thin \s-1AP\s0 interfaces.
.ie n .IP "$airespace\->\fBi_mac()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBi_mac()\fR" 4
.IX Item "$airespace->i_mac()"
Returns reference to map of IIDs to \s-1MAC\s0 address of the interface.  Returns
\&\f(CW\*(C`ifPhysAddress\*(C'\fR for Ethernet interfaces and \fBairespace_if_mac()\fR for virtual
interfaces.
.ie n .IP "$airespace\->\fBi_vlan()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBi_vlan()\fR" 4
.IX Item "$airespace->i_vlan()"
Returns reference to map of IIDs to \s-1VLAN ID\s0 of the interface.  Returns
\&\fBairespace_if_vlan()\fR for virtual interfaces.
.ie n .IP "$airespace\->\fBi_duplex()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBi_duplex()\fR" 4
.IX Item "$airespace->i_duplex()"
Returns reference to map of IIDs to current link duplex.  Ethernet interfaces
only.
.ie n .IP "$airespace\->\fBi_duplex_admin()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBi_duplex_admin()\fR" 4
.IX Item "$airespace->i_duplex_admin()"
Returns reference to hash of IIDs to admin duplex setting.  Ethernet
interfaces only.
.ie n .IP "$airespace\->\fBip_index()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBip_index()\fR" 4
.IX Item "$airespace->ip_index()"
Extends table by mapping \fBairespace_if_ip()\fR to the interface \s-1IID.\s0
.ie n .IP "$airespace\->\fBip_netmask()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBip_netmask()\fR" 4
.IX Item "$airespace->ip_netmask()"
Extends \s-1IP\s0 table by mapping \fBairespace_if_mask()\fR to \fBairespace_if_ip()\fR
.ie n .IP "$airespace\->\fBbp_index()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBbp_index()\fR" 4
.IX Item "$airespace->bp_index()"
Simulates bridge \s-1MIB\s0 by returning reference to a hash mapping \fBi_index()\fR to
the interface iid.
.ie n .IP "$airespace\->\fBfw_port()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBfw_port()\fR" 4
.IX Item "$airespace->fw_port()"
Returns reference to a hash, value being \fBairespace_sta_mac()\fR and
\&\fBairespace_sta_slot()\fR combined to match the interface iid.
.ie n .IP "$airespace\->\fBfw_mac()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBfw_mac()\fR" 4
.IX Item "$airespace->fw_mac()"
(\f(CW\*(C`bsnMobileStationMacAddress\*(C'\fR)
.SS "Pseudo \fIENTITY-MIB\fP information"
.IX Subsection "Pseudo ENTITY-MIB information"
These methods emulate \fIENTITY-MIB\fR Physical Table methods using
\&\fIAIRESPACE-SWITCHING-MIB\fR and \fIAIRESPACE-WIRELESS-MIB\fR.  Thin APs are
included as subcomponents of the wireless controller.
.ie n .IP "$airespace\->\fBe_index()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBe_index()\fR" 4
.IX Item "$airespace->e_index()"
Returns reference to hash.  Key: \s-1IID\s0 and Value: Integer. The index for APs is
created with an integer representation of the last three octets of the
\&\s-1AP MAC\s0 address.
.ie n .IP "$airespace\->\fBe_class()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBe_class()\fR" 4
.IX Item "$airespace->e_class()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: General hardware type.  Return ap
for wireless access points.
.ie n .IP "$airespace\->\fBe_descr()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBe_descr()\fR" 4
.IX Item "$airespace->e_descr()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Human friendly name.
.ie n .IP "$airespace\->\fBe_model()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBe_model()\fR" 4
.IX Item "$airespace->e_model()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Model name.
.ie n .IP "$airespace\->\fBe_name()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBe_name()\fR" 4
.IX Item "$airespace->e_name()"
More computer friendly name of entity.  Name is either '\s-1WLAN\s0 Controller' or
\&'\s-1AP\s0'.
.ie n .IP "$airespace\->\fBe_vendor()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBe_vendor()\fR" 4
.IX Item "$airespace->e_vendor()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: cisco.
.ie n .IP "$airespace\->\fBe_serial()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBe_serial()\fR" 4
.IX Item "$airespace->e_serial()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Serial number.
.ie n .IP "$airespace\->\fBe_pos()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBe_pos()\fR" 4
.IX Item "$airespace->e_pos()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: The relative position among all
entities sharing the same parent.
.ie n .IP "$airespace\->\fBe_type()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBe_type()\fR" 4
.IX Item "$airespace->e_type()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Type of component.
.ie n .IP "$airespace\->\fBe_fwver()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBe_fwver()\fR" 4
.IX Item "$airespace->e_fwver()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Firmware revision.
.ie n .IP "$airespace\->\fBe_swver()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBe_swver()\fR" 4
.IX Item "$airespace->e_swver()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Software revision.
.ie n .IP "$airespace\->\fBe_parent()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBe_parent()\fR" 4
.IX Item "$airespace->e_parent()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: The value of \fBe_index()\fR for the
entity which 'contains' this entity.
.SS "Arp Cache Table Augmentation"
.IX Subsection "Arp Cache Table Augmentation"
The controller has knowledge of \s-1MAC\-\s0>\s-1IP\s0 mappings for wireless clients.
Augmenting the arp cache data with these \s-1MAC\-\s0>\s-1IP\s0 mappings enables visibility
for stations that only communicate locally.
.ie n .IP "$airespace\->\fBat_paddr()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBat_paddr()\fR" 4
.IX Item "$airespace->at_paddr()"
Adds \s-1MAC\s0 addresses extracted from the index of \f(CW\*(C`bsnMobileStationIpAddress\*(C'\fR.
.ie n .IP "$airespace\->\fBat_netaddr()\fR" 4
.el .IP "\f(CW$airespace\fR\->\fBat_netaddr()\fR" 4
.IX Item "$airespace->at_netaddr()"
Adds \s-1IP\s0 addresses from \f(CW\*(C`bsnMobileStationIpAddress\*(C'\fR.
.SH "Data Munging Callback Subroutines"
.IX Header "Data Munging Callback Subroutines"
.IP "\fBmunge_64bits()\fR" 4
.IX Item "munge_64bits()"
Truncate packet values to 32 bits.
