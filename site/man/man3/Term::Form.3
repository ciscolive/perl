.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::Form 3"
.TH Term::Form 3 "2020-04-21" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::Form \- Read lines from STDIN.
.SH "VERSION"
.IX Header "VERSION"
Version 0.528
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    my $aoa = [
\&        [ \*(Aqname\*(Aq           ],
\&        [ \*(Aqyear\*(Aq           ],
\&        [ \*(Aqcolor\*(Aq, \*(Aqgreen\*(Aq ],
\&        [ \*(Aqcity\*(Aq           ]
\&    ];
\&
\&    # Object\-oriented interface:
\&
\&    use Term::Form;
\&
\&    my $new = Term::Form\->new();
\&
\&    my $line = $new\->readline( \*(AqPrompt: \*(Aq, { default => \*(Aqabc\*(Aq } );
\&
\&    my $modified_list = $new\->fill_form( $aoa );
\&
\&    # Functional interface:
\&
\&    use Term::Form qw( read_line fill_form );
\&
\&    my $line = read_line( \*(AqPrompt: \*(Aq, { default => \*(Aqabc\*(Aq } );
\&
\&    my $modified_list = fill_form( $aoa );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`readline\*(C'\fR reads a line from \s-1STDIN.\s0 As soon as \f(CW\*(C`Return\*(C'\fR is pressed \f(CW\*(C`readline\*(C'\fR returns the read string without the
newline character \- so no \f(CW\*(C`chomp\*(C'\fR is required.
.PP
\&\f(CW\*(C`fill_form\*(C'\fR reads a list of lines from \s-1STDIN.\s0
.PP
This module is intended to cope with Unicode (multibyte character/grapheme cluster).
.PP
The output is removed after leaving the method, so the user can decide what remains on the screen.
.SS "Keys"
.IX Subsection "Keys"
\&\f(CW\*(C`BackSpace\*(C'\fR or \f(CW\*(C`Ctrl\-H\*(C'\fR: Delete the character behind the cursor.
.PP
\&\f(CW\*(C`Delete\*(C'\fR or \f(CW\*(C`Ctrl\-D\*(C'\fR: Delete  the  character at point.
.PP
\&\f(CW\*(C`Ctrl\-U\*(C'\fR: Delete the text backward from the cursor to the beginning of the line.
.PP
\&\f(CW\*(C`Ctrl\-K\*(C'\fR: Delete the text from the cursor to the end of the line.
.PP
\&\f(CW\*(C`Right\-Arrow\*(C'\fR: Move forward a character.
.PP
\&\f(CW\*(C`Left\-Arrow\*(C'\fR: Move back a character.
.PP
\&\f(CW\*(C`Home\*(C'\fR or \f(CW\*(C`Ctrl\-A\*(C'\fR: Move to the start of the line.
.PP
\&\f(CW\*(C`End\*(C'\fR or \f(CW\*(C`Ctrl\-E\*(C'\fR: Move to the end of the line.
.PP
\&\f(CW\*(C`Up\-Arrow\*(C'\fR: in \f(CW\*(C`fill_form\*(C'\fR move up one row, in \f(CW\*(C`readline\*(C'\fR move back 10 characters.
.PP
\&\f(CW\*(C`Down\-Arrow\*(C'\fR: in \f(CW\*(C`fill_form\*(C'\fR move down one row, in \f(CW\*(C`readline\*(C'\fR move forward 10 characters.
.PP
\&\f(CW\*(C`Ctrl\-X\*(C'\fR: If the input puffer is not empty, the input puffer is cleared, else \f(CW\*(C`Ctrl\-X\*(C'\fR returns nothing (undef).
.PP
Only in \f(CW\*(C`fill_form\*(C'\fR:
.PP
\&\f(CW\*(C`Page\-Up\*(C'\fR or \f(CW\*(C`Ctrl\-B\*(C'\fR: Move back one page.
.PP
\&\f(CW\*(C`Page\-Down\*(C'\fR or \f(CW\*(C`Ctrl\-F\*(C'\fR: Move forward one page.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
The \f(CW\*(C`new\*(C'\fR method returns a \f(CW\*(C`Term::Form\*(C'\fR object.
.PP
.Vb 1
\&    my $new = Term::Form\->new();
.Ve
.PP
To set the different options it can be passed a reference to a hash as an optional argument.
.SS "readline"
.IX Subsection "readline"
\&\f(CW\*(C`readline\*(C'\fR reads a line from \s-1STDIN.\s0
.PP
.Vb 1
\&    $line = $new\->readline( $prompt, [ \e%options ] );
.Ve
.PP
The fist argument is the prompt string.
.PP
The optional second argument is the default string (see option \fIdefault\fR) if it is not a reference. If the second
argument is a hash-reference, the hash is used to set the different options. The keys/options are
.IP "\(bu" 4
clear_screen
.Sp
If enabled, the screen is cleared before the output.
.Sp
0 \- off
.Sp
1 \- on
.Sp
default: \f(CW0\fR
.IP "\(bu" 4
color
.Sp
Enables the support for color and text formatting escape sequences for the prompt string and the \fIinfo\fR text.
.Sp
0 \- off
.Sp
1 \- on
.Sp
default: \f(CW0\fR
.IP "\(bu" 4
info
.Sp
Expects as is value a string. If set, the string is printed on top of the output of \f(CW\*(C`readline\*(C'\fR.
.IP "\(bu" 4
default
.Sp
Set a initial value of input.
.IP "\(bu" 4
no_echo
.Sp
\&\- if set to \f(CW0\fR, the input is echoed on the screen.
.Sp
\&\- if set to \f(CW1\fR, "\f(CW\*(C`*\*(C'\fR" are displayed instead of the characters.
.Sp
\&\- if set to \f(CW2\fR, no output is shown apart from the prompt string.
.Sp
default: \f(CW0\fR
.IP "\(bu" 4
show_context
.Sp
Display the input that does not fit into the \*(L"readline\*(R" before or after the \*(L"readline\*(R".
.Sp
0 \- disable \fIshow_context\fR
.Sp
1 \- enable \fIshow_context\fR
.Sp
default: \f(CW0\fR
.IP "\(bu" 4
codepage_mapping
.Sp
This option has only meaning if the operating system is MSWin32.
.Sp
If the \s-1OS\s0 is MSWin32, Win32::Console::ANSI is used. By default \f(CW\*(C`Win32::Console::ANSI\*(C'\fR converts the characters from
Windows code page to \s-1DOS\s0 code page (the so-called \s-1ANSI\s0 to \s-1OEM\s0 conversion). This conversation is disabled by default in
\&\f(CW\*(C`Term::Choose\*(C'\fR but one can enable it by setting this option.
.Sp
Setting this option to \f(CW1\fR enables the codepage mapping offered by Win32::Console::ANSI.
.Sp
0 \- disable automatic codepage mapping (default)
.Sp
1 \- keep automatic codepage mapping
.Sp
default: \f(CW0\fR
.IP "\(bu" 4
hide_cursor
.Sp
0 \- disabled
.Sp
1 \- enabled
.Sp
default: \f(CW1\fR
.SS "fill_form"
.IX Subsection "fill_form"
\&\f(CW\*(C`fill_form\*(C'\fR reads a list of lines from \s-1STDIN.\s0
.PP
.Vb 1
\&    $new_list = $new\->fill_form( $aoa, { prompt => \*(AqRequired:\*(Aq } );
.Ve
.PP
The first argument is a reference to an array of arrays. The arrays have 1 or 2 elements: the first element is the key
and the optional second element is the value. The key is used as the prompt string for the \*(L"readline\*(R", the value is used
as the default value for the \*(L"readline\*(R" (initial value of input).
.PP
The optional second argument is a hash-reference. The keys/options are
.IP "\(bu" 4
clear_screen
.Sp
If enabled, the screen is cleared before the output.
.Sp
0 \- off
.Sp
1 \- on
.Sp
default: \f(CW0\fR
.IP "\(bu" 4
color
.Sp
Enables the support for color and text formatting escape sequences for the form-keys, the \*(L"back\*(R"\-string, the
\&\*(L"confirm\*(R"\-string, the \fIinfo\fR text and the \fIprompt\fR text.
.Sp
0 \- off
.Sp
1 \- on
.Sp
default: \f(CW0\fR
.IP "\(bu" 4
info
.Sp
Expects as is value a string. If set, the string is printed on top of the output of \f(CW\*(C`fill_form\*(C'\fR.
.IP "\(bu" 4
prompt
.Sp
If \fIprompt\fR is set, a main prompt string is shown on top of the output.
.Sp
default: undefined
.IP "\(bu" 4
auto_up
.Sp
With \fIauto_up\fR set to \f(CW0\fR or \f(CW1\fR pressing \f(CW\*(C`ENTER\*(C'\fR moves the cursor to the next line (if the cursor is not on the
\&\*(L"back\*(R" or \*(L"confirm\*(R" row). If the last row is reached, the cursor jumps to the first data row if \f(CW\*(C`ENTER\*(C'\fR is pressed.
While with  \fIauto_up\fR set to \f(CW0\fR the cursor loops through the rows until a key other than \f(CW\*(C`ENTER\*(C'\fR is pressed with
\&\fIauto_up\fR set to \f(CW1\fR after one loop an \f(CW\*(C`ENTER\*(C'\fR moves the cursor to the top menu entry (\*(L"back\*(R") if no other
key than \f(CW\*(C`ENTER\*(C'\fR was pressed.
.Sp
With \fIauto_up\fR set to \f(CW2\fR an \f(CW\*(C`ENTER\*(C'\fR moves the cursor to the top menu entry (except the cursor is on the \*(L"confirm\*(R"
row).
.Sp
If \fIauto_up\fR is set to \f(CW0\fR or \f(CW1\fR the initially cursor position is on the first data row while when set to \f(CW2\fR the
initially cursor position is on the first menu entry (\*(L"back\*(R").
.Sp
default: \f(CW1\fR
.IP "\(bu" 4
clear_screen
.Sp
If enabled, the screen is cleared before the output.
.Sp
default: disabled
.IP "\(bu" 4
read_only
.Sp
Set a form-row to read only.
.Sp
Expected value: a reference to an array with the indexes of the rows which should be read only.
.Sp
default: empty array
.IP "\(bu" 4
confirm
.Sp
Set the name of the \*(L"confirm\*(R" menu entry.
.Sp
default: \f(CW\*(C`Confirm\*(C'\fR
.IP "\(bu" 4
back
.Sp
Set the name of the \*(L"back\*(R" menu entry.
.Sp
The \*(L"back\*(R" menu entry can be disabled by setting \fIback\fR to an empty string.
.Sp
default: \f(CW\*(C`Back\*(C'\fR
.IP "\(bu" 4
codepage_mapping
.Sp
This option has only meaning if the operating system is MSWin32.
.Sp
If the \s-1OS\s0 is MSWin32, Win32::Console::ANSI is used. By default \f(CW\*(C`Win32::Console::ANSI\*(C'\fR converts the characters from
Windows code page to \s-1DOS\s0 code page (the so-called \s-1ANSI\s0 to \s-1OEM\s0 conversion). This conversation is disabled by default in
\&\f(CW\*(C`Term::Choose\*(C'\fR but one can enable it by setting this option.
.Sp
Setting this option to \f(CW1\fR enables the codepage mapping offered by Win32::Console::ANSI.
.Sp
0 \- disable automatic codepage mapping (default)
.Sp
1 \- keep automatic codepage mapping
.Sp
default: \f(CW0\fR
.IP "\(bu" 4
hide_cursor
.Sp
0 \- disabled
.Sp
1 \- enabled
.Sp
default: \f(CW1\fR
.PP
To close the form and get the modified list (reference to an array or arrays) as the return value select the
\&\*(L"confirm\*(R" menu entry. If the \*(L"back\*(R" menu entry is chosen to close the form, \f(CW\*(C`fill_form\*(C'\fR returns nothing.
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
.SS "Perl version"
.IX Subsection "Perl version"
Requires Perl version 5.8.3 or greater.
.SS "Terminal"
.IX Subsection "Terminal"
It is required a terminal which uses a monospaced font.
.PP
Unless the \s-1OS\s0 is MSWin32 the terminal has to understand \s-1ANSI\s0 escape sequences.
.SS "Encoding layer"
.IX Subsection "Encoding layer"
It is required to use appropriate I/O encoding layers. If the encoding layer for \s-1STDIN\s0 doesn't match the terminal's
character set, \f(CW\*(C`readline\*(C'\fR will break if a non ascii character is entered.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Term::Form
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Matthäus Kiem <cuer2s@gmail.com>
.SH "CREDITS"
.IX Header "CREDITS"
Thanks to the Perl\-Community.de <http://www.perl-community.de> and the people form
stackoverflow <http://stackoverflow.com> for the help.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2014\-2020 Matthäus Kiem.
.PP
This library is free software; you can redistribute it and/or modify it under the same terms as Perl 5.10.0. For
details, see the full text of the licenses in the file \s-1LICENSE.\s0
