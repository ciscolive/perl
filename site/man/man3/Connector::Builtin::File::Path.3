.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Connector::Builtin::File::Path 3"
.TH Connector::Builtin::File::Path 3 "2020-06-26" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
Connector::Builtin::File::Path
.SH "Description"
.IX Header "Description"
Highly configurable file writer/reader.
.SH "Parameters"
.IX Header "Parameters"
.IP "\s-1LOCATION\s0" 4
.IX Item "LOCATION"
The base directory where the files are located. This parameter is mandatory.
.IP "file" 4
.IX Item "file"
Pattern for Template Toolkit to build the filename.
The path components are available in the key \s-1ARGS.\s0 In set mode the unfiltered
data is available in key \s-1DATA.\s0
.IP "content" 4
.IX Item "content"
Pattern for Template Toolkit to build the content. The data is passed
\&\*(L"as is\*(R". If data is a scalar, it is wrapped into a hash using \s-1DATA\s0 as key.
.IP "ifexists" 4
.IX Item "ifexists"
.RS 4
.PD 0
.IP "\(bu" 2
.PD
append: opens the file for appending write.
.IP "\(bu" 2
fail: call \f(CW\*(C`die\*(C'\fR
.IP "\(bu" 2
silent: fail silently.
.IP "\(bu" 2
replace: replace the file with the new content.
.RE
.RS 4
.RE
.IP "mode" 4
.IX Item "mode"
Filesystem permissions to apply to the file when a file is written using the
set method. Must be given in octal notation, e.g. 0644. Default is to not set
the permissions and rely on the systems umask.
.IP "user / group" 4
.IX Item "user / group"
Name of a user / group that the file should belong to.
.SH "Supported Methods"
.IX Header "Supported Methods"
.SS "set"
.IX Subsection "set"
Write data to a file.
.PP
.Vb 1
\&    $conn\->set(\*(Aqfilename\*(Aq, { NAME => \*(AqOliver\*(Aq, \*(AqROLE\*(Aq => \*(AqAdministrator\*(Aq });
.Ve
.PP
See the file parameter how to control the filename.
By default, files are silently overwritten if they exist. See the \fIifexists\fR
parameter for an alternative behaviour.
.SS "get"
.IX Subsection "get"
Fetch data from a file. See the file parameter how to control the filename.
.PP
.Vb 1
\&    my $data = $conn\->get(\*(Aqfilename\*(Aq);
.Ve
.SH "Example"
.IX Header "Example"
.Vb 5
\&    my $conn = Connector::Builtin::File::Path\->new({
\&       LOCATION: /var/data/
\&       file: [% ARGS.0 %].txt
\&       content: Hello [% NAME %]
\&    });
\&
\&    $conn\->set(\*(Aqtest\*(Aq, { NAME => \*(AqOliver\*(Aq });
.Ve
.PP
Results in a file \fI/var/data/test.txt\fR with the content \fIHello Oliver\fR.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 268:" 4
.IX Item "Around line 268:"
You forgot a '=back' before '=head1'
