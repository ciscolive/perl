.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::ServerSession 3"
.TH Mojolicious::Plugin::ServerSession 3 "2012-10-17" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::ServerSession \- Perl extension to enable an additional server side session in mojolicious
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  #Basic example
\&  $self\->plugin(\*(AqServerSession\*(Aq => {
\&    key => "server_session_key",
\&    load => sub { 
\&      my ($c, $key) = @_;
\&
\&      my $session_object = MySessionDataStore\->find_or_create_by_key($key);
\&
\&      return( $session_object\->key, $session_object\->session_hash_ref );
\&    },
\&    store => sub { 
\&      my ($c, $key, $session_hash) = @_;
\&
\&      my $session_object = MySessionDataStore\->find_by_key($key);
\&      $session_object\->session_data($session_hash);
\&      $session_object\->save();
\&    }
\&  });
\&
\&  #Then to use in controller or views
\&  $c\->server_session\->{Some_key} = "Value"; #Note: Its just a hash ref for simplicity 
\&
\&
\&  #Real world example using DBIx::Class
\&  $app\->plugin(\*(AqServerSession\*(Aq => {
\&    key => "server_session_key",
\&    load => sub { 
\&      my ($c, $key) = @_;
\&      my $session_row;
\&      use JSON;
\&
\&      unless($session_row = $c\->app\->schema\->resultset(\*(AqSession\*(Aq)\->find($key)) {
\&        $session_row = $c\->app\->schema\->resultset(\*(AqSession\*(Aq)\->new({ content => "{}" })\->insert();
\&        $key = $session_row\->id();
\&      }
\&
\&      return( $key, decode_json($session_row\->content));
\&    },
\&    store => sub { 
\&      my ($c, $key, $session_hash) = @_;
\&      use JSON;
\&
\&      my $session = $c\->app\->schema\->resultset(\*(AqSession\*(Aq)\->find($key);
\&      if($session) {
\&        $session\->content( encode_json($session_hash) );
\&        $session\->update();
\&      }
\&    }
\&  });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a little plugin to add an additional session store to your mojolicious app. Useful if you need to store
more data than the cookie size of 4096 bytes will allow.
.PP
The existing mojo session is not touched, other than to add a key which is used to lookup data in your server side store.
.PP
You need to define two subrefs, one for loading and one for storing. The loading subref is expected to return two values, an \s-1ID\s0 and a 
hashref containing the server side session data. If the user is new the \f(CW$key\fR passed in will be undef.
.PP
In the DBIx::Class example I either find or create a row in the Session table when &load is called, and I also use \s-1JSON\s0 to serialise the 
hash.
In the store I simply look up the row, and set its contents to a \s-1JSON\s0 encoded string.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
https://github.com/benvanstaveren/Mojolicious\-Plugin\-Session does similar but tries to co-operate with the built in sessions.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonathan Taylor, <jon@local>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2012 by Jonathan Taylor
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.14.2 or,
at your option, any later version of Perl 5 you may have available.
