.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Future::HTTP 3"
.TH Future::HTTP 3 "2020-06-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Future::HTTP \- provide the most appropriate HTTP client with a Future API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    my $ua = Future::HTTP\->new();
\&    my $res = $ua\->http_get(\*(Aqhttp://www.nethype.de/\*(Aq)\->then(sub {
\&        my( $body, $data ) = @_;
\&        # ... handle the response
\&        return $body
\&    })\->get();
.Ve
.PP
This module is a wrapper combining Future with the \s-1API\s0 provided
by AnyEvent::HTTP. The backend used for the \s-1HTTP\s0 protocols
depends on whether one of the event loops is loaded.
.SS "Supported event loops"
.IX Subsection "Supported event loops"
Currently, the following backends are supported:
.IP "\(bu" 4
HTTP::Tiny
.IP "\(bu" 4
HTTP::Tiny::Paranoid
.IP "\(bu" 4
Mojolicious
.IP "\(bu" 4
AnyEvent
.IP "\(bu" 4
IO::Async
.PP
Support
is planned for LWP::UserAgent and \s-1POE\s0
but has not materialized yet.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """Future::HTTP\->new()"""
.el .SS "\f(CWFuture::HTTP\->new()\fP"
.IX Subsection "Future::HTTP->new()"
.Vb 1
\&    my $ua = Future::HTTP\->new();
.Ve
.PP
Creates a new instance of the \s-1HTTP\s0 client.
.ie n .SS """$ua\->is_async()"""
.el .SS "\f(CW$ua\->is_async()\fP"
.IX Subsection "$ua->is_async()"
Returns true if the selected backend is asynchronous, false if it is
synchronous.
.ie n .SS """$ua\->http_get($url, %options)"""
.el .SS "\f(CW$ua\->http_get($url, %options)\fP"
.IX Subsection "$ua->http_get($url, %options)"
.Vb 8
\&    my $res = $ua\->http_get(\*(Aqhttp://example.com/\*(Aq,
\&        headers => {
\&            \*(AqAccept\*(Aq => \*(Aqtext/json\*(Aq,
\&        },
\&    )\->then(sub {
\&        my( $body, $headers ) = @_;
\&        # ... handle the response
\&    })\->get;
.Ve
.PP
Retrieves the \s-1URL\s0 and returns the body and headers, like
the function in AnyEvent::HTTP.
.ie n .SS """$ua\->http_head($url, %options)"""
.el .SS "\f(CW$ua\->http_head($url, %options)\fP"
.IX Subsection "$ua->http_head($url, %options)"
.Vb 8
\&    my $res = $ua\->http_head(\*(Aqhttp://example.com/\*(Aq,
\&        headers => {
\&            \*(AqAccept\*(Aq => \*(Aqtext/json\*(Aq,
\&        },
\&    )\->then(sub {
\&        my( $body, $headers ) = @_;
\&        ...
\&    })\->get;
.Ve
.PP
Retrieves the header of the \s-1URL\s0 and returns the headers,
like the function in AnyEvent::HTTP.
.ie n .SS """$ua\->http_post($url, $body, %options)"""
.el .SS "\f(CW$ua\->http_post($url, $body, %options)\fP"
.IX Subsection "$ua->http_post($url, $body, %options)"
.Vb 9
\&    my $res = $ua\->http_post(\*(Aqhttp://example.com/api\*(Aq,
\&        \*(Aq{token:"my_json_token"}\*(Aq,
\&        headers => {
\&            \*(AqAccept\*(Aq => \*(Aqtext/json\*(Aq,
\&        },
\&    )\->then(sub {
\&        my( $body, $headers ) = @_;
\&        ...
\&    })\->get;
.Ve
.PP
Posts the content to the \s-1URL\s0 and returns the body and headers,
like the function in AnyEvent::HTTP.
.ie n .SS """$ua\->http_request($method, $url, %options)"""
.el .SS "\f(CW$ua\->http_request($method, $url, %options)\fP"
.IX Subsection "$ua->http_request($method, $url, %options)"
.Vb 9
\&    my $res = $ua\->http_request(\*(AqPUT\*(Aq => \*(Aqhttp://example.com/api\*(Aq,
\&        headers => {
\&            \*(AqAccept\*(Aq => \*(Aqtext/json\*(Aq,
\&        },
\&        body    => \*(Aq{token:"my_json_token"}\*(Aq,
\&    )\->then(sub {
\&        my( $body, $headers ) = @_;
\&        ...
\&    })\->get;
.Ve
.PP
Posts the content to the \s-1URL\s0 and returns the body and headers,
like the function in AnyEvent::HTTP.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Future
.PP
AnyEvent::HTTP for the details of the \s-1API\s0
.SH "REPOSITORY"
.IX Header "REPOSITORY"
The public repository of this module is
<https://github.com/Corion/future\-http>.
.SH "SUPPORT"
.IX Header "SUPPORT"
The public support forum of this module is
<https://perlmonks.org/>.
.SH "BUG TRACKER"
.IX Header "BUG TRACKER"
Please report bugs in this module via the \s-1RT CPAN\s0 bug queue at
<https://rt.cpan.org/Public/Dist/Display.html?Name=Future\-HTTP>
or via mail to future\-http\-Bugs@rt.cpan.org.
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR
.SH "COPYRIGHT (c)"
.IX Header "COPYRIGHT (c)"
Copyright 2016\-2020 by Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
This module is released under the same terms as Perl itself.
