.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perl::Critic::Policy::BuiltinFunctions::ProhibitShiftRef 3"
.TH Perl::Critic::Policy::BuiltinFunctions::ProhibitShiftRef 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perl::Critic::Policy::BuiltinFunctions::ProhibitShiftRef \- Prohibit "\eshift" in code
.SH "AFFILIATION"
.IX Header "AFFILIATION"
This Policy is part of the core Perl::Critic
distribution.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Prohibit the use of \f(CW\*(C`\eshift\*(C'\fR, as it is associated with bugs in Perl and its
modules.
.SS "Background"
.IX Subsection "Background"
Often, \f(CW\*(C`\eshift\*(C'\fR is used to create references that act much like an alias.  By
creating an XaliasX that is named, the code becomes more readable.  For example,
.PP
.Vb 4
\&    sub routine {
\&        my $longstring = \eshift;
\&        print $$longstring;
\&    }
.Ve
.PP
is more readable than
.PP
.Vb 3
\&    sub routine {
\&        print $_[0];    # longstring
\&    }
.Ve
.PP
Unfortunately, this added readability brings with it new and exciting issues,
detailed in the next section.
.ie n .SS "Problems with ""\eshift"""
.el .SS "Problems with \f(CW\eshift\fP"
.IX Subsection "Problems with shift"
By avoiding \f(CW\*(C`\eshift\*(C'\fR, several issues in Perl can be averted, including:
.IP "Memory leak since Perl 5.22" 4
.IX Item "Memory leak since Perl 5.22"
Issue #126676 was introduced in Perl 5.21.4 and is triggered when \f(CW\*(C`\eshift\*(C'\fR is
used.  The bug has not been resolved as of Perl 5.28.
.Sp
In short, the bug causes the ref counter for the aliased variable to be
incremented when running the subroutine, but it is not subsequently decremented
after the subroutine returns.  In addition to leaking memory, this issue can
also delay the cleanup of objects until Global Destruction, which can cause
further issues.
.Sp
For more information, see <https://rt.perl.org/Public/Bug/Display.html?id=126676>.
.IP "Devel::Cover crashes" 4
.IX Item "Devel::Cover crashes"
A separate, longstanding issue in Devel::Cover (since at least 1.21), causes
test code to segfault occasionally.  This prevents the coverage data from being
written out, resulting in bad metrics.
.Sp
The bug itself isn't actually caused by \f(CW\*(C`\eshift\*(C'\fR, instead it shows up in code
like the following:
.Sp
.Vb 3
\&    sub myopen {
\&        open ${ \e$_[0] }, ">test";
\&    }
.Ve
.Sp
However, this code would rarely be seen in production.  It would more likely
manifest with \f(CW\*(C`\eshift\*(C'\fR, as it does below:
.Sp
.Vb 4
\&    sub myopen {
\&        my $fh = \eshift;
\&        open $$fh, ">test";
\&    }
.Ve
.Sp
So while \f(CW\*(C`\eshift\*(C'\fR isn't the cause, it's often associated with the problem.
.Sp
For more information, see <https://github.com/pjcj/Devel\*(--Cover/issues/125>.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
This Policy is not configurable except for the standard options.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<https://rt.perl.org/Public/Bug/Display.html?id=126676>
.PP
<https://github.com/pjcj/Devel\*(--Cover/issues/125>
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Lindee <chris.lindee@cpanel.net>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2018 cPanel, L.L.C.
.PP
All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
