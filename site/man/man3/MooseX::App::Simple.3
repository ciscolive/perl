.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::App::Simple 3"
.TH MooseX::App::Simple 3 "2019-05-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::App::Simple \- Single command applications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package MyApp;
\&  use MooseX::App::Simple qw(Config Color);
\&  
\&  parameter \*(Aqparam\*(Aq => (
\&      is            => \*(Aqrw\*(Aq,
\&      isa           => \*(AqStr\*(Aq,
\&      documentation => q[First parameter],
\&      required      => 1,
\&  ); # Positional parameter
\&  
\&  option \*(Aqmy_option\*(Aq => (
\&      is            => \*(Aqrw\*(Aq,
\&      isa           => \*(AqBool\*(Aq,
\&      documentation => q[Enable this to do fancy stuff],
\&  ); # Option (\-\-my_option)
\&  
\&  has \*(Aqprivate\*(Aq => (
\&      is              => \*(Aqrw\*(Aq,
\&  ); # not exposed
\&  
\&  sub run {
\&      my ($self) = @_;
\&      # Do something
\&  }
.Ve
.PP
And then in some simple wrapper script:
.PP
.Vb 3
\& #!/usr/bin/env perl
\& use MyApp;
\& MyApp\->new_with_options\->run;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MooseX-App-Simple works basically just as MooseX::App, however it does
not search for commands and assumes that you have all options and parameters
defined in the current class.
.PP
Read the Tutorial for getting started with a simple
MooseX::App command line application.
.SH "METHODS"
.IX Header "METHODS"
.SS "new_with_options"
.IX Subsection "new_with_options"
.Vb 1
\& my $myapp_command = MyApp\->new_with_options();
.Ve
.PP
This method reads the command line arguments from the user and tries to create
instantiate the current class with the ARGV-input. If it fails it returns a
MooseX::App::Message::Envelope object holding an error message.
.PP
You can pass a hash or hashref of default params to new_with_options
.PP
.Vb 1
\& MyApp\->new_with_options( %default );
.Ve
.PP
Optionally you can pass a custom \s-1ARGV\s0 to this constructor
.PP
.Vb 1
\& my $obj = MyApp\->new_with_options( ARGV => \e@myARGV );
.Ve
.PP
However, if you do so you must take care of propper \f(CW@ARGV\fR encoding yourself.
.SH "OPTIONS"
.IX Header "OPTIONS"
Same as in MooseX::App
.SH "PLUGINS"
.IX Header "PLUGINS"
Same as in MooseX::App. However plugings adding commands (eg. version)
will not work with MooseX::App::Simple.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Read the Tutorial for getting started with a simple
MooseX::App command line application.
.PP
See MooseX::Getopt and MooX::Options for alternatives
