.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::Layer2::Trapeze 3"
.TH SNMP::Info::Layer2::Trapeze 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::Layer2::Trapeze \- SNMP Interface to Juniper (Trapeze) Wireless
Controllers
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Miller
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    #Let SNMP::Info determine the correct subclass for you.
\&
\&    my $trapeze = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\&    my $class = $trapeze\->class();
\&    print " Using device sub class : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides abstraction to the configuration information obtainable from
Juniper (Trapeze) Wireless Controllers through \s-1SNMP.\s0
.PP
This class emulates bridge functionality for the wireless switch. This enables
end station \s-1MAC\s0 addresses collection and correlation to the thin access point
the end station is using for communication.
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.IP "SNMP::Info::Layer2" 4
.IX Item "SNMP::Info::Layer2"
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.PD 0
.IP "\fITRAPEZE-NETWORKS-REGISTRATION-DEVICES-MIB\fR" 4
.IX Item "TRAPEZE-NETWORKS-REGISTRATION-DEVICES-MIB"
.IP "\fITRAPEZE-NETWORKS-AP-STATUS-MIB\fR" 4
.IX Item "TRAPEZE-NETWORKS-AP-STATUS-MIB"
.IP "\fITRAPEZE-NETWORKS-CLIENT-SESSION-MIB\fR" 4
.IX Item "TRAPEZE-NETWORKS-CLIENT-SESSION-MIB"
.IP "\fITRAPEZE-NETWORKS-SYSTEM-MIB\fR" 4
.IX Item "TRAPEZE-NETWORKS-SYSTEM-MIB"
.IP "\fITRAPEZE-NETWORKS-BASIC-MIB\fR" 4
.IX Item "TRAPEZE-NETWORKS-BASIC-MIB"
.PD
.SS "Inherited Classes' MIBs"
.IX Subsection "Inherited Classes' MIBs"
See \*(L"Required MIBs\*(R" in SNMP::Info::Layer2 for its own \s-1MIB\s0 requirements.
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP\s0
.ie n .IP "$trapeze\->\fBvendor()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBvendor()\fR" 4
.IX Item "$trapeze->vendor()"
Returns 'juniper'
.ie n .IP "$trapeze\->\fBos()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBos()\fR" 4
.IX Item "$trapeze->os()"
Returns 'trapeze'
.ie n .IP "$trapeze\->\fBos_ver()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBos_ver()\fR" 4
.IX Item "$trapeze->os_ver()"
(\f(CW\*(C`trpzVersionString\*(C'\fR)
.ie n .IP "$trapeze\->\fBmodel()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBmodel()\fR" 4
.IX Item "$trapeze->model()"
Tries to reference \f(CW$trapeze\fR\->\fBid()\fR to \fITRAPEZE-NETWORKS-REGISTRATION-DEVICES-MIB\fR
.Sp
Removes \f(CW\*(AqwirelessLANController\*(Aq\fR for readability.
.ie n .IP "$trapeze\->\fBserial()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBserial()\fR" 4
.IX Item "$trapeze->serial()"
(\f(CW\*(C`trpzSerialNumber\*(C'\fR)
.ie n .IP "$trapeze\->\fBmac()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBmac()\fR" 4
.IX Item "$trapeze->mac()"
(\f(CW\*(C`dot1dBaseBridgeAddress\*(C'\fR)
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$trapeze\->\fBlayers()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBlayers()\fR" 4
.IX Item "$trapeze->layers()"
Returns 00000011.  Class emulates Layer 2 functionality for Thin APs through
proprietary MIBs.
.SS "Global Methods imported from SNMP::Info::Layer2"
.IX Subsection "Global Methods imported from SNMP::Info::Layer2"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::Layer2 for details.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.ie n .IP "$trapeze\->\fBi_ssidlist()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBi_ssidlist()\fR" 4
.IX Item "$trapeze->i_ssidlist()"
Returns reference to hash.  \s-1SSID\s0's recognized by the radio interface.
.ie n .IP "$trapeze\->\fBi_80211channel()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBi_80211channel()\fR" 4
.IX Item "$trapeze->i_80211channel()"
Returns reference to hash.  Current operating frequency channel of the radio
interface.
.ie n .IP "$trapeze\->\fBdot11_cur_tx_pwr_mw()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBdot11_cur_tx_pwr_mw()\fR" 4
.IX Item "$trapeze->dot11_cur_tx_pwr_mw()"
Returns reference to hash.  Current transmit power, in milliwatts, of the
radio interface.
.IP "\fBcd11_mac()\fR" 4
.IX Item "cd11_mac()"
Client \s-1MAC\s0 address.
.ie n .SS "\s-1AP\s0 Status Table  (""trpzApStatApStatusTable"")"
.el .SS "\s-1AP\s0 Status Table  (\f(CWtrpzApStatApStatusTable\fP)"
.IX Subsection "AP Status Table (trpzApStatApStatusTable)"
A table describing all the APs currently present and managed by the
controller.
.ie n .IP "$trapeze\->\fBtrapeze_ap_mac()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBtrapeze_ap_mac()\fR" 4
.IX Item "$trapeze->trapeze_ap_mac()"
(\f(CW\*(C`trpzApStatApStatusBaseMac\*(C'\fR)
.ie n .IP "$trapeze\->\fBtrapeze_ap_name()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBtrapeze_ap_name()\fR" 4
.IX Item "$trapeze->trapeze_ap_name()"
(\f(CW\*(C`trpzApStatApStatusApName\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_ap_ip()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_ap_ip()\fR" 4
.IX Item "$nws2300->trapeze_ap_ip()"
(\f(CW\*(C`trpzApStatApStatusIpAddress\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_ap_sw()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_ap_sw()\fR" 4
.IX Item "$nws2300->trapeze_ap_sw()"
(\f(CW\*(C`trpzApStatApStatusSoftwareVer\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_ap_fw()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_ap_fw()\fR" 4
.IX Item "$nws2300->trapeze_ap_fw()"
(\f(CW\*(C`trpzApStatApStatusBootVer\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_ap_model()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_ap_model()\fR" 4
.IX Item "$nws2300->trapeze_ap_model()"
(\f(CW\*(C`trpzApStatApStatusModel\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_ap_type()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_ap_type()\fR" 4
.IX Item "$nws2300->trapeze_ap_type()"
(\f(CW\*(C`trpzApStatApStatusModel\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_ap_status()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_ap_status()\fR" 4
.IX Item "$nws2300->trapeze_ap_status()"
(\f(CW\*(C`trpzApStatApStatusApState\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_ap_vendor()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_ap_vendor()\fR" 4
.IX Item "$nws2300->trapeze_ap_vendor()"
(\f(CW\*(C`trpzApStatApStatusManufacturerId\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_ap_num()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_ap_num()\fR" 4
.IX Item "$nws2300->trapeze_ap_num()"
(\f(CW\*(C`trpzApStatApStatusApNum\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_ap_dapnum()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_ap_dapnum()\fR" 4
.IX Item "$nws2300->trapeze_ap_dapnum()"
(\f(CW\*(C`trpzApStatApStatusPortOrDapNum\*(C'\fR)
.ie n .SS "\s-1AP\s0 Radio Status Table  (""trpzApStatRadioStatusTable"")"
.el .SS "\s-1AP\s0 Radio Status Table  (\f(CWtrpzApStatRadioStatusTable\fP)"
.IX Subsection "AP Radio Status Table (trpzApStatRadioStatusTable)"
A table describing all radios on all the APs currently present and managed
by the controller.
.ie n .IP "$nws2300\->\fBtrapeze_apif_mac()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apif_mac()\fR" 4
.IX Item "$nws2300->trapeze_apif_mac()"
(\f(CW\*(C`trpzApStatRadioStatusBaseMac\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_apif_type()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apif_type()\fR" 4
.IX Item "$nws2300->trapeze_apif_type()"
(\f(CW\*(C`trpzApStatRadioStatusRadioPhyType\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_apif_ch_num()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apif_ch_num()\fR" 4
.IX Item "$nws2300->trapeze_apif_ch_num()"
(\f(CW\*(C`trpzApStatRadioStatusCurrentChannelNum\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_apif_power()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apif_power()\fR" 4
.IX Item "$nws2300->trapeze_apif_power()"
(\f(CW\*(C`trpzApStatRadioStatusCurrentPowerLevel\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_apif_admin()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apif_admin()\fR" 4
.IX Item "$nws2300->trapeze_apif_admin()"
(\f(CW\*(C`trpzApStatRadioStatusRadioMode\*(C'\fR)
.ie n .SS "\s-1AP\s0 Radio Status Service Table (""trpzApStatRadioServiceTable"")"
.el .SS "\s-1AP\s0 Radio Status Service Table (\f(CWtrpzApStatRadioServiceTable\fP)"
.IX Subsection "AP Radio Status Service Table (trpzApStatRadioServiceTable)"
A table describing radio services associated with APs currently present
and managed by the controller.
.ie n .IP "$nws2300\->\fBtrapeze_apif_bssid()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apif_bssid()\fR" 4
.IX Item "$nws2300->trapeze_apif_bssid()"
(\f(CW\*(C`trpzApStatRadioServBssid\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_apif_prof()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apif_prof()\fR" 4
.IX Item "$nws2300->trapeze_apif_prof()"
(\f(CW\*(C`trpzApStatRadioServServiceProfileName\*(C'\fR)
.ie n .SS "\s-1AP\s0 Service Profile Config Table (""trpzApConfServiceProfileTable"")"
.el .SS "\s-1AP\s0 Service Profile Config Table (\f(CWtrpzApConfServiceProfileTable\fP)"
.IX Subsection "AP Service Profile Config Table (trpzApConfServiceProfileTable)"
.ie n .IP "$nws2300\->\fBtrapeze_ess_bcast()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_ess_bcast()\fR" 4
.IX Item "$nws2300->trapeze_ess_bcast()"
(\f(CW\*(C`trpzApConfServProfBeaconEnabled\*(C'\fR)
.ie n .SS "\s-1AP\s0 Radio Config Table (""trpzApConfRadioConfigTable"")"
.el .SS "\s-1AP\s0 Radio Config Table (\f(CWtrpzApConfRadioConfigTable\fP)"
.IX Subsection "AP Radio Config Table (trpzApConfRadioConfigTable)"
.ie n .IP "$nws2300\->\fBtrapeze_apcr_txpwr()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apcr_txpwr()\fR" 4
.IX Item "$nws2300->trapeze_apcr_txpwr()"
(\f(CW\*(C`trpzApConfRadioConfigTxPower\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_apcr_ch()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apcr_ch()\fR" 4
.IX Item "$nws2300->trapeze_apcr_ch()"
(\f(CW\*(C`trpzApConfRadioConfigChannel\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_apcr_mode()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apcr_mode()\fR" 4
.IX Item "$nws2300->trapeze_apcr_mode()"
(\f(CW\*(C`trpzApConfRadioConfigRadioMode\*(C'\fR)
.ie n .SS "\s-1AP\s0 Config Table (""trpzApConfApConfigTable"")"
.el .SS "\s-1AP\s0 Config Table (\f(CWtrpzApConfApConfigTable\fP)"
.IX Subsection "AP Config Table (trpzApConfApConfigTable)"
.ie n .IP "$nws2300\->\fBtrapeze_apc_descr()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apc_descr()\fR" 4
.IX Item "$nws2300->trapeze_apc_descr()"
(\f(CW\*(C`trpzApConfApConfigDescription\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_apc_loc()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apc_loc()\fR" 4
.IX Item "$nws2300->trapeze_apc_loc()"
(\f(CW\*(C`trpzApConfApConfigLocation\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_apc_name()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apc_name()\fR" 4
.IX Item "$nws2300->trapeze_apc_name()"
(\f(CW\*(C`trpzApConfApConfigApName\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_apc_model()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apc_model()\fR" 4
.IX Item "$nws2300->trapeze_apc_model()"
(\f(CW\*(C`trpzApConfApConfigApModelName\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_apc_serial()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_apc_serial()\fR" 4
.IX Item "$nws2300->trapeze_apc_serial()"
(\f(CW\*(C`trpzApConfApConfigApSerialNum\*(C'\fR)
.ie n .SS "Client Session Table (""trpzClSessClientSessionTable"")"
.el .SS "Client Session Table (\f(CWtrpzClSessClientSessionTable\fP)"
.IX Subsection "Client Session Table (trpzClSessClientSessionTable)"
.ie n .IP "$nws2300\->\fBtrapeze_sta_slot()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_sta_slot()\fR" 4
.IX Item "$nws2300->trapeze_sta_slot()"
(\f(CW\*(C`trpzClSessClientSessRadioNum\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_sta_serial()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_sta_serial()\fR" 4
.IX Item "$nws2300->trapeze_sta_serial()"
(\f(CW\*(C`trpzClSessClientSessApSerialNum\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_sta_ssid()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_sta_ssid()\fR" 4
.IX Item "$nws2300->trapeze_sta_ssid()"
(\f(CW\*(C`trpzClSessClientSessSsid\*(C'\fR)
.ie n .IP "$nws2300\->\fBtrapeze_sta_ip()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBtrapeze_sta_ip()\fR" 4
.IX Item "$nws2300->trapeze_sta_ip()"
(\f(CW\*(C`trpzClSessClientSessIpAddress\*(C'\fR)
.ie n .SS "Client Session Statistics Table (""trpzClSessClientSessionStatisticsTable"")"
.el .SS "Client Session Statistics Table (\f(CWtrpzClSessClientSessionStatisticsTable\fP)"
.IX Subsection "Client Session Statistics Table (trpzClSessClientSessionStatisticsTable)"
These emulate the \fI\s-1CISCO\-DOT11\-MIB\s0\fR
.ie n .IP "$nws2300\->\fBcd11_sigstrength()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBcd11_sigstrength()\fR" 4
.IX Item "$nws2300->cd11_sigstrength()"
(\f(CW\*(C`trpzClSessClientSessStatsLastRssi\*(C'\fR)
.ie n .IP "$nws2300\->\fBcd11_sigqual()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBcd11_sigqual()\fR" 4
.IX Item "$nws2300->cd11_sigqual()"
(\f(CW\*(C`trpzClSessClientSessStatsLastSNR\*(C'\fR)
.ie n .IP "$nws2300\->\fBcd11_txrate()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBcd11_txrate()\fR" 4
.IX Item "$nws2300->cd11_txrate()"
(\f(CW\*(C`trpzClSessClientSessStatsLastRate\*(C'\fR)
.ie n .IP "$nws2300\->\fBcd11_rxbyte()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBcd11_rxbyte()\fR" 4
.IX Item "$nws2300->cd11_rxbyte()"
(\f(CW\*(C`trpzClSessClientSessStatsUniOctetIn\*(C'\fR)
.ie n .IP "$nws2300\->\fBcd11_txbyte()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBcd11_txbyte()\fR" 4
.IX Item "$nws2300->cd11_txbyte()"
(\f(CW\*(C`trpzClSessClientSessStatsUniOctetOut\*(C'\fR)
.ie n .IP "$nws2300\->\fBcd11_rxpkt()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBcd11_rxpkt()\fR" 4
.IX Item "$nws2300->cd11_rxpkt()"
(\f(CW\*(C`trpzClSessClientSessStatsUniPktIn\*(C'\fR)
.ie n .IP "$nws2300\->\fBcd11_txpkt()\fR" 4
.el .IP "\f(CW$nws2300\fR\->\fBcd11_txpkt()\fR" 4
.IX Item "$nws2300->cd11_txpkt()"
(\f(CW\*(C`trpzClSessClientSessStatsUniPktOut\*(C'\fR)
.SS "Table Methods imported from SNMP::Info"
.IX Subsection "Table Methods imported from SNMP::Info"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::Layer2 for details.
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$trapeze\->\fBi_index()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBi_index()\fR" 4
.IX Item "$trapeze->i_index()"
Returns reference to map of IIDs to Interface index.
.Sp
Extends \f(CW\*(C`ifIndex\*(C'\fR to support thin APs and \s-1WLAN\s0 virtual interfaces as device
interfaces.
.ie n .IP "$trapeze\->\fBinterfaces()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBinterfaces()\fR" 4
.IX Item "$trapeze->interfaces()"
Returns reference to map of IIDs to ports.  Thin APs are implemented as device
interfaces.  The thin \s-1AP MAC\s0 address and Slot \s-1ID\s0 \fBtrapeze_apif_slot()\fR are
used as the port identifier.
.ie n .IP "$trapeze\->\fBi_name()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBi_name()\fR" 4
.IX Item "$trapeze->i_name()"
Returns reference to map of IIDs to interface names.  Returns \f(CW\*(C`ifName\*(C'\fR for
Ethernet interfaces and \fBtrapeze_ap_name()\fR for thin \s-1AP\s0 interfaces.
.ie n .IP "$trapeze\->\fBi_description()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBi_description()\fR" 4
.IX Item "$trapeze->i_description()"
Returns reference to map of IIDs to interface types.  Returns \f(CW\*(C`ifDescr\*(C'\fR
for Ethernet interfaces, \fBtrapeze_ap_name()\fR for thin \s-1AP\s0 interfaces.
.ie n .IP "$trapeze\->\fBi_type()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBi_type()\fR" 4
.IX Item "$trapeze->i_type()"
Returns reference to map of IIDs to interface descriptions.  Returns
\&\f(CW\*(C`ifType\*(C'\fR for Ethernet interfaces and \f(CW\*(AqcapwapWtpVirtualRadio\*(Aq\fR for thin \s-1AP\s0
interfaces.
.ie n .IP "$trapeze\->\fBi_up()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBi_up()\fR" 4
.IX Item "$trapeze->i_up()"
Returns reference to map of IIDs to link status of the interface.  Returns
\&\f(CW\*(C`ifOperStatus\*(C'\fR for Ethernet interfaces and \fBtrapeze_apif_admin()\fR for thin \s-1AP\s0
interfaces.
.ie n .IP "$trapeze\->\fBi_up_admin()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBi_up_admin()\fR" 4
.IX Item "$trapeze->i_up_admin()"
Returns reference to map of IIDs to administrative status of the interface.
Returns \f(CW\*(C`ifAdminStatus\*(C'\fR for Ethernet interfaces and \fBtrapeze_apif_admin()\fR
for thin \s-1AP\s0 interfaces.
.ie n .IP "$trapeze\->\fBi_mac()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBi_mac()\fR" 4
.IX Item "$trapeze->i_mac()"
Returns reference to map of IIDs to \s-1MAC\s0 address of the interface.  Returns
\&\f(CW\*(C`ifPhysAddress\*(C'\fR for Ethernet interfaces.
.ie n .IP "$trapeze\->\fBbp_index()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBbp_index()\fR" 4
.IX Item "$trapeze->bp_index()"
Simulates bridge \s-1MIB\s0 by returning reference to a hash mapping \fBi_index()\fR to
the interface iid.
.ie n .IP "$trapeze\->\fBfw_port()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBfw_port()\fR" 4
.IX Item "$trapeze->fw_port()"
Returns reference to a hash, value being mac and
\&\fBtrapeze_sta_slot()\fR combined to match the interface iid.
.ie n .IP "$trapeze\->\fBfw_mac()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBfw_mac()\fR" 4
.IX Item "$trapeze->fw_mac()"
Extracts the \s-1MAC\s0 from the \fBtrapeze_sta_serial()\fR index.
.SS "Pseudo \s-1ARP\s0 Cache Entries"
.IX Subsection "Pseudo ARP Cache Entries"
The controller snoops on the \s-1MAC\-\s0>\s-1IP\s0 mappings.  Using this as \s-1ARP\s0 cache data
allows us to get \s-1MAC\-\s0>\s-1IP\s0 mappings even for stations that only
communicate locally.  The data is gathered from \fBtrapeze_sta_ip()\fR.
.ie n .IP "$trapeze\->\fBat_paddr()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBat_paddr()\fR" 4
.IX Item "$trapeze->at_paddr()"
Returns reference to hash of Pseudo Arp Cache Entries to \s-1MAC\s0 address
.ie n .IP "$trapeze\->\fBat_netaddr()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBat_netaddr()\fR" 4
.IX Item "$trapeze->at_netaddr()"
Returns reference to hash of Pseudo Arp Cache Entries to \s-1IP\s0 Address
.SS "Pseudo \fIENTITY-MIB\fP information"
.IX Subsection "Pseudo ENTITY-MIB information"
These methods emulate \fIENTITY-MIB\fR Physical Table methods using
\&\fITRAPEZE-NETWORKS-AP-STATUS-MIB\fR.  Thin APs are included as subcomponents of
the wireless controller.
.ie n .IP "$trapeze\->\fBe_index()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBe_index()\fR" 4
.IX Item "$trapeze->e_index()"
Returns reference to hash.  Key: \s-1IID\s0 and Value: Integer. The index for APs is
created with an integer representation of the last three octets of the
\&\s-1AP MAC\s0 address.
.ie n .IP "$trapeze\->\fBe_class()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBe_class()\fR" 4
.IX Item "$trapeze->e_class()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: General hardware type.  Return ap
for wireless access points.
.ie n .IP "$trapeze\->\fBe_descr()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBe_descr()\fR" 4
.IX Item "$trapeze->e_descr()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Human friendly name.
.ie n .IP "$trapeze\->\fBe_model()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBe_model()\fR" 4
.IX Item "$trapeze->e_model()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Model name.
.ie n .IP "$trapeze\->\fBe_name()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBe_name()\fR" 4
.IX Item "$trapeze->e_name()"
More computer friendly name of entity.  Name is either '\s-1WLAN\s0 Controller' or
\&'\s-1AP\s0'.
.ie n .IP "$trapeze\->\fBe_vendor()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBe_vendor()\fR" 4
.IX Item "$trapeze->e_vendor()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: avaya.
.ie n .IP "$trapeze\->\fBe_serial()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBe_serial()\fR" 4
.IX Item "$trapeze->e_serial()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Serial number.
.ie n .IP "$trapeze\->\fBe_pos()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBe_pos()\fR" 4
.IX Item "$trapeze->e_pos()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: The relative position among all
entities sharing the same parent.
.ie n .IP "$trapeze\->\fBe_type()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBe_type()\fR" 4
.IX Item "$trapeze->e_type()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Type of component.
.ie n .IP "$trapeze\->\fBe_fwver()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBe_fwver()\fR" 4
.IX Item "$trapeze->e_fwver()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Firmware revision.
.ie n .IP "$trapeze\->\fBe_swver()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBe_swver()\fR" 4
.IX Item "$trapeze->e_swver()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Software revision.
.ie n .IP "$trapeze\->\fBe_parent()\fR" 4
.el .IP "\f(CW$trapeze\fR\->\fBe_parent()\fR" 4
.IX Item "$trapeze->e_parent()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: The value of \fBe_index()\fR for the
entity which 'contains' this entity.
