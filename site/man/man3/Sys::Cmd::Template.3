.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Sys::Cmd::Template 3"
.TH Sys::Cmd::Template 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Sys::Cmd::Template \- command/process templates for Sys::Cmd
.SH "VERSION"
.IX Header "VERSION"
0.85.4 (2016\-06\-06) Development release
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Sys::Cmd::Template qw/cmd_template/;
\&
\&    my $git = cmd_template(\*(Aqgit\*(Aq, {
\&        dir => \*(Aq/proj/subdir\*(Aq,
\&        env => { GIT_DIR => \*(Aq/proj/.git\*(Aq },
\&    });
\&
\&    # Get command output, raise exception on failure:
\&    $output = $git\->run(\*(Aqstatus\*(Aq);
\&
\&    # Feed command some input, get output as lines,
\&    # raise exception on failure:
\&    @output = $git\->run(qw/commit \-F \-/, { input => \*(Aqfeedme\*(Aq });
\&
\&    # Spawn and interact with a process:
\&    $proc = $git\->spawn( @subcmd, { encoding => \*(Aqiso\-8859\-3\*(Aq} );
\&
\&    while (my $line = $proc\->stdout\->getline) {
\&        $proc\->stdin\->print("thanks");
\&    }
\&
\&    my @errors = $proc\->stderr\->getlines;
\&    $proc\->close();     # Done!
\&
\&    # read exit information
\&    $proc\->exit();      # exit status
\&    $proc\->signal();    # signal
\&    $proc\->core();      # core dumped? (boolean)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBSys::Cmd::Template\fR provides \*(L"template\*(R" objects for system commands.
This is useful when you need to make repeated calls to an external
binary with the same options or environment settings. \*(L"git\*(R" and \*(L"gpg\*(R"
are good examples of such commands.
.PP
A \fBSys::Cmd::Template\fR object should represent the common elements of
the calls to your external command. The \f(CW\*(C`run\*(C'\fR, \f(CW\*(C`runx\*(C'\fR and \f(CW\*(C`spawn\*(C'\fR
methods then merge their arguments and options with these common
elements and execute the result with Sys::Cmd.
.PP
A single function is exported on demand by this module:
.ie n .IP "cmd_template( @cmd, [\e%opt] ) => Sys::Cmd::Template" 4
.el .IP "cmd_template( \f(CW@cmd\fR, [\e%opt] ) => Sys::Cmd::Template" 4
.IX Item "cmd_template( @cmd, [%opt] ) => Sys::Cmd::Template"
Create a new Sys::Cmd::Template object.  The first element of
\&\f(CW@cmd\fR will be looked up using File::Which if it is not found as a
relative file name. \f(CW%opt\fR is an optional hashref containing any of
the following key/values:
.RS 4
.IP "dir" 4
.IX Item "dir"
The working directory the command will be run in.
.IP "encoding" 4
.IX Item "encoding"
An string value identifying the encoding of the input/output
file-handles. Has no default but Sys::Cmd will default this to
\&'utf8'.
.IP "env" 4
.IX Item "env"
A hashref containing key/values to be added to the current environment
at run-time. If a key has an undefined value then the key is removed
from the environment altogether.
.IP "input" 4
.IX Item "input"
A string which is fed to each command via its standard input, which is
then closed.
.RE
.RS 4
.RE
.PP
\&\fBSys::Cmd::Template\fR objects (documented below) can of course be
created using the standard \f(CW\*(C`new\*(C'\fR constructor if you prefer that to the
\&\f(CW\*(C`cmd_template\*(C'\fR function:
.PP
.Vb 7
\&    $proc = Sys::Cmd::Template\->new(
\&        cmd => \e@cmd,
\&        dir => \*(Aq/\*(Aq,
\&        env => { SOME => \*(AqVALUE\*(Aq },
\&        encoding => \*(Aqiso\-8859\-3\*(Aq,
\&        input => \*(Aqfeedme\*(Aq,
\&    );
.Ve
.PP
Note that \fBSys::Cmd::Template\fR objects created this way will not
lookup the command using File::Which the way the \f(CW\*(C`cmd_template\*(C'\fR
function does.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new(%args) => Sys::Cmd::Template" 4
.IX Item "new(%args) => Sys::Cmd::Template"
Create a new Sys::Cmd template object. \f(CW%args\fR can contain any one of
the \f(CW\*(C`cmd\*(C'\fR, \f(CW\*(C`dir\*(C'\fR, \f(CW\*(C`encoding\*(C'\fR, \f(CW\*(C`env\*(C'\fR and \f(CW\*(C`input\*(C'\fR values as defined
as attributes below.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
In contrast with Sys::Cmd the attributes defined here can be
modified, and the new values will be used on subsequent method calls.
.IP "cmd" 4
.IX Item "cmd"
An array ref containing the command and its arguments.
.IP "dir" 4
.IX Item "dir"
The working directory the command will be run in.
.IP "encoding" 4
.IX Item "encoding"
An string value identifying the encoding of the input/output
file-handles. Defaults to 'utf8'.
.IP "env" 4
.IX Item "env"
A hashref containing key/values to be added to the current environment
at run-time. If a key has an undefined value then the key is removed
from the environment altogether.
.IP "input" 4
.IX Item "input"
A string which is fed to the command via its standard input, which is
then closed. Most likely you won't ever want to use this, but it is
here for completeness.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "run( @cmd, [\e%opt] ) => $output | @output" 4
.el .IP "run( \f(CW@cmd\fR, [\e%opt] ) => \f(CW$output\fR | \f(CW@output\fR" 4
.IX Item "run( @cmd, [%opt] ) => $output | @output"
\&\fBAppend\fR \f(CW@cmd\fR to the \f(CW\*(C`cmd\*(C'\fR attribute, execute it using Sys::Cmd
and return what the command sent to its \f(CW\*(C`STDOUT\*(C'\fR, raising an exception
in the event of error. In array context returns a list instead of a
plain string.
.Sp
The command elements can be modified from your objects values with an
optional hashref containing the following key/values:
.RS 4
.IP "dir" 4
.IX Item "dir"
The working directory the command will be run in. Will \fBreplace\fR an
existing \f(CW\*(C`dir\*(C'\fR attribute.
.IP "encoding" 4
.IX Item "encoding"
An string value identifying the encoding of the input/output
file-handles. Defaults to 'utf8'.  Will \fBreplace\fR an existing \f(CW\*(C`dir\*(C'\fR
attribute.
.IP "env" 4
.IX Item "env"
A hashref containing key/values to be added to the current environment
at run-time. If a key has an undefined value then the key is removed
from the environment altogether. Will be \fBmerged\fR with an existing
\&\f(CW\*(C`env\*(C'\fR attribute.
.IP "input" 4
.IX Item "input"
A string which is fed to the command via its standard input, which is
then closed.  Will \fBreplace\fR an existing \f(CW\*(C`input\*(C'\fR attribute.
.RE
.RS 4
.RE
.ie n .IP "runx( @cmd, [\e%opt] ) => $outerrput | @outerrput" 4
.el .IP "runx( \f(CW@cmd\fR, [\e%opt] ) => \f(CW$outerrput\fR | \f(CW@outerrput\fR" 4
.IX Item "runx( @cmd, [%opt] ) => $outerrput | @outerrput"
The same as the \f(CW\*(C`run\*(C'\fR method but with the command's \f(CW\*(C`STDERR\*(C'\fR output
appended to the \f(CW\*(C`STDOUT\*(C'\fR output.
.ie n .IP "spawn( @cmd, [\e%opt] ) => Sys::Cmd" 4
.el .IP "spawn( \f(CW@cmd\fR, [\e%opt] ) => Sys::Cmd" 4
.IX Item "spawn( @cmd, [%opt] ) => Sys::Cmd"
Returns a \fBSys::Cmd\fR object representing the process running \f(CW@cmd\fR
(appended to the \f(CW\*(C`cmd\*(C'\fR attribute), with attributes set according to
the optional \e%opt hashref.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Sys::Cmd
.SH "SUPPORT"
.IX Header "SUPPORT"
.IP "Bug Reporting" 4
.IX Item "Bug Reporting"
.Vb 1
\&    https://rt.cpan.org/Public/Bug/Report.html?Queue=Sys\-Cmd
.Ve
.IP "Source Code" 4
.IX Item "Source Code"
.Vb 1
\&    git clone git://github.com/mlawren/sys\-cmd.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Lawrence <nomad@null.net>.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2011\-2014 Mark Lawrence <nomad@null.net>
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.
