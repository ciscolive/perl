.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::App::Command 3"
.TH MooseX::App::Command 3 "2019-05-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::App::Command \- Load command class metaclasses
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package MyApp::SomeCommand;
\& 
\& use MooseX::App::Command; # Also loads Moose
\& 
\& option \*(Aqtestattr\*(Aq => (
\&    isa             => \*(Aqrw\*(Aq,
\&    cmd_tags        => [qw(Important! Nice))],
\& );
\& 
\& command_short_description \*(AqThis is a short description\*(Aq;
\& command_long_description \*(AqThis is a much longer description yadda yadda\*(Aq;
\& command_usage \*(Aqscript some_command \-\-testattr 123\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
By loading this class into your command classes you import all required
symbols, and enable all documentation features such as:
.IP "\(bu" 4
Parsing command documentation from Pod
.IP "\(bu" 4
Setting the command documentation manually via \f(CW\*(C`command_short_description\*(C'\fR and \f(CW\*(C`command_long_description\*(C'\fR
.IP "\(bu" 4
Overriding the automated usage header with custom usage from Pod or via \f(CW\*(C`command_usage\*(C'\fR
.IP "\(bu" 4
Adding the \f(CW\*(C`cmd_tags\*(C'\fR, \f(CW\*(C`cmd_flag\*(C'\fR, \f(CW\*(C`cmd_aliases\*(C'\fR and \f(CW\*(C`cmd_type\*(C'\fR attributes to options
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "command_short_description"
.IX Subsection "command_short_description"
Set the short description. If not set this information will be taken from the
Pod \s-1NAME\s0 or \s-1ABSTRACT\s0 section. Alternative this will be taken from the
DistZilla \s-1ABSTRACT\s0 tag.
.SS "command_long_description"
.IX Subsection "command_long_description"
Set the long description. If not set this information will be taken from the
Pod \s-1DESCRIPTION\s0 or \s-1OVERVIEW\s0 sections.
.SS "command_usage"
.IX Subsection "command_usage"
Set custom usage. If not set this will be taken from the Pod \s-1SYNOPSIS\s0 or
\&\s-1USAGE\s0 section. If those sections are not available, the usage
information will be autogenerated.
.SS "command_strict"
.IX Subsection "command_strict"
.Vb 3
\& command_strict(0); # default
\& OR
\& command_strict(1);
.Ve
.PP
If strict is enabled the program will terminate with an error message if
superfluous/unknown positional parameters are supplied. If disabled all
extra parameters will be copied to the extra_argv attribute.
.PP
The app_strict function in the app classes allows one to set this option
globally.
