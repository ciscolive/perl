.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::ElasticSearch::Utilities::QueryString::Plugin 3"
.TH App::ElasticSearch::Utilities::QueryString::Plugin 3 "2020-09-16" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::ElasticSearch::Utilities::QueryString::Plugin \- Moo::Role for implementing QueryString Plugins
.SH "VERSION"
.IX Header "VERSION"
version 7.8
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "name"
.IX Subsection "name"
Name of the plugin, used in debug reporting.
.SS "priority"
.IX Subsection "priority"
Priority is an integer which determmines the order tokens are parsed in
low\->high order.
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "\fBhandle_token()\fP"
.IX Subsection "handle_token()"
The \fBhandle_token()\fR routine receives a single token from the command line, often a single word
and returns a hash reference specifying
.PP
The token expansion plugins can return undefined, which is basically a noop on the token.
The plugin can return a hash reference, which marks that token as handled and no other plugins
receive that token.  The hash reference may contain:
.SS "query_string"
.IX Subsection "query_string"
This is the rewritten bits that will be reassembled in to the final query string.
.SS "condition"
.IX Subsection "condition"
This is usually a hash reference representing the condition going into the bool query. For instance:
.PP
.Vb 1
\&    { terms => { field => [qw(alice bob charlie)] } }
.Ve
.PP
Or
.PP
.Vb 1
\&    { prefix => { user_agent => \*(AqGo \*(Aq } }
.Ve
.PP
These conditions will wind up in the \fBmust\fR or \fBmust_not\fR section of the \fBbool\fR query depending on the
state of the the invert flag.
.SS "invert"
.IX Subsection "invert"
This is used by the bareword \*(L"not\*(R" to track whether the token invoked a flip from the \fBmust\fR to the \fBmust_not\fR
state.  After each token is processed, if it didn't set this flag, the flag is reset.
.SS "dangles"
.IX Subsection "dangles"
This is used for bare words like \*(L"not\*(R", \*(L"or\*(R", and \*(L"and\*(R" to denote that these terms cannot dangle from the
beginning or end of the query_string.  This allows the final pass of the query_string builder to strip these
words to prevent syntax errors.
.SH "AUTHOR"
.IX Header "AUTHOR"
Brad Lhotsky <brad@divisionbyzero.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Brad Lhotsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The (three\-clause) BSD License
.Ve
