.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tree::Fast 3"
.TH Tree::Fast 3 "2019-06-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tree::Fast \- the fastest possible implementation of a tree in pure Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  my $tree = Tree::Fast\->new( \*(Aqroot\*(Aq );
\&  my $child = Tree::Fast\->new( \*(Aqchild\*(Aq );
\&  $tree\->add_child( {}, $child );
\&
\&  $tree\->add_child( { at => 0 }, Tree::Fast\->new( \*(Aqfirst child\*(Aq ) );
\&  $tree\->add_child( { at => \-1 }, Tree::Fast\->new( \*(Aqlast child\*(Aq ) );
\&
\&  my @children = $tree\->children;
\&  my @some_children = $tree\->children( 0, 2 );
\&
\&  $tree\->remove_child( 0 );
\&
\&  my @nodes = $tree\->traverse( $tree\->POST_ORDER );
\&
\&  my $traversal = $tree\->traverse( $tree\->POST_ORDER );
\&  while ( my $node = $traversal\->() ) {
\&      # Do something with $node here
\&  }
\&
\&  my $clone = $tree\->clone;
\&  my $mirror = $tree\->clone\->mirror;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is meant to be the core implementation for Tree, stripped down as much
as possible. There is no error-checking, bounds-checking, event-handling,
convenience methods, or anything else of the sort. If you want something fuller-featured,
please look at Tree, which is a wrapper around Tree::Fast.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.SS "new([$value])"
.IX Subsection "new([$value])"
Here, [] indicate an optional parameter.
.PP
This will return a \f(CW\*(C`Tree::Fast\*(C'\fR object. It will accept one parameter which, if passed,
will become the \fIvalue\fR (accessible by \f(CW\*(C`value()\*(C'\fR). All other parameters will be
ignored.
.PP
If you call \f(CW\*(C`$tree\->new([$value])\*(C'\fR, it will instead call \f(CW\*(C`clone()\*(C'\fR, then set
the \fIvalue\fR of the clone to \f(CW$value\fR.
.SS "\fBclone()\fP"
.IX Subsection "clone()"
This will return a clone of \f(CW$tree\fR. The clone will be a root tree, but all
children will be cloned.
.PP
If you call \f(CW\*(C`Tree::Fast\->clone([$value])\*(C'\fR, it will instead call \f(CW\*(C`new()\*(C'\fR.
.PP
\&\fB\s-1NOTE:\s0\fR the value is merely a shallow copy. This means that all references
will be kept.
.SS "Behaviors"
.IX Subsection "Behaviors"
.ie n .SS "add_child($options, @nodes)"
.el .SS "add_child($options, \f(CW@nodes\fP)"
.IX Subsection "add_child($options, @nodes)"
This will add all the \f(CW@nodes\fR as children of \f(CW$tree\fR. \f(CW$options\fR is a required
hashref that specifies options for \f(CW\*(C`add_child()\*(C'\fR. The optional parameters are:
.IP "\(bu" 4
at
.Sp
This specifies the index to add \f(CW@nodes\fR at. If specified, this will be passed
into \fBsplice()\fR. The only exceptions are if this is 0, it will act as an
\&\fBunshift()\fR. If it is unset or undefined, it will act as a \fBpush()\fR.
.ie n .SS "remove_child($options, @nodes)"
.el .SS "remove_child($options, \f(CW@nodes\fP)"
.IX Subsection "remove_child($options, @nodes)"
This will remove all the \f(CW@nodes\fR from the children of \f(CW$tree\fR. You can either
pass in the actual child object you wish to remove, the index of the child you
wish to remove, or a combination of both.
.PP
\&\f(CW$options\fR is a required hashref that specifies parameters for \fBremove_child()\fR.
Currently, no parameters are used.
.SS "\fBmirror()\fP"
.IX Subsection "mirror()"
This will modify the tree such that it is a mirror of what it was before. This
means that the order of all children is reversed.
.PP
\&\fB\s-1NOTE\s0\fR: This is a destructive action. It \fIwill\fR modify the internal
structure of the tree. If you wish to get a mirror, yet keep the original tree intact, use
\&\f(CW\*(C`my $mirror = $tree\->clone\->mirror\*(C'\fR.
.SS "traverse( [$order] )"
.IX Subsection "traverse( [$order] )"
Here, [] indicate an optional parameter.
.PP
When called in list context (\f(CW\*(C`my @traversal = $tree\->traverse()\*(C'\fR), this will
return a list of the nodes in the given traversal order. When called in scalar
context (\f(CW\*(C`my $traversal = $tree\->traverse()\*(C'\fR), this will return a closure
that will, over successive calls, iterate over the nodes in the given
traversal order. When finished it will return false.
.PP
The default traversal order is pre-order.
.PP
The various traversal orders do the following steps:
.IP "\(bu" 4
Pre-order
.Sp
This will return the node, then the first sub tree in pre-order traversal,
then the next sub tree, etc.
.Sp
Use \f(CW\*(C`$tree\->PRE_ORDER\*(C'\fR as the \f(CW$order\fR.
.IP "\(bu" 4
Post-order
.Sp
This will return the each sub-tree in post-order traversal, then the node.
.Sp
Use \f(CW\*(C`$tree\->POST_ORDER\*(C'\fR as the \f(CW$order\fR.
.IP "\(bu" 4
Level-order
.Sp
This will return the node, then the all children of the node, then all
grandchildren of the node, etc.
.Sp
Use \f(CW\*(C`$tree\->LEVEL_ORDER\*(C'\fR as the \f(CW$order\fR.
.SS "Accessors"
.IX Subsection "Accessors"
.SS "\fBparent()\fP"
.IX Subsection "parent()"
This will return the parent of \f(CW$tree\fR.
.ie n .SS "children( [ $idx, [$idx, ..] ] )"
.el .SS "children( [ \f(CW$idx\fP, [$idx, ..] ] )"
.IX Subsection "children( [ $idx, [$idx, ..] ] )"
Here, [] indicate optional parameters.
.PP
This will return the children of \f(CW$tree\fR. If called in list context, it will
return all the children. If called in scalar context, it will return the
number of children.
.PP
You may optionally pass in a list of indices to retrieve. This will return the
children in the order you asked for them. This is very much like an
arrayslice.
.SS "\fBvalue()\fP"
.IX Subsection "value()"
This will return the value stored in the node.
.SS "set_value([$value])"
.IX Subsection "set_value([$value])"
Here, [] indicate an optional parameter.
.PP
This will set the \fIvalue\fR stored in the node to \f(CW$value\fR, then return \f(CW$self\fR.
.PP
If \f(CW$value\fR is not provided, undef is used.
.SS "\fBmeta()\fP"
.IX Subsection "meta()"
This will return a hashref that can be used to store whatever metadata the client
wishes to store. For example, Tree::Persist::DB uses this to store database
row ids.
.PP
It is recommended that you store your metadata in a subhashref and not in the
top-level metadata hashref, keyed by your package name. Tree::Persist does
this, using a unique key for each persistence layer associated with that tree.
This will help prevent clobbering of metadata.
.SH "NULL TREE"
.IX Header "NULL TREE"
If you call \f(CW\*(C`$self\->parent\*(C'\fR on a root node, it will return a Tree::Null
object. This is an implementation of the Null Object pattern optimized for
usage with Tree::Fast. It will evaluate as false in every case (using
\&\fIoverload\fR) and all methods called on it will return a Tree::Null object.
.SS "Notes"
.IX Subsection "Notes"
.IP "\(bu" 4
Tree::Null does \fBnot\fR inherit from anything. This is so that all the
methods will go through \s-1AUTOLOAD\s0 vs. the actual method.
.IP "\(bu" 4
However, calling \fBisa()\fR on a Tree::Null object will report that it is-a
any object that is either Tree or in the Tree:: hierarchy.
.IP "\(bu" 4
The Tree::Null object is a singleton.
.IP "\(bu" 4
The Tree::Null object \fIis\fR defined, though. I could not find a way to
make it evaluate as undefined. That may be a good thing.
.SH "CODE COVERAGE"
.IX Header "CODE COVERAGE"
Please see the relevant sections of Tree.
.SH "SUPPORT"
.IX Header "SUPPORT"
Please see the relevant sections of Tree.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.IP "\(bu" 4
Stevan Little for writing Tree::Simple, upon which Tree is based.
.SH "AUTHORS"
.IX Header "AUTHORS"
Rob Kinyon <rob.kinyon@iinteractive.com>
.PP
Stevan Little <stevan.little@iinteractive.com>
.PP
Thanks to Infinity Interactive for generously donating our time.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004, 2005 by Infinity Interactive, Inc.
.PP
<http://www.iinteractive.com>
.PP
This library is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
