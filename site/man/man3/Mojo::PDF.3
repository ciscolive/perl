.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::PDF 3"
.TH Mojo::PDF 3 "2020-10-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::PDF \- Generate PDFs with the goodness of Mojo!
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # Just render text. Be sure to call \->end to save your document
\&    Mojo::PDF\->new(\*(Aqmypdf.pdf\*(Aq)\->text(\*(AqViva la Mojo!\*(Aq, 306, 396)\->end;
\&
\&    # Let\*(Aqs get fancy pants:
\&    Mojo::PDF\->new(\*(Aqmyawesome.pdf\*(Aq, page_size => [612, 792])
\&
\&        \->mixin(\*(Aqtemplate.pdf\*(Aq)   # add a pre\-made PDF page from a template
\&
\&        # Render text with standard fonts
\&        \->font(\*(AqTimes\-Bold\*(Aq)\->size(24)\->color(0, 0, .7)
\&            \->text(\*(AqMojo loves PDFs\*(Aq, 612/2, 500, \*(Aqcenter\*(Aq)
\&
\&        # Render text with custom TTF fonts
\&        \->add_fonts(
\&            galaxie    => \*(Aqfonts/GalaxiePolaris\-Book.ttf\*(Aq,
\&            galaxie_it => \*(Aqfonts/GalaxiePolaris\-BookItalic.ttf\*(Aq,
\&        )
\&        \->font(\*(Aqgalaxie\*(Aq)\->size(24)\->color(\*(Aq#353C8C\*(Aq)
\&            \->text(\*(AqWeeee\*(Aq, 20.4, 75 )
\&            \->text(\*(Aqeeee continuing same line!\*(Aq)
\&            \->text(\*(AqStarted a new line!\*(Aq, 20.4 )
\&
\&        # Render a table
\&        \->font(\*(Aqgalaxie_it\*(Aq)\->size(8)\->color
\&        \->table(
\&            at        => [20.4, 268],
\&            data      => [
\&                [ qw{Product  Description Qty  Price  U/M} ],
\&                @data,
\&            ],
\&        )
\&
\&        \->end;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojotastic, no-nonsense \s-1PDF\s0 generation.
.SH "CAVEATS"
.IX Header "CAVEATS"
\&\fBNote:\fR due to the way PDF::Reuse, which is used under the hood, is
implemented, it's not possible to simultaneously handle multiple
Mojo::PDF objects, as all of the internal PDF::Reuse output
variables are shared. Thus, Mojo::PDF merely provides a more convenient
interface for PDF::Reuse, rather than being a truly object-oriented way
to produce PDFs.
.SH "METHODS"
.IX Header "METHODS"
Unless otherwise indicated, all methods return their invocant.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 2
\&    my $pdf = Mojo::PDF\->new(\*(Aqmyawesome.pdf\*(Aq);
\&    my $pdf = Mojo::PDF\->new(\*(Aqmyawesome.pdf\*(Aq, page_size => [$x, $y]);
.Ve
.PP
Creates a new \f(CW\*(C`Mojo::PDF\*(C'\fR object. Takes one mandatory argument: the filename
of the \s-1PDF\s0 you want to generate, followed by optional key/value attributes.
.PP
If filename is not specified or \f(CW\*(C`undef\*(C'\fR, the \s-1PDF\s0 will be output to \f(CW\*(C`STDOUT\*(C'\fR.
An IO::String object can be specified to output the \s-1PDF\s0 into a variable:
.PP
.Vb 3
\&    # IO::String
\&    my $pdf = Mojo::PDF\->new(IO::String\->new(my $pdf_bytes));
\&    $pdf\->text(\*(AqViva la Mojo!\*(Aq, 306, 396)\->end;
\&
\&    # Then use the bytes somewhere:
\&    open my $fh, \*(Aq>\*(Aq, \*(Aqthe.pdf\*(Aq or die $!;
\&    print $fh $pdf_bytes;
\&    close $fh;
.Ve
.PP
\fI\f(CI\*(C`page_size\*(C'\fI\fR
.IX Subsection "page_size"
.PP
Array reference containing the XxY page size in pixels. Defaults to [612, 792]
(US-Letter).
.ie n .SS """end"""
.el .SS "\f(CWend\fP"
.IX Subsection "end"
.Vb 1
\&    $p\->end;
.Ve
.PP
Finish rendering your \s-1PDF\s0 and save it.
.ie n .SS """add_fonts"""
.el .SS "\f(CWadd_fonts\fP"
.IX Subsection "add_fonts"
.Vb 4
\&    $pdf\->add_fonts(
\&        galaxie    => \*(Aqfonts/GalaxiePolaris\-Book.ttf\*(Aq,
\&        galaxie_it => \*(Aqfonts/GalaxiePolaris\-BookItalic.ttf\*(Aq,
\&    );
.Ve
.PP
Adds \s-1TTF\s0 fonts to the document. Key/value pairs specify the arbitrary name
of the font (for you to use with \*(L"font\*(R") and the path to the \s-1TTF\s0 file.
.PP
You cannot use any of the names of the \*(L"\s-1DEFAULT FONTS\*(R"\s0 for your custom fonts.
.ie n .SS """color"""
.el .SS "\f(CWcolor\fP"
.IX Subsection "color"
.Vb 4
\&    $pdf\->color(.5, .5, .3);
\&    $pdf\->color(\*(Aq#abcdef\*(Aq);
\&    $pdf\->color(\*(Aq#abc\*(Aq);   # same as #aabbcc
\&    $pdf\->color;           # same as #000
.Ve
.PP
Specifies active color. Takes either an \s-1RGB\s0 tuple or a hex colour. Defaults
to black.
.ie n .SS """font"""
.el .SS "\f(CWfont\fP"
.IX Subsection "font"
.Vb 1
\&    $pdf\->font(\*(AqTimes\-Bold\*(Aq);
\&
\&    $pdf\->font(\*(Aqgalaxie\*(Aq);
.Ve
.PP
Sets active font family. Takes the name of either one of the \*(L"\s-1DEFAULT FONTS\*(R"\s0
or one of the custom fonts included with \*(L"add_fonts\*(R". Note that
\&\*(L"\s-1DEFAULT FONTS\*(R"\s0 do not support Unicode.
.ie n .SS """mixin"""
.el .SS "\f(CWmixin\fP"
.IX Subsection "mixin"
.Vb 1
\&    $pdf\->mixin(\*(Aqtemplate.pdf\*(Aq);
\&
\&    $pdf\->mixin(\*(Aqtemplate.pdf\*(Aq, 3);
.Ve
.PP
Adds a page from an existing \s-1PDF\s0 to your currently active page, so you
can use it as a template and render additional things on it. Takes one
mandatory argument, the filename of the \s-1PDF\s0 to include. An optional second
argument specifies the page number to include (starting from 1),
which defaults to the first page.
.PP
\&\fBNote:\fR If you get an error along the lines of \fIcan't be used as a form. See the documentation under prForm how to concatenate streams\fR, it likely means the \s-1PDF\s0 is not compatible with this feature. The details are described in
PDF::Reuse::prForm documentation <https://metacpan.org/pod/release/CNIGHS/PDF-Reuse-0.39/lib/PDF/Reuse.pm#prForm-use-a-page-from-an-old-document-as-a-form/background>. I had to convert my InDesign-generated PDFs with
Win2PDF \*(L"printer\*(R" <https://www.win2pdf.com/> to get them to work with this
method.
.ie n .SS """page"""
.el .SS "\f(CWpage\fP"
.IX Subsection "page"
.Vb 1
\&    $pdf\->page;
.Ve
.PP
Add a new blank page to your document and sets it as the currently active page.
.ie n .SS """pic"""
.el .SS "\f(CWpic\fP"
.IX Subsection "pic"
.Vb 6
\&    $pdf\->pic(
\&        \*(Aqcat.jpg\*(Aq,     # use scalar ref (\e$data) to provide raw bytes instead
\&        x     => 42,   # place at X points from the left of page
\&        y     => 100,  # place at Y points from the top  of page
\&        scale => .5    # scale image by this factor
\&    );
.Ve
.PP
Add a \s-1JPEG\s0 image to the active page (other formats currently unsupported). Takes the filename (string) or raw image bytes (in a scalar ref) as the first
argument, the rest are key-value pairs: the \f(CW\*(C`x\*(C'\fR for X position, \f(CW\*(C`y\*(C'\fR for Y
position, and \f(CW\*(C`scale\*(C'\fR as the scale factor for the image.
.ie n .SS """raw"""
.el .SS "\f(CWraw\fP"
.IX Subsection "raw"
.Vb 1
\&    $pdf\->raw("0 0 m\en10 10 l\enS\enh\en");
.Ve
.PP
Use prAdd to \*(L"add whatever you want to the current content stream\*(R".
.PP
See, for example, section 4.4.1 on page 196 of the
Adobe Acrobat \s-1SDK PDF\s0 Reference Manual <https://web.archive.org/web/20060212001631/http://partners.adobe.com/public/developer/en/acrobat/sdk/pdf/pdf_creation_apis_and_specs/PDFReference.pdf>.
.ie n .SS """rule"""
.el .SS "\f(CWrule\fP"
.IX Subsection "rule"
.Vb 12
\&    \->rule(
\&        bold  => { re => qr/\e*\e*(.?)\e*\e*/, font => \*(Aqgalaxie_bold\*(Aq },
\&        shiny => {
\&            re    => qr/!!(.?)!!/,
\&            font  => \*(Aqgalaxie_bold\*(Aq,
\&            color => \*(Aq#FBBC05\*(Aq,
\&            size  => 30,
\&        },
\&    )
\&    \->text(\*(AqNormal **bold text** lalalala !!LOOK SHINY!!\*(Aq)
\&    \->rule( shiny => undef )
\&    \->text(\*(Aq!!no longer shiny!!\*(Aq)
.Ve
.PP
Sets rules for bits of text when rendering with
\&\*(L"text\*(R" or \*(L"table\*(R". Available overrides are \*(L"font\*(R", \*(L"color\*(R",
and \*(L"size\*(R". To disable a rule, set its value to \f(CW\*(C`undef\*(C'\fR.
.ie n .SS """size"""
.el .SS "\f(CWsize\fP"
.IX Subsection "size"
.Vb 1
\&    $pdf\->size(24);
\&
\&    $pdf\->size; # set to 12
.Ve
.PP
Specifies active font size in points. Defaults to \f(CW12\fR points.
.ie n .SS """table"""
.el .SS "\f(CWtable\fP"
.IX Subsection "table"
.Vb 6
\&    $pdf\->table(
\&        at        => [20.4, 268],
\&        data      => [
\&            [ qw{Product  Description Qty  Price  U/M} ],
\&            @$data,
\&        ],
\&
\&        #Optional:
\&        border         => [.5, \*(Aq#CFE3EF\*(Aq],
\&        header         => \*(Aqgalaxie_bold\*(Aq,
\&        max_height     => [ 744, sub {
\&            my ( $data, $conf, $pdf ) = @_;
\&            $conf\->{at}[1] = 50;
\&            $pdf\->page;
\&            $data;
\&        } ],
\&        min_width      => 571.2,
\&        padding        => [3, 6],
\&        row_height     => 24,
\&        str_width_mult => 1.1,
\&    );
.Ve
.PP
Render a table on the current page. Takes these arguments:
.PP
\fI\f(CI\*(C`at\*(C'\fI\fR
.IX Subsection "at"
.PP
.Vb 1
\&    at => [20.4, 268],
.Ve
.PP
An arrayref with X and Y point values of the table's top, left corner.
.PP
\fI\f(CI\*(C`data\*(C'\fI\fR
.IX Subsection "data"
.PP
.Vb 4
\&    data => [
\&        [ qw{Product  Description Qty  Price  U/M} ],
\&        @$data,
\&    ],
.Ve
.PP
An arrayref of rows, each of which is an arrayref of strings representing
table cell values. Setting \*(L"header\*(R" will render first row as a table header.
Cells that are \f(CW\*(C`undef\*(C'\fR/empty string will not be rendered. Text
in cells is rendered using \*(L"text\*(R".
.PP
\fI\f(CI\*(C`border\*(C'\fI\fR
.IX Subsection "border"
.PP
.Vb 1
\&    border => [.5, \*(Aq#CFE3EF\*(Aq],
.Ve
.PP
\&\fBOptional\fR. Takes an arrayref with the width (in points) and colour of
the table's borders. Color allows the same values as \*(L"color\*(R" method.
\&\fBDefaults to:\fR \f(CW\*(C`[.5, \*(Aq#ccc\*(Aq]\*(C'\fR
.PP
\fI\f(CI\*(C`header\*(C'\fI\fR
.IX Subsection "header"
.PP
.Vb 1
\&    header => \*(Aqgalaxie_bold\*(Aq,
.Ve
.PP
\&\fBOptional\fR. Takes the same value as \*(L"font\*(R". If set, the first row
of \f(CW\*(C`/data\*(C'\fR will be used as table header, rendered centered using
\&\f(CW\*(C`header\*(C'\fR font. \fBNot set by default.\fR
.PP
\fI\f(CI\*(C`max_height\*(C'\fI\fR
.IX Subsection "max_height"
.PP
.Vb 10
\&    $pdf\->table(
\&        at         => [20.4, 300],
\&        data       => $data,
\&        max_height => [ 744, sub {
\&            my ( $data, $conf, $pdf ) = @_;
\&            $conf\->{at}[1] = 50; # start table higher on subsequent pages
\&            $pdf\->page;          # start a new page
\&            $data;               # render remaining rows
\&        },
\&    );
.Ve
.PP
\&\fBOptional\fR. Takes an arrayref with two arguments: the maximum height
(in points) the table should reach and the callback to use when not
all rows could fit. The \fBreturn value\fR of the callback will be used as
the new collection of rows to render.
The \f(CW@_\fR will contain remaining rows to render,
hashref of the options you've passed to \f(CW\*(C`table\*(C'\fR method, and the
\&\f(CW\*(C`Mojo::PDF\*(C'\fR object.
.PP
\fI\f(CI\*(C`min_width\*(C'\fI\fR
.IX Subsection "min_width"
.PP
.Vb 1
\&    min_width => 571.2,
.Ve
.PP
\&\fBOptional\fR. Table's minimum width in points (zero by default).
The largest column will be widened to make the table at least this wide.
.PP
\fI\f(CI\*(C`padding\*(C'\fI\fR
.IX Subsection "padding"
.PP
.Vb 4
\&    padding => [3],          # all sides 3
\&    padding => [3, 6],       # top/bottom 3, left/right 6
\&    padding => [3, 6, 4],    # top 3, left/right 6, bottom 4
\&    padding => [3, 6, 4, 5], # top 3, right 6, bottom 4, left 5
.Ve
.PP
\&\fBOptional\fR. Specifies cell padding (in points). Takes an arrayref of 1 to 4
numbers, following the same convention as
the \s-1CSS\s0 property <http://www.w3.org/wiki/CSS/Properties/padding>.
.PP
\fI\f(CI\*(C`row_height\*(C'\fI\fR
.IX Subsection "row_height"
.PP
.Vb 1
\&    row_height => 24,
.Ve
.PP
\&\fBOptional\fR. Specifies the height of a row, in points. Defaults to
1.4 times the current font size.
.PP
\fI\f(CI\*(C`str_width_mult\*(C'\fI\fR
.IX Subsection "str_width_mult"
.PP
.Vb 2
\&    str_width_mult => 1.1,
\&    str_width_mult => { 10 => 1.1, 20 => 1.3, inf => 1.5 },
.Ve
.PP
\&\fBOptional\fR. Cell widths will be automatically computed based on the
width of the strings they contain. Currently, that computation
works reliably only for the \f(CW\*(C`Times\*(C'\fR, \f(CW\*(C`Courier\*(C'\fR, and \f(CW\*(C`Helvetica\*(C'\fR
\&\*(L"font\*(R" families. All other fonts will be computed as if they were sized
same as \f(CW\*(C`Helvetica\*(C'\fR. For those cases, use \f(CW\*(C`str_width_mult\*(C'\fR as a multiplier
for the detected character width.
.PP
You can use a hashref to specify different multipliers for strings of
different lengths. The values are multipliers and keys specify the
maximum length this multiplier applies to. You can use
positive infinity (\f(CW\*(C`inf\*(C'\fR) too:
.PP
.Vb 4
\&    str_width_mult => { 10 => 1.1, 20 => 1.3, inf => 1.5 },
\&    # mult is 1.1 for strings 0\-10 chars
\&    # mult is 1.3 for strings 11\-20 chars
\&    # mult is 1.5 for strings 20+ chars
.Ve
.ie n .SS """text"""
.el .SS "\f(CWtext\fP"
.IX Subsection "text"
.Vb 1
\&    $p\->text($text_string, $x, $y, $alignment, $rotation);
\&
\&    $p\->text(\*(AqMojo loves PDFs\*(Aq, 612/2, 500, \*(Aqcenter\*(Aq, 90);
\&    $p\->text(\*(AqLorem ipsum dolor sit amet, \*(Aq, 20 );
\&    $p\->text(\*(Aqconsectetur adipiscing elit!\*(Aq);
\&
\&    use Text::Fold qw/fold_text/;
\&    $p\->text( fold_text $giant_amount_of_text, 42 ); # new lines work!
.Ve
.PP
Render text with the currently active \*(L"font\*(R", \*(L"size\*(R", and \*(L"color\*(R".
\&\f(CW$alignment\fR specifies how to align the string horizontally on the \f(CW$x\fR
point; valid values are \f(CW\*(C`left\*(C'\fR (default), \f(CW\*(C`center\*(C'\fR, and \f(CW\*(C`right\*(C'\fR.
\&\f(CW$rotation\fR is the rotation of the text in degrees. You can use new
line characters (\f(CW\*(C`\en\*(C'\fR) to render text on multiple lines.
.PP
Subsequent calls to \f(CW\*(C`text\*(C'\fR can omit \f(CW$x\fR and \f(CW$y\fR values with
these effects: omit both to continue rendering where previous \f(CW\*(C`text\*(C'\fR
finished; omit just \f(CW$y\fR, to render on the next line from previous call
to \f(CW\*(C`text\*(C'\fR. \fBNote:\fR determination of the \f(CW$x\fR reliably works only for the
\&\f(CW\*(C`Times\*(C'\fR, \f(CW\*(C`Courier\*(C'\fR, and \f(CW\*(C`Helvetica\*(C'\fR \*(L"font\*(R" families. All other fonts
will be computed as if they were sized same as \f(CW\*(C`Helvetica\*(C'\fR.
.SH "DEFAULT FONTS"
.IX Header "DEFAULT FONTS"
These fonts are available by default. Note that they don't support Unicode.
.PP
.Vb 4
\&    Times\-Roman
\&    Times\-Bold
\&    Times\-Italic
\&    Times\-BoldItalic
\&
\&    Courier
\&    Courier\-Bold
\&    Courier\-Oblique
\&    Courier\-BoldOblique
\&
\&    Helvetica
\&    Helvetica\-Bold
\&    Helvetica\-Oblique
\&    Helvetica\-BoldOblique
\&
\&    Symbol
\&    ZapfDingbats
.Ve
.PP
You can use their abbreviated names:
.PP
.Vb 4
\&    TR
\&    TB
\&    TI
\&    TBI
\&
\&    C
\&    CB
\&    CO
\&    CBO
\&
\&    H
\&    HB
\&    HO
\&    HBO
\&
\&    S
\&    Z
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
PDF::Reuse, PDF::Create, and PDF::WebKit
.SH "REPOSITORY"
.IX Header "REPOSITORY"
Fork this module on GitHub:
<https://github.com/zoffixznet/Mojo\-PDF>
.SH "BUGS"
.IX Header "BUGS"
To report bugs or request features, please use
<https://github.com/zoffixznet/Mojo\-PDF/issues>
.PP
If you can't access GitHub, you can email your request
to \f(CW\*(C`bug\-Mojo\-PDF at rt.cpan.org\*(C'\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Stefan Adams <https://github.com/s1037989>
.SH "LICENSE"
.IX Header "LICENSE"
You can use and distribute this module under the same terms as Perl itself.
See the \f(CW\*(C`LICENSE\*(C'\fR file included in this distribution for complete
details.
