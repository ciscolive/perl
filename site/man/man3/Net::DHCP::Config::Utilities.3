.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::DHCP::Config::Utilities 3"
.TH Net::DHCP::Config::Utilities 3 "2020-05-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DHCP::Config::Utilities \- Utility for helping generate configs for DHCP servers and manage subnets.
.SH "VERSION"
.IX Header "VERSION"
Version 0.1.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Please note that this only supports IPv4 currently.
.PP
.Vb 2
\&    use Net::DHCP::Config::Utilities;
\&    use Net::DHCP::Config::Utilities::INI_loader;
\&    
\&    my $dhcp_util = Net::DHCP::Config::Utilities\->new;
\&    
\&    # load stuff from a file
\&    my $loader = Net::DHCP::Config::Utilities::INI_loader\->new( $dhcp_util );
\&    eval{
\&        $loader\->load_file( $file );
\&    };
\&    if ( $@ ){
\&        # do something upon error
\&        die( $@ );
\&    }
\&    
\&    # create and add a new subnet
\&    my $options={
\&                 base=>\*(Aq10.0.0.0\*(Aq,
\&                 mask=>\*(Aq255.255.255.0\*(Aq,
\&                 dns=>\*(Aq10.0.0.1 , 10.0.10.1\*(Aq,
\&                 desc=>\*(Aqa example subnet\*(Aq,
\&                 };
\&    my $subnet = Net::DHCP::Config::Utilities::Subnet\->new( $options );
\&    eval{
\&        $dhcp_util\->subnet_add( $subnet );
\&    };
\&    if ( $@ ){
\&        # do something upon error
\&        die( $@ );
\&    }
\&
\&    my @subnets=$dhcp_util\->subnet_list;
\&    print "Subnets:\en".join("\en", @subnets)."\en";
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
This iniates the object. No arguments are taken
and this will always succeed.
.PP
.Vb 1
\&    my $dhcp_util = Net::DHCP::Config::Utilities\->new;
.Ve
.SS "subnet_add"
.IX Subsection "subnet_add"
This adds a new Net::DHCP::Config::Utilities::Subnet object, provided
it does not over lap any existing ones. If the same base/mask has been
added previously, the new will over write the old.
.PP
One object is taken and that is the Net::DHCP::Config::Utilities::Subnet
to add.
.PP
This will die upon failure.
.PP
.Vb 6
\&    eval{
\&       $dhcp_util\->subnet_add( $subnet );
\&    };
\&    if ( $@ ){
\&        die( $@.\*(Aq prevented the subnet from being added\*(Aq );
\&    }
.Ve
.SS "subnet_get"
.IX Subsection "subnet_get"
This returns the requested the subnet.
.PP
One option is taken and that is the base of the subnet desired.
.PP
If the requested subnet is not found, this will die.
.PP
The returned value is a Net::DHCP::Config::Utilities::Subnet
object.
.PP
.Vb 4
\&    my $subnet=$dhcp_util\->subnet_get;
\&    if ( $@ ){
\&        die( $@ );
\&    }
.Ve
.SS "subnet_list"
.IX Subsection "subnet_list"
Returns a list of the subnet bases.
.PP
.Vb 1
\&    my @subnets=$dhcp_util\->subnet_list;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Zane C. Bowers-Hadley, \f(CW\*(C`<vvelox at vvelox.net>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-net\-dhcp\-config\-utilities at rt.cpan.org\*(C'\fR, or through
the web interface at <https://rt.cpan.org/NoAuth/ReportBug.html?Queue=Net\-DHCP\-Config\-Utilities>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Net::DHCP::Config::Utilities
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<https://rt.cpan.org/NoAuth/Bugs.html?Dist=Net\-DHCP\-Config\-Utilities>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Net\-DHCP\-Config\-Utilities>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<https://cpanratings.perl.org/d/Net\-DHCP\-Config\-Utilities>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<https://metacpan.org/release/Net\-DHCP\-Config\-Utilities>
.IP "\(bu" 4
Git Repository
.Sp
<https://github.com/VVelox/Net\-DHCP\-Config\-Utilities>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This software is Copyright (c) 2019 by Zane C. Bowers-Hadley.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
