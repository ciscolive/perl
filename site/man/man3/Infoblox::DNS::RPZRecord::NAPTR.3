.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::RPZRecord::NAPTR 3"
.TH Infoblox::DNS::RPZRecord::NAPTR 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::RPZRecord::NAPTR  \- Response Policy Zone (RPZ) Substitute (NAPTR Record) Rule object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An \s-1RPZ\s0  Substitute (\s-1NAPTR\s0 Record) Rule object represents the substitution rule for \s-1DNS\s0 Naming Authority Pointer (\s-1NAPTR\s0) records. This rule specifies a regular expression-based rewrite rule that, when applied to an existing string, produces a new domain name or \s-1URI.\s0
.PP
Note that you must specify only one view for the attribute \*(L"views\*(R".
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $rpz_naptr = Infoblox::DNS::RPZRecord::NAPTR\->new(
\&     name            => $fqdn,            #Required
\&     order           => $num,             #Required
\&     preference      => $num,             #Required
\&     rp_zone         => $rp_zone,         #Required
\&     flags           => $string,          #Optional
\&     services        => $string,          #Optional
\&     regexp          => $string,          #Optional
\&     replacement     => $string           #Required
\&     comment         => $string,          #Optional / Default is empty
\&     disable         => "true" | "false", #Optional / Default is "false"
\&     extattrs              => { $string => $extattr, ... },      #Optional / Default is undefined
\&     extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, #Optional / Default is undefined
\&     ttl             => $num | undef,     #Optional / Default is undefined
\&     views           => [$View1],         #Optional / Default is "default" view
\& );
.Ve
.PP
Note that you must specify only one \s-1DNS\s0 view for the attribute \*(L"views\*(R".
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that can be applied to an Substitute (\s-1NAPTR\s0 Record) Rule object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Construct an object
\& my $rpz_naptr = Infoblox::DNS::RPZRecord::NAPTR\->new(
\&     name            => \*(Aqnaptr.rpz.com\*(Aq,
\&     order           => 100,
\&     preference      => 10,
\&     flags           => \*(AqU\*(Aq,
\&     services        => \*(Aqhttp+E2U\*(Aq,
\&     regexp          => \*(Aq!http://my[.](.*)!1!i\*(Aq,
\&     replacement     => \*(Aqdomain.com\*(Aq,
\&     comment         => \*(AqSample Substitute (NAPTR Record) Rule\*(Aq,
\&     disable         => \*(Aqfalse\*(Aq,
\&     ttl             => 84600,
\&     views           => [$view1],
\&     rp_zone   => $response_policy_zone,
\& );
\& # Submit for addition
\& my $response = $session\->add( $rpz_naptr );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to get specific Substitute (NAPTR Record) Rule objects:
\&
\&     comment         \- Optional. Descriptive comment in string format
\&     extattrs        \- Optional. A hash reference containing extensible attributes.
\&     extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&     flags           \- Optional. Flags in string format
\&     name            \- Optional. FQDN of the record in string format
\&     order           \- Optional. Order parameter (unsigned integer)
\&     preference      \- Optional. Preference parameter (unsigned integer)
\&     replacement     \- Optional. Replacement field in string format
\&     services        \- Optional. Services field in string format
\&     view            \- Optional. The DNS view in which the Substitute (NAPTR Record) Rule is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&     zone            \- Optional. A zone name in FQDN format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::RPZRecord::NAPTR",
\&     name   => "naptr1.rpz.com",
\&     view   => "default" );
\&
\& #get all DNS A records with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->get(
\&    object => "Infoblox::DNS::RPZRecord::NAPTR",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify the comment.
\& $rpz_naptr\->comment("this is a modified comment");
\& # Submit the modification
\& my $response = $session\->modify( $rpz_naptr );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to submit the removal of an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the object, and then submit it for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& # Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::RPZRecord::NAPTR",
\&     name   => "naptr1.rpz.com",
\&     view   => "default" );
\& # Find the desired object in the retrieved list.
\& my $desired_rec = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_rec );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to search the Substitute (NAPTR Record) Rule objects:
\&
\&     comment         \- Optional. Descriptive comment (regular expression)
\&     extattrs        \- Optional. A hash reference containing extensible attributes.
\&     extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&     flags           \- Optional. Flags in string format (regular expression)
\&     name            \- Optional. FQDN of the record in string format (regular expression)
\&     order           \- Optional. Order parameter (unsigned integer, exact search)
\&     preference      \- Optional. Preference parameter (unsigned integer, exact search)
\&     replacement     \- Optional. Replacement field in string format (regular expression)
\&     services        \- Optional. Services field in string format (regular expression)
\&     view            \- Optional. The DNS view in which the Substitute (NAPTR Record) Rule is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only. Only exact search is supported.
\&     zone            \- Optional. A zone name in FQDN format (exact search)
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all Substitute (NAPTR Record) Rule objects that match "rpz.com" in the default DNS view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::RPZRecord::NAPTR",
\&     name   => \*(Aq.*rpz\e.com\*(Aq,
\&     view   => "default" );
\&
\& # search for all Substitute (NAPTR Record) Rules in the "rpz.com" zone of the default DNS view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::RPZRecord::NAPTR",
\&     zone   => "rpz.com",
\&     view   => "default" );
\&
\& #get all Substitute (NAPTR Record) Rules with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&   object => "Infoblox::DNS::RPZRecord::NAPTR",
\&   extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to retrieve the attribute values of an Substitute (\s-1NAPTR\s0 Record) Rule object.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment of an Substitute (\s-1NAPTR\s0 Record) Rule object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the descriptive comment
\& my $comment = $rpz_naptr\->comment();
\& #Modify the comment
\& $rpz_naptr\->comment("This is a new comment");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of an Substitute (\s-1NAPTR\s0 Record) Rule.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false, which indicates that the Substitute (\s-1NAPTR\s0 Record) Rule is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the disable field
\& my $disable = $rpz_naptr\->disable();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Substitute (\s-1NAPTR\s0 Record) Rule object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $rpz_naptr\->extattrs();
\& #Modify extattrs
\& $rpz_naptr\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with an Substitute (\s-1NAPTR\s0 Record) Rule.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get  extensible attributes
\& my $ref_extensible_attributes = $rpz_naptr\->extensible_attributes();
\& #Modify extensible attributes
\& $rpz_naptr\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "flags( )"
.IX Subsection "flags( )"
.RS 4
Use this method to retrieve the flags that control the interpretation of the fields of an Substitute (\s-1NAPTR\s0 Record) Rule object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Currently supported values for the flags field are \*(L"U\*(R", \*(L"S\*(R", \*(L"P\*(R" and \*(L"A\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the flags field
\& my $flags = $rpz_naptr\->flags();
\& #Modify flags
\& $rpz_naptr\->flags("U");
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to retrieve the \s-1FQDN\s0 (Fully Qualified Domain Name) of the Substitute (\s-1NAPTR\s0 Record) Rule.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name parameter is a string in \s-1FQDN\s0 format. The \s-1FQDN\s0 consists of the record name followed by the domain name (example: rec.abc.com). A record name can have a maximum of 256 bytes.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the FQDN of the record
\& my $name = $rpz_naptr\->name();
\& #Modify the FQDN of the record
\& $rpz_naptr\->name("rec2.rpz.com");
.Ve
.RE
.RS 4
.RE
.SS "order( )"
.IX Subsection "order( )"
.RS 4
Use this method to retrieve the order parameter of an Substitute (\s-1NAPTR\s0 Record) Rule. This parameter specifies the order in which the Substitute (\s-1NAPTR\s0 Record) Rules are applied when multiple rules are present.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The order parameter is a 16\-bit unsigned integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the order parameter
\& my $order = $rpz_naptr\->order();
\& #Modify the order
\& $rpz_naptr\->order(200);
.Ve
.RE
.RS 4
.RE
.SS "preference( )"
.IX Subsection "preference( )"
.RS 4
Use this method to retrieve the preference field of an Substitute (\s-1NAPTR\s0 Record) Rule. The preference field determines the order Substitute (\s-1NAPTR\s0 Record) Rules are processed when multiple records with the same order parameter are present.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The preference parameter is a 16\-bit integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the preference attribute value
\& my $preference = $rpz_naptr\->preference();
\& #Modify preference
\& $rpz_naptr\->preference(300);
.Ve
.RE
.RS 4
.RE
.SS "regexp( )"
.IX Subsection "regexp( )"
.RS 4
Use this method to specify the regular expression-based rewriting rule of an Substitute (\s-1NAPTR\s0 Record) Rule. This should be a \s-1POSIX\s0 compliant regular expression, including the substitution rule and flags. Refer to \s-1RFC 2915\s0 for the field syntax details.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid parameter is a \s-1POSIX\s0 compliant regular expression or substitution expression.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get regexp
\& my $regexp = $rpz_naptr\->regexp();
\& #Modify regexp
\& $rpz_naptr\->regexp("!http://(.*)!1!i");
.Ve
.RE
.RS 4
.RE
.SS "replacement( )"
.IX Subsection "replacement( )"
.RS 4
Use this method to retrieve the replacement field of an Substitute (\s-1NAPTR\s0 Record) Rule object. For nonterminal Substitute (\s-1NAPTR\s0 Record) Rules, this field specifies the next domain name to look up.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The replacement field is in \s-1FQDN\s0 format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the replacement field
\& my $replacement = $rpz_naptr\->replacement();
\& #Modify the replacement field
\& $rpz_naptr\->replacement("_\|_tcp_\|_.rpz.com");
.Ve
.RE
.RS 4
.RE
.SS "services( )"
.IX Subsection "services( )"
.RS 4
Use this field to specify services. The services field contains protocol and service identifiers, for example \*(L"http+E2U\*(R" or \*(L"\s-1SIPS+D2T\*(R".\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The services field in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get services
\& my $services = $rpz_naptr\->services();
\& #Modify services
\& $rpz_naptr\->services("http+E2U");
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to set or retrieve the Time to Live (\s-1TTL\s0) value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is undefined, which indicates that the record inherits the \s-1TTL\s0 value of the zone.
.Sp
Specify a \s-1TTL\s0 value to override the \s-1TTL\s0 value at the zone level.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (from 0 to 4294967295) that represents the duration, in seconds, that the record is cached. Zero indicates that the record should not be cached.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get the TTL of the record
\& my $ttl = $rpz_naptr\->ttl();
\& #Modify TTL
\& $rpz_naptr\->ttl(900);
\& #Use zone ttl settings
\& $rpz_naptr\->ttl(undef);
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 view of the Substitute (\s-1NAPTR\s0 Record) Rule.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" view, which means the Substitute (\s-1NAPTR\s0 Record) Rule is located in the default \s-1DNS\s0 view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An array reference of defined Infoblox::DNS::View objects.
.Sp
Note that the array size must be 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get views
\& my $ref_views = $rpz_naptr\->views();
\& #Modify views, an array of Infoblox::DNS::View objects
\& $rpz_naptr\->views([$view1]);
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of an Substitute (\s-1NAPTR\s0 Record) Rule. This method is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get zone
\& my $zone = $rpz_naptr\->zone();
.Ve
.RE
.RS 4
.RE
.SS "rp_zone( )"
.IX Subsection "rp_zone( )"
.RS 4
Use this method to set or retrieve the zone object of a Substitute (\s-1NAPTR\s0 Record) Rule.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An Infoblox::DNS::Zone object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get rp_zone
\& my $rp_zone = $rpz_naptr\->rp_zone();
\& #Modify rp_zone, reference of Infoblox::DNS::Zone object
\& $rpz_naptr\->rp_zone($response_policy_zone);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the session methods on an Substitute (\s-1NAPTR\s0 Record) Rule object.
.PP
\&\fB#Preparation prior to an Substitute (\s-1NAPTR\s0 Record) Rule insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
.Ve
.PP
\&\fB#Create a session to the Infoblox appliance\fR
.PP
.Vb 10
\&  my $session = Infoblox::Session\->new(
\&      master   => $host_ip,
\&      username => "admin",
\&      password => "infoblox"
\&  );
\&  unless ($session) {
\&     die("Construct session failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Session created successfully\en";
\&
\&  #Create the zone prior to an A record insertion
\&  my $zone = Infoblox::DNS::Zone\->new(name => "rpz.com");
\&  unless ($zone) {
\&     die("Construct zone failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\&  }
\&  print "Zone object created successfully\en";
\&
\&  #Verify if the zone exists
\&  my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "rpz.com");
\&  unless ($object) {
\&     print "Zone does not exist on server, safe to add the zone\en";
\&     $session\->add($zone)
\&        or die("Add zone failed: ",
\&               $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Zone added successfully\en";
.Ve
.PP
\&\fB#Create a Substitute (\s-1NAPTR\s0 Record) Rule\fR
.PP
.Vb 10
\&  #Construct a Substitute (NAPTR Record) Rule object
\&  my $bind_naptr = Infoblox::DNS::RPZRecord::NAPTR\->new(
\&      name     => "bind_naptr.rpz.com",
\&      comment  => " this is a demo Substitute (NAPTR Record) Rule ",
\&      services => "http+E2U",
\&      flags    => "U",
\&      regexp   => "!http://(.*)!1!i",
\&      preference => 100,
\&      order    => 10,
\&      replacement => \*(Aq_http._tcp.rpz.com\*(Aq,
\&  );
\&  unless ($bind_naptr) {
\&     die("Construct Substitute (NAPTR Record) Rule failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\&  }
\&  print "Substitute (NAPTR Record) Rule object created successfully\en";
\&
\&  #Add the Substitute (NAPTR Record) Rule object to the Infoblox appliance through a session
\&  $session\->add($bind_naptr)
\&      or die("Adding Substitute (NAPTR Record) Rule failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&  print "Substitute (NAPTR Record) Rule object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific Substitute (\s-1NAPTR\s0 Record) Rule\fR
.PP
.Vb 11
\&  #Search all Substitute (NAPTR Record) Rules in the zone
\&  my @retrieved_objs = $session\->search(
\&      object => "Infoblox::DNS::RPZRecord::NAPTR",
\&      name   => \*(Aq.*\e.rpz\e.com\*(Aq
\&  );
\&  my $object = $retrieved_objs[0];
\&  unless ($object) {
\&      die("Search for Substitute (NAPTR Record) Rule failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Search Substitute (NAPTR Record) Rule object found at least 1 matching entry\en";
\&
\&  #Search for all Substitute (NAPTR Record) Rules that start with "bind" in the zone
\&  my @retrieved_objs = $session\->search(
\&      object => "Infoblox::DNS::RPZRecord::NAPTR",
\&      name   => \*(Aqbind.*\e.rpz\e.com\*(Aq
\&  );
\&  my $object = $retrieved_objs[0];
\&  unless ($object) {
\&      die("Search for Substitute (NAPTR Record) Rule failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Searching Substitute (NAPTR Record) Rule object using regexp found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a Substitute (\s-1NAPTR\s0 Record) Rule\fR
.PP
.Vb 11
\&  #Get a record through the session
\&  my @retrieved_objs = $session\->get(
\&      object => "Infoblox::DNS::RPZRecord::NAPTR",
\&      name   => "bind_naptr.rpz.com"
\&  );
\&  my $object = $retrieved_objs[0];
\&  unless ($object) {
\&      die("Get Substitute (NAPTR Record) Rule failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Get Substitute (NAPTR Record) Rule object found at least 1 matching entry\en";
\&
\&  #Modify some attributes of the specified Substitute (NAPTR Record) Rule
\&  $object\->preference(200);
\&  $object\->order(100);
\&
\&  #Apply the changes
\&  $session\->modify($object)
\&      or die("Modify Substitute (NAPTR Record) Rule failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&  print "Substitute (NAPTR Record) Rule object modified successfully \en";
.Ve
.PP
\&\fB#Remove a Substitute (\s-1NAPTR\s0 Record) Rule\fR
.PP
.Vb 11
\&  #Get Substitute (NAPTR Record) Rule through the session
\&  my @retrieved_objs = $session\->get(
\&      object => "Infoblox::DNS::RPZRecord::NAPTR",
\&      name   => "bind_naptr.rpz.com"
\&  );
\&  my $object = $retrieved_objs[0];
\&  unless ($object) {
\&      die("Get Substitute (NAPTR Record) Rule failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Get Substitute (NAPTR Record) Rule object found at least 1 matching entry\en";
\&
\&  #Submit the object for removal
\&  $session\->remove($object)
\&      or die("Remove Substitute (NAPTR Record) Rule failed: ",
\&          $session\->status_code() . ":" . $session\->status_detail());
\&  print "Substitute (NAPTR Record) Rule object removed successfully \en";
\&
\& #Remove the zone
\&
\& #Get Zone object through the session
\& @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Zone",
\&     name   => "rpz.com"
\& );
\& $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get zone failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get zone object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove zone object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Zone object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR,Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::DNS::Zone
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
