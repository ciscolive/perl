.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::NYTProf 3"
.TH Mojolicious::Plugin::NYTProf 3 "2020-08-10" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::NYTProf \- Auto handling of Devel::NYTProf in your Mojolicious app
.SH "VERSION"
.IX Header "VERSION"
0.23
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This plugin enables Mojolicious to automatically generate Devel::NYTProf
profiles and routes for your app, it has been inspired by
Dancer::Plugin::NYTProf
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojolicious::Lite;
\&
\&  plugin NYTProf => {
\&    nytprof => {
\&      ... # see CONFIGURATION
\&    },
\&  };
\&
\&  app\->start;
.Ve
.PP
Or
.PP
.Vb 1
\&  use Mojo::Base \*(AqMojolicious\*(Aq;
\&
\&  ...
\&
\&  sub startup {
\&    my $self = shift;
\&
\&    ...
\&
\&    my $mojo_config = $self\->plugin(\*(AqConfig\*(Aq);
\&    $self\->plugin(NYTProf => $mojo_config);
\&  }
.Ve
.PP
Then run your app \- you should start your app with the env variables:
.PP
.Vb 2
\&  PERL5OPT=\*(Aq\-d:NYTProf\*(Aq
\&  NYTPROF=start=no
.Ve
.PP
without this, things go a bit haywire (most obviously manifested as broken links
in the report) because otherwise any code compiled before the \f(CW\*(C`plugin\*(C'\fR call
cannot be covered, as described in the docs:
<https://metacpan.org/pod/Devel::NYTProf#RUN\-TIME\-CONTROL\-OF\-PROFILING>
.PP
Profiles generated can be seen by visting /nytprof and reports
will be generated on the fly when you click on a specific profile.
.SH "METHODS"
.IX Header "METHODS"
.SS "register"
.IX Subsection "register"
Registers the plugin with your app \- this will only do something if the nytprof
key exists in your config hash
.PP
.Vb 1
\&  $self\->register($app, \e%config);
.Ve
.SH "HOOKS AND Devel::NYTProf"
.IX Header "HOOKS AND Devel::NYTProf"
The plugin adds hooks to control the level of profiling, Devel::NYTProf profiling
is started using a before_routes hook and the stopped with an around_dispatch hook.
.PP
The consequence of this is that you should see profiling only for your routes and
rendering code and will not see most of the actual Mojolicious framework detail.
.PP
The caveat with the use of hooks is that some hooks can fire out of order, and when
asynchronous code is used in your controllers you may see incomplete/odd profiling
behaviour \- you can play around with the hook configuration to try to fix this.
.PP
You can override the hooks used to control when the profiling runs, see the
\&\s-1CONFIGURATION\s0 section below.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
Here's what you can control in myapp.conf:
.PP
.Vb 5
\&  {
\&    # Devel::NYTProf will only be loaded, and profiling enabled, if the nytprof
\&    # key is present in your config file, so either remove it or comment it out
\&    # to completely disable profiling.
\&    nytprof => {
\&
\&      # path to your nytprofhtml script (installed as part of Devel::NYTProf
\&      # distribution). the plugin will do its best to try to find this so this
\&      # is optional, just set if you have a none standard path
\&      nytprofhtml_path => \*(Aq/path/to/nytprofhtml\*(Aq,
\&
\&      # path to store Devel::NYTProf output profiles and generated html pages.
\&      # options, defaults to "/path/to/your/app/root/dir/nytprof"
\&      profiles_dir => \*(Aq/path/to/nytprof/profiles/\*(Aq
\&
\&      # set this to true to allow the plugin to run when in production mode
\&      # the default value is 0 so you can deploy your app to prod without
\&      # having to make any changes to config/plugin register
\&      allow_production => 0,
\&
\&      # Devel::NYTProf environment options, see the documentation at
\&      # https://metacpan.org/pod/Devel::NYTProf#NYTPROF\-ENVIRONMENT\-VARIABLE
\&      # for a complete list. N.B. you can\*(Aqt supply start or file as these
\&      # are used internally in the plugin so will be ignored if passed
\&      env => {
\&        trace => 1,
\&        log   => "/path/to/foo/",
\&        ....
\&      },
\&
\&      # when to enable Devel::NYTProf profiling \- the pre_hook will run
\&      # to enable_profile and the post_hook will run to disable_profile
\&      # and finish_profile. the values show here are the defaults so you
\&      # do not need to provide these options
\&      #
\&      # bear in mind the caveats in the Mojolicious docs regarding hooks
\&      # and that they may not fire in the order you expect \- this can
\&      # affect the NYTProf output and cause some things not to appear
\&      # (or appear in the wrong order). the defaults below should be 
\&      # sufficient for profiling your code, however you can change these
\&      #
\&      # N.B. there is nothing stopping you reversing the order of the
\&      # hooks, which would cause the Mojolicious framework code to be
\&      # profiled, or providing hooks that are the same or even invalid. these
\&      # config options should probably be used with some care
\&      pre_hook  => \*(Aqbefore_routes\*(Aq,
\&      post_hook => \*(Aqaround_dispatch\*(Aq,
\&    },
\&  }
.Ve
.SH "nytprofhtml LOCATION"
.IX Header "nytprofhtml LOCATION"
The plugin does its best to find the path to your nytprofhtml executable, if
it cannot find it then it will die with an error. This also affects testing,
and any tests will be skipped if they cannot find nytprofhtml allowing you to
install the plugin \- you will then need to make sure to set the path in your
config using nytprofhtml_path
.SH "AUTHOR"
.IX Header "AUTHOR"
Lee Johnson \- \f(CW\*(C`leejo@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. If you would like to contribute documentation
please raise an issue / pull request:
.PP
.Vb 1
\&    https://github.com/Humanstate/mojolicious\-plugin\-nytprof
.Ve
