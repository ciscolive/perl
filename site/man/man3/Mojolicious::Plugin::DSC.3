.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::DSC 3"
.TH Mojolicious::Plugin::DSC 3 "2016-08-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::DSC \- use DBIx::Simple::Class in your application.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  #load
\&  # Mojolicious
\&  $self\->plugin(\*(AqDSC\*(Aq, $config);
\&
\&  # Mojolicious::Lite
\&  plugin \*(AqDSC\*(Aq, $config;
\&  
\&  my $user = My::User\->find(1234);
\&  #or
\&  my $user = My::User\->query(\*(AqSELECT * FROM users WHERE user=?\*(Aq,\*(Aqivan\*(Aq);
\&  #or if SQL::Abstract is isnstalled
\&  my $user = My::User\->select(user=>\*(Aqivan\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::DSC is a Mojolicious plugin that helps you
use DBIx::Simple::Class in your application.
It also adds an app attribute (\f(CW\*(C`$app\->dbix\*(C'\fR) and controller helper (\f(CW\*(C`$c\->dbix\*(C'\fR) 
which is a DBIx::Simple instance.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
The configuration is pretty flexible:
.PP
.Vb 10
\&  # in Mojolicious startup()
\&  $self\->plugin(\*(AqDSC\*(Aq, {
\&    dsn => \*(Aqdbi:SQLite:database=:memory:;host=localhost\*(Aq
\&  });
\&  #or
\&  $self\->plugin(\*(AqDSC\*(Aq, {
\&    driver => \*(AqmysqlPP\*(Aq,
\&    database => \*(Aqmydbname\*(Aq,
\&    host => \*(Aq127.0.0.1\*(Aq,
\&    user => \*(Aqmyself\*(Aq,
\&    password => \*(Aqsecret\*(Aq,
\&    onconnect_do => [
\&      \*(AqSET NAMES UTF8\*(Aq,
\&      \*(AqSET SQL_MODE="NO_AUTO_VALUE_ON_ZERO"\*(Aq
\&      sub{my $dbix = shift; do_something_complicated($dbix)}
\&    ],
\&    dbh_attributes => {AutoCommit=>0},
\&    namespace => \*(AqMy\*(Aq,
\&    
\&    #will load My::User, My::Content, My::Pages
\&    load_classes =>[\*(AqUser\*(Aq, \*(AqContent\*(Aq, \*(AqMy::Pages\*(Aq],
\&    
\&    #now you can use $app\->DBIX instead of $app\->dbix
\&    dbix_helper => \*(AqDBIX\*(Aq 
\&  });
.Ve
.PP
The following parameters can be provided:
.SS "load_classes"
.IX Subsection "load_classes"
An \s-1ARRAYREF\s0 of classes to be loaded. If not provided, 
all classes under namespace will be loaded.
Classes are expected to be already dumped as files using 
\&\f(CW\*(C`dsc_dump_schema.pl\*(C'\fR from an existing database.
.PP
.Vb 9
\&  #all classes under My::Schema::Class
\&  $app\->plugin(\*(AqDSC\*(Aq, {
\&    namespace => My::Schema::Class,
\&  });
\&  #only My::Schema::Class::Groups and My::Schema::Class::Users
\&  $app\->plugin(\*(AqDSC\*(Aq, {
\&    namespace => My::Schema::Class,
\&    load_classes => [\*(AqGroups\*(Aq, \*(AqUsers\*(Aq]
\&  });
.Ve
.SS "\s-1DEBUG\s0"
.IX Subsection "DEBUG"
Boolean. When the current \*(L"mode\*(R" in Mojolicious is \f(CW\*(C`development\*(C'\fR this value
is 1.
.PP
.Vb 5
\&  $app\->plugin(\*(AqDSC\*(Aq, {
\&    DEBUG => 1,
\&    namespace => My::Schema::Class,
\&    load_classes => [\*(AqGroups\*(Aq, \*(AqUsers\*(Aq]
\&  });
.Ve
.SS "dbh_attributes"
.IX Subsection "dbh_attributes"
\&\s-1HASHREF.\s0 Attributes passed to \*(L"connect\*(R" in DBIx::Simple.
Default values are:
.PP
.Vb 4
\&  {
\&    RaiseError => 1,
\&    AutoCommit => 1,
\&  };
.Ve
.PP
They can be overriden:
.PP
.Vb 4
\&  $app\->plugin(\*(AqDSC\*(Aq, {
\&    namespace => My::Schema::Class,
\&    dbh_attributes =>{ AutoCommit => 0, sqlite_unicode => 1 }
\&  });
.Ve
.SS "dsn"
.IX Subsection "dsn"
Connection string parsed using \*(L"parse_dsn\*(R" in \s-1DBI\s0 and passed to \*(L"connect\*(R" in DBIx::Simple.
.PP
From this string we guess the \*(L"driver\*(R", \*(L"database\*(R", host, port
and the namespace which ends up as camelised form of 
the \*(L"database\*(R" name.
.PP
If \*(L"dsn\*(R" is not passed most of the configuration values above must 
be provided so a valid connection string can be constructed.
If \*(L"dsn\*(R" is provided it will be preferred over the above parameters
(excluding namespace) because the developer should know better how 
exactly to connect to the database.
.PP
.Vb 5
\&  $app\->plugin(\*(AqDSC\*(Aq, {
\&    namespace => My::Schema::Class,
\&    dbh_attributes => {sqlite_unicode => 1},
\&    dsn => \*(Aqdbi:SQLite:database=myfile.sqlite\*(Aq
\&  });
.Ve
.SS "driver"
.IX Subsection "driver"
String. One of \*(L"mysql\*(R",\*(L"SQLite\*(R",\*(L"Pg\*(R" etc...
This string is prepended with \*(L"dbi:\*(R". No default value.
.PP
.Vb 5
\&  $app\->plugin(\*(AqDSC\*(Aq, {
\&    driver => \*(Aqmysql\*(Aq,
\&    dbh_attributes => {sqlite_unicode => 1},
\&    dsn => \*(Aqdbi:SQLite:database=myfile.sqlite\*(Aq
\&  });
.Ve
.SS "database"
.IX Subsection "database"
String \- the database name. No default value.
.PP
.Vb 6
\&  $app\->plugin(\*(AqDSC\*(Aq, {
\&    database       => app\->home\->rel_file(\*(Aqetc/ado.sqlite\*(Aq),
\&    dbh_attributes => {sqlite_unicode => 1},
\&    driver         => \*(AqSQLite\*(Aq,
\&    namespace      => \*(AqAdo::Model\*(Aq,
\&  });
.Ve
.SS "host"
.IX Subsection "host"
String. defaults to \f(CW\*(C`localhost\*(C'\fR.
.SS "port"
.IX Subsection "port"
String. Not added to the connection string if not provided.
.SS "namespace"
.IX Subsection "namespace"
The class name of your schema class. If not provided the value will be guessed
from the database or dsn. It is recommended to provide your 
schema class name.
.PP
.Vb 6
\&  $app\->plugin(\*(AqDSC\*(Aq, {
\&    database       => app\->home\->rel_file(\*(Aqetc/ado.sqlite\*(Aq),
\&    dbh_attributes => {sqlite_unicode => 1},
\&    driver         => \*(AqSQLite\*(Aq,
\&    namespace      => \*(AqMy::Model\*(Aq,
\&  });
.Ve
.SS "user"
.IX Subsection "user"
String. Username used to connect to the database.
.SS "password"
.IX Subsection "password"
String. Password used to connect to the database.
.SS "onconnect_do"
.IX Subsection "onconnect_do"
\&\s-1ARRAYREF\s0 of \s-1SQL\s0 statements and callbacks which will be executed right after
establiching the connection.
.PP
.Vb 10
\&  $app\->plugin(\*(AqDSC\*(Aq, {
\&    database       => app\->home\->rel_file(\*(Aqetc/ado.sqlite\*(Aq),
\&    dbh_attributes => {sqlite_unicode => 1},
\&    driver         => \*(AqSQLite\*(Aq,
\&    namespace      => \*(AqAdo::Model\*(Aq,
\&    onconnect_do   => [
\&        \*(AqPRAGMA encoding = "UTF\-8"\*(Aq,
\&        \*(AqPRAGMA foreign_keys = ON\*(Aq,
\&        \*(AqPRAGMA temp_store = 2\*(Aq,    #MEMORY
\&        \*(AqVACUUM\*(Aq,
\&        sub{
\&          shift\->dbh\->sqlite_create_function( \*(Aqnow\*(Aq, 0, sub { return time } );
\&        }
\&    ],
\&  });
.Ve
.SS "postpone_connect"
.IX Subsection "postpone_connect"
Boolean. If set, establishing the connection to the database will
be postponed for the first call of \f(CW\*(C`$app\->dbix\*(C'\fR or the method
name you provided for the \*(L"dbix_helper\*(R".
.SS "dbix_helper"
.IX Subsection "dbix_helper"
String. The name of the helper method that can be created to invoke/use
directly the DBIx::Simple instance on your controller or application.
Defaults to \f(CW\*(C`dbix\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::DSC inherits all methods from
Mojolicious::Plugin and implements the following new ones.
.ie n .SS """register"""
.el .SS "\f(CWregister\fP"
.IX Subsection "register"
.Vb 1
\&  $plugin\->register(Mojolicious\->new);
.Ve
.PP
Register plugin in Mojolicious application.
.SS "config"
.IX Subsection "config"
This plugin own configuration. Returns a HASHref.
.PP
.Vb 2
\&  #debug
\&  $app\->log\->debug($app\->dumper($plugin\->config));
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Simple::Class, Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2012 Красимир Беров (Krasimir Berov).
.PP
This program is free software, you can redistribute it and/or
modify it under the terms of the Artistic License version 2.0.
.PP
See http://dev.perl.org/licenses/ for more information.
