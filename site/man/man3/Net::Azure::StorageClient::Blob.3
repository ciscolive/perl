.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Azure::StorageClient::Blob 3"
.TH Net::Azure::StorageClient::Blob 3 "2020-09-24" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Azure::StorageClient::Blob \- Object representing a blob in Azure Blob Storage
.SH "VERSION"
.IX Header "VERSION"
version 0.6
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  my $blobService = Net::Azure::StorageClient::Blob\->new(
\&                                    account_name => $you_account_name,
\&                                    primary_access_key => $your_primary_access_key,
\&                                    [ container_name => $container_name, ]
\&                                    [ protocol => \*(Aqhttps\*(Aq, ] );
\&  my $path = \*(Aqpath/to/blob\*(Aq;
\&  my $res = $blobService\->get_blob( $path );
\&
\&  # Request with custom http headers and query.
\&  my $params = { headers => { \*(Aqx\-ms\-foo\*(Aq => \*(Aqbar\*(Aq },
\&                 options => \*(Aqtimeout=90\*(Aq };
\&  my $res = $blobService\->set_metadata( $path, $params );
\&
\&  # return HTTP::Response object(s)
.Ve
.SS "Operation on the Account(Blob Service)"
.IX Subsection "Operation on the Account(Blob Service)"
\fIlist_containers\fR
.IX Subsection "list_containers"
.PP
The List Containers operation returns a list of the containers under the specified account.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179352.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->list_containers( $params );
.Ve
.PP
\fIset_blob_service_properties\fR
.IX Subsection "set_blob_service_properties"
.PP
The Set Blob Service Properties operation sets the properties of a storage account's Blob service,
including Windows Azure Storage Analytics.
You can also use this operation to set the default request version for all incoming requests that
do not have a version specified.
<http://msdn.microsoft.com/en\-us/library/windowsazure/hh452235.aspx>
.PP
.Vb 2
\&  my $params = { StorageServicePropertie => { Logging => { Read => \*(Aqtrue\*(Aq }, ... } };
\&  my $res = $blobService\->set_blob_service_properties( $params );
.Ve
.PP
\fIget_blob_service_properties\fR
.IX Subsection "get_blob_service_properties"
.PP
The Get Blob Service Properties operation gets the properties of a storage account's Blob service,
including Windows Azure Storage Analytics.
<http://msdn.microsoft.com/en\-us/library/windowsazure/hh452239.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->get_blob_service_properties( $params );
.Ve
.SS "Operation on Containers"
.IX Subsection "Operation on Containers"
\fIcreate_container\fR
.IX Subsection "create_container"
.PP
The Create Container operation creates a new container under the specified account.
If the container with the same name already exists, the operation fails.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179468.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->create_container( $container_name );
\&
\&  # Create container and set container\*(Aqs permission.
\&  my $params = { public_access => \*(Aqblob\*(Aq }; # or container
\&  my $res = $blobService\->create_container( $container_name, $params );
.Ve
.PP
\fIget_container_properties\fR
.IX Subsection "get_container_properties"
.PP
The Get Container Properties operation returns all user-defined metadata and system properties
for the specified container.
The data returned does not include the container's list of blobs.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179370.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->get_container_properties( $container_name );
.Ve
.PP
\fIget_container_metadata\fR
.IX Subsection "get_container_metadata"
.PP
The Get Container Metadata operation returns all user-defined metadata for the container.
<http://msdn.microsoft.com/en\-us/library/windowsazure/ee691976.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->get_container_metadata( $container_name );
.Ve
.PP
\fIset_container_metadata\fR
.IX Subsection "set_container_metadata"
.PP
The Set Container Metadata operation sets one or more user-defined name-value pairs for the specified container.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179362.aspx>
.PP
.Vb 2
\&  my $res = $blobService\->set_container_metadata( $container_name, { metadata => { \*(Aqfoo\*(Aq => \*(Aqbar\*(Aq } } );
\&  # x\-ms\-meta\-foo: bar
.Ve
.PP
\fIget_container_acl\fR
.IX Subsection "get_container_acl"
.PP
The Get Container \s-1ACL\s0 operation gets the permissions for the specified container.
The permissions indicate whether container data may be accessed publicly.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179469.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->get_container_acl( $container_name );
.Ve
.PP
\fIset_container_acl\fR
.IX Subsection "set_container_acl"
.PP
The Set Container \s-1ACL\s0 operation sets the permissions for the specified container.
The permissions indicate whether blobs in a container may be accessed publicly.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179391.aspx>
.PP
.Vb 2
\&  my $res = $blobService\->set_container_acl( $container_name, { public_access => \*(Aqblob\*(Aq } );
\&                                                                             # or container
.Ve
.PP
\fIdelete_container\fR
.IX Subsection "delete_container"
.PP
The Delete Container operation marks the specified container for deletion.
The container and any blobs contained within it are later deleted during garbage collection.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179408.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->delete_container( $container_name );
.Ve
.PP
\fIlease_container\fR
.IX Subsection "lease_container"
.PP
The Lease Container operation establishes and manages a lock on a container for delete operations.
The lock duration can be 15 to 60 seconds, or can be infinite.
<http://msdn.microsoft.com/en\-us/library/windowsazure/jj159103.aspx>
.PP
.Vb 2
\&  my $params = { lease_parameters => { \*(Aqlease\-action\*(Aq => \*(Aqacquire\*(Aq, ... } };
\&  my $res = $blobService\->lease_container( $container_name, $params );
.Ve
.PP
\fIlist_blobs\fR
.IX Subsection "list_blobs"
.PP
The List Blobs operation enumerates the list of blobs under the specified container.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd135734.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->list_blobs( $container_name );
.Ve
.PP
\fIdownload_container\fR
.IX Subsection "download_container"
.PP
Download all blobs of container to local directory.
.PP
.Vb 1
\&  my $res = $blobService\->list_blobs( $container_name, $dirname );
\&
\&  # Download updated blobs only.
\&  my $params = { conditional => 1 };
\&  my $res = $blobService\->list_blobs( $container_name, $dirname, $params );
\&
\&  # Download updated blobs and delete deleted files of local directory.
\&  my $params = { conditional => 1, sync => 1 };
\&  my $res = $blobService\->list_blobs( $container_name, $dirname, $params );
.Ve
.SS "Operation on Blobs"
.IX Subsection "Operation on Blobs"
\fIput_blob\fR
.IX Subsection "put_blob"
.PP
The Put Blob operation creates a new block blob or page blob,
or updates the content of an existing block blob.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179451.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->put_blob( $path, $data );
\&
\&  # Upload local file to blob.
\&  my $params = { filename => \*(Aq/path/to/filename\*(Aq };
\&  my $res = $blobService\->put_blob( $path, $params );
.Ve
.PP
\fIget_blob\fR
.IX Subsection "get_blob"
.PP
The Get Blob operation reads or downloads a blob from the system,
including its metadata and properties. You can also call Get Blob to read a snapshot.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179440.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->get_blob( $path );
\&
\&  # Download blob to local file.
\&  my $params = { filename => \*(Aq/path/to/filename\*(Aq };
\&  my $res = $blobService\->get_blob( $path, $params );
.Ve
.PP
\fIget_blob_properties\fR
.IX Subsection "get_blob_properties"
.PP
The Get Blob Properties operation returns all user-defined metadata,
standard \s-1HTTP\s0 properties, and system properties for the blob. It does not return the content of the blob.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179394.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->get_blob_properties( $path );
.Ve
.PP
\fIset_blob_properties\fR
.IX Subsection "set_blob_properties"
.PP
The Set Blob Properties operation sets system properties on the blob.
<http://msdn.microsoft.com/en\-us/library/windowsazure/ee691966.aspx>
.PP
.Vb 2
\&  my $params = { properties => { \*(Aqcontent\-length\*(Aq => 1024, ... } };
\&  my $res = $blobService\->set_blob_properties( $path, $params );
.Ve
.PP
\fIget_blob_metadata\fR
.IX Subsection "get_blob_metadata"
.PP
The Get Blob Metadata operation returns all user-defined metadata for the specified blob
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179350.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->get_metadata( $path );
.Ve
.PP
\fIset_blob_metadata\fR
.IX Subsection "set_blob_metadata"
.PP
The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more name-value pairs.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179414.aspx>
.PP
.Vb 4
\&  # Set x\-ms\-meta\-category and x\-ms\-meta\-author metadata.
\&  my $params = { metadata => { category => \*(Aqimage\*(Aq
\&                               author => $author_name } };
\&  my $res = $blobService\->set_blob_metadata( $path, $params );
.Ve
.PP
\fIlease_blob\fR
.IX Subsection "lease_blob"
.PP
The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
<http://msdn.microsoft.com/en\-us/library/windowsazure/ee691972.aspx>
.PP
.Vb 2
\&  my $params = { lease_parameters => { \*(Aqlease\-action\*(Aq => \*(Aqacquire\*(Aq, ... } };
\&  my $res = $blobService\->lease_blob( $path, $params );
.Ve
.PP
\fIsnapshot_blob\fR
.IX Subsection "snapshot_blob"
.PP
The Snapshot Blob operation creates a read-only snapshot of a blob.
<http://msdn.microsoft.com/en\-us/library/windowsazure/ee691971.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->snapshot_blob( $path );
.Ve
.PP
\fIcopy_blob\fR
.IX Subsection "copy_blob"
.PP
The Copy Blob operation copies a blob to a destination within the storage account.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd894037.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->copy_blob( $source_blob, $new_blob );
.Ve
.PP
\fIabort_copy_blob\fR
.IX Subsection "abort_copy_blob"
.PP
The Abort Copy Blob operation aborts a pending Copy Blob operation,
and leaves a destination blob with zero length and full metadata.
<http://msdn.microsoft.com/en\-us/library/windowsazure/jj159098.aspx>
.PP
.Vb 2
\&  my $params = { copyid => $copyid };
\&  my $res = $blobService\->abort_copy_blob( $path, $params );
.Ve
.PP
\fIdelete_blob\fR
.IX Subsection "delete_blob"
.PP
The Delete Blob operation marks the specified blob or snapshot for deletion.
The blob is later deleted during garbage collection.
Note that in order to delete a blob, you must delete all of its snapshots.
You can delete both at the same time with the Delete Blob operation.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179413.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->delete_blob( $path );
.Ve
.PP
\fIrename_blob\fR
.IX Subsection "rename_blob"
.PP
Copy blob and delete copy source blob.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd894037.aspx>
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179413.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->rename_blob( $source_blob, $new_blob );
.Ve
.SS "Operation on Block Blobs"
.IX Subsection "Operation on Block Blobs"
\fIput_block\fR
.IX Subsection "put_block"
.PP
The Put Block operation creates a new block to be committed as part of a blob.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd135726.aspx>
.PP
.Vb 2
\&  my $params = { options => "blockid=${blockid}" };
\&  my $res = $blobService\->put_block( $path, $params );
.Ve
.PP
\fIput_block_list\fR
.IX Subsection "put_block_list"
.PP
The Put Block List operation writes a blob by specifying the list of block IDs that make up the blob.
In order to be written as part of a blob,
a block must have been successfully written to the server in a prior Put Block (\s-1REST API\s0) operation.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179467.aspx>
.PP
.Vb 2
\&  my $params = { BlockList => { Latest => \*(Aqfoo\*(Aq } };
\&  my $res = $blobService\->put_block_list( $path, $params );
.Ve
.PP
\fIget_block_list\fR
.IX Subsection "get_block_list"
.PP
The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block blob.
<http://msdn.microsoft.com/en\-us/library/windowsazure/dd179400.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->get_block_list( $path, $params );
.Ve
.SS "Operation on Page Blobs"
.IX Subsection "Operation on Page Blobs"
\fIput_page\fR
.IX Subsection "put_page"
.PP
The Put Page operation writes a range of pages to a page blob.
<http://msdn.microsoft.com/en\-us/library/windowsazure/ee691975.aspx>
.PP
.Vb 2
\&  my $params = { \*(Aqpage\-write\*(Aq => \*(Aqupdate\*(Aq, \*(Aqrange\*(Aq => \*(Aqbytes=0\-65535\*(Aq };
\&  my $res = $blobService\->put_page( $path, $params );
.Ve
.PP
\fIget_page_ranges\fR
.IX Subsection "get_page_ranges"
.PP
The Get Page Ranges operation returns the list of valid page ranges for a page blob
or snapshot of a page blob.
<http://msdn.microsoft.com/en\-us/library/windowsazure/ee691973.aspx>
.PP
.Vb 1
\&  my $res = $blobService\->get_page_ranges( $path );
.Ve
.SS "Other Operations"
.IX Subsection "Other Operations"
\fIdownload\fR
.IX Subsection "download"
.PP
Download a blob(or directory or container) and save to local file(s).
.PP
.Vb 1
\&  my $res = $blobService\->download( $path, $filename );
\&
\&  # Download files of directory(Updated files only).
\&  my $params = { conditional => 1 };
\&  my $res = $blobService\->download( $path, $directory, $params );
\&
\&  # Download files of directory(updated files only) and delete deleted files.
\&  my $params = { conditional => 1, sync => 1 [, include_invisible => 1 ] };
\&  my $res = $blobService\->download( $path, $directory, $params );
\&
\&  # Using multi\-thread.
\&  my $params = { conditional => 1, sync => 1, use_thread => n(Count of thread) };
\&  my $res = $blobService\->download( $path, $directory, $params );
.Ve
.PP
\fIupload\fR
.IX Subsection "upload"
.PP
Upload blob(s) from local file(s).
.PP
.Vb 1
\&  my $res = $blobService\->upload( $path, $filename );
\&
\&  # Upload files of directory(updated files only).
\&  my $params = { conditional => 1 };
\&  my $res = $blobService\->upload( $path, $directory, $perams );
\&
\&  # Upload files of directory(updated files only) and delete deleted blobs.
\&  my $params = { conditional => 1, sync => 1 [, include_invisible => 1 ] };
\&  my $res = $blobService\->upload( $path, $directory, $params );
\&
\&  # Using multi\-thread.
\&  my $params = { conditional => 1, sync => 1, use_thread => n(Count of thread) };
\&  my $res = $blobService\->upload( $path, $directory, $params );
.Ve
.PP
\fIsync\fR
.IX Subsection "sync"
.PP
Synchronize between the directory of blob storage and the local directory.
.PP
.Vb 2
\&  my $params = { direction => \*(Aqupload\*(Aq [, include_invisible => 1 ] };
\&  my $res = $blobService\->sync( $path, $directory, $params );
\&
\&  # Using multi\-thread.
\&  my $params = { direction => \*(Aqupload\*(Aq, use_thread => n(Count of thread) };
\&  my $res = $blobService\->upload( $path, $directory, $params );
.Ve
.SH "NAME"
Net::Azure::StorageClient::Blob \- Interface to Windows Azure Blob Service
.SH "AUTHOR"
.IX Header "AUTHOR"
Junnama Noda <junnama@alfasado.jp>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Junnama Noda.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
