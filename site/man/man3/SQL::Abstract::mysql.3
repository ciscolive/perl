.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQL::Abstract::mysql 3"
.TH SQL::Abstract::mysql 3 "2020-04-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Abstract::mysql \- Generate SQL from Perl data structures for MySQL and MariaDB
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use SQL::Abstract::mysql;
\&
\&  my $abstract = SQL::Abstract::mysql\->new(quote_char => chr(96), name_sep => \*(Aq.\*(Aq);
\&  # The same as
\&  use Mojo::mysql;
\&  my $mysql = Mojo::mysql\->new;
\&  my $abstract = $mysql\->abstract;
\&
\&  say $abstract\->insert(\*(Aqsome_table\*(Aq, \e%some_values, \e%some_options);
\&  say $abstract\->select(\*(Aqsome_table\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SQL::Abstract::mysql extends SQL::Abstract with a few MySQL / MariaDB
features used by Mojo::mysql. It was inspired by SQL::Abstract::Pg.
.SH "METHODS"
.IX Header "METHODS"
SQL::Abstract::mysql inherits all methods from SQL::Abstract.
.SS "insert"
.IX Subsection "insert"
.Vb 1
\&  my ($stmt, @bind) = $abstract\->insert($table, \e@values || \e%fieldvals, \e%options);
.Ve
.PP
This method extends \*(L"insert\*(R" in SQL::Abstract with the following functionality:
.PP
\fI\s-1ON CONFLICT\s0\fR
.IX Subsection "ON CONFLICT"
.PP
The \f(CW\*(C`on_conflict\*(C'\fR option can be used to generate \f(CW\*(C`INSERT IGNORE\*(C'\fR, \f(CW\*(C`REPLACE\*(C'\fR and
\&\f(CW\*(C`INSERT ... ON DUPLICATE KEY UPDATE\*(C'\fR queries.
So far \f(CW\*(Aqignore\*(Aq\fR to pass \f(CW\*(C`INSERT IGNORE\*(C'\fR, \f(CW\*(Aqreplace\*(Aq\fR to pass \f(CW\*(C`REPLACE\*(C'\fR and
hash references to pass \f(CW\*(C`UPDATE\*(C'\fR with conflict targets are supported.
.PP
.Vb 2
\&  # "insert ignore into t (id, a) values (123, \*(Aqb\*(Aq)"
\&  $abstract\->insert(\*(Aqt\*(Aq, {id => 123, a => \*(Aqb\*(Aq}, {on_conflict => \*(Aqignore\*(Aq});
\&
\&  # "replace into t (id, a) values (123, \*(Aqb\*(Aq)"
\&  $abstract\->insert(\*(Aqt\*(Aq, {id => 123, a => \*(Aqb\*(Aq}, {on_conflict => \*(Aqreplace\*(Aq});
\&
\&  # "insert into t (id, a) values (123, \*(Aqb\*(Aq) on duplicate key update c=\*(Aqd\*(Aq"
\&  $abstract\->insert(\*(Aqt\*(Aq, {id => 123, a => \*(Aqb\*(Aq}, {on_conflict => {c => \*(Aqd\*(Aq}});
.Ve
.SS "select"
.IX Subsection "select"
.Vb 2
\&  my ($stmt, @bind) = $abstract\->select($source, $fields, $where, $order);
\&  my ($stmt, @bind) = $abstract\->select($source, $fields, $where, \e%options);
.Ve
.PP
This method extends \*(L"select\*(R" in SQL::Abstract with the following functionality:
.PP
\fI\s-1AS\s0\fR
.IX Subsection "AS"
.PP
The \f(CW$fields\fR argument accepts array references containing array references
with field names and aliases, as well as array references containing scalar
references to pass literal \s-1SQL\s0 and array reference references to pass literal
\&\s-1SQL\s0 with bind values.
.PP
.Vb 2
\&  # "select foo as bar from some_table"
\&  $abstract\->select(\*(Aqsome_table\*(Aq, [[foo => \*(Aqbar\*(Aq]]);
\&
\&  # "select foo, bar as baz, yada from some_table"
\&  $abstract\->select(\*(Aqsome_table\*(Aq, [\*(Aqfoo\*(Aq, [bar => \*(Aqbaz\*(Aq], \*(Aqyada\*(Aq]);
\&
\&  # "select extract(epoch from foo) as foo, bar from some_table"
\&  $abstract\->select(\*(Aqsome_table\*(Aq, [\e\*(Aqextract(epoch from foo) as foo\*(Aq, \*(Aqbar\*(Aq]);
\&
\&  # "select \*(Aqtest\*(Aq as foo, bar from some_table"
\&  $abstract\->select(\*(Aqsome_table\*(Aq, [\e[\*(Aq? as foo\*(Aq, \*(Aqtest\*(Aq], \*(Aqbar\*(Aq]);
.Ve
.PP
\fI\s-1JOIN\s0\fR
.IX Subsection "JOIN"
.PP
The \f(CW$source\fR argument accepts array references containing not only table
names, but also array references with tables to generate \f(CW\*(C`JOIN\*(C'\fR clauses for.
.PP
.Vb 2
\&  # "select * from foo join bar on (bar.foo_id = foo.id)"
\&  $abstract\->select([\*(Aqfoo\*(Aq, [\*(Aqbar\*(Aq, foo_id => \*(Aqid\*(Aq]]);
\&
\&  # "select * from foo join bar on (foo.id = bar.foo_id)"
\&  $abstract\->select([\*(Aqfoo\*(Aq, [\*(Aqbar\*(Aq, \*(Aqfoo.id\*(Aq => \*(Aqbar.foo_id\*(Aq]]);
\&
\&  # \-left, \-right, \-inner
\&  # "select * from foo left join bar on (bar.foo_id = foo.id)"
\&  $abstract\->select([\*(Aqfoo\*(Aq, [\-left => \*(Aqbar\*(Aq, foo_id => \*(Aqid\*(Aq]]);
\&
\&  # \-natural
\&  # "select * from foo natural join bar"
\&  $abstract\->select([\*(Aqfoo\*(Aq, [\-natural => \*(Aqbar\*(Aq]]);
\&
\&  # join using
\&  # "select * from foo join bar using (foo_id)"
\&  $abstract\->select([\*(Aqfoo\*(Aq, [bar => \*(Aqfoo_id\*(Aq]]);
\&
\&  # more than one table
\&  # "select * from foo join bar on (bar.foo_id = foo.id) join baz on (baz.foo_id = foo.id)"
\&  $abstract\->select([\*(Aqfoo\*(Aq, [\*(Aqbar\*(Aq, foo_id => \*(Aqid\*(Aq], [\*(Aqbaz\*(Aq, foo_id => \*(Aqid\*(Aq]]);
\&
\&  # more than one field
\&  # "select * from foo left join bar on (bar.foo_id = foo.id and bar.foo_id2 = foo.id2)"
\&  $abstract\->select([\*(Aqfoo\*(Aq, [\-left => \*(Aqbar\*(Aq, foo_id => \*(Aqid\*(Aq, foo_id2 => \*(Aqid2\*(Aq]]);
.Ve
.SS "where"
.IX Subsection "where"
.Vb 1
\&  my ($stmt, @bind) = $abstract\->where($where, \e%options);
.Ve
.PP
This method extends \*(L"where\*(R" in SQL::Abstract with the following functionality:
.PP
\fI\s-1FOR\s0\fR
.IX Subsection "FOR"
.PP
The \f(CW\*(C`for\*(C'\fR option can be used to generate \f(CW\*(C`SELECT\*(C'\fR queries with \f(CW\*(C`FOR UPDATE\*(C'\fR
or \f(CW\*(C`LOCK IN SHARE MODE\*(C'\fR clauses.  So far the scalar values \f(CW\*(C`update\*(C'\fR and
\&\f(CW\*(C`share\*(C'\fR and scalar references to pass literal \s-1SQL\s0 are supported.
.PP
.Vb 2
\&  # "select * from some_table for update"
\&  $abstract\->select(\*(Aqsome_table\*(Aq, \*(Aq*\*(Aq, undef, {for => \*(Aqupdate\*(Aq});
\&
\&  # "select * from some_table lock in share mode"
\&  $abstract\->select(\*(Aqsome_table\*(Aq, \*(Aq*\*(Aq, undef, {for => \*(Aqshare\*(Aq});
\&
\&  # "select * from some_table for share"
\&  $abstract\->select(\*(Aqsome_table\*(Aq, \*(Aq*\*(Aq, undef, {for => \e\*(Aqshare\*(Aq});
\&
\&  # "select * from some_table for update skip locked"
\&  $abstract\->select(\*(Aqsome_table\*(Aq, \*(Aq*\*(Aq, undef, {for => \e\*(Aqupdate skip locked\*(Aq});
.Ve
.PP
\fI\s-1GROUP BY\s0\fR
.IX Subsection "GROUP BY"
.PP
The \f(CW\*(C`group_by\*(C'\fR option can be used to generate \f(CW\*(C`SELECT\*(C'\fR queries with \f(CW\*(C`GROUP
BY\*(C'\fR clauses. So far array references to pass a list of fields and scalar
references to pass literal \s-1SQL\s0 are supported.
.PP
.Vb 2
\&  # "select * from some_table group by foo, bar"
\&  $abstract\->select(\*(Aqsome_table\*(Aq, \*(Aq*\*(Aq, undef, {group_by => [\*(Aqfoo\*(Aq, \*(Aqbar\*(Aq]});
\&
\&  # "select * from some_table group by foo, bar"
\&  $abstract\->select(\*(Aqsome_table\*(Aq, \*(Aq*\*(Aq, undef, {group_by => \e\*(Aqfoo, bar\*(Aq});
.Ve
.PP
\fI\s-1HAVING\s0\fR
.IX Subsection "HAVING"
.PP
The \f(CW\*(C`having\*(C'\fR option can be used to generate \f(CW\*(C`SELECT\*(C'\fR queries with \f(CW\*(C`HAVING\*(C'\fR
clauses, which takes the same values as the \f(CW$where\fR argument.
.PP
.Vb 2
\&  # "select * from t group by a having b = \*(Aqc\*(Aq"
\&  $abstract\->select(\*(Aqt\*(Aq, \*(Aq*\*(Aq, undef, {group_by => [\*(Aqa\*(Aq], having => {b => \*(Aqc\*(Aq}});
.Ve
.PP
\fI\s-1ORDER BY\s0\fR
.IX Subsection "ORDER BY"
.PP
In addition to the \f(CW$order\fR argument accepted by SQL::Abstract you can pass
a hash reference with various options. This includes \f(CW\*(C`order_by\*(C'\fR, which takes
the same values as the \f(CW$order\fR argument.
.PP
.Vb 2
\&  # "select * from some_table order by foo desc"
\&  $abstract\->select(\*(Aqsome_table\*(Aq, \*(Aq*\*(Aq, undef, {order_by => {\-desc => \*(Aqfoo\*(Aq}});
.Ve
.PP
\fI\s-1LIMIT / OFFSET\s0\fR
.IX Subsection "LIMIT / OFFSET"
.PP
The \f(CW\*(C`limit\*(C'\fR and \f(CW\*(C`offset\*(C'\fR options can be used to generate \f(CW\*(C`SELECT\*(C'\fR queries
with \f(CW\*(C`LIMIT\*(C'\fR and \f(CW\*(C`OFFSET\*(C'\fR clauses.
.PP
.Vb 2
\&  # "select * from some_table limit 10"
\&  $abstract\->select(\*(Aqsome_table\*(Aq, \*(Aq*\*(Aq, undef, {limit => 10});
\&
\&  # "select * from some_table offset 5"
\&  $abstract\->select(\*(Aqsome_table\*(Aq, \*(Aq*\*(Aq, undef, {offset => 5});
\&
\&  # "select * from some_table limit 10 offset 5"
\&  $abstract\->select(\*(Aqsome_table\*(Aq, \*(Aq*\*(Aq, undef, {limit => 10, offset => 5});
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojo::mysql, SQL::Abstract::Pg, Mojolicious::Guides, <https://mojolicious.org>.
