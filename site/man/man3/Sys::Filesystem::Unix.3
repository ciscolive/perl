.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Sys::Filesystem::Unix 3"
.TH Sys::Filesystem::Unix 3 "2020-10-21" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Sys::Filesystem::Unix \- Return generic Unix filesystem information to Sys::Filesystem
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See Sys::Filesystem.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\&  Sys::Filesystem::Unix
\&  ISA UNIVERSAL
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBversion()\fR" 4
.IX Item "version()"
Return the version of the (sub)module.
.IP "readFsTab" 4
.IX Item "readFsTab"
This method provides the capability to parse a standard unix fstab file.
.Sp
It expects following arguments:
.RS 4
.IP "fstabPath" 8
.IX Item "fstabPath"
Full qualified path to the fstab file to read.
.IP "fstabKeys" 8
.IX Item "fstabKeys"
The column names for the fstab file through an array reference.
.IP "special_fs" 8
.IX Item "special_fs"
Hash reference containing the names of all special file systems having a true
value as key.
.RE
.RS 4
.Sp
This method return true in case the specified file could be opened for reading,
false otherwise.
.RE
.IP "readMntTab" 4
.IX Item "readMntTab"
This method provides the capability to read abd parse a standard unix
mount-tab file. The file is locked using flock after opening it.
.Sp
It expects following arguments:
.RS 4
.IP "mnttabPath" 8
.IX Item "mnttabPath"
Full qualified path to the mnttab file to read.
.IP "mnttabKeys" 8
.IX Item "mnttabKeys"
The column names for the mnttab file through an array reference.
.ie n .IP "$special_fs" 8
.el .IP "\f(CW$special_fs\fR" 8
.IX Item "$special_fs"
Hash reference containing the names of all special file systems having a true
value as key.
.RE
.RS 4
.Sp
This method return true in case the specified file could be opened for reading
and locked, false otherwise.
.RE
.IP "readMounts" 4
.IX Item "readMounts"
This method is called to parse the information got from \f(CW\*(C`mount\*(C'\fR system command.
It expects following arguments:
.RS 4
.IP "mount_rx" 8
.IX Item "mount_rx"
Regular expression to extract the information from each mount line.
.IP "pridx" 8
.IX Item "pridx"
Array reference containing the index for primary keys of interest in match
in following order: device, mount_point, type.
.IP "keys" 8
.IX Item "keys"
Array reference of the columns of the match \- in order of paranteses in
regular expression.
.IP "special" 8
.IX Item "special"
Array reference containing the names of the special file system types.
.IP "lines" 8
.IX Item "lines"
Array containing the lines to parse.
.RE
.RS 4
.RE
.IP "readSwap" 4
.IX Item "readSwap"
This method is called to parse the information from the swap status.
It expects following arguments:
.RS 4
.IP "swap_rx" 8
.IX Item "swap_rx"
Regular expression to extract the information from each swap status line.
This regular expression should have exact one pair of parantheses to
identify the swap device.
.IP "lines" 8
.IX Item "lines"
Array containing the lines to parse.
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicola Worthington <nicolaw@cpan.org> \- <http://perlgirl.org.uk>
.PP
Jens Rehsack <rehsack@cpan.org> \- <http://www.rehsack.de/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2004,2005,2006 Nicola Worthington.
.PP
Copyright 2008\-2020 Jens Rehsack.
.PP
This software is licensed under The Apache Software License, Version 2.0.
.PP
<http://www.apache.org/licenses/LICENSE\-2.0>
