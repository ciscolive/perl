.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::DNS::ToolKit::Utilities 3"
.TH Net::DNS::ToolKit::Utilities 3 "2011-11-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::ToolKit::Utilities \- a collection of helper utilities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  use Net::DNS::ToolKit::Utilities qw(
\&        id
\&        question  
\&        revIP   
\&        query  
\&        dns_udpsend
\&        dns_udpresp
\&        dns_ans
\&        dns_ns
\&        dns_ptr
\&        rlook_send
\&        rlook_rcv
\&  );
\&
\&  $unique = id($seed);
\&  $querybuf = question($name,$type);
\&  $rev = revIP($ip);
\&  $response = query(\e$buffer,$timeout);
\&  $socket = dns_udpsend(\e$buffer,$timeout);
\&  $response = dns_udpresp($socket,$timeout);
\&  ($aptr,$tptr,$auth_zone) = dns_ans(\e$buffer);
\&  $nsptr = dns_ns(\e$buffer);
\&  $hostname = dns_ptr(\e$buffer);
\&  @hosts = dns_ptr(\e$buffer);
\&  $socket = rlook_send($IP,$timeout);
\&  $hostname = rlook_rcv($socket,$timeout);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBNet::DNS::ToolKit::Utilities\fR provides a collection of \s-1DNS\s0 utilities
built from the ToolKit building blocks
.IP "\(bu" 4
\&\f(CW$unique\fR = id($seed);
.Sp
Return a unique, non-zero, 16 bit \s-1ID\s0 for this session. Seeded with time, this number is
autoincremented each time it is retrieved and will be unique each call from
a single session. The number wraps around at 65535.
.Sp
.Vb 2
\&  input:        [optional] seed
\&  returns:      the last 16 bit number +1
.Ve
.Sp
Optionally, the user may supply a seed for the first call. Subsquent calls
will return the previous number + 1 (mod 65536). The seed is set when the module is
instantiated if no seed is supplied.
.IP "\(bu" 4
\&\f(CW$querybuf\fR = question($name,$type);
.Sp
Create a C_IN \s-1DNS\s0 query of \f(CW$type\fR about \f(CW$name\fR.
.Sp
.Vb 3
\&  input:        host or domain name,
\&                query type
\&  returns:      query buffer
.Ve
.Sp
Supports types T_A, T_TXT, T_ANY, T_MX, T_NS, T_PTR
.IP "\(bu" 4
\&\f(CW$rev\fR = revIP($ip);
.Sp
Reverse an \s-1IP\s0 address. i.e
.Sp
.Vb 1
\&  78.56.34.12 = revIP(12.34.56.78);
\&
\&  input:        a dot quad IP address
\&  returns:      reversed dot quad address
.Ve
.Sp
\&\s-1NOTE:\s0 this is an operation on \s-1ASCII\s0 characters, not packed network
addresses.
.IP "\(bu" 4
\&\f(CW$response\fR = query(\e$buffer,$timeout);
.Sp
Sends a \s-1DNS\s0 query contained in \f(CW$buffer\fR. Return a \s-1DNS\s0
response buffer or undef on error. If the error is catastophic (like a
timeout), $@ will be set.
.Sp
.Vb 3
\&  input:        pointer to query buffer,
\&                optional timeout (secs, def 30)
\&  returns:      DNS answer or undef
.Ve
.IP "\(bu" 4
\&\f(CW$socket\fR = dns_udpsend(\e$buffer,$timeout);
.Sp
Sends a \s-1DNS\s0 query contained in \f(CW$buffer\fR. Returns a \s-1UDP\s0 socket or undef;
If the error is catastophic (like a timeout), $@ will be set.
.Sp
.Vb 3
\&  input:        pointer to query buffer,
\&                optional timeout (secs, def 30)
\&  returns:      socket or undef
.Ve
.IP "\(bu" 4
\&\f(CW$buffer\fR = dns_udpresp($socket,$timeout);
.Sp
Returns a \s-1DNS\s0 answer from \f(CW$socket\fR and closes socket. Returns undef on
failure. If the error is catastophic (like a timeout), $@ will be set.
.Sp
.Vb 3
\&  input:        socket,
\&                optional timeout (secs, def 30)
\&  returns:      response buffer
\&
\&  closes:       socket
.Ve
.IP "\(bu" 4
($aptr,$tptr,$auth_zone)=dns_ans(\e$buffer);
.Sp
Parse a \s-1DNS\s0 answer and return pointer to an array of \fBA\fR response records
and \fB\s-1TXT\s0\fR records blessed into the callers namespace.
.Sp
.Vb 3
\&  input:        DNS answer
\&  returns:      pointers to two arrays,
\&                auth_zone name or \*(Aq\*(Aq
.Ve
.Sp
Returns an empty array unless there is at least \s-1ONE\s0 \fBA\fR record found.
.Sp
The first array contains packed IPv4 addresses of the form
returned by inet_aton (text). The second array contains text strings.
.Sp
auth_zone will contain the zone name if an \s-1SOA\s0 record is found, otherwise
it will contain ''.
.IP "\(bu" 4
\&\f(CW$nsptr\fR = dns_ns(\e$buffer);
.Sp
Parse a \s-1DNS NS\s0 request answer and return pointer to a hash of name servers
and \s-1TTL\s0's.
.Sp
.Vb 3
\&  $ptr\->{hostname}\-\-\->{addr} = netaddr
\&                   |
\&                   *\->{ttl}  = seconds
.Ve
.Sp
If no records are found, undef is returned
.Sp
.Vb 2
\&  input:        pointer to response buffer
\&  returns:      pointer to hash or undef
.Ve
.IP "\(bu" 4
\&\f(CW$host\fR = dns_ptr(\e$buffer);
.Sp
Parse a \s-1DNS PTR\s0 request answer and return the hostname
.Sp
If no records are found, undef or an empty array is returned
.Sp
.Vb 2
\&  input:        pointer to response buffer
\&  returns:      host name or array of hosts
.Ve
.IP "\(bu" 4
\&\f(CW$socket\fR = rlook_send($IP,$timeout);
.Sp
Send a query for reverse lookup of \f(CW$IP\fR 
and return the receive socket handle.
.Sp
.Vb 3
\&  input:        dotquad IP address,
\&                optional timeout (sec, def 30)
\&  return:       socket or undef
.Ve
.IP "\(bu" 4
\&\f(CW$hostname\fR = rlook_rcv($socket,$timeout);
.Sp
Receive \s-1DNS\s0 response, parse for hostname, close socket;
.Sp
.Vb 3
\&  input:        receive socket,
\&                optional timeout (sec, def 30)
\&  return:       hostname text or undef
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.Vb 4
\&        IO::Socket
\&        Net::DNS::Codes
\&        Net::DNS::ToolKit
\&        Net::DNS::ToolKit::RR
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
.Vb 1
\&        none by default
.Ve
.SH "EXPORT_OK"
.IX Header "EXPORT_OK"
.Vb 11
\&        id   
\&        question
\&        revIP
\&        query
\&        dns_udpsend
\&        dns_udpresp
\&        dns_ans
\&        dns_ns
\&        dns_ptr
\&        rlook_send
\&        rlook_rcv
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&    Copyright 2003 \- 2011, Michael Robinton <michael@bizsystems.com>
.Ve
.PP
Michael Robinton <michael@bizsystems.com>
.PP
All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of either:
.PP
.Vb 3
\&  a) the GNU General Public License as published by the Free
\&  Software Foundation; either version 2, or (at your option) any
\&  later version, or
\&
\&  b) the "Artistic License" which comes with this distribution.
.Ve
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of 
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See either    
the \s-1GNU\s0 General Public License or the Artistic License for more details.
.PP
You should have received a copy of the Artistic License with this
distribution, in the file named \*(L"Artistic\*(R".  If not, I'll be glad to provide
one.
.PP
You should also have received a copy of the \s-1GNU\s0 General Public License
along with this program in the file named \*(L"Copying\*(R". If not, write to the
.PP
.Vb 3
\&        Free Software Foundation, Inc.                        
\&        59 Temple Place, Suite 330
\&        Boston, MA  02111\-1307, USA
.Ve
.PP
or visit their web page on the internet at:
.PP
.Vb 1
\&        http://www.gnu.org/copyleft/gpl.html.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Robinton <michael@bizsystems.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::DNS::Codes, Net::DNS::ToolKit, Net::DNS::ToolKit::RR,
