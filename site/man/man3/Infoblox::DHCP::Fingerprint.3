.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::Fingerprint 3"
.TH Infoblox::DHCP::Fingerprint 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::Fingerprint \- DHCP Fingerprint object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1DHCP\s0 Fingerprint object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 12
\& my $fingerprint = Infoblox::DHCP::Fingerprint\->new(
\&    name                  => $string,                                 # required
\&    device_class          => $string,                                 # required
\&    type                  => \*(AqCUSTOM\*(Aq | \*(AqSTANDARD\*(Aq,                   # optional, default is \*(AqCUSTOM\*(Aq
\&    comment               => $string,                                 # optional
\&    disable               => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                        # optional, default is \*(Aqfalse\*(Aq
\&    vendor_id             => [$string1, $string2, ...],               # optional
\&    option_sequence       => [$string1, $string2, ...],               # optional
\&    ipv6_option_sequence  => [$string1, $string2, ...],               # optional
\&    extattrs              => { $string => $extattr, ... },            # optional / Default is undefined
\&    extensible_attributes => $extattrs,                               # optional
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.PP
At least one of option_sequence, ipv6_option_sequence or vendor_id must be defined.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to \s-1DHCP\s0 Fingerprint objects.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance if the type value is '\s-1CUSTOM\s0'. Otherwise this method is not supported. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Construct an object
\& my $fingerprint = Infoblox::DHCP::Fingerprint\->new(
\&    name => \*(AqInfoblox\*(Aq,
\&    device_class => \*(AqInc\*(Aq,
\&    option_sequence => [\*(Aq1\*(Aq],
\& );
\&
\& #Submit for addition
\& my $response = $session\->add( $fingerprint );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP Fingerprint object:
\&
\&  name                       \- Optional. The name of the DHPC Fingerprint object.
\&  device_class               \- Optional. The class of DHCP Fingerprint object.
\&  type                       \- Optional. The type of DHCP Fingerprint object.
\&  comment                    \- Optional. The comment.
\&  extattrs                   \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes      \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Get DHCP Fingerprint object by name
\& my @retrieved_objs = $session\->get(
\&    object  => \*(AqInfoblox::DHCP::Fingerprint\*(Aq,
\&    name    => \*(AqInfoblox\*(Aq,
\& );
\&
\& # Get all base DHCP Fingerprint objects
\& my @retrieved_objs = $session\->get(
\&    object  => \*(AqInfoblox::DHCP::Fingerprint\*(Aq,
\&    type    => \*(AqSTANDARD\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Modify comment
\& $fingerprint\->comment("This is modified object");
\& # Submit modification
\& my $response = $session\->modify( $fingerprint );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance if the type value is '\s-1CUSTOM\s0'. Otherwise this method is not supported. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& # Get the object by name
\& my @retrieved_objs = $session\->get(
\&    object    => \*(AqInfoblox::DHCP::Fingerprint\*(Aq,
\&    name      => \*(AqInfoblox\*(Aq,
\& );
\& #Find the desired object from the retrieved list.
\& my $desired_fingerprint = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_fingerprint );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DHCP\s0 Fingerprint objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for specific DHCP Fingerprint objects:
\&
\&  name                       \- Optional. The name of the DHPC Fingerprint object (regular expression).
\&  device_class               \- Optional. The class of DHCP Fingerprint object (regular expression).
\&  type                       \- Optional. The type of DHCP Fingerprint object.
\&  comment                    \- Optional. The comment (regular expression).
\&  extattrs                   \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes      \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Search DHCP Fingerprint object by name
\& my @retrieved_objs = $session\->search(
\&    object  => \*(AqInfoblox::DHCP::Fingerprint\*(Aq,
\&    name    => \*(AqInfoblox\*(Aq,
\& );
\&
\& # Search all base DHCP Fingerprint objects
\& my @retrieved_objs = $session\->search(
\&    object  => \*(AqInfoblox::DHCP::Fingerprint\*(Aq,
\&    type    => \*(AqSTANDARD\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of \s-1DHCP\s0 Fingerprint objects.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $fingerprint\->comment();
\& #Modify attribute value
\& $fingerprint\->comment(\*(Aqnew comment\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "device_class( )"
.IX Subsection "device_class( )"
.RS 4
Use this method to set or retrieve a class of \s-1DHCP\s0 Fingerprint object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The class in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $fingerprint\->device_class();
\& #Modify attribute value
\& $fingerprint\->device_class(\*(AqInfoblox Inc.\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve a name of \s-1DHCP\s0 Fingerprint object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $fingerprint\->name();
\& #Modify attribute value
\& $fingerprint\->name(\*(Aqcustom fingerprint\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to enable or disable a \s-1DHCP\s0 Fingerprint object.
.Sp
If a \s-1DHCP\s0 Fingerprint object is enabled, the option number sequence and vendor_ids for this operating system or device will be included in the list of fingerprints to match incoming lease requests.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to disable \s-1DHCP\s0 Fingerprint object or \*(L"false\*(R" to enable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $fingerprint\->disable();
\& #Modify attribute value
\& $fingerprint\->disable(\*(Aqfalse\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Fingerprint object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $fingerprint\->extattrs();
\& #Modify extattrs
\& $fingerprint\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with \s-1DHCP\s0 Fingerprint objects.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $fingerprint\->extensible_attributes();
\& #Modify attribute value
\& $fingerprint\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "option_sequence( )"
.IX Subsection "option_sequence( )"
.RS 4
Use this method to set or retrieve a list (comma separated list) of IPv4 option number sequences of the device or operating system.
.Sp
At least one of option_sequence, ipv6_option_sequence or vendor_id must be defined.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Reference to an array of IPv4 option number sequence (comma separated list) in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $fingerprint\->option_sequence();
\& #Modify attribute value
\& $fingerprint\->option_sequence([\*(Aq1,2,3\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "ipv6_option_sequence( )"
.IX Subsection "ipv6_option_sequence( )"
.RS 4
Use this method to set or retrieve a list (comma separated list) of IPv6 option number sequences of the device or operating system.
.Sp
At least one of option_sequence, ipv6_option_sequence or vendor_id must be defined.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Reference to an array of IPv6 option number sequence (comma separated list) in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $fingerprint\->ipv6_option_sequence();
\& #Modify attribute value
\& $fingerprint\->ipv6_option_sequence([\*(Aq1,2,3\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "type( )"
.IX Subsection "type( )"
.RS 4
Use this method to set or retrieve the type of the \s-1DHCP\s0 Fingerprint object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value can be '\s-1STANDARD\s0' or '\s-1CUSTOM\s0'. Standard fingerprints are the fingerprints from fingerbank. Custom fingerprints are user defined fingerprints.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $fingerprint\->type();
\& #Modify attribute value
\& $fingerprint\->type(\*(AqCUSTOM\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "vendor_id( )"
.IX Subsection "vendor_id( )"
.RS 4
Use this method to set or retrieve a list of vendor IDs of the device or operating system.
.Sp
At least one of option_sequence, ipv6_option_sequence or vendor_id must be defined.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Reference to an array of vendor \s-1ID\s0 in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $fingerprint\->vendor_id();
\& #Modify attribute value
\& $fingerprint\->vendor_id([\*(Aq3\*(Aq,\*(Aq4\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, get, modify, search and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to getting and modifying \s-1DHCP\s0 Fingerprint object\fR
.PP
.Vb 2
\& use strict;
\& use Infoblox;
\&
\& #refers to Infoblox Appliance IP address
\& my $host_ip = "192.168.1.2";
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&     master   => $host_ip,
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create \s-1DHCP\s0 Fingerprint object\fR
.PP
.Vb 5
\& my $fingerprint = Infoblox::DHCP::Fingerprint\->new(
\&    \*(Aqname\*(Aq => \*(AqInfoblox\*(Aq,
\&    \*(Aqdevice_class\*(Aq => \*(AqInc\*(Aq,
\&    \*(Aqoption_sequence\*(Aq => [\*(Aq1\*(Aq],
\& );
\&
\& unless ($fingerprint) {
\&        die("Construct DHCP Fingerprint object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Fingerprint object created successfully\en";
\&
\& my $response = $session\->add($fingerprint);
\&
\& unless ($response) {
\&     die("Add DHCP Fingerprint object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"DHCP Fingerprint object added successfully \en";
.Ve
.PP
\&\fB#Search for \s-1DHCP\s0 Fingerprint object\fR
.PP
.Vb 4
\& my @retrieved_objs = $session\->search(
\&    object   => \*(AqInfoblox::DHCP::Fingerprint\*(Aq,
\&    name     => \*(AqInfoblox\*(Aq,
\& );
\&
\& $fingerprint = $retrieved_objs[0];
\&
\& unless ($fingerprint) {
\&         die("Search DHCP Fingerprint object object failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DHCP Fingerprint object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify \s-1DHCP\s0 Fingerprint object\fR
.PP
.Vb 4
\& @retrieved_objs = $session\->get(
\&    object  => \*(AqInfoblox::DHCP::Fingerprint\*(Aq,
\&    name    => \*(AqInfoblox\*(Aq,
\& );
\&
\& $fingerprint = $retrieved_objs[0];
\&
\& unless ($fingerprint) {
\&     die("Get DHCP Fingerprint object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Get DHCP Fingerprint object successful \en";
\&
\& $fingerprint\->comment("This is modified object");
\&
\& $session\->modify($fingerprint)
\&    or die("Modify DHCP Fingerprint object failed",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Fingerprint object modified successfully \en";
.Ve
.PP
\&\fB#Remove \s-1DHCP\s0 Fingerprint object\fR
.PP
.Vb 4
\& @retrieved_objs = $session\->get(
\&    object   => \*(AqInfoblox::DHCP::Fingerprint\*(Aq,
\&    name     => \*(AqInfoblox\*(Aq,
\& );
\&
\& $fingerprint = $retrieved_objs[0];
\&
\& unless ($fingerprint) {
\&     die("Get DHCP Fingerprint object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Get DHCP Fingerprint object successful \en";
\&
\& $session\->remove( $fingerprint )
\&     or die("Remove DHCP Fingerprint object failed",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print"DHCP Fingerprint object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
