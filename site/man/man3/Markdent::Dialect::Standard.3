.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Markdent::Dialect::Standard 3"
.TH Markdent::Dialect::Standard 3 "2020-07-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Markdent::Dialect::Standard \- Markdown as defined by John Gruber
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Markdent::Parser;
\&
\&  my $parser = Markdent::Parser\->new( handler => ... );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \*(L"Standard\*(R" dialect is plain Markdown as defined by John Gruber
(<http://daringfireball.net/projects/markdown/>) and as implemented by Dingus
(<http://daringfireball.net/projects/markdown/dingus>).
.PP
This is the default dialect, so you do not need to ask for it explicitly.
.SS "\s-1DEVIATIONS\s0"
.IX Subsection "DEVIATIONS"
The Standard dialect as implemented by Markdent differs from Dingus in a few
ways:
.IP "\(bu" 4
\&\s-1HTML\s0 attribute quote delimiters are not preserved, so a single quote may be
converted into a double quote.
.IP "\(bu" 4
Whitespace on an empty line in a code block is preserved by Markdent, but not
by Dingus.
.IP "\(bu" 4
Markdent will not generate bad \s-1HTML\s0 from Markdown markup. Markdent does not
allow unbalanced markup events to propagate, and will turn unbalanced events
into plain text.
.Sp
Here is an example:
.Sp
.Vb 1
\&  *em **strong* wtf**
.Ve
.Sp
Dingus turns this into:
.Sp
.Vb 1
\&  <p><em>em <strong>strong</em> wtf</strong></p>
.Ve
.Sp
Markdent's \s-1HTML\s0 output for the same:
.Sp
.Vb 1
\&  <p><em>em **strong</em> wtf**</p>
.Ve
.Sp
Note that with inline \s-1HTML,\s0 Markdent echoes it more or less as-is, so you can
still produce bad \s-1HTML\s0 with Markdent.
.SH "BUGS"
.IX Header "BUGS"
See Markdent for bug reporting details.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky, <autarch@urth.org>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2009\-2012 Dave Rolsky, All Rights Reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
