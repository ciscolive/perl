.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Perlbal::Manual::Selector 3"
.TH Perlbal::Manual::Selector 3 "2011-01-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perlbal::Manual::Selector \- Configuring Perlbal as a virtual service that maps onto other services
.SS "\s-1VERSION\s0"
.IX Subsection "VERSION"
Perlbal 1.78.
.SS "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
How to configure a Perlbal \f(CW\*(C`selector\*(C'\fR service.
.SS "\s-1READ ME FIRST\s0"
.IX Subsection "READ ME FIRST"
Please read Perlbal::Manual::Configuration first for a better explanation on how to configure Perlbal. This document will make much more sense after reading that.
.SS "Configuring Perlbal as a Selector"
.IX Subsection "Configuring Perlbal as a Selector"
The \f(CW\*(C`selector\*(C'\fR role allows you to create a service that selects to which other service a request should be sent to.
.PP
Here's an example of how to do that with the help of Perlbal::Plugin::VHosts:
.PP
.Vb 1
\&    LOAD vhosts
\&
\&    CREATE SERVICE selector_service
\&      SET listen         = 0.0.0.0:80
\&      SET role           = selector
\&      SET plugins        = vhosts
\&
\&      VHOST *.site1.com  = service1
\&      VHOST *.site2.com  = service2
\&    ENABLE selector_service
.Ve
.PP
In this case, requests to both \f(CW\*(C`site1\*(C'\fR and \f(CW\*(C`site2\*(C'\fR are received by \f(CW\*(C`selector_service\*(C'\fR, which then sends requests for \f(CW\*(C`site1\*(C'\fR to \f(CW\*(C`service1\*(C'\fR and requests for \f(CW\*(C`site2\*(C'\fR to \f(CW\*(C`service2\*(C'\fR.
.PP
Depending on your needs, you may want to use an existing plugin (e.g., Perlbal::Plugin::Vhosts, Perlbal::Plugin::VPaths) or create your own (see \f(CW\*(C`selector\*(C'\fR under Perlbal::Manual::Plugins).
.SS "\s-1SEE ALSO\s0"
.IX Subsection "SEE ALSO"
Perlbal::Manual::Configuration,
Perlbal::Manual::Management,
Perlbal::Manual::Plugins,
Perlbal::Plugin::Vhosts,
Perlbal::Plugin::VPaths.
