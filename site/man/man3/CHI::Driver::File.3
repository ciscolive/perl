.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CHI::Driver::File 3"
.TH CHI::Driver::File 3 "2015-06-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CHI::Driver::File \- File\-based cache using one file per entry in a multi\-level
directory structure
.SH "VERSION"
.IX Header "VERSION"
version 0.60
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use CHI;
\&
\&    my $cache = CHI\->new(
\&        driver         => \*(AqFile\*(Aq,
\&        root_dir       => \*(Aq/path/to/cache/root\*(Aq,
\&        depth          => 3,
\&        max_key_length => 64
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This cache driver stores data on the filesystem, so that it can be shared
between processes on a single machine, or even on multiple machines if using
\&\s-1NFS.\s0
.PP
Each item is stored in its own file. By default, during a set, a temporary file
is created and then atomically renamed to the proper file. While not the most
efficient, it eliminates the need for locking (with multiple overlapping sets,
the last one \*(L"wins\*(R") and makes this cache usable in environments like \s-1NFS\s0 where
locking might normally be undesirable.
.PP
By default, the base filename is the key itself, with unsafe characters escaped
similar to \s-1URL\s0 escaping. If the escaped key is larger than \*(L"max_key_length\*(R"
(default 248 characters), it will be digested. You may want
to lower \*(L"max_key_length\*(R" if you are storing a lot of items as long filenames
can be more expensive to work with.
.PP
The files are evenly distributed within a multi-level directory structure with
a customizable \*(L"depth\*(R", to minimize the time needed to search for a given
entry.
.SH "CONSTRUCTOR OPTIONS"
.IX Header "CONSTRUCTOR OPTIONS"
When using this driver, the following options can be passed to \s-1CHI\-\s0>\fBnew()\fR in
addition to the \s-1CHI\s0.
.IP "root_dir" 4
.IX Item "root_dir"
The location in the filesystem that will hold the root of the cache.  Defaults
to a directory called 'chi\-driver\-file' under the \s-1OS\s0 default temp directory
(e.g. '/tmp' on \s-1UNIX\s0). This directory will be created as needed on the first
cache set.
.IP "depth" 4
.IX Item "depth"
The number of subdirectories deep to place cache files. Defaults to 2. This
should be large enough that no leaf directory has more than a few hundred
files. Each non-leaf directory contains up to 16 subdirectories (0\-9, A\-F).
.IP "dir_create_mode" 4
.IX Item "dir_create_mode"
Permissions mode to use when creating directories. Defaults to 0775.
.IP "file_create_mode" 4
.IX Item "file_create_mode"
Permissions mode to use when creating files, modified by the current umask.
Defaults to 0666.
.IP "file_extension" 4
.IX Item "file_extension"
Extension to append to filename. Default is \f(CW\*(C`.dat\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "path_to_key ( $key )" 4
.el .IP "path_to_key ( \f(CW$key\fR )" 4
.IX Item "path_to_key ( $key )"
Returns the full path to the cache file representing \f(CW$key\fR, whether or not that
entry exists. Returns the empty list if a valid path cannot be computed, for
example if the key is too long.
.IP "path_to_namespace" 4
.IX Item "path_to_namespace"
Returns the full path to the directory representing this cache's namespace,
whether or not it has any entries.
.SH "TEMPORARY FILE RENAME"
.IX Header "TEMPORARY FILE RENAME"
By default, during a set, a temporary file is created and then atomically
renamed to the proper file.  This eliminates the need for locking. You can
subclass and override method \fIgenerate_temporary_filename\fR to either change
the path of the temporary filename, or skip the temporary file and rename
altogether by having it return undef.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1CHI\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonathan Swartz <swartz@pobox.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Jonathan Swartz.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
