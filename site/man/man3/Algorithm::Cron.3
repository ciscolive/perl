.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Algorithm::Cron 3"
.TH Algorithm::Cron 3 "2020-07-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"Algorithm::Cron" \- abstract implementation of the cron(8) scheduling
algorithm
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Algorithm::Cron;
\&
\& my $cron = Algorithm::Cron\->new(
\&    base => \*(Aqlocal\*(Aq,
\&    crontab => "*/10 9\-17 * * *",
\& );
\&
\& my $time = time;
\& while(1) {
\&    $time = $cron\->next_time( $time );
\&
\&    sleep( time \- $time );
\&
\&    print "Do something\en";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Objects in this class implement a time scheduling algorithm such as used by
\&\fI\f(BIcron\fI\|(8)\fR. Objects are stateless once constructed, and represent a single
schedule as defined by a \fI\f(BIcrontab\fI\|(5)\fR entry. The object implements a method
\&\f(CW\*(C`next_time\*(C'\fR which returns an epoch timestamp value to indicate the next time
included in the crontab schedule.
.SS "Crontabs"
.IX Subsection "Crontabs"
The schedule is provided as a set of acceptable values for each field of the
broken-down time (as returned by \f(CW\*(C`localtime\*(C'\fR or \f(CW\*(C`gmtime\*(C'\fR), either in a
single string called \f(CW\*(C`crontab\*(C'\fR or by a set of named strings, each taking the
name of a \fI\f(BIcrontab\fI\|(5)\fR field.
.PP
.Vb 4
\& my $cron = Algorithm::Cron\->new(
\&    base => \*(Aqlocal\*(Aq,
\&    crontab => \*(Aq0 9 * * mon\-fri\*(Aq,
\& );
.Ve
.PP

.PP
.Vb 6
\& my $cron = Algorithm::Cron\->new(
\&    base => \*(Aqlocal\*(Aq,
\&    min  => 0,
\&    hour => 9,
\&    wday => "mon\-fri",
\& );
.Ve
.PP
A \f(CW\*(C`crontab\*(C'\fR field containing a single asterisk (\f(CW\*(C`*\*(C'\fR), or a missing named
field, indicates that any value here is included in the scheduled times. To
restrict the schedule, a value or set of values can be provided. This should
consist of one or more comma-separated numbers or ranges, where a range is
given as the start and end points, both inclusive.
.PP
.Vb 2
\& hour => "3\-6"
\& hour => "3,4,5,6"
.Ve
.PP
Ranges can also be prefixed by a value to give the increment for values in
that range.
.PP
.Vb 2
\& min => "*/10"
\& min => "0,10,20,30,40,50"
.Ve
.PP
The \f(CW\*(C`mon\*(C'\fR and \f(CW\*(C`wday\*(C'\fR fields also allow symbolic month or weekday names in
place of numeric values. These names are always in the C locale, regardless of
the system's locale settings.
.PP
.Vb 1
\& mon => "mar\-sep"
\&
\& wday => "mon,wed,fri"
.Ve
.PP
Specifying \f(CW\*(C`sun\*(C'\fR as the end of a \f(CW\*(C`wday\*(C'\fR range, or giving the numeric value
of \f(CW7\fR is also supported.
.PP
.Vb 3
\& wday => "fri\-sun"
\& wday => "5\-7"
\& # Both equivalent to: wday => "0,5,6"
.Ve
.PP
As per \fI\f(BIcron\fI\|(8)\fR behaviour, this algorithm looks for a match of the \f(CW\*(C`min\*(C'\fR,
\&\f(CW\*(C`hour\*(C'\fR and \f(CW\*(C`mon\*(C'\fR fields, and at least one of the \f(CW\*(C`mday\*(C'\fR or \f(CW\*(C`mday\*(C'\fR fields.
If both \f(CW\*(C`mday\*(C'\fR and \f(CW\*(C`wday\*(C'\fR are specified, a match of either will be
sufficient.
.PP
As an extension, seconds may be provided either by passing six space-separated
fields in the \f(CW\*(C`crontab\*(C'\fR string, or as an additional \f(CW\*(C`sec\*(C'\fR field. If not
provided it will default to \f(CW0\fR. If six fields are provided, the first gives
the seconds.
.SS "Time Base"
.IX Subsection "Time Base"
\&\f(CW\*(C`Algorithm::Cron\*(C'\fR supports using either \s-1UTC\s0 or the local timezone when
comparing against the given schedule.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.ie n .SS "$cron = Algorithm::Cron\->new( %args )"
.el .SS "\f(CW$cron\fP = Algorithm::Cron\->new( \f(CW%args\fP )"
.IX Subsection "$cron = Algorithm::Cron->new( %args )"
Constructs a new \f(CW\*(C`Algorithm::Cron\*(C'\fR object representing the given schedule
relative to the given time base. Takes the following named arguments:
.IP "base => \s-1STRING\s0" 8
.IX Item "base => STRING"
Gives the time base used for scheduling. Either \f(CW\*(C`utc\*(C'\fR or \f(CW\*(C`local\*(C'\fR.
.IP "crontab => \s-1STRING\s0" 8
.IX Item "crontab => STRING"
Gives the crontab schedule in 5 or 6 space-separated fields.
.IP "sec => \s-1STRING,\s0 min => \s-1STRING, ...\s0 mon => \s-1STRING\s0" 8
.IX Item "sec => STRING, min => STRING, ... mon => STRING"
Optional. Gives the schedule in a set of individual fields, if the \f(CW\*(C`crontab\*(C'\fR
field is not specified.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "@seconds = $cron\->sec"
.el .SS "\f(CW@seconds\fP = \f(CW$cron\fP\->sec"
.IX Subsection "@seconds = $cron->sec"
.ie n .SS "@minutes = $cron\->min"
.el .SS "\f(CW@minutes\fP = \f(CW$cron\fP\->min"
.IX Subsection "@minutes = $cron->min"
.ie n .SS "@hours = $cron\->hour"
.el .SS "\f(CW@hours\fP = \f(CW$cron\fP\->hour"
.IX Subsection "@hours = $cron->hour"
.ie n .SS "@mdays = $cron\->mday"
.el .SS "\f(CW@mdays\fP = \f(CW$cron\fP\->mday"
.IX Subsection "@mdays = $cron->mday"
.ie n .SS "@months = $cron\->mon"
.el .SS "\f(CW@months\fP = \f(CW$cron\fP\->mon"
.IX Subsection "@months = $cron->mon"
.ie n .SS "@wdays = $cron\->wday"
.el .SS "\f(CW@wdays\fP = \f(CW$cron\fP\->wday"
.IX Subsection "@wdays = $cron->wday"
Accessors that return a list of the accepted values for each scheduling field.
These are returned in a plain list of numbers, regardless of the form they
were specified to the constructor.
.PP
Also note that the list of valid months will be 0\-based (in the range 0 to 11)
rather than 1\-based, to match the values used by \f(CW\*(C`localtime\*(C'\fR, \f(CW\*(C`gmtime\*(C'\fR,
\&\f(CW\*(C`mktime\*(C'\fR and \f(CW\*(C`timegm\*(C'\fR.
.ie n .SS "$time = $cron\->next_time( $start_time )"
.el .SS "\f(CW$time\fP = \f(CW$cron\fP\->next_time( \f(CW$start_time\fP )"
.IX Subsection "$time = $cron->next_time( $start_time )"
Returns the next scheduled time, as an epoch timestamp, after the given
timestamp. This is a stateless operation; it does not change any state stored
by the \f(CW$cron\fR object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Evans <leonerd@leonerd.org.uk>
