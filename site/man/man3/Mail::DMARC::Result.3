.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::DMARC::Result 3"
.TH Mail::DMARC::Result 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::DMARC::Result \- an aggregate report result object
.SH "VERSION"
.IX Header "VERSION"
version 1.20200214
.SH "OVERVIEW"
.IX Header "OVERVIEW"
A Result object is the product of instantiating a DMARC::PurePerl object, populating the variables, and running \f(CW$dmarc\fR\->validate. The results object looks like this:
.PP
.Vb 10
\&    result       => \*(Aqpass\*(Aq,   # pass, fail
\&    disposition  => \*(Aqnone\*(Aq,   # reject, quarantine, none
\&    reason       => [         # there can be many reasons...
\&            {
\&                type     => \*(Aq\*(Aq,   # forwarded, sampled_out, trusted_forwarder,
\&                comment  => \*(Aq\*(Aq,   #   mailing_list, local_policy, other
\&            },
\&        ],
\&    dkim         => \*(Aqpass\*(Aq,   # pass, fail
\&    dkim_align   => \*(Aqstrict\*(Aq, # strict, relaxed
\&    spf          => \*(Aqpass\*(Aq,   # pass, fail
\&    spf_align    => \*(Aqstrict\*(Aq, # strict, relaxed
\&    published    => L<Mail::DMARC::Policy>,
.Ve
.PP
Reasons are optional and may not be present.
.PP
The dkim_align and spf_align fields will only be present if the corresponding test value equals pass. They are additional info not specified by the \s-1DMARC\s0 spec.
.SH "METHODS"
.IX Header "METHODS"
.SS "published"
.IX Subsection "published"
Published is a Mail::DMARC::Policy tagged with a domain. The domain attribute is the \s-1DNS\s0 domain name where the \s-1DMARC\s0 record was found. This may not be the same as the header_from domain (ex: bounces.amazon.com \-vs\- amazon.com).
.SS "result"
.IX Subsection "result"
Whether the message passed the \s-1DMARC\s0 test. Possible values are: pass, fail.
.PP
In order to pass, at least one authentication alignment must pass. The 2013 draft defines two authentication methods: \s-1DKIM\s0 and \s-1SPF.\s0 The list is expected to grow.
.SS "disposition"
.IX Subsection "disposition"
When the \s-1DMARC\s0 result is not \fIpass\fR, disposition is the results of applying \s-1DMARC\s0 policy to a message. Generally this is the same as the header_from domains published \s-1DMARC\s0 policy. When it is not, the reason \s-1SHOULD\s0 be specified.
.SS "dkim"
.IX Subsection "dkim"
Whether the message passed or failed \s-1DKIM\s0 alignment. In order to pass the \s-1DMARC DKIM\s0 alignment test, a \s-1DKIM\s0 signature that matches the \s-1RFC5322\s0.From domain must be present. An unsigned messsage, a message with an invalid signature, or signatures that don't match the \s-1RFC5322\s0.From field are all considered failures.
.SS "dkim_align"
.IX Subsection "dkim_align"
If the message passed the \s-1DKIM\s0 alignment test, this indicates whether the alignment was strict or relaxed.
.SS "spf"
.IX Subsection "spf"
Whether the message passed or failed \s-1SPF\s0 alignment. To pass \s-1SPF\s0 alignment, the \s-1RFC5321\s0.MailFrom domain must match the \s-1RFC5322\s0.From field.
.SS "spf_align"
.IX Subsection "spf_align"
If the message passed the \s-1SPF\s0 alignment test, this indicates whether the alignment was strict or relaxed.
.SS "reason"
.IX Subsection "reason"
If the applied policy differs from the sites published policy, the result policy should contain a reason and optionally a comment.
.PP
A \s-1DMARC\s0 result reason has two attributes, type, and comment.
.PP
.Vb 4
\&    reason => {
\&        type =>  \*(Aq\*(Aq,
\&        comment => \*(Aq\*(Aq,
\&    },
.Ve
.PP
\fItype\fR
.IX Subsection "type"
.PP
The following reason types are defined and valid:
.PP
.Vb 6
\&    forwarded
\&    sampled_out
\&    trusted_forwarder
\&    mailing_list
\&    local_policy
\&    other
.Ve
.PP
\fIcomment\fR
.IX Subsection "comment"
.PP
Comment is a free form text field.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Matt Simerson <msimerson@cpan.org>
.IP "\(bu" 4
Davide Migliavacca <shari@cpan.org>
.IP "\(bu" 4
Marc Bradshaw <marc@marcbradshaw.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Matt Simerson.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
