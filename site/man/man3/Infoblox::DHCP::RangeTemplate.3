.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::RangeTemplate 3"
.TH Infoblox::DHCP::RangeTemplate 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::RangeTemplate \- DHCP RangeTemplate object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1DHCP\s0 range template works as a 'cookie cutter' and can be used to create real \s-1DHCP\s0 range object in a quick and consistent way. The \s-1DHCP\s0 range object created from a \s-1DHCP\s0 range template will inherit most properties defined in range template object. So, most of the \s-1DHCP\s0 range template properties are the same as the \s-1DHCP\s0 range object properties.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 1
\& my $dhcp_range_template = Infoblox::DHCP::RangeTemplate\->new(
\&
\&     name                                 => $string,                                                               # Required
\&     number_of_addresses                  => $num,                                                                  # Required
\&     offset                               => $num,                                                                  # Required
\&     bootfile                             => $filename,                                                             # Optional / Default is undefined
\&     bootserver                           => $ipv4addr | $fqdn | undef,                                             # Optional / Default is undefined
\&     comment                              => $string,                                                               # Optional / Default is undefined
\&     ddns_domainname                      => $string | undef,                                                       # Optional / Default is undefined
\&     ddns_generate_hostname               => "true" | "false",                                                      # Optional / Default is undefined
\&     deny_all_clients                     => "true" | "false",                                                      # Optional / Default is "false"
\&     deny_bootp                           => "true" | "false" | undef,                                              # Optional / Default is undefined
\&     enable_ddns                          => "true" | "false",                                                      # Optional / Default is undefined
\&     enable_known_clients_option          => "true" | "false",                                                      # Optional / Default is "false"
\&     enable_unknown_clients_option        => "true" | "false",                                                      # Optional / Default is "false"
\&     exclude                              => [$ExclusionRange1,$ExclusionRange2,...],                               # Optional / Default is empty
\&     extattrs                             => { $string => $extattr, ... },                                          # Optional / Default is undefined
\&     extensible_attributes                => { $string => $string | $num, $string => [ $string | $num, ... ], ... } # Optional / Default is undefined
\&     failover_assoc                       => $string,                                                               # Optional / Default is undefined
\&     filters                              => [$MAC,$RelayAgent,$Option,...],                                        # Optional / Default is undefined
\&     known_clients_option                 => "Allow" | "Deny",                                                      # Optional / Default is undefined
\&     lease_scavenge_time                  => $number,                                                               # Optional / Default is \-1
\&     member                               => $Member,                                                               # Optional / Default is undefined
\&     nextserver                           => $ipv4addr | $fqdn | undef,                                             # Optional / Default is undefined
\&     options                              => [$Option1,$Option2,...],                                               # Optional / Default is empty
\&     logic_filters                        => [ $filter_name | $filter_obj, ...],                                    # Optional / Default is undefined
\&     override_logic_filters               => "true\*(Aq | \*(Aqfalse",                                                      # Optional / Default value is "false"
\&     override_ddns_domainname             => "true" | "false",                                                      # Optional / Default value is "false"
\&     override_lease_scavenge_time         => "true" | "false",                                                      # Optional / Default value is "false"
\&     override_update_dns_on_lease_renewal => "true" | "false",                                                      # Optional / Default value is "false"
\&     pxe_lease_time                       => $num,                                                                  # Optional / Default is undefined
\&     range_high_water_mark                => $num,                                                                  # Optional / Default is 95
\&     range_high_water_mark_reset          => $num,                                                                  # Optional / Default is 95
\&     range_low_water_mark                 => $num,                                                                  # Optional / Default is 0
\&     range_low_water_mark_reset           => $num,                                                                  # Optional / Default is 0
\&     recycle_leases                       => "true" | "false",                                                      # Optional / Default is undefined
\&     server_association_type              => "NONE" | "MEMBER" | "FAILOVER" | "MS_SERVER"                           # Optional / Default is undefined
\&     unknown_clients_option               => "Allow" | "Deny",                                                      # Optional / Default is undefined
\&     update_dns_on_lease_renewal          => "true" | "false",                                                      # Optional / Default value is "false"
\&      );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to be applied to a \s-1DHCP\s0 Range Template object.
.SS "Infoblox::DHCP::NetworkTemplate\->range_templates( )"
.IX Subsection "Infoblox::DHCP::NetworkTemplate->range_templates( )"
.RS 4
Use this function to specify a range template at network template  on the Infoblox appliance. See Infoblox::DHCP::NetworkTemplate\->\fBrange_templates()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Construct a range template object
\& my $dhcp_range_template = Infoblox::DHCP::RangeTemplate\->new(
\&             name                    => "custom_range_template",
\&             number_of_addresses     => "10",
\&             offset                  => "10",
\&     );
\&
\& my $template = Infoblox::DHCP::Template\->new(
\&             name                    => "custom_range_template",
\&     );
\&
\& #Configure range template in network template object
\& my $responce = $network_template\->range_templates([$template]);
.Ve
.RE
.RS 4
.RE
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that can be applied to a \s-1DHCP\s0 range template object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP\s0 range template object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\&     #Construct an object
\&     my $dhcp_range_template = Infoblox::DHCP::RangeTemplate\->new(
\&             name                    => "custom_range_template",
\&             number_of_addresses     => "10",
\&             offset                  => "10",
\&             bootfile                => "bootfile1.com",
\&             bootserver              => "someserver.com",
\&             comment                 => "add range",
\&             ddns_generate_hostname  => "true",
\&             deny_all_clients        => "true",
\&             deny_bootp              => "true",
\&             enable_ddns             => "true",
\&             exclude                 => [$exclusion_range_template],
\&             filters                 => [$filter],
\&             member                  => $memberdhcp,
\&             nextserver              => "3.3.3.3",
\&             options                 => [$option1],
\&             pxe_lease_time          => "3600",
\&             recycle_leases          => "true",
\&     );
\&
\&     # Submit for addition
\&     my $response = $session\->add( $dhcp_range_template );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\&     Apply the following attributes to get a specific DHCP range template object:
\&
\&     name \- Optional. The name of the DHCP range template.
\&     extattrs     \- Optional. A hash reference containing extensible attributes.
\&     extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&     server_association_type \- Optional. The server association type for the range.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 4
\&     my @retrieved_objs = $session\->get(
\&                           object => "Infoblox::DHCP::RangeTemplate",
\&                           name   => "custom_range_template"
\&                           );
\&
\&    my @retrieved_objs = $session\->get(
\&                          object                => "Infoblox::DHCP::RangeTemplate",
\&                          extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\&                         );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\&     Apply the following attributes to search for a specific DHCP Range Template object:
\&
\&     name    \- Optional. The name of the DHCP range template (regular expression).
\&     comment \- Optional. The comment of the DHCP range template (regular expression).
\&     extattrs     \- Optional. A hash reference containing extensible attributes.
\&     extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&     server_association_type \- Optional. The server association type for the range.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\&     my @retrieved_objs = $session\->search(
\&                           object  => "Infoblox::DHCP::RangeTemplate",
\&                           name    => "custom_range_template"
\&               comment => ".*",
\&            );
\&
\&    my @retrieved_objs = $session\->search(
\&                           object                => "Infoblox::DHCP::RangeTemplate",
\&                           extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\&            );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 range template object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     # Use method to modify the comment.
\&     $dhcp_range_template\->comment("this is a modified comment");
\&     # Submit modification
\&     my $response = $session\->modify( $dhcp_range_template );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1DHCP\s0 range template object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific \s-1DHCP\s0 range template object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\&     # Get the objects with the same name
\&     my @retrieved_objs = $session\->get(
\&         object => "Infoblox::DHCP::RangeTemplate",
\&         name   => "custom_range_template"
\&    );
\&
\&     # Find the desired object from the retrieved list.
\&     my $desired_dhcp_range_template = $retrieved_objs[0];
\&     # Submit for removal
\&     my $response = $session\->remove( $desired_dhcp_range_template );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 range template object.
.SS "bootfile( )"
.IX Subsection "bootfile( )"
.RS 4
Use this method to set or retrieve a bootfile name which is the name of the file the client must download.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::RangeTemplate\->\fBbootserver()\fR and Infoblox::DHCP::RangeTemplate\->\fBnextserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The boot file name in string format with a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     #Get bootfile
\&     my $bootfile = $dhcp_range_template\->bootfile();
\&     #Modify bootfile
\&     $dhcp_range_template\->bootfile("bootfile2.com");
\&     #Un\-override bootfile
\&     $dhcp_range_template\->bootfile(undef);
.Ve
.RE
.RS 4
.RE
.SS "bootserver( )"
.IX Subsection "bootserver( )"
.RS 4
Use this method to set or retrieve a bootserver name which is the name of the server where the boot file is stored.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::RangeTemplate\->\fBbootfile()\fR and Infoblox::DHCP::RangeTemplate\->\fBnextserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The boot server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A boot server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     #Get bootserver
\&     my $bootserver = $dhcp_range_template\->bootserver();
\&     #Modify bootserver
\&     $dhcp_range_template\->bootserver("anotherserver.com");
\&     #Un\-override bootserver
\&     $dhcp_range_template\->bootserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment of a \s-1DHCP\s0 range template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get comment
\&     my $comment = $dhcp_range_template\->comment();
\&     #Modify comment
\&     $dhcp_range_template\->comment("Modifying the DHCP range template comment");
.Ve
.RE
.RS 4
.RE
.SS "ddns_domainname( )"
.IX Subsection "ddns_domainname( )"
.RS 4
Use this method to set or retrieve the ddns_domainname value of a \s-1DHCP\s0 Range template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_domainname method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_ddns_domainname attribute to \*(L"false\*(R".
.Sp
Note that when ddns_domainname is set to a defined value and override_dddns_domainname is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); will set override_ddns_domainname to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); will result in override_ddns_domainname=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The dynamic \s-1DNS\s0 domain name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ddns_domainname
\& my $ddns_domainname = $dhcp_range_template\->ddns_domainname();
\& #Modify ddns_domainname
\& $dhcp_range_template\->ddns_domainname("test_domain.com");
.Ve
.RE
.RS 4
.RE
.SS "ddns_generate_hostname( )"
.IX Subsection "ddns_generate_hostname( )"
.RS 4
Use this method to set or retrieve the ddns_generate_hostname flag of a \s-1DHCP\s0 range template.
.Sp
Enable this method to allow only the \s-1DHCP\s0 server to generate a hostname.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the ddns_generate_hostname flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get ddns_generate_hostname
\&     my $ddns_generate_hostname = $dhcp_range_template\->ddns_generate_hostname();
\&     #Modify ddns_generate_hostname
\&     $dhcp_range_template\->ddns_generate_hostname("false");
.Ve
.RE
.RS 4
.RE
.SS "deny_all_clients( )"
.IX Subsection "deny_all_clients( )"
.RS 4
Use this method to set or retrieve the deny_all_clients flag of a \s-1DHCP\s0 range template.
.Sp
Enable this method to deny all lease requests for the \s-1DHCP\s0 range created from template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the deny_all_clients flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is false.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get deny_all_clients
\&     my $deny_all_clients = $dhcp_range_template\->deny_all_clients();
\&     #Modify deny_all_clients
\&     $dhcp_range_template\->deny_all_clients("false");
.Ve
.RE
.RS 4
.RE
.SS "deny_bootp( )"
.IX Subsection "deny_bootp( )"
.RS 4
Use this method to set or retrieve the deny_bootp flag of a \s-1DHCP\s0 range template.
.Sp
Enable this method to deny all \s-1BOOTP\s0 requests for \s-1DHCP\s0 range created from this template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the deny_bootp flag or \*(L"false\*(R" to deactivate/unset it. The default value is false which indicates that this attribute inherit the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get deny_bootp
\&     my $deny_bootp = $dhcp_range_template\->deny_bootp();
\&     #Modify deny_bootp
\&     $dhcp_range_template\->deny_bootp("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_ddns( )"
.IX Subsection "enable_ddns( )"
.RS 4
Use this method to set or retrieve the enable_ddns flag of a \s-1DHCP\s0 range template.
.Sp
Enable this method to allow dynamic \s-1DNS\s0 updates.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_ddns flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get enable_ddns
\&     my $enable_ddns = $dhcp_range_template\->enable_ddns();
\&     #Modify enable_ddns
\&     $dhcp_range_template\->enable_ddns("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_known_clients_option( )"
.IX Subsection "enable_known_clients_option( )"
.RS 4
Use this method to set or retrieve the enable_known_clients_option flag of a \s-1DHCP\s0 range.
.Sp
You must set the enable_known_clients_option flag to true in order to use the known_clients_option attribute.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_known_clients_option flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_known_clients_option
\& my $enable_known_clients_option = $dhcp_range\->enable_known_clients_option();
\& #Modify enable_known_clients_option
\& $dhcp_range\->enable_known_clients_option("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_unknown_clients_option( )"
.IX Subsection "enable_unknown_clients_option( )"
.RS 4
Use this method to set or retrieve the enable_unknown_clients_option flag of a \s-1DHCP\s0 range.
.Sp
You must set the enable_unknown_clients_option flag to true in order to use the unknown_clients_option attribute.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_unknown_clients_option flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_unknown_clients_option
\& my $enable_unknown_clients_option = $dhcp_range\->enable_unknown_clients_option();
\& #Modify enable_unknown_clients_option
\& $dhcp_range\->enable_unknown_clients_option("false");
.Ve
.RE
.RS 4
.RE
.SS "exclude( )"
.IX Subsection "exclude( )"
.RS 4
Use this method to set or retrieve the exclusion range template in the \s-1DHCP\s0 range template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains defined Infoblox::DHCP::ExclusionRangeTemplate objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get exclude
\&     my $ref_exclude = $dhcp_range_template\->exclude();
\&     #Modify exclude
\&     $dhcp_range_template\->exclude([$exl1]); #$exl1 is an Infoblox::DHCP::ExclusionRangeTemplate object
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Range Template object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $dhcp_range_template\->extattrs();
\& #Modify extattrs
\& $dhcp_range_template\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Range Template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $dhcp_range_template\->extensible_attributes();
\& #Modify extensible attributes
\& $dhcp_range_template\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "failover_assoc( )"
.IX Subsection "failover_assoc( )"
.RS 4
Use this method to set or retrieve the failover peer association name of the \s-1DHCP\s0 range template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
If the attribute is set, the server_association_type attribute will also be set to \*(L"\s-1FAILOVER\*(R"\s0 if the name is defined, or to \*(L"\s-1NONE\*(R"\s0 if the member is also undefined.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the failover peer association name in string format. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get failover_assoc
\&     my $failover_assoc = $dhcp_range_template\->failover_assoc();
\&     #Modify failover_assoc
\&     $dhcp_range_template\->failover_assoc("peer2");
.Ve
.RE
.RS 4
.RE
.SS "filters( )"
.IX Subsection "filters( )"
.RS 4
Use this method to set or retrieve the filters of the \s-1DHCP\s0 range template.
.Sp
Filters are used to screen the address assignments if the addresses in the \s-1DHCP\s0 range needs to be assigned to specific hosts.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains defined Infoblox::DHCP::FilterRule::MAC, Infoblox::DHCP::FilterRule::NAC, Infoblox::DHCP::FilterRule::RelayAgent, Infoblox::DHCP::FilterRule::Fingerprint and Infoblox::DHCP::FilterRule::UserClass objects. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get filters
\&     my $ref_filters = $dhcp_range_template\->filters();
\&     #Modify filters
\&     $dhcp_range_template\->filters([$filter1]); #$filter1 is an Infoblox::DHCP::FilterRule::MAC, Infoblox::DHCP::FilterRule::MAC,  Infoblox::DHCP::FilterRule::RelayAgent, Infoblox::DHCP::FilterRule::Fingerprint or Infoblox::DHCP::FilterRule::UserClass object.
.Ve
.RE
.RS 4
.RE
.SS "known_clients_option( )"
.IX Subsection "known_clients_option( )"
.RS 4
Use this method to set or retrieve the known_clients_option option of a \s-1DHCP\s0 range.
.Sp
Set this option to \*(L"Allow\*(R" or \*(L"Deny\*(R" to allow or prevent the allocation of an \s-1IP\s0 address from this pool to any client that has a host declaration.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"Allow\*(R" or \*(L"Deny\*(R" to set the known_clients_option flag value. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get known_clients_option
\& my $known_clients_option = $dhcp_range\->known_clients_option();
\& #Modify known_clients_option
\& $dhcp_range\->known_clients_option("Deny");
.Ve
.RE
.RS 4
.RE
.SS "lease_scavenge_time( )"
.IX Subsection "lease_scavenge_time( )"
.RS 4
Use this method to set or retrieve the lease_scavenge_time value of a \s-1DHCP\s0 Range Template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_lease_scavenge_time method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_lease_scavenge_time attribute to \*(L"false\*(R".
.Sp
Note that when lease_scavenge_time is set to a defined value and override_lease_scavenge_time is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->lease_scavenge_time(604800); \f(CW$object\fR\->override_lease_scavenge_time(\*(L"false\*(R"); will set override_lease_scavenge_time to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_lease_scavenge_time(\*(L"false\*(R"); \f(CW$object\fR\->lease_scavenge_time(604800); will result in override_lease_scavenge_time=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An integer that specifies the period of time, in seconds, that free and backup leases remain in the database before they are automatically deleted. To disable lease scavenging, set the parameter to \-1. The minimum positive value must be greater than 86400 seconds (1 day). The default value of this parameter is \-1, which means that lease scavenging is disabled.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lease_scavenge_time
\& my $lease_scavenge = $dhcp_range_template\->lease_scavenge_time();
\& #Modify lease_scavenge_time
\& $dhcp_range_template\->lease_scavenge_time(30 * 24 * 60 * 60);
.Ve
.RE
.RS 4
.RE
.SS "logic_filters( )"
.IX Subsection "logic_filters( )"
.RS 4
Use this method to set or retrieve all the logic (ordered) filters associated with the \s-1DHCP\s0 Range Template object.
.Sp
Filters are used to screen address assignments in a \s-1DHCP\s0 Range Template if the addresses are to be assigned to specific hosts.
.Sp
Setting this method to a defined value implicitly sets the override_logic_filters method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_logic_filters attribute to \*(L"false\*(R".
.Sp
Note that when logic_filters is set to a defined value and override_dlogic_filters is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->logic_filters($filters); \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); will set override_logic_filters to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); \f(CW$object\fR\->logic_filters($filters); will result in override_logic_filters=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains either the Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC, Infoblox::DHCP::Filter::Option objects or the names of the corresponding filters. The filters in the list must satisfy the following conditions:
.RS 4
.IP "Filter name must be globally unique." 4
.IX Item "Filter name must be globally unique."
.PD 0
.IP "Filters without expressions must be at the end of the list." 4
.IX Item "Filters without expressions must be at the end of the list."
.IP "The filters should not be disabled." 4
.IX Item "The filters should not be disabled."
.RE
.RS 4
.PD
.Sp
The default value of the parameter is undefined.
.RE
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get logic_filters
\& my $ref_logic_filters = $dhcp_range_template\->logic_filters();
\& #Modify logic_filters
\& $dhcp_range_template\->logic_filters(["filter_1","filter_2",$exl1]); #$exl1 is an Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC or Infoblox::DHCP::Filter::Option object.
.Ve
.RE
.RS 4
.RE
.SS "member( )"
.IX Subsection "member( )"
.RS 4
Use this method to set or retrieve the member or Microsoft (r) server of the \s-1DHCP\s0 range template.
.Sp
The member or Microsoft server that serves \s-1DHCP\s0 for this \s-1IP\s0 address range template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
If the attribute is set, the server_association_type attribute will also be set to \*(L"\s-1MEMBER\*(R"\s0 if you set the member to an Infoblox::DHCP::Member object, to \*(L"\s-1MS_SERVER\*(R"\s0 if you set the member to an Infoblox::DHCP::MSServer object, or to \*(L"\s-1NONE\*(R"\s0 if failover_assoc is also empty.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a defined Infoblox::DHCP::Member or Infoblox::DHCP::MSServer object. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get member
\&     my $ref_member = $dhcp_range_template\->member();
\&     #Modify member
\&     $dhcp_range_template\->member($member1); #$member is an Infoblox::DHCP::Member object
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the description of the name of the \s-1DHCP\s0 range template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Name of the fixed address in string format with a maximum of 64 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get name
\&     my $name = $dhcp_range_template\->name();
\&     #Modify name
\&     $dhcp_range_template\->name("custom_range_template");
.Ve
.RE
.RS 4
.RE
.SS "nextserver( )"
.IX Subsection "nextserver( )"
.RS 4
Use this method to set or retrieve the nextserver \s-1IP\s0 address which is the boot file server where the boot file is stored.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::RangeTemplate\->\fBbootfile()\fR and Infoblox::DHCP::RangeTemplate\->\fBbootserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The next server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A next server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     #Get nextserver
\&     my $nextserver = $dhcp_range_template\->nextserver();
\&     #Modify nextserver
\&     $dhcp_range_template\->nextserver("4.4.4.4");
\&     #Un\-override nextserver
\&     $dhcp_range_template\->nextserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "number_of_addresses( )"
.IX Subsection "number_of_addresses( )"
.RS 4
Use this method to set or retrieve the number of addresses in this \s-1DHCP\s0 range template
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The number of addresses in this \s-1DHCP\s0 range template.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get number_of_addresses
\&     my $number_of_addresses = $dhcp_range_template\-> number_of_addresses();
\&     #Modify number_of_addresses
\&     $dhcp_range_template\->number_of_addresses("10");
.Ve
.RE
.RS 4
.RE
.SS "offset( )"
.IX Subsection "offset( )"
.RS 4
Use this method to set or retrieve the address offset of this \s-1DHCP\s0 range template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The address offset of this \s-1DHCP\s0 range template. The offset is calculated from the start address of network template to which the \s-1DHCP\s0 range template is assigned to. For example, if offset is set to 10 and number_of_addresses is set to 100, and network is set to 10.0.0.0/8, then start address of \s-1DHCP\s0 range created from this range template will be 10.0.0.10 and end address will be 10.0.0.100.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get offset
\&     my $offset = $dhcp_range_template\->offset();
\&     #Modify offset
\&     $dhcp_range_template\->offset("10");
.Ve
.RE
.RS 4
.RE
.SS "options( )"
.IX Subsection "options( )"
.RS 4
Use this method to set or retrieve the options of the \s-1DHCP\s0 range template.
.Sp
\&\s-1DHCP\s0 options describe network configuration settings and various services available on the network.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains defined Infoblox::DHCP::Option objects. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get options
\&     my $ref_options = $dhcp_range_template\->options();
\&     #Modify options
\&     $dhcp_range_template\->options([$option12]); #$option12 is an Infoblox::DHCP::Option object
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_domainname( )"
.IX Subsection "override_ddns_domainname( )"
.RS 4
The override_ddns_domainname attribute controls whether the ddns_domainname value in the \s-1DHCP\s0 range template is used, instead of the Grid default.
.Sp
The override_ddns_domainname attribute can be specified explicitly. It is also set implicitly when ddns_domainname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for ddns_domainname. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for ddns_domainname.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_domainname
\&    my $override_ddns_domainname=$dhcp_range_template\->override_ddns_domainname( );
\&    #Modifying override_ddns_domainname
\&    $dhcp_range_template\->override_ddns_domainname("true");
.Ve
.RE
.RS 4
.RE
.SS "override_lease_scavenge_time( )"
.IX Subsection "override_lease_scavenge_time( )"
.RS 4
The override_lease_scavenge_time attribute controls whether the lease_scavenge_time value in the  \s-1DHCP\s0 range template is used, instead of the upper-level default.
.Sp
The override_lease_scavenge_time attribute can be specified explicitly. It is also set implicitly when lease_scavenge_time is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for lease_scavenge_time. Set the parameter to \*(L"false\*(R" to inherit the setting for lease_scavenge_time from the upper level.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_lease_scavenge_time
\&    my $override_lease_scavenge_time=$dhcp_range_template\->override_lease_scavenge_time( );
\&    #Modifying override_lease_scavenge_time
\&    $dhcp_range_template\->override_lease_scavenge_time("true");
.Ve
.RE
.RS 4
.RE
.SS "override_logic_filters( )"
.IX Subsection "override_logic_filters( )"
.RS 4
The override_logic_filters attribute controls whether the logic_filters value in the \s-1DHCP\s0 Range Template is used, instead of the Grid default.
.Sp
The override_logic_filters attribute can be specified explicitly. It is also set implicitly when logic_filters is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for logic_filters. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for logic_filters.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_logic_filters
\& my $override_logic_filters=$dhcp_range_template\->override_logic_filters( );
\& #Modifying override_logic_filters
\& $dhcp_range_template\->override_logic_filters("true");
.Ve
.RE
.RS 4
.RE
.SS "override_update_dns_on_lease_renewal( )"
.IX Subsection "override_update_dns_on_lease_renewal( )"
.RS 4
The override_update_dns_on_lease_renewal attribute controls whether the update_dns_on_lease_renewal value in the \s-1DHCP\s0 range template is used, instead of the Grid default.
.Sp
The override_update_dns_on_lease_renewal attribute can be specified explicitly. It is also set implicitly when update_dns_on_lease_renewal is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for update_dns_on_lease_renewal. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for update_dns_on_lease_renewal.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_update_dns_on_lease_renewal
\&    my $override_update_dns_on_lease_renewal=$dhcp_range_template\->override_update_dns_on_lease_renewal( );
\&    #Modifying override_update_dns_on_lease_renewal
\&    $dhcp_range_template\->override_update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SS "pxe_lease_time( )"
.IX Subsection "pxe_lease_time( )"
.RS 4
Use this method to set or retrieve the \s-1PXE\s0 lease time value of the \s-1DHCP\s0 range template.
.Sp
The Preboot Execution Environment lease time value is used by some hosts to boot remotely from a server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) represents the duration in seconds that the record is cached. Zero indicates that the record should not be cached. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get pxe_lease_time
\&     my $pxe_lease_time = $dhcp_range_template\->pxe_lease_time();
\&     #Modify pxe_lease_time
\&     $dhcp_range_template\->pxe_lease_time("7200");
.Ve
.RE
.RS 4
.RE
.SS "range_high_water_mark( )"
.IX Subsection "range_high_water_mark( )"
.RS 4
Use this method to set or retrieve the range_high_water_mark value. If the percentage of allocated addresses exceeds this value, an \s-1SNMP\s0 trap is sent, unless this is a range served by a Microsoft server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The high watermark value must be greater than the low watermark value. The default value is 95.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get range_high_water_mark
\& my $dhcp_range_template_high_water_mark = $dhcp_range_template\->range_high_water_mark();
\& #Modify range_high_water_mark
\& $dhcp_range_template\->range_high_water_mark(80);
.Ve
.RE
.RS 4
.RE
.SS "range_high_water_mark_reset( )"
.IX Subsection "range_high_water_mark_reset( )"
.RS 4
Use this method to set or retrieve the range_high_water_mark_reset value. If the percentage of allocated addresses drops below this value, a corresponding \s-1SNMP\s0 trap is reset.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The high watermark reset value must be lower than the high watermark value. The default value is 95.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get range_high_water_mark_reset
\& my $dhcp_range_template_high_water_mark_reset = $dhcp_range_template\->range_high_water_mark_reset();
\& #Modify range_high_water_mark_reset
\& $dhcp_range_template\->range_high_water_mark_reset(70);
.Ve
.RE
.RS 4
.RE
.SS "range_low_water_mark( )"
.IX Subsection "range_low_water_mark( )"
.RS 4
Use this method to set or retrieve the range_low_water_mark value. If the percentage of allocated addresses drops below this watermark, an \s-1SNMP\s0 trap is sent, unless this is a range served by a Microsoft server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number that specifies the percentage of allocated addresses. The range is from 1 to 100.  The low watermark value must be lower than the high watermark value. The default low watermark value is 0.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get range_low_water_mark
\& my $dhcp_range_template_low_water_mark = $dhcp_range_template\->range_low_water_mark();
\& #Modify range_low_water_mark
\& $dhcp_range_template\->range_low_water_mark(10);
.Ve
.RE
.RS 4
.RE
.SS "range_low_water_mark_reset( )"
.IX Subsection "range_low_water_mark_reset( )"
.RS 4
Use this method to set or retrieve the range_low_water_mark_reset value. If the percentage of allocated addresses exceeds this value, a corresponding \s-1SNMP\s0 trap is reset.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number that specifies the percentage of allocated addresses. The range is from 1 to 100.  The low watermark reset value must be higher than the low watermark value. The default low watermark reset number is 0.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get range_low_water_mark_reset
\& my $dhcp_range_template_low_water_mark_reset = $dhcp_range_template\->range_low_water_mark_reset();
\& #Modify range_low_water_mark_reset
\& $dhcp_range_template\->range_low_water_mark_reset(10);
.Ve
.RE
.RS 4
.RE
.SS "server_association_type( )"
.IX Subsection "server_association_type( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 range template server association type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The server_association_type attribute can be specified explicitly. It is also set implicitly when member or failover_assoc are set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1NONE\*(R", \*(L"FAILOVER\*(R", \*(L"MS_SERVER\*(R"\s0 and \*(L"\s-1MEMBER\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get server_association_type
\& my $server_association_type = $dhcp_range_template\->server_association_type();
\& #Modify server_association_type
\& $dhcp_range_template\->server_association_type("MEMBER");
.Ve
.RE
.RS 4
.RE
.SS "recycle_leases( )"
.IX Subsection "recycle_leases( )"
.RS 4
Use this method to set or retrieve the recycle_leases flag of the \s-1DHCP\s0 range template.
.Sp
If the flag is enabled, the leases are kept in recycle bin until one week after expiration. When the flag is disabled, the leases are irrecoverably deleted.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the recycle_leases flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get recycle_leases
\&     my $recycle_leases = $dhcp_range_template\->recycle_leases();
\&     #Modify recycle_leases
\&     $dhcp_range_template\->recycle_leases("false");
.Ve
.RE
.RS 4
.RE
.SS "unknown_clients_option( )"
.IX Subsection "unknown_clients_option( )"
.RS 4
Use this method to set or retrieve the unknown_clients_option option of a \s-1DHCP\s0 range.
.Sp
Set this option to \*(L"Allow\*(R" or \*(L"Deny\*(R" to allow or prevent the allocation of an \s-1IP\s0 address from this pool to any client that has no host declaration.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"Allow\*(R" or \*(L"Deny\*(R" to set the unknown_clients_option flag value. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get unknown_clients_option
\& my $unknown_clients_option = $dhcp_range\->unknown_clients_option();
\& #Modify unknown_clients_option
\& $dhcp_range\->unknown_clients_option("Deny");
.Ve
.RE
.RS 4
.RE
.SS "update_dns_on_lease_renewal( )"
.IX Subsection "update_dns_on_lease_renewal( )"
.RS 4
The update_dns_on_lease_renewal attribute controls whether the \s-1DHCP\s0 server updates \s-1DNS\s0 when a \s-1DHCP\s0 lease is renewed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_update_dns_on_lease_renewal method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_update_dns_on_lease_renewal attribute to \*(L"false\*(R".
.Sp
Note that when update_dns_on_lease_renewal is set to a defined value and override_update_dns_on_lease_renewal is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); will set override_update_dns_on_lease_renewal to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); will result in override_update_dns_on_lease_renewal=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the update_dns_on_lease_renewal flag or \*(L"false\*(R" to deactivate/unset it.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get update_dns_on_lease_renewal
\&    my $update_dns_on_lease_renewal=$dhcp_range_template\->update_dns_on_lease_renewal( );
\&    #Modify update_dns_on_lease_renewal
\&    $dhcp_range_template\->update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a \s-1DHCP\s0 range template object such as add, modify, and remove. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 RangeTemplate object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $host_ip = "192.168.1.2";
\& my $session = Infoblox::Session\->new(
\&                master   => $host_ip,      #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create a DHCP Member object
\& my $memberdhcp = Infoblox::DHCP::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => $host_ip
\& );
\& unless($memberdhcp) {
\&        die("Construct member failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Member object created successfully\en";
\&
\& #Create the Mac Filter object
\& my $mac_filter = Infoblox::DHCP::Filter::MAC\->new(
\&     name    => "filter1",
\&     comment => "5 minutes"
\& );
\&
\& unless($mac_filter) {
\&        die("Construct Mac Filter object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Mac Filter object created successfully\en";
\&
\& #Add the Mac Filter object into the Infoblox appliance through a session
\& $session\->add($mac_filter)
\&     or die("Add Mac Filter object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Mac Filter object added to Infoblox appliance successfully\en";
\&
\& #Construct DHCP Mac Filter rule object
\& my $filter = Infoblox::DHCP::FilterRule::MAC\->new(
\&     filter_name => "filter1",
\&     permission  => "grant"
\& );
\& unless($filter){
\&    die("Construct filter object failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\&    }
\&  print "Filter object created successfully\en";
\&
\& #Construct exclusion range template object
\& my $exclusion_range_template = Infoblox::DHCP::ExclusionRangeTemplate\->new(
\&     offset              => "15",
\&     number_of_addresses => "5",
\&     comment             => "Excluded range"
\& );
\& unless($exclusion_range_template){
\&        die("Construct exclusion range template object failed: ",
\&                 Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&  print "Exclusion range template object created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 RangeTemplate object\fR
.PP
.Vb 10
\& my $dhcp_range_template = Infoblox::DHCP::RangeTemplate\->new(
\&         name                    => "custom_range_template",
\&         offset                  => "10",
\&         number_of_addresses     => "10",
\&         bootfile                => "bootfile1.com",
\&         bootserver              => "someserver.com",
\&         comment                 => "add range",
\&         ddns_generate_hostname  => "true",
\&         deny_all_clients        => "true",
\&         deny_bootp              => "true",
\&         enable_ddns             => "true",
\&         exclude                 => [$exclusion_range_template],
\&         filters                 => [$filter],
\&         member                  => $memberdhcp,
\&         nextserver              => "3.3.3.3",
\&         pxe_lease_time          => "3600",
\&         recycle_leases          => "true",
\& );
\& unless($dhcp_range_template) {
\&        die("Construct DHCP RangeTemplate object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP RangeTemplate object created successfully\en";
\&
\& #Add the DHCP RangeTemplate object into the Infoblox appliance through a session
\& $session\->add($dhcp_range_template)
\&     or die("Add DHCP RangeTemplate object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP RangeTemplate object added to the network successfully\en";
.Ve
.PP
\&\fB#Search a \s-1DHCP\s0 RangeTemplate\fR
.PP
.Vb 11
\& #Search a DHCP RangeTemplate through the session
\& my @retrieved_objs = $session\->search(
\&     object     => "Infoblox::DHCP::RangeTemplate",
\&     name       => "custom_range_template",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Search DHCP RangeTemplate failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DHCP RangeTemplate object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DHCP\s0 RangeTemplate\fR
.PP
.Vb 11
\& #Get a DHCP RangeTemplate through the session
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DHCP::RangeTemplate",
\&     name       => "custom_range_template",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP RangeTemplate failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP RangeTemplate object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified DHCP RangeTemplate
\& $object\->comment("modified comment");
\&
\& #Un\-override bootfile
\& $object\->bootfile(undef);
\&
\& #Un\-override bootserver
\& $object\->bootserver(undef);
\&
\& #Un\-override nextserver
\& $object\->nextserver(undef);
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify DHCP Range Template failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP RangeTemplate object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DHCP\s0 RangeTemplate\fR
.PP
.Vb 5
\& #Get a DHCP RangeTemplate through the session
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DHCP::RangeTemplate",
\&     name       => "custom_range_template",
\& );
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP Range Template failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP RangeTemplate object found at least 1 matching entry\en";
\&
\& #submit the object for removal
\& $session\->remove($object)
\&     or die("Remove DHCP Range Template failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP Range Template object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DHCP::NetworkTemplate, Infoblox::DHCP::ExclusionRangeTemplate, Infoblox::DHCP::Template, Infoblox::DHCP::FilterRule::MAC, Infoblox::DHCP::FilterRule::NAC, Infoblox::DHCP::FilterRule::RelayAgent, Infoblox::DHCP::FilterRule::UserClass, Infoblox::DHCP::Member, Infoblox::DHCP::Option
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
