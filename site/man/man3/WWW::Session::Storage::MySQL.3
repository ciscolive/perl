.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::Session::Storage::MySQL 3"
.TH WWW::Session::Storage::MySQL 3 "2014-12-10" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::Session::Storage::MySQL \- MySQL storage for WWW::Session
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MySQL backend for WWW:Session
.SH "VERSION"
.IX Header "VERSION"
Version 0.12
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module is used for storring serialized WWW::Session objects in MySQL
.PP
Usage :
.PP
.Vb 1
\&    use WWW::Session::Storage::MySQL;
\&
\&    my $storage = WWW::Session::Storage::MySQL\->new({ 
\&                                dbh => $dbh,
\&                                table => \*(Aqsessions\*(Aq,
\&                                fields => {
\&                                    sid => \*(Aqsession_id\*(Aq,
\&                                    expires => \*(Aqexpires\*(Aq,
\&                                    data => \*(Aqdata\*(Aq
\&                                }
\&                });
\&    ...
\&    
\&    $storage\->save($session_id,$expires,$serialized_data);
\&    
\&    my $serialized_data = $storage\->retrive($session_id);
.Ve
.PP
The \*(L"fields\*(R" hasref contains the mapping of session internal data to the column names from MySQL. 
The keys are the session fields (\*(L"sid\*(R",\*(L"expires\*(R" and \*(L"data\*(R") and must all be present.
.PP
The MySQL types of the columns should be :
.IP "\(bu" 4
sid => varchar(32)
.IP "\(bu" 4
expires => \s-1DATETIME\s0 or \s-1TIMESTAMP\s0
.IP "\(bu" 4
data => text
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "new"
.IX Subsection "new"
Creates a new WWW::Session::Storage::MySQL object
.PP
This method accepts only one argument, a hashref that must contain the fallowing data:
.IP "\(bu" 4
dbh Database handle
.IP "\(bu" 4
table The name of the table where the sessions will be stored
.IP "\(bu" 4
fields A hash ref containing the falowing keys
.RS 4
.IP "\(bu" 8
sid The same of the database field which will store the session id
.IP "\(bu" 8
expires  The same of the database field which will store the expiration time
.IP "\(bu" 8
data The name of the field where the session data will be stored
.RE
.RS 4
.RE
.SS "save"
.IX Subsection "save"
Stores the given information into the database
.SS "retrieve"
.IX Subsection "retrieve"
Retrieves the informations for a session, verifies that it's not expired and returns
the string containing the serialized data
.SS "delete"
.IX Subsection "delete"
Completely removes the session data for the given session id
.SH "Private methods"
.IX Header "Private methods"
.SS "_determine_expires_type"
.IX Subsection "_determine_expires_type"
Tries to determine if the expires field is UnixTimestamp or DateTime
.SS "_reset_last_cleanup"
.IX Subsection "_reset_last_cleanup"
Resets the last \s-1DB\s0 cleanup timer, forcing all expired sessions to be removed when the next session is retrieved
.SH "AUTHOR"
.IX Header "AUTHOR"
Gligan Calin Horea, \f(CW\*(C`<gliganh at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-www\-session at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=WWW\-Session>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc WWW::Session::Storage::MySQL
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=WWW\-Session>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/WWW\-Session>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/WWW\-Session>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/WWW\-Session/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2012 Gligan Calin Horea.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
