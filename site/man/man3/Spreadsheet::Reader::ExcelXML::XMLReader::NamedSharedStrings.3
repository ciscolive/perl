.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::ExcelXML::XMLReader::NamedSharedStrings 3"
.TH Spreadsheet::Reader::ExcelXML::XMLReader::NamedSharedStrings 3 "2017-04-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::ExcelXML::XMLReader::NamedSharedStrings \- Name based sharedStrings Reader
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&        #!/usr/bin/env perl
\&        use Data::Dumper;
\&        use MooseX::ShortCut::BuildInstance qw( build_instance );
\&        use Spreadsheet::Reader::ExcelXML::XMLReader;
\&        use Spreadsheet::Reader::ExcelXML::XMLReader::NamedSharedStrings;
\&        use     Spreadsheet::Reader::ExcelXML::SharedStrings;
\&
\&        my $file_instance = build_instance(
\&            package => \*(AqSharedStringsInstance\*(Aq,
\&                workbook_inst => Spreadsheet::Reader::ExcelXML::Workbook\->new,
\&                superclasses =>[
\&                        \*(AqSpreadsheet::Reader::ExcelXML::XMLReader\*(Aq
\&                ],
\&                add_roles_in_sequence =>[
\&                        \*(AqSpreadsheet::Reader::ExcelXML::XMLReader::NamedSharedStrings\*(Aq,
\&                ],
\&        );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation is written to explain ways to use this module when writing your
own excel parser or extending this package.  To use the general package for excel
parsing out of the box please review the documentation for Workbooks
, Worksheets
, and
Cells.
.PP
This role is written to extend Spreadsheet::Reader::ExcelXML::XMLReader.
It adds functionality to read name based sharedStrings files.  It presents this
functionality in compliance with the top level interface
\&.  This \s-1POD\s0 only describes the
functionality incrementally provided by this module.  For an overview of
sharedStrings.xml reading see Spreadsheet::Reader::ExcelXML::SharedStrings
.SH "WARNING"
.IX Header "WARNING"
If your Excel 2003 xml based file does not include a SharedStrings portion
then ignore this warning since it will not matter.  I don't have an example of an
Excel 2003 xml file that has SharedStrings content.  I'm not even sure that
any generators build flat SpreadsheetML files with a SharedStrings subsection.
As a consequence this role is just a placeholder to allow the rest of the
package to work on Excel 2003 xml files.  If you are actually parsing an xml
file that contains a SharedStrings portion then your parse will die with the
request to submit an issue on the github repo
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>.  Please
include the file that is failing.  I will need an example in order to
complete this section of the parser.
.SS "Requires"
.IX Subsection "Requires"
These are the methods required by this role and their default provider.  All
methods are imported straight across with no re-naming.
.Sp
.RS 4
\&\*(L"set_error\*(R" in Spreadsheet::Reader::ExcelXML::Error
.Sp
\&\*(L"good_load\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"close_the_file\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"advance_element_position\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"start_the_file_over\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"parse_element\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"squash_node\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"current_named_node\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"get_group_return_type\*(R" in Spreadsheet::Reader::ExcelXML::Workbook
.RE
.SS "Methods"
.IX Subsection "Methods"
These are the primary ways to use this class.  For additional SharedStrings options
see the Attributes section.
.PP
\fIget_shared_string( \f(CI$name\fI)\fR
.IX Subsection "get_shared_string( $name)"
.Sp
.RS 4
\&\fBDefinition:\fR This is the primary method that needs an example for completion.
.Sp
\&\fBAccepts:\fR \f(CW$name\fR = the node name of the shared string to be returned
.Sp
\&\fBReturns:\fR dies with a message to submit the file to my github repo
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.PP
\fIload_unique_bits\fR
.IX Subsection "load_unique_bits"
.Sp
.RS 4
\&\fBDefinition:\fR When the xml file first loads this is available to pull customized data.
It mostly pulls metadata and stores it in hidden attributes for use later.  If all goes
according to plan it sets \*(L"good_load\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader to 1.
.Sp
\&\fBAccepts:\fR Nothing
.Sp
\&\fBReturns:\fR Nothing
.RE
.SS "Attributes"
.IX Subsection "Attributes"
Data passed to new when creating an instance of this class. For
modification of this(ese) attribute(s) see the listed 'attribute
methods'.  For more information on attributes see
Moose::Manual::Attributes.  The easiest way to modify this(ese)
attribute(s) is when a classinstance is created and before it is
passed to the workbook or parser.
.PP
\fIcache_positions\fR
.IX Subsection "cache_positions"
.Sp
.RS 4
\&\fBDefinition:\fR Especially for sheets with lots of stored text the
parser can slow way down when accessing each postion.  This is
because the text is not always stored sequentially and the reader
is a \s-1JIT\s0 linear parser.  To go back it must restart and index
through each position till it gets to the right place.  This is
especially true for excel sheets that have experienced any
significant level of manual intervention prior to being read.
This attribute turns (default) on caching for shared strings so
the parser only has to read through the shared strings once.  When
the read is complete all the way to the end it will also release
the shared strings file in order to free up some space.
(a small win in exchange for the space taken by the cache).  The
trade off here is that all intermediate shared strings are
fully read
before reading the target string.  This means early reads will be
slower.  For sheets that only have numbers stored or at least have
very few strings this will likely not be a initial hit (or speed
improvement).  In order to minimize the physical size of the cache,
if there is only a text string stored in the shared strings position
then only the string will be stored (not as a value to a raw_text
hash key).  It will then reconstitue into a hashref when requested.
.Sp
\&\fBDefault:\fR 1 = caching is on
.Sp
\&\fBRange:\fR 1|0
.Sp
\&\fBAttribute required:\fR yes
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
none \- (will be autoset by \*(L"cache_positions\*(R" in Spreadsheet::Reader::ExcelXML)
.RE
.RE
.RS 4
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::Reader::ExcelXML/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing yet
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.RS 4
Jed Lund
.Sp
jandrew@cpan.org
.RE
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Spreadsheet::Reader::ExcelXML \- the package
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::Read \- generic Spreadsheet reader
.Sp
Spreadsheet::ParseExcel \- Excel binary version 2003 and earlier (.xls files)
.Sp
Spreadsheet::XLSX \- Excel version 2007 and later
.Sp
Spreadsheet::ParseXLSX \- Excel version 2007 and later
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
