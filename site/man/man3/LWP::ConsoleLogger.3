.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LWP::ConsoleLogger 3"
.TH LWP::ConsoleLogger 3 "2019-06-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
LWP::ConsoleLogger \- LWP tracing and debugging
.SH "VERSION"
.IX Header "VERSION"
version 0.000042
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The simplest way to get started is by adding LWP::ConsoleLogger::Everywhere
to your code and then just watching your output.
.PP
.Vb 1
\&    use LWP::ConsoleLogger::Everywhere ();
.Ve
.PP
If you need more control, look at LWP::ConsoleLogger::Easy.
.PP
.Vb 2
\&    use LWP::ConsoleLogger::Easy qw( debug_ua );
\&    use WWW::Mechanize;
\&
\&    my $mech           = WWW::Mechanize\->new;   # or LWP::UserAgent\->new() etc
\&    my $console_logger = debug_ua( $mech );
\&    $mech\->get( \*(Aqhttps://metacpan.org\*(Aq );
\&
\&    # now watch the console for debugging output
\&    # turn off header dumps
\&    $console_logger\->dump_headers( 0 );
\&
\&    $mech\->get( $some_other_url );
.Ve
.PP
To get down to the lowest level, use LWP::ConsoleLogger directly.
.PP
.Vb 7
\&    my $ua = LWP::UserAgent\->new( cookie_jar => {} );
\&    my $console_logger = LWP::ConsoleLogger\->new(
\&        dump_content       => 1,
\&        dump_text          => 1,
\&        content_pre_filter => sub {
\&            my $content      = shift;
\&            my $content_type = shift;
\&
\&            # mangle content here
\&            # ...
\&
\&            return $content;
\&        },
\&    );
\&
\&    $ua\->default_header(
\&        \*(AqAccept\-Encoding\*(Aq => scalar HTTP::Message::decodable() );
\&
\&    $ua\->add_handler( \*(Aqresponse_done\*(Aq,
\&        sub { $console_logger\->response_callback( @_ ) } );
\&    $ua\->add_handler( \*(Aqrequest_send\*(Aq,
\&        sub { $console_logger\->request_callback( @_ ) } );
\&
\&    # now watch debugging output to your screen
\&    $ua\->get( \*(Aqhttp://nytimes.com/\*(Aq );
.Ve
.PP
Sample output might look like this.
.PP
.Vb 1
\&    GET http://www.nytimes.com/2014/04/24/technology/fcc\-new\-net\-neutrality\-rules.html
\&
\&    GET params:
\&    .\-\-\-\-\-+\-\-\-\-\-\-\-.
\&    | Key | Value |
\&    +\-\-\-\-\-+\-\-\-\-\-\-\-+
\&    | _r  | 1     |
\&    | hp  |       |
\&    \*(Aq\-\-\-\-\-+\-\-\-\-\-\-\-\*(Aq
\&
\&    .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-.
\&    | Request Header  | Value                          |
\&    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&    | Accept\-Encoding | gzip                           |
\&    | Cookie2         | $Version="1"                   |
\&    | Referer         | http://www.nytimes.com?foo=bar |
\&    | User\-Agent      | WWW\-Mechanize/1.73             |
\&    \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
\&
\&    ==> 200 OK
\&
\&    Title: The New York Times \- Breaking News, World News & Multimedia
\&
\&    .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-.
\&    | Response Header          | Value                         |
\&    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&    | Accept\-Ranges            | bytes                         |
\&    | Age                      | 176                           |
\&    | Cache\-Control            | no\-cache                      |
\&    | Channels                 | NytNow                        |
\&    | Client\-Date              | Fri, 30 May 2014 22:37:42 GMT |
\&    | Client\-Peer              | 170.149.172.130:80            |
\&    | Client\-Response\-Num      | 1                             |
\&    | Client\-Transfer\-Encoding | chunked                       |
\&    | Connection               | keep\-alive                    |
\&    | Content\-Encoding         | gzip                          |
\&    | Content\-Type             | text/html; charset=utf\-8      |
\&    | Date                     | Fri, 30 May 2014 22:37:41 GMT |
\&    | NtCoent\-Length           | 65951                         |
\&    | Server                   | Apache                        |
\&    | Via                      | 1.1 varnish                   |
\&    | X\-Cache                  | HIT                           |
\&    | X\-Varnish                | 1142859770 1142854917         |
\&    \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
\&
\&    .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-.
\&    | Text                                                     |
\&    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&    | F.C.C., in a Shift, Backs Fast Lanes for Web Traffic...  |
\&    \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1BETA BETA BETA.\s0  This is currently an experiment.  Things could change.  Please
adjust accordingly.
.PP
It can be hard (or at least tedious) to debug mechanize scripts.  LWP::Debug is
deprecated.  It suggests you write your own debugging handlers, set up a proxy
or install Wireshark.  Those are all workable solutions, but this module exists
to save you some of that work.  The guts of this module are stolen from
Plack::Middleware::DebugLogging, which in turn stole most of its internals
from Catalyst.  If you're new to LWP::ConsoleLogger, I suggest getting
started with the LWP::ConsoleLogger::Easy wrapper.  This will get you up and
running in minutes.  If you need to tweak the settings that
LWP::ConsoleLogger::Easy chooses for you (or if you just want to be fancy),
please read on.
.PP
Since this is a debugging library, I've left as much mutable state as possible,
so that you can easily toggle output on and off and otherwise adjust how you
deal with the output.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SS "\fBnew()\fP"
.IX Subsection "new()"
The following arguments can be passed to \fBnew()\fR, although none are required.
They can also be called as methods on an instantiated object.  I'll list them
here and discuss them in detail below.
.IP "\(bu" 4
\&\f(CW\*(C`dump_content => 0|1\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`dump_cookies => 0|1\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`dump_headers => 0|1\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`dump_params => 0|1\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`dump_status => 0|1\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`dump_text => 0|1\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`dump_title => 0|1\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`dump_text => 0|1\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`dump_uri => 0|1\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`content_pre_filter => sub { ... }\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`headers_to_redact => [\*(AqAuthentication\*(Aq, \*(AqFoo\*(Aq]\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`params_to_redact => [\*(Aqtoken\*(Aq, \*(Aqpassword\*(Aq]\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`text_pre_filter => sub { ... }\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`html_restrict => HTML::Restrict\->new( ... )\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`logger => Log::Dispatch\->new( ... )\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`pretty => 0|1\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`term_width => $integer\*(C'\fR
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "dump_content( 0|1 )"
.IX Subsection "dump_content( 0|1 )"
Boolean value. If true, the actual content of your response (\s-1HTML, JSON,\s0 etc)
will be dumped to your screen.  Defaults to false.
.SS "dump_cookies( 0|1 )"
.IX Subsection "dump_cookies( 0|1 )"
Boolean value. If true, the content of your cookies will be dumped to your
screen.  Defaults to false.
.SS "dump_headers( 0|1 )"
.IX Subsection "dump_headers( 0|1 )"
Boolean value. If true, both request and response headers will be dumped to
your screen.  Defaults to true.
.PP
Headers are dumped in alphabetical order.
.SS "dump_params( 0|1 )"
.IX Subsection "dump_params( 0|1 )"
Boolean value. If true, both \s-1GET\s0 and \s-1POST\s0 params will be dumped to your screen.
Defaults to true.
.PP
Params are dumped in alphabetical order.
.SS "dump_status( 0|1 )"
.IX Subsection "dump_status( 0|1 )"
Boolean value. If true, dumps the \s-1HTTP\s0 response code for each page being
visited.  Defaults to true.
.SS "dump_text( 0|1 )"
.IX Subsection "dump_text( 0|1 )"
Boolean value. If true, dumps the text of your page after both the
content_pre_filter and text_pre_filters have been applied.  Defaults to true.
.SS "dump_title( 0|1 )"
.IX Subsection "dump_title( 0|1 )"
Boolean value. If true, dumps the titles of \s-1HTML\s0 pages if your UserAgent has
a \f(CW\*(C`title\*(C'\fR method and if it returns something useful. Defaults to true.
.SS "dump_uri( 0|1 )"
.IX Subsection "dump_uri( 0|1 )"
Boolean value. If true, dumps the \s-1URI\s0 of each page being visited. Defaults to
true.
.SS "pretty ( 0|1 )"
.IX Subsection "pretty ( 0|1 )"
Boolean value. If disabled, request headers, response headers, content and text
sections will be dumped without using tables. Handy for copy/pasting \s-1JSON\s0 etc
for faking responses later. Defaults to true.
.SS "content_pre_filter( sub { ... } )"
.IX Subsection "content_pre_filter( sub { ... } )"
Subroutine reference.  This allows you to manipulate content before it is
dumped.  A common use case might be stripping headers and footers away from
\&\s-1HTML\s0 content to make it easier to detect changes in the body of the page.
.PP
.Vb 11
\&    $easy_logger\->content_pre_filter(
\&    sub {
\&        my $content      = shift;
\&        my $content_type = shift; # the value of the Content\-Type header
\&        if (   $content_type =~ m{html}i
\&            && $content =~ m{<!\-\-\escontent\es\-\->(.*)<!\-\-\esfooter}msx ) {
\&            return $1;
\&        }
\&        return $content;
\&    }
\&    );
.Ve
.PP
Try to make sure that your content mangling doesn't return broken \s-1HTML\s0 as that
may not play well with HTML::Restrict.
.SS "request_callback"
.IX Subsection "request_callback"
Use this handler to set up console logging on your requests.
.PP
.Vb 5
\&    my $ua = LWP::UserAgent\->new;
\&    $ua\->add_handler(
\&        \*(Aqrequest_send\*(Aq,
\&        sub { $console_logger\->request_callback(@_) }
\&    );
.Ve
.PP
This is done for you by default if you set up your logging via
LWP::ConsoleLogger::Easy.
.SS "response_callback"
.IX Subsection "response_callback"
Use this handler to set up console logging on your responses.
.PP
.Vb 5
\&    my $ua = LWP::UserAgent\->new;
\&    $ua\->add_handler(
\&        \*(Aqresponse_done\*(Aq,
\&        sub { $console_logger\->response_callback(@_) }
\&    );
.Ve
.PP
This is done for you by default if you set up your logging via
LWP::ConsoleLogger::Easy.
.SS "text_pre_filter( sub { ... } )"
.IX Subsection "text_pre_filter( sub { ... } )"
Subroutine reference.  This allows you to manipulate text before it is dumped.
A common use case might be stripping away duplicate whitespace and/or newlines
in order to improve formatting.  Keep in mind that the \f(CW\*(C`content_pre_filter\*(C'\fR
will have been applied to the content which is passed to the text_pre_filter.
The idea is that you can strip away an \s-1HTML\s0 you don't care about in the
content_pre_filter phase and then process the remainder of the content in the
text_pre_filter.
.PP
.Vb 5
\&    $easy_logger\->text_pre_filter(
\&    sub {
\&        my $content      = shift;
\&        my $content_type = shift; # the value of the Content\-Type header
\&        my $base_url     = shift;
\&
\&        # do something with the content
\&        # ...
\&
\&        return ( $content, $new_content_type );
\&    }
\&    );
.Ve
.PP
If your \f(CW\*(C`text_pre_filter()\*(C'\fR converts from \s-1HTML\s0 to plain text, be sure to
return the new content type (text/plain) when you exit the sub.  If you do not
do this, \s-1HTML\s0 formatting will then be applied to your plain text as is
explained below.
.PP
If this is \s-1HTML\s0 content, HTML::Restrict will be applied after the
text_pre_filter has been run.  LWP::ConsoleLogger will then strip away some
whitespace and newlines from processed \s-1HTML\s0 in its own opinionated way, in
order to present you with more readable text.
.SS "html_restrict( HTML::Restrict\->new( ... ) )"
.IX Subsection "html_restrict( HTML::Restrict->new( ... ) )"
If the content_type indicates \s-1HTML\s0 then HTML::Restrict will be used to strip
tags from your content in the text rendering process.  You may pass your own
HTML::Restrict object, if you like.  This would be helpful in situations where
you still do want to have some tags in your text.
.SS "logger( Log::Dispatch\->new( ... ) )"
.IX Subsection "logger( Log::Dispatch->new( ... ) )"
By default all data will be dumped to your console (as the name of this module
implies) using Log::Dispatch.  However, you may use your own Log::Dispatch
module in order to facilitate logging to files or any other output which
Log::Dispatch supports.
.ie n .SS "term_width( $integer )"
.el .SS "term_width( \f(CW$integer\fP )"
.IX Subsection "term_width( $integer )"
By default this module will try to find the maximum width of your terminal and
use all available space when displaying tabular data.  You may use this
parameter to constrain the tables to an arbitrary width.
.SH "CAVEATS"
.IX Header "CAVEATS"
Aside from the \s-1BETA\s0 warnings, I should say that I've written this to suit my
needs and there are a lot of things I haven't considered.  For example, I'm
mostly assuming that the content will be text, \s-1HTML, JSON\s0 or \s-1XML.\s0
.PP
The test suite is not very robust either.  If you'd like to contribute to this
module and you can't find an appropriate test, do add something to the example
folder (either a new script or alter an existing one), so that I can see what
your patch does.
.SH "AUTHOR"
.IX Header "AUTHOR"
Olaf Alders <olaf@wundercounter.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2014\-2019 by MaxMind, Inc.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
