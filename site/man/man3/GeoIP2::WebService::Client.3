.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "GeoIP2::WebService::Client 3"
.TH GeoIP2::WebService::Client 3 "2019-06-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GeoIP2::WebService::Client \- Perl API for the GeoIP2 Precision web services
.SH "VERSION"
.IX Header "VERSION"
version 2.006002
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use 5.008;
\&
\&  use GeoIP2::WebService::Client;
\&
\&  # This creates a Client object that can be reused across requests.
\&  # Replace "42" with your account id and "abcdef123456" with your license
\&  # key.
\&  my $client = GeoIP2::WebService::Client\->new(
\&      account_id  => 42,
\&      license_key => \*(Aqabcdef123456\*(Aq,
\&  );
\&
\&  # Replace "insights" with the method corresponding to the web service
\&  # that you are using, e.g., "country", "city".
\&  my $insights = $client\->insights( ip => \*(Aq24.24.24.24\*(Aq );
\&
\&  my $country = $insights\->country();
\&  print $country\->iso_code(), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides a client \s-1API\s0 for all the GeoIP2 Precision web service end
points. The end points are Country, City, and Insights. Each end point returns
a different set of data about an \s-1IP\s0 address, with Country returning the least
data and Insights the most.
.PP
Each web service end point is represented by a different model class, and
these model classes in turn contain multiple Record classes. The record
classes have attributes which contain data about the \s-1IP\s0 address.
.PP
If the web service does not return a particular piece of data for an \s-1IP\s0
address, the associated attribute is not populated.
.PP
The web service may not return any information for an entire record, in which
case all of the attributes for that record class will be empty.
.SH "SSL"
.IX Header "SSL"
Requests to the GeoIP2 web service are always made with \s-1SSL.\s0
.SH "USAGE"
.IX Header "USAGE"
The basic \s-1API\s0 for this class is the same for all of the web service end
points. First you create a web service object with your MaxMind \f(CW\*(C`account_id\*(C'\fR and
\&\f(CW\*(C`license_key\*(C'\fR, then you call the method corresponding to a specific end
point, passing it the \s-1IP\s0 address you want to look up.
.PP
If the request succeeds, the method call will return a model class for the end
point you called. This model in turn contains multiple record classes, each of
which represents part of the data returned by the web service.
.PP
If the request fails, the client class throws an exception.
.SH "IP GEOLOCATION USAGE"
.IX Header "IP GEOLOCATION USAGE"
\&\s-1IP\s0 geolocation is inherently imprecise. Locations are often near the center of
the population. Any location provided by a GeoIP2 web service should not be
used to identify a particular address or household.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
This class has a single constructor method:
.SS "GeoIP2::WebService::Client\->\fBnew()\fP"
.IX Subsection "GeoIP2::WebService::Client->new()"
This method creates a new client object. It accepts the following arguments:
.IP "\(bu" 4
account_id
.Sp
Your MaxMind Account \s-1ID.\s0 Go to <https://www.maxmind.com/en/my_license_key> to see
your MaxMind Account \s-1ID\s0 and license key.
.Sp
\&\fBNote\fR: This replaces a previous \f(CW\*(C`user_id\*(C'\fR parameter, which is still
supported for backwards-compatibility, but should no longer be used for new
code.
.Sp
This argument is required.
.IP "\(bu" 4
license_key
.Sp
Your MaxMind license key. Go to <https://www.maxmind.com/en/my_license_key> to
see your MaxMind Account \s-1ID\s0 and license key.
.Sp
This argument is required.
.IP "\(bu" 4
locales
.Sp
This is an array reference where each value is a string indicating a locale.
This argument will be passed onto record classes to use when their \f(CW\*(C`name()\*(C'\fR
methods are called.
.Sp
The order of the locales is significant. When a record class has multiple
names (country, city, etc.), its \f(CW\*(C`name()\*(C'\fR method will look at each element of
this array ref and return the first locale for which it has a name.
.Sp
Note that the only locale which is always present in the GeoIP2 data in \*(L"en\*(R".
If you do not include this locale, the \f(CW\*(C`name()\*(C'\fR method may end up returning
\&\f(CW\*(C`undef\*(C'\fR even when the record in question has an English name.
.Sp
Currently, the valid list of locale codes is:
.RS 4
.IP "\(bu" 8
de \- German
.IP "\(bu" 8
en \- English
.Sp
English names may still include accented characters if that is the accepted
spelling in English. In other words, English does not mean \s-1ASCII.\s0
.IP "\(bu" 8
es \- Spanish
.IP "\(bu" 8
fr \- French
.IP "\(bu" 8
ja \- Japanese
.IP "\(bu" 8
pt-BR \- Brazilian Portuguese
.IP "\(bu" 8
ru \- Russian
.IP "\(bu" 8
zh-CN \- simplified Chinese
.RE
.RS 4
.Sp
Passing any other locale code will result in an error.
.Sp
The default value for this argument is \f(CW\*(C`[\*(Aqen\*(Aq]\*(C'\fR.
.RE
.IP "\(bu" 4
host
.Sp
The hostname to make a request against. This defaults to
\&\*(L"geoip.maxmind.com\*(R". In most cases, you should not need to set this
explicitly.
.IP "\(bu" 4
ua
.Sp
This argument allows you to your own LWP::UserAgent object. This is useful
if you cannot use a vanilla \s-1LWP\s0 object, for example if you need to set proxy
parameters.
.Sp
This can actually be any object which supports \f(CW\*(C`agent()\*(C'\fR and \f(CW\*(C`request()\*(C'\fR
methods. This method will be called with an HTTP::Request object as its
only argument. This method must return an HTTP::Response object.
.SH "REQUEST METHODS"
.IX Header "REQUEST METHODS"
All of the request methods accept a single argument:
.IP "\(bu" 4
ip
.Sp
This must be a valid IPv4 or IPv6 address, or the string \*(L"me\*(R". This is the
address that you want to look up using the GeoIP2 web service.
.Sp
If you pass the string \*(L"me\*(R" then the web service returns data on the client
system's \s-1IP\s0 address. Note that this is the \s-1IP\s0 address that the web service
sees. If you are using a proxy, the web service will not see the client
system's actual \s-1IP\s0 address.
.ie n .SS "$client\->\fBcountry()\fP"
.el .SS "\f(CW$client\fP\->\fBcountry()\fP"
.IX Subsection "$client->country()"
This method calls the GeoIP2 Precision: Country end point. It returns a
GeoIP2::Model::Country object.
.ie n .SS "$client\->\fBcity()\fP"
.el .SS "\f(CW$client\fP\->\fBcity()\fP"
.IX Subsection "$client->city()"
This method calls the GeoIP2 Precision: City end point. It returns a
GeoIP2::Model::City object.
.ie n .SS "$client\->\fBinsights()\fP"
.el .SS "\f(CW$client\fP\->\fBinsights()\fP"
.IX Subsection "$client->insights()"
This method calls the GeoIP2 Precision: Insights end point. It returns a
GeoIP2::Model::Insights object.
.SH "User-Agent HEADER"
.IX Header "User-Agent HEADER"
This module will set the User-Agent header to include the package name and
version of this module (or a subclass if you use one), the package name and
version of the user agent object, and the version of Perl.
.PP
This is set in order to help us support individual users, as well to determine
support policies for dependencies and Perl itself.
.SH "EXCEPTIONS"
.IX Header "EXCEPTIONS"
For details on the possible errors returned by the web service itself, see
<http://dev.maxmind.com/geoip/geoip2/web\-services> for the GeoIP2 web service
docs.
.PP
If the web service returns an explicit error document, this is thrown as a
GeoIP2::Error::WebService exception object. If some other sort of error
occurs, this is thrown as a GeoIP2::Error::HTTP object. The difference is
that the web service error includes an error message and error code delivered
by the web service. The latter is thrown when some sort of unanticipated error
occurs, such as the web service returning a 500 or an invalid error document.
.PP
If the web service returns any status code besides 200, 4xx, or 5xx, this also
becomes a GeoIP2::Error::HTTP object.
.PP
Finally, if the web service returns a 200 but the body is invalid, the client
throws a GeoIP2::Error::Generic object.
.PP
All of these error classes have an \f(CW\*(C`$error\->message()\*(C'\fR method and
overload stringification to show that message. This means that if you don't
explicitly catch errors they will ultimately be sent to \f(CW\*(C`STDERR\*(C'\fR with some
sort of (hopefully) useful error message.
.SH "WHAT DATA IS RETURNED?"
.IX Header "WHAT DATA IS RETURNED?"
While many of the end points return the same basic records, the attributes
which can be populated vary between end points. In addition, while an end
point may offer a particular piece of data, MaxMind does not always have every
piece of data for any given \s-1IP\s0 address.
.PP
Because of these factors, it is possible for any end point to return a record
where some or all of the attributes are unpopulated.
.PP
See <http://dev.maxmind.com/geoip/geoip2/web\-services> for details on what data each end
point \fImay\fR return.
.PP
The only piece of data which is always returned is the \f(CW\*(C`ip_address\*(C'\fR key in
the \f(CW\*(C`GeoIP2::Record::Traits\*(C'\fR record.
.PP
Every record class attribute has a corresponding predicate method so you can
check to see if the attribute is set.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through <https://github.com/maxmind/GeoIP2\-perl/issues>.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Dave Rolsky <drolsky@maxmind.com>
.IP "\(bu" 4
Greg Oschwald <goschwald@maxmind.com>
.IP "\(bu" 4
Mark Fowler <mfowler@maxmind.com>
.IP "\(bu" 4
Olaf Alders <oalders@maxmind.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 \- 2019 by MaxMind, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
