.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PAR::Filter::Crypto 3"
.TH PAR::Filter::Crypto 3 "2018-07-31" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PAR::Filter::Crypto \- Encrypt Perl files in PAR archives
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # Create a PAR archive containing an encrypted Perl script:
\&    $ pp \-f Crypto \-M Filter::Crypto::Decrypt \-o hello hello.pl
\&
\&    # The same, but with included modules encrypted as well:
\&    $ pp \-f Crypto \-F Crypto \-M Filter::Crypto::Decrypt \-o hello hello.pl
\&
\&    # Encrypt Perl source code in $code:
\&    use PAR::Filter::Crypto;
\&    PAR::Filter::Crypto\->apply(\e$code);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a PAR::Filter sub-class for producing \s-1PAR\s0 archives
containing encrypted Perl files.  The PAR::Filter class itself is part of the
\&\s-1PAR\s0 distribution, and is clearly a prerequisite for using this sub-class.
.PP
The usual means of producing a \s-1PAR\s0 archive is using the \fBpp\fR script, which also
comes with the \s-1PAR\s0 distribution.  That script's \fB\-f\fR and \fB\-F\fR command-line
options can be used to specify a \*(L"filter\*(R" through which to pass the Perl files
being put into the \s-1PAR\s0 archive.  Specifying this sub-class as the filter (i.e.
"\fB\-f Crypto\fR\*(L" for scripts and/or \*(R"\fB\-F Crypto\fR" for modules) means that the
Perl files will be encrypted using the
Filter::Crypto::CryptFile module.  The resulting
encrypted files are what will be placed in the \s-1PAR\s0 archive.
.PP
Note that the encrypted script requires the
Filter::Crypto::Decrypt module in order to decrypt
itself when it is run.  The original Perl script will not have specified any
such dependency, so \fBpp\fR will not automatically include that module in the \s-1PAR\s0
archive for you.  Therefore, you must use the \fB\-M\fR option to force that module
to be included.  Also note that if you use the \fB\-F\fR option to encrypt modules
as well then the filtering will automatically skip the
Filter::Crypto::Decrypt module itself for obvious
reasons.  A typical \fBpp\fR invocation is thus something like:
.PP
.Vb 1
\&    $ pp \-f Crypto \-F Crypto \-M Filter::Crypto::Decrypt \-o hello hello.pl
.Ve
.PP
(Version 0.75 of the Module::ScanDeps module, used by \fBpp\fR
to scan for dependencies that need including in the \s-1PAR\s0 archive, is known to
have problems finding shared library files for modules specified by \fBpp\fR's
\&\fB\-M\fR option (as illustrated above).  If you find that the shared library file
for Filter::Crypto::Decrypt is missing from your \s-1PAR\s0 archive then you need to
upgrade Module::ScanDeps to version 0.76 or higher.)
.PP
Of course, you must not include the Filter::Crypto::CryptFile module as well,
otherwise people to whom you distribute your \s-1PAR\s0 archive will have the means to
easily decrypt the encrypted Perl script within it!
.PP
Also, note that the script is encrypted by reading its entire contents into
memory, encrypting it in memory, and then writing it out to disk.  This should
be safe for most purposes given that Perl scripts are typically not very large,
but other methods should be considered instead if this is likely to cause
out-of-memory errors due to the size of the scripts, e.g. if the scripts have
very large \f(CW\*(C`_\|_DATA_\|_\*(C'\fR sections.
.SS "Methods"
.IX Subsection "Methods"
.ie n .IP """apply($ref)""" 4
.el .IP "\f(CWapply($ref)\fR" 4
.IX Item "apply($ref)"
Class method.  Encrypts the Perl source code referred to by \f(CW$ref\fR, and replaces
the code referred to by \f(CW$ref\fR with the encrypted code.  Thus, the code in $$ref
gets encrypted \*(L"in-place\*(R".
.Sp
Returns 1 on success, or \f(CW\*(C`croak()\*(C'\fRs on failure (since the usual caller,
\&\fBPAR::Filter::apply()\fR, does not bother checking the return value (as of
PAR::Filter version 0.02, at least)).
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.SS "Warnings and Error Messages"
.IX Subsection "Warnings and Error Messages"
This module may produce the following diagnostic messages.  They are classified
as follows (a la perldiag):
.PP
.Vb 3
\&    (W) A warning (optional).
\&    (F) A fatal error (trappable).
\&    (I) An internal error that you should never see (trappable).
.Ve
.ie n .IP "Can't close temporary filehandle after encryption: %s" 4
.el .IP "Can't close temporary filehandle after encryption: \f(CW%s\fR" 4
.IX Item "Can't close temporary filehandle after encryption: %s"
(W) The temporary file used to perform the encryption could not be closed after
use.  The system error message corresponding to the standard C library \f(CW\*(C`errno\*(C'\fR
variable is also given.
.ie n .IP "Can't rewind temporary filehandle before encryption: %s" 4
.el .IP "Can't rewind temporary filehandle before encryption: \f(CW%s\fR" 4
.IX Item "Can't rewind temporary filehandle before encryption: %s"
(F) The temporary file used to perform the encryption could not be rewound
before encrypting the source that was just written to it.  The system error
message corresponding to the standard C library \f(CW\*(C`errno\*(C'\fR variable is also given.
.ie n .IP "Can't rewind temporary filehandle after encryption: %s" 4
.el .IP "Can't rewind temporary filehandle after encryption: \f(CW%s\fR" 4
.IX Item "Can't rewind temporary filehandle after encryption: %s"
(F) The temporary file used to perform the encryption could not be rewound after
encrypting the source code that was written to it.  The system error message
corresponding to the standard C library \f(CW\*(C`errno\*(C'\fR variable is also given.
.ie n .IP "\fBcrypt_file()\fR failed: %s" 4
.el .IP "\fBcrypt_file()\fR failed: \f(CW%s\fR" 4
.IX Item "crypt_file() failed: %s"
(F) The \f(CW\*(C`crypt_file()\*(C'\fR function from the Filter::Crypto::CryptFile module that
is used to perform the encryption failed.  The last error message from the
Filter::Crypto::CryptFile module is also given.
.IP "Detected Module::ScanDeps version 0.75, which may not work correctly with PAR::Filter::Crypto" 4
.IX Item "Detected Module::ScanDeps version 0.75, which may not work correctly with PAR::Filter::Crypto"
(W) Your current installation of the Module::ScanDeps module, used by \fBpp\fR to
scan for dependencies that need including in the \s-1PAR\s0 archive, was found to be
version 0.75, which is known to have problems finding shared library files for
modules specified by \fBpp\fR's \fB\-M\fR option.  If you are running \fBpp\fR with the
\&\fB\-M\fR option and find that the shared library file for Filter::Crypto::Decrypt
is missing from your \s-1PAR\s0 archive then you need to upgrade Module::ScanDeps to
version 0.76 or higher.
.SH "EXPORTS"
.IX Header "EXPORTS"
\&\fINone\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
PAR::Filter;
.PP
Filter::Crypto.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
The \f(CW\*(C`apply()\*(C'\fR method is based on that in the PAR::Filter::Bytecode module in
the PAR::Packer distribution (version 1.017), written by Audrey Tang.
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve Hay <shay@cpan.org <mailto:shay@cpan.org>>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2004\-2008, 2012, 2014 Steve Hay.  All rights reserved.
.SH "LICENCE"
.IX Header "LICENCE"
This module is free software; you can redistribute it and/or modify it under the
same terms as Perl itself, i.e. under the terms of either the \s-1GNU\s0 General Public
License or the Artistic License, as specified in the \fI\s-1LICENCE\s0\fR file.
.SH "VERSION"
.IX Header "VERSION"
Version 2.08
.SH "DATE"
.IX Header "DATE"
31 Jul 2018
.SH "HISTORY"
.IX Header "HISTORY"
See the \fIChanges\fR file.
