.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::mysql::PubSub 3"
.TH Mojo::mysql::PubSub 3 "2020-09-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::mysql::PubSub \- Publish/Subscribe
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::mysql::PubSub;
\&
\&  my $pubsub = Mojo::mysql::PubSub\->new(mysql => $mysql);
\&  my $cb = $pubsub\->listen(foo => sub {
\&    my ($pubsub, $payload) = @_;
\&    say "Received: $payload";
\&  });
\&  $pubsub\->notify(foo => \*(Aqbar\*(Aq);
\&  $pubsub\->unlisten(foo => $cb);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::mysql::PubSub is implementation of the publish/subscribe pattern used
by Mojo::mysql. The implementation should be considered an \s-1EXPERIMENT\s0 and
might be removed without warning!
.PP
Although MySQL does not have \f(CW\*(C`SUBSCRIBE/NOTIFY\*(C'\fR like PostgreSQL and other RDBMs,
this module implements similar feature.
.PP
Single Database connection waits for notification by executing \f(CW\*(C`SLEEP\*(C'\fR on server.
\&\f(CW\*(C`connection_id\*(C'\fR and subscribed channels in stored in \f(CW\*(C`mojo_pubsub_subscribe\*(C'\fR table.
Inserting new row in \f(CW\*(C`mojo_pubsub_notify\*(C'\fR table triggers \f(CW\*(C`KILL QUERY\*(C'\fR for
all connections waiting for notification.
.PP
\&\f(CW\*(C`PROCESS\*(C'\fR privilege is needed for MySQL user to see other users processes.
\&\f(CW\*(C`SUPER\*(C'\fR privilege is needed to be able to execute \f(CW\*(C`KILL QUERY\*(C'\fR for statements
started by other users. 
\&\f(CW\*(C`SUPER\*(C'\fR privilege may be needed to be able to define trigger.
.PP
If your applications use this module using different MySQL users it is important
the migration script to be executed by user having \f(CW\*(C`SUPER\*(C'\fR privilege on the database.
.SH "EVENTS"
.IX Header "EVENTS"
Mojo::mysql::PubSub inherits all events from Mojo::EventEmitter and can
emit the following new ones.
.SS "reconnect"
.IX Subsection "reconnect"
.Vb 4
\&  $pubsub\->on(reconnect => sub {
\&    my ($pubsub, $db) = @_;
\&    ...
\&  });
.Ve
.PP
Emitted after switching to a new database connection for sending and receiving
notifications.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::mysql::PubSub implements the following attributes.
.SS "mysql"
.IX Subsection "mysql"
.Vb 2
\&  my $mysql = $pubsub\->mysql;
\&  $pubsub   = $pubsub\->mysql(Mojo::mysql\->new);
.Ve
.PP
Mojo::mysql object this publish/subscribe container belongs to.
.SH "METHODS"
.IX Header "METHODS"
Mojo::mysql::PubSub inherits all methods from Mojo::EventEmitter and
implements the following new ones.
.SS "listen"
.IX Subsection "listen"
.Vb 1
\&  my $cb = $pubsub\->listen(foo => sub {...});
.Ve
.PP
Subscribe to a channel, there is no limit on how many subscribers a channel can
have.
.PP
.Vb 9
\&  # Subscribe to the same channel twice
\&  $pubsub\->listen(foo => sub {
\&    my ($pubsub, $payload) = @_;
\&    say "One: $payload";
\&  });
\&  $pubsub\->listen(foo => sub {
\&    my ($pubsub, $payload) = @_;
\&    say "Two: $payload";
\&  });
.Ve
.SS "notify"
.IX Subsection "notify"
.Vb 2
\&  $pubsub = $pubsub\->notify(\*(Aqfoo\*(Aq);
\&  $pubsub = $pubsub\->notify(foo => \*(Aqbar\*(Aq);
.Ve
.PP
Notify a channel.
.SS "unlisten"
.IX Subsection "unlisten"
.Vb 1
\&  $pubsub = $pubsub\->unlisten(foo => $cb);
.Ve
.PP
Unsubscribe from a channel.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
You can set the \f(CW\*(C`MOJO_PUBSUB_DEBUG\*(C'\fR environment variable to get some
advanced diagnostics information printed to \f(CW\*(C`STDERR\*(C'\fR.
.PP
.Vb 1
\&  MOJO_PUBSUB_DEBUG=1
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojo::mysql, Mojolicious::Guides, <http://mojolicio.us>.
