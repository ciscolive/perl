.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::NortelStack 3"
.TH SNMP::Info::NortelStack 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::NortelStack \- SNMP Interface to the Avaya/Nortel S5\-AGENT\-MIB
and S5\-CHASSIS\-MIB
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Miller
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\& # Let SNMP::Info determine the correct subclass for you.
\& my $stack = new SNMP::Info(
\&                    AutoSpecify => 1,
\&                    Debug       => 1,
\&                    # These arguments are passed directly on to SNMP::Session
\&                    DestHost    => \*(Aqmyswitch\*(Aq,
\&                    Community   => \*(Aqpublic\*(Aq,
\&                    Version     => 2
\&                    )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class = $stack\->class();
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SNMP::Info::NortelStack is a subclass of SNMP::Info that provides an interface
to \fIS5\-AGENT\-MIB\fR and \fIS5\-CHASSIS\-MIB\fR.  These MIBs are used across the
Avaya/Nortel Stackable Ethernet Switches (BayStack), as well as, older Nortel
devices such as the Centillion family of \s-1ATM\s0 switches.
.PP
Use or create in a subclass of SNMP::Info.  Do not use directly.
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
None.
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fIS5\-AGENT\-MIB\fR" 4
.IX Item "S5-AGENT-MIB"
.PD 0
.IP "\fIS5\-CHASSIS\-MIB\fR" 4
.IX Item "S5-CHASSIS-MIB"
.IP "\fIS5\-ROOT\-MIB\fR and \fIS5\-TCS\-MIB\fR are required by the other MIBs." 4
.IX Item "S5-ROOT-MIB and S5-TCS-MIB are required by the other MIBs."
.PD
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar values from \s-1SNMP\s0
.ie n .IP "$stack\->\fBos_ver()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBos_ver()\fR" 4
.IX Item "$stack->os_ver()"
Returns the software version extracted from (\f(CW\*(C`s5AgInfoVer\*(C'\fR)
.ie n .IP "$stack\->\fBos_bin()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBos_bin()\fR" 4
.IX Item "$stack->os_bin()"
Returns the firmware version extracted from (\f(CW\*(C`s5AgInfoVer\*(C'\fR)
.ie n .IP "$stack\->\fBserial()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBserial()\fR" 4
.IX Item "$stack->serial()"
Returns serial number of the chassis
.Sp
(\f(CW\*(C`s5ChasSerNum\*(C'\fR)
.ie n .IP "$stack\->\fBns_ag_ver()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_ag_ver()\fR" 4
.IX Item "$stack->ns_ag_ver()"
Returns the version of the agent in the form
\&'major.minor.maintenance[letters]'.
.Sp
(\f(CW\*(C`s5AgInfoVer\*(C'\fR)
.ie n .IP "$stack\->\fBns_op_mode()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_op_mode()\fR" 4
.IX Item "$stack->ns_op_mode()"
Returns the stacking mode.
.Sp
(\f(CW\*(C`s5AgSysCurrentOperationalMode\*(C'\fR)
.ie n .IP "$stack\->\fBtftp_action()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBtftp_action()\fR" 4
.IX Item "$stack->tftp_action()"
This object is used to download or upload a config file or an image file.
.Sp
(\f(CW\*(C`s5AgInfoFileAction\*(C'\fR)
.ie n .IP "$stack\->\fBtftp_result()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBtftp_result()\fR" 4
.IX Item "$stack->tftp_result()"
Returns the status of the latest action as shown by \f(CW$stack\fR\->\fBtftp_action()\fR.
.Sp
(\f(CW\*(C`s5AgInfoFileStatus\*(C'\fR)
.ie n .IP "$stack\->\fBns_auto_pvid()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_auto_pvid()\fR" 4
.IX Item "$stack->ns_auto_pvid()"
Returns the value indicating whether adding a port as a member of a \s-1VLAN\s0
automatically results in its \s-1PVID\s0 being set to be the same as that \s-1VLAN ID.\s0
.Sp
(\f(CW\*(C`s5AgSysAutoPvid\*(C'\fR)
.ie n .IP "$stack\->\fBtftp_file()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBtftp_file()\fR" 4
.IX Item "$stack->tftp_file()"
Name of the binary configuration file that will be downloaded/uploaded when
the \f(CW$stack\fR\->\fBtftp_action()\fR object is set.
.Sp
(\f(CW\*(C`s5AgSysBinaryConfigFilename\*(C'\fR)
.ie n .IP "$stack\->\fBtftp_host()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBtftp_host()\fR" 4
.IX Item "$stack->tftp_host()"
The \s-1IP\s0 address of the \s-1TFTP\s0 server for all \s-1TFTP\s0 operations.
.Sp
(\f(CW\*(C`s5AgSysTftpServerAddress\*(C'\fR)
.ie n .IP "$stack\->\fBvlan()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBvlan()\fR" 4
.IX Item "$stack->vlan()"
Returns the \s-1VLAN ID\s0 of the system's management \s-1VLAN.\s0
.Sp
(\f(CW\*(C`s5AgSysManagementVlanId\*(C'\fR)
.ie n .IP "$stack\->\fBch_ser()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBch_ser()\fR" 4
.IX Item "$stack->ch_ser()"
Returns the serial number of the chassis.
.Sp
(\f(CW\*(C`s5ChasSerNum\*(C'\fR)
.ie n .IP "$stack\->\fBns_cfg_chg()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_cfg_chg()\fR" 4
.IX Item "$stack->ns_cfg_chg()"
Returns the total number of configuration changes (other than attachment
changes, or physical additions or removals) in the chassis that have been
detected since cold/warm start.
.Sp
(\f(CW\*(C`s5ChasGblConfChngs\*(C'\fR)
.ie n .IP "$stack\->\fBns_cfg_time()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_cfg_time()\fR" 4
.IX Item "$stack->ns_cfg_time()"
Returns the value of \f(CW\*(C`sysUpTime\*(C'\fR when the last configuration change (other
than attachment changes, or physical additions or removals) in the chassis
was detected.
.Sp
(\f(CW\*(C`s5ChasGblConfLstChng\*(C'\fR)
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.ie n .SS "Agent Interface Table (""s5AgMyIfTable"")"
.el .SS "Agent Interface Table (\f(CWs5AgMyIfTable\fP)"
.IX Subsection "Agent Interface Table (s5AgMyIfTable)"
.ie n .IP "$stack\->\fBi_cfg_file()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBi_cfg_file()\fR" 4
.IX Item "$stack->i_cfg_file()"
Returns reference to hash.  Key: Table entry, Value: Name of the file
.Sp
(\f(CW\*(C`s5AgMyIfCfgFname\*(C'\fR)
.ie n .IP "$stack\->\fBi_cfg_host()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBi_cfg_host()\fR" 4
.IX Item "$stack->i_cfg_host()"
Returns reference to hash.  Key: Table entry, Value: \s-1IP\s0 address of the load
server
.Sp
(\f(CW\*(C`s5AgMyIfLdSvrAddr\*(C'\fR)
.ie n .SS "Chassis Components Table (""s5ChasComTable"")"
.el .SS "Chassis Components Table (\f(CWs5ChasComTable\fP)"
.IX Subsection "Chassis Components Table (s5ChasComTable)"
.ie n .IP "$stack\->\fBns_com_grp_idx()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_com_grp_idx()\fR" 4
.IX Item "$stack->ns_com_grp_idx()"
Returns reference to hash.  Key: Table entry, Value: Index of the chassis
level group which contains this component.
.Sp
(\f(CW\*(C`s5ChasComGrpIndx\*(C'\fR)
.ie n .IP "$stack\->\fBns_com_idx()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_com_idx()\fR" 4
.IX Item "$stack->ns_com_idx()"
Returns reference to hash.  Key: Table entry, Value: Index of the component
in the group.  For modules in the 'board' group, this is the slot number.
.Sp
(\f(CW\*(C`s5ChasComIndx\*(C'\fR)
.ie n .IP "$stack\->\fBns_com_sub_idx()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_com_sub_idx()\fR" 4
.IX Item "$stack->ns_com_sub_idx()"
Returns reference to hash.  Key: Table entry, Value: Index of the
sub-component in the component.
.Sp
(\f(CW\*(C`s5ChasComSubIndx\*(C'\fR)
.ie n .IP "$stack\->\fBns_com_type()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_com_type()\fR" 4
.IX Item "$stack->ns_com_type()"
Returns reference to hash.  Key: Table entry, Value: Type
.Sp
(\f(CW\*(C`s5ChasComType\*(C'\fR)
.ie n .IP "$stack\->\fBns_com_descr()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_com_descr()\fR" 4
.IX Item "$stack->ns_com_descr()"
Returns reference to hash.  Key: Table entry, Value: Description
.Sp
(\f(CW\*(C`s5ChasComDescr\*(C'\fR)
.ie n .IP "$stack\->\fBns_com_ver()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_com_ver()\fR" 4
.IX Item "$stack->ns_com_ver()"
Returns reference to hash.  Key: Table entry, Value: Version
.Sp
(\f(CW\*(C`s5ChasComVer\*(C'\fR)
.ie n .IP "$stack\->\fBns_com_serial()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_com_serial()\fR" 4
.IX Item "$stack->ns_com_serial()"
Returns reference to hash.  Key: Table entry, Value: Serial Number
.Sp
(\f(CW\*(C`s5ChasComSerNum\*(C'\fR)
.ie n .SS "Storage Area Table (""s5ChasStoreTable"")"
.el .SS "Storage Area Table (\f(CWs5ChasStoreTable\fP)"
.IX Subsection "Storage Area Table (s5ChasStoreTable)"
.ie n .IP "$stack\->\fBns_store_grp_idx()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_store_grp_idx()\fR" 4
.IX Item "$stack->ns_store_grp_idx()"
Returns reference to hash.  Key: Table entry, Value: Index of the chassis
level group.
.Sp
(\f(CW\*(C`s5ChasStoreGrpIndx\*(C'\fR)
.ie n .IP "$stack\->\fBns_store_idx()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_store_idx()\fR" 4
.IX Item "$stack->ns_store_idx()"
Returns reference to hash.  Key: Table entry, Value: Index of the group.
.Sp
(\f(CW\*(C`s5ChasStoreComIndx\*(C'\fR)
.ie n .IP "$stack\->\fBns_store_sub_idx()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_store_sub_idx()\fR" 4
.IX Item "$stack->ns_store_sub_idx()"
Returns reference to hash.  Key: Table entry, Value: Index of the
sub-component.
.Sp
(\f(CW\*(C`s5ChasStoreSubIndx\*(C'\fR)
.ie n .IP "$stack\->\fBns_store_idx()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_store_idx()\fR" 4
.IX Item "$stack->ns_store_idx()"
Returns reference to hash.  Key: Table entry, Value: Index of the storage
area.
.Sp
(\f(CW\*(C`s5ChasStoreIndx\*(C'\fR)
.ie n .IP "$stack\->\fBns_store_type()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_store_type()\fR" 4
.IX Item "$stack->ns_store_type()"
Returns reference to hash.  Key: Table entry, Value: Type
.Sp
(\f(CW\*(C`s5ChasStoreType\*(C'\fR)
.ie n .IP "$stack\->\fBns_store_size()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_store_size()\fR" 4
.IX Item "$stack->ns_store_size()"
Returns reference to hash.  Key: Table entry, Value: Size
.Sp
(\f(CW\*(C`s5ChasStoreCurSize\*(C'\fR)
.ie n .IP "$stack\->\fBns_store_ver()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_store_ver()\fR" 4
.IX Item "$stack->ns_store_ver()"
Returns reference to hash.  Key: Table entry, Value: Version
.Sp
(\f(CW\*(C`s5ChasStoreCntntVer\*(C'\fR)
.SS "Pseudo \fIENTITY-MIB\fP information"
.IX Subsection "Pseudo ENTITY-MIB information"
These methods emulate \fIENTITY-MIB\fR Physical Table methods using
\&\fIS5\-CHASSIS\-MIB\fR.
.ie n .IP "$stack\->\fBns_e_index()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_e_index()\fR" 4
.IX Item "$stack->ns_e_index()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Integer, Indices are combined
into a six digit integer, each index is two digits padded with leading zero if
required.
.ie n .IP "$stack\->\fBns_e_class()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_e_class()\fR" 4
.IX Item "$stack->ns_e_class()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: General hardware type
(\f(CW\*(C`s5ChasGrpDescr\*(C'\fR).
.Sp
Group is stripped from the string.  Values may be Supervisory Module,
Back Plane, Board, Power Supply, Sensor, Fan, Clock, Unit.
.ie n .IP "$stack\->\fBns_e_descr()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_e_descr()\fR" 4
.IX Item "$stack->ns_e_descr()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Human friendly name
.Sp
(\f(CW\*(C`s5ChasComDescr\*(C'\fR)
.ie n .IP "$stack\->\fBns_e_name()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_e_name()\fR" 4
.IX Item "$stack->ns_e_name()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Human friendly name
.ie n .IP "$stack\->\fBns_e_hwver()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_e_hwver()\fR" 4
.IX Item "$stack->ns_e_hwver()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Hardware version
.Sp
(\f(CW\*(C`s5ChasComVer\*(C'\fR)
.ie n .IP "$stack\->\fBns_e_vendor()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_e_vendor()\fR" 4
.IX Item "$stack->ns_e_vendor()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: avaya
.ie n .IP "$stack\->\fBns_e_serial()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_e_serial()\fR" 4
.IX Item "$stack->ns_e_serial()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Serial number
.Sp
(\f(CW\*(C`s5ChasComSerNum\*(C'\fR)
.ie n .IP "$stack\->\fBns_e_pos()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_e_pos()\fR" 4
.IX Item "$stack->ns_e_pos()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: The relative position among all
entities sharing the same parent.
.Sp
(\f(CW\*(C`s5ChasComSubIndx\*(C'\fR)
.ie n .IP "$stack\->\fBns_e_type()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_e_type()\fR" 4
.IX Item "$stack->ns_e_type()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Type of component/sub\-component
as defined under \f(CW\*(C`s5ChasComTypeVal\*(C'\fR in \fIS5\-REG\-MIB\fR.
.ie n .IP "$stack\->\fBns_e_fwver()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_e_fwver()\fR" 4
.IX Item "$stack->ns_e_fwver()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Firmware revision.
.Sp
Value of \f(CW\*(C`s5ChasStoreCntntVer\*(C'\fR for entries with rom, boot, or firmware in
\&\f(CW\*(C`s5ChasStoreType\*(C'\fR.
.ie n .IP "$stack\->\fBns_e_swver()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_e_swver()\fR" 4
.IX Item "$stack->ns_e_swver()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: Software revision.
.Sp
Value of \f(CW\*(C`s5ChasStoreCntntVer\*(C'\fR for entries with \*(L"flash\*(R" in
\&\f(CW\*(C`s5ChasStoreType\*(C'\fR.
.ie n .IP "$stack\->\fBns_e_parent()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBns_e_parent()\fR" 4
.IX Item "$stack->ns_e_parent()"
Returns reference to hash.  Key: \s-1IID,\s0 Value: The value of \fBns_e_index()\fR for the
entity which 'contains' this entity.  A value of zero indicates	this entity
is not contained in any other entity.
.SH "Data Munging Callback Subroutines"
.IX Header "Data Munging Callback Subroutines"
.ie n .IP "$stack\->\fBmunge_ns_grp_type()\fR" 4
.el .IP "\f(CW$stack\fR\->\fBmunge_ns_grp_type()\fR" 4
.IX Item "$stack->munge_ns_grp_type()"
Munges \f(CW\*(C`s5ChasGrpType\*(C'\fR into an \f(CW\*(C`ENTITY\-MIB PhysicalClass\*(C'\fR equivalent.
