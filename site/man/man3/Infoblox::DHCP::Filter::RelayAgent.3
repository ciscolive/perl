.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::Filter::RelayAgent 3"
.TH Infoblox::DHCP::Filter::RelayAgent 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::Filter::RelayAgent \- DHCP relay agent filter object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Infoblox appliance can screen address requests through relay agent filters (\s-1DHCP\s0 option 82) that assist the agents
in forwarding address assignments across the proper circuit. When a relay agent receives the \s-1DHCPDISCOVER\s0
message, it can add one or two agent IDs in the \s-1DHCP\s0 option 82 suboption fields to the message. If the agent \s-1ID\s0
strings match those defined in a relay agent filter applied to a \s-1DHCP\s0 address range, the Infoblox appliance either assigns
addresses from that range or denies the request (based on previously configured parameters; that is, the Grant lease
and Deny lease parameters).
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\&  my $relayagentFilter = Infoblox::DHCP::Filter::RelayAgent\->new(
\&                 name                        => $string | $ipv4addr,                                                    # Required
\&                 comment                     => $string,                                                                # Optional / Default is empty
\&                 circuit_id_name             => $string,                                                                # Optional / Default is empty
\&                 extattrs                    => { $string => $extattr, ... },                                           # Optional / Default is undefined
\&                 extensible_attributes       => { $string => $string | $num, $string => [ $string | $num, ... ], ... }, # Optional / Default is undefined
\&                 remote_id_name              => $string,                                                                # Optional / Default is empty
\&                 is_circuit_id               => $string,                                                                # Optional / Default is empty
\&                 is_remote_id                => $string,                                                                # Optional / Default is empty
\&                 is_circuit_id_substring     => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                                       # Optional / Default is \*(Aqfalse\*(Aq
\&                 circuit_id_substring_offset => $uint,                                                                  # Optional / Default is undefined
\&                 circuit_id_substring_length => $uint,                                                                  # Optional / Default is undefined
\&                 is_remote_id_substring      => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                                       # Optional / Default is \*(Aqfalse\*(Aq
\&                 remote_id_substring_offset  => $uint,                                                                  # Optional / Default is undefined
\&                 remote_id_substring_length  => $uint,                                                                  # Optional / Default is undefined
\&                );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that can be applied to a \s-1DHCP\s0 relay agent filter object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP\s0 relay agent filter object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Construct an object
\& my  $relayagentFilter = Infoblox::DHCP::Filter::RelayAgent\->new(
\&        name             => "relayagent_filter",
\&        circuit_id_name  => "circuit",
\&        remote_id_name   => "remote"
\&         );
\&
\& # Submit for adding a relay agent filter
\& my $response = $session\->add( $relayagentFilter );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching \s-1DHCP\s0 relay agent filter objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP relay agent filter object:
\&
\&  name \- Required. A relay agent filter name in string format or in ipv4address format.
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my  @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::Filter::RelayAgent" ,
\&     name   => "relayagent_filter",
\& );
\&
\& # get all objects with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object                => "Infoblox::DHCP::Filter::RelayAgent",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 relay agent filter object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify circuit id name method.
\& $object\->circuit_id_name("diff_Circuit");
\& # Submit modification
\& my $response = $session\->modify( $object );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a  \s-1DHCP\s0 relay agent filter object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Get the object under the same name
\& my @retrieved_objs = $session\->get(
\&            object  => "Infoblox::DHCP::Filter::RelayAgent" ,
\&            "name"  => "relayagent_filter",
\&        );
\&
\& # find the desired object from retrieved list.
\& my $desired_obj = $retrieved_objs[0];
\&
\& # Submit for removal
\& my $response = $session\->remove( $desired_obj);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for a \s-1DHCP\s0 relay agent filter object in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DHCP Network object:
\&
\&  name \- Required. A relay agent filter name in string format (regular expression).
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&  comment \- Optional . A comment in string format (regular expression).
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all DHCP relayagent objects
\&      my @retrieved_objs = $session\->search(
\&                object   => "Infoblox::DHCP::Filter::RelayAgent",
\&                name     => \*(Aqrelayagent\e..*\*(Aq,
\&                );
\&
\& # search all DHCP relay agent associations with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DHCP::Filter::RelayAgent",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 relay agent filter object.
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of a \s-1DHCP\s0 relay agent filter object. The name can be an \s-1IP\s0 address or name of the router acting as relay agent.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the name in string format or in ipv4addr format. An IPv4 address is a 32\-bit number in dotted decimal notation.
It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
The default value for this field is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get name
\& my $name = $relayagentFilter\->name()
\& # Modify name
\& $relayagentFilter\->name("relay_filter");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment of a \s-1DHCP\s0 relay agent filter object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $relayagentFilter\->comment();
\& #Modify comment
\& $relayagentFilter\->comment("Modified DHCP relay agent filter object comment");
.Ve
.RE
.RS 4
.RE
.SS "circuit_id_name( )"
.IX Subsection "circuit_id_name( )"
.RS 4
Use this method to set or retrieve a circuit_id_name of a \s-1DHCP\s0 relay agent filter object. This filter identifies the circuit
between the remote host and the relay agent. For example, the identifier can be the ingress interface number of the circuit
access unit, perhaps concatenated with the unit \s-1ID\s0 number and slot number. Also, the circuit \s-1ID\s0 can be an \s-1ATM\s0 virtual
circuit \s-1ID\s0 or cable data virtual circuit \s-1ID.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify circuit id name in string format.
example:
Text String: 001122334455
Binary String: \ex00\ex11\ex22\ex33\ex44\ex55. The default value for this field is empty.
.Sp
To reset this value, set it to an empty string together with the is_circuit_id flag (anything except \*(L"Matches_Value\*(R").
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Get circuit_id_name
\& my $circuit_id_name = $relayagentFilter\->circuit_id_name();
\& # Modify circuit_id_name
\& $relayagentFilter\->circuit_id_name("001122334455");
\& # Set is_circuit_id to "Not_Set"
\& $relayagentFilter\->is_circuit_id("Not_Set");
\& # Set circuit_id_name to empty string
\& $relayagentFilter\->circuit_id_name("");
.Ve
.RE
.RS 4
.RE
.SS "circuit_id_substring_length( )"
.IX Subsection "circuit_id_substring_length( )"
.RS 4
Use this method to set or retrive the circuit \s-1ID\s0 substring length.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get circuit_id_substring_length value
\& my $circuit_id_substring_length = $relayagentfilter\->circuit_id_substring_length();
\&
\& #modify circuit_id_substring_length value
\& $relayagentfilter\->circuit_id_substring_length(10);
.Ve
.RE
.RS 4
.RE
.SS "circuit_id_substring_offset( )"
.IX Subsection "circuit_id_substring_offset( )"
.RS 4
Use this method to set or retrive the circuit \s-1ID\s0 substring offset.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get circuit_id_substring_offset value
\& my $circuit_id_substring_offset = $relayagentfilter\->circuit_id_substring_offset();
\&
\& #modify circuit_id_substring_offset value
\& $relayagentfilter\->circuit_id_substring_offset(10);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 relay agent filter object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $relayagentFilter\->extattrs();
\& #Modify extattrs
\& $relayagentFilter\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 relay agent filter object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $relayagentFilter\->extensible_attributes();
\& #Modify extensible attributes
\& $relayagentFilter\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "remote_id_name( )"
.IX Subsection "remote_id_name( )"
.RS 4
Use this method to set or retrieve a remote \s-1ID\s0 name attribute of a relay agent filter object. This filter identifies the remote host. The remote \s-1ID\s0 name can represent many different things such as the caller \s-1ID\s0 telephone number for a dial-up connection, a user name for logging in to the \s-1ISP,\s0 a modem \s-1ID,\s0 etc. When the remote \s-1ID\s0 name is defined on the relay agent, the \s-1DHCP\s0 server will have a trusted relationship to identify the remote host. The remote \s-1ID\s0 name is considered as a trusted identifier.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify remote_id_name in string format.
example:
Text String: 001122334455
Binary String: \ex00\ex11\ex22\ex33\ex44\ex55. The default value for this field is empty.
.Sp
To reset this value, set it to an empty string together with the is_remote_id flag (anything except \*(L"Matches_Value\*(R").
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Get remote_id_name
\& my $remote_id_name = $relayagentFilter\->remote_id_name();
\& # Modify remote_id_name
\& $relayagentFilter\->remote_id_name("\ex00\ex11\ex22\ex33\ex44\ex55");
\& # Set is_remote_id to "Not_Set"
\& $relayagentFilter\->is_remote_id("Not_Set");
\& # Set remote_id_name to empty string
\& $relayagentFilter\->remote_id_name("");
.Ve
.RE
.RS 4
.RE
.SS "remote_id_substring_length( )"
.IX Subsection "remote_id_substring_length( )"
.RS 4
Use this method to set or retrive the remote \s-1ID\s0 substring length.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get remote_id_substring_length value
\& my $remote_id_substring_length = $relayagentfilter\->remote_id_substring_length();
\&
\& #modify remote_id_substring_length value
\& $relayagentfilter\->remote_id_substring_length(10);
.Ve
.RE
.RS 4
.RE
.SS "remote_id_substring_offset( )"
.IX Subsection "remote_id_substring_offset( )"
.RS 4
Use this method to set or retrive the remote \s-1ID\s0 substring offset.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get remote_id_substring_offset value
\& my $remote_id_substring_offset = $relayagentfilter\->remote_id_substring_offset();
\&
\& #modify remote_id_substring_offset value
\& $relayagentfilter\->remote_id_substring_offset(10);
.Ve
.RE
.RS 4
.RE
.SS "is_circuit_id( )"
.IX Subsection "is_circuit_id( )"
.RS 4
Use this method to set or retrieve the is_circuit_id flag of a \s-1DHCP\s0 relay agent filter object. The possible values for the is_circuit_id flag are Any, Not_Set, Matches_Value. The circuit_id value takes effect only if the value is Matches_Value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify is_circuit_id in string format.
example:
Text String: Any
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get is_circuit_id
\& my $is_circuit_id = $relayagentFilter\->is_circuit_id();
\& # Modify is_circuit_id
\& $relayagentFilter\->is_circuit_id("Any");
.Ve
.RE
.RS 4
.RE
.SS "is_circuit_id_substring( )"
.IX Subsection "is_circuit_id_substring( )"
.RS 4
Use this method to set or retrive the flag that indicates whether the substring of circuit \s-1ID,\s0 instead of the full circuit \s-1ID,\s0 is matched.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable the circuit \s-1ID\s0 substring match or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get is_circuit_id_substring
\& my $is_circuit_id_substring = $relayagentFilter\->is_circuit_id_substring();
\& # Modify is_circuit_id_substring
\& $relayagentFilter\->is_circuit_id_substring("true");
.Ve
.RE
.RS 4
.RE
.SS "is_remote_id( )"
.IX Subsection "is_remote_id( )"
.RS 4
Use this method to set or retrieve the is_remote_id flag of a \s-1DHCP\s0 relay agent filter object. The possible values for the is_remote_id flag are Any, Not_Set, Matches_Value. The remote_id value takes effect only if the value is Matches_Value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify is_remote_id in string format.
example:
Text String: Not_Set
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get is_remote_id
\& my $is_remote_id = $relayagentFilter\->is_remote_id();
\& # Modify is_remote_id
\& $relayagentFilter\->is_remote_id("Not_Set");
.Ve
.RE
.RS 4
.RE
.SS "is_remote_id_substring( )"
.IX Subsection "is_remote_id_substring( )"
.RS 4
Use this method to set or retrive the flag that indicates whether the substring of the remote \s-1ID,\s0 instead of the full remote \s-1ID,\s0 is matched.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable remote id substring match or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get is_remote_id_substring
\& my $is_remote_id_substring = $relayagentFilter\->is_remote_id_substring();
\& # Modify is_remote_id_substring
\& $relayagentFilter\->is_remote_id_substring("true");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, search, modify, and remove. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 relay agent filter object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create a FilterRule relayagent filter object>
\&
\& my $filter = Infoblox::DHCP::FilterRule::RelayAgent\->new(
\&                filter_name => "relayagent_filter",
\&                permission => "grant" );
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 relay agent filter object\fR
.PP
.Vb 1
\& my  $relayagentfilter = Infoblox::DHCP::Filter::RelayAgent\->new(
\&
\&        name             => "relayagent_filter",
\&        circuit_id_name  => "circuit",
\&        remote_id_name   => "remote"
\&       );
\& my $response = $session\->add($relayagentfilter)
\&        or die("Add DHCP Relay Agent Filter failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP Relay Agent Filter added successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DHCP\s0 relay agent filter\fR
.PP
.Vb 10
\& #Search the DHCP Relay Agent Filter
\& my @retrieved_objs = $session\->search(
\&                object => "Infoblox::DHCP::Filter::RelayAgent",
\&                name   => "relayagent.*",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search DHCP Relay Agent Filter  failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Search DHCP relay agent filter found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DHCP\s0 relay agent filter attribute\fR
.PP
.Vb 10
\& #Get  DHCP Relay Agent Filter through the session
\& my  @retrieved_objs = $session\->get(
\&               object => "Infoblox::DHCP::Filter::RelayAgent" ,
\&               name   => "relayagent_filter",
\&         );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Network object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Get DHCP relay agent filter found at least 1 matching entry\en";
\&
\& #Modify the attributes of the specified DHCP Relay Agent Filter object
\& $object\->circuit_id_name("diff_Circuit");
\& $object\->remote_id_name("diff_remote");
\& $session\->modify($object)
\&     or die("Modify DHCP Relay Agent Filter attribute failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP Relay Agent Filter object modified successfully \en";
\&
\& #Create the Network object with the member
\& my $network = Infoblox::DHCP::Network\->new(
\&     network => "10.0.0.0/8",
\&     comment => "add network",
\& );
\& unless($network) {
\&        die("Construct Network object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network object created successfully\en";
\&
\& #Add the Network object into the Infoblox appliance through a session
\& $session\->add($network)
\&     or die("Add Network object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network object added to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 Range object that uses the relayagent filter \fR
.PP
.Vb 11
\& my $dhcp_range = Infoblox::DHCP::Range\->new(
\&         end_addr                => "10.0.0.10",
\&         network                 => "10.0.0.0/8",
\&         start_addr              => "10.0.0.1",
\&         authority               => "true",
\&         filters                 => [$filter],
\& );
\& unless($dhcp_range) {
\&        die("Construct DHCP Range object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& print "DHCP Range object created successfully\en";
\&
\& #Add the DHCP Range object into the Infoblox appliance through a session
\& $session\->add($dhcp_range)
\&     or die("Add DHCP Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range object added to the network successfully\en";
\&
\& #Remove the Network object into the Infoblox appliance through a session
\& $session\->remove($network)
\&     or die("Remove Network object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object removed from Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Remove a \s-1DHCP\s0 relay agent filter Object\fR
.PP
.Vb 9
\&  #Get object through the session
\&  my @retrieved_objs = $session\->get(
\&           object   => "Infoblox::DHCP::Filter::RelayAgent" ,
\&           name     => "relayagent_filter",
\&        );
\& my $object = $retrieved_objs[0];    unless ($object) {
\&     die("Get a DHCP Relay Agent Filterobject failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& print "Get a DHCP relay agent filter object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove a DHCP Relay Agent Filter failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DHCP relay agent filter removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DHCP::Network, Infoblox::DHCP::Range, Infoblox::DHCP::FilterRule::RelayAgent, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
