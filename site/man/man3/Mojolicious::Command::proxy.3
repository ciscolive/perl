.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Command::proxy 3"
.TH Mojolicious::Command::proxy 3 "2020-09-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Command::proxy \- Proxy web requests elsewhere
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  Usage: APPLICATION proxy [\-\-from route_prefix] to_url
\&
\&    mojo proxy http://example.com/subdir daemon \-l http://*:3000
\&    mojo proxy \-f /proxy http://example.com/subdir get /proxy/hi
\&
\&  Options:
\&    \-f, \-\-from                  Proxying route prefix
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Command::proxy is a command line interface for
making an app that proxies some or all incoming requests elsewhere.
Having done so, it then passes the rest of its arguments to the app's
\&\f(CW\*(C`start\*(C'\fR method, as illustrated in the synopsis above.
.PP
One major reason for this is to be able to point your browser at
e.g. \f(CW\*(C`localhost:3000\*(C'\fR (see first example in synopsis). This relaxes
restrictions on e.g. Service Workers and push notifications, which
normally demand \s-1TLS,\s0 so you can test functionality even if your real
development server is running elsewhere.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "description"
.IX Subsection "description"
.Vb 1
\&  $str = $self\->description;
.Ve
.SS "usage"
.IX Subsection "usage"
.Vb 1
\&  $str = $self\->usage;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "run"
.IX Subsection "run"
.Vb 1
\&  $get\->run(@ARGV);
.Ve
.PP
Run this command. It will add a \*(L"proxy\*(R" route as below. If not supplied,
the \f(CW$from\fR will be empty-string.
.PP
Command-line arguments will only be parsed at the start of the
command-line. This allows you to pass option through to e.g. \f(CW\*(C`daemon\*(C'\fR.
.PP
As a special case, if the \f(CW\*(C`app\*(C'\fR attribute is exactly a
Mojo::HelloWorld app, it will replace its \f(CW\*(C`routes\*(C'\fR attribute with an
empty one first, since the \f(CW\*(C`whatever\*(C'\fR route clashes with the proxy route,
being also a match-everything wildcard route. This makes the \f(CW\*(C`mojo proxy\*(C'\fR
invocation function as expected.
.SS "proxy"
.IX Subsection "proxy"
.Vb 1
\&  Mojolicious::Command::proxy\->proxy($app, $from_prefix, $to_prefix);
.Ve
.PP
Add a route to the given app, with the given prefix, named \f(CW\*(C`proxy\*(C'\fR. It
will transparently proxy all matching requests to the give \f(CW$to\fR,
with all the same headers both ways.
.PP
It operates by simply appending everything after the \f(CW$from_prefix\fR,
which \fIcan\fR be an empty string (which is treated the same as solitary
\&\f(CW\*(C`/\*(C'\fR, doing what you'd expect), to the \f(CW$to_prefix\fR. E.g.:
.PP
.Vb 2
\&  $cmd\->proxy($app, \*(Aq\*(Aq, \*(Aq/subdir\*(Aq); # /2 \-> /subdir/2, / \-> /subdir/ i.e. all
\&  $cmd\->proxy($app, \*(Aq/proxy\*(Aq, \*(Aq/subdir\*(Aq); # /proxy/2 \-> /subdir/2
.Ve
.PP
\&\f(CW$to\fR can be a path as well as a full \s-1URL,\s0 so you can also use this to
route internally. However, the author can see no good reason to do this
outside of testing.
.PP
It uses \*(L"proxy\->start_p\*(R" in Mojolicious::Plugin::DefaultHelpers but
adds the full header-proxying behaviour.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ed J
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
