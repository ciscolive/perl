.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Devel::Cover::DB 3"
.TH Devel::Cover::DB 3 "2020-05-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::Cover::DB \- Code coverage metrics for Perl
.SH "VERSION"
.IX Header "VERSION"
version 1.36
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Devel::Cover::DB;
\&
\& my $db = Devel::Cover::DB\->new(db => "my_coverage_db");
\& $db\->print_summary([$file1, $file2], ["statement", "pod"]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides access to a database of code coverage information.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\& my $db = Devel::Cover::DB\->new(db => "my_coverage_db");
.Ve
.PP
Constructs the \s-1DB\s0 from the specified database.
.SS "cover"
.IX Subsection "cover"
.Vb 1
\& my $cover = $db\->cover;
.Ve
.PP
Returns a Devel::Cover::DB::Cover object.  From here all the coverage
data may be accessed.
.PP
.Vb 10
\& my $cover = $db\->cover;
\& for my $file ($cover\->items) {
\&     print "$file\en";
\&     my $f = $cover\->file($file);
\&     for my $criterion ($f\->items) {
\&         print "  $criterion\en";
\&         my $c = $f\->criterion($criterion);
\&         for my $location ($c\->items) {
\&             my $l = $c\->location($location);
\&             print "    $location @$l\en";
\&         }
\&     }
\& }
.Ve
.PP
Data for different criteria will be in different formats, so that will need
special handling.  This is not yet documented so your best bet for now is to
look at some of the simpler reports and/or the source.
.PP
The methods in the above example are actually aliases for methods in
Devel::Cover::DB::Base (the base class for all Devel::Cover::DB::* classes):
.IP "\(bu" 4
Devel::Cover::DB::Base\->values
.Sp
Aliased to Devel::Cover::DB::Cover\->files, Devel::Cover::DB::File\->criteria,
Devel::Cover::DB::Criterion\->locations, and Devel::Cover::DB::Location\->data
.IP "\(bu" 4
Devel::Cover::DB::Base\->get
.Sp
Aliased to Devel::Cover::DB::Cover\->file, Devel::Cover::DB::File\->criterion,
Devel::Cover::DB::Criterion\->location, and Devel::Cover::DB::Location\->datum
.PP
Instead of calling \f(CW$file\fR\->criterion(\*(L"x\*(R") you can also call \f(CW$file\fR\->x.
.SS "is_valid"
.IX Subsection "is_valid"
.Vb 1
\& my $valid = $db\->is_valid;
.Ve
.PP
Returns true if \f(CW$db\fR is valid (or looks valid, the function is too lax).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 6
\& Devel::Cover
\& Devel::Cover::DB::Base
\& Devel::Cover::DB::Cover
\& Devel::Cover::DB::File
\& Devel::Cover::DB::Criterion
\& Devel::Cover::DB::Location
.Ve
.SH "BUGS"
.IX Header "BUGS"
Huh?
.SH "LICENCE"
.IX Header "LICENCE"
Copyright 2001\-2019, Paul Johnson (paul@pjcj.net)
.PP
This software is free.  It is licensed under the same terms as Perl itself.
.PP
The latest version of this software should be available from my homepage:
http://www.pjcj.net
