.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Selenium::Firefox::Profile 3"
.TH Selenium::Firefox::Profile 3 "2020-10-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Selenium::Firefox::Profile \- Use custom profiles with Selenium::Remote::Driver
.SH "VERSION"
.IX Header "VERSION"
version 1.38
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You can use this module to create a custom Firefox Profile for your
Selenium tests. Currently, you can set browser preferences and add
extensions to the profile before passing it in the constructor for a
new Selenium::Remote::Driver or Selenium::Firefox.
.SH "SYNPOSIS"
.IX Header "SYNPOSIS"
.Vb 2
\&    use Selenium::Remote::Driver;
\&    use Selenium::Firefox::Profile;
\&
\&    my $profile = Selenium::Firefox::Profile\->new;
\&    $profile\->set_preference(
\&        \*(Aqbrowser.startup.homepage\*(Aq => \*(Aqhttp://www.google.com\*(Aq,
\&        \*(Aqbrowser.cache.disk.capacity\*(Aq => 358400
\&    );
\&
\&    $profile\->set_boolean_preference(
\&        \*(Aqbrowser.shell.checkDefaultBrowser\*(Aq => 0
\&    );
\&
\&    $profile\->add_extension(\*(Aqt/www/redisplay.xpi\*(Aq);
\&
\&    my $driver = Selenium::Remote::Driver\->new(
\&        \*(Aqfirefox_profile\*(Aq => $profile
\&    );
\&
\&    $driver\->get(\*(Aqhttp://www.google.com\*(Aq);
\&    print $driver\->get_title();
.Ve
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SS "new (%args)"
.IX Subsection "new (%args)"
profile_dir \- <string> directory to look for the firefox profile. Defaults to a Tempdir.
.SH "METHODS"
.IX Header "METHODS"
.SS "set_preference"
.IX Subsection "set_preference"
Set string and integer preferences on the profile object. You can set
multiple preferences at once. If you need to set a boolean preference,
either use JSON::true/JSON::false, or see \f(CW\*(C`set_boolean_preference()\*(C'\fR.
.PP
.Vb 2
\&    $profile\->set_preference("quoted.integer.pref" => \*(Aq"20140314220517"\*(Aq);
\&    # user_pref("quoted.integer.pref", "20140314220517");
\&
\&    $profile\->set_preference("plain.integer.pref" => 9005);
\&    # user_pref("plain.integer.pref", 9005);
\&
\&    $profile\->set_preference("string.pref" => "sample string value");
\&    # user_pref("string.pref", "sample string value");
.Ve
.SS "set_boolean_preference"
.IX Subsection "set_boolean_preference"
Set preferences that require boolean values of 'true' or 'false'. You
can set multiple preferences at once. For string or integer
preferences, use \f(CW\*(C`set_preference()\*(C'\fR.
.PP
.Vb 2
\&    $profile\->set_boolean_preference("false.pref" => 0);
\&    # user_pref("false.pref", false);
\&
\&    $profile\->set_boolean_preference("true.pref" => 1);
\&    # user_pref("true.pref", true);
.Ve
.SS "get_preference"
.IX Subsection "get_preference"
Retrieve the computed value of a preference. Strings will be double
quoted and boolean values will be single quoted as \*(L"true\*(R" or \*(L"false\*(R"
accordingly.
.PP
.Vb 2
\&    $profile\->set_boolean_preference("true.pref" => 1);
\&    print $profile\->get_preference("true.pref") # true
\&
\&    $profile\->set_preference("string.pref" => "an extra set of quotes");
\&    print $profile\->get_preference("string.pref") # "an extra set of quotes"
.Ve
.SS "add_extension"
.IX Subsection "add_extension"
Add an existing \f(CW\*(C`.xpi\*(C'\fR to the profile by providing its path. This
only works with packaged \f(CW\*(C`.xpi\*(C'\fR files, not plain/un\-packed extension
directories.
.PP
.Vb 1
\&    $profile\->add_extension(\*(Aqt/www/redisplay.xpi\*(Aq);
.Ve
.SS "add_webdriver"
.IX Subsection "add_webdriver"
Primarily for internal use, we set the appropriate firefox preferences
for a new geckodriver session.
.SS "add_webdriver_xpi"
.IX Subsection "add_webdriver_xpi"
Primarily for internal use. This adds the fxgoogle .xpi that is used
for webdriver communication in \s-1FF47\s0 and older. For \s-1FF48\s0 and newer, the
old method using an extension to orchestrate the webdriver
communication with the Firefox browser has been obsoleted by the
introduction of \f(CW\*(C`geckodriver\*(C'\fR.
.SS "add_marionette"
.IX Subsection "add_marionette"
Primarily for internal use, configure Marionette to the
current Firefox profile.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see those modules/websites for more information related to this module.
.IP "\(bu" 4
Selenium::Remote::Driver
.IP "\(bu" 4
<http://kb.mozillazine.org/About:config_entries>
.IP "\(bu" 4
<https://developer.mozilla.org/en\-US/docs/Mozilla/Preferences/A_brief_guide_to_Mozilla_preferences>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
<https://github.com/teodesian/Selenium\-Remote\-Driver/issues>
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH "AUTHORS"
.IX Header "AUTHORS"
Current Maintainers:
.IP "\(bu" 4
Daniel Gempesaw <gempesaw@gmail.com>
.IP "\(bu" 4
Emmanuel Peroumalna√Øk <peroumalnaik.emmanuel@gmail.com>
.PP
Previous maintainers:
.IP "\(bu" 4
Luke Closs <cpan@5thplane.com>
.IP "\(bu" 4
Mark Stosberg <mark@stosberg.com>
.PP
Original authors:
.IP "\(bu" 4
Aditya Ivaturi <ivaturi@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2010\-2011 Aditya Ivaturi, Gordon Child
.PP
Copyright (c) 2014\-2017 Daniel Gempesaw
.PP
Licensed under the Apache License, Version 2.0 (the \*(L"License\*(R");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
.PP
http://www.apache.org/licenses/LICENSE\-2.0
.PP
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \*(L"\s-1AS IS\*(R" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\s0 either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
