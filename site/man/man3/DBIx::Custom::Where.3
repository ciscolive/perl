.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Custom::Where 3"
.TH DBIx::Custom::Where 3 "2020-04-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Custom::Where \- Where clause
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 2
\&  # Create DBIx::Custom::Where object
\&  my $where = $dbi\->where;
\&  
\&  # Clause
\&  $where\->clause([\*(Aqand\*(Aq, \*(Aqtitle like :title\*(Aq, \*(Aqprice = :price\*(Aq]);
\&  $where\->clause([\*(Aqand\*(Aq, \*(Aq:title{like}\*(Aq, \*(Aq:price{=}\*(Aq]);
\&  
\&  # Stringify where clause
\&  my $where_clause = "$where";
\&  my $where_clause = $where\->to_string;
\&    # \-> where title like :title and price = :price
\&  
\&  # Only price condition
\&  $where\->clause([\*(Aqand\*(Aq, \*(Aq:title{like}\*(Aq, \*(Aq:price{=}\*(Aq]);
\&  $where\->param({price => 1900});
\&    # \-> where price = :price
\&  
\&  # Only title condition
\&  $where\->clause([\*(Aqand\*(Aq, \*(Aq:title{like}\*(Aq, \*(Aq:price{=}\*(Aq]);
\&  $where\->param({title => \*(AqPerl\*(Aq});
\&    # \-> where title like :title
\&  
\&  # Nothing
\&  $where\->clause([\*(Aqand\*(Aq, \*(Aq:title{like}\*(Aq, \*(Aq:price{=}\*(Aq]);
\&  $where\->param({});
\&    # => Nothing
\&  
\&  # or condition
\&  $where\->clause([\*(Aqor\*(Aq, \*(Aq:title{like}\*(Aq, \*(Aq:price{=}\*(Aq]);
\&    # \-> where title = :title or price like :price
\&  
\&  # More than one parameter
\&  $where\->clause([\*(Aqand\*(Aq, \*(Aq:price{>}\*(Aq, \*(Aq:price{<}\*(Aq]);
\&  $where\->param({price => [1000, 2000]});
\&    # \-> where price > :price and price < :price
\&  
\&  # Only first condition
\&  $where\->clause([\*(Aqand\*(Aq, \*(Aq:price{>}\*(Aq, \*(Aq:price{<}\*(Aq]);
\&  $where\->param({price => [1000, $dbi\->not_exists]});
\&    # \-> where price > :price
\&  
\&  # Only second condition
\&  $where\->clause([\*(Aqand\*(Aq, \*(Aq:price{>}\*(Aq, \*(Aq:price{<}\*(Aq]);
\&  $where\->param({price => [$dbi\->not_exists, 2000]});
\&    # \-> where price < :price
\&  
\&  # More complex condition
\&  $where\->clause(
\&    [
\&      \*(Aqand\*(Aq,
\&      \*(Aq:price{=}\*(Aq,
\&      [\*(Aqor\*(Aq, \*(Aq:title{=}\*(Aq, \*(Aq:title{=}\*(Aq, \*(Aq:title{=}\*(Aq]
\&    ]
\&  );
\&    # \-> pirce = :price and (title = :title or title = :title or tilte = :title)
\&  
\&  # Using Full\-qualified column name
\&  $where\->clause([\*(Aqand\*(Aq, \*(Aq:book.title{like}\*(Aq, \*(Aq:book.price{=}\*(Aq]);
\&    # \-> book.title like :book.title and book.price = :book.price
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "clause"
.IX Subsection "clause"
.Vb 7
\&  my $clause = $where\->clause;
\&  $where = $where\->clause(
\&    [\*(Aqand\*(Aq,
\&      \*(Aq:title{=}\*(Aq, 
\&      [\*(Aqor\*(Aq, \*(Aq:date{<}\*(Aq, \*(Aq:date{>}\*(Aq]
\&    ]
\&  );
.Ve
.PP
Where clause. Above one is expanded to the following \s-1SQL\s0 by to_string
If all parameter names is exists.
.PP
.Vb 1
\&  where title = :title and ( date < :date or date > :date )
.Ve
.SS "param"
.IX Subsection "param"
.Vb 5
\&  my $param = $where\->param;
\&  $where = $where\->param({
\&    title => \*(AqPerl\*(Aq,
\&    date => [\*(Aq2010\-11\-11\*(Aq, \*(Aq2011\-03\-05\*(Aq],
\&  });
.Ve
.SS "dbi"
.IX Subsection "dbi"
.Vb 2
\&  my $dbi = $where\->dbi;
\&  $where = $where\->dbi($dbi);
.Ve
.PP
DBIx::Custom object.
.SS "join"
.IX Subsection "join"
.Vb 2
\&  my $join = $where\->join;
\&  $join = $where\->join($join);
.Ve
.PP
join information. This values is addd to select method \f(CW\*(C`join\*(C'\fR option values.
.PP
.Vb 1
\&  $where\->join([\*(Aqleft join author on book.author = authro.id\*(Aq]);
.Ve
.SH "METHODS"
.IX Header "METHODS"
DBIx::Custom::Where inherits all methods from Object::Simple
and implements the following new ones.
.SS "to_string"
.IX Subsection "to_string"
.Vb 1
\&  $where\->to_string;
.Ve
.PP
Convert where clause to string.
.PP
double quote is override to execute \f(CW\*(C`to_string\*(C'\fR method.
.PP
.Vb 1
\&  my $string_where = "$where";
.Ve
