.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "GraphViz2::DBI 3"
.TH GraphViz2::DBI 3 "2020-11-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GraphViz2::DBI \- Visualize a database schema as a graph
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 3
\&        use DBI;
\&        use GraphViz2;
\&        use GraphViz2::DBI;
\&
\&        exit 0 if (! $ENV{DBI_DSN});
\&
\&        my($graph) = GraphViz2\->new (
\&                edge   => {color => \*(Aqgrey\*(Aq},
\&                global => {directed => 1},
\&                graph  => {rankdir => \*(AqTB\*(Aq},
\&                node   => {color => \*(Aqblue\*(Aq, shape => \*(Aqoval\*(Aq},
\&        );
\&        my($attr)              = {};
\&        $$attr{sqlite_unicode} = 1 if ($ENV{DBI_DSN} =~ /SQLite/i);
\&        my($dbh)               = DBI\->connect($ENV{DBI_DSN}, $ENV{DBI_USER}, $ENV{DBI_PASS}, $attr);
\&
\&        $dbh\->do(\*(AqPRAGMA foreign_keys = ON\*(Aq) if ($ENV{DBI_DSN} =~ /SQLite/i);
\&
\&        my($g) = GraphViz2::DBI\->new(dbh => $dbh, graph => $graph);
\&
\&        $g\->create;
\&
\&        my($format)      = shift || \*(Aqsvg\*(Aq;
\&        my($output_file) = shift || File::Spec\->catfile(\*(Aqhtml\*(Aq, "dbi.schema.$format");
\&
\&        $graph\->run(format => $format, output_file => $output_file);
.Ve
.PP
See scripts/dbi.schema.pl (\*(L"Scripts Shipped with this Module\*(R" in GraphViz2).
.PP
The image html/dbi.schema.svg was generated from the database tables of my module
App::Office::Contacts.
.SH "Description"
.IX Header "Description"
Takes a database handle, and graphs the schema.
.PP
You can write the result in any format supported by Graphviz <http://www.graphviz.org/>.
.PP
Here is the list of output formats <http://www.graphviz.org/content/output-formats>.
.SH "Constructor and Initialization"
.IX Header "Constructor and Initialization"
.SS "Calling \fBnew()\fP"
.IX Subsection "Calling new()"
\&\f(CW\*(C`new()\*(C'\fR is called as \f(CW\*(C`my($obj) = GraphViz2::DBI\->new(k1 => v1, k2 => v2, ...)\*(C'\fR.
.PP
It returns a new object of type \f(CW\*(C`GraphViz2::DBI\*(C'\fR.
.PP
Key-value pairs accepted in the parameter list:
.ie n .IP "o dbh => $dbh" 4
.el .IP "o dbh => \f(CW$dbh\fR" 4
.IX Item "o dbh => $dbh"
This options specifies the database handle to use.
.Sp
This key is mandatory.
.ie n .IP "o graph => $graphviz_object" 4
.el .IP "o graph => \f(CW$graphviz_object\fR" 4
.IX Item "o graph => $graphviz_object"
This option specifies the GraphViz2 object to use. This allows you to configure it as desired.
.Sp
The default is GraphViz2\->new. The default attributes are the same as in the synopsis, above,
except for the graph label of course.
.Sp
This key is optional.
.SH "Methods"
.IX Header "Methods"
.SS "create(exclude => [], include => [])"
.IX Subsection "create(exclude => [], include => [])"
Creates the graph, which is accessible via the \fBgraph()\fR method, or via the graph object you passed to
\&\fBnew()\fR.
.PP
Returns \f(CW$self\fR to allow method chaining.
.PP
Parameters:
.IP "o exclude" 4
.IX Item "o exclude"
An optional arrayref of table names to exclude.
.Sp
If none are listed for exclusion, \fIall\fR tables are included.
.IP "o include" 4
.IX Item "o include"
An optional arrayref of table names to include.
.Sp
If none are listed for inclusion, \fIall\fR tables are included.
.SS "\fBgraph()\fP"
.IX Subsection "graph()"
Returns the graph object, either the one supplied to \fBnew()\fR or the one created during the call to
\&\fBnew()\fR.
.SH "FAQ"
.IX Header "FAQ"
.SS "Why did I get an error about 'Unable to find primary key'?"
.IX Subsection "Why did I get an error about 'Unable to find primary key'?"
For plotting foreign keys, the code has an algorithm to find the primary table/key pair which the
foreign table/key pair point to.
.PP
The steps are listed here, in the order they are tested. The first match stops the search.
.IP "o Ask the database for foreign key information" 4
.IX Item "o Ask the database for foreign key information"
DBIx::Admin::TableInfo is used for this.
.IP "o Take a guess" 4
.IX Item "o Take a guess"
Assume the foreign key points to a table with a column called \f(CW\*(C`id\*(C'\fR, and use that as the primary
key.
.IP "o Die with a detailed error message" 4
.IX Item "o Die with a detailed error message"
.SS "Which versions of the servers did you test?"
.IX Subsection "Which versions of the servers did you test?"
See \*(L"\s-1FAQ\*(R"\s0 in DBIx::Admin::TableInfo.
.SS "Does GraphViz2::DBI work with SQLite databases?"
.IX Subsection "Does GraphViz2::DBI work with SQLite databases?"
Yes. See \*(L"\s-1FAQ\*(R"\s0 in DBIx::Admin::TableInfo.
.ie n .SS "What is returned by SQLite's ""pragma foreign_key_list($table_name)""?"
.el .SS "What is returned by SQLite's ``pragma foreign_key_list($table_name)''?"
.IX Subsection "What is returned by SQLite's pragma foreign_key_list($table_name)?"
See \*(L"\s-1FAQ\*(R"\s0 in DBIx::Admin::TableInfo.
.SS "How does GraphViz2::DBI draw edges from foreign keys to primary keys?"
.IX Subsection "How does GraphViz2::DBI draw edges from foreign keys to primary keys?"
It uses DBIx::Admin::TableInfo.
.SH "Scripts Shipped with this Module"
.IX Header "Scripts Shipped with this Module"
.SS "scripts/dbi.schema.pl"
.IX Subsection "scripts/dbi.schema.pl"
If the environment vaiables \s-1DBI_DSN, DBI_USER\s0 and \s-1DBI_PASS\s0 are set (the latter 2 are optional [e.g. for SQLite]),
then this demonstrates building a graph from a database schema.
.PP
Also, for Postgres, you can set \f(CW$ENV\fR{\s-1DBI_SCHEMA\s0} to a comma-separated list of schemas, e.g. when processing the
MusicBrainz database. See scripts/dbi.schema.pl.
.PP
For details, see <http://blogs.perl.org/users/ron_savage/2013/03/graphviz2\-and\-the\-dread\-musicbrainz\-db.html>.
.PP
Outputs to ./html/dbi.schema.svg by default.
.SS "scripts/sqlite.foreign.keys.pl"
.IX Subsection "scripts/sqlite.foreign.keys.pl"
Demonstrates how to find foreign key info by calling SQLite's pragma foreign_key_list.
.PP
Outputs to \s-1STDOUT.\s0
.SH "Thanks"
.IX Header "Thanks"
Many thanks to the people who chose to make Graphviz <http://www.graphviz.org/> Open Source.
.PP
And thanks to Leon Brocard <http://search.cpan.org/~lbrocard/>, who wrote GraphViz, and kindly
gave me co-maint of the module.
.SH "Author"
.IX Header "Author"
GraphViz2 was written by Ron Savage \fI<ron@savage.net.au>\fR in 2011.
.PP
Home page: <http://savage.net.au/index.html>.
.SH "Copyright"
.IX Header "Copyright"
Australian copyright (c) 2011, Ron Savage.
.PP
.Vb 4
\&        All Programs of mine are \*(AqOSI Certified Open Source Software\*(Aq;
\&        you can redistribute them and/or modify them under the terms of
\&        The Perl License, a copy of which is available at:
\&        http://dev.perl.org/licenses/
.Ve
