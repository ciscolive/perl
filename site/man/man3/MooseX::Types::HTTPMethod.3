.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Types::HTTPMethod 3"
.TH MooseX::Types::HTTPMethod 3 "2015-08-16" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Types::HTTPMethod \- Type constraints for HTTP method names
.SH "VERSION"
.IX Header "VERSION"
version 0.002
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Moose;
\&    use MooseX::Type::HTTPMethod qw(HTTPMethod11 HTTPMethod);
\&
\&    has rest_query_type => (
\&        is => \*(Aqro\*(Aq, isa => HTTPMethod11,
\&    );
\&
\&    has request_type => (
\&        is => \*(Aqro\*(Aq, isa => HTTPMethod,
\&    );
\&
\&    print "GET is an HTTP/1.1 method: ", (is_HTTPMethod11(\*(AqGET\*(Aq) : 1 : 0), "\en";
\&    # prints 1
\&    print "PATCH is an HTTP/1.1 method: ", (is_HTTPMethod11(\*(AqFOO\*(Aq) : 1 : 0), "\en";
\&    # prints 0
\&
\&    print "GET is an HTTP method: ", (is_HTTPMethod(\*(AqGET\*(Aq) : 1 : 0), "\en";
\&    # prints 1
\&    print "PATCH is an HTTP method: ", (is_HTTPMethod(\*(AqPATCH\*(Aq) : 1 : 0), "\en";
\&    # prints 1
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements string types which validate against all
\&\s-1HTTP\s0 method names currently defined by RFCs.
.SH "TYPES"
.IX Header "TYPES"
Multiple types are available, encompassing various specifications:
.ie n .SS """HTTPMethod10"""
.el .SS "\f(CWHTTPMethod10\fP"
.IX Subsection "HTTPMethod10"
\&\s-1HTTP\s0 methods defined by \s-1HTTP 1.0: GET, POST, HEAD\s0
.ie n .SS """HTTPMethod11"""
.el .SS "\f(CWHTTPMethod11\fP"
.IX Subsection "HTTPMethod11"
\&\s-1HTTP\s0 methods defined by \s-1HTTP 1.1: HTTP 1.0\s0 plus \s-1OPTIONS, PUT, DELETE, TRACE\s0
and \s-1CONNECT\s0
.ie n .SS """HTTPMethod"""
.el .SS "\f(CWHTTPMethod\fP"
.IX Subsection "HTTPMethod"
All \s-1HTTP\s0 methods currently defined by RFCs (\s-1HTTP 1.1\s0 plus a whole lot more,
mostly for WebDAV protocols)
.SH "IMPORTED FUNCTIONS"
.IX Header "IMPORTED FUNCTIONS"
As with all MooseX::Types types, the inclusion of one type name \f(CW\*(AqFoo\*(Aq\fR
in the \f(CW\*(C`use\*(C'\fR line will result in an import of these functions:
.ie n .SS """Foo"""
.el .SS "\f(CWFoo\fP"
.IX Subsection "Foo"
returns the type itself (an object implementing the
Moose::Meta::TypeConstraint interface), and
.ie n .SS """is_Foo"""
.el .SS "\f(CWis_Foo\fP"
.IX Subsection "is_Foo"
a function returning a bool, checking if the passed value validates against
the \f(CW\*(C`Foo\*(C'\fR type
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through <https://rt.cpan.org/Public/Dist/Display.html?Name=MooseX\-Types\-HTTPMethod>.
I am also usually active on irc, as 'ether' at <irc://irc.perl.org>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
\&\s-1RFC 1945: HTTP 1.0\s0 <http://www.w3.org/Protocols/rfc1945/rfc1945>
.IP "\(bu" 4
\&\s-1RFC 2616\s0 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html>
.IP "\(bu" 4
\&\s-1HTTP\s0 Extensions for Distributed Authoring \*(-- WebDAV <http://tools.ietf.org/html/rfc2518>
.IP "\(bu" 4
Versioning Extensions to WebDAV (Web Distributed Authoring and Versioning) <http://tools.ietf.org/html/rfc3253>
.IP "\(bu" 4
Web Distributed Authoring and Versioning (WebDAV) Ordered Collections Protocol <http://tools.ietf.org/html/rfc3648>
.IP "\(bu" 4
Web Distributed Authoring and Versioning (WebDAV) Access Control Protocol <http://tools.ietf.org/html/rfc3744>
.IP "\(bu" 4
\&\s-1PATCH\s0 Method for \s-1HTTP\s0 <https://tools.ietf.org/html/rfc5789>
.SH "AUTHOR"
.IX Header "AUTHOR"
Karen Etheridge <ether@cpan.org>
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2013 by Karen Etheridge.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
