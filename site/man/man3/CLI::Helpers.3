.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CLI::Helpers 3"
.TH CLI::Helpers 3 "2020-03-29" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CLI::Helpers \- Subroutines for making simple command line scripts
.SH "VERSION"
.IX Header "VERSION"
version 1.8
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Use this module to make writing intelligent command line scripts easier.
.PP
.Vb 2
\&    #!/usr/bin/env perl
\&    use CLI::Helpers qw(:all);
\&
\&    output({color=>\*(Aqgreen\*(Aq}, "Hello, World!");
\&    verbose({indent=>1,color=>\*(Aqyellow\*(Aq}, "Shiny, happy people!");
\&    verbose({level=>2,kv=>1,color=>\*(Aqred\*(Aq}, a => 1, b => 2);
\&    debug_var({ c => 3, d => 4});
\&
\&    # Data
\&    output({data=>1}, join(\*(Aq,\*(Aq, qw(a b c d)));
\&
\&    # Wait for confirmation
\&    die "ABORTING" unless confirm("Are you sure?");
\&
\&    # Ask for a number
\&    my $integer = prompt "Enter an integer:", validate => { "not a number" => sub { /^\ed+$/ } }
\&
\&    # Ask for next move
\&    my %menu = (
\&        north => "Go north.",
\&        south => "Go south.",
\&    );
\&    my $dir = prompt "Where to, adventurous explorer?", menu => \e%menu;
\&
\&    # Ask for a favorite animal
\&    my $favorite = menu("Select your favorite animal:", [qw(dog cat pig fish otter)]);
.Ve
.PP
Running as test.pl:
.PP
.Vb 10
\&    $ ./test.pl
\&    Hello, World!
\&    a,b,c,d
\&    $ ./test.pl \-\-verbose
\&    Hello, World!
\&      Shiny, Happy people!
\&    a,b,c,d
\&    $ ./test.pl \-vv
\&    Hello, World!
\&      Shiny, Happy people!
\&      a: 1
\&      b: 2
\&    a,b,c,d
\&    $ ./test.pl \-\-debug
\&    Hello, World!
\&      Shiny, Happy people!
\&      a: 1
\&      b: 2
\&    \-\-\-
\&    c: 3
\&    d: 4
\&    a,b,c,d
\&
\&    $ ./test.pl \-\-data\-file=output.csv
\&    Hello, World!
\&    a,b,c,d
\&    $ cat output.csv
\&    a,b,c,d
.Ve
.PP
Colors would be automatically enabled based on the user's ~/.gitconfig
.SH "OVERVIEW"
.IX Header "OVERVIEW"
This module provides a library of useful functions for constructing simple command
line interfaces.  It is able to extract information from the environment and your
~/.gitconfig to display data in a reasonable manner.
.PP
Using this module adds argument parsing using Getopt::Long to your script.  It
enables pass-through, so you can still use your own argument parsing routines or
Getopt::Long in your script.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "cli_helpers_initialize"
.IX Subsection "cli_helpers_initialize"
This is called automatically when \f(CW\*(C`preprocess_argv\*(C'\fR is set. By default, it'll
be run the first time a definition is needed, usually the first call to
\&\f(CW\*(C`output()\*(C'\fR.  If called automatically, it will operate on \f(CW@ARGV\fR.  You can
optionally pass an array reference to this function and it'll operate that
instead.
.PP
In most cases, you don't need to call this function directly.  It must be
explicitly requested in the import.
.PP
.Vb 1
\&    use CLI::Helpers qw( :output );
\&
\&    ...
\&    # I want access to ARGV before CLI::Helpers;
\&    my %opts = get_important_things_from(\e@ARGV);
\&
\&    # Now, let CLI::Helpers take the rest, implicit
\&    #   call to cli_helpers_initialize()
\&    output("ready");
.Ve
.PP
Alternatively, you could:
.PP
.Vb 1
\&    use CLI::Helpers qw( :output preprocess_argv );
\&
\&    ...
\&    # Since CLI::Helpers opts are stripped from @ARGV,
\&    #  Getopt::Long::Descriptive won\*(Aqt complain about extra args
\&    my ($opt,$usage) = describe_option( ... );
\&
\&    # Now, let CLI::Helpers take the rest, implicit
\&    #   call to cli_helpers_initialize()
\&    output("ready");
.Ve
.PP
Or if you'd prefer not to touch \f(CW@ARGV\fR at all, you pass in an array ref:
.PP
.Vb 1
\&    use CLI::Helpers qw( :output );
\&
\&    my ($opt,$usage) = describe_option( ... );
\&
\&    cli_helpers_initialize([ qw( \-\-verbose ) ]);
\&
\&    output("ready?");
\&    verbose("you bet I am");
.Ve
.SS "def"
.IX Subsection "def"
Not exported by default, returns the setting defined.
.SS "git_color_check"
.IX Subsection "git_color_check"
Not exported by default.  Returns 1 if git is configured to output
using color of 0 if color is not enabled.
.ie n .SS "colorize( $color => 'message to be output' )"
.el .SS "colorize( \f(CW$color\fP => 'message to be output' )"
.IX Subsection "colorize( $color => 'message to be output' )"
Not exported by default.  Checks if color is enabled and applies
the specified color to the string.
.ie n .SS "output( \e%opts, @messages )"
.el .SS "output( \e%opts, \f(CW@messages\fP )"
.IX Subsection "output( %opts, @messages )"
Exported.  Takes an optional hash reference and a list of
messages to be output.
.ie n .SS "verbose( \e%opts, @messages )"
.el .SS "verbose( \e%opts, \f(CW@messages\fP )"
.IX Subsection "verbose( %opts, @messages )"
Exported.  Takes an optional hash reference of formatting options.  Automatically
overrides the \fBlevel\fR parameter to 1 if it's not set.
.ie n .SS "debug( \e%opts, @messages )"
.el .SS "debug( \e%opts, \f(CW@messages\fP )"
.IX Subsection "debug( %opts, @messages )"
Exported.  Takes an optional hash reference of formatting options.
Does not output anything unless \s-1DEBUG\s0 is set.
.SS "debug_var( \e%opts, \e%Variable )"
.IX Subsection "debug_var( %opts, %Variable )"
Exported.  Takes an optional hash reference of formatting options.
Does not output anything unless \s-1DEBUG\s0 is set.
.SS "override( variable => 1 )"
.IX Subsection "override( variable => 1 )"
Exported.  Allows a block of code to override the debug or verbose level.  This
can be used during development to enable/disable the \s-1DEBUG/VERBOSE\s0 settings.
.ie n .SS "confirm(""prompt"")"
.el .SS "confirm(``prompt'')"
.IX Subsection "confirm(prompt)"
Exported.  Creates a Yes/No Prompt which accepts y/n or yes/no case insensitively
but requires one or the other.
.PP
Returns 1 for 'yes' and 0 for 'no'
.ie n .SS "text_input(""prompt"", validate => { ""too short"" => sub { length $_ > 10 } })"
.el .SS "text_input(``prompt'', validate => { ``too short'' => sub { length \f(CW$_\fP > 10 } })"
.IX Subsection "text_input(prompt, validate => { too short => sub { length $_ > 10 } })"
Exported.  Provides a prompt to the user for input.  If validate is passed, it should be a hash reference
containing keys of error messages and values which are subroutines to validate the input available as \f(CW$_\fR.
If a validator fails, it's error message will be displayed, and the user will be re-prompted.
.PP
Valid options are:
.IP "\fBdefault\fR" 4
.IX Item "default"
Any string which will be used as the default value if the user just presses enter.
.IP "\fBvalidate\fR" 4
.IX Item "validate"
A hashref, keys are error messages, values are sub routines that return true when the value meets the criteria.
.IP "\fBnoecho\fR" 4
.IX Item "noecho"
Set as a key with any value and the prompt will turn off echoing responses as well as disabling all
ReadLine magic.  See also \fBpwprompt\fR.
.PP
Returns the text that has passed all validators.
.ie n .SS "menu(""prompt"", $ArrayOrHashRef)"
.el .SS "menu(``prompt'', \f(CW$ArrayOrHashRef\fP)"
.IX Subsection "menu(prompt, $ArrayOrHashRef)"
Exported.  Used to create a menu of options from a list.  Can be either a hash or array reference
as the second argument.  In the case of a hash reference, the values will be displayed as options while
the selected key is returned.  In the case of an array reference, each element in the list is displayed
the selected element will be returned.
.PP
Returns selected element (HashRef \-> Key, ArrayRef \-> The Element)
.ie n .SS "pwprompt(""Prompt"", options )"
.el .SS "pwprompt(``Prompt'', options )"
.IX Subsection "pwprompt(Prompt, options )"
Exported.  Synonym for text_input(\*(L"Password: \*(R", noecho => 1);  Also requires the password to be longer than 0 characters.
.ie n .SS "prompt(""Prompt"", options )"
.el .SS "prompt(``Prompt'', options )"
.IX Subsection "prompt(Prompt, options )"
Exported.  Wrapper function with rudimentary mimicry of IO::Prompt(er).
Uses:
.PP
.Vb 2
\&    # Mapping back to confirm();
\&    my $value = prompt "Are you sure?", yn => 1;
\&
\&    # Mapping back to text_input();
\&    my $value = prompt "Enter something:";
\&
\&    # With Validator
\&    my $value = prompt "Enter an integer:", validate => { "not a number" => sub { /^\ed+$/ } }
\&
\&    # Pass to menu();
\&    my $value = prompt "Select your favorite animal:", menu => [qw(dog cat pig fish otter)];
\&
\&    # If you request a password, autodisable echo:
\&    my $passwd = prompt "Password: ";  # sets noecho => 1, disables ReadLine history.
.Ve
.PP
See also: \fBtext_input\fR
.SH "EXPORT"
.IX Header "EXPORT"
This module uses Sub::Exporter for flexible imports, the defaults provided by
:all are as follows.
.SS "Exported Functions"
.IX Subsection "Exported Functions"
.Vb 5
\&    output  ( \e%options, @messages )
\&    verbose ( \e%options, @messages )
\&    debug   ( \e%options, @messages )
\&    debug_var ( \e$var )
\&    override( option => $value )
\&
\&    menu       ( "Question", \e%Options or \e@Options )
\&    text_input ( "Question", validate => { "error message" => sub { length $_[0] } } )
\&    confirm    ( "Question" )
\&
\&    prompt()    Wrapper which mimics IO::Prompt a bit
\&    pwprompt()  Wrapper to get sensitive data
.Ve
.SS "Import Time Configurations"
.IX Subsection "Import Time Configurations"
It's possible to change the behavior of the import process.
.IP "\fBcopy_argv\fR" 2
.IX Item "copy_argv"
Instead of messing with \f(CW@ARGV\fR, operate on a copy of \f(CW@ARGV\fR.
.Sp
.Vb 1
\&    use CLI::Helpers qw( :output copy_argv );
.Ve
.IP "\fBpreprocess_argv\fR" 2
.IX Item "preprocess_argv"
This causes the \f(CW@ARGV\fR processing to happen during the \f(CW\*(C`INIT\*(C'\fR phase, after
import but before runtime. This is usually \s-1OK\s0 for scripts, but for use in
libraries, it may be undesirable.
.Sp
.Vb 1
\&    use CLI::Helpers qw( :output preprocess_argv );
.Ve
.IP "\fBdelay_argv\fR" 2
.IX Item "delay_argv"
This causes the \f(CW@ARGV\fR processing to happen when the first call to a function
needing it run, usually an \f(CW\*(C`output()\*(C'\fR call. This is the default.
.Sp
.Vb 1
\&    use CLI::Helpers qw( :output delay_argv );
.Ve
.SH "ARGS"
.IX Header "ARGS"
From CLI::Helpers:
.PP
.Vb 10
\&    \-\-data\-file         Path to a file to write lines tagged with \*(Aqdata => 1\*(Aq
\&    \-\-tags              A comma separated list of tags to display
\&    \-\-color             Boolean, enable/disable color, default use git settings
\&    \-\-verbose           Incremental, increase verbosity (Alias is \-v)
\&    \-\-debug             Show developer output
\&    \-\-debug\-class       Show debug messages originating from a specific package, default: main
\&    \-\-quiet             Show no output (for cron)
\&    \-\-syslog            Generate messages to syslog as well
\&    \-\-syslog\-facility   Default "local0"
\&    \-\-syslog\-tag        The program name, default is the script name
\&    \-\-syslog\-debug      Enable debug messages to syslog if in use, default false
\&    \-\-nopaste           Use App::Nopaste to paste output to configured paste service
\&    \-\-nopaste\-public    Defaults to false, specify to use public paste services
\&    \-\-nopaste\-service   Comma\-separated App::Nopaste service, defaults to Shadowcat
.Ve
.SH "NOPASTE"
.IX Header "NOPASTE"
This is optional and will only work if you have App::Nopaste installed.  If
you just specify \f(CW\*(C`\-\-nopaste\*(C'\fR, any output that would be displayed to the screen
is submitted to the App::Nopaste::Service::Shadowcat paste bin.  This
paste service is pretty simple, but works reliably.
.PP
During the \f(CW\*(C`END\*(C'\fR block, the output is submitted and the \s-1URL\s0 of the paste is
returned to the user.
.SH "OUTPUT OPTIONS"
.IX Header "OUTPUT OPTIONS"
Every output function takes an optional \s-1HASH\s0 reference containing options for
that output.  The hash may contain the following options:
.IP "\fBtag\fR" 4
.IX Item "tag"
Add a keyword to tag output with.  The user may then specify \f(CW\*(C`\-\-tags
keyword1,keyword2\*(C'\fR to only view output at the appropriate level.  This option
will affect \f(CW\*(C`data\-file\*(C'\fR and \f(CW\*(C`syslog\*(C'\fR output.  The output filter requires both
the presence of the \f(CW\*(C`tag\*(C'\fR in the output options \fBand\fR the user to specify
\&\f(CW\*(C`\-\-tags\*(C'\fR on the command line.
.Sp
Consider a script, \f(CW\*(C`status.pl\*(C'\fR:
.Sp
.Vb 3
\&    output("System Status: Normal")
\&    output({tag=>\*(Aqfoo\*(Aq}, "Component Foo: OK");
\&    output({tag=>\*(Aqbar\*(Aq}, "Component Bar: OK");
.Ve
.Sp
If an operator runs:
.Sp
.Vb 4
\&    $ status.pl
\&    System Status: Normal
\&    Component Foo: OK
\&    Component Bar: OK
\&
\&    $ status.pl \-\-tags bar
\&    System Status: Normal
\&    Component Bar: OK
\&
\&    $ status.pl \-\-tags foo
\&    System Status: Normal
\&    Component Foo: OK
.Ve
.Sp
This could be helpful for selecting one or more pertinent tags to display.
.IP "\fBsticky\fR" 4
.IX Item "sticky"
Any lines tagged with 'sticky' will be replayed at the end program's end.  This
is to allow a developer to ensure message are seen at the termination of the program.
.IP "\fBcolor\fR" 4
.IX Item "color"
String. Using Term::ANSIColor for output, use the color designated, i.e.:
.Sp
.Vb 1
\&    red,blue,green,yellow,cyan,magenta,white,black, etc..
.Ve
.IP "\fBlevel\fR" 4
.IX Item "level"
Integer. For verbose output, this is basically the number of \-v's necessary to see
this output.
.IP "\fBsyslog_level\fR" 4
.IX Item "syslog_level"
String.  Can be any valid syslog_level as a string: debug, info, notice, warning, err, crit,
alert, emerg.
.IP "\fBno_syslog\fR" 4
.IX Item "no_syslog"
Bool.  Even if the user specifies \-\-syslog, these lines will not go to the syslog destination.
alert, emerg.
.IP "\fB\s-1IMPORTANT\s0\fR" 4
.IX Item "IMPORTANT"
Bool. Even if \-\-quiet is specified, output this message.  Use sparingly, and yes,
it is case sensitive.  You need to yell at it for it to yell at your users.
.IP "\fBstderr\fR" 4
.IX Item "stderr"
Bool. Use \s-1STDERR\s0 for this message instead of \s-1STDOUT.\s0  The advantage to using this is the
\&\*(L"quiet\*(R" option will silence these messages as well.
.IP "\fBindent\fR" 4
.IX Item "indent"
Integer.  This will indent by 2 times the specified integer the next string.  Useful
for creating nested output in a script.
.IP "\fBclear\fR" 4
.IX Item "clear"
Integer.  The number of newlines before this output.
.IP "\fBkv\fR" 4
.IX Item "kv"
Bool.  The array of messages is actually a key/value pair, this implements special coloring and
expects the number of messages to be even.
.Sp
.Vb 5
\&    output(qw(a 1 b 2));
\&    # a
\&    # 1
\&    # b
\&    # 2
.Ve
.Sp
Using kv, the output will look like this:
.Sp
.Vb 4
\&    output({kv=>1}, qw(a 1 b 2));
\&    # a: 1
\&    # b: 2
\&    #
.Ve
.IP "\fBdata\fR" 4
.IX Item "data"
Bool.  Lines tagged with \*(L"data => 1\*(R" will be output to the data-file if a user specifies it.  This allows
you to provide header/footers and inline context for the main \s-1CLI,\s0 but output just the data to a file for
piping elsewhere.
.SH "AUTHOR"
.IX Header "AUTHOR"
Brad Lhotsky <brad@divisionbyzero.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Brad Lhotsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The (three\-clause) BSD License
.Ve
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Kang-min Liu <gugod@gugod.org>
.IP "\(bu" 4
Kevin M. Goess <kgoess@craigslist.org>
.IP "\(bu" 4
Mohammad S Anwar <mohammad.anwar@yahoo.com>
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Websites"
.IX Subsection "Websites"
The following websites have more information about this module, and may be of help to you. As always,
in addition to those websites please use your favorite search engine to discover more resources.
.IP "\(bu" 4
MetaCPAN
.Sp
A modern, open-source \s-1CPAN\s0 search engine, useful to view \s-1POD\s0 in \s-1HTML\s0 format.
.Sp
<https://metacpan.org/release/CLI\-Helpers>
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's Bug Tracker
.Sp
The \s-1RT\s0 ( Request Tracker ) website is the default bug/issue tracking system for \s-1CPAN.\s0
.Sp
<https://rt.cpan.org/Public/Dist/Display.html?Name=CLI\-Helpers>
.SS "Source Code"
.IX Subsection "Source Code"
This module's source code is available by visiting:
<https://github.com/reyjrar/CLI\-Helpers>
