.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Git::Helpers 3"
.TH Git::Helpers 3 "2019-09-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Git::Helpers \- Shortcuts for common Git commands
.SH "VERSION"
.IX Header "VERSION"
version 0.000020
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&    use Git::Helpers qw(
\&        checkout_root
\&        current_branch_name
\&        https_remote_url
\&        is_inside_work_tree
\&        remote_url
\&        travis_url
\&    );
\&
\&    my $dir              = \*(Aq/path/to/folder/in/git/checkout\*(Aq;
\&    my $root             = checkout_root($dir);
\&    my $current_branch   = current_branch_name();
\&    my $https_remote_url = https_remote_url();
\&    my $inside_work_tree = is_inside_work_tree();
\&    my $remote_url       = remote_url(\*(Aqupstream\*(Aq);
\&    my $travis_url       = travis_url();
.Ve
.ie n .SS "checkout_root( $dir )"
.el .SS "checkout_root( \f(CW$dir\fP )"
.IX Subsection "checkout_root( $dir )"
Gives you the root level of the git checkout which you are currently in.
Optionally accepts a directory parameter.  If you provide the directory
parameter, \f(CW\*(C`checkout_root\*(C'\fR will temporarily \f(CW\*(C`chdir\*(C'\fR to this directory and
find the top level of the repository.
.PP
This method will throw an exception if it cannot find a git repository at the
directory provided.
.SS "current_branch_name"
.IX Subsection "current_branch_name"
Returns the name of the current branch.
.ie n .SS "https_remote_url( $remote_name, $use_current_branch )"
.el .SS "https_remote_url( \f(CW$remote_name\fP, \f(CW$use_current_branch\fP )"
.IX Subsection "https_remote_url( $remote_name, $use_current_branch )"
This is a browser-friendly \s-1URL\s0 for the remote, fixed up in such a way that
GitHub (hopefully) doesn't need to redirect your \s-1URL.\s0
.PP
Turns git@github.com:oalders/git\-helpers.git into https://github.com/oalders/git\-helpers
.PP
Turns https://github.com/oalders/git\-helpers.git into https://github.com/oalders/git\-helpers
.PP
Defaults to using \f(CW\*(C`origin\*(C'\fR as the remote if none is supplied.
.PP
Defaults to master branch, but can also display current branch.
.PP
.Vb 1
\&    my $current_branch_url = https_remote_url( \*(Aqorigin\*(Aq, 1 );
.Ve
.ie n .SS "ignored_files( $dir )"
.el .SS "ignored_files( \f(CW$dir\fP )"
.IX Subsection "ignored_files( $dir )"
Returns an arrayref of files which exist in your checkout, but are ignored by
Git.  Optionally accepts a directory as an argument.  Defaults to \*(L".\*(R".
.PP
Throws an exception if there has been an error running the command.
.SS "is_inside_work_tree"
.IX Subsection "is_inside_work_tree"
Returns \f(CW\*(C`true\*(C'\fR if \f(CW\*(C`git rev\-parse \-\-is\-inside\-work\-tree\*(C'\fR returns \f(CW\*(C`true\*(C'\fR.
Otherwise returns \f(CW\*(C`false\*(C'\fR. This differs slightly from the behaviour of
\&\f(CW\*(C`\-\-is\-inside\-work\-tree\*(C'\fR in real life, since it returns \f(CW\*(C`fatal\*(C'\fR rather than
\&\f(CW\*(C`false\*(C'\fR if run outside of a git repository.
.ie n .SS "remote_url( $remote_name )"
.el .SS "remote_url( \f(CW$remote_name\fP )"
.IX Subsection "remote_url( $remote_name )"
Returns a \s-1URL\s0 for the remote you've requested by name.  Defaults to 'origin'.
Provides you with the exact \s-1URL\s0 which git returns. Nothing is fixed up for you.
.PP
.Vb 5
\&    # defaults to \*(Aqorigin\*(Aq
\&    my $remote_url = remote_url();
\&    # $remote_url is now possibly something like one of the following:
\&    # git@github.com:oalders/git\-helpers.git
\&    # https://github.com/oalders/git\-helpers.git
\&
\&    # get URL for upstream remote
\&    my $upstream_url = remote_url(\*(Aqupstream\*(Aq);
.Ve
.ie n .SS "travis_url( $remote_name )"
.el .SS "travis_url( \f(CW$remote_name\fP )"
.IX Subsection "travis_url( $remote_name )"
Returns a travis\-ci.org \s-1URL\s0 for the remote you've requested by name.
Defaults to 'origin'.
.PP
.Vb 2
\&    # get Travis URL for remote named "origin"
\&    my $origin_travis_url = travis_url();
\&
\&    # get Travis URL for remote named "upstream"
\&    my $upstream_travis_url = travis_url(\*(Aqupstream\*(Aq);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Olaf Alders <olaf@wundercounter.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2015\-2019 by Olaf Alders.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
