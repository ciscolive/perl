.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::Mechanize::Chrome::Install 3"
.TH WWW::Mechanize::Chrome::Install 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "INSTALLING WWW::Mechanize::Chrome"
.IX Header "INSTALLING WWW::Mechanize::Chrome"
.ie n .SS "Install the ""chrome"" executable"
.el .SS "Install the \f(CWchrome\fP executable"
.IX Subsection "Install the chrome executable"
\&\f(CW\*(C`WWW::Mechanize::Chrome\*(C'\fR requires that you have the Chrome browser installed
on your system. If Chrome is not installed, please consult
Google's instructions <https://support.google.com/chrome/answer/95346> for
help installing the Chrome browser.
.PP
\&\f(CW\*(C`WWW::Mechanize::Chrome\*(C'\fR will do its best to locate Chrome's executable file
on your system. With any luck, it will find the executable you want to use. If
\&\f(CW\*(C`WWW::Mechanize::Chrome\*(C'\fR does not find Chrome on your system or you want to
use a different executable, you can use the \f(CW\*(C`launch_exe\*(C'\fR constructor argument
to tell \f(CW\*(C`WWW::Mechanize::Chrome\*(C'\fR where to find it. You can alse set the
\&\f(CW\*(C`CHROME_BIN\*(C'\fR environment variable to the absolute path of the executable.
.ie n .SS "Test the ""chrome"" executable"
.el .SS "Test the \f(CWchrome\fP executable"
.IX Subsection "Test the chrome executable"
You should verify that Chrome's executable is working properly. On Ubuntu, the
executable is typically named \f(CW\*(C`chrome\-browser\*(C'\fR and so you can test Chrome's
installation with:
.PP
\&\f(CW\*(C`chrome\-browser \-\-version\*(C'\fR
.PP
and you should see something like \f(CW\*(C`Google Chrome 67.0.3396.99\*(C'\fR returned.
.PP
Note that the command you run will vary based on your operating sytem and
possibly the version of Chrome installed.
.PP
On a Debian system, for example, the command will most likely be something
like:
.PP
\&\f(CW\*(C`google\-chrome\-stable \-\-version\*(C'\fR or
\&\f(CW\*(C`google\-chrome\-beta \-\-version\*(C'\fR or
\&\f(CW\*(C`google\-chrome\-unstable \-\-version\*(C'\fR
.PP
On Windows, the executable is named \f(CW\*(C`chrome.exe\*(C'\fR and doesn't output
information to the console but you can check that Chrome starts by running:
.PP
\&\f(CW\*(C`chrome\*(C'\fR
.PP
in the terminal.
.PP
On MacOS, the executable can usually be be found inside the \f(CW\*(C`Google Chrome.app\*(C'\fR
package in the \f(CW\*(C`/Applications\*(C'\fR directory and its installation can be
tested with something like the following:
.PP
\&\f(CW\*(C`/Applications/Google\e Chrome.app/Contents/MacOS/Google\e Chrome \-\-version\*(C'\fR
.PP
or, if Chrome is installed for a single user:
.PP
\&\f(CW\*(C`/Users/<user_name>/Applications/Google\e Chrome.app/Contents/MacOS/Google\e Chrome \-\-version\*(C'\fR
.PP
If you are having trouble finding, installing, or running Chrome on your
system, please consult the appropriate documentation or a knowledgeable expert.
.SS "Chrome versions"
.IX Subsection "Chrome versions"
Note that the Chrome version numbers do not denote availability of features.
Features can still be added to Chrome v62 when Chrome v64 is already out.
.PP
If you are serious about automating a website, use a separate copy of Chrome
and disable its automatic updates.
.SS "Module prerequisites on \s-1OSX\s0"
.IX Subsection "Module prerequisites on OSX"
\fIImager::File::PNG\fR
.IX Subsection "Imager::File::PNG"
.PP
This module relies on Imager for processing screenshots. If you don't need
this functionality, you can ignore the Imager and Imager::File::PNG
installation and use this module with the system Perl provided by Apple.
.PP
The installation of Imager::File::PNG works on \s-1OSX\s0 using the Homebrew tool
and the Perl installable through Homebrew:
.PP
.Vb 3
\&    brew install perl\-5.28
\&    brew install libpng
\&    cpan Imager::File::PNG
.Ve
.PP
I haven't been able to make it work using the system Perl.
.SH "RUNNING THE TEST SUITE"
.IX Header "RUNNING THE TEST SUITE"
The normal test invocation is 'make test'.
.PP
If your executable has a different name than \f(CW\*(C`chrome\-browser\*(C'\fR or
\&\f(CW\*(C`chrome.exe\*(C'\fR or is not in your path, then set the environment variable
\&\f(CW\*(C`CHROME_BIN\*(C'\fR to the absolute path.
.PP
If you have Chrome already running, it must have been started with the
\&\f(CW\*(C`<\-\-remote\-debugging\-port=9222\*(C'\fR> option to enable access to the developer \s-1API.\s0
You may want to set up a dedicated and version pinned version of Chrome for your
automation.
.SS "Running Chrome on a different X display"
.IX Subsection "Running Chrome on a different X display"
All supported versions of Chrome support the headless mode now.
If you want to observe what the browser is doing on a different X display,
you can achieve that by (1) not running any chrome binary and (2) start a
separate display with Xvfb and (3) set the \s-1DISPLAY\s0 variable accordingly. E.g.:
.PP
.Vb 2
\&  Xvfb :121 &
\&  DISPLAY=:121 CHROME_BIN=/usr/bin/google\-chrome\-stable make test
.Ve
.SH "INSTALLING CUSTOM VERSIONS OF CHROME"
.IX Header "INSTALLING CUSTOM VERSIONS OF CHROME"
When doing serious testing, automation or scraping, you want to use a separate
instance of the browser. You should install it into its own directory
and disable automatic updates.
.SS "Windows"
.IX Subsection "Windows"
Woolyss.com keeps an archive of old Chrome builds. Download the \*(L"Archive\*(R"
version you want from here and unpack the archive it into its own directory:
.PP
<https://chromium.woolyss.com/#windows\-64\-bit>
.PP
You can then use the custom Chrome executable by setting (for example)
.PP
.Vb 1
\&  set CHROME_BIN=C:\eScraping\echrome\-versions\echrome\-win32\-78.0.3904.0\echrome.exe
.Ve
.SS "Debian (Linux)"
.IX Subsection "Debian (Linux)"
This site keeps an archive of old Chrome builds for Linux. Download the
\&\*(L"Linux_portable\*(R" version you want from here and unpack the archive it into its own directory:
.PP
<https://ungoogled\-software.github.io/ungoogled\-chromium\-binaries/releases/linux_portable/64bit/>
.PP
These packages are supposed to work on any supported Linux distribution.
