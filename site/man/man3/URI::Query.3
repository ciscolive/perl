.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "URI::Query 3"
.TH URI::Query 3 "2016-08-10" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
URI::Query \- class providing URI query string manipulation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    # Constructor \- using a GET query string
\&    $qq = URI::Query\->new($query_string);
\&    # OR Constructor \- using a hashref of key => value parameters
\&    $qq = URI::Query\->new($cgi\->Vars);
\&    # OR Constructor \- using an array of successive keys and values
\&    $qq = URI::Query\->new(@params);
\&
\&    # Clone the current object
\&    $qq2 = $qq\->clone;
\&
\&    # Revert back to the initial constructor state (to do it all again)
\&    $qq\->revert;
\&
\&    # Remove all occurrences of the given parameters
\&    $qq\->strip(\*(Aqpage\*(Aq, \*(Aqnext\*(Aq);
\&
\&    # Remove all parameters except the given ones
\&    $qq\->strip_except(\*(Aqpagesize\*(Aq, \*(Aqorder\*(Aq);
\&
\&    # Remove all empty/undefined parameters
\&    $qq\->strip_null;
\&
\&    # Replace all occurrences of the given parameters
\&    $qq\->replace(page => $page, foo => \*(Aqbar\*(Aq);
\&
\&    # Set the argument separator to use for output (default: unescaped \*(Aq&\*(Aq)
\&    $qq\->separator(\*(Aq;\*(Aq);
\&
\&    # Output the current query string
\&    print "$qq";           # OR $qq\->stringify;
\&    # Stringify with explicit argument separator
\&    $qq\->stringify(\*(Aq;\*(Aq);
\&
\&    # Output the current query string with a leading \*(Aq?\*(Aq
\&    $qq\->qstringify;
\&    # Stringify with a leading \*(Aq?\*(Aq and an explicit argument separator
\&    $qq\->qstringify(\*(Aq;\*(Aq);
\&
\&    # Get a flattened hash/hashref of the current parameters
\&    #   (single item parameters as scalars, multiples as an arrayref)
\&    my %qq = $qq\->hash;
\&
\&    # Get a non\-flattened hash/hashref of the current parameters
\&    #   (parameter => arrayref of values)
\&    my %qq = $qq\->hash_arrayref;
\&
\&    # Get the current query string as a set of hidden input tags
\&    print $qq\->hidden;
\&
\&    # Check whether the query has changed since construction
\&    if ($qq\->has_changed) {
\&      print "changed version: $qq\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
URI::Query provides simple \s-1URI\s0 query string manipulation, allowing you
to create and manipulate \s-1URI\s0 query strings from \s-1GET\s0 and \s-1POST\s0 requests in
web applications. This is primarily useful for creating links where you
wish to preserve some subset of the parameters to the current request,
and potentially add or replace others. Given a query string this is
doable with regexes, of course, but making sure you get the anchoring
and escaping right is tedious and error-prone \- this module is simpler.
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
URI::Query objects can be constructed from scalar query strings
('foo=1&bar=2&bar=3'), from a hashref which has parameters as keys, and
values either as scalars or arrayrefs of scalars (to handle the case of
parameters with multiple values e.g. { foo => '1', bar => [ '2', '3' ] }),
or arrays composed of successive parameters-value pairs 
e.g. ('foo', '1', 'bar', '2', 'bar', '3'). For instance:
.PP
.Vb 2
\&    # Constructor \- using a GET query string
\&    $qq = URI::Query\->new($query_string);
\&
\&    # Constructor \- using an array of successive keys and values
\&    $qq = URI::Query\->new(@params);
\&
\&    # Constructor \- using a hashref of key => value parameters,
\&    # where values are either scalars or arrayrefs of scalars
\&    $qq = URI::Query\->new($cgi\->Vars);
.Ve
.PP
URI::Query also handles \s-1CGI\s0.pm\-style hashrefs, where multiple
values are packed into a single string, separated by the \*(L"\e0\*(R" (null)
character.
.PP
All keys and values are \s-1URI\s0 unescaped at construction time, and are
stored and referenced unescaped. So a query string like:
.PP
.Vb 1
\&    group=prod%2Cinfra%2Ctest&op%3Aset=x%3Dy
.Ve
.PP
is stored as:
.PP
.Vb 2
\&    \*(Aqgroup\*(Aq     => \*(Aqprod,infra,test\*(Aq
\&    \*(Aqop:set\*(Aq    => \*(Aqx=y\*(Aq
.Ve
.PP
You should always use the unescaped/normal variants in methods i.e.
.PP
.Vb 1
\&     $qq\->replace(\*(Aqop:set\*(Aq  => \*(Aqx=z\*(Aq);
.Ve
.PP
\&\s-1NOT:\s0
.PP
.Vb 1
\&     $qq\->replace(\*(Aqop%3Aset\*(Aq  => \*(Aqx%3Dz\*(Aq);
.Ve
.PP
You can also construct a new URI::Query object by cloning an existing
one:
.PP
.Vb 1
\&     $qq2 = $qq\->clone;
.Ve
.SS "\s-1MODIFIER METHODS\s0"
.IX Subsection "MODIFIER METHODS"
All modifier methods change the state of the URI::Query object in some
way, and return \f(CW$self\fR, so they can be used in chained style e.g.
.PP
.Vb 1
\&    $qq\->revert\->strip(\*(Aqfoo\*(Aq)\->replace(bar => 123);
.Ve
.PP
Note that URI::Query stashes a copy of the parameter set that existed
at construction time, so that any changes made by these methods can be 
rolled back using '\fBrevert()\fR'. So you don't (usually) need to keep 
multiple copies around to handle incompatible changes.
.IP "\fBrevert()\fR" 4
.IX Item "revert()"
Revert the current parameter set back to that originally given at
construction time i.e. discard all changes made since construction.
.ie n .IP "strip($param1, $param2, ...)" 4
.el .IP "strip($param1, \f(CW$param2\fR, ...)" 4
.IX Item "strip($param1, $param2, ...)"
Remove all occurrences of the given parameters and their values from
the current parameter set.
.ie n .IP "strip_except($param1, $param2, ...)" 4
.el .IP "strip_except($param1, \f(CW$param2\fR, ...)" 4
.IX Item "strip_except($param1, $param2, ...)"
Remove all parameters \s-1EXCEPT\s0 those given from the current parameter
set.
.IP "\fBstrip_null()\fR" 4
.IX Item "strip_null()"
Remove all parameters that have a value of undef from the current
parameter set.
.ie n .IP "replace($param1 => $value1, $param2, $value2, ...)" 4
.el .IP "replace($param1 => \f(CW$value1\fR, \f(CW$param2\fR, \f(CW$value2\fR, ...)" 4
.IX Item "replace($param1 => $value1, $param2, $value2, ...)"
Replace the values of the given parameters in the current parameter set
with these new ones. Parameter names must be scalars, but values can be
either scalars or arrayrefs of scalars, when multiple values are desired.
.Sp
Note that 'replace' can also be used to add or append, since there's
no requirement that the parameters already exist in the current parameter
set.
.IP "strip_like($regex)" 4
.IX Item "strip_like($regex)"
Remove all parameters whose names match the given (qr-quoted) regex e.g.
.Sp
.Vb 1
\&    $qq\->strip_like(qr/^utm/)
.Ve
.Sp
Does \s-1NOT\s0 match against parameter values.
.IP "separator($separator)" 4
.IX Item "separator($separator)"
Set the argument separator to use for output. Default: '&'.
.SS "\s-1ACCESSOR METHODS\s0"
.IX Subsection "ACCESSOR METHODS"
.IP "\fBhas_changed()\fR" 4
.IX Item "has_changed()"
If the query is actually changed by any of the modifier methods (strip,
strip_except, strip_null, strip_like, or replace) it sets an internal
changed flag which can be access by:
.Sp
.Vb 1
\&    $qq\->has_changed
.Ve
.Sp
\&\fBrevert()\fR resets the has_changed flag to false.
.SS "\s-1OUTPUT METHODS\s0"
.IX Subsection "OUTPUT METHODS"
.ie n .IP """$qq"", \fBstringify()\fR, stringify($separator)" 4
.el .IP "``$qq'', \fBstringify()\fR, stringify($separator)" 4
.IX Item "$qq, stringify(), stringify($separator)"
Return the current parameter set as a conventional param=value query
string, using \f(CW$separator\fR as the separator if given. e.g.
.Sp
.Vb 1
\&    foo=1&bar=2&bar=3
.Ve
.Sp
Note that all parameters and values are \s-1URI\s0 escaped by \fBstringify()\fR, so
that query-string reserved characters do not occur within elements. For 
instance, a parameter set of:
.Sp
.Vb 2
\&    \*(Aqgroup\*(Aq     => \*(Aqprod,infra,test\*(Aq
\&    \*(Aqop:set\*(Aq    => \*(Aqx=y\*(Aq
.Ve
.Sp
will be stringified as:
.Sp
.Vb 1
\&    group=prod%2Cinfra%2Ctest&op%3Aset=x%3Dy
.Ve
.IP "\fBqstringify()\fR, qstringify($separator)" 4
.IX Item "qstringify(), qstringify($separator)"
Convenience method to stringify with a leading '?' e.g.
.Sp
.Vb 1
\&    ?foo=1&bar=2&bar=3
.Ve
.IP "\fBhash()\fR" 4
.IX Item "hash()"
Return a hash (in list context) or hashref (in scalar context) of the
current parameter set. Single-item parameters have scalar values, while
while multiple-item parameters have arrayref values e.g.
.Sp
.Vb 4
\&    {
\&        foo => 1,
\&        bar => [ 2, 3 ],
\&    }
.Ve
.IP "\fBhash_arrayref()\fR" 4
.IX Item "hash_arrayref()"
Return a hash (in list context) or hashref (in scalar context) of the
current parameter set. All values are returned as arrayrefs, including
those with single values e.g.
.Sp
.Vb 4
\&    {
\&        foo => [ 1 ],
\&        bar => [ 2, 3 ],
\&    }
.Ve
.IP "\fBhidden()\fR" 4
.IX Item "hidden()"
Returns the current parameter set as a concatenated string of hidden
input tags, one per parameter-value e.g.
.Sp
.Vb 3
\&    <input type="hidden" name="foo" value="1" />
\&    <input type="hidden" name="bar" value="2" />
\&    <input type="hidden" name="bar" value="3" />
.Ve
.SH "BUGS AND CAVEATS"
.IX Header "BUGS AND CAVEATS"
Please report bugs and/or feature requests to 
\&\f(CW\*(C`bug\-uri\-query at rt.cpan.org\*(C'\fR, or through
the web interface at 
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=URI\-Query>.
.PP
Should allow unescaping of input to be turned off, for situations in 
which it's already been done. Please let me know if you find you
actually need this.
.PP
I don't think it makes sense on the output side though, since you need
to understand the structure of the query to escape elements correctly.
.SH "PATCHES"
.IX Header "PATCHES"
URI::Query code lives at <https://github.com/gavincarr/URI\-Query>.
Patches / pull requests welcome!
.SH "AUTHOR"
.IX Header "AUTHOR"
Gavin Carr <gavin@openfusion.com.au>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2004\-2015, Gavin Carr.
.PP
This program is free software. You may copy or redistribute it under the
same terms as perl itself.
.PP
# vim:sw=4:et
