.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "File::Rsync::Mirror::Recentfile::Done 3"
.TH File::Rsync::Mirror::Recentfile::Done 3 "2012-12-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Rsync::Mirror::Recentfile::Done \- intervals of already rsynced timespans
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& my $done = File::Rsync::Mirror::Recentfile::Done\->new;
\& $done\->register ( $recent_events, [3,4,5,9] ); # registers elements 3\-5 and 9
\& my $boolean = $done\->covered ( $epoch );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Keeping track of already rsynced timespans.
.SH "EXPORT"
.IX Header "EXPORT"
No exports.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.ie n .SS "my $obj = \s-1CLASS\-\s0>new(%hash)"
.el .SS "my \f(CW$obj\fP = \s-1CLASS\-\s0>new(%hash)"
.IX Subsection "my $obj = CLASS->new(%hash)"
Constructor. On every argument pair the key is a method name and the
value is an argument to that method name.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.IP "verbose" 4
.IX Item "verbose"
Boolean to turn on a bit verbosity.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$boolean = $obj\->covered ( $epoch1, $epoch2 )"
.el .SS "\f(CW$boolean\fP = \f(CW$obj\fP\->covered ( \f(CW$epoch1\fP, \f(CW$epoch2\fP )"
.IX Subsection "$boolean = $obj->covered ( $epoch1, $epoch2 )"
.ie n .SS "$boolean = $obj\->covered ( $epoch )"
.el .SS "\f(CW$boolean\fP = \f(CW$obj\fP\->covered ( \f(CW$epoch\fP )"
.IX Subsection "$boolean = $obj->covered ( $epoch )"
The first form returns true if both timestamps \f(CW$epoch1\fR and \f(CW$epoch2\fR in
floating point notation have been registered within one interval,
otherwise false.
.PP
The second form returns true if this timestamp has been registered.
.ie n .SS "(void) $obj1\->merge ( $obj2 )"
.el .SS "(void) \f(CW$obj1\fP\->merge ( \f(CW$obj2\fP )"
.IX Subsection "(void) $obj1->merge ( $obj2 )"
Integrates all intervals in \f(CW$obj2\fR into \f(CW$obj1\fR. Overlapping intervals
are conflated/folded/consolidated. Sort order is preserved as decreasing.
.ie n .SS "(void) $obj\->register ( $recent_events_arrayref, $register_arrayref )"
.el .SS "(void) \f(CW$obj\fP\->register ( \f(CW$recent_events_arrayref\fP, \f(CW$register_arrayref\fP )"
.IX Subsection "(void) $obj->register ( $recent_events_arrayref, $register_arrayref )"
.ie n .SS "(void) $obj\->register ( $recent_events_arrayref )"
.el .SS "(void) \f(CW$obj\fP\->register ( \f(CW$recent_events_arrayref\fP )"
.IX Subsection "(void) $obj->register ( $recent_events_arrayref )"
The first arrayref is a list of hashes that contain a key called
\&\f(CW\*(C`epoch\*(C'\fR which is a string looking like a number. The second arrayref
is a list if integers which point to elements in the first arrayref to
be registered.
.PP
The second form registers all events in \f(CW$recent_events_arrayref\fR.
.SS "reset"
.IX Subsection "reset"
Forgets everything ever done and gives way for a new round of
mirroring. Usually called when the dirtymark on upstream has changed.
.SH "PRIVATE METHODS"
.IX Header "PRIVATE METHODS"
.SS "_intervals"
.IX Subsection "_intervals"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008, 2009 Andreas KÃ¶nig.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
