.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bare 3"
.TH Bare 3 "2013-09-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Bare \- Minimal XML parser implemented via a C state engine
.SH "VERSION"
.IX Header "VERSION"
0.53
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use XML::Bare;
\&  
\&  my $ob = new XML::Bare( text => \*(Aq<xml><name>Bob</name></xml>\*(Aq );
\&  
\&  # Parse the xml into a hash tree
\&  my $root = $ob\->parse();
\&  
\&  # Print the content of the name node
\&  print $root\->{xml}\->{name}\->{value};
\&  
\&  \-\-\-
\&  
\&  # Load xml from a file ( assume same contents as first example )
\&  my $ob2 = new XML::Bare( file => \*(Aqtest.xml\*(Aq );
\&  
\&  my $root2 = $ob2\->parse();
\&  
\&  $root2\->{xml}\->{name}\->{value} = \*(AqTim\*(Aq;
\&  
\&  # Save the changes back to the file
\&  $ob2\->save();
\&  
\&  \-\-\-
\&  
\&  # Load xml and verify against XBS ( XML Bare Schema )
\&  my $xml_text = \*(Aq<xml><item name=bob/></xml>\*(Aq\*(Aq
\&  my $schema_text = \*(Aq<xml><item* name=[a\-z]+></item*></xml>\*(Aq
\&  my $ob = new XML::Bare( text => $xml_text, schema => { text => $schema_text } );
\&  $ob\->parse(); # this will error out if schema is invalid
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a 'Bare' \s-1XML\s0 parser. It is implemented in C. The parser
itself is a simple state engine that is less than 500 lines of C. The
parser builds a C struct tree from input text. That C struct tree is
converted to a Perl hash by a Perl function that makes basic calls back
to the C to go through the nodes sequentially.
.PP
The parser itself will only cease parsing if it encounters tags that
are not closed properly. All other inputs will parse, even invalid
inputs. To allowing checking for validity, a schema checker is included
in the module as well.
.PP
The schema format is custom and is meant to be as simple as possible.
It is based loosely around the way multiplicity is handled in Perl
regular expressions.
.SS "Supported \s-1XML\s0"
.IX Subsection "Supported XML"
To demonstrate what sort of \s-1XML\s0 is supported, consider the following
examples. Each of the \s-1PERL\s0 statements evaluates to true.
.IP "\(bu" 2
Node containing just text
.Sp
.Vb 2
\&  XML: <xml>blah</xml>
\&  PERL: $root\->{xml}\->{value} eq "blah";
.Ve
.IP "\(bu" 2
Subset nodes
.Sp
.Vb 2
\&  XML: <xml><name>Bob</name></xml>
\&  PERL: $root\->{xml}\->{name}\->{value} eq "Bob";
.Ve
.IP "\(bu" 2
Attributes unquoted
.Sp
.Vb 2
\&  XML: <xml><a href=index.htm>Link</a></xml>
\&  PERL: $root\->{xml}\->{a}\->{href}\->{value} eq "index.htm";
.Ve
.IP "\(bu" 2
Attributes quoted
.Sp
.Vb 2
\&  XML: <xml><a href="index.htm">Link</a></xml>
\&  PERL: $root\->{xml}\->{a}\->{href}\->{value} eq "index.htm";
.Ve
.IP "\(bu" 2
\&\s-1CDATA\s0 nodes
.Sp
.Vb 2
\&  XML: <xml><raw><![CDATA[some raw $~<!bad xml<>]]></raw></xml>
\&  PERL: $root\->{xml}\->{raw}\->{value} eq "some raw \e$~<!bad xml<>";
.Ve
.IP "\(bu" 2
Multiple nodes; form array
.Sp
.Vb 2
\&  XML: <xml><item>1</item><item>2</item></xml>
\&  PERL: $root\->{xml}\->{item}\->[0]\->{value} eq "1";
.Ve
.IP "\(bu" 2
Forcing array creation
.Sp
.Vb 2
\&  XML: <xml><multi_item/><item>1</item></xml>
\&  PERL: $root\->{xml}\->{item}\->[0]\->{value} eq "1";
.Ve
.IP "\(bu" 2
One comment supported per node
.Sp
.Vb 2
\&  XML: <xml><!\-\-test\-\-></xml>
\&  PERL: $root\->{xml}\->{comment} eq \*(Aqtest\*(Aq;
.Ve
.SS "Schema Checking"
.IX Subsection "Schema Checking"
Schema checking is done by providing the module with an \s-1XBS\s0 (XML::Bare Schema) to check
the \s-1XML\s0 against. If the \s-1XML\s0 checks as valid against the schema, parsing will continue as
normal. If the \s-1XML\s0 is invalid, the parse function will die, providing information about
the failure.
.PP
The following information is provided in the error message:
.IP "\(bu" 2
The type of error
.IP "\(bu" 2
Where the error occured ( line and char )
.IP "\(bu" 2
A short snippet of the \s-1XML\s0 at the point of failure
.SS "\s-1XBS\s0 ( XML::Bare Schema ) Format"
.IX Subsection "XBS ( XML::Bare Schema ) Format"
.IP "\(bu" 2
Required nodes
.Sp
.Vb 2
\&  XML: <xml></xml>
\&  XBS: <xml/>
.Ve
.IP "\(bu" 2
Optional nodes \- allow one
.Sp
.Vb 3
\&  XML: <xml></xml>
\&  XBS: <xml item?/>
\&  or XBS: <xml><item?/></xml>
.Ve
.IP "\(bu" 2
Optional nodes \- allow 0 or more
.Sp
.Vb 2
\&  XML: <xml><item/></xml>
\&  XBS: <xml item*/>
.Ve
.IP "\(bu" 2
Required nodes \- allow 1 or more
.Sp
.Vb 2
\&  XML: <xml><item/><item/></xml>
\&  XBS: <xml item+/>
.Ve
.IP "\(bu" 2
Nodes \- specified minimum and maximum number
.Sp
.Vb 4
\&  XML: <xml><item/><item/></xml>
\&  XBS: <xml item{1,2}/>
\&  or XBS: <xml><item{1,2}/></xml>
\&  or XBS: <xml><item{1,2}></item{1,2}></xml>
.Ve
.IP "\(bu" 2
Multiple acceptable node formats
.Sp
.Vb 2
\&  XML: <xml><item type=box volume=20/><item type=line length=10/></xml>
\&  XBS: <xml><item type=box volume/><item type=line length/></xml>
.Ve
.IP "\(bu" 2
Regular expressions checking for values
.Sp
.Vb 2
\&  XML: <xml name=Bob dir=up num=10/>
\&  XBS: <xml name=[A\-Za\-z]+ dir=up|down num=[0\-9]+/>
.Ve
.IP "\(bu" 2
Require multi_ tags
.Sp
.Vb 2
\&  XML: <xml><multi_item/></xml>
\&  XBS: <xml item@/>
.Ve
.SS "Parsed Hash Structure"
.IX Subsection "Parsed Hash Structure"
The hash structure returned from \s-1XML\s0 parsing is created in a specific format.
Besides as described above, the structure contains some additional nodes in
order to preserve information that will allow that structure to be correctly
converted back to \s-1XML.\s0
.PP
Nodes may contain the following 3 additional subnodes:
.IP "\(bu" 2
_i
.Sp
The character offset within the original parsed \s-1XML\s0 of where the node
begins. This is used to provide line information for errors when \s-1XML\s0
fails a schema check.
.IP "\(bu" 2
_pos
.Sp
This is a number indicating the ordering of nodes. It is used to allow
items in a perl hash to be sorted when writing back to xml. Note that
items are not sorted after parsing in order to save time if all you
are doing is reading and you do not care about the order.
.Sp
In future versions of this module an option will be added to allow
you to sort your nodes so that you can read them in order.
( note that multiple nodes of the same name are stored in order )
.IP "\(bu" 2
_att
.Sp
This is a boolean value that exists and is 1 iff the node is an
attribute.
.SS "Parsing Limitations / Features"
.IX Subsection "Parsing Limitations / Features"
.IP "\(bu" 2
\&\s-1CDATA\s0 parsed correctly, but stripped if unneeded
.Sp
Currently the contents of a node that are \s-1CDATA\s0 are read and
put into the value hash, but the hash structure does not have
a value indicating the node contains \s-1CDATA.\s0
.Sp
When converting back to \s-1XML,\s0 the contents of the value hash
are parsed to check for xml incompatible data using a regular
expression. If '\s-1CDATA\s0 like' stuff is encountered, the node
is output as \s-1CDATA.\s0
.IP "\(bu" 2
Node position stored, but hash remains unsorted
.Sp
The ordering of nodes is noted using the '_pos' value, but
the hash itself is not ordered after parsing. Currently
items will be out of order when looking at them in the
hash.
.Sp
Note that when converted back to \s-1XML,\s0 the nodes are then
sorted and output in the correct order to \s-1XML.\s0 Note that
nodes of the same name with the same parent will be
grouped together; the position of the first item to
appear will determine the output position of the group.
.IP "\(bu" 2
Comments are parsed but only one is stored per node.
.Sp
For each node, there can be a comment within it, and that
comment will be saved and output back when dumping to \s-1XML.\s0
.IP "\(bu" 2
Comments override output of immediate value
.Sp
If a node contains only a comment node and a text value,
only the comment node will be displayed. This is in line
with treating a comment node as a node and only displaying
immediate values when a node contains no subnodes.
.IP "\(bu" 2
\&\s-1PI\s0 sections are parsed, but discarded
.IP "\(bu" 2
Unknown \f(CW\*(C`<!\*(C'\fR sections are parsed, but discarded
.IP "\(bu" 2
Attributes may use no quotes, single quotes, quotes, or backtics
.IP "\(bu" 2
Quoted attributes cannot contain escaped quotes
.Sp
No escape character is recognized within quotes. As a result,
regular quotes cannot be stored to \s-1XML,\s0 or the written \s-1XML\s0
will not be correct, due to all attributes always being written
using quotes.
.IP "\(bu" 2
Attributes are always written back to \s-1XML\s0 with quotes
.IP "\(bu" 2
Nodes cannot contain subnodes as well as an immediate value
.Sp
Actually nodes can in fact contain a value as well, but that
value will be discarded if you write back to \s-1XML.\s0 That value is
equal to the first continuous string of text besides a subnode.
.Sp
.Vb 2
\&  <node>text<subnode/>text2</node>
\&  ( the value of node is text )
\&
\&  <node><subnode/>text</node>
\&  ( the value of node is text )
\&
\&  <node>
\&    <subnode/>text
\&  </node>
\&  ( the value of node is "\en  " )
.Ve
.IP "\(bu" 2
Entities are not parsed
.Sp
No entity parsing is done. This is intentional. Future versions of the module
may include a feature to automatically parse entities, but by default any such
feature will be disabled in order to keep from slowing down the parser.
.Sp
Also, this is done so that round trip ( read and then write back out ) behavior
is consistent.
.IP "\(bu" 2
Nodes named value
.Sp
Previously iterations of this module had problems with nodes named 'value',
due to the fact that node contents are stored under the 'value' key already.
The current version should parse such files without any problem, although it
may be confusing to see a parsed tree with 'value' pointing to another hash
containing 'value' as well.
.Sp
In a future version of the module it will be possible to alter the name that
values are stored under.
.Sp
Note that node values are stored under the key 'content' when the \*(L"simple\*(R"
parsing mode is used, so as to be consistent with XML::Simple.
.SS "Module Functions"
.IX Subsection "Module Functions"
.IP "\(bu" 2
\&\f(CW\*(C`$ob = XML::Bare\->new( text => "[some xml]" )\*(C'\fR
.Sp
Create a new \s-1XML\s0 object, with the given text as the xml source.
.IP "\(bu" 2
\&\f(CW\*(C`$object = XML::Bare\->new( file => "[filename]" )\*(C'\fR
.Sp
Create a new \s-1XML\s0 object, with the given filename/path as the xml source
.IP "\(bu" 2
\&\f(CW\*(C`$object = XML::Bare\->new( text => "[some xml]", file => "[filename]" )\*(C'\fR
.Sp
Create a new \s-1XML\s0 object, with the given text as the xml input, and the given
filename/path as the potential output ( used by \fBsave()\fR )
.IP "\(bu" 2
\&\f(CW\*(C`$object = XML::Bare\->new( file => "data.xml", scheme => { file => "scheme.xbs" } )\*(C'\fR
.Sp
Create a new \s-1XML\s0 object and check to ensure it is valid xml by way of the \s-1XBS\s0 scheme.
.IP "\(bu" 2
\&\f(CW\*(C`$tree = $object\->parse()\*(C'\fR
.Sp
Parse the xml of the object and return a tree reference
.IP "\(bu" 2
\&\f(CW\*(C`$tree = $object\->simple()\*(C'\fR
.Sp
Alternate to the parse function which generates a tree similar to that
generated by XML::Simple. Note that the sets of nodes are turned into
arrays always, regardless of whether they have a 'name' attribute, unlike
XML::Simple.
.Sp
Note that currently the generated tree cannot be used with any of the
functions in this module that operate upon trees. The function is provided
purely as a quick and dirty way to read simple \s-1XML\s0 files.
.IP "\(bu" 2
\&\f(CW\*(C`$tree = xmlin( $xmlext, keeproot => 1 )\*(C'\fR
.Sp
The xmlin function is a shortcut to creating an XML::Bare object and
parsing it using the simple function. It behaves similarly to the
XML::Simple function by the same name. The keeproot option is optional
and if left out the root node will be discarded, same as the function
in XML::Simple.
.IP "\(bu" 2
\&\f(CW\*(C`$text = $object\->xml( [root] )\*(C'\fR
.Sp
Take the hash tree in [root] and turn it into cleanly indented ( 2 spaces )
\&\s-1XML\s0 text.
.IP "\(bu" 2
\&\f(CW\*(C`$text = $object\->html( [root], [root node name] )\*(C'\fR
.Sp
Take the hash tree in [root] and turn it into nicely colorized and styled
html. [root node name] is optional.
.IP "\(bu" 2
\&\f(CW\*(C`$object\->save()\*(C'\fR
.Sp
The the current tree in the object, cleanly indent it, and save it
to the file parameter specified when creating the object.
.IP "\(bu" 2
\&\f(CW\*(C`$value = xval $node, $default\*(C'\fR
.Sp
Returns the value of \f(CW$node\fR or \f(CW$default\fR if the node does not exist.
If default is not passed to the function, then '' is returned as
a default value when the node does not exist.
.IP "\(bu" 2
\&\f(CW\*(C`( $name, $age ) = xget( $personnode, qw/name age/ )\*(C'\fR
.Sp
Shortcut function to grab a number of values from a node all at the
same time. Note that this function assumes that all of the subnodes
exist; it will fail if they do not.
.IP "\(bu" 2
\&\f(CW\*(C`$text = XML::Bare::clean( text => "[some xml]" )\*(C'\fR
.Sp
Shortcut to creating an xml object and immediately turning it into clean xml text.
.IP "\(bu" 2
\&\f(CW\*(C`$text = XML::Bare::clean( file => "[filename]" )\*(C'\fR
.Sp
Similar to previous.
.IP "\(bu" 2
\&\f(CW\*(C`XML::Bare::clean( file => "[filename]", save => 1 )\*(C'\fR
.Sp
Clean up the xml in the file, saving the results back to the file
.IP "\(bu" 2
\&\f(CW\*(C`XML::Bare::clean( text => "[some xml]", save => "[filename]" )\*(C'\fR
.Sp
Clean up the xml provided, and save it into the specified file.
.IP "\(bu" 2
\&\f(CW\*(C`XML::Bare::clean( file => "[filename1]", save => "[filename2]" )\*(C'\fR
.Sp
Clean up the xml in filename1 and save the results to filename2.
.IP "\(bu" 2
\&\f(CW\*(C`$html = XML::Bare::tohtml( text => "[some xml]", root => \*(Aqxml\*(Aq )\*(C'\fR
.Sp
Shortcut to creating an xml object and immediately turning it into html.
Root is optional, and specifies the name of the root node for the xml
( which defaults to 'xml' )
.IP "\(bu" 2
\&\f(CW\*(C`$object\->add_node( [node], [nodeset name], name => value, name2 => value2, ... )\*(C'\fR
.Sp
.Vb 2
\&  Example:
\&    $object\->add_node( $root\->{xml}, \*(Aqitem\*(Aq, name => \*(AqBob\*(Aq );
\&    
\&  Result:
\&    <xml>
\&      <item>
\&        <name>Bob</name>
\&      </item>
\&    </xml>
.Ve
.IP "\(bu" 2
\&\f(CW\*(C`$object\->add_node_after( [node], [subnode within node to add after], [nodeset name], ... )\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`$object\->del_node( [node], [nodeset name], name => value )\*(C'\fR
.Sp
.Vb 10
\&  Example:
\&    Starting XML:
\&      <xml>
\&        <a>
\&          <b>1</b>
\&        </a>
\&        <a>
\&          <b>2</b>
\&        </a>
\&      </xml>
\&      
\&    Code:
\&      $xml\->del_node( $root\->{xml}, \*(Aqa\*(Aq, b=>\*(Aq1\*(Aq );
\&    
\&    Ending XML:
\&      <xml>
\&        <a>
\&          <b>2</b>
\&        </a>
\&      </xml>
.Ve
.IP "\(bu" 2
\&\f(CW\*(C`$object\->find_node( [node], [nodeset name], name => value )\*(C'\fR
.Sp
.Vb 12
\&  Example:
\&    Starting XML:
\&      <xml>
\&        <ob>
\&          <key>1</key>
\&          <val>a</val>
\&        </ob>
\&        <ob>
\&          <key>2</key>
\&          <val>b</val>
\&        </ob>
\&      </xml>
\&      
\&    Code:
\&      $object\->find_node( $root\->{xml}, \*(Aqob\*(Aq, key => \*(Aq1\*(Aq )\->{val}\->{value} = \*(Aqtest\*(Aq;
\&      
\&    Ending XML:
\&      <xml>
\&        <ob>
\&          <key>1</key>
\&          <val>test</val>
\&        </ob>
\&        <ob>
\&          <key>2</key>
\&          <val>b</val>
\&        </ob>
\&      </xml>
.Ve
.IP "\(bu" 2
\&\f(CW\*(C`$object\->find_by_perl( [nodeset], "[perl code]" )\*(C'\fR
.Sp
find_by_perl evaluates some perl code for each node in a set of nodes, and
returns the nodes where the perl code evaluates as true. In order to
easily reference node values, node values can be directly referred
to from within the perl code by the name of the node with a dash(\-) in
front of the name. See the example below.
.Sp
Note that this function returns an array reference as opposed to a single
node unlike the find_node function.
.Sp
.Vb 12
\&  Example:
\&    Starting XML:
\&      <xml>
\&        <ob>
\&          <key>1</key>
\&          <val>a</val>
\&        </ob>
\&        <ob>
\&          <key>2</key>
\&          <val>b</val>
\&        </ob>
\&      </xml>
\&      
\&    Code:
\&      $object\->find_by_perl( $root\->{xml}\->{ob}, "\-key eq \*(Aq1\*(Aq" )\->[0]\->{val}\->{value} = \*(Aqtest\*(Aq;
\&      
\&    Ending XML:
\&      <xml>
\&        <ob>
\&          <key>1</key>
\&          <val>test</val>
\&        </ob>
\&        <ob>
\&          <key>2</key>
\&          <val>b</val>
\&        </ob>
\&      </xml>
.Ve
.IP "\(bu" 2
\&\f(CW\*(C`XML::Bare::merge( [nodeset1], [nodeset2], [id node name] )\*(C'\fR
.Sp
Merges the nodes from nodeset2 into nodeset1, matching the contents of
each node based up the content in the id node.
.Sp
Example:
.Sp
.Vb 10
\&  Code:
\&    my $ob1 = new XML::Bare( text => "
\&      <xml>
\&        <multi_a/>
\&        <a>bob</a>
\&        <a>
\&          <id>1</id>
\&          <color>blue</color>
\&        </a>
\&      </xml>" );
\&    my $ob2 = new XML::Bare( text => "
\&      <xml>
\&        <multi_a/>
\&        <a>john</a>
\&        <a>
\&          <id>1</id>
\&          <name>bob</name>
\&          <bob>1</bob>
\&        </a>
\&      </xml>" );
\&    my $root1 = $ob1\->parse();
\&    my $root2 = $ob2\->parse();
\&    merge( $root1\->{\*(Aqxml\*(Aq}\->{\*(Aqa\*(Aq}, $root2\->{\*(Aqxml\*(Aq}\->{\*(Aqa\*(Aq}, \*(Aqid\*(Aq );
\&    print $ob1\->xml( $root1 );
\&  
\&  Output:
\&    <xml>
\&      <multi_a></multi_a>
\&      <a>bob</a>
\&      <a>
\&        <id>1</id>
\&        <color>blue</color>
\&        <name>bob</name>
\&        <bob>1</bob>
\&      </a>
\&    </xml>
.Ve
.IP "\(bu" 2
\&\f(CW\*(C`XML::Bare::del_by_perl( ... )\*(C'\fR
.Sp
Works exactly like find_by_perl, but deletes whatever matches.
.IP "\(bu" 2
\&\f(CW\*(C`XML::Bare::forcearray( [noderef] )\*(C'\fR
.Sp
Turns the node reference into an array reference, whether that
node is just a single node, or is already an array reference.
.IP "\(bu" 2
\&\f(CW\*(C`XML::Bare::new_node( ... )\*(C'\fR
.Sp
Creates a new node...
.IP "\(bu" 2
\&\f(CW\*(C`XML::Bare::newhash( ... )\*(C'\fR
.Sp
Creates a new hash with the specified value.
.IP "\(bu" 2
\&\f(CW\*(C`XML::Bare::simplify( [noderef] )\*(C'\fR
.Sp
Take a node with children that have immediate values and
creates a hashref to reference those values by the name of
each child.
.IP "\(bu" 2
\&\f(CW\*(C`XML::Bare::hash2xml( [hashref] )\*(C'\fR
.Sp
Take a recursive hash tree ( perhaps generated by the simplify function ) and turn it
into a raw \s-1XML\s0 string. Note that this function does not indent nicely. You will need
to feed this string back into the parser and output it again if you want it to look
nice. ( or you could use the 'clean' function to do it in one go )
.IP "\(bu" 2
\&\f(CW\*(C`XML::Bare\->new( text => "[xml]", unsafe => 1 )\*(C'\fR
.Sp
An extra speedy way to parse \s-1XML.\s0 It is unsafe; may harm pets and children. Don't
say you weren't warned. 30% speed boost compared to the normal parsing. You \-must\-
use \f(CW$ob\fR\->\fBsimple()\fR in combination with this for it to work properly.
.Sp
The speed boost is gained by skipping checks for the end of the string when in the
middle of properly formatted \s-1XML.\s0 The only time the check is done is within \*(L"values\*(R"
( which includes the space after the final closing </xml> )
.Sp
Also, in the unsafe mode, tags, complete with their attributes, must be on one line.
Node contents of course, can still have carriage returns...
.IP "\(bu" 2
\&\f(CW\*(C`$object\->read_more( text => "[xml fragment]" )\*(C'\fR
.Sp
Add more \s-1XML\s0 text to be handled. Note that this function must be called before
calling the parse function.
.Sp
Example:
.Sp
.Vb 8
\&  Code:
\&    my $ob = XML::Bare\->new( text => "
\&      <xml>
\&        <node>a</node>" );
\&    $ob\->read_more( text => "<node>b</node>" );
\&    $ob\->read_more( text => "</xml>" );
\&    my $root = $ob\->parse();
\&    print $ob\->xml( $root );
\&  
\&  Output:
\&    <xml>
\&      <node>a</node>
\&      <node>b</node>
\&    </xml>
.Ve
.Sp
Warning! Reading in additional \s-1XML\s0 fragments only works properly at proper \*(L"division points\*(R".
Currently the parser will \-not\- work properly if you split in the middle of a node value, or
in the middle of a node name. A future version of the module will be properly updated to handle
these cases.
.Sp
Currently there is little to no benefit to parsing this way, rather than simple concatenating
the two strings together and then reading all the \s-1XML\s0 in at once.
.SS "Functions Used Internally"
.IX Subsection "Functions Used Internally"
.IP "\(bu" 2
\&\f(CW\*(C`check() checkone() readxbs() free_tree_c()\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`lineinfo() c_parse() c_parse_unsafely() c_parse_more() c_parsefile() free_tree() xml2obj()\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`obj2xml() get_root() obj2html() xml2obj_simple()\*(C'\fR
.SS "Controversy"
.IX Subsection "Controversy"
Since the creation of this module there has been a fair amount of controvesy surrounding
it. A number of authors of other \s-1XML\s0 parsers have gone so far as to publicly attack this
module and claim that it 'does not parse \s-1XML\s0', and 'it is not \s-1XML\s0 compliant'. Some of the
same people seem to be angered by the inclusion of a benchmark, claiming that it is an
unfair comparison, and that if the proper options and setup are used, that other \s-1XML\s0
parsers are better.
.PP
The module should parse any \s-1XML\s0 document that conforms to the standardized
\&\s-1XML\s0 specifications, there is no need for alarm and fear that the module will corrupt
your \s-1XML\s0 documents on reading.
.PP
To be blunt about how the parser works, very little has been done to make the parser
follow the specification known as '\s-1XML\s0'. The parser is meant to be flexibile and somewhat
resilient, and will parse \s-1XML\s0 like garbage that would cause other parsers to error out.
.PP
As far as I am concerned, as the author of the module, the '\s-1XML\s0' in 'XML::Bare' should
be thought of to mean 'eXtremely Mad Language', because the module was written from
scratch without referring to the specification known as '\s-1XML\s0'.
.PP
In regard to the complaints about the unfairness of the included benchmarks, please
make your own intelligent decision as to what module you like by trying multiple
modules and/or running the performance tests yourself. If you like some other module,
use that module. If you like XML::Bare and think it is the fastest thing on the planet,
that is cool too.
.PP
If you hate XML::Bare and want to go around on the internet trashing it and telling
people to use something else, I think perhaps you may want to seek counseling.
.SS "Performance"
.IX Subsection "Performance"
In comparison to other available perl xml parsers that create trees, XML::Bare
is extremely fast. In order to measure the performance of loading and parsing
compared to the alternatives, a templated speed comparison mechanism has been
created and included with XML::Bare.
.PP
The include makebench.pl file runs when you make the module and creates perl
files within the bench directory corresponding to the .tmpl contained there.
.PP
Currently there are three types of modules that can be tested against,
executable parsers ( exe.tmpl ), tree parsers ( tree.tmpl ), and parsers
that do not generated trees ( notree.tmpl ).
.PP
A full list of modules currently tested against is as follows:
.PP
.Vb 10
\&  EzXML (exe)
\&  Tiny XML (exe)
\&  XML::Descent (notree)
\&  XML::DOM
\&  XML::Fast
\&  XML::Grove::Builder
\&  XML::Handler::Trees
\&  XMLIO (exe)
\&  XML::LibXML (notree)
\&  XML::LibXML::Simple
\&  XML::Parser (notree)
\&  XML::Parser::EasyTree
\&  XML::Parser::Expat (notree)
\&  XML::SAX::Simple
\&  XML::Simple using XML::Parser
\&  XML::Simple using XML::SAX::PurePerl
\&  XML::Simple using XML::LibXML::SAX::Parser
\&  XML::Simple using XML::Bare::SAX::Parser
\&  XML::Smart
\&  XML::Twig
\&  XML::TreePP
\&  XML::Trivial
\&  XML::XPath::XMLParser
.Ve
.PP
To run the comparisons, run the appropriate perl file within the
bench directory. ( exe.pl, tree.pl, or notree.pl )
.PP
The script measures the milliseconds of loading and parsing, and
compares the time against the time of XML::Bare. So a 7 means
it takes 7 times as long as XML::Bare.
.PP
Here is a combined table of the script run against each alternative
using the included test.xml:
.PP
.Vb 10
\&  \-Module\-                   load     parse    total
\&  XML::Bare                  1        1        1
\&  XML::TreePP                2.3063   33.1776  6.1598
\&  XML::Parser::EasyTree      4.9405   25.7278  7.4571
\&  XML::Handler::Trees        7.2303   26.5688  9.6447
\&  XML::Trivial               5.0636   12.4715  7.3046
\&  XML::Smart                 6.8138   78.7939  15.8296
\&  XML::Simple (XML::Parser)  2.3346   50.4772  10.7455
\&  XML::Simple (PurePerl)     2.361    261.4571 33.6524
\&  XML::Simple (LibXML)       2.3187   163.7501 23.1816
\&  XML::Simple (XML::Bare)    2.3252   59.1254  10.9163
\&  XML::SAX::Simple           8.7792   170.7313 28.3634
\&  XML::Twig                  27.8266  56.4476  31.3594
\&  XML::Grove::Builder        7.1267   26.1672  9.4064
\&  XML::XPath::XMLParser      9.7783   35.5486  13.0002
\&  XML::LibXML (notree)       11.0038  4.5758   10.6881
\&  XML::Parser (notree)       4.4698   17.6448  5.8609
\&  XML::Parser::Expat(notree) 3.7681   50.0382  6.0069
\&  XML::Descent (notree)      6.0525   37.0265  11.0322
\&  Tiny XML (exe)                               1.0095
\&  EzXML (exe)                                  1.1284
\&  XMLIO (exe)                                  1.0165
.Ve
.PP
Here is a combined table of the script run against each alternative
using the included feed2.xml:
.PP
.Vb 10
\&  \-Module\-                   load     parse    total
\&  XML::Bare                  1        1        1
\&  XML::Bare (simple)         1        0.7238   ?
\&  XML::Bare (unsafe simple)  1       ~0.5538   ?
\&  XML::Fast                  1.516    0.9733   1.4783
\&  XML::TreePP                0.6393   30.5951  2.6874
\&  XML::MyXML                 1.8266   14.2571  2.7113 
\&  XML::Parser::EasyTree      1.5208   22.8283  2.9748 
\&  XML::Trivial               2.007    25.742   3.615  
\&  XML::Tiny                  0.1665   61.4918  4.3234  
\&  XML::XPath::XMLParser      2.5762   33.2567  4.6742  
\&  XML::Smart                 1.702    59.4907  5.7566
\&  XML::Simple (XML::Parser)  0.5838   64.7243  5.0006  
\&  XML::DOM::Lite             4.5207   17.4617  5.4033
\&  XML::Simple (LibXML)       0.5904   161.7544 11.5731
\&  XML::Twig                  8.553    56.9034  11.8805 
\&  XML::Grove::Builder        7.2021   30.7926  12.9334
\&  XML::Handler::Trees        6.8545   33.1007  13.0575
\&  XML::LibXML::Simple        14.0204  11.8482  13.8707
\&  XML::Simple (PurePerl)     0.6176   321.3422 23.0465 
\&  XML::Simple                2.7168   90.7203  26.7525
\&  XML::SAX::Simple           8.7386   94.8276  29.2166
\&  XML::LibXML (notree)       11.0023  5.022    10.5214
\&  XML::Parser (notree)       4.3748   25.0213  5.9803
\&  XML::Parser::Expat(notree) 3.6555   51.6426  7.4316
\&  XML::Descent (notree)      5.9206   155.0289 18.7767
\&  Tiny XML (exe)                               1.2212
\&  EzXML (exe)                                  1.3618
\&  XMLIO (exe)                                  1.0145
.Ve
.PP
These results show that XML::Bare is, at least on the
test machine, running all tests within cygwin, faster
at loading and parsing than everything being tested
against.
.PP
The following things are shown as well:
  \- XML::Bare can parse \s-1XML\s0 and create a hash tree
  in less time than it takes LibXML just to parse.
  \- XML::Bare can parse \s-1XML\s0 and create a tree
  in less time than all three binary parsers take
  just to parse.
  \- XML::Fast is theoretically faster at parsing than
  the default 'full' mode of XML::Bare. Despite that,
  the 'simple' mode of XML::Bare is even faster.
.PP
Note that the executable parsers are not perl modules
and are timed using dummy programs that just uses the
library to load and parse the example files. The
executables are not included with this program. Any
source modifications used to generate the shown test
results can be found in the bench/src directory of
the distribution
.SH "LICENSE"
.IX Header "LICENSE"
.Vb 1
\&  Copyright (C) 2008 David Helkowski
\&  
\&  This program is free software; you can redistribute it and/or
\&  modify it under the terms of the GNU General Public License as
\&  published by the Free Software Foundation; either version 2 of the
\&  License, or (at your option) any later version.  You may also can
\&  redistribute it and/or modify it under the terms of the Perl
\&  Artistic License.
\&  
\&  This program is distributed in the hope that it will be useful,
\&  but WITHOUT ANY WARRANTY; without even the implied warranty of
\&  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\&  GNU General Public License for more details.
.Ve
