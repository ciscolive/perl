.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::Netdisco::DB::Result::DevicePort 3"
.TH App::Netdisco::DB::Result::DevicePort 3 "2020-11-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "RELATIONSHIPS"
.IX Header "RELATIONSHIPS"
.SS "device"
.IX Subsection "device"
Returns the Device table entry to which the given Port is related.
.SS "port_vlans"
.IX Subsection "port_vlans"
Returns the set of \f(CW\*(C`device_port_vlan\*(C'\fR entries associated with this Port.
These will be both tagged and untagged. Use this relation in search conditions.
.SS "nodes / active_nodes / nodes_with_age / active_nodes_with_age"
.IX Subsection "nodes / active_nodes / nodes_with_age / active_nodes_with_age"
Returns the set of Nodes whose \s-1MAC\s0 addresses are associated with this Device
Port.
.PP
The \f(CW\*(C`active\*(C'\fR variants return only the subset of nodes currently in the switch
\&\s-1MAC\s0 address table, that is the active ones.
.PP
The \f(CW\*(C`with_age\*(C'\fR variants add an additional column \f(CW\*(C`time_last_age\*(C'\fR, a
preformatted value for the Node's \f(CW\*(C`time_last\*(C'\fR field, which reads as \*(L"X
days/weeks/months/years\*(R".
.SS "logs"
.IX Subsection "logs"
Returns the set of \f(CW\*(C`device_port_log\*(C'\fR entries associated with this Port.
.SS "power"
.IX Subsection "power"
Returns a row from the \f(CW\*(C`device_port_power\*(C'\fR table if one refers to this
device port.
.SS "properties"
.IX Subsection "properties"
Returns a row from the \f(CW\*(C`device_port_properties\*(C'\fR table if one refers to this
device port.
.SS "ssid"
.IX Subsection "ssid"
Returns a row from the \f(CW\*(C`device_port_ssid\*(C'\fR table if one refers to this
device port.
.SS "wireless"
.IX Subsection "wireless"
Returns a row from the \f(CW\*(C`device_port_wireless\*(C'\fR table if one refers to this
device port.
.SS "agg_master"
.IX Subsection "agg_master"
Returns another row from the \f(CW\*(C`device_port\*(C'\fR table if this port is slave
to another in a link aggregate.
.SS "neighbor_alias"
.IX Subsection "neighbor_alias"
When a device port has an attached neighbor device, this relationship will
return the \s-1IP\s0 address of the neighbor. See the \f(CW\*(C`neighbor\*(C'\fR helper method if
what you really want is to retrieve the Device entry for that neighbor.
.PP
The \s-1JOIN\s0 is of type \*(L"\s-1LEFT\*(R"\s0 in case the neighbor device is known but has not
been fully discovered by Netdisco and so does not exist itself in the
database.
.SS "last_node"
.IX Subsection "last_node"
This relationship will return the last node that was seen on the port.
.PP
The \s-1JOIN\s0 is of type \*(L"\s-1LEFT\*(R"\s0 in case there isn't any such node.
.SS "vlans"
.IX Subsection "vlans"
As compared to \f(CW\*(C`port_vlans\*(C'\fR, this relationship returns a set of Device \s-1VLAN\s0
row objects for the VLANs on the given port, which might be more useful if you
want to find out details such as the \s-1VLAN\s0 name.
.PP
See also \f(CW\*(C`vlan_count\*(C'\fR.
.SS "oui"
.IX Subsection "oui"
Returns the \f(CW\*(C`oui\*(C'\fR table entry matching this Port. You can then join on this
relation and retrieve the Company name from the related table.
.PP
The \s-1JOIN\s0 is of type \s-1LEFT,\s0 in case the \s-1OUI\s0 table has not been populated.
.SH "ADDITIONAL METHODS"
.IX Header "ADDITIONAL METHODS"
.SS "neighbor"
.IX Subsection "neighbor"
Returns the Device entry for the neighbour Device on the given port.
.PP
Might return an undefined value if there is no neighbor on the port, or if the
neighbor has not been fully discovered by Netdisco and so does not exist in
the database.
.SH "ADDITIONAL COLUMNS"
.IX Header "ADDITIONAL COLUMNS"
.SS "native"
.IX Subsection "native"
An alias for the \f(CW\*(C`vlan\*(C'\fR column, which stores the \s-1PVID\s0 (that is, the \s-1VLAN
ID\s0 assigned to untagged frames received on the port).
.SS "error_disable_cause"
.IX Subsection "error_disable_cause"
Returns the textual reason given by the device if the port is in an error
state, or else `undef` if the port is not in an error state.
.SS "remote_is_wap"
.IX Subsection "remote_is_wap"
Returns true if the remote \s-1LLDP\s0 neighbor has reported Wireless Access Point
capability.
.SS "remote_is_phone"
.IX Subsection "remote_is_phone"
Returns true if the remote \s-1LLDP\s0 neighbor has reported Telephone capability.
.SS "remote_inventory"
.IX Subsection "remote_inventory"
Returns a synthesized description of the remote \s-1LLDP\s0 device if inventory
information was given, including vendor, model, \s-1OS\s0 version, and serial number.
.SS "vlan_count"
.IX Subsection "vlan_count"
Returns the number of VLANs active on this device port. Enable this column by
applying the \f(CW\*(C`with_vlan_count()\*(C'\fR modifier to \f(CW\*(C`search()\*(C'\fR.
.SS "lastchange_stamp"
.IX Subsection "lastchange_stamp"
Formatted version of the \f(CW\*(C`lastchange\*(C'\fR field, accurate to the minute. Enable
this column by applying the \f(CW\*(C`with_times()\*(C'\fR modifier to \f(CW\*(C`search()\*(C'\fR.
.PP
The format is somewhat like \s-1ISO 8601\s0 or \s-1RFC3339\s0 but without the middle \f(CW\*(C`T\*(C'\fR
between the date stamp and time stamp. That is:
.PP
.Vb 1
\& 2012\-02\-06 12:49
.Ve
.SS "is_free"
.IX Subsection "is_free"
This method can be used to evaluate whether a device port could be considered
unused, based on the last time it changed from the \*(L"up\*(R" state to a \*(L"down\*(R"
state.
.PP
See the \f(CW\*(C`with_is_free\*(C'\fR and \f(CW\*(C`only_free_ports\*(C'\fR modifiers to \f(CW\*(C`search()\*(C'\fR.
.SS "base64url_port"
.IX Subsection "base64url_port"
Returns a Base64 encoded version of the \f(CW\*(C`port\*(C'\fR column value suitable for use
in a \s-1URL.\s0
.SS "net_mac"
.IX Subsection "net_mac"
Returns the \f(CW\*(C`mac\*(C'\fR column instantiated into a NetAddr::MAC object.
.SS "last_comment"
.IX Subsection "last_comment"
Returns the most recent comment from the logs for this device port.
