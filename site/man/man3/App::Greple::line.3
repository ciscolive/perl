.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::Greple::line 3"
.TH App::Greple::line 3 "2020-08-29" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
line \- Greple module to produce result by line numbers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
greple \-Mline
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module allows you to use line numbers to specify patterns or
regions which can be used in \fBgreple\fR options.
.IP "\fB\-L\fR=\fIline numbers\fR" 7
.IX Item "-L=line numbers"
Simply, next command will show 200th line with before/after 10 lines
of the file:
.Sp
.Vb 1
\&    greple \-Mline \-L 200 \-C10 file
.Ve
.Sp
If you don't like lines displayed with color, use \fB\-\-nocolor\fR option
or set colormap to something do nothing like \fB\-\-cm=N\fR.
.Sp
Multiple lines can be specified by joining with comma:
.Sp
.Vb 1
\&    greple \-Mline \-L 10,20,30
.Ve
.Sp
It is ok to use \fB\-L\fR option multiple times, like:
.Sp
.Vb 1
\&    greple \-Mline \-L 10 \-L 20 \-L 30
.Ve
.Sp
But this command produce nothing, because each line definitions are
taken as a different pattern, and \fBgreple\fR prints lines only when all
patterns matched.  You can relax the condition by \fB\-\-need 1\fR option
in such case, then you will get expected result.  Note that next
example will display 10th, 20th and 30th lines in different colors.
.Sp
.Vb 1
\&    greple \-Mline \-L 10 \-L 20 \-L 30 \-\-need 1
.Ve
.Sp
Range can be specified by colon:
.Sp
.Vb 1
\&    greple \-Mline \-L 10:20
.Ve
.Sp
You can also specify the step with range.  Next command will print
all even lines from line 10 to 20:
.Sp
.Vb 1
\&    greple \-Mline \-L 10:20:2
.Ve
.Sp
Any of them can be omitted.  Next commands print all, odd and even
lines.
.Sp
.Vb 3
\&    greple \-Mline \-L ::         # all lines
\&    greple \-Mline \-L ::2        # odd lines
\&    greple \-Mline \-L 2::2       # even lines
.Ve
.Sp
If start and end number is negative, they are subtracted from the
maxmum line number.  If the end number is prefixed by plus (`+') sign,
it is summed with start number.  Next commands print top and last 10
lines respectively.
.Sp
.Vb 2
\&    greple \-Mline \-L :+9        # top 10 lines
\&    greple \-Mline \-L \-9:        # last 10 lines
.Ve
.Sp
Next example print all lines of the file, each line in four different
colors.
.Sp
.Vb 1
\&    greple \-Mline \-L=1::4 \-L=2::4 \-L=3::4 \-L=4::4 \-\-need 1
.Ve
.Sp
If forth parameter is given, it describes how many lines is included
in that step cycle.  For example, next command prints top 3 lines in
every 10 lines.
.Sp
.Vb 1
\&    greple \-Mline \-L ::10:3
.Ve
.Sp
When step count is omitted, forth value is used if available.  Next
command print every 10 lines in different colors.
.Sp
.Vb 1
\&    greple \-Mline \-L :::10 \-\-ci=A /etc/services
.Ve
.IP "\fBL\fR=\fIline numbers\fR" 7
.IX Item "L=line numbers"
This notation just define function spec, which can be used in
patterns, as well as blocks and regions.  Actually, \fB\-L\fR=\fIline\fR is
equivalent to \fB\-\-le\fR \fBL\fR=\fIline\fR.
.Sp
Next command show patterns found in line number 1000\-2000 area.
.Sp
.Vb 1
\&    greple \-Mline \-\-inside L=1000:+1000 pattern
.Ve
.Sp
Next command prints all 10 line blocks which include the pattern.
.Sp
.Vb 1
\&    greple \-Mline \-\-block L=:::10 pattern
.Ve
.PP
This module implicitly set \fB\-n\fR option.  Use \fB\-\-no\-line\-number\fR
option to disable it.
.PP
Using this module, it is impossible to give single \f(CW\*(C`L\*(C'\fR in command
line arguments.  Use like \fB\-\-le=L\fR to search \f(CW\*(C`L\*(C'\fR.  You have a file
named \fIL\fR?  Stop substitution by placing \f(CW\*(C`\-\-\*(C'\fR before target files.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Getopt::EX::Numbers
