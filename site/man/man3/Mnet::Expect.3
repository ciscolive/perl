.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mnet::Expect 3"
.TH Mnet::Expect 3 "2020-08-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mnet::Expect \- Create Expect objects with Mnet::Log support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # refer to SEE ALSO section for other Mnet::Expect modules
\&    use Mnet::Expect;
\&
\&    # spawn Expect telnet process connected to specified host
\&    my $expect = Mnet::Expect\->new({ spawn => "telnet 1.2.3.4" });
\&
\&    # access underlying Expect methods, refer to perldoc Expect
\&    $expect\->expect\->send("ls\er");
\&
\&    # gracefully close spawned Expect process
\&    $expect\->close;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mnet::Expect can be used to spawn Expect processes, which can be used
to programmatically control interactive terminal sessions, with support for
Mnet options and logging.
.PP
Refer to the perl Expect module for more information. Also refer to the
Mnet::Expect::Cli and Mnet::Expect::Cli::Ios modules.
.SH "METHODS"
.IX Header "METHODS"
Mnet::Expect implements the methods listed below.
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $expect = Mnet::Expect\->new(\e%opts)
.Ve
.PP
This method can be used to create new Mnet::Expect objects.
.PP
The following input opts may be specified:
.PP
.Vb 5
\&    log_expect  default session debug, refer to log_expect method
\&    log_id      refer to perldoc Mnet::Log new method
\&    raw_pty     undef, can be set 0 or 1, refer to perldoc Expect
\&    spawn       command and args array ref, or space separated string
\&    winsize     specify session rows and columns, default 99999x999
.Ve
.PP
An error is issued if there are spawn problems.
.PP
For example, the following will spawn an telnet expect session to a device:
.PP
.Vb 1
\&    my $expect = Mnet::Expect\->new({ spawn => "telnet 1.2.3.4" });
.Ve
.PP
Note that all connected session activity is logged for debugging, refer to
the Mnet::Log module for more information.
.SS "close"
.IX Subsection "close"
.Vb 1
\&    $expect\->close
.Ve
.PP
Attempt to call hard_close for the current Mnet::Expect objects Expect
session, and send a kill signal if the process still exists.
.PP
The Expect object associated with the current Mnet::Expect object will be
set to undefined. Refer also to the expect method documented below.
.SS "expect"
.IX Subsection "expect"
.Vb 1
\&    $expect\->expect
.Ve
.PP
Returns the underlying expect object used by this module, for access to fetures
that may not be supported directly by Mnet::Expect modules. Refer to the
Expect module for more information.
.SH "log_expect"
.IX Header "log_expect"
.Vb 1
\&    $prior = $expect\->log_expect($level)
.Ve
.PP
Use this method to set a new log_expect level for expect session traffic. The
prior log_expect value will be returned.
.PP
The new log_expect level can be set to debug, info, or undefined. An undefined
log_expect disables the logging of expect session traffic, which might be
useful to keep sensitive data out of log outputs.
.PP
The default log level for expect session traffic is debug.
.PP
An invalid input log_expect level results in an error.
.SH "TESTING"
.IX Header "TESTING"
Mnet::Expect does not include iteself include support for Mnet::Test
functionality. This is a low level module that spawns expect sessions but does
not know how to talk to devices. Any desired test functionality would need to
be provided by the calling script.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Expect
.PP
Mnet
.PP
Mnet::Expect::Cli
.PP
Mnet::Expect::Cli::Ios
.PP
Mnet::Log
.PP
Mnet::Opts::Cli
.PP
Mnet::Test
