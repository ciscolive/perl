.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::CSVImportStatus 3"
.TH Infoblox::Grid::CSVImportStatus 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::CSVImportStatus \- CSV import status object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object is used to represent the status of the current \s-1CSV\s0 import task. All methods are read-only.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to a Grid::CSVImportStatus object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to get a specific CSV import status object
\&
\&  object    \- Required. It must be set to "Infoblox::Grid::CSVImportStatus".
\&  import_id \- Optional. ID of the import task that the status object is describing. If not specified, 
\&              the status of the first import task is returned.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& my $import_id = $session\->import_data(
\&                                       type => \*(Aqcsv\*(Aq,
\&                                       path => "/tmp/zone.csv",
\&                                       separator   => \*(Aqsemicolon\*(Aq,
\&                                      );
\&
\& unless($import_id){
\&     die("Import failed: ",
\&         Infoblox::status_code(). ":" .Infoblox::status_detail());
\& }
\&
\& my @retrieved_objs = $session\->get(
\&     object    => "Infoblox::Grid::CSVImportStatus",
\&     import_id => $import_id,
\&     );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to retrieve the status of a \s-1CSV\s0 import operation.
.SS "admin( )"
.IX Subsection "admin( )"
.RS 4
Use this method to retrieve the name of the administrator that started the import.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get admin
\& my $admin = $service_status\->admin();
.Ve
.RE
.RS 4
.RE
.SS "end_time( )"
.IX Subsection "end_time( )"
.RS 4
Use this method to retrieve the time the \s-1CSV\s0 import ended.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get end_time
\& my $end_time = $service_status\->end_time();
.Ve
.RE
.RS 4
.RE
.SS "file_name( )"
.IX Subsection "file_name( )"
.RS 4
Use this method to retrieve the name of the file used for the \s-1CSV\s0 import.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get file_name
\& my $file_name = $service_status\->file_name();
.Ve
.RE
.RS 4
.RE
.SS "import_id( )"
.IX Subsection "import_id( )"
.RS 4
Use this method to retrieve the \s-1ID\s0 of the import task that the status object is describing.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get import_id
\& my $import_id = $service_status\->import_id();
.Ve
.RE
.RS 4
.RE
.SS "lines_failed( )"
.IX Subsection "lines_failed( )"
.RS 4
Use this method to retrieve the number of lines that had failures in the \s-1CSV\s0 file used for the current \s-1CSV\s0 import.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get lines_failed
\& my $lines_failed = $service_status\->lines_failed();
.Ve
.RE
.RS 4
.RE
.SS "lines_processed( )"
.IX Subsection "lines_processed( )"
.RS 4
Use this method to retrieve the number of lines processed in the \s-1CSV\s0 file used for the current \s-1CSV\s0 import.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get lines_processed
\& my $lines_processed = $service_status\->lines_processed();
.Ve
.RE
.RS 4
.RE
.SS "lines_total( )"
.IX Subsection "lines_total( )"
.RS 4
Use this method to retrieve the total number of lines read from the \s-1CSV\s0 file during the current \s-1CSV\s0 import.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get lines_total
\& my $lines_total = $service_status\->lines_total();
.Ve
.RE
.RS 4
.RE
.SS "lines_warning( )"
.IX Subsection "lines_warning( )"
.RS 4
Use this method to retrieve the number of lines that had warnings in the \s-1CSV\s0 file used for the current \s-1CSV\s0 import.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get lines_warning
\& my $lines_warning = $service_status\->lines_warning();
.Ve
.RE
.RS 4
.RE
.SS "start_time( )"
.IX Subsection "start_time( )"
.RS 4
Use this method to retrieve the time the \s-1CSV\s0 import started.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get start_time
\& my $start_time = $service_status\->start_time();
.Ve
.RE
.RS 4
.RE
.SS "status( )"
.IX Subsection "status( )"
.RS 4
Use this method to retrieve the status of the current \s-1CSV\s0 import. The returned status is one of the following: 'Uploaded', 'Pending', 'Running', 'Failed', 'Stopped' or 'Completed'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get status
\& my $status = $service_status\->status();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates how to export / import data by using \s-1CSV\s0 files.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $host_ip =  "192.168.1.2";
\& my $session = Infoblox::Session\->new(
\&                                      master   => $host_ip,
\&                                      username => "admin",
\&                                      password => "infoblox"
\&                                     );
\& unless($session){
\&     die("Constructor for session failed: ",
\&         Infoblox::status_code(). ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully.\en";
\&
\& #Create a DNS zone
\& my $memberns1 = Infoblox::DNS::Member\->new(
\&                                            name     => "infoblox.localdomain",
\&                                            ipv4addr => $host_ip,
\&                                            lead     => "false",
\&                                            stealth  => "false"
\&                                           );
\&
\& #Add the zone
\& my $firstzone = Infoblox::DNS::Zone\->new(
\&                                          name        => "test.com",
\&                                          email       => "admin\e@infoblox.com",
\&                                          comment     => "add a zone test.com",
\&                                          primary     => $memberns1,
\&                                         );
\&
\& unless($firstzone){
\&     die("Construct test.com zone object failed: ",
\&         Infoblox::status_code(). ":" .Infoblox::status_detail());
\& }
\& print "test.com zone object created successfully.\en";
\&
\& $session\->add($firstzone)
\&   or die("Add zone for test.com failed: ",
\&          $session\->status_code(). ":" .$session\->status_detail());
\&
\& print"Zone test.com added successfully.\en";
\&
\& #Export the newly created zone
\& $session\->export_data(
\&                       type        => \*(Aqcsv\*(Aq,
\&                       path        => \*(Aq/tmp/zone.csv\*(Aq,
\&                       object_type => \*(AqInfoblox::DNS::Zone\*(Aq,
\&                       separator   => \*(Aqsemicolon\*(Aq,
\&
\&                       # search parameters
\&                       name        => \*(Aq.*test.com\*(Aq,
\&                      )
\&   or die("Export zone for test.com failed: ",
\&          $session\->status_code(). ":" .$session\->status_detail());
\&
\& # Wait for the export to complete
\& sleep(5);
\&
\& print "The zone was exported\en";
\&
\& # Remove the zone from the database
\& $session\->remove($firstzone)
\&   or die("Remove zone for test.com failed: ",
\&          $session\->status_code(). ":" .$session\->status_detail());
\&
\& print "The zone was removed\en";
\&
\& # Import the zone by using the CSV file that was exported
\&
\& my $import_id = $session\->import_data(
\&                                       type => \*(Aqcsv\*(Aq,
\&                                       path => "/tmp/zone.csv",
\&                                       separator   => \*(Aqsemicolon\*(Aq,
\&                                      );
\&
\& unless($import_id){
\&     die("Import failed: ",
\&         Infoblox::status_code(). ":" .Infoblox::status_detail());
\& }
\&
\& # Wait for the import to complete
\& sleep(5);
\&
\& my $status = $session\->get(
\&                            object  => \*(AqInfoblox::Grid::CSVImportStatus\*(Aq,
\&                           );
\&
\& unless($status){
\&     die("Failed to fetch the import status: ",
\&         Infoblox::status_code(). ":" .Infoblox::status_detail());
\& }
\&
\& print "The zone was re\-imported\en";
\&
\& # The code should be cycling to sleep, fetch and wait until the import is finished.
\& unless($status\->status() eq \*(AqCompleted\*(Aq){
\&     die("The import took too long to complete: " . $status\->status());
\& }
\&
\& unless($status\->lines_failed() == 0){
\&     die("There were some import failures: " . $status\->lines_failed());
\& }
\&
\& print "The zone re\-import was successful\en";
\&
\& # The zone was re\-imported. If we import the file again without merging,
\& # an error occurs.
\&
\& $import_id = $session\->import_data(
\&                                    type => \*(Aqcsv\*(Aq,
\&                                    path => "/tmp/zone.csv",
\&                                    separator   => \*(Aqsemicolon\*(Aq,
\&                                   );
\&
\& unless($import_id){
\&     die("Import failed: ",
\&         Infoblox::status_code(). ":" .Infoblox::status_detail());
\& }
\&
\& # Wait for the import to complete
\& sleep(5);
\&
\& print "The zone re\-re\-import was completed\en";
\&
\& my $status = $session\->get(
\&                            object  => \*(AqInfoblox::Grid::CSVImportStatus\*(Aq,
\&                           );
\&
\& unless($status){
\&     die("Failed to fetch the import status: ",
\&         Infoblox::status_code(). ":" .Infoblox::status_detail());
\& }
\&
\& # The code should be cycling to sleep, fetch and wait until the import is finished.
\& unless($status\->status() eq \*(AqCompleted\*(Aq){
\&     die("The import took too long to complete: " . $status\->status());
\& }
\&
\& if($status\->lines_failed() == 0){
\&     die("There were no import failures: " . $status\->lines_failed());
\& }
\&
\& print "The zone re\-re\-import correctly failed\en";
\&
\& # Review the  failure
\& $session\->export_data(
\&                       type        => \*(Aqcsv_error_log\*(Aq,
\&                       path        => \*(Aq/tmp/error_log.txt\*(Aq,
\&                       import_id   => $import_id,
\&                      )
\&   or die("Export error log failed: ",
\&          $session\->status_code(). ":" .$session\->status_detail());
\&
\& # The failure is in this file
\& print "Error log for the failed import\en\-\-\-\-\-\-\-\en";
\& print \`cat /tmp/error_log.txt\`;
\&
\& #Remove the zone
\& $session\->remove(
\&                  object => "Infoblox::DNS::Zone",
\&                  name   => "test.com",
\&                 )
\&   or die("Remove zone test.com failed: ",
\&          $session\->status_code(). ":" .$session\->status_detail());
\&
\& print "The zone was removed\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,Infoblox::Session\->\fBget()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
