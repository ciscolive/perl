.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::PDF::TTFont 3"
.TH Text::PDF::TTFont 3 "2016-08-24" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::PDF::TTFont \- Inherits from Text::PDF::Dict and represents a TrueType
font within a PDF file.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A font consists of two primary parts in a \s-1PDF\s0 file: the header and the font
descriptor. Whilst two fonts may share font descriptors, they will have their
own header dictionaries including encoding and widhth information.
.SH "INSTANCE VARIABLES"
.IX Header "INSTANCE VARIABLES"
There are no instance variables beyond the variables which directly correspond
to entries in the appropriate \s-1PDF\s0 dictionaries.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "Text::PDF::TTFont\->new($parent, $fontfname, $pdfname, %opts)"
.el .SS "Text::PDF::TTFont\->new($parent, \f(CW$fontfname\fP, \f(CW$pdfname\fP, \f(CW%opts\fP)"
.IX Subsection "Text::PDF::TTFont->new($parent, $fontfname, $pdfname, %opts)"
Creates a new font resource for the given fontfile. This includes the font
descriptor and the font stream. The \f(CW$pdfname\fR is the name by which this font
resource will be known throughtout a particular \s-1PDF\s0 file.
.PP
All font resources are full \s-1PDF\s0 objects.
.ie n .SS "$t\->width($text)"
.el .SS "\f(CW$t\fP\->width($text)"
.IX Subsection "$t->width($text)"
Measures the width of the given text according to the widths in the font
.ie n .SS "$t\->trim($text, $len)"
.el .SS "\f(CW$t\fP\->trim($text, \f(CW$len\fP)"
.IX Subsection "$t->trim($text, $len)"
Trims the given text to the given length (in per mille em) returning the trimmed
text
.ie n .SS "$t\->out_text($text)"
.el .SS "\f(CW$t\fP\->out_text($text)"
.IX Subsection "$t->out_text($text)"
Indicates to the font that the text is to be output and returns the text to be output
.ie n .SS "$f\->copy"
.el .SS "\f(CW$f\fP\->copy"
.IX Subsection "$f->copy"
Copies the font object excluding the name, widths and encoding, etc.
.SH "TITLE"
.IX Header "TITLE"
Text::PDF::TTIOString \- internal \s-1IO\s0 type handle for string output for font
embedding. This code is ripped out of IO::Scalar, to save the direct dependence
for so little. See IO::Scalar for details
