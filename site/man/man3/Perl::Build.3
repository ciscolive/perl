.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perl::Build 3"
.TH Perl::Build 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perl::Build \- perl builder
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "Install as plenv plugin (Recommended)"
.IX Header "Install as plenv plugin (Recommended)"
.Vb 1
\&    % git clone git://github.com/tokuhirom/Perl\-Build.git $(plenv root)/plugins/perl\-build/
.Ve
.SH "CLI interface without dependencies"
.IX Header "CLI interface without dependencies"
.Vb 2
\&    # perl\-build command is FatPacker ready
\&    % curl \-L https://raw.githubusercontent.com/tokuhirom/Perl\-Build/master/perl\-build | perl \- 5.16.2 /opt/perl\-5.16/
.Ve
.SH "CLI interface"
.IX Header "CLI interface"
.Vb 2
\&    % cpanm Perl::Build
\&    % perl\-build 5.16.2 /opt/perl\-5.16/
.Ve
.SS "Programmable interface"
.IX Subsection "Programmable interface"
.Vb 7
\&    # install perl from CPAN
\&    my $result = Perl::Build\->install_from_cpan(
\&        \*(Aq5.16.2\*(Aq => (
\&            dst_path          => \*(Aq/path/to/perl\-5.16.2/\*(Aq,
\&            configure_options => [\*(Aq\-des\*(Aq],
\&        )
\&    );
\&
\&    # install perl from tar ball
\&    my $result = Perl::Build\->install_from_cpan(
\&        \*(Aqpath/to/perl\-5.16.2.tar.gz\*(Aq => (
\&            dst_path          => \*(Aq/path/to/perl\-5.16.2/\*(Aq,
\&            configure_options => [\*(Aq\-des\*(Aq],
\&        )
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is yet another perl builder module.
.PP
\&\fB\s-1THIS IS A DEVELOPMENT RELEASE. API MAY CHANGE WITHOUT NOTICE\s0\fR.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """Perl::Build\->install_from_cpan($version, %args)""" 4
.el .IP "\f(CWPerl::Build\->install_from_cpan($version, %args)\fR" 4
.IX Item "Perl::Build->install_from_cpan($version, %args)"
Install \f(CW$version\fR perl from \s-1CPAN.\s0 This method fetches tar ball from \s-1CPAN,\s0 build, and install it.
.Sp
You can pass following options in \f(CW%args\fR.
.RS 4
.ie n .IP """dst_path""" 4
.el .IP "\f(CWdst_path\fR" 4
.IX Item "dst_path"
Destination directory to install perl.
.ie n .IP """configure_options : ArrayRef(Optional)""" 4
.el .IP "\f(CWconfigure_options : ArrayRef(Optional)\fR" 4
.IX Item "configure_options : ArrayRef(Optional)"
Command line arguments for \f(CW\*(C`./Configure\*(C'\fR.
.Sp
(Default: \f(CW\*(C`[\*(Aq\-de\*(Aq]\*(C'\fR)
.ie n .IP """tarball_dir"" (Optional)" 4
.el .IP "\f(CWtarball_dir\fR (Optional)" 4
.IX Item "tarball_dir (Optional)"
Temporary directory to put tar ball.
.ie n .IP """build_dir"" (Optional)" 4
.el .IP "\f(CWbuild_dir\fR (Optional)" 4
.IX Item "build_dir (Optional)"
Temporary directory to build binary.
.ie n .IP """jobs: Int"" (Optional)" 4
.el .IP "\f(CWjobs: Int\fR (Optional)" 4
.IX Item "jobs: Int (Optional)"
Parallel building and testing.
.Sp
(Default: \f(CW1\fR)
.RE
.RS 4
.RE
.ie n .IP """Perl::Build\->install_from_tarball($dist_tarball_path, %args)""" 4
.el .IP "\f(CWPerl::Build\->install_from_tarball($dist_tarball_path, %args)\fR" 4
.IX Item "Perl::Build->install_from_tarball($dist_tarball_path, %args)"
Install perl from tar ball. This method extracts tar ball, build, and install.
.Sp
You can pass following options in \f(CW%args\fR.
.RS 4
.ie n .IP """dst_path"" (Required)" 4
.el .IP "\f(CWdst_path\fR (Required)" 4
.IX Item "dst_path (Required)"
Destination directory to install perl.
.ie n .IP """configure_options : ArrayRef"" (Optional)" 4
.el .IP "\f(CWconfigure_options : ArrayRef\fR (Optional)" 4
.IX Item "configure_options : ArrayRef (Optional)"
Command line arguments for \f(CW\*(C`./Configure\*(C'\fR.
.Sp
(Default: \f(CW\*(C`[\*(Aq\-de\*(Aq]\*(C'\fR)
.ie n .IP """build_dir"" (Optional)" 4
.el .IP "\f(CWbuild_dir\fR (Optional)" 4
.IX Item "build_dir (Optional)"
Temporary directory to build binary.
.ie n .IP """jobs: Int"" (Optional)" 4
.el .IP "\f(CWjobs: Int\fR (Optional)" 4
.IX Item "jobs: Int (Optional)"
Parallel building and testing.
.Sp
(Default: \f(CW1\fR)
.RE
.RS 4
.RE
.ie n .IP """Perl::Build\->install(%args)""" 4
.el .IP "\f(CWPerl::Build\->install(%args)\fR" 4
.IX Item "Perl::Build->install(%args)"
Build and install Perl5 from extracted source directory.
.RS 4
.ie n .IP """src_path"" (Required)" 4
.el .IP "\f(CWsrc_path\fR (Required)" 4
.IX Item "src_path (Required)"
Source code directory to build.  That contains extracted Perl5 source code.
.ie n .IP """dst_path"" (Required)" 4
.el .IP "\f(CWdst_path\fR (Required)" 4
.IX Item "dst_path (Required)"
Destination directory to install perl.
.ie n .IP """configure_options : ArrayRef"" (Optional)" 4
.el .IP "\f(CWconfigure_options : ArrayRef\fR (Optional)" 4
.IX Item "configure_options : ArrayRef (Optional)"
Command line arguments for \f(CW\*(C`./Configure\*(C'\fR.
.Sp
(Default: \f(CW\*(C`[\*(Aq\-de\*(Aq]\*(C'\fR)
.ie n .IP """test: Bool"" (Optional)" 4
.el .IP "\f(CWtest: Bool\fR (Optional)" 4
.IX Item "test: Bool (Optional)"
If you set this value as \f(CW\*(C`true\*(C'\fR, \f(CW\*(C`Perl::Build\*(C'\fR runs \f(CW\*(C`make test\*(C'\fR after building.
.Sp
(Default: \f(CW0\fR)
.ie n .IP """jobs: Int"" (Optional)" 4
.el .IP "\f(CWjobs: Int\fR (Optional)" 4
.IX Item "jobs: Int (Optional)"
Parallel building and testing.
.Sp
(Default: \f(CW1\fR)
.RE
.RS 4
.Sp
Returns an instance of Perl::Build::Built to facilitate using the built perl from code.
.RE
.ie n .IP """Perl::Build\->symlink_devel_executables($bin_dir:Str)""" 4
.el .IP "\f(CWPerl::Build\->symlink_devel_executables($bin_dir:Str)\fR" 4
.IX Item "Perl::Build->symlink_devel_executables($bin_dir:Str)"
Perl5 binary generated with \f(CW\*(C`\-Dusedevel\*(C'\fR, is \*(L"perl\-5.12.2\*(R" form. This method symlinks \*(L"perl\-5.12.2\*(R" to \*(L"perl\*(R".
.SH "FAQ"
.IX Header "FAQ"
.IP "How can I use patchperl plugins?" 4
.IX Item "How can I use patchperl plugins?"
If you want to use patchperl plugins, please Google \*(L"\s-1PERL5_PATCHPERL_PLUGIN\*(R".\s0
.ie n .IP "What's the difference between ""perlbrew""?" 4
.el .IP "What's the difference between \f(CWperlbrew\fR?" 4
.IX Item "What's the difference between perlbrew?"
perlbrew is a perl5 installation manager. But perl-build is a simple perl5 compilation and installation assistant tool.
It makes perl5 installation easily. That's all. perl-build doesn't care about the user's environment.
.Sp
So, perl-build is just an installer.
.SH "THANKS TO"
.IX Header "THANKS TO"
Most of the code was taken from \f(CW\*(C`App::perlbrew\*(C'\fR.
.PP
\&\s-1TYPESTER\s0 \- suggests \f(CW\*(C`\-\-patches\*(C'\fR option
.PP
Thanks
.SH "AUTHOR"
.IX Header "AUTHOR"
Tokuhiro Matsuno <tokuhirom@gmail.com>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) Tokuhiro Matsuno
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
This software takes lot of the code from App::perlbrew. App::perlbrew's license is:
.PP
.Vb 1
\&    The MIT License
\&
\&    Copyright (c) 2010,2011 Kang\-min Liu
\&
\&    Permission is hereby granted, free of charge, to any person obtaining a copy
\&    of this software and associated documentation files (the "Software"), to deal
\&    in the Software without restriction, including without limitation the rights
\&    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
\&    copies of the Software, and to permit persons to whom the Software is
\&    furnished to do so, subject to the following conditions:
\&
\&    The above copyright notice and this permission notice shall be included in
\&    all copies or substantial portions of the Software.
\&
\&    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
\&    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
\&    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
\&    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
\&    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
\&    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
\&    THE SOFTWARE.
.Ve
