.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Prometheus::PerlCollector 3"
.TH Net::Prometheus::PerlCollector 3 "2020-07-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"Net::Prometheus::PerlCollector" \- obtain statistics about the perl interpreter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   use Net::Prometheus;
\&   use Net::Prometheus::PerlCollector;
\&
\&   my $client = Net::Prometheus\->new;
\&   $client\->register( Net::Prometheus::PerlCollector\->new );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a class that collects metrics about the perl interpreter
itself.
.SS "Metrics"
.IX Subsection "Metrics"
The following metrics are collected:
.IP "\(bu" 2
\&\f(CW\*(C`perl_info\*(C'\fR
.Sp
An info gauge (i.e. whose value is always 1) with a \f(CW\*(C`version\*(C'\fR label giving
the perl interpreter version
.Sp
.Vb 3
\&   # HELP perl_info Information about the Perl interpreter
\&   # TYPE perl_info gauge
\&   perl_info{version="5.30.0"} 1
.Ve
.PP
If the optional \s-1XS\s0 module was compiled at build time, the following extra are
also reported:
.IP "\(bu" 2
\&\f(CW\*(C`perl_heap_arenas\*(C'\fR
.Sp
A gauge giving the number of arenas the heap is split into.
.IP "\(bu" 2
\&\f(CW\*(C`perl_heap_svs\*(C'\fR
.Sp
A gauge giving the total number of SVs allocated on the heap.
.PP
.Vb 6
\&   # HELP perl_heap_arenas Number of arenas in the Perl heap
\&   # TYPE perl_heap_arenas gauge
\&   perl_heap_arenas 159
\&   # HELP perl_heap_svs Number of SVs in the Perl heap
\&   # TYPE perl_heap_svs gauge
\&   perl_heap_svs 26732
.Ve
.PP
Note that the way these metrics are collected requires counting them all every
time. While this code is relatively efficient, it is still a linear scan, and
may itself cause some slowdown of the process at the time it is collected, if
the heap has grown very large, containing a great number of SVs.
.PP
Extra detail can be obtained about the types of heap objects by setting
.PP
.Vb 1
\&   $Net::Prometheus::PerlCollector::DETAIL = 1;
.Ve
.PP
This will be slightly more expensive to count, but will yield in addition a
detailed breakdown by object type.
.PP
.Vb 11
\&   # HELP perl_heap_svs_by_type Number of SVs classified by type
\&   # TYPE perl_heap_svs_by_type gauge
\&   perl_heap_svs_by_type{type="ARRAY"} 2919
\&   perl_heap_svs_by_type{type="CODE"} 1735
\&   perl_heap_svs_by_type{type="GLOB"} 2647
\&   perl_heap_svs_by_type{type="HASH"} 470
\&   perl_heap_svs_by_type{type="INVLIST"} 68
\&   perl_heap_svs_by_type{type="IO"} 12
\&   perl_heap_svs_by_type{type="NULL"} 8752
\&   perl_heap_svs_by_type{type="REGEXP"} 171
\&   perl_heap_svs_by_type{type="SCALAR"} 9958
.Ve
.PP
This level of detail is unlikely to be useful for most generic production
purposes but may be helpful to set in specific processes when investigating
specific memory-related issues for a limited time.
.PP
For an even greater level of detail, set the value to 2 to additionally obtain
another breakdown of blessed objects by class:
.PP
.Vb 6
\&   # HELP perl_heap_svs_by_class Number of SVs classified by class
\&   # TYPE perl_heap_svs_by_class gauge
\&   ...
\&   perl_heap_svs_by_class{class="Net::Prometheus"} 1
\&   perl_heap_svs_by_class{class="Net::Prometheus::PerlCollector"} 1
\&   perl_heap_svs_by_class{class="Net::Prometheus::ProcessCollector::linux"} 1
.Ve
.PP
Note that this will yield a large amount of output for any non-trivially sized
program, so should only be enabled under carefully-controlled conditions.
.PP
The value of this variable can be overridden on a per-collection basis by
passing the option
.PP
.Vb 1
\&   Net::Prometheus\->render( { perl_collector_detail => 1 } );  # or 2
.Ve
.PP
This may be more convenient for short-term traces from exporters that parse
\&\s-1HTTP\s0 query parameters into collector options.
.PP
.Vb 1
\&   GET .../metrics?perl_collector_detail=1
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Evans <leonerd@leonerd.org.uk>
