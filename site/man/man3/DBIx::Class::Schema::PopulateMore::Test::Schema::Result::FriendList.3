.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Schema::PopulateMore::Test::Schema::Result::FriendList 3"
.TH DBIx::Class::Schema::PopulateMore::Test::Schema::Result::FriendList 3 "2014-10-09" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Schema::PopulateMore::Test::Schema::Result::FriendList \- An example Friends Class;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Probably not the best way to do a friend list relationship.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
This class defines the following attributes.
.SH "PACKAGE METHODS"
.IX Header "PACKAGE METHODS"
This module defines the following package methods
.SS "table"
.IX Subsection "table"
Name of the Physical table in the database
.SS "add_columns"
.IX Subsection "add_columns"
Add columns and meta information
.PP
\fIfk_person_id\fR
.IX Subsection "fk_person_id"
.PP
\&\s-1ID\s0 of the person with friends
.PP
\fIfk_friend_id\fR
.IX Subsection "fk_friend_id"
.PP
Who is the friend?
.SS "primary_key"
.IX Subsection "primary_key"
Sets the Primary keys for this table
.SS "befriender"
.IX Subsection "befriender"
The person that 'owns' the friendship (list)
.SS "friendee"
.IX Subsection "friendee"
The actual friend that befriender is listing
.SH "METHODS"
.IX Header "METHODS"
This module defines the following methods.
.SH "AUTHOR"
.IX Header "AUTHOR"
Please see DBIx::Class::Schema::PopulateMore For authorship information
.SH "LICENSE"
.IX Header "LICENSE"
Please see DBIx::Class::Schema::PopulateMore For licensing terms.
