.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "GeoIP2::Database::Reader 3"
.TH GeoIP2::Database::Reader 3 "2019-06-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GeoIP2::Database::Reader \- Perl API for GeoIP2 databases
.SH "VERSION"
.IX Header "VERSION"
version 2.006002
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use 5.008;
\&
\&  use GeoIP2::Database::Reader;
\&
\&  my $reader = GeoIP2::Database::Reader\->new(
\&      file    => \*(Aq/path/to/database\*(Aq,  # e.g. /home/maxmind/db/GeoIP2\-Country.mmdb
\&      locales => [ \*(Aqen\*(Aq, \*(Aqde\*(Aq, ]
\&  );
\&
\&  my $city = $reader\->city( ip => \*(Aq24.24.24.24\*(Aq );
\&  my $country = $city\->country();
\&  print $country\->iso_code(), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides a reader \s-1API\s0 for all GeoIP2 databases. Each method returns
a different model class.
.PP
If the database does not return a particular piece of data for an \s-1IP\s0 address,
the associated attribute is not populated.
.SH "USAGE"
.IX Header "USAGE"
The basic \s-1API\s0 for this class is the same for all database types.  First you
create a database reader object with your \f(CW\*(C`file\*(C'\fR and \f(CW\*(C`locale\*(C'\fR params.
Then you call the method corresponding to your database type, passing it the
\&\s-1IP\s0 address you want to look up.
.PP
If the request succeeds, the method call will return a model class for the
method point you called.
.PP
If the database cannot be read, the reader class throws an exception.
.SH "IP GEOLOCATION USAGE"
.IX Header "IP GEOLOCATION USAGE"
\&\s-1IP\s0 geolocation is inherently imprecise. Locations are often near the center of
the population. Any location provided by a GeoIP2 database should not be used
to identify a particular address or household.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
This class has a single constructor method:
.SS "GeoIP2::Database::Reader\->\fBnew()\fP"
.IX Subsection "GeoIP2::Database::Reader->new()"
This method creates a new object. It accepts the following arguments:
.IP "\(bu" 4
file
.Sp
This is the path to the GeoIP2 database which you'd like to query. The path
should include the filename.
.IP "\(bu" 4
locales
.Sp
This is an array reference where each value is a string indicating a locale.
This argument will be passed on to record classes to use when their \f(CW\*(C`name()\*(C'\fR
methods are called.
.Sp
The order of the locales is significant. When a record class has multiple
names (country, city, etc.), its \f(CW\*(C`name()\*(C'\fR method will look at each element of
this array ref and return the first locale for which it has a name.
.Sp
Note that the only locale which is always present in the GeoIP2 data in \*(L"en\*(R".
If you do not include this locale, the \f(CW\*(C`name()\*(C'\fR method may end up returning
\&\f(CW\*(C`undef\*(C'\fR even when the record in question has an English name.
.Sp
Currently, the valid list of locale codes is:
.RS 4
.IP "\(bu" 8
de \- German
.IP "\(bu" 8
en \- English
.Sp
English names may still include accented characters if that is the accepted
spelling in English. In other words, English does not mean \s-1ASCII.\s0
.IP "\(bu" 8
es \- Spanish
.IP "\(bu" 8
fr \- French
.IP "\(bu" 8
ja \- Japanese
.IP "\(bu" 8
pt-BR \- Brazilian Portuguese
.IP "\(bu" 8
ru \- Russian
.IP "\(bu" 8
zh-CN \- simplified Chinese
.RE
.RS 4
.Sp
Passing any other locale code will result in an error.
.Sp
The default value for this argument is \f(CW\*(C`[\*(Aqen\*(Aq]\*(C'\fR.
.RE
.SH "REQUEST METHODS"
.IX Header "REQUEST METHODS"
All of the request methods accept a single argument:
.IP "\(bu" 4
ip
.Sp
This must be a valid IPv4 or IPv6 address. This is the address that you want to
look up using the GeoIP2 web service.
.Sp
Unlike the web service client class, you cannot pass the string \*(L"me\*(R" as your ip
address.
.ie n .SS "$reader\->\fBasn()\fP"
.el .SS "\f(CW$reader\fP\->\fBasn()\fP"
.IX Subsection "$reader->asn()"
This method returns a GeoIP2::Model::ASN object.
.ie n .SS "$reader\->\fBconnection_type()\fP"
.el .SS "\f(CW$reader\fP\->\fBconnection_type()\fP"
.IX Subsection "$reader->connection_type()"
This method returns a GeoIP2::Model::ConnectionType object.
.ie n .SS "$reader\->\fBcountry()\fP"
.el .SS "\f(CW$reader\fP\->\fBcountry()\fP"
.IX Subsection "$reader->country()"
This method returns a GeoIP2::Model::Country object.
.ie n .SS "$reader\->\fBcity()\fP"
.el .SS "\f(CW$reader\fP\->\fBcity()\fP"
.IX Subsection "$reader->city()"
This method returns a GeoIP2::Model::City object.
.ie n .SS "$reader\->\fBdomain()\fP"
.el .SS "\f(CW$reader\fP\->\fBdomain()\fP"
.IX Subsection "$reader->domain()"
This method returns a GeoIP2::Model::Domain object.
.ie n .SS "$reader\->\fBisp()\fP"
.el .SS "\f(CW$reader\fP\->\fBisp()\fP"
.IX Subsection "$reader->isp()"
This method returns a GeoIP2::Model::ISP object.
.ie n .SS "$reader\->\fBenterprise()\fP"
.el .SS "\f(CW$reader\fP\->\fBenterprise()\fP"
.IX Subsection "$reader->enterprise()"
This method returns a GeoIP2::Model::Enterprise object.
.ie n .SS "$reader\->\fBanonymous_ip()\fP"
.el .SS "\f(CW$reader\fP\->\fBanonymous_ip()\fP"
.IX Subsection "$reader->anonymous_ip()"
This method returns a GeoIP2::Model::AnonymousIP object.
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
.ie n .SS "$reader\->\fBmetadata()\fP"
.el .SS "\f(CW$reader\fP\->\fBmetadata()\fP"
.IX Subsection "$reader->metadata()"
This method returns a MaxMind::DB::Metadata object containing information
about the database.
.SH "EXCEPTIONS"
.IX Header "EXCEPTIONS"
In the case of a fatal error, the reader will throw a
GeoIP2::Error::Generic or GeoIP2::Error::IPAddressNotFound exception
object.
.PP
This error class has an \f(CW\*(C`$error\->message()\*(C'\fR method and overload
stringification to show that message. This means that if you don't explicitly
catch errors they will ultimately be sent to \f(CW\*(C`STDERR\*(C'\fR with some sort of
(hopefully) useful error message.
.SH "WHAT DATA IS RETURNED?"
.IX Header "WHAT DATA IS RETURNED?"
While many of the databases return the same basic records, the attributes which
can be populated vary between model classes. In addition, while a database may
offer a particular piece of data, MaxMind does not always have every piece of
data for any given \s-1IP\s0 address.
.PP
Because of these factors, it is possible for any model class to return a record
where some or all of the attributes are unpopulated.
.PP
See <http://dev.maxmind.com/geoip/geoip2/web\-services> for details on what
data each end point \fImay\fR return.
.PP
Every record class attribute has a corresponding predicate method so you can
check to see if the attribute is set.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through <https://github.com/maxmind/GeoIP2\-perl/issues>.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Dave Rolsky <drolsky@maxmind.com>
.IP "\(bu" 4
Greg Oschwald <goschwald@maxmind.com>
.IP "\(bu" 4
Mark Fowler <mfowler@maxmind.com>
.IP "\(bu" 4
Olaf Alders <oalders@maxmind.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 \- 2019 by MaxMind, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
