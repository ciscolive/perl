.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DTC::Query::Parameters 3"
.TH Infoblox::DTC::Query::Parameters 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DTC::Query::Parameters \- A DTC query call parameters object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1DTC\s0 query call parameters object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 7
\& my $params = Infoblox::DTC::Query::Parameters\->new(
\&     address => $string,                          # Required
\&     qname   => $string,                          # Required
\&     type    => \*(AqA\*(Aq | \*(AqAAAA\*(Aq | \*(AqNAPTR\*(Aq | \*(AqCNAME\*(Aq, # Required
\&     lbdn    => $lbdn,                            # Required
\&     member  => $string,                          # Required
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The object does not support any session methods. It's used as a parameters for a \s-1DTC\s0 query call.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
.SH "Infoblox::DTC\->query( )"
.IX Header "Infoblox::DTC->query( )"
.RS 4
Use this method to perform a \s-1DTC\s0 query on a given member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::DTC::Query::Parameters object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns an Infoblox::DTC::Query::Response when operation succeeds, and returns 'false' when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #perform DTC query
\& my $response = $dtc\->query($params);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of the object.
.SS "address( )"
.IX Subsection "address( )"
.RS 4
Use this method to set or retrieve an ostensible IPv4 or IPv6 source address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string that contains an IPv4 or IPv6 address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get address value
\& my $address = $params\->address();
\&
\& #modify address value
\& $params\->address(\*(Aq192.168.1.0\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "lbdn( )"
.IX Subsection "lbdn( )"
.RS 4
Use this method to set or retrieve a specific \s-1LBDN\s0 object for querying.
.Sp
Note that \s-1LBDN\s0 objects must be first retrieved using the \fBget()\fR or \fBsearch()\fR operation.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::DTC::LBDN object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get lbdn value
\& my $lbdn = $params\->lbdn();
\&
\& #modify lbdn value
\& $params\->lbdn($lbdn);
.Ve
.RE
.RS 4
.RE
.SS "member( )"
.IX Subsection "member( )"
.RS 4
Use this method to set or retrieve a member name for querying.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string that contains the member name.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get member value
\& my $member = $params\->member();
\&
\& #modify member value
\& $params\->member(\*(Aqlocalhost.localdomain\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "qname( )"
.IX Subsection "qname( )"
.RS 4
Use this method to set or retrieve a fully-qualified \s-1DNS\s0 query name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string, which contains a query name in \s-1FQDN\s0 format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get qname value
\& my $qname = $params\->qname();
\&
\& #modify qname value
\& $params\->qname($fqdn);
.Ve
.RE
.RS 4
.RE
.SS "type( )"
.IX Subsection "type( )"
.RS 4
Use this method to set or retrieve the type of desired results.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are 'A', '\s-1AAAA\s0', '\s-1CNAME\s0' and '\s-1NAPTR\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get type value
\& my $type = $params\->type();
\&
\& #modify type value
\& $params\->type(\*(AqAAAA\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DTC\->\fBquery()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
