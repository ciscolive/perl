.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Log::Shiras::Types 3"
.TH Log::Shiras::Types 3 "2016-10-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Shiras::Types \- The Type::Tiny library for Log::Shiras
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        #!perl
\&        package Log::Shiras::Report::MyRole;
\&
\&        use Modern::Perl;#suggested
\&        use Moose::Role;
\&        use Log::Shiras::Types v0.013 qw(
\&                ShirasFormat
\&                JsonFile
\&        );
\&
\&        has     \*(Aqsomeattribute\*(Aq =>(
\&                        isa     => ShirasFormat,#Note the lack of quotes
\&                );
\&
\&        sub valuetestmethod{
\&                return is_JsonFile( \*(Aqmy_file.jsn\*(Aq );
\&        }
\&
\&        no Moose::Role;
\&
\&        1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the custom type class that ships with the Log::Shiras package.
.PP
There are only subtypes in this package!  \fB\s-1WARNING\s0\fR These types should be
considered in a beta state.  Future type fixing will be done with a set of tests in
the test suit of this package.  (currently few are implemented)
.PP
See MooseX::Types for general re-use of this module.
.SH "Types"
.IX Header "Types"
.SS "PosInt"
.IX Subsection "PosInt"
.IP "\fBDefinition: \fRall integers equal to or greater than 0" 4
.IX Item "Definition: all integers equal to or greater than 0"
.PD 0
.IP "\fBCoercions: \fRno coersion available" 4
.IX Item "Coercions: no coersion available"
.PD
.SS "ElevenInt"
.IX Subsection "ElevenInt"
.IP "\fBDefinition: \fRany posInt less than 11" 4
.IX Item "Definition: any posInt less than 11"
.PD 0
.IP "\fBCoercions: \fRno coersion available" 4
.IX Item "Coercions: no coersion available"
.PD
.SS "ElevenArray"
.IX Subsection "ElevenArray"
.IP "\fBDefinition: \fRan array with up to 12 total positions [0..11] \fIThis one goes to eleven\fR <https://en.wikipedia.org/wiki/This_Is_Spinal_Tap>" 4
.IX Item "Definition: an array with up to 12 total positions [0..11] This one goes to eleven <https://en.wikipedia.org/wiki/This_Is_Spinal_Tap>"
.PD 0
.IP "\fBCoercions: \fRno coersion available" 4
.IX Item "Coercions: no coersion available"
.PD
.SS "ShirasFormat"
.IX Subsection "ShirasFormat"
.IP "\fBDefinition: \fRthis is the core of the Log::Shiras::Report::ShirasFormat module. When prepared the final 'ShirasFormat' definition is a hashref that contains three keys;" 4
.IX Item "Definition: this is the core of the Log::Shiras::Report::ShirasFormat module. When prepared the final 'ShirasFormat' definition is a hashref that contains three keys;"
.RS 4
.PD 0
.IP "\fBfinal\fR \- a sprintf compliant format string" 4
.IX Item "final - a sprintf compliant format string"
.IP "\fBalt_input\fR \- an arrayref of input definitions and positions for all the additional 'ShirasFormat' modifications allowed" 4
.IX Item "alt_input - an arrayref of input definitions and positions for all the additional 'ShirasFormat' modifications allowed"
.IP "\fBbump_list\fR \- a record of where and how many new inputs will be inserted in the passed data for formatting the sprintf compliant string" 4
.IX Item "bump_list - a record of where and how many new inputs will be inserted in the passed data for formatting the sprintf compliant string"
.RE
.RS 4
.PD
.Sp
In order to simplify sprintf formatting I approached the sprintf definition as having
the following sequence;
.IP "\fBOptional \- Pre-string, \fR any pre-string that would be printed as it stands (not interpolated)" 4
.IX Item "Optional - Pre-string, any pre-string that would be printed as it stands (not interpolated)"
.PD 0
.IP "\fBRequired \- %, \fRthis indicates the start of a formating definition" 4
.IX Item "Required - %, this indicates the start of a formating definition"
.IP "\fBOptional \- Flags <http://perldoc.perl.org/functions/sprintf.html#flags>, \fR any one or two of the following optional flag [\es\e\-\e+0#] as defined in the sprintf documentation." 4
.IX Item "Optional - Flags <http://perldoc.perl.org/functions/sprintf.html#flags>, any one or two of the following optional flag [s-+0#] as defined in the sprintf documentation."
.IP "\fBOptional \- Order of arguments <http://perldoc.perl.org/functions/sprintf.html#order-of-arguments>, \fR indicate some other position to obtain the formatted value." 4
.IX Item "Optional - Order of arguments <http://perldoc.perl.org/functions/sprintf.html#order-of-arguments>, indicate some other position to obtain the formatted value."
.IP "\fBOptional \- Vector flag <http://perldoc.perl.org/functions/sprintf.html#vector-flag>, \fRto treat each input character as a value in a vector then you use the vector flag with it's optional vector separator definition." 4
.IX Item "Optional - Vector flag <http://perldoc.perl.org/functions/sprintf.html#vector-flag>, to treat each input character as a value in a vector then you use the vector flag with it's optional vector separator definition."
.IP "\fBOptional \- Minimum field width <http://perldoc.perl.org/functions/sprintf.html#(minimum)-width>, \fR This defines the space taken for presenting the value" 4
.IX Item "Optional - Minimum field width <http://perldoc.perl.org/functions/sprintf.html#(minimum)-width>, This defines the space taken for presenting the value"
.IP "\fBOptional \- Maximum field width <http://perldoc.perl.org/functions/sprintf.html#precision%2c-or-maximum-width>, \fR This defines the maximum length of the presented value.  If maximum width is smaller than the minimum width then the value is truncatd to the maximum width and presented in the mimimum width space as defined by the flags." 4
.IX Item "Optional - Maximum field width <http://perldoc.perl.org/functions/sprintf.html#precision%2c-or-maximum-width>, This defines the maximum length of the presented value. If maximum width is smaller than the minimum width then the value is truncatd to the maximum width and presented in the mimimum width space as defined by the flags."
.IP "\fBRequired \- Data type definition <http://perldoc.perl.org/functions/sprintf.html#sprintf-FORMAT%2c-LIST>, \fR This is done with an upper or lower case letter as described in the sprintf documentation.  Only the letters defined in the sprintf documentation are supported.  These letters close the sprintf documentation segment started with '%'." 4
.IX Item "Required - Data type definition <http://perldoc.perl.org/functions/sprintf.html#sprintf-FORMAT%2c-LIST>, This is done with an upper or lower case letter as described in the sprintf documentation. Only the letters defined in the sprintf documentation are supported. These letters close the sprintf documentation segment started with '%'."
.RE
.RS 4
.PD
.Sp
The specific combination of these values is defined in the perldoc
sprintf <http://perldoc.perl.org/functions/sprintf.html>.
.Sp
The module ShirasFormat expands on this definitions as follows;
.ie n .IP "\fBWord in braces {}, \fR just prior to the ""Data type definition"" you can begin a sequence that starts with a word (no spaces) enclosed in braces.  This word will be the name of the source data used in this format sequence." 4
.el .IP "\fBWord in braces {}, \fR just prior to the ``Data type definition'' you can begin a sequence that starts with a word (no spaces) enclosed in braces.  This word will be the name of the source data used in this format sequence." 4
.IX Item "Word in braces {}, just prior to the Data type definition you can begin a sequence that starts with a word (no spaces) enclosed in braces. This word will be the name of the source data used in this format sequence."
.PD 0
.ie n .IP "\fBSource indicator qr/[\s-1MP\s0]/, \fR just after the ""Word in braces {}"" you must indicate where the code should look for this information.  There are only two choices;" 4
.el .IP "\fBSource indicator qr/[\s-1MP\s0]/, \fR just after the ``Word in braces {}'' you must indicate where the code should look for this information.  There are only two choices;" 4
.IX Item "Source indicator qr/[MP]/, just after the Word in braces {} you must indicate where the code should look for this information. There are only two choices;"
.RS 4
.IP "\fBP\fR \- a passed value in the message hash reference.  The word in braces should be an exact match to a key in the message hashref. The core value used for this ShirasFormat segemnt will be the value assigned to that key." 4
.IX Item "P - a passed value in the message hash reference. The word in braces should be an exact match to a key in the message hashref. The core value used for this ShirasFormat segemnt will be the value assigned to that key."
.IP "\fBM\fR \- a method name to be discovered by the class.  \fIThis method must exist at the time the format is set!\fR  When the Shiras format string is set the code will attempt to locate the method and save the location for calling this method to speed up implementation of ongoing formatting operations.  If the method does not exist when the format string is set even if it will exist before data is passed for formatting then this call will fail. if you want to pass a closure (subroutine reference) then pass it as the value in the mesage hash part of the message ref and call it with 'P'." 4
.IX Item "M - a method name to be discovered by the class. This method must exist at the time the format is set! When the Shiras format string is set the code will attempt to locate the method and save the location for calling this method to speed up implementation of ongoing formatting operations. If the method does not exist when the format string is set even if it will exist before data is passed for formatting then this call will fail. if you want to pass a closure (subroutine reference) then pass it as the value in the mesage hash part of the message ref and call it with 'P'."
.RE
.RS 4
.RE
.IP "\fBCode pairs in (), following the source indicator\fR often the passed information is a code reference and for that code to be useful it needs to accept input.  These code pairs are a way of implementing the code.  The code pairs must be in intended use sequence. The convention is to write these in a fat comma list.  There is no limit to code pairs quatities. There are three possible keys for these pairs;" 4
.IX Item "Code pairs in (), following the source indicator often the passed information is a code reference and for that code to be useful it needs to accept input. These code pairs are a way of implementing the code. The code pairs must be in intended use sequence. The convention is to write these in a fat comma list. There is no limit to code pairs quatities. There are three possible keys for these pairs;"
.RS 4
.IP "\fBm\fR this indicates a method call.  If the code passed is actually an object with methods then this will call the value of this pair as a method on the code." 4
.IX Item "m this indicates a method call. If the code passed is actually an object with methods then this will call the value of this pair as a method on the code."
.IP "\fBi\fR this indicates regular input to the method and input will be provided to a method using the value as follows;" 4
.IX Item "i this indicates regular input to the method and input will be provided to a method using the value as follows;"
.PD
.Vb 1
\&        $method( \*(Aqvalue\*(Aq )
.Ve
.IP "\fBl\fR this indicates lvalue input to the method and input will be provided to a method using the value as follows;" 4
.IX Item "l this indicates lvalue input to the method and input will be provided to a method using the value as follows;"
.Vb 1
\&        $method\->( \*(Aqvalue\*(Aq )
.Ve
.IP "\fB[value]\fR Values to the methods can be provided in one of three ways. A \fBstring\fR that will be sent to the method directly. An \fB*\fR to indicate that the method will consume the next value in the passed message array ref.  Or an \fBinteger\fR indicating how many of the elements of the passed messay array should be consumed.  When elements of the passed message array are consumed they are consumed in order just like other sprintf elements." 4
.IX Item "[value] Values to the methods can be provided in one of three ways. A string that will be sent to the method directly. An * to indicate that the method will consume the next value in the passed message array ref. Or an integer indicating how many of the elements of the passed messay array should be consumed. When elements of the passed message array are consumed they are consumed in order just like other sprintf elements."
.RE
.RS 4
.Sp
When a special ShirasFormat segment is called the braces and the Source indicator are
manditory.  The code pairs are optional.
.RE
.IP "\fBCoercions: \fRfrom a modified sprintf format string" 4
.IX Item "Coercions: from a modified sprintf format string"
.RE
.RS 4
.RE
.SS "TextFile"
.IX Subsection "TextFile"
.PD 0
.IP "\fBDefinition: \fRa file name with a \e.txt or \e.csv extention that exists" 4
.IX Item "Definition: a file name with a .txt or .csv extention that exists"
.IP "\fBCoercions: \fRno coersion available" 4
.IX Item "Coercions: no coersion available"
.PD
.SS "HeaderString"
.IX Subsection "HeaderString"
.IP "\fBDefinition: \fRa string without any newlines" 4
.IX Item "Definition: a string without any newlines"
.PD 0
.IP "\fBCoercions: \fRif coercions are turned on, newlines will be stripped (\en\er)" 4
.IX Item "Coercions: if coercions are turned on, newlines will be stripped (nr)"
.PD
.SS "YamlFile"
.IX Subsection "YamlFile"
.IP "\fBDefinition: \fRa file name with a qr/(\e.yml|\e.yaml)/ extention that exists" 4
.IX Item "Definition: a file name with a qr/(.yml|.yaml)/ extention that exists"
.PD 0
.IP "\fBCoercions: \fRnone" 4
.IX Item "Coercions: none"
.PD
.SS "JsonFile"
.IX Subsection "JsonFile"
.IP "\fBDefinition: \fRa file name with a qr/(\e.jsn|\e.json)/ extention that exists" 4
.IX Item "Definition: a file name with a qr/(.jsn|.json)/ extention that exists"
.PD 0
.IP "\fBCoercions: \fRnone" 4
.IX Item "Coercions: none"
.PD
.SS "ArgsHash"
.IX Subsection "ArgsHash"
.IP "\fBDefinition: \fRa hashref that has at least one of the following keys" 4
.IX Item "Definition: a hashref that has at least one of the following keys"
.Vb 6
\&        name_space_bounds
\&        reports
\&        buffering
\&        ignored_caller_names
\&        will_cluck
\&        logging_levels
.Ve
.Sp
This are the primary switchboard settings.
.ie n .IP "\fBCoersion \fRfrom a ""JsonFile"" or ""YamlFile"" it will attempt to open the file and turn the file into a hashref that will pass the ArgsHash criteria" 4
.el .IP "\fBCoersion \fRfrom a ``JsonFile'' or ``YamlFile'' it will attempt to open the file and turn the file into a hashref that will pass the ArgsHash criteria" 4
.IX Item "Coersion from a JsonFile or YamlFile it will attempt to open the file and turn the file into a hashref that will pass the ArgsHash criteria"
.SS "ReportObject"
.IX Subsection "ReportObject"
.PD 0
.ie n .IP "\fBDefinition: \fRan object that passes $object\->can( 'add_line' )" 4
.el .IP "\fBDefinition: \fRan object that passes \f(CW$object\fR\->can( 'add_line' )" 4
.IX Item "Definition: an object that passes $object->can( 'add_line' )"
.IP "\fBCoersion 1: \fRfrom a hashref it will use MooseX::ShortCut::BuildInstance <http://search.cpan.org/~jandrew/MooseX-ShortCut-BuildInstance/lib/MooseX/ShortCut/BuildInstance.pm> to build a report object if the necessary hashref is passed instead of an object" 4
.IX Item "Coersion 1: from a hashref it will use MooseX::ShortCut::BuildInstance <http://search.cpan.org/~jandrew/MooseX-ShortCut-BuildInstance/lib/MooseX/ShortCut/BuildInstance.pm> to build a report object if the necessary hashref is passed instead of an object"
.ie n .IP "\fBCoersion 2: \fRfrom a ""JsonFile"" or ""YamlFile"" it will attempt to open the file and turn the file into a hashref that can be used in ""Coersion 1""." 4
.el .IP "\fBCoersion 2: \fRfrom a ``JsonFile'' or ``YamlFile'' it will attempt to open the file and turn the file into a hashref that can be used in ``Coersion 1''." 4
.IX Item "Coersion 2: from a JsonFile or YamlFile it will attempt to open the file and turn the file into a hashref that can be used in Coersion 1."
.PD
.SH "GLOBAL VARIABLES"
.IX Header "GLOBAL VARIABLES"
.IP "\fB\f(CB$ENV\fB{hide_warn}\fR" 4
.IX Item "$ENV{hide_warn}"
The module will warn when debug lines are 'Unhide'n.  In the case where the you
don't want these notifications set this environmental variable to true.
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
write a test suit for the types to fix behavior!
.IP "\(bu" 4
write a set of tests for combinations of \f(CW%n\fR and {string}M
.SH "SUPPORT"
.IX Header "SUPPORT"
.IP "Github Log\-Shiras/issues <https://github.com/jandrew/Log-Shiras/issues>" 4
.IX Item "Github Log-Shiras/issues <https://github.com/jandrew/Log-Shiras/issues>"
.SH "AUTHOR"
.IX Header "AUTHOR"
.PD 0
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "DEPENDANCIES"
.IX Header "DEPENDANCIES"
.IP "Carp \- confess" 4
.IX Item "Carp - confess"
.PD 0
.IP "version" 4
.IX Item "version"
.IP "YAML::Any \- ( Dump LoadFile )" 4
.IX Item "YAML::Any - ( Dump LoadFile )"
.IP "\s-1JSON::XS\s0" 4
.IX Item "JSON::XS"
.IP "MooseX::Types" 4
.IX Item "MooseX::Types"
.IP "MooseX::Types::Moose" 4
.IX Item "MooseX::Types::Moose"
.IP "MooseX::ShortCut::BuildInstance \- 1.044" 4
.IX Item "MooseX::ShortCut::BuildInstance - 1.044"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Type::Tiny" 4
.IX Item "Type::Tiny"
