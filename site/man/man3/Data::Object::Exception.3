.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::Exception 3"
.TH Data::Object::Exception 3 "2020-03-14" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::Exception
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Exception Class for Perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Data::Object::Exception;
\&
\&  my $exception = Data::Object::Exception\->new;
\&
\&  # $exception\->throw
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides functionality for creating, throwing, and introspecting
exception objects.
.SH "SCENARIOS"
.IX Header "SCENARIOS"
This package supports the following scenarios:
.SS "args\-1"
.IX Subsection "args-1"
.Vb 1
\&  use Data::Object::Exception;
\&
\&  my $exception = Data::Object::Exception\->new(\*(AqOops!\*(Aq);
\&
\&  # $exception\->throw
.Ve
.PP
The package allows objects to be instantiated with a single argument.
.SS "args-kv"
.IX Subsection "args-kv"
.Vb 1
\&  use Data::Object::Exception;
\&
\&  my $exception = Data::Object::Exception\->new(message => \*(AqOops!\*(Aq);
\&
\&  # $exception\->throw
.Ve
.PP
The package allows objects to be instantiated with key-value arguments.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
This package has the following attributes:
.SS "context"
.IX Subsection "context"
.Vb 1
\&  context(Any)
.Ve
.PP
This attribute is read-only, accepts \f(CW\*(C`(Any)\*(C'\fR values, and is optional.
.SS "id"
.IX Subsection "id"
.Vb 1
\&  id(Str)
.Ve
.PP
This attribute is read-only, accepts \f(CW\*(C`(Str)\*(C'\fR values, and is optional.
.SS "message"
.IX Subsection "message"
.Vb 1
\&  message(Str)
.Ve
.PP
This attribute is read-only, accepts \f(CW\*(C`(Str)\*(C'\fR values, and is optional.
.SH "METHODS"
.IX Header "METHODS"
This package implements the following methods:
.SS "explain"
.IX Subsection "explain"
.Vb 1
\&  explain() : Str
.Ve
.PP
The explain method returns an error message with stack trace.
.IP "explain example #1" 4
.IX Item "explain example #1"
.Vb 1
\&  use Data::Object::Exception;
\&
\&  my $exception = Data::Object::Exception\->new(\*(AqOops!\*(Aq);
\&
\&  $exception\->explain
.Ve
.SS "throw"
.IX Subsection "throw"
.Vb 1
\&  throw(Tuple[Str, Str] | Str $message, Any $context, Maybe[Number] $offset) : Any
.Ve
.PP
The throw method throws an error with message (and optionally, an \s-1ID\s0).
.IP "throw example #1" 4
.IX Item "throw example #1"
.Vb 1
\&  use Data::Object::Exception;
\&
\&  my $exception = Data::Object::Exception\->new;
\&
\&  $exception\->throw(\*(AqOops!\*(Aq)
.Ve
.IP "throw example #2" 4
.IX Item "throw example #2"
.Vb 1
\&  use Data::Object::Exception;
\&
\&  my $exception = Data::Object::Exception\->new(\*(AqOops!\*(Aq);
\&
\&  $exception\->throw
.Ve
.IP "throw example #3" 4
.IX Item "throw example #3"
.Vb 1
\&  use Data::Object::Exception;
\&
\&  my $exception = Data::Object::Exception\->new;
\&
\&  $exception\->throw([\*(AqE001\*(Aq, \*(AqOops!\*(Aq])
.Ve
.SS "trace"
.IX Subsection "trace"
.Vb 1
\&  trace(Int $offset, $Int $limit) : Object
.Ve
.PP
The trace method compiles a stack trace and returns the object. By default it
skips the first frame.
.IP "trace example #1" 4
.IX Item "trace example #1"
.Vb 1
\&  use Data::Object::Exception;
\&
\&  my $exception = Data::Object::Exception\->new(\*(AqOops!\*(Aq);
\&
\&  $exception\->trace(0)
.Ve
.IP "trace example #2" 4
.IX Item "trace example #2"
.Vb 1
\&  use Data::Object::Exception;
\&
\&  my $exception = Data::Object::Exception\->new(\*(AqOops!\*(Aq);
\&
\&  $exception\->trace(1)
.Ve
.IP "trace example #3" 4
.IX Item "trace example #3"
.Vb 1
\&  use Data::Object::Exception;
\&
\&  my $exception = Data::Object::Exception\->new(\*(AqOops!\*(Aq);
\&
\&  $exception\->trace(0,1)
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/data-object-exception/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/data-object-exception/wiki>
.PP
Project <https://github.com/iamalnewkirk/data-object-exception>
.PP
Initiatives <https://github.com/iamalnewkirk/data-object-exception/projects>
.PP
Milestones <https://github.com/iamalnewkirk/data-object-exception/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/data-object-exception/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/data-object-exception/issues>
