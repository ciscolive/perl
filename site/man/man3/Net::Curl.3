.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Curl 3"
.TH Net::Curl 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Curl \- Perl interface for libcurl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Net::Curl;
\& print $Net::Curl::VERSION;
\&
\& print Net::Curl::version();
.Ve
.SH "DOCUMENTATION"
.IX Header "DOCUMENTATION"
Net::Curl provides a Perl interface to libcurl created with object-oriented
implementations in mind. This documentation contains Perl-specific details
and quirks. For more information consult libcurl man pages and documentation
at <http://curl.haxx.se>.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package contains some static functions and version-releated constants.
It does not export by default anything, but constants can be exported upon
request.
.PP
.Vb 1
\& use Net::Curl qw(:constants);
.Ve
.PP
To perform any request you want Net::Curl::Easy.
.SS "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
None of those functions are exported, you must use fully qualified names.
.IP "version" 4
.IX Item "version"
Returns libcurl version string.
.Sp
.Vb 4
\& my $libcurl_verstr = Net::Curl::version();
\& # prints something like:
\& # libcurl/7.21.4 GnuTLS/2.10.4 zlib/1.2.5 c\-ares/1.7.4 ...
\& print $libcurl_verstr;
.Ve
.Sp
Calls \fBcurl_version\fR\|(3) <https://curl.haxx.se/libcurl/c/curl_version.html> function.
.IP "version_info" 4
.IX Item "version_info"
Returns a hashref with the same information as \fBcurl_version_info\fR\|(3) <https://curl.haxx.se/libcurl/c/curl_version_info.html>.
.Sp
.Vb 2
\& my $libcurl_ver = Net::Curl::version_info();
\& print Dumper( $libcurl_ver );
.Ve
.Sp
Example for version_info with age \s-1CURLVERSION_FOURTH:\s0
.Sp
.Vb 10
\& age => 3,
\& version => \*(Aq7.21.4\*(Aq,
\& version_num => 464132,
\& host => \*(Aqx86_64\-pld\-linux\-gnu\*(Aq,
\& features => 18109,
\& ssl_version => \*(AqGnuTLS/2.10.4\*(Aq
\& ssl_version_num => 0,
\& libz_version => \*(Aq1.2.5\*(Aq,
\& protocols => [ \*(Aqdict\*(Aq, \*(Aqfile\*(Aq, \*(Aqftp\*(Aq, \*(Aqftps\*(Aq, \*(Aqgopher\*(Aq, \*(Aqhttp\*(Aq,
\&                \*(Aqhttps\*(Aq, \*(Aqimap\*(Aq, \*(Aqimaps\*(Aq, \*(Aqldap\*(Aq, \*(Aqldaps\*(Aq, \*(Aqpop3\*(Aq,
\&                \*(Aqpop3s\*(Aq, \*(Aqrtmp\*(Aq, \*(Aqrtsp\*(Aq, \*(Aqscp\*(Aq, \*(Aqsftp\*(Aq, \*(Aqsmtp\*(Aq,
\&                \*(Aqsmtps\*(Aq, \*(Aqtelnet\*(Aq, \*(Aqtftp\*(Aq ],
\& ares => \*(Aq1.7.4\*(Aq,
\& ares_num => 67332,
\& libidn => \*(Aq1.20\*(Aq,
\& iconv_ver_num => 0,
\& libssh_version => \*(Aqlibssh2/1.2.7\*(Aq,
.Ve
.Sp
You can import constants if you want to check libcurl features:
.Sp
.Vb 5
\& use Net::Curl qw(:constants);
\& my $vi = Net::Curl::version_info();
\& unless ( $vi\->{features} & CURL_VERSION_SSL ) {
\&     die "SSL support is required\en";
\& }
.Ve
.IP "getdate" 4
.IX Item "getdate"
Decodes date string returning its numerical value, in seconds.
.Sp
.Vb 4
\& my $time = Net::Curl::getdate( "GMT 08:49:37 06\-Nov\-94 Sunday" );
\& my $timestr = gmtime $time;
\& print "$timestr\en";
\& # Sun Nov  6 08:49:37 1994
.Ve
.Sp
See \fBcurl_getdate\fR\|(3) <https://curl.haxx.se/libcurl/c/curl_getdate.html> for more info on supported input formats.
.SS "\s-1CONSTANTS\s0"
.IX Subsection "CONSTANTS"
.IP "CURL_VERSION_* and CURLVERSION_*" 4
.IX Item "CURL_VERSION_* and CURLVERSION_*"
Can be used for decoding \fBversion_info()\fR values. \fBcurl_version_info\fR\|(3) <https://curl.haxx.se/libcurl/c/curl_version_info.html>
.IP "LIBCURL_*" 4
.IX Item "LIBCURL_*"
Can be used for determining buildtime libcurl version. Some Net::Curl
features will not be available if it was built with older libcurl, even if
runtime libcurl version has necessary features.
.SH "STATUS"
.IX Header "STATUS"
Implemented interface is solid, there should be no more changes to it. Only
new features will be added.
.PP
This package tries very hard to not allow user do anything that could make
libcurl crash, but there still may be some corner cases where that happens.
.SH "AUTHORS"
.IX Header "AUTHORS"
This package was mostly rewritten by Przemyslaw Iskra <sparky at pld\-linux.org>.
.SH "HISTORY"
.IX Header "HISTORY"
Module started as an extension to WWW::Curl developed by Cris Bailiff
<c.bailiff+curl at devsecure.com>, Balint Szilakszi <szbalint at cpan.org>
and a long list of contributors. However, currently it shares no common code.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2011\-2015 Przemyslaw Iskra.
.PP
You may opt to use, copy, modify, merge, publish, distribute and/or sell
copies of the Software, and permit persons to whom the Software is furnished
to do so, under the terms of the \s-1MPL\s0 or the MIT/X\-derivate licenses. You may
pick one of these licenses.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Curl::Easy
Net::Curl::Compat
Net::Curl::examples
<http://curl.haxx.se>
\&\fBlibcurl\fR\|(3)
