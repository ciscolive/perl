.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "JSONAPI::Document 3"
.TH JSONAPI::Document 3 "2019-01-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JSONAPI::Document \- Turn DBIx results into JSON API documents.
.SH "VERSION"
.IX Header "VERSION"
version 2.4
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use JSONAPI::Document;
\&    use DBIx::Class::Schema;
\&
\&    my $jsonapi = JSONAPI::Document\->new({ api_url => \*(Aqhttp://example.com/api\*(Aq });
\&    my $schema = DBIx::Class::Schema\->connect([\*(Aqdbi:SQLite:dbname=:memory:\*(Aq, \*(Aq\*(Aq, \*(Aq\*(Aq]);
\&    my $user = $schema\->resultset(\*(AqUser\*(Aq)\->find(1);
\&
\&    # Builds a simple JSON API document, without any relationships
\&    my $doc = $jsonapi\->resource_document($user);
\&
\&    # Same but with all relationships
\&    my $doc = $jsonapi\->resource_document($user, { includes => \*(Aqall_related\*(Aq });
\&
\&    # With only the author relationship
\&    my $doc = $jsonapi\->resource_document($user, { includes => [\*(Aqauthor\*(Aq] });
\&
\&    # Fully blown resource document with all relationships and their attributes
\&    my $doc = $jsonapi\->compound_resource_document($user);
\&
\&    # Multiple resource documents
\&    my $docs = $jsonapi\->resource_documents($schema\->resultset(\*(AqUser\*(Aq));
\&
\&    # With sparse fieldsets
\&    my $doc = $jsonapi\->resource_document($user, { fields => [qw/name email/] });
\&
\&    # Relationships with sparse fieldsets
\&    my $doc = $jsonapi\->resource_document($user, { related_fields => { author => [qw/name expertise/] } });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Moo class that builds data structures according to the \s-1JSON API\s0 <http://jsonapi.org/format/> specification.
.SH "NOTES"
.IX Header "NOTES"
\&\s-1JSON API\s0 documents require that you define the type of a document, which this
library does using the source_name <https://metacpan.org/pod/DBIx::Class::ResultSource#source_name>
of the result row. The type is also pluralised using Linua::EN::Inflexion <https://metacpan.org/pod/Lingua::EN::Inflexion>
while keeping relationship names intact (i.e. an 'author' relationship will still be called 'author', with the type 'authors').
.PP
This module supplies an opt-in Moo role that can be consumed by objects that layer over a DBIx::Class::Row,
\&\f(CW\*(C`JSONAPI::Document::Role::Attributes\*(C'\fR. Consuming objects should implement a method called \f(CW\*(C`attributes\*(C'\fR
which will be used throughout the creation of resource documents for that result type to build the attributes
of the document. This is useful when you have a more complicated set of attributes that cannot be fulfilled
by simply calling \f(CW\*(C`get_inflated_columns\*(C'\fR (the default behaviour).
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "api_url"
.IX Subsection "api_url"
Required; An absolute \s-1URL\s0 pointing to your servers \s-1JSON API\s0 namespace.
.SS "kebab_case_attrs"
.IX Subsection "kebab_case_attrs"
Boolean attribute; setting this will make the column keys for each document into
kebab-cased-strings instead of snake_cased. Default is false.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "compound_resource_document(\fIDBIx::Class::Row|Object\fP $row, \fIHashRef\fP $options)"
.el .SS "compound_resource_document(\fIDBIx::Class::Row|Object\fP \f(CW$row\fP, \fIHashRef\fP \f(CW$options\fP)"
.IX Subsection "compound_resource_document(DBIx::Class::Row|Object $row, HashRef $options)"
A compound document is one that includes the resource object
along with the data of all its relationships.
.PP
Returns a \fIHashRef\fR with the following structure:
.PP
.Vb 10
\&    {
\&        data => {
\&            id => 1,
\&            type => \*(Aqauthors\*(Aq,
\&            attributes => {},
\&            relationships => {},
\&        },
\&        included => [
\&            {
\&                id => 1,
\&                type => \*(Aqposts\*(Aq,
\&                attributes => { ... },
\&            },
\&            ...
\&        ]
\&    }
.Ve
.PP
The following options can be given:
.ie n .IP """includes""" 4
.el .IP "\f(CWincludes\fR" 4
.IX Item "includes"
An array reference specifying inclusion of a subset of relationships.
By default all the relationships will be included. Use this if you
only want a subset of relationships (e.g. when accepting the \f(CW\*(C`includes\*(C'\fR
query parameter in your \s-1API\s0 requests, where you have to return only what
relationships were requested).
.Sp
This argument should contain strings representing direct relationships to the row,
and can also contain hash refs which specify nested inclusion. Example:
.Sp
.Vb 1
\&    $self\->compound_resource_document($post, [\*(Aqauthor\*(Aq, { comments => [\*(Aqauthor\*(Aq] }]);
.Ve
.Sp
This will include the post as the primary document, its direct relationships 'author'
and 'comments', and the 'author' of each related comment.
.Sp
\&\fB\s-1NOTE\s0\fR: Nested relationships are experimental and come with the following limitations:
.RS 4
.IP "\(bu" 2
many_to_many relationships are not supported
.IP "\(bu" 2
Only one level of depth is supported (so requesting 'include=comments.likes.author' will throw errors)
.IP "\(bu" 2
Are only available through \f(CW\*(C`compound_resource_document\*(C'\fR (not \f(CW\*(C`resource_document\*(C'\fR).
.RE
.RS 4
.RE
.ie n .SS "resource_document(\fIDBIx::Class::Row|Object\fP $row, \fIHashRef\fP $options)"
.el .SS "resource_document(\fIDBIx::Class::Row|Object\fP \f(CW$row\fP, \fIHashRef\fP \f(CW$options\fP)"
.IX Subsection "resource_document(DBIx::Class::Row|Object $row, HashRef $options)"
Builds a single resource document for the given result row. Will optionally
include relationships that contain resource identifiers.
.PP
Returns a \fIHashRef\fR with the following structure:
.PP
.Vb 6
\&    {
\&        id => 1,
\&        type => \*(Aqauthors\*(Aq,
\&        attributes => {},
\&        relationships => {},
\&    },
.Ve
.PP
View the resource document specification here <http://jsonapi.org/format/#document-resource-objects>.
.PP
Uses \f(CW\*(C`decamelize\*(C'\fR from Mojo::Util to parse the
source_name <https://metacpan.org/pod/DBIx::Class::ResultSource#source_name> of the DBIx::Class::Row and
set the appropriate type of the document. This is used to ensure that your rows source name gets
hyphenated appropriately when converted into its plural form.
.PP
The following options can be given:
.ie n .IP """includes"" \fIStr|ArrayRef\fR" 4
.el .IP "\f(CWincludes\fR \fIStr|ArrayRef\fR" 4
.IX Item "includes Str|ArrayRef"
Optional; Used to specify any relationships of the row to include.
.Sp
This argument can contain either the value 'all_related', which will return all the direct
relationships of the row, or an array ref including a subset of direct relationships.
.ie n .IP """with_attributes"" \fIBool\fR" 4
.el .IP "\f(CWwith_attributes\fR \fIBool\fR" 4
.IX Item "with_attributes Bool"
If \f(CW\*(C`includes\*(C'\fR is used, for each resulting relationship row, the attributes (columns) of that
relationship will be included.
.Sp
By default, each relationship will contain a links object <http://jsonapi.org/format/#document-links>.
.Sp
If this option is true, links object will be replaced with attributes.
.ie n .IP """fields"" \fIArrayRef\fR" 4
.el .IP "\f(CWfields\fR \fIArrayRef\fR" 4
.IX Item "fields ArrayRef"
An optional list of attributes to include for the given resource. Implements
sparse fieldsets <http://jsonapi.org/format/#fetching-sparse-fieldsets> in the specification.
.Sp
Will pass the array reference to the \f(CW\*(C`attributes\*(C'\fR method (if you're using the attributes role), which
should make use of the reference and return \fBonly\fR those attributes that were requested.
.ie n .IP """related_fields"" \fIHashRef\fR" 4
.el .IP "\f(CWrelated_fields\fR \fIHashRef\fR" 4
.IX Item "related_fields HashRef"
Behaves the same as the \f(CW\*(C`fields\*(C'\fR option but for relationships, returning only those fields
for the related resource that were requested.
.Sp
Not specifying sparse fieldsets for a resource implies requesting all attributes for
that relationship.
.ie n .SS "resource_documents(\fIDBIx::Class::ResultSet|Object|ArrayRef\fP $resultset, \fIHashRef\fP $options)"
.el .SS "resource_documents(\fIDBIx::Class::ResultSet|Object|ArrayRef\fP \f(CW$resultset\fP, \fIHashRef\fP \f(CW$options\fP)"
.IX Subsection "resource_documents(DBIx::Class::ResultSet|Object|ArrayRef $resultset, HashRef $options)"
Builds the structure for multiple resource documents with a given resultset.
.PP
\&\f(CW$resultset\fR can be either a \f(CW\*(C`DBIx::Class::ResultSet\*(C'\fR object in which case this method will call
\&\f(CW\*(C`all\*(C'\fR on the resultset, an object that extends \f(CW\*(C`DBIx::Class::ResultSet\*(C'\fR, or you can pass in an
ArrayRef from your own \f(CW\*(C`all\*(C'\fR call.
.PP
Returns a \fIHashRef\fR with the following structure:
.PP
.Vb 11
\&    {
\&        data => [
\&            {
\&                id => 1,
\&                type => \*(Aqauthors\*(Aq,
\&                attributes => {},
\&                relationships => {},
\&            },
\&            ...
\&        ]
\&    }
.Ve
.PP
See \f(CW\*(C`resource_document\*(C'\fR for a list of options.
.SH "LICENSE"
.IX Header "LICENSE"
This code is released under the Perl 5 License.
