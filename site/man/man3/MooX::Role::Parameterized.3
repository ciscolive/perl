.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooX::Role::Parameterized 3"
.TH MooX::Role::Parameterized 3 "2015-12-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooX::Role::Parameterized \- roles with composition parameters
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 1
\&    package My::Role;
\&
\&    use Moo::Role;
\&    use MooX::Role::Parameterized;
\&
\&    role {
\&        my $params = shift;
\&        my $mop    = shift;
\&
\&        $mop\->has( $params\->{attr} => ( is => \*(Aqrw\*(Aq ));
\&
\&        $mop\->method($params\->{method} => sub {
\&            1024;
\&        });
\&    };
\&
\&    package My::Class;
\&
\&    use Moo;
\&    # experimental way of add roles
\&    use MooX::Role::Parameterized::With My::Role => {
\&        attr => \*(Aqbaz\*(Aq,
\&        method => \*(Aqrun\*(Aq
\&    };
\&
\&    package My::OldClass;
\&
\&    use Moo;
\&    use My::Role;
\&
\&    My::Role\->apply([{    # original way of add this role
\&        attr => \*(Aqbaz\*(Aq,    # add attribute read\-write called \*(Aqbaz\*(Aq 
\&        method => \*(Aqrun\*(Aq   # add method called \*(Aqrun\*(Aq and return 1024 
\&    }
\&     ,                    # and if the apply receives one arrayref
\&    {   attr => \*(Aqbam\*(Aq,    # will call the role block multiple times.
\&        method => \*(Aqjump\*(Aq  # PLEASE CALL apply once
\&    }]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
It is an \fBexperimental\fR port of MooseX::Role::Parameterized to Moo.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
This package exports four subroutines: \f(CW\*(C`role\*(C'\fR, \f(CW\*(C`apply\*(C'\fR, \f(CW\*(C`hasp\*(C'\fR and \f(CW\*(C`method\*(C'\fR. The last two are now consider deprecated and will be removed soon.
.SS "role"
.IX Subsection "role"
This function accepts just \fBone\fR code block. Will execute this code then we apply the Role in the 
target class, and will receive the parameter list + one \fBmop\fR object.
.PP
The \fBmop\fR object is a proxy to the target class. It offer a better way to call \f(CW\*(C`has\*(C'\fR, \f(CW\*(C`requires\*(C'\fR or \f(CW\*(C`after\*(C'\fR without side effects.
.PP
The old way to create parameterized roles was calling \f(CW\*(C`has\*(C'\fR or \f(CW\*(C`method\*(C'\fR, but there is too much problems with this approach. To solve part of them
we add the hasp but it solve part of the problem. To be clean, we decide be explicit and offer one object with full Role capability.
.PP
Instead do
.PP
.Vb 3
\&  my ($p) = @_;
\&  ...
\&  hasp $p\->{attribute} => (...);
.Ve
.PP
We prefer
.PP
.Vb 3
\&  my ($p, $mop) = @_;
\&  ...
\&  $mop\->has($p\->{attribute} =>(...));
.Ve
.PP
Less magic, less problems.
.SS "apply"
.IX Subsection "apply"
When called, will apply the \*(L"role\*(R" on the current package. The behavior depends of the parameter list.
.PP
This will install the role in the target package. Does not need call \f(CW\*(C`with\*(C'\fR.
.PP
Important, if you want to apply the role multiple times, like to create multiple attributes, please pass an \fBarrayref\fR.
.SH "DEPRECATED FUNCTIONS"
.IX Header "DEPRECATED FUNCTIONS"
.SS "hasp"
.IX Subsection "hasp"
\&\s-1IMPORTANT:\s0 until the version 0.06 we have a terrible bug when you try to add the same role in two or more different classes.
To avoid this we should not call the \f(CW\*(C`has\*(C'\fR method to specify attributes but the method \f(CW\*(C`hasp\*(C'\fR (means 'has parameterized').
.SS "method"
.IX Subsection "method"
Add one method based on the parameter list, for example.
.SH "MooX::Role::Parameterized::With"
.IX Header "MooX::Role::Parameterized::With"
See MooX::Role::Parameterized::With package to easily load and apply roles.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MooseX::Role::Parameterized \- Moose version
.SH "LICENSE The MIT License"
.IX Header "LICENSE The MIT License"
.Vb 8
\& Permission is hereby granted, free of charge, to any person
\& obtaining a copy of this software and associated
\& documentation files (the "Software"), to deal in the Software
\& without restriction, including without limitation the rights to
\& use, copy, modify, merge, publish, distribute, sublicense,
\& and/or sell copies of the Software, and to permit persons to
\& whom the Software is furnished to do so, subject to the
\& following conditions:
\&  
\&  The above copyright notice and this permission notice shall
\&  be included in all copies or substantial portions of the
\&  Software.
\&   
\&   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
\&   WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
\&   INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
\&   MERCHANTABILITY, FITNESS FOR A PARTICULAR
\&   PURPOSE AND NONINFRINGEMENT. IN NO EVENT
\&   SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
\&   LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
\&   LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
\&   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
\&   CONNECTION WITH THE SOFTWARE OR THE USE OR
\&   OTHER DEALINGS IN THE SOFTWARE.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Tiago Peczenyj <tiago (dot) peczenyj (at) gmail (dot) com>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
