.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Member 3"
.TH Infoblox::Grid::Member 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Member \- Grid Member object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A grid member is a single Infoblox appliance or an \s-1HA\s0 pair of Infoblox appliances that belong to a grid.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $grid_member = Infoblox::Grid::Member\->new(
\&     gateway                 => $ipv4addr,                                          #Required
\&     ipv4addr                => $ipv4addr,                                          #Required
\&     mask                    => $netmask,                                           #Required
\&     name                    => $fqdn,                                              #Required
\&     additional_ip_list      => [$Interface1, $ipv4addr2, ...],                     #Optional / Default value is empty
\&     allow_syslog_clients    => [$ipv4addr | $ipv4_subnet/prefix, ...] | $nacl | undef, #Optional / Default value is undefined
\&     bgp_as                  => [$AS1, ...],                                        #Optional / Default value is empty
\&     alternate_resolver      => $Nameserver | $Member | $ipv4addr | undef,          #Optional / Default value is undefined
\&     comment                 => $string,                                            #Optional / Default value is empty
\&     config_addr_type        => "IPv4", "IPv6", "BOTH"                              #Optional / Default value is "IPv4"
\&     dscp                    => $uint,                                                                                          #Optional / Default value is 0
\&     enable_member_redirect  => "true" | "false",                                   #Optional / Default value is "false"
\&     enable_ha               => "true" | "false",                                   #Optional / Default value is "false"
\&     enable_lom              => "true" | "false",                                   #Optional / Default value is undefined
\&     enable_ntp              => "true" | "false",                                   #Optional / Default value is "false"
\&     enable_ro_api_access    => "true" | "false",                                   #Optional / Default value is "false"
\&     enable_syslog_proxy     => "true" | "false",                                   #Optional / Default value is "false"
\&     exclude_grid_master_as_ntp_server=> "true" | "false",                          #Optional / Default value is "false"
\&     extattrs                => { $string => $extattr, ... },                       #Optional / Default is undefined
\&     extensible_attributes   => { $string => $string | $num, $string => [ $string | $num, ... ], ... } #Optional / Default is undefined
\&     external_ntp_servers_enabled  => "true" | "false",                             #Optional / Default value is "false"
\&     ha_node2_port_duplex    => "Half" | "Full" | undef,                            #Optional / Default value is undefined
\&     ha_node2_port_speed     => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
\&     ha_port_duplex          => "Half" | "Full" | undef,                            #Optional / Default value is undefined
\&     ha_port_speed           => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
\&     ha_reserved_interface   => $interface,                                         #Optional
\&     ipv6addr                => $ipv6addr,                                          #Optional / Default value is undefined
\&     ipv6_cidr               => $cidr,                                              #Optional / Default value is undefined
\&     ipv6_gateway            => $ipv6addr,                                          #Optional / Default value is undefined
\&     ipv6_enable_auto_config => "true" | "false",                                   #Optional / Default value is "false"
\&     ipv6_static_routes      => [$Route1, $Route2, ...],                            #Optional / Default value is empty
\&     ipv6_vlan_id            => $uint,                                              #Optional / Default value is undefined
\&     lan1_dscp               => $uint,                                              #Optional / Default value is undefined
\&     lan1_ipv6_dscp          => $uint,                                              #Optional / Default value is undefined
\&     lan2_dscp               => $uint,                                              #Optional / Default value is undefined
\&     lan2_gateway            => $ipv4addr,                                          #Optional / Default value is undefined
\&     lan2_ipv4addr           => $ipv4addr,                                          #Optional / Default value is undefined
\&     lan2_ipv6addr           => $ipv6addr,                                          #Optional / Default value is undefined
\&     lan2_ipv6_cidr          => $cidr,                                              #Optional / Default value is undefined
\&     lan2_ipv6_dscp          => $uint,                                              #Optional / Default value is undefined
\&     lan2_ipv6_gateway       => $ipv6addr,                                          #Optional / Default value is undefined
\&     lan2_ipv6_enable        => "true" | "false",                                   #Optional / Default value is "false"
\&     lan2_ipv6_enable_auto_config => "true" | "false",                              #Optional / Default value is "false"
\&     lan2_ipv6_vlan_id       => $uint,                                              #Optional / Default value is undefined
\&     lan2_mask               => $netmask,                                           #Optional / Default value is undefined
\&     lan2_node2_port_duplex  => "Half" | "Full" | undef,                            #Optional / Default value is undefined
\&     lan2_node2_port_speed   => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
\&     lan2_port_duplex        => "Half" | "Full" | undef,                            #Optional / Default value is undefined
\&     lan2_port_speed         => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
\&     lan2_port               => "true" | "false",                                   #Optional / Default value is "false"
\&     lan2_reserved_interface => $interface,                                         #Optional
\&     lan2_router_id          => $num,                                               #Optional / Default value is undefined
\&     lan2_vlan_id            => $uint,                                              #Optional / Default value is undefined
\&     lan_node2_port_duplex   => "Half" | "Full" | undef,                            #Optional / Default value is undefined
\&     lan_node2_port_speed    => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
\&     lan_port_duplex         => "Half" | "Full" | undef,                            #Optional / Default value is undefined
\&     lan_port_speed          => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
\&     lan_reserved_interface  => $interface,                                         #Optional
\&     lcd_input               => "true" | "false" | undef,                           #Optional / Default value is undefined
\&     lcd_autodim             => $num,                                               #Optional / Default value is 30
\&     lcd_brightness          => $num,                                               #Optional / Default value is 7
\&     lcd_hwident             => "true" | "false",                                   #Optional / Default value is "false"
\&     lom_gateway             => $ipv4addr,                                                                                      #Optional / Default value is undefined
\&     lom_ipv4addr            => $ipv4addr,                                                                                      #Optional / Default value is undefined
\&     lom_mask                => $netmask,                                                                                       #Optional / Default value is undefined
\&     lom_users               => [$user1, $user2, ...],                                                          #Optional / Default value is undefined
\&     node1_lom_gateway       => $ipv4addr,                                                                                      #Optional / Default value is undefined
\&     node1_lom_ipv4addr      => $ipv4addr,                                                                                      #Optional / Default value is undefined
\&     node1_lom_mask          => $netmask,                                                                                       #Optional / Default value is undefined
\&     node2_lom_gateway       => $ipv4addr,                                                                                      #Optional / Default value is undefined
\&     node2_lom_ipv4addr      => $ipv4addr,                                                                                      #Optional / Default value is undefined
\&     node2_lom_mask          => $netmask,                                                                                       #Optional / Default value is undefined
\&     master_candidate        => "true" | "false",                                   #Optional / Default value is undefined
\&     member_service_communication => [$c1, $c2, ...],                               #Optional / Default value is undefined
\&     mgmt_dscp               => $uint,                                              #Optional / Default value is undefined
\&     mgmt_gateway            => $ipv4addr,                                          #Optional / Default value is undefined
\&     mgmt_lan                => $ipv4addr,                                          #Optional / Default value is undefined
\&     mgmt_ipv6addr           => $ipv6addr,                                          #Optional / Default value is undefined
\&     mgmt_ipv6_cidr          => $cidr,                                              #Optional / Default value is undefined
\&     mgmt_ipv6_dscp          => $uint,                                              #Optional / Default value is undefined
\&     mgmt_ipv6_gateway       => $ipv6addr,                                          #Optional / Default value is undefined
\&     mgmt_ipv6_enable_auto_config => "true" | "false",                              #Optional / Default value is "false"
\&     mgmt_mask               => $netmask,                                           #Optional / Default value is undefined
\&     mgmt_node2_port_duplex  => "Half" | "Full" | undef,                            #Optional / Default value is undefined
\&     mgmt_node2_port_speed   => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
\&     mgmt_port_duplex        => "Half" | "Full" | undef,                            #Optional / Default value is undefined
\&     mgmt_port_speed         => 10 | 100 | 1000 | undef,                            #Optional / Default value is undefined
\&     mgmt_port               => "true" | "false",                                   #Optional / Default value is "false"
\&     mgmt_reserved_interface => $interface,                                         #Optional
\&     nat_enabled             => "true" | "false",                                   #Optional / Default value is "false"
\&     nat_group               => $string | undef,                                    #Optional / Default value is empty
\&     nat_ip_address          => $ipv4addr | undef,                                  #Optional / Default value is undefined
\&
\&     nic_failover_enabled        => "true" | "false",                                   #Optional / Default value is "false"
\&     nic_failover_enable_primary => "true" | "false",                                   #Optional / Default value is "false"
\&     node1_ha                => $ipv4addr,                                          #Optional / Default value is undefined
\&     node1_ha_reserved_interface => $interface,                                     #Optional
\&     node1_hwtype            => "IB\-RSP" | ""                                       #Optional / Default value is ""
\&     node1_lan               => $ipv4addr,                                          #Optional / Default value is undefined
\&     node1_lan_ipv6addr      => $ipv6addr,                                          #Optional / Default value is undefined
\&     node1_lan_reserved_interface  => $interface,                                   #Optional
\&     node1_lan2_reserved_interface => $interface,                                   #Optional
\&     node1_lcd_autodim       => $num,                                               #Optional / Default value is undefined
\&     node1_lcd_brightness    => $num,                                               #Optional / Default value is undefined
\&     node1_lcd_hwident       => "true" | "false",                                   #Optional / Default value is undefined
\&     node1_mgmt_dscp         => $uint,                                              #Optional / Default value is undefined
\&     node1_mgmt_gateway      => $ipv4addr,                                          #Optional / Default value is undefined
\&     node1_mgmt_lan          => $ipv4addr,                                          #Optional / Default value is undefined
\&     node1_mgmt_ipv6addr     => $ipv6addr,                                          #Optional / Default value is undefined
\&     node1_mgmt_ipv6_cidr    => $cidr,                                              #Optional / Default value is undefined
\&     node1_mgmt_ipv6_dscp    => $uint,                                              #Optional / Default value is undefined
\&     node1_mgmt_ipv6_gateway => $ipv6addr,                                          #Optional / Default value is undefined
\&     node1_mgmt_ipv6_enable_auto_config => "true" | "false",                        #Optional / Default value is "false"
\&     node1_mgmt_mask         => $netmask,                                           #Optional / Default value is undefined
\&     node1_mgmt_port         => "true" | "false",                                   #Optional / Default value is undefined
\&     node1_mgmt_reserved_interface => $interface,                                   #Optional
\&     node1_nat               => $ipv4addr | undef,                                  #Optional / Default value is undefined
\&     node1_vpn_on_mgmt       => "true" | "false",                                   #Optional / Default value is undefined
\&     node2_ha                => $ipv4addr,                                          #Optional / Default value is undefined
\&     node2_ha_reserved_interface => $interface,                                     #Optional
\&     node2_hwtype            => ""                                                  #Optional / Default value is ""
\&     node2_lan               => $ipv4addr,                                          #Optional / Default value is undefined
\&     node2_lan_ipv6addr      => $ipv6addr,                                          #Optional / Default value is undefined
\&     node2_lan_reserved_interface  => $interface,                                   #Optional
\&     node2_lan2_reserved_interface => $interface,                                   #Optional
\&     node2_mgmt_dscp         => $uint,                                              #Optional / Default value is undefined
\&     node2_mgmt_ipv6addr     => $ipv6addr,                                          #Optional / Default value is undefined
\&     node2_mgmt_ipv6_cidr    => $cidr,                                              #Optional / Default value is undefined
\&     node2_mgmt_ipv6_dscp    => $uint,                                              #Optional / Default value is undefined
\&     node2_mgmt_ipv6_gateway => $ipv6addr,                                          #Optional / Default value is undefined
\&     node2_mgmt_ipv6_enable_auto_config => "true" | "false",                        #Optional / Default value is "false"
\&     node2_mgmt_reserved_interface      => $interface,                              #Optional
\&     node2_lcd_autodim       => $num,                                               #Optional / Default value is undefined
\&     node2_lcd_brightness    => $num,                                               #Optional / Default value is undefined
\&     node2_lcd_hwident       => "true" | "false",                                   #Optional / Default value is undefined
\&     node2_mgmt_gateway      => $ipv4addr,                                          #Optional / Default value is undefined
\&     node2_mgmt_lan          => $ipv4addr,                                          #Optional / Default value is undefined
\&     node2_mgmt_mask         => $netmask,                                           #Optional / Default value is undefined
\&     node2_mgmt_port         => "true" | "false",                                   #Optional / Default value is undefined
\&     node2_nat               => $ipv4addr | undef,                                  #Optional / Default value is undefined
\&     node2_vpn_on_mgmt       => "true" | "false",                                   #Optional / Default value is undefined
\&     notification_email_addr => $email,                                             #Optional / Default value is undefined
\&     ntp_access_list         => [$ntpaccess1, $ntpaccess2, ... ] | $nacl | undef,   #Optional / Default value is undefined
\&     ntp_service_type        => "Time" | "Time and NTP control",                    #Optional / Default value is "Time"
\&     ntp_authentication_key  => [$NTPKey1, $NTPKey2, ...],                          #Optional / Default value is undefined
\&     ntp_server              => [$ntp_server1, $ntp_server2] | undef,               #Optional / Default value is undefined
\&     ntp_kod                 => "true" | "false",                                   #Optional / Default value is undefined
\&     override_ntp_kod        => "true" | "false",                                   #Optional / Default value is undefined
\&     ospf_list               => [$OSPF1, $OSPF2, ...],                              #Optional / Default value is empty
\&     override_dscp           => "true" | "false",                                                                       #Optional / Default value is "false"
\&     override_enable_member_redirect  => "true" | "false",                          #Optional / Default value is "false"
\&     override_lan1_dscp            => "true" | "false",                             #Optional / Default value is "false"
\&     override_lan1_ipv6_dscp       => "true" | "false",                             #Optional / Default value is "false"
\&     override_lan2_dscp            => "true" | "false",                             #Optional / Default value is "false"
\&     override_lan2_ipv6_dscp       => "true" | "false",                             #Optional / Default value is "false"
\&     override_mgmt_dscp            => "true" | "false",                             #Optional / Default value is "false"
\&     override_mgmt_ipv6_dscp       => "true" | "false",                             #Optional / Default value is "false"
\&     override_node1_mgmt_dscp      => "true" | "false",                             #Optional / Default value is "false"
\&     override_node1_mgmt_ipv6_dscp => "true" | "false",                             #Optional / Default value is "false"
\&     override_node2_mgmt_dscp      => "true" | "false",                             #Optional / Default value is "false"
\&     override_node2_mgmt_ipv6_dscp => "true" | "false",                             #Optional / Default value is "false"
\&     override_syslog_backup_servers => "true" | "false",                            #Optional / Default value is "false"
\&     override_threshold_traps      => "true" | "false",                             #Optional / Default value is "false"
\&     override_trap_notifications   => "true" | "false",                             #Optional / Default value is "false"
\&     override_enable_lom     => "true" | "false",                                                                       #Optional / Default value is undefined
\&     override_lom_users      => "true" | "false",                                   #Optional / Default value is undefined
\&     passive_ha_arp_enabled  => "true" | "false",                                   #Optional / Default value is "false"
\&     platform                => "Infoblox" | "Cisco" | "Riverbed" | "VNIOS",        #Optional / Default value is "Infoblox"
\&     prefer_resolver         => $Nameserver | $Member | $ipv4addr | undef,          #Optional / Default value is undefined
\&     query_comm_string       => $string | undef,                                    #Optional / Default value is undefined
\&     remote_console_access   => "true" | "false" | undef,                           #Optional / Default value is undefined
\&     router_ID               => $num,                                               #Optional / Default value is undefined
\&     service_type_configuration => "ALL_V4", "ALL_V6", "CUSTOM"                     #Optional / Default value depends from the member type.
\&     snmp_admin              => $Admin | undef,                                     #Optional / Default value is undefined
\&     static_routes           => [$Route1, $Route2, ...],                            #Optional / Default value is empty
\&     support_access          => "true" | "false" | undef,                           #Optional / Default value is undefined
\&     syslog_proxy_tcp_port   => $num,                                               #Optional / Default value is 514
\&     syslog_proxy_udp_port   => $num,                                               #Optional / Default value is 514
\&     syslog_server           => [$SyslogServer, ...] | undef,                       #Optional / Default value is undefined
\&     syslog_backup_servers   => [$SyslogBackupServer, ...] | undef,                 #Optional / Default value is undefined
\&     syslog_size             => $num,                                               #Optional / Default value is 300
\&     time_zone               => $TimeZone | undef,                                  #Optional / Default value is undefined
\&     threshold_traps         => [$trap1, $trap2,...] | undef,                       #Optional / Default value is a list of all the traps
\&     trap_comm_string        => $string | undef,                                    #Optional / Default value is undefined
\&     trap_notifications      => [$notification1, $notification2,...] | undef,       #Optional / Default value is a list of all the notifications
\&     trap_receiver           => [$ipv4addr, ...] | undef,                           #Optional / Default value is undefined
\&     upgrade_group           => $string,                                            #Optional / Default value is undefined
\&     vlan_id                 => $uint,                                              #Optional / Default value is undefined
\&     vpn_mtu                 => $num,                                               #Optional / Default value is 1450
\&     vpn_on_mgmt             => "true" | "false",                                   #Optional / Default value is "false"
\&     use_v4_vrrp             => "true" | "false",                                   #Optional / Default value depends from the member type.
\&     pre_provisioning        => $pp,                                                #optional / Default value is undef. $pp is an Infoblox::Grid:Member::PreProvisioning object
\&     preserve_if_owns_delegation => "true" | "false"                                #Optional / Default value is "false"
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a grid member object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.Sp
If you have applied an access control list to an object, you must restart services after you update the access control list for the changes to take effect. See Infoblox::Session\->\fBrestart()\fR method.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Construct an object
\& my $grid_member = Infoblox::Grid::Member\->new(
\&     name                    => "hostname.com",
\&     ipv4addr                => "3.0.0.2",
\&     mask                    => "255.0.0.0",
\&     gateway                 => "3.0.0.1",
\&     );
\& #Submit for addition
\& my $response = $session\->add( $grid_member );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific grid member object:
\&
\&  name \- Optional. A name in FQDN (Fully Qualified Domain Name) format.
\&  ipv4addr  \- Optional. The IPv4 address of the member.
\&  ipv6addr  \- Optional. The IPv6 address of the member.
\&  extattrs  \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Member",
\&     name   => "hostname.com");
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.Sp
If you have applied an access control list to an object, you must restart services after you update the access control list for the changes to take effect. See Infoblox::Session\->\fBrestart()\fR method.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify comment of grid member.
\& $grid_member\->comment("This is modified object");
\& # Submit modification
\& my $response = $session\->modify( $grid_member );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Member",
\&     name   => "hostname.com");
\& #Find the desired object from the retrieved list.
\& my $desired_gridmember = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_gridmember );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for grid member objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a grid member object:
\&
\&  name    \- Optional. A name in FQDN (Fully Qualified Domain Name) format (regular expression).
\&  comment \- Optional. A comment in string format (regular expression).
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes   \- Optional. A hash reference containing extensible attributes.
\&  ipv4addr  \- Optional. The IPv4 address of the member.
\&  ipv6addr  \- Optional. The IPv6 address of the member.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # search for all grid member objects
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::Member",
\&     name   => ".*\e\e.com");
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a grid member.
.SS "active_position( )"
.IX Subsection "active_position( )"
.RS 4
Use this method to retrieve the active server of a grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get active server
\& my $active_server = $grid_member\->active_position();
.Ve
.RE
.RS 4
.RE
.SS "additional_ip_list( )"
.IX Subsection "additional_ip_list( )"
.RS 4
Use this method to set or retrieve the additional_ip_list of a grid member. This list contains additional interface information that can be used on the member level.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Any object in the list with interface set to \*(L"\s-1LAN_HA\*(R"\s0 and ipv6 parameters will be mapped to the toplevel ipv6 methods (ipv6addr, ipv6_cidr, ipv6_enable_auto_config and ipv6_gateway). If such an object is already in the list and is removed, the values of those methods will be cleared.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains
Infoblox::Grid::Member::Interface object(s) or IPv4 addresses in string format.
.Sp
Note that Infoblox::Grid::Member::Interface object(s) with interface set to \*(L"\s-1MGMT\*(R"\s0 are not supported.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& #Get additional ip list
\& my $additional_ip_list = $grid_member\->additional_ip_list();
\& #Modify additional ip list
\& my $interface_obj = Infoblox::Grid::Member::Interface\->new(
\&         subnet_mask => "255.255.255.255",
\&         anycast     => "false",
\&         comment     => "advanced ip config",
\&         ipv4addr    => "4.3.2.1",
\&         interface   => "LOOPBACK",
\& );
\& $grid_member\->additional_ip_list([$interface_obj]);
.Ve
.RE
.RS 4
.RE
.SS "allow_syslog_clients( )"
.IX Subsection "allow_syslog_clients( )"
.RS 4
Use this method to set or retrieve the allow_syslog_clients list of a grid member. This list specifies the clients where the syslog messages are logged. This is required only when enable_syslog_proxy is set to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses or networks.  To undefine allow_syslog_clients, you must disable the enable_syslog_proxy flag.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get allow syslog clients
\& my $allow_syslog_clients = $grid_member\->allow_syslog_clients();
\& #Modify allow syslog clients
\& $grid_member\->allow_syslog_clients(["10.10.10.1", "10.10.2.0/24"]);
\& #Use Infoblox::Grid::NamedACL
\& $grid_member\->allow_syslog_clients($nacl);
.Ve
.RE
.RS 4
.RE
.SS "alternate_resolver( )"
.IX Subsection "alternate_resolver( )"
.RS 4
Use this method to set or retrieve the alternate_resolver of a grid member. The alternate resolver receives queries from the appliance if it does not receive a response from the preferred name server first.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are Infoblox::DNS::Member object or Infoblox::DNS::Nameserver object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get alternate resolver
\& my $alternate_resolver = $grid_member\->alternate_resolver();
\& #Modify alternate resolver
\& my $member1 = Infoblox::DNS::Member\->new(
\&     name           => $host_name,
\&     ipv4addr       => $host_ip,
\&     stealth        => "false",
\&     lead           => "false",
\&     grid_replicate => "false"
\& );
\& $grid_member\->alternate_resolver($member1);
\& #Undef alternate resolver
\& $grid_member\->alternate_resolver(undef);
.Ve
.RE
.RS 4
.RE
.SS "bgp_as( )"
.IX Subsection "bgp_as( )"
.RS 4
Use this method to set or retrieve the \s-1BGP\s0 configuration for anycast, of a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains  Infoblox::Grid::Member::BGP::AS object(s). Currently, only one Autonomous System (\s-1AS\s0) object per grid member is supported.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get AS list
\& my $as = $grid_member\->bgp_as();
\& #Modify AS list
\& my $as1 = Infoblox::Grid::Member::BGP::AS\->new(
\&     as              => 269,
\&     keepalive       => 4,
\&     holddown        => 16,
\&     neighbors       => [ $neighbor ]
\& );
\& $grid_member\->bgp_as([$as1]);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $grid_member\->comment();
\& #Modify comment
\& $grid_member\->comment("Modified grid member");
.Ve
.RE
.RS 4
.RE
.SS "config_addr_type( )"
.IX Subsection "config_addr_type( )"
.RS 4
Use this method to set or retrieve the configuration type for the address.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is one of the following: \*(L"IPv4\*(R", \*(L"IPv6\*(R" or \*(L"\s-1BOTH\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get config_addr_type
\& my $config_addr_type = $grid_member\->config_addr_type();
\& #Modify config_addr_type
\& $grid_member\->config_addr_type("IPv4");
.Ve
.RE
.RS 4
.RE
.SS "dscp( )"
.IX Subsection "dscp( )"
.RS 4
Use this method to set or retrieve the \s-1DSCP\s0 value.
.Sp
Setting this method to a defined value implicitly sets the override_dscp method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_dscp attribute to \*(L"false\*(R".
.Sp
Note that when dscp is set to a defined value and override_ddscp is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->dscp(11); \f(CW$object\fR\->override_dscp(\*(L"false\*(R"); will set override_dscp to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_dscp(\*(L"false\*(R"); \f(CW$object\fR\->dscp(11); will result in override_dscp=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are integers between 0 and 63 inclusive. The default value is 0.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the DSCP value from the member
\& my $users = $grid_member\->dscp();
\& #Modify the DSCP value
\& $grid_member\->dscp(11);
.Ve
.RE
.RS 4
.RE
.SS "enable_ha( )"
.IX Subsection "enable_ha( )"
.RS 4
Use this method to set or retrieve the \s-1HA\s0 state of a member. It indicates whether a member is a single appliance or an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_ha flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R". If set to \*(L"false\*(R", then all the \*(L"node1_xxxx\*(R" and \*(L"node2_xxxx\*(R" attributes but node1_service_status and node1_hwtype are disabled, and \*(L"get\*(R" does not return those attributes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_ha from the member
\& my $enable_ha = $grid_member\->enable_ha();
\& #Modify enable_ha
\& $grid_member\->enable_ha("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_lom( )"
.IX Subsection "enable_lom( )"
.RS 4
Use this method to set or retrieve the flag that controls whether the \s-1LOM\s0 functionality is enabled.
.Sp
Setting this method to a defined value implicitly sets the override_enable_lom method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_enable_lom attribute to \*(L"false\*(R".
.Sp
Note that when enable_lom is set to a defined value and override_denable_lom is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->enable_lom(\*(L"true\*(R"); \f(CW$object\fR\->override_enable_lom(\*(L"false\*(R"); will set override_enable_lom to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_enable_lom(\*(L"false\*(R"); \f(CW$object\fR\->enable_lom(\*(L"true\*(R"); will result in override_enable_lom=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_lom flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_lom from the member
\& my $lom = $grid_member\->enable_lom();
\& #Modify enable_lom
\& $grid_member\->enable_lom("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_member_redirect( )"
.IX Subsection "enable_member_redirect( )"
.RS 4
Use this method to set or retrieve the flag that controls whether the member will redirect \s-1GUI\s0 connections to the grid master.
.Sp
Setting this method to a defined value implicitly sets the override_enable_member_redirect method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_enable_member_redirect attribute to \*(L"false\*(R".
.Sp
Note that when enable_member_redirect is set to a defined value and override_denable_member_redirect is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->enable_member_redirect(\*(L"true\*(R"); \f(CW$object\fR\->override_enable_member_redirect(\*(L"false\*(R"); will set override_enable_member_redirect to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_enable_member_redirect(\*(L"false\*(R"); \f(CW$object\fR\->enable_member_redirect(\*(L"true\*(R"); will result in override_enable_member_redirect=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_member_redirect flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_member_redirect from the member
\& my $redirect = $grid_member\->enable_member_redirect();
\& #Modify type of member
\& $grid_member\->enable_member_redirect("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_ntp( )"
.IX Subsection "enable_ntp( )"
.RS 4
Use this method to set or retrieve the enable_ntp flag of a grid member. Network Time Protocol (\s-1NTP\s0) is a protocol designed to synchronize the clocks of computers over a network. This method enables/disables \s-1NTP\s0 service on the grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_ntp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable ntp flag
\& my $enable_ntp = $grid_member\->enable_ntp();
\& #Modify enable ntp flag
\& $grid_member\->enable_ntp("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_snmpv3_query( )"
.IX Subsection "enable_snmpv3_query( )"
.RS 4
Use this method to enable or disable SNMPv3 queries.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable SNMPv3 queries or \*(L"false\*(R" to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_snmpv3_query
\& my $enable_snmpv3_query = $gridmember\->enable_snmpv3_query();
\& #Modify enable_snmpv3_query
\& $gridmember\->enable_snmpv3_query("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_snmpv3_traps( )"
.IX Subsection "enable_snmpv3_traps( )"
.RS 4
Use this method to enable or disable SNMPv3 traps.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable SNMPv3 traps or \*(L"false\*(R" to disable it. Default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_snmpv3_traps
\& my $enable_snmpv3_traps = $gridmember\->enable_snmpv3_traps();
\& #Modify enable_snmpv3_traps
\& $gridmember\->enable_snmpv3_traps("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_ro_api_access( )"
.IX Subsection "enable_ro_api_access( )"
.RS 4
Use this method to enable or disable read-only \s-1API\s0 access for the Grid Master candidate.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to allow read-only \s-1API\s0 access or \*(L"false\*(R" to forbid it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable syslog proxy flag
\& my $enable_ro_api_access = $grid_member\->enable_ro_api_access();
\& #Modify enable syslog proxy flag
\& $grid_member\->enable_ro_api_access("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_syslog_proxy( )"
.IX Subsection "enable_syslog_proxy( )"
.RS 4
Use this method to set or retrieve the enable_syslog_proxy flag of a grid member. When enabled, the member receives syslog messages from specified devices, such as syslog servers and routers, and then forwards these messages to an external syslog server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_syslog_proxy flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable syslog proxy flag
\& my $enable_syslog_proxy = $grid_member\->enable_syslog_proxy();
\& #Modify enable syslog proxy flag
\& $grid_member\->enable_syslog_proxy("true");
.Ve
.RE
.RS 4
.RE
.SS "external_ntp_servers_enabled( )"
.IX Subsection "external_ntp_servers_enabled( )"
.RS 4
Use this method to set or retrieve the external_ntp_servers_enabled flag of a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
When this flag is set to \*(L"false\*(R", the member does not use the configured list of \s-1NTP\s0 (Network Time Protocol) servers.
.Sp
When this flag is set to \*(L"true\*(R", the member uses the configured list of \s-1NTP\s0 servers.
If no \s-1NTP\s0 servers are configured on the member, it uses the \s-1NTP\s0 servers configured on the grid.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get external_ntp_servers_enabled flag
\& my $external_ntp_servers_enabled= $grid_member\->external_ntp_servers_enabled();
\& #Modify external_ntp_servers_enabled flag
\& $grid_member\->external_ntp_servers_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "exclude_grid_master_as_ntp_server( )"
.IX Subsection "exclude_grid_master_as_ntp_server( )"
.RS 4
Use this method to set or retrieve the exclude_grid_master_as_ntp_server flag of a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
When this flag is set to \*(L"true\*(R", the member does not use the grid master as an \s-1NTP\s0 (Network Time Protocol) time source.
The default value of this parameter is \*(L"false\*(R", which means
that by default the Grid Master is used as one of the time sources for Grid Member.
.Sp
Note that setting this flag to \*(L"true\*(R" may have a detrimental effect on the database integrity of the member.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get exclude_grid_master_as_ntp_server flag
\& my $exclude_grid_master_as_ntp_server= $grid_member\->exclude_grid_master_as_ntp_server();
\& #Modify exclude_grid_master_as_ntp_server flag
\& $grid_member\->exclude_grid_master_as_ntp_server("true");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Grid Member object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $grid_member\->extattrs();
\& #Modify extattrs
\& $grid_member\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Grid Member object
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $member\->extensible_attributes();
\& #Modify extensible attributes
\& $member\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "gateway( )"
.IX Subsection "gateway( )"
.RS 4
Use this method to set or retrieve the gateway \s-1IP\s0 address of a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get gateway
\& my $gateway = $grid_member\->gateway();
\& #Modify gateway
\& $grid_member\->gateway("3.0.0.1");
.Ve
.RE
.RS 4
.RE
.SS "ha_node2_port_duplex( )"
.IX Subsection "ha_node2_port_duplex( )"
.RS 4
Use this method to specify or retrieve the duplex setting of the \s-1HA\s0 port on node 2 of an \s-1HA\s0 grid member.
Note: Use this method in combination with ha_node2_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"Half\*(R" or \*(L"Full\*(R". The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ha_node2_port_duplex
\& my $ha_node2_port_duplex = $obj\->ha_node2_port_duplex();
\& #Modify ha_node2_port_duplex
\& $obj\->ha_node2_port_duplex("Half");
.Ve
.RE
.RS 4
.RE
.SS "ha_node2_port_speed( )"
.IX Subsection "ha_node2_port_speed( )"
.RS 4
Use this method to set or retrieve the connection speed of the \s-1HA\s0 port on node #2 of an \s-1HA\s0 grid member.
Note: Use this method in combination with ha_node2_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are 10, 100 or 1000. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ha_node2_port_speed
\& my $ha_node2_port_speed = $obj\->ha_node2_port_speed();
\& #Modify ha_node2_port_speed
\& $obj\->ha_node2_port_speed(10);
.Ve
.RE
.RS 4
.RE
.SS "ha_port_duplex( )"
.IX Subsection "ha_port_duplex( )"
.RS 4
Use this method to specify or retrieve the duplex setting of the \s-1HA\s0 port on node 1 of an \s-1HA\s0 grid member.
Note: Use this method in combination with ha_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"Half\*(R" or \*(L"Full\*(R". The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ha_port_duplex
\& my $ha_port_duplex = $obj\->ha_port_duplex();
\& #Modify ha_port_duplex
\& $obj\->ha_port_duplex("Half");
.Ve
.RE
.RS 4
.RE
.SS "ha_port_speed( )"
.IX Subsection "ha_port_speed( )"
.RS 4
Use this method to set or retrieve the connection speed of the \s-1HA\s0 port on node 1 of an \s-1HA\s0 grid member.
Note: Use this method in combination with ha_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are 10, 100 or 1000. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ha_port_speed
\& my $ha_port_speed = $obj\->ha_port_speed();
\& #Modify ha_port_speed
\& $obj\->ha_port_speed(10);
.Ve
.RE
.RS 4
.RE
.SS "ha_reserved_interface( )"
.IX Subsection "ha_reserved_interface( )"
.RS 4
Use this method to set or retrieve the discovery reserved interface of the \s-1HA\s0 port on node 1 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->ha_reserved_interface();
\& #Modify attribute value
\& $grid_member\->ha_reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "paid_nios( )"
.IX Subsection "paid_nios( )"
.RS 4
Use this method to retrieve whether the grid member is Paid \s-1NIOS.\s0
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get Paid NIOS status
\& my $paid_nios = $grid_member\->paid_nios();
.Ve
.RE
.RS 4
.RE
.SS "hwplatform( )"
.IX Subsection "hwplatform( )"
.RS 4
Use this method to retrieve the hardware platform of the member appliance.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get hardware platform
\& my $hwplatform = $grid_member\->hwplatform();
.Ve
.RE
.RS 4
.RE
.SS "hwid( )"
.IX Subsection "hwid( )"
.RS 4
Use this method to retrieve the hardware \s-1ID\s0 of the member appliance.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get hardware ID
\& my $hwid = $grid_member\->hwid();
.Ve
.RE
.RS 4
.RE
.SS "is_dscp_capable( )"
.IX Subsection "is_dscp_capable( )"
.RS 4
Use this method to retrieve the flag that describes whether a Grid member supports \s-1DSCP.\s0
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The method retruns \*(L"true\*(R" if the member supports \s-1DSCP,\s0 and \*(L"false\*(R" otherwise.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get is_dscp_capable
\& my $is_dscp_capable = $grid_member\->is_dscp_capable();
.Ve
.RE
.RS 4
.RE
.SS "ipv4addr( )"
.IX Subsection "ipv4addr( )"
.RS 4
Use this method to set or retrieve the IPv4 address of a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv4addr
\& my $ipv4addr = $grid_member\->ipv4addr();
\& #Modify ipv4addr
\& $grid_member\->ipv4addr("3.0.0.3");
.Ve
.RE
.RS 4
.RE
.SS "ipv6addr( )"
.IX Subsection "ipv6addr( )"
.RS 4
Use this method to set or retrieve the \s-1LAN\s0 IPv6 address of the grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting any of the ipv6 methods in the member (ipv6addr, ipv6_cidr, ipv6_enable_auto_config and ipv6_gateway) is equivalent to creating an Infoblox::Grid::Member::Interface object with those fields set and interface set to \*(L"\s-1LAN_HA\*(R",\s0 if there is already such an object it will be modified, if not it will be created. See the additional_ip_list section for more information.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN2 IPv6 address
\& my $ipv6addr = $grid_member\->ipv6addr();
\& #Modify LAN2 IPv6 address
\& $grid_member\->ipv6addr("2001::2");
.Ve
.RE
.RS 4
.RE
.SS "ipv6_cidr( )"
.IX Subsection "ipv6_cidr( )"
.RS 4
Use this method to set or retrieve the \s-1CIDR\s0 of the grid member. Required only when ipv6addr is specified.
.Sp
See ipv6addr for more information on how this impacts additional_ip_list.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the netmask in \s-1CIDR\s0 format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN2 cidr
\& my $cidr = $grid_member\->cidr();
\& #Modify LAN2 cidr
\& $grid_member\->cidr("64");
.Ve
.RE
.RS 4
.RE
.SS "ipv6_enable_auto_config( )"
.IX Subsection "ipv6_enable_auto_config( )"
.RS 4
Use this method to enable/disable IPv6 auto-configuration of the grid member.
.Sp
See ipv6addr for more information on how this impacts additional_ip_list.
.Sp
When IPv6 auto-configuration is enabled, a gateway is not needed since it will be automatically discovered.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable IPv6 auto-configuration or \*(L"false\*(R" to disable it. Default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get IPv6 auto\-configuration
\& my $ipv6_autoconfig_enabled = $grid_member\->ipv6_enable_auto_config();
\& #Modify IPv6 auto\-configuration
\& $grid_member\->ipv6_enable_auto_config("true");
.Ve
.RE
.RS 4
.RE
.SS "ipv6_gateway( )"
.IX Subsection "ipv6_gateway( )"
.RS 4
Use this method to set or retrieve the \s-1LAN\s0 IPv6 gateway of the grid member.
.Sp
See ipv6addr for more information on how this impacts additional_ip_list.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN2 IPv6 gateway
\& my $ipv6_gateway = $grid_member\->ipv6_gateway();
\& #Modify LAN2 IPv6 gateway
\& $grid_member\->ipv6_gateway("2001::1");
.Ve
.RE
.RS 4
.RE
.SS "ipv6_static_routes( )"
.IX Subsection "ipv6_static_routes( )"
.RS 4
Use this method to set or retrieve the IPv6 static routes list of a grid member. This list contains the static routes of a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains  Infoblox::Grid::Member::IPv6StaticRoute object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get static routes list
\& my $ipv6_static_routes = $grid_member\->ipv6_static_routes();
\& #Modify static routes list
\& my $route = Infoblox::Grid::Member::IPv6StaticRoute\->new(
\&        "address" => "2002::5",
\&        "cidr"    => 64
\&        "gateway" => "2002::1",
\& );
\& $grid_member\->ipv6_static_routes([$route]);
.Ve
.RE
.RS 4
.RE
.SS "ipv6_vlan_id( )"
.IX Subsection "ipv6_vlan_id( )"
.RS 4
Use this method to set or retrieve the IPv6 \s-1VLAN ID\s0 of a grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integers between 1 and 4095, inclusive. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->ipv6_vlan_id();
\& #Modify attribute value
\& $grid_member\->ipv6_vlan_id(10);
.Ve
.RE
.RS 4
.RE
.SS "lan_reserved_interface( )"
.IX Subsection "lan_reserved_interface( )"
.RS 4
Use this method to set or retrieve the discovery reserved interface of the \s-1LAN\s0 port on a single grid member or on node 1 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->lan_reserved_interface();
\& #Modify attribute value
\& $grid_member\->lan_reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "lan1_dscp( )"
.IX Subsection "lan1_dscp( )"
.RS 4
Use this method to set or retrieve the \s-1DSCP\s0 value of the IPv4 \s-1LAN1\s0 port.
.Sp
Setting this method to a defined value implicitly sets the override_lan1_dscp method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_lan1_dscp attribute to \*(L"false\*(R".
.Sp
Note that when dscp is set to a defined value and override_lan1_dscp is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->lan1_dscp(11); \f(CW$object\fR\->override_lan1_dscp(\*(L"false\*(R"); will set override_lan1_dscp to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_lan1_dscp(\*(L"false\*(R"); \f(CW$object\fR\->lan1_dscp(11); will result in override_lan1_dscp=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are integers between 0 and 63, inclusive. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $grid_member\->lan1_dscp();
\& #Modify attribute value
\& $grid_member\->lan1_dscp(11);
.Ve
.RE
.RS 4
.RE
.SS "lan1_ipv6_dscp( )"
.IX Subsection "lan1_ipv6_dscp( )"
.RS 4
Use this method to set or retrieve the \s-1DSCP\s0 value of the IPv6 \s-1LAN1\s0 port.
.Sp
Setting this method to a defined value implicitly sets the override_lan1_ipv6_dscp method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_lan1_ipv6_dscp attribute to \*(L"false\*(R".
.Sp
Note that when dscp is set to a defined value and override_lan1_ipv6_dscp is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->lan1_ipv6_dscp(11); \f(CW$object\fR\->override_lan1_ipv6_dscp(\*(L"false\*(R"); will set override_lan1_ipv6_dscp to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_lan1_ipv6_dscp(\*(L"false\*(R"); \f(CW$object\fR\->lan1_ipv6_dscp(11); will result in override_lan1_ipv6_dscp=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are integers between 0 and 63, inclusive. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $grid_member\->lan1_ipv6_dscp();
\& #Modify attribute value
\& $grid_member\->lan1_ipv6_dscp(11);
.Ve
.RE
.RS 4
.RE
.SS "lan2_dscp( )"
.IX Subsection "lan2_dscp( )"
.RS 4
Use this method to set or retrieve the \s-1DSCP\s0 value of the IPv4 \s-1LAN2\s0 port.
.Sp
Setting this method to a defined value implicitly sets the override_lan1_dscp method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_lan1_dscp attribute to \*(L"false\*(R".
.Sp
Note that when dscp is set to a defined value and override_lan2_dscp is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->lan2_dscp(11); \f(CW$object\fR\->override_lan2_dscp(\*(L"false\*(R"); will set override_lan2_dscp to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_lan2_dscp(\*(L"false\*(R"); \f(CW$object\fR\->lan2_dscp(11); will result in override_lan2_dscp=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are integers between 0 and 63, inclusive. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $grid_member\->lan2_dscp();
\& #Modify attribute value
\& $grid_member\->lan2_dscp(11);
.Ve
.RE
.RS 4
.RE
.SS "lan2_gateway( )"
.IX Subsection "lan2_gateway( )"
.RS 4
Use this method to set or retrieve the gateway \s-1IP\s0 address of the \s-1LAN2\s0 port. Note that to configure the \s-1LAN2\s0 port, the lan2_port flag must be set to 'true'.
.Sp
lan2_ipv4addr, lan2_mask, lan2_gateway attributes are required if one of them is defined.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN2 gateway
\& my $lan2_gateway = $grid_member\->lan2_gateway();
\& #Modify LAN2 gateway
\& $grid_member\->lan2_gateway("4.0.0.1");
.Ve
.RE
.RS 4
.RE
.SS "lan2_ipv4addr( )"
.IX Subsection "lan2_ipv4addr( )"
.RS 4
Use this method to set or retrieve the \s-1LAN IP\s0 address of the \s-1LAN2\s0 port. Note that to configure the \s-1LAN2\s0 port, the lan2_port flag must be set to 'true'.
.Sp
lan2_gateway, lan2_ipv4addr, lan2_mask attributes are required if one of them is defined.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN2 IPv4 address
\& my $lan2_ipv4addr = $grid_member\->lan2_ipv4addr();
\& #Modify LAN2 IPv4 address
\& $grid_member\->lan2_ipv4addr("4.0.0.2");
.Ve
.RE
.RS 4
.RE
.SS "lan2_ipv6addr( )"
.IX Subsection "lan2_ipv6addr( )"
.RS 4
Use this method to set or retrieve the \s-1LAN\s0 IPv6 address of the \s-1LAN2\s0 port. Note that to configure the \s-1LAN2\s0 port, the lan2_port flag must be set to 'true'.
.Sp
lan2_ipv6addr, lan2_ipv6_cidr, lan2_ipv6_gateway attributes are required if one of them is defined.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN2 IPv6 address
\& my $lan2_ipv6addr = $grid_member\->lan2_ipv6addr();
\& #Modify LAN2 IPv6 address
\& $grid_member\->lan2_ipv6addr("2001::2");
.Ve
.RE
.RS 4
.RE
.SS "lan2_ipv6_cidr( )"
.IX Subsection "lan2_ipv6_cidr( )"
.RS 4
Use this method to set or retrieve the \s-1CIDR\s0 of the \s-1LAN2\s0 port. Note that to configure the \s-1LAN2\s0 port, the lan2_port flag must be set to 'true'.
.Sp
lan2_ipv6addr, lan2_ipv6_cidr, lan2_ipv6_gateway attributes are required if one of them is defined.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the netmask in \s-1CIDR\s0 format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN2 cidr
\& my $lan2_cidr = $grid_member\->lan2_cidr();
\& #Modify LAN2 cidr
\& $grid_member\->lan2_cidr("64");
.Ve
.RE
.RS 4
.RE
.SS "lan2_ipv6_dscp( )"
.IX Subsection "lan2_ipv6_dscp( )"
.RS 4
Use this method to set or retrieve the \s-1DSCP\s0 value of the IPv6 \s-1LAN2\s0 port.
.Sp
Setting this method to a defined value implicitly sets the override_lan2_ipv6_dscp method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_lan2_ipv6_dscp attribute to \*(L"false\*(R".
.Sp
Note that when dscp is set to a defined value and override_lan2_ipv6_dscp is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->lan2_ipv6_dscp(11); \f(CW$object\fR\->override_lan2_ipv6_dscp(\*(L"false\*(R"); will set override_lan1_ipv6_dscp to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_lan2_ipv6_dscp(\*(L"false\*(R"); \f(CW$object\fR\->lan2_ipv6_dscp(11); will result in override_lan2_ipv6_dscp=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are integers between 0 and 63, inclusive. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $grid_member\->lan2_ipv6_dscp();
\& #Modify attribute value
\& $grid_member\->lan2_ipv6_dscp(11);
.Ve
.RE
.RS 4
.RE
.SS "lan2_ipv6_enable( )"
.IX Subsection "lan2_ipv6_enable( )"
.RS 4
Use this method to enable/disable IPv6 configuration of the \s-1LAN2\s0 interface.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable IPv6 configuration or \*(L"false\*(R" to disable it. Default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->lan2_ipv6_enable();
\& #Modify attribute value
\& $grid_member\->lan2_ipv6_enable("true");
.Ve
.RE
.RS 4
.RE
.SS "lan2_ipv6_enable_auto_config( )"
.IX Subsection "lan2_ipv6_enable_auto_config( )"
.RS 4
Use this method to enable/disable IPv6 auto-configuration of the \s-1LAN2\s0 interface.
.Sp
When IPv6 auto-configuration is enabled, a gateway is not needed since it will be automatically discovered.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable IPv6 auto-configuration or \*(L"false\*(R" to disable it. Default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get IPv6 auto\-configuration
\& my $ipv6_autoconfig_enabled = $grid_member\->lan2_ipv6_enable_auto_config();
\& #Modify IPv6 auto\-configuration
\& $grid_member\->lan2_ipv6_enable_auto_config("true");
.Ve
.RE
.RS 4
.RE
.SS "lan2_ipv6_gateway( )"
.IX Subsection "lan2_ipv6_gateway( )"
.RS 4
Use this method to set or retrieve the \s-1LAN\s0 IPv6 gateway of the \s-1LAN2\s0 port. Note that to configure the \s-1LAN2\s0 port, the lan2_port flag must be set to 'true'.
.Sp
lan2_ipv6addr, lan2_ipv6_cidr, lan2_ipv6_gateway attributes are required if one of them is defined.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN2 IPv6 gateway
\& my $lan2_ipv6_gateway = $grid_member\->lan2_ipv6_gateway();
\& #Modify LAN2 IPv6 gateway
\& $grid_member\->lan2_ipv6_gateway("2001::1");
.Ve
.RE
.RS 4
.RE
.SS "lan2_ipv6_vlan_id( )"
.IX Subsection "lan2_ipv6_vlan_id( )"
.RS 4
Use this method to set or retrieve the \s-1VLAN ID\s0 of the IPv6 \s-1LAN2\s0 port. Note that to configure the \s-1LAN2\s0 port, the lan2_port flag must be set to 'true'.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integers between 1 and 4095, inclusive. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->lan2_ipv6_vlan_id();
\& #Modify attribute value
\& $grid_member\->lan2_ipv6_vlan_id(10);
.Ve
.RE
.RS 4
.RE
.SS "lan2_mask( )"
.IX Subsection "lan2_mask( )"
.RS 4
Use this method to set or retrieve the netmask of the \s-1LAN2\s0 port. Note that to configure the \s-1LAN2\s0 port, the lan2_port flag must be set to 'true'.
.Sp
lan2_ipv4addr, lan2_mask, lan2_gateway attributes are required if one of them is defined.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Netmask address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN2 mask
\& my $lan2_mask = $grid_member\->lan2_mask();
\& #Modify LAN2 mask
\& $grid_member\->lan2_mask("255.255.0.0");
.Ve
.RE
.RS 4
.RE
.SS "lan2_node2_port_duplex( )"
.IX Subsection "lan2_node2_port_duplex( )"
.RS 4
Use this method to specify or retrieve the duplex setting of the \s-1LAN2\s0 port on node 2 of an \s-1HA\s0 grid member.
Note: Use this method in combination with lan2_node2_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"Half\*(R" or \*(L"Full\*(R". The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lan2_node2_port_duplex
\& my $lan2_node2_port_duplex = $obj\->lan2_node2_port_duplex();
\& #Modify lan2_node2_port_duplex
\& $obj\->lan2_node2_port_duplex("Half");
.Ve
.RE
.RS 4
.RE
.SS "lan2_port( )"
.IX Subsection "lan2_port( )"
.RS 4
Use this method to set or retrieve the \s-1LAN2\s0 port flag of a single grid member or node 1 of an \s-1HA\s0 grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the lan2_port flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN2 port flag
\& my $lan2_port = $grid_member\->lan2_port();
\& #Modify LAN2 port flag
\& $grid_member\->lan2_port("true");
.Ve
.RE
.RS 4
.RE
.SS "lan2_node2_port_speed( )"
.IX Subsection "lan2_node2_port_speed( )"
.RS 4
Use this method to set or retrieve the connection speed of the \s-1LAN2\s0 port on node 2 of an \s-1HA\s0 grid member.
Note: Use this method in combination with lan2_node2_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are 10, 100 or 1000. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lan2_node2_port_speed
\& my $lan2_node2_port_speed = $obj\->lan2_node2_port_speed();
\& #Modify lan2_node2_port_speed
\& $obj\->lan2_node2_port_speed(10);
.Ve
.RE
.RS 4
.RE
.SS "lan2_port_duplex( )"
.IX Subsection "lan2_port_duplex( )"
.RS 4
Use this method to specify or retrieve the duplex setting of the \s-1LAN2\s0 port on a single grid member or on node 1 of an \s-1HA\s0 grid member.
Note: Use this method in combination with lan2_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"Half\*(R" or \*(L"Full\*(R". The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lan2_port_duplex
\& my $lan2_port_duplex = $obj\->lan2_port_duplex();
\& #Modify lan2_port_duplex
\& $obj\->lan2_port_duplex("Half");
.Ve
.RE
.RS 4
.RE
.SS "lan2_port_speed( )"
.IX Subsection "lan2_port_speed( )"
.RS 4
Use this method to set or retrieve the connection speed of the \s-1LAN2\s0 port on a single grid member or on node 1 of an \s-1HA\s0 grid member.
Note: Use this method in combination with lan2_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are 10, 100 or 1000. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lan2_port_speed
\& my $lan2_port_speed = $obj\->lan2_port_speed();
\& #Modify lan2_port_speed
\& $obj\->lan2_port_speed(10);
.Ve
.RE
.RS 4
.RE
.SS "lan2_reserved_interface( )"
.IX Subsection "lan2_reserved_interface( )"
.RS 4
Use this method to set or retrieve the discovery reserved interface of the \s-1LAN2\s0 port on a single grid member or on node 1 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->lan2_reserved_interface();
\& #Modify attribute value
\& $grid_member\->lan2_reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "lan2_router_id( )"
.IX Subsection "lan2_router_id( )"
.RS 4
Use this method to set or retrieve the \s-1LAN2\s0 virtual router \s-1ID\s0 of a grid member. Required only when the member is an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number with the \s-1LAN2\s0 router identification. Valid values are from 1 through 255.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN2 virtual router ID
\& my $lan2_router_id = $grid_member\->lan2_router_id();
\& #Modify LAN2 virtual router ID
\& $grid_member\->lan2_router_id("123");
.Ve
.RE
.RS 4
.RE
.SS "lan2_vlan_id( )"
.IX Subsection "lan2_vlan_id( )"
.RS 4
Use this method to set or retrieve the \s-1VLAN ID\s0 of the IPv4 \s-1LAN2\s0 port. Note that to configure the \s-1LAN2\s0 port, the lan2_port flag must be set to 'true'.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integers between 1 and 4095, inclusive. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->lan2_vlan_id();
\& #Modify attribute value
\& $grid_member\->lan2_vlan_id(10);
.Ve
.RE
.RS 4
.RE
.SS "lan_node2_port_duplex( )"
.IX Subsection "lan_node2_port_duplex( )"
.RS 4
Use this method to specify or retrieve the duplex setting of the \s-1LAN\s0 port on node 2 of an \s-1HA\s0 grid member.
Note: Use this method in combination with lan_node2_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"Half\*(R" or \*(L"Full\*(R". The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lan_node2_port_duplex
\& my $lan_node2_port_duplex = $obj\->lan_node2_port_duplex();
\& #Modify lan_node2_port_duplex
\& $obj\->lan_node2_port_duplex("Half");
.Ve
.RE
.RS 4
.RE
.SS "lan_node2_port_speed( )"
.IX Subsection "lan_node2_port_speed( )"
.RS 4
Use this method to set or retrieve the connection speed of the \s-1LAN\s0 port on node 2 of an \s-1HA\s0 grid member.
Note: Use this method in combination with lan_node2_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are 10, 100 or 1000. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lan_node2_port_speed
\& my $lan_node2_port_speed = $obj\->lan_node2_port_speed();
\& #Modify lan_node2_port_speed
\& $obj\->lan_node2_port_speed(10);
.Ve
.RE
.RS 4
.RE
.SS "lan_port_duplex( )"
.IX Subsection "lan_port_duplex( )"
.RS 4
Use this method to specify or retrieve the duplex setting of the \s-1LAN\s0 port on a single grid member or on node 1 of an \s-1HA\s0 grid member..
Note: Use this method in combination with lan_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"Half\*(R" or \*(L"Full\*(R". The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lan_port_duplex
\& my $lan_port_duplex = $obj\->lan_port_duplex();
\& #Modify lan_port_duplex
\& $obj\->lan_port_duplex("Half");
.Ve
.RE
.RS 4
.RE
.SS "lan_port_speed( )"
.IX Subsection "lan_port_speed( )"
.RS 4
Use this method to set or retrieve the connection speed of the \s-1LAN\s0 port on a single grid member or on node 1 of an \s-1HA\s0 grid member..
Note: Use this method in combination with lan_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are 10, 100 or 1000. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lan_port_speed
\& my $lan_port_speed = $obj\->lan_port_speed();
\& #Modify lan_port_speed
\& $obj\->lan_port_speed(10);
.Ve
.RE
.RS 4
.RE
.SS "lcd_input( )"
.IX Subsection "lcd_input( )"
.RS 4
Use this method to set or retrieve the lcd_input flag of a grid member. This flag enables/disables the Liquid Crystal Display (\s-1LCD\s0) input buttons on the front panel of the appliance.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the lcd_input flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get lcd input flag
\& my $lcd_input = $grid_member\->lcd_input();
\& #Modify lcd input flag
\& $grid_member\->lcd_input("true");
\& #Undef lcd input flag
\& $grid_member\->lcd_input(undef);
.Ve
.RE
.RS 4
.RE
.SS "lcd_autodim( )"
.IX Subsection "lcd_autodim( )"
.RS 4
Use this method to set or retrieve the number of seconds before the Liquid Crystal Display (\s-1LCD\s0) on the front panel of the appliance automatically dims.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The number of seconds before the \s-1LCD\s0 automatically dims. Valid values are between 5 and 3600. The default value is 30.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lcd_autodim
\& my $lcd_autodim = $grid_member\->lcd_autodim();
\& #Modify the autodim value
\& $grid_member\->lcd_autodim(60);
.Ve
.RE
.RS 4
.RE
.SS "lcd_brightness( )"
.IX Subsection "lcd_brightness( )"
.RS 4
Use this method to set or retrieve the brightness level of the \s-1LCD\s0 on the front panel of the appliance.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are between 1 and 10. The default value is 7.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lcd_brightness
\& my $lcd_brightness = $grid_member\->lcd_brightness();
\& #Modify the brightness value
\& $grid_member\->lcd_brightness(3);
.Ve
.RE
.RS 4
.RE
.SS "lcd_hwident( )"
.IX Subsection "lcd_hwident( )"
.RS 4
Use this method to set or retrieve whether the grid member's hardware \s-1ID\s0 identification functionality is active.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the lcd_hwident flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the lcd_hwident status
\& my $lcd_hwident = $grid_member\->lcd_hwident();
\& #Modify the lcd_hwident status
\& $grid_member\->lcd_hwident("true");
.Ve
.RE
.RS 4
.RE
.SS "lcd_version( )"
.IX Subsection "lcd_version( )"
.RS 4
Use this method to retrieve the version of the Liquid Crystal Display (\s-1LCD\s0) of the appliance.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get lcd_version
\& my $lcd_version = $grid_member\->lcd_version();
.Ve
.RE
.RS 4
.RE
.SS "lom_gateway( )"
.IX Subsection "lom_gateway( )"
.RS 4
Use this method to set or retrieve the gateway \s-1IP\s0 address of a grid member for the \s-1LOM\s0 functionality.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lom_gateway
\& my $lom_gateway = $grid_member\->lom_gateway();
\& #Modify lom_gateway
\& $grid_member\->lom_gateway("3.0.0.1");
.Ve
.RE
.RS 4
.RE
.SS "lom_ipv4addr( )"
.IX Subsection "lom_ipv4addr( )"
.RS 4
Use this method to set or retrieve the IPv4 address of a grid member for the \s-1LOM\s0 functionality.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lom_ipv4addr
\& my $lom_ipv4addr = $grid_member\->lom_ipv4addr();
\& #Modify lom_ipv4addr
\& $grid_member\->lom_ipv4addr("3.0.0.3");
.Ve
.RE
.RS 4
.RE
.SS "lom_is_capable( )"
.IX Subsection "lom_is_capable( )"
.RS 4
Use this method to retrieve a flag describing if a grid member is capable of the \s-1LOM\s0 functionality.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The method returns \*(L"true\*(R" if the member is capable of \s-1LOM\s0 operation, \*(L"false\*(R" otherwise.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get lom_is_capable
\& my $lom_is_capable = $grid_member\->lom_is_capable();
.Ve
.RE
.RS 4
.RE
.SS "lom_mask( )"
.IX Subsection "lom_mask( )"
.RS 4
Use this method to set or retrieve the netmask of a grid member for the \s-1LOM\s0 functionality.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Netmask address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lom_mask
\& my $lom_mask = $grid_member\->lom_mask();
\& #Modify lom_mask
\& $grid_member\->lom_mask("255.255.0.0");
.Ve
.RE
.RS 4
.RE
.SS "lom_users( )"
.IX Subsection "lom_users( )"
.RS 4
Use this method to set or retrieve the list of users for the \s-1LOM\s0 functionality.
.Sp
Setting this method to a defined value implicitly sets the override_lom_users method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_lom_users attribute to \*(L"false\*(R".
.Sp
Note that when lom_users is set to a defined value and override_dlom_users is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->lom_users([$user1,$user2]); \f(CW$object\fR\->override_lom_users(\*(L"false\*(R"); will set override_lom_users to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_lom_users(\*(L"false\*(R"); \f(CW$object\fR\->lom_users([$user1,$user2]); will result in override_lom_users=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::Grid::LOM::User objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lom_users from the member
\& my $users = $grid_member\->lom_users();
\& #Modify the lom users
\& $grid_member\->lom_users([$u1, $u2]);
.Ve
.RE
.RS 4
.RE
.SS "mask( )"
.IX Subsection "mask( )"
.RS 4
Use this method to set or retrieve the netmask of a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Netmask address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get mask
\& my $mask = $grid_member\->mask();
\& #Modify mask
\& $grid_member\->mask("255.255.0.0");
.Ve
.RE
.RS 4
.RE
.SS "master_candidate( )"
.IX Subsection "master_candidate( )"
.RS 4
Use this method to set or retrieve the master_candidate flag of a grid member. This flag enables the grid member to assume the role of grid master as a disaster recovery measure.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the master_candidate flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get master candidate flag
\& my $master_candidate = $grid_member\->master_candidate();
\& #Modify master candidate flag
\& $grid_member\->master_candidate("true");
.Ve
.RE
.RS 4
.RE
.SS "member_service_communication( )"
.IX Subsection "member_service_communication( )"
.RS 4
Use this method to set or retrieve the communication type for various services.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains  Infoblox::Grid::Member::Communication objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get the attribute value
\& my $attr = $grid_member\->member_service_communication();
\& # Modify the attribute value
\& $grid_member\->member_service_communication([$c1, $c2, $c3]);
.Ve
.RE
.RS 4
.RE
.SS "mgmt_dscp( )"
.IX Subsection "mgmt_dscp( )"
.RS 4
Use this method to set or retrieve the \s-1DSCP\s0 value of the IPv4 \s-1MGMT\s0 port.
.Sp
Setting this method to a defined value implicitly sets the override_mgmt_dscp method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_mgmt_dscp attribute to \*(L"false\*(R".
.Sp
Note that when dscp is set to a defined value and override_mgmt_dscp is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->mgmt_dscp(11); \f(CW$object\fR\->override_mgmt_dscp(\*(L"false\*(R"); will set override_mgmt_dscp to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_mgmt_dscp(\*(L"false\*(R"); \f(CW$object\fR\->mgmt_dscp(11); will result in override_mgmt_dscp=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are integers between 0 and 63, inclusive. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $grid_member\->mgmt_dscp();
\& #Modify attribute value
\& $grid_member\->mgmt_dscp(11);
.Ve
.RE
.RS 4
.RE
.SS "mgmt_gateway( )"
.IX Subsection "mgmt_gateway( )"
.RS 4
Use this method to set or retrieve the gateway \s-1IP\s0 address of the \s-1MGMT\s0 port.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get mgmt gateway
\& my $mgmt_gateway = $grid_member\->mgmt_gateway();
\& #Modify mgmt gateway
\& $grid_member\->mgmt_gateway("4.0.0.1");
.Ve
.RE
.RS 4
.RE
.SS "mgmt_lan( )"
.IX Subsection "mgmt_lan( )"
.RS 4
Use this method to set or retrieve the \s-1LAN IP\s0 address of the \s-1MGMT\s0 port.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get mgmt lan
\& my $mgmt_lan = $grid_member\->mgmt_lan();
\& #Modify mgmt lan
\& $grid_member\->mgmt_lan("4.0.0.2");
.Ve
.RE
.RS 4
.RE
.SS "mgmt_ipv6addr( )"
.IX Subsection "mgmt_ipv6addr( )"
.RS 4
Use this method to set or retrieve the \s-1LAN\s0 IPv6 address of the \s-1MGMT\s0 port.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get MGMT IPv6 address
\& my $mgmt_ipv6addr = $grid_member\->mgmt_ipv6addr();
\& #Modify MGMT IPv6 address
\& $grid_member\->mgmt_ipv6addr("2001::2");
.Ve
.RE
.RS 4
.RE
.SS "mgmt_ipv6_cidr( )"
.IX Subsection "mgmt_ipv6_cidr( )"
.RS 4
Use this method to set or retrieve the \s-1CIDR\s0 of the \s-1MGMT\s0 port. Required only when mgmt_ipv6addr is specified.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the netmask in \s-1CIDR\s0 format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get MGMT cidr
\& my $mgmt_cidr = $grid_member\->mgmt_cidr();
\& #Modify MGMT cidr
\& $grid_member\->mgmt_cidr("64");
.Ve
.RE
.RS 4
.RE
.SS "mgmt_ipv6_dscp( )"
.IX Subsection "mgmt_ipv6_dscp( )"
.RS 4
Use this method to set or retrieve the \s-1DSCP\s0 value of the IPv6 \s-1MGMT\s0 port.
.Sp
Setting this method to a defined value implicitly sets the override_mgmt_ipv6_dscp method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_mgmt_ipv6_dscp attribute to \*(L"false\*(R".
.Sp
Note that when dscp is set to a defined value and override_mgmt_ipv6_dscp is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->mgmt_ipv6_dscp(11); \f(CW$object\fR\->override_mgmt_ipv6_dscp(\*(L"false\*(R"); will set override_mgmt_ipv6_dscp to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_mgmt_ipv6_dscp(\*(L"false\*(R"); \f(CW$object\fR\->mgmt_ipv6_dscp(11); will result in override_mgmt_ipv6_dscp=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are integers between 0 and 63, inclusive. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $grid_member\->mgmt_ipv6_dscp();
\& #Modify attribute value
\& $grid_member\->mgmt_ipv6_dscp(11);
.Ve
.RE
.RS 4
.RE
.SS "mgmt_ipv6_enable_auto_config( )"
.IX Subsection "mgmt_ipv6_enable_auto_config( )"
.RS 4
Use this method to enable/disable IPv6 auto-configuration of the \s-1MGMT\s0 interface.
.Sp
When IPv6 auto-configuration is enabled, a gateway is not needed since it will be automatically discovered.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable IPv6 auto-configuration or \*(L"false\*(R" to disable it. Default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get IPv6 auto\-configuration
\& my $ipv6_autoconfig_enabled = $grid_member\->mgmt_ipv6_enable_auto_config();
\& #Modify IPv6 auto\-configuration
\& $grid_member\->mgmt_ipv6_enable_auto_config("true");
.Ve
.RE
.RS 4
.RE
.SS "mgmt_ipv6_gateway( )"
.IX Subsection "mgmt_ipv6_gateway( )"
.RS 4
Use this method to set or retrieve the \s-1LAN\s0 IPv6 gateway of the \s-1MGMT\s0 port.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get MGMT IPv6 gateway
\& my $mgmt_ipv6_gateway = $grid_member\->mgmt_ipv6_gateway();
\& #Modify MGMT IPv6 gateway
\& $grid_member\->mgmt_ipv6_gateway("2001::1");
.Ve
.RE
.RS 4
.RE
.SS "mgmt_mask( )"
.IX Subsection "mgmt_mask( )"
.RS 4
Use this method to set or retrieve the netmask of the \s-1MGMT\s0 port.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Netmask address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get mgmt mask
\& my $mgmt_mask = $grid_member\->mgmt_mask();
\& #Modify mgmt mask
\& $grid_member\->mgmt_mask("255.255.0.0");
.Ve
.RE
.RS 4
.RE
.SS "mgmt_node2_port_duplex( )"
.IX Subsection "mgmt_node2_port_duplex( )"
.RS 4
Use this method to specify the duplex setting of the \s-1MGMT\s0 port on node 2 of an \s-1HA\s0 pair.
Note: Use this method in combination with mgmt_node2_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"Half\*(R" or \*(L"Full\*(R". The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get mgmt_node2_port_duplex
\& my $mgmt_node2_port_duplex = $obj\->mgmt_node2_port_duplex();
\& #Modify mgmt_node2_port_duplex
\& $obj\->mgmt_node2_port_duplex("Half");
.Ve
.RE
.RS 4
.RE
.SS "mgmt_node2_port_speed( )"
.IX Subsection "mgmt_node2_port_speed( )"
.RS 4
Use this method to set the connection speed of the \s-1MGMT\s0 port on node 2 of an \s-1HA\s0 pair.
Note: Use this method in combination with mgmt_node2_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are 10, 100 or 1000. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get mgmt_node2_port_speed
\& my $mgmt_node2_port_speed = $obj\->mgmt_node2_port_speed();
\& #Modify mgmt_node2_port_speed
\& $obj\->mgmt_node2_port_speed(10);
.Ve
.RE
.RS 4
.RE
.SS "mgmt_port( )"
.IX Subsection "mgmt_port( )"
.RS 4
Use this method to set or retrieve the \s-1MGMT\s0 port flag of a grid member. You can restrict administrative access to an Infoblox appliance by connecting the \s-1MGMT\s0 port to a subnet containing only management systems.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note that node1_mgmt_port, node2_mgmt_port and mgmt_port share the value; setting any of them will have the same effect.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the mgmt_port flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R". To disable the mgmt_port flag, you must disable the \*(L"node1_mgmt_port\*(R" and \*(L"node2_mgmt_port\*(R" flags as well.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get MGMT port flag
\& my $mgmt_port = $grid_member\->mgmt_port();
\& #Modify MGMT port flag
\& $grid_member\->mgmt_port("true");
.Ve
.RE
.RS 4
.RE
.SS "mgmt_port_duplex( )"
.IX Subsection "mgmt_port_duplex( )"
.RS 4
Use this method to specify the duplex setting of the \s-1MGMT\s0 port on a single grid member or on node 1 of an \s-1HA\s0 grid member.
Note: Use this method in combination with mgmt_port_speed. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"Half\*(R" or \*(L"Full\*(R". The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get mgmt_port_duplex
\& my $mgmt_port_duplex = $obj\->mgmt_port_duplex();
\& #Modify mgmt_port_duplex
\& $obj\->mgmt_port_duplex("Half");
.Ve
.RE
.RS 4
.RE
.SS "mgmt_port_speed( )"
.IX Subsection "mgmt_port_speed( )"
.RS 4
Use this method to specify the connection speed of the \s-1MGMT\s0 port on a single grid member or on node 1 of an \s-1HA\s0 grid member.
Note: Use this method in combination with mgmt_port_duplex. If any of these attributes are undefined, the default values for duplex and speed settings are used.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are 10, 100 or 1000. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get mgmt_port_speed
\& my $mgmt_port_speed = $obj\->mgmt_port_speed();
\& #Modify mgmt_port_speed
\& $obj\->mgmt_port_speed(10);
.Ve
.RE
.RS 4
.RE
.SS "mgmt_reserved_interface( )"
.IX Subsection "mgmt_reserved_interface( )"
.RS 4
Use this method to set or retrieve the discovery reserved interface of the \s-1MGMT\s0 port on a single grid member or on node 1 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->mgmt_reserved_interface();
\& #Modify attribute value
\& $grid_member\->mgmt_reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "mmdb_ea_build_time( )"
.IX Subsection "mmdb_ea_build_time( )"
.RS 4
Use this method to retrieve the extensible attributes MaxMind database build time. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. The number of seconds that have elapsed since January 1, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get mmdb_ea_build_time value
\& my $value = $object\->mmdb_ea_build_time();
.Ve
.RE
.RS 4
.RE
.SS "mmdb_geoip_build_time( )"
.IX Subsection "mmdb_geoip_build_time( )"
.RS 4
Use this method to retrieve the GeoIP MaxMind database build time. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. The number of seconds that have elapsed since January 1, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get mmdb_ea_build_time value
\& my $value = $object\->mmdb_ea_build_time();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the host name of a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The host name in \s-1FQDN\s0 (Fully Qualified Domain Name) format of a grid member. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A host name can have a maximum of 256 bytes.
.Sp
Note that name matching is not case-sensitive, and that names are inserted in lowercase.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $grid_member\->name();
\& #Modify name
\& $grid_member\->name("hostname2.com");
.Ve
.RE
.RS 4
.RE
.SS "nat_enabled( )"
.IX Subsection "nat_enabled( )"
.RS 4
Use this method to set or retrieve the \s-1NAT\s0 compatibility setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the \s-1NAT\s0 compatibility setting or \*(L"false\*(R" to disable it.
.Sp
This method will also be automatically set to \*(L"true\*(R" or \*(L"false\*(R" when \*(L"nat_group\*(R", \*(L"nat_ip_address\*(R", \*(L"node1_nat\*(R" and \*(L"node2_nat\*(R" change. If any of them is set, nat_enabled will be set to \*(L"true\*(R"; if all of them are undefined, it will be set to \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get nat group
\& my $nat_group = $grid_member\->nat_group();
\& #Modify nat group
\& $grid_member\->nat_group("nat_group");
.Ve
.RE
.RS 4
.RE
.SS "nat_group( )"
.IX Subsection "nat_group( )"
.RS 4
Use this method to set or retrieve the \s-1NAT\s0 group of a grid member. Required only when \s-1NAT\s0 compatibility is enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the \s-1NAT\s0 (Network Address Translation) group name with a maximum of 256 bytes. Default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get nat group
\& my $nat_group = $grid_member\->nat_group();
\& #Modify nat group
\& $grid_member\->nat_group("nat_group");
.Ve
.RE
.RS 4
.RE
.SS "nat_ip_address( )"
.IX Subsection "nat_ip_address( )"
.RS 4
Use this method to set or retrieve the \s-1NAT IP\s0 address of a grid member. Required only when \s-1NAT\s0 compatibility is enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get nat IP address
\& my $nat_ip_address = $grid_member\->nat_ip_address();
\& #Modify nat ip address
\& $grid_member\->nat_ip_address("5.5.5.5");
.Ve
.RE
.RS 4
.RE
.SS "nic_failover_enabled( )"
.IX Subsection "nic_failover_enabled( )"
.RS 4
Use this method to set or retrieve the nic_failover_enabled flag of a grid member. This is required only when the member is a single appliance. To enable this flag, the lan2_port flag must also be set to 'true'.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the nic_failover_enabled flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get NIC failover enabled flag
\& my $nic_failover_enabled = $grid_member\->nic_failover_enabled();
\& #Modify NIC failover enabled flag
\& $grid_member\->nic_failover_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "nic_failover_enable_primary( )"
.IX Subsection "nic_failover_enable_primary( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether to prefer \s-1LAN1\s0 when it's available or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to nic_failover_enable_primary flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get nic_failover_enable_primary value
\& my $value = $object\->nic_failover_enable_primary();
\&
\& #Modify nic_failover_enable_primary value
\& $object\->nic_failover_enable_primary("true");
.Ve
.RE
.RS 4
.RE
.SS "node1_ha( )"
.IX Subsection "node1_ha( )"
.RS 4
Use this method to set or retrieve the \s-1HA IP\s0 address of node 1. Required only when the member is an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get node1 ha IP address
\& my $node1_ha = $grid_member\->node1_ha();
\& #Modify node1 ha IP address
\& $grid_member\->node1_ha("3.0.0.4");
.Ve
.RE
.RS 4
.RE
.SS "node1_ha_reserved_interface( )"
.IX Subsection "node1_ha_reserved_interface( )"
.RS 4
Use this method to set or retrieve the discovery reserved interface of the \s-1HA\s0 port on node 1 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->node1_ha_reserved_interface();
\& #Modify attribute value
\& $grid_member\->node1_ha_reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "node1_paid_nios( )"
.IX Subsection "node1_paid_nios( )"
.RS 4
Use this method to retrieve whether the node 1 of an \s-1HA\s0 grid member is Paid \s-1NIOS.\s0
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get Paid NIOS status
\& my $node1_paid_nios = $grid_member\->node1_paid_nios();
.Ve
.RE
.RS 4
.RE
.SS "node1_hwplatform( )"
.IX Subsection "node1_hwplatform( )"
.RS 4
Use this method to retrieve the hardware platform of node 1 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get hardware platform
\& my $node1_hwplatform = $grid_member\->node1_hwplatform();
.Ve
.RE
.RS 4
.RE
.SS "node1_hwid( )"
.IX Subsection "node1_hwid( )"
.RS 4
Use this method to retrieve the hardware \s-1ID\s0 of node 1 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get node1 hardware ID
\& my $node1_hwid = $grid_member\->node1_hwid();
.Ve
.RE
.RS 4
.RE
.SS "node1_lan( )"
.IX Subsection "node1_lan( )"
.RS 4
Use this method to set or retrieve the \s-1LAN\s0 IPv4 address of node 1 of an \s-1HA\s0 grid member. Required only when the member is an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN IP address of node1
\& my $node1_lan = $grid_member\->node1_lan();
\& #Modify LAN IP address of node1
\& $grid_member\->node1_lan("3.0.0.9");
.Ve
.RE
.RS 4
.RE
.SS "node1_lan_ipv6addr( )"
.IX Subsection "node1_lan_ipv6addr( )"
.RS 4
Use this method to set or retrieve the \s-1LAN\s0 IPv6 address of node 1 of an \s-1HA\s0 grid member. Required only when the member is an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN IPv6 address of node1
\& my $node1_lan_ipv6addr = $grid_member\->node1_lan_ipv6addr();
\& #Modify LAN IPv6 address of node1
\& $grid_member\->node1_lan_ipv6addr("2001::1");
.Ve
.RE
.RS 4
.RE
.SS "node1_lan_reserved_interface( )"
.IX Subsection "node1_lan_reserved_interface( )"
.RS 4
Use this method to set or retrieve the discovery reserved interface of the \s-1LAN\s0 port on node 1 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->node1_lan_reserved_interface();
\& #Modify attribute value
\& $grid_member\->node1_lan_reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "node1_lan2_reserved_interface( )"
.IX Subsection "node1_lan2_reserved_interface( )"
.RS 4
Use this method to set or retrieve the discovery reserved interface of the \s-1LAN2\s0 port on node 1 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->node1_lan2_reserved_interface();
\& #Modify attribute value
\& $grid_member\->node1_lan2_reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "node1_lcd_autodim( )"
.IX Subsection "node1_lcd_autodim( )"
.RS 4
Use this method to set or retrieve the number of seconds before the \s-1LCD\s0 on the front panel of node 1 of an \s-1HA\s0 grid member automatically dims.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The number of seconds. Valid values are between 5 and 3600. The default value is 30.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lcd_autodim on node 1
\& my $node1_lcd_autodim = $grid_member\->node1_lcd_autodim();
\& #Modify the autodim value
\& $grid_member\->node1_lcd_autodim(60);
.Ve
.RE
.RS 4
.RE
.SS "node1_lcd_brightness( )"
.IX Subsection "node1_lcd_brightness( )"
.RS 4
Use this method to set or retrieve the brightness level of the \s-1LCD\s0 on the front panel of node 1 of an \s-1HA\s0 grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are between 1 and 10. The default value is 7.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lcd_brightness on node 1
\& my $node1_lcd_brightness = $grid_member\->node1_lcd_brightness();
\& #Modify the brightness value
\& $grid_member\->node1_lcd_brightness(3);
.Ve
.RE
.RS 4
.RE
.SS "node1_lcd_hwident( )"
.IX Subsection "node1_lcd_hwident( )"
.RS 4
Use this method to set or retrieve whether the node 1 of an \s-1HA\s0 grid member's hardware \s-1ID\s0 identification functionality is active.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the lcd_hwident flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the lcd_hwident status
\& my $node1_lcd_hwident = $grid_member\->node1_lcd_hwident();
\& #Modify the lcd_hwident status
\& $grid_member\->node1_lcd_hwident("true");
.Ve
.RE
.RS 4
.RE
.SS "node1_lcd_version( )"
.IX Subsection "node1_lcd_version( )"
.RS 4
Use this method to retrieve the version of the Liquid Crystal Display (\s-1LCD\s0) of the node 1 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get node1_lcd_version
\& my $node1_lcd_version = $grid_member\->node1_lcd_version();
.Ve
.RE
.RS 4
.RE
.SS "node1_lom_gateway( )"
.IX Subsection "node1_lom_gateway( )"
.RS 4
Use this method to set or retrieve the gateway \s-1IP\s0 address on node 1 of an \s-1HA\s0 grid member for the \s-1LOM\s0 functionality.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get node1_lom_gateway
\& my $node1_lom_gateway = $grid_member\->node1_lom_gateway();
\& #Modify node1_lom_gateway
\& $grid_member\->node1_lom_gateway("3.0.0.1");
.Ve
.RE
.RS 4
.RE
.SS "node1_lom_is_capable( )"
.IX Subsection "node1_lom_is_capable( )"
.RS 4
Use this method to retrieve a flag describing if node 1 of an \s-1HA\s0 grid member is capable of the \s-1LOM\s0 functionality.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The method returns \*(L"true\*(R" if the node is capable of \s-1LOM\s0 operation, \*(L"false\*(R" otherwise.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get node1_lom_is_capable
\& my $node1_lom_is_capable = $grid_member\->node1_lom_is_capable();
.Ve
.RE
.RS 4
.RE
.SS "node1_lom_ipv4addr( )"
.IX Subsection "node1_lom_ipv4addr( )"
.RS 4
Use this method to set or retrieve the IPv4 address on node 1 of an \s-1HA\s0 grid member for the \s-1LOM\s0 functionality.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get node1_lom_ipv4addr
\& my $node1_lom_ipv4addr = $grid_member\->node1_lom_ipv4addr();
\& #Modify node1_lom_ipv4addr
\& $grid_member\->node1_lom_ipv4addr("3.0.0.3");
.Ve
.RE
.RS 4
.RE
.SS "node1_lom_mask( )"
.IX Subsection "node1_lom_mask( )"
.RS 4
Use this method to set or retrieve the netmask on node 1 of an \s-1HA\s0 grid member for the \s-1LOM\s0 functionality.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Netmask address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get node1_lom_mask
\& my $node1_lom_mask = $grid_member\->node1_lom_mask();
\& #Modify node1_lom_mask
\& $grid_member\->node1_lom_mask("255.255.0.0");
.Ve
.RE
.RS 4
.RE
.SS "node1_mgmt_dscp( )"
.IX Subsection "node1_mgmt_dscp( )"
.RS 4
Use this method to set or retrieve the \s-1DSCP\s0 value of the IPv4 \s-1MGMT\s0 port on node 1 of an \s-1HA\s0 grid member.
.Sp
Setting this method to a defined value implicitly sets the override_node1_mgmt_dscp method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_node1_mgmt_dscp attribute to \*(L"false\*(R".
.Sp
Note that when dscp is set to a defined value and override_node1_mgmt_dscp is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->node1_mgmt_dscp(11); \f(CW$object\fR\->override_node1_mgmt_dscp(\*(L"false\*(R"); will set override_node1_mgmt_dscp to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_node1_mgmt_dscp(\*(L"false\*(R"); \f(CW$object\fR\->node1_mgmt_dscp(11); will result in override_node1_mgmt_dscp=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are integers between 0 and 63, inclusive. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $grid_member\->node1_mgmt_dscp();
\& #Modify attribute value
\& $grid_member\->node1_mgmt_dscp(11);
.Ve
.RE
.RS 4
.RE
.SS "node1_mgmt_gateway( )"
.IX Subsection "node1_mgmt_gateway( )"
.RS 4
Use this method to set or retrieve the gateway \s-1IP\s0 address of the \s-1MGMT\s0 port on node 1 of an \s-1HA\s0 grid member. Required only when the \s-1MGMT\s0 port is enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get gateway of MGMT port of node1
\& my $node1_mgmt_gateway = $grid_member\->node1_mgmt_gateway();
\& #Modify gateway of MGMT port of node1
\& $grid_member\->node1_mgmt_gateway("6.0.0.1");
.Ve
.RE
.RS 4
.RE
.SS "node1_mgmt_ipv6addr( )"
.IX Subsection "node1_mgmt_ipv6addr( )"
.RS 4
Use this method to set or retrieve the \s-1LAN\s0 IPv6 address of the \s-1MGMT\s0 port on node 1 of an \s-1HA\s0 grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get MGMT IPv6 address of node 1
\& my $node1_mgmt_ipv6addr = $grid_member\->node1_mgmt_ipv6addr();
\& #Modify MGMT IPv6 address of node 1
\& $grid_member\->node1_mgmt_ipv6addr("2001::2");
.Ve
.RE
.RS 4
.RE
.SS "node1_mgmt_ipv6_cidr( )"
.IX Subsection "node1_mgmt_ipv6_cidr( )"
.RS 4
Use this method to set or retrieve the \s-1CIDR\s0 of the \s-1MGMT\s0 port on node 1 of an \s-1HA\s0 grid member. Required only when node1_mgmt_ipv6addr is specified.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the netmask in \s-1CIDR\s0 format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get MGMT cidr of node 1
\& my $node1_mgmt_cidr = $grid_member\->node1_mgmt_cidr();
\& #Modify MGMT cidr of node 1
\& $grid_member\->node1_mgmt_cidr("64");
.Ve
.RE
.RS 4
.RE
.SS "node1_mgmt_ipv6_dscp( )"
.IX Subsection "node1_mgmt_ipv6_dscp( )"
.RS 4
Use this method to set or retrieve the \s-1DSCP\s0 value of the IPv6 \s-1MGMT\s0 port on node 1 of an \s-1HA\s0 grid member.
.Sp
Setting this method to a defined value implicitly sets the override_node1_mgmt_ipv6_dscp method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_node1_mgmt_ipv6_dscp attribute to \*(L"false\*(R".
.Sp
Note that when dscp is set to a defined value and override_node1_mgmt_ipv6_dscp is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->node1_mgmt_ipv6_dscp(11); \f(CW$object\fR\->override_node1_mgmt_ipv6_dscp(\*(L"false\*(R"); will set override_node1_mgmt_ipv6_dscp to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_node1_mgmt_ipv6_dscp(\*(L"false\*(R"); \f(CW$object\fR\->node1_mgmt_ipv6_dscp(11); will result in override_node1_mgmt_ipv6_dscp=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are integers between 0 and 63, inclusive. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $grid_member\->node1_mgmt_ipv6_dscp();
\& #Modify attribute value
\& $grid_member\->node1_mgmt_ipv6_dscp(11);
.Ve
.RE
.RS 4
.RE
.SS "node1_mgmt_ipv6_enable_auto_config( )"
.IX Subsection "node1_mgmt_ipv6_enable_auto_config( )"
.RS 4
Use this method to enable/disable IPv6 auto-configuration of the \s-1MGMT\s0 interface.
.Sp
When IPv6 auto-configuration is enabled, a gateway is not needed since it will be automatically discovered.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable IPv6 auto-configuration or \*(L"false\*(R" to disable it. Default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get IPv6 auto\-configuration of node 1
\& my $ipv6_autoconfig_enabled = $grid_member\->node1_mgmt_ipv6_enable_auto_config();
\& #Modify IPv6 auto\-configuration of node 1
\& $grid_member\->node1_mgmt_ipv6_enable_auto_config("true");
.Ve
.RE
.RS 4
.RE
.SS "node1_mgmt_ipv6_gateway( )"
.IX Subsection "node1_mgmt_ipv6_gateway( )"
.RS 4
Use this method to set or retrieve the \s-1LAN\s0 IPv6 gateway of the \s-1MGMT\s0 port on node 1 of an \s-1HA\s0 grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get MGMT IPv6 gateway of node 1
\& my $node1_mgmt_ipv6_gateway = $grid_member\->node1_mgmt_ipv6_gateway();
\& #Modify MGMT IPv6 gateway of node 1
\& $grid_member\->node1_mgmt_ipv6_gateway("2001::1");
.Ve
.RE
.RS 4
.RE
.SS "node1_mgmt_mask( )"
.IX Subsection "node1_mgmt_mask( )"
.RS 4
Use this method to set or retrieve the netmask of the \s-1MGMT\s0 port on node 1 of an \s-1HA\s0 grid member. Required only when the \s-1MGMT\s0 port is enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Netmask address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get netmask of MGMT port of node 1
\& my $node1_mgmt_mask = $grid_member\->node1_mgmt_mask();
\& #Modify netmask of MGMT port of node 1
\& $grid_member\->node1_mgmt_mask("255.255.0.0");
.Ve
.RE
.RS 4
.RE
.SS "node1_mgmt_lan( )"
.IX Subsection "node1_mgmt_lan( )"
.RS 4
Use this method to set or retrieve the \s-1LAN IP\s0 address of the \s-1MGMT\s0 port on node 1 of an \s-1HA\s0 grid member. Required only when the \s-1MGMT\s0 port is enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN IP address of MGMT port on node 1
\& my $node1_mgmt_lan = $grid_member\->node1_mgmt_lan();
\& #Modify LAN IP address of MGMT port on node 1
\& $grid_member\->node1_mgmt_lan("6.0.0.5");
.Ve
.RE
.RS 4
.RE
.SS "node1_mgmt_port( )"
.IX Subsection "node1_mgmt_port( )"
.RS 4
Use this method to set or retrieve the \s-1MGMT\s0 port flag of an \s-1HA\s0 grid member. Required only when the \s-1MGMT\s0 port is enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note that node1_mgmt_port, node2_mgmt_port and mgmt_port share the value; setting any of them will have the same effect.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the node1_mgmt_port flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined. To disable node1_mgmt_port flag we also need to disable \*(L"mgmt_port\*(R" and \*(L"node2_mgmt_port\*(R" flags.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get node 1 MGMT port flag
\& my $node1_mgmt_port = $grid_member\->node1_mgmt_port();
\& #Modify node 1 MGMT port flag
\& $grid_member\->node1_mgmt_port("true");
.Ve
.RE
.RS 4
.RE
.SS "node1_mgmt_reserved_interface( )"
.IX Subsection "node1_mgmt_reserved_interface( )"
.RS 4
Use this method to set or retrieve the discovery reserved interface of the \s-1MGMT\s0 port on node 1 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->node1_mgmt_reserved_interface();
\& #Modify attribute value
\& $grid_member\->node1_mgmt_reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "node1_nat( )"
.IX Subsection "node1_nat( )"
.RS 4
Use this method to set or retrieve the Network Address Translation (\s-1NAT\s0) address of node 1 of an \s-1HA\s0 grid member. Required only when \s-1NAT\s0 compatibility is enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get Network Address Translation (NAT) address of node 1
\& my $node1_nat = $grid_member\->node1_nat();
\& #Modify Network Address Translation (NAT) address of node 1
\& $grid_member\->node1_nat("5.2.2.1");
.Ve
.RE
.RS 4
.RE
.SS "node1_service_status( )"
.IX Subsection "node1_service_status( )"
.RS 4
Use this method to retrieve the service status list of a grid member.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
On retrieval, the member returns an array reference that contains  Infoblox::Grid::Member::ServiceStatus objects.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the service status list
\& my $services_list = $grid_member\->node1_service_status();
.Ve
.RE
.RS 4
.RE
.SS "vpn_mtu( )"
.IX Subsection "vpn_mtu( )"
.RS 4
Use this method to set or retrieve the \s-1VPN\s0 maximum transmission unit (\s-1MTU\s0).
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the value to set the vpn_mtu value.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get VPN MTU
\& my $vpn_mtu = $grid_member\->vpn_mtu();
\& #Modify VPN MTU
\& $grid_member\->vpn_mtu(600);
.Ve
.RE
.RS 4
.RE
.SS "node1_vpn_on_mgmt( )"
.IX Subsection "node1_vpn_on_mgmt( )"
.RS 4
Use this method to set or retrieve the \s-1VPN\s0 on \s-1MGMT\s0 port flag of an \s-1HA\s0 grid member. Valid only when the \s-1MGMT\s0 port is enabled and the member is not a master candidate. This flag enables \s-1VPN\s0 services on the \s-1MGMT\s0 port of an \s-1HA\s0 grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note that node1_vpn_on_mgmt, node2_vpn_on_mgmt and vpn_on_mgmt share the value; setting any of them will have the same effect.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the node1_vpn_on_mgmt flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get node 1 VPN on MGMT port flag
\& my $node1_vpn_on_mgmt = $grid_member\->node1_vpn_on_mgmt();
\& #Modify node 1 VPN on MGMT port flag
\& $grid_member\->node1_vpn_on_mgmt("false");
.Ve
.RE
.RS 4
.RE
.SS "node1_hwtype( )"
.IX Subsection "node1_hwtype( )"
.RS 4
Use this method to retrieve the hardware type of node 1 of an \s-1HA\s0 grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The actual hardware type is populated when the physical node joins the grid. The default value is "".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get node1 hardware type
\& my $node1_hwtype = $grid_member\->node1_hwtype();
.Ve
.RE
.RS 4
.RE
.SS "node2_ha( )"
.IX Subsection "node2_ha( )"
.RS 4
Use this method to set or retrieve the \s-1HA IP\s0 address of node 2 of an \s-1HA\s0 grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get node 2 HA IP address
\& my $node2_ha = $grid_member\->node2_ha();
\& #Modify node 2 HA IP address
\& $grid_member\->node2_ha("3.0.0.6");
.Ve
.RE
.RS 4
.RE
.SS "node2_ha_reserved_interface( )"
.IX Subsection "node2_ha_reserved_interface( )"
.RS 4
Use this method to set or retrieve the discovery reserved interface of the \s-1HA\s0 port on node 2 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->node2_ha_reserved_interface();
\& #Modify attribute value
\& $grid_member\->node2_ha_reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "node2_paid_nios( )"
.IX Subsection "node2_paid_nios( )"
.RS 4
Use this method to retrieve whether the node 2 of an \s-1HA\s0 grid member is Paid \s-1NIOS.\s0
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get Paid NIOS status
\& my $node2_paid_nios = $grid_member\->node2_paid_nios();
.Ve
.RE
.RS 4
.RE
.SS "node2_hwplatform( )"
.IX Subsection "node2_hwplatform( )"
.RS 4
Use this method to retrieve the hardware platform of node 2 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get hardware platform
\& my $node2_hwplatform = $grid_member\->node2_hwplatform();
.Ve
.RE
.RS 4
.RE
.SS "node2_hwid( )"
.IX Subsection "node2_hwid( )"
.RS 4
Use this method to retrieve the hardware \s-1ID\s0 of node 2 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get node2 hardware ID
\& my $node2_hwid = $grid_member\->node2_hwid();
.Ve
.RE
.RS 4
.RE
.SS "node2_lan( )"
.IX Subsection "node2_lan( )"
.RS 4
Use this method to set or retrieve the \s-1LAN IP\s0 address of node 2 of an \s-1HA\s0 grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN IP address of node 2
\& my $node2_lan = $grid_member\->node2_lan();
\& #Modify LAN IP address of node 2
\& $grid_member\->node2_lan("3.0.0.5");
.Ve
.RE
.RS 4
.RE
.SS "node2_lan_ipv6addr( )"
.IX Subsection "node2_lan_ipv6addr( )"
.RS 4
Use this method to set or retrieve the \s-1LAN\s0 IPv6 address of node 2 of an \s-1HA\s0 grid member. Required only when the member is an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number represented as eight groups of four hexadecimal digits (i.e. two octets), each group separated by a colon(:) (example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334). Leading zeroes and groups of consecutive zeros within the value can be omitted to produce a more compact representation (example: 2001::1, ::1).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN IPv6 address of node2
\& my $node2_lan_ipv6addr = $grid_member\->node2_lan_ipv6addr();
\& #Modify LAN IPv6 address of node2
\& $grid_member\->node2_lan_ipv6addr("2001::1");
.Ve
.RE
.RS 4
.RE
.SS "node2_lan_reserved_interface( )"
.IX Subsection "node2_lan_reserved_interface( )"
.RS 4
Use this method to set or retrieve the discovery reserved interface of the \s-1LAN\s0 port on node 2 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->node2_lan_reserved_interface();
\& #Modify attribute value
\& $grid_member\->node2_lan_reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "node2_lan2_reserved_interface( )"
.IX Subsection "node2_lan2_reserved_interface( )"
.RS 4
Use this method to set or retrieve the discovery reserved interface of the \s-1LAN2\s0 port on node 2 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->node2_lan2_reserved_interface();
\& #Modify attribute value
\& $grid_member\->node2_lan2_reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "node2_lcd_autodim( )"
.IX Subsection "node2_lcd_autodim( )"
.RS 4
Use this method to set or retrieve the number of seconds before the \s-1LCD\s0 on the front panel of node 2 of an \s-1HA\s0 grid member automatically dims.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The number of seconds. Valid values are between 5 and 3600. The default value is 30.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lcd_autodim on node 2
\& my $node2_lcd_autodim = $grid_member\->node2_lcd_autodim();
\& #Modify the autodim value
\& $grid_member\->node2_lcd_autodim(60);
.Ve
.RE
.RS 4
.RE
.SS "node2_lcd_brightness( )"
.IX Subsection "node2_lcd_brightness( )"
.RS 4
Use this method to set or retrieve the brightness level of the \s-1LCD\s0 on the front panel of node 2 of an \s-1HA\s0 grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are between 1 and 10. The default value is 7.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lcd_brightness on node 2
\& my $node2_lcd_brightness = $grid_member\->node2_lcd_brightness();
\& #Modify the brightness value
\& $grid_member\->node2_lcd_brightness(3);
.Ve
.RE
.RS 4
.RE
.SS "node2_lcd_hwident( )"
.IX Subsection "node2_lcd_hwident( )"
.RS 4
Use this method to set or retrieve whether the node 2 of an \s-1HA\s0 grid member's hardware \s-1ID\s0 identification functionality is active.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the node2_lcd_hwident flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the lcd_hwident status
\& my $node2_lcd_hwident = $grid_member\->node2_lcd_hwident();
\& #Modify the lcd_hwident status
\& $grid_member\->node2_lcd_hwident("true");
.Ve
.RE
.RS 4
.RE
.SS "node2_lcd_version( )"
.IX Subsection "node2_lcd_version( )"
.RS 4
Use this method to retrieve the version of the Liquid Crystal Display (\s-1LCD\s0) of the node 2 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get node2_lcd_version
\& my $node2_lcd_version = $grid_member\->node2_lcd_version();
.Ve
.RE
.RS 4
.RE
.SS "node2_lom_gateway( )"
.IX Subsection "node2_lom_gateway( )"
.RS 4
Use this method to set or retrieve the gateway \s-1IP\s0 address on node 2 of an \s-1HA\s0 grid member for the \s-1LOM\s0 functionality.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.1).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get node2_lom_gateway
\& my $node2_lom_gateway = $grid_member\->node2_lom_gateway();
\& #Modify node2_lom_gateway
\& $grid_member\->node2_lom_gateway("3.0.0.1");
.Ve
.RE
.RS 4
.RE
.SS "node2_lom_is_capable( )"
.IX Subsection "node2_lom_is_capable( )"
.RS 4
Use this method to retrieve a flag describing if node 1 of an \s-1HA\s0 grid member is capable of the \s-1LOM\s0 functionality.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The method returns \*(L"true\*(R" if the node is capable of \s-1LOM\s0 operation, \*(L"false\*(R" otherwise.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get node2_lom_is_capable
\& my $node2_lom_is_capable = $grid_member\->node2_lom_is_capable();
.Ve
.RE
.RS 4
.RE
.SS "node2_lom_ipv4addr( )"
.IX Subsection "node2_lom_ipv4addr( )"
.RS 4
Use this method to set or retrieve the IPv4 address on node 2 of an \s-1HA\s0 grid member for the \s-1LOM\s0 functionality.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get node2_lom_ipv4addr
\& my $node2_lom_ipv4addr = $grid_member\->node2_lom_ipv4addr();
\& #Modify node2_lom_ipv4addr
\& $grid_member\->node2_lom_ipv4addr("3.0.0.3");
.Ve
.RE
.RS 4
.RE
.SS "node2_lom_mask( )"
.IX Subsection "node2_lom_mask( )"
.RS 4
Use this method to set or retrieve the netmask on node 2 of an \s-1HA\s0 grid member for the \s-1LOM\s0 functionality.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Netmask address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get node2_lom_mask
\& my $node2_lom_mask = $grid_member\->node2_lom_mask();
\& #Modify node2_lom_mask
\& $grid_member\->node2_lom_mask("255.255.0.0");
.Ve
.RE
.RS 4
.RE
.SS "node2_mgmt_dscp( )"
.IX Subsection "node2_mgmt_dscp( )"
.RS 4
Use this method to set or retrieve the \s-1DSCP\s0 value of the IPv4 \s-1MGMT\s0 port on node 2 of an \s-1HA\s0 grid member.
.Sp
Setting this method to a defined value implicitly sets the override_node2_mgmt_dscp method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_node2_mgmt_dscp attribute to \*(L"false\*(R".
.Sp
Note that when dscp is set to a defined value and override_node2_mgmt_dscp is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->node2_mgmt_dscp(11); \f(CW$object\fR\->override_node2_mgmt_dscp(\*(L"false\*(R"); will set override_node2_mgmt_dscp to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_node2_mgmt_dscp(\*(L"false\*(R"); \f(CW$object\fR\->node2_mgmt_dscp(11); will result in override_node2_mgmt_dscp=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are integers between 0 and 63, inclusive. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $grid_member\->node2_mgmt_dscp();
\& #Modify attribute value
\& $grid_member\->node2_mgmt_dscp(11);
.Ve
.RE
.RS 4
.RE
.SS "node2_mgmt_gateway( )"
.IX Subsection "node2_mgmt_gateway( )"
.RS 4
Use this method to set or retrieve the gateway \s-1IP\s0 address of the \s-1MGMT\s0 port on node 2 of an \s-1HA\s0 grid member. Required only when the \s-1MGMT\s0 port is enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get gateway of MGMT port of node 2
\& my $node2_mgmt_gateway = $grid_member\->node2_mgmt_gateway();
\& #Modify gateway of MGMT port of node 2
\& $grid_member\->node2_mgmt_gateway("7.0.0.1");
.Ve
.RE
.RS 4
.RE
.SS "node2_mgmt_mask( )"
.IX Subsection "node2_mgmt_mask( )"
.RS 4
Use this method to set or retrieve the netmask of the \s-1MGMT\s0 port on node 2 of an \s-1HA\s0 grid member. Required only when the \s-1MGMT\s0 port is enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Netmask address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 255.255.0.0).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get netmask of MGMT port of node 2
\& my $node2_mgmt_mask = $grid_member\->node2_mgmt_mask();
\& #Modify netmask of MGMT port of node 2
\& $grid_member\->node2_mgmt_mask("255.255.0.0");
.Ve
.RE
.RS 4
.RE
.SS "node2_mgmt_lan( )"
.IX Subsection "node2_mgmt_lan( )"
.RS 4
Use this method to set or retrieve the \s-1LAN IP\s0 address of the \s-1MGMT\s0 port on node 2 of an \s-1HA\s0 grid member. Required only when the \s-1MGMT\s0 port is enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get LAN IP address of MGMT port of node 2
\& my $node2_mgmt_lan = $grid_member\->node2_mgmt_lan();
\& #Modify LAN IP address of MGMT port of node 2
\& $grid_member\->node2_mgmt_lan("7.0.0.5");
.Ve
.RE
.RS 4
.RE
.SS "node2_mgmt_port( )"
.IX Subsection "node2_mgmt_port( )"
.RS 4
Use this method to set or retrieve the \s-1MGMT\s0 port flag of an \s-1HA\s0 grid member. Required only when the \s-1MGMT\s0 port is enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note that node1_mgmt_port, node2_mgmt_port and mgmt_port share the value: setting any of them will have the same effect.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the node2_mgmt_port flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined. To disable node2_mgmt_port flag, you must disable the \*(L"mgmt_port\*(R" and \*(L"node1_mgmt_port\*(R" flags as well.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get MGMT port flag of node 2
\& my $node2_mgmt_port = $grid_member\->node2_mgmt_port();
\& #Modify MGMT port flag of node 2
\& $grid_member\->node2_mgmt_port("true");
.Ve
.RE
.RS 4
.RE
.SS "node2_mgmt_reserved_interface( )"
.IX Subsection "node2_mgmt_reserved_interface( )"
.RS 4
Use this method to set or retrieve the discovery reserved interface of the \s-1MGMT\s0 port on node 2 of an \s-1HA\s0 grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->node2_mgmt_reserved_interface();
\& #Modify attribute value
\& $grid_member\->node2_mgmt_reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "node2_mgmt_ipv6_dscp( )"
.IX Subsection "node2_mgmt_ipv6_dscp( )"
.RS 4
Use this method to set or retrieve the \s-1DSCP\s0 value of the IPv6 \s-1MGMT\s0 port on node 2 of an \s-1HA\s0 grid member.
.Sp
Setting this method to a defined value implicitly sets the override_node2_mgmt_ipv6_dscp method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_node2_mgmt_ipv6_dscp attribute to \*(L"false\*(R".
.Sp
Note that when dscp is set to a defined value and override_node2_mgmt_ipv6_dscp is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->node2_mgmt_ipv6_dscp(11); \f(CW$object\fR\->override_node2_mgmt_ipv6_dscp(\*(L"false\*(R"); will set override_node2_mgmt_ipv6_dscp to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_node2_mgmt_ipv6_dscp(\*(L"false\*(R"); \f(CW$object\fR\->node2_mgmt_ipv6_dscp(11); will result in override_node2_mgmt_ipv6_dscp=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are integers between 0 and 63, inclusive. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $grid_member\->node2_mgmt_ipv6_dscp();
\& #Modify attribute value
\& $grid_member\->node2_mgmt_ipv6_dscp(11);
.Ve
.RE
.RS 4
.RE
.SS "node2_nat( )"
.IX Subsection "node2_nat( )"
.RS 4
Use this method to set or retrieve the Network Address Translation (\s-1NAT\s0) address of node 2. Required only when \s-1NAT\s0 compatibility is enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get Network Address Translation (NAT) address of node2
\& my $node2_nat = $grid_member\->node2_nat();
\& #Modify Network Address Translation (NAT) address of node2
\& $grid_member\->node2_nat("5.4.4.6");
.Ve
.RE
.RS 4
.RE
.SS "node2_service_status( )"
.IX Subsection "node2_service_status( )"
.RS 4
Use this method to retrieve the service status list of a grid member.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
On retrieval, the member returns an array reference that contains  Infoblox::Grid::Member::ServiceStatus objects.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the service status list
\& my $services_list = $grid_member\->node2_service_status();
.Ve
.RE
.RS 4
.RE
.SS "node2_vpn_on_mgmt( )"
.IX Subsection "node2_vpn_on_mgmt( )"
.RS 4
Use this method to set or retrieve the \s-1VPN\s0 on \s-1MGMT\s0 port flag of an \s-1HA\s0 grid member. Valid only when the \s-1MGMT\s0 port is enabled and the member is not a master candidate. This flag enables \s-1VPN\s0 services on the \s-1MGMT\s0 port of an \s-1HA\s0 grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note that node1_vpn_on_mgmt, node2_vpn_on_mgmt and vpn_on_mgmt share the value: setting any of them will have the same effect.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the node2_vpn_on_mgmt flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get node 2 VPN on MGMT port flag
\& my $node2_vpn_on_mgmt = $grid_member\->node2_vpn_on_mgmt();
\& #Modify node 2 VPN on MGMT port flag
\& $grid_member\->node2_vpn_on_mgmt("false");
.Ve
.RE
.RS 4
.RE
.SS "node2_hwtype( )"
.IX Subsection "node2_hwtype( )"
.RS 4
Use this method to retrieve the hardware type of node 2 of an \s-1HA\s0 grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The actual hardware type is populated when the physical node joins the grid. The default value is "".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get node2 hardware type
\& my $node2_hwtype = $grid_member\->node2_hwtype();
.Ve
.RE
.RS 4
.RE
.SS "notification_email_addr( )"
.IX Subsection "notification_email_addr( )"
.RS 4
Use this method to set or retrieve the notification email address of a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The email address. Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get notification email address
\& my $notification_email_addr = $grid_member\->notification_email_addr();
\& #Modify notification email address
\& $grid_member\->notification_email_addr("admin\e@infoblox.com");
.Ve
.RE
.RS 4
.RE
.SS "ntp_access_list( )"
.IX Subsection "ntp_access_list( )"
.RS 4
Use this method to set or retrieve the Network Time Protocols (\s-1NTP\s0) access control list of a grid member. Valid only when the enable_ntp flag is set to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::NamedACL object
 or an array reference that contains Infoblox::Grid::NTPAccess objects
\&.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get NTP access control list
\& my $ntp_access_list = $grid_member\->ntp_access_list();
\& #Modify NTP access control list
\& $grid_member\->ntp_access_list([$ntpac1,$ntpac2]);
\& #Undef NTP access control list
\& $grid_member\->ntp_access_list(undef);
\& #Use Infoblox::Grid::NamedACL
\& $grid_member\->ntp_access_list($nacl);
.Ve
.RE
.RS 4
.RE
.SH "ntp_kod( )"
.IX Header "ntp_kod( )"
.RS 4
Use this method to enable Kiss-o'-Death packets on the \s-1NTP\s0 server.
.Sp
Setting this method to a defined value implicitly sets the override_ntp_kod method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_ntp_kod attribute to \*(L"false\*(R".
.Sp
Note that when ntp_kod is set to a defined value and override_ntp_kod is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ntp_kod(\*(L"true\*(R"); \f(CW$object\fR\->override_ntp_kod(\*(L"false\*(R"); will set override_ntp_kod to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ntp_kod(\*(L"false\*(R"); \f(CW$object\fR\->ntp_kod(\*(L"true\*(R"); will result in override_ntp_kod=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable Kiss-o'-Death packets on the \s-1NTP\s0 server or \*(L"false\*(R" to disable them. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the current value of the ntp_kod parameter
\& my $ntp_kod = $grid\->ntp_kod();
\& #Set the ntp_kod parameter
\& $grid\->ntp_kod("true");
.Ve
.RE
.RS 4
.RE
.SS "ntp_service_type( )"
.IX Subsection "ntp_service_type( )"
.RS 4
Use this method to set or retrieve the \s-1NTP\s0 service type for assigned Named \s-1ACL\s0 object.
.Sp
The attribute value is ignored if 'ntp_access_list' attribute is not a Named \s-1ACL\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"Time\*(R" or \*(L"Time and \s-1NTP\s0 control\*(R". The default value is \*(L"Time\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ntp_service_type
\& my $service = $grid_member\->ntp_service_type();
\& #Modify ntp_service_type
\& $grid_member\->ntp_service_type("Time and NTP control");
.Ve
.RE
.RS 4
.RE
.SS "ntp_authentication_key( )"
.IX Subsection "ntp_authentication_key( )"
.RS 4
Use this method to set or retrieve the Network Time Protocol (\s-1NTP\s0) authentication key(s) of a grid member. Valid only when the enable_ntp flag is set to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains  Infoblox::Grid::NTPKey object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get NTP authentication key
\& my $ntp_authentication_key = $grid_member\->ntp_authentication_key();
\& #Modify NTP authentication key
\& my $ntp_key1 = Infoblox::Grid::NTPKey\->new(
\&     key_number => "1111",
\&     key_type   => "M",
\&     key_string => "aaaa"
\& );
\& my $ntp_key2 = Infoblox::Grid::NTPKey\->new(
\&     key_number => "2222",
\&     key_type   => "n",
\&     key_string => "d3e54352e5548080"
\& );
\& $grid_member\->ntp_authentication_key([$ntp_key1, $ntp_key2]);
.Ve
.RE
.RS 4
.RE
.SS "ntp_server( )"
.IX Subsection "ntp_server( )"
.RS 4
Use this method to set or retrieve the \s-1NTP\s0 server list.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference that contains Infoblox::Grid::NTPServer objects or undef.
.Sp
Specifying a reference to an empty array while the
\&\*(L"exclude_grid_master_as_ntp_server\*(R" attribute is set to \*(L"false\*(R" sets the Grid Master as the only \s-1NTP\s0 source for the given Member.
Setting the value of this parameter to undef disables the feature.
.Sp
\&\s-1NOTE:\s0 Currently, if you need to specify an external \s-1NTP\s0 server with authentication, the \s-1NTP\s0 keys that you use must be known
to the Infoblox::Grid object. See the following example.
.Sp
\&\s-1NOTE:\s0 Setting this to a list also sets external_ntp_servers_enabled to 'true'. Setting this to undef also sets
external_ntp_servers_enabled to 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the ntp_server list for the given member
\& my $ntp_server_list=$grid_member\->ntp_server();
\&
\& #Modify ntp_server property
\& my $ntp_server1 = Infoblox::Grid::NTPServer\->new(address => "1.1.1.1");
\& my $ntp_server2 = Infoblox::Grid::NTPServer\->new(address => "2.2.2.2");
\& $grid_member\->ntp_server([$ntp_server1,$ntp_server2]);
\&
\& #Setting grid master as the only NTP source
\& my $session=Infoblox::Session\->new(
\&     master   => "127.0.0.1",
\&     username => "admin",
\&     password => "infoblox"
\&    );
\& die(Infoblox::status_code().":".Infoblox::status_detail()) unless $session;
\&
\& my $grid_member=$session\->get(
\&                               object => "Infoblox::Grid::Member",
\&                               name   => "infoblox.localdomain"
\&                              );
\& die($session\->status_code()." : ".$session\->status_detail()) unless (ref($grid_member) eq "Infoblox::Grid::Member");
\&
\& $grid_member\->ntp_server([]);
\& $grid_member\->exclude_grid_master_as_ntp_server("false");
\& $session\->modify($grid_member) or die($session\->status_code()." : ".$session\->status_detail());
\&
\& #Adding external NTP servers with authentication
\& my $session=Infoblox::Session\->new(
\&     master   => "127.0.0.1",
\&     username => "admin",
\&     password => "infoblox"
\&    );
\& die(Infoblox::status_code().":".Infoblox::status_detail()) unless $session;
\& my $grid_member=$session\->get(
\&                               object => "Infoblox::Grid::Member",
\&                               name   => "infoblox.localdomain"
\&                              );
\& die($session\->status_code()." : ".$session\->status_detail()) unless (ref($grid_member) eq "Infoblox::Grid::Member");
\&
\& my $grid=$session\->get(
\&                          object => "Infoblox::Grid",
\&                          name   => "Infoblox"
\&                        );
\& die($session\->status_code()." : ".$session\->status_detail()) unless (ref($grid) eq "Infoblox::Grid");
\&
\& #It is assumed in the following that the grid has NTP enabled
\& die("Grid must have ntp enabled) unless ($grid\->enable_ntp() eq "true");
\&
\& my $ntp_key_1= Infoblox::Grid::NTPKey\->new(
\&            key_number => "101",
\&            key_type   => "n",
\&            key_string => "d3e54352e5548080"
\&        );
\& $grid\->ntp_authentication_key([$ntp_key_1]);
\& $session\->modify($grid) or die(($session\->status_code()." : ".$session\->status_detail());
\&
\& my $ntp_server=Infoblox::Grid::NTPServer\->new(
\&                                                address => "1.1.1.1"
\&                                                authentication => "true"
\&                                                ntp_key=>$ntp_key_1
\&                                               );
\&
\& $grid_member\->ntp_server([$ntp_server]);
\& $session\->modify($grid_member) or die(($session\->status_code()." : ".$session\->status_detail());
.Ve
.RE
.RS 4
.RE
.SS "ospf_list( )"
.IX Subsection "ospf_list( )"
.RS 4
Use this method to set or retrieve the \s-1OSPF\s0 area configuration (for anycast) list of a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains  Infoblox::Grid::Member::OSPF object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get OSPF list
\& my $ospf_list = $grid_member\->ospf_list();
\& #Modify OSPF list
\& my $ospf1 = Infoblox::Grid::Member::OSPF\->new(
\&         area_id             => "1",
\&         interface           => "LAN_HA",
\&         authentication_type => "none",
\& );
\&
\& $grid_member\->ospf_list([$ospf1]);
.Ve
.RE
.RS 4
.RE
.SS "override_enable_lom( )"
.IX Subsection "override_enable_lom( )"
.RS 4
The override_enable_lom attribute controls whether the enable_lom value in the member is used, instead of the grid default.
.Sp
The override_enable_lom attribute can be specified explicitly. It is also set implicitly when enable_lom is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_enable_lom flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_enable_lom from the member
\& my $override = $grid_member\->override_enable_lom();
\& #Modify override_enable_lom
\& $grid_member\->override_enable_lom("true");
.Ve
.RE
.RS 4
.RE
.SS "override_lom_users( )"
.IX Subsection "override_lom_users( )"
.RS 4
The override_lom_users attribute controls whether the lom_users value in the member is used, instead of the grid default.
.Sp
The override_lom_users attribute can be specified explicitly. It is also set implicitly when lom_users is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_lom_users flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_lom_users from the member
\& my $override = $grid_member\->override_lom_users();
\& #Modify lom_users
\& $grid_member\->override_lom_users("true");
.Ve
.RE
.RS 4
.RE
.SS "override_dscp( )"
.IX Subsection "override_dscp( )"
.RS 4
The override_dscp attribute contols whether the member \s-1DSCP\s0 value is used, instead of the Grid default.
.Sp
The override_dscp attribute can be specified explicitly. It is also set implicitly when \s-1DSCP\s0 is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_dscp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_dscp from the member
\& my $override = $grid_member\->override_dscp();
\& #Modify override_dscp
\& $grid_member\->override_dscp("true");
.Ve
.RE
.RS 4
.RE
.SS "override_enable_member_redirect( )"
.IX Subsection "override_enable_member_redirect( )"
.RS 4
The override_enable_member_redirect attribute controls whether the enable_member_redirect value in the member is used, instead of the grid default.
.Sp
The override_enable_member_redirect attribute can be specified explicitly. It is also set implicitly when enable_member_redirect is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_enable_member_redirect flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_enable_member_redirect from the member
\& my $override = $grid_member\->override_enable_member_redirect();
\& #Modify enable_member_redirect
\& $grid_member\->override_enable_member_redirect("true");
.Ve
.RE
.RS 4
.RE
.SS "override_lan1_dscp( )"
.IX Subsection "override_lan1_dscp( )"
.RS 4
The override_lan1_dscp attribute contols whether the \s-1DSCP\s0 value of the IPv4 \s-1LAN1\s0 port is used, instead of the Grid default.
.Sp
The override_lan1_dscp attribute can be specified explicitly. It is also set implicitly when \s-1DSCP\s0 is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_lan1_dscp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_lan1_dscp from the member
\& my $override = $grid_member\->override_lan1_dscp();
\& #Modify override_lan1_dscp
\& $grid_member\->override_lan1_dscp("true");
.Ve
.RE
.RS 4
.RE
.SS "override_lan1_ipv6_dscp( )"
.IX Subsection "override_lan1_ipv6_dscp( )"
.RS 4
The override_lan1_ipv6_dscp attribute contols whether the \s-1DSCP\s0 value of the IPv6 \s-1LAN1\s0 port is used, instead of the Grid default.
.Sp
The override_lan1_ipv6_dscp attribute can be specified explicitly. It is also set implicitly when \s-1DSCP\s0 is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_lan1_ipv6_dscp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_lan1_ipv6_dscp from the member
\& my $override = $grid_member\->override_lan1_ipv6_dscp();
\& #Modify override_lan1_ipv6_dscp
\& $grid_member\->override_lan1_ipv6_dscp("true");
.Ve
.RE
.RS 4
.RE
.SS "override_lan2_dscp( )"
.IX Subsection "override_lan2_dscp( )"
.RS 4
The override_lan2_dscp attribute contols whether the \s-1DSCP\s0 value of the IPv4 \s-1LAN2\s0 port is used, instead of the Grid default.
.Sp
The override_lan2_dscp attribute can be specified explicitly. It is also set implicitly when \s-1DSCP\s0 is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_lan2_dscp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_lan2_dscp from the member
\& my $override = $grid_member\->override_lan2_dscp();
\& #Modify override_lan2_dscp
\& $grid_member\->override_lan2_dscp("true");
.Ve
.RE
.RS 4
.RE
.SS "override_lan2_ipv6_dscp( )"
.IX Subsection "override_lan2_ipv6_dscp( )"
.RS 4
The override_lan2_ipv6_dscp attribute contols whether the \s-1DSCP\s0 value of the IPv6 \s-1LAN2\s0 port is used, instead of the Grid default.
.Sp
The override_lan2_ipv6_dscp attribute can be specified explicitly. It is also set implicitly when \s-1DSCP\s0 is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_lan2_ipv6_dscp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_lan2_ipv6_dscp from the member
\& my $override = $grid_member\->override_lan2_ipv6_dscp();
\& #Modify override_lan2_ipv6_dscp
\& $grid_member\->override_lan2_ipv6_dscp("true");
.Ve
.RE
.RS 4
.RE
.SS "override_mgmt_dscp( )"
.IX Subsection "override_mgmt_dscp( )"
.RS 4
The override_mgmt_dscp attribute contols whether the \s-1DSCP\s0 value of the IPv4 \s-1MGMT\s0 port is used, instead of the Grid default.
.Sp
The override_mgmt_dscp attribute can be specified explicitly. It is also set implicitly when \s-1DSCP\s0 is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_mgmt_dscp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_mgmt_dscp from the member
\& my $override = $grid_member\->override_mgmt_dscp();
\& #Modify override_mgmt_dscp
\& $grid_member\->override_mgmt_dscp("true");
.Ve
.RE
.RS 4
.RE
.SS "override_mgmt_ipv6_dscp( )"
.IX Subsection "override_mgmt_ipv6_dscp( )"
.RS 4
The override_mgmt_ipv6_dscp attribute contols whether the \s-1DSCP\s0 value of the IPv6 \s-1MGMT\s0 port is used, instead of the Grid default.
.Sp
The override_mgmt_ipv6_dscp attribute can be specified explicitly. It is also set implicitly when \s-1DSCP\s0 is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_mgmt_ipv6_dscp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_mgmt_ipv6_dscp from the member
\& my $override = $grid_member\->override_mgmt_ipv6_dscp();
\& #Modify override_mgmt_ipv6_dscp
\& $grid_member\->override_mgmt_ipv6_dscp("true");
.Ve
.RE
.RS 4
.RE
.SS "override_node1_mgmt_dscp( )"
.IX Subsection "override_node1_mgmt_dscp( )"
.RS 4
The override_node1_mgmt_dscp attribute contols whether the \s-1DSCP\s0 value of the IPv4 \s-1MGMT\s0 port on node 1 of an \s-1HA\s0 grid member is used, instead of the Grid default.
.Sp
The override_node1_mgmt_dscp attribute can be specified explicitly. It is also set implicitly when \s-1DSCP\s0 is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_node1_mgmt_dscp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_node1_mgmt_dscp from the member
\& my $override = $grid_member\->override_node1_mgmt_dscp();
\& #Modify override_node1_mgmt_dscp
\& $grid_member\->override_node1_mgmt_dscp("true");
.Ve
.RE
.RS 4
.RE
.SS "override_node1_mgmt_ipv6_dscp( )"
.IX Subsection "override_node1_mgmt_ipv6_dscp( )"
.RS 4
The override_node1_mgmt_ipv6_dscp attribute contols whether the \s-1DSCP\s0 value of the IPv6 \s-1MGMT\s0 port on node 1 of an \s-1HA\s0 grid member is used, instead of the Grid default.
.Sp
The override_node1_mgmt_ipv6_dscp attribute can be specified explicitly. It is also set implicitly when \s-1DSCP\s0 is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_node1_mgmt_ipv6_dscp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_node1_mgmt_ipv6_dscp from the member
\& my $override = $grid_member\->override_node1_mgmt_ipv6_dscp();
\& #Modify override_node1_mgmt_ipv6_dscp
\& $grid_member\->override_node1_mgmt_ipv6_dscp("true");
.Ve
.RE
.RS 4
.RE
.SS "override_node2_mgmt_dscp( )"
.IX Subsection "override_node2_mgmt_dscp( )"
.RS 4
The override_node2_mgmt_dscp attribute contols whether the \s-1DSCP\s0 value of the IPv4 \s-1MGMT\s0 port on node 2 of an \s-1HA\s0 grid member is used, instead of the Grid default.
.Sp
The override_node2_mgmt_dscp attribute can be specified explicitly. It is also set implicitly when \s-1DSCP\s0 is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_node2_mgmt_dscp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_node2_mgmt_dscp from the member
\& my $override = $grid_member\->override_node2_mgmt_dscp();
\& #Modify override_node2_mgmt_dscp
\& $grid_member\->override_node2_mgmt_dscp("true");
.Ve
.RE
.RS 4
.RE
.SS "override_node2_mgmt_ipv6_dscp( )"
.IX Subsection "override_node2_mgmt_ipv6_dscp( )"
.RS 4
The override_node2_mgmt_ipv6_dscp attribute contols whether the \s-1DSCP\s0 value of the IPv6 \s-1MGMT\s0 port on node 2 of an \s-1HA\s0 grid member is used, instead of the Grid default.
.Sp
The override_node2_mgmt_ipv6_dscp attribute can be specified explicitly. It is also set implicitly when \s-1DSCP\s0 is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_node2_mgmt_ipv6_dscp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_node2_mgmt_ipv6_dscp from the member
\& my $override = $grid_member\->override_node2_mgmt_ipv6_dscp();
\& #Modify override_node2_mgmt_ipv6_dscp
\& $grid_member\->override_node2_mgmt_ipv6_dscp("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ntp_kod( )"
.IX Subsection "override_ntp_kod( )"
.RS 4
The override_ntp_kod attribute controls whether the ntp_kod value in the member is used, instead of the Grid default.
.Sp
The override_ntp_kod attribute can be specified explicitly. It is also set implicitly when ntp_kod is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_ntp_kod flag or \*(L"false\*(R" to deactivate it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_ntp_kod from the member
\& my $override = $grid_member\->override_ntp_kod();
\& #Modify override_ntp_kod
\& $grid_member\->override_ntp_kod("true");
.Ve
.RE
.RS 4
.RE
.SS "override_syslog_backup_servers( )"
.IX Subsection "override_syslog_backup_servers( )"
.RS 4
The override_syslog_backup_servers attribute controls whether the syslog_backup_servers value for the Member is used, instead of the Grid default.
.Sp
The override_syslog_backup_servers attribute can be specified explicitly. It is also set implicitly when syslog_backup_servers is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to set the override_syslog_backup_servers flag or 'false' to deactivate/unset it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get override_syslog_backup_servers of member
\& my $override_syslog_backup_servers = $grid_member\->override_syslog_backup_servers();
\&
\& #modify override_syslog_backup_servers
\& $grid_member\->override_syslog_backup_servers(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_threshold_traps( )"
.IX Subsection "override_threshold_traps( )"
.RS 4
The override_threshold_traps attribute controls whether the threshold_traps value in the member is used, instead of the grid default.
.Sp
The override_threshold_traps attribute can be specified explicitly. It is also set implicitly when threshold_traps is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_threshold_traps flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_threshold_traps of member
\& my $override_threshold_traps = $grid_member\->override_threshold_traps();
\& #Set override_threshold_traps
\& $grid_member\->override_threshold_traps("true");
.Ve
.RE
.RS 4
.RE
.SS "override_trap_notifications( )"
.IX Subsection "override_trap_notifications( )"
.RS 4
The override_trap_notifications attribute controls whether the trap_notifications value in the member is used, instead of the grid default.
.Sp
The override_trap_notifications attribute can be specified explicitly. It is also set implicitly when trap_notifications is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_trap_notifications flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_trap_notifications of member
\& my $override_trap_notifications = $grid_member\->override_trap_notifications();
\& #Set override_trap_notifications
\& $grid_member\->override_trap_notifications("true");
.Ve
.RE
.RS 4
.RE
.SS "passive_ha_arp_enabled( )"
.IX Subsection "passive_ha_arp_enabled( )"
.RS 4
Use this method to set or retrieve the \s-1ARP\s0 protocol setting on the passive node of an \s-1HA\s0 pair. If you do not specify a value, the default value is \*(L"false\*(R". You can only set this value to \*(L"true\*(R" if the member is an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the passive_ha_arp_enabled flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get member passive_ha_arp_enabled
\& my $passive_ha_arp_enabled = $grid_member\->passive_ha_arp_enabled();
\& #Modify member passive_ha_arp_enabled
\& $grid_member\->passive_ha_arp_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "platform( )"
.IX Subsection "platform( )"
.RS 4
Use this method to set or retrieve the platform type of a grid member. If you do not specify a value, the default value is \*(L"Infoblox\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is one of either \*(L"Infoblox\*(R", \*(L"Cisco\*(R", \*(L"Riverbed\*(R", or \*(L"\s-1VNIOS\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get member platform
\& my $platform = $grid_member\->platform();
\& #Modify node 2 hardware type
\& $grid_member\->platform("Cisco");
.Ve
.RE
.RS 4
.RE
.SS "prefer_resolver( )"
.IX Subsection "prefer_resolver( )"
.RS 4
Use this method to set or retrieve the preferred name server of the grid member. The grid member sends queries to this name server first.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are Infoblox::DNS::Nameserver object and Infoblox::DNS::Member object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get preferred resolver
\& my $prefer_resolver = $grid_member\->prefer_resolver();
\& #Modify preferred resolver
\& my $member1 = Infoblox::DNS::Member\->new(
\&     name           => $host_name,
\&     ipv4addr       => $host_ip,
\&     stealth        => "false",
\&     lead           => "false",
\&     grid_replicate => "false"
\& );
\& $grid_member\->prefer_resolver($member1);
\& #Undef prefer resolver
\& $grid_member\->prefer_resolver(undef);
.Ve
.RE
.RS 4
.RE
.SS "pre_provisioning( )"
.IX Subsection "pre_provisioning( )"
.RS 4
Use this method to set or retrieve the pre-provisioned Grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Member::PreProvisioning object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Get PreProvisioning grid Member
\& my $pp = $grid_member\->pre_provisioning();
\& #Modify PreProvisioning grid Member
\& my $hw = Infoblox::Grid::Member::PreProvisioning::Hardware\->new(
\&    hwtype          => \*(AqIB\-4010\*(Aq,
\&    hwmodel         => \*(AqRev1\*(Aq,
\& );
\&
\& my $pp = Infoblox::Grid::Member::PreProvisioning\->new(
\&    hardware_info   => [$hw],
\&    license         => [\*(Aqdns\*(Aq, \*(Aqdhcp\*(Aq],
\& );
\& $grid_member\->pre_provisioning($pp);
.Ve
.RE
.RS 4
.RE
.SS "preserve_if_owns_delegation( )"
.IX Subsection "preserve_if_owns_delegation( )"
.RS 4
Use this method to set or retrieve the preserve_if_owns_delegation attribute. If you do not specify a value, the default value is \*(L"false\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the preserve_if_owns_delegation flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get member preserve_if_owns_delegation
\& my $preserve_if_owns_delegation  = $grid_member\->preserve_if_owns_delegation ();
\& #Modify member preserve_if_owns_delegation
\& $grid_member\->preserve_if_owns_delegation ("true");
.Ve
.RE
.RS 4
.RE
.SS "query_comm_string( )"
.IX Subsection "query_comm_string( )"
.RS 4
Use this method to set or retrieve the Simple Network Management Protocol (\s-1SNMP\s0) query community string that the \s-1SNMP\s0 management system must send together with its queries to the grid member. An \s-1SNMP\s0 community string is a text string that acts as a password. It is used to authenticate messages that are sent between the management station (the \s-1SNMP\s0 manager) and the grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the Simple Network Management Protocol (\s-1SNMP\s0) query community string with a maximum of 50 bytes. Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get query community string
\& my $query_comm_string = $grid_member\->query_comm_string();
\& #Modify query community string
\& $grid_member\->query_comm_string("test");
\& #Undef query communication string
\& $grid_member\->query_comm_string(undef);
.Ve
.RE
.RS 4
.RE
.SS "remote_console_access( )"
.IX Subsection "remote_console_access( )"
.RS 4
Use this method to set or retrieve the remote_console support access flag of a grid member. When you enable remote console access, a client can access the device using a Secure Shell (\s-1SSH\s0) connection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the remote_console_access flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get remote console access flag
\& my $remote_console_access = $grid_member\->remote_console_access();
\& #Modify remote console access flag
\& $grid_member\->remote_console_access("true");
\& #Undef remote console access flag
\& $grid_member\->remote_console_access(undef);
.Ve
.RE
.RS 4
.RE
.SS "router_ID( )"
.IX Subsection "router_ID( )"
.RS 4
Use this method to set or retrieve the virtual router \s-1ID\s0 of an \s-1HA\s0 grid member. Required only when the member is an \s-1HA\s0 pair.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Number with the router identification. Default value is undefined. Valid values should be between 1 and 255
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get router ID
\& my $router_ID = $grid_member\->router_ID();
\& #Modify router ID
\& $grid_member\->router_ID("34");
.Ve
.RE
.RS 4
.RE
.SS "search_domains( )"
.IX Subsection "search_domains( )"
.RS 4
Use this method to set or retrieve the Search Domain Group, which is a group of domain names that the Infoblox device can add to partial queries that do not specify a domain name. Note that you can set this parameter only when prefer_resolver or alternate_resolver is set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a reference to an array of strings.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get search_domains
\& my $search_domains = $grid_member\->search_domains();
\& #Modify search_domains
\& $grid_member\->search_domains(["domain1.com", "domain2.com"]);
.Ve
.RE
.RS 4
.RE
.SS "service_status( )"
.IX Subsection "service_status( )"
.RS 4
Use this method to retrieve the service status list of a grid member.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
On retrieval, the member returns an array reference that contains  Infoblox::Grid::Member::ServiceStatus objects.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the service status list
\& my $services_list = $grid_member\->service_status();
.Ve
.RE
.RS 4
.RE
.SS "service_type_configuration( )"
.IX Subsection "service_type_configuration( )"
.RS 4
Use this method to set or retrieve the configuration option for the member service type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is one of the following: \*(L"\s-1ALL_V4\*(R", \*(L"ALL_V6\*(R"\s0 or \*(L"\s-1CUSTOM\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get the value of service_type_configuration
\& my $service_type_configuration = $grid_member\->service_type_configuration();
\& # Modify service_type_configuration
\& $grid_member\->service_type_configuration("ALL_V6");
.Ve
.RE
.RS 4
.RE
.SS "snmp_admin( )"
.IX Subsection "snmp_admin( )"
.RS 4
Use this method to set or retrieve the Simple Network Management Protocol (\s-1SNMP\s0) admin object of a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::SNMP::Admin object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 12
\& #Get SNMP admin
\& my $snmp_admin = $grid_member\->snmp_admin();
\& #Modify SNMP admin
\& my $snmp_admin_obj = Infoblox::Grid::SNMP::Admin\->new(
\&     sysContact_node1  => "Somebody",
\&     sysDescr_node1    => "SunOS noc1 5.6 Generic_105181\-03 sun4u",
\&     sysLocation_node1 => "Infoblox Headquarter",
\&     sysName_node1     => "noc1"
\& );
\& $grid_member\->snmp_admin($snmp_admin_obj);
\& #Undef snmp admin
\& $grid_member\->snmp_admin(undef);
.Ve
.RE
.RS 4
.RE
.SS "snmpv3_query_users( )"
.IX Subsection "snmpv3_query_users( )"
.RS 4
Use this method to set or retrieve the SNMPv3 user setting at the grid level.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a reference to the list of Infoblox::Grid::SNMP::User objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Get snmpv3_query_users field
\& my $snmpv3_users = $gridmember\->snmpv3_query_users();
\& my $user = $$snmpv3_users[0];
\& #Set snmpv3_query_users field
\& $gridmember\->snmpv3_query_users([$user1, $user2]);
.Ve
.RE
.RS 4
.RE
.SS "static_routes( )"
.IX Subsection "static_routes( )"
.RS 4
Use this method to set or retrieve the static routes list of a grid member. This list contains the static routes of a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains  Infoblox::Grid::Member::StaticRoute object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get static routes list
\& my $static_routes = $grid_member\->static_routes();
\& #Modify static routes list
\& my $route = Infoblox::Grid::Member::StaticRoute\->new(
\&    "network" => "192.168.2.0/24",
\&    "gateway" => "192.168.1.1",
\& );
\& $grid_member\->static_routes([$route]);
.Ve
.RE
.RS 4
.RE
.SS "support_access( )"
.IX Subsection "support_access( )"
.RS 4
Use this method to set or retrieve the support access flag of a grid member. This flag enables a Secure Shell (\s-1SSH\s0) daemon that only Infoblox Technical Support can access to perform troubleshooting at the grid member level.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the remote_console_access flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get support access flag
\& my $support_access = $grid_member\->support_access();
\& #Modify support access flag
\& $grid_member\->support_access("true");
\& #Undef support access
\& $grid_member\->support_access(undef);
.Ve
.RE
.RS 4
.RE
.SS "support_access_info( )"
.IX Subsection "support_access_info( )"
.RS 4
Use this method to retrieve the information string for support access.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get support_access_info
\& my $support_access_info = $grid_member\->support_access_info();
.Ve
.RE
.RS 4
.RE
.SS "syslog_proxy_tcp_port( )"
.IX Subsection "syslog_proxy_tcp_port( )"
.RS 4
Use this method to set or retrieve the Transmission Control Protocol (\s-1TCP\s0) listening port for syslog proxy.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
\&\s-1TCP\s0 port number. Default value is 514. Valid values should be between 1 and 65535.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get syslog proxy tcp port
\& my $syslog_proxy_tcp_port = $grid_member\->syslog_proxy_tcp_port();
\& #Modify syslog proxy tcp port
\& $grid_member\->syslog_proxy_tcp_port(514);
.Ve
.RE
.RS 4
.RE
.SS "syslog_proxy_udp_port( )"
.IX Subsection "syslog_proxy_udp_port( )"
.RS 4
Use this method to set or retrieve the User Datagram Protocol (\s-1UDP\s0) listening port for syslog proxy.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
\&\s-1UDP\s0 port number. Default value is 514. Valid values should be between 1 and 65535.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get syslog proxy udp port
\& my $syslog_proxy_udp_port = $grid_member\->syslog_proxy_udp_port();
\& #Modify syslog proxy udp port
\& $grid_member\->syslog_proxy_udp_port(514);
.Ve
.RE
.RS 4
.RE
.SS "syslog_size( )"
.IX Subsection "syslog_size( )"
.RS 4
Use this method to set or retrieve the grid member syslog rotation size in megabytes.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is between 10 and 300.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get syslog_size
\& my $syslog_size = $obj\->syslog_size();
\& #Modify syslog_size
\& $obj\->syslog_size(100);
.Ve
.RE
.RS 4
.RE
.SS "syslog_backup_servers( )"
.IX Subsection "syslog_backup_servers( )"
.RS 4
Use this method to set or retrieve an array that contains syslog backup server settings for a Grid member.
.Sp
Setting this method to a defined value implicitly sets the override_syslog_backup_servers method to 'true'. Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_syslog_backup_servers attribute to 'false'.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::Grid::SyslogBackupServer objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get syslog_backup_servers value
\& my $servers = $grid_member\->syslog_backup_servers();
\&
\& #modify syslog_backup_servers value
\& $grid_member\->syslog_backup_servers([$server1, $server2]);
.Ve
.RE
.RS 4
.RE
.SS "syslog_server( )"
.IX Subsection "syslog_server( )"
.RS 4
Use this method to set or retrieve the syslog server of a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::Grid::SyslogServer object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& #Get syslog server
\& my $syslog_server = $grid_member\->syslog_server();
\& #Modify syslog server
\& my $syslog1 = Infoblox::Grid::SyslogServer\->new(
\&     ipv4addr => "44.44.44.44",
\&     severity => "debug",
\& );
\& my $syslog2 = Infoblox::Grid::SyslogServer\->new(
\&     ipv4addr => "55.55.55.55",
\&     severity => "debug",
\& );
\&
\& $grid_member\->syslog_server([$syslog1, $syslog2]);
\& #Undef syslog server
\& $grid_member\->syslog_server(undef);
.Ve
.RE
.RS 4
.RE
.SS "time_zone( )"
.IX Subsection "time_zone( )"
.RS 4
Use this method to set or retrieve the time zone of the grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The \s-1UTC\s0 string that represents the time zone. For example \*(L"(\s-1UTC\s0 \- 5:00) Eastern Time (\s-1US\s0 and Canada)\*(R". Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get time zone
\& my $time_zone = $grid_member\->time_zone();
\& #Modify time zone
\& $grid_member\->time_zone("(UTC \- 5:00) Eastern Time (US and Canada)");
\& #Undef time zone
\& $grid_member\->time_zone(undef);
.Ve
.RE
.RS 4
.RE
.SS "threshold_traps( )"
.IX Subsection "threshold_traps( )"
.RS 4
Use this method to retrieve the reference to the list of threshold traps. Each element in the list is a reference to the Infoblox::Grid::SNMP::ThresholdTrap object. If the member inherits traps from the grid, the threshold_traps value is undefined.
.Sp
Setting this method to a defined value implicitly sets the override_threshold_traps method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_threshold_traps attribute to \*(L"false\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
List of Infoblox::Grid::SNMP::ThresholdTrap objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Get threshold traps
\& my $threshold_traps = $member\->threshold_traps();
\& #Modify threshold traps
\& my $threshold_traps = $member\->threshold_traps();
\& foreach(@$threshold_traps){if $_\->trap_name() eq \*(AqRootfs\*(Aq; $_\->trap_reset=60;} #Change value for \*(AqRootfs\*(Aq trap
\& $grid\->threshold_traps($threshold_traps);
\& $session\->modify($member);
.Ve
.RE
.RS 4
.RE
.SS "traffic_capture( )"
.IX Subsection "traffic_capture( )"
.RS 4
Use this method to control traffic capture for the specified member. Note that when you use this method, the object \s-1MUST\s0 be retrieved through a get or search call, or created with an add call.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The method accepts an Infoblox::Grid::Member::Capture::Control object as a parameter.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When passing a capture control object as a parameter, the method returns true if the specified traffic control operation succeeds. It returns false when the operation fails.
.Sp
If invoked without a parameter, the method returns a Infoblox::Grid::Member::Capture::Status object that describes the current traffic capture status.
.Sp
Please see the status and control objects for usage examples.
.RE
.RS 4
.RE
.SS "trap_comm_string( )"
.IX Subsection "trap_comm_string( )"
.RS 4
Use this method to set or retrieve the Simple Network Management Protocol (\s-1SNMP\s0) trap community string of the grid member. An \s-1SNMP\s0 trap community string is a text string that acts as a password. It is used to authenticate messages that are sent between the grid member and the \s-1SNMP\s0 management systems.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the Simple Network Management Protocol (\s-1SNMP\s0) trap community, with a maximum of 50 bytes. Default value is undefined. To undefine trap_comm_string we also need to undefine \*(L"trap_receiver\*(R" attribute.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get trap community string
\& my $trap_comm_string = $grid_member\->trap_comm_string();
\& #Modify trap community string
\& $grid_member\->trap_comm_string("trap_string");
.Ve
.RE
.RS 4
.RE
.SS "trap_notifications( )"
.IX Subsection "trap_notifications( )"
.RS 4
Use this method to configure trap notifications. Each element in the list is a reference to the Infoblox::Grid::SNMP::TrapNotification object. If the trap_notifications value is undefined the member inherits trap notifications from the grid.
.Sp
Explicitly setting this method to a defined value implicitly sets the override_trap_notifications method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_trap_notifications attribute to \*(L"false\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Reference to a list of Infoblox::Grid::SNMP::TrapNotification objects. The default value is a reference to a list of all trap notifications.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Get a reference to a trap notifications array
\& my $trap_notifications = $member\->trap_notifications();
\& #Modify trap notifications
\& my $notifications = $member\->trap_notifications();
\& foreach(@$notifications){if $_\->trap_type() eq \*(AqCPU\*(Aq; $_\->enable_email="true";} #Change value for \*(AqCPU\*(Aq trap
\& $member\->trap_notifications($notifications);
\& $session\->modify($member);
.Ve
.RE
.RS 4
.RE
.SS "trap_receiver( )"
.IX Subsection "trap_receiver( )"
.RS 4
Use this method to set or retrieve the Simple Network Management Protocol (\s-1SNMP\s0) trap receivers of a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains IPv4 addresses and Infoblox::Grid::SNMP::TrapReceiver objects. Default value is undefined. To undefine trap_receiver, you must also undefine the \*(L"trap_comm_string\*(R" attribute.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Get trap receiver
\& my $trap_receiver = $grid_member\->trap_receiver();
\& #Modify trap receiver (SNMPv2)
\& $grid_member\->trap_receiver(["10.0.0.10"]);
\& #SNMPv3 trap receivers
\& my $receiver1 = Infoblox::Grid::SNMP::TrapReceiver\->new( ip_addr => "19.20.21.22", user => $user);
\& $gridmember\->trap_receiver([$receiver1]);
.Ve
.RE
.RS 4
.RE
.SS "upgrade_group( )"
.IX Subsection "upgrade_group( )"
.RS 4
Use this method to set or retrieve the name of the upgrade group to which this Grid member belongs.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a string representing the upgrade group name.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get upgrade_group
\& my $upgrade_group = $obj\->upgrade_group();
\& #Modify upgrade_group
\& $obj\->upgrade_group("group2");
.Ve
.RE
.RS 4
.RE
.SS "use_v4_vrrp( )"
.IX Subsection "use_v4_vrrp( )"
.RS 4
Use this method to switch between VRRPv4 and VRRPv6.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to use VRRPv4 or \*(L"false\*(R" to use VRRPv6.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get use_v4_vrrp
\& my $use_v4_vrrp = $obj\->use_v4_vrrp();
\& #Modify use_v4_vrrp
\& $obj\->use_v4_vrrp("false");
.Ve
.RE
.RS 4
.RE
.SS "vpn_on_mgmt( )"
.IX Subsection "vpn_on_mgmt( )"
.RS 4
Use this method to set or retrieve the \s-1VPN\s0 services on the \s-1MGMT\s0 port of a grid member that is a single appliance.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note that node1_vpn_on_mgmt, node2_vpn_on_mgmt and vpn_on_mgmt share the value; setting any of them will have the same effect.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the vpn_on_mgmt flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get VPN on MGMT port flag
\& my $vpn_on_mgmt = $grid_member\->vpn_on_mgmt();
\& #Modify VPN on MGMT port flag
\& $grid_member\->vpn_on_mgmt("false");
.Ve
.RE
.RS 4
.RE
.SS "vlan_id( )"
.IX Subsection "vlan_id( )"
.RS 4
Use this method to set or retrieve the \s-1VLAN ID\s0 of a grid member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an unsigned integer between 1 and 4095 inclusive. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $attr = $grid_member\->vlan_id();
\& #Modify attribute value
\& $grid_member\->vlan_id(10);
.Ve
.RE
.RS 4
.RE
.SS "create_token( )"
.IX Subsection "create_token( )"
.RS 4
Use this function to create the authorization token string for each physical node of the pre-provisioned member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a reference to an array of Infoblox::Grid::Member::PNodeToken objects.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $tokens = $grid_member\->create_token();
.Ve
.RE
.RS 4
.RE
.SS "read_token( )"
.IX Subsection "read_token( )"
.RS 4
Use this function to read the authorization token string for each physical node of the pre-provisioned member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a reference to an array of Infoblox::Grid::Member::PNodeToken objects.
If tokens were not created previously, or have already expired, an empty array will be returned.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $tokens = $grid_member\->read_token();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, get, modify, search and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to getting and modifying a grid member object\fR
.PP
.Vb 2
\& use strict;
\& use Infoblox;
\&
\& #refers to Infoblox Appliance IP address
\& my $host_ip = "192.168.1.2";
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&     master   => $host_ip,
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& my $sysserv1 = Infoblox::Grid::SyslogServer\->new(
\&     ipv4addr => "7.7.7.7"
\& );
\& unless ($sysserv1) {
\&        die("Construct sysserv1 failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Sysserv1 created successfully\en";
.Ve
.PP
\&\fB#Create a grid member object\fR
.PP
.Vb 10
\& my $grid_member = Infoblox::Grid::Member\->new(
\&     name          => "hostname.com",
\&     ipv4addr      => "3.0.0.2",
\&     mask          => "255.0.0.0",
\&     gateway       => "3.0.0.1",
\&     syslog_server => [$sysserv1],
\&     comment       => "Script Generated"
\&     );
\& unless ($grid_member) {
\&        die("Construct grid member object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Grid member object created successfully\en";
\&
\& #Adding the member object to appliance through session
\& my $response = $session\->add( $grid_member );
\&
\& unless ($response) {
\&     die("Add grid member failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Grid member added successfully \en";
.Ve
.PP
\&\fB#Search for a grid member object\fR
.PP
.Vb 4
\&  my @retrieved_objs = $session\->search(
\&      object => "Infoblox::Grid::Member",
\&      name   => ".*\e\e.com");
\&  my $object = $retrieved_objs[0];
\&
\&  unless ($object) {
\&         die("Search grid member object failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Search grid member object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify the member object\fR
.PP
.Vb 6
\& #Get grid member through session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Member",
\&     name   => "hostname.com"
\&     );
\& my $grid_member = $retrieved_objs[0];
\&
\& unless ($grid_member) {
\&     die("Get grid member object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Get grid member successful \en";
\&
\& # Modify one of the attributes of selected grid member.
\&
\& $grid_member\->comment("Modified member object");
\&
\& #Applying the changes
\& $session\->modify($grid_member)
\&    or die("Modify grid member failed",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print"Grid member modified successfully \en";
.Ve
.PP
\&\fB#Remove the grid member object\fR
.PP
.Vb 6
\& #Get grid member through session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Member",
\&     name   => "hostname.com"
\&     );
\& my $desired_grid_member = $retrieved_objs[0];
\&
\& unless ($desired_grid_member) {
\&     die("Get grid member object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Get grid member successful \en";
\&
\& #Submit the object for removal
\& $session\->remove( $desired_grid_member )
\&     or die("Remove grid member failed",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print"Grid member removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid, Infoblox::Grid::NTPKey, Infoblox::Grid::SNMP::Admin, Infoblox::Grid::SyslogServer, Infoblox::Session, Infoblox::Grid::NamedACL, Infoblox::Grid::SyslogBackupServer
Infoblox::Grid::Member::OSPF,Infoblox::Grid::LOM::User, Infoblox::DNS::Member, Infoblox::DNS::Nameserver,
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
