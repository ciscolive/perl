.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::UpgradeStatus 3"
.TH Infoblox::Grid::UpgradeStatus 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::UpgradeStatus \- Information about the Grid's upgrade status.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Upgrade Status object is used to view the upgrade status of an Infoblox Grid.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::Grid::UpgradeStatus object is automatically generated. It does not require manual construction.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session that can be applied to an Upgrade Status object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\&  my @statistics = $session\->get(object => "Infoblox::Grid::UpgradeStatus");
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to retrieve the attribute values of an Upgrade Status object.
.SS "allow_distribution( )"
.IX Subsection "allow_distribution( )"
.RS 4
Use this method to determine if distribution is allowed for the Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get allow_distribution
\& my $allow_distribution = $upgstatus\->allow_distribution();
.Ve
.RE
.RS 4
.RE
.SS "allow_upgrade( )"
.IX Subsection "allow_upgrade( )"
.RS 4
Use this method to determine if upgrade is allowed for the Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get allow_upgrade
\& my $allow_upgrade = $upgstatus\->allow_upgrade();
.Ve
.RE
.RS 4
.RE
.SS "allow_upgrade_cancel( )"
.IX Subsection "allow_upgrade_cancel( )"
.RS 4
Use this method to determine if the Grid is allowed to cancel an upgrade.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get allow_upgrade_cancel
\& my $allow_upgrade_cancel = $upgstatus\->allow_upgrade_cancel();
.Ve
.RE
.RS 4
.RE
.SS "allow_upgrade_pause( )"
.IX Subsection "allow_upgrade_pause( )"
.RS 4
Use this method to determine if the Grid is allowed to pause an upgrade.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get allow_upgrade_pause
\& my $allow_upgrade_pause = $upgstatus\->allow_upgrade_pause();
.Ve
.RE
.RS 4
.RE
.SS "allow_upgrade_resume( )"
.IX Subsection "allow_upgrade_resume( )"
.RS 4
Use this method to determine if the Grid is allowed to resume an upgrade.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get allow_upgrade_resume
\& my $allow_upgrade_resume = $upgstatus\->allow_upgrade_resume();
.Ve
.RE
.RS 4
.RE
.SS "allow_upgrade_scheduling( )"
.IX Subsection "allow_upgrade_scheduling( )"
.RS 4
Use this method to determine if the Grid is allowed to schedule an upgrade.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get allow_upgrade_scheduling
\& my $allow_upgrade_scheduling = $upgstatus\->allow_upgrade_scheduling();
.Ve
.RE
.RS 4
.RE
.SS "allow_upgrade_test( )"
.IX Subsection "allow_upgrade_test( )"
.RS 4
Use this method to determine if the Grid is allowed to test an upgrade.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get allow_upgrade_test
\& my $allow_upgrade_test = $upgstatus\->allow_upgrade_test();
.Ve
.RE
.RS 4
.RE
.SS "allow_upload( )"
.IX Subsection "allow_upload( )"
.RS 4
Use this method to determine if the Grid is allowed to upload a build.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get allow_upload
\& my $allow_upload = $upgstatus\->allow_upload();
.Ve
.RE
.RS 4
.RE
.SS "distribution_schedule_active( )"
.IX Subsection "distribution_schedule_active( )"
.RS 4
Use this method to determine if the distribution schedule is active for the Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get distribution_schedule_active
\& my $distribution_schedule_active = $upgstatus\->distribution_schedule_active();
.Ve
.RE
.RS 4
.RE
.SS "grid_state( )"
.IX Subsection "grid_state( )"
.RS 4
Use this method to retrieve the Grid state.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are
.Sp
.Vb 5
\& "NONE", "DISTRIBUTING_COMPLETE", "DISTRIBUTING_ENDED", "DISTRIBUTING_PAUSED",
\& "DISTRIBUTING", "DISTRIBUTING_FAILED", "DEFAULT", "UPGRADING", "REVERT",
\& "TEST_UPGRADING", "UPGRADING_COMPLETE", "UPGRADING_FAILED",
\& "REVERTING_COMPLETE", "DOWNGRADING_COMPLETE", "UPLOADED",
\& "DOWNGRADING_FAILED", "UPGRADING_PAUSED"
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get grid_state
\& my $grid_state = $upgstatus\->grid_state();
.Ve
.RE
.RS 4
.RE
.SS "group_state( )"
.IX Subsection "group_state( )"
.RS 4
Use this method to retrieve the group state.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are
.Sp
.Vb 3
\& "GROUP_NONE", "GROUP_DISTRIBUTING_WAITING", "GROUP_DISTRIBUTING",
\& "GROUP_DISTRIBUTING_COMPLETE", "GROUP_UPGRADING_WAITING", "GROUP_UPGRADING",
\& "GROUP_UPGRADING_COMPLETE", "GROUP_DISTRIBUTING_FAILED"
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get group_state
\& my $group_state = $upgstatus\->group_state();
.Ve
.RE
.RS 4
.RE
.SS "message( )"
.IX Subsection "message( )"
.RS 4
Use this method to retrieve the grid message.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get message
\& my $message = $upgstatus\->message();
.Ve
.RE
.RS 4
.RE
.SS "status_time( )"
.IX Subsection "status_time( )"
.RS 4
Use this method to retrieve the status time.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get status_time
\& my $status_time = $upgstatus\->status_time();
.Ve
.RE
.RS 4
.RE
.SS "upgrade_schedule_active( )"
.IX Subsection "upgrade_schedule_active( )"
.RS 4
Use this method to determine if the upgrade schedule is active.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get upgrade_schedule_active
\& my $upgrade_schedule_active = $upgstatus\->upgrade_schedule_active();
.Ve
.RE
.RS 4
.RE
.SS "upgrade_state( )"
.IX Subsection "upgrade_state( )"
.RS 4
Use this method to retrieve the upgrade state of the Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are \*(L"\s-1NONE\*(R"\s0 or \*(L"\s-1PROGRESSING\*(R".\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get upgrade_state
\& my $upgrade_state = $upgstatus\->upgrade_state();
.Ve
.RE
.RS 4
.RE
.SS "upgrade_test_status( )"
.IX Subsection "upgrade_test_status( )"
.RS 4
Use this method to retrieve the upgrade test status of the Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are \*(L"\s-1NONE\*(R", \*(L"PROGRESSING\*(R", \*(L"COMPLETED\*(R"\s0 or \*(L"\s-1FAILED\*(R".\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get upgrade_test_status
\& my $upgrade_test_status = $upgstatus\->upgrade_test_status();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
