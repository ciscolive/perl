.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "GraphViz2::Parse::RecDescent 3"
.TH GraphViz2::Parse::RecDescent 3 "2020-10-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GraphViz2::Parse::RecDescent \- Visualize a Parse::RecDescent grammar as a graph
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&        #!/usr/bin/env perl
\&
\&        use strict;
\&        use warnings;
\&
\&        use File::Spec;
\&
\&        use GraphViz2;
\&        use GraphViz2::Parse::RecDescent;
\&
\&        use Parse::RecDescent;
\&
\&        use File::Slurp; # For read_file().
\&
\&        my($graph) = GraphViz2 \-> new
\&                (
\&                 edge   => {color => \*(Aqgrey\*(Aq},
\&                 global => {directed => 1},
\&                 graph  => {rankdir => \*(AqTB\*(Aq},
\&                 node   => {color => \*(Aqblue\*(Aq, shape => \*(Aqoval\*(Aq},
\&                );
\&        my($g)      = GraphViz2::Parse::RecDescent \-> new(graph => $graph);
\&        my $grammar = read_file(File::Spec \-> catfile(\*(Aqt\*(Aq, \*(Aqsample.recdescent.1.dat\*(Aq) );
\&        my($parser) = Parse::RecDescent \-> new($grammar);
\&
\&        $g \-> create(name => \*(AqGrammar\*(Aq, grammar => $parser);
\&
\&        my($format)      = shift || \*(Aqsvg\*(Aq;
\&        my($output_file) = shift || File::Spec \-> catfile(\*(Aqhtml\*(Aq, "parse.recdescent.$format");
\&
\&        $graph \-> run(format => $format, output_file => $output_file);
.Ve
.PP
See scripts/parse.recdescent.pl (\*(L"Scripts Shipped with this Module\*(R" in GraphViz2).
.SH "Description"
.IX Header "Description"
Takes a Parse::RecDescent grammar and converts it into a graph.
.PP
You can write the result in any format supported by Graphviz <http://www.graphviz.org/>.
.PP
Here is the list of output formats <http://www.graphviz.org/content/output-formats>.
.SH "Constructor and Initialization"
.IX Header "Constructor and Initialization"
.SS "Calling \fBnew()\fP"
.IX Subsection "Calling new()"
\&\f(CW\*(C`new()\*(C'\fR is called as \f(CW\*(C`my($obj) = GraphViz2::Parse::RecDescent \-> new(k1 => v1, k2 => v2, ...)\*(C'\fR.
.PP
It returns a new object of type \f(CW\*(C`GraphViz2::Parse::RecDescent\*(C'\fR.
.PP
Key-value pairs accepted in the parameter list:
.ie n .IP "o graph => $graphviz_object" 4
.el .IP "o graph => \f(CW$graphviz_object\fR" 4
.IX Item "o graph => $graphviz_object"
This option specifies the GraphViz2 object to use. This allows you to configure it as desired.
.Sp
The default is GraphViz2\->new. The default attributes are the same as in the synopsis, above.
.Sp
This key is optional.
.SH "Methods"
.IX Header "Methods"
.ie n .SS "create(name => $name, grammar => $grammar)"
.el .SS "create(name => \f(CW$name\fP, grammar => \f(CW$grammar\fP)"
.IX Subsection "create(name => $name, grammar => $grammar)"
Creates the graph, which is accessible via the \fBgraph()\fR method, or via the graph object you passed to \fBnew()\fR.
.PP
Returns \f(CW$self\fR for method chaining.
.PP
\&\f(CW$name\fR is the string which will be placed in the root node of the tree.
.PP
\&\f(CW$grammar\fR is either a Parse::RecDescent object or a grammar. If it's a grammar, the code will
fabricate an object of type Parse::RecDescent.
.SS "\fBgraph()\fP"
.IX Subsection "graph()"
Returns the graph object, either the one supplied to \fBnew()\fR or the one created during the call to \fBnew()\fR.
.SH "Scripts Shipped with this Module"
.IX Header "Scripts Shipped with this Module"
.SS "scripts/parse.recdescent.pl"
.IX Subsection "scripts/parse.recdescent.pl"
Demonstrates graphing a Parse::RecDescent\-style grammar.
.PP
Inputs from t/sample.recdescent.1.dat and outputs to ./html/parse.recdescent.svg by default.
.PP
The input grammar was extracted from t/basics.t in Parse::RecDescent V 1.965001.
.PP
You can patch the *.pl to read from t/sample.recdescent.2.dat, which was copied from a V 2 bug report <https://rt.cpan.org/Ticket/Display.html?id=36057>.
.SH "Thanks"
.IX Header "Thanks"
Many thanks are due to the people who chose to make Graphviz <http://www.graphviz.org/> Open Source.
.PP
And thanks to Leon Brocard <http://search.cpan.org/~lbrocard/>, who wrote GraphViz, and kindly gave me co-maint of the module.
.SH "Version Numbers"
.IX Header "Version Numbers"
Version numbers < 1.00 represent development versions. From 1.00 up, they are production versions.
.SH "Machine-Readable Change Log"
.IX Header "Machine-Readable Change Log"
The file Changes was converted into Changelog.ini by Module::Metadata::Changes.
.SH "Support"
.IX Header "Support"
Email the author, or log a bug on \s-1RT:\s0
.PP
<https://rt.cpan.org/Public/Dist/Display.html?Name=GraphViz2>.
.SH "Author"
.IX Header "Author"
GraphViz2 was written by Ron Savage \fI<ron@savage.net.au>\fR in 2011.
.PP
Home page: <http://savage.net.au/index.html>.
.SH "Copyright"
.IX Header "Copyright"
Australian copyright (c) 2011, Ron Savage.
.PP
.Vb 4
\&        All Programs of mine are \*(AqOSI Certified Open Source Software\*(Aq;
\&        you can redistribute them and/or modify them under the terms of
\&        The Perl License, a copy of which is available at:
\&        http://dev.perl.org/licenses/
.Ve
