.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Binary 3"
.TH Data::Binary 3 "2014-03-24" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Binary \- Simple detection of binary versus text in strings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& use Data::Binary qw(is_text is_binary);
\& my $text = File::Slurp::read_file("test1.doc");
\& my $is_text = is_text($text); # equivalent to \-T "test1.doc"
\& my $is_binary = is_binary($text); # equivalent to \-B "test1.doc"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This simple module provides string equivalents to the \-T / \-B operators. Since
these only work on file names and file handles, this module provides the same
functions but on strings.
.PP
Note that the actual implementation is currently different, basically because 
the \-T / \-B functions are in C/XS, and this module is written in pure Perl. 
For now, anyway.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "is_text($string)"
.IX Subsection "is_text($string)"
Uses the same kind of heuristics in \-T, but applies them to a string. Returns true
if the string is basically text.
.SS "is_binary($string)"
.IX Subsection "is_binary($string)"
Uses the same kind of heuristics in \-B, but applies them to a string. Returns true
if the string is basically binary.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stuart Watt, stuart@morungos.com
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2014 Stuart Watt. All rights reserved.
