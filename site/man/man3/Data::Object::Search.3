.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::Search 3"
.TH Data::Object::Search 3 "2020-04-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::Search
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Search Class for Perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package main;
\&
\&  use Data::Object::Search;
\&
\&  my $search = Data::Object::Search\->new([
\&    \*(Aq(?^:(test))\*(Aq,
\&    \*(Aqthis is a test\*(Aq,
\&    1,
\&    [
\&      10,
\&      10
\&    ],
\&    [
\&      14,
\&      14
\&    ],
\&    {},
\&    \*(Aqthis is a test\*(Aq
\&  ]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides methods for manipulating search data.
.SH "INHERITS"
.IX Header "INHERITS"
This package inherits behaviors from:
.PP
Data::Object::Array
.SH "INTEGRATES"
.IX Header "INTEGRATES"
This package integrates behaviors from:
.PP
Data::Object::Role::Dumpable
.PP
Data::Object::Role::Proxyable
.PP
Data::Object::Role::Throwable
.SH "LIBRARIES"
.IX Header "LIBRARIES"
This package uses type constraints from:
.PP
Data::Object::Types
.SH "METHODS"
.IX Header "METHODS"
This package implements the following methods:
.SS "captures"
.IX Subsection "captures"
.Vb 1
\&  captures() : ArrayRef
.Ve
.PP
The captures method returns the capture groups from the result object which
contains information about the results of the regular expression operation..
.IP "captures example #1" 4
.IX Item "captures example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $search\->captures; # [\*(Aqtest\*(Aq]
.Ve
.SS "count"
.IX Subsection "count"
.Vb 1
\&  count() : Num
.Ve
.PP
The count method returns the regular expression used to perform the match from
the result object which contains information about the results of the regular
expression operation..
.IP "count example #1" 4
.IX Item "count example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $search\->count; # 1
.Ve
.SS "initial"
.IX Subsection "initial"
.Vb 1
\&  initial() : Str
.Ve
.PP
The initial method returns the unaltered string from the result object which
contains information about the results of the regular expression operation..
.IP "initial example #1" 4
.IX Item "initial example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $search\->initial; # this is a test
.Ve
.SS "last_match_end"
.IX Subsection "last_match_end"
.Vb 1
\&  last_match_end() : Maybe[ArrayRef[Int]]
.Ve
.PP
The last_match_end method returns an array of offset positions into the string
where the capture(s) stopped matching from the result object which contains
information about the results of the regular expression operation..
.IP "last_match_end example #1" 4
.IX Item "last_match_end example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $search\->last_match_end; # [14, 14]
.Ve
.SS "last_match_start"
.IX Subsection "last_match_start"
.Vb 1
\&  last_match_start() : Maybe[ArrayRef[Int]]
.Ve
.PP
The last_match_start method returns an array of offset positions into the
string where the capture(s) matched from the result object which contains
information about the results of the regular expression operation..
.IP "last_match_start example #1" 4
.IX Item "last_match_start example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $search\->last_match_start; # [10, 10]
.Ve
.SS "matched"
.IX Subsection "matched"
.Vb 1
\&  matched() : Maybe[Str]
.Ve
.PP
The matched method returns the portion of the string that matched from the
result object which contains information about the results of the regular
expression operation..
.IP "matched example #1" 4
.IX Item "matched example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $search\->matched; # test
.Ve
.SS "named_captures"
.IX Subsection "named_captures"
.Vb 1
\&  named_captures() : HashRef
.Ve
.PP
The named_captures method returns a hash containing the requested named regular
expressions and captured string pairs from the result object which contains
information about the results of the regular expression operation..
.IP "named_captures example #1" 4
.IX Item "named_captures example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $search\->named_captures; # {}
.Ve
.SS "postmatched"
.IX Subsection "postmatched"
.Vb 1
\&  postmatched() : Maybe[Str]
.Ve
.PP
The postmatched method returns the portion of the string after the regular
expression matched from the result object which contains information about the
results of the regular expression operation..
.IP "postmatched example #1" 4
.IX Item "postmatched example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $search\->postmatched; # \*(Aq\*(Aq
.Ve
.SS "prematched"
.IX Subsection "prematched"
.Vb 1
\&  prematched() : Maybe[Str]
.Ve
.PP
The prematched method returns the portion of the string before the regular
expression matched from the result object which contains information about the
results of the regular expression operation..
.IP "prematched example #1" 4
.IX Item "prematched example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $search\->prematched; # \*(Aqthis is a \*(Aq
.Ve
.SS "regexp"
.IX Subsection "regexp"
.Vb 1
\&  regexp() : RegexpRef
.Ve
.PP
The regexp method returns the regular expression used to perform the match from
the result object which contains information about the results of the regular
expression operation..
.IP "regexp example #1" 4
.IX Item "regexp example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $search\->regexp; # qr/(test)/
.Ve
.SS "string"
.IX Subsection "string"
.Vb 1
\&  string() : Str
.Ve
.PP
The string method returns the string matched against the regular expression
from the result object which contains information about the results of the
regular expression operation..
.IP "string example #1" 4
.IX Item "string example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $search\->string; # this is a test
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/data-object/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/data-object/wiki>
.PP
Project <https://github.com/iamalnewkirk/data-object>
.PP
Initiatives <https://github.com/iamalnewkirk/data-object/projects>
.PP
Milestones <https://github.com/iamalnewkirk/data-object/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/data-object/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/data-object/issues>
