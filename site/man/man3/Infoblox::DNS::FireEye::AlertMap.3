.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::FireEye::AlertMap 3"
.TH Infoblox::DNS::FireEye::AlertMap 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::FireEyeAlertMap \- FireEye Alert Map object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The alert map object is used to configure FireEye alerts to Response Policy Zone rules.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 5
\& my $alertmap = Infoblox::DNS::FireEye::AlertMap\->new(
\&     alert_type => "INFECTION_MATCH" | "WEB_INFECTION" | "MALWARE_OBJECT" | "DOMAIN_MATCH" | "MALWARE_CALLBACK", # Required
\&     rpz_rule   => "PASSTHRU" | "NXDOMAIN" | "NODATA" | "SUBSTITUTE" | "NONE", # Required
\&     lifetime   => $uint, # Required
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to apply to a FireEye Alert Map object.
.SS "Infoblox::DNS::FireEye::RuleMapping\->fireeye_alert_mapping( )"
.IX Subsection "Infoblox::DNS::FireEye::RuleMapping->fireeye_alert_mapping( )"
.RS 4
Use this function to specify the alert map for this rule mapping. See Infoblox::DNS::FireEye::RuleMapping\->\fBfireeye_alert_mapping()\fR for parameters, return values and code samples.
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a \s-1DNS\s0 Member object.
.SS "alert_type( )"
.IX Subsection "alert_type( )"
.RS 4
Use this method to set or retrieve the alert type.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is one of \*(L"\s-1INFECTION_MATCH\*(R", \*(L"WEB_INFECTION\*(R", \*(L"MALWARE_OBJECT\*(R", \*(L"DOMAIN_MATCH\*(R"\s0 or \*(L"\s-1MALWARE_CALLBACK\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get alert_type
\& my $alert_type = $am\->alert_type();
\& #Modify alert_type
\& $am\->alert_type("INFECTION_MATCH");
.Ve
.RE
.RS 4
.RE
.SS "rpz_rule( )"
.IX Subsection "rpz_rule( )"
.RS 4
Use this method to set or retrieve the rpz rule.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is one of \*(L"\s-1PASSTHRU\*(R", \*(L"NXDOMAIN\*(R", \*(L"NODATA\*(R", \*(L"SUBSTITUTE\*(R"\s0 or \*(L"\s-1NONE\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get rpz_rule
\& my $rpz_rule = $am\->rpz_rule();
\& #Modify rpz_rule
\& $am\->rpz_rule("PASSTHRU");
.Ve
.RE
.RS 4
.RE
.SS "lifetime( )"
.IX Subsection "lifetime( )"
.RS 4
Use this method to set or retrieve the expiration lifetime for this alert type.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer, which specifies the amount of seconds this alert type will live for. 0 means the alert will never expire.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lifetime
\& my $lifetime = $am\->lifetime();
\& #Modify lifetime
\& $am\->lifetime(1234);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::Zone, Infoblox::DNS::Zone
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
