.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::MSServer 3"
.TH Infoblox::Grid::MSServer 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::MSServer \- Microsoft (r) Grid Server object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A grid Microsoft \s-1DNS\s0 Server object is a single Microsoft \s-1DNS\s0 server that is managed by a grid member.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $ms_member = Infoblox::Grid::MSServer\->new(
\&     address                  => $ip_or_fqdn,                                   #Required
\&     ad_sites                 => $ad_sites,                                     #Optional
\&     ad_user                  => $ad_user,                                      #Optional
\&     comment                  => $string,                                       #Optional / Default value is empty
\&     disable                  => "true" | "false"                               #Optional / Default value is "false"
\&     extattrs                 => { $string => $extattr, ... },                  #Optional / Default is undefined
\&     extensible_attributes    => { $string => $string | $num,
\&                                   $string => [ $string | $num, ... ], ... },   #Optional / Default is undefined
\&     login                    => $string,                                       #Required
\&     password                 => $string,                                       #Optional / Default value is empty
\&     managing_member          => $Member,                                       #Optional / Default value is empty
\&     read_only                => "true" | "false",                              #Optional / Default value is "true"
\&     synchronization_interval => $num,                                          #Optional / Default value is 2
\&     logging_mode             => "minimum" | "normal" | "advanced" | "full",    #Optional / Default value is "normal"
\&     network_view             => $NetworkView,                                  #Optional / Default is "default" network view
\&     dns_view                 => $DnsView,                                      #Optional / Default is "default" view
\&     log_destination          =>  "SYSLOG" | "MSLOG",                           #Optional / Default is undefined
\&     override_log_destination => "true" | "false",                              #Optional / Default value is "false"
\&     max_connection           => $num,                                          #Optional / Default is undefined
\&     override_max_connection  => "true" | "false",                              #Optional / Default value is "false"
\&     rpc_timeout              => $num,                                          #Optional / Default is undefined
\&     override_rpc_timeout     => "true" | "false",                              #Optional / Default value is "false"
\&);
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "Infoblox::DNS::Zone Considerations"
.IX Header "Infoblox::DNS::Zone Considerations"
The following apply to zones assigned to Microsoft \s-1DNS\s0 servers:
.SS "Methods with no effect"
.IX Subsection "Methods with no effect"
.RS 4
The following methods have no effect on a Microsoft \s-1DNS\s0 server that is assigned to a zone:
.IP "\fBallow_transfer()\fR" 4
.IX Item "allow_transfer()"
.PD 0
.IP "allow_query( )" 4
.IX Item "allow_query( )"
.IP "allow_update( )" 4
.IX Item "allow_update( )"
.IP "allow_update_forwarding( )" 4
.IX Item "allow_update_forwarding( )"
.IP "bind_check_names_policy( )" 4
.IX Item "bind_check_names_policy( )"
.IP "create_underscore_zones( )" 4
.IX Item "create_underscore_zones( )"
.IP "disable_forwarding( )" 4
.IX Item "disable_forwarding( )"
.IP "forward_only( )" 4
.IX Item "forward_only( )"
.IP "forward_to( )" 4
.IX Item "forward_to( )"
.IP "import_from( )" 4
.IX Item "import_from( )"
.IP "override_delegated_ttl( )" 4
.IX Item "override_delegated_ttl( )"
.IP "override_grid_zone_timer( )" 4
.IX Item "override_grid_zone_timer( )"
.IP "override_grid_email( )" 4
.IX Item "override_grid_email( )"
.IP "override_serial_number( )" 4
.IX Item "override_serial_number( )"
.IP "prefix( )" 4
.IX Item "prefix( )"
.IP "remove_sub_zones( )" 4
.IX Item "remove_sub_zones( )"
.IP "soa_negative_ttl( )" 4
.IX Item "soa_negative_ttl( )"
.IP "shared_record_groups( )" 4
.IX Item "shared_record_groups( )"
.RE
.RS 4
.PD
.Sp
Values set or retrieved using the member that manages the Microsoft \s-1DNS\s0 server apply only to that grid member if it is assigned to a zone.
.RE
.SS "Applicable methods"
.IX Subsection "Applicable methods"
.RS 4
The following methods apply to any grid member or Microsoft \s-1DNS\s0 server assigned to the zone:
.IP "comment( )" 4
.IX Item "comment( )"
.PD 0
.IP "delegated_ttl( )" 4
.IX Item "delegated_ttl( )"
.IP "disable( )" 4
.IX Item "disable( )"
.IP "email( )" 4
.IX Item "email( )"
.IP "extensible_attributes( )" 4
.IX Item "extensible_attributes( )"
.IP "host_name_restriction_policy( )" 4
.IX Item "host_name_restriction_policy( )"
.IP "locked( )" 4
.IX Item "locked( )"
.IP "name( )" 4
.IX Item "name( )"
.IP "ns_group( )" 4
.IX Item "ns_group( )"
.IP "multiple_primaries( )" 4
.IX Item "multiple_primaries( )"
.IP "secondaries( )" 4
.IX Item "secondaries( )"
.IP "soa_default_ttl( )" 4
.IX Item "soa_default_ttl( )"
.IP "soa_expire( )" 4
.IX Item "soa_expire( )"
.IP "member_soa_mnames( )" 4
.IX Item "member_soa_mnames( )"
.IP "soa_refresh( )" 4
.IX Item "soa_refresh( )"
.IP "soa_retry( )" 4
.IX Item "soa_retry( )"
.IP "member_soa_serials( )" 4
.IX Item "member_soa_serials( )"
.IP "stub_from( )" 4
.IX Item "stub_from( )"
.IP "stub_members( )" 4
.IX Item "stub_members( )"
.IP "zone( )" 4
.IX Item "zone( )"
.RE
.RS 4
.RE
.PD
.SH "Infoblox::DNS considerations"
.IX Header "Infoblox::DNS considerations"
The following objects cannot be used with a Microsoft \s-1DNS\s0 Server object or with a Zone object whose primary server is a Microsoft \s-1DNS\s0 Server object:
.IP "Infoblox::DNS::BulkHost" 4
.IX Item "Infoblox::DNS::BulkHost"
.PD 0
.IP "Infoblox::DNS::DnssecTrustedKey" 4
.IX Item "Infoblox::DNS::DnssecTrustedKey"
.IP "Infoblox::DNS::Host" 4
.IX Item "Infoblox::DNS::Host"
.IP "Infoblox::DNS::SRG" 4
.IX Item "Infoblox::DNS::SRG"
.IP "Infoblox::DNS::RootNameServer" 4
.IX Item "Infoblox::DNS::RootNameServer"
.IP "Infoblox::DNS::Sortlist" 4
.IX Item "Infoblox::DNS::Sortlist"
.IP "Infoblox::DNS::TSIGKey" 4
.IX Item "Infoblox::DNS::TSIGKey"
.IP "Infoblox::DNS::Record" 4
.IX Item "Infoblox::DNS::Record"
.RS 4
.IP "\s-1DNAME\s0 (only with Windows Server 2008 and later)" 4
.IX Item "DNAME (only with Windows Server 2008 and later)"
.IP "\s-1DS, RRSIG, DNSKEY, NSEC, NSEC3, NSEC3PARAM\s0 (read-only on Windows Server 2008 R2 and later)" 4
.IX Item "DS, RRSIG, DNSKEY, NSEC, NSEC3, NSEC3PARAM (read-only on Windows Server 2008 R2 and later)"
.RE
.RS 4
.RE
.PD
.SH "Infoblox::Grid::DNS considerations"
.IX Header "Infoblox::Grid::DNS considerations"
The following methods can be applied to \s-1DNS\s0 zones managed by a Microsoft \s-1DNS\s0 server:
.IP "default_ttl( )" 4
.IX Item "default_ttl( )"
.PD 0
.IP "email( )" 4
.IX Item "email( )"
.IP "host_name_restriction_policy( )" 4
.IX Item "host_name_restriction_policy( )"
.IP "zone_deletion_double_confirm( )" 4
.IX Item "zone_deletion_double_confirm( )"
.PD
.PP
The following methods have no effect on any zone managed by a Microsoft \s-1DNS\s0 server:
.IP "allow_bulkhost_ddns( )" 4
.IX Item "allow_bulkhost_ddns( )"
.PD 0
.IP "allow_gss_tsig_zone_updates( )" 4
.IX Item "allow_gss_tsig_zone_updates( )"
.IP "allow_transfer( )" 4
.IX Item "allow_transfer( )"
.IP "allow_query( )" 4
.IX Item "allow_query( )"
.IP "allow_recursive_query( )" 4
.IX Item "allow_recursive_query( )"
.IP "allow_update( )" 4
.IX Item "allow_update( )"
.IP "bind_check_names_policy( )" 4
.IX Item "bind_check_names_policy( )"
.IP "blackhole_list( )" 4
.IX Item "blackhole_list( )"
.IP "bulk_host_name_template( )" 4
.IX Item "bulk_host_name_template( )"
.IP "bulk_host_name_templates( )" 4
.IX Item "bulk_host_name_templates( )"
.IP "dnssec_enabled( )" 4
.IX Item "dnssec_enabled( )"
.IP "dnssec_expired_signatures_enabled( )" 4
.IX Item "dnssec_expired_signatures_enabled( )"
.IP "\fBdnssec_ksk_algorithm()\fR" 4
.IX Item "dnssec_ksk_algorithm()"
.IP "\fBdnssec_ksk_rollover_interval()\fR" 4
.IX Item "dnssec_ksk_rollover_interval()"
.IP "\fBdnssec_ksk_size()\fR" 4
.IX Item "dnssec_ksk_size()"
.IP "dnssec_signature_expiration( )" 4
.IX Item "dnssec_signature_expiration( )"
.IP "dnssec_validation_enabled( )" 4
.IX Item "dnssec_validation_enabled( )"
.IP "dnssec_trusted_keys( )" 4
.IX Item "dnssec_trusted_keys( )"
.IP "\fBdnssec_zsk_algorithm()\fR" 4
.IX Item "dnssec_zsk_algorithm()"
.IP "\fBdnssec_zsk_rollover_interval()\fR" 4
.IX Item "dnssec_zsk_rollover_interval()"
.IP "\fBdnssec_zsk_size()\fR" 4
.IX Item "dnssec_zsk_size()"
.IP "enable_blackhole( )" 4
.IX Item "enable_blackhole( )"
.IP "expire_after( )" 4
.IX Item "expire_after( )"
.IP "forward_only( )" 4
.IX Item "forward_only( )"
.IP "forward_updates( )" 4
.IX Item "forward_updates( )"
.IP "forwarders( )" 4
.IX Item "forwarders( )"
.IP "logging_categories( )" 4
.IX Item "logging_categories( )"
.IP "logging_facility( )" 4
.IX Item "logging_facility( )"
.IP "member_secondary_notify( )" 4
.IX Item "member_secondary_notify( )"
.IP "negative_ttl( )" 4
.IX Item "negative_ttl( )"
.IP "notify_source_port( )" 4
.IX Item "notify_source_port( )"
.IP "nsgroup_default( )" 4
.IX Item "nsgroup_default( )"
.IP "nsgroups( )" 4
.IX Item "nsgroups( )"
.IP "query_source_port( )" 4
.IX Item "query_source_port( )"
.IP "record_name_policies( )" 4
.IX Item "record_name_policies( )"
.IP "recursive_query_list( )" 4
.IX Item "recursive_query_list( )"
.IP "refresh_timer( )" 4
.IX Item "refresh_timer( )"
.IP "retry_timer( )" 4
.IX Item "retry_timer( )"
.IP "rootNS( )" 4
.IX Item "rootNS( )"
.IP "sortlist( )" 4
.IX Item "sortlist( )"
.IP "transfer_excluded_servers( )" 4
.IX Item "transfer_excluded_servers( )"
.IP "transfer_format( )" 4
.IX Item "transfer_format( )"
.PD
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a grid member object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Construct an object
\& my $grid_msserver = Infoblox::Grid::MSServer\->new(
\&                                              address                  => \*(Aq10.0.0.1\*(Aq,
\&                                              comment                  => \*(AqThis is an MS DNS Server\*(Aq,
\&                                              disable                  => \*(Aqtrue\*(Aq,
\&                                              extensible_attributes    => { Site => \*(AqMain Office\*(Aq},
\&                                              login                    => \*(Aquser\*(Aq,
\&                                              password                 => \*(Aqpassword\*(Aq,
\&                                              managing_member          => \*(Aqmanaging.member.com\*(Aq,
\&                                              read_only                => \*(Aqfalse\*(Aq,
\&                                              synchronization_interval => 5,
\&                                              logging_mode             => \*(Aqminimum\*(Aq,
\&     );
\& #Submit for addition
\& my $response = $session\->add( $grid_msserver );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific grid member object:
\&
\&  address \- Optional. A member address or name in FQDN format.
\&  comment \- Optional. A comment in string format
\&  read_only \- Optional. A boolean value
\&  managing_member \- Optional. A name in FQDN format.
\&  network_view  \-  Optional. The network view served by the member.
\&  dns_view \-  Optional. The DNS view served by the member.
\&  extattrs \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&     object  => "Infoblox::Grid::MSServer",
\&     address => "10.0.0.1");
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify the comment of a Microsoft DNS server managed by the grid.
\& $grid_msserver\->comment("This is modified object");
\& # Submit modification
\& my $response = $session\->modify( $grid_msserver );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::MSServer",
\&     name   => "10.0.0.1");
\& #Find the desired object from the retrieved list.
\& my $desired_gridmsserver = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_gridmsserver );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for Microsoft \s-1DNS\s0 Server objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
Apply the following attributes to search for a Microsoft \s-1DNS\s0 Server object
.Sp
.Vb 8
\&  address \- Optional. A member address or name in FQDN format (regular expression).
\&  comment \- Optional. A comment in string format (regular expression).
\&  read_only \- Optional. A boolean value
\&  managing_member \- Optional. The FQDN of the grid member that manages the Microsoft DNS server?
\&  network_view  \-  Optional. The network view served by the member.
\&  dns_view \-  Optional. The DNS view served by the member.
\&  extattrs \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes   \- Optional. A hash reference that contains extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all matching grid msserver objects
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::Grid::MSServer",
\&     extensible_attributes => { Site => \*(AqLocal\*(Aq},
\&     );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a Microsoft \s-1DNS\s0 server.
.SS "\fBaddress()\fP"
.IX Subsection "address()"
.RS 4
Retrieve or set the \s-1IP\s0 address or \s-1FQDN\s0 of the Microsoft \s-1DNS\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The Microsoft \s-1DNS\s0 server name in \s-1FQDN\s0 format or \s-1IPV4\s0 format
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get address
\& my $address = $msserver\->address();
.Ve
.RE
.RS 4
.RE
.SS "ad_domain( )"
.IX Subsection "ad_domain( )"
.RS 4
Use this method to retrieve the Active Directory domain name of the Microsoft Server. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ad_domin value
\& my $ad_domain = $object\->ad_domain();
.Ve
.RE
.RS 4
.RE
.SS "\fBad_sites()\fP"
.IX Subsection "ad_sites()"
.RS 4
Use this method to set or retrieve structure containing Active Directory Sites information.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::MSServer::AdSites object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ad_sites value
\& my $ad_sites = $msserver\->ad_sites();
\&
\& #Modify ad_sites value
\& my $res = $msserver\->ad_sites($ad_sites);
.Ve
.RE
.RS 4
.RE
.SS "\fBad_user()\fP"
.IX Subsection "ad_user()"
.RS 4
Use this method to set or retrieve the object that contains Active Directory User synchronization information.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::MSServer::AdUser object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ad_user value
\& my $ad_user = $msserver\->ad_user();
\&
\& #Modify ad_user value
\& my $res = $msserver\->ad_user($ad_user);
.Ve
.RE
.RS 4
.RE
.SS "\fBcomment()\fP"
.IX Subsection "comment()"
.RS 4
Retrieve or set a user-defined string related to this Microsoft \s-1DNS\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get comment
\&  my $comment = $msserver\->comment();
\&  #Modify comment
\&  $msserver\->comment("Modifying the MS DNS server comment");
.Ve
.RE
.RS 4
.RE
.SS "\fBdisable()\fP"
.IX Subsection "disable()"
.RS 4
Retrieve or set the \fBdisable()\fR flag of this Microsoft \s-1DNS\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get disable
\&  my $disable = $msserver\->disable();
\&  #Modify disable
\&  $msserver\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "\fBlogin()\fP"
.IX Subsection "login()"
.RS 4
Retrieve or set the login name that the grid member uses to connect to the Microsoft \s-1DNS\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
When setting a value that requires a domain name, prepend the domain information followed by a backslash to the username: \*(L"domain\eusername\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string that contains the login name.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get login
\&  my $login = $msserver\->login();
\&  #Modify login
\&  $msserver\->login("newuser");
.Ve
.RE
.RS 4
.RE
.SS "\fBpassword()\fP"
.IX Subsection "password()"
.RS 4
Set the password that the grid member uses to connect to the Microsoft \s-1DNS\s0 server. This field is used only if the login field for this member is defined. This is a write-only attribute.
.Sp
This field can not be retrieved.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string that contains the password.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&  #Set the password
\&  $msserver\->password("iG&ojG97Y");
.Ve
.RE
.RS 4
.RE
.SS "\fBnetwork_view()\fP"
.IX Subsection "network_view()"
.RS 4
Retrieve or set the name of the network view associated with this member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string that contains the name of the network view associated with this member.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get network_view
\&  my $network_view = $msserver\->network_view();
\&  #Modify network_view
\&  $msserver\->network_view("external");
.Ve
.RE
.RS 4
.RE
.SS "\fBdns_view()\fP"
.IX Subsection "dns_view()"
.RS 4
Retrieve or set the name of the \s-1DNS\s0 view that applies to this Microsoft \s-1DNS\s0 server. If this field is set to undefined, the default view is used. The \s-1DNS\s0 view must be set to a \s-1DNS\s0 view linked to the Microsoft \s-1DNS\s0 server network view.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string that contains the name of the \s-1DNS\s0 view associated with the Microsoft \s-1DNS\s0 server
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get dns_view
\&  my $dns_view = $msserver\->dns_view();
\&  #Modify dns_view
\&  $msserver\->dns_view("external");
.Ve
.RE
.RS 4
.RE
.SS "log_destination( )"
.IX Subsection "log_destination( )"
.RS 4
Use this method to direct the logging of synchronization messages to the syslog or mslog.
.Sp
Setting this method to a defined value implicitly sets the override_log_destination method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_log_destination method to \*(L"false\*(R".
.Sp
Note that when log_destination is set to a defined value and override_log_destination is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->log_destination(\*(L"\s-1MSLOG\*(R"\s0); \f(CW$object\fR\->override_log_destination(\*(L"false\*(R"); will set override_log_destination to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_log_destination(\*(L"false\*(R"); \f(CW$object\fR\->log_destination(\*(L"\s-1MSLOG\*(R"\s0); will result in override_log_destination=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1SYSLOG\*(R"\s0 and \*(L"\s-1MSLOG\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get log_destination value
\& my $log_destination = $msserver\->log_destination();
\& #Modify log_destination value
\& $msserver\->log_destination("SYSLOG");
.Ve
.RE
.RS 4
.RE
.SS "max_connection( )"
.IX Subsection "max_connection( )"
.RS 4
Use this method to set or retrieve the maximum number of connections to a Microsoft server.
.Sp
Setting this method to a defined value implicitly sets the override_max_connection method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_max_connection method to \*(L"false\*(R".
.Sp
Note that when max_connection is set to a defined value and override_max_connection is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->max_connection(20); \f(CW$object\fR\->override_max_connection(\*(L"false\*(R"); will set override_max_connection to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_max_connection(\*(L"false\*(R"); \f(CW$object\fR\->max_connection(20); will result in override_max_connection=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are integers between 2 and 40 inclusive.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get max_connection value
\& my $max_connection = $msserver\->max_connection();
\& #Modify max_connection value
\& $msserver\->max_connection(20);
.Ve
.RE
.RS 4
.RE
.SS "\fBmanaging_member()\fP"
.IX Subsection "managing_member()"
.RS 4
Retrieve or set the grid member responsible for the synchronization of this Microsoft \s-1DNS\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string that contains the name of the grid member.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get managing_member
\&  my $managing_member = $msserver\->managing_member();
\&  #Modify managing_member
\&  $msserver\->managing_member("example.member.com");
.Ve
.RE
.RS 4
.RE
.SS "override_log_destination( )"
.IX Subsection "override_log_destination( )"
.RS 4
The override_log_destination attribute controls whether the log_destination method values of the Microsoft Server are used, instead of the Grid default.
.Sp
The override_log_destination attribute can be specified explicitly. It is also set implicitly when log_destination is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for log_destination. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for log_destination. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_log_destination
\& my $override_log_destination = $msserver\->override_log_destination();
\& #Modify override_log_destination
\& $msserver\->override_log_destination("true");
.Ve
.RE
.RS 4
.RE
.SS "override_max_connection( )"
.IX Subsection "override_max_connection( )"
.RS 4
The override_max_connection attribute controls whether the max_connection method values of the Microsoft Server are used, instead of the Grid default.
.Sp
The override_max_connection attribute can be specified explicitly. It is also set implicitly when max_connection is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for max_connection. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for max_connection. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_max_connection
\& my $override_max_connection = $msserver\->override_max_connection();
\& #Modify override_max_connection
\& $msserver\->override_max_connection("true");
.Ve
.RE
.RS 4
.RE
.SS "override_rpc_timeout( )"
.IX Subsection "override_rpc_timeout( )"
.RS 4
The override_rpc_timeout attribute controls whether the rpc_timeout method values of the Microsoft Server are used, instead of the Grid default.
.Sp
The override_rpc_timeout attribute can be specified explicitly. It is also set implicitly when rpc_timeout is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for rpc_timeout. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for rpc_timeout. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_rpc_timeout
\& my $override_rpc_timeout = $msserver\->override_rpc_timeout();
\& #Modify override_rpc_timeout
\& $msserver\->override_rpc_timeout("true");
.Ve
.RE
.RS 4
.RE
.SS "\fBread_only()\fP"
.IX Subsection "read_only()"
.RS 4
Retrieve or set the synchronization mode of this Microsoft \s-1DNS\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting the read_only mode to true synchronizes all data from the Microsoft \s-1DNS\s0 server to the grid and forbids any change on the grid that could be synchronized to the Microsoft \s-1DNS\s0 server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get read_only
\&  my $read_only = $msserver\->read_only();
\&  #Modify read_only
\&  $msserver\->read_only("false");
.Ve
.RE
.RS 4
.RE
.SS "root_ad_domain( )"
.IX Subsection "root_ad_domain( )"
.RS 4
Use this method to retrieve the Active Directory root domain name of the Microsoft Server. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ad_domin value
\& my $root_ad_domain = $object\->root_ad_domain();
.Ve
.RE
.RS 4
.RE
.SS "rpc_timeout( )"
.IX Subsection "rpc_timeout( )"
.RS 4
Use this method to set or retrieve the timeout value in seconds for \s-1RPC\s0 connections to Microsoft Server.
.Sp
Setting this method to a defined value implicitly sets the override_rpc_timeout method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_rpc_timeout method to \*(L"false\*(R".
.Sp
Note that when rpc_timeout is set to a defined value and override_rpc_timeout is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->rpc_timeout(10); \f(CW$object\fR\->override_rpc_timeout(\*(L"false\*(R"); will set override_rpc_timeout to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_rpc_timeout(\*(L"false\*(R"); \f(CW$object\fR\->rpc_timeout(10); will result in override_rpc_timeout=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are integers between 0 and 65535 inclusive.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get rpc_timeout value
\& my $rpc_timeout = $msserver\->rpc_timeout();
\& #Modify rpc_timeout value
\& $msserver\->rpc_timeout(10);
.Ve
.RE
.RS 4
.RE
.SS "\fBsynchronization_interval()\fP"
.IX Subsection "synchronization_interval()"
.RS 4
Retrieve or set the synchronization interval of this Microsoft \s-1DNS\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The synchronization interval controls how often data on the Microsoft \s-1DNS\s0 server is synchronized with the grid. The value is specified in minutes.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a number that specifies the synchronization interval in minutes. The default value is 2 minutes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get synchronization_interval
\&  my $synchronization_interval = $msserver\->synchronization_interval();
\&  #Modify synchronization_interval
\&  $msserver\->synchronization_interval(5);
.Ve
.RE
.RS 4
.RE
.SS "\fBlogging_mode()\fP"
.IX Subsection "logging_mode()"
.RS 4
Retrieve or set the synchronization logging verbosity of this Microsoft \s-1DNS\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is \*(L"minimum\*(R", \*(L"normal\*(R", \*(L"advanced\*(R", or \*(L"full\*(R". The default value is \*(L"normal\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get logging_mode
\&  my $logging_mode = $msserver\->logging_mode();
\&  #Modify logging_mode
\&  $msserver\->logging_mode("advanced");
.Ve
.RE
.RS 4
.RE
.SS "\fBversion()\fP"
.IX Subsection "version()"
.RS 4
Retrieve the version of this Microsoft \s-1DNS\s0 server. The returned version is a string, such as \*(L"Microsoft Windows Server 2003\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&  #Get version
\&  my $version = $msserver\->version();
.Ve
.RE
.RS 4
.RE
.SS "\fBis_AD()\fP"
.IX Subsection "is_AD()"
.RS 4
Retrieve the Active Directory flag of the Microsoft \s-1DNS\s0 server. The method returns \*(L"true\*(R" if the Microsoft \s-1DNS\s0 server has Active Directory capabilities or \*(L"false\*(R" if it does not.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&  #Get is_AD
\&  my $is_AD = $msserver\->is_AD();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Microsoft \s-1DNS\s0 server object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $msserver\->extattrs();
\& #Modify extattrs
\& $msserver\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Microsoft \s-1DNS\s0 server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $msserver\->extensible_attributes();
\& #Modify extensible attributes
\& $msserver\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, get, modify, search and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to getting and modifying a grid msserver object\fR
.PP
.Vb 2
\& use strict;
\& use Infoblox;
\&
\& #refers to Infoblox Appliance IP address
\& my $host_ip = "192.168.1.2";
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&     master   => $host_ip,
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create a grid member object
\&
\& my $grid_member = Infoblox::Grid::Member\->new(
\&     name          => "hostname.com",
\&     ipv4addr      => "3.0.0.2",
\&     mask          => "255.0.0.0",
\&     gateway       => "3.0.0.1",
\&     comment       => "Script Generated"
\&     );
\& unless ($grid_member) {
\&        die("Construct grid member object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Grid member object created successfully\en";
\&
\& #Adding the member object to appliance through session
\& my $response = $session\->add( $grid_member );
\&
\& unless ($response) {
\&     die("Add grid member failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Grid member added successfully \en";
\&
\& my $msserver = Infoblox::Grid::MSServer\->new(
\&                                              address                  => \*(Aq10.0.0.1\*(Aq,
\&                                              comment                  => \*(Aqbasic member\*(Aq,
\&                                              disable                  => \*(Aqtrue\*(Aq,
\&                                              extensible_attributes    => { Site => \*(AqLocal\*(Aq},
\&                                              login                    => \*(Aquser\*(Aq,
\&                                              password                 => \*(Aqpassword\*(Aq,
\&                                              managing_member          => \*(Aqhostname.com\*(Aq,
\&                                              read_only                => \*(Aqfalse\*(Aq,
\&                                              synchronization_interval => 5,
\&                                              logging_mode             => \*(Aqminimum\*(Aq,
\&                                             );
\&
\& unless ($msserver) {
\&        die("Construct grid MS DNS server object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Grid MS DNS server object created successfully\en";
\&
\& #Adding the member object to appliance through session
\& $response = $session\->add( $msserver );
\&
\& unless ($response) {
\&     die("Add grid MS DNS server failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Grid MS DNS server added successfully \en";
.Ve
.PP
\&\fB#Search for a grid Microsoft \s-1DNS\s0 server object\fR
.PP
.Vb 4
\&  my @retrieved_objs = $session\->search(
\&      object => "Infoblox::Grid::MSServer",
\&      comment => "basic.*");
\&  my $object = $retrieved_objs[0];
\&
\&  unless ($object) {
\&         die("Search grid MS DNS server object failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&  print "Search grid MS DNS server object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify the msserver object\fR
.PP
.Vb 6
\& #Get grid member through session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::MSServer",
\&     address => "10.0.0.1"
\&     );
\& my $msserver = $retrieved_objs[0];
\&
\& unless ($msserver) {
\&     die("Get grid MS DNS server object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Get grid MS DNS server successful \en";
\&
\& # Modify one of the attributes of the selected Microsoft DNS server.
\&
\& $msserver\->comment("Modified MS DNS server object");
\&
\& #Applying the changes
\& $session\->modify($msserver)
\&    or die("Modify grid MS DNS server failed",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print"Grid MS DNS server modified successfully \en";
.Ve
.PP
\&\fB#Remove the created objects object\fR
.PP
.Vb 6
\& #Get grid member through session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::MSServer",
\&     address => "10.0.0.1"
\&     );
\& my $desired_msserver = $retrieved_objs[0];
\&
\& unless ($desired_msserver) {
\&     die("Get grid MS DNS server object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Get grid member successful \en";
\&
\& #Submit the object for removal
\& $session\->remove( $desired_msserver )
\&     or die("Remove grid MS DNS server failed",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print"Grid MS DNS server removed successfully \en";
\&
\& #Get grid member through session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Member",
\&     name   => "hostname.com"
\&     );
\& my $desired_grid_member = $retrieved_objs[0];
\&
\& unless ($desired_grid_member) {
\&     die("Get grid member object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Get grid member successful \en";
\&
\& #Submit the object for removal
\& $session\->remove( $desired_grid_member )
\&     or die("Remove grid member failed",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print"Grid member removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Grid::MSServer::AdSites, Infoblox::Grid::MSServer::AdUser.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
