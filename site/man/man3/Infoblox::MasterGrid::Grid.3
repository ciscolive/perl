.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::MasterGrid::Grid 3"
.TH Infoblox::MasterGrid::Grid 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::MasterGrid::Grid \- Manages the Master Grid settings.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class manages the Master Grid.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::MasterGrid::Grid object is automatically generated when a Grid successfully joins the Master Grid. It does not require manual construction.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session that you can apply to a Master Grid object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the existing objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific Master Grid object:
\&
\& name    \- Optional. The Master Grid name in string format.
\& port    \- Optional. The Master Grid port number.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& my $grid = $session\->get(
\&     object => "Infoblox::MasterGrid::Grid");
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for the existing objects from the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specificMaster Grid object:
\&
\& name    \- Optional. The Master Grid name in string format. Regular expression is supported.
\& port    \- Optional. The Master Grid port number.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& my $grid = $session\->search(
\&     object => "Infoblox::MasterGrid::Grid");
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify objects in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify the enabled status
\& $grid\->enabled("false");
\& # Submit modification
\& my $response = $session\->modify( $grid );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a Master Grid.
.SS "address( )"
.IX Subsection "address( )"
.RS 4
Use this method to set or retrieve the domain name or \s-1IP\s0 address for the Master Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are a domain name in \s-1FQDN\s0 format or an \s-1IP\s0 address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get address
\& my $address = $grid\->address();
\& #Modify address
\& $grid\->address("10.0.0.1");
.Ve
.RE
.RS 4
.RE
.SS "connection_timestamp( )"
.IX Subsection "connection_timestamp( )"
.RS 4
Use this method to retrieve the timestamp that indicates when the connection to the Master Grid was established.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the timestamp.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the Master Grid connection_timestamp
\& my $connection_timestamp = $mg\->connection_timestamp();
.Ve
.RE
.RS 4
.RE
.SS "detached( )"
.IX Subsection "detached( )"
.RS 4
Use this method to retrieve the detached flag for the Master Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get detached flag
\& my $detached = $grid\->detached();
.Ve
.RE
.RS 4
.RE
.SS "enabled( )"
.IX Subsection "enabled( )"
.RS 4
Use this method to set or retrieve the enabled flag for the Master Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enabled flag
\& my $enabled = $grid\->enabled();
\& #Modify enabled flag
\& $grid\->enabled("false");
.Ve
.RE
.RS 4
.RE
.SS "joined( )"
.IX Subsection "joined( )"
.RS 4
Use this method to retrieve the status of the Grid's join operation to the Master Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the join status of the Grid to the Master Grid
\& my $joined = $mg\->joined();
.Ve
.RE
.RS 4
.RE
.SS "last_event( )"
.IX Subsection "last_event( )"
.RS 4
Use this method to retrieve the Master Grid's last event.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the Master Grid's last event.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the Master Grid last_event
\& my $last_event = $mg\->last_event();
.Ve
.RE
.RS 4
.RE
.SS "last_event_details( )"
.IX Subsection "last_event_details( )"
.RS 4
Use this method to retrieve the details of the Master Grid's last event.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns details on the Master Grid's last event.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the Master Grid last_event_details
\& my $last_event_details = $mg\->last_event_details();
.Ve
.RE
.RS 4
.RE
.SS "last_sync_timestamp( )"
.IX Subsection "last_sync_timestamp( )"
.RS 4
Use this method to retrieve the timestamp for the last synchronization operation with the Master Grid.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the timestamp.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the Master Grid last_sync_timestamp
\& my $last_sync_timestamp = $mg\->last_sync_timestamp();
.Ve
.RE
.RS 4
.RE
.SS "port( )"
.IX Subsection "port( )"
.RS 4
Use this method to set or retrieve the Master Grid port to which the Grid connects.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a port number from 0 to 65535.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get port
\& my $port = $grid\->port();
\& #Modify port
\& $grid\->port(1234);
.Ve
.RE
.RS 4
.RE
.SS "status( )"
.IX Subsection "status( )"
.RS 4
Use this method to retrieve the Master Grid's status.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the Master Grid's status in string format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the Master Grid status
\& my $status = $mg\->status();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
