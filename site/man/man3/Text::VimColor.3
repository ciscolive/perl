.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::VimColor 3"
.TH Text::VimColor 3 "2018-12-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::VimColor \- Syntax highlight text using Vim
.SH "VERSION"
.IX Header "VERSION"
version 0.29
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&   use Text::VimColor;
\&   my $syntax = Text::VimColor\->new(
\&      file => $0,
\&      filetype => \*(Aqperl\*(Aq,
\&   );
\&
\&   print $syntax\->html;
\&   print $syntax\->xml;
\&   print $syntax\->ansi;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module tries to markup text files according to their syntax.  It can
be used to produce web pages with pretty-printed colorful source code
samples.  It can produce output in the following formats:
.IP "\s-1HTML\s0" 4
.IX Item "HTML"
Valid \s-1XHTML 1.0,\s0 with the exact coloring and style left to a \s-1CSS\s0 stylesheet
.IP "\s-1XML\s0" 4
.IX Item "XML"
Pieces of text are marked with \s-1XML\s0 elements in a simple vocabulary,
which can be converted to other formats, for example, using \s-1XSLT\s0
.IP "Perl array" 4
.IX Item "Perl array"
A simple Perl data structure, so that Perl code can be used to turn it
into whatever is needed
.IP "\s-1ANSI\s0 Escape Sequences" 4
.IX Item "ANSI Escape Sequences"
A string marked with Term::ANSIColor
suitable for printing to a terminal.
.PP
This module works by running the Vim text editor and getting it to apply its
excellent syntax highlighting (aka 'font\-locking') to an input file, and mark
pieces of text according to whether it thinks they are comments, keywords,
strings, etc.  The Perl code then reads back this markup and converts it
to the desired output format.
.PP
This is an object-oriented module.  To use it, create an object with
the \*(L"new\*(R" function (as shown in \*(L"\s-1SYNOPSIS\*(R"\s0) and then call methods
to get the markup out.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $tvc = Text::VimColor\->new(%options)
.Ve
.PP
Returns a syntax highlighting object.  Pass it a hash of options.
.PP
The following options are recognized:
.IP "file" 4
.IX Item "file"
The file to syntax highlight.  Can be either a filename or an open file handle.
.Sp
Note that using a filename might allow Vim to guess the file type from its
name if none is specified explicitly.
.Sp
If the file isn't specified while creating the object, it can be given later
in a call to the \*(L"syntax_mark_file\*(R" method (see below), allowing a single
\&\f(CW\*(C`Text::VimColor\*(C'\fR object to be used with multiple input files.
.IP "string" 4
.IX Item "string"
Use this to pass a string to be used as the input.  This is an alternative
to the \f(CW\*(C`file\*(C'\fR option.  A reference to a string will also work.
.Sp
The \*(L"syntax_mark_string\*(R" method is another way to use a string as input.
.Sp
If you provide a character (unencoded) string (recommended)
it will be passed to vim encoded in \s-1UTF\-8\s0
and your result will be character string.
.IP "filetype" 4
.IX Item "filetype"
Specify the type of file Vim should expect, in case Vim's automatic
detection by filename or contents doesn't get it right.  This is
particularly important when providing the file as a string or file
handle, since Vim won't be able to use the file extension to guess
the file type.
.Sp
The file types recognized by Vim are short strings like 'perl' or 'lisp'.
They are the names of files in the 'syntax' directory in the Vim
distribution.
.Sp
This option, whether or not it is passed to \*(L"new\*(R", can be overridden
when calling \*(L"syntax_mark_file\*(R" and \*(L"syntax_mark_string\*(R", so you can
use the same object to process multiple files of different types.
.IP "all_syntax_groups" 4
.IX Item "all_syntax_groups"
By default, this option is disabled. That means that the highlighting will
only use the following syntax groups:
.Sp
.Vb 11
\&  Comment
\&  Constant
\&  Identifier
\&  Statement
\&  PreProc
\&  Type
\&  Special
\&  Underlined
\&  Ignore
\&  Error
\&  Todo
.Ve
.Sp
This mirrors vim's default behavior of linking more specific syntax groups
to the main groups above. However, most syntax files support more specific
groups, so if you want to benefit from finer-grained syntax highlighting
you can turn on this option. The additional syntax groups are:
.Sp
.Vb 10
\&  Group             Linked to by default
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  String            Constant
\&  Character         Constant
\&  Number            Constant
\&  Boolean           Constant
\&  Float             Constant
\&  Function          Identifier
\&  Conditional       Statement
\&  Repeat            Statement
\&  Label             Statement
\&  Operator          Statement
\&  Keyword           Statement
\&  Exception         Statement
\&  Include           PreProc
\&  Define            PreProc
\&  Macro             PreProc
\&  PreCondit         PreProc
\&  StorageClass      Type
\&  Structure         Type
\&  Typedef           Type
\&  Tag               Special
\&  SpecialChar       Special
\&  Delimiter         Special
\&  SpecialComment    Special
\&  Debug             Special
.Ve
.IP "html_full_page" 4
.IX Item "html_full_page"
By default the \*(L"html\*(R" output method returns a fragment of \s-1HTML,\s0 not a
full file.  To make useful output this must be wrapped in a \f(CW\*(C`<pre>\*(C'\fR
element and a stylesheet must be included from somewhere.  Setting the
\&\*(L"html_full_page\*(R" option will instead make the \*(L"html\*(R" method return a
complete stand-alone \s-1XHTML\s0 file.
.Sp
Note that while this is useful for testing, most of the time you'll want to
put the syntax highlighted source code in a page with some other content,
in which case the default output of the \*(L"html\*(R" method is more appropriate.
.IP "html_inline_stylesheet" 4
.IX Item "html_inline_stylesheet"
Turned on by default, but has no effect unless \*(L"html_full_page\*(R" is also
enabled.
.Sp
This causes the \s-1CSS\s0 stylesheet defining the colors to be used
to render the markup to be be included in the \s-1HTML\s0 output, in a
\&\f(CW\*(C`<style>\*(C'\fR element.  Turn it off to instead use a \f(CW\*(C`<link>\*(C'\fR
to reference an external stylesheet (recommended if putting more than one
page on the web).
.IP "html_stylesheet" 4
.IX Item "html_stylesheet"
Ignored unless \f(CW\*(C`html_full_page\*(C'\fR and \f(CW\*(C`html_inline_stylesheet\*(C'\fR are both
enabled.
.Sp
This can be set to a stylesheet to include inline in the \s-1HTML\s0 output (the
actual \s-1CSS,\s0 not the filename of it).
.IP "html_stylesheet_file" 4
.IX Item "html_stylesheet_file"
Ignored unless \f(CW\*(C`html_full_page\*(C'\fR and \f(CW\*(C`html_inline_stylesheet\*(C'\fR are both
enabled.
.Sp
This can be the filename of a stylesheet to copy into the \s-1HTML\s0 output,
or a file handle to read one from.  If neither this nor \f(CW\*(C`html_stylesheet\*(C'\fR
are given, the supplied stylesheet \fIlight.css\fR will be used instead.
.IP "html_stylesheet_url" 4
.IX Item "html_stylesheet_url"
Ignored unless \f(CW\*(C`html_full_page\*(C'\fR is enabled and \f(CW\*(C`html_inline_stylesheet\*(C'\fR
is disabled.
.Sp
This can be used to supply the \s-1URL\s0 (relative or absolute) or the stylesheet
to be referenced from the \s-1HTML\s0 \f(CW\*(C`<link>\*(C'\fR element in the header.
If this isn't given it will default to using a \f(CW\*(C`file://\*(C'\fR \s-1URL\s0 to reference
the supplied \fIlight.css\fR stylesheet, which is only really useful for testing.
.IP "xhtml5" 4
.IX Item "xhtml5"
If true (by default it is false), then output \s-1XHTML5\s0 instead of \s-1XHTML 1\s0.x when
\&\f(CW\*(C`html_full_page\*(C'\fR is specified.
.Sp
New in version 0.29 .
.IP "xml_root_element" 4
.IX Item "xml_root_element"
By default this is true.  If set to a false value, \s-1XML\s0 output will not be
wrapped in a root element called \f(CW\*(C`<syn:syntax>\*(C'\fR, but will be otherwise the
same.  This could allow \s-1XML\s0 output for several files to be concatenated,
but to make it valid \s-1XML\s0 a root element must be added.  Disabling this
option will also remove the binding of the namespace prefix \f(CW\*(C`syn:\*(C'\fR, so
an \f(CW\*(C`xmlns:syn\*(C'\fR attribute would have to be added elsewhere.
.IP "vim_command" 4
.IX Item "vim_command"
The name of the executable which will be run to invoke Vim.
The default is \f(CW\*(C`vim\*(C'\fR.
.IP "vim_options" 4
.IX Item "vim_options"
A reference to an array of options to pass to Vim.  The default options are:
.Sp
.Vb 1
\&  [qw( \-RXZ \-i NONE \-u NONE \-N \-n ), "+set nomodeline"]
.Ve
.Sp
You can overwrite the default options by setting this.
To merely append additional options to the defaults
use \f(CW\*(C`extra_vim_options\*(C'\fR.
.IP "extra_vim_options" 4
.IX Item "extra_vim_options"
A reference to an array of additional options to pass to Vim.
These are appended to the default \f(CW\*(C`vim_options\*(C'\fR.
.IP "vim_let" 4
.IX Item "vim_let"
A reference to a hash of options to set in Vim before the syntax file
is loaded.  Each of these is set using the \f(CW\*(C`let\*(C'\fR command to the value
specified.  No escaping is done on the values, they are executed exactly
as specified.
.Sp
Values in this hash override some default options.  Use a value of
\&\f(CW\*(C`undef\*(C'\fR to prevent a default option from being set at all.  The
defaults are as follows:
.Sp
.Vb 4
\&   (
\&      perl_include_pod => 1,     # Recognize POD inside Perl code
\&      \*(Aqb:is_bash\*(Aq => 1,          # Allow Bash syntax in shell scripts
\&   )
.Ve
.Sp
These settings can be modified later with the \f(CW\*(C`vim_let()\*(C'\fR method.
.SS "vim_let"
.IX Subsection "vim_let"
.Vb 2
\&  $tvc\->vim_let( %variables );
\&  $tvc\->vim_let( perl_no_extended_vars => 1 );
.Ve
.PP
Change the options that are set with the Vim \f(CW\*(C`let\*(C'\fR command when Vim
is run.  See \*(L"new\*(R" for details.
.SS "syntax_mark_file"
.IX Subsection "syntax_mark_file"
.Vb 1
\&  $tvc\->syntax_mark_file( $file, %options )
.Ve
.PP
Mark up the specified file.  Subsequent calls to the output methods will then
return the markup.  It is not necessary to call this if a \f(CW\*(C`file\*(C'\fR or \f(CW\*(C`string\*(C'\fR
option was passed to \*(L"new\*(R".
.PP
Returns the object it was called on, so an output method can be called
on it directly:
.PP
.Vb 3
\&  foreach (@files) {
\&    print $tvc\->syntax_mark_file($_)\->html;
\&  }
.Ve
.PP
You can override the file type set in \fBnew()\fR by passing in a \f(CW\*(C`filetype\*(C'\fR
option, like so:
.PP
.Vb 1
\&  $tvc\->syntax_mark_file($filename, filetype => \*(Aqperl\*(Aq);
.Ve
.PP
This option will only affect the syntax coloring for that one call,
not for any subsequent ones on the same object.
.SS "syntax_mark_string"
.IX Subsection "syntax_mark_string"
.Vb 1
\&  $tvc\->syntax_mark_string($string, %options)
.Ve
.PP
Does the same as \f(CW\*(C`syntax_mark_file\*(C'\fR (see above) but uses a string as input.
The \fIstring\fR can also be a reference to a string.
.PP
Returns the object it was called on.  Supports the \f(CW\*(C`filetype\*(C'\fR option
just as \f(CW\*(C`syntax_mark_file\*(C'\fR does.
.SS "ansi"
.IX Subsection "ansi"
Return the string marked with \s-1ANSI\s0 escape sequences (using Term::ANSIColor)
based on the Vim syntax coloring of the input file.
.PP
This is the default format for the included text-vimcolor script
which makes it like a colored version of \f(CWcat(1)\fR.
.PP
You can alter the color scheme using the \f(CW\*(C`TEXT_VIMCOLOR_ANSI\*(C'\fR
environment variable in the format of \f(CW"SynGroup=color;"\fR.
For example:
.PP
.Vb 1
\&   TEXT_VIMCOLOR_ANSI=\*(AqComment=green;Statement = magenta; \*(Aq
.Ve
.SS "html"
.IX Subsection "html"
Return \s-1XHTML\s0 markup based on the Vim syntax coloring of the input file.
.PP
Unless the \f(CW\*(C`html_full_page\*(C'\fR option is set, this will only return a fragment
of \s-1HTML,\s0 which can then be incorporated into a full page.  The fragment
will be valid as either \s-1HTML\s0 or \s-1XHTML.\s0
.PP
The only markup used for the actual text will be \f(CW\*(C`<span>\*(C'\fR elements
wrapped around appropriate pieces of text.  Each one will have a \f(CW\*(C`class\*(C'\fR
attribute set to a name which can be tied to a foreground and background
color in a stylesheet.  The class names used will have the prefix \f(CW\*(C`syn\*(C'\fR,
for example \f(CW\*(C`synComment\*(C'\fR.
For the full list see \*(L"\s-1HIGHLIGHTING TYPES\*(R"\s0.
.SS "xml"
.IX Subsection "xml"
Returns markup in a simple \s-1XML\s0 vocabulary.  Unless the \f(CW\*(C`xml_root_element\*(C'\fR
option is turned off (it's on by default) this will produce a complete \s-1XML\s0
document, with all the markup inside a \f(CW\*(C`<syntax>\*(C'\fR element.
.PP
This \s-1XML\s0 output can be transformed into other formats, either using programs
which read it with an \s-1XML\s0 parser, or using \s-1XSLT.\s0  See the
text-vimcolor(1) program for an example of how \s-1XSLT\s0 can be used with
XSL-FO to turn this into \s-1PDF.\s0
.PP
The markup will consist of mixed content with elements wrapping pieces
of text which Vim recognized as being of a particular type.  The names of
the elements used are the ones listed in \*(L"\s-1HIGHLIGHTING TYPES\*(R"\s0.
below.
.PP
The \f(CW\*(C`<syntax>\*(C'\fR element will declare the namespace for all the
elements produced, which will be \f(CW\*(C`http://ns.laxan.com/text\-vimcolor/1\*(C'\fR.
It will also have an attribute called \f(CW\*(C`filename\*(C'\fR, which will be set to the
value returned by the \f(CW\*(C`input_filename\*(C'\fR method, if that returns something
other than undef.
.PP
The \s-1XML\s0 namespace is also available as \f(CW$Text::VimColor::NAMESPACE_ID\fR.
.SS "marked"
.IX Subsection "marked"
This output function returns the marked-up text in the format which the module
stores it in internally.  The data looks like this:
.PP
.Vb 2
\&   use Data::Dumper;
\&   print Dumper($tvc\->marked);
\&
\&   # produces
\&   $VAR1 = [
\&      [ \*(AqStatement\*(Aq, \*(Aqmy\*(Aq ],
\&      [ \*(Aq\*(Aq, \*(Aq \*(Aq ],
\&      [ \*(AqIdentifier\*(Aq, \*(Aq$syntax\*(Aq ],
\&      [ \*(Aq\*(Aq, \*(Aq = \*(Aq ],
\&       ...
\&   ];
.Ve
.PP
This method returns a reference to an array.  Each item in the
array is itself a reference to an array of two items: the first is one of
the names listed in \*(L"\s-1HIGHLIGHTING TYPES\*(R"\s0 (or an empty string if none apply),
and the second is the actual piece of text.
.SS "input_filename"
.IX Subsection "input_filename"
Returns the filename of the input file, or undef if a filename wasn't
specified.
.SS "dist_file"
.IX Subsection "dist_file"
.Vb 2
\&  my $full_path = Text::VimColor\->dist_file($file);
\&  my $xsl = $tvc\->dist_file(\*(Aqlight.xsl\*(Aq);
.Ve
.PP
Returns the path to the specified file that is part of the \f(CW\*(C`Text\-VimColor\*(C'\fR dist
(for example, \fImark.vim\fR or \fIlight.css\fR).
.PP
Can be called as an instance method or a class method.
.PP
This is a thin wrapper around \*(L"dist_file\*(R" in File::ShareDir
and is mostly for internal use.
.SH "HIGHLIGHTING TYPES"
.IX Header "HIGHLIGHTING TYPES"
The following list gives the names of highlighting types which will be
set for pieces of text.  For \s-1HTML\s0 output, these will appear as \s-1CSS\s0 class
names, except that they will all have the prefix \f(CW\*(C`syn\*(C'\fR added.  For \s-1XML\s0
output, these will be the names of elements which will all be in the
namespace \f(CW\*(C`http://ns.laxan.com/text\-vimcolor/1\*(C'\fR.
.PP
Here is the complete list:
.IP "\(bu" 4
Comment
.IP "\(bu" 4
Constant
.IP "\(bu" 4
Identifier
.IP "\(bu" 4
Statement
.IP "\(bu" 4
PreProc
.IP "\(bu" 4
Type
.IP "\(bu" 4
Special
.IP "\(bu" 4
Underlined
.IP "\(bu" 4
Error
.IP "\(bu" 4
Todo
.SH "RELATED MODULES"
.IX Header "RELATED MODULES"
These modules allow \f(CW\*(C`Text::VimColor\*(C'\fR to be used more easily in particular
environments:
.IP "\(bu" 4
Apache::VimColor
.IP "\(bu" 4
Kwiki::VimMode
.IP "\(bu" 4
Template-Plugin-VimColor
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "text-vimcolor(1)" 4
.IX Item "text-vimcolor(1)"
A simple command line interface to this module's features.  It can be used
to produce \s-1HTML\s0 and \s-1XML\s0 output,
print to the screen (like a colored \f(CWcat(1)\fR),
and can also generate \s-1PDF\s0 output using
an \s-1XSLT/XSL\-FO\s0 stylesheet and the \s-1FOP\s0 processor.
.IP "http://www.vim.org/" 4
.IX Item "http://www.vim.org/"
Everything to do with the Vim text editor.
.SH "BUGS"
.IX Header "BUGS"
Quite a few, actually:
.IP "\(bu" 4
Apparently this module doesn't always work if run from within a 'gvim'
window, although I've been unable to reproduce this so far.
\&\s-1CPAN RT\s0 #11555.
.IP "\(bu" 4
There should be a way of getting a \s-1DOM\s0 object back instead of an \s-1XML\s0 string.
.IP "\(bu" 4
It should be possible to choose between \s-1HTML\s0 and \s-1XHTML,\s0 and perhaps there
should be some control over the \s-1DOCTYPE\s0 declaration when a complete file is
produced.
.IP "\(bu" 4
With Vim versions earlier than 6.2 there is a 2 second delay each time
Vim is run.
.IP "\(bu" 4
This requires vim version 6 (it has since 2003).
There may be workarounds to support version 5 (technically 5.4+).
Upgrading vim is a much better idea, but if you need support
for older versions please file a ticket (with patches if possible).
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
option for 'set number'
.IP "\(bu" 4
make global vars available through methods
.IP "\(bu" 4
list available syntaxes? (see IkiWiki::Plugin::syntax::Vim)
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Perldoc"
.IX Subsection "Perldoc"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&  perldoc Text::VimColor
.Ve
.SS "Websites"
.IX Subsection "Websites"
The following websites have more information about this module, and may be of help to you. As always,
in addition to those websites please use your favorite search engine to discover more resources.
.IP "\(bu" 4
MetaCPAN
.Sp
A modern, open-source \s-1CPAN\s0 search engine, useful to view \s-1POD\s0 in \s-1HTML\s0 format.
.Sp
<https://metacpan.org/release/Text\-VimColor>
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests by email to \f(CW\*(C`bug\-text\-vimcolor at rt.cpan.org\*(C'\fR, or through
the web interface at <https://rt.cpan.org/Public/Bug/Report.html?Queue=Text\-VimColor>. You will be automatically notified of any
progress on the request by the system.
.SS "Source Code"
.IX Subsection "Source Code"
<https://github.com/rwstauner/Text\-VimColor>
.PP
.Vb 1
\&  git clone https://github.com/rwstauner/Text\-VimColor.git
.Ve
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
The Vim script \fImark.vim\fR is a crufted version of \fI2html.vim\fR by
Bram Moolenaar <Bram@vim.org> and
David Ne\ev{c}as (Yeti) <yeti@physics.muni.cz>.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Geoff Richards <qef@laxan.com>
.IP "\(bu" 4
Randy Stauner <rwstauner@cpan.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Geoff Richards <geoffr@cpan.org>
.IP "\(bu" 4
Hinrik Örn Sigurðsson <hinrik.sig@gmail.com>
.IP "\(bu" 4
mattn <mattn.jp@gmail.com>
.IP "\(bu" 4
Randy Stauner <randy@r4s6.net>
.IP "\(bu" 4
Shlomi Fish <shlomif@shlomifish.org>
.IP "\(bu" 4
Vyacheslav Matyukhin <mmcleric@yandex\-team.ru>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2002\-2006 by Geoff Richards.
.PP
This software is copyright (c) 2011 by Randy Stauner.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
