.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::App::ParsedArgv::Element 3"
.TH MooseX::App::ParsedArgv::Element 3 "2019-05-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::App::ParsedArgv::Element \- Parsed logical element from @ARGV
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Every instance of this class represents a logical entity from \f(CW@ARGV\fR
.SH "METHODS"
.IX Header "METHODS"
.SS "key"
.IX Subsection "key"
Parameter value or option key
.SS "value"
.IX Subsection "value"
Arrayref of values. A value is represented by a MooseX::App::ParsedArgv::Value
object.
.SS "add_value"
.IX Subsection "add_value"
Append a value
.SS "all_scalar_values"
.IX Subsection "all_scalar_values"
All values as scalars (in supplied order)
.SS "all_values"
.IX Subsection "all_values"
All values as MooseX::App::ParsedArgv::Value objects (in supplied order)
.SS "last_value"
.IX Subsection "last_value"
Last value as MooseX::App::ParsedArgv::Value object (as given by supplied order)
.SS "type"
.IX Subsection "type"
Type of element. Can be 'option', 'parameter' or 'extra'
.SS "consumed"
.IX Subsection "consumed"
Flag that indicates if element was already consumed
.SS "consume"
.IX Subsection "consume"
Consumes element. Dies if element is already consumed
.SS "serialize"
.IX Subsection "serialize"
Serializes element (Does not procuce output that is identical with original \f(CW@ARGV\fR)
.SS "original"
.IX Subsection "original"
Tries to re-create the original input
