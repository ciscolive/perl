.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::ExclusionRange 3"
.TH Infoblox::DHCP::ExclusionRange 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::ExclusionRange \- DHCP ExclusionRange object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1DHCP\s0 exclusion range describes the range of \s-1IP\s0 addresses that can be excluded in an address range. If static addresses are assigned to certain hosts in the middle of an address range, those addresses can be excluded from the address range so the \s-1DHCP\s0 server does not assign those \s-1IP\s0 addresses to clients.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 5
\& my $exclusion_range = Infoblox::DHCP::ExclusionRange\->new(
\&       end_address   => $ipv4addr,      #Required
\&       start_address => $ipv4addr,      #Required
\&       comment       => $string,        #Optional / Default is empty
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to apply to a \s-1DHCP\s0 exclusion range object.
.SS "Infoblox::DHCP::Range\->exclude( )"
.IX Subsection "Infoblox::DHCP::Range->exclude( )"
.RS 4
Use this function to specify exclusion range for the \s-1DHCP\s0 range. See Infoblox::DHCP::Range\->\fBexclude()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Construct a DHCP ExclusionRange object
\& my $exclusion_range = Infoblox::DHCP::ExclusionRange\->new(
\&          end_address   => "10.0.0.8",
\&          start_address => "10.0.0.5",
\&          comment       => "Exclude four IP addresses"
\& );
\&
\& # Configure DHCP ExclusionRange on the DHCP Range object
\& my $response = $dhcp_range\->exclude([$exclusion_range]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 exclusion range object.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment of a \s-1DHCP\s0 exclusion range object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $exclusion_range\->comment();
\& #Modify comment
\& $exclusion_range\->comment("Modifying the DHCP exclusion range comment");
.Ve
.RE
.RS 4
.RE
.SS "end_address( )"
.IX Subsection "end_address( )"
.RS 4
Use this method to set or retrieve the end address of a \s-1DHCP\s0 exclusion range object.
.Sp
An end address is the last \s-1IP\s0 address in the \s-1DHCP\s0 exclusion range which is not available for the clients.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the end address of the \s-1DHCP\s0 exclusion range in IPv4 address format. An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get end_address
\& my $end_address = $exclusion_range\->end_address();
\& #Modify end_address
\& $exclusion_range\->end_address("10.0.0.9");
.Ve
.RE
.RS 4
.RE
.SS "start_address( )"
.IX Subsection "start_address( )"
.RS 4
Use this method to set or retrieve the start address of a \s-1DHCP\s0 exclusion range object.
.Sp
A start address is the first \s-1IP\s0 address in the \s-1DHCP\s0 exclusion range which is not available for the clients.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the start address of the \s-1DHCP\s0 exclusion range in IPv4 address format. An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get start_address
\& my $start_address = $exclusion_range\->start_address();
\& #Modify start_address
\& $exclusion_range\->start_address("10.0.0.6");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a \s-1DHCP\s0 exclusion range object such as add, modify, and remove. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 exclusion range object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the Network object
\& my $network = Infoblox::DHCP::Network\->new(
\&     network => "10.0.0.0/8",
\&     comment => "add network",
\& );
\& unless($network) {
\&        die("Construct Network object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network object created successfully\en";
\&
\& #Add the Network object into the Infoblox appliance through a session
\& $session\->add($network)
\&     or die("Add Network object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object added to Infoblox appliance successfully\en";
\&
\& #Create the DHCP Range object
\& my $dhcp_range = Infoblox::DHCP::Range\->new(
\&         end_addr   => "10.0.0.10",
\&         network    => "10.0.0.0/8",
\&         start_addr => "10.0.0.1",
\& );
\& unless($dhcp_range) {
\&        die("Construct DHCP Range object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Range object created successfully\en";
\&
\& #Add the DHCP Range object into the Infoblox appliance through a session
\& $session\->add($dhcp_range)
\&     or die("Add DHCP Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range object added to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 exclusion range object\fR
.PP
.Vb 10
\& my $exclusion_range = Infoblox::DHCP::ExclusionRange\->new(
\&          end_address   => "10.0.0.8",
\&          start_address => "10.0.0.5",
\&          comment       => "Exclude four IP addresses"
\& );
\& unless($exclusion_range) {
\&        die("Construct DHCP exclusion range object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP exclusion range object created successfully\en";
.Ve
.PP
\&\fB#Add \s-1DHCP\s0 exclusion range to \s-1DHCP\s0 Range\fR
.PP
.Vb 11
\& #Get the DHCP Range object
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DHCP::Range",
\&     start_addr => "10.0.0.1"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP Range object found at least 1 matching entry\en";
\&
\& #Apply the changes to the DHCP Range object
\& $object\->exclude([$exclusion_range]);
\&
\& #Submit the changes to the Session
\& $session\->modify($object)
\&     or die("Adding DHCP exclusion range to DHCP Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range with exclusion range updated to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Modify \s-1DHCP\s0 exclusion range\fR
.PP
.Vb 2
\& #Modifying the end address of the DHCP exclusion range object.
\& $exclusion_range\->end_address("10.0.0.9");
\&
\& #Modifying the start address of the DHCP exclusion range object.
\& $exclusion_range\->start_address("10.0.0.6");
\&
\& #Modifying the comment of the DHCP exclusion range object.
\& $exclusion_range\->comment("Modified DHCP Exclusion Range");
\&
\& #Apply changes to the DHCP Range object.
\& $object\->exclude([$exclusion_range]);
\&
\& #Update DHCP Range object through the Infoblox session.
\& $session\->modify($object)
\&   or die("Modify DHCP Range object failed: ",
\&   $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Range object with modified DHCP exclusion range updated to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Remove \s-1DHCP\s0 exclusion range\fR
.PP
.Vb 2
\& #Remove the exclusion range from the DHCP Range object.
\& $object\->exclude([]);
\&
\& #Update DHCP Range object through the Infoblox session.
\& $session\->modify($object)
\&   or die("Modify DHCP Range object failed: ",
\&   $session\->status_code() . ":" . $session\->status_detail());
\& print "Removed DHCP exclusion range from DHCP Range successfully\en";
.Ve
.PP
####PROGRAM ENDS####
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBadd()\fR,Infoblox::Session\->\fBget()\fR,Infoblox::Session\->\fBmodify()\fR,Infoblox::DHCP::Range,Infoblox::DHCP::Network
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
