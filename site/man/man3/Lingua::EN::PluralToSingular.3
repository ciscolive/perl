.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Lingua::EN::PluralToSingular 3"
.TH Lingua::EN::PluralToSingular 3 "2018-06-21" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Lingua::EN::PluralToSingular \- change an English plural to a singular
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\&    use Lingua::EN::PluralToSingular qw/to_singular is_plural/;
\&    my @words = qw/knives sheep dog dogs cannabis/;
\&    for my $word (@words) {
\&        if (is_plural ($word)) {
\&            my $sing = to_singular ($word);
\&            print "The singular of \*(Aq$word\*(Aq is \*(Aq$sing\*(Aq.\en";
\&        }
\&        else {
\&            print "\*(Aq", ucfirst ($word), "\*(Aq is not plural.\en";
\&        }
\&    }
.Ve
.PP
produces output
.PP
.Vb 5
\&    The singular of \*(Aqknives\*(Aq is \*(Aqknife\*(Aq.
\&    The singular of \*(Aqsheep\*(Aq is \*(Aqsheep\*(Aq.
\&    \*(AqDog\*(Aq is not plural.
\&    The singular of \*(Aqdogs\*(Aq is \*(Aqdog\*(Aq.
\&    \*(AqCannabis\*(Aq is not plural.
.Ve
.PP
(This example is included as \fIsynopsis.pl\fR <https://fastapi.metacpan.org/source/BKB/JSON-Parse-0.21/examples/synopsis.pl> in the distribution.)
.SH "VERSION"
.IX Header "VERSION"
This documents Lingua::EN::PluralToSingular version 0.21
corresponding to git commit 2d53254eeaec8d2006655f63f61b4f6868e81153 <https://github.com/benkasminbullock/Lingua-EN-PluralToSingular/commit/2d53254eeaec8d2006655f63f61b4f6868e81153> released on Thu Jun 21 17:48:56 2018 +0900.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This converts words denoting a plural in the English language into
words denoting a singular noun.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "to_singular"
.IX Subsection "to_singular"
.Vb 1
\&    my $singular = to_singular ($word);
.Ve
.PP
Convert \f(CW$word\fR into its singular form. For example,
.PP
.Vb 1
\&    to_singular (\*(Aqcats\*(Aq)
.Ve
.PP
returns 'cat'. If the word is unknown or does not seem to be
plural, \f(CW\*(C`to_singular\*(C'\fR returns the word itself, so
.PP
.Vb 1
\&    to_singular (\*(Aqbattlehorn\*(Aq);
.Ve
.PP
returns 'battlehorn'.
.SS "is_plural"
.IX Subsection "is_plural"
.Vb 6
\&    if (is_plural ($word)) {
\&        print "There are too many $word here.\en";
\&    }
\&    else {
\&        print "There is a $word here.\en";
\&    }
.Ve
.PP
Returns 1 if the word is a valid plural, 0 if not. It also returns 1
for ambiguous words like \*(L"sheep\*(R".
.SH "LIMITATIONS AND CAVEATS"
.IX Header "LIMITATIONS AND CAVEATS"
.SS "Assumes the input is a noun"
.IX Subsection "Assumes the input is a noun"
\&\*(L"to_singular\*(R" assumes its input is a noun. For example, \*(L"lives\*(R" may
be the plural of \*(L"life\*(R", or the verb \*(L"live\*(R", as in \*(L"he lives\*(R". The
routine assumes a noun and converts to \*(L"life\*(R".
.SS "Distinguishes lower and upper case"
.IX Subsection "Distinguishes lower and upper case"
It does not deal with capitalized words. If the input word may be
capitalized, or if its initial letter may be capitalized, the user
must preprocess it to put it into the normal case. So, for example,
.PP
.Vb 1
\&    to_singular (\*(AqFLIES\*(Aq);
.Ve
.PP
returns '\s-1FLIES\s0' and
.PP
.Vb 1
\&    to_singular (\*(AqWolves\*(Aq);
.Ve
.PP
returns 'Wolve'. Similarly,
.PP
.Vb 1
\&    to_singular (\*(AqCharles\*(Aq);
.Ve
.PP
returns 'Charles', but
.PP
.Vb 1
\&    to_singular (\*(Aqcharles\*(Aq);
.Ve
.PP
returns 'charle', since the exception only applies if the word is
capitalized.
.SS "Does not handle pronouns"
.IX Subsection "Does not handle pronouns"
The module does not attempt to handle pronoun forms like \*(L"ourselves\*(R"
or \*(L"themselves\*(R". These words are left unaltered.
.SS "False plurals also accepted"
.IX Subsection "False plurals also accepted"
For the sake of user convenience, false plurals like \*(L"octopi\*(R" are also
accepted by the module. (The plural of \*(L"octopus\*(R" is \*(L"octopuses\*(R".)
.SS "Not all exceptional plurals are included"
.IX Subsection "Not all exceptional plurals are included"
There are many exceptions which have not been included, notably words
with Latin or Greek plurals.
.SH "STANDALONE SCRIPT"
.IX Header "STANDALONE SCRIPT"
The script \fIscripts/singular\fR provides a quick way to get singular
versions of nouns:
.PP
.Vb 2
\&    singular cats dogs geese
\&    # Prints "cat dog goose".
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Lingua::EN::Inflect" 4
.IX Item "Lingua::EN::Inflect"
Lingua::EN::Inflect by Damian Conway converts English singular
nouns to plurals, but not vice-versa.
.IP "Lingua::EN::Inflect::Number" 4
.IX Item "Lingua::EN::Inflect::Number"
Lingua::EN::Inflect::Number is supposed to do the same thing as
this module. However, as of the time of writing (version 1.12) it's
actually based on the third-person verb handling of
Lingua::EN::Inflect, in other words it takes a verb in the \*(L"he says\*(R"
form and converts it into \*(L"say\*(R". Thus you get bugs like
<https://rt.cpan.org/Public/Bug/Display.html?id=64564> where the
reporter demonstrates that 'to_S incorrectly renders the singular of
\&\*(L"statuses\*(R" as \*(L"statuse.\*(R"'
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to Xan Charbonnet and H2CHANG for various additions and fixes.
Lisa Hare contributed support for plurals ending in i as part of the
2016 Pull Request Challenge.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ben Bullock, <bkb@cpan.org>
.SH "COPYRIGHT & LICENCE"
.IX Header "COPYRIGHT & LICENCE"
This package and associated files are copyright (C) 
2011\-2018
Ben Bullock.
.PP
You can use, copy, modify and redistribute this package and associated
files under the Perl Artistic Licence or the \s-1GNU\s0 General Public
Licence.
