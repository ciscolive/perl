.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTTP::AcceptLanguage 3"
.TH HTTP::AcceptLanguage 3 "2013-10-17" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTTP::AcceptLanguage \- Accept\-Language header parser and find available language
.SH "HOW DO I USE THIS MODULE WITH"
.IX Header "HOW DO I USE THIS MODULE WITH"
.SS "\s-1WITH CGI\s0.pm"
.IX Subsection "WITH CGI.pm"
.Vb 2
\&  use HTTP::AcceptLanguage;
\&  my $lang = HTTP::AcceptLanguage\->new($ENV{HTTP_ACCEPT_LANGUAGE})\->match(qw/ en fr es ja zh\-tw /);
.Ve
.SS "\s-1WITH\s0 raw \s-1PSGI\s0"
.IX Subsection "WITH raw PSGI"
.Vb 2
\&  use HTTP::AcceptLanguage;
\&  my $lang = HTTP::AcceptLanguage\->new($env\->{HTTP_ACCEPT_LANGUAGE})\->match(qw/ en fr es ja zh\-tw /);
.Ve
.SS "\s-1WITH\s0 Plack::Request"
.IX Subsection "WITH Plack::Request"
.Vb 2
\&  use HTTP::AcceptLanguage;
\&  my $lang = HTTP::AcceptLanguage\->new($req\->header(\*(AqAccept\-Language\*(Aq))\->match(qw/ en fr es ja zh\-tw /);
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Good example of the input and output.
.PP
.Vb 4
\&  # If language quality is the same then order by match method\*(Aqs input list
\&  my $accept_language = HTTP::AcceptLanguage\->new(\*(Aqen;q=0.5, ja;q=0.1\*(Aq);
\&  $accept_language\->match(qw/ th da ja /); # \-> ja
\&  $accept_language\->match(qw/ en ja /);    # \-> en
\&
\&  my $accept_language = HTTP::AcceptLanguage\->new(\*(Aqen, da\*(Aq);
\&  $accept_language\->match(qw/ da en /); # \-> en
\&  $accept_language\->match(qw/ en da /); # \-> en
.Ve
.PP
You can obtain the order of preference of the available languages XXlist of client
.PP
.Vb 2
\&  my $accept_language = HTTP::AcceptLanguage\->new(\*(Aqen, ja;q=0.3, da;q=1, *;q=0.29, ch\-tw\*(Aq);
\&  $accept_language\->languages; # \-> en, da, ch\-tw, ja, *
.Ve
.PP
You can use the 0.01 version spec. (next version is deplicated)
.PP
.Vb 1
\&  local $HTTP::AcceptLanguage::MATCH_PRIORITY_0_01_STYLE = 1;
\&  
\&  my $accept_language = HTTP::AcceptLanguage\->new(\*(Aqen, da\*(Aq);
\&  $accept_language\->match(qw/ da en /); # \-> da
\&  $accept_language\->match(qw/ en da /); # \-> en
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
HTTP::AcceptLanguage is \s-1HTTP\s0 Accept-Language header parser And you can find available language by Accept-Language header.
.SH "METHODS"
.IX Header "METHODS"
.SS "new($ENV{\s-1HTTP_ACCEPT_LANGUAGE\s0})"
.IX Subsection "new($ENV{HTTP_ACCEPT_LANGUAGE})"
It to specify a string of Accept-Language header.
.SS "match(@available_language)"
.IX Subsection "match(@available_language)"
By your available language list, returns the most optimal language.
.PP
If language-quality has the same value, is a priority order of the new($ENV{\s-1HTTP_ACCEPT_LANGUAGE\s0}).
.SS "languages"
.IX Subsection "languages"
Returns are arranged in order of quality language list parsed.
.SH "AUTHOR"
.IX Header "AUTHOR"
Kazuhiro Osawa <yappo {at} shibuya {dot} pl>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2013\- Kazuhiro Osawa
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1RFC2616,\s0 I18N::AcceptLanguage
