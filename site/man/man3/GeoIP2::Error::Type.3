.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "GeoIP2::Error::Type 3"
.TH GeoIP2::Error::Type 3 "2019-06-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GeoIP2::Error::Type \- A type validation error.
.SH "VERSION"
.IX Header "VERSION"
version 2.006002
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use 5.008;
\&
\&  use GeoIP2::WebService::Client;
\&  use Scalar::Util qw( blessed );
\&  use Try::Tiny;
\&
\&  my $client = GeoIP2::WebService::Client\->new(
\&      account_id  => 42,
\&      license_key => \*(Aqabcdef123456\*(Aq,
\&  );
\&
\&  try {
\&      $client\->insights( ip => \*(Aq24.24.24.24\*(Aq );
\&  }
\&  catch {
\&      die $_ unless blessed $_;
\&      if ( $_\->isa(\*(AqGeoIP2::Error::Type\*(Aq) ) {
\&          log_validation_error(
\&              type   => $_\->name(),
\&              value  => $_\->value(),
\&          );
\&      }
\&
\&      # handle other exceptions
\&  };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class represents a Moo type validation error. It extends
Throwable::Error and adds attributes of its own.
.SH "METHODS"
.IX Header "METHODS"
The \f(CW\*(C`$error\->message()\*(C'\fR, and \f(CW\*(C`$error\->stack_trace()\*(C'\fR methods are
inherited from Throwable::Error. It also provide two methods of its own:
.ie n .SS "$error\->\fBname()\fP"
.el .SS "\f(CW$error\fP\->\fBname()\fP"
.IX Subsection "$error->name()"
Returns the name of the type which failed validation.
.ie n .SS "$error\->\fBvalue()\fP"
.el .SS "\f(CW$error\fP\->\fBvalue()\fP"
.IX Subsection "$error->value()"
Returns the value which triggered the validation failure.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through <https://github.com/maxmind/GeoIP2\-perl/issues>.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Dave Rolsky <drolsky@maxmind.com>
.IP "\(bu" 4
Greg Oschwald <goschwald@maxmind.com>
.IP "\(bu" 4
Mark Fowler <mfowler@maxmind.com>
.IP "\(bu" 4
Olaf Alders <oalders@maxmind.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 \- 2019 by MaxMind, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
