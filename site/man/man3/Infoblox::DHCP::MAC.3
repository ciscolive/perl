.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::MAC 3"
.TH Infoblox::DHCP::MAC 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::MAC \- DHCP MAC object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1MAC\s0 Address is a unique hardware identifier. The Infoblox device can filter address requests by the \s-1MAC\s0 address of a requesting hosts. The filter instructs the Infoblox device either to grant or deny an address request if the requesting host matches the filter. Also, it is possible configure specific \s-1MAC\s0 addresses within a filter to expire after a certain amount of time has passed.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $mac = Infoblox::DHCP::MAC\->new(
\&       filter                => $string,        #Required
\&       mac                   => $mac_addr,      #Required
\&       authentication_time   => $num,           #Optional / Default is empty
\&       comment               => $string,        #Optional / Default is empty
\&       expiration_time       => $num,           #Optional / Default is 0 for never expire
\&       extattrs              => { $string => $extattr, ... },      #Optional / Default is undefined
\&       extensible_attributes => { $string => $string | $num, $string => [ $string | $num, ... ], ... }, #Optional / Default is undefined
\&       guest_custom_field1   => $string,        #Optional / Default is empty
\&       guest_custom_field2   => $string,        #Optional / Default is empty
\&       guest_custom_field3   => $string,        #Optional / Default is empty
\&       guest_custom_field4   => $string,        #Optional / Default is empty
\&       guest_email           => $string,        #Optional / Default is empty
\&       guest_first_name      => $string,        #Optional / Default is empty
\&       guest_last_name       => $string,        #Optional / Default is empty
\&       guest_middle_name     => $string,        #Optional / Default is empty
\&       guest_phone           => $string,        #Optional / Default is empty
\&       is_registered_user    => "true" | "false", #Optional / Default is "true"
\&       reserved_for_infoblox => $string,        #Optional / Default is "false"
\&       username              => $string,        #Optional / Default is empty
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DHCP MAC\s0 object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP MAC\s0  object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 12
\& #Construct a DHCP MAC object
\& my $mac = Infoblox::DHCP::MAC\->new(
\&            "mac"                   => "00:00:00:00:00:03",
\&            "filter"                => "new",
\&            "comment"               => "dhcp mac object",
\&            "expiration_time"       => "0",
\&            "username"              => "infoblox_user",
\&            "authentication_time"   => "0",
\&            "reserved_for_infoblox" => "For Infoblox Use only",
\& );
\& #Submit for addition
\& my $response = $session\->add($mac)
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP MAC object:
\&
\&  mac    \- Optional. MAC address of the DHCP MAC object.
\&  filter \- Optional. MAC filter name.
\&  comment  \- Optional. A comment in string format.
\&  username \- Optional. Username of the DHCP MAC object.
\&  fingerprint \- Optional. DHCP fingerprint description.
\&  extattrs \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get DHCP MAC object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::MAC",
\&     mac    => "00:00:00:00:00:03",
\&     filter => "new",
\& );
\&
\& # get all objects with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object                => "Infoblox::DHCP::MAC",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP MAC\s0 object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the expiration time.
\& $mac\->expiration_time("1234567890");
\& #Submit modification
\& my $response = $session\->modify( $mac );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1DHCP MAC\s0 object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific \s-1DHCP MAC\s0 object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get DHCP MAC object through the session
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DHCP::MAC",
\&     mac        => "00:00:00:00:00:03",
\&     filter     => "new",
\& );
\& #Find the desired object from the retrieved list.
\& my $desired_mac = $retrieved_objs[0];
\& #Submit for removal
\& my $response = $session\->remove( $desired_mac );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DHCP MAC\s0 objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a specific DHCP MAC Address object:
\&
\&  comment  \- Optional. A comment in string format (regular expression).
\&  mac      \- Optional. MAC address of the DHCP MAC object (regular expression).
\&  username \- Optional. Username of the DHCP MAC object (regular expression).
\&  filter   \- Optional. MAC address filter name (regular expression).
\&  fingerprint \- Optional. DHCP fingerprint description (regular expression).
\&  extattrs \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # search for all DHCP MAC objects that are specified in the "new" MAC filter.
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DHCP::MAC",
\&     mac    => "00:00:00:00:00.*",
\&     filter => "new"
\& );
\&
\& # search all DHCP MAC associations with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DHCP::MAC",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a \s-1DHCP MAC\s0 object.
.SS "authentication_time( )"
.IX Subsection "authentication_time( )"
.RS 4
Use this method to set or retrieve the authentication time. Indicates the time when the \s-1MAC\s0 address was first authenticated.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The absolute \s-1UNIX\s0 time (seconds since \s-1UNIX\s0 epoch) when the address was authenticated. The maximum value can extend upto 4294967295.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get authentication_time
\& my $authentication_time = $mac\->authentication_time();
\& #Modify authentication_time
\& $mac\->authentication_time("1234567890");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $mac\->comment();
\& #Modify comment
\& $mac\->comment("Modified DHCP MAC comment");
.Ve
.RE
.RS 4
.RE
.SS "expired( )"
.IX Subsection "expired( )"
.RS 4
Use this method to retrieve the expired flag of the \s-1DHCP MAC\s0 object .
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get expired
\& my $expired = $mac\->expired();
.Ve
.RE
.RS 4
.RE
.SS "expiration_time( )"
.IX Subsection "expiration_time( )"
.RS 4
Use this method to set or retrieve the expiration time of the \s-1DHCP MAC\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
By default, the \s-1MAC\s0 address never expires; otherwise, it is the absolute \s-1UNIX\s0 time (seconds since \s-1UNIX\s0 epoch) when the address expires. The maximum value can extend upto 4294967295.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get expiration_time
\& my $expiration_time = $mac\->expiration_time();
\& #Modify expiration_time
\& $mac\->expiration_time("1234567890");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP MAC\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $mac\->extattrs();
\& #Modify extattrs
\& $mac\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP MAC\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $mac\->extensible_attributes();
\& #Modify extensible attributes
\& $mac\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "fingerprint( )"
.IX Subsection "fingerprint( )"
.RS 4
Use this method to retrieve the description of the \s-1DHCP\s0 fingerprint of a \s-1DHCP MAC\s0 object. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get fingerprint
\& my $fingerprint = $mac\->fingerprint();
.Ve
.RE
.RS 4
.RE
.SS "guest_custom_field1 ( )"
.IX Subsection "guest_custom_field1 ( )"
.RS 4
Use this method to set or retrieve the value in Custom Field 1 of the guest registration page of this \s-1DHCP MAC\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string. The default value is undefined. The maximum length is 1023 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting guest_custom_field1
\&   my $guest_custom_field1 = $dhcp\->guest_custom_field1();
\&   #Modifying guest_custom_field1
\&   $dhcp\->guest_custom_field1(\*(AqCustom value 1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "guest_custom_field2 ( )"
.IX Subsection "guest_custom_field2 ( )"
.RS 4
Use this method to set or retrieve the value in Custom Field 2 of the guest registration page of this \s-1DHCP MAC\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string. The default value is undefined. The maximum length is 1023 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting guest_custom_field2
\&   my $guest_custom_field2 = $dhcp\->guest_custom_field2();
\&   #Modifying guest_custom_field2
\&   $dhcp\->guest_custom_field2(\*(AqCustom value 2\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "guest_custom_field3 ( )"
.IX Subsection "guest_custom_field3 ( )"
.RS 4
Use this method to set or retrieve the value in Custom Field 3 of the guest registration page of this \s-1DHCP MAC\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string. The default value is undefined. The maximum length is 1023 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting guest_custom_field3
\&   my $guest_custom_field3 = $dhcp\->guest_custom_field3();
\&   #Modifying guest_custom_field3
\&   $dhcp\->guest_custom_field3(\*(AqCustom value 3\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "guest_custom_field4 ( )"
.IX Subsection "guest_custom_field4 ( )"
.RS 4
Use this method to set or retrieve the value in Custom Field 4 of the guest registration page of this \s-1DHCP MAC\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string. The default value is undefined. The maximum length is 1023 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting guest_custom_field4
\&   my $guest_custom_field4 = $dhcp\->guest_custom_field4();
\&   #Modifying guest_custom_field4
\&   $dhcp\->guest_custom_field4(\*(AqCustom value 4\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "guest_email ( )"
.IX Subsection "guest_email ( )"
.RS 4
Use this method to set or retrieve the email address in the Email field of the guest registration page of this \s-1DHCP MAC\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string. The default value is undefined. The maximum length is 128 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting guest_email
\&   my $guest_email = $dhcp\->guest_email();
\&   #Modifying guest_email
\&   $dhcp\->guest_email(\*(Aquser@domain.com\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "guest_first_name ( )"
.IX Subsection "guest_first_name ( )"
.RS 4
Use this method to set or retrieve the entry in the First Name field of the guest registration page of this \s-1DHCP MAC\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string. The default value is undefined. The maximum length is 1023 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting guest_first_name
\&   my $guest_first_name = $dhcp\->guest_first_name();
\&   #Modifying guest_first_name
\&   $dhcp\->guest_first_name(\*(AqJohn\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "guest_last_name ( )"
.IX Subsection "guest_last_name ( )"
.RS 4
Use this method to set or retrieve the entry in the Last Name field of the guest registration page of this \s-1DHCP MAC\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string. The default value is undefined. The maximum length is 1023 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting guest_last_name
\&   my $guest_last_name = $dhcp\->guest_last_name();
\&   #Modifying guest_last_name
\&   $dhcp\->guest_last_name(\*(AqDoe\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "guest_middle_name ( )"
.IX Subsection "guest_middle_name ( )"
.RS 4
Use this method to set or retrieve the entry in the Middle Name field of the guest registration page of this \s-1DHCP MAC\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string. The default value is undefined. The maximum length is 1023 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting guest_middle_name
\&   my $guest_middle_name = $dhcp\->guest_middle_name();
\&   #Modifying guest_middle_name
\&   $dhcp\->guest_middle_name(\*(AqRobert\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "guest_phone ( )"
.IX Subsection "guest_phone ( )"
.RS 4
Use this method to set or retrieve the entry in the Phone field of the guest registration page of this \s-1DHCP MAC\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a string. The default value is undefined. The maximum length is 1023 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting guest_phone
\&   my $guest_phone = $dhcp\->guest_phone();
\&   #Modifying guest_phone
\&   $dhcp\->guest_phone(\*(Aq1\-555\-555\-5555\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "filter( )"
.IX Subsection "filter( )"
.RS 4
Use this method to set or retrieve the filter value of the \s-1DHCP MAC\s0 object .
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Name of the \s-1DHCP MAC\s0 filter. Maximum length upto 1024 bytes is supported.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get filter
\& my $filter = $mac\->filter();
\& #Modify filter
\& $mac\->filter("filter1");
.Ve
.RE
.RS 4
.RE
.SS "mac( )"
.IX Subsection "mac( )"
.RS 4
Use this method to set or retrieve the \s-1MAC\s0 address of the \s-1DHCP MAC\s0 object .
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
\&\s-1MAC\s0 Address of the \s-1DHCP MAC\s0 object. Format for the hexadecimal strings for \s-1MAC\s0 addresses and vendor prefixes with colons or dashes. Both of the following formats are acceptable: 11:11:11:11:11:11 and 11\-11\-11\-11\-11\-11.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get mac
\& my $mac_value = $mac\->mac();
\& #Modify mac
\& $mac\->mac("00:00:00:11:11:11");
.Ve
.RE
.RS 4
.RE
.SS "is_registered_user( )"
.IX Subsection "is_registered_user( )"
.RS 4
Use this method to set or retrieve the is_registered_user flag of the \s-1DHCP MAC\s0 object. If this flag is \*(L"false\*(R", then this \s-1DHCP MAC\s0 object represents a \*(L"Guest\*(R" registration.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the is_registered_user flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get is_registered_user
\& my $is_registered_user = $mac\->is_registered_user()
\& # Modify is_registered_user
\& $mac\->is_registered_user("true");
.Ve
.RE
.RS 4
.RE
.SS "reserved_for_infoblox( )"
.IX Subsection "reserved_for_infoblox( )"
.RS 4
Set this flag to reserve the \s-1MAC\s0 address for an Infoblox appliance.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Reserved to write comment related to this particular \s-1MAC\s0 address. Comment cannot exceed 1024 bytes long.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get reserved_for_infoblox
\& my $reserved_for_infoblox = $mac\->reserved_for_infoblox();
\& #Modify reserved_for_infoblox
\& $mac\->reserved_for_infoblox("reserved for Infoblox");
.Ve
.RE
.RS 4
.RE
.SS "username( )"
.IX Subsection "username( )"
.RS 4
Use this method to set or retrieve the user name  of the \s-1DHCP MAC\s0 object .
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
User name of the \s-1DHCP MAC\s0 object. Used for authenticated \s-1DHCP\s0 purposes. Maximum of 128 characters supported.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get username
\& my $username = $mac\->username();
\& #Modify username
\& $mac\->username("user_infoblox");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP MAC\s0 object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create a DHCP MAC Filter object
\& my $macfilter = Infoblox::DHCP::Filter::MAC\->new ( "name" => "mac_filter");
\&
\& unless($macfilter) {
\&      die("Construct mac filter failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "MAC Filter object created successfully\en";
\&
\& #Verify if the DHCP MAC Filter exists in the Infoblox appliance
\& my $object = $session\->get(object => "Infoblox::DHCP::Filter::MAC", name => "mac_filter");
\& unless ($object) {
\&    print "mac filter does not exist on server, safe to add the mac filter\en";
\&    $session\->add($macfilter)
\&       or die("Add mac filter failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "DHCP MAC Filter added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP MAC\s0 object\fR
.PP
.Vb 9
\& my $mac = Infoblox::DHCP::MAC\->new(
\&            "mac"                   => "00:00:00:00:00:01",
\&            "filter"                => "mac_filter",
\&            "comment"               => "dhcp mac object",
\&            "expiration_time"       => "0",
\&            "username"              => "infoblox_user",
\&            "authentication_time"   => "0",
\&            "reserved_for_infoblox" => "For Infoblox Use only",
\& );
\&
\& unless($mac) {
\&             die("Construct MAC object failed: ",
\&                   Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "MAC Address object created successfully\en";
\&
\& #Add the MAC Address object into the Infoblox appliance through a session
\& $session\->add($mac)
\&      or die("Add MAC Address object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP MAC Address object added successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DHCP MAC\s0 Address object\fR
.PP
.Vb 5
\& #Search for all DHCP MAC address objects
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DHCP::MAC",
\&     filter => "mac_filter" );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search for MAC Address object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search MAC Address object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1MAC\s0 Address object\fR
.PP
.Vb 11
\& #Get MAC Address object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::MAC",
\&     mac    => "00:00:00:00:00:01",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get MAC Address object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get MAC Address object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the obtained MAC Address object
\& $object\->expiration_time("1234567890");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify MAC Address object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "MAC Address object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1MAC\s0 Address object\fR
.PP
.Vb 12
\& #Get MAC Address object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::MAC",
\&     mac    => "00:00:00:00:00:01",
\&     filter => "mac_filter",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get MAC Address object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get MAC Address object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove MAC Address object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "MAC Address object removed successfully \en";
\&
\& #Submit the MAC Address Filter object for removal
\& $session\->remove($macfilter)
\&     or die("Remove MAC Address Filter object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "MAC Address Filter object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::RelayAgent, Infoblox::DHCP::Lease,Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
