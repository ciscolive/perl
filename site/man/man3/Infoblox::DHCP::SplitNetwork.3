.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::SplitNetwork 3"
.TH Infoblox::DHCP::SplitNetwork 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::SplitNetwork \- Split network object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Once a network is created for \s-1DHCP,\s0 smaller subnetworks can be configured with larger netmasks. A larger netmask defines a larger number of network addresses and a smaller number of host addresses. Using Infoblox split network feature, the parent network can be split into multiple smaller networks without configuring each of the newly-created networks.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 7
\& my $split_network = Infoblox::DHCP::SplitNetwork\->new(
\&             network                 => $Network|$IPv6Network,   #Required
\&             prefix                  => $num,                    #Required
\&             add_all_subnetworks     => "true" | "false",        #Optional / Default is "false"
\&             auto_create_reversezone => "true" | "false",        #Optional / Default is "false"
\&             prefix_collector_ipv6_network_addr => $string,      #Optional / Default is undefined
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that can be applied to a split network object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct an object
\& my $network = Infoblox::DHCP::Network\->new(
\&                             network => "10.0.0.0/8",
\&                             comment => "add network",
\&                             );
\&
\& my $split_network = Infoblox::DHCP::SplitNetwork\->new (
\&                        network                 => $network,
\&                        prefix                  => 12,
\&                        add_all_subnetworks     => "true",
\&                        );
\& #Submit for addition
\& my $response = $session\->add( $split_network );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute value of a split network object.
.SS "add_all_subnetworks( )"
.IX Subsection "add_all_subnetworks( )"
.RS 4
Use this method to set the add_all_subnetworks flag. If this flag is set, then  all possible subnetworks will be added otherwise only networks with fixed  addresses will be added.
.Sp
Include the specific parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set add_all_subnetworks flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set add_all_subnetworks
\& $split_network\->add_all_subnetworks("true");
.Ve
.RE
.RS 4
.RE
.SS "auto_create_reversezone( )"
.IX Subsection "auto_create_reversezone( )"
.RS 4
Use this method to set the auto_create_reversezone flag. When set, this flag will automatically create reverse-mapping zones for the subnets.
.Sp
Include the specified parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set auto_create_reversezone flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set auto_create_reversezone
\& $split_network\->auto_create_reversezone("true");
.Ve
.RE
.RS 4
.RE
.SS "network( )"
.IX Subsection "network( )"
.RS 4
Use this method to specify the network to be split.
.Sp
Include the specified parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are  Infoblox::DHCP::Network or Infoblox::DHCP::IPv6Network objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Specify network
\& my $network = Infoblox::DHCP::Network\->new(
\&                      network => "10.0.0.0/8",
\&                      comment => "add network",
\&                      );
\&
\& $split_network\->network($network);
\&
\& #Specify ipv6 network
\& my $network = Infoblox::DHCP::IPv6Network\->new(
\&                      network => "10::/48",
\&                      comment => "add network",
\&                      );
\&
\& $split_network\->network($network);
.Ve
.RE
.RS 4
.RE
.SS "prefix( )"
.IX Subsection "prefix( )"
.RS 4
Use this method to specify the appropriate subnet mask for each subnet created after splitting the network.
.Sp
Include the specified parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Number with the subnet mask value. This value must be 1 greater than the subnet mask of the network to be split. The maximum value is 31
for IPv4 network or 127 for IPv6 network.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Specify prefix
\& $split_network\->prefix(16);
.Ve
.RE
.RS 4
.RE
.SS "prefix_collector_ipv6_network_addr( )"
.IX Subsection "prefix_collector_ipv6_network_addr( )"
.RS 4
Use this method to specify the network that contains the \s-1DHCP\s0 IPv6FixedAddress and IPv6Range objects whose address_type is '\s-1PREFIX\s0' after a network is split.
.Sp
Include the specified parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an IPv6 network address in string format and without any prefix bits appended.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Set prefix_collector_ipv6_network_addr( )
\& $split_network\->prefix_collector_ipv6_network_addr("2001::");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the split network operation. Also this sample code includes error handling for the operations.
.PP
\&\fB#Preparation prior to splitting a network\fR
.PP
.Vb 2
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully.\en";
\&
\& #Create network prior to splitting the network
\& my $network = Infoblox::DHCP::Network\->new(
\&                             network => "20.0.0.0/8",
\&                             comment => "add network",
\&                             );
\& unless($network){
\&        die("Construct network object fail: ",
\&                Infoblox::status_code(). ":" .Infoblox::status_detail());
\&        }
\&
\& print"Network object created successfully.\en";
\&
\& #Verify if the network exists
\& my $object = $session\->get(
\&                object  => "Infoblox::DHCP::Network",
\&                network => "20.0.0.0/8"
\&                );
\& unless($object){
\&        print"Network does not exist on server, safe to add the network.\en";
\&        $session\->add($network)
\&                or die("Add network failed: ",
\&                        $session\->status_code(). ":" .$session\->status_detail());
\&        }
\&
\& print"Network added successfully.\en";
.Ve
.PP
\&\fB#Split the network\fR
.PP
.Vb 10
\& my $split_network = Infoblox::DHCP::SplitNetwork\->new (
\&                         network                 => $network,
\&                         prefix                  => 16,
\&                         add_all_subnetworks     => "true",
\&                         auto_create_reversezone => "true",
\&                       );
\& unless($split_network){
\&        die("Construct split network object fail: ",
\&                Infoblox::status_code(). ":" .Infoblox::status_detail());
\&        }
\&
\& print"Split network object created successfully.\en";
\&
\& #Split the network
\& $session\->add( $split_network )
\&          or die("Split network fail:",
\&                     $session\->status_code(). ":" .$session\->status_detail());
\&
\& print"Splited network successfully.\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,Infoblox::Session\->\fBadd()\fR,Infoblox::DHCP::Network
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
