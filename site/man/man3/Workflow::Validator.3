.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Workflow::Validator 3"
.TH Workflow::Validator 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Workflow::Validator \- Ensure data are valid
.SH "VERSION"
.IX Header "VERSION"
This documentation describes version 1.05 of this package
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& # First declare the validator...
\& <validator name="DateValidator"
\&            class="MyApp::Validator::Date">
\&   <param name="date_format" value="%Y\-%m\-%d %h:%m"/>
\& </validator>
\&
\& # Then associate the validator with runtime data from the context...
\& <action name="MyAction">
\&    <validator name="DateValidator">
\&       <arg>$due_date</arg>
\&    </validator>
\& </action>
\&
\& # TODO: You can also inintialize and instantiate in one step if you
\& # don\*(Aqt need to centralize or reuse (does this work?)
\&
\& <action name="MyAction">
\&    <validator class="MyApp::Validator::Date">
\&       <param name="date_format" value="%Y\-%m\-%d %h:%m"/>
\&       <arg>$due_date</arg>
\&    </validator>
\& </action>
\&
\& # Then implement the logic
\&
\& package MyApp::Validator::Date;
\&
\& use strict;
\& use base qw( Workflow::Validator );
\& use DateTime::Format::Strptime;
\& use Workflow::Exception qw( configuration_error );
\&
\& _\|_PACKAGE_\|_\->mk_accessors( \*(Aqformatter\*(Aq );
\&
\& sub _init {
\&     my ( $self, $params ) = @_;
\&     unless ( $params\->{date_format} ) {
\&         configuration_error
\&             "You must define a value for \*(Aqdate_format\*(Aq in ",
\&             "declaration of validator ", $self\->name;
\&     }
\&     if ( ref $params\->{date_format} ) {
\&         configuration_error
\&             "The value for \*(Aqdate_format\*(Aq must be a simple scalar in ",
\&             "declaration of validator ", $self\->name;
\&     }
\&     my $formatter = DateTime::Format::Strptime\->new(
\&                              pattern => $params\->{date_format},
\&                              on_error => \*(Aqundef\*(Aq );
\&     $self\->formatter( $formatter );
\& }
\&
\& sub validate {
\&     my ( $self, $wf, $date_string ) = @_;
\&     my $fmt = $self\->formatter;
\&     my $date_object = $fmt\->parse_datetime( $date_string );
\&     unless ( $date_object ) {
\&         validation_error
\&             "Date \*(Aq$date_string\*(Aq does not match pattern \*(Aq", $fmt\->pattern, "\*(Aq ",
\&             "due to error \*(Aq", $fmt\->errstr, "\*(Aq";
\&     }
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Validators specified by 'validator_name' are looked up in the
Workflow::Factory which reads a separate configuration and
generates validators. (Generally all validators should be declared,
but it is not required.)
.PP
Validators are objects with a single public method, '\fBvalidate()\fR' that
take as arguments a workflow object and a list of parameters. The
parameters are filled in by the workflow engine according to the
instantiation declaration in the Action.
.PP
The idea behind a validator is that it validates data but does not
care where it comes from.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
.SS "Strategy"
.IX Subsection "Strategy"
.SS "Methods"
.IX Subsection "Methods"
\fIinit( \e%params )\fR
.IX Subsection "init( %params )"
.PP
Called when the validator is first initialized. If you do not have
sufficient information in \f(CW\*(C`\e%params\*(C'\fR you should throw an exception.
.PP
\fI_init\fR
.IX Subsection "_init"
.PP
This is a \fIdummy\fR method, please see \*(L"init\*(R".
.PP
\fIvalidate( \f(CI$workflow\fI, \f(CI$data\fI )\fR
.IX Subsection "validate( $workflow, $data )"
.PP
Determine whether your \f(CW$data\fR is true or false. If necessary you can
get the application context information from the \f(CW$workflow\fR object.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2004 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Winters <chris@cwinters.com>
