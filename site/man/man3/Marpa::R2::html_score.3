.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Marpa::R2::html_score 3"
.TH Marpa::R2::html_score 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
\&\f(CW\*(C`html_score\*(C'\fR \- Show complexity metric and other stats for web page
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&    html_score [\-\-html] [uri|file]
.Ve
.SH "Examples"
.IX Header "Examples"
.Vb 1
\&    html_score http://perl.org
\&
\&    html_score \-\-html http://perl6.org
.Ve
.SH "Description"
.IX Header "Description"
Given a \s-1URI\s0 or a file name,
treats its referent as \s-1HTML\s0
and prints a complexity metric,
the maximum element depth, and per-element statistics.
The per-element statistics appear in rows, one per tag name.
For each tag name, its row contains:
.IP "\(bu" 4
The maximum nesting depth of elements with
that tag name.
This is per-tag-name nesting depth,
and does not take
into account nesting within other elements with
other tag names.
.IP "\(bu" 4
A count of the elements with that tag name in the document.
.IP "\(bu" 4
The total number of characters in elements with that tag name.
Characters in nested elements are counted multiple times.
For example, if a page contains a table within a table,
characters in the inner table will be counted twice.
.IP "\(bu" 4
The average size of elements with this tag name, in characters.
.PP
The argument to html_score can be either a \s-1URI\s0 or a file
name.  If it starts with alphanumerics followed by a colon, it is treated
as a \s-1URI.\s0  Otherwise it is treated as file name.
If the \f(CW\*(C`\-\-html\*(C'\fR option is specified, the output is written
as an \s-1HTML\s0 table.
.PP
The complexity metric is the average depth (or nesting level), in elements, of a character,
divided by the logarithm of the length of the \s-1HTML.\s0
Whitespace and comments are ignored in calculating the complexity metric.
The division by the logarithm of the \s-1HTML\s0 length is based on the idea that,
all else being equal,
it is reasonable for the nesting to increase logarithmically as
a web page grows in length.
.SH "Sample output"
.IX Header "Sample output"
Here is the first part of the output for \f(CW\*(C`http://perl.org\*(C'\fR.
.PP
.Vb 11
\&    http://perl.org
\&    Complexity Score = 0.873
\&    Maximum Depth = 12
\&                  Maximum   Number of  Size in      Average
\&       Element    Nesting   Elements  Characters     Size  
\&    a                    1         56       3533         63
\&    body                 1          1       7615       7615
\&    div                  5         30      24695        823
\&    em                   1          1         13         13
\&    h1                   1          1         37         37
\&    h4                   1         11        559         50
.Ve
.SH "Interpreting the complexity metric"
.IX Header "Interpreting the complexity metric"
With caution,
the complexity metric can be used as a self-assessment
of website quality.
Well designed websites often have low numbers,
particularly if fast loading is an important goal.
But high values of the complexity metric do not necessarily mean low quality.
Everything depends on what the mission is, and how well
complexity is being used to serve the site's mission.
.SH "Purpose"
.IX Header "Purpose"
This program is a demo of a demo.
It purpose is to show how easy it is to write applications which look
at the structure of web pages using Marpa::R2::HTML.
And the purpose of Marpa::R2::HTML
is to demonstrate the power of its parse engine,
Marpa::R2.
Marpa::R2::HTML was written in a few days,
and its logic 
is a straightforward,
natural expression of the structure of \s-1HTML.\s0
.SH "Acknowledgements"
.IX Header "Acknowledgements"
The starting template for this code was
HTML::TokeParser, by Gisle Aas.
.SH "Copyright and License"
.IX Header "Copyright and License"
.Vb 5
\&  Copyright 2018 Jeffrey Kegler
\&  This file is part of Marpa::R2.  Marpa::R2 is free software: you can
\&  redistribute it and/or modify it under the terms of the GNU Lesser
\&  General Public License as published by the Free Software Foundation,
\&  either version 3 of the License, or (at your option) any later version.
\&
\&  Marpa::R2 is distributed in the hope that it will be useful,
\&  but WITHOUT ANY WARRANTY; without even the implied warranty of
\&  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
\&  Lesser General Public License for more details.
\&
\&  You should have received a copy of the GNU Lesser
\&  General Public License along with Marpa::R2.  If not, see
\&  http://www.gnu.org/licenses/.
.Ve
