.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Member::License 3"
.TH Infoblox::Grid::Member::License 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Member::License \- License object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Licenses are pre-installed on an Infoblox device according to the software packages ordered at the time of purchase. You can upgrade an Infoblox device with the Keystone license. Contact Infoblox Technical Support to get the Keystone license and install it on the device.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 3
\& my $license = Infoblox::Grid::Member::License\->new(
\&     key  => $string,    #Required
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a License object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a License object to the Infoblox device. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Construct an object
\& my $license = Infoblox::Grid::Member::License\->new(
\&     key  => "EQAAAIMhrdkGjSnnmBlgQSA14b16"
\& );
\&
\& # Submit for addition
\& my $response = $session\->add( $license );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to search the License object(s):
\&
\&     "type"  \- Optional. The license type.
\&     "limit" \- Optional. The limitation of license.
\&     "key"   \- Optional. The license string.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& my $retrieved_objs = $session\->get(object => "Infoblox::Grid::Member::License");
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to search the License object(s):
\&
\&     "type"  \- Optional. The license type.
\&     "limit" \- Optional. The limitation of license.
\&     "key"   \- Optional. The license string.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::Member::License",
\&     type   => "DNS"
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a License object from the Infoblox device. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Remove the object
\& my $response = $session\->remove( $license );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member\->node1_licenses( ) / Infoblox::Grid::Member\->node2_licenses( )"
.IX Subsection "Infoblox::Grid::Member->node1_licenses( ) / Infoblox::Grid::Member->node2_licenses( )"
.RS 4
Use this function to retrieve the licenses of a specific Infoblox grid member.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Retrieve the licenses from a grid member
\& my $licenses = $grid_member\->node1_licenses();
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of a License object.
.SS "expiration( )"
.IX Subsection "expiration( )"
.RS 4
Use this method to retrieve the license expiration timestamp. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the number of seconds elapsed since January 1, 1970, in \s-1UTC\s0 format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get expiration value
\& my $expiration = $object\->expiration();
.Ve
.RE
.RS 4
.RE
.SS "expiration_status( )"
.IX Subsection "expiration_status( )"
.RS 4
Use this method to retrieve the license expiration status. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get expiration_status value
\& my $expiration_status = $object\->expiration_status();
.Ve
.RE
.RS 4
.RE
.SS "key( )"
.IX Subsection "key( )"
.RS 4
Use this method to set or retrieve the license key.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the string with the license key of the device.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get key
\& my $key = $license\->key();
\&
\& #Modify key
\& $license\->key("EQAAAKsmItQcEWiFb6csgab2VeQ7");
.Ve
.RE
.RS 4
.RE
.SS "kind( )"
.IX Subsection "kind( )"
.RS 4
Use this method to retrieve the overall type of license. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are:
.Sp
.Vb 1
\& "Static"  \- The overall license type is static license.
\&
\& "Dynamic" \- The overall license type is dynamic license.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the overall type of license
\& my $kind = $license\->kind();
.Ve
.RE
.RS 4
.RE
.SS "hwid( )"
.IX Subsection "hwid( )"
.RS 4
Use this method to retrieve the hardware \s-1ID\s0 of the physical node on which the license is installed. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the hardware ID
\& my $hwid = $license\->hwid();
.Ve
.RE
.RS 4
.RE
.SS "limit( )"
.IX Subsection "limit( )"
.RS 4
Use this method to retrieve the license limit value. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get limit value
\& my $limit = $object\->limit();
.Ve
.RE
.RS 4
.RE
.SS "limit_context( )"
.IX Subsection "limit_context( )"
.RS 4
Use this method to retrieve the context of the license limit. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get limit_context value
\& my $limit_context = $object\->limit_context();
.Ve
.RE
.RS 4
.RE
.SS "type( )"
.IX Subsection "type( )"
.RS 4
Use this method to retrieve the type of license.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid values are:
.Sp
.Vb 1
\& "AnyCast"                   \- Enables the AnyCast services.
\&
\& "Cloud Network Automation"  \- Enable cloud functionality for the GUI.
\&
\& "Cloud Platform"            \- Enable cloud API service on the Cloud Platform Appliance.
\&
\& "DNSCacheAcceleration"      \- Enables the DNS Cache Acceleration service.
\&
\& "DDI Trial"                 \- Enables the DDI Trial mode.
\&
\& "DHCP"                      \- Enables the Dynamic Host Configuration Protocol (DHCP) service.
\&
\& "Discovery"                 \- Enables the Discovery service.
\&
\& "DNS"                       \- Enables the Domain Name System (DNS) service.
\&
\& "DNS Query Rewrite"         \- Enables support for DNS Query Rewrite.
\&
\& "FireEye"                   \- Enables support for FireEye zones.
\&
\& "KeystoneDVS"               \- Enables Grid\-based global management and reporting for Domain Name System (DNS), Dynamic Host Configuration Protocol (DHCP), and IP address management (IPAM) appliance solutions.
\&
\& "KeystoneSup"               \- Enables the Grid maintenance service.
\&
\& "IF\-MAP Service"            \- Enables the IF\-MAP service.
\&
\& "IF\-MAP Federation"         \- Enables support for IF\-MAP Federation connectors.
\&
\& "IF\-MAP Evaluation"         \- Enables support for IF\-MAP Evaluation.
\&
\& "IPAM Freeware"             \- Enables IPAM Express.
\&
\& "LDAP"                      \- Enables the Lightweight Directory Access Protocol (LDAP) service.
\&
\& "Load Balancer"             \- Enables support for Load Balancer.
\&
\& "Multi\-Grid Management"     \- Enables Multi\-Grid Management.
\&
\& "MS Management"             \- Enables Microsoft Management.
\&
\& "NIOSMaintenance"           \- Enables nonstop core network services such as Domain Name System (DNS), Dynamic Host Configuration Protocol (DHCP), and IP address management (IPAM).
\&
\& "OEM"                       \- Enables OEM mode.
\&
\& "Query Redirection"         \- Enables the Query Redirection service.
\&
\& "RADIUS"                    \- Enables the RADIUS service.
\&
\& "Reporting"                 \- Enables the Reporting service.
\&
\& "Response Policy Zones"     \- Enables support for Response Policy zones.
\&
\& "Security Ecosystem"        \- Enables support for Security Ecosystem services, such as the TAXII server.
\&
\& "Trinzic Automation Engine" \- Enables the Network Automation Engine.
\&
\& "Threat Protection"         \- Enables the Threat Protection service.
\&
\& "Threat Protection Update"  \- Enables the Threat Protection Update service.
\&
\& "Threat Protection Software Add\-On" \- Enables the Threat Protection Software Add\-On.
\&
\& "vNIOS"                     \- Enables support for a specific vNIOS virtual appliance model.
\&
\& "Threat Analytics"          \- Enables the Threat Analytics service.
\&
\& "Security Ecosystem"        \- Enables the Security Ecosystem feature.
\&
\& "Flex Grid Activation"      \- Allows all features to be enabled unless there is a conflict with hardware or existing enabled services.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get type
\& my $type = $license\->type();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to a License object, such as create and remove an object. This sample code also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a license insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox device
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\&
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Add License object to Infoblox device\fR
.PP
.Vb 1
\& #Construct a License object
\&
\& my $license = Infoblox::Grid::Member::License\->new(
\&     key  => "EQAAAIMhrdkGjSnnmBlgQSA14b16"
\& );
\&
\& unless ($license) {
\&    die("Construct License object failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "License object created successfully\en";
\&
\& #Adding the license object to Infoblox Appliance through session.
\& $session\->add($license)
\&     or die("Add License failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail() . "\enPlease contact Infoblox Technical Support to get the license key and add them to the device\en");
\&
\& print "Added License to Infoblox Appliance successfully.\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
