.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::RPZRecord::CNAME::IpAddress 3"
.TH Infoblox::DNS::RPZRecord::CNAME::IpAddress 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::RPZRecord::CNAME::IpAddress \- DNS Response Policy Zone (RPZ) CNAMEIpAddress record object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1DNS RPZ\s0 CNAMEIpAddress record represents different \s-1RPZ\s0 rules, depending on the value of the canonical name.
This record represents Passthru \s-1IP\s0 Address Rule, Block \s-1IP\s0 Address (No Such Domain) Rule, Block \s-1IP\s0 Address (No Data) Rule.
.PP
This record represents \s-1IP\s0 trigger policy. It matches \s-1IP\s0 addresses that would otherwise appear in A and \s-1AAAA\s0 records in the \*(L"answer\*(R" section of \s-1DNS\s0 response.
.PP
If canonical name is empty, it is a Block \s-1IP\s0 Address (No Such Domain) Rule.
.PP
If canonical name is an asterisk, it is a Block \s-1IP\s0 Address (No Data) Rule.
.PP
If canonical name is the same as host name, it is a Passthru \s-1IP\s0 Address Rule.
.PP
You cannot create Substitute (IPv4/IPv6 Address) Rule for this record see Infoblox::DNS::RPZRecord::AIpAddress or Infoblox::DNS::RPZRecord::AAAAIpAddress for details.
.PP
Note that you must specify only one view for the attribute \*(L"views\*(R".
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 11
\&  my $bind_cnameip =  Infoblox::DNS::RPZRecord::CNAME::IpAddress\->new (
\&      canonical => $ip_address,           #Required
\&      name      => $fqdn,                 #Required
\&      rp_zone   => $rp_zone,              #Required
\&      comment   => $string,               #Optional / Default is empty
\&      disable   => "true"|"false"         #Optional / Default "false"
\&      extattrs              => { $string => $extattr, ... },      #Optional / Default is undefined
\&      extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, #Optional / Default is undefined
\&      ttl       => $num|undef,            #Optional / Default is undefined
\&      views     => [$View1],              #Optional / Default is "default" view
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DNS RPZ\s0 CNAMEIpAddress record object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& #Construct an IPv4 object
\& my $bind_cnameip = Infoblox::DNS::RPZRecord::CNAME::IpAddress\->new (
\&     name      => "10.6.0.0/16.rpz.com",
\&     canonical => "10.6.0.0/16",
\&     rp_zone   => response_policy_zone1,
\&     comment   => "this is a demo record",
\&     disable   => "true",
\&     ttl       => "33",
\&     views     => [$view1]  );
\& # Submit for addition
\& my $response = $session\->add( $bind_cnameip );
\&
\& #Construct an IPv6 object
\& my $bind_cnameip = Infoblox::DNS::RPZRecord::CNAME::IpAddress\->new (
\&     name      => "2001::/64.rpz.com",
\&     canonical => "*",
\&     rp_zone   => response_policy_zone1,
\&     comment   => "this is a demo record",
\&     disable   => "true",
\&     ttl       => "33",
\&     views     => [$view1]  );
\& # Submit for addition
\& my $response = $session\->add( $bind_cnameip );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DNS RPZ CNAMEIpAddress record object:
\&
\&  name \- Optional. A host name in string format.
\&  view \- Optional. The DNS view in which the RPZ CNAMEIpAddress record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&  zone \- Optional. A zone name in FQDN format.
\&  canonical \- Optional. A canonical name.
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::RPZRecord::CNAME::IpAddress",
\&     name   => "1.2.3.4.rpz.com",
\&     view   => "default" );
\&
\& # get all DNS RPZ CNAMEIpAddress record in zone "rpz.com" of default view
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::RPZRecord::CNAME::IpAddress",
\&     zone   => "rpz.com",
\&     view   => "default" );
\&
\& # get DNS RPZ CNAMEIpAddress record with canonical name "cname.rpz.com" of default view
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::RPZRecord::CNAME::IpAddress",
\&     canonical => "10.6.0.0/16",
\&     view   => "default" );
\&
\& # get all DNS RPZ CNAMEIpAddress record with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::RPZRecord::CNAME::IpAddress",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use method to modify the comment.
\& $bind_cnameip\->comment("this is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $bind_cnameip );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&   object => "Infoblox::DNS::RPZRecord::CNAME::IpAddress",
\&   name   => "1.2.3.4.rpz.com",
\&   view   => "default");
\& #Find the desired object from the retrieved list.
\& my $desired_cname = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_cname );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DNS RPZ\s0 CNAMEIpAddress record objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a specific DNS RPZ CNAME object.
\&
\&  name    \- Optional. A host name in string format (regular expression).
\&  view    \- Optional. The DNS view in which the RPZ CNAMEIpAddress record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&  zone    \- Optional. A zone name in FQDN format.
\&  canonical \- Optional. A canonical name (regular expression).
\&  comment \- Optional. A comment in string format (regular expression).
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # search for all DNS RPZ CNAME objects that match "rpz.com" in the default DNS view
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::DNS::RPZRecord::CNAME::IpAddress",
\&     name    => \*(Aqrpz\e.com\*(Aq,
\&     view    => "default",
\&     comment => "this is a modified comment" );
\&
\& # search for all DNS RPZ CNAMEIpAddress records in zone "rpz.com" of default view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::RPZRecord::CNAME::IpAddress",
\&     zone   => "rpz\e.com",
\&     view   => "default" );
\&
\& # search DNS RPZ CNAMEIpAddress record with canonical name "cname.rpz.com" of default view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::RPZRecord::CNAME::IpAddress",
\&     canonical => "cname\e.rpz\e.com",
\&     view   => "default" );
\&
\& # search all DNS RPZ CNAMEIpAddress records with the extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DNS::RPZRecord::CNAME::IpAddress",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a \s-1DNS RPZ\s0 CNAMEIpAddress record.
.SS "canonical( )"
.IX Subsection "canonical( )"
.RS 4
Use this method to set or retrieve the canonical name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Canonical name can be network, host address, asterisk or empty.
.Sp
You cannot specify canonical name value that is not Block \s-1IP\s0 Address (No Such Domain) Rule, Block \s-1IP\s0 Address (No Data) Rule, or Passthru \s-1IP\s0 Address Rules. You should use Infoblox::DNS::RPZRecord::CNAME::IpAddress or Infoblox::DNS::RPZRecord::CNAME::IpAddress objects for Substitute (IPv46 Address) Rule and Substitute (IPv6 Address) Ruless.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get canonical
\& my $canonical = $bind_cnameip\->canonical();
\& #Modify canonical name
\& $bind_cnameip\->canonical("10.6.1.2");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $bind_cnameip\->comment();
\& #Modify comment
\& $bind_cnameip\->comment("Modifying the DNS RPZ CNAMEIpAddress record comment");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DNS RPZ\s0 CNAMEIpAddress record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false. The \s-1DNS RPZ\s0 CNAMEIpAddress record is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $bind_cnameip\->disable();
\& #Modify disable
\& $bind_cnameip\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS RPZ\s0 CNAMEIpAddress record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $bind_cnameip\->extattrs();
\& #Modify extattrs
\& $bind_cnameip\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS RPZ\s0 CNAMEIpAddress record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $bind_cnameip\->extensible_attributes();
\& #Modify extensible attributes
\& $bind_cnameip\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the host name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the network address in \s-1CIDR\s0 notation or host \s-1IP\s0 address  followed by the domain name (example: 10.0.0.0/8.rpz.com, 1.2.3.4.rpz.com).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $bind_cnameip\->name();
\& #Modify name
\& $bind_cnameip\->name("4.3.2.1.rpz.com");
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to set or retrieve the Time to Live (\s-1TTL\s0) value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is undefined which indicates that the record inherits the \s-1TTL\s0 value of the zone.
.Sp
Specify a \s-1TTL\s0 value to override the \s-1TTL\s0 value at the zone level.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration, in seconds, that the record is cached. Zero indicates that the record should not be cached.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get ttl
\& my $ttl = $bind_cnameip\->ttl();
\& #Modify ttl
\& $bind_cnameip\->ttl(1800);
\& #Un\-override ttl
\& $bind_cnameip\->ttl(undef);
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to set or retrieve the view of the \s-1DNS RPZ\s0 CNAMEIpAddress record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" view, which means the \s-1DNS RPZ\s0 CNAMEIpAddress record is located in the default view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An array reference of defined Infoblox::DNS::View objects.
.Sp
Note that the array size must be 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get views
\& my $ref_views = $bind_cnameip\->views();
\& #Modify views, an array of Infoblox::DNS::View objects
\& $bind_cnameip\->views([$view1]);
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of a \s-1DNS RPZ\s0 CNAMEIpAddress record. This method is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get zone
\& my $zone = $bind_cnameip\->zone();
.Ve
.RE
.RS 4
.RE
.SS "rp_zone( )"
.IX Subsection "rp_zone( )"
.RS 4
Use this method to set or retrieve the zone object of a \s-1DNS RPZ\s0 CNAMEIpAddress record.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An Infoblox::DNS::Zone object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get rp_zone
\& my $rp_zone = $bind_cnameip\->rp_zone();
\& #Modify rp_zone, reference of Infoblox::DNS::Zone object
\& $bind_cnameip\->rp_zone($response_policy_zone);
.Ve
.RE
.RS 4
.RE
.SS "is_ipv4( )"
.IX Subsection "is_ipv4( )"
.RS 4
Use this method to set or retrieve whether the record is an IPv4 record. This method is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Use this method to retrieve whether the record is an IPv4 record. If the return value is \*(L"true\*(R", it is an IPv4 record. Ohterwise, it is an IPv6 record.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get is_ipv4
\& my $ip_ipv4 = $bind_cnameip\->is_ipv4();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample code also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS RPZ\s0 CNAMEIpAddress record insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the zone prior to a DNS RPZ CNAMEIpAddress record insertion
\& my $zone = Infoblox::DNS::Zone\->new(name => "rpz.com",
\&                                     rpz_policy => "GIVEN");
\& unless ($zone) {
\& die("Construct zone failed: ",
\&     Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& #Verify if the zone exists
\& my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "rpz.com");
\& unless ($object) {
\& print "Zone does not exist on server, safe to add the zone\en";
\& $session\->add($zone)
\&    or die("Add zone failed: ",
\&           $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Zone added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS RPZ\s0 CNAMEIpAddress record\fR
.PP
.Vb 2
\& my $view1 = Infoblox::DNS::View\->new(
\&  name      => "default" );
\&
\& #Construct a DNS RPZ CNAMEIpAddress record object
\& my $ip_address = Infoblox::DNS::RPZRecord::CNAME::IpAddress\->new(
\&  name      => "10.6.0.0/16.rpz.com",
\&  canonical => "10.6.0.0/16",
\&  comment   => "this is a demo ip address record",
\&  ttl       => "33",
\&  views     => [$view1],
\&  rp_zone   => $zone);
\& unless ($ip_address) {
\& die("Construct DNS RPZ CNAMEIpAddress record failed: ",
\&     Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DNS RPZ CNAMEIpAddress record object created successfully\en";
\&
\& #Add the DNS RPZ CNAMEIpAddress record object to the Infoblox appliance through a session
\& $session\->add($ip_address)
\&  or die("Add DNS RPZ CNAMEIpAddress record failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS RPZ CNAMEIpAddress record object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS RPZ\s0 CNAMEIpAddress record\fR
.PP
.Vb 11
\& #Search all RPZ CNAMEIpAddress records that match "rpz.com"
\& my @retrieved_objs = $session\->search(
\&  object => "Infoblox::DNS::RPZRecord::CNAME::IpAddress",
\&  name   => \*(Aqrpz\e.com\*(Aq
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&  die("Search DNS RPZ CNAMEIpAddress record failed: ",
\&      $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS RPZ CNAMEIpAddress record object found at least 1 matching entry\en";
\&
\& #Search all DNS RPZ CNAMEIpAddress records that start with "bind" and end with ".rpz.com"
\& my @retrieved_objs = $session\->search(
\&  object => "Infoblox::DNS::RPZRecord::CNAME::IpAddress",
\&  name   => \*(Aq^10\e.6.*\e.rpz\e.com\*(Aq
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&  die("Search DNS RPZ CNAMEIpAddress record failed: ",
\&      $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DNS RPZ CNAMEIpAddress record object using regexp found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS RPZ\s0 CNAMEIpAddress record\fR
.PP
.Vb 12
\& #Get DNS RPZ CNAMEIpAddress record through the session
\& my @retrieved_objs = $session\->get(
\&  object => "Infoblox::DNS::RPZRecord::CNAME::IpAddress",
\&  name   => "10.6.0.0/16.rpz.com",
\&  view   => "default"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&  die("Get DNS RPZ CNAMEIpAddress record failed: ",
\&      $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS RPZ CNAMEIpAddress record object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified DNS RPZ CNAMEIpAddress record
\& $object\->disable("true");
\&
\& #Apply the changes
\& $session\->modify($object)
\&  or die("Modify DNS RPZ CNAMEIpAddress record failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS RPZ CNAMEIpAddress record object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DNS RPZ\s0 CNAMEIpAddress record\fR
.PP
.Vb 12
\& #Get DNS RPZ CNAMEIpAddress record through the session
\& my @retrieved_objs = $session\->get(
\&  object => "Infoblox::DNS::RPZRecord::CNAME::IpAddress",
\&  name   => "10.6.0.0/16.rpz.com",
\&  view   => "default"
\& );
\& $object = $retrieved_objs[0];
\& unless ($object) {
\&  die("Get DNS RPZ CNAMEIpAddress record failed: ",
\&      $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS RPZ CNAMEIpAddress record object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove( $object )
\& or die("Remove DNS RPZ CNAMEIpAddress record failed: ",
\&      $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS RPZ CNAMEIpAddress record object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::View, Infoblox::DNS::Zone, Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
