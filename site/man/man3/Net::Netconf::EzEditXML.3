.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Netconf::EzEditXML 3"
.TH Net::Netconf::EzEditXML 3 "2016-07-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Netconf::EzEditXML \- Create XML for JUNOS XML API the Easy Way!
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Net::Netconf::EzEditXML;
\&
\& $newEzElem = new Net::Netconf::EzEditXML( [$elemName] );
\&
\& $ezElem\->toString;
\& $newEzElem = $ezElem\->AUTOLOAD;
\& $newEzElem = $ezElem\->addPath( $path, [%pathChildren] );
\& $newEzElem = $ezElem\->newElement( $elemName, [$elemChildren] );
\& $newEzElem = $ezElem\->addElement( $elemName, [$elemChildren] );
\& $newEzElem = $ezElem\->addSibling( $sibName );
\& $ezElem\->setText( $newText );
\& $ezElem\->addXML( $xmlstring );
\& $node = $ezElem\->getLibNode;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::Netconf::EzEditXML is used to create \s-1XML\s0 documents used for the purpose
of \s-1JUNOS\s0 device configuration and performing operational commands.
EzEditXML is a 'syntatic sugar wrapper' around the XML::LibXML
library.  EzEditXML does not communicate with the \s-1JUNOS\s0 target
devices.  That function is handled by the existing
Net::Netconf::Manager module.
.SH "METHODS"
.IX Header "METHODS"
.IP "new" 4
.IX Item "new"
.Sp
.RS 2
\&\f(CW$newEzElem\fR = new Net::Netconf::EzEditXML( [$elemName] );
.RE
.Sp
.RS 4
The \fBnew\fR constructor is used to create the top-level \s-1JUNOS XML\s0
<configuration> element block.  If the \f(CW$elemName\fR is provided, then
this value will be used in place of 'configuration'.  This later case
can be used when creating \s-1XML\s0 operational commands.
.RE
.IP "\s-1AUTOLOAD\s0" 4
.IX Item "AUTOLOAD"
.Sp
.RS 2
\&\f(CW$newEzElem\fR = \f(CW$ezElem\fR\->\fIelemTag\fR([ \f(CW$children\fR ]);
.RE
.Sp
.RS 4
The EzEditXML \fB\s-1AUTOLOAD\s0\fR is used to either (a) dynamically create a new
element or (b) return an existing element.  In the case of (a) the
\&\fIelemTag\fR block does not exist in the \s-1XML\s0 document and it is
created using the LibXML::Element underlying library.  If there are
\&\f(CW$children\fR passed to the new \fIelemTag\fR then these children will be
added per the \fBaddChildren\fR method.
.RE
.IP "newElement" 4
.IX Item "newElement"
.Sp
.RS 2
\&\f(CW$newEzElem\fR = newElement( \f(CW$elemName\fR, [$children] );
.RE
.Sp
.RS 4
Create a new EzElement with the provided name, but does not attach it
to anything. If \f(CW$children\fR are provided, they are added per the \fBaddChildren\fR method.
.RE
.IP "addElement" 4
.IX Item "addElement"
.Sp
.RS 2
\&\f(CW$newEzElem\fR = \f(CW$ezElem\fR\->addElement( \f(CW$elemName\fR, [$elemChildren] );
.RE
.Sp
.RS 4
This method needs to be documented.
.RE
.IP "addPath" 4
.IX Item "addPath"
.Sp
.RS 2
\&\f(CW$newEzElem\fR = \f(CW$ezElem\fR\->addPath( \f(CW$path\fR, [$children] );
.RE
.Sp
.RS 4
This method needs to be documented.
.RE
.ie n .IP "addChildren( $children );" 4
.el .IP "addChildren( \f(CW$children\fR );" 4
.IX Item "addChildren( $children );"
.Sp
.RS 2
\&\f(CW$ezElem\fR\->addChildren( \f(CW$textString\fR );
.Sp
.RS 4
This version of addChildren is used to set the text-node value of the
calling element.
.RE
.RE
.RS 2
.Sp
\&\f(CW$ezElem\fR\->addChildren( [{a=>b},{c=>d},{e=>y}, ...] );
.Sp
.RS 4
This version of addChildren is used to add unique child-elements as
defined in each hash {child\-elem\-name => child\-text\-value} reference.
.RE
.RE
.RS 2
.Sp
\&\f(CW$ezElem\fR\->addChildren( [$s1, \f(CW$s2\fR, \f(CW$s3\fR, ...], [$options] );
.Sp
.RS 4
This version of addChildren is used to add a list of string-items all
with the same name as the parent \f(CW$ezElem\fR.  The \f(CW$options\fR can be:
.IP "nameItems=>1" 2
.IX Item "nameItems=>1"
Include an addition <name> element block wihtin the \f(CW$ezElem\fR block.
Many of \s-1JUNOS\s0 configuration elements have a <name> element to unqiuely
identify multiple items of the same element type. The <interface> list
within a \s-1VLAN\s0 is a good example of this.
.IP "junosDelete=>1" 2
.IX Item "junosDelete=>1"
Mark the item to be deleted from the configuration.
.IP "junosActivate=>1" 2
.IX Item "junosActivate=>1"
Mark the item to be activated in the configuration.
.IP "junosDeactivate=>1" 2
.IX Item "junosDeactivate=>1"
Mark the item to be deactivated in the configuration.
.RE
.RS 4
.RE
.RE
.RS 2
.RE
.IP "addSibling" 4
.IX Item "addSibling"
.Sp
.RS 2
\&\f(CW$newEzSibling\fR = \f(CW$ezElem\fR\->addSibling;
.RE
.Sp
.RS 4
This method needs to be documented.
.RE
.IP "setText" 4
.IX Item "setText"
.Sp
.RS 2
\&\f(CW$ezElem\fR\->setText( \f(CW$newText\fR );
.RE
.Sp
.RS 4
This method will re-write the element's text-node value to \f(CW$newText\fR.
This method calls XML::LIbXML::Text\->setData underlying method.
.RE
.IP "addXML" 4
.IX Item "addXML"
.Sp
.RS 2
\&\f(CW$ezElem\fR\->addXML( \f(CW$xmlstring\fR );
.RE
.Sp
.RS 4
This method accepts a \*(L"well-balanced-chunk\*(R" of \s-1XML\s0 string and
incorporates/attaches it into \f(CW$ezElem\fR.  This method calls the
XML::LibXML::Element\->appendWellBalancedChunk method.
.RE
.IP "getLibNode" 4
.IX Item "getLibNode"
.Sp
.RS 2
\&\f(CW$node\fR = \f(CW$ezElem\fR\->getLibNode;
.RE
.Sp
.RS 4
This method returns the XML::LibXML node element.  The XML::LIbXML
library of routines can then be accesses.
.RE
.IP "toString" 4
.IX Item "toString"
.Sp
.RS 2
\&\f(CW$ezElem\fR\->toString
.RE
.Sp
.RS 4
This method returns the \s-1XML\s0 document in string form.  It calls the
XML::LibXML underlying library to perform this action.
.RE
