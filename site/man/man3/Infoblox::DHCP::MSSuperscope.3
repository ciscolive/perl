.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::MSSuperscope 3"
.TH Infoblox::DHCP::MSSuperscope 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::MSSuperscope \- Microsoft (r) Server Superscope object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A superscope is a feature of Microsoft \s-1DHCP\s0 servers. You can use a superscope to group and activate multiple ranges via a single object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $superscope = Infoblox::DHCP::Superscope\->new(
\&                  name                             => $string,                          #Required
\&                  ranges                           => [ $dhcprange1,$dhcprange2,...],   #Required
\&                  comment                          => $string,                          #Optional
\&                  extattrs                         => { $string => $extattr, ... },     #Optional / Default is undefined
\&                  extensible_attributes            => { $string => $string | $num, $string => [ $string | $num, ... ], ... },
\&                                                                                        #Optional / Default is undefined
\&                  network_view                     => $NetworkView,                     #Optional / Default is the default network view
\&                  disable                          => "true" | "false",                 #Optional / Default is "false"
\&            )
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a superscope object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a superscope object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Construct an object
\& my $superscope = Infoblox::DHCP::MSSuperscope\->new(
\&                                                    name                  => \*(Aqtest superscope\*(Aq,
\&                                                    comment               => \*(Aqtest comment\*(Aq,
\&                                                    disable               => \*(Aqtrue\*(Aq,
\&                                                    network_view          => $view,
\&                                                    ranges                => [ $dhcp_range ],
\&                                                   );
\&
\& # Submit for addition
\& my $response = $session\->add( $superscope );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific superscope object:
\&
\& name                   \- Optional. Name value for the superscope.
\& comment                \- Optional. Comment value for the superscope.
\& network_view           \- Optional. Network view in which the superscope is located. By default, all network views are searched.
\& extattrs               \- Optional. A hash reference containing extensible attributes.
\& extensible_attributes  \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&                       object     => "Infoblox::DHCP::MSSuperscope",
\&                       name       => "test superscope" );
\&
\& my @retrieved_objs = $session\->get(
\&                       object       => "Infoblox::DHCP::MSSuperscope",
\&                       name         => "other superscope",
\&                       network_view => "external" );
\&
\& my @retrieved_objs = $session\->get(
\&                       object                => "Infoblox::DHCP::MSSuperscope",
\&                       extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a superscope object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify the comment.
\& $superscope\->comment("this is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $superscope );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a superscope object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the superscope object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& # Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object       => "Infoblox::DHCP::MSSuperscope",
\&     name         => "some superscope",
\&     newtork_view => "default" );
\& # Find the desired object from the retrieved list.
\& my $desired_superscope = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_superscope );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for superscope objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a superscope object:
\&
\&  name                   \- Optional. Name value for the superscope (regular expression).
\&  comment                \- Optional. Comment value for the superscope (regular expression).
\&  network_view           \- Optional. Network view in which the superscope is located. By default, all network views are searched.
\&  extattrs               \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes  \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 4
\& # search for superscope objects with comments ending with \*(Aqcomment\*(Aq
\& my @retrieved_objs = $session\->search(
\&     object     => "Infoblox::DHCP::MSSuperscope",
\&     comment    => ".*comment" );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a superscope.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $superscope\->comment();
\& #Modify comment
\& $superscope\->comment("Modifying the Superscope comment");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a superscope.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is false.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $superscope\->disable();
\& #Modify disable
\& $superscope\->disable("false");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a superscope object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $superscope\->extattrs();
\& #Modify extattrs
\& $superscope\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes that are associated with a superscope object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $superscope\->extensible_attributes();
\& #Modify extensible attributes
\& $superscope\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of the superscope.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the name of the superscope in string format. The string must not be longer than 256 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $superscope\->name();
\& #Modify name
\& $superscope\->name("superscope name");
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the network view of the superscope.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a defined Infoblox::DHCP::View object. The default network view value is the system-defined default network view object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network view
\& my $nview = $superscope\->network_view();
\& #Modify network view, with an Infoblox::DHCP::View object
\& $superscope\->network_view($nview);
.Ve
.RE
.RS 4
.RE
.SS "ranges( )"
.IX Subsection "ranges( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 ranges that are associated with this superscope.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains defined Infoblox::DHCP::Range objects. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ranges
\& my $ref_options = $superscope\->ranges();
\& #Modify ranges
\& $superscope\->ranges([$range]); #$range is an Infoblox::DHCP::Range object
.Ve
.RE
.RS 4
.RE
.SS "range_high_water_mark( )"
.IX Subsection "range_high_water_mark( )"
.RS 4
Use this method to retrieve the percent above \*(L"Normal\*(R" when the \s-1DHCP\s0 utilization status becomes \*(L"High\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get high\-water mark
\& my $range_high_water_mark = $superscope\->range_high_water_mark();
.Ve
.RE
.RS 4
.RE
.SS "range_low_water_mark( )"
.IX Subsection "range_low_water_mark( )"
.RS 4
Use this method to retrieve the percent below \*(L"Normal\*(R" when the \s-1DHCP\s0 utilization status becomes \*(L"Low\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get low\-water mark
\& my $range_low_water_mark = $superscope\->range_low_water_mark();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a superscope object such as add, modify, and remove. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 superscope object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create supporting objects, \f(CB$host_name\fB is the grid member's fqdn\fR
.PP
.Vb 12
\& my $ms_member = Infoblox::Grid::MSServer\->new(
\&                                               address                  => \*(Aq10.0.0.1\*(Aq,
\&                                               comment                  => \*(Aqbasic member\*(Aq,
\&                                               disable                  => \*(Aqtrue\*(Aq,
\&                                               extensible_attributes    => { Site => \*(AqSomewhere\*(Aq},
\&                                               login                    => \*(Aquser\*(Aq,
\&                                               password                 => \*(Aqpassword\*(Aq,
\&                                               managing_member          => $host_name,
\&                                               read_only                => \*(Aqfalse\*(Aq,
\&                                               synchronization_interval => 5,
\&                                               logging_mode             => \*(Aqminimum\*(Aq,
\&                                              );
\&
\& unless($ms_member) {
\&        die("Construct MS Member object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "MS Member object created successfully\en";
\&
\& unless($session\->add($ms_member)) {
\&        die("Add MS Member object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "MS Member object added successfully\en";
\&
\& my $ms_dhcp = Infoblox::DHCP::MSServer\->new(address => \*(Aq10.0.0.1\*(Aq);
\&
\& unless($ms_dhcp) {
\&        die("Construct MS DHCP Member object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "MS DHCP Member object created successfully\en";
\&
\& my $network1 = Infoblox::DHCP::Network\->new(
\&                                            network   => "10.0.0.0/255.255.0.0",
\&                                            comment   => "add network",
\&                                            members   => [$ms_dhcp],
\&                                           );
\& unless($network1) {
\&        die("Construct DHCP Network object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Network object created successfully\en";
\&
\& unless($session\->add($network1)) {
\&        die("Add DHCP Network object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "DHCP Network object added successfully\en";
\&
\& my $dhcp_range1 = Infoblox::DHCP::Range\->new(
\&                                             end_addr                => "10.0.0.10",
\&                                             network                 => "10.0.0.0/16",
\&                                             start_addr              => "10.0.0.1",
\&                                             disable                 => "true",
\&                                             member                  => $ms_dhcp,
\&                                            );
\&
\& unless($dhcp_range1) {
\&        die("Construct DHCP Range object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Range object created successfully\en";
\&
\& unless($session\->add($dhcp_range1)) {
\&        die("Add DHCP Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "DHCP Range object added successfully\en";
\&
\& my $network2 = Infoblox::DHCP::Network\->new(
\&                                            network   => "10.1.0.0/255.255.0.0",
\&                                            comment   => "add network",
\&                                            members   => [$ms_dhcp],
\&                                           );
\& unless($network2) {
\&        die("Construct DHCP Network object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Network object created successfully\en";
\&
\& unless($session\->add($network2)) {
\&        die("Add DHCP Network object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "DHCP Network object added successfully\en";
\&
\& my $dhcp_range2 = Infoblox::DHCP::Range\->new(
\&                                             end_addr                => "10.1.0.30",
\&                                             network                 => "10.1.0.0/16",
\&                                             start_addr              => "10.1.0.21",
\&                                             disable                 => "true",
\&                                             member                  => $ms_dhcp,
\&                                            );
\&
\& unless($dhcp_range2) {
\&        die("Construct DHCP Range object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Range object created successfully\en";
\&
\& unless($session\->add($dhcp_range2)) {
\&        die("Add DHCP Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "DHCP Range object added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 Superscope object\fR
.PP
.Vb 11
\& my $superscope = Infoblox::DHCP::MSSuperscope\->new(
\&                                                    name                  => \*(Aqtest superscope\*(Aq,
\&                                                    comment               => \*(Aqtest comment\*(Aq,
\&                                                    disable               => \*(Aqtrue\*(Aq,
\&                                                    ranges                => [ $dhcp_range1, $dhcp_range2],
\&                                                    );
\& unless($superscope) {
\&        die("Construct DHCP Superscope object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Superscope object created successfully\en";
\&
\& unless($session\->add($superscope)) {
\&        die("Add DHCP Superscope object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "DHCP Superscope object added successfully\en";
.Ve
.PP
\&\fB#Get the \s-1DHCP\s0 Superscope object and change its ranges\fR
.PP
.Vb 11
\& #Get the DHCP Superscope object
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::MSSuperscope",
\&     name   => "test superscope"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP Superscope object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP Superscope object found at least 1 matching entry\en";
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify DHCP Superscope object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Superscope object with new range assignments updated to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Remove \s-1DHCP\s0 Superscope and support objects\fR
.PP
.Vb 3
\& $session\->remove($object)
\&     or die("Remove DHCP Superscope object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& $session\->remove($dhcp_range2)
\&     or die("Remove DHCP Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& $session\->remove($dhcp_range1)
\&     or die("Remove DHCP Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& $session\->remove($network2)
\&     or die("Remove DHCP Network object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& $session\->remove($network1)
\&     or die("Remove DHCP Network object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& $session\->remove($ms_member)
\&     or die("Remove Grid MSServer object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "All objects removed from the Infoblox appliance successfully\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR,Infoblox::DHCP::Range,Infoblox::DHCP::MSOption
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
