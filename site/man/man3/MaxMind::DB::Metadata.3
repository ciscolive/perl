.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MaxMind::DB::Metadata 3"
.TH MaxMind::DB::Metadata 3 "2016-02-02" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MaxMind::DB::Metadata \- A class for metadata related to a MaxMind DB database
.SH "VERSION"
.IX Header "VERSION"
version 0.040001
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    my $reader = MaxMind::DB::Reader\->new( file => $path );
\&    my $metadata = $reader\->metadata();
\&
\&    print $metadata\->description()\->{en};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides an \s-1API\s0 for representing the metadata of a MaxMind \s-1DB\s0
database. See http://maxmind.github.io/MaxMind\-DB/ for the official format
spec.
.SH "API"
.IX Header "API"
This class provides methods for each metadata attribute in a database.
.ie n .SS "$metadata\->\fBbinary_format_major_version()\fP"
.el .SS "\f(CW$metadata\fP\->\fBbinary_format_major_version()\fP"
.IX Subsection "$metadata->binary_format_major_version()"
Returns the binary format major version number.
.ie n .SS "$metadata\->\fBbinary_format_minor_version()\fP"
.el .SS "\f(CW$metadata\fP\->\fBbinary_format_minor_version()\fP"
.IX Subsection "$metadata->binary_format_minor_version()"
Returns the binary format minor version number.
.ie n .SS "$metadata\->\fBbuild_epoch()\fP"
.el .SS "\f(CW$metadata\fP\->\fBbuild_epoch()\fP"
.IX Subsection "$metadata->build_epoch()"
Returns the database's build timestamp as an epoch value.
.ie n .SS "$metadata\->\fBdatabase_type()\fP"
.el .SS "\f(CW$metadata\fP\->\fBdatabase_type()\fP"
.IX Subsection "$metadata->database_type()"
Returns a string indicating the database's type.
.ie n .SS "$metadata\->\fBlanguages()\fP"
.el .SS "\f(CW$metadata\fP\->\fBlanguages()\fP"
.IX Subsection "$metadata->languages()"
Returns an arrayref of locale codes indicating what languages this database
has information for.
.ie n .SS "$metadata\->\fBdescription()\fP"
.el .SS "\f(CW$metadata\fP\->\fBdescription()\fP"
.IX Subsection "$metadata->description()"
Returns a hashref of descriptions. The keys should be locale codes like \*(L"en\*(R"
or \*(L"pt-BR\*(R" and the values are the description in that language.
.ie n .SS "$metadata\->\fBip_version()\fP"
.el .SS "\f(CW$metadata\fP\->\fBip_version()\fP"
.IX Subsection "$metadata->ip_version()"
Returns a 4 or 6 indicating what type of \s-1IP\s0 addresses this database can be
used to look up.
.ie n .SS "$metadata\->\fBnode_count()\fP"
.el .SS "\f(CW$metadata\fP\->\fBnode_count()\fP"
.IX Subsection "$metadata->node_count()"
Returns the number of nodes in the database's search tree.
.ie n .SS "$metadata\->\fBrecord_size()\fP"
.el .SS "\f(CW$metadata\fP\->\fBrecord_size()\fP"
.IX Subsection "$metadata->record_size()"
Returns the record size for nodes in the database's search tree.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Dave Rolsky <drolsky@maxmind.com>
.IP "\(bu" 4
Olaf Alders <oalders@maxmind.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2016 by MaxMind, Inc..
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
