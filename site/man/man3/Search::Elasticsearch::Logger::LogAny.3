.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search::Elasticsearch::Logger::LogAny 3"
.TH Search::Elasticsearch::Logger::LogAny 3 "2020-09-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Search::Elasticsearch::Logger::LogAny \- A Log::Any\-based Logger implementation
.SH "VERSION"
.IX Header "VERSION"
version 7.30
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Search::Elasticsearch::Logger::LogAny provides event logging and the tracing
of request/response conversations with Elasticsearch nodes via the
Log::Any module.
.PP
\&\fILogging\fR refers to log events, such as node failures, pings, sniffs, etc,
and should be enabled for monitoring purposes.
.PP
\&\fITracing\fR refers to the actual \s-1HTTP\s0 requests and responses sent
to Elasticsearch nodes.  Tracing can be enabled for debugging purposes,
or for generating a pretty-printed \f(CW\*(C`curl\*(C'\fR script which can be used for
reporting problems.
.PP
\&\fIDeprecations\fR refers to deprecation warnings returned by Elasticsearch
5.x and above. Deprecations are logged to \s-1STDERR\s0 by default.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
Logging and tracing can be enabled using Log::Any::Adapter, or by
passing options to \*(L"\fBnew()\fR\*(R" in Search::Elasticsearch.
.SS "\s-1USING LOG::ANY::ADAPTER\s0"
.IX Subsection "USING LOG::ANY::ADAPTER"
Send all logging and tracing to \f(CW\*(C`STDERR\*(C'\fR:
.PP
.Vb 3
\&    use Log::Any::Adapter qw(Stderr);
\&    use Search::Elasticsearch;
\&    my $e = Search::Elasticsearch\->new;
.Ve
.PP
Send logging and deprecations to a file, and tracing to Stderr:
.PP
.Vb 10
\&    use Log::Any::Adapter();
\&    Log::Any::Adapter\->set(
\&        { category => \*(Aqelasticsearch.event\*(Aq },
\&        \*(AqFile\*(Aq,
\&        \*(Aq/path/to/file.log\*(Aq
\&    );
\&    Log::Any::Adapter\->set(
\&        { category => \*(Aqelasticsearch.trace\*(Aq },
\&        \*(AqStderr\*(Aq
\&    );
\&    Log::Any::Adapter\->set(
\&        { category => \*(Aqelasticsearch.deprecation\*(Aq },
\&        \*(AqFile\*(Aq,
\&        \*(Aq/path/to/deprecations.log\*(Aq
\&    );
\&
\&    use Search::Elasticsearch;
\&    my $e = Search::Elasticsearch\->new;
.Ve
.ie n .SS "\s-1USING\s0 ""log_to"", ""trace_to"" \s-1AND\s0 ""deprecate_to"""
.el .SS "\s-1USING\s0 \f(CWlog_to\fP, \f(CWtrace_to\fP \s-1AND\s0 \f(CWdeprecate_to\fP"
.IX Subsection "USING log_to, trace_to AND deprecate_to"
Send all logging and tracing to \f(CW\*(C`STDERR\*(C'\fR:
.PP
.Vb 6
\&    use Search::Elasticsearch;
\&    my $e = Search::Elasticsearch\->new(
\&        log_to   => \*(AqStderr\*(Aq,
\&        trace_to => \*(AqStderr\*(Aq,
\&        deprecate_to => \*(AqStderr\*(Aq  # default
\&    );
.Ve
.PP
Send logging and deprecations to a file, and tracing to Stderr:
.PP
.Vb 6
\&    use Search::Elasticsearch;
\&    my $e = Search::Elasticsearch\->new(
\&        log_to       => [\*(AqFile\*(Aq, \*(Aq/path/to/file.log\*(Aq],
\&        trace_to     => \*(AqStderr\*(Aq,
\&        deprecate_to => [\*(AqFile\*(Aq, \*(Aq/path/to/deprecations.log\*(Aq],
\&    );
.Ve
.PP
See Log::Any::Adapter for more.
.SH "AUTHOR"
.IX Header "AUTHOR"
Enrico Zimuel <enrico.zimuel@elastic.co>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Elasticsearch \s-1BV.\s0
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
