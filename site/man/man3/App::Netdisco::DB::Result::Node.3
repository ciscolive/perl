.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::Netdisco::DB::Result::Node 3"
.TH App::Netdisco::DB::Result::Node 3 "2020-11-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "RELATIONSHIPS"
.IX Header "RELATIONSHIPS"
.SS "device"
.IX Subsection "device"
Returns the single \f(CW\*(C`device\*(C'\fR to which this Node entry was associated at the
time of discovery.
.PP
The \s-1JOIN\s0 is of type \s-1LEFT,\s0 in case the \f(CW\*(C`device\*(C'\fR is no longer present in the
database but the relation is being used in \f(CW\*(C`search()\*(C'\fR.
.SS "device_port"
.IX Subsection "device_port"
Returns the single \f(CW\*(C`device_port\*(C'\fR to which this Node entry was associated at
the time of discovery.
.PP
The \s-1JOIN\s0 is of type \s-1LEFT,\s0 in case the \f(CW\*(C`device\*(C'\fR is no longer present in the
database but the relation is being used in \f(CW\*(C`search()\*(C'\fR.
.SS "wireless_port"
.IX Subsection "wireless_port"
Returns the single \f(CW\*(C`wireless_port\*(C'\fR to which this Node entry was associated at
the time of discovery.
.PP
The \s-1JOIN\s0 is of type \s-1LEFT,\s0 in case the \f(CW\*(C`device\*(C'\fR is no longer present in the
database but the relation is being used in \f(CW\*(C`search()\*(C'\fR.
.SS "ips"
.IX Subsection "ips"
Returns the set of \f(CW\*(C`node_ip\*(C'\fR entries associated with this Node. That is, the
\&\s-1IP\s0 addresses which this \s-1MAC\s0 address was hosting at the time of discovery.
.PP
Note that the Active status of the returned \s-1IP\s0 entries will all be the same as
the current Node's.
.SS "ip4s"
.IX Subsection "ip4s"
Same as \f(CW\*(C`ips\*(C'\fR but for IPv4 only.
.SS "ip6s"
.IX Subsection "ip6s"
Same as \f(CW\*(C`ips\*(C'\fR but for IPv6 only.
.SS "netbios"
.IX Subsection "netbios"
Returns the \f(CW\*(C`node_nbt\*(C'\fR entry associated with this Node if one exists. That
is, the NetBIOS information of this \s-1MAC\s0 address at the time of discovery.
.SS "wireless"
.IX Subsection "wireless"
Returns the set of \f(CW\*(C`node_wireless\*(C'\fR entries associated with this Node. That
is, the SSIDs and wireless statistics associated with this \s-1MAC\s0 address
at the time of discovery.
.SS "oui"
.IX Subsection "oui"
Returns the \f(CW\*(C`oui\*(C'\fR table entry matching this Node. You can then join on this
relation and retrieve the Company name from the related table.
.PP
The \s-1JOIN\s0 is of type \s-1LEFT,\s0 in case the \s-1OUI\s0 table has not been populated.
.SH "ADDITIONAL COLUMNS"
.IX Header "ADDITIONAL COLUMNS"
.SS "time_first_stamp"
.IX Subsection "time_first_stamp"
Formatted version of the \f(CW\*(C`time_first\*(C'\fR field, accurate to the minute.
.PP
The format is somewhat like \s-1ISO 8601\s0 or \s-1RFC3339\s0 but without the middle \f(CW\*(C`T\*(C'\fR
between the date stamp and time stamp. That is:
.PP
.Vb 1
\& 2012\-02\-06 12:49
.Ve
.SS "time_last_stamp"
.IX Subsection "time_last_stamp"
Formatted version of the \f(CW\*(C`time_last\*(C'\fR field, accurate to the minute.
.PP
The format is somewhat like \s-1ISO 8601\s0 or \s-1RFC3339\s0 but without the middle \f(CW\*(C`T\*(C'\fR
between the date stamp and time stamp. That is:
.PP
.Vb 1
\& 2012\-02\-06 12:49
.Ve
.SS "net_mac"
.IX Subsection "net_mac"
Returns the \f(CW\*(C`mac\*(C'\fR column instantiated into a NetAddr::MAC object.
