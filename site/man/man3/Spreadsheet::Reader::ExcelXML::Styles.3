.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::ExcelXML::Styles 3"
.TH Spreadsheet::Reader::ExcelXML::Styles 3 "2017-04-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::ExcelXML::Styles \- The styles interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        #!/usr/bin/env perl
\&        use Data::Dumper;
\&        use MooseX::ShortCut::BuildInstance qw( build_instance );
\&        use Types::Standard qw( ConsumerOf HasMethods Int );
\&        use Spreadsheet::Reader::ExcelXML::Error;
\&        use Spreadsheet::Reader::ExcelXML::Styles;
\&        use Spreadsheet::Reader::ExcelXML::XMLReader::PositionStyles;
\&        use Spreadsheet::Reader::ExcelXML::XMLReader;
\&        use Spreadsheet::Reader::Format::FmtDefault;
\&        use Spreadsheet::Reader::Format::ParseExcelFormatStrings;
\&        use Spreadsheet::Reader::Format;
\&        my      $workbook_instance = build_instance(
\&                        package => \*(AqSpreadsheet::Reader::ExcelXML::Workbook\*(Aq,
\&                        add_attributes =>{
\&                                formatter_inst =>{
\&                                        isa     =>      ConsumerOf[ \*(AqSpreadsheet::Reader::Format\*(Aq ],# Interface
\&                                        writer  => \*(Aqset_formatter_inst\*(Aq,
\&                                        reader  => \*(Aqget_formatter_inst\*(Aq,
\&                                        predicate => \*(Aq_has_formatter_inst\*(Aq,
\&                                        handles => { qw(
\&                                                        get_formatter_region                    get_excel_region
\&                                                        has_target_encoding                             has_target_encoding
\&                                                        get_target_encoding                             get_target_encoding
\&                                                        set_target_encoding                             set_target_encoding
\&                                                        change_output_encoding                  change_output_encoding
\&                                                        set_defined_excel_formats               set_defined_excel_formats
\&                                                        get_defined_conversion                  get_defined_conversion
\&                                                        parse_excel_format_string               parse_excel_format_string
\&                                                        set_date_behavior                               set_date_behavior
\&                                                        set_european_first                              set_european_first
\&                                                        set_formatter_cache_behavior    set_cache_behavior
\&                                                        get_excel_region                                get_excel_region
\&                                                ),
\&                                        },
\&                                },
\&                                epoch_year =>{
\&                                        isa => Int,
\&                                        reader => \*(Aqget_epoch_year\*(Aq,
\&                                        default => 1904,
\&                                },
\&                                error_inst =>{
\&                                        isa =>  HasMethods[qw(
\&                                                                                error set_error clear_error set_warnings if_warn
\&                                                                        ) ],
\&                                        clearer         => \*(Aq_clear_error_inst\*(Aq,
\&                                        reader          => \*(Aqget_error_inst\*(Aq,
\&                                        required        => 1,
\&                                        handles =>[ qw(
\&                                                error set_error clear_error set_warnings if_warn
\&                                        ) ],
\&                                        default => sub{ Spreadsheet::Reader::ExcelXML::Error\->new() },
\&                                },
\&                        },
\&                        add_methods =>{
\&                                get_empty_return_type => sub{ 1 },
\&                        },
\&                );
\&        my      $format_instance = build_instance(
\&                        package => \*(AqFormatInstance\*(Aq,
\&                        superclasses => [ \*(AqSpreadsheet::Reader::Format::FmtDefault\*(Aq ],
\&                        add_roles_in_sequence =>[qw(
\&                                        Spreadsheet::Reader::Format::ParseExcelFormatStrings
\&                                        Spreadsheet::Reader::Format
\&                        )],
\&                        target_encoding => \*(Aqlatin1\*(Aq,# Adjust the string output encoding here
\&                        workbook_inst => $workbook_instance,
\&                );
\&        $workbook_instance\->set_formatter_inst( $format_instance );
\&        my      $test_instance  =       build_instance(
\&                        package => \*(AqStylesInterface\*(Aq,
\&                        superclasses => [\*(AqSpreadsheet::Reader::ExcelXML::XMLReader\*(Aq],
\&                        add_roles_in_sequence => [
\&                                \*(AqSpreadsheet::Reader::ExcelXML::XMLReader::PositionStyles\*(Aq,
\&                                \*(AqSpreadsheet::Reader::ExcelXML::Styles\*(Aq,
\&                        ],
\&                        file => \*(Aq../../../../t/test_files/xl/styles.xml\*(Aq,,
\&                        workbook_inst => $workbook_instance,
\&                );
\&        print Dumper( $test_instance\->get_format( 2 ) );
\&
\&        #######################################
\&        # SYNOPSIS Screen Output
\&        # 01: $VAR1 = {
\&        # 02: \*(Aqcell_style\*(Aq => {
\&        # 03:     \*(AqbuiltinId\*(Aq => \*(Aq0\*(Aq,
\&        # 04:     \*(AqxfId\*(Aq => \*(Aq0\*(Aq,
\&        # 05:     \*(Aqname\*(Aq => \*(AqNormal\*(Aq
\&        # 06: },
\&        # 07: \*(Aqcell_font\*(Aq => {
\&        # 08:     \*(Aqname\*(Aq => \*(AqCalibri\*(Aq,
\&        # 09:     \*(Aqfamily\*(Aq => \*(Aq2\*(Aq,
\&        # 10:     \*(Aqscheme\*(Aq => \*(Aqminor\*(Aq,
\&        # 11:     \*(Aqsz\*(Aq => \*(Aq11\*(Aq,
\&        # 12:     \*(Aqcolor\*(Aq => {
\&        # 13:         \*(Aqtheme\*(Aq => \*(Aq1\*(Aq
\&        # 14:     }
\&        # 15:  },
\&        # 16: \*(Aqcell_fill\*(Aq => {
\&        # 17:     \*(AqpatternFill\*(Aq => {
\&        # 18:         \*(AqpatternType\*(Aq => \*(Aqnone\*(Aq
\&        # 19:      }
\&        # 20: },
\&        # 21: \*(Aqcell_border\*(Aq => {
\&        # 22:      \*(Aqdiagonal\*(Aq => undef,
\&        # 23:      \*(Aqbottom\*(Aq => undef,
\&        # 24:      \*(Aqright\*(Aq => undef,
\&        # 25:      \*(Aqtop\*(Aq => undef,
\&        # 26:      \*(Aqleft\*(Aq => undef
\&        # 27: },
\&        # 28: \*(Aqcell_coercion\*(Aq => bless( {
\&        ~~ Skipped 142 lines ~~
\&        #170:                             \*(Aqdisplay_name\*(Aq => \*(AqExcel_date_164\*(Aq,
\&        #171:                                                     \*(Aqname\*(Aq => \*(AqDATESTRING\*(Aq,
\&        #172:                           }, \*(AqType::Tiny\*(Aq ),
\&        #173: \*(AqapplyNumberFormat\*(Aq => \*(Aq1\*(Aq,
\&        #174: };
\&        #######################################
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation is written to explain ways to use this module.  To use the general
package for excel parsing out of the box please review the documentation for Workbooks
, Worksheets
, and
Cells.
.PP
This role is written as the interface for getting useful data from the sub file 'styles.xml'
that is a member of a zipped (.xlsx) archive or a stand alone \s-1XML\s0 text file containing an
equivalent subset of information in the 'Styles' node.  The styles.xml file contains the
format and display options used by Excel for showing the stored data.  The \s-1SYNOPSIS\s0 shows
the (very convoluted) way to get this interface wired up and working.  Unless you are
trying to rewrite this package don't pay attention to that.  The package will build it
for you.  This interface doesn't hold any of the functionality it just mandates certain
behaviors below it.  The documentation is the explanation of how the final class should
perform when the layers below are correctly implemented.
.SS "Method(s)"
.IX Subsection "Method(s)"
These are the methods mandated by this interface.
.PP
\fIget_format( ($position|$name), [$header], [$exclude_header] )\fR
.IX Subsection "get_format( ($position|$name), [$header], [$exclude_header] )"
.Sp
.RS 4
\&\fBDefinition:\fR This will return the styles information from the identified \f(CW$position\fR
(counting from zero) or \f(CW$name\fR.  The target position is usually drawn from the cell
data stored in the worksheet.  The information is returned as a perl hash ref.  Since
the styles data is in two tiers it finds all the subtier information for each indicated
piece and appends them to the hash ref as values for each type key.
.Sp
\&\fBAccepts position 0:\fR dependant on the role implementation; \f(CW$position\fR = an integer for
the styles \f(CW$position\fR. (from Spreadsheet::Reader::ExcelXML::XMLReader::PositionStyles),
\&\f(CW$name\fR = a (sub) node name indicating which styles node should be returned (from
Spreadsheet::Reader::ExcelXML::XMLReader::NamedStyles)
.Sp
\&\fBAccepts position 1:\fR \f(CW$header\fR = the target header key (use the
\&\*(L"Attributes\*(R" in Spreadsheet::Reader::ExcelXML::Cell that are cell formats as the definition
of range for this.)  It will cause only this header subset to be returned
.Sp
\&\fBAccepts position 2:\fR \f(CW$exclude_header\fR = the target header key (use the
\&\*(L"Attributes\*(R" in Spreadsheet::Reader::ExcelXML::Cell that are cell formats as the definition
of range for this.)  It will exclude the header from the returned data set.
.Sp
\&\fBReturns:\fR a hash ref of data
.RE
.PP
\fIget_default_format( [$header], [$exclude_header] )\fR
.IX Subsection "get_default_format( [$header], [$exclude_header] )"
.Sp
.RS 4
\&\fBDefinition:\fR For any cell that does not have a unquely identified format excel generally
stores a default format for the remainder of the sheet.  This will return the two
tiered default styles information.  The information is returned in the same format as the
get_format method.
.Sp
\&\fBAccepts position 0:\fR \f(CW$header\fR = the target header key (use the
\&\*(L"Attributes\*(R" in Spreadsheet::Reader::ExcelXML::Cell that are cell formats as the definition
of range for this.)  It will cause only this header subset to be returned
.Sp
\&\fBAccepts position 1:\fR \f(CW$exclude_header\fR = the target header key (optional at position 2) (use the
\&\*(L"Attributes\*(R" in Spreadsheet::Reader::ExcelXML::Cell that are cell formats as the definition
of range for this.)  It will exclude the header from the returned data set.
.Sp
\&\fBReturns:\fR a hash ref of data
.RE
.PP
\fIloaded_correctly\fR
.IX Subsection "loaded_correctly"
.Sp
.RS 4
\&\fBDefinition:\fR When building a styles reader it may be that the file is deformed.  This is
the way to know if the reader thought the file was good.
.Sp
\&\fBAccepts:\fR Nothing
.Sp
\&\fBReturns:\fR (1|0)
.RE
.SS "Attributes"
.IX Subsection "Attributes"
Data passed to new when creating an instance with this interface. For
modification of this(ese) attribute(s) see the listed 'attribute
methods'.  For more information on attributes see
Moose::Manual::Attributes.  The easiest way to modify this(ese)
attribute(s) is during instance creation before it is passed to the
workbook or parser.
.PP
\fIfile\fR
.IX Subsection "file"
.Sp
.RS 4
\&\fBDefinition:\fR This attribute holds the file handle for the file being read.  If
the full file name and path is passed to the attribute the class will coerce that
into an IO::File file handle.
.Sp
\&\fBDefault:\fR no default \- this must be provided to read a file
.Sp
\&\fBRequired:\fR yes
.Sp
\&\fBRange:\fR any unencrypted styles.xml file name and path or IO::File file
handle with that content.
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fBset_file\fR
.Sp
.RS 4
\&\fBDefinition:\fR change the file value in the attribute (this will reboot
the file instance and lock the file)
.RE
.RE
.RS 4
.Sp
\&\fBget_file\fR
.Sp
.RS 4
\&\fBDefinition:\fR Returns the file handle of the file even if a file name
was passed
.RE
.RE
.RS 4
.Sp
\&\fBhas_file\fR
.Sp
.RS 4
\&\fBDefinition:\fR this is used to see if the file loaded correctly.
.RE
.RE
.RS 4
.Sp
\&\fBclear_file\fR
.Sp
.RS 4
\&\fBDefinition:\fR this clears (and unlocks) the file handle
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fIcache_positions\fR
.IX Subsection "cache_positions"
.Sp
.RS 4
\&\fBDefinition:\fR Especially for sheets with lots of stored formats the
parser can slow way down when accessing each postion.  This is
because the are not stored sequentially and the reader is a \s-1JIT\s0 linear
parser.  To go back it must restart and index through each position till
it gets to the right place.  This is especially true for excel sheets
that have experienced any significant level of manual intervention prior
to being read.  This attribute sets caching (default on) for styles
so the parser builds and stores all the styles settings at the beginning.
If the file is cached it will close and release the file handle in order
to free up some space. (a small win in exchange for the space taken by
the cache).
.Sp
\&\fBDefault:\fR 1 = caching is on
.Sp
\&\fBRange:\fR 1|0
.Sp
\&\fBAttribute required:\fR yes
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
none \- (will be autoset by \*(L"cache_positions\*(R" in Spreadsheet::Reader::ExcelXML)
.RE
.RE
.RS 4
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::Reader::ExcelXML/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing yet
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Spreadsheet::Reader::ExcelXML \- the package
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::Read \- generic Spreadsheet reader
.Sp
Spreadsheet::ParseExcel \- Excel binary version 2003 and earlier (.xls files)
.Sp
Spreadsheet::XLSX \- Excel version 2007 and later
.Sp
Spreadsheet::ParseXLSX \- Excel version 2007 and later
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
