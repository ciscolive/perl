.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::DNS::BulkHostNameTemplate 3"
.TH Infoblox::Grid::DNS::BulkHostNameTemplate 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::DNS::BulkHostNameTemplate \- Manages the DNS bulk host name formats defined at the grid level.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bulk host name template defines the format based on which the host names are generated from a bulk host..
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 4
\& my $bulk_host_name_template = Infoblox::Grid::DNS::BulkHostNameTemplate\->new(
\&     template_name   => $string,    #Required
\&     template_format => $string     #Required
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to apply to the bulk host name template object.
.SS "Infoblox::Grid::DNS\->bulk_host_name_templates( )"
.IX Subsection "Infoblox::Grid::DNS->bulk_host_name_templates( )"
.RS 4
Use this function to specify a bulk host name template at the grid level in the Infoblox appliance.
.Sp
Note that we can't remove or modify default bulk host name templates we can only add and modify our custom templates to the current bulk host name templates array.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Create a BulkHostNameTemplate object.
\& my $custom_template = Infoblox::Grid::DNS::BulkHostNameTemplate\->new(
\&    template_name   => "test",
\&    template_format => "\-#1\-#2\-#3\-#4",
\& );
\&
\& #Retrieve bulk host name templates array
\& my $bhnt = $grid_dns\->bull_host_name_templates();
\&
\& #Configure bulk host name template on the Infoblox grid object
\& push @$bhnt, $custom_template;
\& my $response = $grid_dns\->bulk_host_name_templates($bhnt);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attributes values of a bulk host name template object.
.SS "template_name( )"
.IX Subsection "template_name( )"
.RS 4
Use this method to set or retrieve the name of bulk host name template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
String with the name of the bulk host name template.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get template_name
\& my $template_name = $bulk_host_name_template\->template_name();
\& #Modify template_name
\& $template_name\->template_name("new_name");
.Ve
.RE
.RS 4
.RE
.SS "template_format( )"
.IX Subsection "template_format( )"
.RS 4
Use this method to set or retrieve the format of bulk host name template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The format of bulk host name template. It should follow certain rules (please use Administration Guide as reference).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get template_format
\& my $template_format = $bulk_host_name_template\->template_format();
\& #Modify template_format
\& $bulk_host_name_template>template_format("\-#1\-#2\-#3\-#4");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to a bulk host name template object such as create, modify, and remove. Also, this sample code includes error handling for the operations.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&     die( "Construct session failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail() );
\& }
\& print "Session created successfully\en";
\&
\& #Create a new bulk host name template object
\&
\& my $my_template = Infoblox::Grid::DNS::BulkHostNameTemplate\->new(
\&     template_name   => "My Template",
\&     template_format => "#4",
\& );
\& unless ($my_template) {
\&     die(
\&         "Construct bulk host name template object my_template failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail()
\&     );
\& }
\& print "Bulk host name template object my_template created successfully\en";
\&
\& #Get the Member DNS object to add a bulk host name template object to it
\&
\& my $grid_dns =
\&   $session\->get( "object" => "Infoblox::Grid::DNS", "grid" => "Infoblox" );
\& unless ($grid_dns) {
\&     die( "Get Grid DNS failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail() );
\& }
\&
\& my $bhnt = $grid_dns\->bulk_host_name_templates();
\&
\& #Add new bulk host name template to Grid DNS bulk host name templates
\&
\& unshift(@$bhnt, $my_template);
\& $grid_dns\->bulk_host_name_templates($bhnt);
\&
\& $session\->modify($grid_dns)
\&   or die( "modify Grid DNS failed:",
\&     $session\->status_code(), $session\->status_detail() );
\& print "Modify grid DNS successful for bulk host name template object\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::DNS, Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
