.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Directory::Diff::Copy 3"
.TH Directory::Diff::Copy 3 "2017-10-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Directory::Diff::Copy \- Copy differences between two directories
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   use Directory::Diff::Copy \*(Aqcopy_diff_only\*(Aq;
\&   copy_diff_only ($old_dir, $new_dir, $output_dir);
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "copy_diff_only"
.IX Subsection "copy_diff_only"
.Vb 1
\&   copy_diff_only ($old_dir, $new_dir, $output_dir);
.Ve
.PP
Given directories specified by \f(CW$old_dir\fR, \f(CW$new_dir\fR, and
\&\f(CW$output_dir\fR, this compares the files in \f(CW$old_dir\fR and \f(CW$new_dir\fR
using \*(L"directory_diff\*(R" in Directory::Diff, and puts the differing files
only from \f(CW$new_dir\fR into \f(CW$output_dir\fR using \*(L"copy\*(R" in File::Copy. If
\&\f(CW$output_dir\fR does not exist, this creates it. If \f(CW$output_dir\fR does
exist, this removes all files from it using \*(L"rmtree\*(R" in File::Path
before copying. New directories are made using \*(L"mkpath\*(R" in File::Path.
.PP
The return value is the number of files copied. This value is useful
to detect whether anything was actually copied or not.
.PP
.Vb 5
\&    if (copy_diff_only ($o, $n, $t)) {
\&        # we have actually copied things, so do something
\&    } else {
\&        # nothing copied, don\*(Aqt need to do any more work
\&    }
.Ve
.PP
An optional fourth parameter switches on debugging information if set
to any true value:
.PP
.Vb 1
\&    copy_diff_only ($old_dir, $new_dir, $output_dir, 1);
.Ve
.PP
The debugging information is printed to standard output. It specifies
each file that has been copied.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Directory::Diff::Copy is part of the Directory::Diff
distribution. See the documentation of Directory::Diff for full
details of author, copyright, licence and version.
