.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Template::Generator 3"
.TH Spreadsheet::Template::Generator 3 "2015-03-26" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Template::Generator \- create new templates from existing spreadsheets
.SH "VERSION"
.IX Header "VERSION"
version 0.05
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Spreadsheet::Template::Generator;
\&
\&  my $generator = Spreadsheet::Template::Generator\->new;
\&  open my $fh, \*(Aq>:encoding(utf8)\*(Aq, \*(Aqout.json\*(Aq;
\&  $fh\->print($generator\->generate($filename));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is used to create new templates from existing spreadsheets. You can
then modify this output to be suitable to use as input for
Spreadsheet::Template by, for instance, adding in Text::Xslate directives
to use your actual data, rather than the hardcoded data in the original
spreadsheet.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "parser_class"
.IX Subsection "parser_class"
The class to use for parsing the spreadsheet. Defaults to
Spreadsheet::Template::Generator::Parser::XLSX.
.SS "parser_options"
.IX Subsection "parser_options"
Options to pass to the parser constructor. Defaults to an empty hashref.
.SH "METHODS"
.IX Header "METHODS"
.SS "generate($filename)"
.IX Subsection "generate($filename)"
Returns a string containing the \s-1JSON\s0 representation of the data contained in
the spreadsheet file \f(CW$filename\fR. This representation is documented in
Spreadsheet::Template.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jesse Luehrs <doy@tozt.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2015 by Jesse Luehrs.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The MIT (X11) License
.Ve
