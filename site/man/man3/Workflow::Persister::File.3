.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Workflow::Persister::File 3"
.TH Workflow::Persister::File 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Workflow::Persister::File \- Persist workflow and history to the filesystem
.SH "VERSION"
.IX Header "VERSION"
This documentation describes version 1.10 of this package
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& <persister name="MainPersister"
\&            class="Workflow::Persister::File"
\&            path="/home/workflow/storage"/>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Main persistence class for storing the workflow and workflow history
records to a filesystem for later retrieval. Data are stored in
serialized Perl data structure files.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
\fIconstitute_object\fR
.IX Subsection "constitute_object"
.PP
This method deserializes an object.
.PP
Takes a single parameter of an filesystem path pointing to an object
.PP
Returns the re-instantiated object or dies.
.PP
\fIcreate_history\fR
.IX Subsection "create_history"
.PP
Serializes history records associated with a workflow object
.PP
Takes two parameters: a workflow object and an array of workflow history objects
.PP
Returns: provided array of workflow history objects upon success
.PP
\fIcreate_workflow\fR
.IX Subsection "create_workflow"
.PP
Serializes a workflow into the persistance entity configured by our workflow.
.PP
Takes a single parameter: a workflow object
.PP
Returns a single value, a id for unique identification of out serialized
workflow for possible deserialization.
.PP
\fIfetch_history\fR
.IX Subsection "fetch_history"
.PP
Deserializes history records associated with a workflow object
.PP
Takes a single parameter: a workflow object
.PP
Returns an array of workflow history objects upon success
.PP
\fIfetch_workflow\fR
.IX Subsection "fetch_workflow"
.PP
Deserializes a workflow from the persistance entity configured by our workflow.
.PP
Takes a single parameter: the unique id assigned to our workflow upon
serialization (see \*(L"create_workflow\*(R").
.PP
Returns a hashref consisting of two keys:
.IP "\(bu" 4
state, the workflows current state
.IP "\(bu" 4
last_update, date indicating last update
.PP
\fIinit ( \e%params )\fR
.IX Subsection "init ( %params )"
.PP
Method to initialize the persister object. Sets up the configured generators
.PP
Throws a Workflow::Exception if a valid filesystem path is not provided with
the parameters.
.PP
\fIserialize_object\fR
.IX Subsection "serialize_object"
.PP
Method that writes a given object to a given path.
.PP
Takes two parameters: path (a filesystem path) and an object
.PP
Throws Workflow::Exception if unable to serialize the given object to the
given path.
.PP
Returns: Nothing
.PP
\fIupdate_workflow\fR
.IX Subsection "update_workflow"
.PP
Updates a serialized workflow in the persistance entity configured by our
workflow.
.PP
Takes a single parameter: a workflow object
.PP
Returns: Nothing
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
refactor \*(L"constitute_object\*(R", no checks are made on filesystem prior
to deserialization attempt.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Workflow::Persister
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2007 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonas B. Nielsen (jonasbn) <jonasbn@cpan.org> is the current maintainer.
.PP
Chris Winters <chris@cwinters.com>, original author.
