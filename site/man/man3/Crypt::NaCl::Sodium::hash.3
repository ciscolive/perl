.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::NaCl::Sodium::hash 3"
.TH Crypt::NaCl::Sodium::hash 3 "2015-12-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::NaCl::Sodium::hash \- SHA\-2 hash functions (SHA\-256, SHA\-512)
.SH "VERSION"
.IX Header "VERSION"
version 1.0.8.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Crypt::NaCl::Sodium qw( :utils );
\&
\&    my $crypto_hash = Crypt::NaCl::Sodium\->hash();
\&
\&    # list of files for which we are computing the checksums
\&    my @files = ...;
\&
\&    ## SHA\-256
\&    ########
\&
\&    for my $file ( @files ) {
\&        # file name checksum
\&        my $filename_hash = $crypto_hash\->sha256($file);
\&
\&        # using multi\-part API
\&        my $stream = $crypto_hash\->sha256_init();
\&
\&        open(my $fh, $file) or die;
\&        while ( sysread($fh, my $buf, 4096) ) {
\&            # add the chunk of data
\&            $stream\->update( $buf );
\&        }
\&        close($fh);
\&
\&        # calculate the final checksum
\&        my $checksum = $stream\->final();
\&    }
\&
\&    ## SHA\-512
\&    ########
\&
\&    for my $file ( @files ) {
\&        # file name checksum
\&        my $filename_hash = $crypto_hash\->sha512($file);
\&
\&        # using multi\-part API
\&        my $stream = $crypto_hash\->sha512_init();
\&
\&        open(my $fh, $file) or die;
\&        while ( sysread($fh, my $buf, 4096) ) {
\&            # add the chunk of data
\&            $stream\->update( $buf );
\&        }
\&        close($fh);
\&
\&        # calculate the final checksum
\&        my $checksum = $stream\->final();
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fI\s-1SHA\-256\s0\fR and \fI\s-1SHA\-512\s0\fR functions are provided for interoperability with
other applications.
.PP
These functions are not keyed and are thus deterministic. In
addition, they are vulnerable to length extension attacks.
.PP
A message can be hashed in a single pass, but a streaming \s-1API\s0 is
also available to process a message as a sequence of
multiple chunks.
.PP
If you are looking for a generic hash function and not specifically
\&\fI\s-1SHA\-2\s0\fR, using Crypt::NaCl::Sodium::generichash might be a
better choice.
.SH "METHODS"
.IX Header "METHODS"
.SS "sha256"
.IX Subsection "sha256"
.Vb 1
\&    my $hash256 = $crypto_hash\->sha256($msg);
.Ve
.PP
Generates \fI\s-1SHA\-256\s0\fR hash of the given \f(CW$msg\fR.
.PP
The length of the \f(CW$sha256\fR equals \*(L"\s-1SHA256_BYTES\*(R"\s0.
.PP
Returns Data::BytesLocker object.
.PP
\fIMulti-part \s-1API\s0\fR
.IX Subsection "Multi-part API"
.PP
Multi-part computation is also supported.
.PP
.Vb 1
\&    my $ctx256 = $crypto_hash\->sha256_init();
\&
\&    $ctx256\->update( $msgX );
\&    $ctx256\->update( $msgY )\->update( $msgZ, ... );
\&
\&    my $mac256 = $ctx256\->final();
.Ve
.PP
sha256_init
.IX Subsection "sha256_init"
.PP
.Vb 1
\&    my $ctx256 = $crypto_hash\->sha256_init();
.Ve
.PP
Creates a context for multi-part computation.
.PP
Returns \f(CW\*(C`Crypt::NaCl::Sodium::hash::sha256stream\*(C'\fR object which encapsulates
the computation state of the \fI\s-1SHA\-256\s0\fR algorithm.
.PP
clone
.IX Subsection "clone"
.PP
.Vb 4
\&    while ( <> ) {
\&        $ctx256\->update( $_ );
\&        print "Line: $.: ", $ctx256\->clone\->final\->to_hex, "\en";
\&    }
.Ve
.PP
Returns a copy of \f(CW$ctx\fR object, that contains the current computation
state.
.PP
update
.IX Subsection "update"
.PP
.Vb 1
\&    $ctx256\->update( $msgX, ... );
.Ve
.PP
Appends its arguments to the message for which the \s-1MAC\s0 is being calculated.
.PP
Returns the \f(CW$ctx256\fR object itself.
.PP
final
.IX Subsection "final"
.PP
.Vb 1
\&    my $mac256 = $ctx256\->final();
.Ve
.PP
Computes the final \s-1MAC\s0 of the input data.
.PP
Returns Data::BytesLocker object.
.SS "sha512"
.IX Subsection "sha512"
.Vb 1
\&    my $hash512 = $crypto_hash\->sha512($msg);
.Ve
.PP
Generates \fI\s-1SHA\-512\s0\fR hash of the given \f(CW$msg\fR.
.PP
The length of the \f(CW$sha512\fR equals \*(L"\s-1SHA512_BYTES\*(R"\s0.
.PP
Returns Data::BytesLocker object.
.PP
\fIMulti-part \s-1API\s0\fR
.IX Subsection "Multi-part API"
.PP
Multi-part computation is also supported.
.PP
.Vb 1
\&    my $ctx512 = $crypto_hash\->sha512_init();
\&
\&    $ctx512\->update( $msgX );
\&    $ctx512\->update( $msgY )\->update( $msgZ, ... );
\&
\&    my $mac512 = $ctx512\->final();
.Ve
.PP
sha512_init
.IX Subsection "sha512_init"
.PP
.Vb 1
\&    my $ctx512 = $crypto_hash\->sha512_init();
.Ve
.PP
Creates a context for multi-part computation.
.PP
Returns \f(CW\*(C`Crypt::NaCl::Sodium::hash::sha512stream\*(C'\fR object which encapsulates
the computation state of the \fI\s-1SHA\-512\s0\fR algorithm.
.PP
clone
.IX Subsection "clone"
.PP
.Vb 4
\&    while ( <> ) {
\&        $ctx512\->update( $_ );
\&        print "Line: $.: ", $ctx512\->clone\->final\->to_hex, "\en";
\&    }
.Ve
.PP
Returns a copy of \f(CW$ctx\fR object, that contains the current computation
state.
.PP
update
.IX Subsection "update"
.PP
.Vb 1
\&    $ctx512\->update( $msgX, ... );
.Ve
.PP
Appends its arguments to the message for which the \s-1MAC\s0 is being calculated.
.PP
Returns the \f(CW$ctx512\fR object itself.
.PP
final
.IX Subsection "final"
.PP
.Vb 1
\&    my $mac512 = $ctx512\->final();
.Ve
.PP
Computes the final \s-1MAC\s0 of the input data.
.PP
Returns Data::BytesLocker object.
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.SS "\s-1SHA256_BYTES\s0"
.IX Subsection "SHA256_BYTES"
.Vb 1
\&    my $sha256_length = $crypto_hash\->SHA256_BYTES;
.Ve
.PP
Returns the length of \fI\s-1SHA\-256\s0\fR hash.
.SS "\s-1SHA512_BYTES\s0"
.IX Subsection "SHA512_BYTES"
.Vb 1
\&    my $sha512_length = $crypto_hash\->SHA512_BYTES;
.Ve
.PP
Returns the length of \fI\s-1SHA\-512\s0\fR hash.
.SH "SECURITY MODEL"
.IX Header "SECURITY MODEL"
Although the existing attacks against \fI\s-1SHA\-2\s0\fR are not yet practical, there are
various attacks against its implementations. The
recommended ways of message authentication are provided by
Crypt::NaCl::Sodium::generichash and Crypt::NaCl::Sodium::auth.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Data::BytesLocker \- guarded data storage
.IP "\(bu" 4
\&\s-1SHA\-2\s0 <https://en.wikipedia.org/wiki/SHA-2>
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex J. G. Burzyński <ajgb@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2015 by Alex J. G. Burzyński <ajgb@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
