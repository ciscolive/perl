.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Discovery::DiagnosticTask 3"
.TH Infoblox::Grid::Discovery::DiagnosticTask 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Discovery::DiagnosticTask \- The discovery diagnostic task.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The object provides information about the discovery diagnostic task.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a discovery diagnostic task object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance.
See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific discovery diagnostic task object:
\&
\&  address                    \- Optional. The IP address of the discovery diagnostic task.
\&  network_view               \- Optional. The network view of the discovery diagnostic task.
\&  task_id                    \- Optional. The id of the discovery diagnostic task.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object     => \*(AqInfoblox::Grid::Discovery::DiagnosticTask\*(Aq,
\&     ip_address => \*(Aq10.0.0.1\*(Aq,
\& );
\&
\& my @retrieved_objs = $session\->get(
\&     object  => \*(AqInfoblox::Grid::Discovery::DiagnosticTask\*(Aq,
\&     task_id => \*(Aqtask_1\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for the existing objects from the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific discovery diagnostic task object:
\&
\&  address                    \- Optional. The IP address of the discovery diagnostic task (regular expression).
\&  network_view               \- Optional. The network view name of the discovery diagnostic task.
\&  task_id                    \- Optional. The id of the discovery diagnostic task.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->search(
\&     object     => \*(AqInfoblox::Grid::Discovery::DiagnosticTask\*(Aq,
\&     ip_address => \*(Aq10.*\*(Aq,
\& );
\&
\& my @retrieved_objs = $session\->search(
\&     object  => \*(AqInfoblox::Grid::Discovery::DiagnosticTask\*(Aq,
\&     task_id => \*(Aqtask_1\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a discovery diagnostic task.
.SS "community_string( )"
.IX Subsection "community_string( )"
.RS 4
Use this method to retrieve the \s-1SNMP\s0 community string. This is a read-only attribute.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $community_string = $object\->community_string();
.Ve
.RE
.RS 4
.RE
.SS "debug_snmp( )"
.IX Subsection "debug_snmp( )"
.RS 4
Use this method to retrieve the flag for the \s-1SNMP\s0 debug. This is a read-only attribute.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $debug_snmp = $object\->debug_snmp();
.Ve
.RE
.RS 4
.RE
.SS "force_test( )"
.IX Subsection "force_test( )"
.RS 4
Use this method to retrieve the flag for the force test. This is a read-only attribute.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $force_test = $object\->force_test();
.Ve
.RE
.RS 4
.RE
.SS "ip_address( )"
.IX Subsection "ip_address( )"
.RS 4
Use this method to retrieve the discovery diagnostic \s-1IP\s0 address. This is a read-only attribute.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $ip_address = $object\->ip_address();
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to retrieve the network view for public IPs. This is a read-only attribute.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $network_view = $object\->network_view();
.Ve
.RE
.RS 4
.RE
.SS "start_time( )"
.IX Subsection "start_time( )"
.RS 4
Use this method to retrieve the timestamp when the task was started. This is a read-only attribute.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $start_time = $object\->start_time();
.Ve
.RE
.RS 4
.RE
.SS "task_id( )"
.IX Subsection "task_id( )"
.RS 4
Use this method to retrieve the unique identifier for the discovery diagnostic task. This is a read-only attribute.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $task_id = $object\->task_id();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
