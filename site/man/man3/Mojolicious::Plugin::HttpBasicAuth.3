.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::HttpBasicAuth 3"
.TH Mojolicious::Plugin::HttpBasicAuth 3 "2015-03-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::HttpBasicAuth \- Http\-Basic\-Authentication implementation for Mojolicious
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  # in your startup
\&  $self\->plugin(
\&      \*(Aqhttp_basic_auth\*(Aq, {
\&          validate => sub {
\&              my $c         = shift;
\&              my $loginname = shift;
\&              my $password  = shift;
\&              my $realm     = shift;
\&              return 1 if($realm eq \*(AqEvergreen Terrace\*(Aq && $loginname eq \*(AqHomer\*(Aq && $password eq \*(AqMarge\*(Aq);
\&              return 0;
\&          },
\&          realm => \*(AqEvergreen Terrace\*(Aq
\&      }
\&  );
\&
\&  # in your routes
\&  sub index {
\&      my $self = shift;
\&      return unless $self\->basic_auth(\e%options);
\&      $self\->render();
\&  }
\&
\&  # or bridged
\&  my $foo = $r\->bridge(\*(Aq/bridge\*(Aq)\->to(cb => sub {
\&      my $self = shift;
\&      # Authenticated
\&      return unless $self\->basic_auth({realm => \*(AqCastle Bridge\*(Aq, validate => sub {return 1;}});
\&  });
\&  $foo\->route(\*(Aq/bar\*(Aq)\->to(controller => \*(Aqfoo\*(Aq, action => \*(Aqbar\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::HttpBasicAuth is a implementation of the Http-Basic-Authentication
.SH "OPTIONS"
.IX Header "OPTIONS"
Mojolicious::Plugin::HttpBasicAuth supports the following options.
.SS "realm"
.IX Subsection "realm"
.Vb 1
\&  $self\->plugin(\*(Aqhttp_basic_auth\*(Aq, {realm => \*(AqMy Castle!\*(Aq});
.Ve
.PP
HTTP-Realm, defaults to '\s-1WWW\s0'
.SS "validate"
.IX Subsection "validate"
.Vb 10
\&  $self\->plugin(\*(Aqhttp_basic_auth\*(Aq, {
\&      validate => sub {
\&            my $c          = shift;
\&            my $loginname  = shift;
\&            my $password   = shift;
\&            my $realm      = shift;
\&            return 1 if($realm eq \*(AqSpringfield\*(Aq && $loginname eq \*(AqHomer\*(Aq && $password eq \*(AqMarge\*(Aq);
\&            return 0;
\&      }
\&  });
.Ve
.PP
Validation callback to verify user. This option is \fBmandatory\fR.
.SS "invalid"
.IX Subsection "invalid"
.Vb 10
\&  $self\->plugin(\*(Aqhttp_basic_auth\*(Aq, {
\&      invalid => sub {
\&          my $controller = shift;
\&          return (
\&              json => { json     => { error => \*(AqHTTP 401: Unauthorized\*(Aq } },
\&              html => { template => \*(Aqauth/basic\*(Aq },
\&              any  => { data     => \*(AqHTTP 401: Unauthorized\*(Aq }
\&          );
\&      }
\&  });
.Ve
.PP
Callback for invalid requests, default can be seen here. Return values are dispatched to \*(L"respond_to\*(R" in Mojolicious::Controller
.SH "HELPERS"
.IX Header "HELPERS"
Mojolicious::Plugin::HttpBasicAuth implements the following helpers.
.SS "basic_auth"
.IX Subsection "basic_auth"
.Vb 1
\&  return unless $self\->basic_auth({realm => \*(AqKitchen\*(Aq});
.Ve
.PP
All default options can be overwritten in every call.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::HttpBasicAuth inherits all methods from
Mojolicious::Plugin and implements the following new ones.
.SS "register"
.IX Subsection "register"
.Vb 4
\&  my $route = $plugin\->register(Mojolicious\->new);
\&  my $route = $plugin\->register(Mojolicious\->new, {realm => \*(AqFort Knox\*(Aq, validate => sub {
\&      return 0;
\&  }});
.Ve
.PP
Register renderer and helper in Mojolicious application.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Patrick Gra\*:mer <pgraemer@cpan.org>
, <http://graemer.org>.
.SH "CONTRIBUTOR"
.IX Header "CONTRIBUTOR"
Markus Michel <mmichel@cpan.org>
, <http://markusmichel.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2015 Patrick Gra\*:mer
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
