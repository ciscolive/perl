.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Specio::Library::Path::Tiny 3"
.TH Specio::Library::Path::Tiny 3 "2016-10-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Specio::Library::Path::Tiny \- Path::Tiny types and coercions for Specio
.SH "VERSION"
.IX Header "VERSION"
version 0.04
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Specio::Library::Path::Tiny;
\&
\&  has path => ( isa => t(\*(AqPath\*(Aq) );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This library provides a set of Path::Tiny types and coercions for
Specio. These types can be used with Moose, Moo,
Params::ValidationCompiler, and other modules.
.SH "TYPES"
.IX Header "TYPES"
This library provides the following types:
.SS "Path"
.IX Subsection "Path"
A Path::Tiny object.
.PP
Will be coerced from a string or arrayref via \f(CW\*(C`Path::Tiny::path\*(C'\fR.
.SS "AbsPath"
.IX Subsection "AbsPath"
A Path::Tiny object where \f(CW\*(C`$path\->is_absolute\*(C'\fR returns true.
.PP
Will be coerced from a string or arrayref via \f(CW\*(C`Path::Tiny::path\*(C'\fR followed by
call to \f(CW\*(C`$path\->absolute\*(C'\fR.
.SS "RealPath"
.IX Subsection "RealPath"
A Path::Tiny object where \f(CW\*(C`$path\->realpath eq $path\*(C'\fR.
.PP
Will be coerced from a string or arrayref via \f(CW\*(C`Path::Tiny::path\*(C'\fR followed by
call to \f(CW\*(C`$path\->realpath\*(C'\fR.
.SS "File"
.IX Subsection "File"
A Path::Tiny object which is a file on disk according to \f(CW\*(C`$path\->is_file\*(C'\fR.
.PP
Will be coerced from a string or arrayref via \f(CW\*(C`Path::Tiny::path\*(C'\fR.
.SS "AbsFile"
.IX Subsection "AbsFile"
A Path::Tiny object which is a file on disk according to \f(CW\*(C`$path\->is_file\*(C'\fR where \f(CW\*(C`$path\->is_absolute\*(C'\fR returns true.
.PP
Will be coerced from a string or arrayref via \f(CW\*(C`Path::Tiny::path\*(C'\fR followed by
call to \f(CW\*(C`$path\->absolute\*(C'\fR.
.SS "RealFile"
.IX Subsection "RealFile"
A Path::Tiny object which is a file on disk according to \f(CW\*(C`$path\->is_file\*(C'\fR where \f(CW\*(C`$path\->realpath eq $path\*(C'\fR.
.PP
Will be coerced from a string or arrayref via \f(CW\*(C`Path::Tiny::path\*(C'\fR followed by
call to \f(CW\*(C`$path\->realpath\*(C'\fR.
.SS "Dir"
.IX Subsection "Dir"
A Path::Tiny object which is a directory on disk according to \f(CW\*(C`$path\->is_dir\*(C'\fR.
.PP
Will be coerced from a string or arrayref via \f(CW\*(C`Path::Tiny::path\*(C'\fR.
.SS "AbsDir"
.IX Subsection "AbsDir"
A Path::Tiny object which is a directory on disk according to \f(CW\*(C`$path\->is_dir\*(C'\fR where \f(CW\*(C`$path\->is_absolute\*(C'\fR returns true.
.PP
Will be coerced from a string or arrayref via \f(CW\*(C`Path::Tiny::path\*(C'\fR followed by
call to \f(CW\*(C`$path\->absolute\*(C'\fR.
.SS "RealDir"
.IX Subsection "RealDir"
A Path::Tiny object which is a directory on disk according to \f(CW\*(C`$path\->is_dir\*(C'\fR where \f(CW\*(C`$path\->realpath eq $path\*(C'\fR.
.PP
Will be coerced from a string or arrayref via \f(CW\*(C`Path::Tiny::path\*(C'\fR followed by
call to \f(CW\*(C`$path\->realpath\*(C'\fR.
.SH "CREDITS"
.IX Header "CREDITS"
The vast majority of the code in this distribution comes from David Golden's
Types::Path::Tiny distribution.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through the \s-1RT\s0 bug tracker <http://rt.cpan.org/Public/Dist/Display.html?Name=Specio-Library-Path-Tiny>
(or bug\-specio\-library\-path\-tiny@rt.cpan.org <mailto:bug-specio-library-path-tiny@rt.cpan.org>).
.PP
I am also usually active on \s-1IRC\s0 as 'drolsky' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "DONATIONS"
.IX Header "DONATIONS"
If you'd like to thank me for the work I've done on this module, please
consider making a \*(L"donation\*(R" to me via PayPal. I spend a lot of free time
creating free software, and would appreciate any support you'd care to offer.
.PP
Please note that \fBI am not suggesting that you must do this\fR in order for me
to continue working on this particular software. I will continue to do so,
inasmuch as I have in the past, for as long as it interests me.
.PP
Similarly, a donation made in this way will probably not make me work on this
software much more, unless I get so many donations that I can consider working
on free software full time (let's all have a chuckle at that together).
.PP
To donate, log into PayPal and send money to autarch@urth.org, or use the
button at <http://www.urth.org/~autarch/fs\-donation.html>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2016 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
