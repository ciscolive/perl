.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::JSUrlFor 3"
.TH Mojolicious::Plugin::JSUrlFor 3 "2015-04-26" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::JSUrlFor \- Mojolicious "url_for" helper for javascript
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Mojolicious
\&  $self\->plugin(\*(AqJSUrlFor\*(Aq);
\&
\&  # Mojolicious::Lite
\&  plugin \*(AqJSUrlFor\*(Aq;
\&
\&  # In your application
\&  my $r = $self\->routes;
\&  $r\->get(\*(Aq/messages/:message_id\*(Aq)\->to(\*(Aqmessages#show\*(Aq)\->name(\*(Aqmessages_show\*(Aq);
\&
\&  # In your layout template
\&  <head>
\&  <%= js_url_for%>
\&  </head>
\&
\&  # In your javascript
\&  $.getJSON( url_for( \*(Aqmessages_show\*(Aq, {message_id: 123} ), params, function() { ... } )
\&
\&
\&  # Instead of helper you can use generator for generating static file
\&  ./your_app.pl generate js_url_for public/static/url_for.js
\&
\&  # And then in your layout template
\&  <head>
\&    <script type="text/javascript" src=\*(Aq/static/url_for.js\*(Aq> </script>
\&  </head>
\&
\&  # Or let it generate on the fly
\&  # Can be useful if you have only RESTful API without templates and you want to provide routes names for UI
\&  $self\->plugin(\*(AqJSUrlFor\*(Aq, {route => \*(Aq/javascript/url.js\*(Aq});
\&  <head>
\&    <script type="text/javascript" src=\*(Aq/javascripts/url.js\*(Aq> </script>
\&  </head>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
I like Mojolicious routes. And one feature that I like most is that you can name your routes.
So, you can change your routes without rewriting a single line of dependent code. Of course this works if you
use route names in all of your code. You can use route name everywhere except... javascript.
But with Mojolicious::Plugin::JSUrlFor you can use route names really everywhere.
This plugin support mounted (see Mojolicious::Plugin::Mount ) apps too.
.PP
Mojolicious::Plugin::JSUrlFor contains only one helper that adds \f(CW\*(C`url_for\*(C'\fR function to your client side javascript.
.SH "HELPERS"
.IX Header "HELPERS"
.ie n .SS """js_url_for"""
.el .SS "\f(CWjs_url_for\fP"
.IX Subsection "js_url_for"
In templates \f(CW\*(C`<%= js_url_for %>\*(C'\fR
.PP
This helper will add \f(CW\*(C`url_for\*(C'\fR function to your client side javascript.
.PP
In \fIproduction\fR mode this helper will cache generated code for javascript \fIurl_for\fR function
.SH "CONFIG OPTIONS"
.IX Header "CONFIG OPTIONS"
.ie n .SS """route"""
.el .SS "\f(CWroute\fP"
.IX Subsection "route"
Simulate static javascript file. It can be useful if you have RESTful \s-1API\s0 and want to provide js file with routes.
.SH "GENERATORS"
.IX Header "GENERATORS"
.ie n .SS """js_url_for"""
.el .SS "\f(CWjs_url_for\fP"
.IX Subsection "js_url_for"
.Vb 1
\&  ./your_app.pl generate js_url_for $relative_file_name
.Ve
.PP
This command will create \fI\f(CI$relative_file_name\fI\fR file with the same content as \f(CW\*(C`js_url_for\*(C'\fR helper creates.
Then you should include this file into your layout template with \fIscript\fR tag.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::JSUrlFor inherits all methods from
Mojolicious::Plugin and implements the following new ones.
.ie n .SS """register"""
.el .SS "\f(CWregister\fP"
.IX Subsection "register"
.Vb 1
\&  $plugin\->register;
.Ve
.PP
Register plugin in Mojolicious application.
.SH "AUTHOR"
.IX Header "AUTHOR"
Viktor Turskyi <koorchik@cpan.org>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to Github <https://github.com/koorchik/Mojolicious\-Plugin\-JSUrlFor/>
.PP
Also you can report bugs to \s-1CPAN RT\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
