.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Record::RRSIG 3"
.TH Infoblox::DNS::Record::RRSIG 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Record::RRSIG  \- RRSIG Record object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1RRSIG\s0 records are one of the resource records in \s-1DNSSEC.\s0 These records store digital signatures of
resource record sets (RRsets). The digital signatures are used to authenticate the data that is in the
signed RRsets.
.PP
\&\s-1RRSIG\s0 resource records are defined in \s-1RFC 4034.\s0
.PP
\&\s-1RRSIG\s0 records are automatically generated upon the signing of an authoritative zone. The \s-1RRSIG\s0 record-object is read-only.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::DNS::Record::RRSIG object is a read-only object and does not require manual construction.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session that can be applied to an \s-1RRSIG\s0 record object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\&  Apply the following attributes to get the RRSIG Record object(s):
\&
\&     algorithm       \- Optional. The public key encryption algorithm. The allowed values are \*(Aq1\*(Aq,\*(Aq3\*(Aq,\*(Aq5\*(Aq,\*(Aq6\*(Aq,\*(Aq7\*(Aq,\*(AqRSAMD5\*(Aq,\*(AqRSASHA1\*(Aq,\*(AqDSA\*(Aq,\*(AqNSEC3RSASHA1\*(Aq,\*(AqNSEC3DSA\*(Aq,\*(AqRSASHA256\*(Aq,\*(AqRSASHA512\*(Aq,\*(AqNSEC3RSASHA256\*(Aq and \*(AqNSEC3RSASHA512\*(Aq.
\&     expiration      \- Optional. Signature expiration time, in seconds, since 1 January 1970 00:00:00 UTC.
\&     name            \- Optional. The name of the corresponding RRset.
\&     inception       \- Optional. Signature inception time, in seconds, since 1 January 1970 00:00:00 UTC.
\&     key_tag         \- Optional. Key tag identifying the corresponding public key in the DNSKEY record.
\&     labels          \- Optional. Specifies the number of labels in the original RRSIG RR owner name.
\&     original_ttl    \- Optional. TTL of the covered RRset as it appears in the authoritative zone.
\&     signature       \- Optional. Cryptographic signature that covers the RRSIG RDATA.
\&     signer_name     \- Optional. Domain name of the zone that contains the signed RRset.
\&     ttl             \- Optional. TTL value of the record itself.
\&     type_covered    \- Optional. Identifies the type of the RRset that is covered by this RRSIG record.
\&     view            \- Optional. The DNS view in which the record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&     zone            \- Optional. A zone name in FQDN format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # get all the RRSIG records for the zone \*(Aqdomain.com\*(Aq in the default DNS view.
\& my @retrieved_objs = $session\->get(
\&                       object => "Infoblox::DNS::Record::RRSIG",
\&                       signer_name   => "domain.com",
\&                       view   => "default" );
\&
\& # get the RRSIG record that corresponds to the \*(Aqtest.domain.com\*(Aq A record of the default DNS view
\& my $retrieved_obj = $session\->get(
\&                       object    => "Infoblox::DNS::Record::RRSIG",
\&                       name      => "test.domain.com",
\&                       type_covered => "A",
\&                       view      => "default" );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve the existing objects from an Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attributes to search the RRSIG Record object(s):
\&
\&     algorithm       \- Optional. The public key encryption algorithm. The allowed values are \*(Aq1\*(Aq,\*(Aq3\*(Aq,\*(Aq5\*(Aq,\*(Aq6\*(Aq,\*(Aq7\*(Aq,\*(AqRSAMD5\*(Aq,\*(AqRSASHA1\*(Aq,\*(AqDSA\*(Aq,\*(AqNSEC3RSASHA1\*(Aq,\*(AqNSEC3DSA\*(Aq,\*(AqRSASHA256\*(Aq,\*(AqRSASHA512\*(Aq,\*(AqNSEC3RSASHA256\*(Aq and \*(AqNSEC3RSASHA512\*(Aq.
\&     expiration      \- Optional. Signature expiration time, specified as seconds since 1 January 1970 00:00:00 UTC. This method supports searching with limit parameters (see below).
\&     name            \- Optional. The name of the corresponding RRset (regular expression).
\&     inception       \- Optional. Signature inception time, specified as seconds since 1 January 1970 00:00:00 UTC. This method supports searching with limit parameters (see below).
\&     key_tag         \- Optional. Key tag that identifies the corresponding public key in the DNSKEY record.
\&     labels          \- Optional. Specifies the number of labels in the original RRSIG RR owner name.
\&     original_ttl    \- Optional. TTL of the covered RRset as it appears in the authoritative zone.
\&     signature       \- Optional. Cryptographic signature that covers the RRSIG RDATA (regular expression).
\&     signer_name     \- Optional. Domain name of the zone that contains the signed RRset (regular expression).
\&     ttl             \- Optional. TTL value of the record itself.
\&     type_covered    \- Optional. Identifies the type of the RRset that is covered by this RRSIG record (regular expression).
\&     view            \- Optional. The DNS view in which the record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&     zone            \- Optional. A zone name in FQDN format.
.Ve
.Sp
See Infoblox::Session/search with limit parameters for more information on this functionality.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # get all the RRSIG records for the zone matching the regular expression.
\& my @retrieved_objs = $session\->search(
\&                       object => "Infoblox::DNS::Record::RRSIG",
\&                       signer_name   => ".*[.]com",);
\&
\& # get all the RRSIG records with inception time between 12:00 September 1, 2009 and 12:00 September 10, 2009, expiring no later then January 1, 2010.
\& my @retrieved_objs = $session\->search(
\&                       object            => "Infoblox::DNS::Record::RRSIG",
\&                       inception         => ">=< 1254398400,1255176000",
\&                       expiration        => "<= 1264982400");
\&
\& # search for all RRSIG records in the "domain.com" zone of the default DNS view
\& # Note that the \*(Aqdefault\*(Aq DNS view is assumed implicitly here
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Record::RRSIG",
\&     zone   => "domain.com",
\&    );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to retrieve the attribute values of an \s-1RRSIG\s0 Record object.
.SS "algorithm( )"
.IX Subsection "algorithm( )"
.RS 4
Use this method to retrieve the value of the public key encryption algorithm used to create the \s-1RRSIG\s0 signature.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the public key encryption algorithm. Returned values are one of the following:
.RS 4
.IP "\s-1RSAMD5\s0" 4
.IX Item "RSAMD5"
.PD 0
.IP "\s-1DSA\s0" 4
.IX Item "DSA"
.IP "\s-1RSASHA1\s0" 4
.IX Item "RSASHA1"
.IP "\s-1NSEC3DSA\s0" 4
.IX Item "NSEC3DSA"
.IP "\s-1NSEC3RSASHA1\s0" 4
.IX Item "NSEC3RSASHA1"
.IP "\s-1RSASHA256\s0" 4
.IX Item "RSASHA256"
.IP "\s-1RSASHA512\s0" 4
.IX Item "RSASHA512"
.RE
.RS 4
.RE
.IP "\fBExample\fR" 4
.IX Item "Example"
.PD
.Vb 2
\& #Get the public key encryption algorithm.
\& my $algorithm = $rrsig\->algorithm();
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to retrieve cloud \s-1API\s0 related information for the Infoblox::DNS::Record::RRSIG object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get cloud_info
\& my $cloud_info = $object\->cloud_info();
.Ve
.RE
.RS 4
.RE
.SS "creator( )"
.IX Subsection "creator( )"
.RS 4
Use this method to retrieve the \s-1RRSIG\s0 record creator. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $object\->creator();
.Ve
.RE
.RS 4
.RE
.SS "dns_name( )"
.IX Subsection "dns_name( )"
.RS 4
Use this method to retrieve the \s-1FQDN,\s0 in punycode format, of the RRset covered by the \s-1RRSIG\s0 record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $rrsig\->dns_name();
.Ve
.RE
.RS 4
.RE
.SS "dns_signer_name( )"
.IX Subsection "dns_signer_name( )"
.RS 4
Use this method to retrieve the domain name, in punycode format, of the zone that contains the signed RRset. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $bind_a\->dns_signer_name();
.Ve
.RE
.RS 4
.RE
.SS "expiration( )"
.IX Subsection "expiration( )"
.RS 4
Use this method to retrieve the expiration time of an \s-1RRSIG\s0 record.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1RRSIG\s0 record expiration time. The returned value is in \s-1UNIX\s0 timestamp format; that is, it is measured in seconds since 00:00:00 January 1, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the RRSIG expiration time
\& my $expiration = $rrsig\->expiration();
.Ve
.RE
.RS 4
.RE
.SS "inception( )"
.IX Subsection "inception( )"
.RS 4
Use this method to retrieve the \s-1RRSIG\s0 inception time. This is the time when the record was created.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1RRSIG\s0 record inception time. The returned value is in \s-1UNIX\s0 timestamp format; that is, it is measured in seconds since 00:00:00 January 1, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the inception time of the RRSIG record
\& my $inception = $rrsig\->inception();
.Ve
.RE
.RS 4
.RE
.SS "key_tag( )"
.IX Subsection "key_tag( )"
.RS 4
Use this method to retrieve the key tag of the public key that correspods to the \s-1RRSIG\s0 Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the key tag of the public key that corresponds to the private key used to encrypt \s-1RRSIG\s0 data. The key tag is a 16\-bit integer key fingerprint that is used to distinguish one key from another when multiple keys are associated with the same zone.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the key tag of the public key
\& my $key_tag = $rrsig\->key_tag();
.Ve
.RE
.RS 4
.RE
.SS "labels( )"
.IX Subsection "labels( )"
.RS 4
Use this method to retrieve the number of labels in the name of the RRset signed with the \s-1RRSIG\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the number of labels in the original \s-1RRSIG RR\s0 owner name. Usually this number is the same as the number of labels in
the 'name' field.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the number of labels in the original RRSIG RR owner name.
\& my $labels = $rrsig\->labels();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to retrieve the \s-1FQDN\s0 of the RRset covered by the \s-1RRSIG\s0 record.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the name attribute of the \s-1RRSIG\s0 object. This is a name of the RRset covered by the \s-1RRSIG\s0 record.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the name attribute
\& my $fqdn = $rrsig\->name();
.Ve
.RE
.RS 4
.RE
.SS "original_ttl( )"
.IX Subsection "original_ttl( )"
.RS 4
Use this method to retrieve the \s-1TTL\s0 of the covered RRset as it appears in the authoritative zone of an \s-1RRSIG\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the  \s-1TTL\s0 of the covered RRset as it appears in the authoritative zone attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the TTL of the covered RRset
\& my $original_ttl = $rrsig\->original_ttl();
.Ve
.RE
.RS 4
.RE
.SS "signature( )"
.IX Subsection "signature( )"
.RS 4
Use this method to retrieve the cryptographic signature that covers the \s-1RRSIG RDATA\s0 of an \s-1RRSIG\s0 Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the  cryptographic signature that covers the \s-1RRSIG RDATA\s0 attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the signature that covers the RRSIG RDATA
\& my $signature = $rrsig\->signature();
.Ve
.RE
.RS 4
.RE
.SS "signer_name( )"
.IX Subsection "signer_name( )"
.RS 4
Use this method to retrieve the domain name of the zone that contains the signed RRset.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the domain name of the zone that contain the signed RRset in \s-1FQDN\s0 format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the signer name
\& my $signer_name = $rrsig\->signer_name();
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to retrieve the Time to Live (\s-1TTL\s0) value of an \s-1RRSIG\s0 Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the TTLattribute value. The returned parameter is a 32\-bit integer (range from 0 to 4294967295) that represents the duration in seconds that the record is cached. Zero indicates that the record should not be cached.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the TTL of the RRSIG record 
\& my $ttl = $rrsig\->ttl();
.Ve
.RE
.RS 4
.RE
.SS "type_covered( )"
.IX Subsection "type_covered( )"
.RS 4
Use this method to retrieve the type of the RRset that is covered by this \s-1RRSIG\s0 record.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the type of the RRset that is covered by this \s-1RRSIG\s0 record attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the type of the RRset that is covered by this RRSIG record
\& my $type_covered = $rrsig\->type_covered();
.Ve
.RE
.RS 4
.RE
.SS "view( )"
.IX Subsection "view( )"
.RS 4
Use this method to retrieve the \s-1DNS\s0 view object that contains the \s-1RRSIG\s0 Record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the  Infoblox::DNS::View object that contains the \s-1RRSIG\s0 record.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the DNS view
\& my $view = $rrsig\->view();
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of an \s-1RRSIG\s0 record.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns the zone name of the zone that contains \s-1RRSIG\s0 record. The name is in \s-1FQDN\s0 format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get zone
\& my $zone = $rrsig\->zone();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the session methods on an \s-1RRSIG\s0 record object.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&        my $session = Infoblox::Session\->new(
\&            master   => "192.168.1.2",
\&            username => "admin",
\&            password => "infoblox"
\&        );
\&        unless ($session) {
\&           die("Construct session failed: ",
\&               $session\->status_code() . ":" . $session\->status_detail());
\&        }
\&        print "Session created successfully\en";
\&
\&        #Enable DNSSEC in the default view
\&
\&        my $default_view=$session\->get(
\&                                       object=> "Infoblox::DNS::View",
\&                                       name => "default"
\&                                      );
\&        unless($default_view) {
\&            die("Getting the default view failed:",
\&               Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&        print "Got the default view successfully\en";
\&
\&        $default_view\->dnssec_enabled("true")
\&            or die("Changing the dnssec_enabled in the default view failed:",
\&                    Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        $session\->modify($default_view)
\&            or die("Changing the dnssec_enabled in the default view failed:",
\&                    Infoblox::status_code() . ":" . Infoblox::status_detail());
.Ve
.PP
\&\fB#Creating a signed zone and populationg it with an A record\fR
.PP
.Vb 9
\&        print "Creating Member primary server for the zone\en";
\&        my $primary=Infoblox::DNS::Member\->new(
\&                                                ipv4addr => "192.168.1.2",
\&                                                name => "infoblox.localdomain"
\&                                              );
\&        unless($primary) {
\&           die("Unable to create primary server object: ",
\&               Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&
\&        my $zone = Infoblox::DNS::Zone\->new(
\&                                             name => "domain.com",
\&                                             primary => $primary
\&                                           );
\&        unless ($zone) {
\&           die("Construct zone failed: ",
\&               Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&        print "Zone object created successfully\en";
\&
\&        #Verify if the zone exists
\&        my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "domain.com");
\&        unless ($object) {
\&           print "Zone does not exist on server, safe to add the zone\en";
\&           $session\->add($zone)
\&              or die("Add zone failed: ",
\&                     $session\->status_code() . ":" . $session\->status_detail());
\&        }
\&        print "Zone added successfully\en";
\&
\&        #Adding A record to the zone to demonstrate the corresponding RRSIG record
\&        my $a_record=Infoblox::DNS::Record::A\->new(
\&                                                    ipv4addr => "10.9.8.7",
\&                                                    name => "recorda.domain.com"
\&                                                  );
\&        unless($a_record) {
\&           die("Creating A record failed : ",
\&              Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&
\&        $object = $session\->get( object => "Infoblox::DNS::Record::A", name => "recorda.domain.com" );
\&        unless ($object) {
\&           print "A record does not exist on the server, safe to add the A record\en";
\&           $session\->add($a_record)
\&             or die("Adding A record failed: ",
\&                    Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        }
\&        print "A record added to the zone successfully\en";
\&
\&        #Retrieving zone back from the server in order to sign it
\&        $zone = $session\->get(object => "Infoblox::DNS::Zone", name => "domain.com");
\&        unless($zone) {
\&           die("Retrieving zone back failed: ",
\&                Infoblox::status_code( ). ":". Infoblox::status_detail( ));
\&        }
\&        print "Zone retrieved for signing successfully.\en";
\&
\&        $zone\->dnssec_ksk_algorithm("NSEC3RSASHA1") &&
\&        $zone\->dnssec_zsk_algorithm("NSEC3RSASHA1") &&
\&        $zone\->dnssec_ksk_size(640) &&
\&        $zone\->dnssec_zsk_size(640)
\&          or die("Changing the zone DNSSEC setting failed: ",
\&                 Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        $session\->modify($zone)
\&          or die("Modifying dnssec values in zone failed: ",
\&                 Infoblox::status_code() . ":" . Infoblox::status_detail());
\&        print "Zone modified successfully\en";
\&
\&        #Signing the zone
\&        $zone\->dnssec_signed("true")
\&           or die("Signing of the zone failed: ",
\&                   Infoblox::status_code() . ":" . Infoblox::status_detail());
\&       print "Zone signed successfully\en";
.Ve
.PP
\&\fB#Getting the \s-1RRSIG\s0 record corresponding to A record\fR
.PP
.Vb 12
\&       my $rrsig_record_a=$session\->get(
\&                                    object => "Infoblox::DNS::Record::RRSIG",
\&                                    name   => "recorda.domain.com",
\&                                    signer_name => "domain.com",
\&                                    type_covered   => "A",
\&                                    view   => "default"
\&                                   );
\&      unless($rrsig_record_a) {
\&         die("Getting RRSIG corresponding to the A record failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\&      }
\&      print "Got RRSIG record successfully\en";
.Ve
.PP
\&\fB#Searching for \s-1RRSIG\s0 objects using regular expressions\fR
.PP
.Vb 11
\&      my @retrieved_objs=$session\->search(
\&                                           object => "Infoblox::DNS::Record::RRSIG",
\&                                           name   => ".*com",
\&                                           type_covered => "A|MX",
\&                                           view   => "default"
\&                                         );
\&     unless(@retrieved_objs>0) {
\&         die("Searching for RRSIG objects failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\&     }
\&     print "Search for the RRSIG objects successful, ".scalar(@retrieved_objs)." objects found\en";
\&
\&      #Searching for RRSIG objects created today using inception time interval search
\&      @retrieved_objs=$session\->search(
\&                                           object => "Infoblox::DNS::Record::RRSIG",
\&                                           name   => ".*com",
\&                                           inception => ">=< " . (time() \-86400) . "," . time(),
\&                                           view   => "default"
\&                                         );
\&     unless(@retrieved_objs>0) {
\&         die("Searching for RRSIG objects failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\&     }
\&     print "Search for the RRSIG objects successful, ".scalar(@retrieved_objs)." objects found\en";
.Ve
.PP
\&\fB#Removing the created zone and cleaning up the view\fR
.PP
.Vb 4
\&      $session\->remove($zone)
\&        or die("Unable to remove the zone: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\&      print "Zone removed successfully\en";
\&
\&      $default_view\->dnssec_enabled("false")
\&      && $default_view\->override_dnssec("false")
\&      && $session\->modify($default_view)
\&       or die("Restoring dnssec_enabled value in the default view failed: ",
\&              Infoblox::status_code() . ":" . Infoblox::status_detail());
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::DNS::Record::DNSKEY, Infoblox::DNS::View, Infoblox::DNS::Zone
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
