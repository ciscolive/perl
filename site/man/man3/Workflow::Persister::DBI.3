.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Workflow::Persister::DBI 3"
.TH Workflow::Persister::DBI 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Workflow::Persister::DBI \- Persist workflow and history to DBI database
.SH "VERSION"
.IX Header "VERSION"
This documentation describes version 1.19 of this package
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& <persister name="MainDatabase"
\&            class="Workflow::Persister::DBI"
\&            dsn="DBI:mysql:database=workflows"
\&            user="wf"
\&            password="mypass"/>
\&
\& <persister name="BackupDatabase"
\&            class="Workflow::Persister::DBI"
\&            dsn="DBI:Pg:dbname=workflows"
\&            user="wf"
\&            password="mypass"
\&            date_format="%Y\-%m\-%d %H:%M"
\&            autocommit="0"
\&            workflow_table="wf"
\&            workflow_sequence="wf_seq"
\&            history_table="wf_history"
\&            history_sequence="wf_history_seq"/>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Main persistence class for storing the workflow and workflow history
records to a DBI-accessible datasource.
.SS "Subclassing: Getting handle from elsewhere"
.IX Subsection "Subclassing: Getting handle from elsewhere"
A common need to create a subclass is to use a database handle created
with other means. For instance, OpenInteract has a central
configuration file for defining datasources, and the datasource will
be available in a predictable manner. So we can create a subclass to
provide the database handle on demand from the \f(CW\*(C`CTX\*(C'\fR object available
from everywhere. A sample implementation is below. (Note that in real
life we would just use \s-1SPOPS\s0 for this, but it is still a good
example.)
.PP
.Vb 1
\& package Workflow::Persister::DBI::OpenInteractHandle;
\&
\& use strict;
\& use base qw( Workflow::Persister::DBI );
\& use OpenInteract2::Context qw( CTX );
\&
\& my @FIELDS = qw( datasource_name );
\& _\|_PACKAGE_\|_\->mk_accessors( @FIELDS );
\&
\& # override parent method, assuming that we set the \*(Aqdatasource\*(Aq
\& # parameter in the persister declaration
\&
\& sub init {
\&    my ( $self, $params ) = @_;
\&    $self\->datasource_name( $params\->{datasource} );
\&    my $ds_config = CTX\->lookup_datasource_config( $self\->datasource_name );
\&
\&    # delegate the other assignment tasks to the parent class
\&
\&    $self\->assign_generators( $ds_config\->{driver_name}, $params );
\&    $self\->assign_tables( $params );
\& }
\&
\& sub handle {
\&     my ( $self ) = @_;
\&     return CTX\->datasource( $self\->datasource_name );
\& }
.Ve
.SS "Subclassing: Changing fieldnames"
.IX Subsection "Subclassing: Changing fieldnames"
Earlier versions of Workflow used the field 'user' to record in the
history the user making a state change or comment. Unfortunately
\&'user' is a reserved word in our favorite database,
PostgreSQL. (Oops.) So in addition to changing the field to an
assuredly-unreserved word (workflow_user), we made the fieldnames
customizable by subclasses.
.PP
Just override either or both of the methods:
.PP
\fI\f(BIget_workflow_fields()\fI\fR
.IX Subsection "get_workflow_fields()"
.PP
Return list of fields in this order:
.PP
.Vb 1
\&  workflow_id, type, state, last_update
.Ve
.PP
\fI\f(BIget_history_fields()\fI\fR
.IX Subsection "get_history_fields()"
.PP
Return list of fields in this order:
.PP
.Vb 2
\&  workflow_hist_id, workflow_id, action, description,
\&  state, workflow_user, history_date
.Ve
.PP
Note that we may cache the results, so don't try and do anything weird
like change the fieldnames based on the workflow user or something...
.SH "METHODS"
.IX Header "METHODS"
.SS "Public Methods"
.IX Subsection "Public Methods"
All public methods are inherited from Workflow::Persister.
.SS "Private Methods"
.IX Subsection "Private Methods"
\fIinit( \e%params )\fR
.IX Subsection "init( %params )"
.PP
Create a database handle from the given parameters. You are only
required to provide 'dsn', which is the full \s-1DBI DSN\s0 you normally use
as the first argument to \f(CW\*(C`connect()\*(C'\fR.
.PP
You can set these parameters in your persister configuration file and
they will be passed to init.
.PP
You may also use:
.IP "\fBuser\fR" 4
.IX Item "user"
Name of user to login with.
.IP "\fBpassword\fR" 4
.IX Item "password"
Password for \f(CW\*(C`user\*(C'\fR to login with.
.IP "\fBdate_format\fR" 4
.IX Item "date_format"
Date format to use when working with the database. Accepts a format string
that can be processed by the DateTime module. See
<http://search.cpan.org/~drolsky/DateTime\-0.39/lib/DateTime.pm#strftime_Specifiers>
for the format options.
.Sp
The default is '%Y\-%m\-%d \f(CW%H:\fR%M' for backward compatibility.
.IP "\fBautocommit\fR" 4
.IX Item "autocommit"
0 or 1 to turn autocommit off or on for the database handle.
.Sp
Setting autocommit to off will run Workflow with transactions. If there is
a failure somewhere and the persister supports it, Workflow will attempt
to roll back all database activity in the current transaction.
.Sp
If you turn autocommit off, you must still
commit transactions for Workflow::Persister::DBI::ExtraData yourself. Also,
if you are sharing the database handle, you must be careful to not pass control
to the workflow engine with pending transactions as they will be committed if
the workflow actions are successful.
.Sp
The default autocommit value for the database handle is on.
.IP "\fBworkflow_table\fR" 4
.IX Item "workflow_table"
Table to use for persisting workflow. Default is 'workflow'.
.IP "\fBhistory_table\fR" 4
.IX Item "history_table"
Table to use for persisting workflow history. Default is
\&'workflow_history'.
.PP
You may also use parameters for the different types of \s-1ID\s0
generators. See below under the \f(CW\*(C`init_*_generator\*(C'\fR for the necessary
parameters for your database.
.PP
In addition to creating a database handle we parse the \f(CW\*(C`dsn\*(C'\fR to see
what driver we are using to determine how to generate IDs. We have the
ability to use automatically generated IDs for PostgreSQL, MySQL, and
SQLite. If your database is not included a randomly generated \s-1ID\s0 will
be used. (Default length of 8 characters, which you can modify with a
\&\f(CW\*(C`id_length\*(C'\fR parameter.)
.PP
You can also create your own adapter for a different type of
database. Just check out the existing
Workflow::Persister::DBI::AutoGeneratedId and
Workflow::Persister::DBI::SequenceId classes for examples.
.PP
\fIassign_generators( \f(CI$driver\fI, \e%params )\fR
.IX Subsection "assign_generators( $driver, %params )"
.PP
Given \f(CW$driver\fR and the persister parameters in \f(CW\*(C`\e%params\*(C'\fR, assign
the appropriate \s-1ID\s0 generators for both the workflow and history
tables.
.PP
Returns: nothing, but assigns the object properties
\&\f(CW\*(C`workflow_id_generator\*(C'\fR and \f(CW\*(C`history_id_generator\*(C'\fR.
.PP
\fIassign_tables( \e%params )\fR
.IX Subsection "assign_tables( %params )"
.PP
Assign the table names from \f(CW\*(C`\e%params\*(C'\fR (using 'workflow_table' and
\&'history_table') or use the defaults 'workflow' and 'workflow_history'.
.PP
Returns: nothing, but assigns the object properties \f(CW\*(C`workflow_table\*(C'\fR
and \f(CW\*(C`history_table\*(C'\fR.
.PP
\fIinit_postgres_generators( \e%params )\fR
.IX Subsection "init_postgres_generators( %params )"
.PP
Create \s-1ID\s0 generators for the workflow and history tables using
PostgreSQL sequences. You can specify the sequences used for the
workflow and history tables:
.IP "\fBworkflow_sequence\fR" 4
.IX Item "workflow_sequence"
Sequence for the workflow table. Default: 'workflow_seq'
.IP "\fBhistory_sequence\fR" 4
.IX Item "history_sequence"
Sequence for the workflow history table. Default:
\&'workflow_history_seq'
.PP
\fIinit_mysql_generators( \e%params )\fR
.IX Subsection "init_mysql_generators( %params )"
.PP
Create \s-1ID\s0 generators for the workflow and history tables using
the MySQL 'auto_increment' type. No parameters are necessary.
.PP
\fIinit_sqlite_generators( \e%params )\fR
.IX Subsection "init_sqlite_generators( %params )"
.PP
Create \s-1ID\s0 generators for the workflow and history tables using
the SQLite implicit increment. No parameters are necessary.
.PP
\fIinit_random_generators( \e%params )\fR
.IX Subsection "init_random_generators( %params )"
.PP
Create \s-1ID\s0 generators for the workflow and history tables using
a random set of characters. You can specify:
.IP "\fBid_length\fR" 4
.IX Item "id_length"
Length of character sequence to generate. Default: 8.
.PP
\fIinit_oracle_generators\fR
.IX Subsection "init_oracle_generators"
.PP
Create \s-1ID\s0 generators for the workflow and history tables using
the Oracle sequences. No parameters are necessary.
.PP
\fIcreate_workflow\fR
.IX Subsection "create_workflow"
.PP
Serializes a workflow into the persistance entity configured by our workflow.
.PP
Takes a single parameter: a workflow object
.PP
Returns a single value, a id for unique identification of out serialized
workflow for possible deserialization.
.PP
\fIfetch_workflow\fR
.IX Subsection "fetch_workflow"
.PP
Deserializes a workflow from the persistance entity configured by our workflow.
.PP
Takes a single parameter: the unique id assigned to our workflow upon
serialization (see \*(L"create_workflow\*(R").
.PP
Returns a hashref consisting of two keys:
.IP "\(bu" 4
state, the workflows current state
.IP "\(bu" 4
last_update, date indicating last update
.PP
\fIupdate_workflow\fR
.IX Subsection "update_workflow"
.PP
Updates a serialized workflow in the persistance entity configured by our
workflow.
.PP
Takes a single parameter: a workflow object
.PP
Returns: Nothing
.PP
\fIcreate_history\fR
.IX Subsection "create_history"
.PP
Serializes history records associated with a workflow object
.PP
Takes two parameters: a workflow object and an array of workflow history objects
.PP
Returns: provided array of workflow history objects upon success
.PP
\fIfetch_history\fR
.IX Subsection "fetch_history"
.PP
Deserializes history records associated with a workflow object
.PP
Takes a single parameter: a workflow object
.PP
Returns an array of workflow history objects upon success
.PP
\fIcommit_transaction ( \f(CI$wf\fI )\fR
.IX Subsection "commit_transaction ( $wf )"
.PP
Commit the transaction for a workflow if autocommit is not enabled.
.PP
Returns nothing
.PP
\fIrollback_transaction\fR
.IX Subsection "rollback_transaction"
.PP
Rollsback the transaction for a workflow if autocommit is not enabled.
.PP
Returns nothing
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Workflow" 4
.IX Item "Workflow"
.PD 0
.IP "Workflow::Persister" 4
.IX Item "Workflow::Persister"
.IP "Workflow::History" 4
.IX Item "Workflow::History"
.IP "\s-1DBI\s0" 4
.IX Item "DBI"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2007 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonas B. Nielsen (jonasbn) <jonasbn@cpan.org> is the current maintainer.
.PP
Chris Winters <chris@cwinters.com>, original author.
