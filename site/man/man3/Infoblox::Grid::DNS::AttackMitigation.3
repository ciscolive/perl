.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::DNS::AttackMitigation 3"
.TH Infoblox::Grid::DNS::AttackMitigation 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::DNS::AttackMitigation \- a DNS Attack Mitigation object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1DNS\s0 Attack Mitigation object provides information about mitigation configuration for \s-1DNS\s0 attacks.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 8
\& my $attack_mitigation = Infoblox::Grid::DNS::AttackMitigation\->new(
\&    detect_chr                => $attack_detect,   # Optional
\&    detect_chr_grace          => $uint,            # Optional
\&    detect_nxdomain_responses => $attack_detect,   # Optional
\&    detect_udp_drop           => $attack_detect,   # Optional
\&    interval                  => $uint,            # Optional
\&    mitigate_nxdomain_lru     => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq, # Optional
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The object does not support any session methods.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to a \s-1DNS\s0 Attack Mitigation object.
.SS "Infoblox::Grid::DNS\->attack_mitigation( )"
.IX Subsection "Infoblox::Grid::DNS->attack_mitigation( )"
.RS 4
Use this method to set or retrieve mitigation settings for \s-1DNS\s0 attacks. See Infoblox::Grid::DNS\->\fBattack_mitigation()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attack_mitigation value
\& my $attack_mitigation = $grid_dns\->attack_mitigation();
\& #Modify attack_mitigation
\& $grid_dns\->attack_mitigation($attack_mitigation);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member::DNS\->attack_mitigation( )"
.IX Subsection "Infoblox::Grid::Member::DNS->attack_mitigation( )"
.RS 4
Use this method to set or retrieve mitigation settings for \s-1DNS\s0 attacks on the member. See Infoblox::Grid::Member::DNS\->\fBattack_mitigation()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attack_mitigation value
\& my $attack_mitigation = $member_dns\->attack_mitigation();
\& #Modify attack_mitigation
\& $member_dns\->attack_mitigation($attack_mitigation);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.SS "detect_chr( )"
.IX Subsection "detect_chr( )"
.RS 4
Use this method to set or retrieve configuration for the Cache Hit Ratio (\s-1CHR\s0) changes detection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::AttackDetect object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get detect_chr value
\& my $detect_chr = $attack_mitigation\->detect_chr();
\& #Modify detect_chr 
\& $attack_mitigation\->detect_chr($detect_chr);
.Ve
.RE
.RS 4
.RE
.SS "detect_chr_grace( )"
.IX Subsection "detect_chr_grace( )"
.RS 4
Use this method to set or retrieve the cache usage (in percentage) when Cache Hit Ratio (\s-1CHR\s0) detection starts.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 0 and 100.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get detect_chr_grace value
\& my $detect_chr_grace = $attack_mitigation\->detect_chr_grace();
\& #Modify detect_chr_grace 
\& $attack_mitigation\->detect_chr_grace(50);
.Ve
.RE
.RS 4
.RE
.SS "detect_nxdomain_responses( )"
.IX Subsection "detect_nxdomain_responses( )"
.RS 4
Use this method to set or retrieve configuration for the recursive queries \s-1NXDOMAIN\s0 responses detection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::AttackDetect object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get detect_nxdomain_responses value
\& my $detect_nxdomain_responses = $attack_mitigation\->detect_nxdomain_responses();
\& #Modify detect_nxdomain_responses 
\& $attack_mitigation\->detect_nxdomain_responses($detect_nxdomain_responses);
.Ve
.RE
.RS 4
.RE
.SS "detect_udp_drop( )"
.IX Subsection "detect_udp_drop( )"
.RS 4
Use this method to set or retrieve configuration for the \s-1UDP\s0 packet drop rate detection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::AttackDetect object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get detect_udp_drop value
\& my $detect_udp_drop = $attack_mitigation\->detect_udp_drop();
\& #Modify detect_udp_drop 
\& $attack_mitigation\->detect_udp_drop($detect_udp_drop);
.Ve
.RE
.RS 4
.RE
.SS "interval( )"
.IX Subsection "interval( )"
.RS 4
Use this method to set or retrieve the minimum time interval (in seconds) between changes in attack status.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get interval value
\& my $interval = $attack_mitigation\->interval();
\& #Modify interval 
\& $attack_mitigation\->interval(50);
.Ve
.RE
.RS 4
.RE
.SS "mitigate_nxdomain_lru( )"
.IX Subsection "mitigate_nxdomain_lru( )"
.RS 4
Use this method to enable or disable impact mitigation of \s-1NXDOMAIN\s0 responses in cache by tracking \s-1NXDOMAIN\s0 entries.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable impact mitigation of \s-1NXDOMAIN\s0 responses, or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get mitigate_nxdomain_lru value
\& my $mitigate_nxdomain_lru = $attack_mitigation\->mitigate_nxdomain_lru();
\& #Modify mitigate_nxdomain_lru 
\& $attack_mitigation\->mitigate_nxdomain_lru(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::DNS, Infoblox::Grid::DNS\->\fBattack_mitigation()\fR, Infoblox::Grid::Member::DNS, Infoblox::Grid::Member::DNS\->\fBattack_mitigation()\fR, Infoblox::Grid::DNS::AttackDetect,
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
