.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search::Elasticsearch::Client::7_0::Direct::Rollup 3"
.TH Search::Elasticsearch::Client::7_0::Direct::Rollup 3 "2020-09-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Search::Elasticsearch::Client::7_0::Direct::Rollup \- Plugin providing Rollups for Search::Elasticsearch 7.x
.SH "VERSION"
.IX Header "VERSION"
version 7.30
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $response = $es\->rollup\->search( body => {...} )
.Ve
.SS "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
This class extends the Search::Elasticsearch client with a \f(CW\*(C`rollup\*(C'\fR
namespace, to support the
Rollup APIs <https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-apis.html>.
.PP
The full documentation for the Rollups feature is available here:
<https://www.elastic.co/guide/en/elasticsearch/reference/current/xpack\-rollup.html>
.SH "GENERAL METHODS"
.IX Header "GENERAL METHODS"
.ie n .SS """search()"""
.el .SS "\f(CWsearch()\fP"
.IX Subsection "search()"
.Vb 4
\&    $response = $es\->rollup\->search(
\&        index   => $index | \e@indices,      # optional
\&        body    => {...}                    # optional
\&    )
.Ve
.PP
The \f(CW\*(C`search()\*(C'\fR method executes a normal search but can join the results from ordinary indices with
those from rolled up indices.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`typed_keys\*(C'\fR
.PP
See the rollup search docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-search.html>
for more information.
.SH "JOB METHODS"
.IX Header "JOB METHODS"
.ie n .SS """put_job()"""
.el .SS "\f(CWput_job()\fP"
.IX Subsection "put_job()"
.Vb 4
\&    $response = $es\->rollup\->put_job(
\&        id      => $id,                     # required
\&        body    => {...}                    # optional
\&    )
.Ve
.PP
The \f(CW\*(C`put_job()\*(C'\fR method creates a rollup job which will rollup matching indices to a rolled up index
in the background.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the rollup create job docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-put-job.html>
for more information.
.ie n .SS """delete_job()"""
.el .SS "\f(CWdelete_job()\fP"
.IX Subsection "delete_job()"
.Vb 3
\&    $response = $es\->rollup\->delete_job(
\&        id      => $id,                     # required
\&    )
.Ve
.PP
The \f(CW\*(C`delete_job()\*(C'\fR method deletes a rollup job by \s-1ID.\s0
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the rollup delete job docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-delete-job.html>
for more information.
.ie n .SS """get_jobs()"""
.el .SS "\f(CWget_jobs()\fP"
.IX Subsection "get_jobs()"
.Vb 3
\&    $response = $es\->rollup\->get_jobs(
\&        id      => $id,     # optional
\&    )
.Ve
.PP
The \f(CW\*(C`get_job()\*(C'\fR method retrieves a rollup job by \s-1ID,\s0 or all jobs if not specified.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the rollup get jobs docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-get-job.html>
for more information.
.ie n .SS """start_job()"""
.el .SS "\f(CWstart_job()\fP"
.IX Subsection "start_job()"
.Vb 3
\&    $response = $es\->rollup\->start_job(
\&        id      => $id,     # required
\&    )
.Ve
.PP
The \f(CW\*(C`start_job()\*(C'\fR method starts the specified rollup job.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the rollup start job docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-start-job.html>
for more information.
.ie n .SS """stop_job()"""
.el .SS "\f(CWstop_job()\fP"
.IX Subsection "stop_job()"
.Vb 3
\&    $response = $es\->rollup\->stop_job(
\&        id      => $id,     # required
\&    )
.Ve
.PP
The \f(CW\*(C`stop_job()\*(C'\fR method stops the specified rollup job.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the rollup stop job docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-stop-job.html>
for more information.
.SH "DATA METHODS"
.IX Header "DATA METHODS"
.ie n .SS """get_rollup_caps()"""
.el .SS "\f(CWget_rollup_caps()\fP"
.IX Subsection "get_rollup_caps()"
.Vb 3
\&    $response = $es\->rollup\->get_rollup_caps(
\&        id => $index    # optional
\&    )
.Ve
.PP
The \f(CW\*(C`get_rollup_caps()\*(C'\fR method returns the capabilities of any rollup jobs that have been configured for a specific index or index pattern.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the get rollup caps docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-get-rollup-caps.html>
for more information.
.ie n .SS """get_rollup_index_caps()"""
.el .SS "\f(CWget_rollup_index_caps()\fP"
.IX Subsection "get_rollup_index_caps()"
.Vb 3
\&    $response = $es\->rollup\->get_rollup_index_caps(
\&        id => $index    # optional
\&    )
.Ve
.PP
The \f(CW\*(C`get_rollup_index_caps()\*(C'\fR method returns the rollup capabilities of all jobs inside of a rollup index.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the get rollup index caps docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-get-rollup-index-caps.html>
for more information.
.SH "AUTHOR"
.IX Header "AUTHOR"
Enrico Zimuel <enrico.zimuel@elastic.co>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Elasticsearch \s-1BV.\s0
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
