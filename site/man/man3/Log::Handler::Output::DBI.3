.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Log::Handler::Output::DBI 3"
.TH Log::Handler::Output::DBI 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Handler::Output::DBI \- Log messages to a database.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Log::Handler::Output::DBI;
\&
\&    my $db = Log::Handler::Output::DBI\->new(
\&        # database source
\&        database    => "database",
\&        driver      => "mysql",
\&        host        => "127.0.0.1",
\&        port        => 3306,
\&
\&        # or with "dbname" instead of "database"
\&        dbname      => "database",
\&        driver      => "Pg",
\&        host        => "127.0.0.1",
\&        port        => 5432,
\&
\&        # or with data_source
\&        data_source => "dbi:mysql:database=database;host=127.0.0.1;port=3306",
\&
\&        # Username and password
\&        user        => "user",
\&        password    => "password",
\&
\&        # debugging
\&        debug       => 1,
\&
\&        # table, columns and values (as string)
\&        table       => "messages",
\&        columns     => "level ctime cdate pid hostname progname message",
\&        values      => "%level %time %date %pid %hostname %progname %message",
\&
\&        # table, columns and values (as array reference)
\&        table       => "messages",
\&        columns     => [ qw/level ctime cdate pid hostname progname message/ ],
\&        values      => [ qw/%level %time %date %pid %hostname %progname %message/ ],
\&
\&        # table, columns and values (your own statement)
\&        statement   => "insert into messages (level,ctime,cdate,pid,hostname,progname,message) values (?,?,?,?,?,?,?)",
\&        values      => [ qw/%level %time %date %pid %hostname %progname %message/ ],
\&
\&        # if you like persistent connections and want to re\-connect
\&        persistent  => 1,
\&    );
\&
\&    my %message = (
\&        level       => "ERROR",
\&        time        => "10:12:13",
\&        date        => "1999\-12\-12",
\&        pid         => $$,
\&        hostname    => "localhost",
\&        progname    => $0,
\&        message     => "an error here"
\&    );
\&
\&    $db\->log(\e%message);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
With this output you can insert messages into a database table.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBnew()\fP"
.IX Subsection "new()"
Call \f(CW\*(C`new()\*(C'\fR to create a new Log::Handler::Output::DBI object.
.PP
The following options are possible:
.IP "\fBdata_source\fR" 4
.IX Item "data_source"
Set the dsn (data source name).
.Sp
You can use this parameter instead of \f(CW\*(C`database\*(C'\fR, \f(CW\*(C`driver\*(C'\fR, \f(CW\*(C`host\*(C'\fR
and \f(CW\*(C`port\*(C'\fR.
.IP "\fBdatabase\fR or \fBdbname\fR" 4
.IX Item "database or dbname"
Pass the database name.
.IP "\fBdriver\fR" 4
.IX Item "driver"
Pass the database driver.
.IP "\fBhost\fR" 4
.IX Item "host"
Pass the hostname where the database is running.
.IP "\fBport\fR" 4
.IX Item "port"
Pass the port where the database is listened.
.IP "\fBuser\fR" 4
.IX Item "user"
Pass the database user for the connect.
.IP "\fBpassword\fR" 4
.IX Item "password"
Pass the users password.
.IP "\fBtable\fR and \fBcolumns\fR" 4
.IX Item "table and columns"
With this options you can pass the table name for the insert and the columns.
You can pass the columns as string or as array. Example:
.Sp
.Vb 2
\&    # the table name
\&    table => "messages",
\&
\&    # columns as string
\&    columns => "level, ctime, cdate, pid, hostname, progname, message",
\&
\&    # columns as array
\&    columns => [ qw/level ctime cdate pid hostname progname message/ ],
.Ve
.Sp
The statement would created as follows
.Sp
.Vb 2
\&    insert into message (level, ctime, cdate, pid, hostname, progname, mtime, message)
\&                 values (?,?,?,?,?,?,?)
.Ve
.IP "\fBstatement\fR" 4
.IX Item "statement"
With this option you can pass your own statement if you don't want to you the
options \f(CW\*(C`table\*(C'\fR and \f(CW\*(C`columns\*(C'\fR.
.Sp
.Vb 2
\&    statement => "insert into message (level, ctime, cdate, pid, hostname, progname, mtime, message)"
\&                 ." values (?,?,?,?,?,?,?)"
.Ve
.IP "\fBvalues\fR" 4
.IX Item "values"
With this option you have to set the values for the insert.
.Sp
.Vb 1
\&        values => "%level, %time, %date, %pid, %hostname, %progname, %message",
\&
\&        # or
\&
\&        values => [ qw/%level %time %date %pid %hostname %progname %message/ ],
.Ve
.Sp
The placeholders are identical with the pattern names that you have to pass
with the option \f(CW\*(C`message_pattern\*(C'\fR from Log::Handler.
.Sp
.Vb 10
\&    %L   level
\&    %T   time
\&    %D   date
\&    %P   pid
\&    %H   hostname
\&    %N   newline
\&    %C   caller
\&    %p   package
\&    %f   filename
\&    %l   line
\&    %s   subroutine
\&    %S   progname
\&    %r   runtime
\&    %t   mtime
\&    %m   message
.Ve
.Sp
Take a look to the documentation of Log::Handler for all possible patterns.
.IP "\fBpersistent\fR" 4
.IX Item "persistent"
With this option you can enable or disable a persistent database connection and
re-connect if the connection was lost.
.Sp
This option is set to 1 on default.
.IP "\fBdbi_params\fR" 4
.IX Item "dbi_params"
This option is useful if you want to pass arguments to \s-1DBI\s0. The default is
set to
.Sp
.Vb 4
\&    {
\&        PrintError => 0,
\&        AutoCommit => 1
\&    }
.Ve
.Sp
\&\f(CW\*(C`PrintError\*(C'\fR is deactivated because this would print error messages as
warnings to \s-1STDERR.\s0
.Sp
You can pass your own arguments \- and overwrite it \- with
.Sp
.Vb 1
\&    dbi_params => { PrintError => 1, AutoCommit => 0 }
.Ve
.IP "\fBdebug\fR" 4
.IX Item "debug"
With this option it's possible to enable debugging. The information can be
intercepted with \f(CW$SIG{_\|_WARN_\|_}\fR.
.SS "\fBlog()\fP"
.IX Subsection "log()"
Log a message to the database.
.PP
.Vb 12
\&    my $db = Log::Handler::Output::DBI\->new(
\&        database   => "database",
\&        driver     => "mysql",
\&        user       => "user",
\&        password   => "password",
\&        host       => "127.0.0.1",
\&        port       => 3306,
\&        table      => "messages",
\&        columns    => [ qw/level ctime message/ ],
\&        values     => [ qw/%level %time %message/ ],
\&        persistent => 1,
\&    );
\&
\&    $db\->log(
\&        message => "your message",
\&        level   => "INFO",
\&        time    => "2008\-10\-10 10:12:23",
\&    );
.Ve
.PP
Or you can connect to the database yourself. You should
notice that if the database connection lost then the
logger can't re-connect to the database and would return
an error. Use \f(CW\*(C`dbi_handle\*(C'\fR at your own risk.
.PP
.Vb 1
\&    my $dbh = DBI\->connect(...);
\&
\&    my $db = Log::Handler::Output::DBI\->new(
\&        dbi_handle => $dbh,
\&        table      => "messages",
\&        columns    => [ qw/level ctime message/ ],
\&        values     => [ qw/%level %time %message/ ],
\&    );
.Ve
.SS "\fBconnect()\fP"
.IX Subsection "connect()"
Connect to the database.
.SS "\fBdisconnect()\fP"
.IX Subsection "disconnect()"
Disconnect from the database.
.SS "\fBvalidate()\fP"
.IX Subsection "validate()"
Validate a configuration.
.SS "\fBreload()\fP"
.IX Subsection "reload()"
Reload with a new configuration.
.SS "\fBerrstr()\fP"
.IX Subsection "errstr()"
This function returns the last error message.
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.Vb 4
\&    Carp
\&    Params::Validate
\&    DBI
\&    your DBI driver you want to use
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
No exports.
.SH "REPORT BUGS"
.IX Header "REPORT BUGS"
Please report all bugs to <jschulz.cpan(at)bloonix.de>.
.PP
If you send me a mail then add Log::Handler into the subject.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonny Schulz <jschulz.cpan(at)bloonix.de>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2007\-2009 by Jonny Schulz. All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
