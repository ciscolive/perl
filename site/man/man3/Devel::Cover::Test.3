.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Devel::Cover::Test 3"
.TH Devel::Cover::Test 3 "2020-05-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::Cover::Test \- Internal module for testing
.SH "VERSION"
.IX Header "VERSION"
version 1.36
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $test = Devel::Cover::Test\->new($test, criteria => $string)
.Ve
.PP
Constructor.
.PP
\&\*(L"criteria\*(R" parameter (optional, defaults to \*(L"statement branch condition
subroutine\*(R") is a space separated list of tokens.
Supported tokens are \*(L"statement\*(R", \*(L"branch\*(R", \*(L"condition\*(R", \*(L"subroutine\*(R" and
\&\*(L"pod\*(R".
.PP
More optional parameters are supported. Refer to \*(L"get_params\*(R" sub.
.SS "shell_quote"
.IX Subsection "shell_quote"
.Vb 1
\&  my $quoted_item = shell_quote($item)
.Ve
.PP
Returns properly quoted item to cope with embedded spaces.
.SS "perl"
.IX Subsection "perl"
.Vb 1
\&  my $perl = $self\->perl
.Ve
.PP
Returns absolute path to Perl interpreter with proper \-I options (blib-wise).
.SS "test_command"
.IX Subsection "test_command"
.Vb 1
\&  my $command = $self\->test_command
.Ve
.PP
Returns test command, made of:
.IP "absolute path to Perl interpreter" 4
.IX Item "absolute path to Perl interpreter"
.PD 0
.IP "Devel::Cover \-M option (if applicable)" 4
.IX Item "Devel::Cover -M option (if applicable)"
.IP "test file" 4
.IX Item "test file"
.IP "test file parameters (if applicable)" 4
.IX Item "test file parameters (if applicable)"
.PD
.SS "cover_command"
.IX Subsection "cover_command"
.Vb 1
\&  my $command = $self\->cover_command
.Ve
.PP
Returns test command, made of:
.IP "absolute path to Perl interpreter" 4
.IX Item "absolute path to Perl interpreter"
.PD 0
.IP "absolute path to cover script" 4
.IX Item "absolute path to cover script"
.IP "cover parameters" 4
.IX Item "cover parameters"
.PD
.SS "test_file"
.IX Subsection "test_file"
.Vb 1
\&  my $file = $self\->test_file
.Ve
.PP
Returns absolute path to test file.
.SS "test_file_parameters"
.IX Subsection "test_file_parameters"
.Vb 1
\&  my $parameters = $self\->test_file_parameters
.Ve
.PP
Accessor to test_file_parameters property.
.SS "get_params"
.IX Subsection "get_params"
Populates the keys \f(CW\*(C`criteria\*(C'\fR, \f(CW\*(C`select\*(C'\fR, \f(CW\*(C`test_parameters\*(C'\fR, \f(CW\*(C`db_name\*(C'\fR,
\&\f(CW\*(C`cover_db\*(C'\fR, \f(CW\*(C`cover_parameters\*(C'\fR and \f(CW\*(C`skip\*(C'\fR using the \f(CW\*(C`test_file\*(C'\fR if
available otherwise sets the default.
.SS "cover_gold"
.IX Subsection "cover_gold"
.Vb 1
\&  my ($base, $v) = $self\->cover_gold;
.Ve
.PP
Returns the absolute path of the base to the golden file and the suffix
version number.
.PP
\&\f(CW$base\fR comes from the name of the test and \f(CW$v\fR will be $] from the earliest perl
version for which the golden results should be the same as for the current $]
.PP
\&\f(CW$v\fR will be overridden if installed libraries' versions dictate; for
instance, if Math::BigInt is at version > 1.999806, then the version
of Perl will be overridden as though it is 5.26.
.SS "run_command"
.IX Subsection "run_command"
.Vb 1
\&  $self\->run_command($command)
.Ve
.PP
Runs command, most likely obtained from \*(L"test_command\*(R" sub.
.SH "BUGS"
.IX Header "BUGS"
Huh?
.SH "LICENCE"
.IX Header "LICENCE"
Copyright 2001\-2019, Paul Johnson (paul@pjcj.net)
.PP
This software is free.  It is licensed under the same terms as Perl itself.
.PP
The latest version of this software should be available from my homepage:
http://www.pjcj.net
