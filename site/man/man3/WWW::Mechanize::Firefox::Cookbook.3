.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::Mechanize::Firefox::Cookbook 3"
.TH WWW::Mechanize::Firefox::Cookbook 3 "2018-10-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::Mechanize::Firefox::Cookbook \- Recipes for using WWW::Mechanize::Firefox
.SH "Introduction"
.IX Header "Introduction"
Note that WWW::Mechanize::Firefox is quite similar in its \s-1API\s0 to WWW::Mechanize,
so many of the recipes in WWW::Mechanize::Cookbook apply to it as well.
.SH "Basics"
.IX Header "Basics"
.SS "Launch WWW::Mechanize::Firefox"
.IX Subsection "Launch WWW::Mechanize::Firefox"
.Vb 3
\&  use WWW::Mechanize::Firefox;
\&  my $mech = WWW::Mechanize::Firefox\->new();
\&  $mech\->get(\*(Aqhttp://google.com\*(Aq);
.Ve
.SS "Launch WWW::Mechanize::Firefox if Firefox is not running"
.IX Subsection "Launch WWW::Mechanize::Firefox if Firefox is not running"
.Vb 5
\&  use WWW::Mechanize::Firefox;
\&  my $mech = WWW::Mechanize::Firefox\->new(
\&      launch => \*(Aq/path/to/firefox\*(Aq,
\&  );
\&  $mech\->get(\*(Aqhttp://google.com\*(Aq);
.Ve
.SS "Use an existing tab"
.IX Subsection "Use an existing tab"
.Vb 5
\&  use WWW::Mechanize::Firefox;
\&  my $mech = WWW::Mechanize::Firefox\->new(
\&      tab => qr/^Google/,
\&  );
\&  $mech\->get(\*(Aqhttp://google.com\*(Aq);
.Ve
.SS "Use the current tab"
.IX Subsection "Use the current tab"
.Vb 5
\&  use WWW::Mechanize::Firefox;
\&  my $mech = WWW::Mechanize::Firefox\->new(
\&      tab => \*(Aqcurrent\*(Aq,
\&  );
\&  $mech\->get(\*(Aqhttp://google.com\*(Aq);
.Ve
.SS "Use some other tab if you have it as object"
.IX Subsection "Use some other tab if you have it as object"
.Vb 4
\&    my $app = Firefox::Application\->new();
\&    my @tabs =  map { $_\->{tab} }
\&               grep { $magic eq $_\->{title} }
\&               $app\->openTabs($repl);
\&
\&    my $synth_mech = WWW::Mechanize::Firefox\->new(
\&        tab => $tabs[0],
\&        app => $app,
\&    );
.Ve
.SS "Bring the tab to the foreground at start"
.IX Subsection "Bring the tab to the foreground at start"
.Vb 5
\&  use WWW::Mechanize::Firefox;
\&  my $mech = WWW::Mechanize::Firefox\->new(
\&      activate => 1,
\&  );
\&  $mech\->get(\*(Aqhttp://google.com\*(Aq);
.Ve
.SS "Bring the tab to the foreground later"
.IX Subsection "Bring the tab to the foreground later"
.Vb 4
\&  my $mech = WWW::Mechanize::Firefox\->new(
\&  );
\&  ...
\&  $mech\->activateTab();
.Ve
.SS "Fetch a page to a file"
.IX Subsection "Fetch a page to a file"
.Vb 6
\&  use WWW::Mechanize::Firefox;
\&  my $mech = WWW::Mechanize::Firefox\->new(
\&      tab => \*(Aqcurrent\*(Aq,
\&  );
\&  $mech\->get(\*(Aqhttp://google.com\*(Aq,
\&      \*(Aq:content_file\*(Aq => \*(Aqgoogle_com.html\*(Aq );
.Ve
.SS "Fetch a page to a file with all images"
.IX Subsection "Fetch a page to a file with all images"
.Vb 6
\&  use WWW::Mechanize::Firefox;
\&  my $mech = WWW::Mechanize::Firefox\->new(
\&      tab => \*(Aqcurrent\*(Aq,
\&  );
\&  $mech\->get(\*(Aqhttp://google.com\*(Aq);
\&  $mech\->save_content(\*(Aqgoogle_com.html\*(Aq, \*(Aqgoogle_com files\*(Aq);
.Ve
.SH "Advanced HTML interaction"
.IX Header "Advanced HTML interaction"
.SS "Wait until an element appears"
.IX Subsection "Wait until an element appears"
Some sites generate content after the \f(CW\*(C`DOMContentLoaded\*(C'\fR
event has fired. To wait until an element becomes available,
use the following code:
.PP
.Vb 1
\&    # The submit button is generated after the page has loaded
\&
\&    my $retries = 10;
\&    while ($retries\-\- and ! $mech\->is_visible( xpath => \*(Aq//*[@id="submit"]\*(Aq )) {
\&          sleep 1;
\&    };
\&    die "Timeout" if 0 > $retries;
\&    
\&    # Now the element exists
\&    $mech\->click({xpath => \*(Aq//*[@id="submit"]\*(Aq});
.Ve
.SS "Wait until an element disappears"
.IX Subsection "Wait until an element disappears"
Some sites display an hourglass or some other indicator to
tell you to wait. 
To wait until such an element becomes invisible,
use the following code:
.PP
.Vb 5
\&    my $retries = 10;
\&    while ($retries\-\- and $mech\->is_visible( xpath => \*(Aq//*[@id="hourglass"]\*(Aq )) {
\&          sleep 1;
\&    };
\&    die "Timeout while waiting for application" if 0 > $retries;
\&    
\&    # Now the hourglass is not visible anymore
.Ve
.SH "UI interaction"
.IX Header "UI interaction"
.SS "Keep the tab open after your program quits"
.IX Subsection "Keep the tab open after your program quits"
In the case that you want to navigate the user to a specific place and
then take over manually, you can prevent the automatic closing of the browser
tab. Either create your \f(CW$mech\fR object like this:
.PP
.Vb 3
\&  my $mech = WWW::Mechanize::Firefox\->new(
\&      autoclose => 0,
\&  );
.Ve
.PP
or decide at runtime whether to close the tab:
.PP
.Vb 1
\&  $mech\->autoclose_tab(0);
.Ve
.PP
This does currently not work.
.SS "Get notified when the current tab changes"
.IX Subsection "Get notified when the current tab changes"
.Vb 1
\&    my $browser = $mech\->repl\->expr(\*(Aqwindow.getBrowser()\*(Aq);
\&
\&    my $eventlistener = progress_listener(
\&        $browser,
\&        onLocationChange => \e&onLocationChange,
\&    );
\&
\&    while (1) {
\&        $mech\->repl\->poll();
\&        sleep 1;
\&    };
.Ve
.SH "Images"
.IX Header "Images"
.SS "Save the current page as \s-1PNG\s0"
.IX Subsection "Save the current page as PNG"
This will take a \*(L"screenshot\*(R" which also includes plugins like Flash.
.PP
.Vb 6
\&  my $png = $mech\->content_as_png();
\&  open my $fh, \*(Aq>\*(Aq, \*(Aqpage.png\*(Aq
\&      or die "Couldn\*(Aqt save to \*(Aqpage.png\*(Aq: $!";
\&  binmode $fh;
\&  print {$fh} $png;
\&  close $fh;
.Ve
.PP
Also see the file \f(CW\*(C`screenshot.pl\*(C'\fR included and installed through the
distribution.
.PP
\fISave top left corner of the current page as \s-1PNG\s0\fR
.IX Subsection "Save top left corner of the current page as PNG"
.PP
.Vb 12
\&  my $rect = {
\&    left  =>    0,
\&    top   =>    0,
\&    width  => 200,
\&    height => 200,
\&  };
\&  my $png = $mech\->content_as_png(undef, $rect);
\&  open my $fh, \*(Aq>\*(Aq, \*(Aqpage.png\*(Aq
\&      or die "Couldn\*(Aqt save to \*(Aqpage.png\*(Aq: $!";
\&  binmode $fh;
\&  print {$fh} $png;
\&  close $fh;
.Ve
.PP
\fISave a page element of the current page as \s-1PNG\s0\fR
.IX Subsection "Save a page element of the current page as PNG"
.PP
.Vb 7
\&  my $shiny = $mech\->selector(\*(Aq#shiny\*(Aq, single => 1);
\&  my $png = $mech\->element_as_png($shiny);
\&  open my $fh, \*(Aq>\*(Aq, \*(Aqpage.png\*(Aq
\&      or die "Couldn\*(Aqt save to \*(Aqpage.png\*(Aq: $!";
\&  binmode $fh;
\&  print {$fh} $png;
\&  close $fh;
.Ve
.SH "HTTP Interaction"
.IX Header "HTTP Interaction"
.SS "Send a different hostname to the server"
.IX Subsection "Send a different hostname to the server"
If you are testing a new application deployment, it may
become necessary to lie to the server about the name of
the webserver you're requesting. You can easily
switch the name around at the \s-1HTTP\s0 level by adding a
custom \f(CW\*(C`Host:\*(C'\fR header:
.PP
.Vb 5
\&  $mech\->add_header(
\&      Host => \*(Aqhttp://example.com/\*(Aq,
\&  );
\&  $mech\->get(\*(Aqhttp://1.2.3.4\*(Aq);
\&  # Ask the machine at 1.2.3.4 for the pages of example.com
.Ve
.SH "Javascript"
.IX Header "Javascript"
.SS "Check that your Page has no Javascript compile errors"
.IX Subsection "Check that your Page has no Javascript compile errors"
.Vb 5
\&  $mech\->get(\*(Aqmypage\*(Aq);
\&  my @errors = map {$_\->{message}} $mech\->js_errors();
\&  if (@errors) {
\&      die "Found errors on page: @errors";
\&  };
.Ve
.PP
\fIOverride the Javascript \f(CI\*(C`alert()\*(C'\fI function\fR
.IX Subsection "Override the Javascript alert() function"
.PP
.Vb 3
\&  $mech\->eval_in_page(\*(Aqalert("Hello");\*(Aq,
\&      { alert => sub { print "Captured alert: \*(Aq@_\*(Aq\en" } }
\&  );
.Ve
.PP
\fISet a value without triggering Javascript events\fR
.IX Subsection "Set a value without triggering Javascript events"
.PP
Just pass empty lists for the lists of events to invoke
.PP
.Vb 1
\&  $mech\->field( \*(Aqmyfield\*(Aq, \*(Aqmyvalue\*(Aq, [], [] );
.Ve
.PP
\fIGet the text of an \f(CI\*(C`onclick\*(C'\fI handler (or other attributes)\fR
.IX Subsection "Get the text of an onclick handler (or other attributes)"
.PP
When developing a web page, you may want to use WWW::Mechanize::Firefox
to check the text value of the \f(CW\*(C`onclick\*(C'\fR attribute instead of treating
it as an opaque function. To get at the text attribute, you will
need the \s-1DOM\s0 function \f(CW\*(C`\->getAttribute()\*(C'\fR.
.PP
.Vb 3
\&    #!perl \-w
\&    use strict;
\&    use WWW::Mechanize::Firefox;
\&
\&    my $mech = WWW::Mechanize::Firefox\->new();
\&    $mech\->update_html(<<HTML);
\&    <html>
\&    <h1>Test</h1>
\&    <a href="http://google.de">Google</a>
\&    <a href="asdf.html" onclick="javascript:alert(\*(Aqhello\*(Aq);">Say Hello</a>
\&    </html>
\&    HTML
\&
\&    my @links = $mech\->find_all_links_dom(url_regex => \*(Aqasdf.html\*(Aq);
\&    foreach my $link (@links) {
\&        print $link\->getAttribute(\*(Aqonclick\*(Aq);
\&    };
.Ve
.SH "Not working yet"
.IX Header "Not working yet"
.ie n .SS "Upload a file to an ""ftp"" server"
.el .SS "Upload a file to an \f(CWftp\fP server"
.IX Subsection "Upload a file to an ftp server"
\&\fB Not implemented \fR \- this requires instantiating and passing
a \f(CW\*(C` nsIURI \*(C'\fR object instead of a \f(CW\*(C` nsILocalFile \*(C'\fR.
.PP
You can use \f(CW\*(C`\->save_url\*(C'\fR to \fItransfer\fR files. \f(CW$localname\fR
can be a local filename, a \f(CW\*(C`file://\*(C'\fR \s-1URL\s0 or any other \s-1URL\s0 that allows
uploads, like \f(CW\*(C`ftp://\*(C'\fR.
.PP
.Vb 2
\&  $mech\->save_url(\*(Aqfile://path/to/my/file.txt\*(Aq
\&      => \*(Aqftp://myserver.example/my/file.txt\*(Aq);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR
.PP
Contributed examples contain the original author's name.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2009\-2014 by Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR.
.PP
All Rights Reserved. This module is free software. It may be used, redistributed and/or modified under the same terms as Perl itself.
