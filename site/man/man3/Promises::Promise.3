.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Promises::Promise 3"
.TH Promises::Promise 3 "2020-02-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Promises::Promise \- An implementation of Promises in Perl
.SH "VERSION"
.IX Header "VERSION"
version 1.04
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Promise objects are typically not created by hand, they
are typically returned from the \f(CW\*(C`promise\*(C'\fR method of
a Promises::Deferred instance. It is best to think
of a Promises::Promise instance as a handle for
Promises::Deferred instances.
.PP
Most of the documentation here points back to the
documentation in the Promises::Deferred module.
.PP
Additionally Promises::Cookbook::GentleIntro contains a long
explanation of how this module, and all its components
are meant to work together.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """new( $deferred )""" 4
.el .IP "\f(CWnew( $deferred )\fR" 4
.IX Item "new( $deferred )"
The constructor only takes one parameter and that is an
instance of Promises::Deferred that you want this
object to proxy.
.ie n .IP """then( $callback, $error )""" 4
.el .IP "\f(CWthen( $callback, $error )\fR" 4
.IX Item "then( $callback, $error )"
This calls \f(CW\*(C`then\*(C'\fR on the proxied Promises::Deferred instance.
.ie n .IP """chain( @thens )""" 4
.el .IP "\f(CWchain( @thens )\fR" 4
.IX Item "chain( @thens )"
This calls \f(CW\*(C`chain\*(C'\fR on the proxied Promises::Deferred instance.
.ie n .IP """catch( $error )""" 4
.el .IP "\f(CWcatch( $error )\fR" 4
.IX Item "catch( $error )"
This calls \f(CW\*(C`catch\*(C'\fR on the proxied Promises::Deferred instance.
.ie n .IP """done( $callback, $error )""" 4
.el .IP "\f(CWdone( $callback, $error )\fR" 4
.IX Item "done( $callback, $error )"
This calls \f(CW\*(C`done\*(C'\fR on the proxied Promises::Deferred instance.
.ie n .IP """finally( $callback )""" 4
.el .IP "\f(CWfinally( $callback )\fR" 4
.IX Item "finally( $callback )"
This calls \f(CW\*(C`finally\*(C'\fR on the proxied Promises::Deferred instance.
.ie n .IP """timeout( $seconds )""" 4
.el .IP "\f(CWtimeout( $seconds )\fR" 4
.IX Item "timeout( $seconds )"
This calls \f(CW\*(C`timeout\*(C'\fR on the proxied Promises::Deferred instance.
.ie n .IP """status""" 4
.el .IP "\f(CWstatus\fR" 4
.IX Item "status"
This calls \f(CW\*(C`status\*(C'\fR on the proxied Promises::Deferred instance.
.ie n .IP """result""" 4
.el .IP "\f(CWresult\fR" 4
.IX Item "result"
This calls \f(CW\*(C`result\*(C'\fR on the proxied Promises::Deferred instance.
.ie n .IP """is_unfulfilled""" 4
.el .IP "\f(CWis_unfulfilled\fR" 4
.IX Item "is_unfulfilled"
This calls \f(CW\*(C`is_unfulfilled\*(C'\fR on the proxied Promises::Deferred instance.
.ie n .IP """is_fulfilled""" 4
.el .IP "\f(CWis_fulfilled\fR" 4
.IX Item "is_fulfilled"
This calls \f(CW\*(C`is_fulfilled\*(C'\fR on the proxied Promises::Deferred instance.
.ie n .IP """is_failed""" 4
.el .IP "\f(CWis_failed\fR" 4
.IX Item "is_failed"
This calls \f(CW\*(C`is_failed\*(C'\fR on the proxied Promises::Deferred instance.
.ie n .IP """is_in_progress""" 4
.el .IP "\f(CWis_in_progress\fR" 4
.IX Item "is_in_progress"
This calls \f(CW\*(C`is_in_progress\*(C'\fR on the proxied Promises::Deferred instance.
.ie n .IP """is_resolved""" 4
.el .IP "\f(CWis_resolved\fR" 4
.IX Item "is_resolved"
This calls \f(CW\*(C`is_resolved\*(C'\fR on the proxied Promises::Deferred instance.
.ie n .IP """is_rejected""" 4
.el .IP "\f(CWis_rejected\fR" 4
.IX Item "is_rejected"
This calls \f(CW\*(C`is_rejected\*(C'\fR on the proxied Promises::Deferred instance.
.ie n .IP """is_done""" 4
.el .IP "\f(CWis_done\fR" 4
.IX Item "is_done"
This calls \f(CW\*(C`is_done\*(C'\fR on the proxied Promises::Deferred instance.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stevan Little <stevan.little@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020, 2019, 2017, 2014, 2012 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
