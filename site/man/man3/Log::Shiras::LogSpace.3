.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Log::Shiras::LogSpace 3"
.TH Log::Shiras::LogSpace 3 "2016-10-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Shiras::LogSpace \- Log::Shiras Role for runtime name\-spaces
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        use Modern::Perl;
\&        use MooseX::ShortCut::BuildInstance qw( build_class );
\&        use Log::Shiras::LogSpace;
\&        my $test_instance = build_class(
\&                        package => \*(AqGeneric\*(Aq,
\&                        roles =>[ \*(AqLog::Shiras::LogSpace\*(Aq ],
\&                        add_methods =>{
\&                                get_class_space => sub{ \*(AqExchangeStudent\*(Aq },
\&                                i_am => sub{
\&                                        my( $self )= @_;
\&                                        print "I identify as a: " . $self\->get_all_space( \*(Aqindividual\*(Aq ) . "\en";
\&                                }
\&                        },
\&                );
\&        my $Generic = $test_instance\->new;
\&        my $French = $test_instance\->new( log_space => \*(AqFrench\*(Aq );
\&        my $Spanish = $test_instance\->new( log_space => \*(AqSpanish\*(Aq );
\&        $Generic\->i_am;
\&        $French\->i_am;
\&        $Spanish\->i_am;
\&
\&        #######################################################################################
\&        # Synopsis Screen Output
\&        # 01: I identify as a: Generic::ExchangeStudent::individual
\&        # 02: I identify as a: French::ExchangeStudent::individual
\&        # 03: I identify as a: Spanish::ExchangeStudent::individual
\&        #######################################################################################
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This attribute is useful to manage runtime Log::Shiras caller namespace.  In the case
where MyCoolPackage with Log::Shiras lines is used in more than one context then it is
possible to pass a context sensitive name to the attribute log_space on intantiation of the
instance and have the namespace bounds only activate the desired context of the package
rather than have it report everywhere it is used.  The telephone call in this case would
look something like this;
.PP
.Vb 1
\&        package MyCoolPackage
\&
\&        sub get_class_space{ \*(AqMyCoolPackage\*(Aq }
\&
\&        sub my_cool_sub{
\&                my( $self, $message ) = @_;
\&                my $phone = Log::Shiras::Telephone\->new(
\&                                                name_space => $self\->get_all_space . \*(Aq::my_cool_sub\*(Aq,
\&                                        );
\&                $phone\->talk( level => \*(Aqdebug\*(Aq,
\&                        message => "Arrived at my_cool_sub with the message: $message" );
\&                # Do something cool here!
\&        }
.Ve
.PP
In this case if you used my cool package instances with the log_space set to different
values then only the namespace unblocked for 'FirstInstance::MyCoolPackage::my_cool_sub'
would report.  See the documentation for get_all_space for details.
.PP
As a general rule it works best if the subroutine 'get_class_space' is defined in an object 
class file (not a role file).  Each subroutine space can be identified with the \f(CW$add_string\fR 
passed to get_all_space.
.SS "Attributes"
.IX Subsection "Attributes"
Data passed to new when creating an instance of the consuming class.  For modification of
this attribute see the listed attribute methods.
.PP
\fIlog_space\fR
.IX Subsection "log_space"
.Sp
.RS 4
\&\fBDefinition:\fR This will be the base log_space element returned by get_all_space
.Sp
\&\fBDefault\fR the consuming package name
.Sp
\&\fBRange\fR Any string, but Log::Shiras will look for '::' separators
.Sp
\&\fBattribute methods\fR
.Sp
.RS 4
\&\fBget_log_space\fR
.Sp
.RS 4
\&\fBDefinition:\fR Returns the attribute value
.RE
.RE
.RS 4
.Sp
\&\fBset_log_space( \f(CB$string\fB )\fR
.Sp
.RS 4
\&\fBDefinition:\fR sets the attribute value
.RE
.RE
.RS 4
.Sp
\&\fBhas_log_space\fR
.Sp
.RS 4
\&\fBDefinition:\fR predicate test for the attribute
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.SS "Method"
.IX Subsection "Method"
\fIget_all_space( \f(CI$add_string\fI )\fR
.IX Subsection "get_all_space( $add_string )"
.Sp
.RS 4
\&\fBDefinition:\fR This method collects the stored 'log_space' attribute value and then
joins it with the results of a method call to 'get_class_space'.  The 'get_class_space'
attribute should be provided somewhere else in the class.  The two values are joined with
\&'::'.  It will additionally join another string argument passed as \f(CW$add_string\fR to form a 
complete log space stack. See synopsis.
.Sp
\&\fBAccepts\fR \f(CW$add_string\fR
.Sp
\&\fBReturns\fR log_space . '::' . \f(CW$self\fR\->get_class_space . '::' . \f(CW$add_string\fR as each element 
is available.
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::XLSX::Reader::LibXML/issues
 <https://github.com/jandrew/Spreadsheet-XLSX-Reader-LibXML/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing Yet
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Moose::Role
.Sp
MooseX::Types::Moose
.RE
