.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Device::Modem::UsRobotics 3"
.TH Device::Modem::UsRobotics 3 "2020-06-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Device::Modem::UsRobotics \- USR modems extensions to control self\-mode
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Device::Modem::UsRobotics;
\&
\&  my $modem = Device::Modem::UsRobotics\->new( port => \*(Aq/dev/ttyS1\*(Aq );
\&  $modem\->connect( baudrate => 9600 );
\&  my %info = $modem\->messages_info();
\&  print "There are $info{unreleased_voice_msg} unread voice messages on $info{stored_voice_msg} total\en";
\&  print "There are $info{unreleased_fax_msg} unread fax messages on $info{stored_fax_msg} total\en";
\&
\&  # Get details about message n. X
\&  my %msg = $modem\->message_info(1);
\&        index type information attributes status day hour minute
\&        callerid page addresshigh addresslow checksum
\&  print \*(AqThis is a \*(Aq, ($msg{type} == 2 ? \*(Aqvoice\*(Aq : \*(Aqfax\*(Aq), \*(Aqmessage\*(Aq, "\en";
\&  print \*(AqIt came from no. \*(Aq, $msg{callerid}, "\en";
\&  # ...
\&
\&  # Now clear all messages
\&  $modem\->clear_memory();
.Ve
.SH "WARNING"
.IX Header "WARNING"
This module is not documented yet, and it is a rough work in progress.
Until now, it correctly reads voice/fax messages information, but when
saving voice messages to disk, sometimes they are incorrectly decoded.
.PP
So, if you need a working program, check out the good old TkUsr by
Ludovic Drolez, unless you want to help develop Device::Modem::UsRobotics.
.SH "DOCS TO BE COMPLETED FROM NOW....."
.IX Header "DOCS TO BE COMPLETED FROM NOW....."
Yes, I'm a bad boy :\-)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bla Bla Bla...
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBclear_memory()\fP"
.IX Subsection "clear_memory()"
Used to permanently clear the memory space of the modem. There are separate memory
spaces, one for voice/fax messages and one for user settings. Examples:
.PP
.Vb 2
\&        $modem\->clear_memory(\*(Aquser\*(Aq);     # or $modem\->clear_memory(1)
\&    $modem\->clear_memory(\*(Aqmessages\*(Aq); # or $modem\->clear_memory(2)
.Ve
.PP
To clear both, you can use:
.PP
.Vb 1
\&    $modem\->clear_memory(\*(Aqall\*(Aq);      # or $modem\->clear_memory(0);
.Ve
.PP
Parameters:
.ie n .IP "$memtype" 4
.el .IP "\f(CW$memtype\fR" 4
.IX Item "$memtype"
String or integer that selects the type of memory to be cleared,
where \f(CW0\fR is for \f(CW\*(C`all\*(C'\fR, \f(CW1\fR is for \f(CW\*(C`user\*(C'\fR memory, \f(CW2\fR is for \f(CW\*(C`messages\*(C'\fR
memory.
.SH "SUPPORT"
.IX Header "SUPPORT"
Please feel free to contact me at my e\-mail address cosimo@cpan.org
for any information, to resolve problems you can encounter with this module
or for any kind of commercial support you may need.
.SH "AUTHOR"
.IX Header "AUTHOR"
Cosimo Streppone, cosimo@cpan.org
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(C) 2004\-2005 Cosimo Streppone, cosimo@cpan.org
.PP
This library is free software; you can only redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Device::Modem,
perl
