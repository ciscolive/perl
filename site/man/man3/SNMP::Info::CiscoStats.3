.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::CiscoStats 3"
.TH SNMP::Info::CiscoStats 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::CiscoStats \- Perl5 Interface to CPU and Memory stats for Cisco
Devices
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Miller, Max Baker, Sam Stickland
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\& # Let SNMP::Info determine the correct subclass for you.
\& my $ciscostats = new SNMP::Info(
\&                    AutoSpecify => 1,
\&                    Debug       => 1,
\&                    # These arguments are passed directly on to SNMP::Session
\&                    DestHost    => \*(Aqmyswitch\*(Aq,
\&                    Community   => \*(Aqpublic\*(Aq,
\&                    Version     => 2
\&                    )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class      = $ciscostats\->class();
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SNMP::Info::CiscoStats is a subclass of SNMP::Info that provides cpu, memory,
os and version information about Cisco Devices.
.PP
Use or create in a subclass of SNMP::Info.  Do not use directly.
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
None.
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fICISCO-PRODUCTS-MIB\fR" 4
.IX Item "CISCO-PRODUCTS-MIB"
.PD 0
.IP "\fICISCO-PROCESS-MIB\fR" 4
.IX Item "CISCO-PROCESS-MIB"
.IP "\fICISCO-MEMORY-POOL-MIB\fR" 4
.IX Item "CISCO-MEMORY-POOL-MIB"
.IP "\fISNMPv2\-MIB\fR" 4
.IX Item "SNMPv2-MIB"
.IP "\fIOLD-CISCO-SYSTEM-MIB\fR" 4
.IX Item "OLD-CISCO-SYSTEM-MIB"
.IP "\fICISCO-STACK-MIB\fR" 4
.IX Item "CISCO-STACK-MIB"
.IP "\fICISCO-ENTITY-VENDORTYPE-OID-MIB\fR" 4
.IX Item "CISCO-ENTITY-VENDORTYPE-OID-MIB"
.IP "\fICISCO-FLASH-MIB\fR" 4
.IX Item "CISCO-FLASH-MIB"
.IP "\fIENTITY-MIB\fR" 4
.IX Item "ENTITY-MIB"
.IP "\fICISCO-IMAGE-MIB\fR" 4
.IX Item "CISCO-IMAGE-MIB"
.PD
.SH "GLOBALS"
.IX Header "GLOBALS"
.ie n .IP "$ciscostats\->\fBcpu()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBcpu()\fR" 4
.IX Item "$ciscostats->cpu()"
Returns \fBios_cpu()\fR or \fBcat_cpu()\fR, whichever is available.
.ie n .IP "$ciscostats\->\fBcpu_1min()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBcpu_1min()\fR" 4
.IX Item "$ciscostats->cpu_1min()"
Returns \fBios_cpu_1min()\fR or \fBcat_cpu1min()\fR, whichever is available.
.ie n .IP "$ciscostats\->\fBcpu_5min()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBcpu_5min()\fR" 4
.IX Item "$ciscostats->cpu_5min()"
Returns \fBios_cpu_5min()\fR or \fBcat_cpu5min()\fR, whichever is available.
.ie n .IP "$ciscostats\->\fBmem_total()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBmem_total()\fR" 4
.IX Item "$ciscostats->mem_total()"
Returns \fBmem_free()\fR + \fBmem_used()\fR
.ie n .IP "$ciscostats\->\fBvendor()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBvendor()\fR" 4
.IX Item "$ciscostats->vendor()"
.Vb 1
\& \*(Aqcisco\*(Aq
.Ve
.ie n .IP "$ciscostats\->\fBos()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBos()\fR" 4
.IX Item "$ciscostats->os()"
Tries to parse if device is running '\s-1IOS\s0', 'CatOS', '\s-1IOS\-XE\s0' or something else
from \fBdescription()\fR
.Sp
Available values:
.Sp
.Vb 10
\& \*(Aqios\*(Aq          for Cisco IOS
\& \*(Aqios\-xe\*(Aq       for Cisco IOS XE
\& \*(Aqios\-xr\*(Aq       for Cisco IOS XR
\& \*(Aqpix\*(Aq          for Cisco PIX
\& \*(Aqasa\*(Aq          for Cisco ASA
\& \*(Aqfwsm\*(Aq         for Single\-mode FWSM
\& \*(Aqfwsm\-admin\*(Aq   for Admin context of multi\-context FWSM
\& \*(Aqfwsm\-context\*(Aq for Standard context of multi\-context FWSM
\& \*(Aqace\-admin\*(Aq    for Admin context of ACE module
\& \*(Aqace\-context\*(Aq  for Standard context of ACE module (NB: No OS version
\&                     detection is available, but will be the same as it\*(Aqs
\&                     \*(Aqace admin\*(Aq)
\& \*(Aqcss\*(Aq          for Cisco Content Switch
\& \*(Aqcss\-sca\*(Aq      for Cisco Content Switch Secure Content Acceleration
\& \*(Aqsan\-os\*(Aq       for Cisco SAN\-OS
.Ve
.ie n .IP "$ciscostats\->\fBos_ver()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBos_ver()\fR" 4
.IX Item "$ciscostats->os_ver()"
Tries to parse device operating system version from \fBdescription()\fR, falls back
to parsing \f(CW\*(C`CISCO\-IMAGE\-MIB::ciscoImageString\*(C'\fR if needed
.ie n .IP "$ciscostats\->\fBos_bin()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBos_bin()\fR" 4
.IX Item "$ciscostats->os_bin()"
Tries to parse \f(CW\*(C`ROMMON\*(C'\fR version from \fBrom_id()\fR string
.ie n .IP "$ciscostats\->\fBios_cpu()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBios_cpu()\fR" 4
.IX Item "$ciscostats->ios_cpu()"
Current \s-1CPU\s0 usage in percent.
.Sp
\&\f(CW1.3.6.1.4.1.9.2.1.56.0\fR =
\&\f(CW\*(C`OLD\-CISCO\-CPU\-MIB:avgBusyPer\*(C'\fR
.ie n .IP "$ciscostats\->\fBios_cpu_1min()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBios_cpu_1min()\fR" 4
.IX Item "$ciscostats->ios_cpu_1min()"
Average \s-1CPU\s0 Usage in percent over the last minute.
.Sp
\&\f(CW1.3.6.1.4.1.9.2.1.57.0\fR
.ie n .IP "$ciscostats\->\fBios_cpu_5min()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBios_cpu_5min()\fR" 4
.IX Item "$ciscostats->ios_cpu_5min()"
Average \s-1CPU\s0 Usage in percent over the last 5 minutes.
.Sp
\&\f(CW1.3.6.1.4.1.9.2.1.58.0\fR
.ie n .IP "$ciscostats\->\fBcat_cpu()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBcat_cpu()\fR" 4
.IX Item "$ciscostats->cat_cpu()"
Current \s-1CPU\s0 usage in percent.
.Sp
\&\f(CW\*(C`CISCO\-PROCESS\-MIB::cpmCPUTotal5sec.9\*(C'\fR
.ie n .IP "$ciscostats\->\fBcat_cpu_1min()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBcat_cpu_1min()\fR" 4
.IX Item "$ciscostats->cat_cpu_1min()"
Average \s-1CPU\s0 Usage in percent over the last minute.
.Sp
\&\f(CW\*(C`CISCO\-PROCESS\-MIB::cpmCPUTotal1min.9\*(C'\fR
.ie n .IP "$ciscostats\->\fBcat_cpu_5min()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBcat_cpu_5min()\fR" 4
.IX Item "$ciscostats->cat_cpu_5min()"
Average \s-1CPU\s0 Usage in percent over the last 5 minutes.
.Sp
\&\f(CW\*(C`CISCO\-PROCESS\-MIB::cpmCPUTotal5min.9\*(C'\fR
.ie n .IP "$ciscostats\->\fBmem_free()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBmem_free()\fR" 4
.IX Item "$ciscostats->mem_free()"
Main \s-1DRAM\s0 free of the device in bytes.
.Sp
\&\f(CW\*(C`CISCO\-MEMORY\-POOL\-MIB::ciscoMemoryPoolFree\*(C'\fR
.ie n .IP "$ciscostats\->\fBmem_used()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBmem_used()\fR" 4
.IX Item "$ciscostats->mem_used()"
Main \s-1DRAM\s0 used of the device in bytes.
.Sp
\&\f(CW\*(C`CISCO\-MEMORY\-POOL\-MIB::ciscoMemoryPoolUsed\*(C'\fR
.ie n .IP "$ciscostats\->\fBmem_total()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBmem_total()\fR" 4
.IX Item "$ciscostats->mem_total()"
Main \s-1DRAM\s0 of the device in bytes.
.Sp
\&\f(CW\*(C`CISCO\-MEMORY\-POOL\-MIB::ciscoMemoryPoolFree\*(C'\fR +
\&\f(CW\*(C`CISCO\-MEMORY\-POOL\-MIB::ciscoMemoryPoolUsed\*(C'\fR
.ie n .IP "$ciscostats\->\fBflashmem_total()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBflashmem_total()\fR" 4
.IX Item "$ciscostats->flashmem_total()"
Flash memory of the device in bytes.
.Sp
\&\f(CW\*(C`CISCO\-FLASH\-MIB::ciscoFlashDeviceSize\*(C'\fR
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
.ie n .SS "Cisco Memory Pool Table (""ciscoMemoryPoolTable"")"
.el .SS "Cisco Memory Pool Table (\f(CWciscoMemoryPoolTable\fP)"
.IX Subsection "Cisco Memory Pool Table (ciscoMemoryPoolTable)"
.ie n .IP "$ciscostats\->\fBcisco_mem_free()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBcisco_mem_free()\fR" 4
.IX Item "$ciscostats->cisco_mem_free()"
The number of bytes from the memory pool that are currently unused on the
managed device.
.Sp
(\f(CW\*(C`ciscoMemoryPoolFree\*(C'\fR)
.ie n .IP "$ciscostats\->\fBcisco_mem_used()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBcisco_mem_used()\fR" 4
.IX Item "$ciscostats->cisco_mem_used()"
The number of bytes from the memory pool that are currently in use by
applications on the managed device.
.Sp
(\f(CW\*(C`ciscoMemoryPoolUsed\*(C'\fR)
.ie n .SS "Cisco Flash Device Table (""ciscoFlashDeviceTable"")"
.el .SS "Cisco Flash Device Table (\f(CWciscoFlashDeviceTable\fP)"
.IX Subsection "Cisco Flash Device Table (ciscoFlashDeviceTable)"
.ie n .IP "$ciscostats\->\fBcisco_flash_size()\fR" 4
.el .IP "\f(CW$ciscostats\fR\->\fBcisco_flash_size()\fR" 4
.IX Item "$ciscostats->cisco_flash_size()"
Total size of the Flash device.  For a removable device, the size will be
zero if the device has been removed.
.Sp
(\f(CW\*(C`ciscoFlashDeviceSize\*(C'\fR)
.ie n .SS "Cisco Image Table (""ciscoImageTable"")"
.el .SS "Cisco Image Table (\f(CWciscoImageTable\fP)"
.IX Subsection "Cisco Image Table (ciscoImageTable)"
.ie n .IP "$ci\->\fBci_images()\fR" 4
.el .IP "\f(CW$ci\fR\->\fBci_images()\fR" 4
.IX Item "$ci->ci_images()"
Returns the table of image strings.
.Sp
\&\f(CW\*(C`ciscoImageString\*(C'\fR
