.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::ScheduledBackup 3"
.TH Infoblox::Grid::ScheduledBackup 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::ScheduledBackup \- Scheduled Backup object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Scheduled Backup object is used to schedule system backups.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& #Constructor for a ScheduledBackup object
\& my $backup = Infoblox::Grid::ScheduledBackup\->new (
\&         backup_type => "LOCAL" | "TFTP" | "FTP" | "SCP",   #Optional / Default is "LOCAL"
\&         keep_local_copy  => "true" | "false",              #Optional / Default is "false"
\&         backup_frequency => "Weekly" | "Daily" | "Hourly", #Optional / Default is "Daily"
\&         weekday => "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday"  #Optional / Default is "0"
\&         hour_of_day      => $num,                          #Optional / Default is 3
\&         minute_of_hour   => $num,                          #Optional / Default is 0
\&         user             => $string,                       #Optional / Default is undefined
\&         password         => $string,                       #Optional / Default is undefined
\&         backup_server    => $string,                       #Optional / Default is undefined
\&         path             => $string,                       #Optional / Default is undefined
\&         disabled         => "true" | "false",              #Optional / Default is "false"
\&
\&         source            => "DB" | "REPORTING"            #Optional / Default is "DB"
\&         status            => "IDLE" | "TRIGGERED" | "IN_PROGRESS" | "FINISHED" | "FAILED", #Optional / Default is "IDLE"
\&         operation_state   => \*(AqTRIGGERED\*(Aq,                  #Optional / Default is undefined
\&         operation         => "NONE" | "BACKUP" | "RESTORE", #Optional / Default is "NONE"
\&         restore_type      => "FTP" | "SCP",                #Optional / Default is "FTP"
\&         restore_host      => $string,                      #Optional / Default is undefined
\&         restore_username  => $string,                      #Optional / Default is undefined
\&         restore_password  => $string,                      #Optional / Default is undefined
\&         restore_directory => $string,                      #Optional / Default is undefined
\&         nios_data         => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,             #Optional / If any of nios_data and discovery_data is not
\&                                                            #defined, nios_data is \*(Aqtrue\*(Aq.
\&         discovery_data    => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,             #Optional / If any of nios_data and discovery_data is not
\&                                                            #defined, discovery_data is \*(Aqfalse\*(Aq.
\&         splunk_app_data   => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,             #Optional / Default is \*(Aqfalse\*(Aq
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions can be applied to a ScheduledBackup object.
.SS "Infoblox::Grid\->scheduled_backup( )"
.IX Subsection "Infoblox::Grid->scheduled_backup( )"
.RS 4
Use this function to specify a ScheduledBackup object. See Infoblox::Grid\->\fBscheduled_backup()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Retrieve the list of ScheduledBackup objects from the Grid object.
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid",
\&     name   => "Infoblox"
\& );
\&
\& my $Grid_obj = $retrieved_objs[0];
\&
\& # construct a ScheduledBackup object
\& my $backup = Infoblox::Grid::ScheduledBackup\->new (
\&     backup_type => "LOCAL",
\&     backup_frequency => "Weekly",
\&     weekday => "0", # "0" is the same as "Sunday"
\&     hour_of_day => "4",
\&     minute_of_hour => "0",
\&     user  => "username",
\&     password => "user\-password",
\&     backup_server  => "my\-backup\-server",
\&     path => "/tmp/infoblox/database.tar.gz",
\&     disabled => "false",
\& );
\&
\& # Modify the scheduled backup list
\& $Grid_obj\->scheduled_backup($backup);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a ScheduledBackup object.
.SS "backup_type( )"
.IX Subsection "backup_type( )"
.RS 4
Use this method to set or retrieve the destination of the backup files. You can back up system files to a local directory, a \s-1TFTP\s0 server, an \s-1FTP\s0 server, or an \s-1SSH\s0 server that supports \s-1SCP.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1LOCAL\*(R", \*(L"TFTP\*(R", \*(L"FTP\*(R"\s0 or \*(L"\s-1SCP\*(R".\s0 The default value is \*(L"\s-1LOCAL\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get backup_type
\& my $backup_type = $backup\->backup_type();
\& #Modify backup_type
\& $backup\->backup_type("FTP");
.Ve
.RE
.RS 4
.RE
.SS "keep_local_copy( )"
.IX Subsection "keep_local_copy( )"
.RS 4
Use this method to control whether a local backup is created in addition to a remote one. This option works only if you also specify a remote backup type (\s-1TFTP, FTP,\s0 or \s-1SCP\s0). You cannot enable this option using the \*(L"\s-1LOCAL\*(R"\s0 backup type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"true\*(R" and \*(L"false\*(R". The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get keep_local_copy
\& my $keep_local_copy = $backup\->keep_local_copy();
\& #Modify keep_local_copy
\& $backup\->backup_type("true");
.Ve
.RE
.RS 4
.RE
.SS "backup_frequency( )"
.IX Subsection "backup_frequency( )"
.RS 4
Use this method to set or retrieve the frequency of backups.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"Weekly\*(R", \*(L"Daily\*(R" or \*(L"Hourly\*(R". The default value is \*(L"Daily\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get backup frequency
\& my $backup_backup_frequency = $backup\->backup_frequency();
\& #Modify backup frequency
\& $backup\->backup_frequency("Weekly");
.Ve
.RE
.RS 4
.RE
.SS "weekday( )"
.IX Subsection "weekday( )"
.RS 4
Use this method to set or retrieve the day of the week when the backup is performed. This is required only when backup_frequency is set to \*(L"Weekly\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"0\*(R", \*(L"1\*(R", \*(L"2\*(R", \*(L"3\*(R", \*(L"4\*(R", \*(L"5\*(R", \*(L"6\*(R", \*(L"7\*(R", \*(L"Sunday\*(R", \*(L"Monday\*(R", \*(L"Tuesday\*(R", \*(L"Wednesday\*(R", \*(L"Thursday\*(R", \*(L"Friday\*(R" or \*(L"Saturday\*(R". \*(L"0\*(R" means \*(L"Sunday\*(R", \*(L"1\*(R" \- \*(L"Monday\*(R". etc. The default value is \*(L"6\*(R" (Saturday).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get weekday
\& my $weekday = $backup\->weekday();
\& #Modify weekday
\& $backup\->weekday("0");
.Ve
.RE
.RS 4
.RE
.SS "execute( )"
.IX Subsection "execute( )"
.RS 4
Use this method to set the state for Reporting scheduled backup / restore operation. This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is '\s-1TRIGGER\s0'. The default is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
None
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Modify operation_state value
\& $object\->execute(\*(AqTRIGGER\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "hour_of_day( )"
.IX Subsection "hour_of_day( )"
.RS 4
Use this method to set or retrieve the hour when the backup is performed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number from 0 through 23. The default value is 3 (3:00 A.M.).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get hour_of_day
\& my $hour_of_day = $backup\->hour_of_day();
\& #Modify hour_of_day
\& $backup\->hour_of_day("4");
.Ve
.RE
.RS 4
.RE
.SS "minute_of_hour( )"
.IX Subsection "minute_of_hour( )"
.RS 4
Use this method to set or retrieve the minute of the hour when the backup is performed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number from 0 through 59. The default value is 0.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get minute_of_hour
\& my $minute_of_hour = $backup\->minute_of_hour();
\& #Modify minute_of_hour
\& $backup\->minute_of_hour("5");
.Ve
.RE
.RS 4
.RE
.SS "nios_data( )"
.IX Subsection "nios_data( )"
.RS 4
Use this method to enable or disable the backup and restore of \s-1NIOS\s0 data.
.Sp
If any of nios_data and discovery_data is not defined, nios_data is 'true'.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to enable backup/restore of \s-1NIOS\s0 data. Set the parameter to \*(L"false\*(R" to disable the object. The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get nios_data
\& my $nios_data = $backup\->nios_data();
\& #Modify nios_data
\& $backup\->nios_data("true");
.Ve
.RE
.RS 4
.RE
.SS "discovery_data( )"
.IX Subsection "discovery_data( )"
.RS 4
Use this method to enable or disable the backup and restore of Network Automation data.
.Sp
If any of nios_data and discovery_data is not defined, discovery_data is 'false'.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to enable backup/restore of Network Automation data. Set the parameter to \*(L"false\*(R" to disable the object. The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get discovery_data
\& my $nios_data = $backup\->discovery_data();
\& #Modify discovery_data
\& $backup\->discovery_data("true");
.Ve
.RE
.RS 4
.RE
.SS "splunk_app_data( )"
.IX Subsection "splunk_app_data( )"
.RS 4
Use this method to enable or disable the backup and restore of Splunk application data.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to enable backup/restore of Splunk application data. Set the parameter to \*(L"false\*(R" to disable the object. The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get splunk_app_data
\& my $nios_data = $backup\->splunk_app_data();
\& #Modify splunk_app_data
\& $backup\->splunk_app_data("true");
.Ve
.RE
.RS 4
.RE
.SS "user( )"
.IX Subsection "user( )"
.RS 4
Use this method to set or retrieve the user name on the backup server. This is required only when backup_type is set to \*(L"\s-1FTP\*(R"\s0 or \*(L"\s-1SCP\*(R".\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The user name in string format with a maximum of 1024 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get user
\& my $user = $backup\->user();
\& #Modify user
\& $backup\->user("admin1");
.Ve
.RE
.RS 4
.RE
.SS "password( )"
.IX Subsection "password( )"
.RS 4
Use this method to set the user password on the backup server. This is required only when backup_type is set to \*(L"\s-1FTP\*(R"\s0 or \*(L"\s-1SCP\*(R".\s0 This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The password in string format with a maximum of 64 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Modify password
\& $backup\->password("userpassword");
.Ve
.RE
.RS 4
.RE
.SS "backup_server( )"
.IX Subsection "backup_server( )"
.RS 4
Use this method to set or retrieve the \s-1IP\s0 address of the backup server. This is required only when backup_type is set to \*(L"\s-1FTP\*(R", \*(L"TFTP\*(R"\s0 or \*(L"\s-1SCP\*(R".\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The \s-1IP\s0 address of the backup server.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get backup_server
\& my $backup_server = $backup\->backup_server();
\& #Modify backup_server
\& $backup\->backup_server("my\-backup\-server");
.Ve
.RE
.RS 4
.RE
.SS "path( )"
.IX Subsection "path( )"
.RS 4
Use this method to set or retrieve the directory path to the backup file stored on the server. This is required only when backup_type is set to \*(L"\s-1FTP\*(R"\s0 or \*(L"\s-1SCP\*(R".\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired path in string format with a maximum of 1024 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get path
\& my $path = $backup\->path();
\& #Modify path
\& $backup\->path("/tmp/infoblox/database.tar.gz");
.Ve
.RE
.RS 4
.RE
.SS "disabled( )"
.IX Subsection "disabled( )"
.RS 4
Use this method to disable the ScheduledBackup object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to disable the ScheduledBackup object. Set the parameter to \*(L"false\*(R" to enable the object. The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disabled
\& my $disabled = $backup\->disabled();
\& #Modify disabled
\& $backup\->disabled("true");
.Ve
.RE
.RS 4
.RE
.SS "source( )"
.IX Subsection "source( )"
.RS 4
Use thi method to set or retrieve the source of ScheduledBackup object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Can be set to \*(L"\s-1DB\*(R"\s0 to operate with Grid ScheduledBackup object or to \*(L"\s-1REPORTING\*(R"\s0 to operate with Reporting ScheduledBackup object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get source
\& my $source = $backup\->source();
\& #Modify source
\& $backup\->source("REPORTING");
.Ve
.RE
.RS 4
.RE
.SS "status( )"
.IX Subsection "status( )"
.RS 4
Use this method to set or retrieve the status of the Reporting ScheduledBackup object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Either \*(L"\s-1TRIGGERED\*(R"\s0 or \*(L"\s-1IN_PROGRESS\*(R"\s0 to identify that Reporting backup/restore is running. Status \*(L"\s-1FINISHED\*(R"\s0 means Reporting backup/restore succeeded. Status \*(L"\s-1FAILED\*(R"\s0 means Reporting backup/restore failed. The default value of this parameter is \*(L"\s-1IDLE\*(R".\s0
.Sp
Set status to \*(L"\s-1TRIGGERED\*(R"\s0 to run a Reporting manual backup. Use this for a Reporting manual backup only.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get status
\& my $status = $backup\->status();
\& #Modify status
\& $backup\->status("TRIGGERED");
.Ve
.RE
.RS 4
.RE
.SS "operation( )"
.IX Subsection "operation( )"
.RS 4
Use this method to set or retrieve the operation of the Reporting ScheduledBackup object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"\s-1BACKUP\*(R"\s0 to indicate that a Reporting backup must be performed, or specify \*(L"\s-1RESTORE\*(R"\s0 to indicate that a Reporting restore must be performed. The default value is \*(L"\s-1NONE\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get operation
\& my $operation = $backup\->operation();
\& #Modify operation
\& $backup\->operation("RESTORE");
.Ve
.RE
.RS 4
.RE
.SS "restore_type( )"
.IX Subsection "restore_type( )"
.RS 4
Use this method to set or retrieve the destination of the restore files when the operation is set to \*(L"\s-1RESTORE\*(R".\s0 You can back up system files to an \s-1FTP\s0 server, or an \s-1SSH\s0 server that supports \s-1SCP.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1FTP\*(R"\s0 or \*(L"\s-1SCP\*(R".\s0 The default value is \*(L"\s-1FTP\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get restore_type
\& my $restore_type = $backup\->restore_type();
\& #Modify restore_type
\& $backup\->restore_type("FTP");
.Ve
.RE
.RS 4
.RE
.SS "restore_host( )"
.IX Subsection "restore_host( )"
.RS 4
Use this method to set or retrieve the \s-1IP\s0 address of the restore server when the operation is set to \*(L"\s-1RESTORE\*(R".\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The \s-1IP\s0 address of the restore server.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get backup_server
\& my $restore_host = $backup\->restore_host();
\& #Modify restore_host
\& $backup\->restore_host("my\-restore\-server");
.Ve
.RE
.RS 4
.RE
.SS "restore_username( )"
.IX Subsection "restore_username( )"
.RS 4
Use this method to set or retrieve the user name that is used to log in to the restore server. This is required only when \*(L"\s-1RESTORE\*(R"\s0 operation is performed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The user name in string format with a maximum of 1024 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get user
\& my $restore_username = $backup\->restore_username();
\& #Modify user
\& $backup\->restore_username("admin1");
.Ve
.RE
.RS 4
.RE
.SS "restore_password( )"
.IX Subsection "restore_password( )"
.RS 4
Use this method to set the user password that is used to log in to the restore server. This is required only when \*(L"\s-1RESTORE\*(R"\s0 operation is performed. This is a write-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The restore_password in string format with a maximum of 64 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Modify restore_password
\& $backup\->restore_password("userpassword");
.Ve
.RE
.RS 4
.RE
.SS "restore_directory( )"
.IX Subsection "restore_directory( )"
.RS 4
Use this method to set or retrieve the directory path to the restored file on the server. This is required only when \*(L"\s-1RESTORE\*(R"\s0 operation is performed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired path in string format with a maximum of 1024 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get restore_directory
\& my $restore_directory = $backup\->restore_directory();
\& #Modify restore_directory
\& $backup\->restore_directory("/tmp");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to an object such as create, modify, and remove an object. This sample code also includes error handling for the operations.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Add a ScheduledBackup object\fR
.PP
.Vb 10
\& my @result_array = $session\->get( "object" => "Infoblox::Grid", "name" => "Infoblox");
\& if( scalar( @result_array ) > 0 )
\&  {
\&         my $Grid_obj = $result_array[0];
\&         unless ($Grid_obj) {
\&                 die("Get Grid object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&         }
\&         # construct a ScheduledBackup object
\&         my $backup = Infoblox::Grid::ScheduledBackup\->new (
\&             backup_type => "LOCAL",
\&             backup_frequency => "Weekly",
\&             weekday => "0", # "0" is the same as "Sunday"
\&             hour_of_day => "4",
\&             minute_of_hour => "0",
\&             user  => "username",
\&             password => "user\-password",
\&             backup_server  => "10.0.3.4",
\&             path => "/tmp/infoblox/database.tar.gz",
\&             disabled => "false",
\&         );
\&
\&         # Add ScheduledBackup to Grid object.
\&         $Grid_obj\->scheduled_backup($backup);
\&
\&         $session\->modify($Grid_obj)
\&             or die("Modify Grid failed: ",$session\->status_code(). ":" .$session\->status_detail());
\&         print "ScheduledBackup added to Grid object sucessfully\en";
\& } else {
\&     print "No Grid object found.";
\& }
.Ve
.PP
\&\fB#Modify an existing ScheduledBackup object\fR
.PP
.Vb 8
\& @result_array = $session\->get( "object" => "Infoblox::Grid", "name" => "Infoblox");
\& if( scalar( @result_array ) > 0 )
\&  {
\&         my $Grid_obj = $result_array[0];
\&         unless ($Grid_obj) {
\&                 die("Get Grid object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&         }
\&
\&          # get ScheduledBackup from Grid object.
\&          my $backup= $Grid_obj\->scheduled_backup();
\&
\&          #modify the backup frequency
\&          $backup\->backup_frequency("Daily");
\&
\&          # Add ScheduledBackup to Grid object.
\&          $Grid_obj\->scheduled_backup($backup);
\&
\&          $session\->modify($Grid_obj)
\&             or die("Modify Grid failed: ",$session\->status_code(). ":" .$session\->status_detail());
\&          print "ScheduledBackup modified on Grid object sucessfully\en";
\& } else {
\&     print "No Grid object found.";
\& }
.Ve
.PP
\&\fB#Remove an existing ScheduledBackup object\fR
.PP
.Vb 8
\& @result_array = $session\->get( "object" => "Infoblox::Grid", "name" => "Infoblox");
\& if( scalar( @result_array ) > 0 )
\&  {
\&         my $Grid_obj = $result_array[0];
\&         unless ($Grid_obj) {
\&                 die("Get Grid object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&         }
\&
\&          # empty ScheduledBackup list on Grid object.
\&          $Grid_obj\->scheduled_backup([]);
\&
\&          $session\->modify($Grid_obj)
\&             or die("Modify Grid failed: ",$session\->status_code(). ":" .$session\->status_detail());
\&          print "ScheduledBackup removed on Grid object sucessfully\en";
\& } else {
\&     print "No Grid object found.";
\& }
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid, Infoblox::Grid\->\fBscheduled_backup()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
