.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Code::TidyAll::Result 3"
.TH Code::TidyAll::Result 3 "2020-04-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Code::TidyAll::Result \- Result returned from processing a file/source
.SH "VERSION"
.IX Header "VERSION"
version 0.78
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    my $ct = Code::TidyAll\->new(...);
\&    my $result = $ct\->process_file($file);
\&    if ($result\->error) {
\&       ...
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Represents the result of \f(CW\*(C`Code::TidyAll\->process_file\*(C'\fR and \f(CW\*(C`Code::TidyAll\->process_file\*(C'\fR. A list of these is returned from \f(CW\*(C`
Code::TidyAll\-\*(C'\fRprocess_paths >>.
.SH "METHODS"
.IX Header "METHODS"
This class provides the following methods:
.ie n .SS "$result\->path"
.el .SS "\f(CW$result\fP\->path"
.IX Subsection "$result->path"
The path that was processed, relative to the root (e.g. \*(L"lib/Foo.pm\*(R")
.ie n .SS "$result\->state"
.el .SS "\f(CW$result\fP\->state"
.IX Subsection "$result->state"
A string, one of
.IP "\(bu" 4
\&\f(CW\*(C`no_match\*(C'\fR \- No plugins matched this file
.IP "\(bu" 4
\&\f(CW\*(C`cached\*(C'\fR \- Cache hit (file had not changed since last processed)
.IP "\(bu" 4
\&\f(CW\*(C`error\*(C'\fR \- An error occurred while applying one of the plugins
.IP "\(bu" 4
\&\f(CW\*(C`checked\*(C'\fR \- File was successfully checked and did not change
.IP "\(bu" 4
\&\f(CW\*(C`tidied\*(C'\fR \- File was successfully checked and changed
.ie n .SS "$result\->orig_contents"
.el .SS "\f(CW$result\fP\->orig_contents"
.IX Subsection "$result->orig_contents"
Contains the original contents if state is 'tidied' and with some errors (like
when a file needs tidying in check-only mode)
.ie n .SS "$result\->new_contents"
.el .SS "\f(CW$result\fP\->new_contents"
.IX Subsection "$result->new_contents"
Contains the new contents if state is 'tidied'
.ie n .SS "$result\->error"
.el .SS "\f(CW$result\fP\->error"
.IX Subsection "$result->error"
Contains the error message if state is 'error'
.ie n .SS "$result\->ok"
.el .SS "\f(CW$result\fP\->ok"
.IX Subsection "$result->ok"
Returns true iff state is not 'error'
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted at
<https://github.com/houseabsolute/perl\-code\-tidyall/issues>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Code-TidyAll can be found at
<https://github.com/houseabsolute/perl\-code\-tidyall>.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Jonathan Swartz <swartz@pobox.com>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 \- 2020 by Jonathan Swartz.
.PP
This is free software; you can redistribute it and/or modify it under the same
terms as the Perl 5 programming language system itself.
.PP
The full text of the license can be found in the \fI\s-1LICENSE\s0\fR file included with
this distribution.
