.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::Layer2::HP 3"
.TH SNMP::Info::Layer2::HP 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::Layer2::HP \- SNMP Interface to HP Procurve Switches
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Baker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& # Let SNMP::Info determine the correct subclass for you.
\& my $hp = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class      = $hp\->class();
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides abstraction to the configuration information obtainable from a
\&\s-1HP\s0 ProCurve Switch via \s-1SNMP.\s0
.PP
Note:  Some \s-1HP\s0 Switches will connect via \s-1SNMP\s0 version 1, but a lot of config
data will not be available.  Make sure you try and connect with Version 2
first, and then fail back to version 1.
.PP
For speed or debugging purposes you can call the subclass directly, but not
after determining a more specific class using the method above.
.PP
.Vb 1
\& my $hp = new SNMP::Info::Layer2::HP(...);
.Ve
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.IP "SNMP::Info::Layer2" 4
.IX Item "SNMP::Info::Layer2"
.PD 0
.IP "SNMP::Info::MAU" 4
.IX Item "SNMP::Info::MAU"
.PD
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fI\s-1RFC1271\-MIB\s0\fR" 4
.IX Item "RFC1271-MIB"
Included in V2 mibs from Cisco
.IP "\fIHP-ICF-OID\fR" 4
.IX Item "HP-ICF-OID"
(this \s-1MIB\s0 new with SNMP::Info 0.8)
.IP "\fISTATISTICS-MIB\fR" 4
.IX Item "STATISTICS-MIB"
.PD 0
.IP "\fINETSWITCH-MIB\fR" 4
.IX Item "NETSWITCH-MIB"
.IP "\fICONFIG-MIB\fR" 4
.IX Item "CONFIG-MIB"
.IP "\fIHP-ICF-BRIDGE\fR" 4
.IX Item "HP-ICF-BRIDGE"
.IP "\fIHP-ICF-POE-MIB\fR" 4
.IX Item "HP-ICF-POE-MIB"
.IP "\fIHP-ICF-CHASSIS\fR" 4
.IX Item "HP-ICF-CHASSIS"
.IP "\fISEMI-MIB\fR" 4
.IX Item "SEMI-MIB"
.IP "\fIHP-SWITCH-PL-MIB\fR" 4
.IX Item "HP-SWITCH-PL-MIB"
.IP "\fI\s-1BLADETYPE4\-NETWORK\-MIB\s0\fR" 4
.IX Item "BLADETYPE4-NETWORK-MIB"
.PD
.PP
The last four MIBs listed are from \s-1HP\s0 and can be found at
<http://www.hp.com/rnd/software> or
<http://www.hp.com/rnd/software/MIBs.htm>
.SH "Change Log"
.IX Header "Change Log"
Version 0.4 \- Removed \fIENTITY-MIB\fR e_*() methods to separate sub-class \-
SNMP::Info::Entity
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP\s0
.ie n .IP "$hp\->\fBcpu()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBcpu()\fR" 4
.IX Item "$hp->cpu()"
Returns \s-1CPU\s0 Utilization in percentage.
.ie n .IP "$hp\->\fBlog()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBlog()\fR" 4
.IX Item "$hp->log()"
Returns all the log entries from the switch's log that are not Link up or
down messages.
.ie n .IP "$hp\->\fBmem_free()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBmem_free()\fR" 4
.IX Item "$hp->mem_free()"
Returns bytes of free memory
.ie n .IP "$hp\->\fBmem_total()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBmem_total()\fR" 4
.IX Item "$hp->mem_total()"
Return bytes of total memory
.ie n .IP "$hp\->\fBmem_used()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBmem_used()\fR" 4
.IX Item "$hp->mem_used()"
Returns bytes of used memory
.ie n .IP "$hp\->\fBmodel()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBmodel()\fR" 4
.IX Item "$hp->model()"
Returns the model number of the \s-1HP\s0 Switch.  Will translate between the \s-1HP\s0 Part
number and the common model number with this map :
.Sp
.Vb 10
\& %MODEL_MAP = (
\&    \*(AqJ8131A\*(Aq => \*(AqWAP\-420\-WW\*(Aq,
\&    \*(AqJ8130A\*(Aq => \*(AqWAP\-420\-NA\*(Aq,
\&    \*(AqJ8133A\*(Aq => \*(AqAP520WL\*(Aq,
\&    \*(AqJ8680A\*(Aq => \*(Aq9408sl\*(Aq,
\&    \*(AqJ9091A\*(Aq => \*(Aq8212zl\*(Aq,
\&    \*(AqJ9475A\*(Aq => \*(Aq8206zl\*(Aq,
\&    \*(AqJ9265A\*(Aq => \*(Aq6600ml\-24XG\*(Aq,
\&    \*(AqJ9264A\*(Aq => \*(Aq6600ml\-24G\-4XG\*(Aq,
\&    \*(AqJ9263A\*(Aq => \*(Aq6600ml\-24G\*(Aq,
\&    \*(AqJ9452A\*(Aq => \*(Aq6600\-48G\-4XG\*(Aq,
\&    \*(AqJ9451A\*(Aq => \*(Aq6600\-48G\*(Aq,
\&    \*(AqJ8474A\*(Aq => \*(Aq6410cl\-6XG\*(Aq,
\&    \*(AqJ8433A\*(Aq => \*(Aq6400cl\-6XG\*(Aq,
\&    \*(AqJ8992A\*(Aq => \*(Aq6200yl\-24G\*(Aq,
\&    \*(AqJ4902A\*(Aq => \*(Aq6108\*(Aq,
\&    \*(AqJ8698A\*(Aq => \*(Aq5412zl\*(Aq,
\&    \*(AqJ8719A\*(Aq => \*(Aq5408yl\*(Aq,
\&    \*(AqJ8697A\*(Aq => \*(Aq5406zl\*(Aq,
\&    \*(AqJ8718A\*(Aq => \*(Aq5404yl\*(Aq,
\&    \*(AqJ4819A\*(Aq => \*(Aq5308XL\*(Aq,
\&    \*(AqJ4850A\*(Aq => \*(Aq5304XL\*(Aq,
\&    \*(AqJ8773A\*(Aq => \*(Aq4208vl\*(Aq,
\&    \*(AqJ8770A\*(Aq => \*(Aq4204vl\*(Aq,
\&    \*(AqJ8772A\*(Aq => \*(Aq4202vl\-72\*(Aq,
\&    \*(AqJ9032A\*(Aq => \*(Aq4202vl\-68G\*(Aq,
\&    \*(AqJ9031A\*(Aq => \*(Aq4202vl\-68\*(Aq,
\&    \*(AqJ8771A\*(Aq => \*(Aq4202vl\-48G\*(Aq,
\&    \*(AqJ4865A\*(Aq => \*(Aq4108GL\*(Aq,
\&    \*(AqJ4887A\*(Aq => \*(Aq4104GL\*(Aq,
\&    \*(AqJ9588A\*(Aq => \*(Aq3800\-48G\-PoE+\-4XG\*(Aq,
\&    \*(AqJ9574A\*(Aq => \*(Aq3800\-48G\-PoE+\-4SFP+\*(Aq,
\&    \*(AqJ9586A\*(Aq => \*(Aq3800\-48G\-4XG\*(Aq,
\&    \*(AqJ9576A\*(Aq => \*(Aq3800\-48G\-4SFP+\*(Aq,
\&    \*(AqJ9584A\*(Aq => \*(Aq3800\-24SFP\-2SFP+\*(Aq,
\&    \*(AqJ9587A\*(Aq => \*(Aq3800\-24G\-PoE+\-2XG\*(Aq,
\&    \*(AqJ9573A\*(Aq => \*(Aq3800\-24G\-PoE+\-2SFP+\*(Aq,
\&    \*(AqJ9585A\*(Aq => \*(Aq3800\-24G\-2XG\*(Aq,
\&    \*(AqJ9575A\*(Aq => \*(Aq3800\-24G\-2SFP+\*(Aq,
\&    \*(AqJ8693A\*(Aq => \*(Aq3500yl\-48G\-PWR\*(Aq,
\&    \*(AqJ8692A\*(Aq => \*(Aq3500yl\-24G\-PWR\*(Aq,
\&    \*(AqJ9473A\*(Aq => \*(Aq3500\-48\-PoE\*(Aq,
\&    \*(AqJ9472A\*(Aq => \*(Aq3500\-48\*(Aq,
\&    \*(AqJ9471A\*(Aq => \*(Aq3500\-24\-PoE\*(Aq,
\&    \*(AqJ9470A\*(Aq => \*(Aq3500\-24\*(Aq,
\&    \*(AqJ4906A\*(Aq => \*(Aq3400cl\-48G\*(Aq,
\&    \*(AqJ4905A\*(Aq => \*(Aq3400cl\-24G\*(Aq,
\&    \*(AqJ4815A\*(Aq => \*(Aq3324XL\*(Aq,
\&    \*(AqJ4851A\*(Aq => \*(Aq3124\*(Aq,
\&    \*(AqJ9562A\*(Aq => \*(Aq2915\-8G\-PoE\*(Aq,
\&    \*(AqJ9148A\*(Aq => \*(Aq2910al\-48G\-PoE+\*(Aq,
\&    \*(AqJ9147A\*(Aq => \*(Aq2910al\-48G\*(Aq,
\&    \*(AqJ9146A\*(Aq => \*(Aq2910al\-24G\-PoE+\*(Aq,
\&    \*(AqJ9145A\*(Aq => \*(Aq2910al\-24G\*(Aq,
\&    \*(AqJ9050A\*(Aq => \*(Aq2900\-48G\*(Aq,
\&    \*(AqJ9049A\*(Aq => \*(Aq2900\-24G\*(Aq,
\&    \*(AqJ4904A\*(Aq => \*(Aq2848\*(Aq,
\&    \*(AqJ4903A\*(Aq => \*(Aq2824\*(Aq,
\&    \*(AqJ9022A\*(Aq => \*(Aq2810\-48G\*(Aq,
\&    \*(AqJ9021A\*(Aq => \*(Aq2810\-24G\*(Aq,
\&    \*(AqJ8165A\*(Aq => \*(Aq2650\-PWR\*(Aq,
\&    \*(AqJ4899B\*(Aq => \*(Aq2650\-CR\*(Aq,
\&    \*(AqJ4899C\*(Aq => \*(Aq2650C\*(Aq,
\&    \*(AqJ4899A\*(Aq => \*(Aq2650\*(Aq,
\&    \*(AqJ8164A\*(Aq => \*(Aq2626\-PWR\*(Aq,
\&    \*(AqJ4900B\*(Aq => \*(Aq2626\-CR\*(Aq,
\&    \*(AqJ4900C\*(Aq => \*(Aq2626C\*(Aq,
\&    \*(AqJ4900A\*(Aq => \*(Aq2626\*(Aq,
\&    \*(AqJ9627A\*(Aq => \*(Aq2620\-48\-PoE+\*(Aq,
\&    \*(AqJ9626A\*(Aq => \*(Aq2620\-48\*(Aq,
\&    \*(AqJ9624A\*(Aq => \*(Aq2620\-24\-PPoE+\*(Aq,
\&    \*(AqJ9625A\*(Aq => \*(Aq2620\-24\-PoE+\*(Aq,
\&    \*(AqJ9623A\*(Aq => \*(Aq2620\-24\*(Aq,
\&    \*(AqJ9565A\*(Aq => \*(Aq2615\-8\-PoE\*(Aq,
\&    \*(AqJ9089A\*(Aq => \*(Aq2610\-48\-PWR\*(Aq,
\&    \*(AqJ9088A\*(Aq => \*(Aq2610\-48\*(Aq,
\&    \*(AqJ9087A\*(Aq => \*(Aq2610\-24\-PWR\*(Aq,
\&    \*(AqJ9086A\*(Aq => \*(Aq2610\-24/12PWR\*(Aq,
\&    \*(AqJ9085A\*(Aq => \*(Aq2610\-24\*(Aq,
\&    \*(AqJ8762A\*(Aq => \*(Aq2600\-8\-PWR\*(Aq,
\&    \*(AqJ4813A\*(Aq => \*(Aq2524\*(Aq,
\&    \*(AqJ9298A\*(Aq => \*(Aq2520G\-8\-PoE\*(Aq,
\&    \*(AqJ9299A\*(Aq => \*(Aq2520G\-24\-PoE\*(Aq,
\&    \*(AqJ9137A\*(Aq => \*(Aq2520\-8\-PoE\*(Aq,
\&    \*(AqJ9138A\*(Aq => \*(Aq2520\-24\-PoE\*(Aq,
\&    \*(AqJ4812A\*(Aq => \*(Aq2512\*(Aq,
\&    \*(AqJ9280A\*(Aq => \*(Aq2510G\-48\*(Aq,
\&    \*(AqJ9279A\*(Aq => \*(Aq2510G\-24\*(Aq,
\&    \*(AqJ9020A\*(Aq => \*(Aq2510\-48A\*(Aq,
\&    \*(AqJ9019B\*(Aq => \*(Aq2510\-24B\*(Aq,
\&    \*(AqJ9019A\*(Aq => \*(Aq2510\-24A\*(Aq,
\&    \*(AqJ4818A\*(Aq => \*(Aq2324\*(Aq,
\&    \*(AqJ4817A\*(Aq => \*(Aq2312\*(Aq,
\&    \*(AqJ9449A\*(Aq => \*(Aq1810G\-8\*(Aq,
\&    \*(AqJ9450A\*(Aq => \*(Aq1810G\-24\*(Aq,
\&    \*(AqJ9029A\*(Aq => \*(Aq1800\-8G\*(Aq,
\&    \*(AqJ9028A\*(Aq => \*(Aq1800\-24G\*(Aq,
\& );
.Ve
.ie n .IP "$hp\->\fBos()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBos()\fR" 4
.IX Item "$hp->os()"
Returns hp
.ie n .IP "$hp\->\fBos_bin()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBos_bin()\fR" 4
.IX Item "$hp->os_bin()"
\&\f(CW\*(C`hpSwitchRomVersion.0\*(C'\fR
.ie n .IP "$hp\->\fBos_ver()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBos_ver()\fR" 4
.IX Item "$hp->os_ver()"
Tries to use \fBos_version()\fR and if that fails will try and cull the version from
the description field.
.ie n .IP "$hp\->\fBos_version()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBos_version()\fR" 4
.IX Item "$hp->os_version()"
\&\f(CW\*(C`hpSwitchOsVersion.0\*(C'\fR
.ie n .IP "$hp\->\fBserial()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBserial()\fR" 4
.IX Item "$hp->serial()"
Returns serial number if available through \s-1SNMP\s0
.ie n .IP "$hp\->\fBslots()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBslots()\fR" 4
.IX Item "$hp->slots()"
Returns number of entries in \f(CW$hp\fR\->e_name that have 'slot' in them.
.ie n .IP "$hp\->\fBvendor()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBvendor()\fR" 4
.IX Item "$hp->vendor()"
hp
.ie n .IP "$hp\->\fBfan()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBfan()\fR" 4
.IX Item "$hp->fan()"
Returns fan status
.ie n .IP "$hp\->\fBps1_status()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBps1_status()\fR" 4
.IX Item "$hp->ps1_status()"
Power supply 1 status
.ie n .IP "$hp\->\fBps2_status()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBps2_status()\fR" 4
.IX Item "$hp->ps2_status()"
Power supply 2 status
.ie n .IP "$hp\->\fBpeth_port_power()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBpeth_port_power()\fR" 4
.IX Item "$hp->peth_port_power()"
Power supplied by PoE ports, in milliwatts
(\f(CW\*(C`hpicfPoePethPsePortPower\*(C'\fR)
.ie n .IP "$hp\->\fBstp_ver()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBstp_ver()\fR" 4
.IX Item "$hp->stp_ver()"
Returns what version of \s-1STP\s0 the device is running.
(\f(CW\*(C`hpicfBridgeRstpForceVersion\*(C'\fR with fallback to inherited \fBstp_ver()\fR)
.SS "Globals imported from SNMP::Info::Layer2"
.IX Subsection "Globals imported from SNMP::Info::Layer2"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::Layer2 for details.
.SS "Globals imported from SNMP::Info::MAU"
.IX Subsection "Globals imported from SNMP::Info::MAU"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::MAU for details.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$hp\->\fBinterfaces()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBinterfaces()\fR" 4
.IX Item "$hp->interfaces()"
Uses \f(CW$hp\fR\->\fBi_description()\fR
.ie n .IP "$hp\->\fBi_duplex()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBi_duplex()\fR" 4
.IX Item "$hp->i_duplex()"
Returns reference to map of IIDs to current link duplex.
.ie n .IP "$hp\->\fBi_duplex_admin()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBi_duplex_admin()\fR" 4
.IX Item "$hp->i_duplex_admin()"
Returns reference to hash of IIDs to admin duplex setting.
.ie n .IP "$hp\->\fBvendor_i_type()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBvendor_i_type()\fR" 4
.IX Item "$hp->vendor_i_type()"
Returns reference to hash of IIDs to \s-1HP\s0 specific port type
(\f(CW\*(C`hpSwitchPortType\*(C'\fR).
.ie n .IP "$hp\->\fBi_name()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBi_name()\fR" 4
.IX Item "$hp->i_name()"
Crosses \fBi_name()\fR with \f(CW$hp\fR\->\fBe_name()\fR using \f(CW$hp\fR\->\fBe_port()\fR and \fBi_alias()\fR
.ie n .IP "$hp\->\fBpeth_port_ifindex()\fR" 4
.el .IP "\f(CW$hp\fR\->\fBpeth_port_ifindex()\fR" 4
.IX Item "$hp->peth_port_ifindex()"
Returns reference to hash of power Ethernet port table entries map back to
interface index (c<ifIndex>)
.ie n .IP """agg_ports""" 4
.el .IP "\f(CWagg_ports\fR" 4
.IX Item "agg_ports"
Returns a \s-1HASH\s0 reference mapping from slave to master port for each member of
a port bundle on the device. Keys are ifIndex of the slave ports, Values are
ifIndex of the corresponding master ports.
.SS "Table Methods imported from SNMP::Info::Layer2"
.IX Subsection "Table Methods imported from SNMP::Info::Layer2"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::Layer2 for details.
.SS "Table Methods imported from SNMP::Info::MAU"
.IX Subsection "Table Methods imported from SNMP::Info::MAU"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::MAU for details.
.SH "MUNGES"
.IX Header "MUNGES"
.IP "\fBmunge_hp_c_id()\fR" 4
.IX Item "munge_hp_c_id()"
Munge for c_id which handles \s-1CDP\s0 and \s-1LLDP.\s0
.SH "SET METHODS"
.IX Header "SET METHODS"
These are methods that provide \s-1SNMP\s0 set functionality for overridden methods
or provide a simpler interface to complex set operations.  See
\&\*(L"\s-1SETTING DATA VIA SNMP\*(R"\s0 in SNMP::Info for general information on set
operations.
.IP "\fBset_i_vlan()\fR" 4
.IX Item "set_i_vlan()"
.PD 0
.IP "\fBset_i_vlan_tagged()\fR" 4
.IX Item "set_i_vlan_tagged()"
