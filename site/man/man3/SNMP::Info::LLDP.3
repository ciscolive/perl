.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::LLDP 3"
.TH SNMP::Info::LLDP 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::LLDP \- SNMP Interface to the Link Layer Discovery Protocol (LLDP)
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Miller
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& my $lldp = new SNMP::Info (
\&                             AutoSpecify => 1,
\&                             Debug       => 1,
\&                             DestHost    => \*(Aqrouter\*(Aq,
\&                             Community   => \*(Aqpublic\*(Aq,
\&                             Version     => 2
\&                           );
\&
\& my $class = $lldp\->class();
\& print " Using device sub class : $class\en";
\&
\& $haslldp   = $lldp\->hasLLDP() ? \*(Aqyes\*(Aq : \*(Aqno\*(Aq;
\&
\& # Print out a map of device ports with LLDP neighbors:
\& my $interfaces    = $lldp\->interfaces();
\& my $lldp_if       = $lldp\->lldp_if();
\& my $lldp_ip       = $lldp\->lldp_ip();
\& my $lldp_port     = $lldp\->lldp_port();
\&
\& foreach my $lldp_key (keys %$lldp_ip){
\&    my $iid           = $lldp_if\->{$lldp_key};
\&    my $port          = $interfaces\->{$iid};
\&    my $neighbor      = $lldp_ip\->{$lldp_key};
\&    my $neighbor_port = $lldp_port\->{$lldp_key};
\&    print "Port : $port connected to $neighbor / $neighbor_port\en";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SNMP::Info::LLDP is a subclass of SNMP::Info that provides an object oriented
interface to \s-1LLDP\s0 information through \s-1SNMP.\s0
.PP
\&\s-1LLDP\s0 is a Layer 2 protocol that allows a network device to advertise its
identity and capabilities on the local network providing topology information.
The protocol is defined in the \s-1IEEE\s0 standard 802.1AB.
.PP
Create or use a device subclass that inherits this class.  Do not use
directly.
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
None.
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fILLDP-MIB\fR" 4
.IX Item "LLDP-MIB"
.PD 0
.IP "\fILLDP-EXT-MED-MIB\fR" 4
.IX Item "LLDP-EXT-MED-MIB"
.IP "\fI\s-1LLDP\-EXT\-DOT1\-MIB\s0\fR" 4
.IX Item "LLDP-EXT-DOT1-MIB"
.IP "\fI\s-1LLDP\-EXT\-DOT3\-MIB\s0\fR" 4
.IX Item "LLDP-EXT-DOT3-MIB"
.PD
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar values from \s-1SNMP\s0
.ie n .IP "$lldp\->\fBhasLLDP()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBhasLLDP()\fR" 4
.IX Item "$lldp->hasLLDP()"
Is \s-1LLDP\s0 is active in this device?
.Sp
Note:  \s-1LLDP\s0 may be active, but nothing in \f(CW\*(C`lldpRemoteSystemsData\*(C'\fR Tables so
the device would not return any useful topology information.
.ie n .IP "$lldp\->\fBlldp_sysname()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_sysname()\fR" 4
.IX Item "$lldp->lldp_sysname()"
The string value used to identify the system name of the local system.  If the
local agent supports \s-1IETF RFC 3418,\s0 \f(CW\*(C`lldpLocSysName\*(C'\fR object should have the
same value of \f(CW\*(C`sysName\*(C'\fR object.
.Sp
Nulls are removed before the value is returned.
.Sp
(\f(CW\*(C`lldpLocSysName\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_sysdesc()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_sysdesc()\fR" 4
.IX Item "$lldp->lldp_sysdesc()"
The string value used to identify the system description of the local system.
If the local agent supports \s-1IETF RFC 3418,\s0 \f(CW\*(C`lldpLocSysDesc\*(C'\fR object should
have the same value of \f(CW\*(C`sysDesc\*(C'\fR object.
.Sp
Nulls are removed before the value is returned.
.Sp
(\f(CW\*(C`lldpLocSysDesc\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_sys_cap()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_sys_cap()\fR" 4
.IX Item "$lldp->lldp_sys_cap()"
Returns which system capabilities are enabled on the local system.  Results
are munged into an ascii binary string, \s-1LSB.\s0  Each digit represents a bit
from the table below:
.RS 4
.IP "Bit '\fBother\fR\|(0)' indicates that the system has capabilities other than those listed below." 4
.IX Item "Bit 'other' indicates that the system has capabilities other than those listed below."
.PD 0
.IP "Bit '\fBrepeater\fR\|(1)' indicates that the system has repeater capability." 4
.IX Item "Bit 'repeater' indicates that the system has repeater capability."
.IP "Bit '\fBbridge\fR\|(2)' indicates that the system has bridge capability." 4
.IX Item "Bit 'bridge' indicates that the system has bridge capability."
.IP "Bit '\fBwlanAccessPoint\fR\|(3)' indicates that the system has \s-1WLAN\s0 access point capability." 4
.IX Item "Bit 'wlanAccessPoint' indicates that the system has WLAN access point capability."
.IP "Bit '\fBrouter\fR\|(4)' indicates that the system has router capability." 4
.IX Item "Bit 'router' indicates that the system has router capability."
.IP "Bit '\fBtelephone\fR\|(5)' indicates that the system has telephone capability." 4
.IX Item "Bit 'telephone' indicates that the system has telephone capability."
.IP "Bit '\fBdocsisCableDevice\fR\|(6)' indicates that the system has \s-1DOCSIS\s0 Cable Device capability (\s-1IETF RFC 2669 & 2670\s0)." 4
.IX Item "Bit 'docsisCableDevice' indicates that the system has DOCSIS Cable Device capability (IETF RFC 2669 & 2670)."
.IP "Bit '\fBstationOnly\fR\|(7)' indicates that the system has only station capability and nothing else.""" 4
.IX Item "Bit 'stationOnly' indicates that the system has only station capability and nothing else."""
.RE
.RS 4
.PD
.Sp
(\f(CW\*(C`lldpLocSysCapEnabled\*(C'\fR)
.RE
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.ie n .IP "$lldp\->\fBlldp_id()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_id()\fR" 4
.IX Item "$lldp->lldp_id()"
Returns the string value used to identify the chassis component associated
with the remote system.
.Sp
(\f(CW\*(C`lldpRemChassisId\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_if()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_if()\fR" 4
.IX Item "$lldp->lldp_if()"
Returns the mapping to the \s-1SNMP\s0 Interface Table. Tries to cross reference
(\f(CW\*(C`lldpLocPortDesc\*(C'\fR) with (\f(CW\*(C`ifDescr\*(C'\fR) and (\f(CW\*(C`ifAlias\*(C'\fR) to get (\f(CW\*(C`ifIndex\*(C'\fR),
if unable defaults to (\f(CW\*(C`lldpRemLocalPortNum\*(C'\fR).
.ie n .IP "$lldp\->\fBlldp_ip()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_ip()\fR" 4
.IX Item "$lldp->lldp_ip()"
Returns remote IPv4 address.  Returns for all other address types, use
lldp_addr if you want any return address type.
.ie n .IP "$lldp\->\fBlldp_ipv6()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_ipv6()\fR" 4
.IX Item "$lldp->lldp_ipv6()"
Returns remote IPv6 address, if known.  Returns for all other address types,
use lldp_addr if you don't care about return address type.
.ie n .IP "$lldp\->\fBlldp_mac()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_mac()\fR" 4
.IX Item "$lldp->lldp_mac()"
Returns remote (management) \s-1MAC\s0 address, if known.  Returns for all other
address types, use lldp_addr if you don't care about return address type.
.ie n .IP "$lldp\->\fBlldp_addr()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_addr()\fR" 4
.IX Item "$lldp->lldp_addr()"
Returns remote address.  Type may be any \s-1IANA\s0 Address Family Number.
Currently only returns IPv4, IPv6 or \s-1MAC\s0 addresses. If the remote device
returns more than one address type, this method will give only one. Which one
is returned is decided by chance, phase of the moon and Perl hash ordering.
.Sp
Use lldp_mac, lldp_ip or lldp_ipv6 if you want a specific address type.
.ie n .IP "$lldp\->\fBlldp_port()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_port()\fR" 4
.IX Item "$lldp->lldp_port()"
Returns remote port \s-1ID\s0
.ie n .IP "$lldp\->\fBlldp_platform()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_platform()\fR" 4
.IX Item "$lldp->lldp_platform()"
Tries to return something useful from \f(CW\*(C`lldp_rem_sysdesc()\*(C'\fR or
\&\f(CW\*(C`lldp_rem_sysname()\*(C'\fR.
.ie n .IP "$lldp\->\fBlldp_cap()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_cap()\fR" 4
.IX Item "$lldp->lldp_cap()"
Returns hash of arrays with each array containing the system capabilities
supported by the remote system.  Possible elements in the array are
enumerated from \f(CW\*(C`LldpSystemCapabilitiesMap\*(C'\fR.
.ie n .IP "$lldp\->\fBlldp_media_cap()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_media_cap()\fR" 4
.IX Item "$lldp->lldp_media_cap()"
Returns hash of arrays with each array containing the media capabilities
supported by the remote system.  Possible elements in the array are
enumerated from \f(CW\*(C`LldpXMedCapabilities\*(C'\fR.
.ie n .SS "\s-1LLDP\s0 Remote Table (""lldpRemTable"")"
.el .SS "\s-1LLDP\s0 Remote Table (\f(CWlldpRemTable\fP)"
.IX Subsection "LLDP Remote Table (lldpRemTable)"
.ie n .IP "$lldp\->\fBlldp_rem_id_type()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_id_type()\fR" 4
.IX Item "$lldp->lldp_rem_id_type()"
Returns the type of encoding used to identify the chassis associated with
the remote system.
.Sp
(\f(CW\*(C`lldpRemChassisIdSubtype\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_rem_id()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_id()\fR" 4
.IX Item "$lldp->lldp_rem_id()"
Returns the string value used to identify the chassis component associated
with the remote system.
.Sp
(\f(CW\*(C`lldpRemChassisId\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_rem_pid_type()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_pid_type()\fR" 4
.IX Item "$lldp->lldp_rem_pid_type()"
Returns the type of port identifier encoding used in the associated
\&\f(CW\*(C`lldpRemPortId\*(C'\fR object.
.Sp
(\f(CW\*(C`lldpRemPortIdSubtype\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_rem_pid()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_pid()\fR" 4
.IX Item "$lldp->lldp_rem_pid()"
Returns the string value used to identify the port component associated with
the remote system.
.Sp
(\f(CW\*(C`lldpRemPortId\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_rem_desc()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_desc()\fR" 4
.IX Item "$lldp->lldp_rem_desc()"
Returns the string value used to identify the description of the given port
associated with the remote system.
.Sp
Nulls are removed before the value is returned.
.Sp
(\f(CW\*(C`lldpRemPortDesc\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_rem_sysname()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_sysname()\fR" 4
.IX Item "$lldp->lldp_rem_sysname()"
Returns the string value used to identify the system name of the remote
system.
.Sp
Nulls are removed before the value is returned.
.Sp
(\f(CW\*(C`lldpRemSysName\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_rem_sysdesc()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_sysdesc()\fR" 4
.IX Item "$lldp->lldp_rem_sysdesc()"
Returns the string value used to identify the system description of the
remote system.
.Sp
Nulls are removed before the value is returned.
.Sp
(\f(CW\*(C`lldpRemSysDesc\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_rem_hw_rev()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_hw_rev()\fR" 4
.IX Item "$lldp->lldp_rem_hw_rev()"
Returns the string value used to identify the hardware revision of the
remote system. Nulls are removed before the value is returned.
.Sp
(\f(CW\*(C`lldpXMedRemHardwareRev\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_rem_fw_rev()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_fw_rev()\fR" 4
.IX Item "$lldp->lldp_rem_fw_rev()"
Returns the string value used to identify the firmware revision of the
remote system. Nulls are removed before the value is returned.
.Sp
(\f(CW\*(C`lldpXMedRemHardwareRev\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_rem_sw_rev()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_sw_rev()\fR" 4
.IX Item "$lldp->lldp_rem_sw_rev()"
Returns the string value used to identify the software revision of the
remote system. Nulls are removed before the value is returned.
.Sp
(\f(CW\*(C`lldpXMedRemSoftwareRev\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_rem_serial()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_serial()\fR" 4
.IX Item "$lldp->lldp_rem_serial()"
Returns the string value used to identify the serial number of the
remote system. Nulls are removed before the value is returned.
.Sp
(\f(CW\*(C`lldpXMedRemSerialNum\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_rem_vendor()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_vendor()\fR" 4
.IX Item "$lldp->lldp_rem_vendor()"
Returns the string value used to identify the manufacturer of the
remote system. Nulls are removed before the value is returned.
.Sp
(\f(CW\*(C`lldpXMedRemMfgName\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_rem_asset()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_asset()\fR" 4
.IX Item "$lldp->lldp_rem_asset()"
Returns the string value used to identify the asset number of the
remote system. Nulls are removed before the value is returned.
.Sp
(\f(CW\*(C`lldpXMedRemAssetID\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_rem_model()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_model()\fR" 4
.IX Item "$lldp->lldp_rem_model()"
Returns the string value used to identify the model of the
remote system. Nulls are removed before the value is returned.
.Sp
(\f(CW\*(C`lldpXMedRemModelName\*(C'\fR)
.ie n .IP "$lldp\->\fBlldp_rem_media_cap_spt()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_media_cap_spt()\fR" 4
.IX Item "$lldp->lldp_rem_media_cap_spt()"
Returns which media capabilities are supported on the remote system. Results
are munged into an ascii binary string, \s-1LSB.\s0
.ie n .IP "$lldp\->\fBlldp_rem_media_cap()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_media_cap()\fR" 4
.IX Item "$lldp->lldp_rem_media_cap()"
Returns which media capabilities are enabled on the remote system. Results
are munged into an ascii binary string, \s-1LSB.\s0
.ie n .IP "$lldp\->\fBlldp_rem_sys_cap()\fR" 4
.el .IP "\f(CW$lldp\fR\->\fBlldp_rem_sys_cap()\fR" 4
.IX Item "$lldp->lldp_rem_sys_cap()"
Returns which system capabilities are enabled on the remote system.  Results
are munged into an ascii binary string, \s-1LSB.\s0  Each digit represents a bit
from the table below:
.RS 4
.IP "Bit '\fBother\fR\|(0)' indicates that the system has capabilities other than those listed below." 4
.IX Item "Bit 'other' indicates that the system has capabilities other than those listed below."
.PD 0
.IP "Bit '\fBrepeater\fR\|(1)' indicates that the system has repeater capability." 4
.IX Item "Bit 'repeater' indicates that the system has repeater capability."
.IP "Bit '\fBbridge\fR\|(2)' indicates that the system has bridge capability." 4
.IX Item "Bit 'bridge' indicates that the system has bridge capability."
.IP "Bit '\fBwlanAccessPoint\fR\|(3)' indicates that the system has \s-1WLAN\s0 access point capability." 4
.IX Item "Bit 'wlanAccessPoint' indicates that the system has WLAN access point capability."
.IP "Bit '\fBrouter\fR\|(4)' indicates that the system has router capability." 4
.IX Item "Bit 'router' indicates that the system has router capability."
.IP "Bit '\fBtelephone\fR\|(5)' indicates that the system has telephone capability." 4
.IX Item "Bit 'telephone' indicates that the system has telephone capability."
.IP "Bit '\fBdocsisCableDevice\fR\|(6)' indicates that the system has \s-1DOCSIS\s0 Cable Device capability (\s-1IETF RFC 2669 & 2670\s0)." 4
.IX Item "Bit 'docsisCableDevice' indicates that the system has DOCSIS Cable Device capability (IETF RFC 2669 & 2670)."
.IP "Bit '\fBstationOnly\fR\|(7)' indicates that the system has only station capability and nothing else.""" 4
.IX Item "Bit 'stationOnly' indicates that the system has only station capability and nothing else."""
.RE
.RS 4
.PD
.Sp
(\f(CW\*(C`lldpRemSysCapEnabled\*(C'\fR)
.RE
