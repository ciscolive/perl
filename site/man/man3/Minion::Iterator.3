.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Minion::Iterator 3"
.TH Minion::Iterator 3 "2020-10-24" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Minion::Iterator \- Minion iterator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Minion::Iterator;
\&
\&  my $iter = Minion::Iterator\->new(minion  => $minion, options => {states => [\*(Aqinactive\*(Aq]});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Minion::Iterator is an iterator for Minion listing methods.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Minion::Iterator implements the following attributes.
.SS "fetch"
.IX Subsection "fetch"
.Vb 2
\&  my $fetch = $iter\->fetch;
\&  $iter     = $iter\->fetch(2);
.Ve
.PP
Number of results to cache, defaults to \f(CW10\fR.
.SS "minion"
.IX Subsection "minion"
.Vb 2
\&  my $minion = $iter\->minion;
\&  $iter      = $iter\->minion(Minion\->new);
.Ve
.PP
Minion object this job belongs to.
.SS "options"
.IX Subsection "options"
.Vb 2
\&  my $options = $iter\->options;
\&  $iter       = $iter\->options({states => [\*(Aqinactive\*(Aq]});
.Ve
.PP
Options to be passed to \*(L"list_jobs\*(R" in Minion::Backend or \*(L"list_workers\*(R" in Minion::Backend.
.SH "METHODS"
.IX Header "METHODS"
Minion::Iterator inherits all methods from Mojo::Base and implements the following new ones.
.SS "next"
.IX Subsection "next"
.Vb 1
\&  my $value = $iter\->next;
.Ve
.PP
Get next value.
.SS "total"
.IX Subsection "total"
.Vb 1
\&  my $num = $iter\->total;
.Ve
.PP
Total number of results. If results are removed in the backend while iterating, this number will become an estimate
that gets updated every time new results are fetched.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Minion, <https://minion.pm>, Mojolicious::Guides, <https://mojolicious.org>.
