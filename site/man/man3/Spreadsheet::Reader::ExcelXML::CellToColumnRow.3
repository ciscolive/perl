.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::ExcelXML::CellToColumnRow 3"
.TH Spreadsheet::Reader::ExcelXML::CellToColumnRow 3 "2017-04-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::ExcelXML::CellToColumnRow \- Translate Excel cell IDs to column row
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&        #!/usr/bin/env perl
\&        package MyPackage;
\&        use Moose;
\&        with \*(AqSpreadsheet::Reader::ExcelXML::CellToColumnRow\*(Aq;
\&
\&        sub set_error{} # Required method of this role
\&        sub error{ print "Missing the column or row\en" } # Required method of this role
\&        sub counting_from_zero{ 0 } # Required method of this role
\&
\&        sub my_method{
\&                my ( $self, $cell ) = @_;
\&                my ($column, $row ) = $self\->parse_column_row( $cell );
\&                print $self\->error if( !defined $column or !defined $row );
\&                return ($column, $row );
\&        }
\&
\&        package main;
\&
\&        my $parser = MyPackage\->new;
\&        print \*(Aq(\*(Aq . join( \*(Aq, \*(Aq, $parser\->my_method( \*(AqB2\*(Aq ) ) . ")\*(Aq\en";
\&
\&        ###########################
\&        # SYNOPSIS Screen Output
\&        # 01: (2, 2)
\&        ###########################
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation is written to explain ways to use this module when writing your
own excel parser.  To use the general package for excel parsing out of the box please
review the documentation for Workbooks,
Worksheets, and
Cells
.PP
This is a Moose Role. The role provides methods to convert back
and forth betwee Excel Cell \s-1ID\s0 and ($column \f(CW$row\fR) lists.  This role also provides a layer
of abstraction so that it is possible to implement
around modifiers on these methods so
that the data provided by the user can be in the user context and the method implementation
will still be in the Excel context.  For example this package uses this abstraction to allow
the user to call or receive row column numbers in either the
count-from-zero context used by
Spreadsheet::ParseExcel or the count-from-one context used by Excel.  It is important
to note that column letters do not equal digits in a modern 26 position numeral system
since the excel implementation is effectivly zeroless.
.PP
The module counts from 1 (the excel convention) without implementation of around modifiers.
Meaning that cell \s-1ID\s0 'A1' is equal to (1, 1) and column row (3, 2) is equal to the cell \s-1ID\s0
\&'C2'.
.SS "Requires"
.IX Subsection "Requires"
These are the methods required by this role and their default provider.  All
methods are imported straight across with no re-naming.
.Sp
.RS 4
\&\*(L"set_error\*(R" in Spreadsheet::Reader::ExcelXML::Error
.Sp
\&\*(L"count_from_zero\*(R" in Spreadsheet::Reader::ExcelXML
.RE
.SS "Methods"
.IX Subsection "Methods"
Methods are object methods (not functional methods)
.PP
\fIparse_column_row( \f(CI$excel_cell_id\fI )\fR
.IX Subsection "parse_column_row( $excel_cell_id )"
.Sp
.RS 4
\&\fBDefinition:\fR This is the way to turn an alpha numeric Excel cell \s-1ID\s0 into column and row
integers.  This method uses a count from 1 methodology.  Since this method is actually just
a layer of abstraction above the real method '_parse_column_row' for the calculation you can
wrap it in an around block to modify the
output to the desired user format without affecting other parts of the package that need the
unfiltered conversion.  If you want both then use the following call when unfiltered results
are required;
.Sp
.Vb 1
\&        $self\->_parse_column_row( $excel_cell_id )
.Ve
.Sp
\&\fBAccepts:\fR \f(CW$excel_cell_id\fR
.Sp
\&\fBReturns:\fR ( \f(CW$column_number\fR, \f(CW$row_number\fR )
.RE
.PP
\fIbuild_cell_label( \f(CI$column\fI, \f(CI$row\fI, )\fR
.IX Subsection "build_cell_label( $column, $row, )"
.Sp
.RS 4
\&\fBDefinition:\fR This is the way to turn a (column, row) pair into an Excel Cell \s-1ID.\s0  The
underlying method uses a count from 1 methodology.  Since this method is actually just
a layer of abstraction above the real method for the calculation you can wrap it in an
around block to modify the input from
the implemented user format to the count from one methodology without affecting other parts
of the package that need the unfiltered conversion.  If you want both then use the following
call when unfiltered results are required;
.Sp
.Vb 1
\&        $self\->_build_cell_label( $column, $row )
.Ve
.Sp
\&\fBAccepts:\fR ($column, \f(CW$row\fR) \fIin that order\fR
.Sp
\&\fBReturns:\fR ( \f(CW$excel_cell_id\fR ) \fIqr/[A\-Z]{1,3}\ed+/\fR
.RE
.PP
\fIget_excel_position( \f(CI$integer\fI )\fR
.IX Subsection "get_excel_position( $integer )"
.Sp
.RS 4
\&\fBDefinition:\fR This will process a position integer and check the method
counting_from_zero to
see whether to pass the value through straight accross or decrement it by 1.
If the end user is using count from zero 'on' then the value is increased
to arrive in the excel paradigm. (always counts from 1)
.Sp
\&\fBAccepts:\fR an integer
.Sp
\&\fBReturns:\fR an integer
.RE
.PP
\fIget_used_position( \f(CI$integer\fI )\fR
.IX Subsection "get_used_position( $integer )"
.Sp
.RS 4
\&\fBDefinition:\fR This will process a position integer and check the method
counting_from_zero to
see whether to pass the value through straight accross or decrease it by 1.
If the end user is using count from zero 'on' then the value is decreased
to arrived in the end users paradigm.
.Sp
\&\fBAccepts:\fR an integer
.Sp
\&\fBReturns:\fR an integer
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::Reader::ExcelXML/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing yet
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.RS 4
Jed Lund
.Sp
jandrew@cpan.org
.RE
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Spreadsheet::Reader::ExcelXML \- the package
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::Read \- generic Spreadsheet reader
.Sp
Spreadsheet::ParseExcel \- Excel binary version 2003 and earlier (.xls files)
.Sp
Spreadsheet::XLSX \- Excel version 2007 and later
.Sp
Spreadsheet::ParseXLSX \- Excel version 2007 and later
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
