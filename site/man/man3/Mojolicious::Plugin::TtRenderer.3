.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::TtRenderer 3"
.TH Mojolicious::Plugin::TtRenderer 3 "2020-09-02" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::TtRenderer \- Template Renderer Plugin for Mojolicious
.SH "VERSION"
.IX Header "VERSION"
version 1.61
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Mojolicious::Lite:
.PP
.Vb 1
\& plugin \*(Aqtt_renderer\*(Aq;
.Ve
.PP
Mojolicious
.PP
.Vb 1
\& $self\->plugin(\*(Aqtt_renderer\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This plugin is a simple Template Toolkit renderer for Mojolicious.
Its defaults are usually reasonable, although for finer grain detail in
configuration you may want to use
Mojolicious::Plugin::TtRenderer::Engine directly.
.SH "OPTIONS"
.IX Header "OPTIONS"
These are the options that can be passed in as arguments to this plugin.
.SS "template_options"
.IX Subsection "template_options"
Configuration hash passed into Template's constructor, see
Template Toolkit's configuration summary
for details.  Here is an example using the Mojolicious::Lite form:
.PP
.Vb 7
\& plugin \*(Aqtt_renderer\*(Aq => {
\&   template_options => {
\&     PRE_CHOMP => 1,
\&     POST_CHOMP => 1,
\&     TRIM => 1,
\&   },
\& };
.Ve
.PP
Here is the same example using the full Mojolicious app form:
.PP
.Vb 1
\& package MyApp;
\& 
\& use Mojo::Base qw( Mojolicious );
\& 
\& sub startup {
\&   my($self) = @_;
\& 
\&   $self\->plugin(\*(Aqtt_renderer\*(Aq => {
\&     template_options => {
\&       PRE_CHOMP => 1,
\&       POST_CHOMP => 1,
\&       TRIM => 1,
\&     },
\&   }
\& 
\&   ...
\& }
.Ve
.PP
These options will be used if you do not override them:
.IP "\s-1INCLUDE_PATH\s0" 4
.IX Item "INCLUDE_PATH"
Generated based on your application's renderer's configuration.  It
will include all renderer paths, in addition to search files located
in the \f(CW\*(C`_\|_DATA_\|_\*(C'\fR section by the usual logic used by Mojolicious.
.IP "\s-1COMPILE_EXT\s0" 4
.IX Item "COMPILE_EXT"
\&\f(CW\*(C`.ttc\*(C'\fR
.IP "\s-1UNICODE\s0" 4
.IX Item "UNICODE"
\&\f(CW1\fR (true)
.IP "\s-1ENCODING\s0" 4
.IX Item "ENCODING"
\&\f(CW\*(C`utf\-87\*(C'\fR
.IP "\s-1CACHE_SIZE\s0" 4
.IX Item "CACHE_SIZE"
\&\f(CW128\fR
.IP "\s-1RELATIVE\s0" 4
.IX Item "RELATIVE"
\&\f(CW1\fR (true)
.SS "cache_dir"
.IX Subsection "cache_dir"
Specifies the directory in which compiled template files are
written.  This:
.PP
.Vb 1
\& plugin \*(Aqtt_renderer\*(Aq, { cache_dir => \*(Aqsome/path\*(Aq };
.Ve
.PP
is equivalent to
.PP
.Vb 1
\& plugin \*(Aqtt_renderer\*(Aq, { template_options { COMPILE_DIR => \*(Aqsome/path\*(Aq } };
.Ve
.PP
except in the first example relative paths are relative to the Mojolicious
app's home directory (\f(CW\*(C`$app\->home\*(C'\fR).
.SH "STASH"
.IX Header "STASH"
.SS "h"
.IX Subsection "h"
Helpers are available via the \f(CW\*(C`h\*(C'\fR entry in the stash.
.PP
.Vb 1
\& <a href="[% h.url_for(\*(Aqindex\*(Aq) %]">go back to index</a>
.Ve
.SS "c"
.IX Subsection "c"
The current controller instance can be accessed as \f(CW\*(C`c\*(C'\fR.
.PP
.Vb 1
\& I see you are requesting a document from [% c.req.headers.host %].
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Mojolicious::Lite example:
.PP
.Vb 1
\& use Mojolicious::Lite;
\& 
\& plugin \*(Aqtt_renderer\*(Aq;
\& 
\& get \*(Aq/\*(Aq => sub {
\&   my $self = shift;
\&   $self\->render(\*(Aqindex\*(Aq);
\& };
\& 
\& app\->start;
\& 
\& _\|_DATA_\|_
\& 
\& @@ index.html.tt
\& [%
\&    WRAPPER \*(Aqlayouts/default.html.tt\*(Aq
\&    title = \*(AqWelcome\*(Aq
\& %]
\& <p>Welcome to the Mojolicious real\-time web framework!</p>
\& <p>Welcome to the TtRenderer plugin!</p>
\& [% END %]
\& 
\& @@ layouts/default.html.tt
\& <!DOCTYPE html>
\& <html>
\&   <head><title>[% title %]</title></head>
\&   <body>[% content %]</body>
\& </html>
.Ve
.PP
Mojolicious example:
.PP
.Vb 2
\& package MyApp;
\& use Mojo::Base \*(AqMojolicious\*(Aq;
\& 
\& sub startup {
\&   my $self = shift;
\&   $self\->plugin(\*(Aqtt_renderer\*(Aq);
\&   my $r = $self\->routes;
\&   $r\->get(\*(Aq/\*(Aq)\->to(\*(Aqexample#welcome\*(Aq);
\& }
\& 
\& 1;
\&
\& package MyApp::Example;
\& use Mojo::Base \*(AqMojolicious::Controller\*(Aq;
\& 
\& # This action will render a template
\& sub welcome {
\&   my $self = shift;
\& 
\&   # Render template "example/welcome.html.tt" with message
\&   $self\->render(
\&     message => \*(AqLooks like your TtRenderer is working!\*(Aq);
\& }
\& 
\& 1;
.Ve
.PP
These are also included with the \f(CW\*(C`Mojolicious::Plugin::TtRenderer\*(C'\fR
distribution, including the support files required for the full
Mojolicious app example.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious::Plugin::TtRenderer::Engine,
Mojolicious,
Mojolicious::Guides,
<http://mojolicious.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Original author: Ask Bjørn Hansen
.PP
Current maintainer: Graham Ollis <plicease@cpan.org>
.PP
Contributors:
.PP
vti
.PP
Marcus Ramberg
.PP
Matthias Bethke
.PP
Htbaa
.PP
Magnus Holm
.PP
Maxim Vuets
.PP
Rafael Kitover
.PP
giftnuss
.PP
Cosimo Streppone
.PP
Fayland Lam
.PP
Jason Crowther
.PP
spleenjack
.PP
Árpád Szász
.PP
Сергей Романов
.PP
uwisser
.PP
Dinis Lage
.PP
jay mortensen (\s-1GMORTEN\s0)
.PP
Matthew Lawrence (\s-1MATTLAW\s0)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2009\-2018 by Ask Bjørn Hansen.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
