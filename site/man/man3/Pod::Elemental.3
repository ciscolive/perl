.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Pod::Elemental 3"
.TH Pod::Elemental 3 "2020-01-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Elemental \- work with nestable Pod elements
.SH "VERSION"
.IX Header "VERSION"
version 0.103005
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Pod::Elemental;
\&  use Pod::Elemental::Transformer::Pod5;
\&
\&  my $document = Pod::Elemental\->read_file(\*(Aqlib/Pod/Elemental.pm\*(Aq);
\&
\&  Pod::Elemental::Transformer::Pod5\->new\->transform_node($document);
\&
\&  print $document\->as_debug_string, "\en"; # quick overview of doc structure
\&
\&  print $document\->as_pod_string, "\en";   # reproduce the document in Pod
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Pod::Elemental is a system for treating a Pod (plain old
documentation) documents as trees of elements.  This model may be
familiar from many other document systems, especially the \s-1HTML DOM.\s0
Pod::Elemental's document object model is much less sophisticated than the \s-1HTML
DOM,\s0 but still makes a lot of document transformations easy.
.PP
In general, you'll want to read in a Pod document and then perform a number of
prepackaged transformations on it.  The most common of these will be the Pod5
transformation, which assumes that the basic
meaning of Pod commands described in the Perl 5 documentation hold: \f(CW\*(C`=begin\*(C'\fR,
\&\f(CW\*(C`=end\*(C'\fR, and \f(CW\*(C`=for\*(C'\fR commands mark regions of the document, leading whitespace
marks a verbatim paragraph, and so on.  The Pod5 transformer also eliminates
the need to track elements representing vertical whitespace.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "event_reader"
.IX Subsection "event_reader"
The event reader (by default a new instance of
Pod::Eventual::Simple is used to convert input into an
event stream.  In general, it should provide \f(CW\*(C`read_*\*(C'\fR methods that behave like
Pod::Eventual::Simple.
.SS "objectifier"
.IX Subsection "objectifier"
The objectifier (by default a new Pod::Elemental::Objectifier) must provide an
\&\f(CW\*(C`objectify_events\*(C'\fR method that converts Pod events into
Pod::Elemental::Element objects.
.SS "document_class"
.IX Subsection "document_class"
This is the class for documents created by reading pod.
.SH "METHODS"
.IX Header "METHODS"
.SS "read_handle"
.IX Subsection "read_handle"
.SS "read_file"
.IX Subsection "read_file"
.SS "read_string"
.IX Subsection "read_string"
These methods read the given input and return a Pod::Elemental::Document.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Christian Walde <walde.christian@googlemail.com>
.IP "\(bu" 4
Justin Cook <jcook@cray.com>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Philippe Bruhat (BooK) <book@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
