.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mnet::Batch 3"
.TH Mnet::Batch 3 "2020-03-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mnet::Batch \- Concurrently process a list of command line options
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # usually combined with Mnet::Opts::Cli
\&    use Mnet::Batch;
\&    use Mnet::Opts::Cli;
\&
\&    # define \-\-sample cli option
\&    Mnet::Opts::Cli::define({
\&        getopt   => "sample=s",
\&        help_tip => "set to input string",
\&    });
\&
\&    # usually cli options are read before calling Mnet::Batch::fork()
\&    my $cli = Mnet::Opts::Cli\->new;
\&
\&    # read command line options, fork children if in \-\-batch mode
\&    #   exit \-\-batch parent process when finished forking children
\&    $cli = Mnet::Batch::fork($cli);
\&    exit if not $cli;
\&
\&    # code below runs for batch child workers and non\-batch executions
\&    print "sample = $cli\->{sample}\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mnet::Batch can be used in a script to concurrently process a \-\-batch list
of command option lines.
.PP
For example, you might run a script sequentially over and over, like this:
.PP
.Vb 3
\& script.pl \-\-sample 1
\& script.pl \-\-sample 2a
\& script.pl \-\-sample ...
.Ve
.PP
Or use Mnet::Batch which allows you to process a list of option command
lines after loading the script once, like this:
.PP
.Vb 5
\& echo \*(Aq
\&     \-\-sample 1
\&     \-\-sample 2a
\&     \-\-sample ...
\& \*(Aq | script.pl \-\-batch /dev/stdin
.Ve
.PP
In the above example the script accepts a \-\-batch list of command option lines
and forks a child worker process for each line in the list. The \-\-batch list
option can be set to a file, a named pipe, or /dev/stdin as above.
.PP
By default \-\-batch list lines are processed one at a time unless linux
/proc/stat is detected, in which case batch command lines are processed with
as many concurrent processes as possible without overutilizing the cpu. The
\&\-\-batch\-idle and \-\-batch\-min options can be used to adjust this.
.PP
Note that a script using this module will throw an error when it ends if
the Mnet::Opts::Cli new method was used to parse command line arguments
and the \-\-batch option is set and the Mnet::Batch::fork function was never
called.
.PP
Refer also to the documentation for the Mnet::Batch::fork function in this
module for more information.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Mnet::Batch implements the functions listed below.
.SS "Mnet::Batch::fork"
.IX Subsection "Mnet::Batch::fork"
.Vb 2
\&    \e%child_opts = Mnet::Batch::fork(\e%opts)
\&    or (\e%child_opts, @child_extras) = Mnet::Batch::fork(\e%opts)
.Ve
.PP
The Mnet::Batch::fork function requires an input opts hash ref containing at
least a 'batch' key. Input can be an Mnet::Opts::Cli object.
.PP
The returned child opts hash ref will contain settings from the input opts hash
overlaid with options from the current batch command options line. Extra args
from batch command option lines are also returned if called in list context.
.PP
The returned child opts hash ref will be undefined for the batch parent process
when the parent process is finished.
.PP
.Vb 4
\&    my ($cli, @extras) = Mnet::Opts::Cli\->new;
\&    ($cli, @extras) = Mnet::Batch::fork($cli);
\&    exit if not defined $cli;
\&    # child processing continues...
.Ve
.PP
Also note that this function can be called by scripts that are not using the
Mnet::Opts::Cli module to parse command line options. In this case the
returned child_opts value will be a scalar containing the input batch line,
as in the following example:
.PP
.Vb 6
\&    ( echo "line = 1"; echo "line = 2" ) | perl \-e \*(Aq
\&        use Mnet::Batch
\&        my $line = Mnet::Batch::fork({ batch => "/dev/stdin" });
\&        exit if not defined $line;
\&        die "child should have line set" if $line !~ /^line =/
\&    \*(Aq
.Ve
.PP
Refer also to the \s-1SYNOPSIS\s0 section of this perldoc for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mnet
.PP
Mnet::Opts::Cli
.PP
Mnet::Opts::Set
