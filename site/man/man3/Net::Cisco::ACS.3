.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Cisco::ACS 3"
.TH Net::Cisco::ACS 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Cisco::ACS \- Access Cisco ACS functionality through REST API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&        use Net::Cisco::ACS;
\&        my $acs = Net::Cisco::ACS\->new(hostname => \*(Aq10.0.0.1\*(Aq, username => \*(Aqacsadmin\*(Aq, password => \*(AqtestPassword\*(Aq);
\&        # Options:
\&        # hostname \- IP or hostname of Cisco ACS 5.x server
\&        # username \- Username of Administrator user
\&        # password \- Password of user
\&        # ssl \- SSL enabled (1 \- default) or disabled (0)
\&                
\&        my %users = $acs\->users;
\&        # Retrieve all users from ACS
\&        # Returns hash with username / Net::Cisco::ACS::User pairs
\&        
\&        print $acs\->users\->{"acsadmin"}\->toXML;
\&        # Dump in XML format (used by ACS for API calls)
\&        
\&        my $user = $acs\->users("name","acsadmin");
\&        # Faster call to request specific user information by name
\&
\&        my $user = $acs\->users("id","150");
\&        # Faster call to request specific user information by ID (assigned by ACS, present in Net::Cisco::ACS::User)
\&
\&        my %identitygroups = $acs\->identitygroups;
\&        # Retrieve all identitygroups from ACS
\&        # Returns hash with name / Net::Cisco::ACS::IdentityGroup pairs
\&        
\&        print $acs\->identitygroups\->{"All Groups"}\->toXML;
\&        # Dump in XML format (used by ACS for API calls)
\&        
\&        my $identitygroup = $acs\->identitygroups("name","All Groups");
\&        # Faster call to request specific identity group information by name
\&
\&        my $identitygroup = $acs\->identitygroups("id","150");
\&        # Faster call to request specific identity group information by ID (assigned by ACS, present in Net::Cisco::ACS::IdentityGroup)
\&        
\&        my %devices = $acs\->devices;
\&        # Retrieve all devices from ACS
\&        # Returns hash with device name / Net::Cisco::ACS::Device pairs
\&
\&        print $acs\->devices\->{"MAIN_Router"}\->toXML;
\&        # Dump in XML format (used by ACS for API calls)
\&        
\&        my $device = $acs\->devices("name","MAIN_Router");
\&        # Faster call to request specific device information by name
\&
\&        my $device = $acs\->devices("id","250");
\&        # Faster call to request specific device information by ID (assigned by ACS, present in Net::Cisco::ACS::Device)
\&
\&        my %devicegroups = $acs\->devicegroups;
\&        # Retrieve all device groups from ACS
\&        # Returns hash with device name / Net::Cisco::ACS::DeviceGroup pairs
\&
\&        print $acs\->devicegroups\->{"All Locations"}\->toXML;
\&        # Dump in XML format (used by ACS for API calls)
\&        
\&        my $device = $acs\->devicegroups("name","All Locations");
\&        # Faster call to request specific device group information by name
\&
\&        my $devicegroup = $acs\->devicegroups("id","250");
\&        # Faster call to request specific device group information by ID (assigned by ACS, present in Net::Cisco::ACS::DeviceGroup)
\&
\&        my %hosts = $acs\->hosts;
\&        # Retrieve all hosts from ACS
\&        # Returns hash with host name / Net::Cisco::ACS::Host pairs
\&
\&        print $acs\->hosts\->{"1234"}\->toXML;
\&        # Dump in XML format (used by ACS for API calls)
\&        
\&        my $host = $acs\->hosts("name","1234");
\&        # Faster call to request specific host information by name
\&
\&        my $host = $acs\->hosts("id","250");
\&        # Faster call to request specific hosts information by ID (assigned by ACS, present in Net::Cisco::ACS::Host)
\&        
\&        $user\->id(0); # Required for new user!
\&        my $id = $acs\->create($user);
\&        # Create new user based on Net::Cisco::ACS::User instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        my $id = $acs\->create(@users); # Still requires nullified ID!
\&        # Create new users based on Net::Cisco::ACS::User instances in arguments
\&        # Return value is not guaranteed in this case!
\&        # print "Record ID is $id" if $id;
\&        # print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure    
\&    
\&        $identitygroup\->id(0); # Required for new record!
\&        my $id = $acs\->create($identitygroup);
\&        # Create new identity group based on Net::Cisco::ACS::IdentityGroup instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        my $id = $acs\->create(@identitygroups); # Still requires nullified ID!
\&        # Create new identitygroups based on Net::Cisco::ACS::IdentityGroup instances in arguments
\&        # Return value is not guaranteed in this case!
\&        # print "Record ID is $id" if $id;
\&        # print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure    
\&                
\&        $device\->id(0); # Required for new device!
\&        my $id = $acs\->create($device);
\&        # Create new device based on Net::Cisco::ACS::Device instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        my $id = $acs\->create(@devices); # Still requires nullified ID!
\&        # Create new devices based on Net::Cisco::ACS::Device instances in arguments
\&        # Return value is not guaranteed in this case!
\&        # print "Record ID is $id" if $id;
\&        # print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure    
\&
\&        $devicegroup\->id(0); # Required for new device group!
\&        my $id = $acs\->create($devicegroup);
\&        # Create new device group based on Net::Cisco::ACS::DeviceGroup instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        my $id = $acs\->create(@devicegroups); # Still requires nullified ID!
\&        # Create new devicegroups based on Net::Cisco::ACS::DeviceGroup instances in arguments
\&        # Return value is not guaranteed in this case!
\&        # print "Record ID is $id" if $id;
\&        # print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure        
\&    
\&        $host\->id(0); # Required for new host!
\&        my $id = $acs\->create($host);
\&        # Create new host based on Net::Cisco::ACS::Host instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        my $id = $acs\->create(@hosts); # Still requires nullified ID!
\&        # Create new hosts based on Net::Cisco::ACS::Host instances in arguments
\&        # Return value is not guaranteed in this case!
\&        # print "Record ID is $id" if $id;
\&        # print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure    
\&        
\&        my $id = $acs\->update($user);
\&        # Update existing user based on Net::Cisco::ACS::User instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        my $id = $acs\->update(@users);
\&        # Update existing users based on Net::Cisco::ACS::User instances in arguments
\&        # Return value is not guaranteed in this case!
\&        # print "Record ID is $id" if $id;
\&        # print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure    
\&    
\&        my $id = $acs\->update($identitygroup);
\&        # Update existing identitygroup based on Net::Cisco::ACS::IdentityGroup instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        my $id = $acs\->update(@identitygroups);
\&        # Update existing identitygroups based on Net::Cisco::ACS::IdentityGroups instances in arguments
\&        # Return value is not guaranteed in this case!
\&        # print "Record ID is $id" if $id;
\&        # print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure    
\&        
\&        my $id = $acs\->update($device);
\&        # Update existing device based on Net::Cisco::ACS::Device instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        my $id = $acs\->update(@devices);
\&        # Update existing devices based on Net::Cisco::ACS::Device instances in arguments
\&        # Return value is not guaranteed in this case!
\&        # print "Record ID is $id" if $id;
\&        # print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure    
\&        
\&        my $id = $acs\->update($devicegroup);
\&        # Update existing device based on Net::Cisco::ACS::DeviceGroup instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&   
\&        my $id = $acs\->update(@devicegroups);
\&        # Update existing devicegroups based on Net::Cisco::ACS::DeviceGroup instances in arguments
\&        # Return value is not guaranteed in this case!
\&        # print "Record ID is $id" if $id;
\&        # print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure    
\&        
\&        my $id = $acs\->update($host);
\&        # Update existing device based on Net::Cisco::ACS::Host instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        my $id = $acs\->update(@hosts);
\&        # Update existing hosts based on Net::Cisco::ACS::Host instances in arguments
\&        # Return value is not guaranteed in this case!
\&        # print "Record ID is $id" if $id;
\&        # print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure    
\&        
\&        $acs\->delete($user);
\&        # Delete existing user based on Net::Cisco::ACS::User instance
\&
\&        $acs\->delete($identitygroup);
\&        # Delete existing identity group based on Net::Cisco::ACS::IdentityGroup instance
\&        
\&        $acs\->delete($device);
\&        # Delete existing device based on Net::Cisco::ACS::Device instance
\&
\&        $acs\->delete($devicegroup);
\&        # Delete existing device based on Net::Cisco::ACS::DeviceGroup instance
\&
\&        $acs\->delete($host);
\&        # Delete existing host based on Net::Cisco::ACS::Host instance
\&        
\&        $acs\->version
\&        # Return version information for the connected server *HASHREF*
\&
\&        $acs\->serviceLocation
\&        # Return ACS instance that serves as primary and the ACS instance that provide Monitoring and Troubleshooting Viewer. *HASHREF*
\&        
\&        $acs\->errorMessage
\&        # Return all ACS message codes and message texts that are used on the REST Interface. *HASHREF*
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::Cisco::ACS is an implementation of the Cisco Secure Access Control System (\s-1ACS\s0) \s-1REST API.\s0 Cisco \s-1ACS\s0 is a application / appliance that can be used for network access policy control. In short, it allows configuration of access policies for specific users onto specific devices and applications (either using \s-1RADIUS\s0 or \s-1TACACS+\s0 authentication). Net::Cisco::ACS currently supports Device, Device Group, Host, User, Identity Group and generic information.
.SH "USAGE"
.IX Header "USAGE"
All calls are handled through an instance of the Net::Cisco::ACS class.
.PP
.Vb 2
\&        use Net::Cisco::ACS;
\&        my $acs = Net::Cisco::ACS\->new(hostname => \*(Aq10.0.0.1\*(Aq, username => \*(Aqacsadmin\*(Aq, password => \*(AqtestPassword\*(Aq);
.Ve
.IP "new" 3
.IX Item "new"
Class constructor. Returns object of Net::Cisco::ACS on succes. Required fields are:
.RS 3
.IP "hostname" 5
.IX Item "hostname"
.PD 0
.IP "username" 5
.IX Item "username"
.IP "password" 5
.IX Item "password"
.RE
.RS 3
.PD
.Sp
Optional fields are
.IP "ssl" 5
.IX Item "ssl"
.PD 0
.IP "ssl_options" 5
.IX Item "ssl_options"
.RE
.RS 3
.RE
.IP "hostname" 3
.IX Item "hostname"
.PD
\&\s-1IP\s0 or hostname of Cisco \s-1ACS 5\s0.x server. This is a required value in the constructor but can be redefined afterwards.
.IP "username" 3
.IX Item "username"
Username of Administrator user. This is a required value in the constructor but can be redefined afterwards.
.IP "password" 3
.IX Item "password"
Password of user. This is a required value in the constructor but can be redefined afterwards.
.IP "ssl" 3
.IX Item "ssl"
\&\s-1SSL\s0 enabled (1 \- default) or disabled (0).
.IP "ssl_options" 3
.IX Item "ssl_options"
Value is passed directly to LWP::UserAGent as ssl_opt. Default value (hash-ref) is
.Sp
.Vb 1
\&        { \*(AqSSL_verify_mode\*(Aq => SSL_VERIFY_NONE, \*(Aqverify_hostname\*(Aq => \*(Aq0\*(Aq }
.Ve
.PP
From the class instance, call the different methods for retrieving values.
.IP "users" 3
.IX Item "users"
Returns hash or single instance, depending on context.
.Sp
.Vb 3
\&        my %users = $acs\->users(); # Slow
\&        my $user = $acs\->users()\->{"acsadmin"};
\&        print $user\->name;
.Ve
.Sp
The returned hash contains instances of Net::Cisco::ACS::User, using name (typically the username) as the hash key. Using a call to \f(CW\*(C`users\*(C'\fR with no arguments will retrieve all users and can take quite a few seconds (depending on the size of your database). When you know the username or \s-1ID,\s0 use the users call with arguments as listed below.
.Sp
.Vb 4
\&        my $user = $acs\->users("name","acsadmin"); # Faster
\&        # or
\&        my $user = $acs\->users("id","123"); # Faster
\&        print $user\->name;
\&
\&        The ID is typically generated by Cisco ACS when the entry is created. It can be retrieved by calling the C<id> method on the object.
\&
\&        print $user\->id;
.Ve
.IP "identitygroups" 3
.IX Item "identitygroups"
Returns hash or single instance, depending on context.
.Sp
.Vb 3
\&        my %identitygroups = $acs\->identitygroups(); # Slow
\&        my $identitygroup = $acs\->identitygroups()\->{"All Groups"};
\&        print $identitgroup\->name;
.Ve
.Sp
The returned hash contains instances of Net::Cisco::ACS::IdentityGroup, using name (typically the username) as the hash key. Using a call to \f(CW\*(C`identitygroup\*(C'\fR with no arguments will retrieve all identitygroups and can take quite a few seconds (depending on the size of your database). When you know the group name or \s-1ID,\s0 use the identitygroups call with arguments as listed below.
.Sp
.Vb 4
\&        my $identitygroup = $acs\->identitygroups("name","All Groups"); # Faster
\&        # or
\&        my $identitygroup = $acs\->identitygroups("id","123"); # Faster
\&        print $identitygroup\->name;
\&
\&        The ID is typically generated by Cisco ACS when the entry is created. It can be retrieved by calling the C<id> method on the object.
\&
\&        print $identitygroup\->id;
.Ve
.IP "devices" 3
.IX Item "devices"
Returns hash or single instance, depending on context.
.Sp
.Vb 3
\&        my %devices = $acs\->devices(); # Slow
\&        my $device = $acs\->devices()\->{"Main_Router"};
\&        print $device\->name;
.Ve
.Sp
The returned hash contains instances of Net::Cisco::ACS::Device, using name (typically the sysname) as the hash key. Using a call to \f(CW\*(C`device\*(C'\fR with no arguments will retrieve all devices and can take quite a few seconds (depending on the size of your database). When you know the hostname or \s-1ID,\s0 use the devices call with arguments as listed below.
.Sp
.Vb 4
\&        my $device = $acs\->device("name","Main_Router"); # Faster
\&        # or
\&        my $device = $acs\->device("id","123"); # Faster
\&        print $device\->name;
\&
\&        The ID is typically generated by Cisco ACS when the entry is created. It can be retrieved by calling the C<id> method on the object.
\&
\&        print $device\->id;
.Ve
.IP "devicegroups" 3
.IX Item "devicegroups"
Returns hash or single instance, depending on context.
.Sp
.Vb 3
\&        my %devicegroups = $acs\->devicegroups(); # Slow
\&        my $devicegroup = $acs\->devicegroups()\->{"All Locations:Main Site"};
\&        print $devicegroup\->name;
.Ve
.Sp
The returned hash contains instances of Net::Cisco::ACS::DeviceGroup, using name (typically the device group name) as the hash key. Using a call to \f(CW\*(C`devicegroups\*(C'\fR with no arguments will retrieve all device groups and can take quite a few seconds (depending on the size of your database). When you know the device group or \s-1ID,\s0 use the devicegroups call with arguments as listed below.
.Sp
.Vb 4
\&        my $devicegroup = $acs\->devicegroups("name","All Locations::Main Site"); # Faster
\&        # or
\&        my $devicegroup = $acs\->devicegroups("id","123"); # Faster
\&        print $devicegroup\->name;
.Ve
.Sp
The \s-1ID\s0 is typically generated by Cisco \s-1ACS\s0 when the entry is created. It can be retrieved by calling the \f(CW\*(C`id\*(C'\fR method on the object.
.Sp
.Vb 1
\&        print $devicegroup\->id;
.Ve
.IP "hosts" 3
.IX Item "hosts"
Returns hash or single instance, depending on context.
.Sp
.Vb 3
\&        my %hosts = $acs\->hosts(); # Slow
\&        my $host = $acs\->hosts()\->{"12345"};
\&        print $host\->name;
.Ve
.Sp
The returned hash contains instances of Net::Cisco::ACS::Host, using name as the hash key. Using a call to \f(CW\*(C`hosts\*(C'\fR with no arguments will retrieve all hosts and can take quite a few seconds (depending on the size of your database). When you know the name or \s-1ID,\s0 use the hosts call with arguments as listed below.
.Sp
.Vb 4
\&        my $host = $acs\->host("name","12345"); # Faster
\&        # or
\&        my $host = $acs\->device("id","123"); # Faster
\&        print $host\->name;
\&
\&        The ID is typically generated by Cisco ACS when the entry is created. It can be retrieved by calling the C<id> method on the object.
\&
\&        print $host\->id;
.Ve
.IP "version" 3
.IX Item "version"
This method returns version specific information about the Cisco \s-1ACS\s0 instance you're connected to. Values are returned in a hash reference.
.Sp
.Vb 3
\&        use Data::Dumper;
\&        # ... 
\&        print Dumper $acs\->version;
.Ve
.IP "servicelocation" 3
.IX Item "servicelocation"
This method returns information about the \s-1ACS\s0 instance that serves as primary and the \s-1ACS\s0 instance that provide Monitoring and Troubleshooting Viewer. Values are returned in a hash reference.
.Sp
.Vb 3
\&        use Data::Dumper;
\&        # ... 
\&        print Dumper $acs\->servicelocation;
.Ve
.IP "errormessage" 3
.IX Item "errormessage"
This method returns all \s-1ACS\s0 message codes and message texts that are used on the \s-1REST\s0 Interface. Values are returned in a hash reference. See also \f(CW$Net::Cisco::ACS::ERROR\fR.
.Sp
.Vb 3
\&        use Data::Dumper;
\&        # ... 
\&        print Dumper $acs\->errormessage;
.Ve
.IP "create" 3
.IX Item "create"
This method created a new entry in Cisco \s-1ACS,\s0 depending on the argument passed. Record type is detected automatically. For all record types, the \s-1ID\s0 value must be set to 0.
.Sp
.Vb 11
\&        my $user = $acs\->users("name","acsadmin");
\&        $user\->id(0); # Required for new user!
\&        $user\->name("altadmin"); # Required field
\&        $user\->password("TopSecret"); # Password policies will be enforced!
\&        $user\->description("Alternate Admin"); 
\&        my $id = $acs\->create($user); 
\&        # Create new user based on Net::Cisco::ACS::User instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        my $device = $acs\->devices("name","Main_Router");
\&        $device\->name("AltRouter"); # Required field
\&        $device\->description("Standby Router"); 
\&        $device\->ips([{netMask => "32", ipAddress=>"10.0.0.2"}]); # Change IP address! Overlap check is enforced!
\&        $device\->id(0); # Required for new device!
\&        my $id = $acs\->create($device);
\&        # Create new device based on Net::Cisco::ACS::Device instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
.Ve
.Sp
Multiple instances can be passed as an argument. Objects will be created in bulk (one transaction). The returned \s-1ID\s0 is not guaranteed to be the IDs of the created objects.
.Sp
.Vb 5
\&        my $user = $acs\->users("name","acsadmin");
\&        $user\->id(0); # Required for new user!
\&        $user\->name("altadmin"); # Required field
\&        $user\->password("TopSecret"); # Password policies will be enforced!
\&        $user\->description("Alternate Admin"); 
\&
\&        my $user2 = $acs\->users("name","acsadmin");
\&        $user2\->id(0); # Required for new user!
\&        $user2\->name("altadmin"); # Required field
\&        $user2\->password("TopSecret"); # Password policies will be enforced!
\&        $user2\->description("Alternate Admin"); 
\&
\&        my $id = $acs\->create($user,$user2); 
\&        # Create new users based on Net::Cisco::ACS::User instances in argument.
\&        # Return value is ID generated by ACS but not guaranteed.
\&        # print "Record ID is $id" if $id;
\&        # print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        my $device = $acs\->devices("name","Main_Router");
\&        $device\->name("MainRouter"); # Required field
\&        $device\->description("Main Router"); 
\&        $device\->ips([{netMask => "32", ipAddress=>"10.0.0.1"}]); # Change IP address! Overlap check is enforced!
\&        $device\->id(0); # Required for new device!
\&
\&        my $device2 = $acs\->devices("name","Alt_Router");
\&        $device2\->name("AltRouter"); # Required field
\&        $device2\->description("Standby Router"); 
\&        $device2\->ips([{netMask => "32", ipAddress=>"10.0.0.2"}]); # Change IP address! Overlap check is enforced!
\&        $device2\->id(0); # Required for new device!
\&        
\&    my $id = $acs\->create($device,$device2);
\&        # Create new device based on Net::Cisco::ACS::Device instance
\&        # Return value is ID generated by ACS but not guaranteed.
\&        # print "Record ID is $id" if $id;
\&        # print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
.Ve
.IP "update" 3
.IX Item "update"
This method updates an existing entry in Cisco \s-1ACS,\s0 depending on the argument passed. Record type is detected automatically.
.Sp
.Vb 8
\&        my $user = $acs\->users("name","acsadmin");
\&        $user\->password("TopSecret"); # Change password. Password policies will be enforced!
\&        my $id = $acs\->update($user);
\&        # Update user based on Net::Cisco::ACS::User instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        my $device = $acs\->devices("name","Main_Router");
\&        $user\->description("To be ceased"); # Change description
\&        $device\->ips([{netMask => "32", ipAddress=>"10.0.0.2"}]); # or Change IP address. Overlap check is enforced!
\&        my $id = $acs\->update($device);
\&        # Create new device based on Net::Cisco::ACS::Device instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
.Ve
.Sp
Multiple instances can be passed as an argument. Objects will be updated in bulk (one transaction). The returned \s-1ID\s0 is not guaranteed to be the IDs of the created objects.
.Sp
.Vb 3
\&        my $user = $acs\->users("name","acsadmin");
\&        $user\->id(0); # Required for new user!
\&        $user\->password("TopSecret"); # Password policies will be enforced!
\&
\&        my $user2 = $acs\->users("name","acsadmin2");
\&        $user2\->password("TopSecret"); # Password policies will be enforced!
\&
\&        my $id = $acs\->update($user,$user2); 
\&        # Update users based on Net::Cisco::ACS::User instances in arguments
\&        # Return value is ID generated by ACS but not guaranteed.
\&        # print "Record ID is $id" if $id;
\&        # print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        my $device = $acs\->devices("name","Main_Router");
\&        $device\->description("Main Router"); 
\&        $device\->ips([{netMask => "32", ipAddress=>"10.0.0.1"}]); # Change IP address! Overlap check is enforced!
\&
\&        my $device2 = $acs\->devices("name","Alt_Router");
\&        $device2\->description("Standby Router"); 
\&        $device2\->ips([{netMask => "32", ipAddress=>"10.0.0.2"}]); # Change IP address! Overlap check is enforced!
\&        
\&    my $id = $acs\->create($device,$device2);
\&        # Update devices based on Net::Cisco::ACS::Device instances in arguments
\&        # Return value is ID generated by ACS but not guaranteed.
\&        # print "Record ID is $id" if $id;
\&        # print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
.Ve
.IP "delete" 3
.IX Item "delete"
This method deletes an existing entry in Cisco \s-1ACS,\s0 depending on the argument passed. Record type is detected automatically.
.Sp
.Vb 2
\&        my $user = $acs\->users("name","acsadmin");
\&        $acs\->delete($user);
\&
\&        my $device = $acs\->users("name","Main_Router");
\&        $acs\->delete($device);
.Ve
.ie n .IP "$ERROR" 3
.el .IP "\f(CW$ERROR\fR" 3
.IX Item "$ERROR"
This variable will contain detailed error information, based on the \s-1REST API\s0 answer. This value is reset during every call to \f(CW\*(C`users\*(C'\fR, \f(CW\*(C`devices\*(C'\fR and \f(CW\*(C`devicegroups\*(C'\fR.
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
For this library to work, you need an instance with Cisco \s-1ACS\s0 (obviously) or a simulator like Net::Cisco::ACS::Mock.
.PP
To enable the Cisco \s-1ACS REST API,\s0 you will need to run the command below from the Cisco \s-1ACS\s0 console:
.PP
.Vb 1
\&        acs config\-web\-interface rest enable
.Ve
.PP
You will also need an administrator-role account, typically \s-1NOT\s0 associated with a device-access account. Configure the account through the \s-1GUI.\s0
.PP
.Vb 1
\&                System Administration > Administrators > Accounts
.Ve
.PP
You will need more than generic privileges (SuperAdmin is ideal, suspected that UserAdmin and NetworkDeviceAdmin are sufficient).
.PP
You will also need
.IP "Moose" 3
.IX Item "Moose"
.PD 0
.IP "IO::Socket::SSL" 3
.IX Item "IO::Socket::SSL"
.IP "LWP::UserAgent" 3
.IX Item "LWP::UserAgent"
.IP "XML::Simple" 3
.IX Item "XML::Simple"
.IP "MIME::Base64" 3
.IX Item "MIME::Base64"
.IP "URI::Escape" 3
.IX Item "URI::Escape"
.PD
.SH "BUGS"
.IX Header "BUGS"
None so far
.SH "SUPPORT"
.IX Header "SUPPORT"
None so far :)
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&    Hendrik Van Belleghem
\&    CPAN ID: BEATNIK
\&    hendrik.vanbelleghem@gmail.com
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software licensed under the...
.PP
.Vb 2
\&        The General Public License (GPL)
\&        Version 2, June 1991
.Ve
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "COMPATIBILITY"
.IX Header "COMPATIBILITY"
Certain \s-1API\s0 calls are not support from Cisco \s-1ACS 5.0\s0 onwards. The current supported versions of Cisco \s-1ACS\s0 (by Cisco) are 5.6, 5.7 and 5.8 (Active).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 3
See Net::Cisco::ACS::User for more information on User management.
.Sp
See Net::Cisco::ACS::IdentityGroup for more information on User Group management.
.Sp
See Net::Cisco::ACS::Device for more information on Device management.
.Sp
See Net::Cisco::ACS::DeviceGroup for more information on Device Group management.
.Sp
See Net::Cisco::ACS::Host for more information on Host management.
.Sp
See the Cisco \s-1ACS\s0 product page <http://www.cisco.com/c/en/us/products/security/secure-access-control-system/index.html> for more information.
.Sp
Net::Cisco::ACS relies on Moose.
.RE
