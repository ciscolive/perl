.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::TableLoader::CSV 3"
.TH DBIx::TableLoader::CSV 3 "2013-01-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::TableLoader::CSV \- Easily load a CSV into a database table
.SH "VERSION"
.IX Header "VERSION"
version 1.102
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $dbh = DBI\->connect(@connection_args);
\&
\&  DBIx::TableLoader::CSV\->new(dbh => $dbh, file => $path_to_csv)\->load();
\&
\&  # interact with new database table full of data in $dbh
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of DBIx::TableLoader that handles
the common operations of reading a \s-1CSV\s0 file
(using the powerful Text::CSV (which uses Text::CSV_XS if available)).
.PP
This module simplifies the task of transforming a \s-1CSV\s0 file
into a database table.
This functionality was the impetus for the parent module (DBIx::TableLoader).
.PP
In most cases simply calling \f(CW\*(C`load()\*(C'\fR is sufficient
(see \*(L"load\*(R" in DBIx::TableLoader).
The methods defined by this subclass are documented for completeness.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Accepts all options described in \*(L"\s-1OPTIONS\*(R"\s0 in DBIx::TableLoader
plus some \s-1CSV\s0 specific options.
.PP
See \*(L"\s-1OPTIONS\*(R"\s0.
.SH "get_raw_row"
.IX Header "get_raw_row"
Returns \f(CW\*(C`$csv\->getline($io)\*(C'\fR.
.PP
After the last row is returned this will check \*(L"eof\*(R" in Text::CSV
and croak with the message from \*(L"error_diag\*(R" in Text::CSV
as described by \*(L"\s-1SYNOPSIS\*(R"\s0 in Text::CSV.
(If you wish to disable this behavior
you can set \f(CW\*(C`ignore_csv_errors => 1\*(C'\fR in the constructor.)
.SH "default_name"
.IX Header "default_name"
If the \f(CW\*(C`name\*(C'\fR option is not provided,
and the \f(CW\*(C`file\*(C'\fR option is,
this returns the file basename.
.PP
Falls back to \f(CW\*(Aqcsv\*(Aq\fR.
.SH "prepare_data"
.IX Header "prepare_data"
This is called automatically from the constructor
to make things as simple and automatic as possible.
.IP "\(bu" 4
Load \f(CW\*(C`csv_class\*(C'\fR if it is not.
.IP "\(bu" 4
Instantiate \f(CW\*(C`csv_class\*(C'\fR with \f(CW\*(C`csv_defaults\*(C'\fR and \f(CW\*(C`csv_opts\*(C'\fR.
.IP "\(bu" 4
Open the \f(CW\*(C`file\*(C'\fR provided unless \f(CW\*(C`io\*(C'\fR is passed instead.
.IP "\(bu" 4
Discard the first row if \f(CW\*(C`columns\*(C'\fR is provided and \f(CW\*(C`no_header\*(C'\fR is not.
.SH "OPTIONS"
.IX Header "OPTIONS"
There are many options available for configuration.
Options specific to this module are listed below.
Also see \*(L"\s-1OPTIONS\*(R"\s0 in DBIx::TableLoader for options from the base module.
.PP
Basic usage:
.IP "\(bu" 4
\&\f(CW\*(C`csv_opts\*(C'\fR \- Hashref of options to pass to the \f(CW\*(C`new\*(C'\fR method of \f(CW\*(C`csv_class\*(C'\fR
.Sp
See Text::CSV for its list of accepted options.
.IP "\(bu" 4
\&\f(CW\*(C`file\*(C'\fR \- Path to a csv file
.Sp
The file will be opened (unless \f(CW\*(C`io\*(C'\fR is provided)
and its basename will be the default table name
(which can be overwritten with the \f(CW\*(C`name\*(C'\fR option).
.IP "\(bu" 4
\&\f(CW\*(C`file_encoding\*(C'\fR \- The encoding of the \s-1CSV\s0 file.
.Sp
If specified this is appended to the \f(CW\*(C`open\*(C'\fR mode as \f(CW\*(C`:encoding(ENCODING)\*(C'\fR.
.PP
Options for more customization/control:
.IP "\(bu" 4
\&\f(CW\*(C`csv\*(C'\fR \- A Text::CSV compatible object instance
.Sp
If not supplied an instance will be created
using \f(CW\*(C`$csv_class\->new(\e%csv_opts)\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`csv_class\*(C'\fR \- The class to instantiate if \f(CW\*(C`csv\*(C'\fR is not supplied
.Sp
Defaults to \f(CW\*(C`Text::CSV\*(C'\fR
(which will attempt to load Text::CSV_XS and fall back to Text::CSV_PP).
.IP "\(bu" 4
\&\f(CW\*(C`csv_defaults\*(C'\fR \- Hashref of default options for \f(CW\*(C`csv_class\*(C'\fR constructor
.Sp
Includes \f(CW\*(C`{ binary => 1 }\*(C'\fR (as encouraged by Text::CSV);
To turn off the \f(CW\*(C`binary\*(C'\fR option
you can pass \f(CW\*(C`{ binary => 0 }\*(C'\fR to \f(CW\*(C`csv_opts\*(C'\fR.
If you are using a different \f(CW\*(C`csv_class\*(C'\fR that does not accept
the \f(CW\*(C`binary\*(C'\fR option you may need to overwrite this with an empty hash.
.IP "\(bu" 4
\&\f(CW\*(C`file_open_layers\*(C'\fR \- String of arbitrary PerlIO layers
.Sp
to apply when opening the file.
.IP "\(bu" 4
\&\f(CW\*(C`ignore_csv_errors\*(C'\fR \- Boolean (defaults to false)
.Sp
If Text::CSV fails to parse a row it will abort
and skip the rest of the file.
This module detects parser errors and will \f(CW\*(C`die\*(C'\fR
with the message from \*(L"error_diag\*(R" in Text::CSV
upon failure to read the whole file.
(This behavior is similar to (but separate from)
setting \f(CW\*(C`auto_diag => 2\*(C'\fR in the csv options.)
Set this option to a true value if you want to accept
partially read \s-1CSV\s0 files rather than getting an error.
\&\fBNote\fR that other exceptions can still be thrown (including failure to open
the file or if a misconfigured parser or malformed \s-1CSV\s0 returns a row with
an inconsistent number of columns).
.IP "\(bu" 4
\&\f(CW\*(C`io\*(C'\fR \- A filehandle or IO-like object from which to read \s-1CSV\s0 lines
.Sp
This will be used as \f(CW\*(C`$csv\->getline($io)\*(C'\fR.
When providing this option you can still provide \f(CW\*(C`file\*(C'\fR
if you want the table name to be determined automatically
(but no attempt will be made to open \f(CW\*(C`file\*(C'\fR).
.IP "\(bu" 4
\&\f(CW\*(C`name\*(C'\fR \- Table name
.Sp
If not given the table name will be set to the file basename
or \f(CW\*(Aqcsv\*(Aq\fR if \f(CW\*(C`file\*(C'\fR is not provided.
.IP "\(bu" 4
\&\f(CW\*(C`no_header\*(C'\fR \- Boolean
.Sp
Usually the first row [header] of a \s-1CSV\s0 is the column names.
If you specify \f(CW\*(C`columns\*(C'\fR this module assumes you are overwriting
the usual header row so the first row of the \s-1CSV\s0 will be discarded.
If there is no header row on the \s-1CSV\s0 (the first row is data),
you must set \f(CW\*(C`no_header\*(C'\fR to true in order to preserve the first row of the \s-1CSV.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
DBIx::TableLoader
.IP "\(bu" 4
Text::CSV
.IP "\(bu" 4
Text::CSV::Auto \- Alternative project automating \s-1CSV\s0 usage
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Perldoc"
.IX Subsection "Perldoc"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&  perldoc DBIx::TableLoader::CSV
.Ve
.SS "Websites"
.IX Subsection "Websites"
The following websites have more information about this module, and may be of help to you. As always,
in addition to those websites please use your favorite search engine to discover more resources.
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
The default \s-1CPAN\s0 search engine, useful to view \s-1POD\s0 in \s-1HTML\s0 format.
.Sp
<http://search.cpan.org/dist/DBIx\-TableLoader\-CSV>
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's Bug Tracker
.Sp
The \s-1RT\s0 ( Request Tracker ) website is the default bug/issue tracking system for \s-1CPAN.\s0
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=DBIx\-TableLoader\-CSV>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
The \s-1CPAN\s0 Ratings is a website that allows community ratings and reviews of Perl modules.
.Sp
<http://cpanratings.perl.org/d/DBIx\-TableLoader\-CSV>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers
.Sp
The \s-1CPAN\s0 Testers is a network of smokers who run automated tests on uploaded \s-1CPAN\s0 distributions.
.Sp
<http://www.cpantesters.org/distro/D/DBIx\-TableLoader\-CSV>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Matrix
.Sp
The \s-1CPAN\s0 Testers Matrix is a website that provides a visual overview of the test results for a distribution on various Perls/platforms.
.Sp
<http://matrix.cpantesters.org/?dist=DBIx\-TableLoader\-CSV>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Dependencies
.Sp
The \s-1CPAN\s0 Testers Dependencies is a website that shows a chart of the test results of all dependencies for a distribution.
.Sp
<http://deps.cpantesters.org/?module=DBIx::TableLoader::CSV>
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests by email to \f(CW\*(C`bug\-dbix\-tableloader\-csv at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=DBIx\-TableLoader\-CSV>. You will be automatically notified of any
progress on the request by the system.
.SS "Source Code"
.IX Subsection "Source Code"
<https://github.com/rwstauner/DBIx\-TableLoader\-CSV>
.PP
.Vb 1
\&  git clone https://github.com/rwstauner/DBIx\-TableLoader\-CSV.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Randy Stauner <rwstauner@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Randy Stauner.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
