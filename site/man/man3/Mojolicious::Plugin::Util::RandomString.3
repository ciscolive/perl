.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Util::RandomString 3"
.TH Mojolicious::Plugin::Util::RandomString 3 "2018-11-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Util::RandomString \- Generate Secure Random Strings for Mojolicious
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  # Mojolicious::Lite
\&  plugin \*(AqUtil::RandomString\*(Aq => {
\&    entropy => 256,
\&    printable => {
\&      alphabet => \*(Aq2345679bdfhmnprtFGHJLMNPRT\*(Aq,
\&      length   => 20
\&    }
\&  };
\&
\&  # Generate string with default configuration
\&  <%= random_string %>
\&
\&  # Generate string with \*(Aqprintable\*(Aq configuration
\&  <%= random_string \*(Aqprintable\*(Aq %>
\&
\&  # Generate string with \*(Aqprintable\*(Aq configuration
\&  # and overwrite length
\&  <%= random_string \*(Aqprintable\*(Aq, length => 16 %>
\&
\&  # Generate string with default configuration
\&  # and overwrite character set in a Controller
\&  $c\->random_string(alphabet => [\*(Aqa\*(Aq .. \*(Aqz\*(Aq]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::Util::RandomString is a plugin to generate
random strings for session tokens, encryption salt, temporary
password generation etc. Internally it uses Session::Token
(see this comparison <http://neilb.org/reviews/passwords.html#Session::Token>
for reasons for this decision).
.PP
This plugin will automatically reseed the random number generator in
a forking environment like Hypnotoad (although it is untested in other
forking environments that don't use Mojo::IOLoop).
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::Util::RandomString inherits all methods from
Mojolicious::Plugin and implements the following new one.
.SS "register"
.IX Subsection "register"
.Vb 2
\&  # Mojolicious
\&  $app\->plugin(\*(AqUtil::RandomString\*(Aq);
\&
\&  # Mojolicious::Lite
\&  plugin \*(AqUtil::RandomString\*(Aq => {
\&    entropy => 256,
\&    printable => {
\&      alphabet => \*(Aq2345679bdfhmnprtFGHJLMNPRT\*(Aq,
\&      length   => 20
\&    }
\&  };
\&
\&  # Or in your config file
\&  {
\&    \*(AqUtil\-RandomString\*(Aq => {
\&      entropy => 256,
\&      printable => {
\&        alphabet => \*(Aq2345679bdfhmnprtFGHJLMNPRT\*(Aq,
\&        length   => 20
\&      }
\&    }
\&  }
.Ve
.PP
Called when registering the plugin.
Expects a hash reference containing parameters as defined in
Session::Token for the default generator.
To specify named generators, use a name key (other than \f(CW\*(C`alphabet\*(C'\fR,
\&\f(CW\*(C`length\*(C'\fR, and \f(CW\*(C`entropy\*(C'\fR) and specify the parameters as a hash reference.
The name key 'default' can overwrite the default configuration.
.PP
All parameters can be set either on registration or
as part of the configuration file with the key \f(CW\*(C`Util\-RandomString\*(C'\fR.
.PP
The plugin can be registered multiple times with different,
overwriting configurations.
.PP
The default alphabet is base62. This is good for a lot of use cases.
If you want to generate human readable tokens, you can define another scheme
(e.g. the above shown 'printable' base26 scheme with a character set with
visually distinctive characters, that also makes it unlikely to generate
insulting words due to missing vocals).
.SH "HELPERS"
.IX Header "HELPERS"
.SS "random_string"
.IX Subsection "random_string"
.Vb 5
\&  # In Controller
\&  print $c\->random_string;
\&  print $c\->random_string(\*(Aqprintable\*(Aq);
\&  print $c\->random_string(length => 45)
\&  print $c\->random_string(\*(Aqprintable\*(Aq, length => 45)
\&
\&  # In Template
\&  %= random_string;
\&  %= random_string(\*(Aqprintable\*(Aq);
\&  %= random_string(length => 45)
\&  %= random_string(\*(Aqprintable\*(Aq, length => 45)
.Ve
.PP
Generate a random string.
In case of no parameters, the default configuration is used.
In case of one parameter, this is treated as the key of a
chosen configuration. The following parameters can be used to modify
a given configuration for one request (but please \fBnote\fR: each
modified request creates a new and seeded Session::Token generator,
which is bad for performance).
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Mojolicious (best with \s-1SSL\s0 support),
Session::Token.
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
.Vb 1
\&  https://github.com/Akron/Mojolicious\-Plugin\-Util\-RandomString
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2013\-2018, Nils Diewald <http://nils-diewald.de/>.
.PP
This program is free software, you can redistribute it
and/or modify it under the terms of the Artistic License version 2.0.
