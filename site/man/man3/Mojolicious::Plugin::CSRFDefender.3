.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::CSRFDefender 3"
.TH Mojolicious::Plugin::CSRFDefender 3 "2013-05-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::CSRFDefender \- Defend CSRF automatically in Mojolicious Application
.SH "VERSION"
.IX Header "VERSION"
This document describes Mojolicious::Plugin::CSRFDefender.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # Mojolicious
\&    $self\->plugin(\*(AqMojolicious::Plugin::CSRFDefender\*(Aq);
\&
\&    # Mojolicious::Lite
\&    plugin \*(AqMojolicious::Plugin::CSRFDefender\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This plugin defends \s-1CSRF\s0 automatically in Mojolicious Application.
Following is the strategy.
.SS "output filter"
.IX Subsection "output filter"
When the application response body contains form tags with method=\*(L"post\*(R",
this inserts hidden input tag that contains token string into forms in the response body.
For example, the application response body is
.PP
.Vb 8
\&    <html>
\&      <body>
\&        <form method="post" action="/get">
\&          <input name="text" />
\&          <input type="submit" value="send" />
\&        </form>
\&      </body>
\&    </html>
.Ve
.PP
this becomes
.PP
.Vb 9
\&    <html>
\&      <body>
\&        <form method="post" action="/get">
\&        <input type="hidden" name="csrf_token" value="zxjkzX9RnCYwlloVtOVGCfbwjrwWZgWr" />
\&          <input name="text" />
\&          <input type="submit" value="send" />
\&        </form>
\&      </body>
\&    </html>
.Ve
.SS "input check"
.IX Subsection "input check"
For every \s-1POST\s0 requests, this module checks input parameters contain the collect token parameter. If not found, throws 403 Forbidden.
.SH "OPTIONS"
.IX Header "OPTIONS"
.Vb 7
\&    plugin \*(AqMojolicious::Plugin::CSRFDefender\*(Aq => {
\&        parameter_name => \*(Aqparam\-csrftoken\*(Aq,
\&        session_key    => \*(Aqsession\-csrftoken\*(Aq,
\&        token_length   => 40,
\&        error_status   => 400,
\&        error_template => \*(Aqpublic/400.html\*(Aq,
\&    };
.Ve
.ie n .IP "parameter_name(default:""csrftoken"")" 4
.el .IP "parameter_name(default:``csrftoken'')" 4
.IX Item "parameter_name(default:csrftoken)"
Name of the input tag for the token.
.ie n .IP "session_key(default:""csrftoken"")" 4
.el .IP "session_key(default:``csrftoken'')" 4
.IX Item "session_key(default:csrftoken)"
Name of the session key for the token.
.IP "token_length(default:32)" 4
.IX Item "token_length(default:32)"
Length of the token string.
.IP "error_status(default:403)" 4
.IX Item "error_status(default:403)"
Status code when \s-1CSRF\s0 is detected.
.ie n .IP "error_content(default:""Forbidden"")" 4
.el .IP "error_content(default:``Forbidden'')" 4
.IX Item "error_content(default:Forbidden)"
Content body when \s-1CSRF\s0 is detected.
.IP "error_template" 4
.IX Item "error_template"
Return content of the specified file as content body when \s-1CSRF\s0 is detected.  Specify the file path from the application home directory.
.IP "onetime(default:0)" 4
.IX Item "onetime(default:0)"
If specified with 1,  this plugin uses onetime token, that is, whenever client sent collect token and this middleware detect that, token string is regenerated.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::CSRFDefender inherits all methods from
Mojolicious::Plugin and implements the following new ones.
.ie n .SS """register"""
.el .SS "\f(CWregister\fP"
.IX Subsection "register"
.Vb 1
\&    $plugin\->register;
.Ve
.PP
Register plugin in Mojolicious application.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Mojolicious
.SH "REPOSITORY"
.IX Header "REPOSITORY"
https://github.com/shibayu36/p5\-Mojolicious\-Plugin\-CSRFDefender
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&  C<< <shibayu36 {at} gmail.com> >>
.Ve
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2011, Yuki Shibazaki \f(CW\*(C`<shibayu36 {at} gmail.com>\*(C'\fR. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
