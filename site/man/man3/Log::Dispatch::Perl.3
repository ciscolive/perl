.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Log::Dispatch::Perl 3"
.TH Log::Dispatch::Perl 3 "2020-05-17" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Dispatch::Perl \- Use core Perl functions for logging
.SH "VERSION"
.IX Header "VERSION"
version 0.05
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Log::Dispatch::Perl ();
\&
\& my $dispatcher = Log::Dispatch\->new;
\& $dispatcher\->add( Log::Dispatch::Perl\->new(
\&  name      => \*(Aqfoo\*(Aq,
\&  min_level => \*(Aqinfo\*(Aq,
\&  action    => { debug     => \*(Aq\*(Aq,
\&                 info      => \*(Aq\*(Aq,
\&                 notice    => \*(Aqwarn\*(Aq,
\&                 warning   => \*(Aqwarn\*(Aq,
\&                 error     => \*(Aqdie\*(Aq,
\&                 critical  => \*(Aqdie\*(Aq,
\&                 alert     => \*(Aqcroak\*(Aq,
\&                 emergency => \*(Aqcroak\*(Aq,
\&               },
\& ) );
\&
\& $dispatcher\->warning( "This is a warning" );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \*(L"Log::Dispatch::Perl\*(R" module offers a logging alternative using standard
Perl core functions.  It allows you to fall back to the common Perl
alternatives for logging, such as \*(L"warn\*(R" and \*(L"cluck\*(R".  It also adds the
possibility for a logging action to halt the current environment, such as
with \*(L"die\*(R" and \*(L"croak\*(R".
.SH "POSSIBLE ACTIONS"
.IX Header "POSSIBLE ACTIONS"
The following actions are currently supported (in alphabetical order):
.SS "(absent or empty string or undef)"
.IX Subsection "(absent or empty string or undef)"
Indicates no action should be executed.  Default for log levels \*(L"debug\*(R" and
\&\*(L"info\*(R".
.SS "carp"
.IX Subsection "carp"
Indicates a \*(L"carp\*(R" action should be executed.  See \*(L"carp\*(R" in Carp.  Halts
execution.
.SS "cluck"
.IX Subsection "cluck"
Indicates a \*(L"cluck\*(R" action should be executed.  See \*(L"cluck\*(R" in Carp.  Does
\&\fBnot\fR halt execution.
.SS "confess"
.IX Subsection "confess"
Indicates a \*(L"confess\*(R" action should be executed.  See \*(L"confess\*(R" in Carp.  Halts
execution.
.SS "croak"
.IX Subsection "croak"
Indicates a \*(L"croak\*(R" action should be executed.  See \*(L"croak\*(R" in Carp.  Halts
execution.
.SS "die"
.IX Subsection "die"
Indicates a \*(L"die\*(R" action should be executed.  See \*(L"die\*(R" in perlfunc.  Halts
execution.
.SS "warn"
.IX Subsection "warn"
Indicates a \*(L"warn\*(R" action should be executed.  See \*(L"warn\*(R" in perlfunc.  Does
\&\fBnot\fR halt execution.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through the \s-1RT\s0 bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=Log-Dispatch-Perl>
(or bug\-Log\-Dispatch\-Perl@rt.cpan.org <mailto:bug-Log-Dispatch-Perl@rt.cpan.org>).
.PP
I am also usually active on irc, as 'ether' at \f(CW\*(C`irc.perl.org\*(C'\fR and \f(CW\*(C`irc.freenode.org\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Elizabeth Mattijsen (liz@dijkmat.nl)
.SH "CONTRIBUTOR"
.IX Header "CONTRIBUTOR"
Karen Etheridge <ether@cpan.org>
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2020 by Elizabeth Mattijsen.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
