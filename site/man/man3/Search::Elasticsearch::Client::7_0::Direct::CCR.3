.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search::Elasticsearch::Client::7_0::Direct::CCR 3"
.TH Search::Elasticsearch::Client::7_0::Direct::CCR 3 "2020-09-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Search::Elasticsearch::Client::7_0::Direct::CCR \- Plugin providing cross\-cluster replication APIs for Search::Elasticsearch 7.x
.SH "VERSION"
.IX Header "VERSION"
version 7.30
.SS "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
This module provides methods to use the cross-cluster replication feature.
.PP
The full documentation for \s-1CCR\s0 is available here:
<https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr\-apis.html>
.SH "FOLLOW METHODS"
.IX Header "FOLLOW METHODS"
.ie n .SS """follow()"""
.el .SS "\f(CWfollow()\fP"
.IX Subsection "follow()"
.Vb 4
\&    $response = $es\->ccr\->follow(
\&        index   => $index,  # required
\&        body    => {...}    # required
\&    )
.Ve
.PP
The \f(CW\*(C`follow()\*(C'\fR method creates a new follower index that is configured to follow the referenced leader index.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`wait_for_active_shards\*(C'\fR
.PP
See the \s-1CCR\s0 follow docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-put-follow.html>
for more information.
.ie n .SS """pause_follow()"""
.el .SS "\f(CWpause_follow()\fP"
.IX Subsection "pause_follow()"
.Vb 3
\&    $response = $es\->ccr\->pause_follow(
\&        index   => $index,  # required
\&    )
.Ve
.PP
The \f(CW\*(C`pause_follow()\*(C'\fR method pauses following of an index.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1CCR\s0 pause follow docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-post-pause-follow.html>
for more information.
.ie n .SS """resume_follow()"""
.el .SS "\f(CWresume_follow()\fP"
.IX Subsection "resume_follow()"
.Vb 3
\&    $response = $es\->ccr\->resume_follow(
\&        index   => $index,  # required
\&    )
.Ve
.PP
The \f(CW\*(C`resume_follow()\*(C'\fR method resumes following of an index.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1CCR\s0 resume follow docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-post-resume-follow.html>
for more information.
.ie n .SS """unfollow()"""
.el .SS "\f(CWunfollow()\fP"
.IX Subsection "unfollow()"
.Vb 3
\&    $response = $es\->ccr\->unfollow(
\&        index   => $index,  # required
\&    )
.Ve
.PP
The \f(CW\*(C`unfollow()\*(C'\fR method converts a follower index into a normal index.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1CCR\s0 unfollow docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-post-unfollow.html>
for more information.
.ie n .SS """forget_follower()"""
.el .SS "\f(CWforget_follower()\fP"
.IX Subsection "forget_follower()"
.Vb 3
\&    $response = $es\->ccr\->forget_follower(
\&        index   => $index,  # required
\&    )
.Ve
.PP
The \f(CW\*(C`forget_follower()\*(C'\fR method removes the follower retention leases from the leader.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1CCR\s0 forget_follower docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-post-forget-follower.html>
for more information.
.SH "STATS METHODS"
.IX Header "STATS METHODS"
.ie n .SS """stats()"""
.el .SS "\f(CWstats()\fP"
.IX Subsection "stats()"
.Vb 1
\&    $response = $es\->ccr\->stats()
.Ve
.PP
The \f(CW\*(C`stats()\*(C'\fR method returns all stats related to cross-cluster replication.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1CCR\s0 stats docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-stats.html>
for more information.
.ie n .SS """follow_stats()"""
.el .SS "\f(CWfollow_stats()\fP"
.IX Subsection "follow_stats()"
.Vb 3
\&    $response = $es\->ccr\->follow_stats(
\&        index   => $index | \e@indices,  # optional
\&    )
.Ve
.PP
The \f(CW\*(C`follow_stats()\*(C'\fR method returns shard-level stats about follower indices.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1CCR\s0 follow stats docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-follow-stats.html>
for more information.
.ie n .SS """follow_info()"""
.el .SS "\f(CWfollow_info()\fP"
.IX Subsection "follow_info()"
.Vb 3
\&    $response = $es\->ccr\->follow_info(
\&        index   => $index | \e@indices,  # optional
\&    )
.Ve
.PP
The \f(CW\*(C`follow_info()\*(C'\fR method returns the parameters and the status for each follower index.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1CCR\s0 follow info docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-follow-info.html>
for more information.
.SH "AUTO-FOLLOW METHODS"
.IX Header "AUTO-FOLLOW METHODS"
.ie n .SS """put_auto_follow_pattern()"""
.el .SS "\f(CWput_auto_follow_pattern()\fP"
.IX Subsection "put_auto_follow_pattern()"
.Vb 3
\&    $response = $es\->ccr\->put_auto_follow_pattern(
\&        name    => $name    # required
\&    )
.Ve
.PP
The \f(CW\*(C`put_auto_follow_pattern()\*(C'\fR method creates a new named collection of auto-follow patterns against the remote cluster specified in the request body.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1CCR\s0 put auto follow pattern docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-put-auto-follow-pattern.html>
for more information.
.ie n .SS """get_auto_follow_pattern()"""
.el .SS "\f(CWget_auto_follow_pattern()\fP"
.IX Subsection "get_auto_follow_pattern()"
.Vb 3
\&    $response = $es\->ccr\->get_auto_follow_pattern(
\&        name    => $name    # optional
\&    )
.Ve
.PP
The \f(CW\*(C`get_auto_follow_pattern()\*(C'\fR method retrieves a named collection of auto-follow patterns, or all patterns.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1CCR\s0 get auto follow pattern docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-auto-follow-pattern.html>
for more information.
.ie n .SS """delete_auto_follow_pattern()"""
.el .SS "\f(CWdelete_auto_follow_pattern()\fP"
.IX Subsection "delete_auto_follow_pattern()"
.Vb 3
\&    $response = $es\->ccr\->delete_auto_follow_pattern(
\&        name    => $name    # required
\&    )
.Ve
.PP
The \f(CW\*(C`delete_auto_follow_pattern()\*(C'\fR method deletes a named collection of auto-follow patterns.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the \s-1CCR\s0 delete auto follow pattern docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-delete-auto-follow-pattern.html>
for more information.
.SH "AUTHOR"
.IX Header "AUTHOR"
Enrico Zimuel <enrico.zimuel@elastic.co>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Elasticsearch \s-1BV.\s0
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
