.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::DNS::DNS64Group 3"
.TH Infoblox::Grid::DNS::DNS64Group 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::DNS::DNS64Group \- DNS64 Synthesis Group object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1DNS64\s0 synthesis group is used to configure the \s-1DNS64\s0 feature.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 12
\& my $group = Infoblox::Grid::DNS::DNS64Group\->new(
\&     name                  => $string,                                                                    #Required
\&     prefix                => $ipv6prefix,                                                                #Required
\&     clients               => [ $ipv4addr | $ipv4_subnet/prefix | $ipv6addr | $ipv6_subnet/prefix ,... ] | $nacl, #Optional / Default is an empty list
\&     comment               => $string,                                                                    #Optional
\&     disable               => "true" | "false"                                                            #Optional / Default is "false"
\&     dnssec_dns64_enabled  => "true" | "false"                                                            #Optional / Default is "false"    
\&     exclude               => [ $ipv4addr | $ipv4_subnet/prefix | $ipv6addr | $ipv6_subnet/prefix ,... ] | $nacl, #Optional / Default is an empty list
\&     extattrs              => { $string => $extattr, ... },                                               #Optional / Default is undefined
\&     extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... },          #Optional / Default is undefined
\&     mapped                => [ $ipv4addr | $ipv4_subnet/prefix | $ipv6addr | $ipv6_subnet/prefix ,... ] | $nacl, #Optional / Default is an empty list
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a \s-1DNS64\s0 synthesis group object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.Sp
If you have applied an access control list to an object, you must restart services after you update the access control list for the changes to take effect. See Infoblox::Session\->\fBrestart()\fR method.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct an object
\& my $group = Infoblox::Grid::DNS::DNS64Group\->new(
\&     name        => "dns64group_A",
\&     prefix      => "64:FF9B::/96",
\&     );
\&
\& #Submit for addition
\& my $response = $session\->add( $group );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DNS64 synthesis group object:
\&
\&  name                  \- Optional. Group name in string format.
\&  prefix                \- Optional. An IPv6 prefix.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&  comment               \- Optional. User\-specified comment for the group.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::DNS::DNS64Group",
\&     name   => "dns64group_A",
\&     );
\&
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::DNS::DNS64Group",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.Sp
If you have applied an access control list to an object, you must restart services after you update the access control list for the changes to take effect. See Infoblox::Session\->\fBrestart()\fR method.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use this method to modify the comment.
\& $group\->comment("this is a modified comment");
\& #Submit modification
\& my $response = $session\->modify( $group );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::DNS::DNS64Group",
\&     name   => "dns64group_A",
\&      );
\& #Find the desired object on the retrieved list
\& my $desired_nsgroup= $retrieved_objs[0];
\& #Submit for removal
\& my $response = $session\->remove( $desired_nsgroup );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DNS64\s0 synthesis group objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DNS64 synthesis group object:
\&
\&  name                  \- Optional. Group name in string format. (regular expression)
\&  prefix                \- Optional. An IPv6 prefix. (regular expression)
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&  comment               \- Optional. User\-specified comment for the group. (regular expression)
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\& # Search for all DNS64 synthesis group objects
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::DNS::DNS64Group",
\&     name   => ".*",
\&     );
\&
\& # Search for all DNS64 synthesis group objects with "Santa Clara" as the value for the "Site" extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::DNS::DNS64Group",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a \s-1DNS64\s0 synthesis group object.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the comment field of the \s-1DNS64\s0 synthesis group object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Comment of the group in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting comment
\& my $comment = $group\->comment();
\& #Modifying comment
\& $group\->comment("Some comment");
.Ve
.RE
.RS 4
.RE
.SS "clients( )"
.IX Subsection "clients( )"
.RS 4
Use this method to set or retrieve the clients \s-1ACL\s0 list of a \s-1DNS64\s0 synthesis group object. This is the list of clients for which synthesized records are returned. The default is \*(L"any\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses and networks. To exclude addresses and networks, add \*(L"!\*(R" as a prefix to the \s-1IP\s0 addresses and networks. The default value is an empty list.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&  #Getting clients
\&  my $clients = $group\->clients();
\&  #Modifying clients
\&  $group\->clients(["2001::333/64", "!2001::1234", "20.0.0.0/8"]);
\&  #Use Infoblox::Grid::NamedACL
\&  $group\->clients($nacl);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DNS64\s0 synthesis group object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $fixed_addr\->disable();
\& #Modify disable
\& $fixed_addr\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_dns64_enabled( )"
.IX Subsection "dnssec_dns64_enabled( )"
.RS 4
Use this method to set or retrieve the dnssec_dns64_enabled flag of a \s-1DNS64\s0 synthesis group object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the dnssec_dns64_enabled flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_dns64_enabled
\& my $dnssec_dns64_enabled = $group\->dnssec_dns64_enabled();
\& #Modify dnssec_dns64_enabled
\& $group\->dnssec_dns64_enabled(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "exclude( )"
.IX Subsection "exclude( )"
.RS 4
Use this method to set or retrieve the exclude \s-1ACL\s0 list of a \s-1DNS64\s0 synthesis group object. \s-1AAAA\s0 records which match this \s-1ACL\s0 are treated as non-existent for the purposes of synthesis. By default, the \s-1ACL\s0 is empty and no records match.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses and networks. To exclude addresses and networks, add \*(L"!\*(R" as a prefix to the \s-1IP\s0 addresses and networks. The default value is an empty list.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&  #Getting exclude
\&  my $exclude = $group\->exclude();
\&  #Modifying exclude
\&  $group\->exclude(["2001::333/64", "!2001::1234"]);
\&  #Use Infoblox::Grid::NamedACL
\&  $group\->exclude($nacl);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS64\s0 synthesis group object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $group\->extattrs();
\& #Modify extattrs
\& $group\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS64\s0 synthesis group object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $group\->extensible_attributes();
\& #Modify extensible attributes
\& $group\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the \s-1DNS64\s0 synthesis group name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Name of the group in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting name
\& my $name = $group\->name();
\& #Modifying name
\& $group\->name("ns_group_2");
.Ve
.RE
.RS 4
.RE
.SS "mapped( )"
.IX Subsection "mapped( )"
.RS 4
Use this method to set or retrieve the mapped \s-1ACL\s0 list of a \s-1DNS64\s0 synthesis group object. The appliance generates \s-1AAAA\s0 records only for A records that match this \s-1ACL.\s0 If the \s-1ACL\s0 is empty, as it is by default, then all records will match.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses and networks. To deny addresses and networks, add \*(L"!\*(R" as a prefix to the \s-1IP\s0 addresses and networks. The default value is an empty list.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&  #Getting mapped
\&  my $mapped = $group\->mapped();
\&  #Modifying mapped
\&  $group\->mapped(["40.10.0.0/24", "!40.10.3.4]);
\&  #Use Infoblox::Grid::NamedACL
\&  $group\->mapped($nacl);
.Ve
.RE
.RS 4
.RE
.SS "prefix( )"
.IX Subsection "prefix( )"
.RS 4
Use this method to set or retrieve the \s-1DNS64\s0 synthesis group prefix. The prefix is an IPv6 subnet prefix with a length of /32, /40, /48, /56, /64, or /96.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Prefix of the group in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting prefix
\& my $prefix = $group\->prefix();
\& #Modifying prefix
\& $group\->prefix("64:FF9B::/96");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as modify and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to the addition of a \s-1DNS64\s0 synthesis group object\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox device
\& my $session = Infoblox::Session\->new(
\&                                      master   => "192.168.1.2",
\&                                      username => "admin",
\&                                      password => "infoblox"
\&                                     );
\& unless ($session) {
\&     die("Construct session failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS64\s0 synthesis group object and add it to the appliance\fR
.PP
.Vb 6
\& my $group = Infoblox::Grid::DNS::DNS64Group\->new(
\&                                                  name => \*(Aqtestgroup\*(Aq,
\&                                                  prefix => \*(Aq64:FF9B::/96\*(Aq,
\&                                                  clients => ["2001::333/64", "!2001::1234", "20.0.0.0/8"],
\&                                                  comment => \*(Aqsome comment\*(Aq,
\&                                                 );
\&
\& unless ($group) {
\&     die("Construct DNS64 synthesis group failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DNS64 synthesis group object created successfully\en";
\&
\& my $response = $session\->add( $group );
\& unless ($response) {
\&     die("Adding DNS64 synthesis group failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Add DNS64 synthesis group success.\en" if ( $response );
.Ve
.PP
\&\fB#Add the \s-1DNS64\s0 synthesis group object to the grid and enable it\fR
.PP
.Vb 1
\& my @result_array = $session\->get( "object" => "Infoblox::Grid::DNS" ,  "grid" => "Infoblox" );
\&
\& if ( defined @result_array  and scalar( @result_array ) > 0 ) {
\&     my $object = $result_array[0];
\&     if ( ref( $object ) eq "Infoblox::Grid::DNS" ) {
\&         $object\->dns64_groups( [ $group ] );
\&         $object\->enable_dns64("true");
\&
\&         $response = $session\->modify( $object );
\&         print "Add DNS64 synthesis group to grid dns properties success.\en" if ( $response );
\&     }
\&
\&     unless ($object) {
\&         die("Add DNS64 synthesis group to grid dns properties failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&     }
\& }
.Ve
.PP
\&\fB#Modify the \s-1DNS64\s0 synthesis group object\fR
.PP
.Vb 1
\& @result_array = $session\->get( "object" => "Infoblox::Grid::DNS::DNS64Group" ,  name => "testgroup" );
\&
\& if ( defined @result_array  and scalar( @result_array ) > 0 ) {
\&     my $object = $result_array[0];
\&     if ( ref( $object ) eq "Infoblox::Grid::DNS::DNS64Group" ) {
\&
\&         $object\->clients(["2001::333/64", "!2001::1234"]);
\&
\&         $response = $session\->modify( $object );
\&         print "Modify DNS64 synthesis group success.\en" if ( $response );
\&     }
\&
\&     unless ($object) {
\&         die("Modify Group failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&     }
\& }
.Ve
.PP
\&\fB#Remove a \s-1DNS64\s0 synthesis group object\fR
.PP
\&\fB#First let's remove it from the grid configuration\fR
.PP
.Vb 1
\& @result_array = $session\->get( "object" => "Infoblox::Grid::DNS" ,  "grid" => "Infoblox" );
\&
\& if ( defined @result_array  and scalar( @result_array ) > 0 ) {
\&     my $object = $result_array[0];
\&     if ( ref( $object ) eq "Infoblox::Grid::DNS" ) {
\&
\&         $object\->dns64_groups( [ ] );
\&         $object\->enable_dns64( "false" );
\&
\&         $response = $session\->modify( $object );
\&         print "Remove DNS64 synthesis group from the grid success.\en" if ( $response );
\&     }
\&
\&     unless ($object) {
\&         die("Remove DNS64 synthesis group failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&     }
\& }
.Ve
.PP
\&\fB#And now remove the group\fR
.PP
.Vb 1
\& @result_array = $session\->get( "object" => "Infoblox::Grid::DNS::DNS64Group" ,  name => "testgroup" );
\&
\& if ( defined @result_array  and scalar( @result_array ) > 0 ) {
\&     my $object = $result_array[0];
\&     if ( ref( $object ) eq "Infoblox::Grid::DNS::DNS64Group" ) {
\&
\&         $response = $session\->remove( $object );
\&         print "Remove DNS64 synthesis group success.\en" if ( $response );
\&     }
\&
\&     unless ($object) {
\&         die("Remove DNS64 synthesis group failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\&     }
\& }
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,Infoblox::Session\->\fBget()\fR,Infoblox::Session\->\fBmodify()\fR,Infoblox::Session\->\fBsearch()\fR,Infoblox::Session\->\fBremove()\fRInfoblox::Grid::DNS, Infoblox::Grid::Member::DNS, Infoblox::DNS::View, Infoblox::Grid::NamedACL
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
