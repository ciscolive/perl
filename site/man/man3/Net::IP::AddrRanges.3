.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::IP::AddrRanges 3"
.TH Net::IP::AddrRanges 3 "2010-08-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::IP::AddrRanges \- IP address ranges to match
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::IP::AddrRanges;
\&  
\&  my $ranges = Net::IP::AddrRanges\->new();
\&  $ranges\->add(
\&    \*(Aq192.168.0.0/24\*(Aq,               # CIDR style
\&    \*(Aq192.168.1.64/255.255.255.240\*(Aq, # netmask style
\&    \*(Aq192.168.3.23\*(Aq,                 # single address
\&    \*(Aq64::1/64\*(Aq,                     # IPv6 address range
\&    \*(Aq192.168.5.23\-192.168.12.3\*(Aq,    # from\-to
\&  );
\&  $ranges\->subtract(\*(Aq192.168.0.64/27\*(Aq); # excludes this range
\&
\&  $ranges\->find(\*(Aq192.168.0.1\*(Aq);  # True 
\&  $ranges\->find(\*(Aq192.168.0.70\*(Aq); # False
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::IP::AddrRanges is to represent a list of \s-1IP\s0 address ranges.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBnew()\fR" 4
.IX Item "new()"
Construct new object. any arguments are passed to \fBadd()\fR;
.IP "add(@ranges)" 4
.IX Item "add(@ranges)"
Adds \s-1IP\s0 address ranges to the list. this accepts single, hyphenated, netmask style
and \s-1CIDR\s0 style \s-1IP\s0 address ranges.
.IP "subtract(@ranges)" 4
.IX Item "subtract(@ranges)"
Subtract \s-1IP\s0 address ranges from the list. this accepts same arguments as \f(CW\*(C`add()\*(C'\fR
.IP "find($ip_address)" 4
.IX Item "find($ip_address)"
Finds passed \s-1IP\s0 address from the list. Returns true if found, false otherwise.
.SH "AUTHOR"
.IX Header "AUTHOR"
Rintaro Ishizaki <rintaro@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Net::CIDR::Lite \- yet another" 4
.IX Item "Net::CIDR::Lite - yet another"
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
