.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Marpa::R2::NAIF::Semantics::Infinite 3"
.TH Marpa::R2::NAIF::Semantics::Infinite 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Marpa::R2::NAIF::Semantics::Infinite \- How the NAIF deals with infinite ambiguity
.SH "Infinitely ambiguous grammars"
.IX Header "Infinitely ambiguous grammars"
This document deals with Marpa's low-level \s-1NAIF\s0 interface.
If you are new to Marpa,
or are not sure which interface you are interested in,
or do not know what the Named Argment InterFace (\s-1NAIF\s0) is,
you probably want to look instead at
the document on semantics for the \s-1SLIF\s0
interface.
.PP
Marpa will parse using an infinitely ambiguous grammar.
(In the technical literature, an infinite ambiguity is more usually
called a \fBcycle\fR or a \fBloop\fR.)
.PP
An example of an infinitely ambiguous grammar is the following:
.PP
.Vb 4
\&    S ::= A
\&    A ::= B
\&    B ::= A
\&    B :: \*(Aqx\*(Aq
.Ve
.PP
Given the input 'x', this grammar will produce
these parses
.PP
.Vb 6
\&    S \-> A \-> B \-> x
\&    S \-> A \-> B \-> A \-> B \-> x
\&    S \-> A \-> B \-> A \-> B \-> A \-> B \-> x
\&    .
\&    .
\&    .
.Ve
.PP
Because of the two rules \f(CW\*(C`A ::= B\*(C'\fR and \f(CW\*(C`B ::= A\*(C'\fR,
this list of parses could go on forever.
The two rules \f(CW\*(C`A ::= B\*(C'\fR and \f(CW\*(C`B ::= A\*(C'\fR form what is called a \fBcycle\fR.
.PP
Typically, if a user has written an grammar with an infinite cycle,
it was a mistake and
he wants to rewrite it before proceeding.
By default, an infinitely ambiguous grammar is a fatal error.
This is the behavior most users will want.
.PP
To produce parse results from an infinitely ambiguous grammar,
the user must set
the grammar's
\&\f(CW\*(C`infinite_action\*(C'\fR
named argument
to a value other than "\f(CW\*(C`fatal\*(C'\fR\*(L".
The other choices are \*(R"\f(CW\*(C`warn\*(C'\fR\*(L"
and \*(R"\f(CW\*(C`quiet\*(C'\fR".
.SH "Cycle-free parse results"
.IX Header "Cycle-free parse results"
Obviously,
Marpa cannot list all of an infinite number of parse results.
When Marpa iterates through the parse results returned
by a grammar with cycles,
it produces only those which are cycle-free.
For examples, in the above list of derivations, Marpa
would return only
the parse result corresponding to this
derivation:
.PP
.Vb 1
\&    S \-> A \-> B \-> x
.Ve
.PP
More specifically, Marpa guarantees to eliminate
all parse results that contain nulling-sensitive cycles.
Intuitively, a nulling-sensitive cycle is a case
where the same rule, with the same pattern of nulled
and non-nulled symbols, is applied at the same
locations.
.PP
More carefully,
a \*(L"nulling-sensitive cycle\*(R"
is defined as a derivation which contains the same
nulling-sensitive rule instance
twice.
A \*(L"rule instance\*(R" is an application of a rule,
with the same start location,
and the same end location.
A \*(L"nulling-sensitive rule instance\*(R"
is a rule instance in a specific nulling variant.
\&\*(L"Nulling-indifferent rule instance\*(R"
is another term for \*(L"rule instance.\*(R"
.PP
\&\*(L"Nulling variants\*(R" apply to rules with properly nullable symbols.
When these rules are applied in a parse,
the properly nullable symbols will sometimes be nulled,
and sometimes not.
Each pattern of nulled and non-nulled symbols
is a nulling variant.
Note that Marpa does not implement empty rules
directly, so that there will never be a nulling
variant which creates an empty rule.
.PP
While the author expects Marpa
to continue to eliminate
cycles as defined by \*(L"rule instance\*(R",
applications should be prepared for Marpa's
elimination of parse results with cycles to change
in its treatment of null variants.
In particular, it is possible that Marpa may
switch to a system that treats parses as cycle-free
if and only if they contain no cycles as defined by
nulling-indifferent rule instance.
.SH "Copyright and License"
.IX Header "Copyright and License"
.Vb 5
\&  Copyright 2018 Jeffrey Kegler
\&  This file is part of Marpa::R2.  Marpa::R2 is free software: you can
\&  redistribute it and/or modify it under the terms of the GNU Lesser
\&  General Public License as published by the Free Software Foundation,
\&  either version 3 of the License, or (at your option) any later version.
\&
\&  Marpa::R2 is distributed in the hope that it will be useful,
\&  but WITHOUT ANY WARRANTY; without even the implied warranty of
\&  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
\&  Lesser General Public License for more details.
\&
\&  You should have received a copy of the GNU Lesser
\&  General Public License along with Marpa::R2.  If not, see
\&  http://www.gnu.org/licenses/.
.Ve
