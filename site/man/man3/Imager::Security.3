.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Imager::Security 3"
.TH Imager::Security 3 "2014-01-10" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Imager::Security \- brief notes on security and image processing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  # keep abreast of security updates
\&  apt\-get update && apt\-get upgrade
\&  yum upgrade
\&  pkgin update && pkgin upgrade
\&  # or local equivalent
\&
\&  # limit memory use
\&  use Imager;
\&  # only images that use up to 10MB
\&  Imager\->set_file_limits(bytes => 10_000_000);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
There's two basic security considerations when dealing with images
from an unknown source:
.IP "\(bu" 4
keeping your libraries up to date
.IP "\(bu" 4
limiting the amount of memory used to store images
.SS "Keeping libraries up to date"
.IX Subsection "Keeping libraries up to date"
Image file format libraries such as \f(CW\*(C`libpng\*(C'\fR or \f(CW\*(C`libtiff\*(C'\fR have
relatively frequent security updates, keeping your libraries up to
date is basic security.
.PP
If you're using user supplied fonts, you will need to keep your font
libraries up to date too.
.SS "Limiting memory used"
.IX Subsection "Limiting memory used"
With compression, and especially with pointer formats like \s-1TIFF,\s0 it's
possible to store very large images in a relatively small file.
.PP
If you're receiving image data from an untrusted source you should
limit the amount of memory that Imager can allocate for a read in
image file using the \f(CW\*(C`set_file_limits()\*(C'\fR method.
.PP
.Vb 1
\&  Imager\->set_file_limits(bytes => 10_000_000);
.Ve
.PP
You may also want to limit the maximum width and height of images read
from files:
.PP
.Vb 2
\&  Imager\->set_file_limits(width => 10_000, height => 10_000,
\&                          bytes => 10_000_000);
.Ve
.PP
This has no effect on images created without a file:
.PP
.Vb 2
\&  # succeeds
\&  my $image = Imager\->new(xsize => 10_001, ysize => 10_001);
.Ve
.PP
You can reset to the defaults with:
.PP
.Vb 1
\&  Imager\->set_file_limits(reset => 1);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Tony Cook <tonyc@cpan.org>
