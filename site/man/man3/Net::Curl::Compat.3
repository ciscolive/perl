.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Curl::Compat 3"
.TH Net::Curl::Compat 3 "2020-11-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Curl::Compat \-\- compatibility layer for WWW::Curl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& \-\-\- old.pl
\& +++ new.pl
\& @@ \-2,6 +2,8 @@
\&  use strict;
\&  use warnings;
\&
\& +# support both Net::Curl (default) and WWW::Curl
\& +BEGIN { eval { require Net::Curl::Compat; } }
\&  use WWW::Curl::Easy 4.15;
\&  use WWW::Curl::Multi;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::Curl::Compat lets you use Net::Curl in applications and modules
that normally use WWW::Curl. There are several ways to accomplish it:
.SS "\s-1EXECUTION\s0"
.IX Subsection "EXECUTION"
Execute an application through perl with \f(CW\*(C`\-MNet::Curl::Compat\*(C'\fR argument:
.PP
.Vb 1
\& perl \-MNet::Curl::Compat APPLICATION [ARGUMENTS]
.Ve
.SS "\s-1CODE,\s0 use Net::Curl by default"
.IX Subsection "CODE, use Net::Curl by default"
Add this line before including any WWW::Curl modules:
.PP
.Vb 1
\& BEGIN { eval { require Net::Curl::Compat; } }
.Ve
.PP
This will try to preload Net::Curl, but won't fail if it isn't available.
.SS "\s-1CODE,\s0 use WWW::Curl by default"
.IX Subsection "CODE, use WWW::Curl by default"
Add those lines before all the others that use WWW::Curl:
.PP
.Vb 4
\& BEGIN {
\&     eval { require WWW::Curl; }
\&     require Net::Curl::Compat if $@;
\& }
.Ve
.PP
This will try WWW::Curl first, but will fallback to Net::Curl if that fails.
.SH "NOTE"
.IX Header "NOTE"
If you want to write compatible code, \s-1DO NOT USE\s0 Net::Curl::Compat during
development. This module hides all the incompatibilities, but does not disable
any of the features that are unique to Net::Curl. You could end up using
methods that do not yet form part of official WWW::Curl distribution.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2011\-2015 Przemyslaw Iskra <sparky at pld\-linux.org>.
.PP
You may opt to use, copy, modify, merge, publish, distribute and/or sell
copies of the Software, and permit persons to whom the Software is furnished
to do so, under the terms of the \s-1MPL\s0 or the MIT/X\-derivate licenses. You may
pick one of these licenses.
