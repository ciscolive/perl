.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MozRepl::AnyEvent 3"
.TH MozRepl::AnyEvent 3 "2017-08-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MozRepl::AnyEvent \- AnyEvent\-enabled MozRepl client
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use MozRepl::RemoteObject;
\&  $ENV{ MOZREPL_CLASS } = \*(AqMozRepl::AnyEvent\*(Aq;
\&  my $bridge = MozRepl::RemoteObject\->install_bridge();
.Ve
.PP
This module provides a compatible \s-1API\s0 to MozRepl solely
for what MozRepl::RemoteObject uses. It does not
provide plugin support. If you want a fully compatible
AnyEvent-enabled MozRepl, please consider porting Net::Telnet
to AnyEvent::Handle.
.PP
Instead of using the process environment, you can also pass
the backend class using the \f(CW\*(C`repl_class\*(C'\fR parameter in the constructor:
.PP
.Vb 4
\&  use MozRepl::RemoteObject;
\&  my $bridge = MozRepl::RemoteObject\->install_bridge(
\&      repl_class => \*(AqMozRepl::AnyEvent\*(Aq,
\&  );
.Ve
.PP
The module in \f(CW\*(C`repl_class\*(C'\fR will be loaded through \f(CW\*(C`require\*(C'\fR. If the module
does not load, the fatal error will propagate. No fallbacks are tried.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """MozRepl::AnyEvent\->new( %options )"""
.el .SS "\f(CWMozRepl::AnyEvent\->new( %options )\fP"
.IX Subsection "MozRepl::AnyEvent->new( %options )"
Creates a new instance.
.PP
Options
.IP "\(bu" 4
\&\f(CW\*(C`log\*(C'\fR \- arrayref of log levels to enable
.Sp
Currently only \f(CW\*(C`debug\*(C'\fR is implemented, which will dump some information.
.Sp
.Vb 1
\&  log => [qw[debug],
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`hdl\*(C'\fR \- a premade AnyEvent::Handle to talk to Firefox (optional)
.IP "\(bu" 4
\&\f(CW\*(C`prompt\*(C'\fR \- the regex that defines the repl prompt to look for.
.Sp
Default is
.Sp
.Vb 1
\&  prompt => qr/^(?:\e.+>\es)*(repl\ed*)>\es+/m
.Ve
.ie n .SS """$repl\->log( $level, @info )"""
.el .SS "\f(CW$repl\->log( $level, @info )\fP"
.IX Subsection "$repl->log( $level, @info )"
Prints the information to \s-1STDERR\s0 if logging is enabled
for the level.
.ie n .SS """$repl\->setup_async( $options )"""
.el .SS "\f(CW$repl\->setup_async( $options )\fP"
.IX Subsection "$repl->setup_async( $options )"
.Vb 7
\&  my $repl = MozRepl::AnyEvent\->setup({
\&      client => { host => \*(Aqlocalhost\*(Aq,
\&                  port => 4242,
\&                },
\&       log   => [\*(Aqdebug\*(Aq],
\&       cv    => $cv,
\&  });
.Ve
.PP
Sets up the repl connection. See MozRepl::setup for detailed documentation.
.PP
The optional \s-1CV\s0 will get the repl through \f(CW\*(C`\->send()\*(C'\fR.
.PP
Returns the \s-1CV\s0 to wait on that signals when setup is done.
.ie n .SS """$repl\->setup(...)"""
.el .SS "\f(CW$repl\->setup(...)\fP"
.IX Subsection "$repl->setup(...)"
Synchronous version of \f(CW\*(C`\->setup_async\*(C'\fR, provided
for \s-1API\s0 compatibility. This one will do a \f(CW\*(C`\->recv\*(C'\fR call
inside.
.ie n .SS """$repl\->repl"""
.el .SS "\f(CW$repl\->repl\fP"
.IX Subsection "$repl->repl"
Returns the name of the repl in Firefox.
.ie n .SS """$repl\->hdl"""
.el .SS "\f(CW$repl\->hdl\fP"
.IX Subsection "$repl->hdl"
Returns the socket handle of the repl.
.ie n .SS """$repl\->execute_async( $command, $cb )"""
.el .SS "\f(CW$repl\->execute_async( $command, $cb )\fP"
.IX Subsection "$repl->execute_async( $command, $cb )"
.Vb 4
\&    my $cv = $repl\->execute_async( \*(Aq1+1\*(Aq );
\&    # do stuff
\&    my $two = $cv\->recv;
\&    print "1+1 is $two\en";
.Ve
.PP
Sends a command to Firefox for execution. Returns
the condvar to wait for the response.
.ie n .SS """$repl\->execute( ... )"""
.el .SS "\f(CW$repl\->execute( ... )\fP"
.IX Subsection "$repl->execute( ... )"
Synchronous version of \f(CW\*(C`\->execute_async\*(C'\fR. Internally
calls \f(CW\*(C`\->recv\*(C'\fR. Provided for \s-1API\s0 compatibility.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MozRepl for the module defining the \s-1API\s0
.PP
AnyEvent for AnyEvent
.SH "REPOSITORY"
.IX Header "REPOSITORY"
The public repository of this module is 
<http://github.com/Corion/mozrepl\-remoteobject>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR
.SH "COPYRIGHT (c)"
.IX Header "COPYRIGHT (c)"
Copyright 2009\-2012 by Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
This module is released under the same terms as Perl itself.
