.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Controller::REST 3"
.TH Mojolicious::Controller::REST 3 "2014-07-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Controller::REST \- Mojolicious Controller for RESTful operations
.SH "VERSION"
.IX Header "VERSION"
version 0.006
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # In Mojolicious Controller
\&    use Mojo::Base \*(AqMojolicious::Controller::REST\*(Aq;
\&    
\&    $self\->data( hello => \*(Aqworld\*(Aq )\->message(\*(AqSomething went wrong\*(Aq);
\&    
\&    # renders json response as:
\&    
\&    {
\&        "data":
\&        {
\&            "hello": "world"
\&        },
\&        "messages":
\&        [
\&            {
\&                "severity": "info",
\&                "text": "Something went wrong"
\&            }
\&        ]
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Controller::REST helps with \s-1JSON\s0 rendering in RESTful applications. It follows  
and ensures the output of the method in controller adheres to the following output format as \s-1JSON:\s0
.PP
.Vb 10
\&    {
\&        "data":
\&        {
\&            "<key1>": "<value1>",
\&            "<key2>": "<value2>",
\&            ...
\&        },
\&        "messages":
\&        [
\&            {
\&                "severity": "<warn|info>",
\&                "text": "<message1>"
\&            },
\&            {
\&                "severity": "<warn|info>",
\&                "text": "<message2>"
\&            },
\&            ...
\&        ]
\&    }
.Ve
.PP
Mojolicious::Controller::REST extends Mojolicious::Controller and adds below methods
.SH "METHODS"
.IX Header "METHODS"
.SS "data"
.IX Subsection "data"
Sets the data element in 'data' array in \s-1JSON\s0 output. Returns controller object so that
other method calls can be chained.
.SS "message"
.IX Subsection "message"
Sets an individual message in 'messages' array in \s-1JSON\s0 output. Returns controller object so that
other method calls can be chained.
.PP
A custom severity value can be used by calling message as:
.PP
.Vb 1
\&    $self\->message(\*(AqSomething went wrong\*(Aq, \*(Aqfatal\*(Aq);
\&
\&    # renders json response as:
\&    
\&    {
\&        "messages":
\&        [
\&            {
\&                "text": "Something went wrong",
\&                "severity": "fatal"
\&            }
\&        ]
\&    }
.Ve
.SS "message_warn"
.IX Subsection "message_warn"
Similar to message, but with severity = 'warn'. Returns controller object so that
other method calls can be chained.
.SS "status"
.IX Subsection "status"
Set the status of response. Returns controller object so that other methods can be chained.
.SH "AUTHOR"
.IX Header "AUTHOR"
Abhishek Shende <abhishekisnot@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Abhishek Shende.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
