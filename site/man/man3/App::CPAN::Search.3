.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search 3"
.TH Search 3 "2020-04-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::CPAN::Search \- Base class for cpan\-search script.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use App::CPAN::Search;
\&
\& my $app = App::CPAN::Search\->new;
\& my $exit_code = $app\->run;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 1
\& my $app = App::CPAN::Search\->new;
.Ve
.PP
Constructor.
.ie n .SS """run"""
.el .SS "\f(CWrun\fP"
.IX Subsection "run"
.Vb 1
\& my $exit_code = $app\->run;
.Ve
.PP
Run.
.PP
Returns 1 for error, 0 for success.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 2
\& use strict;
\& use warnings;
\&
\& use App::CPAN::Search;
\&
\& # Arguments.
\& @ARGV = (
\&         \*(AqLibrary\*(Aq,
\& );
\&
\& # Run.
\& exit App::CPAN::Search\->new\->run;
\&
\& # Output like:
\& # Reading \*(Aq/home/skim/.local/share/.cpan/Metadata\*(Aq
\& #   Database was generated on Tue, 29 Dec 2015 21:53:32 GMT
\& # Module id = Library::CallNumber::LC
\& #     CPAN_USERID  DBWELLS (Dan Wells <CENSORED>)
\& #     CPAN_VERSION 0.23
\& #     CPAN_FILE    D/DB/DBWELLS/Library\-CallNumber\-LC\-0.23.tar.gz
\& #     MANPAGE      Library::CallNumber::LC \- Deal with Library\-of\-Congress call numbers
\& #     INST_FILE    /home/skim/perl5/lib/perl5/Library/CallNumber/LC.pm
\& #     INST_VERSION 0.23
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
\&\s-1CPAN\s0,
Getopt::Std.
.SH "REPOSITORY"
.IX Header "REPOSITORY"
<https://github.com/michal\-josef\-spacek/App\-CPAN\-Search>
.SH "AUTHOR"
.IX Header "AUTHOR"
Michal Josef Špaček <mailto:skim@cpan.org>
.PP
<http://skim.cz>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
© 2015\-2020 Michal Josef Špaček
.PP
\&\s-1BSD\s0 2\-Clause License
.SH "VERSION"
.IX Header "VERSION"
0.04
