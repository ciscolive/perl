.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Record::TLSA 3"
.TH Infoblox::DNS::Record::TLSA 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Record::TLSA \- DNS TLSA record object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1TLSA DNS\s0 resource record (\s-1RR\s0) is used to associate a \s-1TLS\s0 server certificate or a public key with the domain name where the record is
found, thus forming a '\s-1TLSA\s0 certificate association'. For further details see \s-1RFC\-6698.\s0
.PP
Note that you must specify only one view for the attribute 'views'.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $tlsa = Infoblox::DNS::Record::TLSA\->new(
\&     name                  => $fqdn,                                                          # Required
\&     certificate_data      => $string,                                                        # Required
\&     certificate_usage     => $uint,                                                          # Required
\&     matched_type          => $uint,                                                          # Required
\&     selector              => $uint,                                                          # Required
\&     comment               => $string,                                                        # Optional / Default is empty
\&     disable               => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq                                                # Optional / Default \*(Aqfalse\*(Aq
\&     extattrs              => {$string => $extattr, ...},                                     # Optional / Default is undefined
\&     extensible_attributes => {$string => $string|$num, $string => [$string|$num, ...], ...}, # Optional / Default is undefined
\&     ttl                   => $num | undef,                                                   # Optional / Default is undefined
\&     views                 => [$View1],                                                       # Optional / Default is \*(Aqdefault\*(Aq view
\&     creator               => \*(AqDYNAMIC\*(Aq | \*(AqSTATIC\*(Aq,                                           # Optional / Default is \*(AqSTATIC\*(Aq
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to the object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 12
\& #Construct the object
\& my $object = Infoblox::DNS::Record::TLSA\->new(
\&     name              => \*(Aqtlsa.domain.com\*(Aq,
\&     certificate_data  => \*(Aq1234FFFFEEEE\*(Aq,
\&     certificate_usage => 0,
\&     matched_type      => 0,
\&     selector          => 0,
\&     comment           => \*(Aqadd TLSA tlsa.domain.com\*(Aq,
\&     disable           => \*(Aqfalse\*(Aq,
\&     ttl               => \*(Aq360\*(Aq,
\&     views             => [$view1],
\& );
\&
\& #Submit for addition
\& my $response = $session\->add($object);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DNS TLSA object:
\&
\&  name                  \- Optional. Host name in string format.
\&  view                  \- Optional. The DNS view in which the TLSA record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&  certificate_data      \- Optional. The certificate hash or actual data of the TLSA record in hexadecimal string format.
\&  creator               \- Optional. Record creator.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DNS::Record::TLSA\*(Aq,
\&     name   => \*(Aqtlsa.domain.com\*(Aq,
\&     view   => \*(Aqdefault\*(Aq );
\&
\& #Get all DNS TLSA records from the \*(Aqdomain.com\*(Aq zone of the default view
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DNS::Record::TLSA\*(Aq,
\&     zone   => \*(Aqdomain.com\*(Aq,
\&     view   => \*(Aqdefault\*(Aq );
\&
\& #Get all DNS TLSA records with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DNS::Record::TLSA\*(Aq,
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Use the following method to modify the comment.
\& $object\->comment(\*(AqThis is a modified comment\*(Aq);
\&
\& #Submit modification
\& my $response = $session\->modify($object);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DNS::Record::TLSA\*(Aq,
\&     name   => \*(Aqtlsa.domain.com\*(Aq,
\&     view   => \*(Aqdefault\*(Aq );
\&
\& #Find the desired object from the retrieved list.
\& my $desired_object = $retrieved_objs[0];
\&
\& #Submit for removal
\& my $response = $session\->remove($desired_object);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DNS TLSA record object:
\&
\&  name                  \- Optional. A name in FQDN (Fully Qualified Domain Name) format (regular expression).
\&  view                  \- Optional. The DNS view in which the TLSA record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&  zone                  \- Optional. A zone name in FQDN format.
\&  comment               \- Optional. A comment in string format (regular expression).
\&  certificate_data      \- Optional. The certificate hash or actual data of the TLSA record in hexadecimal string format (regular expression). In upper case only.
\&  creator               \- Optional. Record creator.
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Search for all DNS TLSA objects that match \*(Aqdomain.com\*(Aq in the default DNS view
\& my @retrieved_objs = $session\->search(
\&     object => \*(AqInfoblox::DNS::Record::TLSA\*(Aq,
\&     name   => \*(Aqdomain\e.com\*(Aq,
\&     view   => \*(Aqdefault\*(Aq );
\&
\& #Search for all DNS TLSA records in the \*(Aqdomain.com\*(Aq zone of the default view
\& my @retrieved_objs = $session\->search(
\&     object => \*(AqInfoblox::DNS::Record::TLSA\*(Aq,
\&     zone   => \*(Aqdomain.com\*(Aq,
\&     view   => \*(Aqdefault\*(Aq );
\&
\& #Search for all DNS TLSA records with a given extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => \*(AqInfoblox::DNS::Record::TLSA\*(Aq,
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a \s-1TLSA\s0 record.
.SS "certificate_data( )"
.IX Subsection "certificate_data( )"
.RS 4
Use this method to set or retrieve the certificate association data.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Hexadecimal dump of either the raw certificate data for matched_type 0, or the hash calculated on the raw data for matched_type 1 and 2 in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get certificate_data value
\& my $value = $object\->certificate_data();
\&
\& #Modify certificate_data value
\& $object\->certificate_data(\*(AqDEA033FFEEAA3256FFADAAA3333111\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "certificate_usage( )"
.IX Subsection "certificate_usage( )"
.RS 4
Use this method to set or retrieve the value that specifies (as per \s-1RFE\-6698\s0) the provided certificate association data.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 0 and 255.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get certificate_usage value
\& my $value = $object\->certificate_usage();
\&
\& #Modify certificate_usage value
\& $object\->certificate_usage(0);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get comment value
\& my $value = $object\->comment();
\&
\& #Modify comment value
\& $object\->comment(\*(AqModifying the comment\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to retrieve cloud \s-1API\s0 related information for the Infoblox::DNS::Record::TLSA object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get cloud_info value
\& my $value = $object\->cloud_info();
.Ve
.RE
.RS 4
.RE
.SS "creator( )"
.IX Subsection "creator( )"
.RS 4
Use this method to set or retrieve the record creator.
.Sp
Note that changing creator from or to '\s-1SYSTEM\s0' value is not allowed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParamter\fR" 4
.IX Item "Paramter"
The valid values are '\s-1STATIC\s0' and '\s-1DYNAMIC\s0'. The default value is '\s-1STATIC\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get creator value
\& my $value = $object\->creator();
\&
\& #Modify creator value
\& $object\->creator(\*(AqDYNAMIC\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag for a \s-1DNS\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false. The \s-1DNS\s0 record is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to set the disable flag or 'false' to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get disable value
\& my $value = $object\->disable();
\&
\& #Modify disable value
\& $object\->disable(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "dns_name( )"
.IX Subsection "dns_name( )"
.RS 4
Use this method to retrieve the name in punycode format. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get dns_name value
\& my $value = $object\->dns_name();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS TLSA\s0 record object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get extattrs value
\& my $value = $object\->extattrs();
\&
\& #Modify extattrs value
\& $object\->extattrs({\*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2});
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS TLSA\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get extensible_attributes value
\& my $value = $object\->extensible_attributes();
\&
\& #Modify extensible_attributes value
\& $object\->extensible_attributes({\*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [\*(AqPeter\*(Aq, \*(AqTom\*(Aq]});
.Ve
.RE
.RS 4
.RE
.SS "matched_type( )"
.IX Subsection "matched_type( )"
.RS 4
Use this method to set or retrieve the value that specifies (as per \s-1RFE\-6698\s0) the format to display the certificate association data.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 0 and 255.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get matched_type value
\& my $value = $object\->matched_type();
\&
\& #Modify matched_type value
\& $object\->matched_type(0);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the \s-1DNS TLSA\s0 object in Fully Qualified Domain Name (\s-1FQDN\s0) format. The name can have a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name value
\& my $value = $object\->name();
\&
\& #Modify name value
\& $object\->name(\*(Aqnew.domain.com\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "selector( )"
.IX Subsection "selector( )"
.RS 4
Use this method to set or retrieve the value that specifies (as per \s-1RFE\-6698\s0) which part of the \s-1TLS\s0 certificate
presented by the server will be matched against the association data.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 0 and 255.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get selector value
\& my $value = $object\->selector();
\&
\& #Modify selector value
\& $object\->selector(0);
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to set or retrieve the Time to Live (\s-1TTL\s0) value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is undefined which indicates that the record inherits the \s-1TTL\s0 value of the zone.
.Sp
Specify a \s-1TTL\s0 value to override the \s-1TTL\s0 value at the zone level.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration in seconds to cache the record. Zero indicates that the record should not be cached.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ttl value
\& my $value = $object\->ttl();
\&
\& #Modify ttl value
\& $object\->ttl(1800);
\&
\& #Un\-override ttl
\& $object\->ttl(undef);
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to set or retrieve the view of a \s-1TLSA\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the 'default' view, which means that the \s-1TLSA\s0 record is located under the default view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference of defined Infoblox::DNS::View objects.
.Sp
Note that the array size must be 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get views value
\& my $value = $object\->views();
\&
\& #Modify views value
\& $object\->views([$view1]);
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of a \s-1DNS TLSA\s0 record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get zone value
\& my $zone = $object\->zone();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied on an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DNS TLSA\s0 record insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session on the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\&                );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the zone prior to a TLSA record insertion
\& my $zone = Infoblox::DNS::Zone\->new(name => "domain.com");
\& unless ($zone) {
\&        die("Construct zone failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& #Verify if the zone exists
\& my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "domain.com");
\& unless ($object) {
\&        print "Zone does not exist on the server, safe to add the zone\en";
\&        $session\->add($zone)
\&                or die("Add zone failed: ",
\&                                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Zone added successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DNS TLSA\s0 record\fR
.PP
.Vb 8
\& my $bind_tlsa = Infoblox::DNS::Record::TLSA\->new(
\&                name              => "tlsa.domain.com",
\&                comment           => "add TLSA tlsa.domain.com",
\&                certificate_data  => \*(Aq033FFEEAA3256FFADAAA3333\*(Aq,
\&                certificate_usage => 0,
\&                matched_type      => 0,
\&                selector          => 0,
\&                );
\&
\& unless ($bind_tlsa) {
\&        die("Construct DNS record TLSA failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& #Add the DNS TLSA record object to the Infoblox appliance through a session
\& $session\->add($bind_tlsa)
\&        or die("Add record TLSA failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS TLSA object is added to the server successfully\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS TLSA\s0 record\fR
.PP
.Vb 6
\& #Search all TLSA records in the zone that matches "domain.com"
\& my @retrieved_objs = $session\->search(
\&                object => "Infoblox::DNS::Record::TLSA",
\&                name   => \*(Aqdomain\e.com\*(Aq
\&                );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search record TLSA failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search a DNS TLSA object found at least 1 matching entry\en";
\&
\& #Search all TLSA records with names that start with "tlsa" and end with "domain.com"
\& my @retrieved_objs = $session\->search(
\&                object => "Infoblox::DNS::Record::TLSA",
\&                name   => \*(Aq^tlsa.*\e.domain\e.com\e$\*(Aq
\&                );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search record TLSA failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search a DNS TLSA object using regexp found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS TLSA\s0 record\fR
.PP
.Vb 6
\& #Get a TLSA record through the session
\& my @retrieved_objs = $session\->get(
\&                object => "Infoblox::DNS::Record::TLSA",
\&                name   => "tlsa.domain.com"
\&                );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Get record TLSA failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get a DNS TLSA object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified TLSA record
\& $object\->comment("this is new comment string");
\&
\& #Apply the changes
\& $session\->modify($object)
\&        or die("Modify record TLSA failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS TLSA object modified successfully \en";
.Ve
.PP
\&\fB#Remove a \s-1DNS TLSA\s0 record\fR
.PP
.Vb 11
\& #Get TLSA record through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Record::TLSA",
\&     name   => "tlsa.domain.com"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get record TLSA failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DNS TLSA object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&        or die("Remove record TLSA failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "DNS TLSA object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session\->\fBadd()\fR,
Infoblox::Session\->\fBget()\fR,
Infoblox::Session\->\fBmodify()\fR,
Infoblox::Session\->\fBremove()\fR,
Infoblox::Session\->\fBsearch()\fR,
Infoblox::Session,
Infoblox::DNS::View,
Infoblox::DNS::Zone
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 175:" 4
.IX Item "Around line 175:"
alternative text 'Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes' contains non-escaped | or /
.IP "Around line 460:" 4
.IX Item "Around line 460:"
alternative text 'Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values' contains non-escaped | or /
