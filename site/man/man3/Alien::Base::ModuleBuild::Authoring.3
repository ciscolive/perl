.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Alien::Base::ModuleBuild::Authoring 3"
.TH Alien::Base::ModuleBuild::Authoring 3 "2020-10-08" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Alien::Base::ModuleBuild::Authoring \- Authoring an "Alien::" module using Alien::Base::ModuleBuild
.SH "VERSION"
.IX Header "VERSION"
version 1.15
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1NOTE\s0\fR: Please consider for new development of Aliens that you use
Alien::Build and alienfile instead.  Like Alien::Base::ModuleBuild they work
with Alien::Base.  Unlike Alien::Base::Module::Build they are more easily customized
and handle a number of corner cases better.  For a good place to start,
please see Alien::Build::Manual::AlienAuthor.  Although the 
Alien-Base / Alien-Build team will continue to maintain this module,
(we will continue to fix bugs where appropriate), we aren't adding any
new features to this module.
.PP
Congratulations! You have made the decision to help the Perl community by providing a C library via \s-1CPAN.\s0 The Alien namespace has been instrumental in providing C libraries for many years, but authoring those modules has been a commitment that most authors weren't willing to take on. Alien::Base tries to ease that pain by providing most of the needed functionality; usually authors should only need a little boilerplate and configuration!
.SH "STATUS"
.IX Header "STATUS"
Alien::Base is under active development.  The \s-1API\s0 is relatively 
stable, although breaking changes may be introduced if the rewards are 
deemed greater than the pains that they produce.
.SH "ECOSYSTEM"
.IX Header "ECOSYSTEM"
The Alien::Base ecosystem is made up of several elements. Some of these elements are the base classes in the distribution itself. Of course, no ecosystem is complete without inhabitants, therefore, it is also important to consider the users of these base classes. This documentation will assume that you are writing \f(CW\*(C`Alien::MyLibrary\*(C'\fR which provides \fIlibmylibrary.so\fR. Further it will assume that you or someone else is going to use this module/library to write \f(CW\*(C`Some::Module::MyLibrary\*(C'\fR. Finally an end user might use that module to write \fImyscript.pl\fR.
.SS "Alien::Base::ModuleBuild"
.IX Subsection "Alien::Base::ModuleBuild"
Alien::Base::ModuleBuild provides a base class, utility methods and configuration handling for the build/install phase of the library. It is itself a subclass of Module::Build, which is what supports the building and installing of the surrounding \f(CW\*(C`Alien::\*(C'\fR module. \f(CW\*(C`Alien::MyLibrary\*(C'\fR's \fIBuild.PL\fR file will use Alien::Base::ModuleBuild to create its builder object.
.PP
.Vb 4
\& # file: Alien\-MyLibrary/Build.PL
\& use Alien::Base::ModuleBuild;
\& my $builder = Alien::Base::ModuleBuild\->new(...);
\& $builder\->create_build_script;
.Ve
.PP
This is just like you would do for Module::Build, except that there will be a few additional configuration parameters (see Alien::Base::ModuleBuild::API).
.PP
Alien::Base::ModuleBuild adds the additional build actions \f(CW\*(C`alien_code\*(C'\fR and \f(CW\*(C`alien_install\*(C'\fR. These actions need never be run directly, the usual \f(CW\*(C`build\*(C'\fR action (usually seen as \f(CW\*(C`./Build\*(C'\fR) and \f(CW\*(C`install\*(C'\fR (\f(CW\*(C`./Build install\*(C'\fR) will call them for you. The \f(CW\*(C`alien_code\*(C'\fR action is responsible for finding, downloading, extracting and building the external library (the commands specified in builder parameter \f(CW\*(C`alien_build_commands\*(C'\fR). The \f(CW\*(C`alien_install\*(C'\fR action is responsible for installing the library into its final destination.
.PP
The \f(CW\*(C`./Build test\*(C'\fR command will invoke any library tests specified in \f(CW\*(C`alien_test_commands\*(C'\fR, though none are defined by default. Finally \f(CW\*(C`./Build install\*(C'\fR will invoke whatever \f(CW\*(C`alien_install_commands\*(C'\fR were specified.
.SS "Alien::Base"
.IX Subsection "Alien::Base"
Alien::Base is the base class of \f(CW\*(C`Alien::MyLibrary\*(C'\fR. In this context, Alien::Base has two distinct uses. First it is used by \f(CW\*(C`Alien::MyLibrary\*(C'\fR to provide the build information/flags for building \f(CW\*(C`Some::Module::MyLibrary\*(C'\fR. Secondly it is used (again through \f(CW\*(C`Alien::MyLibrary\*(C'\fR) to provide run-time access to \fIlibmylibrary.so\fR to \f(CW\*(C`Some::Module::MyLibrary\*(C'\fR.
.PP
\fIAlien::Base for Building\fR
.IX Subsection "Alien::Base for Building"
.PP
\&\f(CW\*(C`Alien::MyLibrary\*(C'\fR is called by \f(CW\*(C`Some::Library::MyLibrary\*(C'\fR's build script, either \fIBuild.PL\fR or \fIMakefile.PL\fR. Most of the functionality can be utilized through class method calls, though creating an object can save a few keystrokes.
.PP
.Vb 3
\& # file: Some\-Module\-MyLibrary/Build.PL
\& use Module::Build;
\& use Alien::MyLibrary;
\&
\& my $alien = Alien::MyLibrary\->new;
\& my $builder = Module::Build\->new(
\&   ...
\&   extra_compiler_flags => $alien\->cflags(),
\&   extra_linker_flags   => $alien\->libs(),
\& );
\& $builder\->create_build_script;
.Ve
.PP
Additional information can be gotten from the \f(CW\*(C`config\*(C'\fR method.
.PP
\fIAlien::Base for Run-Time Provision\fR
.IX Subsection "Alien::Base for Run-Time Provision"
.PP
\&\f(CW\*(C`Alien::MyLibrary\*(C'\fR must be a subclass of Alien::Base. This provides the \f(CW\*(C`import\*(C'\fR method, which does the run-time provisioning so that when the \s-1XS\s0 file is loaded, it can find \fIlibmylibrary.so\fR. The \f(CW\*(C`import\*(C'\fR method does this by pre-loading the library via \f(CW\*(C`DynaLoader::dl_load_file\*(C'\fR which is a platform-independent wrapper for \f(CW\*(C`dlopen\*(C'\fR or your system's equivalent. It no longer appends to \f(CW$ENV{LD_RUN_PATH}\fR.
.PP
.Vb 2
\& # file: Alien\-MyLibrary/lib/Alien/MyLibrary.pm
\& package Alien::MyLibrary;
\&
\& use parent \*(AqAlien::Base\*(Aq;
\&
\& 1;
.Ve
.PP
Finally, \f(CW\*(C`Alien::MyLibrary\*(C'\fR must also be called by \f(CW\*(C`Some::Library::MyLibrary\*(C'\fR before \f(CW\*(C`DynaLoader::bootstrap\*(C'\fR or \f(CW\*(C`XSLoader::load\*(C'\fR. The \f(CW\*(C`use\*(C'\fR directive is recommended, however if you must use \f(CW\*(C`require\*(C'\fR then be sure to call the \f(CW\*(C`import\*(C'\fR method too. Without this \f(CW\*(C`import\*(C'\fR call, the loader doesn't know where to find \fIlibmylibrary.so\fR.
.PP
.Vb 2
\& # file: Some\-Module\-MyLibrary/lib/Some/Module/MyLibrary.pm
\& package Some::Module::MyLibrary;
\&
\& use Alien::MyLibrary;
\& our $VERSION = \*(Aq0.54\*(Aq;
\&
\& require XSLoader;
\& XSLoader::load(\*(AqSome::Module::MyLibrary\*(Aq, $VERSION);
\&
\& # your code
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The example code that was housed in this distribution during alpha phase has been moved to two different \s-1CPAN\s0 distributions. Those are:
.IP "\(bu" 4
Acme::Alien::DontPanic \*(-- An example \f(CW\*(C`Alien::\*(C'\fR module which provides \fIlibdontpanic.so\fR. It provides the C function \f(CW\*(C`answer\*(C'\fR which is simply:
.Sp
.Vb 1
\& int answer () { return 42 }
.Ve
.IP "\(bu" 4
Acme::Ford::Prefect \*(-- An \s-1XS\s0 module which provides the Perl-level access to \f(CW\*(C`answer\*(C'\fR. It relies on \fIlibdontpanic.so\fR and uses Acme::Alien::DontPanic to locate/load it.
.PP
Additionally, there exist in-production \f(CW\*(C`Alien::\*(C'\fR distributions that serve as de-facto tests of Alien::Base's networking components:
.IP "\(bu" 4
Alien::LibYAML \*(-- Builds and installs \fIlibyaml\fR, acquiring the library archive from its hosted location via \f(CW\*(C`Alien::Base::Repository::HTTP\*(C'\fR.
.IP "\(bu" 4
Alien::GSL \*(-- Builds and installs \fIlibgsl\fR, acquiring the library source archive via \f(CW\*(C`Alien::Base::Repository::FTP\*(C'\fR.
.IP "\(bu" 4
Alien::gmake \*(-- Builds and installs \s-1GNU\s0 make.  Rather than being a library, this is a tool used to build other tools and libraries.  It is useful for other Alien modules that require the \s-1GNU\s0 version of make.  It also demonstrates the use of Alien::Base for providing tools rather than libraries.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Module::Build
.IP "\(bu" 4
Alien
.IP "\(bu" 4
Alien::Base
.IP "\(bu" 4
Alien::Base::FAQ
.SH "AUTHOR"
.IX Header "AUTHOR"
Original author: Joel A Berger <joel.a.berger@gmail.com>
.PP
Current maintainer: Graham Ollis <plicease@cpan.org>
.PP
Contributors:
.PP
David Mertens (run4flat)
.PP
Mark Nunberg (mordy, mnunberg)
.PP
Christian Walde (Mithaldu)
.PP
Brian Wightman (MidLifeXis)
.PP
Graham Ollis (plicease)
.PP
Zaki Mughal (zmughal)
.PP
mohawk2
.PP
Vikas N Kumar (vikasnkumar)
.PP
Flavio Poletti (polettix)
.PP
Salvador Fandin\*~o (salva)
.PP
Gianni Ceccarelli (dakkar)
.PP
Pavel Shaydo (zwon, trinitum)
.PP
Kang-min Liu (\s-1XXX,\s0 gugod)
.PP
Nicholas Shipp (nshp)
.PP
Petr Pisar (ppisar)
.PP
Alberto Simo\*~es (ambs)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012\-2020 by Joel A Berger.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
