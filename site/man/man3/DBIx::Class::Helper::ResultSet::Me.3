.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Helper::ResultSet::Me 3"
.TH DBIx::Class::Helper::ResultSet::Me 3 "2020-03-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Helper::ResultSet::Me \- Define predefined searches more nicely
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& # note that this is normally a component for a ResultSet
\& package MySchema::ResultSet::Bar;
\&
\& use strict;
\& use warnings;
\&
\& use parent \*(AqDBIx::Class::ResultSet\*(Aq;
\&
\& use constant CANDY => 1;
\&
\& _\|_PACKAGE_\|_\->load_components(\*(AqHelper::ResultSet::Me\*(Aq);
\&
\& sub candy {
\&    $_[0]\->search({ $_[0]\->me.\*(Aqtype\*(Aq => CANDY })
\& }
\&
\& sub cake {
\&    $_[0]\->search({ $_[0]\->me(\*(Aqtype\*(Aq) => CAKE })
\& }
\&
\& # in code using resultset:
\& my $candy_bars = $schema\->resultset(\*(AqBar\*(Aq)\->candy;
\& my $cake_bars  = $schema\->resultset(\*(AqBar\*(Aq)\->cake;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This component allows slightly nicer predefined search definition.  See
\&\*(L"\s-1NOTE\*(R"\s0 in DBIx::Class::Helper::ResultSet for a nice way to apply it to your
entire schema.
.PP
It defines a single method that is shorter and (to most) clearer than
\&\*(L"current_source_alias\*(R" in DBIx::Class::ResultSet, which is what it uses
for the \*(L"me\*(R" method.
.SH "METHODS"
.IX Header "METHODS"
.SS "me"
.IX Subsection "me"
Merely returns the \s-1SQL\s0 namespace for the current search with a \f(CW\*(C`.\*(C'\fR at the end,
allowing internal resultset methods to be defined with \f(CW\*(C`$self\->me\*(C'\fR instead
of \f(CW\*(C`$self\->current_source_alias . q(.)\*(C'\fR.  Also, if you pass it a single
argument it will append that to the returned string.
.SH "AUTHOR"
.IX Header "AUTHOR"
Arthur Axel \*(L"fREW\*(R" Schmidt <frioux+cpan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Arthur Axel \*(L"fREW\*(R" Schmidt.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
