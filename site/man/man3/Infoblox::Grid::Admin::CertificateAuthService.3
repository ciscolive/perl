.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Admin::CertificateAuthService 3"
.TH Infoblox::Grid::Admin::CertificateAuthService 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Admin::CertificateAuthService \- a Certificate Authentication Service.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An Infoblox::Grid::Admin::CertificateAuthService object represents a Certificate Authentication Service.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $auth_service = Infoblox::Grid::Admin::CertificateAuthService\->new(
\&     name                  => $string,                          # Required
\&     ca_certificates       => [$certificate1, ...],             # Required
\&     ocsp_responders       => [$responder1, ...],               # Required unless ocsp_check is "DISABLED" or "AIA_ONLY"
\&     disabled              => "true" | "false",                 # Optional / Default value is "false"
\&     comment               => $string,                          # Optional / Default value is empty
\&     trust_model           => "DIRECT" | "DELEGATED",           # Optional / Default value is "DIRECT"
\&     recovery_interval     => $uint,                            # Optional / Default value is 30
\&     max_retries           => $uint,                            # Optional / Default value is 0
\&     response_timeout      => $uint,                            # Optional / Default value is 1000
\&     auto_populate_login   => "SERIAL_NUMBER" | "S_DN_CN" | "S_DN_EMAIL" | "SAN_UPN" | "SAN_EMAIL" | "AD_SUBJECT_ISSUER" # Optional / Default value is "S_DN_CN"
\&     enable_password_request => "true" | "false",               # Optional / Default value is "true"
\&     user_match_type       => "DIRECT_MATCH" | "AUTO_MATCH",    # Optional / Default value is "AUTO_MATCH"
\&     ocsp_check            => "MANUAL" | "AIA_ONLY" | "AIA_AND_MANUAL" | "DISABLED", # Optional / Default value is "MANUAL"
\&     client_cert_subject   => $string,                          # Optional / Default value is \*(AqDC=com\*(Aq
\&     enable_remote_lookup  => "true" | "false",                 # Optional / Default value is "false"
\&     remote_lookup_service => $auth_server,                     # Optional / Default value is undefined
\&     remote_lookup_username => $string,                         # Optional / Default value is undefined
\&     remote_lookup_password => $string,                         # Optional / Default value is undefined
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a Certificate Authentication Service object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct an object
\& my $auth_service = Infoblox::Grid::Admin::CertificateAuthService\->new(
\&     name            => \*(Aqcas\*(Aq,
\&     ca_certificates => [$ca1, $ca2],
\&     ocsp_responders => [$responder],
\&
\& #Submit for addition
\& my $response = $session\->add($auth_service);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific Certificate Authentication Service object:
\& 
\& name                   \- Optional. The name of the Certificate Authentication Service in string format.
\& disabled               \- Optional. The boolean flag that shows whether the Certificate Authentication Service is enabled or disabled.
\& user_match_type        \- Optional. The Certificate Authentication Service user match type in enum format.
\& ocsp_check             \- Optional. The Certificate Authentication Service ocsp check in enum format.
\& client_cert_subject    \- Optional. The Certificate Authentication Service client certification subject in string format.
\& remote_lookup_username \- Optional. The Certificate Authentication Service remote lookup username in string format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&      object => \*(AqInfoblox::Grid::Admin::CertificateAuthService\*(Aq,
\&      name   => \*(Aqocsp\*(Aq,
\& );
\&
\& my @retrieved_objs = $session\->get(
\&      object   => \*(AqInfoblox::Grid::Admin::CertificateAuthService\*(Aq,
\&      disabled => \*(Aqfalse\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object on the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Use this method to modify the comment of a Certificate Authentication Service object
\& $auth_service\->comment(\*(AqThis is modified Certificate Authentication Service object\*(Aq);
\&
\& # Submit modification
\& my $response = $session\->modify($auth_service);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR to retrieve the object, and then submit it for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Get the objects with the specified name.
\& my @retrieved_objs = $session\->get(
\&      object => \*(AqInfoblox::Grid::Admin::CertificateAuthService\*(Aq,
\&      name   => \*(Aqocsp\*(Aq,
\& );
\&
\& #Find the desired object on the retrieved list.
\& my $desired_auth_service = $retrieved_objs[0];
\&
\& # Submit for removal
\& my $response = $session\->remove($desired_auth_service);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific Certificate Authentication Service object:
\& 
\& name                   \- Optional. The name of the Certificate Authentication Service in string format.
\& disabled               \- Optional. The boolean flag that shows whether the Certificate Authentication Service is enabled or disabled.
\& user_match_type        \- Optional. The Certificate Authentication Service user match type in enum format.
\& ocsp_check             \- Optional. The Certificate Authentication Service ocsp check in enum format.
\& client_cert_subject    \- Optional. The Certificate Authentication Service client certification subject in string format.
\& remote_lookup_username \- Optional. The Certificate Authentication Service remote lookup username in string format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->search(
\&      object => \*(AqInfoblox::Grid::Admin::CertificateAuthService\*(Aq,
\&      name   => \*(Aqocsp\*(Aq,
\& );
\&
\& my @retrieved_objs = $session\->search(
\&      object   => \*(AqInfoblox::Grid::Admin::CertificateAuthService\*(Aq,
\&      disabled => \*(Aqfalse\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a Certificate Authentication Service object.
.SS "auto_populate_login( )"
.IX Subsection "auto_populate_login( )"
.RS 4
Use this method to set or retrieve a parameter that specifies the client certificate value to auto-populate the \s-1NIOS\s0 login name field.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The method returns either of these attribute values: \*(L"\s-1SERIAL_NUMBER\*(R", \*(L"S_DN_CN\*(R", \*(L"S_DN_EMAIL\*(R", \*(L"SAN_UPN\*(R", \*(L"SAN_EMAIL\*(R"\s0 or \*(L"\s-1AD_SUBJECT_ISSUER\*(R".\s0 The default value is \*(L"S_DN_CN\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get auto_populate_login
\& my $auto_populate_login = $auth_service\->auto_populate_login();
\&
\& #Set auto_populate_login
\& $auth_service\->auto_populate_login(\*(AqSERIAL_NUMBER\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ca_certificates( )"
.IX Subsection "ca_certificates( )"
.RS 4
Use this method to set or retrieve the list of \s-1CA\s0 certificates in the Certificate Authentication Service object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::Grid::CACertificate object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ca_certificates value
\& my $ca_certificates = $auth_service\->ca_certificates();
\&
\& #Modify ca_certificates
\&
\& #Retrieve the existing certificate
\& my $certificate = $session\->get(
\&     object => \*(AqInfoblox::Grid::CACertificate\*(Aq,
\&     serial => \*(Aqe76227f314c0f3db\*(Aq,
\& );
\&
\& #Modify ca_certificates value
\& $auth_service\->ca_certificates([$certificate]);
.Ve
.RE
.RS 4
.RE
.SS "client_cert_subject( )"
.IX Subsection "client_cert_subject( )"
.RS 4
Use this method to set or retrieve a parameter that associates a client certificate subject with a specific certificate group.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The client certificate subject name in string format. The default value is \*(L"DC=com\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get client_cert_subject
\& my $client_cert_subject = $auth_service\->client_cert_subject();
\&
\& #Set client_cert_subject
\& $auth_service\->client_cert_subject(\*(AqC=US\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get comment
\& my $comment = $auth_service\->comment();
\&
\& #Modify comment
\& $auth_service\->comment("Modified comment");
.Ve
.RE
.RS 4
.RE
.SS "disabled( )"
.IX Subsection "disabled( )"
.RS 4
Use this method to set or retrieve the disabled flag for the Certificate Authentication Service.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to disable the Certificate Authentication Service or \*(L"false\*(R" to enable it. Default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value as \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get disabled flag
\& my $disabled = $auth_service\->disabled();
\&
\& #Modify disabled flag
\& $auth_service\->disabled("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_password_request( )"
.IX Subsection "enable_password_request( )"
.RS 4
Use this method to set or retrieve the flag that shows whether the username/password authentication together with certificate based is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the username/password authentication together with certificate based or \*(L"false\*(R" to disable it. Default value is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value as \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_password_request flag
\& my $enable_password_request = $auth_service\->enable_password_request();
\&
\& #Modify enable_password_request flag
\& $auth_service\->enable_password_request("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_remote_lookup( )"
.IX Subsection "enable_remote_lookup( )"
.RS 4
Use this method to set or retrieve the flag that shows whether the lookup for users group membership info on remote services is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the lookup for users group membership info on remote services or \*(L"false\*(R" to disable it. Default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value as \*(L"true\*(R" or \*(L"false\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_remote_lookup flag
\& my $enable_remote_lookup = $auth_service\->enable_remote_lookup();
\&
\& #Modify enable_remote_lookup flag
\& $auth_service\->enable_remote_lookup("true");
.Ve
.RE
.RS 4
.RE
.SS "max_retries( )"
.IX Subsection "max_retries( )"
.RS 4
Use this method to set or retrieve the number of validation retries before the appliance moves on to the next \s-1OCSP\s0 responder.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An unsigned integer. Default value is 0.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get max_retries
\& my $max_retries = $auth_service\->max_retries();
\&
\& #Modify max_retries
\& $auth_service\->max_retries(1);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the Certificate Authentication Service name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The Certificate Authentication Service name in string format. The default value is \*(L"Cert auth service\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name
\& my $name = $auth_service\->name();
\&
\& #Modify comment
\& $auth_service\->name("New cert group");
.Ve
.RE
.RS 4
.RE
.SS "ocsp_check( )"
.IX Subsection "ocsp_check( )"
.RS 4
Use this method to set or retrieve the source of \s-1OCSP\s0 settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the parameter can be \*(L"\s-1MANUAL\*(R", \*(L"AIA_ONLY\*(R", \*(L"AIA_AND_MANUAL\*(R"\s0 or \*(L"\s-1DISABLED\*(R".\s0  The default value is \*(L"\s-1MANUAL\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ocsp_check
\& my $ocsp_check = $auth_service\->ocsp_check();
\&
\& #Set ocsp_check
\& $auth_service\->ocsp_check(\*(AqDISABLED\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ocsp_responders( )"
.IX Subsection "ocsp_responders( )"
.RS 4
Use this method to set or retrieve the list of \s-1OCSP\s0 responders in the Certificate Authentication Service object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains  Infoblox::OCSP::Responder object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ocsp_responders
\& my $responder_list = $auth_service\->ocsp_responders();
\&
\& #Modify ocsp_responders
\& my $responder1 = Infoblox::OCSP::Responder\->new(
\&      fqdn_or_ip  => \*(Aqdomain.com\*(Aq,
\&      certificate => \*(Aq/tmp/cert1.pem\*(Aq,
\& );
\&
\& my $responder2 = Infoblox::OCSP::Responder\->new(
\&      fqdn_or_ip  => \*(Aq192.168.1.10\*(Aq,
\&      certificate => \*(Aq/tmp/cert2.pem\*(Aq,
\& );
\&
\& $auth_service\->ocsp_responders([$responder1, $responder2]);
.Ve
.RE
.RS 4
.RE
.SS "recovery_interval( )"
.IX Subsection "recovery_interval( )"
.RS 4
Use this method to set or retrieve the specified period of time the appliance waits before retrying a responder that has been offline. The value must be between 1 and 600 seconds.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An unsigned integer. Default value is 30.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get recovery_interval
\& my $recovery_interval = $auth_service\->recovery_interval();
\&
\& #Modify recovery_interval
\& $auth_service\->recovery_interval(5);
.Ve
.RE
.RS 4
.RE
.SS "remote_lookup_password( )"
.IX Subsection "remote_lookup_password( )"
.RS 4
Use this method to set or retrieve the password for a service account.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The password for service account in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get remote_lookup_password
\& my $remote_lookup_password = $auth_service\->remote_lookup_password();
\&
\& #Set remote_lookup_password
\& $auth_service\->remote_lookup_password(\*(Aqinfoblox\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "remote_lookup_service( )"
.IX Subsection "remote_lookup_service( )"
.RS 4
Use this method to set or retrieve the service that will be used for remote lookup.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a reference that contains Infoblox::Grid::Admin::AdAuthServer object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get remote_lookup_service
\& my $remote_lookup_service = $auth_service\->remote_lookup_service();
\&
\& #Modify remote_lookup_service
\& my $remote_lookup_service1 = Infoblox::Grid::Admin::AdAuthServer\->new(
\&    name => "1.2.3.4",
\&    port => 15623,
\&    encryption => "SSL"
\& );
\&
\& $auth_service\->remote_lookup_service($remote_lookup_service1);
.Ve
.RE
.RS 4
.RE
.SS "remote_lookup_username( )"
.IX Subsection "remote_lookup_username( )"
.RS 4
Use this method to set or retrieve the username for a service account.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The username for a service account in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get remote_lookup_username
\& my $remote_lookup_username = $auth_service\->remote_lookup_username();
\&
\& #Set remote_lookup_username
\& $auth_service\->remote_lookup_username(\*(Aqadmin\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "response_timeout( )"
.IX Subsection "response_timeout( )"
.RS 4
Use this method to set or retrieve validation timeout period in milliseconds, must be between 1000 and 60000.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An unsigned integer. Default value is 1000.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get response_timeout
\& my $response_timeout = $auth_service\->response_timeout();
\&
\& #Modify response_timeout
\& $auth_service\->response_timeout(7000);
.Ve
.RE
.RS 4
.RE
.SS "trust_model( )"
.IX Subsection "trust_model( )"
.RS 4
Use this method to set or retrieve a parameter that specifies how the appliance performs \s-1OCSP\s0 requests.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of parameter is either \*(L"\s-1DIRECT\*(R"\s0 or \*(L"\s-1DELEGATED\*(R".\s0  Default value is \*(L"\s-1DIRECT\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get trust_model
\& my $trust_model = $auth_service\->trust_model();
\&
\& #Set trust_model
\& $auth_service\->trust_model(\*(AqDELEGATED\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "user_match_type( )"
.IX Subsection "user_match_type( )"
.RS 4
Use this method to set or retrieve a parameter that specifies how to search for a particular user: if the parameter is equal to \*(L"\s-1DIRECT_MATCH\*(R"\s0 the method searches for only local users with manually assigned certificates, else if the parameter is equal to \*(L"\s-1AUTO_MATCH\*(R"\s0 the method populates username from certificate and searches against effective Auth Policies.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is \*(L"\s-1DIRECT_MATCH\*(R"\s0 or \*(L"\s-1AUTO_MATCH\*(R".\s0  The default value is \*(L"\s-1DIRECT_MATCH\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get user_match_type
\& my $user_match_type = $auth_service\->user_match_type();
\&
\& #Set user_match_type
\& $auth_service\->user_match_type(\*(AqAUTO_MATCH\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, get, modify and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to creating and modifying a Certificate Authentication Service object\fR
.PP
.Vb 2
\& use strict;
\& use Infoblox;
\&
\& #refers to Infoblox Appliance IP address
\& my $host_ip = "192.168.1.2";
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&     master   => $host_ip,
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create an \s-1OCSP\s0 responder\fR
.PP
.Vb 5
\& my $responder = Infoblox::OCSP::Responder\->new(
\&     address     => \*(Aqdomain.com\*(Aq,
\&     certificate => \*(Aq/tmp/cert.pem\*(Aq,
\&     disabled => \*(Aqtrue\*(Aq,
\& );
\&
\& unless ($responder) {
\&        die("Construct OCSP responder object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "OCSP responder object created successfully\en";
.Ve
.PP
\&\fB#Create a Certificate Authentication Service object\fR
.PP
.Vb 6
\& my $auth_service = Infoblox::Grid::Admin::CertificateAuthService\->new(
\&     name            => \*(Aqcas\*(Aq,
\&     ca_certificates => [$ca1, $ca2],
\&     ocsp_responders => [$responder],
\&     disabled        => \*(Aqtrue\*(Aq,
\& );
\&
\& unless ($auth_service) {
\&        die("Construct Certificate Authentication Service object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Certificate Authentication Service object created successfully\en";
\&
\& #Add the Certificate Authentication Service object to an appliance through session
\& my $response = $session\->add($auth_service);
\&
\& unless ($response) {
\&     die("Add Certificate Authentication Service object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Certificate Authentication Service object added successfully \en";
.Ve
.PP
\&\fB#Get and modify the Certificate Authentication Service object\fR
.PP
.Vb 6
\& #Get a Certificate Authentication Service object through session
\& my @retrieved_objs = $session\->get(
\&     object   => "Infoblox::Grid::Admin::CertificateAuthService",
\&     name     => "cas",
\&     );
\& my $auth_service = $retrieved_objs[0];
\&
\& unless ($auth_service) {
\&     die("Get a Certificate Authentication Service object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Get a Certificate Authentication Service object successful \en";
\&
\& # Modify one of the attributes of the selected Certificate Authentication Service object.
\&
\& $auth_service\->comment("new comment");
\&
\& #Applying the changes
\& $session\->modify($auth_service)
\&    or die("Modify Certificate Authentication Service object failed",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Certificate Authentication Service object modified successfully \en";
.Ve
.PP
\&\fB#Remove the Certificate Authentication Service object\fR
.PP
.Vb 6
\& #Get a Certificate Authentication Service object through session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Admin::CertificateAuthService",
\&     name   => "cas",
\&     );
\& my $desired_auth_service = $retrieved_objs[0];
\&
\& unless ($desired_auth_service) {
\&     die("Get a Certificate Authentication Service object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get a Certificate Authentication Service object successful \en";
\&
\& #Submit the object for removal
\& $session\->remove($desired_auth_service)
\&     or die("Remove Certificate Authentication Service object failed",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Certificate Authentication Service object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::OCSP::Responder
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
