.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::RESTRoutes 3"
.TH Mojolicious::Plugin::RESTRoutes 3 "2017-01-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::RESTRoutes \- routing helper for RESTful operations
.SH "VERSION"
.IX Header "VERSION"
version 1.0.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This Mojolicious plugin adds a routing helper for
\&\s-1REST\s0 <http://en.wikipedia.org/wiki/Representational_state_transfer>ful
\&\s-1CRUD\s0 <http://en.wikipedia.org/wiki/Create,_read,_update_and_delete>
operations via \s-1HTTP\s0 to the app.
.PP
The routes are intended, but not restricted to be used by \s-1AJAX\s0 applications.
.SH "MOJOLICIOUS SHORTCUTS"
.IX Header "MOJOLICIOUS SHORTCUTS"
.SS "rest_routes"
.IX Subsection "rest_routes"
Can be used to easily generate the needed RESTful routes for a resource.
.PP
.Vb 2
\&    my $r = $self\->routes;
\&    my $userroute = $r\->rest_routes(name => \*(Aquser\*(Aq);
\&
\&    # Installs the following routes (given that $r\->namespaces == [\*(AqMy::Mojo\*(Aq]):
\&    #    GET /users                      \-\-> My::Mojo::User::rest_list()
\&    #   POST /users                      \-\-> My::Mojo::User::rest_create()
\&    #    GET /users/:userid              \-\-> My::Mojo::User::rest_show()
\&    #    PUT /users/:userid              \-\-> My::Mojo::User::rest_update()
\&    # DELETE /users/:userid              \-\-> My::Mojo::User::rest_remove()
.Ve
.PP
\&\fIPlease note\fR: the english plural form of the given \f(CW\*(C`name\*(C'\fR attribute will be
used in the route, i.e. \*(L"users\*(R" instead of \*(L"user\*(R". If you want to specify
another string, see parameter \f(CW\*(C`route\*(C'\fR below.
.PP
You can also chain \f(CW\*(C`rest_routes\*(C'\fR:
.PP
.Vb 1
\&    $userroute\->rest_routes(name => \*(Aqhat\*(Aq, readonly => 1);
\&
\&    # Installs the following additional routes:
\&    #    GET /users/:userid/hats         \-\-> My::Mojo::Hat::rest_list()
\&    #    GET /users/:userid/hats/:hatid  \-\-> My::Mojo::Hat::rest_show()
.Ve
.PP
The target controller has to implement the following methods:
.IP "\(bu" 4
\&\f(CW\*(C`rest_list\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`rest_create\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`rest_show\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`rest_update\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`rest_remove\*(C'\fR
.PP
\&\fBParameters to control the route creation\fR
.IP "name" 4
.IX Item "name"
The name of the resource, e.g. a \*(L"user\*(R", a \*(L"book\*(R" etc. This name will be used to
build the route \s-1URL\s0 as well as the controller name (see example above).
.IP "readonly (optional)" 4
.IX Item "readonly (optional)"
If set to 1, no create/update/delete routes will be created
.IP "controller (optional)" 4
.IX Item "controller (optional)"
Default behaviour is to use the resource name to build the CamelCase controller
name (this is done by Mojolicious::Routes::Route). You can change this by
directly specifying the controller's name via the \fIcontroller\fR attribute.
.Sp
Note that you have to give the real controller class name (i.e. CamelCased or
whatever you class name looks like) including the full namespace.
.Sp
.Vb 1
\&    $r\->rest_routes(name => \*(Aquser\*(Aq, controller => \*(AqMy::Mojo::Person\*(Aq);
\&
\&    # Installs the following routes:
\&    #    GET /users         \-\-> My::Mojo::Person::rest_list()
\&    #    ...
.Ve
.IP "route (optional)" 4
.IX Item "route (optional)"
Specify a name for the route, i.e. prevent automatic usage of english plural
form of the \f(CW\*(C`name\*(C'\fR parameter as the route component.
.Sp
.Vb 1
\&    $r\->rest_routes(name => \*(Aqangst\*(Aq, route => \*(Aqaengste\*(Aq);
\&
\&    # Installs the following routes (given that $r\->namespaces == [\*(AqMy::Mojo\*(Aq]):
\&    #    GET /aengste       \-\-> My::Mojo::Angst::rest_list()
.Ve
.PP
\&\fBHow to retrieve the parameters / IDs\fR
.PP
There are two ways to retrieve the IDs given by the client in your \f(CW\*(C`rest_show\*(C'\fR,
\&\f(CW\*(C`rest_update\*(C'\fR and \f(CW\*(C`rest_remove\*(C'\fR methods.
.PP
Example request: \f(CW\*(C`GET /users/5/hats/no9\*(C'\fR
.PP
1. New way: the stash entry \f(CW\*(C`fm.ids\*(C'\fR holds a hash with all ids:
.PP
.Vb 2
\&    package My::Mojo::Hats;
\&    use Mojo::Base \*(AqMojolicious::Controller\*(Aq;
\&
\&    sub rest_show {
\&        use Data::Dump qw(dump);
\&        print dump($self\->stash(\*(Aqfm.ids\*(Aq));
\&
\&        # { user => 5, hat => \*(Aqno9\*(Aq }
\&    }
.Ve
.PP
2. Old way: for each resource there will be a parameter \f(CW***id\fR, e.g.:
.PP
.Vb 2
\&    package My::Mojo::Hat;
\&    use Mojo::Base \*(AqMojolicious::Controller\*(Aq;
\&
\&    sub rest_show {
\&        my ($self) = @_;
\&        my $user = $self\->param(\*(Aquserid\*(Aq);
\&        my $hat = $self\->param(\*(Aqhatid\*(Aq);
\&        return $self\->render(text => "$userid, $hatid");
\&
\&        # text: "5, no9"
\&    }
.Ve
.PP
Furthermore, the parameter \f(CW\*(C`idname\*(C'\fR holds the name of the last \s-1ID\s0 in the route:
.PP
.Vb 2
\&    package My::Mojo::Hat;
\&    use Mojo::Base \*(AqMojolicious::Controller\*(Aq;
\&
\&    sub rest_show   {
\&        my $p_name = $self\->param(\*(Aqidname\*(Aq);
\&        my $id = $self\->param($p_name);
\&        return $self\->render(text => sprintf("%s = %s", $p_name, $id || \*(Aq\*(Aq));
\&
\&        # text: "hatid = 5"
\&    }
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "register"
.IX Subsection "register"
Adds the routing helper (called by Mojolicious).
.SH "AUTHOR"
.IX Header "AUTHOR"
Jens Berthold <cpan@jebecs.de>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2017 by Jens Berthold.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The MIT (X11) License
.Ve
