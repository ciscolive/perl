.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Helper::ResultSet::Explain 3"
.TH DBIx::Class::Helper::ResultSet::Explain 3 "2020-03-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Helper::ResultSet::Explain \- Get query plan for a ResultSet
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module mostly makes sense to be used without setting as a component:
.PP
.Vb 2
\& use Devel::Dwarn;
\& Dwarn DBIx::Class::ResultSet::Explain::explain($rs)
.Ve
.PP
But as usual, if you prefer to use it as a component here's how:
.PP
.Vb 1
\& package MyApp::Schema::ResultSet::Foo;
\&
\& _\|_PACKAGE_\|_\->load_components(qw{Helper::ResultSet::Explain});
\&
\& ...
\&
\& 1;
.Ve
.PP
And then in a script or something:
.PP
.Vb 2
\& use Devel::Dwarn;
\& Dwarn $rs\->explain;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is just a handy little tool that gives you the query plan for a given
ResultSet.  The output is in no way normalized, so just treat it as a debug tool
or something.  The only supported \s-1DB\s0's are those listed below.  Have fun!
.PP
See \*(L"\s-1NOTE\*(R"\s0 in DBIx::Class::Helper::ResultSet for a nice way to apply it
to your entire schema.
.SH "EXAMPLE OUTPUT FROM SUPPORTED DB's"
.IX Header "EXAMPLE OUTPUT FROM SUPPORTED DB's"
.SS "SQlite"
.IX Subsection "SQlite"
.Vb 10
\& [
\&   [
\&     0,
\&     "Init",
\&     0,
\&     10,
\&     0,
\&     "",
\&     "00",
\&     undef,
\&   ],
\&   [
\&     1,
\&     "OpenRead",
\&     0,
\&     3,
\&     0,
\&     4,
\&     "00",
\&     undef,
\&   ],
\&   [
\&     2,
\&     "Rewind",
\&     0,
\&     9,
\&     0,
\&     "",
\&     "00",
\&     undef,
\&   ],
\&   [
\&     3,
\&     "Rowid",
\&     0,
\&     1,
\&     0,
\&     "",
\&     "00",
\&     undef,
\&   ],
\&   [
\&     4,
\&     "Column",
\&     0,
\&     1,
\&     2,
\&     "",
\&     "00",
\&     undef,
\&   ],
\&   [
\&     5,
\&     "Column",
\&     0,
\&     2,
\&     3,
\&     "",
\&     "00",
\&     undef,
\&   ],
\&   [
\&     6,
\&     "Column",
\&     0,
\&     3,
\&     4,
\&     "",
\&     "00",
\&     undef,
\&   ],
\&   [
\&     7,
\&     "ResultRow",
\&     1,
\&     4,
\&     0,
\&     "",
\&     "00",
\&     undef,
\&   ],
\&   [
\&     8,
\&     "Next",
\&     0,
\&     3,
\&     0,
\&     "",
\&     "01",
\&     undef,
\&   ],
\&   [
\&     9,
\&     "Halt",
\&     0,
\&     0,
\&     0,
\&     "",
\&     "00",
\&     undef,
\&   ],
\&   [
\&     10,
\&     "Transaction",
\&     0,
\&     0,
\&     17,
\&     0,
\&     "01",
\&     undef,
\&   ],
\&   [
\&     11,
\&     "Goto",
\&     0,
\&     1,
\&     0,
\&     "",
\&     "00",
\&     undef,
\&   ],
\& ]
.Ve
.SS "Pg"
.IX Subsection "Pg"
.Vb 11
\& [
\&   [
\&     "Seq Scan on \e"Gnarly\e" me  (cost=0.00..16.20 rows=620 width=100) (actual time=0.002..0.002 rows=0 loops=1)",
\&   ],
\&   [
\&     "Planning time: 0.182 ms",
\&   ],
\&   [
\&     "Execution time: 0.037 ms",
\&   ],
\& ]
.Ve
.SS "mysql"
.IX Subsection "mysql"
.Vb 10
\& [
\&   [
\&     1,
\&     "SIMPLE",
\&     "me",
\&     "ALL",
\&     undef,
\&     undef,
\&     undef,
\&     undef,
\&     1,
\&     100,
\&     "",
\&   ],
\& ]
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Arthur Axel \*(L"fREW\*(R" Schmidt <frioux+cpan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Arthur Axel \*(L"fREW\*(R" Schmidt.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
