.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::DNS::Paranoid 3"
.TH Net::DNS::Paranoid 3 "2020-10-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::Paranoid \- paranoid dns resolver
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    my $dns = Net::DNS::Paranoid\->new();
\&    $dns\->blocked_hosts([
\&        \*(Aqmixi.jp\*(Aq,
\&        qr{\e.dev\e.example\e.com$},
\&    ]);
\&    $dns\->whitelisted_hosts([
\&        \*(Aqtwitter.com\*(Aq,
\&    ]);
\&    my ($addrs, $errmsg) = $dns\->resolve(\*(Aqmixi.jp\*(Aq);
\&    if ($addrs) {
\&        print @$addrs, $/;
\&    } else {
\&        die $errmsg;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a wrapper module for Net::DNS.
.PP
This module detects \s-1IP\s0 address / host names for internal servers.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "my $dns = Net::DNS::Paranoid\->new(%args)" 4
.el .IP "my \f(CW$dns\fR = Net::DNS::Paranoid\->new(%args)" 4
.IX Item "my $dns = Net::DNS::Paranoid->new(%args)"
Create new instance with following parameters:
.RS 4
.IP "timeout" 4
.IX Item "timeout"
\&\s-1DNS\s0 lookup timeout in secs.
.Sp
Default: 15 sec.
.IP "blocked_hosts: ArrayRef[Str|RegExp|Code]" 4
.IX Item "blocked_hosts: ArrayRef[Str|RegExp|Code]"
List of blocked hosts in string, regexp or coderef.
.IP "whitelisted_hosts: ArrayRef[Str|RegExp|Code]" 4
.IX Item "whitelisted_hosts: ArrayRef[Str|RegExp|Code]"
List of white listed hosts in string, regexp or coderef.
.IP "resolver: Net::DNS::Resolver" 4
.IX Item "resolver: Net::DNS::Resolver"
\&\s-1DNS\s0 resolver object, have same interface as Net::DNS::Resolver.
.RE
.RS 4
.RE
.ie n .IP "my ($addrs, $err) = $dns\->resolve($name[, $start_time[, $timeout]])" 4
.el .IP "my ($addrs, \f(CW$err\fR) = \f(CW$dns\fR\->resolve($name[, \f(CW$start_time\fR[, \f(CW$timeout\fR]])" 4
.IX Item "my ($addrs, $err) = $dns->resolve($name[, $start_time[, $timeout]])"
Resolve a host name using \s-1DNS.\s0 If it's bad host, then returns \f(CW$addrs\fR as undef, and \f(CW$err\fR is the reason in string.
.Sp
\&\f(CW$start_time\fR is a time to start your operation. Timeout value was counted from it.
Default value is \fBtime()\fR.
.Sp
\&\f(CW$timeout\fR is a timeout value. Default value is \f(CW\*(C`$dns\-\*(C'\fRtimeout>.
.SH "USE WITH Furl"
.IX Header "USE WITH Furl"
You can use Net::DNS::Paranoid with Furl!
.PP
.Vb 2
\&    use Furl::HTTP;
\&    use Net::DNS::Paranoid;
\&
\&    my $resolver = Net::DNS::Paranoid\->new();
\&    my $furl = Furl\->new(
\&        inet_aton => sub {
\&            my ($host, $errmsg) = $resolver\->resolve($_[0], time(), $_[1]);
\&            die $errmsg unless $host;
\&            Socket::inet_aton($host\->[0]);
\&        }
\&    );
.Ve
.SH "USE WITH LWP"
.IX Header "USE WITH LWP"
I shipped LWPx::ParanoidHandler to wrap this module.
Please use it.
.SH "THANKS TO"
.IX Header "THANKS TO"
Most of code was taken from LWPx::ParanoidAgent.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tokuhiro Matsuno < tokuhirom \f(CW@A\fR gmail \s-1DOT.\s0 com>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) Tokuhiro Matsuno
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
