.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::Class::Tiny 3"
.TH Test::Class::Tiny 3 "2020-05-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Class::Tiny \- xUnit in Perl, simplified
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package t::mytest;
\&
\&    use parent qw( Test::Class::Tiny );
\&
\&    _\|_PACKAGE_\|_\->runtests() if !caller;
\&
\&    sub T_startup_something {
\&        # Runs at the start of the test run.
\&    }
\&
\&    sub something_T_setup {
\&        # Runs before each normal test function
\&    }
\&
\&    # Expects 2 assertions:
\&    sub T2_normal {
\&        ok(1, \*(Aqyes\*(Aq);
\&        ok( !0, \*(Aqno\*(Aq);
\&    }
\&
\&    # Ignores assertion count:
\&    sub T0_whatever {
\&        ok(1, \*(Aqyes\*(Aq);
\&    }
\&
\&    sub T_teardown_something {
\&        # Runs after each normal test function
\&    }
\&
\&    sub T_shutdown_something {
\&        # Runs at the end of the test run.
\&    }
.Ve
.SH "STATUS"
.IX Header "STATUS"
This module is \fB\s-1EXPERIMENTAL\s0\fR. If you use it, you \s-1MUST\s0 check the changelog
before upgrading to a new version. Any \s-1CPAN\s0 distributions that use this module
could break whenever this module is updated.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test::Class has served Perl’s xUnit needs for a long time
but is incompatible with the Test2 framework. This module allows for
a similar workflow but in a way that works with both Test2 and the older,
Test::Builder\-based modules.
.SH "HOW (AND WHY) TO USE THIS MODULE"
.IX Header "HOW (AND WHY) TO USE THIS MODULE"
xUnit encourages well-designed tests by encouraging organization of test
logic into independent chunks of test logic rather than a single monolithic
block of code.
.PP
xUnit provides standard hooks for:
.IP "\(bu" 4
startup: The start of all tests
.IP "\(bu" 4
setup: The start of an individual test group (i.e., Perl function)
.IP "\(bu" 4
teardown: The end of an individual test group
.IP "\(bu" 4
shutdown: The end of all tests
.PP
To write functions that execute at these points in the workflow,
name those functions with the prefixes \f(CW\*(C`T_startup_\*(C'\fR, \f(CW\*(C`T_setup_\*(C'\fR,
\&\f(CW\*(C`T_teardown_\*(C'\fR, or \f(CW\*(C`T_shutdown_\*(C'\fR. \fBAlternatively\fR, name such functions
with the \fIsuffixes\fR \f(CW\*(C`_T_startup\*(C'\fR, \f(CW\*(C`_T_setup\*(C'\fR, \f(CW\*(C`_T_teardown\*(C'\fR, or
\&\f(CW\*(C`_T_shutdown\*(C'\fR.
.PP
To write a test function—i.e., a function that actually runs some
assertions—prefix the function name with \f(CW\*(C`T\*(C'\fR, the number of test assertions
in the function, then an underscore. For example, a function that contains
9 assertions might be named \f(CW\*(C`T9_check_validation()\*(C'\fR. If that function
doesn’t run exactly 9 assertions, a test failure is produced.
.PP
To forgo counting test assertions, use 0 as the test count, e.g.,
\&\f(CW\*(C`T0_check_validation()\*(C'\fR.
.PP
You may alternatively use suffix-style naming for test functions well,
e.g., \f(CW\*(C`check_validation_T9()\*(C'\fR, \f(CW\*(C`check_validation_T0()\*(C'\fR.
.PP
The above convention is a significant departure from Test::Class,
which uses Perl subroutine attributes to indicate this information.
Using method names is dramatically simpler to implement and also easier
to type.
.PP
In most other respects this module attempts to imitate Test::Class.
.SS "\s-1PLANS\s0"
.IX Subsection "PLANS"
The concept of a global “plan” (i.e., an expected number of assertions)
isn’t all that sensible with xUnit because each test function has its
own plan. So, ideally the total number of expected assertions for a given
test module is just the sum of all test functions’ expected assertions.
.PP
Thus, currently, \f(CW\*(C`runtests()\*(C'\fR sets the Test2::Hub object’s plan to
\&\f(CW\*(C`no_plan\*(C'\fR if the plan is undefined.
.SH "TEST INHERITANCE"
.IX Header "TEST INHERITANCE"
Like Test::Class, this module seamlessly integrates inherited methods.
To have one test module inherit another module’s tests, just make that
first module a subclass of the latter.
.PP
\&\fB\s-1CAVEAT EMPTOR:\s0\fR Inheritance in tests, while occasionally useful, can also
make for difficult maintenance over time if overused. Where I’ve found it
most useful is cases like Promise::ES6, where each test needs to run with
each backend implementation.
.SH "RUNNING YOUR TEST"
.IX Header "RUNNING YOUR TEST"
To use this module to write normal Perl test scripts, just define
the script’s package (ideally not \f(CW\*(C`main\*(C'\fR, but it’ll work) as a subclass of
this module. Then put the following somewhere in the script:
.PP
.Vb 1
\&    _\|_PACKAGE_\|_\->runtests() if !caller;
.Ve
.PP
Your test will thus execute as a “modulino”.
.SH "SPECIAL FEATURES"
.IX Header "SPECIAL FEATURES"
.IP "\(bu" 4
As in Test::Class, a \f(CW\*(C`SKIP_CLASS()\*(C'\fR method may be defined. If this
method returns truthy, then the class’s tests are skipped, and that truthy
return is given as the reason for the skip.
.IP "\(bu" 4
The \f(CW\*(C`TEST_METHOD\*(C'\fR environment variable is honored as in Test::Class.
.IP "\(bu" 4
Test::Class’s \f(CW\*(C`fail_if_returned_early()\*(C'\fR method is \s-1NOT\s0 recognized
here because an early return will already trigger a failure.
.IP "\(bu" 4
Within a test method, \f(CW\*(C`num_tests()\*(C'\fR may be called to retrieve the
number of expected test assertions.
.IP "\(bu" 4
To define a test function whose test count isn’t known until runtime,
name it \fBwithout\fR the usual \f(CW\*(C`T$num\*(C'\fR prefix, then at runtime do:
.Sp
.Vb 1
\&    $test_obj\->num_method_tests( $name, $count )
.Ve
.Sp
See \fIt/\fR in the distribution for an example of this.
.SH "COMMON PITFALLS"
.IX Header "COMMON PITFALLS"
Avoid the following:
.IP "\(bu" 4
Writing startup logic outside of the module class, e.g.:
.Sp
.Vb 3
\&    if (!caller) {
\&        my $mock = Test::MockModule\->new(\*(AqSome::Module\*(Aq);
\&        $mock\->redefine(\*(Aqsomefunc\*(Aq, sub { .. } );
\&
\&        _\|_PACKAGE_\|_\->runtests();
\&    }
.Ve
.Sp
The above works \fIonly\fR if the test module runs in its own process; if you try
to run this module with anything else it’ll fail because \f(CW\*(C`caller()\*(C'\fR will be
truthy, which will prevent the mocking from being set up, which your test
probably depends on.
.Sp
Instead of the above, write a wrapper around \f(CW\*(C`runtests()\*(C'\fR, thus:
.Sp
.Vb 2
\&    sub runtests {
\&        my $self = shift;
\&
\&        my $mock = Test::MockModule\->new(\*(AqSome::Module\*(Aq);
\&        $mock\->redefine(\*(Aqsomefunc\*(Aq, sub { .. } );
\&
\&        $self\->SUPER::runtests();
\&    }
.Ve
.Sp
This ensures your test module will always run with the intended mocking.
.IP "\(bu" 4
\&\s-1REDUX:\s0 Writing startup logic outside of the module class, e.g.:
.Sp
.Vb 2
\&    my $mock = Test::MockModule\->new(\*(AqSome::Module\*(Aq);
\&    $mock\->redefine(\*(Aqsomefunc\*(Aq, sub { .. } );
\&
\&    _\|_PACKAGE_\|_\->runtests() if !caller;
.Ve
.Sp
This is even worse than before because the mock will be global, which
will quietly apply it where we don’t intend. This produces
action-at-a-distance bugs, which can be notoriously hard to find.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Besides Test::Class, you might also look at the following:
.IP "\(bu" 4
Test2::Tools::xUnit also implements xUnit for Test2 but doesn’t
allow inheritance.
.IP "\(bu" 4
Test::Class::Moose works with Test2, but the Moose requirement
makes use in \s-1CPAN\s0 modules problematic.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright 2019 Gasper Software Consulting <http://gaspersoftware.com> (\s-1FELIPE\s0)
.SH "LICENSE"
.IX Header "LICENSE"
This code is licensed under the same license as Perl itself.
