.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::ApprovalWorkflow 3"
.TH Infoblox::Grid::ApprovalWorkflow 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::ApprovalWorkflow \- An approval object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The approval object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $approval = Infoblox::Grid::ApprovalWorkflow\->new(
\&    \*(Aqsubmitter_group\*(Aq           => $string,                             # Required
\&    \*(Aqapproval_group\*(Aq            => $string,                             # Required
\&    \*(Aqticket_number_used\*(Aq        => \*(AqUNUSED\*(Aq | \*(AqOPTIONAL\*(Aq | \*(AqREQUIRED\*(Aq,  # Optional, Default is \*(AqUNUSED\*(Aq
\&    \*(Aqsubmitter_comment_used\*(Aq    => \*(AqUNUSED\*(Aq | \*(AqOPTIONAL\*(Aq | \*(AqREQUIRED\*(Aq,  # Optional, Default is \*(AqUNUSED\*(Aq
\&    \*(Aqapprover_comment_used\*(Aq     => \*(AqUNUSED\*(Aq | \*(AqOPTIONAL\*(Aq | \*(AqREQUIRED\*(Aq,  # Optional, Default is \*(AqUNUSED\*(Aq
\&    \*(Aqenable_notify_user\*(Aq        => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                    # Optional, Default is \*(Aqfalse\*(Aq
\&    \*(Aqenable_notify_group\*(Aq       => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                    # Optional, Default is \*(Aqtrue\*(Aq
\&    \*(Aqapproval_notify_enable\*(Aq    => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                    # Optional, Default is \*(Aqtrue\*(Aq
\&    \*(Aqapproval_notify_to\*(Aq        => \*(AqSUBMITTER\*(Aq | \*(AqAPPROVER\*(Aq | \*(AqBOTH\*(Aq,   # Optional, Default is \*(AqBOTH\*(Aq
\&    \*(Aqapproved_notify_enable\*(Aq    => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                    # Optional, Default is \*(Aqtrue\*(Aq
\&    \*(Aqapproved_notify_to\*(Aq        => \*(AqSUBMITTER\*(Aq | \*(AqAPPROVER\*(Aq | \*(AqBOTH\*(Aq,   # Optional, Default is \*(AqBOTH\*(Aq
\&    \*(Aqrejected_notify_enable\*(Aq    => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                    # Optional, Default is \*(Aqtrue\*(Aq
\&    \*(Aqrejected_notify_to\*(Aq        => \*(AqSUBMITTER\*(Aq | \*(AqAPPROVER\*(Aq | \*(AqBOTH\*(Aq,   # Optional, Default is \*(AqBOTH\*(Aq
\&    \*(Aqsucceeded_notify_enable\*(Aq   => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                    # Optional, Default is \*(Aqtrue\*(Aq
\&    \*(Aqsucceeded_notify_to\*(Aq       => \*(AqSUBMITTER\*(Aq | \*(AqAPPROVER\*(Aq | \*(AqBOTH\*(Aq,   # Optional, Default is \*(AqBOTH\*(Aq
\&    \*(Aqfailed_notify_enable\*(Aq      => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                    # Optional, Default is \*(Aqtrue\*(Aq
\&    \*(Aqfailed_notify_to\*(Aq          => \*(AqSUBMITTER\*(Aq | \*(AqAPPROVER\*(Aq | \*(AqBOTH\*(Aq,   # Optional, Default is \*(AqBOTH\*(Aq
\&    \*(Aqrescheduled_notify_enable\*(Aq => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                    # Optional, Default is \*(Aqtrue\*(Aq
\&    \*(Aqrescheduled_notify_to\*(Aq     => \*(AqSUBMITTER\*(Aq | \*(AqAPPROVER\*(Aq | \*(AqBOTH\*(Aq,   # Optional, Default is \*(AqBOTH\*(Aq
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to an approval object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct an object
\& my $approval = Infoblox::Grid::ApprovalWorkflow\->new(
\&    submitter_group => \*(Aquser\-group\*(Aq,
\&    approval_group  => \*(Aqadmin\-group\*(Aq,
\& );
\&
\& #Submit for addition
\& my $response = $session\->add( $approval );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific approval object:
\&
\&  submitter_group   \- Optional. The submitter group name.
\&  approval_group    \- Optional. The approval group name.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&    object          => \*(AqInfoblox::Grid::ApprovalWorkflow\*(Aq,
\&    submitter_group => \*(Aquser\-group\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify ticket_number_used attribute of an approval object.
\& $approval\->ticket_number_used(\*(AqREQUIRED\*(Aq);
\& # Submit modification
\& my $response = $session\->modify( $approval );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get the objects
\& my @retrieved_objs = $session\->get(
\&    object          => \*(AqInfoblox::Grid::ApprovalWorkflow\*(Aq,
\&    submitter_group => \*(Aquser\-group\*(Aq,
\& );
\& #Find the desired object from the retrieved list.
\& my $desired_approval = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_approval );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for approval objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search a specific approval object:
\&
\&  submitter_group   \- Optional. The submitter group name.
\&  approval_group    \- Optional. The approval group name.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->search(
\&    object          => \*(AqInfoblox::Grid::ApprovalWorkflow\*(Aq,
\&    submitter_group => \*(Aquser\-group\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of an approval object.
.SS "approval_group( )"
.IX Subsection "approval_group( )"
.RS 4
Use this method to set or retrieve an approval group name.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The approval group name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->approval_group();
\& #Modify attribute value
\& $approval\->approval_group(\*(Aqadmin\-group\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "submitter_group( )"
.IX Subsection "submitter_group( )"
.RS 4
Use this method to set or retrieve a submitter group name.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The submitter group name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->submitter_group();
\& #Modify attribute value
\& $approval\->submitter_group(\*(Aquser_group\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "approval_notify_enabled( )"
.IX Subsection "approval_notify_enabled( )"
.RS 4
Use this method to enable or disable sending approval task notifications.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"false\*(R" to disable this mode or \*(L"true\*(R" to enable it. The default value is 'true'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->approval_notify_enabled();
\& #Modify attribute value
\& $approval\->approval_notify_enabled(\*(Aqfalse\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "approval_notify_to( )"
.IX Subsection "approval_notify_to( )"
.RS 4
Use this method to set or retrieve to whom approval task notifications are sent.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1APPROVER\s0', '\s-1BOTH\s0' and '\s-1SUBMITTER\s0'. The default value is '\s-1BOTH\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->approval_notify_to();
\& #Modify attribute value
\& $approval\->approval_notify_to(\*(AqAPPROVER\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "approved_notify_enabled( )"
.IX Subsection "approved_notify_enabled( )"
.RS 4
Use this method to enable or disable sending approved task notifications.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"false\*(R" to disable this mode or \*(L"true\*(R" to enable it. The default value is 'true'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->approved_notify_enabled();
\& #Modify attribute value
\& $approval\->approved_notify_enabled(\*(Aqfalse\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "approved_notify_to( )"
.IX Subsection "approved_notify_to( )"
.RS 4
Use this method to set or retrieve to whom approved task notifications are sent.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1APPROVER\s0', '\s-1BOTH\s0' and '\s-1SUBMITTER\s0'. The default value is '\s-1BOTH\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->approved_notify_to();
\& #Modify attribute value
\& $approval\->approved_notify_to(\*(AqAPPROVER\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "approver_comment_used( )"
.IX Subsection "approver_comment_used( )"
.RS 4
Use this method to set or retrieve the option for approver to provide the comment field.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1OPTIONAL\s0', '\s-1REQUIRED\s0' and '\s-1UNUSED\s0'. The default value is '\s-1UNUSED\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->approver_comment_used();
\& #Modify attribute value
\& $approval\->approver_comment_used(\*(AqREQUIRED\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_notify_group( )"
.IX Subsection "enable_notify_group( )"
.RS 4
Use this method to enable or disable sending email notifications to admin group email addresses.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"false\*(R" to disable this mode or \*(L"true\*(R" to enable it. The default value is 'true'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->enable_notify_group();
\& #Modify attribute value
\& $approval\->enable_notify_group(\*(Aqfalse\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_notify_user( )"
.IX Subsection "enable_notify_user( )"
.RS 4
Use this method to enable or disable sending email notifications to admin member email addresses.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"false\*(R" to disable this mode or \*(L"true\*(R" to enable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->enable_notify_user();
\& #Modify attribute value
\& $approval\->enable_notify_user(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "failed_notify_enabled( )"
.IX Subsection "failed_notify_enabled( )"
.RS 4
Use this method to enable or disable sending failed task notifications.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"false\*(R" to disable this mode or \*(L"true\*(R" to enable it. The default value is 'true'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->failed_notify_enabled();
\& #Modify attribute value
\& $approval\->failed_notify_enabled(\*(Aqfalse\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "failed_notify_to( )"
.IX Subsection "failed_notify_to( )"
.RS 4
Use this method to set or retrieve to whom failed task notifications are sent.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1APPROVER\s0', '\s-1BOTH\s0' and '\s-1SUBMITTER\s0'. The default value is '\s-1BOTH\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->failed_notify_to();
\& #Modify attribute value
\& $approval\->failed_notify_to(\*(AqAPPROVER\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "rejected_notify_enabled( )"
.IX Subsection "rejected_notify_enabled( )"
.RS 4
Use this method to enable or disable sending rejected task notifications.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"false\*(R" to disable this mode or \*(L"true\*(R" to enable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->rejected_notify_enabled();
\& #Modify attribute value
\& $approval\->rejected_notify_enabled(\*(Aqfalse\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "rejected_notify_to( )"
.IX Subsection "rejected_notify_to( )"
.RS 4
Use this method to set or retrieve to whom rejected task notifications are sent.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1APPROVER\s0', '\s-1BOTH\s0' and '\s-1SUBMITTER\s0'. The default value is '\s-1BOTH\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->rejected_notify_to();
\& #Modify attribute value
\& $approval\->rejected_notify_to(\*(AqAPPROVER\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "rescheduled_notify_enabled( )"
.IX Subsection "rescheduled_notify_enabled( )"
.RS 4
Use this method to enable or disable sending rescheduled task notifications.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"false\*(R" to disable this mode or \*(L"true\*(R" to enable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->rescheduled_notify_enabled();
\& #Modify attribute value
\& $approval\->rescheduled_notify_enabled(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "rescheduled_notify_to( )"
.IX Subsection "rescheduled_notify_to( )"
.RS 4
Use this method to set or retrieve to whom rescheduled task notifications are sent.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1APPROVER\s0', '\s-1BOTH\s0' and '\s-1SUBMITTER\s0'. The default value is '\s-1BOTH\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->();
\& #Modify attribute value
\& $approval\->(\*(AqAPPROVER\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "submitter_comment_used( )"
.IX Subsection "submitter_comment_used( )"
.RS 4
Use this method to set or retrieve the option for submitter to provide the comment field.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1OPTIONAL\s0', '\s-1REQUIRED\s0' and '\s-1UNUSED\s0'. The default value is '\s-1UNUSED\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->submitter_comment_used();
\& #Modify attribute value
\& $approval\->submitter_comment_used(\*(AqOPTIONAL\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "succeeded_notify_enabled( )"
.IX Subsection "succeeded_notify_enabled( )"
.RS 4
Use this method to enable or disable sending succeeded task notifications.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"false\*(R" to disable this mode or \*(L"true\*(R" to enable it. The default value is 'true'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->succeeded_notify_enabled();
\& #Modify attribute value
\& $approval\->succeeded_notify_enabled(\*(Aqfalse\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "succeeded_notify_to( )"
.IX Subsection "succeeded_notify_to( )"
.RS 4
Use this method to set or retrieve to whom succeeded task notifications are sent.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1APPROVER\s0', '\s-1BOTH\s0' and '\s-1SUBMITTER\s0'. The default value is '\s-1BOTH\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->succeeded_notify_to();
\& #Modify attribute value
\& $approval\->succeeded_notify_to(\*(AqAPPROVER\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ticket_number_used( )"
.IX Subsection "ticket_number_used( )"
.RS 4
Use this method to set or retrieve the option for submitter to provide the ticket number field.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1OPTIONAL\s0', '\s-1REQUIRED\s0' and '\s-1UNUSED\s0'. The default value is '\s-1UNUSED\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $approval\->ticket_number_used();
\& #Modify attribute value
\& $approval\->ticket_number_used(\*(AqOPTIONAL\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, get, modify, search and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to getting and modifying a approval object\fR
.PP
.Vb 2
\& use strict;
\& use Infoblox;
\&
\& #refers to Infoblox Appliance IP address
\& my $host_ip = "192.168.1.2";
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&     master   => $host_ip,
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a approval object\fR
.PP
.Vb 4
\& my $approval = Infoblox::Grid::ApprovalWorkflow\->new(
\&    submitter_group => \*(Aquser\-group\*(Aq,
\&    approval_group  => \*(Aqadmin\-group\*(Aq,
\& );
\&
\& unless ($approval) {
\&        die("Construct approval object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Approval object created successfully\en";
\&
\& my $response = $session\->add($approval);
\&
\& unless ($response) {
\&     die("Add approval failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Approval added successfully \en";
.Ve
.PP
\&\fB#Search for a approval object\fR
.PP
.Vb 4
\& my @retrieved_objs = $session\->search(
\&    object          => \*(AqInfoblox::Grid::ApprovalWorkflow\*(Aq,
\&    submitter_group => \*(Aquser\-group\*(Aq,
\& );
\&
\& $approval = $retrieved_objs[0];
\&
\& unless ($approval) {
\&     die("Get approval object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Get approval successful \en";
\&
\& $approval\->comment("This is modified object");
\&
\& $session\->modify($approval)
\&    or die("Modify approval failed",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Approval modified successfully \en";
.Ve
.PP
\&\fB#Get and modify the approval object\fR
.PP
.Vb 4
\& @retrieved_objs = $session\->get(
\&    object          => \*(AqInfoblox::Grid::ApprovalWorkflow\*(Aq,
\&    submitter_group => \*(Aquser\-group\*(Aq,
\& );
\&
\& $approval = $retrieved_objs[0];
\&
\& unless ($approval) {
\&     die("Get approval object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Get approval successful \en";
\&
\& $approval\->comment("This is modified object");
\&
\& $session\->modify($approval)
\&    or die("Modify approval failed",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Approval modified successfully \en";
.Ve
.PP
\&\fB#Remove the approval object\fR
.PP
.Vb 4
\& @retrieved_objs = $session\->get(
\&    object          => \*(AqInfoblox::Grid::ApprovalWorkflow\*(Aq,
\&    submitter_group => \*(Aquser\-group\*(Aq,
\& );
\&
\& $approval = $retrieved_objs[0];
\&
\& unless ($approval) {
\&     die("Get approval object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Get approval successful \en";
\&
\& $session\->remove( $approval )
\&     or die("Remove approval failed",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print"Approval removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
