.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::Attribute::ENV 3"
.TH MooseX::Attribute::ENV 3 "2012-01-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Attribute::ENV \- Set default of an attribute to a value from %ENV
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The following is example usage for this attribute trait.
.PP
.Vb 1
\&        package MyApp::MyClass;
\&
\&        use Moose;
\&        use MooseX::Attribute::ENV;
\&
\&        ## Checks $ENV{username} and $ENV{USERNAME}
\&        has \*(Aqusername\*(Aq => (
\&                traits => [\*(AqENV\*(Aq],
\&        );
\&
\&        ## Checks $ENV{GLOBAL_PASSWORD}
\&        has \*(Aqpassword\*(Aq => (
\&                traits => [\*(AqENV\*(Aq],
\&                env_key => \*(AqGLOBAL_PASSWORD\*(Aq,
\&        );
\&
\&        ## Checks $ENV{last_login}, $ENV{LAST_LOGIN} and then uses the default
\&        has \*(Aqlast_login\*(Aq => (
\&                traits => [\*(AqENV\*(Aq],
\&                default => sub {localtime},
\&        );
\&
\&        ## Checks $ENV{XXX_config_name} and $ENV{XXX_CONFIG_NAME}
\&        has \*(Aqconfig_name\*(Aq => (
\&                traits => [\*(AqENV\*(Aq],
\&                env_prefix => \*(AqXXX\*(Aq,
\&        );
\&
\&        ## Checks $ENV{MyApp_MyClass_extra} and $ENV{MYAPP_MYCLASS_EXTRA}
\&        has \*(Aqextra\*(Aq => (
\&                traits => [\*(AqENV\*(Aq],
\&                env_package_prefix => 1,
\&        );
.Ve
.PP
Please see the test cases for more detailed examples.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a Moose attribute trait that you use when you want the default value
for an attribute to be populated from the \f(CW%ENV\fR hash.  So, for example if you
have set the environment variable \s-1USERNAME\s0 = 'John' you can do:
.PP
.Vb 1
\&        package MyApp::MyClass;
\&
\&        use Moose;
\&        use MooseX::Attribute::ENV;
\&
\&        has \*(Aqusername\*(Aq => (is=>\*(Aqro\*(Aq, traits=>[\*(AqENV\*(Aq]);
\&
\&        package main;
\&
\&        my $myclass = MyApp::MyClass\->new();
\&
\&        print $myclass\->username; # STDOUT => \*(AqJohn\*(Aq;
.Ve
.PP
This is basically similar functionality to something like:
.PP
.Vb 6
\&        has \*(Aqattr\*(Aq => (
\&                is=>\*(Aqro\*(Aq,
\&                default=> sub {
\&                        $ENV{uc \*(Aqattr\*(Aq};
\&                },
\&        );
.Ve
.PP
but this module has a few other features that offer merit, as well as being a
simple enough attribute trait that I hope it can serve as a learning tool.
.PP
If the named key isn't found in \f(CW%ENV\fR, then defaults will execute as normal.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
This role defines the following attributes.
.SS "env_key ($Str)"
.IX Subsection "env_key ($Str)"
By default we look for a key in \f(CW%ENV\fR based on the actual attribute name.  If
want or need to override this behavior, you can use this modifier.
.SS "env_prefix ($Str)"
.IX Subsection "env_prefix ($Str)"
A prefix to attach to the generated filename.  The prefix is prepended with a
trailing underscore. For example, if you attribute was 'attr' and your set a
prefix of 'xxx' then we'd check for \f(CW$ENV\fR{xxx_attr} and \f(CW$ENV\fR{\s-1XXX_ATTR\s0}.
.SS "env_package_prefix ($Bool)"
.IX Subsection "env_package_prefix ($Bool)"
Similar to env_prefix, but automatically sets the prefix based on the consuming
classes package name.  So if your attribute is 'attr' and it's in a package
called: 'Myapp::Myclass' the follow keys in \f(CW%ENV\fR will be examined:
.PP
* Myapp_Myclass_attr
* \s-1MYAPP_MYCLASS_ATTR\s0
.PP
Please be aware that if you use this feature, your attribute will automatically
be converted to lazy, which might effect any default subrefs you also assign to
this attribute.
.PP
Please note that you can't currently use this option along with the option
\&'lazy_build'.  That might change in a future release, however since these
attributes are likely to hold simple strings the lazy_build option probably
won't be missed.
.SH "METHODS"
.IX Header "METHODS"
This module defines the following methods.
.SS "_process_options"
.IX Subsection "_process_options"
Overload method so that we can assign the default to be what's in \f(CW%ENV\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
John Napiorkowski, \f(CW\*(C`<jjnapiork at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to:
.PP
.Vb 1
\&        C<MooseX\-Attribute\-ENV at rt.cpan.org>
.Ve
.PP
or through the web interface at:
.PP
.Vb 1
\&        L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=MooseX\-Attribute\-ENV>
.Ve
.PP
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc MooseX::Attribute::ENV
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=MooseX\-Attribute\-ENV>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/MooseX\-Attribute\-ENV>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/MooseX\-Attribute\-ENV>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/DBIx\-Class\-PopulateMore>
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
