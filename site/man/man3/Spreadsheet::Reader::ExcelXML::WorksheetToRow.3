.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::ExcelXML::WorksheetToRow 3"
.TH Spreadsheet::Reader::ExcelXML::WorksheetToRow 3 "2017-04-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::ExcelXML::WorksheetToRow \- Builds row objects from
worksheet files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See t\eSpreadsheet\eReader\eExcelXML\e09\-worksheet_to_row.t
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation is written to explain ways to use this module when writing your own
excel parser.  To use the general package for excel parsing out of the box please review
the documentation for Workbooks,
Worksheets, and
Cells
.PP
This module provides the generic connection to individual worksheet files (not chartsheets)
for parsing xlsx(and xml) workbooks.  It does not provide a way to connect to chartsheets
\&.  It does not provide the final view of a given
cell.  The final view of the cell is collated with the role (Interface)
Spreadsheet::Reader::ExcelXML::Worksheet.  This reader extends the base reader class
Spreadsheet::Reader::ExcelXML::XMLReader.  This module also uses a file type interpreter.
The functionality provided by those modules is not explained here.
.PP
For now this module reads each full row (with values) into a Spreadsheet::Reader::ExcelXML::Row
instance.  It stores either the currently read row or all rows based on the
\&\*(L"cache_positions\*(R" in Spreadsheet::Reader::ExcelXML setting for Worksheet_instance.
When a position past the end of the sheet is called the current row is cleared and an '\s-1EOF\s0'
or undef value is returned.  See \*(L"file_boundary_flags\*(R" in Spreadsheet::Reader::ExcelXML for
more details.
.PP
\&\fIAll positions (row and column places and integers) at this level are stored and returned in count
from one mode!\fR
.PP
To replace this part in the package look in the raw code of
Spreadsheet::Reader::ExcelXML::Workbook and adjust the 'worksheet_interface' key of the
\&\f(CW$parser_modules\fR variable.
.SS "requires"
.IX Subsection "requires"
This module is a role and as such only adds incremental methods and
attributes to some base class.  In order to use this role some base object methods are
required.  The requirments are listed below with links to the default provider.
.Sp
.RS 4
\&\*(L"advance_row_position( \f(CW$element\fR, [$iterations] )\*(R" in Spreadsheet::Reader::ExcelXML::FileWorksheet
.Sp
\&\*(L"build_row_data\*(R" in Spreadsheet::Reader::ExcelXML::FileWorksheet
.Sp
\&\*(L"not_end_of_file\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"start_the_file_over\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.Sp
\&\*(L"close_the_file\*(R" in Spreadsheet::Reader::ExcelXML::XMLReader
.RE
.SS "Attributes"
.IX Subsection "Attributes"
Data passed to new when creating an instance.  For access to the values in these
attributes see the listed 'attribute methods'. For general information on attributes see
Moose::Manual::Attributes.  For ways to manage the instance when opened see the
Methods.
.PP
\fIcache_positions\fR
.IX Subsection "cache_positions"
.Sp
.RS 4
\&\fBDefinition:\fR This is a boolean value which controls whether the parser caches rows that
have been parsed or just stores the top level hash.  In general this should repsond to the
top level attribute \*(L"cache_positions\*(R" in Spreadsheet::Reader::ExcelXML
.Sp
\&\fBDefault:\fR 1 = caching on
.Sp
\&\fBRange:\fR (1|0)
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fBshould_cache_positions\fR
.Sp
.RS 4
\&\fBDefinition:\fR return the attribute value
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.SS "Methods"
.IX Subsection "Methods"
These are the methods provided by this class for use within the package but are not intended
to be used by the end user.  Other private methods not listed here are used in the module but
not used by the package.  If the private method is listed here then replacement of this module
either requires replacing them or rewriting all the associated connecting roles and classes.
.PP
\fIhas_new_row_inst\fR
.IX Subsection "has_new_row_inst"
.Sp
.RS 4
\&\fBDefinition:\fR Generally in the processing of a worksheet file there will be a currently
active row.  This row is stored as an object so elements of the row can be retrieved via
delegation
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR (1|0) depending on the presence of a currently stored row
.RE
.PP
\fIget_new_row_number\fR
.IX Subsection "get_new_row_number"
.Sp
.RS 4
\&\fBDefinition:\fR This returns the row number (in count from 1 mode) for the currently stored
row.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR an integer \f(CW$row\fR
.RE
.PP
\fIget_new_column( \f(CI$column\fI )\fR
.IX Subsection "get_new_column( $column )"
.Sp
.RS 4
\&\fBDefinition:\fR This returns the column data for the selected \f(CW$column\fR.  If the request is
for a column with no data then it returns undef.  If the column is requested pased the
last column with data but before the end of the span it returns '\s-1EOD\s0'.  If the request is
for a column past the end of the span it returns '\s-1EOF\s0'.  THe request and return are all
handled in count from 1 context.
.Sp
\&\fBAccepts:\fR an integer \f(CW$column\fR number
.Sp
\&\fBReturns:\fR The cell contents for that column (or undef, '\s-1EOD\s0', or '\s-1EOF\s0')
.RE
.PP
\fIget_new_next_value\fR
.IX Subsection "get_new_next_value"
.Sp
.RS 4
\&\fBDefinition:\fR like get_new_column this will return one cell.  However, this method
will only return cells with content or '\s-1EOR\s0'.  The role keeps track of which one
was called last even it it was through get_new_column.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR the cell contents or '\s-1EOR\s0'
.RE
.PP
\fIget_new_row_all\fR
.IX Subsection "get_new_row_all"
.Sp
.RS 4
\&\fBDefinition:\fR This is returns an array ref of each of the values in the current row placed
in their 'count from 0' position.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR an array ref
.RE
.PP
\fIgo_to_or_past_row( \f(CI$row\fI )\fR
.IX Subsection "go_to_or_past_row( $row )"
.Sp
.RS 4
\&\fBDefinition:\fR This will attempt to advance to the row provided by \f(CW$row\fR.  It will continue to
advance past that row until it arrives at a row with values or the end of the file.
.Sp
\&\fBAccepts:\fR \f(CW$row\fR (integer in count from 1 context)
.Sp
\&\fBReturns:\fR The actual row number that was arrived at (in count from 1 context)
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::Reader::ExcelXML/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR If a the primary cell of a merge range is hidden show that value
in the top left unhidden cell even when the attribute
\&\*(L"spread_merged_values\*(R" in Spreadsheet::Reader::ExcelXML::Workbook is not
set.  (This is the way excel does it(ish))
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Spreadsheet::Reader::ExcelXML \- the package
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::Read \- generic Spreadsheet reader
.Sp
Spreadsheet::ParseExcel \- Excel binary version 2003 and earlier (.xls files)
.Sp
Spreadsheet::XLSX \- Excel version 2007 and later
.Sp
Spreadsheet::ParseXLSX \- Excel version 2007 and later
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
