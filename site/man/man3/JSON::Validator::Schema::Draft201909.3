.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "JSON::Validator::Schema::Draft201909 3"
.TH JSON::Validator::Schema::Draft201909 3 "2020-10-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JSON::Validator::Schema::Draft201909 \- JSON\-Schema Draft 2019\-09
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See \*(L"\s-1SYNOPSIS\*(R"\s0 in JSON::Validator::Schema.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class represents
<https://json\-schema.org/specification\-links.html#2019\-09\-formerly\-known\-as\-draft\-8>.
.PP
Support for parsing the draft is not yet complete. Look at
<https://github.com/mojolicious/json\-validator/blob/master/t/draft2019\-09\-acceptance.t>
for the most recent overview of what is not yet supported.
.PP
Currently less than 1% of the official test suite gets skipped. Here is a list of known
limitations:
.IP "\(bu" 2
Float and integers are equal up to 64\-bit representation limits
.Sp
This module is unable to say that the 64\-bit number \*(L"9007199254740992.0\*(R" is the
same as \*(L"9007199254740992\*(R".
.IP "\(bu" 2
unevaluatedItems
.Sp
See \*(L"unevaluatedProperties\*(R"
.IP "\(bu" 2
unevaluatedProperties
.Sp
\&\*(L"unevaluatedItems\*(R" and \*(L"unevaluatedProperties\*(R" needs to track what has been
valdated or not using annotations. This is not yet supported.
.IP "\(bu" 2
\&\f(CW$recursiveAnchor\fR
.Sp
Basic support for \f(CW$recursiveRef\fR is supported, but using it together with
\&\f(CW$recursiveAnchor\fR is not.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "specification"
.IX Subsection "specification"
.Vb 1
\&  my $str = $schema\->specification;
.Ve
.PP
Defaults to "<https://json\-schema.org/draft/2019\-09/schema>".
.SH "SEE ALSO"
.IX Header "SEE ALSO"
JSON::Validator::Schema.
