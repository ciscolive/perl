.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Nums2Words 3"
.TH Nums2Words 3 "2016-07-29" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Lingua::EN::Nums2Words \- generate English verbiage from numerical values
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Lingua::EN::Nums2Words;
\&  
\&  $Number   = 42;
\&  $Verbiage = num2word($Number);
\&  $Verbiage = num2word_ordinal($Number);
\&  $Verbiage = num2word_short_ordinal($Number);
\&  $Verbiage = num2usdollars($Number);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides functions that can be used to generate English
verbiage for numbers.
.PP
To the best of my knowledge, this code can handle every real value
from negative infinity to positive infinity.
.PP
This module makes verbiage in \*(L"short scales\*(R" (1,000,000,000 is \*(L"one billion\*(R"
rather than \*(L"one thousand million\*(R"). For details see this Wikipedia article:
.PP
<http://en.wikipedia.org/wiki/Long_and_short_scales>
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
The following code illustrates use of the four functions in this module:
.PP
.Vb 1
\&  use Lingua::EN::Nums2Words;
\&  
\&  $age = 45;
\&  print "I am ", num2word($age), " years old.\en";
\&  print "I\*(Aqve had my ", num2word_ordinal($age), " birthday.\en";
\&  print "I\*(Aqm in my ", num2word_short_ordinal($age+1), " year.\en";
\&  print "Pay me ", num2usdollars($age), ".\en";
.Ve
.PP
This prints out:
.PP
.Vb 4
\&  I am FORTY\-FIVE years old.
\&  I\*(Aqve had my FORTY\-FIFTH birthday.
\&  I\*(Aqm in my 46th year.
\&  Pay me FORTY\-FIVE DOLLARS AND ZERO CENTS.
.Ve
.PP
As shown above, the default is to return uppercase words.  If you would
prefer to have lowercase words returned, make this call once, early in
your program:
.PP
.Vb 1
\& Lingua::EN::Nums2Words::set_case(\*(Aqlower\*(Aq); # Accepts upper|lower
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1996\-2016, Lester H. Hightower, Jr. <hightowe@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
As of version 1.13, this software is licensed under the \s-1OSI\s0 certified
Artistic License, one of the licenses of Perl itself.
.PP
<http://en.wikipedia.org/wiki/Artistic_License>
