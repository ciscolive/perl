.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::ThreatProtection::RuleParam 3"
.TH Infoblox::Grid::ThreatProtection::RuleParam 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::ThreatProtection::RuleParam \- A Grid Threat Protection Rule parameter object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Grid Threat Protection Rule parameter object represents information about Threat Protection Rule Config parameters.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 4
\& my $object = Infoblox::Grid::ThreatProtection::RuleParam\->new(
\&    \*(Aqname\*(Aq  => $string,    # Required
\&    \*(Aqvalue\*(Aq => $string,    # Required
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
The object does not support any session methods.
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
This section describes all the functions that you can apply to an ThreatProtection RuleParam object.
.SS "Infoblox::Grid::ThreatProtection::RuleConfig\->params( )"
.IX Subsection "Infoblox::Grid::ThreatProtection::RuleConfig->params( )"
.RS 4
Use this method to set or retrieve rule parameters. See Infoblox::Grid::ThreatProtection::RuleConfig\->\fBparams()\fR
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  my $rule_param = Infoblox::Grid::ThreatProtection::RuleParam\->new(
\&    \*(Aqname\*(Aq  => \*(AqSRC_IP\*(Aq,
\&    \*(Aqvalue\*(Aq => \*(Aqabcd::\*(Aq,
\&  );
\&
\&  my $rule_config = Infoblox::Grid::ThreatProtection::RuleConfig\->new(
\&    \*(Aqaction\*(Aq             => \*(AqPASS\*(Aq,
\&    \*(Aqlog_severity\*(Aq       => \*(AqMAJOR\*(Aq,
\&    \*(Aqparams\*(Aq             => [$rule_param]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of the struct.
.SS "description( )"
.IX Subsection "description( )"
.RS 4
Use this method to retrieve the parameter description. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $object\->description();
.Ve
.RE
.RS 4
.RE
.SS "min( )"
.IX Subsection "min( )"
.RS 4
Use this method to retrieve the minimum value of the parameter if the parameter syntax is \s-1UNSIGNED_INT.\s0 This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $object\->min();
.Ve
.RE
.RS 4
.RE
.SS "max( )"
.IX Subsection "max( )"
.RS 4
Use this method to retrieve the maximum value of the parameter if the parameter syntax is \s-1UNSIGNED_INT.\s0 This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $object\->max();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the parameter name.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The parameter name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->name();
\& # Modify attribute value
\& $object\->name(\*(AqSRC_IP\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "read_only( )"
.IX Subsection "read_only( )"
.RS 4
Use this method to indicate if the parameter is read-only. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $object\->read_only();
.Ve
.RE
.RS 4
.RE
.SS "syntax( )"
.IX Subsection "syntax( )"
.RS 4
Use this method to retrieve the parameter syntax. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $object\->syntax();
.Ve
.RE
.RS 4
.RE
.SS "value( )"
.IX Subsection "value( )"
.RS 4
Use this method to set or retrieve the parameter value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The parameter value in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $object\->value();
\& # Modify attribute value
\& $object\->value(\*(Aq15\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::ThreatProtection::Rule, Infoblox::Grid::ThreatProtection::RuleConfig
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
