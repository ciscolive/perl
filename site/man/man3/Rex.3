.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Rex 3"
.TH Rex 3 "2020-10-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rex \- the friendly automation framework
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Rex is an automation framework that is friendly to any combinations of local
and remote execution, push and pull style of management, or imperative and
declarative approach.
.PP
Its flexibility makes it a great fit for many different use cases, but most
commonly Rex is used to automate application deployment and data center
infrastructure management tasks.
.PP
See Rex::Commands for a starting point of available built-in commands.
.PP
See rex <https://metacpan.org/pod/distribution/Rex/bin/rex> for more information about how to use rex on the command line.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # In a Rexfile:
\&    use Rex \-feature => [qw/1.4/];
\&   
\&    user "root";
\&    password "ch4ngem3";
\&   
\&    desc "Show system information";
\&    task "sysinfo", sub {
\&       say run "uname \-a";
\&    };
\&
\&    1;
\&   
\&    # On the command line:
\&    $ rex \-H server[01..10] sysinfo
.Ve
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "get_current_connection"
.IX Subsection "get_current_connection"
This function is deprecated since 0.28! See Rex::Commands::connection.
.PP
Returns the current connection as a hashRef.
.IP "server" 4
.IX Item "server"
The server name
.IP "ssh" 4
.IX Item "ssh"
1 if it is a ssh connection, 0 if not.
.SS "is_ssh"
.IX Subsection "is_ssh"
Returns 1 if the current connection is a ssh connection. 0 if not.
.SS "is_local"
.IX Subsection "is_local"
Returns 1 if the current connection is local. Otherwise 0.
.SS "is_sudo"
.IX Subsection "is_sudo"
Returns 1 if the current operation is executed within sudo.
.SS "get_sftp"
.IX Subsection "get_sftp"
Returns the sftp object for the current ssh connection.
.SS "connect"
.IX Subsection "connect"
Use this function to create a connection if you use Rex as a library.
.PP
.Vb 3
\& use Rex;
\& use Rex::Commands::Run;
\& use Rex::Commands::Fs;
\&
\& Rex::connect(
\&   server    => "remotehost",
\&   user      => "root",
\&   password   => "f00b4r",
\&   private_key => "/path/to/private/key/file",
\&   public_key  => "/path/to/public/key/file",
\& );
\&
\& if(is_file("/foo/bar")) {
\&   print "Do something...\en";
\& }
\&
\& my $output = run("uptime");
.Ve
.SH "FEATURE FLAGS"
.IX Header "FEATURE FLAGS"
Everyone knows the pain if something gets deprecated and one has to
port his old (and stable) code to a new version of a library or a
framework. There is enough work to do instead of fixing code to work
with newer versions of them.
.PP
So there is one promise new versions of Rex has to fulfill. They must
be backward compatible.
.PP
I know this might be impossible in one way or another, but to minimize
this danger there is a thing called feature flags. If there is the need
to break backward compatibility in favor of a new feature there will be
a feature flag for this change. And only if this feature flag gets
enabled in the Rexfile it will break compatibility.
.PP
So the default is always to remain compatible.
.PP
If you have a problem that occurs after an update, it is considered as
a bug. Please report this bug in our issue tracker.
.PP
Also see the backwards compatibility <https://metacpan.org/release/Rex/source/CONTRIBUTING.md#backwardscompatibility>
section of the \s-1CONTRIBUTING\s0 guide.
.SS "How to enable feature flags"
.IX Subsection "How to enable feature flags"
You can enable feature flags in your Rexfile with the following code:
.PP
.Vb 1
\&    use Rex \-feature => [\*(Aq1.4\*(Aq];
.Ve
.PP
or even multiple ones like this:
.PP
.Vb 1
\&    use Rex \-feature => [qw(1.4 exec_autodie)];
.Ve
.SS "List of feature flags"
.IX Subsection "List of feature flags"
.IP "1.4" 4
.IX Item "1.4"
Enable per-task argument parsing (task_chaining_cmdline_args). Furthermore, all features from earlier versions are activated. Available since version 1.4.
.IP "no_task_chaining_cmdline_args" 4
.IX Item "no_task_chaining_cmdline_args"
Disable per-task argument parsing. Available since version 1.4.
.IP "task_chaining_cmdline_args" 4
.IX Item "task_chaining_cmdline_args"
Enable per-task argument parsing: \f(CW\*(C`rex \-\-rex \-\-args task1 \-\-task1arg=value task2 \-\-task2arg\*(C'\fR
so task1 only gets \f(CW\*(C`task1arg\*(C'\fR and task2 only gets \f(CW\*(C`task2arg\*(C'\fR. Available since version 1.4.
.IP "1.3" 4
.IX Item "1.3"
Activating the new template engine by default. Furthermore, all features from earlier versions are activated. Available since version 1.3.
.IP "no_template_ng" 4
.IX Item "no_template_ng"
Disabling the new template engine. Available since version 1.3.
.IP "1.0" 4
.IX Item "1.0"
Disabling usage of a tty. This increases compatibility for remote
execution. Furthermore, all features from earlier versions are
activated. Available since version 1.0.
.IP "no_autodie" 4
.IX Item "no_autodie"
Will disable autodie feature. Available since version 1.0.
.IP "tty" 4
.IX Item "tty"
Enable pty usage for ssh connections. Available since version 1.0.
.IP "template_ng" 4
.IX Item "template_ng"
Enabling the new template engine (better error reporting, etc.). Available since version 0.56.
.IP "0.56" 4
.IX Item "0.56"
Will activate autodie feature. Furthermore, all features from earlier
versions are activated. Available since version 0.56.
.IP "autodie" 4
.IX Item "autodie"
Will enable autodie feature: die on all failed filesytem commands <https://metacpan.org/pod/Rex::Commands::Fs>. Available since version 0.56.
.IP "0.55" 4
.IX Item "0.55"
Will activate using Net::OpenSSH by default if present. Furthermore,
all features from earlier versions are activated. Available since version 0.55.
.IP "0.54" 4
.IX Item "0.54"
Will activate checking services for existence before trying to
manipulate them, and \f(CW\*(C`set()\*(C'\fR will overwrite already existing values
(instead of concatenating). Furthermore, all features from earlier
versions are activated. Available since version 0.54.
.IP "0.53" 4
.IX Item "0.53"
Will activate register_cmdb_top_scope. And all things 0.51 and down
activated. Available since version 0.53.
.IP "register_cmdb_top_scope" 4
.IX Item "register_cmdb_top_scope"
Will register all cmdb top scope variables automatically in the
templates. Available since version 0.53.
.IP "0.51" 4
.IX Item "0.51"
Will load Rex::Constants and the \s-1CMDB\s0 by default. And all things 0.47
and down activated. Available since version 0.51.
.IP "disable_taskname_warning" 4
.IX Item "disable_taskname_warning"
Disable warning about invalid task names (they should match
\&\f(CW\*(C`/^[a\-zA\-Z_][a\-zA\-Z0\-9_]*$/\*(C'\fR). Available since version 0.47.
.IP "verbose_run" 4
.IX Item "verbose_run"
Explicitly output \*(L"Successfully executed\*(R" or \*(L"Error executing\*(R" messages
for \f(CW\*(C`run()\*(C'\fR commands. Available since version 0.47.
.IP "no_cache" 4
.IX Item "no_cache"
Disable caching (like discovery results of remote \s-1OS,\s0 hardware, shell,
etc.). Available since version 0.46.
.IP "no_path_cleanup" 4
.IX Item "no_path_cleanup"
Rex cleans the path before executing a command. With this feature Rex
doesn't cleanup the path. Available since version 0.44.
.IP "source_profile" 4
.IX Item "source_profile"
Source \f(CW\*(C`$HOME/.profile\*(C'\fR before running a command. Available since version 0.44.
.IP "source_global_profile" 4
.IX Item "source_global_profile"
Source \f(CW\*(C`/etc/profile\*(C'\fR before running a command. Available since version 0.44.
.IP "exec_autodie" 4
.IX Item "exec_autodie"
If you execute a command with \f(CW\*(C`run()\*(C'\fR Rex will \f(CW\*(C`die()\*(C'\fR if the command
returns a \f(CW\*(C`RETVAL != 0\*(C'\fR. Available since version 0.44.
.IP "exec_and_sleep" 4
.IX Item "exec_and_sleep"
Sometimes some commands that fork away didn't keep running. With this
flag rex will wait a few ms before exiting the shell. Available since version 0.43.
.IP "disable_strict_host_key_checking" 4
.IX Item "disable_strict_host_key_checking"
Disabling strict host key checking for openssh connection mode. Available since version 0.43.
.IP "reporting" 4
.IX Item "reporting"
Enable reporting. Available since version 0.43.
.IP "empty_groups" 4
.IX Item "empty_groups"
Enable usage of empty groups. Available since version 0.42.
.IP "use_server_auth" 4
.IX Item "use_server_auth"
Enable the usage of special authentication options for servers. Available since version 0.42.
.IP "no_tty" 4
.IX Item "no_tty"
Disable pty usage for ssh connections. Available since version 0.41.
.IP "no_local_template_vars" 4
.IX Item "no_local_template_vars"
Use global variables in templates. Available since version 0.40.
.IP "sudo_without_sh" 4
.IX Item "sudo_without_sh"
Run sudo commands directly without the use of 'sh'. This might break
things. Available since version 0.40.
.IP "sudo_without_locales" 4
.IX Item "sudo_without_locales"
Run sudo commands without locales. This will break things if you don't
use English locales. Available since version 0.40.
.IP "exit_status" 4
.IX Item "exit_status"
This option tells Rex to return a non zero value on exit if a task
fails. Available since version 0.39.
.IP "0.35" 4
.IX Item "0.35"
This option enables the features of 0.31 and the possibility to call
tasks as a functions without the need to use a hash reference for the
parameters. Available since version 0.35.
.IP "0.31" 4
.IX Item "0.31"
To enable special authentication options for a server group. This will
overwrite the default authentication options for a task. Available since version 0.31.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Many thanks to the contributors for their work. Please see \s-1CONTRIBUTORS\s0 <https://metacpan.org/release/Rex/source/CONTRIBUTORS> file for a complete list.
.SH "LICENSE"
.IX Header "LICENSE"
Rex is a free software, licensed under:
The Apache License, Version 2.0, January 2004
