.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::Number 3"
.TH Data::Object::Number 3 "2020-04-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::Number
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Number Class for Perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package main;
\&
\&  use Data::Object::Number;
\&
\&  my $number = Data::Object::Number\->new(1_000_000);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides methods for manipulating number data.
.SH "INTEGRATES"
.IX Header "INTEGRATES"
This package integrates behaviors from:
.PP
Data::Object::Role::Dumpable
.PP
Data::Object::Role::Proxyable
.PP
Data::Object::Role::Throwable
.SH "LIBRARIES"
.IX Header "LIBRARIES"
This package uses type constraints from:
.PP
Data::Object::Types
.SH "METHODS"
.IX Header "METHODS"
This package implements the following methods:
.SS "abs"
.IX Subsection "abs"
.Vb 1
\&  abs() : Any
.Ve
.PP
The abs method returns the absolute value of the number.
.IP "abs example #1" 4
.IX Item "abs example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(12);
\&
\&  $number\->abs; # 12
.Ve
.IP "abs example #2" 4
.IX Item "abs example #2"
.Vb 1
\&  my $number = Data::Object::Number\->new(\-12);
\&
\&  $number\->abs; # 12
.Ve
.SS "atan2"
.IX Subsection "atan2"
.Vb 1
\&  atan2(Num $arg1) : Num
.Ve
.PP
The atan2 method returns the arctangent of Y/X in the range \-PI to \s-1PI.\s0
.IP "atan2 example #1" 4
.IX Item "atan2 example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(1);
\&
\&  $number\->atan2(1); # 0.785398163397448
.Ve
.SS "cos"
.IX Subsection "cos"
.Vb 1
\&  cos() : Num
.Ve
.PP
The cos method computes the cosine of the number (expressed in radians).
.IP "cos example #1" 4
.IX Item "cos example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(12);
\&
\&  $number\->cos; # 0.843853958732492
.Ve
.SS "decr"
.IX Subsection "decr"
.Vb 1
\&  decr(Num $arg1) : Num
.Ve
.PP
The decr method returns the numeric number decremented by 1.
.IP "decr example #1" 4
.IX Item "decr example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(123456789);
\&
\&  $number\->decr; # 123456788
.Ve
.SS "defined"
.IX Subsection "defined"
.Vb 1
\&  defined() : Num
.Ve
.PP
The defined method returns true if the object represents a value that meets the
criteria for being defined, otherwise it returns false.
.IP "defined example #1" 4
.IX Item "defined example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new;
\&
\&  $number\->defined; # 1
.Ve
.SS "downto"
.IX Subsection "downto"
.Vb 1
\&  downto(Num $arg1) : ArrayRef
.Ve
.PP
The downto method returns an array reference containing integer decreasing
values down to and including the limit.
.IP "downto example #1" 4
.IX Item "downto example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(10);
\&
\&  $number\->downto(5); # [10,9,8,7,6,5]
.Ve
.SS "eq"
.IX Subsection "eq"
.Vb 1
\&  eq(Any $arg1) : Num
.Ve
.PP
The eq method performs a numeric equality operation.
.IP "eq example #1" 4
.IX Item "eq example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(12345);
\&
\&  $number\->eq(12346); # 0
.Ve
.SS "exp"
.IX Subsection "exp"
.Vb 1
\&  exp() : Num
.Ve
.PP
The exp method returns e (the natural logarithm base) to the power of the
number.
.IP "exp example #1" 4
.IX Item "exp example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(0);
\&
\&  $number\->exp; # 1
.Ve
.IP "exp example #2" 4
.IX Item "exp example #2"
.Vb 1
\&  my $number = Data::Object::Number\->new(1);
\&
\&  $number\->exp; # 2.71828182845905
.Ve
.IP "exp example #3" 4
.IX Item "exp example #3"
.Vb 1
\&  my $number = Data::Object::Number\->new(1.5);
\&
\&  $number\->exp; # 4.48168907033806
.Ve
.SS "ge"
.IX Subsection "ge"
.Vb 1
\&  ge(Any $arg1) : Num
.Ve
.PP
The ge method returns true if the argument provided is greater-than or equal-to
the value represented by the object.
.IP "ge example #1" 4
.IX Item "ge example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(0);
\&
\&  $number\->ge(0); # 1
.Ve
.SS "gt"
.IX Subsection "gt"
.Vb 1
\&  gt(Any $arg1) : Num
.Ve
.PP
The gt method performs a numeric greater-than comparison.
.IP "gt example #1" 4
.IX Item "gt example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(99);
\&
\&  $number\->gt(50); # 1
.Ve
.SS "hex"
.IX Subsection "hex"
.Vb 1
\&  hex() : Str
.Ve
.PP
The hex method returns a hex string representing the value of the number.
.IP "hex example #1" 4
.IX Item "hex example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(175);
\&
\&  $number\->hex; # 0xaf
.Ve
.SS "incr"
.IX Subsection "incr"
.Vb 1
\&  incr(Num $arg1) : Num
.Ve
.PP
The incr method returns the numeric number incremented by 1.
.IP "incr example #1" 4
.IX Item "incr example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(123456789);
\&
\&  $number\->incr; # 123456790
.Ve
.SS "int"
.IX Subsection "int"
.Vb 1
\&  int() : Num
.Ve
.PP
The int method returns the integer portion of the number. Do not use this
method for rounding.
.IP "int example #1" 4
.IX Item "int example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(12.5);
\&
\&  $number\->int; # 12
.Ve
.SS "le"
.IX Subsection "le"
.Vb 1
\&  le(Any $arg1) : Num
.Ve
.PP
The le method returns true if the argument provided is less-than or equal-to
the value represented by the object.
.IP "le example #1" 4
.IX Item "le example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(0);
\&
\&  $number\->le(\-1); # 0
.Ve
.SS "log"
.IX Subsection "log"
.Vb 1
\&  log() : Num
.Ve
.PP
The log method returns the natural logarithm (base e) of the number.
.IP "log example #1" 4
.IX Item "log example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(12345);
\&
\&  $number\->log; # 9.42100640177928
.Ve
.SS "lt"
.IX Subsection "lt"
.Vb 1
\&  lt(Any $arg1) : Num
.Ve
.PP
The lt method performs a numeric less-than comparison.
.IP "lt example #1" 4
.IX Item "lt example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(86);
\&
\&  $number\->lt(88); # 1
.Ve
.SS "mod"
.IX Subsection "mod"
.Vb 1
\&  mod() : Num
.Ve
.PP
The mod method returns the division remainder of the number divided by the
argment.
.IP "mod example #1" 4
.IX Item "mod example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(12);
\&
\&  $number\->mod(1); # 0
.Ve
.IP "mod example #2" 4
.IX Item "mod example #2"
.Vb 1
\&  my $number = Data::Object::Number\->new(12);
\&
\&  $number\->mod(2); # 0
.Ve
.IP "mod example #3" 4
.IX Item "mod example #3"
.Vb 1
\&  my $number = Data::Object::Number\->new(12);
\&
\&  $number\->mod(3); # 0
.Ve
.IP "mod example #4" 4
.IX Item "mod example #4"
.Vb 1
\&  my $number = Data::Object::Number\->new(12);
\&
\&  $number\->mod(4); # 0
.Ve
.IP "mod example #5" 4
.IX Item "mod example #5"
.Vb 1
\&  my $number = Data::Object::Number\->new(12);
\&
\&  $number\->mod(5); # 2
.Ve
.SS "ne"
.IX Subsection "ne"
.Vb 1
\&  ne(Any $arg1) : Num
.Ve
.PP
The ne method performs a numeric equality operation.
.IP "ne example #1" 4
.IX Item "ne example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(\-100);
\&
\&  $number\->ne(100); # 1
.Ve
.SS "neg"
.IX Subsection "neg"
.Vb 1
\&  neg() : Num
.Ve
.PP
The neg method returns a negative version of the number.
.IP "neg example #1" 4
.IX Item "neg example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(12345);
\&
\&  $number\->neg; # \-12345
.Ve
.SS "pow"
.IX Subsection "pow"
.Vb 1
\&  pow() : Num
.Ve
.PP
The pow method returns a number, the result of a math operation, which is the
number to the power of the argument.
.IP "pow example #1" 4
.IX Item "pow example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(12345);
\&
\&  $number\->pow(3); # 1881365963625
.Ve
.SS "sin"
.IX Subsection "sin"
.Vb 1
\&  sin() : Num
.Ve
.PP
The sin method returns the sine of the number (expressed in radians).
.IP "sin example #1" 4
.IX Item "sin example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(12345);
\&
\&  $number\->sin; # \-0.993771636455681
.Ve
.SS "sqrt"
.IX Subsection "sqrt"
.Vb 1
\&  sqrt(Num $arg1) : Num
.Ve
.PP
The sqrt method returns the positive square root of the number.
.IP "sqrt example #1" 4
.IX Item "sqrt example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(12345);
\&
\&  $number\->sqrt; # 111.108055513541
.Ve
.SS "to"
.IX Subsection "to"
.Vb 1
\&  to(Num $arg1) : ArrayRef
.Ve
.PP
The to method returns an array reference containing integer increasing or
decreasing values to and including the limit in ascending or descending order
based on the value of the floating-point object.
.IP "to example #1" 4
.IX Item "to example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(5);
\&
\&  $number\->to(9); # [5,6,7,8,9]
.Ve
.IP "to example #2" 4
.IX Item "to example #2"
.Vb 1
\&  my $number = Data::Object::Number\->new(5);
\&
\&  $number\->to(1); # [5,4,3,2,1]
.Ve
.SS "upto"
.IX Subsection "upto"
.Vb 1
\&  upto(Num $arg1) : Any
.Ve
.PP
The upto method returns an array reference containing integer increasing values
up to and including the limit.
.IP "upto example #1" 4
.IX Item "upto example #1"
.Vb 1
\&  my $number = Data::Object::Number\->new(23);
\&
\&  $number\->upto(25); # [23,24,25]
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/data-object/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/data-object/wiki>
.PP
Project <https://github.com/iamalnewkirk/data-object>
.PP
Initiatives <https://github.com/iamalnewkirk/data-object/projects>
.PP
Milestones <https://github.com/iamalnewkirk/data-object/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/data-object/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/data-object/issues>
