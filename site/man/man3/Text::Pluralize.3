.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::Pluralize 3"
.TH Text::Pluralize 3 "2007-08-08" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Pluralize \- simple pluralization routine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Text::Pluralize;
\&        
\&        print pluralize("file", $count);
\&        print pluralize("%d file(s) copied\en"), $count;
\&        print pluralize("There (was|were) {no|one|%d} error(s)\en", $count);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Text::Pluralize\*(C'\fR provides a lightweight routine to produce the proper form, 
singular or plural, of a word or phrase. Its intended purpose is to produce 
messages for the user, whether error messages or informational messages, without
the awkward \*(L"1 file(s) copied\*(R" appearance.
.SH "EXPORTED ROUTINE"
.IX Header "EXPORTED ROUTINE"
.IP "pluralize" 4
.IX Item "pluralize"
\&\f(CW\*(C`\f(CI$string\f(CW = pluralize(\f(CI$template\f(CW, \f(CI$count\f(CW);\*(C'\fR
.Sp
Returns \fI\f(CI$template\fI\fR customized by \fI\f(CI$count\fI\fR. \fI\f(CI$template\fI\fR may contain items 
matching the following formats:
.RS 4
.ie n .IP """(\fIs1\fP|\fIpl\fP)""" 4
.el .IP "\f(CW(\f(CIs1\f(CW|\f(CIpl\f(CW)\fR" 4
.IX Item "(s1|pl)"
If \fI\f(CI$count\fI\fR is equal to one, \fIs1\fR will appear here; otherwise \fI\f(CI$pl\fI\fR will 
appear at this point in the output. Either \fIs1\fR or \fIpl\fR can be empty.
.ie n .IP """(\fIpl\fP)""" 4
.el .IP "\f(CW(\f(CIpl\f(CW)\fR" 4
.IX Item "(pl)"
If \fI\f(CI$count\fI\fR is not equal to one, the string \fIpl\fR will appear at this point in 
the output. This is equivalent to \f(CW\*(C`(|\f(CIpl\f(CW)\*(C'\fR.
.ie n .IP """(\fIs1\fP|\fIs2\fP|...|\fIpl\fP)""" 4
.el .IP "\f(CW(\f(CIs1\f(CW|\f(CIs2\f(CW|...|\f(CIpl\f(CW)\fR" 4
.IX Item "(s1|s2|...|pl)"
This can be generalized. \fIs1\fR is used if \fI\f(CI$count\fI\fR is equal to one, \fIs2\fR if 
the count is equal to two, and so forth; \fIpl\fR is used for anything greater than
the last specific string applied.
.ie n .IP """{\fIs0\fP|\fIs1\fP|\fIpl\fP}""" 4
.el .IP "\f(CW{\f(CIs0\f(CW|\f(CIs1\f(CW|\f(CIpl\f(CW}\fR" 4
.IX Item "{s0|s1|pl}"
With curly braces, the choices start at zero. \fIs0\fR is used if \fI\f(CI$count\fI\fR is 
zero, \fIs1\fR if it's one, and \fIpl\fR if it's anything else.
.ie n .IP """{\fIs0\fP|\fIs1\fP|\fIs2\fP|...|\fIpl\fP}""" 4
.el .IP "\f(CW{\f(CIs0\f(CW|\f(CIs1\f(CW|\f(CIs2\f(CW|...|\f(CIpl\f(CW}\fR" 4
.IX Item "{s0|s1|s2|...|pl}"
As with the parenthesized version, this can be generalized.
.RE
.RS 4
.Sp
If none of the above substitutions appear in \fI\f(CI$template\fI\fR, it is treated as if 
it ended in \f(CW\*(C`(s)\*(C'\fR.
.Sp
Once the above substitutions have been applied, the result is examined to see if
it contains any \f(CW\*(C`%\*(C'\fR characters. If so, it is used as a format for 
sprintf, with the count and any other arguments passed to 
\&\fBpluralize\fR. This means that if you have a \f(CW\*(C`%\*(C'\fR in your template that is \fInot\fR
supposed to be a format character, you must specify \f(CW\*(C`%%\*(C'\fR instead.
.RE
.SH "EXAMPLES"
.IX Header "EXAMPLES"
In each of the examples below, the first column represents the template, the 
second column the count, and the third column the result.
.PP
.Vb 3
\&        item                            0   items
\&                                        1   item
\&                                        2   items
\&
\&        item(s) need{|s|} attention     0   items need attention
\&                                        1   item needs attention
\&                                        2   items need attention
\&
\&        {No|%d} quer(y|ies) (is|are)    0   No queries are
\&                                        1   1 query is
\&                                        2   2 queries are
\&
\&        {No|One|Two|Three|%d} item(s)   0   No items
\&                                        1   One item
\&                                        2   Two items
\&                                        3   Three items
\&                                        4   4 items
.Ve
.SH "NOTE"
.IX Header "NOTE"
If the brackets for a substitution don't match up, the one on the left controls 
what happens.
.SH "HISTORY"
.IX Header "HISTORY"
.IP "1.0" 4
.IX Item "1.0"
Initial version
.IP "1.1" 4
.IX Item "1.1"
Fix a problem with format strings containing newlines.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2007 Kevin Michael Vail, all rights reserved
.PP
This library is free software. You may modify and/or redistribute it under the 
same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Kevin Michael Vail <kvail@cpan.org>
