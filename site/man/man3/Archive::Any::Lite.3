.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Archive::Any::Lite 3"
.TH Archive::Any::Lite 3 "2016-04-29" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Archive::Any::Lite \- simple CPAN package extractor
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use strict;
\&    use warnings;
\&    use Archive::Any::Lite;
\&
\&    local $Archive::Any::Lite::IGNORE_SYMLINK = 1; # for safety
\&
\&    my $tarball = \*(Aqfoo.tar.gz\*(Aq;
\&    my $archive = Archive::Any::Lite\->new($tarball);
\&    $archive\->extract(\*(Aqinto/some/directory/\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a fork of Archive::Any by Michael Schwern and Clint Moore. The main difference is this works properly even when you \fBfork()\fR, and may require less memory to extract a tarball. On the other hand, this isn't pluggable (this only supports file formats used in the \s-1CPAN\s0 toolchains), and this doesn't check mime types (at least as of this writing).
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 2
\&  my $archive = Archive::Any::Lite\->new($archive_file);
\&  my $archive = Archive::Any::Lite\->new($archive_file, {tar_filter => qr/foo/});
.Ve
.PP
Creates an object.
You can pass an optional hash reference for finer control.
.SS "extract"
.IX Subsection "extract"
.Vb 3
\&  $archive\->extract;
\&  $archive\->extract($directory);
\&  $archive\->extract($directory, {tar_filter => qr/foo/});
.Ve
.PP
Extracts the files in the archive to the given \f(CW$directory\fR. If no \f(CW$directory\fR is given, it will go into the current working directory.
.PP
You can pass an optional hash reference for finer control. If passed, options passed in \f(CW\*(C`new\*(C'\fR will be ignored.
.SS "files"
.IX Subsection "files"
.Vb 1
\&  my @file = $archive\->files;
.Ve
.PP
A list of files in the archive.
.SS "is_impolite"
.IX Subsection "is_impolite"
.Vb 1
\&  my $is_impolite = $archive\->is_impolite;
.Ve
.PP
Checks to see if this archive is going to unpack into the current directory rather than create its own.
.SS "is_naughty"
.IX Subsection "is_naughty"
.Vb 1
\&  my $is_naughty = $archive\->is_naughty;
.Ve
.PP
Checks to see if this archive is going to unpack outside the current directory.
.SS "type"
.IX Subsection "type"
Deprecated. For backward compatibility only.
.SH "GLOBAL VARIABLE"
.IX Header "GLOBAL VARIABLE"
.ie n .SS "$IGNORE_SYMLINK"
.el .SS "\f(CW$IGNORE_SYMLINK\fP"
.IX Subsection "$IGNORE_SYMLINK"
If set to true, symlinks (and hardlinks for tarball) will be ignored.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Archive::Any, Archive::Tar::Streamed
.SH "AUTHOR"
.IX Header "AUTHOR"
Archive::Any is written by Michael G Schwern and Clint Moore.
.PP
Kenichi Ishigaki, <ishigaki@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2012 by Kenichi Ishigaki.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
