.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::IRC 3"
.TH Mojo::IRC 3 "2018-06-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::IRC \- IRC Client for the Mojo IOLoop
.SH "VERSION"
.IX Header "VERSION"
0.45
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  my $irc = Mojo::IRC\->new(
\&              nick => \*(Aqtest123\*(Aq,
\&              user => \*(Aqmy name\*(Aq,
\&              server => \*(Aqirc.perl.org:6667\*(Aq,
\&            );
\&
\&  $irc\->on(irc_join => sub {
\&    my($self, $message) = @_;
\&    warn "yay! i joined $message\->{params}[0]";
\&  });
\&
\&  $irc\->on(irc_privmsg => sub {
\&    my($self, $message) = @_;
\&    say $message\->{prefix}, " said: ", $message\->{params}[1];
\&  });
\&
\&  $irc\->connect(sub {
\&    my($irc, $err) = @_;
\&    return warn $err if $err;
\&    $irc\->write(join => \*(Aq#mojo\*(Aq);
\&  });
\&
\&  Mojo::IOLoop\->start;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::IRC is a non-blocking \s-1IRC\s0 client using Mojo::IOLoop from the
wonderful Mojolicious framework.
.PP
It features IPv6 and \s-1TLS,\s0 with additional optional modules:
IO::Socket::IP and IO::Socket::SSL.
.PP
By default this module will only emit standard \s-1IRC\s0 events, but by
settings \*(L"parser\*(R" to a custom object it will also emit \s-1CTCP\s0 events.
Example:
.PP
.Vb 5
\&  my $irc = Mojo::IRC\->new;
\&  $irc\->parser(Parse::IRC\->new(ctcp => 1);
\&  $irc\->on(ctcp_action => sub {
\&    # ...
\&  });
.Ve
.PP
It will also set up some default events: \*(L"ctcp_ping\*(R", \*(L"ctcp_time\*(R",
and \*(L"ctcp_version\*(R".
.PP
This class inherits from Mojo::EventEmitter.
.SH "TESTING"
.IX Header "TESTING"
The module Test::Mojo::IRC is useful if you want to write tests without
having a running \s-1IRC\s0 server.
.PP
\&\s-1MOJO_IRC_OFFLINE\s0 (from v0.20) is now \s-1DEPRECATED\s0 in favor of
Test::Mojo::IRC.
.SH "EVENTS"
.IX Header "EVENTS"
.SS "close"
.IX Subsection "close"
.Vb 1
\&  $self\->on(close => sub { my ($self) = @_; });
.Ve
.PP
Emitted once the connection to the server closes.
.SS "error"
.IX Subsection "error"
.Vb 1
\&  $self\->on(error => sub { my ($self, $err) = @_; });
.Ve
.PP
Emitted once the stream emits an error.
.SS "message"
.IX Subsection "message"
.Vb 1
\&  $self\->on(message => sub { my ($self, $msg) = @_; });
.Ve
.PP
Emitted when a new \s-1IRC\s0 message arrives. Will dispatch to a default handler,
which will again emit \*(L"err_event_name\*(R" \*(L"ctcp_event_name\*(R" and
\&\*(L"irc_event_name\*(R" below.
.PP
Here is an example \f(CW$msg\fR:
.PP
.Vb 7
\&  {
\&    command  => "PRIVMSG",
\&    event    => "privmsg",
\&    params   => ["#convos", "hey!"],
\&    prefix   => "jan_henning",
\&    raw_line => ":jan_henning PRIVMSG #convos :hey",
\&  }
.Ve
.SS "err_event_name"
.IX Subsection "err_event_name"
Events that start with \*(L"err_\*(R" are emitted when there is an \s-1IRC\s0 response that
indicates an error. See Mojo::IRC::Events for sample events.
.SS "ctcp_event_name"
.IX Subsection "ctcp_event_name"
Events that start with \*(L"ctcp_\*(R" are emitted if the \*(L"parser\*(R" can understand
\&\s-1CTCP\s0 messages, and there is a \s-1CTCP\s0 response.
.PP
.Vb 1
\&  $self\->parser(Parse::IRC\->new(ctcp => 1);
.Ve
.PP
See Mojo::IRC::Events for sample events.
.SS "irc_event_name"
.IX Subsection "irc_event_name"
Events that start with \*(L"irc_\*(R" are emitted when there is a normal \s-1IRC\s0 response.
See Mojo::IRC::Events for sample events.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "connect_timeout"
.IX Subsection "connect_timeout"
.Vb 2
\&  $int = $self\->connect_timeout;
\&  $self = $self\->connect_timeout(60);
.Ve
.PP
Maximum amount of time in seconds establishing a connection may take before
getting canceled, defaults to the value of the \f(CW\*(C`MOJO_IRC_CONNECT_TIMEOUT\*(C'\fR
environment variable or 30.
.SS "ioloop"
.IX Subsection "ioloop"
Holds an instance of Mojo::IOLoop.
.SS "local_address"
.IX Subsection "local_address"
.Vb 2
\&  $str = $self\->local_address;
\&  $self = $self\->local_address("10.20.30.40");
.Ve
.PP
Local address to bind to. See \*(L"local_address\*(R" in Mojo::IOLoop::Client.
.SS "name"
.IX Subsection "name"
The name of this \s-1IRC\s0 client. Defaults to \*(L"Mojo \s-1IRC\*(R".\s0
.SS "nick"
.IX Subsection "nick"
\&\s-1IRC\s0 nick name accessor. Default to \*(L"user\*(R".
.SS "parser"
.IX Subsection "parser"
.Vb 3
\&  $self = $self\->parser($obj);
\&  $self = $self\->parser(Parse::IRC\->new(ctcp => 1));
\&  $obj = $self\->parser;
.Ve
.PP
Holds a Parse::IRC object by default.
.SS "pass"
.IX Subsection "pass"
Password for authentication
.SS "real_host"
.IX Subsection "real_host"
Will be set by \*(L"irc_rpl_welcome\*(R". Holds the actual hostname of the \s-1IRC\s0
server that we are connected to.
.SS "server"
.IX Subsection "server"
Server name and, optionally, a port to connect to. Changing this while
connected to the \s-1IRC\s0 server will issue a reconnect.
.SS "server_settings"
.IX Subsection "server_settings"
.Vb 1
\&  $hash = $self\->server_settings;
.Ve
.PP
Holds information about the server. See
<https://github.com/jhthorsen/mojo\-irc/blob/master/t/ua\-channel\-users.t> for
example data structure.
.PP
Note that this attribute is \s-1EXPERIMENTAL\s0 and the structure of the values it
holds.
.SS "user"
.IX Subsection "user"
\&\s-1IRC\s0 username. Defaults to current logged in user or falls back to \*(L"anonymous\*(R".
.SS "tls"
.IX Subsection "tls"
.Vb 2
\&  $self\->tls(undef) # disable (default)
\&  $self\->tls({}) # enable
.Ve
.PP
Default is \*(L"undef\*(R" which disables \s-1TLS.\s0 Setting this to an empty hash will
enable \s-1TLS\s0 and this module will load in default certs. It is also possible
to set custom cert/key:
.PP
.Vb 1
\&  $self\->tls({ cert => "/path/to/client.crt", key => ... })
.Ve
.PP
This can be generated using
.PP
.Vb 2
\&  # certtool \-\-generate\-privkey \-\-outfile client.key
\&  # certtool \-\-generate\-self\-signed \-\-load\-privkey client.key \-\-outfile client.crt
.Ve
.PP
To disable the verification of server certificates, the \*(L"insecure\*(R" option
can be set:
.PP
.Vb 1
\&  $self\->tls({insecure => 1});
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "connect"
.IX Subsection "connect"
.Vb 1
\&  $self = $self\->connect(\e&callback);
.Ve
.PP
Will log in to the \s-1IRC\s0 \*(L"server\*(R" and call \f(CW&callback\fR. The
\&\f(CW&callback\fR will be called once connected or if connect fails. The second
argument will be an error message or empty string on success.
.SS "ctcp"
.IX Subsection "ctcp"
.Vb 1
\&  $str = $self\->ctcp(@str);
.Ve
.PP
This message will quote \s-1CTCP\s0 messages. Example:
.PP
.Vb 1
\&  $self\->write(PRIVMSG => nickname => $self\->ctcp(TIME => time));
.Ve
.PP
The code above will write this message to \s-1IRC\s0 server:
.PP
.Vb 1
\&  PRIVMSG nickname :\e001TIME 1393006707\e001
.Ve
.SS "disconnect"
.IX Subsection "disconnect"
.Vb 1
\&  $self\->disconnect(\e&callback);
.Ve
.PP
Will disconnect form the server and run the callback once it is done.
.SS "new"
.IX Subsection "new"
.Vb 1
\&  $self = Mojo::IRC\->new(%attrs);
.Ve
.PP
Object constructor.
.SS "register_default_event_handlers"
.IX Subsection "register_default_event_handlers"
.Vb 1
\&  $self\->register_default_event_handlers;
.Ve
.PP
This method sets up the default \*(L"\s-1DEFAULT EVENT HANDLERS\*(R"\s0 unless someone has
already subscribed to the event.
.SS "write"
.IX Subsection "write"
.Vb 1
\&  $self\->write(@str, \e&callback);
.Ve
.PP
This method writes a message to the \s-1IRC\s0 server. \f(CW@str\fR will be concatenated
with \*(L" \*(R" and \*(L"\er\en\*(R" will be appended. \f(CW&callback\fR is called once the message is
delivered over the stream. The second argument to the callback will be
an error message: Empty string on success and a description on error.
.SH "DEFAULT EVENT HANDLERS"
.IX Header "DEFAULT EVENT HANDLERS"
.SS "ctcp_ping"
.IX Subsection "ctcp_ping"
Will respond to the sender with the difference in time.
.PP
.Vb 1
\&  Ping reply from $sender: 0.53 second(s)
.Ve
.SS "ctcp_time"
.IX Subsection "ctcp_time"
Will respond to the sender with the current localtime. Example:
.PP
.Vb 1
\&  TIME Fri Feb 21 18:56:50 2014
.Ve
.PP
\&\s-1NOTE\s0! The localtime format may change.
.SS "ctcp_version"
.IX Subsection "ctcp_version"
Will respond to the sender with:
.PP
.Vb 1
\&  VERSION Mojo\-IRC $VERSION
.Ve
.PP
\&\s-1NOTE\s0! Additional information may be added later on.
.SS "irc_nick"
.IX Subsection "irc_nick"
Used to update the \*(L"nick\*(R" attribute when the nick has changed.
.SS "irc_notice"
.IX Subsection "irc_notice"
Responds to the server with \*(L"\s-1QUOTE PASS ...\*(R"\s0 if the notice contains \*(L"Ident
broken...QUOTE \s-1PASS...\*(R".\s0
.SS "irc_ping"
.IX Subsection "irc_ping"
Responds to the server with \*(L"\s-1PONG ...\*(R".\s0
.SS "irc_rpl_isupport"
.IX Subsection "irc_rpl_isupport"
Used to populate \*(L"server_settings\*(R" with information about the server.
.SS "irc_rpl_welcome"
.IX Subsection "irc_rpl_welcome"
Used to get the hostname of the server. Will also set up automatic \s-1PING\s0
requests to prevent timeout and update the \*(L"nick\*(R" attribute.
.SS "err_nicknameinuse"
.IX Subsection "err_nicknameinuse"
This handler will add \*(L"_\*(R" to the failed nick before trying to register again.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Marcus Ramberg \- \f(CW\*(C`mramberg@cpan.org\*(C'\fR
.PP
Jan Henning Thorsen \- \f(CW\*(C`jhthorsen@cpan.org\*(C'\fR
