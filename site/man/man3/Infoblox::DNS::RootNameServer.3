.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::RootNameServer 3"
.TH Infoblox::DNS::RootNameServer 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::RootNameServer \- Custom root name server object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The custom root name server provides host name and \s-1IP\s0 address information of the internal root name server. When the Infoblox appliance receives a recursive query for \s-1DNS\s0 data that it does not have, it uses the internal root name server specified instead of using the Internet root name server.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 5
\& my $rootns = Infoblox::DNS::RootNameServer\->new(
\&              host_name => $fqdn,      #Required
\&              ipv4addr  => $ipv4addr   #Required if $ipv6addr is not present
\&              ipv6addr  => $ipv4addr   #Required if $ipv4addr is not present
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
You can apply the following functions to a custom root name server object:
.SS "Infoblox::DNS::View\->custom_root_name_servers( )"
.IX Subsection "Infoblox::DNS::View->custom_root_name_servers( )"
.RS 4
Use this function to specify custom root name servers at the view level on the Infoblox appliance. See Infoblox::DNS::View\->\fBcustom_root_name_servers()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct a custom root name server object
\& my $rootns1 = Infoblox::DNS::RootNameServer\->new(
\&              host_name => "rns1.test.com",
\&              ipv4addr  => "4.4.4.4"
\& );
\&
\& #Construct a custom root name server object
\& my $rootns2 = Infoblox::DNS::RootNameServer\->new(
\&              host_name => "rns3.test.com",
\&              ipv6addr  => "6666::"
\& );
\&
\& # Configure custom root name server on the View object
\& my $response = $View\->custom_root_name_servers([$rootns1, $rootns2]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member::DNS\->custom_root_name_servers( )"
.IX Subsection "Infoblox::Grid::Member::DNS->custom_root_name_servers( )"
.RS 4
Use this function to specify custom root name servers at the member level on the Infoblox appliance. See Infoblox::Grid::Member::DNS\->\fBcustom_root_name_servers()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct a custom root name server object
\& my $rootns1 = Infoblox::DNS::RootNameServer\->new(
\&              host_name => "rns1.test.com",
\&              ipv4addr  => "4.4.4.4"
\& );
\&
\& #Construct a custom root name server object
\& my $rootns2 = Infoblox::DNS::RootNameServer\->new(
\&              host_name => "rns3.test.com",
\&              ipv6addr  => "6666::"
\& );
\&
\& # Configure custom root name server on the member DNS object
\& my $response = $Member_DNS\->custom_root_name_servers([$rootns1, $rootns2]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods you can use to configure and retrieve the attribute values of a custom root name server.
.SS "host_name( )"
.IX Subsection "host_name( )"
.RS 4
Use this method to set or retrieve the host name of the custom root name server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the host name in the \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A host name can have a maximum of 256 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specify a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get host name
\& my $host_name = $rootns\->host_name();
\& #Modify host name
\& $rootns\->host_name("qa.infoblox.com");
.Ve
.RE
.RS 4
.RE
.SS "ipv4addr( )"
.IX Subsection "ipv4addr( )"
.RS 4
Use this method to set or retrieve the IPv4 address of the custom root name server. It is required only when IPv6 is not specified.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192. 168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specify a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv4addr
\& my $ipv4addr = $rootns\->ipv4addr();
\& #Modify ipv4addr
\& $rootns\->ipv4addr("2.2.2.2");
.Ve
.RE
.RS 4
.RE
.SS "ipv6addr( )"
.IX Subsection "ipv6addr( )"
.RS 4
Use this method to set or retrieve the IPv6 address of the custom root name server. It is required only when IPv4 is not specified.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number in colon hexadecimal notation. It consists of eight groups of four hexadecimal digits separated by colons
(example: 12ab:0000:0000:0123:4567:89ab:0000:cdef).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specify a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting ipv6addr
\& my $ipv6addr = $rootns\->ipv6addr();
\& # Modifying ipv6addr
\& $rootns\->ipv6addr("12ab::345");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a custom root name server object such as add, modify, and remove. Also, this sample includes error handling for the operations.
.PP
\&\fB#Preparation prior to a custom root name server object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a custom root name server object\fR
.PP
.Vb 9
\& my $rootns = Infoblox::DNS::RootNameServer\->new(
\&              host_name => "rns1.test.com",
\&              ipv4addr  => "4.4.4.4"
\& );
\& unless($rootns) {
\&        die("Construct custom root name server object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Root name server object created successfully\en";
.Ve
.PP
\&\fB#Get the Member \s-1DNS\s0 object and add custom root name server to it\fR
.PP
.Vb 11
\& #Get the Member DNS object
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Member::DNS",
\&     name   => "infoblox.localdomain"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get Member DNS object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Member DNS object found at least 1 matching entry\en";
\&
\& #Apply the changes to the Grid DNS object
\& $object\->custom_root_name_servers([$rootns]);
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify Member DNS object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Member DNS object with custom root name server updated to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Modify custom root name server\fR
.PP
.Vb 1
\& #Modify existing custom root name server object
\&
\& #Modifying the host name of the custom root name server object.
\& $rootns\->host_name("eng.infoblox.com");
\&
\& #Modifying the IPV4 address of the custom root name server object.
\& $rootns\->ipv4addr("3.3.3.3");
\&
\& #Apply changes to the Member DNS object.
\& $object\->custom_root_name_servers([$rootns]);
\&
\& #Update Member DNS object through the Infoblox session.
\& $session\->modify($object)
\&             or die("modify Member DNS object failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&        print "Member DNS object with modified custom root name server updated to Infoblox appliance successfully\en";
.Ve
.PP
\&\fB#Remove custom root name server\fR
.PP
.Vb 2
\& #Apply changes to the Member DNS object to use default internet root name server.
\& $object\->custom_root_name_servers(undef);
\&
\& #Update Member DNS object through the Infoblox session.
\& $session\->modify($object)
\&             or die("Remove custom root name server from Member DNS object failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&        print "Removed custom root name server from Member DNS object successfully\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Grid::Member::DNS, Infoblox::DNS::View
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
