.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::DnssecTrustedKey 3"
.TH Infoblox::DNS::DnssecTrustedKey 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::DnssecTrustedKey \- DNSSEC trusted key object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For recursively derived signed data, the \s-1DNS\s0 server can perform
validation. In order to be secure, this validation relies on
a set of trust anchors. These trust anchors and their associated
trusted keys can be specified via the Infoblox::DNS::DnssecTrustedKey
objects.
.PP
\&\s-1DNSSEC\s0 is based on \s-1DNS\s0 specifications  \s-1RFC 4033,\s0  \s-1RFC 4034,\s0 and \s-1RFC 4035,\s0 which  provide authentication protocol enhancements to secure \s-1DNS\s0 transactions.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 6
\& my $dnssec_trusted_key=Infoblox::DNS::DnssecTrustedKey\->new(
\&                    algorithm            => "RSAMD5"|"DSA"|"RSASHA1"|"NSEC3DSA"|"NSEC3RSASHA1"|"RSASHA256"|"RSASHA512"|"NSEC3RSASHA256"|"NSEC3RSASHA512"|1|3|5|6|7,  #Required
\&                    fqdn                 => $string,                                  #Required
\&                    key                  => $string,                                  #Required
\&                    secure_entry_point   => "true"|"false"                            #Optional / Default is "true"
\&                        );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
This section describes all the functions that you can apply to a DnssecTrustedKey object.
.SS "Infoblox::Grid::DNS\->dnssec_trusted_keys( )"
.IX Subsection "Infoblox::Grid::DNS->dnssec_trusted_keys( )"
.RS 4
Use this function to specify a list of \s-1DNSSEC\s0 keys for a grid object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& ## Construct the trusted key object. When trying to implement this example replace with the actual public key of the signed zone.
\& my $dnssec_key = Infoblox::DNS::DnssecTrustedKey\->new(
\&     algorithm => "RSAMD5",
\&     fqdn => "example.com",
\&     key  => "Zx1jVJl7C58GT/sc7Q3ucA==",
\&     secure_entry_point => "false"
\& );
\& # Configure dnssec_trusted_keys on the grid DNS object
\& my $response = $Grid_DNS\->dnssec_trusted_keys([$dnssec_key]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member::DNS\->dnssec_trusted_keys( )"
.IX Subsection "Infoblox::Grid::Member::DNS->dnssec_trusted_keys( )"
.RS 4
Use this function to specify a list of \s-1DNSSEC\s0 keys for a grid member object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& ## Construct the trusted key object
\& my $dnssec_key = Infoblox::DNS::DnssecTrustedKey\->new(
\&     algorithm => "RSAMD5",
\&     fqdn => "example.com",
\&     key  => "Zx1jVJl7C58GT/sc7Q3ucA==",
\&     secure_entry_point => "false"
\& );
\& # Configure dnssec_trusted_keys on the grid DNS object
\& my $response = $Grid_Member_DNS\->dnssec_trusted_keys([$dnssec_key]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DNS::View\->dnssec_trusted_keys( )"
.IX Subsection "Infoblox::DNS::View->dnssec_trusted_keys( )"
.RS 4
Use this function to specify a list of \s-1DNSSEC\s0 keys for a \s-1DNS\s0 View object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& ## Construct the trusted key object
\& my $dnssec_key = Infoblox::DNS::DnssecTrustedKey\->new(
\&     algorithm => "RSAMD5",
\&     fqdn => "example.com",
\&     key  => "Zx1jVJl7C58GT/sc7Q3ucA==",
\&     secure_entry_point => "false"
\& );
\& # Configure dnssec_trusted_keys on the grid DNS object
\& my $response = $DNS_View\->dnssec_trusted_keys([$dnssec_key]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.SS "algorithm( )"
.IX Subsection "algorithm( )"
.RS 4
Use this method to set or retrieve a \s-1DNSSEC\s0 encryption algorithm.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The public-key encryption algorithm. This can be either an integer or mnemonic. The  following table shows the correlation between the integers and mnemonics
for the algorithms supported by the  appliance:
.Sp
.Vb 6
\&    Value  Algorithm        Mnemonic
\&      1     RSA/MD5         RSAMD5
\&      3     DSA             DSA
\&      5     RSA/SHA\-1       RSASHA1
\&      6     NSEC3DSA        NSEC3DSA
\&      7     NSEC3RSA/SHA\-1  NSEC3RSASHA1
.Ve
.Sp
For algorithms not listed above, only the mnemonic representation is supported.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting algorithm
\& my $algorithm = $dnssec_key\->algorithm();
\& # Modifying algorithm
\& $dnssec_key\->algorithm("DSA");
.Ve
.RE
.RS 4
.RE
.SS "fqdn( )"
.IX Subsection "fqdn( )"
.RS 4
Use this method to set or retrieve  the \s-1FQDN\s0 of the zone to which the key belongs.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
\&\s-1FQDN\s0 of the zone to which the trusted_key pertains, in \s-1DNS\s0 label order.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting fqdn
\& my $zone = $dnssec_key\->fqdn();
\& # Modifying algorithm
\& $dnssec_key\->fqdn("zone.example.com");
.Ve
.RE
.RS 4
.RE
.SS "key( )"
.IX Subsection "key( )"
.RS 4
Use this method to add or retrieve the \s-1DNSSEC\s0 public key for the zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Base\-64 encoding of the key.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting key
\& my $key = $dnssec_key\->key();
\& # Modifying key
\& $dnssec_key\->key("AQPdWbrGbVv1eDhNgRhpJMPonJfA3reyEo82ekwRnjbX7+uBxB11BqL7LAB7/C+eb0vCtI53FwMhkkNkTmA6bI8B");
.Ve
.RE
.RS 4
.RE
.SS "\fBsecure_entry_point()\fP"
.IX Subsection "secure_entry_point()"
.RS 4
Use this method to  set or retrieve the secure entry point value for the field.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set to \*(L"true\*(R" to enable the secure entry point, set to \*(L"false\*(R" to disable it. Default value of this parameter is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting secure_entry_point
\& my $sep = $dnssec_key\->secure_entry_point();
\& # Modifying secure_entry_point
\& $dnssec_key\->secure_entry_point("false");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add and  modify. This sample also includes error handling for the operations.
.PP
\&\fB##Preparation prior to a DnssecTrustedKey object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox  appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a DnssecTrustedKey object\fR
.PP
.Vb 5
\&  my $dnssec_key = Infoblox::DNS::DnssecTrustedKey\->new(
\&     key  => "ZX1jVJl7C58GT/sc7Q3ucA==",
\&     fqdn => "myzone.example.com",
\&     algorithm => "RSASHA1"
\& );
\&
\& unless($dnssec_key) {
\&      die("Construct DnssecTrustedKey failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DnssecTrustedKey object created successfully\en";
.Ve
.PP
\&\fB#Get the member \s-1DNS\s0 object and add a DnssecTrustedKey object to it\fR
.PP
.Vb 4
\& my @result_array = $session\->get(
\&     object => "Infoblox::Grid::Member::DNS",
\&     name   => "infoblox.localdomain"
\& );
\&
\& unless (scalar(@result_array) == 0) {
\&     my $memberdns = $result_array[0];
\&
\&     if ($memberdns) {
\&
\&         #Apply changes to the Member object.
\&        $memberdns\->dnssec_trusted_keys([$dnssec_key])
\&             or die("modify member failed: ",
\&                    Infoblox::status_code() . ":" . Infoblox::status_detail());
\&         print "DnssecTrustedKey added to Member DNS object successfully\en";
\&
\&  #Update member DNS object through the Infoblox session.
\&         $session\->modify($memberdns)
\&             or die("modify session failed: ",
\&                    $session\->status_code() . ":" . $session\->status_detail());
\&         print "Member DNS object with DnssecTrustedKey updated to Infoblox device successfully\en";
\&
\&          #Modify existing DnssecTrustedKey object
\&
\&         #Modifying the value of the specified object.
\&         $dnssec_key\->fqdn("another.example.com");
\&         print "Modify DnssecTrustedKey fqdn value\en";
\&
\&         #Apply changes to the member object.
\&         $memberdns\->transfer_keys([$dnssec_key])
\&             or die("modify member failed: ",
\&                    Infoblox::status_code() . ":" . Infoblox::status_detail());
\&         print "DnssecTrustedKey fqdn updated to Member DNS object successfully\en";
\&
\&         #Update member DNS object through the Infoblox session.
\&         $session\->modify($memberdns)
\&             or die("modify session failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&                 print "Member DNS object with DnssecTrustedKey fqdn updated to Infoblox device successfully\en";
\&              }
\&          } else {
\&              print "No member found with the specified name.";
\&          }
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::Member::DNS, Infoblox::DNS::View, Infoblox::Grid::DNS
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
