.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::ServerStatus 3"
.TH Mojolicious::Plugin::ServerStatus 3 "2016-05-26" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::ServerStatus \- show server status like Apache's mod_status
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    # Lite
\&    plugin \*(AqServerStatus\*(Aq => {
\&        path => \*(Aq/server\-status\*(Aq,
\&        allow => [ \*(Aq127.0.0.1\*(Aq, \*(Aq192.168.0.0/16\*(Aq ],
\&    };
\&
\&    # Full Mojolicious
\&    $self\->plugin(
\&                \*(AqServerStatus\*(Aq => {
\&                        path  => \*(Aq/server\-status\*(Aq,
\&                        allow => [\*(Aq127.0.0.1\*(Aq, \*(Aq192.168.0.0/16\*(Aq],
\&                        scoreboard => "/some/other/dir",
\&                }
\&        );
\&
\&        # test 
\&    % curl http://server:port/server\-status
\&    Uptime: 1234567789
\&    Total Accesses: 123
\&    BusyWorkers: 2
\&    IdleWorkers: 3
\&    \-\-
\&    pid status remote_addr host method uri protocol ss
\&    20060 A 127.0.0.1 localhost:10001 GET / HTTP/1.1 1
\&    20061 .
\&    20062 A 127.0.0.1 localhost:10001 GET /server\-status HTTP/1.1 0
\&    20063 .
\&    20064 .
\&
\&    # JSON format
\&    % curl http://server:port/server\-status?json
\&    {"Uptime":"1332476669","BusyWorkers":"2",
\&     "stats":[
\&       {"protocol":null,"remote_addr":null,"pid":"78639",
\&        "status":".","method":null,"uri":null,"host":null,"ss":null},
\&       {"protocol":"HTTP/1.1","remote_addr":"127.0.0.1","pid":"78640",
\&        "status":"A","method":"GET","uri":"/","host":"localhost:10226","ss":0},
\&       ...
\&    ],"IdleWorkers":"3"}
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::ServerStatus displays server status in multiprocess
Mojolicious servers such as morbo and hypnotoad. This module changes
status only before and after executing the application, so it cannot
monitor keepalive session and network I/O wait.
.SH "CONFIGURATIONS"
.IX Header "CONFIGURATIONS"
.IP "path" 4
.IX Item "path"
.Vb 1
\&  path => \*(Aq/server\-status\*(Aq,
.Ve
.Sp
location that displays server status
.IP "allow" 4
.IX Item "allow"
.Vb 2
\&  allow => \*(Aq127.0.0.1\*(Aq
\&  allow => [\*(Aq192.168.0.0/16\*(Aq, \*(Aq10.0.0.0/8\*(Aq]
.Ve
.Sp
host based access control of a page of server status. supports IPv6 address.
.IP "scoreboard" 4
.IX Item "scoreboard"
.Vb 1
\&  scoreboard => \*(Aq/path/to/dir\*(Aq
.Ve
.Sp
Scoreboard directory, Mojolicious::Plugin::ServerStatus stores processes activity information in
.IP "counter_file" 4
.IX Item "counter_file"
.Vb 1
\&  counter_file => \*(Aq/path/to/counter_file\*(Aq
.Ve
.Sp
Enable Total Access counter
.IP "skip_ps_command" 4
.IX Item "skip_ps_command"
.Vb 1
\&  skip_ps_command => 1 or 0
.Ve
.Sp
ServerStatus executes `ps command` to find all worker processes. But in some systems
that does not mount \*(L"/proc\*(R" can not find any processes.
\&\s-1IF\s0 'skip_ps_command' is true, ServerStatus does not `ps`, and checks only processes that
already did process requests.
.SH "TOTAL BYTES"
.IX Header "TOTAL BYTES"
The largest integer that 32\-bit Perl can store without loss of precision
is 2**53. So rather than getting all fancy with Math::BigInt, we're just
going to be conservative and wrap that around to 0. That's enough to count
1 \s-1GB\s0 per second for a hundred days.
.ie n .SH "WHAT DOES ""SS"" MEAN IN STATUS"
.el .SH "WHAT DOES ``SS'' MEAN IN STATUS"
.IX Header "WHAT DOES SS MEAN IN STATUS"
Seconds since beginning of most recent request
.SH "AUTHOR"
.IX Header "AUTHOR"
fu kai <iakuf {at} 163.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious
.PP
Original ServerStatus by  <https://metacpan.org/pod/Plack::Middleware::ServerStatus::Lite>.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
