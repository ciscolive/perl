.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::CLI::Role::ArgumentSet 3"
.TH Term::CLI::Role::ArgumentSet 3 "2019-11-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::CLI::Role::ArgumentSet \- Role for (sub\-)commands in Term::CLI
.SH "VERSION"
.IX Header "VERSION"
version 0.051007
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package Term::CLI::Command {
\&
\&    use Moo;
\&
\&    with(\*(AqTerm::CLI::Role::ArgumentSet\*(Aq);
\&
\&    ...
\& };
\&
\& my $cmd = Term::CLI::Command\->new( ... );
\&
\& $cmd\->add_argument( Term::CLI::Argument\->new(...) );
\&
\& say "argument names:", join(\*(Aq, \*(Aq, $cmd\->argument_names);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Role for Term::CLI::Command(3p) elements to represent
a set of Term::CLI::Argument(3p) objects.
.PP
This role is consumed by Term::CLI::Command(3p).
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
This role defines two additional attributes:
.IP "\fBarguments\fR => \fIArrayRef\fR" 4
.IX Item "arguments => ArrayRef"
Reference to an array containing \f(CW\*(C`Term::CLI::Argument\*(C'\fR object
instances that describe the parameters that the command takes,
or \f(CW\*(C`undef\*(C'\fR.
.Sp
Note that the elements of the array are copied over to an internal
array, so modifications to the \fIArrayRef\fR will not be seen.
.SH "ACCESSORS AND PREDICATES"
.IX Header "ACCESSORS AND PREDICATES"
.IP "\fBhas_arguments\fR" 4
.IX Xref "has_arguments"
.IX Item "has_arguments"
Predicate function that returns whether or not any
Term::CLI::Arguments have been
added.
.IP "\fBarguments\fR" 4
.IX Xref "arguments"
.IX Item "arguments"
Return the list of 
Term::CLI::Argument object
references that are owned by this object.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBset_arguments\fR ( \fI\s-1ARG\s0\fR, ... )" 4
.IX Xref "set_arguments"
.IX Item "set_arguments ( ARG, ... )"
Reset the list of arguments to (\fI\s-1ARG\s0\fR, ...).
Each \fI\s-1ARG\s0\fR should be a reference to a
Term::CLI::Argument object.
.IP "\fBadd_argument\fR ( \fI\s-1ARG\s0\fR, ... )" 4
.IX Xref "add_argument"
.IX Item "add_argument ( ARG, ... )"
Add \fI\s-1ARG\s0\fR(s) to the argument set.
Each \fI\s-1ARG\s0\fR should be a reference to a
Term::CLI::Argument object.
.IP "\fBargument_names\fR" 4
.IX Xref "argument_names"
.IX Item "argument_names"
Return the list of (sub\-)command names (in the order they were specified).
.IP "\fBfind_matches\fR ( \fIStr\fR )" 4
.IX Xref "find_matches"
.IX Item "find_matches ( Str )"
Return a list of all commands in this object that match the \fIStr\fR
prefix.
.IP "\fBfind_command\fR ( \fIStr\fR )" 4
.IX Xref "find_command"
.IX Item "find_command ( Str )"
Check whether \fIStr\fR uniquely matches a command in this \f(CW\*(C`Term::CLI\*(C'\fR
object. Returns a reference to the appropriate
Term::CLI::Command object if successful; otherwise, it 
sets the objects \f(CW\*(C`error\*(C'\fR field and returns \f(CW\*(C`undef\*(C'\fR.
.Sp
Example:
.Sp
.Vb 2
\&    my $sub_cmd = $cmd\->find_command($prefix);
\&    die $cmd\->error unless $sub_cmd;
.Ve
.IP "\fBtry_callback\fR ( \fI\s-1ARGS\s0\fR )" 4
.IX Xref "try_callback"
.IX Item "try_callback ( ARGS )"
Wrapper function that will call the object's \f(CW\*(C`callback\*(C'\fR function if it
has been set, otherwise simply returns its arguments.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Term::CLI(3p),
Term::CLI::Command(3p).
.SH "AUTHOR"
.IX Header "AUTHOR"
Steven Bakker <sbakker@cpan.org>, 2018.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2018 Steven Bakker
.PP
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See \*(L"perldoc perlartistic.\*(R"
.PP
This software is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
