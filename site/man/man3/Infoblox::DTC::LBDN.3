.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DTC::LBDN 3"
.TH Infoblox::DTC::LBDN 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DTC::LBDN \- A DTC Load Balanced Domain Name object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1DTC\s0 Load Balanced Domain Name object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $lbdn = Infoblox::DTC::LBDN\->new(
\&    name                  => $string,                                                               #Required     
\&    lb_method             => \*(AqGLOBAL_AVAILABILITY\*(Aq | \*(AqRATIO\*(Aq | \*(AqROUND_ROBIN\*(Aq | \*(AqTOPOLOGY\*(Aq,          #Required
\&    patterns              => [$pattern1, $pattern2, ...],                                           #Optional / Default is undefined
\&    disable               => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                                      #Optional / Default is \*(Aqfalse\*(Aq
\&    comment               => $string,                                                               #Optional / Default is undefined
\&    persistence           => $uint,                                                                 #Optional / Default is undefined
\&    topology              => $topology_obj,                                                         #Optional / Default is undefined
\&    ttl                   => $uint,                                                                 #Optional / Default is undefined
\&    types                 => [\*(AqA\*(Aq, \*(AqAAAA\*(Aq, \*(AqNAPTR\*(Aq, \*(AqCNAME\*(Aq],                                       #Optional / Default is [\*(AqA\*(Aq, \*(AqAAAA\*(Aq]
\&    override_ttl          => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                                      #Optional / Default is \*(Aqfalse\*(Aq
\&    pools                 => [$pool_link_obj1, $pool_link_obj2, ...],                               #Optional / Default is undefined
\&    priority              => $uint,                                                                 #Optional / Default is 1
\&    auth_zones            => [$auth_zone1, $auth_zone2, ...],                                       #Optional / Default is undefined
\&    extattrs              => { $string => $extattr, ... },                                          #Optional / Default is undefined
\&    extensible_attributes => { $string => $string | $num, $string => [ $string | $num, ... ], ... } #Optional / Default is undefined
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in a Session module that you can apply to a \s-1DTC LBDN\s0 object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #construct an object
\& my $lbdn = Infoblox::DTC::LBDN\->new(
\&    name      => \*(Aqload_bal\*(Aq,
\&    lb_method => \*(AqGLOBAL_AVAILABILITY\*(Aq,
\& );
\&
\& #submit for addition
\& my $response = $session\->add($lbdn);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attribute to get a specific object:
\&
\&  name                  \- Optional. A DTC LBDN name in a string format.
\&  comment               \- Optional. A DTC LBDN comment.
\&  fqdn                  \- Optional. A fully qualified domain name (FQDN).
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference that contains extensible attributes.
\&  status_member         \- Optional. A member that provides the object health status. The default is Grid.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DTC::LBDN\*(Aq,
\&     name   => \*(Aqload_bal\*(Aq,
\&     fqdn   => \*(Aqlb.com\*(Aq
\& );
\&
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DTC::LBDN\*(Aq,
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the comment.
\& $lbdn\->comment(\*(Aqthis is a modified comment\*(Aq);
\& #Submit modification
\& my $response = $session\->modify($lbdn);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DTC::LBDN\*(Aq,
\&     name   => \*(Aqload_bal\*(Aq,
\& );
\& #Find the desired object from the retrieved list.
\& my $desired_lbdn = $retrieved_objs[0];
\& #Submit for removal
\& my $response = $session\->remove($desired_lbdn);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attribute to get a specific object:
\&
\&  name                  \- Optional. A DTC LBDN name in a string format.
\&  comment               \- Optional. A DTC LBDN comment.
\&  fqdn                  \- Optional. A fully qualified domain name (FQDN).
\&  extattrs              \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference that contains extensible attributes.
\&  status_member         \- Optional. A member that provides the object health status. The default is Grid.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& my @retrieved_objs = $session\->search(
\&     object => \*(AqInfoblox::DTC::LBDN\*(Aq,
\&     name   => \*(Aqload_b.*\*(Aq,
\&     fqdn   => \*(Aqlb.*\*(Aq
\& );
\&
\& my @retrieved_objs = $session\->search(
\&     object => \*(AqInfoblox::DTC::LBDN\*(Aq,
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq }
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of the object.
.SS "auth_zones( )"
.IX Subsection "auth_zones( )"
.RS 4
Use this method to set or retrieve a list of authoritative zones the \s-1DTC LBDN\s0 is linked to.
.Sp
Note that two different \s-1DTC\s0 LBDNs cannot be linked to the same zone if their patterns overlap.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array containing Infoblox::DNS::Zone objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get auth_zones value
\& my @auth_zones = $lbdn\->auth_zones();
\&
\& #modify auth_zones value
\& $lbdn\->auth_zones([$zone1, $zone2]);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format (\s-1UTF\-8\s0) with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get comment value
\& my $comment = $lbdn\->comment();
\&
\& #modify comment value
\& $lbdn\->comment(\*(Aqdesired comment\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to enable or disable a \s-1DTC LBDN\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to disable an \s-1DTC LBDN\s0 object or 'false' to enable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get disable value
\& my $disable = $lbdn\->disable();
\&
\& #modify disable value
\& $lbdn\->disable(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DTC LBDN\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values (Infoblox::Grid::Extattr objects).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get extattrs value
\& my $ref_extattrs = $lbdn\->extattrs();
\&
\& #Modify extattrs
\& $lbdn\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DTC LBDN\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get extensible attributes
\& my $ref_extensible_attributes = $lbdn\->extensible_attributes();
\&
\& #Modify extensible attributes
\& $lbdn\->extensible_attributes({\*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [\*(AqPeter\*(Aq, \*(AqTom\*(Aq]});
.Ve
.RE
.RS 4
.RE
.SS "health( )"
.IX Subsection "health( )"
.RS 4
Use this method to retrieve \s-1DTC LBDN\s0 health information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::DTC::Health object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get health value
\& my $health = $lbdn\->health();
.Ve
.RE
.RS 4
.RE
.SS "lb_method( )"
.IX Subsection "lb_method( )"
.RS 4
Use this method to set or retrieve a \s-1DTC LBDN\s0 load balancing method.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are '\s-1GLOBAL_AVAILABILITY\s0', '\s-1RATIO\s0', '\s-1ROUND_ROBIN\s0' and '\s-1TOPOLOGY\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get lb_method value
\& my $lb_method = $lbdn\->lb_method();
\&
\& #modify lb_method value
\& $lbdn\->lb_method(\*(AqRATIO\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the \s-1DTC LBDN\s0 name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired name in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get name value
\& my $name = $lbdn\->name();
\&
\& #modify name value
\& $lbdn\->name(\*(Aqload_bal1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_ttl( )"
.IX Subsection "override_ttl( )"
.RS 4
The override_ttl attribute controls whether the \s-1TTL\s0 value in the object is used, instead of the Grid default.
.Sp
The override_ttl attribute can be specified explicitly. It is also set implicitly when ttl is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to set override_ttl flag or 'false' to disable it. Default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get override_ttl value
\& my $override_ttl = $lbdn\->override_ttl();
\&
\& #modify override_ttl value
\& $lbdn\->override_ttl(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "patterns( )"
.IX Subsection "patterns( )"
.RS 4
Use this method to set or retrieve an array of \s-1DNS FQDN\s0 patterns. The patterns are used to match \s-1DNS\s0 query names processed by the \s-1DTC LBDN.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of \s-1FQDN\s0 patterns in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get patterns value
\& my @patterns = $lbdn\->patterns();
\&
\& #modify patterns value
\& $lbdn\->patterns([\*(Aq???\*(Aq.domain.com\*(Aq, \*(Aq*.test.com\*(Aq, \*(Aqtest.domain.com\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "persistence( )"
.IX Subsection "persistence( )"
.RS 4
Use this method to set or retrieve the maximum time (in seconds) for which client specific \s-1DTC LBDN\s0 responses are cached.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer. Zero specifies no caching.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get persistence value
\& my $persistence = $lbdn\->persistence();
\&
\& #modify persistence value
\& $lbdn\->persistence(5);
.Ve
.RE
.RS 4
.RE
.SS "pools( )"
.IX Subsection "pools( )"
.RS 4
Use this method to set or retrieve the list of pools the \s-1DTC LBDN\s0 is linked to.
.Sp
Note that a \s-1DTC LBDN\s0 linked to a zone must contain at least one enabled pool if lb_method is set to anything other than '\s-1TOPOLOGY\s0'.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of Infoblox::DTC::Pool::Link objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get pools value
\& my @pools = $lbdn\->pools();
\&
\& #modify pools value
\& $lbdn\->pools([$pool_link1, $pool_link2]);
.Ve
.RE
.RS 4
.RE
.SS "priority( )"
.IX Subsection "priority( )"
.RS 4
Use this method to set or retrieve the \s-1LBDN\s0 pattern match priority for \*(L"overlapping\*(R" \s-1DTC LBDN\s0 objects.
.Sp
LBDNs are \*(L"overlapping\*(R" if they are simultaneously assigned to a zone and have patterns that can match the same \s-1FQDN.\s0
The matching \s-1LBDN\s0 with highest priority (lowest ordinal) will be used.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 3. The default is 3.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get priority value
\& my $priority = $object\->priority();
\&
\& #Modify priority value
\& $object\->priority(3);
.Ve
.RE
.RS 4
.RE
.SS "topology( )"
.IX Subsection "topology( )"
.RS 4
Use this method to set or retrieve topology rules for the '\s-1TOPOLOGY\s0' load balancing method.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::DTC::Topology object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get topology value
\& my $topology = $lbdn\->topology();
\&
\& #modify topology value
\& $lbdn\->topology($topology);
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to set a \s-1TTL\s0 value.
.Sp
Setting this method to a defined value implicitly sets the override_ttl method to 'true'. Setting the parameter to undefined causes the appliance to use the Grid default and automatically resets the override_ttl attribute to 'false'.
.Sp
Note that when ttl is set to a defined value and override_ttl is set to 'false', the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ttl(10); \f(CW$object\fR\->override_ttl('false'); will set override_ttl to 'false', and the sequence \f(CW$object\fR\->override_ttl('false'); \f(CW$object\fR\->ttl(10); will result in override_ttl='true'.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ttl value
\& my $ttl = $lbdn\->ttl();
\&
\& #modify ttl value
\& $lbdn\->ttl(10);
.Ve
.RE
.RS 4
.RE
.SS "types( )"
.IX Subsection "types( )"
.RS 4
Use this method to set or retrieve the list of record types supported by \s-1LBDN.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid valid is an array reference that contains any of the following values: 'A', '\s-1AAA\s0', '\s-1NAPTR\s0', '\s-1CNAME\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get types value
\& my $types = $lbdn\->types();
\&
\& #modify types value
\& $lbdn\->types([\*(AqNAPTR\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Grid::Extattr, Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values, Infoblox::DTC::Health, Infoblox::DTC::Pool::Link, Infoblox::DTC::Topology.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
