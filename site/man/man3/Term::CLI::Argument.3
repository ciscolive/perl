.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::CLI::Argument 3"
.TH Term::CLI::Argument 3 "2019-11-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::CLI::Argument \- generic parent class for arguments in Term::CLI
.SH "VERSION"
.IX Header "VERSION"
version 0.051007
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Term::CLI::Argument;
\&
\& my $arg = Term::CLI::Argument\->new(name => \*(Aqvarname\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Generic parent class for arguments in Term::CLI(3p).
Inherits from M6::CLI::Element(3p).
.SH "CLASS STRUCTURE"
.IX Header "CLASS STRUCTURE"
.SS "Inherits from:"
.IX Subsection "Inherits from:"
Term::CLI::Element(3p).
.SS "Consumes:"
.IX Subsection "Consumes:"
None.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.IP "\fBnew\fR ( \fBname\fR => \fI\s-1VARNAME\s0\fR ... )" 4
.IX Xref "new"
.IX Item "new ( name => VARNAME ... )"
Create a new Term::CLI::Argument object and return a reference to it.
.Sp
The \fBname\fR attribute is required.
.Sp
Other possible attributes are:
.RS 4
.IP "\fBmin_occur\fR => \fI\s-1INT\s0\fR" 4
.IX Item "min_occur => INT"
The minimal number of times the argument must occur.
A negative or zero value means there is no minimum.
.Sp
The default is \f(CW1\fR.
.IP "\fBmax_occur\fR => \fI\s-1INT\s0\fR" 4
.IX Item "max_occur => INT"
The maximum number of times the argument may occur.
A negative or zero value means there is no maximum.
.Sp
The default is \f(CW1\fR.
.IP "\fBoccur\fR => \fI\s-1INT\s0\fR" 4
.IX Item "occur => INT"
A shortcut to setting \f(CW\*(C`min_occur\*(C'\fR and \f(CW\*(C`max_occur\*(C'\fR
to the same value. Specifying this will override
any \f(CW\*(C`min_occur\*(C'\fR or \f(CW\*(C`max_occur\*(C'\fR attributes.
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.SS "Accessors"
.IX Subsection "Accessors"
Accessors are inherited from Term::CLI::Element(3p).
.PP
Additionally, there are the following:
.IP "\fBmin_occur\fR ( [ \fI\s-1INT\s0\fR ] )" 4
.IX Item "min_occur ( [ INT ] )"
Get or set the \f(CW\*(C`min_occur\*(C'\fR attribute.
.IP "\fBmax_occur\fR ( [ \fI\s-1INT\s0\fR ] )" 4
.IX Item "max_occur ( [ INT ] )"
Get or set the \f(CW\*(C`max_occur\*(C'\fR attribute.
.SS "Other"
.IX Subsection "Other"
.IP "\fBoccur\fR ( [ \fI\s-1INT\s0\fR [, \fI\s-1INT\s0\fR ] ] )" 4
.IX Item "occur ( [ INT [, INT ] ] )"
When called with no arguments, returns two-element list containing the
min_occur and max_occur values, resp.
.Sp
When called with one argument, it will set both the \f(CW\*(C`min_occur\*(C'\fR and
\&\f(CW\*(C`max_occur\*(C'\fR attributes to the given value.
.IP "\fBtype\fR" 4
.IX Item "type"
Return the argument \*(L"type\*(R". By default, this is the object's class name
with the \f(CW\*(C`M6::CLI::Argument::\*(C'\fR prefix removed. Can be overloaded to
provide a different value.
.IP "\fBvalidate\fR ( \fIvalue\fR )" 4
.IX Item "validate ( value )"
Check whether \fIvalue\fR is a valid value for this object. Return the
(possibly normalised) value if it is, nothing (i.e. \f(CW\*(C`undef\*(C'\fR or the
empty list, depending on call context) if it is not (and set the
error() attribute).
.Sp
By default, this method only checks whether \fIvalue\fR is defined and not
an empty string.
.Sp
Sub-classes should probably override this.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Term::CLI::Argument::String(3p),
Term::CLI::Argument::Number(3p),
Term::CLI::Argument::Enum(3p),
Term::CLI::Argument::Filename(3p),
Term::CLI::Element(3p),
Term::CLI(3p).
.SH "AUTHOR"
.IX Header "AUTHOR"
Steven Bakker <sbakker@cpan.org>, 2018.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2018 Steven Bakker
.PP
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See \*(L"perldoc perlartistic.\*(R"
.PP
This software is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
