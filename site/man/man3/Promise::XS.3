.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Promise::XS 3"
.TH Promise::XS 3 "2020-07-17" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Promise::XS \- Fast promises in Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Promise::XS ();
\&
\&    my $deferred = Promise::XS::deferred();
\&
\&    # Do one of these once you have the result of your operation:
\&    $deferred\->resolve( \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq );
\&    $deferred\->reject( \*(Aqoh\*(Aq, \*(Aqno!\*(Aq );
\&
\&    # Give this to your caller:
\&    my $promise = $deferred\->promise();
.Ve
.PP
The following aggregator functions are exposed:
.PP
.Vb 3
\&    # Resolves with a list of arrayrefs, one per promise.
\&    # Rejects with the results from the first rejected promise.
\&    my $all_p = Promise::XS::all( $promise1, $promise2, .. );
\&
\&    # Resolves/rejects with the results from the first
\&    # resolved or rejected promise.
\&    my $race_p = Promise::XS::race( $promise3, $promise4, .. );
.Ve
.PP
For compatibility with preexisting libraries, \f(CW\*(C`all()\*(C'\fR may also be called
as \f(CW\*(C`collect()\*(C'\fR.
.PP
The following also exist:
.PP
.Vb 1
\&    my $pre_resolved_promise = Promise::XS::resolved(\*(Aqalready\*(Aq, \*(Aqdone\*(Aq);
\&
\&    my $pre_rejected_promise = Promise::XS::rejected(\*(Aqit’s\*(Aq, \*(Aqbad\*(Aq);
.Ve
.PP
All of \f(CW\*(C`Promise::XS\*(C'\fR’s static functions may be exported at load time,
e.g., \f(CW\*(C`use Promise::XS qw(deferred)\*(C'\fR.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module exposes a Promise interface with its major parts
implemented in \s-1XS\s0 for speed. It is a fork and refactor of
AnyEvent::XSPromises. That module’s interface, a “bare\-bones”
subset of that from Promises, is retained.
.SH "STATUS"
.IX Header "STATUS"
This module is stable, well-tested, and suitable for production use.
.SH "DIFFERENCES FROM ECMASCRIPT PROMISES"
.IX Header "DIFFERENCES FROM ECMASCRIPT PROMISES"
This library is built for compatibility with pre-existing Perl promise
libraries. It thus exhibits some salient differences from how
ECMAScript promises work:
.IP "\(bu" 4
Neither the \f(CW\*(C`resolve()\*(C'\fR method of deferred objects
nor the \f(CW\*(C`resolved()\*(C'\fR convenience function define behavior when given
a promise object.
.IP "\(bu" 4
The \f(CW\*(C`all()\*(C'\fR and \f(CW\*(C`race()\*(C'\fR functions accept a list of promises,
not a “scalar\-array\-thing” (ECMAScript “arrays” being what in Perl we
call “array references”). So whereas in ECMAScript you do:
.Sp
.Vb 1
\&    Promise.all( [ promise1, promise2 ] );
.Ve
.Sp
… in this library it’s:
.Sp
.Vb 1
\&    Promise::XS::all( $promise1, $promise2 );
.Ve
.IP "\(bu" 4
Promise resolutions and rejections may contain multiple values.
(But see \*(L"\s-1AVOID MULTIPLES\*(R"\s0 below.)
.PP
See Promise::ES6 for an interface that imitates ECMAScript promises
more closely.
.SH "AVOID MULTIPLES"
.IX Header "AVOID MULTIPLES"
For compatibility with preexisting Perl promise libraries, Promise::XS
allows a promise to resolve or reject with multiple values. This behavior,
while eminently “perlish”, allows for some weird cases where the relevant
standards don’t apply: for example, what happens if multiple promises are
returned from a promise callback? Or even just a single promise plus extra
returns?
.PP
Promise::XS tries to help you catch such cases by throwing a warning
if multiple return values from a callback contain a promise as the
first member. For best results, though—and consistency with promise
implementations outside Perl—resolve/reject all promises with \fIsingle\fR
values.
.SH "DIFFERENCES FROM Promises ET AL."
.IX Header "DIFFERENCES FROM Promises ET AL."
.SS "Empty or uninitialized rejection values"
.IX Subsection "Empty or uninitialized rejection values"
Promise rejections fulfill the same role in asynchronous code that exceptions
do in synchronous code. Perl helpfully warns (under the \f(CW\*(C`warnings\*(C'\fR pragma,
anyhow) when you \f(CW\*(C`die(undef)\*(C'\fR since an uninitialized value isn’t useful as
an error report and likely indicates a problem.
.PP
Promise::XS mimics this behavior by warning if a rejection value list lacks
a defined value. This can happen if the value list is either empty or
contains exclusively uninitialized values.
.ie n .SS """finally()"""
.el .SS "\f(CWfinally()\fP"
.IX Subsection "finally()"
This module implements ECMAScript’s \f(CW\*(C`finally()\*(C'\fR interface, which differs
from that in some other Perl promise implementations.
.PP
Given the following …
.PP
.Vb 1
\&    my $new = $p\->finally( $callback );
.Ve
.IP "\(bu" 4
\&\f(CW$callback\fR receives \fIno\fR arguments.
.IP "\(bu" 4
If \f(CW$callback\fR returns anything but a single, rejected promise,
\&\f(CW$new\fR has the same status as \f(CW$p\fR.
.IP "\(bu" 4
If \f(CW$callback\fR throws, or if it returns a single, rejected promise,
\&\f(CW$new\fR is rejected with the relevant value(s).
.SH "EVENT LOOPS"
.IX Header "EVENT LOOPS"
By default this library uses no event loop. This is a generally usable
configuration; however, it’ll be a bit different from how promises usually
work in evented contexts (e.g., JavaScript) because callbacks will execute
immediately rather than at the end of the event loop as the Promises/A+
specification requires. Following this pattern facilitates use of recursive
promises without exceeding call stack limits.
.PP
To achieve full Promises/A+ compliance it’s necessary to integrate with
an event loop interface. This library supports three such interfaces:
.IP "\(bu" 4
AnyEvent:
.Sp
.Vb 1
\&    Promise::XS::use_event(\*(AqAnyEvent\*(Aq);
.Ve
.IP "\(bu" 4
IO::Async \- note the need for an IO::Async::Loop instance
as argument:
.Sp
.Vb 1
\&    Promise::XS::use_event(\*(AqIO::Async\*(Aq, $loop_object);
.Ve
.IP "\(bu" 4
Mojo::IOLoop:
.Sp
.Vb 1
\&    Promise::XS::use_event(\*(AqMojo::IOLoop\*(Aq);
.Ve
.PP
Note that all three of the above are event loop \fBinterfaces\fR. They
aren’t event loops themselves, but abstractions over various event loops.
See each one’s documentation for details about supported event loops.
.SH "MEMORY LEAK DETECTION"
.IX Header "MEMORY LEAK DETECTION"
Any promise created while \f(CW$Promise::XS::DETECT_MEMORY_LEAKS\fR is truthy
will throw a warning if it survives until global destruction.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
You can re-bless a Promise::XS::Promise instance into a different class,
and \f(CW\*(C`then()\*(C'\fR, \f(CW\*(C`catch()\*(C'\fR, and \f(CW\*(C`finally()\*(C'\fR will assign their newly-created
promise into that other class. (It follows that the other class must subclass
Promise::XS::Promise.) This can be useful, e.g., for implementing
mid-flight controls like cancellation.
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
\&\f(CW\*(C`all()\*(C'\fR and \f(CW\*(C`race()\*(C'\fR should ideally be implemented in \s-1XS.\s0
.SH "KNOWN ISSUES"
.IX Header "KNOWN ISSUES"
.IP "\(bu" 4
Interpreter-based threads may or may not work.
.IP "\(bu" 4
This module interacts badly with Perl’s \fBfork()\fR implementation on
Windows. There may be a workaround possible, but none is implemented for now.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Besides AnyEvent::XSPromises and Promises, you may like Promise::ES6,
which mimics ECMAScript’s “Promise” class <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise> as much as possible.
It can even
(experimentally) use this module as a backend, which helps but is still
significantly slower than using this module directly.
