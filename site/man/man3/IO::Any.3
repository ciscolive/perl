.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Any 3"
.TH IO::Any 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Any \- open anything
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # NOTE commented out lines doesn\*(Aqt work (yet)
\&    use IO::Any;
\&
\&    $fh = IO::Any\->read(\*(Aqfilename\*(Aq);
\&    $fh = IO::Any\->read(\*(Aqfile://var/log/syslog\*(Aq);
\&    #$fh = IO::Any\->read(\*(Aqhttp://search.cpan.org/\*(Aq);
\&    #$fh = IO::Any\->read(\*(Aq\-\*(Aq);
\&    $fh = IO::Any\->read([\*(Aqfolder\*(Aq, \*(Aqother\-folder\*(Aq, \*(Aqfilename\*(Aq]);
\&    $fh = IO::Any\->read(\*(Aqfolder\*(Aq);
\&    $fh = IO::Any\->read("some text\enwith more lines\en");
\&    $fh = IO::Any\->read(\e"some text\enwith more lines\en");
\&    $fh = IO::Any\->read(\*(Aq{"123":[1,2,3]}\*(Aq);
\&    $fh = IO::Any\->read(\*(Aq<root><element>abc</element></root>\*(Aq);
\&    $fh = IO::Any\->read(*DATA);
\&    $fh = IO::Any\->read(IO::String\->new("cba"));
\&    #$fh = IO::Any\->read($object_with_toString_method);
\&
\&    $fh = IO::Any\->write(\*(Aqfilename\*(Aq);
\&    $fh = IO::Any\->write(\*(Aqfile://var/log/syslog\*(Aq);
\&    #$fh = IO::Any\->write(\*(Aq\-\*(Aq);
\&    $fh = IO::Any\->write([\*(Aqfolder\*(Aq, \*(Aqfilename\*(Aq]);
\&    #$fh = IO::Any\->write(\*(Aq=\*(Aq);
\&    my $string;
\&    $fh = IO::Any\->write(\e$string);
\&
\&    my $content = IO::Any\->slurp([\*(Aqfolder\*(Aq, \*(Aqfilename\*(Aq]);
\&    IO::Any\->spew([\*(Aqfolder2\*(Aq, \*(Aqfilename\*(Aq], $content);
\&
\&    perl \-MIO::Any \-le \*(Aqprint IO::Any\->slurp("/etc/passwd")\*(Aq
\&    perl \-MIO::Any \-le \*(AqIO::Any\->spew("/tmp/timetick", time())\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The aim is to provide read/write anything. The module tries to guess
\&\f(CW$what\fR the \*(L"anything\*(R" is based on some rules. See \*(L"new\*(R" method Pod for
examples and \*(L"new\*(R" and \*(L"_guess_what\*(R" code for the implementation.
.PP
There are two methods \*(L"slurp\*(R" and \*(L"spew\*(R" to read/write whole \f(CW$what\fR.
.SH "MOTIVATION"
.IX Header "MOTIVATION"
The purpose is to be able to use IO::Any in other modules that needs
to read or write data. The description for an argument could be \- pass
anything that IO::Any accepts as argument \- GLOBs, IO::File,
Path::Class::File, IO::AtomicFile, IO::String, pointers to scalar
and pointer to array (array elements are passed to \*(L"catfile\*(R" in File::Spec
as portable file addressing).
.PP
First time I've used IO::Any for JSON::Util where for the functions
to encode and decode needs to read/write data.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new($what, $how, $options)"
.el .SS "new($what, \f(CW$how\fP, \f(CW$options\fP)"
.IX Subsection "new($what, $how, $options)"
Open \f(CW$what\fR in \f(CW$how\fR mode.
.PP
\&\f(CW$what\fR can be:
.PP
.Vb 11
\&                \*(Aqfilename\*(Aq                => [ \*(Aqfile\*(Aq => \*(Aqfilename\*(Aq ],
\&                \*(Aqfolder/filename\*(Aq         => [ \*(Aqfile\*(Aq => \*(Aqfolder/filename\*(Aq ],
\&                \*(Aqfile:///folder/filename\*(Aq => [ \*(Aqfile\*(Aq => \*(Aq/folder/filename\*(Aq ],
\&                [ \*(Aqfolder\*(Aq, \*(Aqfilename\*(Aq ]  => [ \*(Aqfile\*(Aq => File::Spec\->catfile(\*(Aqfolder\*(Aq, \*(Aqfilename\*(Aq) ],
\&                \*(Aqhttp://a/b/c\*(Aq            => [ \*(Aqhttp\*(Aq => \*(Aqhttp://a/b/c\*(Aq ],
\&                \*(Aqhttps://a/b/c\*(Aq           => [ \*(Aqhttp\*(Aq => \*(Aqhttps://a/b/c\*(Aq ],
\&                \*(Aq{"123":[1,2,3]}\*(Aq         => [ \*(Aqstring\*(Aq => \*(Aq{"123":[1,2,3]}\*(Aq ],
\&                \*(Aq[1,2,3]\*(Aq                 => [ \*(Aqstring\*(Aq => \*(Aq[1,2,3]\*(Aq ],
\&                \*(Aq<xml></xml>\*(Aq             => [ \*(Aqstring\*(Aq => \*(Aq<xml></xml>\*(Aq ],
\&                "a\enb\enc\en"               => [ \*(Aqstring\*(Aq => "a\enb\enc\en" ],
\&                *DATA                     => [ \*(Aqfile\*(Aq => *{DATA}{IO} ],
.Ve
.PP
Returns filehandle. IO::String for 'string', IO::File for 'file'.
\&'http' not implemented yet.
.PP
Here are available \f(CW%$options\fR options:
.PP
.Vb 5
\&    atomic    true/false if the file operations should be done using L<IO::AtomicFile> or L<IO::File>
\&    LOCK_SH   lock file for shared access
\&    LOCK_EX   lock file for exclusive
\&    LOCK_NB   lock file non blocking (will throw an excpetion if file is
\&                  already locked, instead of blocking the process)
.Ve
.SS "_guess_what"
.IX Subsection "_guess_what"
Returns ($type, \f(CW$what\fR). \f(CW$type\fR can be:
.PP
.Vb 5
\&    file
\&    string
\&    http
\&    iostring
\&    iofile
.Ve
.PP
\&\f(CW$what\fR is normalized path that can be used for IO::*.
.SS "read($what)"
.IX Subsection "read($what)"
Same as \f(CW\*(C`IO::Any\->new($what, \*(Aq<\*(Aq);\*(C'\fR or \f(CW\*(C`IO::Any\->new($what);\*(C'\fR.
.SS "write($what)"
.IX Subsection "write($what)"
Same as \f(CW\*(C`IO::Any\->new($what, \*(Aq>\*(Aq);\*(C'\fR
.SS "slurp($what)"
.IX Subsection "slurp($what)"
Returns content of \f(CW$what\fR.
.PP
If AnyEvent is loaded then uses event loop to read the content.
.ie n .SS "spew($what, $data, $opt)"
.el .SS "spew($what, \f(CW$data\fP, \f(CW$opt\fP)"
.IX Subsection "spew($what, $data, $opt)"
Writes \f(CW$data\fR to \f(CW$what\fR.
.PP
If AnyEvent is loaded then uses event loop to write the content.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::All, File::Spec, Path::Class
.SH "AUTHOR"
.IX Header "AUTHOR"
Jozef Kutej, \f(CW\*(C`<jkutej at cpan.org>\*(C'\fR
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
The following people have contributed to the Sys::Path by committing their
code, sending patches, reporting bugs, asking questions, suggesting useful
advice, nitpicking, chatting on \s-1IRC\s0 or commenting on my blog (in no particular
order):
.PP
.Vb 5
\&    SREZIC [...] cpan.org
\&    Alexandr Ciornii
\&    Gabor Szabo
\&    Przemek WesoXek
\&    Slaven ReziX
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-io\-any at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=IO\-Any>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc IO::Any
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
GitHub: issues
.Sp
<http://github.com/jozef/IO\-Any/issues>
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=IO\-Any>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/IO\-Any>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/IO\-Any>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/IO\-Any>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2009 Jozef Kutej, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
