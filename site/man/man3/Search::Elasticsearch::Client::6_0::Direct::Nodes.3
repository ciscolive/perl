.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search::Elasticsearch::Client::6_0::Direct::Nodes 3"
.TH Search::Elasticsearch::Client::6_0::Direct::Nodes 3 "2020-06-26" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Search::Elasticsearch::Client::6_0::Direct::Nodes \- A client for running node\-level requests
.SH "VERSION"
.IX Header "VERSION"
version 6.81
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides methods to make node-level requests, such as
retrieving node info and stats.
.PP
It does Search::Elasticsearch::Role::Client::Direct.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """info()"""
.el .SS "\f(CWinfo()\fP"
.IX Subsection "info()"
.Vb 4
\&    $response = $e\->nodes\->info(
\&        node_id => $node_id | \e@node_ids       # optional
\&        metric  => $metric  | \e@metrics        # optional
\&    );
.Ve
.PP
The \f(CW\*(C`info()\*(C'\fR method returns static information about the nodes in the
cluster, such as the configured maximum number of file handles, the maximum
configured heap size or the threadpool settings.
.PP
Allowed metrics are:
    \f(CW\*(C`http\*(C'\fR,
    \f(CW\*(C`jvm\*(C'\fR,
    \f(CW\*(C`network\*(C'\fR,
    \f(CW\*(C`os\*(C'\fR,
    \f(CW\*(C`plugin\*(C'\fR,
    \f(CW\*(C`process\*(C'\fR,
    \f(CW\*(C`settings\*(C'\fR,
    \f(CW\*(C`thread_pool\*(C'\fR,
    \f(CW\*(C`timeout\*(C'\fR,
    \f(CW\*(C`transport\*(C'\fR
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`flat_settings\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR
.PP
See the node_info docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-info.html>
for more information.
.ie n .SS """stats()"""
.el .SS "\f(CWstats()\fP"
.IX Subsection "stats()"
.Vb 5
\&    $response = $e\->nodes\->stats(
\&        node_id      => $node_id    | \e@node_ids       # optional
\&        metric       => $metric     | \e@metrics        # optional
\&        index_metric => $ind_metric | \e@ind_metrics    # optional
\&    );
.Ve
.PP
The \f(CW\*(C`stats()\*(C'\fR method returns statistics about the nodes in the
cluster, such as the number of currently open file handles, the current
heap memory usage or the current number of threads in use.
.PP
Stats can be returned for all nodes, or limited to particular nodes
with the \f(CW\*(C`node_id\*(C'\fR parameter. By default all metrics are returned, but
these can be limited to those specified in the \f(CW\*(C`metric\*(C'\fR parameter.
.PP
Allowed metrics are:
    \f(CW\*(C`_all\*(C'\fR,
    \f(CW\*(C`breaker\*(C'\fR,
    \f(CW\*(C`fs\*(C'\fR,
    \f(CW\*(C`http\*(C'\fR,
    \f(CW\*(C`include_segment_file_sizes\*(C'\fR,
    \f(CW\*(C`indices\*(C'\fR,
    \f(CW\*(C`jvm\*(C'\fR,
    \f(CW\*(C`network\*(C'\fR,
    \f(CW\*(C`os\*(C'\fR,
    \f(CW\*(C`process\*(C'\fR,
    \f(CW\*(C`thread_pool\*(C'\fR,
    \f(CW\*(C`timeout\*(C'\fR,
    \f(CW\*(C`transport\*(C'\fR
.PP
If the \f(CW\*(C`indices\*(C'\fR metric (or \f(CW\*(C`_all\*(C'\fR) is specified, then
indices_stats
information is returned on a per-node basis. Which indices stats are
returned can be controlled with the \f(CW\*(C`index_metric\*(C'\fR parameter:
.PP
.Vb 5
\&    $response = $e\->nodes\->stats(
\&        node_id       => \*(Aqnode_1\*(Aq,
\&        metric        => [\*(Aqindices\*(Aq,\*(Aqfs\*(Aq]
\&        index_metric  => [\*(Aqdocs\*(Aq,\*(Aqfielddata\*(Aq]
\&    );
.Ve
.PP
Allowed index metrics are:
    \f(CW\*(C`_all\*(C'\fR,
    \f(CW\*(C`completion\*(C'\fR
    \f(CW\*(C`docs\*(C'\fR,
    \f(CW\*(C`fielddata\*(C'\fR,
    \f(CW\*(C`filter_cache\*(C'\fR,
    \f(CW\*(C`flush\*(C'\fR,
    \f(CW\*(C`get\*(C'\fR,
    \f(CW\*(C`id_cache\*(C'\fR,
    \f(CW\*(C`indexing\*(C'\fR,
    \f(CW\*(C`merge\*(C'\fR,
    \f(CW\*(C`percolate\*(C'\fR,
    \f(CW\*(C`query_cache\*(C'\fR,
    \f(CW\*(C`refresh\*(C'\fR,
    \f(CW\*(C`search\*(C'\fR,
    \f(CW\*(C`segments\*(C'\fR,
    \f(CW\*(C`store\*(C'\fR,
    \f(CW\*(C`warmer\*(C'\fR
.PP
Query string parameters:
    \f(CW\*(C`completion_fields\*(C'\fR,
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`fielddata_fields\*(C'\fR,
    \f(CW\*(C`fields\*(C'\fR,
    \f(CW\*(C`groups\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`level\*(C'\fR,
    \f(CW\*(C`types\*(C'\fR
.PP
See the stats docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-stats.html>
for more information.
.ie n .SS """hot_threads()"""
.el .SS "\f(CWhot_threads()\fP"
.IX Subsection "hot_threads()"
.Vb 3
\&    $response = $e\->nodes\->hot_threads(
\&        node_id => $node_id | \e@node_ids       # optional
\&    )
.Ve
.PP
The \f(CW\*(C`hot_threads()\*(C'\fR method is a useful tool for diagnosing busy nodes. It
takes a snapshot of which threads are consuming the most \s-1CPU.\s0
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`ignore_idle_threads\*(C'\fR,
    \f(CW\*(C`interval\*(C'\fR,
    \f(CW\*(C`snapshots\*(C'\fR,
    \f(CW\*(C`threads\*(C'\fR,
    \f(CW\*(C`timeout\*(C'\fR,
    \f(CW\*(C`type\*(C'\fR
.PP
See the hot_threads docs <http://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-hot-threads.html>
for more information.
.ie n .SS """reload_secure_settings()"""
.el .SS "\f(CWreload_secure_settings()\fP"
.IX Subsection "reload_secure_settings()"
.Vb 3
\&    $response = $e\->nodes\->reload_secure_settings(
\&        node_id => $node_id | \e@node_ids    # optional
\&    );
.Ve
.PP
The \f(CW\*(C`reload_secure_settings()\*(C'\fR \s-1API\s0 will reload the reloadable settings stored in the keystore
on each node.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`filter_path\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`timeout\*(C'\fR
.PP
See the reload-secure-settings docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/secure-settings.html>
for more information.
.ie n .SS """usage()"""
.el .SS "\f(CWusage()\fP"
.IX Subsection "usage()"
.Vb 4
\&    $response = $e\->nodes\->usage(
\&        node_id => $node_id | \e@node_ids       # optional
\&        metric  => $metric  | \e@metrics        # optional
\&    )
.Ve
.PP
The \f(CW\*(C`usage()\*(C'\fR \s-1API\s0 retrieve sinformation on the usage of features for each node.
.PP
Query string parameters:
    \f(CW\*(C`error_trace\*(C'\fR,
    \f(CW\*(C`human\*(C'\fR,
    \f(CW\*(C`timeout\*(C'\fR
.PP
See the nodes_usage docs <https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-usage.html>
for more information.
.SH "AUTHOR"
.IX Header "AUTHOR"
Enrico Zimuel <enrico.zimuel@elastic.co>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Elasticsearch \s-1BV.\s0
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
