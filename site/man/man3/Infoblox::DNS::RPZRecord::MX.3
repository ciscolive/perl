.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::RPZRecord::MX 3"
.TH Infoblox::DNS::RPZRecord::MX 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::RPZRecord::MX \- Response Policy Zone (RPZ) Substitute (MX Record) Rule object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An \s-1RPZ\s0 Substitute (\s-1MX\s0 Record) Rule maps a domain name to a mail exchanger. A mail exchanger is a server that either delivers or forwards mail.
.PP
This record represents the substitution rule for \s-1DNS MX\s0 records.
.PP
Note that you must specify only one view for the attribute \*(L"views\*(R".
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 12
\& my $mx = Infoblox::DNS::RPZRecord::MX\->new(
\&     exchanger => $fqdn,                                                                         #Required
\&     name      => $fqdn,                                                                         #Required
\&     pref      => $num,                                                                          #Required
\&     rp_zone   => $rp_zone,                                                                      #Required
\&     comment   => $string,                                                                       #Optional / Default is empty
\&     disable   => "true" | "false",                                                              #Optional / Default "false"
\&     extattrs              => { $string => $extattr, ... },      #Optional / Default is undefined
\&     extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... }, #Optional / Default is undefined
\&     ttl       => $num | undef,                                                                  #Optional / Default is undefined
\&     views     => [$View1]                                                                       #Optional / Default is "default" view
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to an Substitute (\s-1MX\s0 Record) Rule object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Construct an object
\& my $rpzmx = Infoblox::DNS::RPZRecord::MX\->new(
\&     name      => "bind_mx.rpz.com",
\&     comment   => "add mx bind_mx.rpz.com",
\&     pref      => 1,
\&     exchanger => "exchanger.rpz.com",
\&     rp_zone   => $response_policy_zone,
\& );
\& # Submit for addition
\& my $response = $session\->add( $rpzmx );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific Substitute (MX Record) Rule object:
\&
\&  name      \- Optional.  A domain name in string format
\&  view      \- Optional.  The DNS view in which the Substitute (MX Record) Rule is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&  zone      \- Optional. A zone name in FQDN format.
\&  exchanger \- Optional. The exchanger of the Substitute (MX Record) Rule.
\&  pref      \- Optional. The Preference of the Substitute (MX Record) Rule.
\&  extattrs  \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  my @retrieved_objs = $session\->get(
\&     object    => "Infoblox::DNS::RPZRecord::MX",
\&     name      => "bind_mx.rpz.com",
\&     view      => "default" );
\&
\&  # get all Substitute (MX Record) Rules in the "rpz.com" zone of the default view
\&  my @retrieved_objs = $session\->get(
\&     object    => "Infoblox::DNS::RPZRecord::MX",
\&     zone      => "rpz.com",
\&     view      => "default" );
\&
\& # get all Substitute (MX Record) Rules with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::RPZRecord::MX",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the comment.
\& $rpzmx\->comment("this is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $rpzmx );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& # Get the object under the same name
\& my @retrieved_objs = $session\->get(
\&     name      => "bind_mx.rpz.com",
\&     comment   => "add mx bind_mx.rpz.com",
\&     pref      => 1,
\&     exchanger => "exchanger.rpz.com",
\&     view      => "default" );
\& # find the desired object from retrieved list.
\& my $desired_mx = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_mx );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for Substitute (\s-1MX\s0 Record) Rule objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for an Substitute (MX Record) Rule object:
\&
\&  name      \- Optional. A domain name in string format (regular expression).
\&  view      \- Optional. The DNS view in which the Substitute (MX Record) Rule is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&  zone      \- Optional. A zone name in FQDN format.
\&  comment   \- Optional. A comment in string format (regular expression).
\&  exchanger \- Optional. The exchanger of the Substitute (MX Record) Rule (regular expression).
\&  pref      \- Optional. The Preference of the Substitute (MX Record) Rule (regular expression).
\&  extattrs  \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all Substitute (MX Record) Rule objects that match "rpz.com" in the default DNS view
\&     my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::RPZRecord::MX",
\&     name   => \*(Aqrpz\e.com\*(Aq,
\&     view   => "default" );
\&
\& # search for all Substitute (MX Record) Rule objects in the rpz.com zone of the default DNS view
\&     my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::RPZRecord::MX",
\&     zone   => "rpz.com",
\&     view   => "default" );
\&
\& # search all Substitute (MX Record) Rules with a given extensible attribute \*(AqSite\*(Aq
\& my @retrieved_objs = $session\->search(
\&    object => "Infoblox::DNS::RPZRecord::MX",
\&    extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of an Substitute (\s-1MX\s0 Record) Rule.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to add or retrieve a descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter a descriptive comment for this record in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting comment
\& my $comment = $rpzmx\->comment();
\& # Modifying comment
\& $rpzmx\->comment("add mx2.rpz.com");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DNS\s0 record.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value for this field is false. The \s-1DNS\s0 record is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting disable
\& my $disable = $rpzmx\->disable()
\& # Modifying disable
\& $rpzmx\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "exchanger( )"
.IX Subsection "exchanger( )"
.RS 4
Use this method to set or retrieve the exchanger.
.Sp
The name of the mail exchanger in Fully Qualified domain name (\s-1FQDN\s0) format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the name of the mail exchanger for the Substitute (\s-1MX\s0 Record) Rule.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting exchanger
\& my $exchanger = $rpzmx\->exchanger();
\& # Modifying exchanger
\& $rpzmx\->exchanger("exchanger2.rpz.com");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Substitute (\s-1MX\s0 Record) Rule object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $rpzmx\->extattrs();
\& #Modify extattrs
\& $rpzmx\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with an Substitute (\s-1MX\s0 Record) Rule.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $rpzmx\->extensible_attributes();
\& #Modify extensible attributes
\& $rpzmx\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the domain name.
.Sp
The name of the Substitute (\s-1MX\s0 Record) Rule object in Fully Qualified domain name (\s-1FQDN\s0) format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the name for the Substitute (\s-1MX\s0 Record) Rule.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting name
\& my $name = $rpzmx\->name();
\& # Modifying name
\& $rpzmx\->name("mx2.rpz.com");
.Ve
.RE
.RS 4
.RE
.SS "pref( )"
.IX Subsection "pref( )"
.RS 4
Use this method to set or retrieve the Preference value.
.Sp
The preference value of the Substitute (\s-1MX\s0 Record) Rule object. The preference value of the \s-1RPZ\s0 Substitute (\s-1MX\s0 Record) Rule for the zone range from 0 to 65535. Lower values are more preferred.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter an unsigned integer between 0\-65535. The priority determines the order in which a client attempts to
contact the target mail exchanger. The highest priority is 0 and is queried first.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting pref
\& my $pref = $rpzmx\->pref();
\& # Modifying pref
\& $rpzmx\->pref(3);
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to configure or retrieve the Time to Live (\s-1TTL\s0) value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is undefined which indicates that the record inherits the \s-1TTL\s0 value of the zone.
.Sp
Specify a \s-1TTL\s0 value to override the \s-1TTL\s0 value at the zone level.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration in seconds that the record is cached. Zero indicates that the record should not be cached.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get ttl
\& my $ttl = $rpzmx\->ttl();
\& #Modify ttl
\& $rpzmx\->ttl(1800);
\& #Un\-override ttl
\& $rpzmx\->ttl(undef);
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to specify or retrieve the view of the Substitute (\s-1MX\s0 Record) Rule.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the 'default' view, which means the \s-1RPZ MX\s0  record is located in the default view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An array reference of defined Infoblox::DNS::View objects.
.Sp
Note that the array size must be 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get views
\& my $ref_views = $rpzmx\->views();
\& #Modify views, an array of Infoblox::DNS::View objects
\& $rpzmx\->views([$view1]);
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of an Substitute (\s-1MX\s0 Record) Rule. This method is read-only and cannot be set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get zone
\& my $zone = $rpzmx\->zone();
.Ve
.RE
.RS 4
.RE
.SS "rp_zone( )"
.IX Subsection "rp_zone( )"
.RS 4
Use this method to set or retrieve the zone object of a \s-1DNS RPZ\s0 Substitute (\s-1MX\s0 Record) Rule.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An Infoblox::DNS::Zone object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get rp_zone
\& my $rp_zone = $rpz_mx\->rp_zone();
\& #Modify rp_zone, reference of Infoblox::DNS::Zone object
\& $rpz_mx\->rp_zone($response_policy_zone);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to an Substitute (\s-1MX\s0 Record) Rule insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create the zone prior to Substitute (MX Record) Rule insertion
\& my $zone = Infoblox::DNS::Zone\->new(name => "rpz.com");
\& unless ($zone) {
\&    die("Construct zone failed: ",
\&      Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& #Verify if the zone exists
\& my $object = $session\->get(object => "Infoblox::DNS::Zone", name => "rpz.com");
\& unless ($object) {
\&    print "Zone does not exist on server, safe to add the zone\en";
\&    $session\->add($zone)
\&       or die("Add zone failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Zone added successfully\en";
.Ve
.PP
\&\fB#Create an Substitute (\s-1MX\s0 Record) Rule\fR
.PP
.Vb 8
\& #Construct an Substitute (MX Record) Rule object
\& my $rpzmx = Infoblox::DNS::RPZRecord::MX\->new(
\&  name      => "bind_mx.rpz.com",
\&  comment   => "add mx bind_mx.rpz.com",
\&  pref      => 1,
\&  exchanger => "exchanger.rpz.com",
\&  rp_zone   => $zone,
\& );
\&
\& unless ($rpzmx) {
\& die("Construct DNS record MX failed: ",
\&     Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Substitute (MX Record) Rule object created successfully\en"; #Add the Substitute (MX Record) Rule object to Infoblox appliance through a session
\& $session\->add($rpzmx)
\&  or die("Add record MX failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Substitute (MX Record) Rule object added to server successfully\en";
.Ve
.PP
\&\fB#Search for a specific Substitute (\s-1MX\s0 Record) Rule\fR
.PP
.Vb 11
\& #Search all Substitute (MX Record) Rules that match "rpz.com"
\& my @retrieved_objs = $session\->search(
\&  object => "Infoblox::DNS::RPZRecord::MX",
\&  name   => \*(Aqrpz\e.com\*(Aq
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&  die("Search record MX failed: ",
\&      $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Substitute (MX Record) Rule object found at least 1 matching entry\en";
\&
\& #Search all Substitute (MX Record) Rules that start with "bind" and end with "rpz.com"
\& my @retrieved_objs = $session\->search(
\&  object => "Infoblox::DNS::RPZRecord::MX",
\&  name   => \*(Aq^bind.*\e.rpz\e.com$\*(Aq
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&  die("Search record MX failed: ",
\&      $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Substitute (MX Record) Rule object using regexp found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify an Substitute (\s-1MX\s0 Record) Rule  record\fR
.PP
.Vb 7
\& #Get Substitute (MX Record) Rule through the session
\& my  @retrieved_objs = $session\->get(
\&  object    => "Infoblox::DNS::RPZRecord::MX",
\&  name      => "bind_mx.rpz.com",
\&  pref      => 1,
\&  exchanger => "exchanger.rpz.com",
\& );
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&  die("Get record MX failed: ",
\&      $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Substitute (MX Record) Rule object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified Substitute (MX Record) Rule
\& $object\->exchanger("exc.rpz.com");
\&
\& #Apply the changes
\& $session\->modify($object)
\&  or die("Modify record MX failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Substitute (MX Record) Rule object modified successfully \en";
.Ve
.PP
\&\fB#Remove an Substitute (\s-1MX\s0 Record) Rule  record\fR
.PP
.Vb 11
\& #Get Substitute (MX Record) Rule through the session
\& my @retrieved_objs = $session\->get(
\&   object => "Infoblox::DNS::RPZRecord::MX",
\&   name   => "bind_mx.rpz.com"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&  die("Get record MX failed: ",
\&      $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Substitute (MX Record) Rule object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&  or die("Remove record MX failed: ",
\&      $session\->status_code() . ":" . $session\->status_detail());
\& print "Substitute (MX Record) Rule object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::View, Infoblox::DNS::Zone, Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
