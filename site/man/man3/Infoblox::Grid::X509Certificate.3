.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::X509Certificate 3"
.TH Infoblox::Grid::X509Certificate 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::X509Certificate \- An X509Certificate object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An X509Certificate object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to an X509Certificate object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get for an X509Certificate object:
\&
\&  serial              \- Optional. The certificate serial number in hex format.
\&  issuer              \- Optional. The name of the issuer.
\&  distinguished_name  \- Optional. The certificate subject name.
\&  valid_not_after     \- Optional. String that contains a desired value of the certificate expiration date in ISO 8601 format.
\&  valid_not_before    \- Optional. String that contains a desired value of the certificate start date in ISO 8601 format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Retrieve X509Certificate objects with specify certificate subject name
\& my @retrieved_objs = $session\->get(
\&        object             => \*(AqInfoblox::Grid::X509Certificate\*(Aq,
\&        distinguished_name => \*(AqCN="10.34.1.106",OU="Engineering",O="Infoblox Inc",L="Santa Clara",ST="California",C="US"\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Get X509Certificate object
\& my @retrieved_objs = $session\->get(
\&        object             => \*(AqInfoblox::Grid::X509Certificate\*(Aq,
\&        distinguished_name => \*(AqCN="10.34.1.106",OU="Engineering",O="Infoblox Inc",L="Santa Clara",ST="California",C="US"\*(Aq,
\& );
\&
\& # Find the desired object from the retrieved list
\& my $x509cert = $retrieved_objs[0];
\&
\& # Submit for removal
\& my $response = $session\->remove( $x509cert );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for an X509Certificate object:
\&
\&  serial              \- Optional. The certificate serial number in hex format.
\&  issuer              \- Optional. The name of the issuer.
\&  distinguished_name  \- Optional. The certificate subject name.
\&  valid_not_after     \- Optional. String that contains a desired value of the certificate expiration date in ISO 8601 format.
\&  valid_not_before    \- Optional. String that contains a desired value of the certificate start date in ISO 8601 format.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Retrieve X509Certificate objects with specify certificate subject name
\& my @retrieved_objs = $session\->search(
\&        object             => \*(AqInfoblox::Grid::X509Certificate\*(Aq,
\&        distinguished_name => \*(AqCN="10.34.1.106",OU="Engineering",O="Infoblox Inc",L="Santa Clara",ST="California",C="US"\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a X509Certificate object.
.SS "issuer( )"
.IX Subsection "issuer( )"
.RS 4
Use this method to retrieve the issuer subject name. This method does not support any argument because the attribute is read-only and is set by the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $issuer = $x509cert\->issuer();
.Ve
.RE
.RS 4
.RE
.SS "serial( )"
.IX Subsection "serial( )"
.RS 4
Use this method to retrieve the certificate serial number in hex format. This method does not support any argument because the attribute is read-only and is set by the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $serial = $x509cert\->serial();
.Ve
.RE
.RS 4
.RE
.SS "distinguished_name( )"
.IX Subsection "distinguished_name( )"
.RS 4
Use this method to retrieve the certificate subject name. This method does not support any argument because the attribute is read-only and is set by the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $distinguished_name = $x509cert\->distinguished_name();
.Ve
.RE
.RS 4
.RE
.SS "valid_not_before( )"
.IX Subsection "valid_not_before( )"
.RS 4
Use this method to retrieve the date before the certificate becomes invalid in \s-1ISO 8601\s0 format. This method does not support any argument because the attribute is read-only and is set by the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $valid_not_before = $x509cert\->valid_not_before();
.Ve
.RE
.RS 4
.RE
.SS "valid_not_after( )"
.IX Subsection "valid_not_after( )"
.RS 4
Use this method to retrieve the date after the certificate becomes invalid in \s-1ISO 8601\s0 format. This method does not support any argument because the attribute is read-only and is set by the server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $valid_not_after = $x509cert\->valid_not_after();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
