.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::Filter::Fingerprint 3"
.TH Infoblox::DHCP::Filter::Fingerprint 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::Filter::Fingerprint \- DHCP Fingerprint Filter object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1DHCP\s0 Fingerprint Filter object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 7
\& my $filter = Infoblox::DHCP::Filter::Fingerprint\->new(
\&    name          => $string,                                # required
\&    fingerprint   => [$fingerprint1, $fingerprint2, ...],    # required, reference to an array of Infoblox::DHCP::Fingerprint objects
\&    comment       => $string,                                # optional
\&    extattrs      => { $string => $extattr, ... },           # optional / Default is undefined
\&    extensible_attributes => { $string => $string | $num, $string => [ $string | $num, ... ], ... }, #Optional / Default is undefined
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to \s-1DHCP\s0 Fingerprint Filter object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct an object
\& my $filter = Infoblox::DHCP::Filter::Fingerprint\->new(
\&    name        => \*(Aqfingerprint_filter\*(Aq,
\&    fingerprint => [$fingerprint],
\& );
\&
\& #Submit for addition
\& my $response = $session\->add( $filter );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP Fingerprint Filter object:
\&
\&  name       \- Optional. The name of DHCP Fingerprint Filter object.
\&  comment    \- Optional. The comment.
\&  extattrs   \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Get DHCP Fingerprint Filter object by name
\& my @retrieved_objs = $session\->get(
\&    object    => \*(AqInfoblox::DHCP::Filter::Fingerprint\*(Aq,
\&    name      => \*(Aqfingerprint_filter\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Modify comment
\& $filter\->comment("This is modified object");
\& # Submit modification
\& my $response = $session\->modify( $filter );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& # Get the object by name
\& my @retrieved_objs = $session\->get(
\&    object   => \*(AqInfoblox::DHCP::Filter::Fingerprint\*(Aq,
\&    name     => \*(Aqfingerprint_filter\*(Aq,
\& );
\& #Find the desired object from the retrieved list.
\& my $desired_filter = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_filter );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DHCP\s0 Fingerprint Filter objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for specific DHCP Fingerprint Filter objects:
\&
\&  name       \- Optional. The name of DHCP Fingerprint Filter object (regular expression).
\&  comment    \- Optional. The comment (regular expression).
\&  extattrs   \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Search DHCP Fingerprint Filter object by name
\& my @retrieved_objs = $session\->search(
\&    object    => \*(AqInfoblox::DHCP::Filter::Fingerprint\*(Aq,
\&    name      => \*(Aqfingerprint_filter\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of \s-1DHCP\s0 Fingerprint Filter objects.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $filter\->comment();
\& #Modify attribute value
\& $filter\->comment(\*(Aqnew comment\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Fingerprint Filter object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $filter\->extattrs();
\& #Modify extattrs
\& $filter\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 Fingerprint Filter object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $extensible_attributes = $filter\->extensible_attributes();
\& #Modify extensible attributes
\& $filter\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "fingerprint( )"
.IX Subsection "fingerprint( )"
.RS 4
Use this method to set or retrieve a list of \s-1DHCP\s0 Fingerprint objects.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Reference to an array of Infoblox::DHCP::Fingerprint objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $filter\->fingerprint();
\& #Modify attribute value
\& $filter\->fingerprint([$fingerprint]);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of a \s-1DHCP\s0 Fingerprint Filter object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attribute value
\& my $value = $filter\->name();
\& #Modify attribute value
\& $filter\->name(\*(Aqnew_fingerprint_filter\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, get, modify, search and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to getting and modifying \s-1DHCP\s0 Fingerprint Filter object\fR
.PP
.Vb 2
\& use strict;
\& use Infoblox;
\&
\& #refers to Infoblox Appliance IP address
\& my $host_ip = "192.168.1.2";
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&     master   => $host_ip,
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create \s-1DHCP\s0 Fingerprint Filter object\fR
.PP
.Vb 6
\& my $fingerprint = Infoblox::DHCP::Fingerprint\->new(\*(Aqname\*(Aq => \*(AqMicrosoft Windows 8\*(Aq);
\& unless ($fingerprint) {
\&        die("Construct DHCP Fingerprint object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Fingerprint object created successfully\en";
\&
\& my $filter = Infoblox::DHCP::Filter::Fingerprint\->new(
\&    \*(Aqname\*(Aq        => \*(Aqfingerprint_filter\*(Aq,
\&    \*(Aqfingerprint\*(Aq => [$fingerprint],
\& );
\&
\& unless ($filter) {
\&        die("Construct DHCP Fingerprint Filter object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Fingerprint Filter object created successfully\en";
\&
\& my $response = $session\->add($filter);
\&
\& unless ($response) {
\&     die("Add DHCP Fingerprint Filter object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"DHCP Fingerprint Filter object added successfully \en";
.Ve
.PP
\&\fB#Search for \s-1DHCP\s0 Fingerprint Filter object\fR
.PP
.Vb 4
\& my @retrieved_objs = $session\->search(
\&    object  => \*(AqInfoblox::DHCP::Filter::Fingerprint\*(Aq,
\&    name    => \*(Aqfingerprint_filter\*(Aq,
\& );
\&
\& $filter = $retrieved_objs[0];
\&
\& unless ($filter) {
\&         die("Search DHCP Fingerprint Filter object object failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DHCP Fingerprint Filter object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify \s-1DHCP\s0 Fingerprint Filter object\fR
.PP
.Vb 4
\& @retrieved_objs = $session\->get(
\&    object  => \*(AqInfoblox::DHCP::Filter::Fingerprint\*(Aq,
\&    name    => \*(Aqfingerprint_filter\*(Aq,
\& );
\&
\& $filter = $retrieved_objs[0];
\&
\& unless ($filter) {
\&     die("Get DHCP Fingerprint Filter object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Get DHCP Fingerprint Filter object successful \en";
\&
\& $filter\->comment("This is modified object");
\&
\& $session\->modify($filter)
\&    or die("Modify DHCP Fingerprint Filter object failed",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP Fingerprint Filter object modified successfully \en";
.Ve
.PP
\&\fB#Remove \s-1DHCP\s0 Fingerprint Filter object\fR
.PP
.Vb 4
\& @retrieved_objs = $session\->get(
\&    object  => \*(AqInfoblox::DHCP::Filter::Fingerprint\*(Aq,
\&    name    => \*(Aqfingerprint_filter\*(Aq,
\& );
\&
\& $filter = $retrieved_objs[0];
\&
\& unless ($filter) {
\&     die("Get DHCP Fingerprint Filter object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print"Get DHCP Fingerprint Filter object successful \en";
\&
\& $session\->remove( $filter )
\&     or die("Remove DHCP Fingerprint Filter object failed",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print"DHCP Fingerprint Filter object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DHCP::Fingerprint
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
