.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "JSON::RPC2::Client 3"
.TH JSON::RPC2::Client 3 "2018-04-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JSON::RPC2::Client \- Transport\-independent JSON\-RPC 2.0 client
.SH "VERSION"
.IX Header "VERSION"
This document describes JSON::RPC2::Client version v2.1.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use JSON::RPC2::Client;
\&
\& $client = JSON::RPC2::Client\->new();
\&
\& $json_request = $client\->notify(\*(Aqmethod\*(Aq, @params);
\& $json_request = $client\->notify_named(\*(Aqmethod\*(Aq, %params);
\& ($json_request, $call) = $client\->call(\*(Aqmethod\*(Aq, @params);
\& ($json_request, $call) = $client\->call_named(\*(Aqmethod\*(Aq, %params);
\&
\& ($json_request, @call) = $client\->batch(
\&    $client\->call(\*(Aqmethod1\*(Aq, @params),
\&    $client\->call(\*(Aqmethod2\*(Aq, @params),
\&    $client\->notify(\*(Aqmethod\*(Aq, @params),
\&    $client\->call_named(\*(Aqmethod\*(Aq, %params),
\&    $client\->notify_named(\*(Aqmethod\*(Aq, %params),
\& );
\&
\& $client\->cancel($call);
\&
\& ($failed, $result, $error, $call) = $client\->response($json_response);
\&
\& for ($client\->batch_response($json_response)) {
\&    ($failed, $result, $error, $call) = @{ $_ };
\&    ...
\& }
\&
\& @call = $client\->pending();
\&
\& #
\& # EXAMPLE of simple blocking STDIN\-STDOUT client
\& #
\& 
\& $client = JSON::RPC2::Client\->new();
\& $json_request = $client\->call(\*(Aqmethod\*(Aq, @params);
\&
\& printf "%s\en", $json_request;
\& $json_response = <STDIN>;
\& chomp $json_response;
\&
\& ($failed, $result, $error) = $client\->response($json_response);
\& if ($failed) {
\&    die "bad response: $failed";
\& } elsif ($error) {
\&    printf "method(@params) failed with code=%d: %s\en",
\&        $error\->{code}, $error\->{message};
\& } else {
\&    print "method(@params) returned $result\en";
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Transport-independent implementation of JSON-RPC 2.0 client.
Can be used both in sync (simple, for blocking I/O) and async
(for non-blocking I/O in event-based environment) mode.
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $client = JSON::RPC2::Client\->new();
.Ve
.PP
Create and return new client object, which can be used to generate requests
(\fBnotify()\fR, \fBcall()\fR), parse responses (\fBresponses()\fR) and cancel pending requests
(\fBcancel()\fR, \fBpending()\fR).
.PP
Each client object keep track of request IDs, so you must use dedicated
client object for each connection to server.
.SS "notify"
.IX Subsection "notify"
.SS "notify_named"
.IX Subsection "notify_named"
.Vb 2
\&    $json_request = $client\->notify( $remote_method, @remote_params );
\&    $json_request = $client\->notify_named( $remote_method, %remote_params );
.Ve
.PP
Notifications doesn't receive any replies, so they unreliable.
.PP
Return ($json_request) \- scalar which should be sent to server in any way.
.SS "call"
.IX Subsection "call"
.SS "call_named"
.IX Subsection "call_named"
.Vb 2
\&    ($json_request, $call) = $client\->call( $remote_method, @remote_params );
\&    ($json_request, $call) = $client\->call_named( $remote_method, %remote_params );
.Ve
.PP
Return ($json_request, \f(CW$call\fR) \- scalar which should be sent to server in
any way and identifier of this remote procedure call.
.PP
The \f(CW$call\fR is just empty \s-1HASHREF,\s0 which can be used to: 1) keep user data
related to this call in hash fields \- that \f(CW$call\fR will be returned by
\&\fBresponse()\fR when response to this call will be received; 2) to \fBcancel()\fR
this call before response will be received. There usually no need for
user to keep \f(CW$call\fR somewhere unless he wanna be able to \fBcancel()\fR that call.
.PP
In scalar context return only \f(CW$json_request\fR \- this enough for simple
blocking clients which doesn't need to detect which of several \fBpending()\fR
calls was just replied or \fBcancel()\fR pending calls.
.SS "batch"
.IX Subsection "batch"
.Vb 7
\&    ($json_request, @call) = $client\->batch(
\&        $json_request1,
\&        $json_request2,
\&        $call2,
\&        $json_request3,
\&        ...
\&    );
.Ve
.PP
Return ($json_request, \f(CW@call\fR) \- scalar which should be sent to server in
any way and identifiers of these remote procedure calls (they'll be in
same order as they was in params). These two example are equivalent:
.PP
.Vb 5
\&    ($json_request, $call1, $call3) = $client\->batch(
\&        $client\->call(\*(Aqmethod1\*(Aq),
\&        $client\->notify(\*(Aqmethod2\*(Aq),
\&        $client\->call(\*(Aqmethod3\*(Aq),
\&    );
\&
\&    ($json1, $call1) = $client\->call(\*(Aqmethod1\*(Aq);
\&    $json2           = $client\->notify(\*(Aqmethod2\*(Aq);
\&    ($json3, $call3) = $client\->call(\*(Aqmethod3\*(Aq);
\&    $json_request = $client\->batch($json1, $json2, $json3);
.Ve
.PP
If you're using \fBbatch()\fR to send some requests then you should process
\&\s-1RPC\s0 server's responses using \fBbatch_response()\fR, not \fBresponse()\fR.
.SS "batch_response"
.IX Subsection "batch_response"
.Vb 1
\&    @responses = $client\->batch_response( $json_response );
.Ve
.PP
The \f(CW$json_response\fR can be either \s-1JSON\s0 string or \s-1ARRAYREF/HASHREF\s0 (useful
with \f(CW\*(C`$handle\->push_read(json => sub{...})\*(C'\fR from AnyEvent::Handle).
.PP
Will parse \f(CW$json_response\fR and return list with \s-1ARRAYREFS,\s0 which contain
4 elements returned by \fBresponse()\fR.
.PP
It is safe to always use \fBbatch_response()\fR instead of \fBresponse()\fR, even if
you don't send \fBbatch()\fR requests at all.
.SS "response"
.IX Subsection "response"
.Vb 1
\&    ($failed, $result, $error, $call) = $client\->response( $json_response );
.Ve
.PP
The \f(CW$json_response\fR can be either \s-1JSON\s0 string or \s-1HASHREF\s0 (useful
with \f(CW\*(C`$handle\->push_read(json => sub{...})\*(C'\fR from AnyEvent::Handle).
.PP
Will parse \f(CW$json_response\fR and return list with 4 elements:
.PP
.Vb 1
\& ($failed, $result, $error, $call)
\&
\& $failed        parse error message if $json_response is incorrect
\& $result        data returned by successful remote method call
\& $error         error returned by failed remote method call
\& $call          identifier of this call
.Ve
.PP
If \f(CW$failed\fR defined then all others are undefined. Usually that mean either
bug in JSON-RPC client or server.
.PP
Only one of \f(CW$result\fR and \f(CW$error\fR will be defined. Format of \f(CW$result\fR
completely depends on data returned by remote method. \f(CW$error\fR is \s-1HASHREF\s0
with fields {code}, {message}, {data} \- code should be integer, message
should be string, and data is optional value in arbitrary format.
.PP
The \f(CW$call\fR should be used to identify which of currently \fBpending()\fR calls
just returns \- it will be same \s-1HASHREF\s0 as was initially returned by \fBcall()\fR
when starting this remote procedure call, and may contain any user data
which was placed in it after calling \fBcall()\fR.
.PP
There also special case when all 4 values will be undefined \- that happens
if \f(CW$json_response\fR was related to call which was already \fBcancel()\fRed by user.
.PP
If you're using \fBbatch()\fR to send some requests then you should process
\&\s-1RPC\s0 server's responses using \fBbatch_response()\fR, not \fBresponse()\fR.
.SS "cancel"
.IX Subsection "cancel"
.Vb 1
\&    $client\->cancel( $call );
.Ve
.PP
Will cancel that \f(CW$call\fR. This doesn't affect server \- it will continue
processing related request and will send response when ready, but that
response will be ignored by client's \fBresponse()\fR.
.PP
Return nothing.
.SS "pending"
.IX Subsection "pending"
.Vb 1
\&    @call = $client\->pending();
.Ve
.PP
Return list with all currently pending \f(CW$call\fR's.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker
at <https://github.com/powerman/perl\-JSON\-RPC2/issues>.
You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software. The code repository is available for
public review and contribution under the terms of the license.
Feel free to fork the repository and submit pull requests.
.PP
<https://github.com/powerman/perl\-JSON\-RPC2>
.PP
.Vb 1
\&    git clone https://github.com/powerman/perl\-JSON\-RPC2.git
.Ve
.SS "Resources"
.IX Subsection "Resources"
.IP "\(bu" 4
MetaCPAN Search
.Sp
<https://metacpan.org/search?q=JSON\-RPC2>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/dist/JSON\-RPC2>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/JSON\-RPC2>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Matrix
.Sp
<http://matrix.cpantesters.org/?dist=JSON\-RPC2>
.IP "\(bu" 4
\&\s-1CPANTS: A CPAN\s0 Testing Service (Kwalitee)
.Sp
<http://cpants.cpanauthors.org/dist/JSON\-RPC2>
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex Efros <powerman@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2009\- by Alex Efros <powerman@cpan.org>.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The MIT (X11) License
.Ve
