.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Custom::Model 3"
.TH DBIx::Custom::Model 3 "2020-04-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Custom::Model \- Model object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use DBIx::Custom::Model;
.PP
my \f(CW$model\fR = DBIx::Custom::Model\->new(table => 'books');
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "name"
.IX Subsection "name"
.Vb 2
\&  my $name = $model\->name;
\&  $model = $model\->name(\*(Aqbook\*(Aq);
.Ve
.PP
Model name.
.SS "table"
.IX Subsection "table"
.Vb 2
\&  my $table = $model\->table;
\&  $model = $model\->table(\*(Aqbook\*(Aq);
.Ve
.PP
Table name, this is passed to \f(CW\*(C`insert\*(C'\fR, \f(CW\*(C`update\*(C'\fR, \f(CW\*(C`update_all\*(C'\fR, \f(CW\*(C`delete\*(C'\fR, \f(CW\*(C`delete_all\*(C'\fR, \f(CW\*(C`select\*(C'\fR method.
.SS "join"
.IX Subsection "join"
.Vb 4
\&  my $join = $model\->join;
\&  $model = $model\->join(
\&    [\*(Aqleft outer join company on book.company_id = company.id\*(Aq]
\&  );
.Ve
.PP
Join clause, this value is passed to \f(CW\*(C`select\*(C'\fR method.
.SS "dbi"
.IX Subsection "dbi"
.Vb 2
\&  my $dbi = $model\->dbi;
\&  $model = $model\->dbi($dbi);
.Ve
.PP
DBIx::Custom object.
.SS "bind_type"
.IX Subsection "bind_type"
.Vb 2
\&  my $type = $model\->bind_type;
\&  $model = $model\->bind_type([\*(Aqimage\*(Aq => DBI::SQL_BLOB]);
.Ve
.PP
Database data type, this is used as type option of \f(CW\*(C`insert\*(C'\fR, 
\&\f(CW\*(C`update\*(C'\fR, \f(CW\*(C`update_all\*(C'\fR, \f(CW\*(C`delete\*(C'\fR, \f(CW\*(C`delete_all\*(C'\fR,
and \f(CW\*(C`select\*(C'\fR method
.SS "mtime"
.IX Subsection "mtime"
.Vb 2
\&  my $mtime = $model\->mtime;
\&  $model = $model\->mtime(\*(Aqmodified_time\*(Aq);
.Ve
.PP
Updated timestamp column, this is passed to \f(CW\*(C`update\*(C'\fR method.
.SS "ctime"
.IX Subsection "ctime"
.Vb 2
\&  my $ctime = $model\->ctime;
\&  $model = $model\->ctime(\*(Aqcreated_time\*(Aq);
.Ve
.PP
Create timestamp column, this is passed to \f(CW\*(C`insert\*(C'\fR or \f(CW\*(C`update\*(C'\fR method.
.SS "primary_key"
.IX Subsection "primary_key"
.Vb 2
\&  my $primary_key = $model\->primary_key;
\&  $model = $model\->primary_key([\*(Aqid\*(Aq, \*(Aqnumber\*(Aq]);
.Ve
.PP
Primary key,this is passed to \f(CW\*(C`insert\*(C'\fR, \f(CW\*(C`update\*(C'\fR,
\&\f(CW\*(C`delete\*(C'\fR, and \f(CW\*(C`select\*(C'\fR method.
.SH "METHODS"
.IX Header "METHODS"
DBIx::Custom::Model inherits all methods from Object::Simple,
and you can use all methods of DBIx::Custom and \s-1DBI\s0
and implements the following new ones.
.SS "delete"
.IX Subsection "delete"
.Vb 1
\&  $model\->delete(...);
.Ve
.PP
Same as \f(CW\*(C`delete\*(C'\fR of DBIx::Custom except that
you don't have to specify options if you set attribute in model.
.SS "delete_all"
.IX Subsection "delete_all"
.Vb 1
\&  $model\->delete_all(...);
.Ve
.PP
Same as \f(CW\*(C`delete_all\*(C'\fR of DBIx::Custom except that
you don't have to specify options if you set attribute in model.
.SS "insert"
.IX Subsection "insert"
.Vb 1
\&  $model\->insert(...);
.Ve
.PP
Same as \f(CW\*(C`insert\*(C'\fR of DBIx::Custom except that
you don't have to specify options if you set attribute in model.
.SS "mycolumn"
.IX Subsection "mycolumn"
.Vb 3
\&  my $column = $self\->mycolumn;
\&  my $column = $self\->mycolumn(book => [\*(Aqauthor\*(Aq, \*(Aqtitle\*(Aq]);
\&  my $column = $self\->mycolumn([\*(Aqauthor\*(Aq, \*(Aqtitle\*(Aq]);
.Ve
.PP
Create column clause for myself. The following column clause is created.
.PP
.Vb 2
\&  book.author as author,
\&  book.title as title
.Ve
.PP
If table name is omitted, \f(CW\*(C`table\*(C'\fR attribute of the model is used.
If column names is omitted, \f(CW\*(C`columns\*(C'\fR attribute of the model is used.
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $model = DBIx::Custom::Model\->new;
.Ve
.PP
Create a DBIx::Custom::Model object.
.SS "select"
.IX Subsection "select"
.Vb 1
\&  $model\->select(...);
.Ve
.PP
Same as \f(CW\*(C`select\*(C'\fR of DBIx::Custom except that
you don't have to specify options if you set attribute in model.
.SS "update"
.IX Subsection "update"
.Vb 1
\&  $model\->update(...);
.Ve
.PP
Same as \f(CW\*(C`update\*(C'\fR of DBIx::Custom except that
you don't have to specify options if you set attribute in model.
.SS "update_all"
.IX Subsection "update_all"
.Vb 1
\&  $model\->update_all(\e%param);
.Ve
.PP
Same as \f(CW\*(C`update_all\*(C'\fR of DBIx::Custom except that
you don't have to specify options if you set attribute in model.
