.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "String::Trim 3"
.TH String::Trim 3 "2011-04-21" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
String::Trim \- trim whitespace from your strings
.SH "VERSION"
.IX Header "VERSION"
version 0.005
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use String::Trim;
\&
\&    print "Do it? ";
\&    trim(my $response = <>);
\&    print "\*(Aq$response\*(Aq\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`String::Trim\*(C'\fR trims whitespace off your strings. chomp trims only \f(CW$/\fR (typically,
that's newline), but \f(CW\*(C`trim\*(C'\fR will trim all leading and trailing whitespace.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "trim"
.IX Subsection "trim"
Returns the string with all leading and trailing whitespace removed. Trimming
undef gives you undef. Alternatively, you can trim in-place.
.PP
.Vb 4
\&    my $var     = \*(Aq my string  \*(Aq;
\&    my $trimmed = trim($var);
\&    # OR
\&    trim($var);
.Ve
.PP
\&\f(CW\*(C`trim\*(C'\fR also knows how to trim an array or arrayref:
.PP
.Vb 8
\&    my @to_trim = (\*(Aq one \*(Aq, \*(Aq two \*(Aq, \*(Aq three \*(Aq);
\&    my @trimmed = trim(@to_trim);
\&    # OR
\&    trim(@to_trim);
\&    # OR
\&    my $trimmed = trim(\e@to_trim);
\&    # OR
\&    trim(\e@to_trim);
.Ve
.SH "RATIONALE"
.IX Header "RATIONALE"
\&\f(CW\*(C`trim\*(C'\fR is often used by beginners, who may not understand how to spin their own. While
String::Util does have a \f(CW\*(C`trim\*(C'\fR function, it depends on Debug::ShowStuff, which
depends on Taint, which fails the test suite, and doesn't appear to be maintained.
This module installs, is actively maintained, and has no non-core dependencies.
.PP
Other options include Text::Trim and String::Strip (which is implemented in \s-1XS,\s0
and is therefore likely to be very fast, but requires a C compiler).
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
The latest version of this module is available from the Comprehensive Perl
Archive Network (\s-1CPAN\s0). Visit <http://www.perl.com/CPAN/> to find a \s-1CPAN\s0
site near you, or see <http://search.cpan.org/dist/String\-Trim/>.
.PP
The development version lives at <http://github.com/doherty/String\-Trim>
and may be cloned from <git://github.com/doherty/String\-Trim.git>.
Instead of sending patches, please fork this project using the standard
git and github infrastructure.
.SH "SOURCE"
.IX Header "SOURCE"
The development version is on github at <http://github.com/doherty/String\-Trim>
and may be cloned from <git://github.com/doherty/String\-Trim.git>
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No bugs have been reported.
.PP
Please report any bugs or feature requests through the web interface at
<https://github.com/doherty/String\-Trim/issues>.
.SH "CREDITS"
.IX Header "CREDITS"
This module was inspired by code at <http://www.perlmonks.org/?node_id=36684> written
by japhy (Jeff Pinyan), dragonchild, and Aristotle. This Perl module was written by Mike
Doherty.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Mike Doherty <doherty@cpan.org>
.IP "\(bu" 4
Jeff Pinyan <pinyan@cpan.org>
.IP "\(bu" 4
Rob Kinyon <rkinyon@cpan.org>
.IP "\(bu" 4
Αριστοτέλης Παγκαλτζής (Aristotle Pagaltzis) <aristotle@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Mike Doherty.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
