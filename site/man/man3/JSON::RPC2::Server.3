.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "JSON::RPC2::Server 3"
.TH JSON::RPC2::Server 3 "2018-04-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JSON::RPC2::Server \- Transport\-independent JSON\-RPC 2.0 server
.SH "VERSION"
.IX Header "VERSION"
This document describes JSON::RPC2::Server version v2.1.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use JSON::RPC2::Server;
\&
\&    my $rpcsrv = JSON::RPC2::Server\->new();
\&
\&    $rpcsrv\->register(\*(Aqfunc1\*(Aq, \e&func1);
\&    $rpcsrv\->register_nb(\*(Aqfunc2\*(Aq, \e&func2);
\&    $rpcsrv\->register_named(\*(Aqfunc3\*(Aq, \e&func3);
\&    $rpcsrv\->register_named_nb(\*(Aqfunc4\*(Aq, \e&func4);
\&
\&    # receive remote request in $json_request somehow, then:
\&    $rpcsrv\->execute( $json_request, \e&send_response );
\&
\&    sub send_response {
\&        my ($json_response) = @_;
\&        # send $json_response somehow
\&    }
\&
\&    sub func1 {
\&        my (@remote_params) = @_;
\&        if (success) {
\&            return ($result);
\&        } else {
\&            return (undef, $err_code, $err_message);
\&        }
\&    }
\&
\&    sub func2 {
\&        my ($callback, @remote_params) = @_;
\&        # setup some event to call func2_finished($callback) later
\&    }
\&    sub func2_finished {
\&        my ($callback) = @_;
\&        if (success) {
\&            $callback\->($result);
\&        } else {
\&            $callback\->(undef, $err_code, $err_message);
\&        }
\&        return;
\&    }
\&
\&    sub func3 {
\&        my (%remote_params) = @_;
\&        # rest the same as in func1
\&    }
\&
\&    sub func4 {
\&        my ($callback, %remote_params) = @_;
\&        # rest the same as in func2
\&    }
\&
\&    #
\&    # EXAMPLE of simple blocking STDIN\-STDOUT server
\&    #
\&
\&    my $rpcsrv = JSON::RPC2::Server\->new();
\&    $rpcsrv\->register(\*(Aqmethod1\*(Aq, \e&method1);
\&    $rpcsrv\->register(\*(Aqmethod2\*(Aq, \e&method2);
\&    while (<STDIN>) {
\&        chomp;
\&        $rpcsrv\->execute($_, sub { printf "%s\en", @_ });
\&    }
\&    sub method1 {
\&        return { my_params => \e@_ };
\&    }
\&    sub method2 {
\&        return (undef, 0, "don\*(Aqt call me please");
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Transport-independent implementation of JSON-RPC 2.0 server.
Server methods can be blocking (simpler) or non-blocking (useful if
method have to do some slow tasks like another \s-1RPC\s0 or I/O which can
be done in non-blocking way \- this way several methods can be executing
in parallel on server).
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $rpcsrv = JSON::RPC2::Server\->new();
.Ve
.PP
Create and return new server object, which can be used to register and
execute user methods.
.SS "register"
.IX Subsection "register"
.SS "register_named"
.IX Subsection "register_named"
.Vb 2
\&    $rpcsrv\->register( $rpc_method_name, \e&method_handler );
\&    $rpcsrv\->register_named( $rpc_method_name, \e&method_handler );
.Ve
.PP
Register \f(CW$rpc_method_name\fR as allowed method name for remote procedure call
and set \e&method_handler as \s-1BLOCKING\s0 handler for that method.
.PP
If there already was some handler set (using \fBregister()\fR or
\&\fBregister_named()\fR or \fBregister_nb()\fR or \fBregister_named_nb()\fR) for that
\&\f(CW$rpc_method_name\fR \- it will be replaced by \e&method_handler.
.PP
While processing request to \f(CW$rpc_method_name\fR user handler will be called
with parameters provided by remote side (as \s-1ARRAY\s0 for \fBregister()\fR or \s-1HASH\s0
for \fBregister_named()\fR), and should return it result as list with 4
elements:
.PP
.Vb 2
\& ($result, $code, $message, $data) = method_handler(@remote_params);
\& ($result, $code, $message, $data) = method_handler(%remote_params);
\&
\& $result        scalar or complex structure if method call success
\& $code          error code (integer, > \-32600) if method call failed
\& $message       error message (string) if message call failed
\& $data          optional scalar with additional error\-related data
.Ve
.PP
If \f(CW$code\fR is defined then \f(CW$result\fR shouldn't be defined; \f(CW$message\fR required
only if \f(CW$code\fR defined.
.PP
Return nothing.
.SS "register_nb"
.IX Subsection "register_nb"
.SS "register_named_nb"
.IX Subsection "register_named_nb"
.Vb 2
\&    $rpcsrv\->register_nb( $rpc_method_name, \e&nb_method_handler );
\&    $rpcsrv\->register_named_nb( $rpc_method_name, \e&nb_method_handler );
.Ve
.PP
Register \f(CW$rpc_method_name\fR as allowed method name for remote procedure call
and set \e&method_handler as NON-BLOCKING handler for that method.
.PP
If there already was some handler set (using \fBregister()\fR or
\&\fBregister_named()\fR or \fBregister_nb()\fR or \fBregister_named_nb()\fR) for that
\&\f(CW$rpc_method_name\fR \- it will be replaced by \e&method_handler.
.PP
While processing request to \f(CW$rpc_method_name\fR user handler will be called
with callback needed to return result in first parameter and parameters
provided by remote side as next parameters (as \s-1ARRAY\s0 for \fBregister_nb()\fR or
\&\s-1HASH\s0 for \fBregister_named_nb()\fR), and should call provided callback with list
with 4 elements when done:
.PP
.Vb 2
\& nb_method_handler($callback, @remote_params);
\& nb_method_handler($callback, %remote_params);
\&
\& # somewhere in that method handlers:
\& $callback\->($result, $code, $message, $data);
\& return;
.Ve
.PP
Meaning of ($result, \f(CW$code\fR, \f(CW$message\fR, \f(CW$data\fR) is same as documented in
\&\fBregister()\fR above.
.PP
Return nothing.
.SS "execute"
.IX Subsection "execute"
.Vb 1
\&    $rpcsrv\->execute( $json_request, $callback );
.Ve
.PP
The \f(CW$json_request\fR can be either \s-1JSON\s0 string or \s-1ARRAYREF/HASHREF\s0 (useful
with \f(CW\*(C`$handle\->push_read(json => sub{...})\*(C'\fR from AnyEvent::Handle).
.PP
Parse \f(CW$json_request\fR and execute registered user handlers. Reply will be
sent into \f(CW$callback\fR, when ready:
.PP
.Vb 1
\& $callback\->( $json_response );
.Ve
.PP
The \f(CW$callback\fR will be always executed after finishing processing
\&\f(CW$json_request\fR \- even if request type was \*(L"notification\*(R" (in this case
\&\f(CW$json_response\fR will be an empty string).
.PP
Return nothing.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker
at <https://github.com/powerman/perl\-JSON\-RPC2/issues>.
You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software. The code repository is available for
public review and contribution under the terms of the license.
Feel free to fork the repository and submit pull requests.
.PP
<https://github.com/powerman/perl\-JSON\-RPC2>
.PP
.Vb 1
\&    git clone https://github.com/powerman/perl\-JSON\-RPC2.git
.Ve
.SS "Resources"
.IX Subsection "Resources"
.IP "\(bu" 4
MetaCPAN Search
.Sp
<https://metacpan.org/search?q=JSON\-RPC2>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/dist/JSON\-RPC2>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/JSON\-RPC2>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Matrix
.Sp
<http://matrix.cpantesters.org/?dist=JSON\-RPC2>
.IP "\(bu" 4
\&\s-1CPANTS: A CPAN\s0 Testing Service (Kwalitee)
.Sp
<http://cpants.cpanauthors.org/dist/JSON\-RPC2>
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex Efros <powerman@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2009\- by Alex Efros <powerman@cpan.org>.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The MIT (X11) License
.Ve
