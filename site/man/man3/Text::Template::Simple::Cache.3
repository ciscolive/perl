.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::Template::Simple::Cache 3"
.TH Text::Template::Simple::Cache 3 "2018-12-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Template::Simple::Cache
.SH "VERSION"
.IX Header "VERSION"
version 0.91
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   TODO
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Cache manager for \f(CW\*(C`Text::Template::Simple\*(C'\fR.
.SH "NAME"
Text::Template::Simple::Cache \- Cache manager
.SH "METHODS"
.IX Header "METHODS"
.SS "new \s-1PARENT_OBJECT\s0"
.IX Subsection "new PARENT_OBJECT"
Constructor. Accepts a \f(CW\*(C`Text::Template::Simple\*(C'\fR object as the parameter.
.SS "type"
.IX Subsection "type"
Returns the type of the cache.
.SS "reset"
.IX Subsection "reset"
Resets the in-memory cache and deletes all cache files, 
if you are using a disk cache.
.SS "dumper \s-1TYPE\s0"
.IX Subsection "dumper TYPE"
.Vb 1
\&   $template\->cache\->dumper( $type, \e%opt );
.Ve
.PP
\&\f(CW\*(C`TYPE\*(C'\fR can either be \f(CW\*(C`structure\*(C'\fR or \f(CW\*(C`ids\*(C'\fR.
\&\f(CW\*(C`dumper\*(C'\fR accepts some arguments as a hash reference:
.PP
.Vb 1
\&   $template\->cache\->dumper( $type, \e%opt );
.Ve
.ie n .IP """varname""" 4
.el .IP "\f(CWvarname\fR" 4
.IX Item "varname"
Controls the name of the dumped structure.
.IP "no_deparse" 4
.IX Item "no_deparse"
If you set this to a true value, \f(CW\*(C`deparsing\*(C'\fR will be disabled
.PP
\fIstructure\fR
.IX Subsection "structure"
.PP
Returns a string version of the dumped in-memory or disk-cache. 
Cache is dumped via Data::Dumper. \f(CW\*(C`Deparse\*(C'\fR option is enabled
for in-memory cache.
.PP
Early versions of \f(CW\*(C`Data::Dumper\*(C'\fR don' t have a \f(CW\*(C`Deparse\*(C'\fR
method, so you may need to upgrade your \f(CW\*(C`Data::Dumper\*(C'\fR or
disable \f(CW\*(C`deparsing\*(C'\fR if you want to use this method.
.PP
\fIids\fR
.IX Subsection "ids"
.PP
Returns a list including the names (ids) of the templates in
the cache.
.SS "id"
.IX Subsection "id"
Gets/sets the cache id.
.SS "size"
.IX Subsection "size"
Returns the total cache (disk or memory) size in bytes. If
memory cache is used, then you must have Devel::Size installed
on your system to get the size of the data structure inside memory.
.SS "has data => \s-1TEMPLATE_DATA\s0"
.IX Subsection "has data => TEMPLATE_DATA"
.SS "has id   => \s-1TEMPLATE_ID\s0"
.IX Subsection "has id => TEMPLATE_ID"
This method can be called with \f(CW\*(C`data\*(C'\fR or \f(CW\*(C`id\*(C'\fR named parameter. If you 
use the two together, \f(CW\*(C`id\*(C'\fR will be used:
.PP
.Vb 3
\&   if ( $template\->cache\->has( id => \*(Aqe369853df766fa44e1ed0ff613f563bd\*(Aq ) ) {
\&      print "ok!";
\&   }
.Ve
.PP
or
.PP
.Vb 3
\&   if ( $template\->cache\->has( data => q~Foo is <%=$bar%>~ ) ) {
\&      print "ok!";
\&   }
.Ve
.SS "hit"
.IX Subsection "hit"
.Vb 1
\&   TODO
.Ve
.SS "populate"
.IX Subsection "populate"
.Vb 1
\&   TODO
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Burak Gursoy <burak@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Burak Gursoy.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
