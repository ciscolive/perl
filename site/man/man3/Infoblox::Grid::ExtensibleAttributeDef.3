.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::ExtensibleAttributeDef 3"
.TH Infoblox::Grid::ExtensibleAttributeDef 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::ExtensibleAttributeDef \- Extensible Attribute Definition object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Extensible Attribute Definition object is used to create or modify the definition of an extensible attribute. After the definition is created, the attribute can be defined on other Infoblox objects.
.SH "Searching Extensible Attributes"
.IX Header "Searching Extensible Attributes"
When searching for integer, string and date extensible attributes, the following constructs are supported, in addition to specifying the actual desired value.
.SS "String Searching"
.IX Subsection "String Searching"
The string search can be modified by specifying the string in the following format:
.PP
.Vb 1
\& stringattr => { value => $wantedstring, ... options ... }
.Ve
.PP
the following options are supported:
.PP
.Vb 1
\& case_insensitive => "true" | "false" # Optional. If "true", the string search will be case insensitive. The default is "false".
.Ve
.PP
Following is an example of a string search:
.PP
.Vb 2
\& @result = $session\->search(object => \*(AqInfoblox::DNS::Record::A\*(Aq,
\&                            extensible_attributes => { stringattr => { value => "some string", case_insensitive => "true"});
.Ve
.SS "Integer Searching"
.IX Subsection "Integer Searching"
Integer searches support the following where X and Y are integers:
.IP "\fB\fR '> X' or '< X' \- Matches if the extensible attribute value is \s-1GREATER\s0 or \s-1LESS\s0 than X respectively." 4
.IX Item " '> X' or '< X' - Matches if the extensible attribute value is GREATER or LESS than X respectively."
.PD 0
.IP "\fB\fR '>= X' or '<= X' \- Matches if the extensible attribute value is \s-1GREATER THAN OR EQUALS\s0 or is \s-1LESS THAN OR EQUALS X\s0 respectively." 4
.IX Item " '>= X' or '<= X' - Matches if the extensible attribute value is GREATER THAN OR EQUALS or is LESS THAN OR EQUALS X respectively."
.IP "\fB\fR '!= X' or '/= X' \- Matches if the extensible attribute value \s-1DOES NOT EQUAL X.\s0" 4
.IX Item " '!= X' or '/= X' - Matches if the extensible attribute value DOES NOT EQUAL X."
.IP "\fB\fR '>=< X,Y' \- Matches if the extensible attribute value is \s-1GREATER THAN OR EQUALS X AND\s0 is \s-1LESS THAN OR EQUALS Y.\s0" 4
.IX Item " '>=< X,Y' - Matches if the extensible attribute value is GREATER THAN OR EQUALS X AND is LESS THAN OR EQUALS Y."
.PD
.Sp
.RS 4
Following are examples of integer searches:
.Sp
.Vb 2
\& @result = $session\->search(object => \*(AqInfoblox::DNS::Record::A\*(Aq,
\&                            extensible_attributes => { integerattr => \*(Aq<= 5\*(Aq});
\&
\& @result = $session\->search(object => \*(AqInfoblox::DNS::Record::A\*(Aq,
\&                            extensible_attributes => { integerattr => \*(Aq!= 5\*(Aq});
\&
\& @result = $session\->search(object => \*(AqInfoblox::DNS::Record::A\*(Aq,
\&                            extensible_attributes => { integerattr => \*(Aq>=< 5,10\*(Aq});
.Ve
.RE
.SS "Date Searching"
.IX Subsection "Date Searching"
Valid values for dates when searching are:
.IP "\fB\fR The number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0" 4
.IX Item " The number of seconds that have elapsed since January 1st, 1970 UTC."
.PD 0
.IP "\fB\fR A string matching '\s-1YYYY\-MM\-DD\s0'." 4
.IX Item " A string matching 'YYYY-MM-DD'."
.IP "\fB\fR 'today', 'yesterday', 'tomorrow'." 4
.IX Item " 'today', 'yesterday', 'tomorrow'."
.IP "\fB\fR 'this week', 'this month'." 4
.IX Item " 'this week', 'this month'."
.PD
.PP
Date searches support the following where X and Y are dates:
.IP "\fB\fR '> X' or '< X' \- Matches if the extensible attribute value is \s-1GREATER\s0 or \s-1LESS\s0 than X respectively." 4
.IX Item " '> X' or '< X' - Matches if the extensible attribute value is GREATER or LESS than X respectively."
.PD 0
.IP "\fB\fR '>= X' or '<= X' \- Matches if the extensible attribute value is \s-1GREATER THAN OR EQUALS\s0 or is \s-1LESS THAN OR EQUALS X\s0 respectively." 4
.IX Item " '>= X' or '<= X' - Matches if the extensible attribute value is GREATER THAN OR EQUALS or is LESS THAN OR EQUALS X respectively."
.IP "\fB\fR '>=< X,Y' \- Matches if the extensible attribute value is \s-1GREATER THAN OR EQUALS X AND\s0 is \s-1LESS THAN OR EQUALS Y.\s0 This is supported only for epoch or YYYY-MM-DD strings." 4
.IX Item " '>=< X,Y' - Matches if the extensible attribute value is GREATER THAN OR EQUALS X AND is LESS THAN OR EQUALS Y. This is supported only for epoch or YYYY-MM-DD strings."
.IP "\fB\fR '\- n' or '+ n' where n is an integer \- Matches if the extensible attribute value is within the past or next n days respectively, excluding today." 4
.IX Item " '- n' or '+ n' where n is an integer - Matches if the extensible attribute value is within the past or next n days respectively, excluding today."
.PD
.Sp
.RS 4
Following are examples of date searches:
.Sp
.Vb 2
\& @result = $session\->search(object => \*(AqInfoblox::DNS::Record::A\*(Aq,
\&                            extensible_attributes => { dateattr => \*(Aq<= yesterday\*(Aq});
\&
\& @result = $session\->search(object => \*(AqInfoblox::DNS::Record::A\*(Aq,
\&                            extensible_attributes => { dateattr => \*(Aqthis week\*(Aq});
\&
\& @result = $session\->search(object => \*(AqInfoblox::DNS::Record::A\*(Aq,
\&                            extensible_attributes => { dateattr => \*(Aq>=< 2010\-10\-20,2010\-11\-01\*(Aq});
\&
\& @result = $session\->search(object => \*(AqInfoblox::DNS::Record::A\*(Aq,
\&                            extensible_attributes => { dateattr => \*(Aq\- 3\*(Aq});
.Ve
.RE
.SH "Extensible Attribute Values"
.IX Header "Extensible Attribute Values"
The valid value for an extensible attribute is a hash reference containing the names of extensible attributes and their associated values.
.PP
The names must be those of existing Infoblox::Grid::ExtensibleAttributeDef objects in the database.
.PP
For email, \s-1URL,\s0 and string types, the value is a string with a maximum of 256 characters.
.PP
For a list, the value is a string with a maximum of 64 characters.
.PP
For an integer, the value is an integer from \-2147483648 through 2147483647.
.PP
For a date, the value is the number of seconds that have elapsed since January 1st, 1970 \s-1UTC\s0 or a string of the format YYYY-MM-DD. Any date entered will be converted to an epoch time corresponding to that day at 11:01am \s-1UTC.\s0
.PP
The default value for the member is undefined.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $ext_attr_def = Infoblox::Grid::ExtensibleAttributeDef\->new(
\&     name                => $string,                                                              #Required
\&     type                => "string" | "integer" | "email" | "date" | "list" | "url",             #Optional / Default is "string"
\&     comment             => $string,                                                              #Optional / Default is undefined
\&     audit_log           => "true" | "false",                                                     #Optional / Default is "false"
\&     inheritable         => "true" | "false",                                                     #Optional / Default is "false"
\&     multiple            => "true" | "false",                                                     #Optional / Default is "false"
\&     cloud_api           => "true" | "false",                                                     #Optional / Default is "false"
\&     mgm_private         => "true" | "false",                                                     #Optional / Default is "false"
\&     grid_master         => "true" | "false",                                                     #Optional / Default is "false"
\&     default_value       => $string | $num,                                                       #Optional / Default is undefined
\&     list_values         => [$Value1, $Value2, ...],                                              #Optional / Default is undefined
\&     min                 => $num,                                                                 #Optional / Default is undefined
\&     max                 => $num,                                                                 #Optional / Default is undefined
\&     allowed_object_types=> [$string, $string, ...]                                               #Optional / Default is undefined
\&     user_input          => \*(Aqrecommended\*(Aq | \*(Aqrequired\*(Aq | \*(Aqoptional\*(Aq,                              #Optional / Default is \*(Aqoptional\*(Aq
\&     descendants_action  => $descendants,                                                         #Optional / Default is undefined
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to an Extensible Attribute Definition object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Construct an Extensible Attribute Definition object
\& my $ext_attr_def = Infoblox::Grid::ExtensibleAttributeDef\->new(
\&     name                 => "test_ext_attr",
\&     comment              => "test extensible attribute",
\&     type                 => "integer"
\& );
\& # Submit for addition
\& my $response = $session\->add( $ext_attr_def );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific Extensible Attribute Definition object:
\&
\&  name      \- Required. Extensible Attribute Definition name in string format.
\&  namespace \- Optional. Extensible Attribute Definition namespace.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::Grid::ExtensibleAttributeDef",
\&     name       => "test_ext_attr" );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify the comment.
\& $ext_attr_def\->comment("This is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $ext_attr_def );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, use \fBget()\fR or \fBsearch()\fR to retrieve the specific object first, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Get the Extensible Attribute Definition object matching the given name
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::Grid::ExtensibleAttributeDef",
\&     name       => "test_ext_attr" );
\& # Find the desired object from the retrieved list.
\& my $ext_attr_def = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $ext_attr_def );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for Extensible Attribute Definition objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a specific Extensible Attribute Definition object:
\&
\&  name      \- Optional. Extensible Attribute Definition name (regular expression).
\&  comment   \- Optional. Extensible Attribute Definition comment (regular expression).
\&  namespace \- Optional. Extensible Attribute Definition namespace.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # search for all Extensible Attribute Definition objects starting with "test"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::ExtensibleAttributeDef",
\&     name   => "test.*" );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of an Extensible Attribute Definition object.
.SS "allowed_object_types( )"
.IX Subsection "allowed_object_types( )"
.RS 4
Use this method to set or retrieve the object types on which the extensible attribute can be defined.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Parameter is an array reference that contains the list of object types on which the extensible attribute can be defined. The following object types are supported here:
.Sp
.Vb 10
\& Infoblox::Grid::Member
\& Infoblox::Grid::Admin::User
\& Infoblox::Grid::Admin::Role
\& Infoblox::DHCP::FailOver
\& Infoblox::DHCP::Filter::Fingerprint
\& Infoblox::DHCP::Filter::MAC
\& Infoblox::DHCP::Filter::NAC
\& Infoblox::DHCP::Filter::Option
\& Infoblox::DHCP::Filter::RelayAgent
\& Infoblox::DHCP::Fingerprint
\& Infoblox::DHCP::FixedAddr
\& Infoblox::DHCP::FixedAddrTemplate
\& Infoblox::DHCP::IPv6FixedAddr
\& Infoblox::DHCP::IPv6FixedAddrTemplate
\& Infoblox::DHCP::IPv6Network
\& Infoblox::DHCP::IPv6Network
\& Infoblox::DHCP::IPv6NetworkContainer
\& Infoblox::DHCP::IPv6NetworkContainer
\& Infoblox::DHCP::IPv6NetworkTemplate
\& Infoblox::DHCP::IPv6Range
\& Infoblox::DHCP::IPv6RangeTemplate
\& Infoblox::DHCP::IPv6SharedNetwork
\& Infoblox::DHCP::MAC
\& Infoblox::DHCP::MSSuperscope
\& Infoblox::DHCP::Network
\& Infoblox::DHCP::NetworkContainer
\& Infoblox::DHCP::NetworkTemplate
\& Infoblox::DHCP::Range
\& Infoblox::DHCP::RangeTemplate
\& Infoblox::DHCP::RoamingHost
\& Infoblox::DHCP::SharedNetwork
\& Infoblox::DHCP::View
\& Infoblox::DNS::BulkHost
\& Infoblox::DNS::Host
\& Infoblox::DNS::RPZRecord::A
\& Infoblox::DNS::RPZRecord::AAAA
\& Infoblox::DNS::RPZRecord::AAAAIpAddress
\& Infoblox::DNS::RPZRecord::AIpAddress
\& Infoblox::DNS::RPZRecord::CNAME
\& Infoblox::DNS::RPZRecord::CNAME::ClientIpAddress
\& Infoblox::DNS::RPZRecord::CNAME::ClientIpAddressDN
\& Infoblox::DNS::RPZRecord::CNAME::IpAddress
\& Infoblox::DNS::RPZRecord::CNAME::IpAddressDN
\& Infoblox::DNS::RPZRecord::MX
\& Infoblox::DNS::RPZRecord::NAPTR
\& Infoblox::DNS::RPZRecord::PTR
\& Infoblox::DNS::RPZRecord::SRV
\& Infoblox::DNS::RPZRecord::TXT
\& Infoblox::DNS::Record::A
\& Infoblox::DNS::Record::AAAA
\& Infoblox::DNS::Record::CNAME
\& Infoblox::DNS::Record::DNAME
\& Infoblox::DNS::Record::MX
\& Infoblox::DNS::Record::NS
\& Infoblox::DNS::Record::PTR
\& Infoblox::DNS::Record::SRV
\& Infoblox::DNS::Record::TLSA
\& Infoblox::DNS::Record::TXT
\& Infoblox::DNS::SharedRecord::A
\& Infoblox::DNS::SharedRecord::AAAA
\& Infoblox::DNS::SharedRecord::CNAME
\& Infoblox::DNS::SharedRecord::MX
\& Infoblox::DNS::SharedRecord::SRV
\& Infoblox::DNS::SharedRecord::TXT
\& Infoblox::DNS::SRG
\& Infoblox::DNS::View
\& Infoblox::DNS::Zone
\& Infoblox::DTC::LBDN
\& Infoblox::DTC::Monitor::HTTP
\& Infoblox::DTC::Monitor::ICMP
\& Infoblox::DTC::Monitor::PDP
\& Infoblox::DTC::Monitor::SIP
\& Infoblox::DTC::Monitor::SNMP
\& Infoblox::DTC::Monitor::TCP
\& Infoblox::DTC::Pool
\& Infoblox::DTC::Server
\& Infoblox::DTC::Topology
\& Infoblox::Grid::AllEndpoints
\& Infoblox::Grid::DNS
\& Infoblox::Grid::DNS::DNS64Group
\& Infoblox::Grid::DNS::Nsgroup
\& Infoblox::Grid::DNS::Nsgroup::ForwardStubServer
\& Infoblox::Grid::DNS::Nsgroup::ForwardingMember
\& Infoblox::Grid::DNS::Nsgroup::DelegationMember
\& Infoblox::Grid::Discovery::Device
\& Infoblox::Grid::Discovery::DeviceInterface
\& Infoblox::Grid::MSServer
\& Infoblox::Grid::Member::DNS
\& Infoblox::Grid::NamedACL
\& Infoblox::Grid::RIR::Organization
\& Infoblox::Grid::SNMP::User
\& Infoblox::Grid::ServiceRestart::Group
.Ve
.Sp
If the parameter is undefined, the extensible attribute can be defined on all object types. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get allowed object types
\& my $ref_allowed_object_types = $ext_attr_def\->allowed_object_types();
\& # Modify allowed object types
\& $ext_attr_def\->allowed_object_types([\*(AqInfoblox::DHCP::Range\*(Aq, \*(AqInfoblox::DHCP::RangeTemplate\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "audit_log( )"
.IX Subsection "audit_log( )"
.RS 4
Use this method to set or retrieve the \*(L"audit_log\*(R" flag.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the audit_log flag or \*(L"false\*(R" to deactivate/unset it. When the flag is set the extensible attribute name and value assigned to an object are logged in the audit log when a change occurs on the object. The default value for this field is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get audit_log flag
\& my $audit_log = $ext_attr_def\->audit_log();
\& # Modify audit_log flag
\& $ext_attr_def\->audit_log("true");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Comment in string format with a maximum of 256 characters. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $ext_attr_def\->comment();
\& #Modify comment
\& $ext_attr_def\->comment("This is the modified comment for extensible attribute definition");
.Ve
.RE
.RS 4
.RE
.SS "default_value( )"
.IX Subsection "default_value( )"
.RS 4
Use this method to set or retrieve the value used to pre-populate the attribute value in the \s-1GUI.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Default value used to pre-populate the attribute value in the \s-1GUI.\s0 For email, \s-1URL,\s0 and string types, the value is a string with a maximum of 256 characters. For a list, the value is a string with a maximum of 64 characters. For an integer, the value is an integer from \-2147483648 through 2147483647. For a date, the value is the number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0 The default value is undefined.
.Sp
Note that, for a date, the time value is automatically modified to 11:01:00 before insertion, so you may not get the same value that you've inserted upon retrieval.
e.g. 1000000 (1970\-01\-12T13:46:40Z) will be returned as 990060 (1970\-01\-12T11:01:00Z).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get default value of an extensible attribute of type string
\& my $ext_attr_def = $ext_attr_def\->default_value();
\& # Modify default value
\& $ext_attr_def\->default_value("Router");
.Ve
.RE
.RS 4
.RE
.SS "descendants_action( )"
.IX Subsection "descendants_action( )"
.RS 4
Use this method to set the actions for extensible attributes that exist on descendants. This attribute is write-only and cannot be retrieved.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::ExtensibleAttributeDef::Descendants object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Modify attribute value
\& $ext_attr_def\->descendants_action($descendants);
.Ve
.RE
.RS 4
.RE
.SS "inheritable( )"
.IX Subsection "inheritable( )"
.RS 4
Use this method to set or retrieve the \*(L"inheritable\*(R" flag.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the inheritable flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get inheritable flag
\& my $inheritable = $ext_attr_def\->inheritable();
\& # Modify inheritable flag
\& $ext_attr_def\->inheritable("true");
.Ve
.RE
.RS 4
.RE
.SS "list_values( )"
.IX Subsection "list_values( )"
.RS 4
Use this method to set or retrieve the list of values that can be defined for the list type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Parameter is an array reference that contains Infoblox::Grid::ExtensibleAttributeDef::ListValue values associated with an extensible attribute object defined as the \*(L"list\*(R" type. This parameter is not used for other types. The default value for this field is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get list of values
\& my $ref_list_values = $ext_attr_def\->list_values();
\&
\& # Add a new value to the list
\& my $ref_list_values = $ext_attr_def\->list_values();
\& push @$ref_list_values, Infoblox::Grid::ExtensibleAttributeDef::ListValue\->new(value => \*(AqSanta Clara\*(Aq);
\& $ext_attr_def\->list_values($ref_list_values);
\&
\& # Rename a value in the list
\& my $ref_list_values = $ext_attr_def\->list_values();
\& foreach my $value (@$ref_list_values)
\& {
\&    if ($value\->value() eq \*(AqSan Francisco\*(Aq)
\&    {
\&        $value\->value(\*(AqLos Angeles\*(Aq);
\&    }
\& }
\& $ext_attr_def\->list_values($ref_list_values);
.Ve
.RE
.RS 4
.RE
.SS "max( )"
.IX Subsection "max( )"
.RS 4
Use this method to set or retrieve the maximal length of string for string type or maximal value for integer type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For a string, the value is an integer from 1 through 256. For an integer, the value is an integer from \-2147483648 through 2147483647. This parameter is not used for other types. Using the Infoblox::Session\->\fBmodify()\fR function you can only define a value greater than the current one. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get max
\& my $ext_attr_def = $ext_attr_def\->max();
\& # Modify max
\& $ext_attr_def\->max(23);
.Ve
.RE
.RS 4
.RE
.SS "min( )"
.IX Subsection "min( )"
.RS 4
Use this method to set or retrieve the minimal length of string for string type or minimal value for integer type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For a string, the value is an integer from 1 through 256. For an integer, the value is an integer from \-2147483648 through 2147483647. This parameter is not used for other types. Using the Infoblox::Session\->\fBmodify()\fR function you can only define a value lesser than the current one. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get min
\& my $ext_attr_def = $ext_attr_def\->min();
\& # Modify min
\& $ext_attr_def\->min(3);
.Ve
.RE
.RS 4
.RE
.SS "multiple( )"
.IX Subsection "multiple( )"
.RS 4
Use this method to set or retrieve the \*(L"multiple\*(R" flag.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the multiple flag or \*(L"false\*(R" to deactivate/unset it. When the flag is set multiple values can be assigned to an extensible attribute. Using the Infoblox::Session\->\fBmodify()\fR function you can change this flag from \*(L"false\*(R" to \*(L"true\*(R". The reverse operation is not allowed. The default value for this field is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get multiple flag
\& my $audit_log = $ext_attr_def\->multiple();
\& # Modify multiple flag
\& $ext_attr_def\->multiple("true");
.Ve
.RE
.RS 4
.RE
.SS "cloud_api( )"
.IX Subsection "cloud_api( )"
.RS 4
Use this method to set or retrieve the \*(L"cloud_api\*(R" flag.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the cloud_api flag or \*(L"false\*(R" to deactivate or unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get cloud_api flag
\& my $cloud_api = $ext_attr_def\->cloud_api();
\& # Modify cloud_api flag
\& $ext_attr_def\->cloud_api("true");
.Ve
.RE
.RS 4
.RE
.SS "grid_master( )"
.IX Subsection "grid_master( )"
.RS 4
Use this method to set or retrieve the \*(L"grid_master\*(R" flag.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the grid_master flag or \*(L"false\*(R" to deactivate or unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get grid_master flag
\& my $grid_master = $ext_attr_def\->grid_master();
\& # Modify grid_master flag
\& $ext_attr_def\->grid_master("true");
.Ve
.RE
.RS 4
.RE
.SS "mgm_private( )"
.IX Subsection "mgm_private( )"
.RS 4
Use this method to set or retrieve the \*(L"mgm_private\*(R" flag.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the mgm_private flag or \*(L"false\*(R" to deactivate or unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get mgm_private flag
\& my $mgm_private = $ext_attr_def\->mgm_private();
\& # Modify mgm_private flag
\& $ext_attr_def\->mgm_private("true");
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of an extensible attribute definition.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Name of the extensible attribute with a maximum of 128 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get name
\& my $name = $ext_attr_def\->name();
\& # Modify name
\& $ext_attr_def\->name("Class");
.Ve
.RE
.RS 4
.RE
.SS "namespace( )"
.IX Subsection "namespace( )"
.RS 4
Use this method to retrieve the extensible attribute definition namespace. This is a read-only attribute.
.Sp
Specific extensible attribute definitions with '\s-1RIPE\s0' namespace will be added only when support for \s-1RIR/SWIP\s0 is enabled at the Grid level for the first time. See Infoblox::Grid\->\fBenable_rir_swip()\fR method.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be 'default', '\s-1MSADSITES\s0', '\s-1RIPE\s0' or '\s-1CLOUD\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get namespace
\& $namespace = $ext_attr_def\->namespace();
.Ve
.RE
.RS 4
.RE
.SS "type( )"
.IX Subsection "type( )"
.RS 4
Use this method to set or retrieve the type of an extensible attribute.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Parameter is a string. The default value for this field is \*(L"string\*(R". Currenty the supported object types are 'string', 'integer', 'email', 'date', 'list' and 'url'. Modification of the type using the Infoblox::Session\->\fBmodify()\fR function is not allowed.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get type
\& my $type = $ext_attr_def\->type();
.Ve
.RE
.RS 4
.RE
.SS "user_input( )"
.IX Subsection "user_input( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the extensible attribute value is required, recommended or optional.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are 'recommended', 'required' or 'optional'. The default value is 'optional'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get user_input
\& my $user_input = $ext_attr_def\->user_input();
\& #Modify user_input
\& $ext_attr_def\->user_input(\*(Aqrequired\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, get, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to an Extensible Attribute Definition object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\&                );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create an Extensible Attribute Definition object\fR
.PP
.Vb 7
\& my $ext_attr_def = Infoblox::Grid::ExtensibleAttributeDef\->new(
\&     name                 => "test_extensible_atttribute",
\&     comment              => "test extensibleatttribute",
\&     type                 => "integer",
\&     min                  => \-50,
\&     max                  => 50,
\& );
\&
\& unless ($ext_attr_def) {
\&        die("Construct extensible attribute definition object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Extensible Attribute Definition object created successfully\en";
\&
\& #Add this object to the Infoblox appliance through a session
\& $session\->add($ext_attr_def)
\&        or die("Add Extensible Attribute Definition object failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "Extensible Attribute Definition object added to server successfully\en";
.Ve
.PP
\&\fB#Get and modify an Extensible Attribute Definition object\fR
.PP
.Vb 6
\& #Get the object from Infoblox appliance through a session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::ExtensibleAttributeDef",
\&     name   => "test_extensible_atttribute"
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Get Extensible Attribute Definition object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Extensible Attribute Definition object found at least 1 matching entry\en";
\&
\& #Modify the object
\& $object\->comment("this is a new comment");
\& $object\->min(\-100);
\& $object\->max(100);
\&
\& #Apply the changes.
\& $session\->modify($object)
\&        or die("Modify Extensible Attribute definition object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Extensible Attribute definition object modified successfully \en";
\&
\& #Accessor methods
\& print "name: " . $object\->name() . "\en";
\& print "comment: " . $object\->comment() . "\en";
\& print "min: " . $object\->min() . "\en";
\& print "max: " . $object\->max() . "\en";
.Ve
.PP
\&\fB#Remove an Extensible Attribute Definition object\fR
.PP
.Vb 11
\& #Get the object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::ExtensibleAttributeDef",
\&     name   => "test_extensible_atttribute"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Extensible Attribute Definition object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Extensible Attribute Definition object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&        or die("Remove Extensible Attribute Definition object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Extensible Attribute Definition object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR,Infoblox::Session,Infoblox::Grid::ExtensibleAttributeDef::Descendants
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
