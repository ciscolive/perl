.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Zone 3"
.TH Infoblox::DNS::Zone 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Zone \- DNS Zone object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A zone is a portion of the domain name space for which an Infoblox appliance or another name server is authoritative (for example, has the start of authority [\s-1SOA\s0] record). A zone can also be delegated or forwarded. Zones are the primary objects used to manage \s-1DNS\s0 data and \s-1DNS\s0 services.
.PP
Note that you must specify only one view for the attribute \*(L"views\*(R".
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $zone = Infoblox::DNS::Zone\->new(
\&     name                                          => $fqdn | $ipv4_subnet/prefix | $ipv6_subnet/prefix,                        # Required
\&     ad_servers                                    => [ $ipv4addr | $ipv6addr ],                                                # Optional / Default is empty list
\&     allow_gss_tsig_for_underscore_zone            => "true" | "false",                                                         # Optional / Default is "false"
\&     allow_gss_tsig_zone_updates                   => "true" | "false",                                                         # Optional / Default is "false"
\&     allow_query                                   => [ $ipv4addr | $ipv4_subnet/prefix | $ipv6addr |
\&                                                        $ipv6_subnet/prefix | $TSIGKey ,... ] | $nacl | undef,                  # Optional / Default is undefined
\&     allow_transfer                                => [ $ipv4addr | $ipv4_subnet/prefix | $ipv6addr |
\&                                                        $ipv6_subnet/prefix | $TSIGKey ,... ] | $nacl | undef,                  # Optional / Default is undefined
\&     allow_update                                  => [ $ipv4addr | $ipv4_subnet/prefix | $ipv6addr |
\&                                                        $ipv6_subnet/prefix | $TSIGKey ,... ] | $nacl | undef,                  # Optional / Default is undefined
\&     allow_update_forwarding                       => [ $ipv4addr | $ipv4_subnet/prefix | $ipv6addr |
\&                                                        $ipv6_subnet/prefix | $TSIGKey ,... ] | $nacl | undef,                  # Optional / Default is undefined
\&     bind_check_names_policy                       => [ "fail" | "warn" | undef],                                               # Optional / Default is undefined
\&     comment                                       => $string,                                                                  # Optional / Default is undefined
\&     create_underscore_zones                       => "true" | "false",                                                         # Optional / Default is "false"
\&     delegate_to                                   => [ $Nameserver1, $Nameserver2 ... ],                                       # Optional / Default is undefined
\&     delegated_ttl                                 => $num,                                                                     # Optional / Default is undefined
\&     delegation_ns_group                           => $string | $delegation_ns_group                                            # Optional / Default is undefined
\&     disable                                       => "true" | "false",                                                         # Optional / Default is "false"
\&     disable_forwarding                            => "true" | "false",                                                         # Optional / Default is "false"
\&     dnssec_enable_ksk_auto_rollover               => "true" | "false",                                                         # Optional / Default is "false"
\&     dnssec_keys                                   => $keys,                                                                    # Optional / Default is empty list
\&     dnssec_zsk_algorithms                         => [$algorithm1, $algorithm2, ...],                                          # Optional / Default is undefined
\&     dnssec_ksk_email_notifiaction_enabled         => "true" | "false",                                                         # Optional / Default is false
\&     dnssec_ksk_rollover_date                      => $date,                                                                    # Optional / Default is undefined
\&     dnssec_ksk_rollover_interval                  => $num,                                                                     # Optional / Default is undefined
\&     dnssec_ksk_rollover_notification_config       => "NONE" | "ALL" | "REQUIRE_MANUAL_INTERVENTION",                           # Optional / Default is undefined
\&     dnssec_ksk_email_notification_enabled         => "true" | "false",                                                         # Optional / Default is "false"
\&     dnssec_ksk_snmp_notification_enabled          => "true" | "false",                                                         # Optional / Default is "false"
\&     dnssec_nsec3_iterations                       => $num,                                                                     # Optional / Default is undefined
\&     dnssec_nsec3_salt_min_length                  => $num,                                                                     # Optional / Default is undefined
\&     dnssec_nsec3_salt_max_length                  => $num,                                                                     # Optional / Default is undefined
\&     dnssec_signature_expiration                   => $num,                                                                     # Optional / Default is undefined
\&     dnssec_signed                                 => "true" | "false",                                                         # Optional / Default is undefined
\&     dnssec_zsk_algorithms                         => [$algorithm1, $algorithm2, ...],                                          # Optional / Default is undefined
\&     dnssec_zsk_rollover_date                      => $date,                                                                    # Optional / Default is undefined
\&     dnssec_zsk_rollover_mechanism                 => "DOUBLE_SIGN" | "PRE_PUBLISH",                                            # Optional / Default is undefined
\&     dnssec_zsk_rollover_interval                  => $num,                                                                     # Optional / Default is undefined
\&     next_secure_type                              => "NSEC" | "NSEC3",                                                         # Optional / Default is undefined
\&     enable_ad_servers                             => "true" | "false",                                                         # Optional / Default is "false"
\&     allow_ptr_creation_in_parent                  => "true" | "false",                                                         # Optional / Default is "false"
\&     email                                         => $email,                                                                   # Optional / Default is undefined
\&     extattrs                                      => { $string => $extattr, ... },                                             # Optional / Default is undefined
\&     extensible_attributes                         => { $string => $string | $num, $string => [ $string | $num, ... ], ... }    # Optional / Default is undefined
\&     fireeye_rule_mapping                          => $rulemap,                                                                 # Optional / Default is undefined
\&     forward_only                                  => "true" | "false",                                                         # Optional / Default is "false"
\&     forward_to                                    => [ $Member1, $Member2, $Nameserver1, $Nameserver2,...],                    # Optional / Default is undefined
\&     forward_ns_group                              => $string | $forward_ns_group                                               # Optional / Default is undefined
\&     forward_external_ns_group                     => $string                                                                   # Optional / Default is undefined
\&     host_name_restriction_policy                  => $string,                                                                  # Optional / Default is undefined
\&     import_from                                   => $ipv4addr,                                                                # Optional / Default is undefined
\&     is_default                                    => "true" | "false",                                                         # Optional / Default is "false"
\&     is_multimaster                                => "true" | "false",                                                         # Optional / Default is "false"
\&     locked                                        => "true" | "false",                                                         # Optional / Default is "false"
\&     members                                       => [ $Member1, $Member2,...],                                                # Optional / Default is undefined
\&     member_soa_mnames                             => [$soa_mname1, $soa_mname2, ...],                                          # Optional / Default is undefined
\&     member_soa_serials                            => [$soa_serial1, $soa_serial2, ...],                                        # Optional / Default is undefined
\&     ms_ad_integrated                              => "true" | "false"                                                          # Optional / Default is "false"
\&     ms_allow_transfer                             => "Any" | "NSOnly" | "None" | [ $ipv4addr1, ... ]                           # Optional / Default is "NSOnly"
\&     ms_ddns_mode                                  => "Secure" | "None" | "Any"                                                 # Optional / Default is undefined
\&     ms_sync_disable                               => "true" | "false"                                                          # Optional / Default is "false"
\&     notify_delay                                  => $num,                                                                     # Optional / Default is undefined
\&     multiple_primaries                            => [$Member1, ...] | [$Nameserver1, ...] | [$MSServer1, ...],                # Optional / Default is undefined
\&     ns_group                                      => $string | $ns_group                                                       # Optional / Default is undefined
\&     override_delegated_ttl                        => "true" | "false",                                                         # Optional / Default is "false"
\&     override_grid_zone_timer                      => "true" | "false",                                                         # Optional / Default is "false"
\&     override_grid_email                           => "true" | "false",                                                         # Optional / Default is "false"
\&     override_serial_number                        => "true" | undef,                                                           # Optional / Default is undef
\&     prefix                                        => $string,                                                                  # Optional / Default is undefined
\&     scavenging_settings                           => $scavenging_settings,                                                     # Optional / Default is undefined
\&     remove_sub_zones                              => "true" | "false",                                                         # Optional / Default is undefined
\&     rpz_type                                      => "LOCAL" | "FIREEYE" | "FEED",                                             # Optional / Default is undefined
\&     rpz_severity                                  => "CRITICAL" | "MAJOR" | "WARNING" | "INFORMATIONAL",                       # Optional / Default is undefined
\&     secondaries                                   => [ $Member1, $Member2, $Nameserver1, $MSServer2, ...],                     # Optional / Default is empty
\&     soa_default_ttl                               => $num,                                                                     # Optional / Default is undefined
\&     soa_expire                                    => $num,                                                                     # Optional / Default is undefined
\&     soa_mname                                     => $fqdn,                                                                    # Optional / Default is undefined
\&     soa_negative_ttl                              => $num,                                                                     # Optional / Default is undefined
\&     soa_retry                                     => $num,                                                                     # Optional / Default is undefined
\&     soa_refresh                                   => $num,                                                                     # Optional / Default is undefined
\&     soa_serial_number                             => $num,                                                                     # Optional / Default is 1
\&     shared_record_groups                          => [ $shared_record_group1_name, ... ],                                      # Optional / Default is undefined
\&     stub_from                                     => [ $Nameserver1, $Nameserver2, ... ],                                      # Optional / Default is undefined
\&     stub_members                                  => [ $Member1, $Member2, $MSServer1, $MSServer2, ...],                       # Optional / Default is undefined
\&     stub_ns_group                                 => $string | $stub_ns_group                                                  # Optional / Default is undefined
\&     stub_external_ns_group                        => $string                                                                   # Optional / Default is undefined
\&     views                                         => [$View1],                                                                 # Optional / Default is "default" view
\&     rpz_policy                                    => "GIVEN" | "PASSTHRU" | "NXDOMIAN" | "NODATA" | "SUBSTITUTE" | "DISABLED", # Optional / Default is undefined
\&     substitute_name                               => $string,                                                                  # Optional / Default is empty
\&     copy_xfer_to_notify                           => "true" | "false",                                                         # Optional / Default is "false"
\&     override_copy_xfer_to_notify                  => "true" | "false",                                                         # Optional / Default is "false"
\&     dns_integrity_check_enable                    => "true" | "false",                                                         # Optional / Default is "false"
\&     dns_integrity_frequency                       => $uint,                                                                    # Optional / Default is undefined
\&     dns_integrity_member                          => $hostname,                                                                # Optional / Default is undefined
\&     dns_integrity_verbose_logging                 => "true" | "false",                                                         # Optional / Default is undefined
\&     ddns_restrict_patterns_list                   => [$string, $string, ...],                                                  # Optional / Default is undefined
\&     ddns_restrict_patterns                        => "true" | "false",                                                         # Optional / Default is \*(Aqfalse\*(Aq
\&     ddns_restrict_static                          => "true" | "false",                                                         # Optional / Default is \*(Aqfalse\*(Aq
\&     ddns_restrict_protected                       => "true" | "false",                                                         # Optional / Default is \*(Aqfalse\*(Aq
\&     ddns_restrict_secure                          => "true" | "false",                                                         # Optional / Default is \*(Aqfalse\*(Aq
\&     ddns_principal_tracking                       => "true" | "false",                                                         # Optional / Default is \*(Aqfalse\*(Aq
\&     ddns_principal_group                          => $principal_group,                                                         # Optional / Default is undefined,
\&     ddns_force_creation_timestamp_update          => "true" | "false",                                                         # Optional / Default is \*(Aqfalse\*(Aq
\&     override_ddns_patterns_restriction            => "true" | "false",                                                         # Optional / Default is \*(Aqfalse\*(Aq
\&     override_ddns_restrict_static                 => "true" | "false",                                                         # Optional / Default is \*(Aqfalse\*(Aq
\&     override_ddns_restrict_protected              => "true" | "false",                                                         # Optional / Default is \*(Aqfalse\*(Aq
\&     override_ddns_principal_security              => "true" | "false",                                                         # Optional / Default is \*(Aqfalse\*(Aq
\&     override_ddns_force_creation_timestamp_update => "true" | "false",                                                         # Optional / Default is \*(Aqfalse\*(Aq
\&     override_scavenging_settings                  => "true" | "false",                                                         # Optional / Default is \*(Aqfalse\*(Aq
\&     override_rpz_drop_ip_rule                     => "true" | "false" | undef,                                                 # Optional / Default is "false"
\&     rpz_drop_ip_rule_enabled                      => "true" | "false" | undef,                                                 # Optional / Default is "false"
\&     rpz_drop_ip_rule_min_prefix_length_ipv4       => $uint | undef,                                                            # Optional / Default is 29
\&     rpz_drop_ip_rule_min_prefix_length_ipv6       => $uint | undef,                                                            # Optional / Default is 112
\&     ms_dc_ns_record_creation                      => $msdcnsrecordcreation,                                                    # Optional / Default is empty list
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a \s-1DNS\s0 Zone object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.Sp
If you have applied an access control list to an object, you must restart services after you update the access control list for the changes to take effect. See Infoblox::Session\->\fBrestart()\fR method.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Construct an object
\& my $zone = Infoblox::DNS::Zone\->new (
\&     name     => "domain.com",
\&     comment  => "this is a demo zone",
\&     disable  => "false",
\&     views    => [$view1]
\&     );
\& #Submit for addition
\& my $response = $session\->add( $zone );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DNS Zone object:
\&
\&  name \- Required. A zone name in string format.
\&  view \- Optional. The DNS view in which the zone is located. The default is all DNS views.
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference that contains extensible attributes.
\&  zone \- Optional. The parent zone name in string format.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Zone",
\&     name   => "domain.com",
\&     view   => "default" );
\&
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Zone",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.Sp
If you have applied an access control list to an object, you must restart services after you update the access control list for the changes to take effect. See Infoblox::Session\->\fBrestart()\fR method.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the comment.
\& $zone\->comment("this is a modified comment");
\& #Submit modification
\& my $response = $session\->modify( $zone );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Zone",
\&     name   => "domain.com",
\&     view   => "default" );
\& #Find the desired object from the retrieved list.
\& my $desired_zone = $retrieved_objs[0];
\& #Submit for removal
\& my $response = $session\->remove( $desired_zone );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DNS\s0 Zone objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DNS Zone object:
\&
\&  name \- Required. A host name in string format (regular expression).
\&  view \- Optional. The DNS view in which the zone is located. The default is all DNS views.
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
\&  comment \- Optional. A comment in string format (regular expression).
\&  primary_association_type \- Optional. "Microsoft" is the only allowed value. If it is specified, the search returns only zones with primary servers that are Microsoft (r) DNS servers.
\&  dnssec_ksk_rollover_date \- Optional. Value is the number of seconds that have elapsed since January 1st, 1970 UTC for the next KSK rollover.
\&  dnssec_zsk_rollover_date \- Optional. Value is the number of seconds that have elapsed since January 1st, 1970 UTC for the next ZSK rollover.
\&  zone \- Optional. The parent zone name in string format (regular expression).
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\& # search for all DNS zone objects under com in default view
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::DNS::Zone",
\&     name   => ".*\e\e.com",
\&     view   => "default" );
\&
\& # search for all DNS zone objects defining "Santa Clara" for "Site" extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Zone",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a zone.
.SS "ad_servers( )"
.IX Subsection "ad_servers( )"
.RS 4
Use this method to set or retrieve the list of \s-1AD\s0 domain controllers that are allowed to send GSS-TSIG unsigned updates.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains IPv4 or IPv6 addresses.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get ad_servers
\& my $ad_servers = $zone\->ad_servers();
\& # Modify ad_servers
\& $zone\->ad_servers(["1.2.3.4", "dead::beef"]);
.Ve
.RE
.RS 4
.RE
.SS "allow_gss_tsig_for_underscore_zone( )"
.IX Subsection "allow_gss_tsig_for_underscore_zone( )"
.RS 4
Use this method to set or retrieve the flag that allows \s-1DHCP\s0 clients to perform GSS-TSIG signed updates for underscore zones.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get allow_gss_tsig_for_underscore_zone.
\& my $allow_gss_tsig_for_underscore_zone = $zone\->allow_gss_tsig_for_underscore_zone();
\& # Modify allow_gss_tsig_for_underscore_zone.
\& $zone\->allow_gss_tsig_for_underscore_zone("true");
.Ve
.RE
.RS 4
.RE
.SS "allow_gss_tsig_zone_updates( )"
.IX Subsection "allow_gss_tsig_zone_updates( )"
.RS 4
Use this method to enable/disable the zone to accept GSS-TSIG updates. This setting overrides the grid and member GSS-TSIG zone update settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get allow_gss_tsig_zone_updates.
\& my $allow_gss_tsig_zone_updates = $zone\->allow_gss_tsig_zone_updates();
\& # Modify allow_gss_tsig_zone_updates.
\& $zone\->allow_gss_tsig_zone_updates("true");
.Ve
.RE
.RS 4
.RE
.SS "allow_ptr_creation_in_parent( )"
.IX Subsection "allow_ptr_creation_in_parent( )"
.RS 4
This flag controls whether automatic generation of \s-1RFC 2317\s0 CNAMEs for delegated reverse zones overwrite existing \s-1PTR\s0 records. The default behavior is to overwrite all the existing records in the range, this corresponds to \*(L"allow_ptr_creation_in_parent\*(R" set to \*(L"false\*(R". However, when this flag is set to \*(L"true\*(R" the existing \s-1PTR\s0 records are not overwritten.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get allow_ptr_creation_in_parent.
\& my $allow_ptr_creation_in_parent = $zone\->allow_ptr_creation_in_parent();
\& # Modify allow_ptr_creation_in_parent.
\& $zone\->allow_ptr_creation_in_parent("true");
.Ve
.RE
.RS 4
.RE
.SS "allow_query( )"
.IX Subsection "allow_query( )"
.RS 4
Use this method to set or retrieve the allow_query flag of a \s-1DNS\s0 zone.
.Sp
You can allow or reject queries from specified \s-1IP\s0 addresses and networks. You can also specify \s-1TSIG\s0 keys for the allowed hosts. This setting overrides the member-level query settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses, networks, and/or Infoblox::DNS::TSIGKey objects. To deny queries from certain \s-1IP\s0 addresses and networks, add \*(L"!\*(R" as a prefix to the \s-1IP\s0 addresses and networks. Specify \*(L"any\*(R" to allow any query, or undefine to use the Grid::Member::DNS level allow_query list. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Getting allow_query
\&  my $allow_query = $zone\->allow_query();
\&  #Modifying allow_query
\&  $zone\->allow_query(["any"]);
\&
\&  #Specifying TSIG keys
\&  my $tsig_key1 = $session\->gen_tsig_key();
\&  my $query_key = Infoblox::DNS::TSIGKey\->new(
\&     name => "query_key1",
\&     key  => $tsig_key1
\&  );
\&  #Modifying allow_query
\&  $zone\->allow_query( [ "10.0.0.10" , "20.0.0.0/24","2001::123", $key1, "2004::444/64","!"."30.0.0.30" , "!"."40.10.0.0/24","!"."2005::222/64"] );
\&  ##Un\-override allow_query
\&  $zone\->allow_query(undef)
\&  #Use Infoblox::Grid::NamedACL
\&  $zone\->allow_query($nacl);
.Ve
.RE
.RS 4
.RE
.SS "allow_transfer( )"
.IX Subsection "allow_transfer( )"
.RS 4
Use this method to set or retrieve the allow_transfer list of a \s-1DNS\s0 zone.
.Sp
You can allow or reject zone transfers from specified \s-1IP\s0 addresses and networks. This setting overrides the member-level zone transfer settings.
You can also provide Transaction Signature (\s-1TSIG\s0) keys for clients that are allowed to do zone transfers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses and networks. It is also possible to specify the \s-1TSIG\s0 keys of clients that are allowed to perform zone transfers. \s-1TSIG\s0 keys  are used to authenticate zone transfer requests and replies. The same key name and key value must be on the primary and secondary name servers for TSIG-authenticated zone transfers to occur. To deny zone transfers from certain \s-1IP\s0 addresses and networks, add \*(L"!\*(R" as a prefix to the \s-1IP\s0 addresses and networks. Specify \*(L"any\*(R" to allow any transfer, or undefine to use the Grid::Member::DNS level allow_transfer list.  The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Getting allow_transfer
\&  my $allow_transfer = $zone\->allow_transfer( );
\&  #Modifying allow_transfer
\&  $zone\->allow_transfer(["any"]);
\&
\&  #Specifying TSIG keys
\&  my $tsig_key1 = $session\->gen_tsig_key();
\&  my $key1 = Infoblox::DNS::TSIGKey\->new(
\&     name => "key1",
\&     key  => $tsig_key1
\&  );
\&  my $key2 = Infoblox::DNS::TSIGKey\->new(
\&     name => "tsig_xfer",
\&     key  => ":2xCOMPAT"
\&     );
\&  #Modifying allow_transfer
\&  $zone\->allow_transfer(["10.0.0.10", "20.0.0.0/24","2001::1234", $key1, "2001::333/64", $key2, "!"."30.0.0.30", "!"."40.10.0.0/24","!"."2008::543","!"."2007::456/64"]);
\&  #Use Grid::Member::DNS level allow_transfer list
\&  $zone\->allow_transfer(undef)
\&  #Use Infoblox::Grid::NamedACL
\&  $zone\->allow_transfer($nacl);
.Ve
.RE
.RS 4
.RE
.SS "allow_update( )"
.IX Subsection "allow_update( )"
.RS 4
Use this method to set or retrieve the allow_update flag of a \s-1DNS\s0 zone.
.Sp
You can allow or deny dynamic updates from specified \s-1IP\s0 addresses and networks. This setting overrides member-level update settings.
You can also provide \s-1TSIG\s0 keys for clients that are allowed to do zone updates.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses, networks and/or Infoblox::DNS::TSIGKey objects. To deny updates from certain \s-1IP\s0 addresses and networks, add \*(L"!\*(R" as a prefix to the \s-1IP\s0 addresses and networks. Specify \*(L"any\*(R" to allow any update, or undefine to use the Grid::Member::DNS allow_update list.  Note: You should also undefine the update_keys list to use Grid::Member::DNS settings. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Getting allow_update
\&  my $allow_update = $zone\->allow_update();
\&  #Modifying allow_update
\&  $zone\->allow_update(["any"]);
\&
\&  #Creating a TSIGKey object.
\&  my $update_key1 = $session\->gen_tsig_key();
\&  my $up_key1 = Infoblox::DNS::TSIGKey\->new(
\&     name => "update_key",
\&     key  => $update_key1
\&     );
\&
\&  #Modifying allow_update
\&  $zone\->allow_update(["10.0.0.10", $up_key1, "20.0.0.0/24","2006::987","2007::777/64", "!"."30.0.0.30", "!"."40.10.0.0/24"]);
\&
\&  #Use Grid::Member::DNS level allow_update list
\&  $zone\->allow_update(undef)
\&  #Use Infoblox:Grid::NamedACL
\&  $zone\->allow_update($nacl);
.Ve
.RE
.RS 4
.RE
.SS "allow_update_forwarding( )"
.IX Subsection "allow_update_forwarding( )"
.RS 4
Use this method to set or retrieve the allow_update_forwarding flag of a \s-1DNS\s0 zone.
.Sp
You can allow or deny dynamic updates forwarded from specified \s-1IP\s0 addresses and networks. This setting overrides member-level update settings.
You can also provide \s-1TSIG\s0 keys for clients that are allowed to do zone updates.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses, networks and/or Infoblox::DNS::TSIGKey objects. To deny updates from certain \s-1IP\s0 addresses and networks, add \*(L"!\*(R" as a prefix to the \s-1IP\s0 addresses and networks. Specify \*(L"any\*(R" to allow any update, or undefine to use the Grid::Member::DNS allow_update list.  Note: You should also undefine the update_keys list to use Grid::Member::DNS settings. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Getting allow_update_forwarding
\&  my $allow_update_forwarding = $zone\->allow_update_forwarding();
\&  #Modifying allow_update_forwarding
\&  $zone\->allow_update_forwarding(["any"]);
\&
\&  #Creating a TSIGKey object.
\&  my $update_key1 = $session\->gen_tsig_key();
\&  my $up_key1 = Infoblox::DNS::TSIGKey\->new(
\&     name => "update_key",
\&     key  => $update_key1
\&     );
\&
\&  #Modifying allow_update_forwarding
\&  $zone\->allow_update_forwarding(["10.0.0.10", $up_key1, "20.0.0.0/24","2009::654/64","!"."30.0.0.30", "!"."40.10.0.0/24","!"."2007::432/64"]);
\&
\&  ##Un\-override allow_update_forwarding
\&  $zone\->allow_update_forwarding(undef);
\&  #Use Infoblox::Grid::NamedACL
\&  $zone\->allow_update_forwarding($nacl);
.Ve
.RE
.RS 4
.RE
.SS "bind_check_names_policy( )"
.IX Subsection "bind_check_names_policy( )"
.RS 4
Use this method to set or retrieve the \s-1BIND\s0 check names policy, which indicates the action the appliance takes when it
encounters host names that do not comply with the Strict Hostname Checking policy. This method applies only if
the host name restriction policy  is set to \*(L"Strict Hostname Checking\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The allowed values of the parameter are \*(L"fail\*(R", \*(L"warn\*(R" or undefined. This indicates the desired \s-1BIND\s0 behavior in the case of
illegal hostnames. The default value is undefined, which means the appliance ignores illegal hostnames.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get bind_check_names_policy value
\& my $names_policy = $zone\->bind_check_names_policy();
\& #Modify bind_check_names_policy
\& $zone\->bind_check_names_policy("warn");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment about the zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get comment
\&  my $comment = $zone\->comment();
\&  #Modify comment
\&  $zone\->comment("Modifying the DNS Zone comment");
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to retrieve cloud \s-1API\s0 related information for the Infoblox::DNS::Zone object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get cloud_info
\& my $cloud_info = $object\->cloud_info();
.Ve
.RE
.RS 4
.RE
.SS "convert_a_host_ptr_to_bulk_host( )"
.IX Subsection "convert_a_host_ptr_to_bulk_host( )"
.RS 4
Use this method to convert all A, \s-1HOST\s0 and \s-1PTR\s0 records that have sequential \s-1IP\s0 addresses to bulk host records.
.Sp
The zone object must be retrieved from the server before calling this method.
.Sp
The method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The parameter 'create_reverse_mapping' toggles if the method creates records in the matching reverse-mapping zone.
.Sp
The parameter is set to 'True' if records are created in the reverse-mapping zone. Otherwise, it is set to 'False'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
.PD 0
.IP "\fBExample\fR" 4
.IX Item "Example"
.PD
.Vb 3
\&  my %args;
\&  $args{\*(Aqcreate_reverse_mapping\*(Aq} = \*(Aqtrue\*(Aq;
\&  $zone\->convert_a_host_ptr_to_bulk_host(\e%args);
.Ve
.RE
.RS 4
.RE
.SS "copy_xfer_to_notify( )"
.IX Subsection "copy_xfer_to_notify( )"
.RS 4
Use this method to enable/disable copying of the allowed IPs from zone transfer list into also-notify statement in named.conf.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to enable copying of the allowed IPs from zone transfer list into also-notify statement in named.conf. Set the parameter to \*(L"false\*(R" to disable it.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  # Get attribute value
\&  my $value = $zone\->copy_xfer_to_notify();
\&  # Modify attribute value
\&  $zone\->copy_xfer_to_notify(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "create_ptr_for_bulk_hosts( )"
.IX Subsection "create_ptr_for_bulk_hosts( )"
.RS 4
Use this method to set the create_ptr_for_bulk_hosts property used in zone import operations. This is a write-only attribute.
.Sp
Set this flag to indicate that Infoblox \s-1PTR\s0 records will be automatically created for Bulk Host records if necessary when the zone data is imported.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to trigger host creation or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&  #Modify create_ptr_for_bulk_hosts
\&  $zone\->create_ptr_for_bulk_hosts("true");
.Ve
.RE
.RS 4
.RE
.SS "create_ptr_for_hosts( )"
.IX Subsection "create_ptr_for_hosts( )"
.RS 4
Use this method to set the create_ptr_for_hosts property used in zone import operations. This is a write-only attribute.
.Sp
Set this flag to indicate that Infoblox \s-1PTR\s0 records will be automatically created for Host records if necessary when the zone data is imported.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to trigger host creation or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&  #Modify create_ptr_for_bulk_hosts
\&  $zone\->create_ptr_for_bulk_hosts("true");
.Ve
.RE
.RS 4
.RE
.SS "create_underscore_zones( )"
.IX Subsection "create_underscore_zones( )"
.RS 4
Use this method to set or retrieve the create_underscore_zones flag of a \s-1DNS\s0 zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the create_underscore_zones flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get create_underscore_zones
\&  my $create_underscore_zones = $zone\->create_underscore_zones();
\&  #Modify create_underscore_zones
\&  $zone\->create_underscore_zones("true");
.Ve
.RE
.RS 4
.RE
.SS "ddns_force_creation_timestamp_update( )"
.IX Subsection "ddns_force_creation_timestamp_update( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the creation timestamp of resource records (\s-1RR\s0) should be updated when \s-1DDNS\s0 update happens even if there is no change to the \s-1RR.\s0
.Sp
Setting this parameter to defined value, implicitly sets the override_ddns_force_creation_timestamp_update attribute to \*(L"true\*(R".
Setting this parameter to undefined causes the appliance to use the Grid-level ddns_force_creation_timestamp_update flag and
automatically sets the override_ddns_force_creation_timestamp_update attribute to \*(L"false\*(R".
.Sp
Note that when ddns_force_creation_timestamp_update contains a value and override_ddns_force_creation_timestamp_update is set to \*(L"false\*(R",
the last operation takes precedence. Thus the sequence
\&\f(CW$object\fR\->ddns_force_creation_timestamp_update(\*(L"true\*(R");
\&\f(CW$object\fR\->override_ddns_force_creation_timestamp_update(\*(L"false\*(R");
sets override_ddns_force_creation_timestamp_update to \*(L"false\*(R", and the sequence
\&\f(CW$object\fR\->override_ddns_force_creation_timestamp_update(\*(L"false\*(R");
\&\f(CW$object\fR\->ddns_force_creation_timestamp_update(\*(L"true\*(R");
sets override_ddns_force_creation_timestamp_update to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to update the creation timestamp of \s-1RR\s0 on every \s-1DDNS\s0 update, and 'false' to update the creation timestamp only when \s-1RR\s0 changes during a \s-1DDNS\s0 update.
The default is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ddns_force_creation_timestamp_update value
\& $value = $object\->ddns_force_creation_timestamp_update();
\&
\& #modify ddns_force_creation_timestamp_update value
\& $object\->ddns_force_creation_timestamp_update(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_patterns_list( )"
.IX Subsection "ddns_restrict_patterns_list( )"
.RS 4
Use this method to set or retrieve an unordered list of restriction patterns for an option of to restrict \s-1DDNS\s0 updates based on \s-1FQDN\s0 patterns.
.Sp
Setting this parameter to any list, implicitly sets the override_ddns_patterns_restriction attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DDNS\s0 update restrictions and automatically sets the override_ddns_patterns_restriction attribute to \*(L"false\*(R" if \*(L"ddns_restrict_patterns\*(R" is also undefined. But if \*(L"ddns_restrict_patterns\*(R" contains a value, then the override_ddns_patterns_restriction attribute is set to \*(L"true\*(R".
.Sp
Note that when ddns_restrict_patterns_list contains a valid array reference and override_ddns_patterns_restriction is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$zone\fR\->ddns_restrict_patterns_list([$pattern1, \f(CW$pattern2\fR]); \f(CW$zone\fR\->override_ddns_patterns_restriction(\*(L"false\*(R"); sets override_ddns_patterns_restriction to \*(L"false\*(R", and the sequence \f(CW$zone\fR\->override_ddns_patterns_restriction(\*(L"false\*(R"); \f(CW$zone\fR\->ddns_restrict_patterns_list([$pattern1, \f(CW$pattern2\fR]); sets override_ddns_patterns_restriction to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of FQDNs in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_patterns_list value
\& $ddns_restrict_patterns_list = $zone\->ddns_restrict_patterns_list();
\&
\& #modify ddns_restrict_patterns_list value
\& $zone\->ddns_restrict_patterns_list([\*(Aqfoo.com\*(Aq, \*(Aqbar.com\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_patterns( )"
.IX Subsection "ddns_restrict_patterns( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether an option to restrict \s-1DDNS\s0 update request based on \s-1FQDN\s0 patterns is enabled or disabled.
.Sp
Setting this parameter to defined value, implicitly sets the override_ddns_patterns_restriction attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DDNS\s0 update restrictions and automatically sets the override_ddns_patterns_restriction attribute to \*(L"false\*(R" if \*(L"ddns_restrict_patterns_list\*(R" is also undefined. But if \*(L"ddns_restrict_patterns_list\*(R" contains a value, then the override_ddns_patterns_restriction attribute is set to \*(L"true\*(R".
.Sp
Note that when ddns_restrict_patterns contains a value and override_ddns_patterns_restriction is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$zone\fR\->ddns_restrict_patterns(\*(L"true\*(R"); \f(CW$zone\fR\->override_ddns_patterns_restriction(\*(L"false\*(R"); sets override_ddns_patterns_restriction to \*(L"false\*(R", and the sequence \f(CW$zone\fR\->override_ddns_patterns_restriction(\*(L"false\*(R"); \f(CW$zone\fR\->ddns_restrict_patterns(\*(L"true\*(R"); sets override_ddns_patterns_restriction to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 update request restriction base on \s-1FQDN\s0 patterns and 'false to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_patterns value
\& $ddns_restrict_patterns = $zone\->ddns_restrict_patterns();
\&
\& #modify ddns_restrict_patterns value
\& $zone\->ddns_restrict_patterns(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_static( )"
.IX Subsection "ddns_restrict_static( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether an option to restrict \s-1DDNS\s0 update request to resource records which are marked as '\s-1STATIC\s0' is enabled or disabled.
.Sp
Setting this parameter to defined value, implicitly sets the override_ddns_restrict_static attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the Grid-level ddns_restrict_static flag and automatically sets the override_ddns_restrict_static attribute to \*(L"false\*(R".
.Sp
Note that when ddns_restrict_static contains a value and override_ddns_restrict_static is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$zone\fR\->ddns_restrict_static(\*(L"true\*(R"); \f(CW$zone\fR\->override_ddns_restrict_static(\*(L"false\*(R"); sets override_ddns_restrict_static to \*(L"false\*(R", and the sequence \f(CW$zone\fR\->override_ddns_restrict_static(\*(L"false\*(R"); \f(CW$zone\fR\->ddns_restrict_static(\*(L"true\*(R"); sets override_ddns_restrict_static to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 update requests to resource records which are marked as '\s-1STATIC\s0' and 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_static value
\& $ddns_restrict_static = $zone\->ddns_restrict_static();
\&
\& #modify ddns_restrict_static value
\& $zone\->ddns_restrict_static(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_protected( )"
.IX Subsection "ddns_restrict_protected( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether an option to restrict \s-1DDNS\s0 update request to protected resource records is enabled or disabled.
.Sp
Setting this parameter to defined value, implicitly sets the override_ddns_restrict_protected attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the Grid-level ddns_restrict_protected flag and automatically sets the override_ddns_restrict_protected attribute to \*(L"false\*(R".
.Sp
Note that when ddns_restrict_protected contains a value and override_ddns_restrict_protected is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$zone\fR\->ddns_restrict_protected(\*(L"true\*(R"); \f(CW$zone\fR\->override_ddns_restrict_protected(\*(L"false\*(R"); sets override_ddns_restrict_protected to \*(L"false\*(R", and the sequence \f(CW$zone\fR\->override_ddns_restrict_protected(\*(L"false\*(R"); \f(CW$zone\fR\->ddns_restrict_protected(\*(L"true\*(R"); sets override_ddns_restrict_protected to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 update requests to protected resource records and 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_protected value
\& $ddns_restrict_protected = $zone\->ddns_restrict_protected();
\&
\& #modify ddns_restrict_protected value
\& $zone\->ddns_restrict_protected(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_restrict_secure( )"
.IX Subsection "ddns_restrict_secure( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether \s-1DDNS\s0 update request for principal other than target resource record's principal is restricted.
.Sp
Setting this parameter to a defined value, implicitly sets the override_ddns_principal_security attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DDNS\s0 principal security setting and automatically sets the override_ddns_principal_security attribute to \*(L"false\*(R" if \*(L"ddns_principal_tracking\*(R" and \*(L"ddns_principal_group\*(R" are also undefined. But if \*(L"ddns_principal_tracking\*(R" or \*(L"ddns_principal_group\*(R" contains a value, then the override_ddns_principal_security attribute is set to \*(L"true\*(R".
.Sp
Note that when ddns_restrict_secure contains a value and override_ddns_principal_security is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$zone\fR\->ddns_restrict_secure(\*(L"true\*(R"); \f(CW$zone\fR\->override_ddns_principal_security(\*(L"false\*(R"); sets override_ddns_principal_security to \*(L"false\*(R", and the sequence \f(CW$zone\fR\->override_ddns_principal_security(\*(L"false\*(R"); \f(CW$zone\fR\->ddns_restrict_secure(\*(L"true\*(R"); sets override_ddns_principal_security to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 update requests restriction for principal other than target resource record's principal and 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_restrict_secure value
\& $ddns_restrict_secure = $zone\->ddns_restrict_secure();
\&
\& #modify ddns_restrict_secure value
\& $zone\->ddns_restrict_secure(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_principal_tracking( )"
.IX Subsection "ddns_principal_tracking( )"
.RS 4
Use this method to set or retrieve the flag which indicates whether the \s-1DDNS\s0 principal track is enabled or disabled.
.Sp
\&\s-1DDNS\s0 principal tracking includes putting principal name into resource record affected by update.
.Sp
Setting this parameter to a defined value, implicitly sets the override_ddns_principal_security attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DDNS\s0 principal security setting and automatically sets the override_ddns_principal_security attribute to \*(L"false\*(R" if \*(L"ddns_restrict_secure\*(R" and \*(L"ddns_principal_group\*(R" are also undefined. But if \*(L"ddns_restrict_secure\*(R" or \*(L"ddns_principal_group\*(R" contains a value, then the override_ddns_principal_security attribute is set to \*(L"true\*(R".
.Sp
Note that when ddns_principal_tracking contains a value and override_ddns_principal_security is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$zone\fR\->ddns_principal_tracking(\*(L"true\*(R"); \f(CW$zone\fR\->override_ddns_principal_security(\*(L"false\*(R"); sets override_ddns_principal_security to \*(L"false\*(R", and the sequence \f(CW$zone\fR\->override_ddns_principal_security(\*(L"false\*(R"); \f(CW$zone\fR\->ddns_principal_tracking(\*(L"true\*(R"); sets override_ddns_principal_security to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DDNS\s0 principal tracking and 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_principal_tracking value
\& $ddns_principal_tracking = $zone\->ddns_principal_tracking();
\&
\& #modify ddns_principal_tracking value
\& $zone\->ddns_principal_tracking(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "ddns_principal_group( )"
.IX Subsection "ddns_principal_group( )"
.RS 4
Use this method to set or retrieve the \s-1DDNS\s0 principal group.
.Sp
Setting this parameter to a defined value, implicitly sets the override_ddns_principal_security attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DDNS\s0 principal security setting and automatically sets the override_ddns_principal_security attribute to \*(L"false\*(R" if \*(L"ddns_restrict_secure\*(R" and \*(L"ddns_principal_tracking\*(R" are also undefined. But if \*(L"ddns_restrict_secure\*(R" or \*(L"ddns_principal_tracking\*(R" contains a value, then the override_ddns_principal_security attribute is set to \*(L"true\*(R".
.Sp
Note that when ddns_principal_group contains a value and override_ddns_principal_security is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$zone\fR\->ddns_principal_group($principal_group); \f(CW$zone\fR\->override_ddns_principal_security(\*(L"false\*(R"); sets override_ddns_principal_security to \*(L"false\*(R", and the sequence \f(CW$zone\fR\->override_ddns_principal_security(\*(L"false\*(R"); \f(CW$zone\fR\->ddns_principal_group($principal_group); sets override_ddns_principal_security to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::DNS::DDNS::PrincipalCluster::Group object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #get ddns_principal_group value
\& $ddns_principal_group = $zone\->ddns_principal_group();
\&
\& #modify ddns_principal_group value
\& $zone\->ddns_principal_group($principal_group);
.Ve
.RE
.RS 4
.RE
.SS "delegate_to( )"
.IX Subsection "delegate_to( )"
.RS 4
Use this method to set or retrieve the delegate_to flag of a \s-1DNS\s0 zone.
.Sp
This provides information for the remote name server that maintains data for the delegated zone. The Infoblox appliance redirects queries for data for the delegated zone to this remote name server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DNS::Nameserver objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 12
\& #Get delegate_to
\& my $delegate_to = $zone\->delegate_to();
\& #Modify delegate_to
\& my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&        name     => "ns1.del.com",
\&        ipv4addr => "11.11.11.11",
\&    );
\& my $nameserver2 = Infoblox::DNS::Nameserver\->new(
\&        name     => "test",
\&        ipv6addr => "2006::b671",
\&    );
\& $zone\->delegate_to([$nameserver1, $nameserver2]);
.Ve
.RE
.RS 4
.RE
.SS "delegated_ttl( )"
.IX Subsection "delegated_ttl( )"
.RS 4
Use this method to set or retrieve the delegated_ttl value of a delegated \s-1DNS\s0 zone.
.Sp
You can specify the Time to Live (\s-1TTL\s0) values of auto-generated \s-1NS\s0 and glue records for a delegated zone. This value is the number of seconds that data is cached.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the delegated_ttl in seconds. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails. When delegated_ttl is modified, override_delegated_ttl will be set to 'true' implicitly.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get delegated_ttl
\& my $delegated_ttl = $zone\->delegated_ttl();
\& #Modify delegated_ttl
\& $zone\->delegated_ttl("3600");
.Ve
.RE
.RS 4
.RE
.SS "delegation_ns_group( )"
.IX Subsection "delegation_ns_group( )"
.RS 4
Use this method to set or retrieve the delegation name servers group for the Delegation \s-1DNS\s0 Zone object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are string that contains name of the group or Infoblox::Grid::DNS::Nsgroup::DelegationMember.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct external nameserver
\& my $ns1 = Infoblox::DNS::Nameserver\->new(
\&     name     => \*(Aqns1.domain0.extra\*(Aq,
\&     ipv4addr => \*(Aq5.5.5.5\*(Aq,
\& );
\&
\& #Create delegation nameservers group
\& my $delegation_group = Infoblox::Grid::DNS::DelegationMember\->new(
\&     name               => \*(Aqdelegation_ns_group_A\*(Aq,
\&     delegation_servers => [$member],
\& );
\&
\& #Submit created delegation nameserver group to session
\& $session\->add($delegation_group);
\&
\& #Get delegation_ns_group
\& my $delegation_ns_group = $zone\->delegation_ns_group();
\&
\& #Modify delegation_ns_group
\& $zone\->delegation_ns_group("delegation_ns_group_A");
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DNS\s0 zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get disable
\&  my $disable = $zone\->disable();
\&  #Modify disable
\&  $zone\->disable("true");
.Ve
.RE
.RS 4
.RE
.SS "disable_forwarding( )"
.IX Subsection "disable_forwarding( )"
.RS 4
Use this method to set or retrieve the disable_forwarding flag of a \s-1DNS\s0 zone.
.Sp
Set this flag to indicate that the name servers hosting the zone should not forward queries that end with the domain name of the zone to any configured forwarders.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to disable forwarding or \*(L"false\*(R" to enable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get disable_forwarding
\&  my $disable_forwarding = $zone\->disable_forwarding();
\&  #Modify disable_forwarding
\&  $zone\->disable_forwarding("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_enable_ksk_auto_rollover( )"
.IX Subsection "dnssec_enable_ksk_auto_rollover( )"
.RS 4
Use this method to enable automatic rollover for Key-Signing key.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable automatic rollover for Key-signing key or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get dnssec_enable_ksk_auto_rollover value
\&  my $enable_ksk_auto_rollover = $zone\->dnssec_enable_ksk_auto_rollover();
\&  #Modify dnssec_enable_ksk_auto_rollover value
\&  $zone\->dnssec_enable_ksk_auto_rollover("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_keys( )"
.IX Subsection "dnssec_keys( )"
.RS 4
Use this method to set or retrieve the list of public keys.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a list of Infoblox::DNS::DNSSecKey objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_keys value
\& my $keys = $zone\->dnssec_keys();
\& #Modify dnssec_keys value
\& $zone\->dnssec_keys($keys);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_ksk_email_notification_enabled( )"
.IX Subsection "dnssec_ksk_email_notification_enabled( )"
.RS 4
Use this method to enable or disable email notifications for \s-1KSK\s0 related events.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable email notification or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_ksk_email_notification_enabled value
\& my $value = $zone\->dnssec_ksk_email_notification_enabled();
\& #Modify dnssec_ksk_email_notification_enabled value
\& $zone\->dnssec_ksk_email_notification_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_ksk_rollover_date( )"
.IX Subsection "dnssec_ksk_rollover_date( )"
.RS 4
Use this method to set or retrieve the time for the next \s-1KSK\s0 rollover.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is the number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_ksk_rollover_date value
\& my $value = $zone\->dnssec_ksk_rollover_date_value();
\& #Modify dnssec_ksk_rollover_date value
\& $zone\->dnssec_ksk_rollover_date_value($date);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_ksk_rollover_notification_config( )"
.IX Subsection "dnssec_ksk_rollover_notification_config( )"
.RS 4
Use this method to specify the type of events users will be notified.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are \*(L"\s-1NONE\*(R", \*(L"ALL\*(R"\s0 and \*(L"\s-1REQUIRE_MANUAL_INTERVENTION\*(R".\s0 Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_ksk_rollover_notification_config value
\& my $value = $zone\->dnssec_ksk_rollover_notification_config();
\& #Modify dnssec_ksk_rollover_notification_config value
\& $zone\->dnssec_ksk_rollover_notification_config("ALL");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_ksk_snmp_notification_enabled( )"
.IX Subsection "dnssec_ksk_snmp_notification_enabled( )"
.RS 4
Use this method to enable or disable \s-1SNMP\s0 notifications for \s-1KSK\s0 related events.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable \s-1SNMP\s0 notification or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_ksk_snmp_notification_enabled value
\& my $value = $zone\->dnssec_ksk_snmp_notification_enabled();
\& #Modify dnssec_ksk_snmp_notification_enabled value
\& $zone\->dnssec_ksk_snmp_notification_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "dns_email( )"
.IX Subsection "dns_email( )"
.RS 4
Use this method to retrieve the email address (in punycode format) for the administrator who manages \s-1DNS\s0 zones. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $zone\->dns_email();
.Ve
.RE
.RS 4
.RE
.SS "dns_integrity_check_enable( )"
.IX Subsection "dns_integrity_check_enable( )"
.RS 4
Use this method to set or retrieve the flag used to indicate whether this authoritative zone is monitored for discrepancies or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable authoritative zone monitoring for discrepancies, or \*(L"false\*(R" do disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dns_integrity_check_enable value
\& my $value = $zone\->dns_integrity_check_enable();
\& #Modify dns_integrity_check_enable value
\& $zone\->dns_integrity_check_enable("true");
.Ve
.RE
.RS 4
.RE
.SS "dns_integrity_frequency( )"
.IX Subsection "dns_integrity_frequency( )"
.RS 4
Use this method to set or retrieve the frequency (in seconds) for monitoring authoritative zones.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are unsigned integers between 900 and 65535. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dns_integrity_frequency value
\& my $value = $zone\->dns_integrity_frequency();
\& #Modify dns_integrity_frequency value
\& $zone\->dns_integrity_frequency(1000);
.Ve
.RE
.RS 4
.RE
.SS "dns_integrity_member( )"
.IX Subsection "dns_integrity_member( )"
.RS 4
Use this method to set or retrieve the authoritative zone member on which \s-1DNS\s0 integrity check is performed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is authoritative zone member name in string format. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dns_integrity_member value
\& my $value = $zone\->dns_integrity_member();
\& #Modify dns_integrity_member value
\& $zone\->dns_integrity_member("test.localdomain");
.Ve
.RE
.RS 4
.RE
.SS "dns_integrity_verbose_logging( )"
.IX Subsection "dns_integrity_verbose_logging( )"
.RS 4
Use this method to specify whether we should put more details in the authoritative zone syslog for troubleshooting or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to put more details in syslog, or \*(L"false\*(R" to put less details in syslog. Default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dns_integrity_verbose_logging value
\& my $value = $zone\->dns_integrity_verbose_logging();
\& #Modify dns_integrity_verbose_logging value
\& $zone\->dns_integrity_verbose_logging("true");
.Ve
.RE
.RS 4
.RE
.SS "dns_name( )"
.IX Subsection "dns_name( )"
.RS 4
Use this method to retrieve the name, in punycode format, of a \s-1DNS\s0 zone. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $zone\->dns_name();
.Ve
.RE
.RS 4
.RE
.SS "dns_soa_mname( )"
.IX Subsection "dns_soa_mname( )"
.RS 4
Use this method to retrieve the primary server name, in punycode format, of a \s-1DNS\s0 zone. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get attribute value
\& my $value = $zone\->dns_soa_mname();
.Ve
.RE
.RS 4
.RE
.SS "dnssec_ksk_algorithms( )"
.IX Subsection "dnssec_ksk_algorithms( )"
.RS 4
Use this method to set or retrieve the \s-1DNSSEC\s0 key-signing key algorithms of the zone.
.Sp
This property determines which algorithms to use when generating the keys for signing the \s-1DNSKEY\s0 records.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Currently there are two major versions of the \s-1DNSSEC\s0 zone encryption mechanism. The difference between the two is in their implementation of the Next Secure (\s-1NSEC\s0) records. The older version, which is referred to as \s-1NSEC,\s0 is based on RFCs 4033\-4035. The newer version, which is referred to as \s-1NSEC3,\s0 is described in \s-1RFC 5155.\s0
.Sp
The valid value is a list containing Infoblox::DNS::DNSSecKeyAlgorithm objects.
.Sp
The dnssec_ksk_algorithms parameter inherits the grid setting only when it and all the following \s-1DNSSEC\s0 parameters are undefined: dnssec_ksk_rollover_interval, dnssec_signature_expiration, dnssec_zsk_algorithms, dnssec_zsk_rollover_interval.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Getting algorithm
\& my $algorithms = $zone\->dnssec_ksk_algorithms();
\&
\& # Modifying algorithm
\& $gzone\->dnssec_ksk_algorithms([$alg1, $alg2]);
\&
\& #Inheriting the grid DNSSEC settings
\& $zone\->dnssec_ksk_algorithms(undef);
\& $zone\->dnssec_ksk_rollover_interval(undef);
\& $zone\->dnssec_signature_expiration(undef
\& $zone\->dnssec_zsk_algorithms(undef);
\& $zone\->dnssec_zsk_rollover_interval(undef);
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_ksk_rollover_interval()\fP"
.IX Subsection "dnssec_ksk_rollover_interval()"
.RS 4
Use this method to set or retrieve the rollover interval of the \s-1KSK\s0 keys.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A positive integer that specifies the number of seconds between \s-1KSK\s0 rollovers. Normally, this parameter should be larger than the
\&\s-1ZSK\s0 rollover interval. The \s-1DNSSEC\s0 key-signing key rollover interval (in seconds) must be between 1 day and seconds to Jan 2, 2038.
.Sp
The dnssec_ksk_rollover_interval parameter inherits the grid setting only when it and all the following \s-1DNSSEC\s0 parameters are undefined: dnssec_ksk_algorithms, dnssec_signature_expiration, dnssec_zsk_algorithms, dnssec_zsk_rollover_interval. When at least one of the parameters is specified, then the  dnssec_ksk_rollover_interval parameter uses the value 31536000 seconds (1 year), unless a different value is explicitly specified.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Getting dnssec_ksk_rollover_interval
\& my $ksk_rollover = $zone\->dnssec_ksk_rollover_interval();
\&
\& # Modifying dnssec_ksk_rollover_interval
\& $zone\->dnssec_ksk_rollover_interval(86400);
\&
\& #Use the grid setting
\& $zone\->dnssec_ksk_algorithms(undef);
\& $zone\->dnssec_ksk_rollover_interval(undef);
\& $zone\->dnssec_signature_expiration(undef);
\& $zone\->dnssec_zsk_algorithms(undef);
\& $zone\->dnssec_zsk_rollover_interval(undef);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_nsec3_iterations( )"
.IX Subsection "dnssec_nsec3_iterations( )"
.RS 4
Use this method to define the number of iterations for \s-1NSEC3\s0 hashing.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value are integers between 0 and 65535. Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_nsec3_iterations value
\& my $iteration = $zone\->dnssec_nsec3_iterations();
\& #Modify dnssec_nsec3_iterations value
\& $zone\->dnssec_nsec3_iterations();
.Ve
.RE
.RS 4
.RE
.SS "dnssec_nsec3_salt_min_length( )"
.IX Subsection "dnssec_nsec3_salt_min_length( )"
.RS 4
Use this method to define the minimum length for the \s-1NSEC3\s0 salt.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value are integers between 0 and 65535. Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_nsec3_salt_min_length value
\& my $salt_min_length = $zone\->dnssec_nsec3_salt_min_length();
\& #Modify dnssec_nsec3_salt_min_length value
\& $zone\->dnssec_nsec3_salt_min_length();
.Ve
.RE
.RS 4
.RE
.SS "dnssec_nsec3_salt_max_length( )"
.IX Subsection "dnssec_nsec3_salt_max_length( )"
.RS 4
Use this method to define the maximum legnth for the \s-1NSEC3\s0 salt.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value are integers between 0 and 65535. Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_nsec3_salt_max_length value
\& my $salt_max_length = $zone\->dnssec_nsec3_salt_max_length();
\& #Modify dnssec_nsec3_salt_max_length value
\& $zone\->dnssec_nsec3_salt_max_length();
.Ve
.RE
.RS 4
.RE
.SS "dnssec_resign( )"
.IX Subsection "dnssec_resign( )"
.RS 4
Use this method to initiate the rollover of the key-signing key and the rollover of the zone-signing key for the \s-1DNSSEC\s0 signed zone.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&  #Do KSK/ZSK rollover
\&  unless($zone\->dnssec_resign()){ warn "KSK/ZSK rollover failed!";}
.Ve
.RE
.RS 4
.RE
.SS "dnssec_signature_expiration( )"
.IX Subsection "dnssec_signature_expiration( )"
.RS 4
Use this method to set or retrieve the expiration time for \s-1DNSSEC\s0 signatures.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The signature expiration time in seconds. The minimum value is 86400 (1 day), the maximum value is the number of seconds from the time you set it to January 2038.
.Sp
The dnssec_signature_expiration parameter inherits the grid setting only when it and all the following \s-1DNSSEC\s0 parameters are undefined: dnssec_ksk_algorithms, dnssec_ksk_rollover_interval, dnssec_zsk_algorithms, dnssec_zsk_rollover_interval. When at least one of the parameters is specified, then the  dnssec_signature_expiration parameter uses the value 2592000 seconds (30 days), unless a different value is explicitly specified.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Getting dnssec_signature_expiration
\& my $signature_expiration = $zone\->dnssec_signature_expiration();
\&
\& # Modifying dnssec_signature_expiration
\& $zone\->dnssec_signature_expiration(31536000);
\&
\& #Use the grid setting
\& $zone\->dnssec_ksk_algorithms(undef);
\& $zone\->dnssec_ksk_rollover_interval(undef);
\& $zone\->dnssec_signature_expiration(undef);
\& $zone\->dnssec_zsk_algorithms(undef);
\& $zone\->dnssec_zsk_rollover_interval(undef);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_signed( )"
.IX Subsection "dnssec_signed( )"
.RS 4
Use this method to check if the zone is \s-1DNSSEC\s0 signed and to sign/unsign the zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value. Note that for this method it is not
necessary to use the call \f(CW$session\fR\->\fBmodify()\fR on the zone object for the setting to take effect.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R"  to sign the zone, set the parameter to \*(L"false\*(R" to unsign the zone. The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns \*(L"true\*(R" if the zone is signed and \*(L"false\*(R" if it is unsigned.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Checking whether the zone is signed
\& my $is_signed = $zone\->dnssec_signed();
\&
\& # Signing the zone
\& $zone\->dnssec_signed("true");
\&
\& # Unsigning the zone
\& $zone\->dnssec_signed("false");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_zsk_algorithms( )"
.IX Subsection "dnssec_zsk_algorithms( )"
.RS 4
Use this method to set or retrieve the \s-1DNSSEC\s0 zone-signing key algorithms of the zone.
.Sp
This property determines which algorithms to use when generating the keys for signing the \s-1DNSKEY\s0 records.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Currently there are two major versions of the \s-1DNSSEC\s0 zone encryption mechanism. The difference between the two is in their implementation of the Next Secure (\s-1NSEC\s0) records. The older version, which is referred to as \s-1NSEC,\s0 is based on RFCs 4033\-4035. The newer version, which is referred to as \s-1NSEC3,\s0 is described in \s-1RFC 5155.\s0
.Sp
The valid value is a list containing Infoblox::DNS::DNSSecKeyAlgorithm objects.
.Sp
The dnssec_zsk_algorithms parameter inherits the grid setting only when it and all the following \s-1DNSSEC\s0 parameters are undefined: dnssec_ksk_rollover_interval, dnssec_signature_expiration, dnssec_ksk_algorithms, dnssec_zsk_rollover_interval.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Getting algorithm
\& my $algorithms = $zone\->dnssec_zsk_algorithms();
\&
\& # Modifying algorithm
\& $gzone\->dnssec_zsk_algorithms([$alg1, $alg2]);
\&
\& #Inheriting the grid DNSSEC settings
\& $zone\->dnssec_ksk_algorithms(undef);
\& $zone\->dnssec_ksk_rollover_interval(undef);
\& $zone\->dnssec_signature_expiration(undef
\& $zone\->dnssec_zsk_algorithms(undef);
\& $zone\->dnssec_zsk_rollover_interval(undef);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_zsk_rollover_date( )"
.IX Subsection "dnssec_zsk_rollover_date( )"
.RS 4
Use this method to set or retrieve the time for the next \s-1ZSK\s0 rollover.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is the number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_zsk_rollover_date value
\& my $value = $zone\->dnssec_zsk_rollover_date_value();
\& #Modify dnssec_zsk_rollover_date value
\& $zone\->dnssec_zsk_rollover_date_value($date);
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_zsk_rollover_interval()\fP"
.IX Subsection "dnssec_zsk_rollover_interval()"
.RS 4
Use this method to set or retrieve the zone-signing key rollover interval.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A positive integer that specifies the number of seconds between \s-1ZSK\s0 rollovers. Normally, this parameter should be smaller than
the \s-1KSK\s0 rollover interval. The \s-1DNSSEC\s0 zone-signing key over interval (in seconds) must be between 1 day and the number of seconds from
present to Jan 2038.
.Sp
The dnssec_zsk_rollover_interval parameter inherits the grid setting only when it and all the following \s-1DNSSEC\s0 parameters are undefined: dnssec_ksk_algorithms, dnssec_ksk_rollover_interval,  dnssec_signature_expiration, dnssec_zsk_algorithms. When at least one of the parameters is specified, then the  dnssec_zsk_rollover_interval parameter uses the value 2592000 seconds (30 days), unless a different value is explicitly specified.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Getting dnssec_zsk_rollover_interval
\& my $zsk_rollover = $zone\->dnssec_zsk_rollover_interval();
\&
\& # Modifying dnssec_ksk_rollover_interval
\& $zone\->dnssec_zsk_rollover_interval(86400);
\&
\& #Use the grid setting
\& $zone\->dnssec_ksk_algorithms(undef);
\& $zone\->dnssec_ksk_rollover_interval(undef);
\& $zone\->dnssec_signature_expiration(undef);
\& $zone\->dnssec_zsk_algorithms(undef);
\& $zone\->dnssec_zsk_rollover_interval(undef);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_zsk_rollover_mechanism( )"
.IX Subsection "dnssec_zsk_rollover_mechanism( )"
.RS 4
Use this method to set or retrive the \s-1ZSK\s0 rollover mechanism type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are \*(L"\s-1DOUBLE_SING\*(R"\s0 and \*(L"\s-1PRE_PUBLISH\*(R".\s0 Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_zsk_rollover_mechanism value
\& my $value = $zone\->dnssec_zsk_rollover_mechanism();
\& #Modify dnssec_zsk_rollover_mechanism value
\& $zone\->dnssec_zsk_rollover_mechanism("DOUBLE_SIGN");
.Ve
.RE
.RS 4
.RE
.SS "do_host_abstraction( )"
.IX Subsection "do_host_abstraction( )"
.RS 4
Use this method to set the do_host_abstraction property used in zone import operations. This is a write-only attribute.
.Sp
Set this flag to indicate that Infoblox host records will be automatically created from A records when the zone data is imported.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to trigger host creation or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&  #Modify do_host_abstraction
\&  $zone\->do_host_abstraction("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_ad_servers( )"
.IX Subsection "enable_ad_servers( )"
.RS 4
Use this method to set or retrieve the flag that allows GSS-TSIG unsigned updates from \s-1AD\s0 domain controllers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get enable_ad_servers.
\& my $enable_ad_servers = $zone\->enable_ad_servers();
\& # Modify enable_ad_servers.
\& $zone\->enable_ad_servers("true");
.Ve
.RE
.RS 4
.RE
.SS "email( )"
.IX Subsection "email( )"
.RS 4
Use this method to set or retrieve the e\-mail address of an administrator of a \s-1DNS\s0 zone.
.Sp
This setting overrides grid-level e\-mail settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The e\-mail address of an administrator.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get email
\& my $email = $zone\->email();
\& #Modify email
\& $zone\->email("admin\e@infoblox.com");
.Ve
.RE
.RS 4
.RE
.SS "execute_dns_parent_check( )"
.IX Subsection "execute_dns_parent_check( )"
.RS 4
Use this method to perform an one-time \s-1DNS\s0 integrity check for the selected zone.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns \*(L"true\*(R" value upon the successful completion, and returns fail string otherwise.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #perform one\-time check for zone
\& $zone\->execute_dns_parent_check();
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS\s0 zone object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $zone\->extattrs();
\& #Modify extattrs
\& $zone\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DNS\s0 zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $zone\->extensible_attributes();
\& #Modify extensible attributes
\& $zone\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "fireeye_rule_mapping( )"
.IX Subsection "fireeye_rule_mapping( )"
.RS 4
Use this method to set or retrieve the FireEye rule mapping.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
An Infoblox::DNS::FireEye::RuleMapping object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get fireeye_rule_mapping
\&  my $fireeye_rule_mapping = $zone\->fireeye_rule_mapping();
\&  #Modify fireeye_rule_mapping
\&  $zone\->fireeye_rule_mapping($rm);
.Ve
.RE
.RS 4
.RE
.SS "forward_external_ns_group( )"
.IX Subsection "forward_external_ns_group( )"
.RS 4
Use this method to set or retrieve the external nameservers group name for forward \s-1DNS\s0 zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired external name servers group name in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct external nameserver
\& my $ns1 = Infoblox::DNS::Nameserver\->new(
\&     name     => \*(Aqns1.domain0.extra\*(Aq,
\&     ipv4addr => \*(Aq5.5.5.5\*(Aq,
\& );
\&
\& #Construct external nameservers group
\& my $ext = Infoblox::DNS::Nsgroup::ForwardStubServer\->new(
\&     name             => \*(Aqextsrvg1\*(Aq,
\&     external_servers => [$ns1],
\& );
\&
\& #Submit created forward_external nameservers group to session
\& $session\->add($ext);
\&
\& #Get forward_external_ns_group value
\& my $forward_external_ns_group = $zone\->forward_external_ns_group();
\&
\& #Modify forward_external_ns_group value
\& $zone\->forward_external_ns_group(\*(Aqextsrvg1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "forward_ns_group( )"
.IX Subsection "forward_ns_group( )"
.RS 4
Use this method to set or retrieve the name servers group for the Forward \s-1DNS\s0 Zone object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are string that contains name of the group or Infoblox::Grid::DNS::Nsgroup::ForwardingMember.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct external nameserver
\& my $ns1 = Infoblox::DNS::Nameserver\->new(
\&     name     => \*(Aqns1.domain0.extra\*(Aq,
\&     ipv4addr => \*(Aq5.5.5.5\*(Aq,
\& );
\&
\& #Construct dns member
\& my $member = Infoblox::DNS::Member\->new(
\&     ipv4addr   => \*(Aq192.168.1.2\*(Aq,
\&     forward_to => [$ns1],
\& );
\&
\& #Create forward nameservers group
\& my $forward_group = Infoblox::Grid::DNS::ForwardingMember\->new(
\&     name               => \*(Aqforward_ns_group_A\*(Aq,
\&     forwarding_servers => [$member],
\& );
\&
\& #Submit created forward nameserver group to session
\& $session\->add($forward_group);
\&
\& #Get forward_ns_group
\& my $forward_ns_group = $zone\->forward_ns_group();
\&
\& #Modify forward_ns_group
\& $zone\->forward_ns_group("forward_ns_group_A");
.Ve
.RE
.RS 4
.RE
.SS "forward_only( )"
.IX Subsection "forward_only( )"
.RS 4
Use this method to set or retrieve the forward_only flag of a \s-1DNS\s0 forward zone. When you set this flag, the appliance sends queries to forwarders only, and not to other internal or Internet root servers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to send queries to forwarders only. Specify \*(L"false\*(R" to disable it.  Default is \*(L"false.\*(R"
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting forward_only
\&   my $forward_only = $fwd_zone\->forward_only( );
\&   #Modifying forward_only
\&   $fwd_zone\->forward_only("true");
.Ve
.RE
.RS 4
.RE
.SS "forward_to( )"
.IX Subsection "forward_to( )"
.RS 4
Use this method to set or retrieve the forward_to flag of a \s-1DNS\s0 zone.
.Sp
This method provides information for the remote name server to which you want the Infoblox appliance to forward queries for a specified domain name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DNS::Member objects for grid secondary servers and Infoblox::DNS::Nameserver objects for external secondary servers. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Get forward_to
\& my $forward_to = $zone\->forward_to();
\& #Modify forward_to
\& my $member = Infoblox::DNS::Member\->new(
\&        name     => "hostname.com",
\&        ipv4addr => "3.0.0.2",
\&    );
\&
\& my $nameserver = Infoblox::DNS::Nameserver\->new(
\&        name     => "ns1.forwd.com",
\&        ipv4addr => "11.11.11.11",
\&    );
\&
\& $zone\->forward_to([$member, $nameserver]);
.Ve
.RE
.RS 4
.RE
.SS "host_name_restriction_policy( )"
.IX Subsection "host_name_restriction_policy( )"
.RS 4
Use this method to set or retrieve the host_name_restriction_policy flag of a \s-1DNS\s0 zone.
.Sp
This setting overrides the member-level host name restriction policy settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
String with the name of predefined record policies or user-defined record policies. The default value is undefined, which is to follow the Record Name policy specified in Infoblox::Grid::Member::DNS level.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get host name restriction policy
\& my $host_name_restriction_policy = $zone\->host_name_restriction_policy();
\& #Modify host name restriction policy
\& $zone\->host_name_restriction_policy("Allow Any");
.Ve
.RE
.RS 4
.RE
.SS "import_from( )"
.IX Subsection "import_from( )"
.RS 4
Use this method to set or retrieve the import_from flag of a \s-1DNS\s0 zone.
.Sp
This method specifies the \s-1IP\s0 address of the Infoblox appliance from which zone data is imported. This is only valid for authoritative zones. Setting this address to '255.255.255.255' and do_host_abstraction to 'true' will create Host records from A records in this zone without importing zone data.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number with the basic format representation of \f(CW\*(C`X.X.X.X\*(C'\fR where x refers to decimal digits (8 bits), for example: \f(CW128.6.4.7\fR. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Modify import_from
\& $zone\->import_from("192.168.1.2");
.Ve
.RE
.RS 4
.RE
.SS "initiate_ksk_rollover( )"
.IX Subsection "initiate_ksk_rollover( )"
.RS 4
Use this method to initiate the rollover of the key-signing key for the \s-1DNSSEC\s0 signed zone.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&  #Do KSK rollover
\&  unless($zone\->initiate_ksk_rollover()){ warn "KSK rollover failed!";}
.Ve
.RE
.RS 4
.RE
.SS "initiate_zsk_rollover( )"
.IX Subsection "initiate_zsk_rollover( )"
.RS 4
Use this method to initiate the rollover of the Zone-signing key for the \s-1DNSSEC\s0 signed zone.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns true value upon the successful completion, and returns false value otherwise.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&  #Do ZSK rollover
\&  unless($zone\->initiate_zsk_rollover()){ warn "ZSK rollover failed!";}
.Ve
.RE
.RS 4
.RE
.SS "is_default( )"
.IX Subsection "is_default( )"
.RS 4
Use this method to set or retrieve the is_default flag of a \s-1DNS\s0 zone.
.Sp
This flag is used to determine the default zone for the zone associations of a \s-1DHCP\s0 network. This is set or returned only for zone objects set in the zone-associations method of the \s-1DHCP\s0 network.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the is_default flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get is_default
\&  my $is_default = $zone\->is_default();
\&  #Modify is_default
\&  $zone\->is_default("true");
.Ve
.RE
.RS 4
.RE
.SS "is_multimaster( )"
.IX Subsection "is_multimaster( )"
.RS 4
Use this method to set or retrieve the is_multimaster flag.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the is_multimaster flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get the attribute value
\& my $attr = $zone\->is_multimaster();
\& # Modify the attribute value
\& $zone\->is_multimaster(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "last_queried( )"
.IX Subsection "last_queried( )"
.RS 4
Use this method to retrieve the time the zone was last queried on.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value, the number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_queried
\& my $last_queried = $zone\->last_queried();
.Ve
.RE
.RS 4
.RE
.SS "rpz_drop_ip_rule_enabled( )"
.IX Subsection "rpz_drop_ip_rule_enabled( )"
.RS 4
Use this method to set or retreive the flag that indicates whether the \s-1DNS\s0 server ignores RPZ-IP triggers with large prefix lengths or not.
.Sp
Setting this method to a defined value implicitly sets the override_rpz_drop_ip_rule method to \*(L"true\*(R". Setting the parameter to undefined if rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 are undefined causes the appliance to use the Grid default and automatically resets the override_rpz_drop_ip_rule attribute to \*(L"false\*(R".
.Sp
Note that when rpz_drop_ip_rule_enabled is set to a defined value and override_rpz_drop_ip_rule is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->rpz_drop_ip_rule_enabled(\*(L"true\*(R"); \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); will set override_rpz_drop_ip_rule to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); \f(CW$object\fR\->rpz_drop_ip_rule_enabled(\*(L"true\*(R"); will result in override_rpz_drop_ip_rule=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable ignoring of RPZ-IP triggers with large prefix lengths or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $zone\->rpz_drop_ip_rule_enabled();
\& # Modify attribute value
\& $zone\->rpz_drop_ip_rule_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "rpz_drop_ip_rule_min_prefix_length_ipv4( )"
.IX Subsection "rpz_drop_ip_rule_min_prefix_length_ipv4( )"
.RS 4
Use this method to set or retreive minimum prefix length for IPv4 RPZ-IP triggers.
.Sp
Setting this method to a defined value implicitly sets the override_rpz_drop_ip_rule method to \*(L"true\*(R". Setting the parameter to undefined if rpz_drop_ip_rule_enabled and rpz_drop_ip_rule_min_prefix_length_ipv6 are undefined causes the appliance to use the Grid default and automatically resets the override_rpz_drop_ip_rule attribute to \*(L"false\*(R".
.Sp
Note that when rpz_drop_ip_rule_min_prefix_length_ipv4 is set to a defined value and override_rpz_drop_ip_rule is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->rpz_drop_ip_rule_min_prefix_length_ipv4(\*(L"20\*(R"); \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); will set override_rpz_drop_ip_rule to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); \f(CW$object\fR\->rpz_drop_ip_rule_min_prefix_length_ipv4(\*(L"20\*(R"); will result in override_rpz_drop_ip_rule=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 31 that represents prefix length (in bits) for IPv4 RPZ-IP triggers.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $zone\->rpz_drop_ip_rule_min_prefix_length_ipv4();
\& # Modify attribute value
\& $zone\->rpz_drop_ip_rule_min_prefix_length_ipv4("16");
.Ve
.RE
.RS 4
.RE
.SS "rpz_drop_ip_rule_min_prefix_length_ipv6( )"
.IX Subsection "rpz_drop_ip_rule_min_prefix_length_ipv6( )"
.RS 4
Use this method to set or retreive minimum prefix length for IPv6 RPZ-IP triggers.
.Sp
Setting this method to a defined value implicitly sets the override_rpz_drop_ip_rule method to \*(L"true\*(R". Setting the parameter to undefined if rpz_drop_ip_rule_enabled and rpz_drop_ip_rule_min_prefix_length_ipv4 are undefined causes the appliance to use the Grid default and automatically resets the override_rpz_drop_ip_rule attribute to \*(L"false\*(R".
.Sp
Note that when rpz_drop_ip_rule_min_prefix_length_ipv6 is set to a defined value and override_rpz_drop_ip_rule is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->rpz_drop_ip_rule_min_prefix_length_ipv6(\*(L"20\*(R"); \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); will set override_rpz_drop_ip_rule to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); \f(CW$object\fR\->rpz_drop_ip_rule_min_prefix_length_ipv6(\*(L"20\*(R"); will result in override_rpz_drop_ip_rule=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 127 that represents prefix length (in bits) for IPv6 RPZ-IP triggers.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $zone\->rpz_drop_ip_rule_min_prefix_length_ipv6();
\& # Modify attribute value
\& $zone\->rpz_drop_ip_rule_min_prefix_length_ipv6("120");
.Ve
.RE
.RS 4
.RE
.SS "rpz_policy( )"
.IX Subsection "rpz_policy( )"
.RS 4
Use this method to set or retrieve the override policy for the Response Policy Zone.
.Sp
This property determines the generic override rule for all records in this Response Policy Zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is one of \*(L"\s-1GIVEN\*(R", \*(L"PASSTHRU\*(R", \*(L"NXDOMAIN\*(R", \*(L"NODATA\*(R", \*(L"SUBSTITUTE\*(R", \*(L"DISABLED\*(R".\s0 The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Getting rpz_policy
\& my $rpz_policy = $zone\->rpz_policy();
\&
\& # Modifying rpz_policy
\& $zone\->rpz_policy("PASSTHRU");
.Ve
.RE
.RS 4
.RE
.SS "restart_if_needed( )"
.IX Subsection "restart_if_needed( )"
.RS 4
Use this method to set the flag that indicates whether \s-1DHCP\s0 service should be restarted on a member that is serving \s-1DHCP\s0 for the changed object referenced in a cloud \s-1API\s0 request.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify true to restart the \s-1DHCP\s0 service.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
None
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Modify
\& $zone\->restart_if_needed(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "rpz_type( )"
.IX Subsection "rpz_type( )"
.RS 4
Use this method to set or retrieve the type of the Response Policy Zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is one of \*(L"\s-1LOCAL\*(R", \*(L"FIREEYE\*(R", \*(L"FEED\*(R".\s0 The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Getting rpz_type
\& my $rpz_type = $zone\->rpz_type();
\&
\& # Modifying rpz_type
\& $zone\->rpz_type("LOCAL");
.Ve
.RE
.RS 4
.RE
.SS "rpz_severity( )"
.IX Subsection "rpz_severity( )"
.RS 4
Use this method to set or retrieve the type of severity for Response Policy Zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is \s-1CRITICAL, MAJOR, WARNING,\s0 or \s-1INFORMATIONAL.\s0 The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Getting rpz_severity
\& my $rpz_severity = $zone\->rpz_severity();
\&
\& # Modifying rpz_type
\& $zone\->rpz_severity("MAJOR");
.Ve
.RE
.RS 4
.RE
.SS "substitute_name( )"
.IX Subsection "substitute_name( )"
.RS 4
Use this method to retrieve the substitution name when the \s-1RPZ\s0 policy is set to \*(L"\s-1SUBSTITUTE\*(R".\s0
.Sp
You must specify a parameter if rpz_policy is set to \*(L"\s-1SUBSTITUTE\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Getting algorithm
\& my $substitution_name = $zone\->substitute_name();
\&
\& # Modifying algorithm
\& $zone\->substitute_name("something");
.Ve
.RE
.RS 4
.RE
.SS "rpz_priority( )"
.IX Subsection "rpz_priority( )"
.RS 4
Use this method to retrieve the priority of zones among all Response Policy Zones.
.Sp
This attribute is readonly and you can use an Infoblox::DNS::OrderedResponsePolicyZones object to reorder Response Policy Zones in a \s-1DNS\s0 view.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns the attribute value in integer format. \*(L"1\*(R" indicates the highest priority.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get rpz_priority
\& my $rpz_priority = $zone\->rpz_priority();
.Ve
.RE
.RS 4
.RE
.SS "rpz_last_updated_time( )"
.IX Subsection "rpz_last_updated_time( )"
.RS 4
Use this method to retrieve the date and time the Response Policy Zone was last updated.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns the attribute value in number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get rpz_last_updated_time
\& my $last_updated_time = $zone\->rpz_last_updated_time();
.Ve
.RE
.RS 4
.RE
.SS "rpz_severity( )"
.IX Subsection "rpz_severity( )"
.RS 4
Use this method to set or retrieve the severity of this response policy zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is one of the following: \s-1CRITICAL, MAJOR, WARNING\s0 or \s-1INFORMATIONAL.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get rpz_severity
\& my $severity = $zone\->rpz_severity();
\&
\& # Modify rpz_severity
\& $zone\->rpz_severity("MAJOR");
.Ve
.RE
.RS 4
.RE
.SS "is_feed_zone( )"
.IX Subsection "is_feed_zone( )"
.RS 4
Use this method to retrieve the boolena value that indicates whether the Response Policy Zone is a \*(L"feed\*(R" zone or not.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns the attribute value. \*(L"True\*(R" means the response policy zone is a feed zone that has an assigned external primary.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get is_feed_zone
\& my $is_feed_zone = $zone\->is_feed_zone();
.Ve
.RE
.RS 4
.RE
.SS "locked( )"
.IX Subsection "locked( )"
.RS 4
Use this method to set or retrieve the locked flag of a \s-1DNS\s0 zone.
.Sp
If you enable this flag other administrators cannot make changes that would \*(L"collide\*(R". This is for administration purposes only. The zone will continue to serve \s-1DNS\s0 data even when it is locked.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the locked flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get locked
\&  my $locked = $zone\->locked();
\&  #Modify locked
\&  $zone\->locked("true");
.Ve
.RE
.RS 4
.RE
.SS "members( )"
.IX Subsection "members( )"
.RS 4
Use this method to set or retrieve the members flag of a \s-1DNS\s0 forward zone.
.Sp
This method specifies the grid member that serves the forward zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DNS::Member object(s). The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&  #Get members
\&  my $members = $zone\->members();
\&  #Modify members
\&  my $memberns1 = Infoblox::DNS::Member\->new(
\&        name => "member1.forwd.com",
\&    );
\&
\&  my $memberns2 = Infoblox::DNS::Member\->new(
\&        name => "member2.forwd.com",
\&    );
\&
\&  $zone\->members([$memberns1,$memberns2]);
.Ve
.RE
.RS 4
.RE
.SS "member_soa_serials( )"
.IX Subsection "member_soa_serials( )"
.RS 4
Use this method to retrieve per-member \s-1SOA\s0 serial information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that contains Infoblox::DNS::Member::SoaSerial object(s).
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get the attribute value
\& my $member_soa_serials = $zone\->member_soa_serials();
.Ve
.RE
.RS 4
.RE
.SS "member_soa_mnames( )"
.IX Subsection "member_soa_mnames( )"
.RS 4
Use this method to set or retrieve per-member \s-1SOA MNAME\s0 information.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DNS::Member::SoaMname objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get the attribute value
\& my $member_soa_mnames = $zone\->member_soa_mnames();
\& # Modify the attribute value
\& $zone\->member_soa_mnames([$soa_mname]);
.Ve
.RE
.RS 4
.RE
.SS "ms_dc_ns_record_creation( )"
.IX Subsection "ms_dc_ns_record_creation( )"
.RS 4
Use this method to set or retrieve the list of Active Directory Domain Controllers which are allowed to create \s-1NS\s0 Record for the \s-1DNS\s0 Zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameters\fR" 4
.IX Item "Parameters"
The valid value is an array of Infoblox::Grid::MSServer::DCNSRecordCreation objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_dc_ns_record_creation
\& my $ms_dc_ns_record_creation = $zone\->ms_dc_ns_record_creation();
\&
\& #Modify ms_dc_ns_record_creation
\& $zone\->ms_dc_ns_record_creation([$msdcns1, $msdcns1]);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of a \s-1DNS\s0 zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Zone name. For a reverse zone, this is in \*(L"address/cidr\*(R" format. For other zones, this is in \s-1FQDN\s0 (Fully Qualified Domain Name) format. A zone name can have a maximum of 256 characters.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name
\& my $name = $zone\->name();
.Ve
.RE
.RS 4
.RE
.SS "network_associations( )"
.IX Subsection "network_associations( )"
.RS 4
Use this method to retrieve the associated network/network container information. This is a read-only method.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
No parameter need to be specified
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns an array reference that contains Infoblox::DHCP::Network, Infoblox::DHCP::NetworkContainer, Infoblox::DHCP::IPv6Network, and Infoblox::DHCP::IPv6NetworkContainer objects.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 2
\& #Getting network associations
\& my $network_associations = $zone\->network_associations();
.Ve
.RE
.RS 4
.RE
.SS "next_secure_type( )"
.IX Subsection "next_secure_type( )"
.RS 4
Use this method to set or retrieve resource record type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is '\s-1NSEC\s0' or '\s-1NSEC3\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the next_secure_type value
\& my $next_secure_type = $zone\->next_secure_type();
\& #Modify the next_secure_type value
\& $zone\->next_secure_type(\*(AqNSEC3\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "notify_delay( )"
.IX Subsection "notify_delay( )"
.RS 4
Use this method to specify with how many seconds of delay the notify messages are sent to secondaries.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integer between 5 and 86400, inclusive. Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting notify_delay
\&   my $notify_delay = $zone\->notify_delay( );
\&   #Modifying notify_delay
\&   $zone\->notify_delay(5);
.Ve
.RE
.RS 4
.RE
.SS "\fBms_ad_integrated()\fP"
.IX Subsection "ms_ad_integrated()"
.RS 4
Use this method to set or retrieve the Active Directory-integrated flag of a zone. This attribute is valid only when \fBms_managed()\fR is \*(L"Stub\*(R", \*(L"Auth_primary\*(R", or \*(L"Auth_both\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the Active Directory-integrated flag or \*(L"false\*(R" to unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ms_ad_integrated
\& my $ms_ad_integrated = $zone\->ms_ad_integrated();
\& #Modify ms_ad_integrated
\& $zone\->ms_ad_integrated("true");
.Ve
.RE
.RS 4
.RE
.SS "\fBms_managed()\fP"
.IX Subsection "ms_managed()"
.RS 4
Use this method to retrieve the flag that indicates whether the zone is assigned to a Microsoft \s-1DNS\s0 server. This flag returns the authoritative name server type of the Microsoft \s-1DNS\s0 server. The value can be:
.ie n .IP """None"" if the zone is not assigned to any Microsoft \s-1DNS\s0 server" 4
.el .IP "``None'' if the zone is not assigned to any Microsoft \s-1DNS\s0 server" 4
.IX Item "None if the zone is not assigned to any Microsoft DNS server"
.PD 0
.ie n .IP """Stub"" if the zone is assigned to a Microsoft \s-1DNS\s0 server as a stub zone" 4
.el .IP "``Stub'' if the zone is assigned to a Microsoft \s-1DNS\s0 server as a stub zone" 4
.IX Item "Stub if the zone is assigned to a Microsoft DNS server as a stub zone"
.ie n .IP """Auth_primary"" if only the primary server of the zone is a Microsoft \s-1DNS\s0 server" 4
.el .IP "``Auth_primary'' if only the primary server of the zone is a Microsoft \s-1DNS\s0 server" 4
.IX Item "Auth_primary if only the primary server of the zone is a Microsoft DNS server"
.ie n .IP """Auth_secondary"" if only the secondary server of the zone is a Microsoft \s-1DNS\s0 server" 4
.el .IP "``Auth_secondary'' if only the secondary server of the zone is a Microsoft \s-1DNS\s0 server" 4
.IX Item "Auth_secondary if only the secondary server of the zone is a Microsoft DNS server"
.ie n .IP """Auth_both"" if both the primary and secondary servers of the zone are Microsoft \s-1DNS\s0 servers" 4
.el .IP "``Auth_both'' if both the primary and secondary servers of the zone are Microsoft \s-1DNS\s0 servers" 4
.IX Item "Auth_both if both the primary and secondary servers of the zone are Microsoft DNS servers"
.RE
.RS 4
.IP "\fBReturns\fR" 4
.IX Item "Returns"
.PD
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_managed
\& my $ms_managed = $zone\->ms_managed();
.Ve
.RE
.RS 4
.RE
.SS "\fBms_read_only()\fP"
.IX Subsection "ms_read_only()"
.RS 4
Use this method to retrieve the flag that indicates if a grid member manages the zone served by a Microsoft \s-1DNS\s0 server in read-only mode. This flag returns \*(L"true\*(R" when a grid member manages the zone in read-only mode. Otherwise, it returns \*(L"false\*(R".
.Sp
When the zone has the \fBms_read_only()\fR flag set to \*(L"true\*(R", no change can be made to this zone.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_read_only
\& my $ms_read_only = $zone\->ms_read_only();
.Ve
.RE
.RS 4
.RE
.SS "\fBms_ddns_mode()\fP"
.IX Subsection "ms_ddns_mode()"
.RS 4
Use this method to set or retrieve the flag that indicates whether an Active Directory-integrated zone with a Microsoft \s-1DNS\s0 server as primary allows dynamic updates. This flag returns \*(L"Secure\*(R" if the zone allows secure updates only, \*(L"None\*(R" if the zone forbids dynamic updates, or \*(L"Any\*(R" if the zone accepts both secure and nonsecure updates. This flag is valid only if \fBms_managed()\fR is either \*(L"Auth_primary\*(R" or \*(L"Auth_both\*(R". If the flag \fBms_ad_integrated()\fR is false, the value \*(L"Secure\*(R" is not allowed.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"Secure\*(R", \*(L"None\*(R", or \*(L"Any\*(R" to control the dynamic updates that an Active Directory-integrated zone is allowed to accept. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ms_ddns_mode
\& my $ms_ddns_mode = $zone\->ms_ddns_mode();
\& #Modify ms_ddns_mode
\& $zone\->ms_ddns_mode("None");
.Ve
.RE
.RS 4
.RE
.SS "\fBms_allow_transfer()\fP"
.IX Subsection "ms_allow_transfer()"
.RS 4
Use this method to set or retrieve the list of \s-1DNS\s0 clients that are allowed to perform zone transfers from a Microsoft \s-1DNS\s0 server.
.Sp
This setting applies only to zones with Microsoft \s-1DNS\s0 servers that are either primary or secondary servers. This setting does not inherit any value from the grid or from any member that defines an \fBallow_transfer()\fR value. This setting does not apply to any grid member. Use the \fBallow_transfer()\fR attribute to control allowed clients on grid members.
.Sp
Valid values are:
.IP "An array that contains a list of IPv4 addresses" 4
.IX Item "An array that contains a list of IPv4 addresses"
.PD 0
.ie n .IP "The keyword ""Any"" to allow any client" 4
.el .IP "The keyword ``Any'' to allow any client" 4
.IX Item "The keyword Any to allow any client"
.ie n .IP "The keyword ""NSOnly"" to allow only the nameservers listed in the zone" 4
.el .IP "The keyword ``NSOnly'' to allow only the nameservers listed in the zone" 4
.IX Item "The keyword NSOnly to allow only the nameservers listed in the zone"
.ie n .IP "The keyword ""None"" to deny all zone transfer requests" 4
.el .IP "The keyword ``None'' to deny all zone transfer requests" 4
.IX Item "The keyword None to deny all zone transfer requests"
.RE
.RS 4
.PD
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify one of the allowed values to identify the \s-1DNS\s0 clients that are allowed to perform zone transfers from a Microsoft \s-1DNS\s0 server. The default is \*(L"NSOnly\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ms_allow_transfer
\& my $ms_allow_transfer = $zone\->ms_allow_transfer();
\& #Modify ms_allow_transfer
\& $zone\->ms_allow_transfer("Any");
.Ve
.RE
.RS 4
.RE
.SS "ms_sync_disable( )"
.IX Subsection "ms_sync_disable( )"
.RS 4
Use this method to disable Microsoft Server synchronization for this zone.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to disable Microsoft Server synchronization for this zone. Set the parameter to \*(L"false\*(R" to enable Microsoft Server synchronization for this zone.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBReturn\fR" 4
.IX Item "Return"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_sync_disable value
\& my $ms_sync_disable = $zone\->ms_sync_disable();
\&
\& #Set ms_sync_disable value
\& $zone\->ms_sync_disable("true");
.Ve
.RE
.RS 4
.RE
.SS "ns_group( )"
.IX Subsection "ns_group( )"
.RS 4
Use this method to set or retrieve the name servers group for the \s-1DNS\s0 Authoritative and Response Policy Zone objects.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are string that contains name of the group or Infoblox::Grid::DNS::Nsgroup.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ns_group
\& my $ns_group = $zone\->ns_group();
\&
\& #Modify ns_group
\& $zone\->ns_group("ns_group_A");
.Ve
.RE
.RS 4
.RE
.SS "override_copy_xfer_to_notify( )"
.IX Subsection "override_copy_xfer_to_notify( )"
.RS 4
The override_copy_xfer_to_notify attribute controls whether the copy_xfer_to_notify method values of the \s-1DNS\s0 zone are used, instead of the member default.
.Sp
The override_copy_xfer_to_notify attribute can be specified explicitly. It is also set implicitly when copy_xfer_to_notify is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the member-level setting for copy_xfer_to_notify. Set the parameter to \*(L"false\*(R" to inherit the member-level setting for copy_xfer_to_notify.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_copy_xfer_to_notify
\&    my $override_copy_xfer_to_notify = $zone\->override_copy_xfer_to_notify( );
\&    #Modifying override_copy_xfer_to_notify
\&    $zone\->override_copy_xfer_to_notify("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_force_creation_timestamp_update( )"
.IX Subsection "override_ddns_force_creation_timestamp_update( )"
.RS 4
The override_ddns_force_creation_timestamp_update attribute controls whether the ddns_force_creation_timestamp_update method value of the \s-1DNS\s0 View is used, instead of the Grid default.
.Sp
The override_ddns_force_creation_timestamp_update attribute can be specified explicitly. It is also set implicitly when ddns_force_creation_timestamp_update is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for ddns_force_creation_timestamp_update. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for ddns_force_creation_timestamp_update.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get override_ddns_force_creation_timestamp_update value
\& my $value = $object\->override_ddns_force_creation_timestamp_update();
\&
\& #Modify override_ddns_force_creation_timestamp_update value
\& $object\->override_ddns_force_creation_timestamp_update("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_patterns_restriction( )"
.IX Subsection "override_ddns_patterns_restriction( )"
.RS 4
The override_ddns_patterns_restriction attribute controls whether the ddns_restrict_patterns_list and ddns_restrict_patterns methods values of the \s-1DNS\s0 Zone are used, instead of the Grid default.
.Sp
The override_ddns_patterns_restriction attribute can be specified explicitly. It is also set implicitly when ddns_restrict_patterns_list or ddns_restrict_patterns is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for ddns_restrict_patterns_list and ddns_restrict_patterns. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for ddns_restrict_patterns_list and ddns_restrict_patterns.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_ddns_patterns_restriction
\& my $override_ddns_patterns_restriction = $zone\->override_ddns_patterns_restriction();
\& #Modify override_ddns_patterns_restriction
\& $zone\->override_ddns_patterns_restriction("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_restrict_static( )"
.IX Subsection "override_ddns_restrict_static( )"
.RS 4
The override_ddns_restrict_static attribute controls whether the ddns_restrict_static method value of the \s-1DNS\s0 Zone is used, instead of the Grid default.
.Sp
The override_ddns_restrict_static attribute can be specified explicitly. It is also set implicitly when ddns_restrict_static is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for ddns_restrict_static. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for ddns_restrict_static.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_ddns_restrict_static
\& my $override_ddns_restrict_static = $zone\->override_ddns_restrict_static();
\& #Modify override_ddns_restrict_static
\& $zone\->override_ddns_restrict_static("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_restrict_protected( )"
.IX Subsection "override_ddns_restrict_protected( )"
.RS 4
The override_ddns_restrict_protected attribute controls whether the ddns_restrict_protected method value of the \s-1DNS\s0 Zone is used, instead of the Grid default.
.Sp
The override_ddns_restrict_protected attribute can be specified explicitly. It is also set implicitly when ddns_restrict_protected is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for ddns_restrict_protected. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for ddns_restrict_protected.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_ddns_restrict_protected
\& my $override_ddns_restrict_protected = $zone\->override_ddns_restrict_protected();
\& #Modify override_ddns_restrict_protected
\& $zone\->override_ddns_restrict_protected("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_principal_security( )"
.IX Subsection "override_ddns_principal_security( )"
.RS 4
The override_ddns_principal_security attribute controls whether the ddns_restrict_secure, ddns_principal_tracking and ddns_principal_group methods values of the \s-1DNS\s0 Zone are used, instead of the Grid default.
.Sp
The override_ddns_principal_security attribute can be specified explicitly. It is also set implicitly when ddns_restrict_secure, ddns_principal_tracking or ddns_principal_group is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for ddns_restrict_secure, ddns_principal_tracking and ddns_principal_group. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for ddns_restrict_secure, ddns_principal_tracking and ddns_principal_group.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_ddns_principal_security
\& my $override_ddns_principal_security = $zone\->override_ddns_principal_security();
\& #Modify override_ddns_principal_security
\& $zone\->override_ddns_principal_security("true");
.Ve
.RE
.RS 4
.RE
.SS "override_delegated_ttl( )"
.IX Subsection "override_delegated_ttl( )"
.RS 4
Use this method to set or retrieve the override_delegated_ttl flag of a \s-1DNS\s0 zone.
.Sp
This flag indicates whether to override the \s-1TTL\s0 values of auto-generated \s-1NS\s0 and \s-1GLUE\s0 records for a delegated zone. If you set it to \*(L"true\*(R", then you must specify the 'delegated_ttl' value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to override the \s-1TTL\s0 values or \*(L"false\*(R" to have these records inherit the \s-1TTL\s0 values from their parent zone. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_delegated_ttl
\& my $override_delegated_ttl = $zone\->override_delegated_ttl();
\& #Modify override_delegated_ttl
\& $zone\->override_delegated_ttl("true");
.Ve
.RE
.RS 4
.RE
.SS "override_grid_zone_timer( )"
.IX Subsection "override_grid_zone_timer( )"
.RS 4
Use this method to set or retrieve the override_grid_zone_timer flag of a \s-1DNS\s0 zone.
.Sp
This flag indicates whether to override the grid's zone timer settings. If you set it to \*(L"true\*(R", then you must specify the following properties: soa_refresh, soa_retry, soa_expire, soa_default_ttl, soa_negative_ttl.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to override grid zone timer settings or \*(L"false\*(R" to use the grid zone timer settings. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_grid_zone_timer
\& my $override_grid_zone_timer = $zone\->override_grid_zone_timer();
\& #Modify override_grid_zone_timer
\& $zone\->override_grid_zone_timer("true");
.Ve
.RE
.RS 4
.RE
.SS "override_grid_email( )"
.IX Subsection "override_grid_email( )"
.RS 4
Use this method to set or retrieve the override_grid_email flag of a \s-1DNS\s0 zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to override grid e\-mail settings or \*(L"false\*(R" to use the grid e\-mail settings. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_grid_email
\& my $override_grid_email = $zone\->override_grid_email();
\& #Modify override_grid_email
\& $zone\->override_grid_email("false");
.Ve
.RE
.RS 4
.RE
.SS "override_scavenging_settings( )"
.IX Subsection "override_scavenging_settings( )"
.RS 4
The override_scavenging_settings attribute controls whether the scavenging_settings method values of the \s-1DNS\s0 Zone are used, instead of the Grid default.
.Sp
The override_scavenging_settings attribute can be specified explicitly. It is also set implicitly when scavenging_settings is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for scavenging_settings. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for scavenging_settings.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get override_scavenging_settings value
\& my $override_scavenging_settings = $object\->override_scavenging_settings( );
\&
\& #Modify override_scavenging_settings value
\& $object\->override_scavenging_settings("true");
.Ve
.RE
.RS 4
.RE
.SS "override_rpz_drop_ip_rule( )"
.IX Subsection "override_rpz_drop_ip_rule( )"
.RS 4
The override_rpz_drop_ip_rule attribute controls whether the rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 method values of the member are used, instead of the Grid default.
.Sp
The override_rpz_drop_ip_rule attribute can be specified explicitly. It is also set implicitly when one of rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 or rpz_drop_ip_rule_min_prefix_length_ipv6 methods is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 methods. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 methods.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_rpz_drop_ip_rule
\&    my $override_rpz_drop_ip_rule = $zone\->override_rpz_drop_ip_rule( );
\&    #Modifying override_rpz_drop_ip_rule
\&    $zone\->override_rpz_drop_ip_rule("true");
.Ve
.RE
.RS 4
.RE
.SS "override_serial_number( )"
.IX Subsection "override_serial_number( )"
.RS 4
Use this method to set the override_serial_number flag of a \s-1DNS\s0 zone.
.Sp
If set this flag to 'true', soa_serial_number can be set. This value behaves somewhat unusually in that the server always resets it to undef in the response, even if it is true in the request.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to override serial number. The default value is undef
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_serial_number
\& my $override_serial_number = $zone\->override_serial_number();
\& #Modify override_serial_number
\& $zone\->override_serial_number("true");
.Ve
.RE
.RS 4
.RE
.SS "prefix( )"
.IX Subsection "prefix( )"
.RS 4
Use this method to set or retrieve the prefix flag of a \s-1DNS\s0 zone.
.Sp
Use this method only when the netmask is greater than 24 bits; that is, for a mask between 25 and 31 bits. Enter a prefix, such as the name of the allocated address block. The prefix can be alphanumeric characters; for example: 128/26 , 128\-189 , or sub-B . This is only valid for authoritative reverse zones.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
This prefix can be anything such as the address range (examples: 0\-127, 0/127) or descriptions (examples: first-network, customer1).A prefix can have a maximum of 63 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get prefix
\& my $prefix = $zone\->prefix();
\& #Modify prefix
\& $zone\->prefix("first\-network");
.Ve
.RE
.RS 4
.RE
.SS "multiple_primaries( )"
.IX Subsection "multiple_primaries( )"
.RS 4
Use this method to set or retrieve the primary flag of a \s-1DNS\s0 zone.
.Sp
This method specifies Grid primary servers, external primary servers, or Microsoft \s-1DNS\s0 servers that are primary servers for the zone. Although a zone typically has just one primary name server, you can specify up to ten independent servers for a single zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DNS::Member objects for Grid primary servers, or Infoblox::DNS::Nameserver objects for external primary servers, or Infoblox::DNS::MSServer objects for Microsoft \s-1DNS\s0 servers. The default value is undefined.
.Sp
To set two and more Infoblox::DNS::Member objects you should set the is_multimaster flag to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Get multiple_primaries
\& my $multiple_primaries = $zone\->multiple_primaries();
\& #Modify multiple_primaries
\& my $memberns1 = Infoblox::DNS::Member\->new(
\&        name     => "member1.server.com",
\&        ipv4addr => "1.1.1.1",
\&    );
\&
\& $zone\->multiple_primaries([$memberns1]);
.Ve
.RE
.RS 4
.RE
.SS "primary_shared_with_ms_parent_delegation( )"
.IX Subsection "primary_shared_with_ms_parent_delegation( )"
.RS 4
Use this method to retrieve the primary_shared_with_ms_parent_delegation flag. If the zone is a subzone and the primary server of the parent zone is a Microsoft server, it will be set to \*(L"true\*(R" if the \s-1FQDN\s0 and \s-1IP\s0 address in the delegation zone's \s-1NS\s0 record matches the \s-1FQDN\s0 and \s-1IP\s0 address of the authoritative name server of the zone.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get primary_shared_with_ms_parent_delegation
\& my $primary_shared_with_ms_parent_delegation = $member\->primary_shared_with_ms_parent_delegation();
.Ve
.RE
.RS 4
.RE
.SS "scavenging_settings( )"
.IX Subsection "scavenging_settings( )"
.RS 4
Use this method to set or retrieve the zone-level scavenging settings.
.Sp
Setting this parameter implicitle sets the override_scavenging_settings attribute to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid-level settings and automatically sets the override_scavenging_settings attribute to \*(L"false\*(R".
.Sp
Note that when scavenging_settings is set and override_scavenging_settings is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->scavenging_settings($recl_settings); \f(CW$object\fR\->override_scavenging_settings(\*(L"false\*(R"); sets override_scavenging_settings to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_scavenging_settings(\*(L"false\*(R"); \f(CW$object\fR\->scavenging_settings($recl_settings); sets override_scavenging_settings to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::ScavengingSetting object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get scavenging_settings value
\& my $scavenging_settings = $object\->scavenging_settings();
\&
\& #Modify scavenging_settings value
\& $object\->scavenging_settings($scavenging_settings);
.Ve
.RE
.RS 4
.RE
.SS "remove_sub_zones( )"
.IX Subsection "remove_sub_zones( )"
.RS 4
Use this method to set or retrieve the remove_sub_zones flag of a \s-1DNS\s0 zone.
.Sp
You can remove the sub-zones and resource records of the selected zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to remove sub zones or \*(L"false\*(R" to not to remove sub zones. The default value is undefined, which is to remove all subzones.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get remove_sub_zones
\& my $remove_sub_zones = $zone\->remove_sub_zones();
\& #Modify remove_sub_zones
\& $zone\->remove_sub_zones("true");
.Ve
.RE
.RS 4
.RE
.SS "secondaries( )"
.IX Subsection "secondaries( )"
.RS 4
Use this method to set or retrieve the secondaries flag of a \s-1DNS\s0 zone.
.Sp
You can specify grid secondary servers, external secondary servers, or Microsoft \s-1DNS\s0 servers that are secondary servers for the zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DNS::Member objects for grid secondary servers, Infoblox::DNS::Nameserver objects for external secondary servers, and Infoblox::DNS::MSServer objects for Microsoft \s-1DNS\s0 servers. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Get secondaries
\& my $secondaries = $zone\->secondaries();
\& #Modify secondaries
\& my $memberns1 = Infoblox::DNS::Member\->new(
\&        name     => "member1.server.com",
\&        ipv4addr => "1.1.1.1",
\&    );
\&
\& my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&        name     => "ns1.exter.com",
\&        ipv4addr => "11.11.11.11",
\&    );
\&
\& $zone\->secondaries([$memberns1, $nameserver1]);
.Ve
.RE
.RS 4
.RE
.SS "resource_record_monitored_since( )"
.IX Subsection "resource_record_monitored_since( )"
.RS 4
Use this method to retrieve the time data collection for \*(L"\s-1DNS\s0 Resource Records Last Queried\*(R" was turned on for the zone.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value, the number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get resource_record_monitored_since
\& my $resource_record_monitored_since = $zone\->resource_record_monitored_since();
.Ve
.RE
.RS 4
.RE
.SS "soa_default_ttl( )"
.IX Subsection "soa_default_ttl( )"
.RS 4
Use this method to set or retrieve the soa_default_ttl flag of a \s-1DNS\s0 zone.
.Sp
You can set the Time to Live (\s-1TTL\s0) value of the \s-1SOA\s0 record of a zone. This value is the number of seconds that data is cached.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the soa_default_ttl in seconds. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get soa_default_ttl
\& my $soa_default_ttl = $zone\->soa_default_ttl();
\& #Modify soa_default_ttl
\& $zone\->soa_default_ttl("3600");
.Ve
.RE
.RS 4
.RE
.SS "soa_expire( )"
.IX Subsection "soa_expire( )"
.RS 4
Use this method to set or retrieve the soa_expire flag of a \s-1DNS\s0 zone.
.Sp
This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about the zone because the zone data is too old to be useful. The default is one week.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the soa_expire in seconds. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get soa_expire
\& my $soa_expire = $zone\->soa_expire();
\& #Modify soa_expire
\& $zone\->soa_expire("3600");
.Ve
.RE
.RS 4
.RE
.SS "soa_mname( )"
.IX Subsection "soa_mname( )"
.RS 4
Use this method to set or retrieve the soa_mname flag of a \s-1DNS\s0 zone.
.Sp
The Infoblox appliance allows you to change the name of the primary server on the \s-1SOA\s0 record that is automatically created when you initially configure a zone. Use this method to change the name of the primary server on the \s-1SOA\s0 record. For example, you may want to hide the primary server for a zone. If your device is named dns1.zone.tld, and for security reasons, you want to show a secondary server called dns2.zone.tld as the primary server. To do so, you would go to dns1.zone.tld zone (being the true primary) and change the primary server on the \s-1SOA\s0 to dns2.zone.tld to hide the true identity of the real primary server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Primary server name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get soa_mname
\& my $soa_mname = $zone\->soa_mname();
\& #Modify soa_mname
\& $zone\->soa_mname("soamname.com");
.Ve
.RE
.RS 4
.RE
.SS "soa_negative_ttl( )"
.IX Subsection "soa_negative_ttl( )"
.RS 4
Use this method to set or retrieve the soa_negative_ttl flag of a \s-1DNS\s0 zone.
.Sp
The negative Time to Live (\s-1TTL\s0) value of the \s-1SOA\s0 of the zone indicates how long  a secondary server can cache data for \*(L"Does Not Respond\*(R" responses.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the soa_negative_ttl in seconds. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get soa_negative_ttl
\& my $soa_negative_ttl = $zone\->soa_negative_ttl();
\& #Modify soa_negative_ttl
\& $zone\->soa_negative_ttl("3600");
.Ve
.RE
.RS 4
.RE
.SS "soa_refresh( )"
.IX Subsection "soa_refresh( )"
.RS 4
Use this method to set or retrieve the soa_refresh flag of a \s-1DNS\s0 zone.
.Sp
This indicates the interval at which a secondary server sends a message to the primary server for a zone to check that its data is current, and retrieve fresh data if it is not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the soa_refresh in seconds. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get soa_refresh
\& my $soa_refresh = $zone\->soa_refresh();
\& #Modify soa_refresh
\& $zone\->soa_refresh("1000");
.Ve
.RE
.RS 4
.RE
.SS "soa_retry( )"
.IX Subsection "soa_retry( )"
.RS 4
Use this method to set or retrieve the soa_retry flag of a \s-1DNS\s0 zone.
.Sp
This indicates how long a secondary server must wait before attempting to recontact the primary server after a connection failure between the two servers occurs.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the soa_retry in seconds. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get soa_retry
\& my $soa_retry = $zone\->soa_retry();
\& #Modify soa_retry
\& $zone\->soa_retry("1000");
.Ve
.RE
.RS 4
.RE
.SS "soa_serial_number( )"
.IX Subsection "soa_serial_number( )"
.RS 4
Use this method to set or retrieve the soa_serial_number flag of a \s-1DNS\s0 zone.
.Sp
The serial number in the \s-1SOA\s0 record incrementally changes every time the record is modified. The Infoblox appliance allows you to change the serial number (in the \s-1SOA\s0 record) for the primary server so it is higher than the secondary server, thereby ensuring zone transfers come from the primary server (as they should).
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the soa serial number. The default value is 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get soa_serial_number
\& my $soa_serial_number = $zone\->soa_serial_number();
\& #Modify soa_serial_number
\& $zone\->soa_serial_number("222222");
.Ve
.RE
.RS 4
.RE
.SS "shared_record_groups( )"
.IX Subsection "shared_record_groups( )"
.RS 4
Use this method to set or retrieve the associated shared record groups of a \s-1DNS\s0 zone.
.Sp
If a shared record group is associated with a zone, then all shared records in a shared record group will be shared in the zone. For more information about shared record groups and shared records, please refer to Infoblox Administrator Guide.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference containing the name of shared record groups associated with this zone. The name of shared record group is in string format. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Get shared record groups
\& my $srgs = $zone\->shared_record_groups();
\& #Modify shared record groups. Assume "test_srg" and "another_srg" are the name
\& #of already defined shared record groups.
\& $zone\->shared_record_groups(["test_srg", "another_srg"]);
.Ve
.RE
.RS 4
.RE
.SS "stub_external_ns_group( )"
.IX Subsection "stub_external_ns_group( )"
.RS 4
Use this method to set or retrieve the external nameservers group name for stub \s-1DNS\s0 zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired external name servers group name in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct external nameserver
\& my $ns1 = Infoblox::DNS::Nameserver\->new(
\&     name     => \*(Aqns1.domain0.extra\*(Aq,
\&     ipv4addr => \*(Aq5.5.5.5\*(Aq,
\& );
\&
\& #Construct external nameservers group
\& my $ext = Infoblox::DNS::Nsgroup::ForwardStubServer\->new(
\&     name             => \*(Aqextsrvg1\*(Aq,
\&     external_servers => [$ns1],
\& );
\&
\& #Submit created stub_external nameservers group to session
\& $session\->add($ext);
\&
\& #Get stub_external_ns_group value
\& my $stub_external_ns_group = $zone\->stub_external_ns_group();
\&
\& #Modify stub_external_ns_group value
\& $zone\->stub_external_ns_group(\*(Aqextsrvg1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "stub_from( )"
.IX Subsection "stub_from( )"
.RS 4
Use this method to set or retrieve the stub_from servers of a \s-1DNS\s0 zone.
.Sp
This method specifies the primary servers (masters) of the stub zone.
.Sp
User can also specify grid member server IP/name pair in this list of primary servers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DNS::Nameserver object(s). The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get stub_from
\& my $stub_from = $zone\->stub_from();
\& #Modify stub_from
\& my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&        name     => "ns1.stub.com",
\&        ipv4addr => "11.11.11.11",
\&    );
\& my $nameserver2 = Infoblox::DNS::Nameserver\->new(
\&        name     => "test",
\&        ipv4addr => "2006::b671",
\&    );
\& #Specify a grid member server IP and name
\& my $nameserver3 = Infoblox::DNS::Nameserver\->new(
\&        name     => "ns.member.com",
\&        ipv4addr => "192.168.1.2",
\&    );
\& $zone\->stub_from([$nameserver1, $nameserver2, $nameserver3]);
.Ve
.RE
.RS 4
.RE
.SS "stub_members( )"
.IX Subsection "stub_members( )"
.RS 4
Use this method to set or retrieve the stub_members flag of a \s-1DNS\s0 zone.
.Sp
This method specifies the grid member or Microsoft \s-1DNS\s0 servers of the stub zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DNS::Member object(s) for grid \s-1DNS\s0 servers and Infoblox::DNS::MSServer object(s) for Microsoft \s-1DNS\s0 Servers. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Get stub_members
\& my $stub_members = $zone\->stub_members();
\& #Modify stub_members
\& my $memberns1 = Infoblox::DNS::Member\->new(
\&        name     => "member1.stub.com",
\&        ipv4addr => "3.3.3.3",
\&    );
\&
\& my $memberns2 = Infoblox::DNS::Member\->new(
\&        name     => "member2.stub.com",
\&        ipv4addr => "4.4.4.4",
\&    );
\&
\& $zone\->stub_members([$memberns1,$memberns2 ]);
.Ve
.RE
.RS 4
.RE
.SS "stub_ns_group( )"
.IX Subsection "stub_ns_group( )"
.RS 4
Use this method to set or retrieve the name servers group for the Stub \s-1DNS\s0 Zone object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are string that contains name of the group or Infoblox::Grid::DNS::Nsgroup::StubMember.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Create stub nameservers group
\& my $stub_group = Infoblox::Grid::DNS::StubMember\->new(
\&     name         => \*(Aqstub_ns_group_A\*(Aq,
\&     stub_members => [\*(Aqinfoblox.localdomain\*(Aq],
\& );
\&
\& #Submit created stub nameserver group to session
\& $session\->add($stub_group);
\&
\& #Get stub_ns_group
\& my $stub_ns_group = $zone\->stub_ns_group();
\&
\& #Modify stub_ns_group
\& $zone\->stub_ns_group(\*(Aqstub_ns_group_A\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to set or retrieve the views flag of a \s-1DNS\s0 zone.
.Sp
You can list the views in which the zone is located.
.Sp
When the \fBms_managed()\fR flag is not None, the method is limited to retrieving the list of \s-1DNS\s0 views only. Setting the \s-1DNS\s0 view of a zone served by a Microsoft \s-1DNS\s0 server is done from the Microsoft server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains the Infoblox::DNS::View object. The default value is the \*(L"default\*(R" view.
.Sp
Note that the array size must be 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get views
\& my $views = $zone\->views();
\& #Modify views
\& my $internal_view = Infoblox::DNS::View\->new(
\&                "name"    => "internal",
\&                "comment" => "insert internal",
\&                "disable" => "false",
\&                );
\&
\& $zone\->views([$internal_view]);
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the parent zone value of a \s-1DNS\s0 zone. A parent zone can be of any type, except that a delegated child zone can not have a parent zone of delegated type. The zone name can be empty.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get zone
\& my $zone1 = $zone\->zone();
.Ve
.RE
.RS 4
.RE
.SS "zone_monitored_since( )"
.IX Subsection "zone_monitored_since( )"
.RS 4
Use this method to retrieve the time data collection for \*(L"\s-1DNS\s0 Zones Last Queried\*(R" was turned on for the zone.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value, the number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get zone_monitored_since
\& my $zone_monitored_since = $zone\->zone_monitored_since();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a zone object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $host_ip =  "192.168.1.2";
\& my $session = Infoblox::Session\->new(
\&     master   => $host_ip,
\&     username => "admin",
\&     password => "infoblox"
\&     );
\& unless($session){
\&         die("Constructor for session failed: ",
\&                Infoblox::status_code(). ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully.\en";
.Ve
.PP
\&\fB#Create a \s-1DNS\s0 zone.\fR
.PP
.Vb 6
\& my $memberns1 = Infoblox::DNS::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => $host_ip,
\&     lead     => "false",
\&     stealth  => "false"
\& );
\&
\& my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns1.test.com",
\&     ipv4addr => "1.1.1.1",
\&     stealth  => "false",
\&     TSIGname => "tsig_name",
\&     TSIGkey  => "ZX1jVJl7C58GT/sc7Q3ucA==",
\& );
\&
\& my $nameserver2 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns2.test.com",
\&     ipv4addr => "2.2.2.2",
\&     stealth  => "false",
\&     TSIGname => "tsig_name2",
\&     TSIGkey  => "qwqwqwqwqwqwqwqwqwqwqA==",
\& );
\&
\& my $default_view = Infoblox::DNS::View\->new(name => "default");
\&
\& #To add zone test.com in the default view
\& my $firstzone = Infoblox::DNS::Zone\->new(
\&     name        => "test.com",
\&     views       => [$default_view],
\&     email       => "admin\e@infoblox.com",
\&     comment     => "add a zone test.com",
\&     multiple_primaries => [$memberns1],
\&     secondaries => [$nameserver1, $nameserver2],
\&     );
\&
\& unless($firstzone){
\&        die("Construct test.com zone object failed: ",
\&                Infoblox::status_code(). ":" .Infoblox::status_detail());
\&        }
\& print "test.com zone object created successfully.\en";
\&
\& $session\->add($firstzone)
\&     or die("Add zone for test.com failed: ",
\&                $session\->status_code(). ":" .$session\->status_detail());
\&
\& print"Zone test.com added successfully.\en";
\&
\& #Create a reverse zone.
\& my $revzone1 = Infoblox::DNS::Zone\->new(
\&     name    => "10.1.4.0/24",
\&     email   => "admin\e@infoblox.com",
\&     comment => "add a zone 4.168.192.in\-addr.arpa",
\&     multiple_primaries => [$memberns1],
\&     );
\&
\& unless($revzone1){
\&      die("Constructor for zone 4.1.10.in\-addr.arpa failed: ",
\&                 Infoblox::status_code(). ":" .Infoblox::status_detail());
\&        }
\& print "4.1.10.in\-addr.arpa zone object created successfully.\en";
\&
\& $session\->add($revzone1)
\&     or die("Add zone for 4.1.10.in\-addr.arpa failed: ",
\&                 $session\->status_code(). ":" .$session\->status_detail());
\&
\& print"Zone 4.1.10.in\-addr.arpa added successfully.\en";
\&
\& #Create a reverse zone with a prefix.
\& my $revzone2 = Infoblox::DNS::Zone\->new(
\&     name    => "10.168.192.in\-addr.arpa",
\&     email   => "admin\e@infoblox.com",
\&     comment => "add a zone 0\-63.10.168.192.in\-addr.arpa",
\&     prefix  => "0\-63",
\&     );
\&
\& unless($revzone2){
\&         die("Constructor for zone 0\-63.10.168.192.in\-addr.arpa failed: ",
\&                Infoblox::status_code(). ":" .Infoblox::status_detail());
\&        }
\& print "0\-63.10.168.192.in\-addr.arpa zone object created successfully.\en";
\&
\& $session\->add($revzone2)
\&     or die("Add zone for 0\-63.10.168.192.in\-addr.arpa failed: ",
\&                $session\->status_code(). ":" .$session\->status_detail());
\&
\& print"Zone 0\-63.10.168.192.in\-addr.arpa added successfully.\en";
.Ve
.PP
\&\fB#Search for a specific \s-1DNS\s0 zone\fR
.PP
.Vb 5
\& #Searches zones that ends with com
\& my @search_result = $session\->search(
\&     object => "Infoblox::DNS::Zone",
\&     name   => ".*\e\e.com"
\& );
\&
\& my $search_obj = $search_result[0];
\& unless($search_obj){
\&        die("Search zone failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&        }
\&
\& print "Search zone object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DNS\s0 zone\fR
.PP
.Vb 12
\& #Get zone test.com through session
\& my @result_array = $session\->get(
\&     object => "Infoblox::DNS::Zone",
\&     name   => "test.com",
\&     view   => "default"
\& );
\& my $for_obj = $result_array[0];
\& unless($for_obj){
\&        die("Get zone test.com failed: ",
\&        $session\->status_code() . ":" . $session\->status_detail());
\&        }
\& print "Get test.com zone object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified zone
\& $for_obj\->comment("this is a modified comment.");
\&
\& #Apply the change
\&     $session\->modify($result_array[0])
\&         or die("Modify zone for test.com failed: ",
\&                $session\->status_code(). ":" .$session\->status_detail());
\&
\&  print "test.com zone object modified successfully.\en";
\&
\& #Get and modify zone 4.1.10.in\-addr.arpa.
\& my @result = $session\->get(
\&     object => "Infoblox::DNS::Zone",
\&     name   => "4.1.10.in\-addr.arpa"
\& );
\&
\& my $rev_object = $result[0];
\& unless ($rev_object) {
\&        die("Get zone 4.1.10.in\-addr.arpa failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&        }
\& print "Get 4.1.10.in\-addr.arpa zone object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified zoe
\& $rev_object\->secondaries([$nameserver2]);
\&
\& #Apply the changes
\& $session\->modify($rev_object)
\&             or die("Modify reverse zone 4.1.10.in\-addr.arpa failed: ",
\&                        $session\->status_code(). ":" .$session\->status_detail());
\&
\& print "4.1.10.in\-addr.arpa zone object modified successfully.\en";
.Ve
.PP
\&\fB#Remove a \s-1DNS\s0 zone \fR
.PP
.Vb 8
\& #Remove zone test.com from a view.
\& $session\->remove(
\&     object => "Infoblox::DNS::Zone",
\&     name   => "test.com",
\&     views  => [$default_view]
\&     )
\&     or die("Remove zone test.com failed: ",
\&              $session\->status_code(). ":" .$session\->status_detail());
\&
\& print "Remove zone test.com successfull\en";
\&
\& #Remove zone 4.1.10.in\-addr.arpa from a view.
\& $session\->remove(
\&     object => "Infoblox::DNS::Zone",
\&     name   => "4.1.10.in\-addr.arpa",
\&     views  => [$default_view]
\&     )
\&     or die("Remove zone 4.1.10.in\-addr.arpa failed: ",
\&              $session\->status_code(). ":" .$session\->status_detail());
\&
\& print "Remove zone 4.1.10.in\-addr.arpa successfull\en";
\&
\& #Remove zone with prefix from a view.
\& $session\->remove(
\&     object => "Infoblox::DNS::Zone",
\&     name    => "10.168.192.in\-addr.arpa",
\&     prefix  => "0\-63",
\&    )
\&    or die("Remove zone 0\-63.10.168.192.in\-addr.arpa failed: ",
\&              $session\->status_code(). ":" .$session\->status_detail());
\&
\& print "Remove zone 0\-63.10.168.192.in\-addr.arpa successfull\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::Member, 
Infoblox::DNS::Nameserver, 
Infoblox::DNS::SRG,
Infoblox::DNS::TSIGKey, 
Infoblox::DNS::View, 
Infoblox::Session,
Infoblox::Session\->\fBadd()\fR,
Infoblox::Session\->\fBget()\fR,
Infoblox::Session\->\fBmodify()\fR,
Infoblox::Session\->\fBremove()\fR,
Infoblox::Session\->\fBsearch()\fR, 
Infoblox::DNS::Member::SoaSerial, 
Infoblox::DNS::Member::Mname, 
Infoblox::DNS::DNSSecKeyAlgorithm, 
Infoblox::Grid::MSServer::DCNSRecordCreation,
Infoblox::Grid::DNS::Nsgroup,
Infoblox::Grid::DNS::Nsgroup,
Infoblox::Grid::DNS::Nsgroup,
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
