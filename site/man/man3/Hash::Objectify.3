.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Hash::Objectify 3"
.TH Hash::Objectify 3 "2016-09-24" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Hash::Objectify \- Create objects from hashes on the fly
.SH "VERSION"
.IX Header "VERSION"
version 0.008
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Hash::Objectify;
\&
\&  # turn a hash reference into an object with accessors
\&
\&  $object = objectify { foo => \*(Aqbar\*(Aq, wibble => \*(Aqwobble\*(Aq };
\&  print $object\->foo;
\&
\&  # objectify with a specific class name
\&
\&  $object = objectify { foo => \*(Aqbar\*(Aq }, "Foo::Response";
\&  print ref $object; # "Foo::Response"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Hash::Objectify turns a hash reference into a simple object with accessors
for each of the keys.
.PP
One application of this module could be to create lightweight response
objects without the extra work of setting up an entire response class with
the framework of your choice.
.PP
Using Hash::Objectify is slower than accessing the keys of the hash
directly, but does provide \*(L"typo protection\*(R" since a misspelled method is
an error.
.SH "USAGE"
.IX Header "USAGE"
By default, the \f(CW\*(C`objectify\*(C'\fR function is automatically exported.
.SS "objectify"
.IX Subsection "objectify"
.Vb 2
\&  $object = objectify $hashref
\&  $object = objectify $hashref, $classname;
\&
\&  $object\->$key;          # accessor
\&  $object\->$key($value);  # mutator
.Ve
.PP
The \f(CW\*(C`objectify\*(C'\fR function copies the hash reference (shallow copy), and
blesses it into the given classname.  If no classname is given, a
meaningless, generated package name is used instead.  In either case, the
object will inherit from the Hash::Objectified class, which generates
accessors on demand for any key in the hash.
.PP
As an optimization, a generated classname will be the same for any given
\&\f(CW\*(C`objectify\*(C'\fR call if the keys of the input are the same.  (This avoids
excessive accessor generation.)
.PP
The first time a method is called on the object, an accessor will be
dynamically generated if the key exists.  If the key does not exist, an
exception is thrown.  Note: deleting a key \fIafter\fR calling it as an
accessor will not cause subsequent calls to throw an exception; the
accessor will merely return undef.
.PP
Objectifying with a \*(L"real\*(R" classname that does anything other than inherit
from Hash::Objectified may lead to surprising behaviors from method name
conflict.  You probably don't want to do that.
.PP
Objectifying anything other than an unblessed hash reference is an error.
This is true even for objects based on blessed hash references, since the
correct semantics are not universally obvious.  If you really want
Hash::Objectify for access to the keys of a blessed hash, you should make
an explicit, shallow copy:
.PP
.Vb 1
\&  my $copy = objectify {%$object};
.Ve
.SS "objectify_lax"
.IX Subsection "objectify_lax"
.Vb 2
\&  $object = objectify_lax { foo => \*(Aqbar\*(Aq };
\&  $object\->quux; # not fatal
.Ve
.PP
This works just like \*(L"objectify\*(R", except that non-existing keys return
\&\f(CW\*(C`undef\*(C'\fR instead of throwing exceptions.  Non-existing keys will still
return \f(CW\*(C`undef\*(C'\fR if checked with \f(CW\*(C`can\*(C'\fR.
.PP
\&\fB\s-1WARNING\s0\fR: having an object that doesn't throw on unknown methods violates
object-oriented behavior expectations so is generally a bad idea.  If you
really feel you need this, be aware that the safety guard is removed and
you might lose a finger.
.PP
If called with an existing non-lax objectified package name, the behavior
of accessors not yet called with change to become lax.  You probably don't
want to do that.
.SH "CAVEATS"
.IX Header "CAVEATS"
If an objectified hashref contains keys that conflict with existing
resolvable methods (e.g. \f(CW\*(C`can\*(C'\fR, \f(CW\*(C`AUTOLOAD\*(C'\fR, \f(CW\*(C`DESTROY\*(C'\fR), you won't be
able to access those keys via a method as the existing methods take
precedence.
.PP
Specifying custom package names or manipulating \f(CW@ISA\fR for objectified
packages (including subclassing) is likely to lead to surprising behavior.
It is not recommended and is not supported.  If it breaks, you get to keep
the pieces.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker
at <https://github.com/dagolden/Hash\-Objectify/issues>.
You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software.  The code repository is available for
public review and contribution under the terms of the license.
.PP
<https://github.com/dagolden/Hash\-Objectify>
.PP
.Vb 1
\&  git clone https://github.com/dagolden/Hash\-Objectify.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
David Golden <dagolden@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2012 by David Golden.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
