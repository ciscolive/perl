.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Path::Dispatcher::Cookbook 3"
.TH Path::Dispatcher::Cookbook 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Path::Dispatcher::Cookbook \- A cookbook for Path::Dispatcher
.SH "VERSION"
.IX Header "VERSION"
version 1.08
.SH "NAME"
Path::Dispatcher::Cookbook \- A cookbook for Path::Dispatcher
.SH "RECIPES"
.IX Header "RECIPES"
.SS "How can I change the path delimiter from a space ' ' to a slash '/'?"
.IX Subsection "How can I change the path delimiter from a space ' ' to a slash '/'?"
When importing the Path::Dispatcher::Declarative sugar, specify the
\&\f(CW\*(C`token_delimiter\*(C'\fR option for the \f(CW\*(C`default\*(C'\fR group.
.PP
.Vb 4
\&    package My::Dispatcher;
\&    use Path::Dispatcher::Declarative \-base, \-default => {
\&        token_delimiter => \*(Aq/\*(Aq,
\&    };
.Ve
.PP
Or define a subclass of Path::Dispatcher::Declarative with a
\&\f(CW\*(C`token_delimiter\*(C'\fR method:
.PP
.Vb 2
\&    package Web::Dispatcher::Maker;
\&    use base \*(AqPath::Dispatcher::Declarative\*(Aq;
\&
\&    use constant token_delimiter => \*(Aq/\*(Aq;
\&
\&
\&    package My::Dispatcher;
\&    use Web::Dispatcher::Maker \-base;
.Ve
.SS "How can I do rule chaining (like in Catalyst)?"
.IX Subsection "How can I do rule chaining (like in Catalyst)?"
You can use a \f(CW\*(C`chain\*(C'\fR rule approximate chaining behavior:
.PP
.Vb 2
\&    package MyDispatcher;
\&    use Path::Dispatcher::Declarative \-base;
\&
\&    under show => sub {
\&        chain {
\&            print "Displaying ";
\&        };
\&        on inventory => sub {
\&            print "inventory:\en";
\&            ...
\&        };
\&        on score => sub {
\&            print "score:\en";
\&            ...
\&        };
\&    };
\&
\&    package main;
\&
\&    MyDispatcher\->run("show inventory"); # "Displaying inventory:\en ..."
\&
\&    MyDispatcher\->run("show score"); # "Displaying score:\en ..."
.Ve
.SS "How can I configure tab completion for shells?"
.IX Subsection "How can I configure tab completion for shells?"
First add a dispatcher rule for generating completions based on the path. Here
we name it _gencomp, so that if the user types \*(L"app _gencomp hel\*(R" it will print
out the various completions of \*(L"hel\*(R".
.PP
.Vb 5
\&    on qr/^_gencomp\es*(.*)/ => sub {
\&        my $prefix = shift\->pos(1);
\&        $prefix = "" if !defined($prefix);
\&        print "$_\en" for dispatcher\->complete($prefix);
\&    };
.Ve
.PP
Then tell your shell about how to use _gencomp. For zsh it might look
like this (replace \*(L"\s-1APP\*(R"\s0 with your binary name):
.PP
.Vb 5
\&    /usr/share/zsh/site\-functions/_APP:
\&        #compdef APP
\&        typeset \-a APP_completions
\&        APP_completions=($($words[1] _gencomp $words[2,\-1]))
\&        compadd $APP_completions
.Ve
.PP
For bash it might look like this:
.PP
.Vb 5
\&    /etc/bash_completion.d/APP.bash:
\&        function _APP_()
\&        {
\&            COMPREPLY=($($1 _gencomp ${COMP_WORDS[COMP_CWORD]}))
\&        }
\&
\&        complete \-F _APP_ APP
.Ve
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through the \s-1RT\s0 bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=Path-Dispatcher>
(or bug\-Path\-Dispatcher@rt.cpan.org <mailto:bug-Path-Dispatcher@rt.cpan.org>).
.SH "AUTHOR"
.IX Header "AUTHOR"
Shawn M Moore, \f(CW\*(C`<sartak at bestpractical.com>\*(C'\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Shawn M Moore.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
