.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Diff 3"
.TH Diff 3 "2007-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Diff \-\- XML DOM\-Tree based Diff & Patch Module
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $diff = XML::Diff\->new();
\&
\&  # to generate a diffgram of two XML files, use compare.
\&  # $old and $new can be filepaths, XML as a string,
\&  # XML::LibXML::Document or XML::LibXML::Element objects.
\&  # The diffgram is a XML::LibXML::Document by default.
\&  my $diffgram = $diff\->compare(
\&                                \-old => $old_xml,
\&                                \-new => $new_xml,
\&                               );
\&
\&  # To patch an XML document, an patch. $old and $diffgram
\&  # follow the same formatting rules as compare.
\&  # The resulting XML is a XML::LibXML::Document by default.
\&  my $patched = $diff\->patch(
\&                             \-old      => $old,
\&                             \-diffgram => $diffgram,
\&                            );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides methods for generating and applying an \s-1XML\s0
diffgram of two related \s-1XML\s0 files. The basis of the algorithm
is tree-wise comparison using the \s-1DOM\s0 model as provided by
XML::LibXML.
.PP
The Diffgram is well-formed \s-1XML\s0 in the \s-1XVCS\s0 namespance and
supports update, insert, delete and move operations. It is
meant to be human and machine readable. It uses XPath expressions
for locating the nodes to operate on. See the below \fB\s-1DIFFGRAM\s0\fR
section for the exact syntax.
.PP
The motivation and alogrithm used by this module is discussed in
\&\fB\s-1MOTIVATION\s0\fR below.
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.SS "new (Constructor)"
.IX Subsection "new (Constructor)"
The Constructor takes no arguments. It merely creates the object
for using the \fBcompare\fR and \fBpatch\fR methods on.
.SS "compare"
.IX Subsection "compare"
Compares two \s-1XML DOM\s0 trees and returns a diffgram for converting one
into the other. The default output method is a XML::LibXML::Document
object. However there are number of switches to alter this behavior.
.IP "\-old" 4
.IX Item "-old"
The old document to compare. Can be \s-1XML\s0 in a string, path to an
\&\s-1XML\s0 document, a XML::LibXML::Document or XML::LibXML::Element object
.IP "\-new" 4
.IX Item "-new"
The new document to compare. Can be \s-1XML\s0 in a string, path to an
\&\s-1XML\s0 document, a XML::LibXML::Document or XML::LibXML::Element object
.IP "\-asString" 4
.IX Item "-asString"
If provided, the diffgram is returned via the \fBtoString\fR\|(1) method
of XML::LibXML
.IP "\-asFile" 4
.IX Item "-asFile"
Must provide the filepath to write the diffgram to.
.SS "patch"
.IX Subsection "patch"
Applies a diffgram to an \s-1XML\s0 document to generate a new \s-1XML\s0 document.
The default output method is a XML::LibXML::Document object. However
there are number of switches to alter this behavior.
.IP "\-old" 4
.IX Item "-old"
The old document to compare. Can be \s-1XML\s0 in a string, path to an
\&\s-1XML\s0 document, a XML::LibXML::Document or XML::LibXML::Element object
.IP "\-diffgram" 4
.IX Item "-diffgram"
The diffgram to apply. Can be \s-1XML\s0 in a string, path to an
\&\s-1XML\s0 document, a XML::LibXML::Document or XML::LibXML::Element object
.IP "\-asString" 4
.IX Item "-asString"
If provided, the new document is returned via the \fBtoString\fR\|(1) method
of XML::LibXML
.IP "\-asFile" 4
.IX Item "-asFile"
Must provide the filepath to write the new document to.
.SH "DIFFGRAM"
.IX Header "DIFFGRAM"
The diffgram is an \s-1XML\s0 document in the xvcs namespace. It's root is always
\&\fIe<xvcs:diffgram xmlns:xvcs=\*(L"http://www.xvcs.org/\*(R"\fR>. Below diff operations
are attached in order of application. Order \fIis\fR significant, since the
way that nodes are idenitified in the default version of the diffgram is by
an XPath expression, i.e. the diffgram may change the \s-1XML\s0 document in such
a way that XPath expressions are either not yet valid or will not be anymore
at a later point the diffgram (see \fB\s-1KNOWN PROBLEMS\s0\fR for a discussion of this
limitation).
.PP
The supported diffgram operations are:
.SS "xcvs:update"
.IX Subsection "xcvs:update"
Update operations covers a number of sub-operations, i.e. it can be used
for Text node changes, attribute add, delete and modification. An example
of a Text Node change is:
.PP
.Vb 4
\&  <xvcs:update id="18" first\-child\-of="/root/block[2]/list/item[2]">
\&    <xvcs:old\-value>Old Value</xvcs:old\-value>
\&    <xvcs:new\-value>New Value</xvcs:new\-value>
\&  </xvcs:update>
.Ve
.PP
Attribute updates are:
.PP
.Vb 10
\&  <xvcs:update id="31" first\-child\-of="/root/block[5]">
\&    <xvcs:attr\-insert name="some_attribute" value="new value"/>
\&  </xvcs:update>
\&  <xvcs:update id="32" first\-child\-of="/root/block[6]">
\&    <xvcs:attr\-insert name="some_attribute2" value="old value"/>
\&  </xvcs:update>
\&  <xvcs:update id="33" first\-child\-of="/root/block[6]">
\&    <xvcs:attr\-update name="some_attribute3" 
\&      old\-value="old value" new\-value="new value/>
\&  </xvcs:update>
.Ve
.SS "xcvs:delete"
.IX Subsection "xcvs:delete"
.Vb 5
\&  <xvcs:delete id="29" follows="/root/block[3]">
\&    <block>
\&      <node>value</node>
\&    </block>
\&  </xvcs:delete>
.Ve
.SS "xcvs:move"
.IX Subsection "xcvs:move"
.Vb 3
\&  <xvcs:move id="11" follows="/root/block[1]">
\&    <xvcs:source first\-child\-of="/root"/>
\&  </xvcs:move>
.Ve
.SS "xcvs:insert"
.IX Subsection "xcvs:insert"
.Vb 5
\&  <xvcs:insert id="34" follows="/root/block[1]">
\&    <block>
\&      <node>value</node>
\&    </block>
\&  </xvcs:insert>
.Ve
.PP
All operations share the same attributes to identify the operation
.IP "id" 4
.IX Item "id"
The xvcs:id of the node affected (currently serves only internal uses)
.IP "follows" 4
.IX Item "follows"
The XPath to the prior sibling of the node affected. We use relative
identification since insert and move destination do not affect an
existing node location. The rest of the operations follow this methodology
for consistency and to allow simple reversing of an operation
.IP "first-child-of" 4
.IX Item "first-child-of"
If the XPath for the node does not have a prior sibling, we use the
XPath to the parent and note that our operation affects the first child
of that parent
.IP "text" 4
.IX Item "text"
Since XPath does not have an expression for locating a text node,
Nodes following Text nodes are identified by the XPath to the prior
sibling that is an Element and the text attribute to tell it to
skip the next text node before starting the operation
.SH "KNOWN PROBLEMS"
.IX Header "KNOWN PROBLEMS"
.IP "\(bu" 4
Does not handle any Node Types Other than Element, Attribute and Text
.IP "\(bu" 4
Diffgram operations are not guaranteed to be atomic
.IP "\(bu" 4
Delete Operations on Nodes between two Text nodes are not reversable
.SH "MOTIVATIONS"
.IX Header "MOTIVATIONS"
The Algorithm used in this Module is loosely based on the one described
by Gregory Cobena in his Doctoral Dissertation on XyDiff. The decision to
create a new implementation of this Algorithm rather than just create an
\&\s-1XS\s0 interface to the existing XyDiff algorithm was based on wanting a perl
implementation with less external dependencies and greater flexibility to
add divergent features (such as using XPath for node identitication rather
than XIDs).
.SH "PRIVATE METHODS"
.IX Header "PRIVATE METHODS"
This section is mostly for reference if you are going through the code,
it serves no purpose if you are just wanting to use the exposed interface
.SS "_getDoc"
.IX Subsection "_getDoc"
.SS "_buildTree"
.IX Subsection "_buildTree"
.SS "_weightmatch"
.IX Subsection "_weightmatch"
.SS "_propagateMatch"
.IX Subsection "_propagateMatch"
.SS "_matchParents"
.IX Subsection "_matchParents"
.SS "_markChanges"
.IX Subsection "_markChanges"
.SS "_registerChange"
.IX Subsection "_registerChange"
.SS "_processChange"
.IX Subsection "_processChange"
.SS "_local_move"
.IX Subsection "_local_move"
.SS "_setDiff"
.IX Subsection "_setDiff"
.SS "_attachInstructions"
.IX Subsection "_attachInstructions"
.SS "_applyAction"
.IX Subsection "_applyAction"
.SS "_applyInsert"
.IX Subsection "_applyInsert"
.SS "_insertRegister"
.IX Subsection "_insertRegister"
.SS "_applyUpdate"
.IX Subsection "_applyUpdate"
.SS "_applyDelete"
.IX Subsection "_applyDelete"
.SS "_applyMove"
.IX Subsection "_applyMove"
.SS "_applyMoveUnbind"
.IX Subsection "_applyMoveUnbind"
.SS "_applyMoveBind"
.IX Subsection "_applyMoveBind"
.SS "_debug"
.IX Subsection "_debug"
.SH "AUTHOR"
.IX Header "AUTHOR"
Arne Claassen  <sdether@cpan.org>
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Tim Meadowcroft  <timm@cpan.org>
.SH "VERSION"
.IX Header "VERSION"
0.05
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
2004, 2007 Arne F. Claassen, All rights reserved.
