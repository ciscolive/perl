.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::Name 3"
.TH Data::Object::Name 3 "2020-05-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::Name
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Name Class for Perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Data::Object::Name;
\&
\&  my $name = Data::Object::Name\->new(\*(AqFooBar/Baz\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides methods for converting \*(L"name\*(R" strings.
.SH "METHODS"
.IX Header "METHODS"
This package implements the following methods:
.SS "dist"
.IX Subsection "dist"
.Vb 1
\&  dist() : Str
.Ve
.PP
The dist method returns a package distribution representation of the name.
.IP "dist example #1" 4
.IX Item "dist example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $dist = $name\->dist; # FooBar\-Baz
.Ve
.SS "file"
.IX Subsection "file"
.Vb 1
\&  file() : Str
.Ve
.PP
The file method returns a file representation of the name.
.IP "file example #1" 4
.IX Item "file example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $file = $name\->file; # foo_bar_\|_baz
.Ve
.SS "format"
.IX Subsection "format"
.Vb 1
\&  format(Str $method, Str $format) : Str
.Ve
.PP
The format method calls the specified method passing the result to the core
\&\*(L"sprintf\*(R" function with itself as an argument.
.IP "format example #1" 4
.IX Item "format example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $file = $name\->format(\*(Aqfile\*(Aq, \*(Aq%s.t\*(Aq); # foo_bar_\|_baz.t
.Ve
.SS "label"
.IX Subsection "label"
.Vb 1
\&  label() : Str
.Ve
.PP
The label method returns a label (or constant) representation of the name.
.IP "label example #1" 4
.IX Item "label example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $label = $name\->label; # FooBar_Baz
.Ve
.SS "lookslike_a_file"
.IX Subsection "lookslike_a_file"
.Vb 1
\&  lookslike_a_file() : Bool
.Ve
.PP
The lookslike_a_file method returns truthy if its state resembles a filename.
.IP "lookslike_a_file example #1" 4
.IX Item "lookslike_a_file example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $is_file = $name\->lookslike_a_file; # falsy
.Ve
.SS "lookslike_a_label"
.IX Subsection "lookslike_a_label"
.Vb 1
\&  lookslike_a_label() : Bool
.Ve
.PP
The lookslike_a_label method returns truthy if its state resembles a label (or
constant).
.IP "lookslike_a_label example #1" 4
.IX Item "lookslike_a_label example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $is_label = $name\->lookslike_a_label; # falsy
.Ve
.SS "lookslike_a_package"
.IX Subsection "lookslike_a_package"
.Vb 1
\&  lookslike_a_package() : Bool
.Ve
.PP
The lookslike_a_package method returns truthy if its state resembles a package
name.
.IP "lookslike_a_package example #1" 4
.IX Item "lookslike_a_package example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $is_package = $name\->lookslike_a_package; # falsy
.Ve
.SS "lookslike_a_path"
.IX Subsection "lookslike_a_path"
.Vb 1
\&  lookslike_a_path() : Bool
.Ve
.PP
The lookslike_a_path method returns truthy if its state resembles a file path.
.IP "lookslike_a_path example #1" 4
.IX Item "lookslike_a_path example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $is_path = $name\->lookslike_a_path; # truthy
.Ve
.SS "lookslike_a_pragma"
.IX Subsection "lookslike_a_pragma"
.Vb 1
\&  lookslike_a_pragma() : Bool
.Ve
.PP
The lookslike_a_pragma method returns truthy if its state resembles a pragma.
.IP "lookslike_a_pragma example #1" 4
.IX Item "lookslike_a_pragma example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $is_pragma = $name\->lookslike_a_pragma; # falsy
.Ve
.IP "lookslike_a_pragma example #2" 4
.IX Item "lookslike_a_pragma example #2"
.Vb 1
\&  use Data::Object::Name;
\&
\&  my $name = Data::Object::Name\->new(\*(Aq[strict]\*(Aq);
\&
\&  my $is_pragma = $name\->lookslike_a_pragma; # truthy
.Ve
.SS "new"
.IX Subsection "new"
.Vb 1
\&  new(Str $arg) : Object
.Ve
.PP
The new method instantiates the class and returns an object.
.IP "new example #1" 4
.IX Item "new example #1"
.Vb 1
\&  use Data::Object::Name;
\&
\&  my $name = Data::Object::Name\->new;
.Ve
.IP "new example #2" 4
.IX Item "new example #2"
.Vb 1
\&  use Data::Object::Name;
\&
\&  my $name = Data::Object::Name\->new(\*(AqFooBar\*(Aq);
.Ve
.SS "package"
.IX Subsection "package"
.Vb 1
\&  package() : Str
.Ve
.PP
The package method returns a package name representation of the name given.
.IP "package example #1" 4
.IX Item "package example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $package = $name\->package; # FooBar::Baz
.Ve
.SS "path"
.IX Subsection "path"
.Vb 1
\&  path() : Str
.Ve
.PP
The path method returns a path representation of the name.
.IP "path example #1" 4
.IX Item "path example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $path = $name\->path; # FooBar/Baz
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/data-object-name/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/data-object-name/wiki>
.PP
Project <https://github.com/iamalnewkirk/data-object-name>
.PP
Initiatives <https://github.com/iamalnewkirk/data-object-name/projects>
.PP
Milestones <https://github.com/iamalnewkirk/data-object-name/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/data-object-name/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/data-object-name/issues>
