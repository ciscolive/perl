.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catmandu::Exporter::CSV 3"
.TH Catmandu::Exporter::CSV 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catmandu::Exporter::CSV \- a CSV exporter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # On the command line
\&
\&    $ catmandu convert XSL to CSV < data.xls
\&
\&    $ catmandu convert JSON to CSV \-\-fix myfixes.txt \-\-sep_char \*(Aq;\*(Aq < data.json
\&
\&    # In a Perl script
\&
\&    use Catmandu;
\&
\&    my $exporter = Catmandu\->exporter(\*(AqCSV\*(Aq,
\&                fix => \*(Aqmyfix.txt\*(Aq,
\&                quote_char => \*(Aq"\*(Aq,
\&                sep_char => \*(Aq,\*(Aq,
\&                escape_char => \*(Aq"\*(Aq ,
\&                always_quote => 1,
\&                header => 1);
\&
\&    $exporter\->fields("f1,f2,f3");
\&    $exporter\->fields([qw(f1 f2 f3)]);
\&
\&    $exporter\->add_many($arrayref);
\&    $exporter\->add_many($iterator);
\&    $exporter\->add_many(sub { });
\&
\&    $exporter\->add($hashref);
\&
\&    printf "exported %d items\en" , $exporter\->count;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This \f(CW\*(C`Catmandu::Exporter\*(C'\fR exports items as rows with comma-separated values
(\s-1CSV\s0). Serialization is based on Text::CSV. A header line with field names
will be included if option \f(CW\*(C`header\*(C'\fR is set. See Catmandu::TabularExporter
on how to configure the field mapping and column names. Newlines and tabulator
values in field values are escaped as \f(CW\*(C`\en\*(C'\fR, \f(CW\*(C`\er\*(C'\fR, and \f(CW\*(C`\et\*(C'\fR.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.IP "file" 4
.IX Item "file"
Write output to a local file given by its path or file handle.  Alternatively a
scalar reference can be passed to write to a string and a code reference can be
used to write to a callback function.
.IP "fh" 4
.IX Item "fh"
Write the output to an IO::Handle. If not specified,
Catmandu::Util::io is used to create the output
handle from the \f(CW\*(C`file\*(C'\fR argument or by using \s-1STDOUT.\s0
.IP "fix" 4
.IX Item "fix"
An \s-1ARRAY\s0 of one or more fixes or file scripts to be applied to exported items.
.IP "encoding" 4
.IX Item "encoding"
Binmode of the output stream \f(CW\*(C`fh\*(C'\fR. Set to "\f(CW\*(C`:utf8\*(C'\fR" by default.
.IP "sep_char" 4
.IX Item "sep_char"
Column separator (\f(CW\*(C`,\*(C'\fR by default)
.IP "quote_char" 4
.IX Item "quote_char"
Quotation character (\f(CW\*(C`"\*(C'\fR by default)
.IP "escape_char" 4
.IX Item "escape_char"
Character for escaping inside quoted field (\f(CW\*(C`"\*(C'\fR by default)
.IP "fields" 4
.IX Item "fields"
See Catmandu::TabularExporter.
.IP "columns" 4
.IX Item "columns"
See Catmandu::TabularExporter.
.IP "header" 4
.IX Item "header"
Include a header line with column names. Enabled by default.
.SH "METHODS"
.IX Header "METHODS"
See Catmandu::TabularExporter, Catmandu::Exporter, Catmandu::Addable,
Catmandu::Fixable, Catmandu::Counter, and Catmandu::Logger for a full
list of methods.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catmandu::Importer::CSV, Catmandu::Exporter::Table
Catmandu::Exporter::XLS
