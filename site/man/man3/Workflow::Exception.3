.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Workflow::Exception 3"
.TH Workflow::Exception 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Workflow::Exception \- Base class for workflow exceptions
.SH "VERSION"
.IX Header "VERSION"
This documentation describes version 1.08 of this package
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& # Standard usage
\& use Workflow::Exception qw( workflow_error );
\&
\& my $user = $wf\->context\->param( \*(Aqcurrent_user\*(Aq );
\& unless ( $user\->check_password( $entered_password ) ) {
\&   workflow_error "User exists but password check failed";
\& }
\&
\& # Pass a list of strings to form the message
\&
\& unless ( $user\->check_password( $entered_password ) ) {
\&   workflow_error \*(AqBad login: \*(Aq, $object\->login_attempted;
\& }
\&
\& # Using other exported shortcuts
\&
\& use Workflow::Exception qw( configuration_error );
\& configuration_error "Field \*(Aqfoo\*(Aq must be a set to \*(Aqbar\*(Aq";
\&
\& use Workflow::Exception qw( validation_error );
\& validation_error "Validation for field \*(Aqfoo\*(Aq failed: $error";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
First, you should probably look at
Exception::Class for more usage examples, why we
use exceptions, what they are intended for, etc.
.PP
This is the base class for all workflow exceptions. It declares a
handful of exceptions and provides shortcuts to make raising an
exception easier and more readable.
.SH "METHODS"
.IX Header "METHODS"
\fIthrow( \f(CI@msg\fI, [ \e%params ])\fR
.IX Subsection "throw( @msg, [ %params ])"
.PP
This overrides \fB\fBthrow()\fB\fR from Exception::Class to
add a little syntactic sugar. Instead of:
.PP
.Vb 3
\& $exception_class\->throw( message => \*(AqThis is my very long error message that I would like to pass\*(Aq,
\&                          param1  => \*(AqParam1 value\*(Aq,
\&                          param2  => \*(AqParam2 value\*(Aq );
.Ve
.PP
You can use:
.PP
.Vb 4
\& $exception_class\->throw( \*(AqThis is my very long error message \*(Aq,
\&                          \*(Aqthat I would like to pass\*(Aq,
\&                          { param1 => \*(AqParam1 value\*(Aq,
\&                            param2 => \*(AqParam2 value\*(Aq } );
.Ve
.PP
And everything will work the same. Combined with the \s-1SHORTCUTS\s0 this
makes for very readable code:
.PP
.Vb 3
\& workflow_error "Something went horribly, terribly, dreadfully, "
\&                "frightfully wrong: $@",
\&                { foo => \*(Aqbar\*(Aq };
.Ve
.PP
\fIcondition_error\fR
.IX Subsection "condition_error"
.PP
This method transforms the error to a condition error.
.PP
This exception is thrown via </mythrow> when a condition of a workflow is invalid.
.PP
\fIconfiguration_error\fR
.IX Subsection "configuration_error"
.PP
This method transforms the error to a configuration error.
.PP
This exception is thrown via </mythrow> when configuration of a workflow is unsuccessful.
.PP
\fIpersist_error\fR
.IX Subsection "persist_error"
.PP
This method transforms the error to a persistance error.
.PP
This exception is thrown via </mythrow> when the save of a workflow is unsuccessful.
.PP
\fIvalidation_error\fR
.IX Subsection "validation_error"
.PP
This method transforms the error to a validation error.
.PP
This exception is thrown via </mythrow> when input data or similar of a workflow is unsuccessful.
.PP
\fIworkflow_error\fR
.IX Subsection "workflow_error"
.PP
This method transforms the error to a workflow error.
.PP
This exception is thrown via </mythrow> when input data or similar of a workflow is unsuccessful.
.SH "SHORTCUTS"
.IX Header "SHORTCUTS"
\&\fBWorkflow::Exception\fR \- import using \f(CW\*(C`workflow_error\*(C'\fR
.PP
\&\fBWorkflow::Exception::Condition\fR \- import using \f(CW\*(C`condition_error\*(C'\fR
.PP
\&\fBWorkflow::Exception::Configuration\fR \- import using \f(CW\*(C`configuration_error\*(C'\fR
.PP
\&\fBWorkflow::Exception::Persist\fR \- import using \f(CW\*(C`persist_error\*(C'\fR
.PP
\&\fBWorkflow::Exception::Validation\fR \- import using \f(CW\*(C`validation_error\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Exception::Class
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2010 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonas B. Nielsen (jonasbn) <jonasbn@cpan.org> is the current maintainer.
.PP
Chris Winters <chris@cwinters.com>, original author.
