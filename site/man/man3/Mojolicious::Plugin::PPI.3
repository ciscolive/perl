.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::PPI 3"
.TH Mojolicious::Plugin::PPI 3 "2020-07-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::PPI \- Mojolicious Plugin for Rendering Perl Code Using PPI
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& # Mojolicious
\& $self\->plugin(\*(AqPPI\*(Aq);
\&
\& # Mojolicious::Lite
\& plugin \*(AqPPI\*(Aq;
\&
\& # In your template
\& Perl is as simple as <%= ppi q{say "Hello World"} %>.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::PPI is a Mojolicious plugin which adds Perl syntax highlighting via \s-1PPI\s0 and \s-1PPI::HTML\s0. Perl is notoriously hard to properly syntax highlight, but since \s-1PPI\s0 is made especially for parsing Perl this plugin can help you show off your Perl scripts in your Mojolicious webapp.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Plugin::PPI inherits all methods from Mojolicious::Plugin and implements the following new ones.
.IP "\(bu" 4
\&\f(CW\*(C`line_numbers => [0/1]\*(C'\fR specifies if line numbers should be generated. Defaults to \f(CW1\fR for file-based snippets, however \f(CW0\fR is used for an inline snipppet unless explicitly overridden in the helper arguments.
.IP "\(bu" 4
\&\f(CW\*(C`no_check_file => [0/1]\*(C'\fR specifies if a file check should be performed. Default \f(CW0\fR.
.IP "\(bu" 4
\&\f(CW\*(C`src_folder => \*(Aqdirectory\*(Aq\*(C'\fR specifies a folder where input files will be found. When specified, if the directory is not found, a warning is issued, but not fatally. This functionality is not (currently) available for per-file alteration, so only use if all files will be in this folder (or subfolder). Remember, if this option is not specified, a full or relative path may be passed to \*(L"ppi\*(R".
.IP "\(bu" 4
\&\f(CW\*(C`style => \*(Aq.ppi\-code { some: style; }\*(Aq\*(C'\fR a string of overall style sheet to be applied via the \f(CW\*(C`ppi_css\*(C'\fR helper.
.IP "\(bu" 4
\&\f(CW\*(C`class_style => { class => \*(Aqstring color\*(Aq, other_class => { style => \*(Aqpairs\*(Aq } }\*(C'\fR This hashref's keys are individual element style definitions. If the value is a string, it is used as the value of the color attribute. If the value is another hashref, it is converted into style definitions.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::PPI inherits all methods from Mojolicious::Plugin and implements the following new ones.
.ie n .SS """register"""
.el .SS "\f(CWregister\fP"
.IX Subsection "register"
.Vb 1
\&  $plugin\->register;
.Ve
.PP
Register plugin in Mojolicious application. At register time, key-value pairs for the plugin attributes may be supplied.
.SH "HELPERS"
.IX Header "HELPERS"
Mojolicous::Plugin::PPI provides these helpers:
.ie n .SS """ppi"""
.el .SS "\f(CWppi\fP"
.IX Subsection "ppi"
.Vb 2
\&  %== ppi \*(Aqmy $code = "highlighted";\*(Aq
\&  %== ppi \*(Aqfile.pl\*(Aq
.Ve
.PP
Returns \s-1HTML\s0 form of Perl snippet or file. The behavior may be slightly different in each case. If the argument is the name of a file that exists, it will be loaded and used. If not the string will be interpreted as an inline snippet. In either form, the call to \f(CW\*(C`ppi\*(C'\fR may take the additional option:
.PP
Additional key-value pairs may be passed which override the object's defaults. Most attributes are available (except: \f(CW\*(C`no_check_file\*(C'\fR for now) and the additional key \f(CW\*(C`inline\*(C'\fR lets you override the default choice of display inline vs block (by string vs file respectively).
.ie n .SS """ppi_css"""
.el .SS "\f(CWppi_css\fP"
.IX Subsection "ppi_css"
Injects a generated \s-1CSS\s0 style into the page, using style properties defined in the plugin attributes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, \s-1PPI\s0, \s-1PPI::HTML\s0
.PP
\&\s-1PPI\s0, \s-1PPI::HTML\s0
.SH "SOURCE REPOSITORY"
.IX Header "SOURCE REPOSITORY"
<http://github.com/jberger/Mojolicious\-Plugin\-PPI>
.SH "AUTHOR"
.IX Header "AUTHOR"
Joel Berger, <joel.a.berger@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2011\-2013 by Joel Berger
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
