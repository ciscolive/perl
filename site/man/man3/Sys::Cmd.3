.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Sys::Cmd 3"
.TH Sys::Cmd 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Sys::Cmd \- run a system command or spawn a system processes
.SH "VERSION"
.IX Header "VERSION"
0.85.4 (2016\-06\-06)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Sys::Cmd qw/run spawn/;
\&
\&    # Get command output, raise exception on failure:
\&    $output = run(@cmd);
\&
\&    # Feed command some input, get output as lines,
\&    # raise exception on failure:
\&    @output = run(@cmd, { input => \*(Aqfeedme\*(Aq });
\&
\&    # Spawn and interact with a process somewhere else:
\&    $proc = spawn( @cmd, { dir => \*(Aq/\*(Aq , encoding => \*(Aqiso\-8859\-3\*(Aq} );
\&
\&    while (my $line = $proc\->stdout\->getline) {
\&        $proc\->stdin\->print("thanks");
\&    }
\&
\&    my @errors = $proc\->stderr\->getlines;
\&
\&    $proc\->close();       # Finished talking
\&    $proc\->wait_child();  # Cleanup
\&
\&    # read exit information
\&    $proc\->exit();      # exit status
\&    $proc\->signal();    # signal
\&    $proc\->core();      # core dumped? (boolean)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBSys::Cmd\fR lets you run system commands and capture their output, or
spawn and interact with a system process through its \f(CW\*(C`STDIN\*(C'\fR,
\&\f(CW\*(C`STDOUT\*(C'\fR, and \f(CW\*(C`STDERR\*(C'\fR file handles. The following functions are
exported on demand by this module:
.ie n .IP "run( @cmd, [\e%opt] ) => $output | @output" 4
.el .IP "run( \f(CW@cmd\fR, [\e%opt] ) => \f(CW$output\fR | \f(CW@output\fR" 4
.IX Item "run( @cmd, [%opt] ) => $output | @output"
Execute \f(CW@cmd\fR and return what the command sent to its \f(CW\*(C`STDOUT\*(C'\fR,
raising an exception in the event of error. In array context returns a
list instead of a plain string.
.Sp
The first element of \f(CW@cmd\fR will be looked up using File::Which if
it doesn't exist as a relative file name is is a \s-1CODE\s0 reference (\s-1UNIX\s0
only).  The command input and environment can be modified with an
optional hashref containing the following key/values:
.RS 4
.IP "dir" 4
.IX Item "dir"
The working directory the command will be run in.
.IP "encoding" 4
.IX Item "encoding"
An string value identifying the encoding of the input/output
file-handles. Defaults to 'utf8'.
.IP "env" 4
.IX Item "env"
A hashref containing key/values to be added to the current environment
at run-time. If a key has an undefined value then the key is removed
from the environment altogether.
.IP "input" 4
.IX Item "input"
A string which is fed to the command via its standard input, which is
then closed.
.RE
.RS 4
.RE
.ie n .IP "runx( @cmd, [\e%opt] ) => $outerrput | @outerrput" 4
.el .IP "runx( \f(CW@cmd\fR, [\e%opt] ) => \f(CW$outerrput\fR | \f(CW@outerrput\fR" 4
.IX Item "runx( @cmd, [%opt] ) => $outerrput | @outerrput"
The same as the \f(CW\*(C`run\*(C'\fR function but with the command's \f(CW\*(C`STDERR\*(C'\fR output
appended to the \f(CW\*(C`STDOUT\*(C'\fR output.
.ie n .IP "spawn( @cmd, [\e%opt] ) => Sys::Cmd" 4
.el .IP "spawn( \f(CW@cmd\fR, [\e%opt] ) => Sys::Cmd" 4
.IX Item "spawn( @cmd, [%opt] ) => Sys::Cmd"
Return a \fBSys::Cmd\fR object (documented below) representing the process
running \f(CW@cmd\fR, with attributes set according to the optional \e%opt
hashref.  The first element of the \f(CW@cmd\fR array is looked up using
File::Which if it cannot be found in the file-system as a relative
file name or it is a \s-1CODE\s0 reference (\s-1UNIX\s0 only).
.PP
\&\fBSys::Cmd\fR objects can of course be created using the standard \f(CW\*(C`new\*(C'\fR
constructor if you prefer that to the \f(CW\*(C`spawn\*(C'\fR function:
.PP
.Vb 11
\&    $proc = Sys::Cmd\->new(
\&        cmd => \e@cmd,
\&        dir => \*(Aq/\*(Aq,
\&        env => { SOME => \*(AqVALUE\*(Aq },
\&        enc => \*(Aqiso\-8859\-3\*(Aq,
\&        input => \*(Aqfeedme\*(Aq,
\&        on_exit => sub {
\&            my $proc = shift;
\&            print $proc\->pid .\*(Aq exited with \*(Aq. $proc\->exit;
\&        },
\&    );
.Ve
.PP
Note that \fBSys::Cmd\fR objects created this way will not lookup the
command using File::Which the way the \f(CW\*(C`run\*(C'\fR, \f(CW\*(C`runx\*(C'\fR and \f(CW\*(C`spawn\*(C'\fR
functions do.
.PP
\&\fBSys::Cmd\fR uses Log::Any \f(CW\*(C`debug\*(C'\fR calls for logging purposes. An
easy way to see the output is to add \f(CW\*(C`use Log::Any::Adapter \*(AqStdout\*(Aq\*(C'\fR
in your program.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new(%args) => Sys::Cmd" 4
.IX Item "new(%args) => Sys::Cmd"
Spawns a process based on \f(CW%args\fR. \f(CW%args\fR must contain at least a \f(CW\*(C`cmd\*(C'\fR
value, and optionally \f(CW\*(C`encoding\*(C'\fR, \f(CW\*(C`env\*(C'\fR, \f(CW\*(C`dir\*(C'\fR and \f(CW\*(C`input\*(C'\fR values
as defined as attributes below.
.Sp
If an \f(CW\*(C`on_exit\*(C'\fR subref argument is provided it will be called by the
\&\f(CW\*(C`wait_child\*(C'\fR method, which can either be called manually or will be
automatically called when the object is destroyed.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
All attributes are read-only.
.IP "cmd" 4
.IX Item "cmd"
An array ref containing the command or \s-1CODE\s0 reference (\s-1UNIX\s0 only) and
its arguments.
.IP "dir" 4
.IX Item "dir"
The working directory the command will be run in.
.IP "encoding" 4
.IX Item "encoding"
An string value identifying the encoding of the input/output
file-handles. Defaults to 'utf8'.
.IP "env" 4
.IX Item "env"
A hashref containing key/values to be added to the current environment
at run-time. If a key has an undefined value then the key is removed
from the environment altogether.
.IP "input" 4
.IX Item "input"
A string which is fed to the command via its standard input, which is
then closed. This is a shortcut for printing to, and closing the
command's \fIstdin\fR file-handle. An empty string will close the
command's standard input without writing to it. On some systems, some
commands may close standard input on startup, which will cause a
\&\s-1SIGPIPE\s0 when trying to write to it for which \fBSys::Cmd\fR will warn.
.IP "pid" 4
.IX Item "pid"
The command's process \s-1ID.\s0
.IP "stdin" 4
.IX Item "stdin"
The command's \fI\s-1STDIN\s0\fR file handle, based on IO::Handle so you can
call \fBprint()\fR etc methods on it. Autoflush is automatically enabled on
this handle.
.IP "stdout" 4
.IX Item "stdout"
The command's \fI\s-1STDOUT\s0\fR file handle, based on IO::Handle so you can
call \fBgetline()\fR etc methods on it.
.IP "stderr" 4
.IX Item "stderr"
The command's \fI\s-1STDERR\s0\fR file handle, based on IO::Handle so you can
call \fBgetline()\fR etc methods on it.
.IP "exit" 4
.IX Item "exit"
The command's exit value, shifted by 8 (see \*(L"perldoc \-f system\*(R"). Set
by \f(CW\*(C`wait_child()\*(C'\fR.
.IP "signal" 4
.IX Item "signal"
The signal number (if any) that terminated the command, bitwise-added
with 127 (see \*(L"perldoc \-f system\*(R"). Set by \f(CW\*(C`wait_child()\*(C'\fR.
.IP "core" 4
.IX Item "core"
A boolean indicating the process core was dumped. Set by
\&\f(CW\*(C`wait_child()\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "cmdline => @list | $str" 4
.el .IP "cmdline => \f(CW@list\fR | \f(CW$str\fR" 4
.IX Item "cmdline => @list | $str"
In array context returns a list of the command and its arguments.  In
scalar context returns a string of the command and its arguments joined
together by spaces.
.IP "\fBclose()\fR" 4
.IX Item "close()"
Close all filehandles to the child process. Note that file handles will
automaticaly be closed when the \fBSys::Cmd\fR object is destroyed.
Annoyingly, this means that in the following example \f(CW$fh\fR will be
closed when you tried to use it:
.Sp
.Vb 1
\&    my $fh = Sys::Cmd\->new( %args )\->stdout;
.Ve
.Sp
So you have to keep track of the Sys::Cmd object manually.
.ie n .IP "\fBwait_child()\fR \-> $exit_value" 4
.el .IP "\fBwait_child()\fR \-> \f(CW$exit_value\fR" 4
.IX Item "wait_child() -> $exit_value"
Wait for the child to exit using
waitpid <http://perldoc.perl.org/functions/waitpid.html>, collect the
exit status and return it. This method sets the \fIexit\fR, \fIsignal\fR and
\&\fIcore\fR attributes and will also be called automatically when the
\&\fBSys::Cmd\fR object is destroyed.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Sys::Cmd::Template
.SH "ALTERNATIVES"
.IX Header "ALTERNATIVES"
AnyEvent::Run, AnyEvent::Util, Argv, Capture::Tiny,
Child, Forks::Super, IO::Pipe, IPC::Capture, IPC::Cmd,
IPC::Command::Multiplex, IPC::Exe, IPC::Open3,
IPC::Open3::Simple, IPC::Run, IPC::Run3,
IPC::RunSession::Simple, IPC::ShellCmd, IPC::System::Simple,
POE::Pipe::TwoWay, Proc::Background, Proc::Fork,
Proc::Spawn, Spawn::Safe, System::Command
.SH "SUPPORT"
.IX Header "SUPPORT"
This distribution is managed via github:
.PP
.Vb 1
\&    https://github.com/mlawren/sys\-cmd/tree/devel
.Ve
.PP
This distribution follows the semantic versioning model:
.PP
.Vb 1
\&    http://semver.org/
.Ve
.PP
Code is tidied up on Git commit using githook-perltidy:
.PP
.Vb 1
\&    http://github.com/mlawren/githook\-perltidy
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Lawrence <nomad@null.net>, based heavily on
Git::Repository::Command by Philippe Bruhat (BooK).
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2011\-2014 Mark Lawrence <nomad@null.net>
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.
