.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Admin::Permission 3"
.TH Infoblox::Grid::Admin::Permission 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Admin::Permission \- Admin Permission object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An Admin Permission object is used to set the permissions for an admin to access various resources.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 7
\& my $group = Infoblox::Grid::Admin::Permission\->new(
\&     admin_group         => $string,                                                              #exactly one of admin_group and role Required
\&     role                => $string,                                                              #exactly one of admin_group and role Required
\&     permission          => "read" | "write" | "deny",                                            #Required
\&     resource_type       => $string,                                                              #Optional, if resource_object is provided
\&     resource_object     => $Object,                                                              #Optional, if resource_type is provided
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to an Admin Permission object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Construct the Group object
\& my $permission = Infoblox::Grid::Admin::Permission\->new(
\&           admin_group => "test_group",
\&           resource_type => "All Zones",
\&           permission => "write",
\& );
\& # Submit for addition
\& my $response = $session\->add( $permission );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific Group object:
\&
\&  admin_group      \- Optional. Group name in string format.
\&  role             \- Optional. Role name in string format.
\&  permission       \- Optional. Permission in string format.
\&  resource_type    \- Optional. Resource type in string format.
\&  resource_object  \- Optional. Resource Object reference.
\&
\& NOTE: You cannot specify both an admin_group and role.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::Grid::Admin::Permission",
\&     admin_group   => "test_group",
\&     resource_type => "All Members");
\&
\& or
\&
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::Grid::Admin::Permission",
\&     role          => "test_role",
\&     resource_type => "All Members");
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify the permission.
\& $permission\->permission("read");
\& # Submit modification
\& my $response = $session\->modify( $permission );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, use \fBget()\fR or \fBsearch()\fR to retrieve the specific object first, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& # Get the permission objects with the same group name
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::Grid::Admin::Permission",
\&     admin_group   => "test_group",
\&     resource_type => "All Members");
\& # find the desired object from the retrieved list.
\& my $desired_perm = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_perm );
\&
\& or
\&
\& # Get the permission objects with the same role name
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::Grid::Admin::Permission",
\&     role          => "test_role",
\&     resource_type => "All Members");
\& # find the desired object from the retrieved list.
\& my $desired_perm = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_perm );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for Admin Permission objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a specific Group object:
\&
\&  admin_group          \- Optional. Group name in string format.
\&  role                 \- Optional. Role name in string format.
\&  permission           \- Optional. Permission in string format.
\&  resource_object      \- Optional. Resource Object reference.
\&  resource_type        \- Optional. Resource Type in string format.
\&
\& NOTE: You cannot specify both an admin_group and role.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # search for all permission objects of admin group "test_group"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::Admin::Permission",
\&     admin_group   => "test_group" );
\&
\& or
\&
\& # search for all permission objects of admin role "test_role"
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::Admin::Permission",
\&     role   => "test_role" );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a Group object.
.SS "admin_group( )"
.IX Subsection "admin_group( )"
.RS 4
Use this method to set or retrieve the admin group information.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The admin group name for the specified object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get admin group name
\& my $name = $permission\->admin_group();
\& #Modify admin group
\& $permission\->admin_group("test\-group1");
.Ve
.RE
.RS 4
.RE
.SS "role( )"
.IX Subsection "role( )"
.RS 4
Use this method to set or retrieve the role information.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The admin role name for the specified object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get admin role name
\& my $name = $permission\->role();
\& #Modify admin role
\& $permission\->role("test\-role1");
.Ve
.RE
.RS 4
.RE
.SS "permission( )"
.IX Subsection "permission( )"
.RS 4
Use this method to set or retrieve the admin group permission.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The admin group permission for the specified object. Permission values are \*(L"write\*(R", \*(L"read\*(R" and \*(L"deny\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get permission
\& my $perm = $permission\->permission();
\& #Modify permission
\& $permission\->permission("deny");
.Ve
.RE
.RS 4
.RE
.SS "resource_type( )"
.IX Subsection "resource_type( )"
.RS 4
Use this method to set or retrieve the resource type. Resource type represents all resources of the specific type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The resource type for which permission is set. Sets permissions for all resources of the resource_type specified.
.Sp
If resource_object is also provided, it sets the permission for all resources of the specified type under the resource_object.
.Sp
The allowed values are:
.Sp
.Vb 10
\& "All Zones"
\& "All DNS Views"
\& "All DNS64 Synthesis Groups"
\& "All Members"
\& "All MS Server Members"
\& "All Microsoft Active Directory Domains"
\& "All Microsoft Superscopes"
\& "All Shared Record Groups"
\& "All Networks" (deprecated in favor of "All IPv4 Networks")
\& "All IPv4 Networks"
\& "All IPv6 Networks"
\& "All Network Views"
\& "All Shared Networks" (deprecated in favor of "All IPv4 DHCP Shared Networks")
\& "All IPv4 DHCP Shared Networks"
\& "All IPv6 DHCP Shared Networks"
\& "All Mac Address Filters"
\& "All Ranges" (deprecated in favor of "All IPv4 Ranges")
\& "All IPv4 DHCP Ranges" (deprecated in favor of "All IPv4 Ranges")
\& "All IPv4 Ranges"
\& "All IPv6 DHCP Ranges"  (deprecated in favor of "All IPv6 Ranges")
\& "All IPv6 Ranges"
\& "All Fixed Addresses/Reservations" (deprecated in favor of "All IPv4 DHCP Fixed Addresses/Reservations")
\& "All IPv4 DHCP Fixed Addresses/Reservations"
\& "All IPv6 DHCP Fixed Addresses"
\& "All Roaming Hosts"
\& "All Rulesets"
\& "All Templates" (deprecated in favor of "All IPv4 DHCP Templates")
\& "All IPv4 DHCP Templates"
\& "All IPv6 DHCP Templates"
\& "All IPv4 Host Addresses"
\& "All IPv6 Host Addresses"
\& "All A Records"
\& "All AAAA Records"
\& "All BULKHOST Records"
\& "All CNAME Records"
\& "All DNAME Records"
\& "All HOST Records"
\& "All MX Records"
\& "All NAPTR Records"
\& "All PTR Records"
\& "All SRV Records"
\& "All TLSA Records"
\& "All TXT Records"
\& "All Shared A Records"
\& "All Shared AAAA Records"
\& "All Shared MX Records"
\& "All Shared SRV Records"
\& "All Shared TXT Records"
\& "All Shared CNAME Records"
\& "DNS Scavenging"
\& "Grid DHCP properties"
\& "Grid DNS properties"
\& "Lease History Access" (deprecated in favor of "All IPv4 DHCP Lease History")
\& "All IPv4 DHCP Lease History"
\& "All IPv6 DHCP Lease History"
\& "Grid File Distribution Properties"
\& "Grid AAA Properties"
\& "All AAA External Services"
\& "Network Discovery"
\& "Restart"
\& "All HSM Groups"
\& "All Certificate Auth Services"
\& "All CA Certificates"
\& "All CA Certificates"
\& "All Response Policy Zones"
\& "All Response Policy Rules"
\& "All CSV Import Tasks"
\& "All Dashboard Tasks"
\& "All DHCP Fingerprints"
\& "All Named ACLs"
\& "All Kerberos Keys"
\& "All BFD Templates"
\& "Grid Security configuration"
\& "Port Control"
\& "All DTC LBDNs"
\& "All DTC LBDN Records"
\& "All DTC Pools"
\& "All DTC Servers"
\& "All DTC Monitors"
\& "All DTC Topologies"
\& "All DTC GeoIP"
\& "All DTC Certificates"
\& "Grid Reporting properties"
\& "Reporting dashboard"
\& "Reporting search"
\& "Allow adding A/AAAA records with empty hostname"
\& "Allow deleted objects information tracking"
\& "Scheduling"
.Ve
.Sp
The \*(L"Restart\*(R" resource_type is supported only when resource_object is an Infoblox::Grid::Member::DHCP or Infoblox::Grid::Member::DNS object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get resource_type
\& my $resource_type = $permission\->resource_type();
\& #Modify resource_type
\& $permission\->resource_type("All Networks");
.Ve
.RE
.RS 4
.RE
.SS "resource_object( )"
.IX Subsection "resource_object( )"
.RS 4
Use this method to set or retrieve a resource object. Resource object is a reference to a single object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The resource object for which permission is set. Sets the permission for the specified resource object only.
.Sp
If resource_type is also provided, it sets the permission for all resources of the specified type under the resource_object.
.Sp
The value must be a reference of a defined object of any of the following types:
.Sp
.Vb 10
\& Infoblox::DHCP::Filter::MAC
\& Infoblox::DHCP::FixedAddr
\& Infoblox::DHCP::FixedAddrTemplate
\& Infoblox::DHCP::IPv6FixedAddr
\& Infoblox::DHCP::IPv6Network
\& Infoblox::DHCP::IPv6NetworkContainer
\& Infoblox::DHCP::IPv6Range
\& Infoblox::DHCP::IPv6SharedNetwork
\& Infoblox::DHCP::Network
\& Infoblox::DHCP::NetworkContainer
\& Infoblox::DHCP::NetworkTemplate
\& Infoblox::DHCP::Range
\& Infoblox::DHCP::RangeTemplate
\& Infoblox::DHCP::RoamingHost
\& Infoblox::DHCP::SharedNetwork
\& Infoblox::DHCP::View
\& Infoblox::DNS::BulkHost
\& Infoblox::DNS::Host
\& Infoblox::DNS::Record::A
\& Infoblox::DNS::Record::AAAA
\& Infoblox::DNS::Record::CNAME
\& Infoblox::DNS::Record::DNAME
\& Infoblox::DNS::Record::MX
\& Infoblox::DNS::Record::PTR
\& Infoblox::DNS::Record::SRV
\& Infoblox::DNS::Record::TLSA
\& Infoblox::DNS::Record::TXT
\& Infoblox::DNS::Ruleset
\& Infoblox::DNS::SharedRecord::A
\& Infoblox::DNS::SharedRecord::AAAA
\& Infoblox::DNS::SharedRecord::MX
\& Infoblox::DNS::SharedRecord::SRV
\& Infoblox::DNS::SharedRecord::TXT
\& Infoblox::DNS::SharedRecord::CNAME
\& Infoblox::DNS::SRG
\& Infoblox::DNS::View
\& Infoblox::DNS::Zone
\& Infoblox::Grid::DNS::DNS64Group
\& Infoblox::Grid::FileDistributionDir
\& Infoblox::Grid::Member
\& Infoblox::Grid::Member::FileDistribution
\& Infoblox::Grid::MSServer
\& Infoblox::Grid::MSServer::AdSites::Domain
\& Infoblox::Grid::MSSuperscope
\& Infoblox::Grid::Member::ThreatProtection
\& Infoblox::Grid::Discovery::Device
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get resource_obejct
\& my $resource_object = $permission\->resource_object();
\& #Modify resource_object
\& $object = Infoblox::DNS::Zone\->new(
\&                name => "zone.com"
\&                );
\& $session\->add($object);
\& $permission\->resource_object($zone);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to an Admin Permission object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\&                );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create an admin group
\&
\& my $group = Infoblox::Grid::Admin::Group\->new(
\&     name                 => "test_group",
\&     disabled             => "false",
\&     superuser            => "false"
\&
\& );
\&
\& unless ($group) {
\&        die("Construct user object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Admin Group object created successfully\en";
\&
\& #Add the Admin Group object to the Infoblox appliance through a session
\& $session\->add($group)
\&        or die("Add Admin Group object failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Group object added to server successfully\en";
\&
\& # Create an Admin Role
\&
\& my $role = Infoblox::Grid::Admin::Role\->new(
\&     name                 => "test_role",
\&     comment              => "test admin role",
\& );
\&
\& unless ($role) {
\&        die("Construct role object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Admin Role object created successfully\en";
\&
\& #Add the Admin Role object to the Infoblox appliance through a session
\& $session\->add($role)
\&        or die("Add Admin Role object failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Role object added to server successfully\en";
\&
\& #Create a zone
\& my $zone = Infoblox::DNS::Zone\->new(
\&                name => "zone.com"
\& );
\&
\& unless ($zone) {
\&        die("Construct user object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& #Add the Zone object to the Infoblox appliance through a session
\& $session\->add($zone)
\&        or die("Add Zone object failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "Zone object added to server successfully\en";
\&
\& #Create a shared record group (SRG)
\& my $srg = Infoblox::DNS::SRG\->new(
\&                name => "mysrg"
\& );
\&
\& unless ($srg) {
\&        die("Construct user object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& #Add the SRG object to the Infoblox appliance through a session
\& $session\->add($srg)
\&        or die("Add SRG object failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "SRG object added to server successfully\en";
.Ve
.PP
\&\fB#Create an Admin Permission object based on Admin Group\fR
.PP
.Vb 7
\& #Create an admin permission object
\& my $group_permission = Infoblox::Grid::Admin::Permission\->new(
\&    admin_group     => $group\->name(),
\&    resource_object => $zone,  # This can be omitted if don\*(Aqt care about
\&                               # which zone
\&    resource_type => "All A Records",
\&    permission => "write");
\&
\& unless ($group_permission) {
\&        die("Construct Admin Permission object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Admin Permission object created successfully\en";
\&
\& #Add the Admin Permission object to the Infoblox appliance through a session
\& $session\->add($group_permission)
\&        or die("Add Admin Permission object failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Permission object added to server successfully\en";
\&
\& #Create an admin permission object
\& my $scheduling_permission = Infoblox::Grid::Admin::Permission\->new(
\&      admin_group => $group\->name(),
\&      resource_type => "Scheduling",
\&      permission => "write");
\&
\& unless ($scheduling_permission) {
\&        die("Construct Admin Permission object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Admin Permission object created successfully\en";
\&
\& #Add the Admin Permission object to the Infoblox appliance through a session
\& $session\->add($scheduling_permission)
\&        or die("Add Admin Permission object failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Permission object added to server successfully\en";
.Ve
.PP
\&\fB#Create an Admin Permission object based on Admin Role\fR
.PP
.Vb 7
\& #Create an admin permission object
\& my $role_permission = Infoblox::Grid::Admin::Permission\->new(
\&    role            => $role\->name(),
\&    resource_object => $srg,  # This can be omitted if don\*(Aqt care about
\&                              # which shared record group
\&    resource_type => "All Shared A Records",
\&    permission => "write");
\&
\& unless ($role_permission) {
\&        die("Construct user object failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Admin Permission object created successfully\en";
\&
\& #Add the Admin Permission object to the Infoblox appliance through a session
\& $session\->add($role_permission)
\&        or die("Add Admin Permission object failed: ",
\&                        $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Permission object added to server successfully\en";
.Ve
.PP
\&\fB#Search for an Admin Permission object based on Admin Group\fR
.PP
.Vb 5
\& my @retrieved_objs = $session\->search(
\&                object => "Infoblox::Grid::Admin::Permission",
\&                admin_group   => "test_group"
\&                );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search Admin Permission object based on Admin Group failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Admin Permission object based on Admin Group found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Search for an Admin Permission object based on Admin Role\fR
.PP
.Vb 5
\& my @retrieved_objs = $session\->search(
\&                object => "Infoblox::Grid::Admin::Permission",
\&                role   => "test_role"
\&                );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Search Admin Permission object based on Admin Role failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Admin Permission object based on Admin Role found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify an Admin Permission object based on Admin Group\fR
.PP
.Vb 8
\& #Get the Admin Group object from the Infoblox appliance through a session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Admin::Permission",
\&     admin_group   => "test_group",
\&     resource_object => $zone,
\&     resource_type => "All A Records",
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Get Admin Permission object based on Admin Group failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Admin Permission object found at least 1 matching entry\en";
\&
\& #Modify the permission of the Admin Permission object
\& $object\->permission("read");
\&
\& #Apply the changes.
\& $session\->modify($object)
\&        or die("Modify Admin Permission object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Permission object modified successfully \en";
.Ve
.PP
\&\fB#Get Admin Permission object based on Admin Role\fR
.PP
.Vb 8
\& #Get the Admin Group object from the Infoblox appliance through a session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Admin::Permission",
\&     role            => "test_role",
\&     resource_object => $srg,
\&     resource_type => "All Shared A Records",
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&        die("Get Admin Permission object based on Admin Role failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Admin Permission object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Remove an Admin Permission object\fR
.PP
.Vb 10
\& #Get the Admin Permission object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Admin::Permission",
\&     admin_group   => "test_group",
\&     resource_object => $zone,
\&     resource_type => "All A Records",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Admin Permission object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Admin Permission object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&        or die("Remove Admin Permission object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Permission object removed successfully \en";
\&
\& # We can remove the other permissions in the same way
\&
\& #Get the Admin Permission object for Shared Resource Records through the session
\& @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Admin::Permission",
\&     role   => "test_role",
\&     resource_object => $srg,   # Omit this if it was omitted during creation
\&     resource_type => "All Shared A Records",
\& );
\& $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Admin Permission object for Shared RR failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Admin Permission object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&        or die("Remove Admin Permission object for Shared RR failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Permission object for Shared RR removed successfully \en";
.Ve
.PP
\&\fB#Clean up\fR
.PP
.Vb 4
\& $session\->remove($role)
\&        or die("Remove Admin Role object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Role object removed successfully \en";
\&
\& $session\->remove($group)
\&        or die("Remove Admin Group object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Admin Group object removed successfully \en";
\&
\& $session\->remove($zone)
\&        or die("Remove Zone object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Zone object removed successfully \en";
\&
\& $session\->remove($srg)
\&        or die("Remove Shared Record Group object failed: ",
\&                $session\->status_code() . ":" . $session\->status_detail());
\& print "Shared Record Group object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::Admin::Role, Infoblox::Grid::Admin::Group, Infoblox::Grid::Admin::User, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
