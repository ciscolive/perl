.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Rex::Group::Lookup::DBI 3"
.TH Rex::Group::Lookup::DBI 3 "2020-10-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rex::Group::Lookup::DBI \- read hostnames and groups from a DBI source
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
With this module you can define hostgroups out of an \s-1DBI\s0 source.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Rex::Group::Lookup::DBI;
\& groups_dbi "dsn", "user", "password", "SQL request";
.Ve
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.ie n .SS "groups_dbi($dsn, $user, $password, $sql)"
.el .SS "groups_dbi($dsn, \f(CW$user\fP, \f(CW$password\fP, \f(CW$sql\fP)"
.IX Subsection "groups_dbi($dsn, $user, $password, $sql)"
With this function you can read groups from \s-1DBI\s0 source. Example:
.PP
.Vb 5
\& groups_dbi( \*(AqDBI:mysql:rex;host=db01\*(Aq,
\&   user             => \*(Aqusername\*(Aq,
\&   password         => \*(Aqpassword\*(Aq,
\&   sql              => "SELECT * FROM HOST",
\&   create_all_group => TRUE);
.Ve
.SS "Database sample for MySQL"
.IX Subsection "Database sample for MySQL"
.Vb 6
\& CREATE TABLE IF NOT EXISTS \`HOST\` (
\&   \`ID\` int(11) NOT NULL,
\&   \`GROUP\` varchar(255) DEFAULT NULL,
\&   \`HOST\` varchar(255) NOT NULL,
\&   PRIMARY KEY (\`ID\`)
\& );
.Ve
.SS "Data sample for MySQL"
.IX Subsection "Data sample for MySQL"
.Vb 5
\& INSERT INTO \`HOST\` (\`ID\`, \`GROUP\`, \`HOST\`) VALUES
\&   (1, \*(Aqdb\*(Aq, \*(Aqdb01\*(Aq),
\&   (2, \*(Aqdb\*(Aq, \*(Aqdb02\*(Aq),
\&   (3, \*(Aqwas\*(Aq, \*(Aqwas01\*(Aq),
\&   (4, \*(Aqwas\*(Aq, \*(Aqwas02\*(Aq);
.Ve
