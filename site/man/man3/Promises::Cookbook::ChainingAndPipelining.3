.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Promises::Cookbook::ChainingAndPipelining 3"
.TH Promises::Cookbook::ChainingAndPipelining 3 "2020-02-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Promises::Cookbook::ChainingAndPipelining \- Examples of chaining/pipelining of asynchronous operations
.SH "VERSION"
.IX Header "VERSION"
version 1.04
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $cv = AnyEvent\->condvar;
\&
\&  fetch_it(
\&      \*(Aqhttp://rest.api.example.com/\-/user/search?access_level=admin\*(Aq
\&  )\->then(
\&      sub {
\&          my $admins = shift;
\&          collect(
\&              map {
\&                  fetch_it( \*(Aqhttp://rest.api.example.com/\-/user/\*(Aq . url_encode( $_\->{user_id} ) )
\&              } @$admins
\&          );
\&      }
\&  )\->then(
\&      sub { $cv\->send( @_ ) },
\&      sub { $cv\->croak( \*(AqERROR\*(Aq ) }
\&  );
\&
\&  my @all_admins = $cv\->recv;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
So one of the real benefits of the Promise pattern is how it allows
you to write code that flows and reads more like synchronous code
by using the chaining nature of Promises. In example above we are
first fetching a list of users whose access level is 'admin', in
our fictional web-service we get back a list of \s-1JSON\s0 objects with
only minimal information, just a user_id and full_name for instance.
From here we can then loop through the results and fetch the full
user object for each one of these users, passing all of the promises
returned by \f(CW\*(C`fetch_it\*(C'\fR into \f(CW\*(C`collect\*(C'\fR, which itself returns a promise.
.PP
So despite being completely asynchronous, this code reads much like
a blocking synchronous version would read, from top to bottom.
.PP
.Vb 10
\&  my @all_admins;
\&  try {
\&      my $admins = fetch_it( \*(Aqhttp://rest.api.example.com/\-/user/search?access_level=admin\*(Aq );
\&      @all_admins = map {
\&          fetch_it( \*(Aqhttp://rest.api.example.com/\-/user/\*(Aq . url_encode( $_\->{user_id} ) )
\&      } @$admins;
\&  } catch {
\&      die $_;
\&  };
\&  # do something with @all_admins ...
.Ve
.PP
The only difference really are the \f(CW\*(C`then\*(C'\fR wrappers and the way in
which we handle errors, but even that is very similar since we are
not including an error callback in the first \f(CW\*(C`then\*(C'\fR and allowing
the errors to bubble till the final \f(CW\*(C`then\*(C'\fR, which maps very closely
to the \f(CW\*(C`try/catch\*(C'\fR block. And of course the Promise version runs
asynchronously and reaps all the benefits that brings.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stevan Little <stevan.little@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020, 2019, 2017, 2014, 2012 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
