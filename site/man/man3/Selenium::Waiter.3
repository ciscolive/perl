.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Selenium::Waiter 3"
.TH Selenium::Waiter 3 "2020-10-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Selenium::Waiter \- Provides a utility wait_until function
.SH "VERSION"
.IX Header "VERSION"
version 1.38
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Selenium::Waiter qw/wait_until/;
\&    my $d = Selenium::Remote::Driver\->new;
\&
\&    my $div = wait_until { $d\->find_element(\*(Aqdiv\*(Aq, \*(Aqcss\*(Aq) };
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "wait_until"
.IX Subsection "wait_until"
Exported by default, it takes a \s-1BLOCK\s0 (required) and optionally a
hash of configuration params. It uses a prototype to take its
arguments, so usage looks look like:
.PP
.Vb 2
\&    use Selenium::Waiter;
\&    my $div = wait_until { $driver\->find_element(\*(Aqdiv\*(Aq, \*(Aqcss\*(Aq) };
.Ve
.PP
The above snippet will search for \f(CW\*(C`css=div\*(C'\fR for thirty seconds; if it
ever finds the element, it will immediately return. More generally,
Once the \s-1BLOCK\s0 returns anything truthy, the \f(CW\*(C`wait_until\*(C'\fR will stop
evaluating and the return of the \s-1BLOCK\s0 will be returned to you. If the
\&\s-1BLOCK\s0 never returns a truthy value, we'll wait until the elapsed time
has increased past the timeout and then return an empty string \f(CW\*(Aq\*(Aq\fR.
.PP
\&\fBAchtung!\fR Please make sure that the \s-1BLOCK\s0 you pass in can be
executed in a timely fashion. For Webdriver, that means that you
should set the appropriate \f(CW\*(C`implicit_wait\*(C'\fR timeout low (a second or
less!)  so that we can rerun the assert sub repeatedly. We don't do
anything fancy behind the scenes: we just execute the \s-1BLOCK\s0 you pass
in and sleep between iterations. If your \s-1BLOCK\s0 actively blocks for
thirty seconds, like a \f(CW\*(C`find_element\*(C'\fR would do with an
\&\f(CW\*(C`implicit_wait\*(C'\fR of 30 seconds, we won't be able to help you at all \-
that blocking behavior is on the webdriver server side, and is out of
our control. We'd run one iteration, get blocked for thirty seconds,
and return control to you at that point.
.PP
Dying
.IX Subsection "Dying"
.PP
\&\s-1PLEASE\s0 check the return value before proceeding, as we unwisely
suppress any attempts your \s-1BLOCK\s0 may make to die or croak. The \s-1BLOCK\s0
you pass is called in a \*(L"try\*(R" in Try::Tiny, and if any of the
invocations of your function throw and the \s-1BLOCK\s0 never becomes true,
we'll carp exactly once at the end immediately before returning
false. We overwrite the death message from each iteration, so at the
end, you'll only see the most recent death message.
.PP
.Vb 2
\&    # warns once after thirty seconds: "kept from dying";
\&    wait_until { die \*(Aqkept from dying\*(Aq };
.Ve
.PP
The output of \f(CW\*(C`die\*(C'\fRs from each iteration can be exposed if you wish
to see the massacre:
.PP
.Vb 2
\&    # carps: "kept from dying" once a second for thirty seconds
\&    wait_until { die \*(Aqkept from dying\*(Aq } debug => 1;
.Ve
.PP
Timeouts and Intervals
.IX Subsection "Timeouts and Intervals"
.PP
You can also customize the timeout, and/or the retry interval between
iterations.
.PP
.Vb 2
\&    # prints hi three four times at 0, 3, 6, and 9 seconds
\&    wait_until { print \*(Aqhi\*(Aq; \*(Aq\*(Aq } timeout => 10, interval => 3;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see those modules/websites for more information related to this module.
.IP "\(bu" 4
Selenium::Remote::Driver
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
<https://github.com/teodesian/Selenium\-Remote\-Driver/issues>
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH "AUTHORS"
.IX Header "AUTHORS"
Current Maintainers:
.IP "\(bu" 4
Daniel Gempesaw <gempesaw@gmail.com>
.IP "\(bu" 4
Emmanuel Peroumalna√Øk <peroumalnaik.emmanuel@gmail.com>
.PP
Previous maintainers:
.IP "\(bu" 4
Luke Closs <cpan@5thplane.com>
.IP "\(bu" 4
Mark Stosberg <mark@stosberg.com>
.PP
Original authors:
.IP "\(bu" 4
Aditya Ivaturi <ivaturi@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2010\-2011 Aditya Ivaturi, Gordon Child
.PP
Copyright (c) 2014\-2017 Daniel Gempesaw
.PP
Licensed under the Apache License, Version 2.0 (the \*(L"License\*(R");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
.PP
http://www.apache.org/licenses/LICENSE\-2.0
.PP
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \*(L"\s-1AS IS\*(R" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\s0 either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
