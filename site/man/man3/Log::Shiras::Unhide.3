.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Log::Shiras::Unhide 3"
.TH Log::Shiras::Unhide 3 "2016-10-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Shiras::Unhide \- Unhides Log::Shiras hidden comments in @ISA
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&        #!perl
\&        # Note this example uses the demonstration package Level1.pm Level2.pm, and Level3.pm
\&        use     lib     \*(Aq../lib\*(Aq,;
\&
\&        BEGIN{
\&                $ENV{hide_warn} = 1;
\&        }
\&        use Log::Shiras::Unhide qw( :debug :Meditation  :Health :Family );
\&        my      $basic = \*(AqNothing\*(Aq;
\&        ###LogSD        $basic = \*(AqSomething\*(Aq;
\&        warn \*(AqFound \*(Aq . $basic;
\&        my      $health = \*(AqSick\*(Aq;
\&        ###Health       $health = \*(AqHealthy\*(Aq;
\&        warn \*(AqI am \*(Aq . $health;
\&        my      $wealth = \*(AqBroke\*(Aq;
\&        ###Wealth       $wealth = \*(AqRich\*(Aq;
\&        warn \*(AqI am \*(Aq . $wealth;
\&        use Level1; # Which uses Level2 which uses Level3
\&        warn Level1\->check_return;
\&
\&        #######################################################################################
\&        # Synopsis Screen Output for the following conditions
\&        # $ENV{hide_warn} = 1;# In a BEGIN block
\&        # \*(Aquse Log::Shiras::Unhide qw( :debug :Meditation  :Health :Family :InternalSwitchboarD );\*(Aq
\&        # 01: Using Log::Shiras::Unhide\-v0.29_1 strip_match string: (LogSD|Meditation|Health|Family) at ../lib/Log/Shiras/Unhide.pm line 88.
\&        # 02: Found Something at log_shiras_unhide.pl line 8.
\&        # 03: I am Healthy at log_shiras_unhide.pl line 11.
\&        # 04: I am Broke at log_shiras_unhide.pl line 14.
\&        # 05: Level3 Peace uncovered \- Level2 Healing uncovered \- Level1 Joy uncovered at log_shiras_unhide.pl line 16.
\&        #######################################################################################
\&
\&        #######################################################################################
\&        # Synopsis Screen Output for the following conditions
\&        # $ENV{hide_warn} = 0;
\&        # \*(Aquse Log::Shiras::Unhide( :debug );
\&        # 01: Found Something at log_shiras_unhide.pl line 8.
\&        # 02: I am Sick at log_shiras_unhide.pl line 11.
\&        # 03: I am Broke at log_shiras_unhide.pl line 14.
\&        # 04: Level3 LogSD uncovered \- No Level2 uncovering occured \- No Level1 uncovering occured at log_shiras_unhide.pl line 16.
\&        #######################################################################################
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package will strip '###SomeKey' tags from your script after the 'use Log::Shiras::Unhide;'
statement.  It will also recursivly parse down through any included lower level modules as well.
If Log::Shiras::Unhide is called in some lower place it's import settings there will be
overridden by the top level call.
.PP
Since this module implements a source filter and source filters are not universally loved the
module will generally emit a warning statement when it implements the source filter.  To turn
that off you need to set \f(CW$ENV\fR{hide_warn} = 1 in a \s-1BEGIN\s0 block prior to 'use'ing
Log::Shiras::Unhide.  The \s-1SYNOPSIS\s0 includes examples of various tags that are stripped at
compile time with some examples of tags in the code that are not stripped since they are
not passed to import <http://perldoc.perl.org/functions/import.html>.  It is important to note
that both the synopsis and supporting modules are all stored in the 'examples' folder of this
distribution.  You can inspect the specific implemenation for Level1.pm which uses Level2.pm
which uses Level3.pm.  This demonstrates that the source filter is implemented accross the full
depth of used packages.
.PP
When Moose uses a role with the word 'with' the Unhide process is not called.  You can get
around this by calling 'use My::Role' prior to 'with My::Role'.  The role will then be consumed
(implemented) by 'with' in it's stripped state.
.PP
This class takes unashamedly from Log::Log4perl::Resurrector.  Any mistakes are my
own and the genius is from there.  Log::Log4perl::Resurrector also credits the
Acme::Incorporated \s-1CPAN\s0 module, written by chromatic.
Of course none of it would be possible without Filter::Util::Call.  Long live \s-1CPAN\s0!
.PP
The point of using this module is to add lines that are only exposed some time.  However,
this makes it difficult to troubleshoot syntax errors in those lines using your favorite
editor or debuger when implementing the lines to begin with.  One way to resolve this is to
place two lines at the top of your code that will unhide those lines temporarily when you
are testing it and then either delelete or comment out the first line when releasing.  The
purpose of the first line is to unhide your lines for testing and the second will issue a
warning so you don't forget you are in dev mode.  An example is;
.PP
.Vb 2
\&    #~ use Log::Shiras::Unhide qw( :MyCoolUnhideStrinG );
\&    ###MyCoolUnhideStrinG       warn "You uncovered internal logging statements for My::Cool::Package\-$VERSION";
.Ve
.PP
If you choose to leave line two in then you also have an indication if the module was
implemented in a stripped fashion whenever you call it.
.PP
\&\s-1TL\s0;DR
.PP
This package definitly falls in the dark magic catagory and will only slow your code down.
Don't use it if you arn't willing to pay the price.  The value is all the interesting
information you receive from the exposed code.  While this does use Filter::Util::Call
to handle scrubbing the top level script. The included modules are scrubbed with a hook
into \f(CW@INC\fR <http://perldoc.perl.org/functions/require.html> \fIsearch for hook on that page\fR
The scrubbed modules are built and loaded via temporary files built with File::Temp.
In general this is a good think since File::Temp does a good job of garbage collection
the garbage collection fails when the code 'dies' or 'confesses..  If your code regularly
dies or fails while ~::Unhide is active it will leave a lot of orphaned files in the temp
directory.
.PP
This module also adds a startup hit to any processing where filtering is turned on and as
such should be used with caution, however, an attempt has been made to mitigate that by
excluding Module names matching the following regex;
.PP
.Vb 10
\&        qr/(
\&                ^Archive.Zip|           ^attributes|            ^AutoLoader|            ^B\e.pm|
\&                ^B.(Op_|Deparse)|       ^B.(Hooks)|                     ^Carp|                          ^Class|
\&                ^Clone|                         ^common|                        ^Compress.Raw|          ^Cwd|
\&                ^Data.OptList|          ^DateTime(?!X)|         ^Devel|                         ^Encode|
\&                ^Eval|                          ^Exporter|                      ^feature|                       ^File|
\&                ^Filter|                        ^if\e.pm|                        ^integer|                       ^IO.File|
\&                ^JSON|                          ^List|                          ^Log.Shiras.Unhide|     ^metaclass|
\&                ^Module|                        ^Moose(?!X)|            ^MooseX.Has|            ^MooseX.Non|
\&                ^MooseX.Singleton|      ^MooseX.Strict|         ^MooseX.Type|           ^MRO|
\&                ^namespace|                     ^Package|                       ^Params|                        ^parent|
\&                ^PerlIO|                        ^POSIX|                         ^re\e.pm|                        ^SelfLoader|
\&                ^SetDual|                       ^Smart|                         ^Sub|                           ^Test2|
\&                ^Tie|                           ^Text|                          ^Time.Local|            ^Try|
\&                ^Type|                          ^UNIVERSAL|                     ^utf8|                          ^Variable|
\&                ^Win32|                         ^XML|                           ^YAML
\&        )/x;
.Ve
.SS "Methods"
.IX Subsection "Methods"
This module does not provide any methods for the user other than what is called during 'use'.
(import) Private methods will not be documented.
.PP
\fIimport\fR
.IX Subsection "import"
.Sp
.RS 4
\&\fBDefinition:\fR perl auto calls import anytime the module is 'use'd.  In this case the import
statement will accept (first only and optional) a minimum version requirement in either v\-string or
decimal input.  It will also accept any number of text strings matched to the regex [A\-Za\-z]+
prepended with ':'.  These strings will be treated as case sensitive targets for this module
to find and expose the line behind them using a source filter.  It will look in 'use'd modules
and strip those lines as well.  The flags are transposed to include three '#'s without the colon.
There can be more than one passed flag and all will be implemented.  An example of the stripping
implementation of imported flags are;
.Sp
.Vb 1
\&        qw(:FooBar :Baz) \-> $line =~ s/^(\es*)###(FooBar|Baz)\es/$1/mg;
.Ve
.Sp
There is one special flag that is transposed
.Sp
.Vb 1
\&        :debug \-> strips \*(Aq###LogSD\*(Aq (for Log Shiras Debug)
.Ve
.Sp
The overall package eats its own dogfood and uses module specific flags starting with 'InternaL'.
See the source for each module to understand which flag is used.
.Sp
\&\fBAccepts:\fR \f(CW$VERSION\fR and colon prepended strip flags
.Sp
\&\fBReturns:\fR nothing, but it transforms files prior to use
.RE
.SH "Tags Available in CPAN"
.IX Header "Tags Available in CPAN"
This is a list (not comprehensive) of tags embedded in packages I have released to \s-1CPAN.\s0  Since
they require a source filter to uncover there should be minimal impact to using these packages
unless this class is used.
.Sp
.RS 4
\&\fB:InternalSwitchboarD\fR \- Log::Shiras::Switchboard
.Sp
\&\fB:InternalTelephonE\fR \- Log::Shiras::Telephone
.Sp
\&\fB:InternalTypeSShirasFormat\fR \- Log::Shiras::Types
.Sp
\&\fB:InternalTypeSFileHash\fR \- Log::Shiras::Types
.Sp
\&\fB:InternalTypeSReportObject\fR \- Log::Shiras::Types
.Sp
\&\fB:InternalLoGShiraSTesT\fR \- Log::Shiras::Test2
.Sp
\&\fB:InternalTaPPrinT\fR \- Log::Shiras::TapPrint
.Sp
\&\fB:InternalTaPWarN\fR \- Log::Shiras::TapWarn
.Sp
\&\fB:InternalReporTCSV\fR \- Log::Shiras::Report::CSVFile
.Sp
\&\fB:InternalBuilDInstancE\fR \- MooseX::ShortCut::BuildInstance
.Sp
\&\fB:InternalExtracteD\fR \- Data::Walk::Extracted
.Sp
\&\fB:InternalExtracteDGrafT\fR \- Data::Walk::Graft
.Sp
\&\fB:InternalExtracteDClonE\fR \- Data::Walk::Clone
.Sp
\&\fB:InternalExtracteDPrinT\fR \- Data::Walk::Print
.Sp
\&\fB::InternalExtracteDPrunE\fR \- Data::Walk::Prune
.Sp
\&\fB::InternalExtracteDDispatcH\fR \- Data::Walk::Extracted::Dispatch
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
Log\-Shiras/issues <https://github.com/jandrew/Log-Shiras/issues>
.RE
.SH "GLOBAL VARIABLES"
.IX Header "GLOBAL VARIABLES"
.IP "\fB\f(CB$ENV\fB{hide_warn}\fR" 4
.IX Item "$ENV{hide_warn}"
The module will warn when tags are passed to it so you have visibility to Unhide
actions.  In the case where the you don't want these notifications set this
environmental variable to true.
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing currently
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2014 \- 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
perl 5.010
.Sp
version
.Sp
File::Temp
.Sp
File::Spec
.Sp
Data::Dumper
.Sp
Filter::Util::Call
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Log::Log4perl::Resurrector
.Sp
Filter::Util::Call
.RE
