.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Selenium::ActionChains 3"
.TH Selenium::ActionChains 3 "2020-10-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Selenium::ActionChains \- Action chains for Selenium::Remote::Driver
.SH "VERSION"
.IX Header "VERSION"
version 1.38
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Selenium::Remote::Driver;
\&    use Selenium::ActionChains;
\&
\&    my $driver = Selenium::Remote::Driver\->new;
\&    my $action_chains = Selenium::ActionChains\->new(driver => $driver);
\&
\&    $driver\->get("http://www.some.web/site");
\&    my $elt_1 = $driver\->find_element("//*[\e@id=\*(Aqsomeid\*(Aq]");
\&    my $elt_2 = $driver\->find_element("//*[\e@id=\*(Aqsomeotherid\*(Aq]");
\&    $action_chains\->send_keys_to_element($elt_1)\->click($elt_2)\->perform;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements ActionChains for Selenium, which is a way of automating
low level interactions like mouse movements, mouse button actions , key presses and
context menu interactions.
The code was inspired by the Python implementation <http://selenium.googlecode.com/svn/trunk/docs/api/py/_modules/selenium/webdriver/common/action_chains.html#ActionChains>.
.SH "DRAG AND DROP IS NOT WORKING !"
.IX Header "DRAG AND DROP IS NOT WORKING !"
The implementation contains a drag_and_drop function, but due to Selenium limitations, it is not working <https://code.google.com/p/selenium/issues/detail?id=3604>.
.PP
Nevertheless, we decided to implement the function, because eventually one day it will work.
.PP
In the meantime, there are workarounds that can be used to simulate drag and drop, like this StackOverflow post <http://stackoverflow.com/questions/29381233/how-to-simulate-html5-drag-and-drop-in-selenium-webdriver-in-python>.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "new"
.IX Subsection "new"
Creates a new ActionChains object. Requires a Selenium::Remote::Driver as a mandatory parameter:
.PP
.Vb 2
\&    my $driver = Selenium::Remote::Driver\->new;
\&    my $action_chains = Selenium::ActionChains\->new(driver => $driver);
.Ve
.SS "perform"
.IX Subsection "perform"
Performs all the actions stored in the ActionChains object in the order they were called:
.PP
.Vb 1
\&    Args: None
\&
\&    Usage:
\&        my $action_chains = Selenium::ActionChains\->new(driver => $driver);
\&        # assuming that $some_element and $other_element are valid
\&        # Selenium::Remote::WebElement objects
\&        $action_chains\->click($some_element);
\&        $action_chains\->move_to_element($other_element);
\&        $action_chains\->click($other_element);
\&        # click some_element, move to other_element, then click other_element
\&        $action_chains\->perform;
.Ve
.SS "click"
.IX Subsection "click"
Clicks an element. If none specified, clicks on current mouse position.
.PP
.Vb 1
\&    Args: A Selenium::Remote::WebElement object
\&
\&    Usage:
\&        my $element = $driver\->find_element("//div[\e@id=\*(Aqsome_id\*(Aq]");
\&        $action_chains\->click($element);
.Ve
.SS "click_and_hold"
.IX Subsection "click_and_hold"
Holds down the left mouse button on an element. If none specified, clicks on current
mouse position.
.PP
.Vb 1
\&    Args: A Selenium::Remote::WebElement object
\&
\&    Usage:
\&        my $element = $driver\->find_element("//div[\e@id=\*(Aqsome_id\*(Aq]");
\&        $action_chains\->click_and_hold($element);
.Ve
.SS "context_click"
.IX Subsection "context_click"
Right clicks an element. If none specified, right clicks on current mouse
position.
.PP
.Vb 1
\&    Args: A Selenium::Remote::WebElement object
\&
\&    Usage:
\&        my $element = $driver\->find_element("//div[\e@id=\*(Aqsome_id\*(Aq]");
\&        $action_chains\->context_click($element);
.Ve
.SS "double_click"
.IX Subsection "double_click"
Double clicks an element. If none specified, double clicks on current mouse
position.
.PP
.Vb 1
\&    Args: A Selenium::Remote::WebElement object
\&
\&    Usage:
\&        my $element = $driver\->find_element("//div[\e@id=\*(Aqsome_id\*(Aq]");
\&        $action_chains\->double_click($element);
.Ve
.SS "drag_and_drop \- \s-1NOT WORKING\s0"
.IX Subsection "drag_and_drop - NOT WORKING"
Holds down the left mouse button on the source element, then moves to the target
element and releases the mouse button. \s-1IT IS NOT WORKING DUE TO CURRENT SELENIUM
LIMITATIONS.\s0
.PP
.Vb 3
\&    Args:
\&       A source Selenium::Remote::WebElement object
\&       A target Selenium::Remote::WebElement object
\&
\&    Usage:
\&        my $src_element = $driver\->find_element("//*[\e@class=\*(Aqfoo\*(Aq]");
\&        my $tgt_element = $driver\->find_element("//*[\e@class=\*(Aqbar\*(Aq]");
\&        $action_chains\->drag_and_drop($src_element,$tgt_element);
.Ve
.SS "drag_and_drop_by_offset \- \s-1NOT WORKING\s0"
.IX Subsection "drag_and_drop_by_offset - NOT WORKING"
Holds down the left mouse button on the source element, then moves to the offset
specified and releases the mouse button. \s-1IT IS NOT WORKING DUE TO CURRENT SELENIUM
LIMITATIONS.\s0
.PP
.Vb 4
\&    Args:
\&       A source Selenium::Remote::WebElement object
\&       An integer X offset
\&       An integer Y offset
\&
\&    Usage:
\&        my $src_element = $driver\->find_element("//*[\e@class=\*(Aqfoo\*(Aq]");
\&        my $xoffset = 10;
\&        my $yoffset = 10;
\&        $action_chains\->drag_and_drop($src_element,$xoffset,$yoffset);
.Ve
.SS "key_down"
.IX Subsection "key_down"
Sends key presses only, without releasing them.
Should be used only with modifier keys (Control, Alt, Shift)
.PP
.Vb 3
\&    Args:
\&        An array ref to keys to send. Use the KEY constant from Selenium::Remote::WDKeys
\&        The element to send keys to. If none, sends keys to the current focused element
\&
\&    Usage:
\&        use Selenium::Remote::WDKeys \*(AqKEYS\*(Aq;
\&        $action_chains\->key_down( [ KEYS\->{\*(Aqalt\*(Aq} ] );
.Ve
.SS "key_up"
.IX Subsection "key_up"
Releases a mofifier key.
.PP
.Vb 3
\&    Args:
\&        An array ref to keys to send. Use the KEY constant from Selenium::Remote::WDKeys
\&        The element to send keys to. If none, sends keys to the current focused element
\&
\&    Usage:
\&        use Selenium::Remote::WDKeys \*(AqKEYS\*(Aq;
\&        my $element = $driver\->find_element(\*(Aqfoo\*(Aq,\*(Aqid\*(Aq);
\&        $action_chains\->key_up( [ KEYS\->{\*(Aqalt\*(Aq} ],$element);
.Ve
.SS "move_by_offset"
.IX Subsection "move_by_offset"
Moves the mouse to an offset from current mouse position.
.PP
.Vb 3
\&    Args:
\&        An integer X offset
\&        An integer Y offset
\&
\&    Usage:
\&        $action_chains\->move_by_offset(10,100);
.Ve
.SS "move_to_element"
.IX Subsection "move_to_element"
Moves the mouse to the middle of an element
.PP
.Vb 2
\&    Args:
\&        A Selenium::Remote::WebElement to move to
\&
\&    Usage:
\&        my $element = $driver\->find_element(\*(Aqfoo\*(Aq,\*(Aqid\*(Aq);
\&        $action_chains\->move_to_element($element);
.Ve
.SS "move_to_element_with_offset"
.IX Subsection "move_to_element_with_offset"
Moves the mouse by an offset of the specified element.
Offsets are relative to the top-left corner of the element
.PP
.Vb 4
\&    Args:
\&        A Selenium::Remote::WebElement
\&        An integer X offset
\&        An integer Y offset
\&
\&    Usage:
\&        my $element = $driver\->find_element(\*(Aqfoo\*(Aq,\*(Aqid\*(Aq);
\&        $action_chains\->move_to_element_with_offset($element,10,10);
.Ve
.SS "release"
.IX Subsection "release"
Releases a held mouse_button
.PP
.Vb 2
\&    Args:
\&        A Selenium::Remote::WebElement, the element to mouse up
\&
\&    Usage:
\&        my $element = $driver\->find_element(\*(Aqfoo\*(Aq,\*(Aqid\*(Aq);
\&        $action_chains\->release($element);
.Ve
.SS "send_keys"
.IX Subsection "send_keys"
Sends keys to the currently focused element
.PP
.Vb 2
\&    Args:
\&        The keys to send
\&
\&    Usage:
\&        $action_chains\->send_keys(\*(Aqabcd\*(Aq);
.Ve
.SS "send_keys_to_element"
.IX Subsection "send_keys_to_element"
Sends keys to an element
.PP
.Vb 3
\&    Args:
\&        A Selenium::Remote::WebElement
\&        The keys to send
\&
\&    Usage:
\&        my $element = $driver\->find_element(\*(Aqfoo\*(Aq,\*(Aqid\*(Aq);
\&        $action_chains\->send_keys_to_element($element,\*(Aqabcd\*(Aq);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see those modules/websites for more information related to this module.
.IP "\(bu" 4
Selenium::Remote::Driver
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
<https://github.com/teodesian/Selenium\-Remote\-Driver/issues>
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH "AUTHORS"
.IX Header "AUTHORS"
Current Maintainers:
.IP "\(bu" 4
Daniel Gempesaw <gempesaw@gmail.com>
.IP "\(bu" 4
Emmanuel Peroumalnaïk <peroumalnaik.emmanuel@gmail.com>
.PP
Previous maintainers:
.IP "\(bu" 4
Luke Closs <cpan@5thplane.com>
.IP "\(bu" 4
Mark Stosberg <mark@stosberg.com>
.PP
Original authors:
.IP "\(bu" 4
Aditya Ivaturi <ivaturi@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2010\-2011 Aditya Ivaturi, Gordon Child
.PP
Copyright (c) 2014\-2017 Daniel Gempesaw
.PP
Licensed under the Apache License, Version 2.0 (the \*(L"License\*(R");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
.PP
http://www.apache.org/licenses/LICENSE\-2.0
.PP
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \*(L"\s-1AS IS\*(R" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\s0 either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
