.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Cisco::ACS::IdentityGroup 3"
.TH Net::Cisco::ACS::IdentityGroup 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Cisco::ACS::IdentityGroup \- Access Cisco ACS functionality through REST API \- IdentityGroup (usergroup) fields
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use Net::Cisco::ACS;
\&        use Net::Cisco::ACS::IdentityGroup;
\&        
\&        my $acs = Net::Cisco::ACS\->new(hostname => \*(Aq10.0.0.1\*(Aq, username => \*(Aqacsadmin\*(Aq, password => \*(AqtestPassword\*(Aq);
\&        my $identitygroup = Net::Cisco::ACS::IdentityGroup\->new("name"=>"All Groups:MilleniumCrew","description"=>"Han, Chewie, Finn and Rey");
\&
\&        my %identitygroups = $acs\->identitygroups;
\&        # Retrieve all identitygroups from ACS
\&        # Returns hash with name / Net::Cisco::ACS::IdentityGroup pairs
\&        
\&        print $acs\->identitygroups\->{"All Groups"}\->toXML;
\&        # Dump in XML format (used by ACS for API calls)
\&        
\&        my $identitygroup = $acs\->identitygroups("name","All Groups");
\&        # Faster call to request specific identity group information by name
\&
\&        my $identitygroup = $acs\->identitygroups("id","150");
\&        # Faster call to request specific identity group information by ID (assigned by ACS, present in Net::Cisco::ACS::IdentityGroup)
\&  
\&        $identitygroup\->id(0); # Required for new record!
\&        my $id = $acs\->create($identitygroup);
\&        # Create new identity group based on Net::Cisco::ACS::IdentityGroup instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        my $id = $acs\->update($identitygroup);
\&        # Update existing identitygroup based on Net::Cisco::ACS::IdentityGroup instance
\&        # Return value is ID generated by ACS
\&        print "Record ID is $id" if $id;
\&        print $Net::Cisco::ACS::ERROR unless $id;
\&        # $Net::Cisco::ACS::ERROR contains details about failure
\&
\&        $acs\->delete($identitygroup);
\&        # Delete existing identity group based on Net::Cisco::ACS::IdentityGroup instance
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Net::Cisco::ACS::IdentityGroup class holds all the user group relevant information from Cisco \s-1ACS 5\s0.x. See also the \f(CW\*(C`identitygroup\*(C'\fR method in Net::Cisco::ACS::User.
.SH "USAGE"
.IX Header "USAGE"
All calls are typically handled through an instance of the Net::Cisco::ACS class. Net::Cisco::ACS::User acts as a container for user related information.
.IP "new" 3
.IX Item "new"
Class constructor. Returns object of Net::Cisco::ACS::IdentityGroup on succes. The following fields can be set / retrieved:
.RS 3
.IP "description" 5
.IX Item "description"
.PD 0
.IP "name" 5
.IX Item "name"
.IP "id" 5
.IX Item "id"
.PD
Formatting rules may be in place & enforced by Cisco \s-1ACS.\s0
.RE
.RS 3
.RE
.IP "description" 3
.IX Item "description"
The identity group description.
.IP "name" 3
.IX Item "name"
The identity group name. This is a required value in the constructor but can be redefined afterwards. This value typically starts with \f(CW\*(C`All Groups\*(C'\fR as a parent group.
.IP "id" 3
.IX Item "id"
Cisco \s-1ACS\s0 generates a unique \s-1ID\s0 for each User record. This field cannot be updated within \s-1ACS\s0 but is used for reference. Set to 0 when creating a new record or when duplicating an existing identitygroup.
.IP "toXML" 3
.IX Item "toXML"
Dump the record in \s-1ACS\s0 accept \s-1XML\s0 formatting (without header).
.IP "header" 3
.IX Item "header"
Generate the correct \s-1XML\s0 header. Takes output of \f(CW\*(C`toXML\*(C'\fR as argument.
.SH "BUGS"
.IX Header "BUGS"
None so far
.SH "SUPPORT"
.IX Header "SUPPORT"
None so far :)
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&    Hendrik Van Belleghem
\&    CPAN ID: BEATNIK
\&    hendrik.vanbelleghem@gmail.com
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software licensed under the...
.PP
.Vb 2
\&        The General Public License (GPL)
\&        Version 2, June 1991
.Ve
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBperl\fR\|(1).
