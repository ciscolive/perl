.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::Opts 3"
.TH Data::Object::Opts 3 "2020-03-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::Opts
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Opts Class for Perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package main;
\&
\&  use Data::Object::Opts;
\&
\&  my $opts = Data::Object::Opts\->new(
\&    args => [\*(Aq\-\-resource\*(Aq, \*(Aqusers\*(Aq, \*(Aq\-\-help\*(Aq],
\&    spec => [\*(Aqresource|r=s\*(Aq, \*(Aqhelp|h\*(Aq],
\&    named => { method => \*(Aqresource\*(Aq } # optional
\&  );
\&
\&  # $opts\->method; # $resource
\&  # $opts\->get(\*(Aqresource\*(Aq); # $resource
\&
\&  # $opts\->help; # $help
\&  # $opts\->get(\*(Aqhelp\*(Aq); # $help
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides methods for accessing command-line arguments.
.SH "INTEGRATES"
.IX Header "INTEGRATES"
This package integrates behaviors from:
.PP
Data::Object::Role::Buildable
.PP
Data::Object::Role::Proxyable
.PP
Data::Object::Role::Stashable
.SH "LIBRARIES"
.IX Header "LIBRARIES"
This package uses type constraints from:
.PP
Types::Standard
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
This package has the following attributes:
.SS "args"
.IX Subsection "args"
.Vb 1
\&  args(ArrayRef[Str])
.Ve
.PP
This attribute is read-only, accepts \f(CW\*(C`(ArrayRef[Str])\*(C'\fR values, and is optional.
.SS "named"
.IX Subsection "named"
.Vb 1
\&  named(HashRef)
.Ve
.PP
This attribute is read-only, accepts \f(CW\*(C`(HashRef)\*(C'\fR values, and is optional.
.SS "spec"
.IX Subsection "spec"
.Vb 1
\&  spec(ArrayRef[Str])
.Ve
.PP
This attribute is read-only, accepts \f(CW\*(C`(ArrayRef[Str])\*(C'\fR values, and is optional.
.SH "METHODS"
.IX Header "METHODS"
This package implements the following methods:
.SS "exists"
.IX Subsection "exists"
.Vb 1
\&  exists(Str $key) : Any
.Ve
.PP
The exists method takes a name or index and returns truthy if an associated
value exists.
.IP "exists example #1" 4
.IX Item "exists example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->exists(\*(Aqresource\*(Aq); # truthy
.Ve
.IP "exists example #2" 4
.IX Item "exists example #2"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->exists(\*(Aqmethod\*(Aq); # truthy
.Ve
.IP "exists example #3" 4
.IX Item "exists example #3"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->exists(\*(Aqresources\*(Aq); # falsy
.Ve
.SS "get"
.IX Subsection "get"
.Vb 1
\&  get(Str $key) : Any
.Ve
.PP
The get method takes a name or index and returns the associated value.
.IP "get example #1" 4
.IX Item "get example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->get(\*(Aqresource\*(Aq); # users
.Ve
.IP "get example #2" 4
.IX Item "get example #2"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->get(\*(Aqmethod\*(Aq); # users
.Ve
.IP "get example #3" 4
.IX Item "get example #3"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->get(\*(Aqresources\*(Aq); # undef
.Ve
.SS "name"
.IX Subsection "name"
.Vb 1
\&  name(Str $key) : Any
.Ve
.PP
The name method takes a name or index and returns index if the the associated
value exists.
.IP "name example #1" 4
.IX Item "name example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->name(\*(Aqresource\*(Aq); # resource
.Ve
.IP "name example #2" 4
.IX Item "name example #2"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->name(\*(Aqmethod\*(Aq); # resource
.Ve
.IP "name example #3" 4
.IX Item "name example #3"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->name(\*(Aqresources\*(Aq); # undef
.Ve
.SS "parse"
.IX Subsection "parse"
.Vb 1
\&  parse(Maybe[ArrayRef] $config) : HashRef
.Ve
.PP
The parse method optionally takes additional Getopt::Long parser
configuration options and retuns the options found based on the object \f(CW\*(C`args\*(C'\fR
and \f(CW\*(C`spec\*(C'\fR values.
.IP "parse example #1" 4
.IX Item "parse example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->parse;
.Ve
.IP "parse example #2" 4
.IX Item "parse example #2"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->parse([\*(Aqbundling\*(Aq]);
.Ve
.SS "set"
.IX Subsection "set"
.Vb 1
\&  set(Str $key, Maybe[Any] $value) : Any
.Ve
.PP
The set method takes a name or index and sets the value provided if the
associated argument exists.
.IP "set example #1" 4
.IX Item "set example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->set(\*(Aqmethod\*(Aq, \*(Aqpeople\*(Aq); # people
.Ve
.IP "set example #2" 4
.IX Item "set example #2"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->set(\*(Aqresource\*(Aq, \*(Aqpeople\*(Aq); # people
.Ve
.IP "set example #3" 4
.IX Item "set example #3"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->set(\*(Aqresources\*(Aq, \*(Aqpeople\*(Aq); # undef
\&
\&  # is not set
.Ve
.SS "stashed"
.IX Subsection "stashed"
.Vb 1
\&  stashed() : HashRef
.Ve
.PP
The stashed method returns the stashed data associated with the object.
.IP "stashed example #1" 4
.IX Item "stashed example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $opts\->stashed;
.Ve
.SS "warned"
.IX Subsection "warned"
.Vb 1
\&  warned() : Num
.Ve
.PP
The warned method returns the number of warnings emitted during option parsing.
.IP "warned example #1" 4
.IX Item "warned example #1"
.Vb 1
\&  package main;
\&
\&  use Data::Object::Opts;
\&
\&  my $opts = Data::Object::Opts\->new(
\&    args => [\*(Aq\-vh\*(Aq],
\&    spec => [\*(Aqverbose|v\*(Aq, \*(Aqhelp|h\*(Aq]
\&  );
\&
\&  $opts\->warned;
.Ve
.SS "warnings"
.IX Subsection "warnings"
.Vb 1
\&  warnings() : ArrayRef[ArrayRef[Str]]
.Ve
.PP
The warnings method returns the set of warnings emitted during option parsing.
.IP "warnings example #1" 4
.IX Item "warnings example #1"
.Vb 1
\&  package main;
\&
\&  use Data::Object::Opts;
\&
\&  my $opts = Data::Object::Opts\->new(
\&    args => [\*(Aq\-vh\*(Aq],
\&    spec => [\*(Aqverbose|v\*(Aq, \*(Aqhelp|h\*(Aq]
\&  );
\&
\&  $opts\->warnings;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/data-object-opts/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/data-object-opts/wiki>
.PP
Project <https://github.com/iamalnewkirk/data-object-opts>
.PP
Initiatives <https://github.com/iamalnewkirk/data-object-opts/projects>
.PP
Milestones <https://github.com/iamalnewkirk/data-object-opts/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/data-object-opts/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/data-object-opts/issues>
