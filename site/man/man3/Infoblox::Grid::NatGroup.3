.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::NatGroup 3"
.TH Infoblox::Grid::NatGroup 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::NatGroup \- NAT Group object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1NAT\s0 Groups are necessary if the Grid master is behind a \s-1NAT\s0 device and there memberies behind both side of the \s-1NAT\s0 device. Any member on the same side as the master go into the same \s-1NAT\s0 group as the master and use their interface address for Grid communication with each other. Grid members on the other side of that \s-1NAT\s0 device do not go into the same \s-1NAT\s0 group as the master and use master's \s-1NAT\s0 address for Grid communication.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 5
\& #Constructor for an NAT Group object
\& my $nat_group = Infoblox::Grid::NatGroup\->new (
\&         name    => $string      #Required
\&         comment => $string      #Optional / Default is empty
\&     );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to be applied to an NatGroup object
.SS "Infoblox::Grid\->nat_group_list( )"
.IX Subsection "Infoblox::Grid->nat_group_list( )"
.RS 4
Use this function to specify a NatGroup. See Infoblox::Grid\->\fBnat_group_list()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Retrieve the list of NatGroup objects from Grid object.
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid",
\&     name   => "Infoblox" );
\&
\& my $Grid_obj = $retrieved_objs[0];
\&
\& # construct a NatGroup object
\& my $nat_group = Infoblox::Grid::NatGroup\->new (
\&         name => "my_nat_group",
\&         comment => "inside NAT device");
\&
\& # Modify Nat Group list.
\& $Grid_obj\->nat_group_list([$nat_group]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute value of a NatGroup.
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $nat_group\->comment();
\& #Modify comment
\& $nat_group\->comment("new comment");
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve a \s-1NAT\s0 group name
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired name in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get NAT group name
\& my $nat_group_name = $nat_group\->name();
\& #Modify NAT group name
\& $nat_group\->name("new_group_name");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to an object such as create, modify, and remove an object. This sample code also includes error handling for the operations.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Add a \s-1NAT\s0 Group object\fR
.PP
.Vb 12
\& my @result_array = $session\->get( "object" => "Infoblox::Grid", "name" => "Infoblox");
\& if( scalar( @result_array ) > 0 )
\&  {
\&         my $Grid_obj = $result_array[0];
\&         unless ($Grid_obj) {
\&                 die("Get Grid object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&         }
\&          # construct a NatGroup object
\&          my $nat_group = Infoblox::Grid::NatGroup\->new (
\&               name => "my_nat_group",
\&               comment => "inside NAT device");
\&
\&          # Add Nat Group to Grid object.
\&          $Grid_obj\->nat_group_list([$nat_group]);
\&
\&          $session\->modify($Grid_obj);
\&          print "NAT Group added to Grid object sucessfully\en";
\& }
.Ve
.PP
\&\fB#Modify existing \s-1NAT\s0 Group object\fR
.PP
.Vb 8
\& @result_array = $session\->get( "object" => "Infoblox::Grid", "name" => "Infoblox");
\& if( scalar( @result_array ) > 0 )
\&  {
\&         my $Grid_obj = $result_array[0];
\&         unless ($Grid_obj) {
\&                 die("Get Grid object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&         }
\&
\&          # get Nat Group from Grid object.
\&          my $nat_groups_list = $Grid_obj\->nat_group_list();
\&          my $nat_group = @{$nat_groups_list}[0];
\&
\&          #modify the NAT group name
\&          $nat_group\->name("new_nat_group_name");
\&
\&          # Add Nat Group to Grid object.
\&          $Grid_obj\->nat_group_list([$nat_group]);
\&
\&          $session\->modify($Grid_obj);
\&          print "NAT Group modified on Grid object sucessfully\en";
\& }
.Ve
.PP
\&\fB#Remove existing \s-1NAT\s0 Group object\fR
.PP
.Vb 8
\& @result_array = $session\->get( "object" => "Infoblox::Grid", "name" => "Infoblox");
\& if( scalar( @result_array ) > 0 )
\&  {
\&         my $Grid_obj = $result_array[0];
\&         unless ($Grid_obj) {
\&                 die("Get Grid object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&         }
\&
\&          # empty Nat Group list on Grid object.
\&          $Grid_obj\->nat_group_list([]);
\&
\&          $session\->modify($Grid_obj);
\&          print "NAT Group removed on Grid object sucessfully\en";
\& }
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
