.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::Template::Simple::API 3"
.TH Text::Template::Simple::API 3 "2018-12-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Template::Simple::API
.SH "VERSION"
.IX Header "VERSION"
version 0.91
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&   use Text::Template::Simple;
\&   my $tts = Text::Template::Simple\->new();
\&   print $tts\->compile( $FILEHANDLE );
\&   print $tts\->compile(\*(AqHello, your perl is at <%= $^X %>\*(Aq);
\&   print $tts\->compile(
\&            \*(Aqhello.tts\*(Aq, # the template file
\&            [ name => \*(AqBurak\*(Aq, location => \*(AqIstanbul\*(Aq ]
\&         );
.Ve
.PP
Where \f(CW\*(C`hello.tts\*(C'\fR has this content:
.PP
.Vb 4
\&   <% my %p = @_; %>
\&   Hello <%= $p{name} %>,
\&   I hope it\*(Aqs sunny in <%= $p{location} %>.
\&   Local time is <%= scalar localtime time %>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple template module. There is no extra template/mini 
language. Instead, it uses Perl as a template language. Templates
can be cached on disk or inside the memory via internal cache 
manager. It is also possible to use static/dynamic includes,
pass parameters to includes and allpt filters on them.
.SH "NAME"
Text::Template::Simple::API \- Simple text template engine API reference
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Creates a new template object and accepts several parameters.
.PP
\fIadd_args\fR
.IX Subsection "add_args"
.PP
ARRAYref. Can be used to add a global parameter list to the templates.
.PP
.Vb 3
\&   $tts = Text::Template::Simple\->new(
\&      add_args => [qw(foo bar baz)],
\&   );
.Ve
.PP
and then you can fetch them inside any template that is compiled with 
\&\f(CW$tts\fR object:
.PP
.Vb 6
\&   <%
\&      my $foo = shift;
\&      my $bar = shift;
\&      my $baz = shift;
\&   %>
\&   Foo is <%=$foo%>. Bar is <%=$bar%>. Baz is <%=$baz%>
.Ve
.PP
But it'll be logical to combine it with \f(CW\*(C`header\*(C'\fR parameter:
.PP
.Vb 4
\&   $tts = Text::Template::Simple\->new(
\&      header   => q~my $foo = shift;my $bar = shift;my $baz = shift;~,
\&      add_args => [qw(foo bar baz)],
\&   );
.Ve
.PP
and then you can use it inside any template that is compiled with 
\&\f(CW$tts\fR object without manually fetching all the time:
.PP
.Vb 1
\&   Foo is <%=$foo%>. Bar is <%=$bar%>. Baz is <%=$baz%>
.Ve
.PP
Can be useful, if you want to define a default object:
.PP
.Vb 4
\&   $tts = Text::Template::Simple\->new(
\&      header   => q~my $self = shift;~,
\&      add_args => [$my_default_object],
\&   );
.Ve
.PP
and then you can use it inside any template that is compiled with 
\&\f(CW$tts\fR object without manually fetching:
.PP
.Vb 1
\&   Foo is <%= $self\->{foo} %>. Test: <%= $self\->method(\*(Aqtest\*(Aq) %>
.Ve
.PP
\fIcache\fR
.IX Subsection "cache"
.PP
Pass this with a true value if you want the cache feature.
In-memory cache will be used unless you also pass a \*(L"cache_dir\*(R"
parameter.
.PP
\fIcache_dir\fR
.IX Subsection "cache_dir"
.PP
If you want disk-based cache, set this parameter to a valid
directory path. You must also set \*(L"cache\*(R" to a true value.
.PP
\fIcapture_warnings\fR
.IX Subsection "capture_warnings"
.PP
If enabled, the warnings generated by the template will be added to the end
of the output. This option is disabled by default.
.PP
\fIdelimiters\fR
.IX Subsection "delimiters"
.PP
Must be an array ref containing the two delimiter values: 
the opening delimiter and the closing delimiter:
.PP
.Vb 3
\&   $tts = Text::Template::Simple\->new(
\&      delimiters => [\*(Aq<?perl\*(Aq, \*(Aq?>\*(Aq],
\&   );
.Ve
.PP
Default values are \f(CW\*(C`<%\*(C'\fR and \f(CW\*(C`%>\*(C'\fR.
.PP
\fIheader\fR
.IX Subsection "header"
.PP
This is a string containing global elements (global to this particular
object) for templates. You can define some generally accessible variables
with this:
.PP
.Vb 3
\&   $tts = Text::Template::Simple\->new(
\&      header => q~ my $foo = "bar"; ~,
\&   );
.Ve
.PP
and then you can use it (without defining) inside any template that 
is compiled with \f(CW$tts\fR object:
.PP
.Vb 1
\&   Foo is <%=$foo%>
.Ve
.PP
\fIinclude_paths\fR
.IX Subsection "include_paths"
.PP
An \s-1ARRAY\s0 reference. If you want to use relative file paths when
compiling/including template files, add the paths of the templates with
this parameter.
.PP
\fIiolayer\fR
.IX Subsection "iolayer"
.PP
This option does not have any effect under perls older than \f(CW5.8.0\fR.
Set this to \f(CW\*(C`utf8\*(C'\fR (no initial colon) if your I/O is \f(CW\*(C`UTF\-8\*(C'\fR. 
Not tested with other encodings.
.PP
\fImonolith\fR
.IX Subsection "monolith"
.PP
Controls the behavior when using includes. If this is enabled, the template
and all it's includes will be compiled into a single document. If \f(CW\*(C`monolith\*(C'\fR
is disabled, then the includes will be compiled individually into separate
documents.
.PP
If you need to pass the main template variables (\f(CW\*(C`my\*(C'\fR vars) into dynamic
includes, then you need to enable this option. However, if you are using the
cache, then the included templates will not be updated automatically.
.PP
\&\f(CW\*(C`monolith\*(C'\fR is disabled by default.
.PP
\fIpre_chomp\fR
.IX Subsection "pre_chomp"
.PP
.Vb 7
\&   use Text::Template::Simple::Constants qw( :chomp );
\&   $pre = CHOMP_NONE; # no chomp
\&   $pre = CHOMP_ALL;  # remove all whitespace
\&   $pre = COLLAPSE_ALL; # replace all ws with a single space
\&   $tts = Text::Template::Simple\->new(
\&      pre_chomp => $pre,
\&   );
.Ve
.PP
\fIpost_chomp\fR
.IX Subsection "post_chomp"
.PP
.Vb 7
\&   use Text::Template::Simple::Constants qw( :chomp );
\&   $post = CHOMP_NONE; # no chomp
\&   $post = CHOMP_ALL;  # remove all whitespace
\&   $post = COLLAPSE_ALL; # replace all ws with a single space
\&   $tts = Text::Template::Simple\->new(
\&      post_chomp => $post,
\&   );
.Ve
.PP
\fIsafe\fR
.IX Subsection "safe"
.PP
Set this to a true value if you want to execute the template
code in a safe compartment. Disabled by default and highly 
experimental. This option can also disable some template 
features.
.PP
If you want to enable some unsafe conditions, you have to define 
\&\f(CW\*(C`Text::Template::Simple::Compiler::Safe::permit\*(C'\fR sub in
your controller code and return a list of permitted opcodes
inside that sub:
.PP
.Vb 4
\&   sub Text::Template::Simple::Compiler::Safe::permit {
\&      my $class = shift;
\&      return qw(:default :subprocess); # enable backticks and system
\&   }
.Ve
.PP
If this is not enough for you, you can define the safe compartment
all by yourself by defining 
\&\f(CW\*(C`Text::Template::Simple::Compiler::Safe::object\*(C'\fR:
.PP
.Vb 6
\&   sub Text::Template::Simple::Compiler::Safe::object {
\&      require Safe;
\&      my $safe = Safe\->new(\*(AqText::Template::Simple::Dummy\*(Aq);
\&      $safe\->permit(\*(Aq:browse\*(Aq);
\&      return $safe;
\&   }
.Ve
.PP
\&\f(CW\*(C`:default\*(C'\fR, \f(CW\*(C`require\*(C'\fR and \f(CW\*(C`caller\*(C'\fR are enabled opcodes, unless you 
define your own. You have to disable \f(CW\*(C`strict\*(C'\fR option
to disable \f(CW\*(C`require\*(C'\fR opcode. Disabling \f(CW\*(C`caller\*(C'\fR will also make
your \f(CW\*(C`require\*(C'\fR/\f(CW\*(C`use\*(C'\fR calls die in perl 5.9.5 and later.
.PP
See Safe and especially Opcode for opcode lists and 
other details.
.PP
\fIstack\fR
.IX Subsection "stack"
.PP
This option enables caller stack tracing for templates. The generated
list is sent to \f(CW\*(C`warn\*(C'\fR. So, it is possible to capture
this data with a signal handler. See Text::Template::Simple::Caller
for available options.
.PP
It is also possible to send the output to the template output buffer, if you
append \f(CW\*(C`:buffer\*(C'\fR to the type of the \f(CW\*(C`stack\*(C'\fR option:
.PP
.Vb 3
\&   $tts = Text::Template::Simple\->new(
\&      stack => \*(Aqstring:buffer\*(Aq,
\&   );
.Ve
.PP
\&\f(CW\*(C`html_comment\*(C'\fR is the same as \f(CW\*(C`string\*(C'\fR except that it also includes \s-1HTML\s0
comment markers. \f(CW\*(C`text_table\*(C'\fR needs the optional module \f(CW\*(C`Text::Table\*(C'\fR.
.PP
This option is also available to all templates as a function named
\&\f(CW\*(C`stack\*(C'\fR for individual stack dumping. See Text::Template::Simple::Dummy
for more information.
.PP
\fIstrict\fR
.IX Subsection "strict"
.PP
If has a true value, the template will be compiled under strict.
Enabled by default.
.PP
\fItaint_mode\fR
.IX Subsection "taint_mode"
.PP
You need to run your template controller with the \f(CW\*(C`\-T\*(C'\fR flag enabled. Then
you can set various taint mode options.
.PP
.Vb 3
\&   use Text::Template::Simple::Constants qw(:taint);
\&   my $tmode = TAINT_CHECK_FH_READ;
\&   my $restrict = Text::Template::Simple\->new( taint_mode => $tmode );
.Ve
.PP
With the \f(CW\*(C`:taint\*(C'\fR key, you'll get access to these constants (bitwise flags):
.PP
.Vb 3
\&   TAINT_CHECK_NORMAL    * Default
\&   TAINT_CHECK_WINDOWS   Some tests are disabled under Windows OS. Enable them
\&   TAINT_CHECK_FH_READ   FH must only be readable by the current user
.Ve
.PP
To have a more strict taint test:
.PP
.Vb 1
\&   $tmode = TAINT_CHECK_FH_READ | TAINT_CHECK_WINDOWS;
.Ve
.PP
However, note that this'll cause failures unless file mode is \f(CW600\fR. And it
will cause failures on Windows.
.PP
\fIverbose_errors\fR
.IX Subsection "verbose_errors"
.PP
If enabled, you'll get both the parsed structure and a tidied version of it in
the error messages. Disabled by default.
.PP
\fIwarn_ids\fR
.IX Subsection "warn_ids"
.PP
If enabled, the module will warn you about compile steps using 
template ids. You must both enable this and the cache. If
cache is disabled, no warnings will be generated.
.SS "compile \s-1DATA\s0 [, \s-1FILL_IN_PARAM, OPTIONS\s0]"
.IX Subsection "compile DATA [, FILL_IN_PARAM, OPTIONS]"
Compiles the template you have passed and manages template cache,
if you've enabled cache feature. Then it returns the compiled template.
Accepts three different types of data as the first parameter; 
a reference to a filehandle (\f(CW\*(C`GLOB\*(C'\fR), a string or a file path 
(path to the template file).
.PP
\fIFirst parameter (\s-1DATA\s0)\fR
.IX Subsection "First parameter (DATA)"
.PP
The first parameter can take four different values; a filehandle,
a string, a file path or explicit type definition via an \s-1ARRAY\s0 reference.
Distinguishing filehandles are easy, since
they'll be passed as a reference (but see the bareword issue below).
So, the only problem is distinguishing strings and file paths. 
\&\f(CW\*(C`compile\*(C'\fR first checks if the string length is equal or less than
255 characters and then tests if a file with this name exists. If
all these tests fail, the string will be treated as the template 
text.
.PP
File paths
.IX Subsection "File paths"
.PP
You can pass a file path as the first parameter:
.PP
.Vb 1
\&   $text = $tts\->compile(\*(Aq/my/templates/test.tts\*(Aq);
.Ve
.PP
Strings
.IX Subsection "Strings"
.PP
You can pass a string as the first parameter:
.PP
.Vb 5
\&   $text = $tts\->compile(q~
\&   <%for my $i (0..10) {%>
\&      counting <%=$i%>...
\&   <%}%>
\&   ~);
.Ve
.PP
Filehandles
.IX Subsection "Filehandles"
.PP
\&\f(CW\*(C`GLOB\*(C'\fRs must be passed as a reference. If you are using bareword 
filehandles, be sure to pass it's reference or it'll be treated as a 
file path and your code will probably \f(CW\*(C`die\*(C'\fR:
.PP
.Vb 4
\&   open MYHANDLE, \*(Aq/path/to/foo.tts\*(Aq or die "Error: $!";
\&   $text = $tts\->compile(\e*MYHANDLE); # RIGHT.
\&   $text = $tts\->compile( *MYHANDLE); # WRONG. Recognized as a file path
\&   $text = $tts\->compile(  MYHANDLE); # WRONG. Ditto. Dies under strict
.Ve
.PP
or use the standard \f(CW\*(C`IO::File\*(C'\fR module:
.PP
.Vb 4
\&   use IO::File;
\&   my $fh = IO::File\->new;
\&   $fh\->open(\*(Aq/path/to/foo.tts\*(Aq, \*(Aqr\*(Aq) or die "Error: $!";
\&   $text = $tts\->compile($fh);
.Ve
.PP
or you can use lexicals inside \f(CW\*(C`open\*(C'\fR if you don't care about 
compatibility with older perl:
.PP
.Vb 2
\&   open my $fh, \*(Aq/path/to/foo.tts\*(Aq or die "Error: $!";
\&   $text = $tts\->compile($fh);
.Ve
.PP
Filehandles will \fBnot\fR be closed.
.PP
Explicit Types
.IX Subsection "Explicit Types"
.PP
Pass an arrayref containing the type and the parameter to disable guessing
and forcing the type:
.PP
.Vb 3
\&   $text = $tts\->compile( [ FILE   => \*(Aq/path/to/my.tts\*(Aq] );
\&   $text = $tts\->compile( [ GLOB   => \e*MYHANDLE] );
\&   $text = $tts\->compile( [ STRING => \*(AqI am running under <%= $] %>\*(Aq] );
.Ve
.PP
Type can be one of these: \f(CW\*(C`FILE\*(C'\fR, \f(CW\*(C`GLOB\*(C'\fR, \f(CW\*(C`STRING\*(C'\fR.
.PP
\fI\s-1FILL_IN_PARAM\s0\fR
.IX Subsection "FILL_IN_PARAM"
.PP
An arrayref. Everything inside this will be accessible from the 
usual  \f(CW@_\fR array inside templates.
.PP
\fI\s-1OPTIONS\s0\fR
.IX Subsection "OPTIONS"
.PP
A hashref. Several template specific options can be set with
this parameter.
.PP
id
.IX Subsection "id"
.PP
Controls the cache id generation. Can be useful, if you want to 
pass your own template id. If false or set to \f(CW\*(C`AUTO\*(C'\fR, internal
mechanisms will be used to generate template keys.
.PP
map_keys
.IX Subsection "map_keys"
.PP
This will change the compiler behavior. If you enable this,
you can construct templates like this:
.PP
.Vb 1
\&   This is "<%foo%>", that is "<%bar%>" and the other is "<%baz%>"
.Ve
.PP
i.e.: only  the key names can be used instead of perl constructs.
and as you can see, "\f(CW\*(C`<%\*(C'\fR\*(L" is used instead of \*(R"\f(CW\*(C`<%=\*(C'\fR". 
\&\f(CW\*(C`map_keys\*(C'\fR also disables usage of perl constructs. Only bare words 
can be used and you don't have to \fIfetch\fR parameters via \f(CW@_\fR 
inside the template. Here is an example:
.PP
.Vb 12
\&   $text = $tts\->compile(
\&            q~This is "<%foo%>", that is "<%bar%>" 
\&              and the other is "<%baz%>"~,
\&            [
\&               foo => "blah 1",
\&               bar => "blah 2",
\&               baz => "blah 3",
\&            ],
\&            {
\&               map_keys => 1
\&            },
\&   );
.Ve
.PP
Can be good (and simple) for compiling i18n texts. If you don't use 
\&\f(CW\*(C`map_keys\*(C'\fR, the above code must be written as:
.PP
.Vb 9
\&   $text = $tts\->compile(
\&            q~<%my(%l) = @_%>This is "<%=$l{foo}%>", that is "<%=$l{bar}%>" 
\&              and the other is "<%=$l{baz}%>"~,
\&            [
\&               foo => "blah 1",
\&               bar => "blah 2",
\&               baz => "blah 3",
\&            ],
\&   );
.Ve
.PP
If \f(CW\*(C`map_keys\*(C'\fR is set to 'init', then the uninitialized values 
will be initialized to an empty string. But beware; \f(CW\*(C`init\*(C'\fR may cloak 
template errors. It'll silence \fIuninitialized\fR warnings, but
can also make it harder to detect template errors.
.PP
If \f(CW\*(C`map_keys\*(C'\fR is set to 'check', then the compiler will check for
the key's existence and check if it is defined or not.
.PP
chkmt
.IX Subsection "chkmt"
.PP
If you are using file templates (i.e.: not \s-1FH\s0 or not string) and you 
set this to a true value, modification time of templates will be checked
and compared for template change.
.SS "cache"
.IX Subsection "cache"
Returns the Text::Template::Simple::Cache object.
.SS "io"
.IX Subsection "io"
Returns the Text::Template::Simple::IO object.
.SS "connector"
.IX Subsection "connector"
Returns the class name of the supplied connector.
.SS "class_id"
.IX Subsection "class_id"
Returns a class identifier.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
These are all global (i.e.: not local to any particular object).
.SS "\s-1DEBUG\s0"
.IX Subsection "DEBUG"
Used to enable/disable debugging. Debug information 
is generated as warnings:
.PP
.Vb 3
\&   Text::Template::Simple\->DEBUG(1); # enable
\&   Text::Template::Simple\->DEBUG(0); # disable
\&   Text::Template::Simple\->DEBUG(2); # more verbose
.Ve
.PP
\&\f(CW\*(C`DEBUG\*(C'\fR is disabled by default.
.SS "\s-1DIGEST\s0"
.IX Subsection "DIGEST"
Returns the digester object:
.PP
.Vb 2
\&   $digester = Text::Template::Simple\->DIGEST;
\&   print $digester\->add($data)\->hexdigest;
.Ve
.SH "CACHE MANAGER"
.IX Header "CACHE MANAGER"
Cache manager has two working modes. It can use disk files or
memory for the storage. Memory based cache is far more faster
than disk cache.
.PP
The template text is first parsed and compiled into an anonymous
perl sub source. Then an unique key is generated from your source 
data (you can by-pass key generation phase if you supply your own id 
parameter).
.PP
If in-memory cache is used, the perl source will be 
compiled into an anonymous sub inside the in-memory cache hash
and this compiled version will be used instead of continiously
parsing/compiling the same template.
.PP
If disk cache is used, a template file with the "\f(CW\*(C`.tts.cache\*(C'\fR"
extension will be generated on the disk.
.PP
Using cache is recommended under persistent environments like 
\&\f(CW\*(C`mod_perl\*(C'\fR and \f(CW\*(C`PerlEx\*(C'\fR.
.PP
In-memory cache can use two or three times more space than disk-cache, 
but it is far more faster than disk cache. Disk cache can also be slower
than no-cache for small templates, since there is a little overhead 
when generating unique keys with the \*(L"\s-1DIGESTER\*(R"\s0 and also there will
be a disk I/O. There is a modification time check option for disk
based templates (see compile).
.SH "DIGESTER"
.IX Header "DIGESTER"
Cache keys are generated with one of these modules:
.PP
.Vb 7
\&   Digest::SHA
\&   Digest::SHA1
\&   Digest::SHA2
\&   Digest::SHA::PurePerl
\&   Digest::MD5
\&   MD5
\&   Digest::Perl::MD5
.Ve
.PP
\&\s-1SHA\s0 algorithm seems to be more reliable for key generation, but
md5 is widely available and \f(CW\*(C`Digest::MD5\*(C'\fR is in \s-1CORE.\s0
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "tts [ \s-1NEW_ARGS,\s0 ] \s-1COMPILE_ARGS\s0"
.IX Subsection "tts [ NEW_ARGS, ] COMPILE_ARGS"
This function is a wrapper around the Text::Template::Simple object. It
creates it's own temporary object behind the scenes and can be used for
quick Perl one-liners for example. Using this function other than testing is
not recommended.
.PP
\&\f(CW\*(C`NEW_ARGS\*(C'\fR is optional and must be a hashref containing the parameters to
\&\*(L"new\*(R". \f(CW\*(C`COMPILE_ARGS\*(C'\fR is a list and everything it contains will be passed
to the \*(L"compile\*(R" method.
.PP
It is possible to import this function to your namespace:
.PP
.Vb 3
\&   use Text::Template::Simple qw( tts );
\&   print tts("<%= scalar localtime time %>");
\&   print tts( { strict => 1 }, "<%= scalar localtime time %>");
.Ve
.SH "CAVEATS"
.IX Header "CAVEATS"
Taint checking on filehandles have limited tests under Windows. Since file
permission is always \f(CW0666\fR, g\-o read & g\-o write tests are disabled under
Windows and g\-o read taint checking is also disabled by default on all
platforms. However, it is possible to force to enable those. See taint_mode
for more information.
.PP
\&\f(CW\*(C`monolith\*(C'\fR option can not be used with interpolated includes. You'll need to
use the \f(CW\*(C`SHARE\*(C'\fR commad instead to explicitly share variables with includes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Text::Template::Simple.
.SH "AUTHOR"
.IX Header "AUTHOR"
Burak Gursoy <burak@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Burak Gursoy.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
