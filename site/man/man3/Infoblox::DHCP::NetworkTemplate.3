.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::NetworkTemplate 3"
.TH Infoblox::DHCP::NetworkTemplate 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::NetworkTemplate \- DHCP Network Template object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You can use a template to create networks in a quick and consistent way. Networks created from a network template inherit all the properties defined in the network template, except for the comment and netmask if they are defined in the network.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $network_template = Infoblox::DHCP::NetworkTemplate\->new(
\&        name                            => $string,                                                 #Required
\&        allow_any_netmask               => "true" | "false",                                        #Optional / Default is "false"
\&        authority                       => "true" | "false",                                        #Optional / Default is "false"
\&        auto_create_reversezone         => "true" | "false"                                         #Optional / Default is "false"
\&        bootfile                        => $filename | undef,                                       #Optional / Default is undefined
\&        bootserver                      => $ipv4addr | $fqdn | undef,                               #Optional / Default is undefined
\&        comment                         => $string,                                                 #Optional / Default is empty
\&        ddns_domainname                 => $string | undef,                                         #Optional / Default is undefined
\&        ddns_generate_hostname          => "true" | "false" | undef,                                #Optional / Default is undefined
\&        ddns_update_fixed_addresses     => "true" | "false" | undef,                                #Optional / Default is undefined
\&        ddns_server_always_updates      => "true" | "false",                                        #Optional / Default is "true"
\&        ddns_ttl                        => $num,                                                    #Optional / Default is 0
\&        ddns_use_option81               => "true" | "false" | undef,                                #Optional / Default is undefined
\&        deny_bootp                      => "true" | "false" | undef,                                #Optional / Default undefined
\&        email_list                      => [ "admin\e@test.com",...],                                #Optional / Default is undefined
\&        enable_ddns                     => "true" | "false" | undef,                                #Optional / Default is undefined
\&        enable_dhcp_thresholds          => "true" | "false",                                        #Optional / Default is undefined
\&        enable_email_warnings           => "true" | "false",                                        #Optional / Default is undefined
\&        enable_snmp_warnings            => "true" | "false",                                        #Optional / Default is undefined
\&        extattrs                        => { $string => $extattr, ... },                            #Optional / Default is undefined
\&        extensible_attributes           => { $string => $string | $num, $string => [ $string | $num, ... ], ... }, #Required if \*(Aqrir_organization\*(Aq attribute is defined
\&                                                                                                                   #Otherwise is optional
\&        fixed_address_templates         => [$FixedAddrTemplate1,$FixedAddrTemplate2,...]            #Optional / Default is empty
\&        high_water_mark                 => $number,                                                 #Optional / Default is "95"
\&        high_water_mark_reset           => $number,                                                 #Optional / Default is "95"
\&        ignore_dhcp_option_list_request => "true" | "false" | undef,                                #Optional / Default is undefined
\&        lease_scavenge_time             => $number,                                                 #Optional / Default is \-1
\&        low_water_mark                  => $number,                                                 #Optional / Default is "0"
\&        low_water_mark_reset            => $number,                                                 #Optional / Default is "0"
\&        members                         => [$Member1,$Member2,...],                                 #Optional / Default is empty
\&        netmask                         => $netmask,                                                #Optional / Default is /8
\&        nextserver                      => $ipv4addr | $fqdn | undef,                               #Optional / Default is undefined
\&        options                         => [$Option1,$Option2,...]                                  #Optional / Default is empty
\&        override_ddns_ttl               => "true" | "false",                                        #Optional / Default value is "false"
\&        override_ddns_domainname        => "true" | "false",                                        #Optional / Default value is "false"
\&        override_lease_scavenge_time    => "true" | "false",                                        #Optional / Default value is "false"
\&        override_update_dns_on_lease_renewal  => "true" | "false",                                  #Optional / Default value is "false"
\&        pxe_lease_time                  => $num | undef,                                            #Optional / Default is undefined
\&        range_templates                 => [$RangeTemplate1,$RangeTemplate2,...],                   #Optional / Default is empty
\&        recycle_leases                  => "true" | "false" | undef,                                #Optional / Default is undefined
\&        rir_organization                => $rir_org,                                                #Optional / An Infoblox::Grid::RIR::Organization object
\&        rir_registration_action         => \*(AqNONE\*(Aq | \*(AqCREATE\*(Aq,                                       #Optional / Default is \*(AqNONE\*(Aq
\&        rir_registration_status         => \*(AqNOT_REGISTERED\*(Aq | \*(AqREGISTERED\*(Aq,                         #Optional / Default is \*(AqNOT_REGISTERED\*(Aq
\&        send_rir_request                => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                                        #Optional / Default is \*(Aqfalse\*(Aq
\&        update_dns_on_lease_renewal     => "true" | "false",                                        #Optional / Default value is "false"
\&        ipam_trap_settings               => $ipam_trap,                                             #Optional / An Infoblox::Grid::SNMP::IPAMTrap object
\&        override_ipam_trap_settings      => "true" | "false",                                       #Optional / Default value is "false"
\&        ipam_threshold_settings          => $ipam_threshold,                                        #Optional / An Infoblox::Grid::SNMP::IPAMThreshold object
\&        override_ipam_threshold_settings => "true" | "false",                                       #Optional / Default value is "false"
\&        ipam_email_addresses             => [$email1, $email2, ...],                                #Optional / Default is an empty list
\&        override_ipam_email_addresses    => "true" | "false",                                       #Optional / Default value is "false"
\&        logic_filters                    => [ $filter_name | $filter_obj, ...], # Optional / Default is undefined
\&        override_logic_filters           => "true\*(Aq | \*(Aqfalse",                   # Optional / Default value is "false"
\&          );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a \s-1DHCP\s0 Network Template object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a network template object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\&     #Construct an object
\&     my $network_template = Infoblox::DHCP::NetworkTemplate\->new(
\&            name              => "custom_network_template",
\&            allow_any_netmask => "true",
\&     );
\&
\&     # Submit for adding network template
\&     my $response = $session\->add( $network_template );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve the matching network template objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\&     Apply the following attributes to get a specific DHCP Network template object:
\&
\&      name \- Required. The name of network template.
\&      extattrs     \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&      my  @result_array = $session\->get(
\&           object  => "Infoblox::DHCP::NetworkTemplate" ,
\&           name    => "custom_network_template"
\&      );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to retrieve all the matching network template objects from the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\&     Apply the following attributes to search for a specific DHCP Network Template object:
\&
\&      name    \- Optional. The name of the network template (regular
\&                expression).
\&      comment \- Optional. The comment of the network template (regular
\&                expression).
\&      extattrs     \- Optional. A hash reference containing extensible attributes.
\&      extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\&      my  @result_array = $session\->search(
\&           object  => "Infoblox::DHCP::NetworkTemplate" ,
\&           name    => "custom_network_template"
\&       comment => ".*",
\&      );
\&
\&      # search all Network Templates with a given extensible attribute \*(AqSite\*(Aq
\&      my @retrieved_objs = $session\->search(
\&        object => "Infoblox::DHCP::NetworkTemplate",
\&        extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a network template object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Use method to modify enable_ddns method.
\&     $object\->enable_ddns("true");
\&     # Submit modification
\&     my $response = $session\->modify( $object );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&     # Get the object under the same name
\&     my  @result_array = $session\->get(
\&
\&           object => "Infoblox::DHCP::NetworkTemplate" ,
\&           name   => "custom_network_template"
\&      );
\&
\&     # find the desired object from retrieved list.
\&     my $desired_network_template = $result_array[0];
\&
\&     # Submit for removal
\&     my $response = $session\->remove( $desired_network_template );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute values of a \s-1DHCP\s0 Network template object
.SS "allow_any_netmask( )"
.IX Subsection "allow_any_netmask( )"
.RS 4
Use this method to set or retrieve the allow_any_netmask parameter of a \s-1DHCP\s0 network template object. If you set this parameter to \*(L"true\*(R", then the template allows any netmask. A user must specify a netmask when creating a network using this template. If you set this parameter to false, you must specify the \*(L"netmask\*(R" property for the network template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the allow_any_netmask parameter or specify \*(L"false\*(R" if you want to specify a particular netmask. The default value is false.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     # Get allow_any_netmask
\&     my $allow_any_netmask = $network_template\->allow_any_netmask()
\&     # Modify allow_any_netmask
\&     $network_template\->allow_any_netmask("true");
.Ve
.RE
.RS 4
.RE
.SS "authority( )"
.IX Subsection "authority( )"
.RS 4
Use this method to set or retrieve the authority flag of a \s-1DHCP\s0 network template object. This flag specifies if a \s-1DHCP\s0 server is authoritative for the network.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the authority flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined which indicates that this attribute inherits the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     # Get authority
\&     my $authority = $network_template\->authority()
\&     # Modify authority
\&     $network_template\->authority("true");
.Ve
.RE
.RS 4
.RE
.SS "auto_create_reversezone( )"
.IX Subsection "auto_create_reversezone( )"
.RS 4
Use this method to set or retrieve the auto_create_reversezone flag of a \s-1DHCP\s0 network template object. This flag indicates whether the appliance must automatically create the corresponding reverse zone.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to create a reverse zone automatically or \*(L"false\*(R" to disable the automatic creation of a reverse zone.The default value for this field is false.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     # Get auto_create_reversezone
\&     my $auto_create_reversezone = $network_template\->auto_create_reversezone();
\&     # Modify auto_create_reversezone
\&     $network_template\->auto_create_reversezone("true");
.Ve
.RE
.RS 4
.RE
.SS "bootfile( )"
.IX Subsection "bootfile( )"
.RS 4
Use this method to set or retrieve the bootfile attribute of a \s-1DHCP\s0 network template object. You can configure the \s-1DHCP\s0 server to support clients that use the boot file name option in their \s-1DHCPREQUEST\s0 messages. The default value is undefined which indicates that this attribute inherits the upper-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::NetworkTemplate\->\fBbootserver()\fR and Infoblox::DHCP::NetworkTemplate\->\fBnextserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name, in string format, of the file that the client must download. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     # Get bootfile
\&     my $bootfile = $network_template\->bootfile();
\&     # Modify bootfile
\&     $network_template\->bootfile("bootfile1");
\&     #Un\-override bootfile
\&     $network_template\->bootfile(undef);
.Ve
.RE
.RS 4
.RE
.SS "bootserver( )"
.IX Subsection "bootserver( )"
.RS 4
Use this method to set or retrieve the boot server attribute of a \s-1DHCP\s0 network template object. You can specify the name of the boot server on which the boot file is stored. The default value is undefined which indicates that this attribute inherits the upper-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::NetworkTemplate\->\fBbootfile()\fR and Infoblox::DHCP::NetworkTemplate\->\fBnextserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The next server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A next server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     # Get bootserver
\&     my $bootserver = $network_template\->bootserver();
\&     # Modify bootserver
\&     $network_template\->bootserver("abc.domain.com");
\&     #Un\-override bootserver
\&     $network_template\->bootserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment about a \s-1DHCP\s0 network template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter a descriptive comment for the network template in string format with a maximum of 256 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     # Get comment
\&     my $comment = $network_template\->comment();
\&     # Modify comment
\&     $network_template\->comment("add a network");
.Ve
.RE
.RS 4
.RE
.SS "ddns_domainname( )"
.IX Subsection "ddns_domainname( )"
.RS 4
Use this method to set or retrieve the ddns_domainname value of a \s-1DHCP\s0 Network template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_domainname method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_ddns_domainname attribute to \*(L"false\*(R".
.Sp
Note that when ddns_domainname is set to a defined value and override_dddns_domainname is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); will set override_ddns_domainname to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_domainname(\*(L"false\*(R"); \f(CW$object\fR\->ddns_domainname(\*(L"testdomain\*(R"); will result in override_ddns_domainname=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The dynamic \s-1DNS\s0 domain name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ddns_domainname
\& my $ddns_domainname = $network_template\->ddns_domainname();
\& #Modify ddns_domainname
\& $network_template\->ddns_domainname("test_domain.com");
.Ve
.RE
.RS 4
.RE
.SS "ddns_generate_hostname( )"
.IX Subsection "ddns_generate_hostname( )"
.RS 4
Use this method to set or retrieve the ddns_generate_hostname flag of a \s-1DHCP\s0 network template object. Set this flag to allow only the \s-1DHCP\s0 server to generate a host name. This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to generate hostname or \*(L"false\*(R" to deactivate/unset it. The default value is undefined which indicates that this attribute inherits the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     # Get ddns_generate_hostname
\&     my $ddns_generate_hostname = $network_template\->ddns_generate_hostname()
\&     # Modify ddns_generate_hostname
\&     $network_template\->ddns_generate_hostname("true");
\&     #Un\-override
\&     $network_template\->ddns_generate_hostname(undef);
.Ve
.RE
.RS 4
.RE
.SS "ddns_update_fixed_addresses( )"
.IX Subsection "ddns_update_fixed_addresses( )"
.RS 4
Use this method to set or retrieve the ddns_update_fixed_addresses flag of a \s-1DHCP\s0 network template object. By default, the \s-1DHCP\s0 server does not update \s-1DNS\s0 when it allocates a fixed address to a client. You can configure the \s-1DHCP\s0 server to update the A and \s-1PTR\s0 records of a client with a fixed address. When this feature is enabled and the \s-1DHCP\s0 server adds A and \s-1PTR\s0 records for a fixed address, the \s-1DHCP\s0 server never discards the records. This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to update \s-1DNS\s0 when it allocates a fixed address to a client or \*(L"false\*(R" to deactivate/unset it. The default value is undefined which indicates that this attribute inherits the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     # Get ddns_update_fixed_addresses
\&     my $ddns_update_fixed_addresses= $network_template\->ddns_update_fixed_addresses()
\&     # Modify ddns_update_fixed_addresses
\&     $network_template\->ddns_update_fixed_addresses("true");
\&     #Un\-override
\&     $network_template\->ddns_update_fixed_addresses(undef);
.Ve
.RE
.RS 4
.RE
.SS "ddns_server_always_updates( )"
.IX Subsection "ddns_server_always_updates( )"
.RS 4
Use this method to set or retrieve the ddns_server_always_updates flag of a \s-1DHCP\s0 network template object. Set this flag to allow the \s-1DHCP\s0 server only to update \s-1DNS,\s0 regardless of the requests from \s-1DHCP\s0 clients.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set this flag and allow the \s-1DHCP\s0 server only to update \s-1DNS\s0 or \*(L"false\*(R" to deactivate/unset the flag. The default value is true.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     # Get ddns_server_always_updates
\&     my $ddns_server_always_updates = $network_template\->ddns_server_always_updates()
\&     # Modify ddns_server_always_updates
\&     $network_template\->ddns_server_always_updates("true");
.Ve
.RE
.RS 4
.RE
.SS "ddns_ttl( )"
.IX Subsection "ddns_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 update Time to Live (\s-1TTL\s0) value of a \s-1DHCP\s0 network template object. The \s-1TTL\s0 value indicates the number of seconds the Infoblox appliance caches a \s-1DDNS\s0 update.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_ddns_ttl method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_ddns_ttl attribute to \*(L"false\*(R".
.Sp
Note that when ddns_ttl is set to a defined value and override_dddns_ttl is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ddns_ttl(12); \f(CW$object\fR\->override_ddns_ttl(\*(L"false\*(R"); will set override_ddns_ttl to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ddns_ttl(\*(L"false\*(R"); \f(CW$object\fR\->ddns_ttl(12); will result in override_ddns_ttl=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration, in seconds, that the update is cached. Zero indicates that the update should not be cached. The default value is 0.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get DNS Update ttl
\&     my $dns_ttl = $network_template\->ddns_ttl();
\&     #Modify DNS Update ttl
\&     $network_template\->ddns_ttl(1200);
.Ve
.RE
.RS 4
.RE
.SS "ddns_use_option81( )"
.IX Subsection "ddns_use_option81( )"
.RS 4
Use this method to set or retrieve the ddns_use_option81 flag of a \s-1DHCP\s0 network template object. Enable this method to define the settings for option 81 at the network template level. This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable support for option 81 or \*(L"false\*(R" to disable support. The default value is undefined which indicates that this attribute inherits the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     # Get ddns_use_option81
\&     my $ddns_use_option81 = $network_template\->ddns_use_option81()
\&     # Modify ddns_use_option81
\&     $network_template\->ddns_use_option81("true");
\&     # un\-override ddns_use_option81
\&     $network_template\->ddns_use_option81(undef);
.Ve
.RE
.RS 4
.RE
.SS "deny_bootp( )"
.IX Subsection "deny_bootp( )"
.RS 4
Use this method to set or retrieve the deny_bootp flag of a \s-1DHCP\s0 Network object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the deny_bootp flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined which indicates that this attribute inherits the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get deny_bootp
\& my $deny_bootp = $network\->deny_bootp();
\& #Modify deny_bootp
\& $network\->deny_bootp("true");
.Ve
.RE
.RS 4
.RE
.SS "email_list( )"
.IX Subsection "email_list( )"
.RS 4
Use this method to set or retrieve the e\-mail lists to which the appliance sends threshold e\-mail messages.
.Sp
If you enter e\-mail addresses in the email_list, then the appliance sends \s-1DHCP\s0 threshold alarms to the e\-mail addresses.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains string objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get email_list
\& my @email_list = $network_template\->email_list();
\& #Modify email_list
\& $network_template\->email_list( [ "admin\e@test.com" ] );
.Ve
.RE
.RS 4
.RE
.SS "enable_ddns( )"
.IX Subsection "enable_ddns( )"
.RS 4
Use this method to set or retrieve the dynamic \s-1DNS\s0 updates flag of a \s-1DHCP\s0 network template object. The \s-1DHCP\s0 server can send \s-1DDNS\s0 updates to \s-1DNS\s0 servers in the same grid and to external \s-1DNS\s0 servers. This setting overrides the upper-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the dynamic \s-1DNS\s0 updates flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined which indicates that this attribute inherits the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     # Get enable_ddns
\&     my $enable_ddns = $network_template\->enable_ddns()
\&     # Modify enable_ddns
\&     $network_template\->enable_ddns("true");
\&     # Un\-override enable_ddns
\&     $network_template\->enable_ddns(undef);
.Ve
.RE
.RS 4
.RE
.SS "enable_dhcp_thresholds( )"
.IX Subsection "enable_dhcp_thresholds( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 thresholds of a network template object. These thresholds are the high and low watermarks. If \s-1DHCP\s0 range usage goes above or below these percentage values, the Infoblox appliance generates a syslog message and sends an \s-1SNMP\s0 notification.
.Sp
Enable this flag to set \s-1DHCP\s0 threshold values.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_dhcp_thresholds flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_dhcp_thresholds
\& my $enable_dhcp_thresholds = $network_template\->enable_dhcp_thresholds();
\& #Modify enable_dhcp_thresholds
\& $network_template\->enable_dhcp_thresholds("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_email_warnings( )"
.IX Subsection "enable_email_warnings( )"
.RS 4
Use this method to send \s-1DHCP\s0 thresholds warnings through e\-mail.
.Sp
Enable this flag if you want the appliance to send \s-1DHCP\s0 threshold warnings to the \*(L"email_list\*(R" provided when \s-1DHCP\s0 threshold is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
+Specify \*(L"true\*(R" to set the enable_email_warnings flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_email_warnings
\& my $enable_email_warnings = $network_template\->enable_email_warnings();
\& #Modify enable_email_warnings
\& $network_template\->enable_email_warnings("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_snmp_warnings( )"
.IX Subsection "enable_snmp_warnings( )"
.RS 4
Use this method to send \s-1DHCP\s0 threshold warnings through \s-1SNMP.\s0
.Sp
If the flag is enabled, then the appliance sends \s-1DHCP\s0 threshold warnings through \s-1SNMP\s0 messages when \s-1DHCP\s0 threshold is enabled.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_snmp_warnings flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_snmp_warnings
\& my $enable_snmp_warnings = $network_template\->enable_snmp_warnings();
\& #Modify enable_snmp_warnings
\& $network_template\->enable_snmp_warnings("false");
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Network Template object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $network_template\->extattrs();
\& #Modify extattrs
\& $network_template\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Network Template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $network_template\->extensible_attributes();
\& #Modify extensible attributes
\& $network_template\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "fixed_address_templates( )"
.IX Subsection "fixed_address_templates( )"
.RS 4
Use this method to set or retrieve the fixed address template assigned to this network template object. When you create a network based on a network template object with a fixed address template, the fixed addresses are created based on the associated fixed address template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference of  Infoblox::DHCP::Template objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\&     # Get fixed_address_templates
\&     my $fixed_address_templates = $network_template\->fixed_address_templates();
\&     # Modify fixed_address_templates
\&     my $tmpl = Infoblox::DHCP::Template\->new(
\&        name => "custom_fixed_address_template"
\&     );
\&     $network_template\->fixed_address_templates([$tmpl]);
.Ve
.RE
.RS 4
.RE
.SS "high_water_mark( )"
.IX Subsection "high_water_mark( )"
.RS 4
Use this method to set the percentage value for \s-1DHCP\s0 range usage above which the Infoblox appliance generates a syslog message and sends a warning.
.Sp
When the percent of allocated addresses in a \s-1DHCP\s0 range exceeds the high_water_mark, the appliance generates a syslog message and sends a warning.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get high_water_mark
\& my $high_water_mark = $network_template\->high_water_mark();
\& #Modify high_water_mark
\& $network_template\->high_water_mark("80");
.Ve
.RE
.RS 4
.RE
.SS "high_water_mark_reset( )"
.IX Subsection "high_water_mark_reset( )"
.RS 4
Use this method to set or retrieve the high_water_mark_reset value. If the percentage of allocated addresses drops below this value, the corresponding \s-1SNMP\s0 trap is reset.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The high watermark reset value must be lower than the high water mark value. The default value is 95.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get high_water_mark_reset
\& my $high_water_mark_reset = $network_template\->high_water_mark_reset();
\& #Modify high_water_mark_reset
\& $network_template\->high_water_mark_reset(70);
.Ve
.RE
.RS 4
.RE
.SS "ignore_dhcp_option_list_request( )"
.IX Subsection "ignore_dhcp_option_list_request( )"
.RS 4
Use this method to set or retrieve the ignore_dhcp_option_list_request flag of a \s-1DHCP\s0 network template object. Set this flag to ignore option lists requested by clients and return all defined options at the network template level.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the ignore_dhcp_option_list_request flag or \*(L"false\*(R" to deactivate/unset it. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     # Get ignore_dhcp_option_list_request
\&     my $ignore_dhcp_option_list_request = $network_template\->ignore_dhcp_option_list_request();
\&     # Modify ignore_dhcp_option_list_request
\&     $network_template\->ignore_dhcp_option_list_request("false");
\&     # Un\-override ignore_dhcp_option_list_request
\&     $network_template\->ignore_dhcp_option_list_request(undef);
.Ve
.RE
.RS 4
.RE
.SS "ipam_email_addresses( )"
.IX Subsection "ipam_email_addresses( )"
.RS 4
Use this method to set or retrieve a list of \s-1IPAM\s0 Utilization email addresses.
.Sp
Setting this method to a defined value implicitly sets the override_ipam_email_addresses method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_ipam_email_addresses attribute to \*(L"false\*(R".
.Sp
Note that when ipam_email_addresses is set to a defined value and override_ipam_email_addresses is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ipam_email_addresses(['admin@infoblox.com']); \f(CW$object\fR\->override_ipam_email_addresses(\*(L"false\*(R"); will set override_ipam_email_addresses to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ipam_email_addresses(\*(L"false\*(R"); \f(CW$object\fR\->ipam_email_addresses(['admin@infoblox.com']); will result in override_ipam_email_addresses=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains email addresses in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipam_email_addresses
\& my $ipam_email_addresses = $network_template\->ipam_email_addresses();
\& #Modify ipam_email_addresses
\& $network_template\->ipam_email_addresses($ipam_email_addresses);
.Ve
.RE
.RS 4
.RE
.SS "ipam_trap_settings( )"
.IX Subsection "ipam_trap_settings( )"
.RS 4
Use this method to set or retrieve \s-1IPAM\s0 Utilization \s-1SNMP\s0 Trap settings.
.Sp
Setting this method to a defined value implicitly sets the override_ipam_trap_settings method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_ipam_trap_settings attribute to \*(L"false\*(R".
.Sp
Note that when ipam_trap_settings is set to a defined value and override_ipam_trap_settings is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ipam_trap_settings($ipam_trap); \f(CW$object\fR\->override_ipam_trap_settings(\*(L"false\*(R"); will set override_ipam_trap_settings to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ipam_trap_settings(\*(L"false\*(R"); \f(CW$object\fR\->ipam_trap_settings($ipam_trap); will result in override_ipam_trap_settings=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::SNMP::IPAMTrap object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipam_trap_settings
\& my $ipam_trap_settings = $network_template\->ipam_trap_settings();
\& #Modify ipam_trap_settings
\& $network_template\->ipam_trap_settings($ipam_trap_settings);
.Ve
.RE
.RS 4
.RE
.SS "ipam_threshold_settings( )"
.IX Subsection "ipam_threshold_settings( )"
.RS 4
Use this method to set or retrieve \s-1IPAM\s0 Utilization \s-1SNMP\s0 Threshold settings.
.Sp
Setting this method to a defined value implicitly sets the override_ipam_threshold_settings method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_ipam_threshold_settings attribute to \*(L"false\*(R".
.Sp
Note that when ipam_threshold_settings is set to a defined value and override_ipam_threshold_settings is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ipam_threshold_settings($ipam_threshold_settings); \f(CW$object\fR\->override_ipam_trap_settings(\*(L"false\*(R"); will set override_ipam_threshold_settings to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ipam_threshold_settings(\*(L"false\*(R"); \f(CW$object\fR\->ipam_threshold_settings($ipam_threshold_settings); will result in override_ipam_threshold_settings=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::SNMP::IPAMThreashold object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipam_threshold_settings
\& my $ipam_threshold_settings = $network_template\->ipam_threshold_settings();
\& #Modify ipam_threshold_settings
\& $network_template\->ipam_threshold_settings($ipam_threshold_settings);
.Ve
.RE
.RS 4
.RE
.SS "lease_scavenge_time( )"
.IX Subsection "lease_scavenge_time( )"
.RS 4
Use this method to set or retrieve the lease_scavenge_time value of a Network Template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_lease_scavenge_time method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_lease_scavenge_time attribute to \*(L"false\*(R".
.Sp
Note that when lease_scavenge_time is set to a defined value and override_lease_scavenge_time is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->lease_scavenge_time(604800); \f(CW$object\fR\->override_lease_scavenge_time(\*(L"false\*(R"); will set override_lease_scavenge_time to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_lease_scavenge_time(\*(L"false\*(R"); \f(CW$object\fR\->lease_scavenge_time(604800); will result in override_lease_scavenge_time=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An integer that specifies the period of time, in seconds, that free and backup leases remain in the database before they are automatically deleted. To disable lease scavenging, set the parameter to \-1. The minimum positive value must be greater than 86400 seconds (1 day). The default value of this parameter is \-1, which means that lease scavenging is disabled.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lease_scavenge_time
\& my $lease_scavenge = $network_template\->lease_scavenge_time();
\& #Modify lease_scavenge_time
\& $network_template\->lease_scavenge_time(30 * 24 * 60 * 60);
.Ve
.RE
.RS 4
.RE
.SS "logic_filters( )"
.IX Subsection "logic_filters( )"
.RS 4
Use this method to set or retrieve all the logic (ordered) filters associated with the \s-1DHCP\s0 Network Template.
.Sp
Filters are used to screen address assignments in the \s-1DHCP\s0 Network Template if the addresses are to be assigned to specific hosts.
.Sp
Setting this method to a defined value implicitly sets the override_logic_filters method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_logic_filters attribute to \*(L"false\*(R".
.Sp
Note that when logic_filters is set to a defined value and override_dlogic_filters is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->logic_filters($filters); \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); will set override_logic_filters to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); \f(CW$object\fR\->logic_filters($filters); will result in override_logic_filters=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains either the Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC, Infoblox::DHCP::Filter::Option objects or the names of the corresponding filters. The filters in the list must satisfy the following conditions:
.RS 4
.IP "Filter name must be globally unique." 4
.IX Item "Filter name must be globally unique."
.PD 0
.IP "Filters without expressions must be at the end of the list." 4
.IX Item "Filters without expressions must be at the end of the list."
.IP "The filters should not be disabled." 4
.IX Item "The filters should not be disabled."
.RE
.RS 4
.PD
.Sp
The default value of the parameter is undefined.
.RE
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get logic_filters
\& my $ref_logic_filters = $network_template\->logic_filters();
\& #Modify logic_filters
\& $network_template\->logic_filters(["filter_1","filter_2",$exl1]); #$exl1 is an Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC or Infoblox::DHCP::Filter::Option object.
.Ve
.RE
.RS 4
.RE
.SS "low_water_mark( )"
.IX Subsection "low_water_mark( )"
.RS 4
Use this method to set the percentage value for \s-1DHCP\s0 range usage below which the Infoblox appliance generates a syslog message and sends a warning.
.Sp
When the percent of allocated addresses in a \s-1DHCP\s0 range goes below the low_water_mark, the appliance generates a syslog message and sends a warning.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get low_water_mark
\& my $low_water_mark = $network_template\->low_water_mark();
\& #Modify low_water_mark
\& $network_template\->low_water_mark("10");
.Ve
.RE
.RS 4
.RE
.SS "low_water_mark_reset( )"
.IX Subsection "low_water_mark_reset( )"
.RS 4
Use this method to set or retrieve the low_water_mark_reset value. If the percentage of allocated addresses exceeds this value, a corresponding \s-1SNMP\s0 trap is reset.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A number that specifies the percentage of allocated addresses. The range is from 1 to 100.  The low watermark reset value must be higher than the low watermark value. The default low watermark reset number is 0.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get low_water_mark_reset
\& my $low_water_mark_reset = $network_template\->low_water_mark_reset();
\& #Modify low_water_mark_reset
\& $network_template\->low_water_mark_reset(10);
.Ve
.RE
.RS 4
.RE
.SS "members( )"
.IX Subsection "members( )"
.RS 4
Use this method to set or retrieve the member or Microsoft (r) server that serves \s-1DHCP\s0 for the network created from the network template object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DHCP::Member or Infoblox::DHCP::MSServer objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     my $member1 = Infoblox::DHCP::Member\->new(
\&         name     => "infoblox.localdomain",
\&         ipv4addr => "192.168.1.2",
\&     );
\&
\&     # Get members
\&     my $members = $network_template\->members();
\&     # Modify members
\&     $network_template\->members([$member1]);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the description of the name of the \s-1DHCP\s0 network template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Name of the network template in string format with a maximum of 64 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&     #Get name
\&     my $name = $network_template\->name();
\&     #Modify name
\&     $network_template\->name("custom_network_template");
.Ve
.RE
.RS 4
.RE
.SS "netmask( )"
.IX Subsection "netmask( )"
.RS 4
Use this method to set or retrieve the netmask attribute of a \s-1DHCP\s0 network template object. If \*(L"allow_any_netmask\*(R" is set to \*(L"false\*(R", then this attribute must be specified.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A valid subnet mask. The default value is \*(L"255.0.0.0\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\&     #Get netmask
\&     my $netmask = $network_template\->netmask();
\&     #Set netmask
\&     $nework_template\->allow_any_netmask( "false" );
\&     my $netmask = $network_template\->netmask("255.0.0.0");
.Ve
.RE
.RS 4
.RE
.SS "nextserver( )"
.IX Subsection "nextserver( )"
.RS 4
Use this method to set or retrieve the nextserver attribute of a \s-1DHCP\s0 network template object. You can specify the name and/or \s-1IP\s0 address of the next server to which the host needs to connect in order to boot. This setting overrides the upper-level settings. The default value is undefined which indicates that this attribute inherits the upper-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
This option is overridden independently from Infoblox::DHCP::NetworkTemplate\->\fBbootfile()\fR and Infoblox::DHCP::NetworkTemplate\->\fBbootserver()\fR.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The next server \s-1IP\s0 address or name in \s-1FQDN\s0 (Fully Qualified Domain Name) format. The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A next server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     # Get nextserver
\&     my $nextserver = $network_template\->nextserver();
\&     # Modify nextserver
\&     $network_template\->nextserver("blue.domain.com");
\&     #Un\-override nextserver
\&     $network_template\->nextserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "options( )"
.IX Subsection "options( )"
.RS 4
Use this method to set or retrieve the options value of a network template object. \s-1DHCP\s0 options provide network configuration settings and various services available on the network for \s-1DHCP.\s0 This setting overrides the upper-level setting. The default value is undefined which indicates that this attribute inherit the upper-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DHCP::Option objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\&     #Get options
\&     my $options = $network_template\->options();
\&     #Modify options
\&     my $option1 = Infoblox::DHCP::Option\->new(
\&         name  => "lease\-time",
\&         value => 50
\&     );
\&
\&     $network_template\->options([$option1]);
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_domainname( )"
.IX Subsection "override_ddns_domainname( )"
.RS 4
The override_ddns_domainname attribute controls whether the ddns_domainname value in the \s-1DHCP\s0 network template object is used, instead of the grid default.
.Sp
The override_ddns_domainname attribute can be specified explicitly. It is also set implicitly when ddns_domainname is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for ddns_domainname. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for ddns_domainname.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_domainname
\&    my $override_ddns_domainname=$network_template\->override_ddns_domainname( );
\&    #Modifying override_ddns_domainname
\&    $network_template\->override_ddns_domainname("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ddns_ttl( )"
.IX Subsection "override_ddns_ttl( )"
.RS 4
The override_ddns_ttl attribute controls whether the ddns_ttl value in the \s-1DHCP\s0 network template object is used, instead of the grid default.
.Sp
The override_ddns_ttl attribute can be specified explicitly. It is also set implicitly when ddns_ttl is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for ddns_ttl. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for ddns_ttl.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_ddns_ttl
\&    my $override_ddns_ttl=$network_template\->override_ddns_ttl( );
\&    #Modifying override_ddns_ttl
\&    $network_template\->override_ddns_ttl("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ipam_email_addresses( )"
.IX Subsection "override_ipam_email_addresses( )"
.RS 4
The override_ipam_email_addresses controls whether the ipam_email_addresses in the \s-1DHCP\s0 network template is used, instead of the upper-level default.
.Sp
The override_ipam_email_addresses can be specified explicitly. It is also set implicitly when ipam_email_addresses is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ipam_email_addresses. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ipam_email_addresses.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get attrubute value
\&    my $value=$network_template\->override_ipam_email_addresses();
\&    #Modifying attribute value
\&    $network_template\->override_ipam_email_addresses(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_ipam_threshold_settings( )"
.IX Subsection "override_ipam_threshold_settings( )"
.RS 4
The override_ipam_threshold_settings controls whether the ipam_threshold_settings in the \s-1DHCP\s0 network template is used, instead of the upper-level default.
.Sp
The override_ipam_threshold_settings can be specified explicitly. It is also set implicitly when ipam_threshold_settings is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ipam_threshold_settings. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ipam_threshold_settings.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get attrubute value
\&    my $value=$network_template\->override_ipam_threshold_settings();
\&    #Modifying attribute value
\&    $network_template\->override_ipam_threshold_settings(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_ipam_trap_settings( )"
.IX Subsection "override_ipam_trap_settings( )"
.RS 4
The override_ipam_trap_settings controls whether the ipam_trap_settings in the \s-1DHCP\s0 network template is used, instead of the upper-level default.
.Sp
The override_ipam_trap_settings can be specified explicitly. It is also set implicitly when ipam_trap_settings is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for ipam_trap_settings. Set the parameter to \*(L"false\*(R" to inherit the upper-level setting for ipam_trap_settings.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get attrubute value
\&    my $value=$network_template\->override_ipam_trap_settings();
\&    #Modifying attribute value
\&    $network_template\->override_ipam_trap_settings(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_lease_scavenge_time( )"
.IX Subsection "override_lease_scavenge_time( )"
.RS 4
The override_lease_scavenge_time attribute controls whether the lease_scavenge_time value in the network template is used, instead of the upper-level default.
.Sp
The override_lease_scavenge_time attribute can be specified explicitly. It is also set implicitly when lease_scavenge_time is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the upper-level setting for lease_scavenge_time. Set the parameter to \*(L"false\*(R" to inherit the setting for lease_scavenge_time from the upper level.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_lease_scavenge_time
\&    my $override_lease_scavenge_time=$network_template\->override_lease_scavenge_time( );
\&    #Modifying override_lease_scavenge_time
\&    $network_template\->override_lease_scavenge_time("true");
.Ve
.RE
.RS 4
.RE
.SS "override_logic_filters( )"
.IX Subsection "override_logic_filters( )"
.RS 4
The override_logic_filters attribute controls whether the logic_filters value of the \s-1DHCP\s0 Network Template is used, instead of the Grid default.
.Sp
The override_logic_filters attribute can be specified explicitly. It is also set implicitly when logic_filters is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for logic_filters. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for logic_filters.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_logic_filters
\& my $override_logic_filters=$network_template\->override_logic_filters( );
\& #Modifying override_logic_filters
\& $network_template\->override_logic_filters("true");
.Ve
.RE
.RS 4
.RE
.SS "override_update_dns_on_lease_renewal( )"
.IX Subsection "override_update_dns_on_lease_renewal( )"
.RS 4
The override_update_dns_on_lease_renewal attribute controls whether the update_dns_on_lease_renewal value in the \s-1DHCP\s0 network template object is used, instead of the grid default.
.Sp
The override_update_dns_on_lease_renewal attribute can be specified explicitly. It is also set implicitly when update_dns_on_lease_renewal is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for update_dns_on_lease_renewal. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for update_dns_on_lease_renewal.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_update_dns_on_lease_renewal
\&    my $override_update_dns_on_lease_renewal=$network_template\->override_update_dns_on_lease_renewal( );
\&    #Modifying override_update_dns_on_lease_renewal
\&    $network_template\->override_update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SS "pxe_lease_time( )"
.IX Subsection "pxe_lease_time( )"
.RS 4
Use this method to set or retrieve the \s-1PXE\s0 lease time value of a \s-1DHCP\s0 network template object. Some hosts use \s-1PXE\s0 (Preboot Execution Environment) to boot remotely from a server. To better manage your \s-1IP\s0 resources, set a different lease time for \s-1PXE\s0 boot requests. You can configure the \s-1DHCP\s0 server to allocate an \s-1IP\s0 address with a shorter lease time to hosts that send \s-1PXE\s0 boot requests, so \s-1IP\s0 addresses are not leased longer than necessary. This setting overrides the upper-level settings. The default value is undefined, which indicates that this attribute inherits the upper-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer (range from 0 to 4294967295) that represents the duration, in seconds, that the update is cached. Zero indicates that the update should not be cached. The default value is undefined
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&     #Get PXE Lease Time
\&     my $pxe_lease_time = $network_template\->pxe_lease_time();
\&     #Modify PXE Lease Time
\&     $network_template\->pxe_lease_time(1100);
\&     #Un\-override PXE Lease Time
\&     $network_template\->pxe_lease_time(undef);
.Ve
.RE
.RS 4
.RE
.SS "range_templates( )"
.IX Subsection "range_templates( )"
.RS 4
Use this method to set or retrieve the \s-1IP\s0 address range template assigned to this network template object.  When you create a network based on a network template object with a range template, the \s-1IP\s0 address ranges are created based on the associated  \s-1IP\s0 address range template.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference of Infoblox::DHCP::Template objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\&     #Get range_templates
\&     my $range_templates = $network_template\->range_templates();
\&     #Modify range_templates
\&     my $tmpl = Infoblox::DHCP::Template\->new(
\&        name => "custom_range_template"
\&     );
\&     $network_template\->range_templates([ $tmpl ]);
.Ve
.RE
.RS 4
.RE
.SS "update_dns_on_lease_renewal( )"
.IX Subsection "update_dns_on_lease_renewal( )"
.RS 4
The update_dns_on_lease_renewal attribute controls whether the \s-1DHCP\s0 server updates \s-1DNS\s0 when a \s-1DHCP\s0 lease is renewed.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_update_dns_on_lease_renewal method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_update_dns_on_lease_renewal attribute to \*(L"false\*(R".
.Sp
Note that when update_dns_on_lease_renewal is set to a defined value and override_update_dns_on_lease_renewal is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); will set override_update_dns_on_lease_renewal to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_update_dns_on_lease_renewal(\*(L"false\*(R"); \f(CW$object\fR\->update_dns_on_lease_renewal(\*(L"true\*(R"); will result in override_update_dns_on_lease_renewal=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the update_dns_on_lease_renewal flag or \*(L"false\*(R" to deactivate/unset it.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Get update_dns_on_lease_renewal
\&    my $update_dns_on_lease_renewal=$network_template\->update_dns_on_lease_renewal( );
\&    #Modify update_dns_on_lease_renewal
\&    $network_template\->update_dns_on_lease_renewal("true");
.Ve
.RE
.RS 4
.RE
.SS "recycle_leases( )"
.IX Subsection "recycle_leases( )"
.RS 4
Use this method to set or retrieve the recycle_leases flag at the network template level.
.Sp
If the flag is enabled, the leases are kept in the recycle bin until one week after expiration. When the flag is disabled, the leases are irrecoverably deleted.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the recycle_leases flag or \*(L"false\*(R" to disable it. The default value is undefined, which indicates that this attribute inherit the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get recycle_leases
\& my $recycle_leases = $network_template\->recycle_leases();
\& #Modify recycle_leases
\& $network_template\->recycle_leases("false");
.Ve
.RE
.RS 4
.RE
.SS "rir( )"
.IX Subsection "rir( )"
.RS 4
Use this method to retrieve the name of the Regional Internet Registry (\s-1RIR\s0) that allocated this address space. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1RIPE\s0' or '\s-1NONE\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get rir
\& my $rir = $network_template\->rir();
.Ve
.RE
.RS 4
.RE
.SS "rir_organization( )"
.IX Subsection "rir_organization( )"
.RS 4
Use this method to set or retrieve the Regional Internet Registry (\s-1RIR\s0) organization object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An Infoblox::Grid::RIR::Organization object.
.Sp
You must enable support for \s-1RIR/SWIP\s0 at the Grid level before you can set attribute values. See Infoblox::Grid\->\fBenable_rir_swip()\fR method.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get rir_organization
\& my $rir_organization = $network_template\->rir_organization();
\& #Modify rir_organization
\& $network_template\->rir_organization($rir_org);
.Ve
.RE
.RS 4
.RE
.SS "rir_registration_action( )"
.IX Subsection "rir_registration_action( )"
.RS 4
Use this method to set or retrieve the registration action of Regional Internet Registry (\s-1RIR\s0).
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1NONE\s0', '\s-1CREATE\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get rir_registration_action
\& my $rir_registration_action = $network_template\->rir_registration_action();
\& #Modify rir_registration_action
\& $network_template\->rir_registration_action(\*(AqCREATE\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "rir_registration_status( )"
.IX Subsection "rir_registration_status( )"
.RS 4
Use this method to set or retrieve the registration status of Regional Internet Registry (\s-1RIR\s0).
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The registration status of Regional Internet Registry (\s-1RIR\s0), which can be '\s-1REGISTERED\s0' or '\s-1NOT_REGISTERED\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get rir_registration_status
\& my $rir_registration_status = $network_template\->rir_registration_status();
\& #Modify rir_registration_status
\& $network_template\->rir_registration_status(\*(AqNOT_REGISTERED\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "send_rir_request( )"
.IX Subsection "send_rir_request( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the appliance should send an \s-1API\s0 or email request for Regional Internet Registry (\s-1RIR\s0).
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the send_rir_request flag or \*(L"false\*(R" to unset it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get send_rir_request
\& my $send_rir_request = $network_template\->send_rir_request();
\& #Modify send_rir_request
\& $network_template\->send_rir_request(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, search, modify, and remove. Also, this sample code includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 network template insertion\fR
.PP
.Vb 1
\& #PROGRAM STARTS: Include all the modules that will be used
\&
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $host_ip = "192.168.1.2";
\& my $host_name = "infoblox.localdomain";
\&
\& my $session = Infoblox::Session\->new(
\&     master   => $host_ip,
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& my $memberdhcp = Infoblox::DHCP::Member\->new(
\&             name     => $host_name,
\&             ipv4addr => $host_ip
\&            );
.Ve
.PP
\&\fB#Add network template object\fR
.PP
.Vb 1
\& #Create a DHCP Network template object
\&
\& my $network_template = Infoblox::DHCP::NetworkTemplate\->new(
\&                                  name                    => "custom_network_template",
\&                                  netmask                 => "255.0.0.0",
\&                                  comment                 => "add network template",
\&                                  members                 => [ $memberdhcp ],
\&                                  authority               => "true",
\&                                  enable_ddns             => "true",
\&                                  pxe_lease_time          => "3600",
\&                                  bootserver              => "someserver.com",
\&                                  nextserver              => "3.3.3.3",
\&                                  bootfile                => "bootfile.com",
\&                                  auto_create_reversezone => "true",
\&                                  );
\&
\& my $response = $session\->add($network_template)
\&        or die("Add Network template failed: ",
\&              $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network template added successfully\en";
.Ve
.PP
\&\fB#Get and modify a network template attribute\fR
.PP
.Vb 5
\& #Get Network template through the session
\& my  @retrieved_objs = $session\->get(
\&            object => "Infoblox::DHCP::NetworkTemplate",
\&            name   => "custom_network_template"
\&         );
\&
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Get Network template object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Network template found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Search a network template attribute\fR
.PP
.Vb 5
\& #Search Network template through the session
\& my  @retrieved_objs = $session\->search(
\&            object => "Infoblox::DHCP::NetworkTemplate",
\&            name   => "custom_network_template"
\&         );
\&
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Search Network template object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search Network template found at least 1 matching entry\en";
\&
\& #Modify attributes of the specified Network Template
\&
\& $object\->enable_ddns("true"); #Apply the changes
\&
\& #Un\-override bootfile
\& $object\->bootfile(undef);
\&
\& #Un\-override bootserver
\& $object\->bootserver(undef);
\&
\& #Un\-override nextserver
\& $object\->nextserver(undef);
\&
\& $session\->modify($object)
\&     or die("Modify Network template attribute failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network template object modified successfully \en";
.Ve
.PP
\&\fB#Remove a network template object\fR
.PP
.Vb 1
\& #Get Network Template object through the session
\&
\&  my @retrieved_objs = $session\->get(
\&            object  => "Infoblox::DHCP::NetworkTemplate",
\&            name    => "custom_network_template"
\&        );
\&
\&    my $object = $retrieved_objs[0];
\&
\&    unless ($object) {
\&     die("Get Network Template object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&     }
\&
\& print "Get Network Template object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\&
\& $session\->remove($object)
\&     or die("Remove Network Template failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "Network Template removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::DHCP::Member, Infoblox::DHCP::Option, Infoblox::DHCP::Network, Infoblox::DHCP::RangeTemplate, Infoblox::DHCP::FixedAddrTemplate, Infoblox::DHCP::Template, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBmodify()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
