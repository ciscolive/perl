.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::TSIGKey 3"
.TH Infoblox::DNS::TSIGKey 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::TSIGKey \- DNS TSIGKey object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
On a device you configure as a secondary serer for a zone, you can associate a \s-1TSIG\s0 key for each primary
server to which the secondary server requests zone transfers. On the device you configure as a primary server
for a zone, you can set a \s-1TSIG\s0 key at the grid, member, or zone level. When the secondary server requests
zone transfers, it must send a specific key in its requests to the primary server. When the primary server
responds to the requests, it can have a set of \s-1TSIG\s0 keys from which it can draw when responding. As long as
the primary server can find the same \s-1TSIG\s0 key that the secondary sends it, it can verify the authenticity of the requests it receives and authenticate the responses it sends.
.PP
\&\s-1TSIG\s0 is based on \s-1DNS\s0 specifications \s-1RFC 2845, TSIG\s0 and \s-1RFC 2930, TKEY\s0 which provides authentication protocol enhancements to secure Server-Server transactions.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 4
\&  my $tsig_key = Infoblox::DNS::TSIGKey\->new(
\&     key  => $string | ":2xCOMPAT",  #Optional / Default is empty
\&     name => $string,                #Optional / Default is empty
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
This section describes all the functions that you can apply to a TSIGKey object.
.SS "Infoblox::Grid::DNS\->allow_query( )"
.IX Subsection "Infoblox::Grid::DNS->allow_query( )"
.Vb 1
\& Use this function to specify a TSIG key for a Grid DNS object. This key is used to authenticate clients from which DNS queries are allowed.
.Ve
.RS 4
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& ## Construct the object
\& my $tsig_key = Infoblox::DNS::TSIGKey\->new(
\&     key  => "Zx1jVJl7C58GT/sc7Q3ucA==",
\&     name => "test_key"
\& );
\& #Adding a TSIG key to the allow_query list of the Grid DNS object
\& #Retrieving the list
\& my $allow_query_ref= $Grid_DNS\->allow_query();
\& push @$allow_query_ref, $tsig_key;
\& #Modifying the object;
\& my $response = $Grid_DNS\->allow_query($allow_query_ref);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member::DNS\->allow_query( )"
.IX Subsection "Infoblox::Grid::Member::DNS->allow_query( )"
.RS 4
Use this function to specify a \s-1TSIG\s0 key for a Grid Member \s-1DNS\s0 object. This key is used to authenticate clients from which \s-1DNS\s0 queries are allowed.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& ##Construct the object
\& my $tsig_key = Infoblox::DNS::TSIGKey\->new(
\&     key  => "ZX1jVjl7C58GT/sc7Q3ucA==",
\&     name => "test_key"
\& );
\& #Adding a TSIG key to the allow_query list of the Grid Member DNS object
\& #Retrieving the list
\& my $allow_query_ref= $Grid_Member_DNS\->allow_query();
\& push @$allow_query_ref, $tsig_key;
\& #Modifying the object;
\& my $response = $Grid_Member_DNS\->allow_query($allow_query_ref);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DNS::Zone\->allow_query( )"
.IX Subsection "Infoblox::DNS::Zone->allow_query( )"
.RS 4
Use this function to specify a \s-1TSIG\s0 key for a Zone object. This key is used to authenticate clients from which \s-1DNS\s0 queries are allowed.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& ## Construct the object
\& my $tsig_key = Infoblox::DNS::TSIGKey\->new(
\&     key  => "ZX1jVJl7c58GT/sc7Q3ucA==",
\&     name => "test_key"
\& );
\& #Adding a TSIG key to the allow_query list of a zone
\& #Retrieving the list
\& my $allow_query_ref= $zone\->allow_query();
\& push @$allow_query_ref, $tsig_key;
\& #Modifying the object;
\& my $response = $zone\->allow_query($allow_query_ref);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::DNS\->allow_transfer( )"
.IX Subsection "Infoblox::Grid::DNS->allow_transfer( )"
.RS 4
Use this function to specify a \s-1TSIG\s0 key for a Grid \s-1DNS\s0 object. This key is used during zone transfers from the primary server to the secondary servers.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& ## Construct the object
\& my $tsig_key = Infoblox::DNS::TSIGKey\->new(
\&     key  => "Zx1jVJl7C58GT/sc7Q3ucA==",
\&     name => "test_key"
\& );
\& #Adding a TSIG key to the allow_transfer list of the Grid DNS object
\& #Retrieving the list
\& my $allow_transfer_ref= $Grid_DNS\->allow_transfer();
\& push @$allow_transfer_ref, $tsig_key;
\& #Modifying the object;
\& my $response = $Grid_DNS\->allow_transfer($allow_transfer_ref);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member::DNS\->allow_transfer( )"
.IX Subsection "Infoblox::Grid::Member::DNS->allow_transfer( )"
.RS 4
Use this function to specify a TSIGKey for a grid member object. This key is used during zone transfers from the primary server to the secondary servers.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& ## Construct the object
\& my $tsig_key = Infoblox::DNS::TSIGKey\->new(
\&     key  => "ZX1jVjl7C58GT/sc7Q3ucA==",
\&     name => "test_key"
\& );
\& #Adding a TSIG key to the allow_transfer list of the Grid Member DNS object
\& #Retrieving the list
\& my $allow_transfer_ref= $Grid_Member_DNS\->allow_transfer();
\& push @$allow_transfer_ref, $tsig_key;
\& #Modifying the object;
\& my $response = $Grid_Member_DNS\->allow_transfer($allow_transfer_ref);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DNS::Zone\->allow_transfer( )"
.IX Subsection "Infoblox::DNS::Zone->allow_transfer( )"
.RS 4
Use this function to specify a TSIGKey for a Zone object. This key is used during zone transfers from the primary server to the secondary servers.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\&  ## Construct the object
\& my $tsig_key = Infoblox::DNS::TSIGKey\->new(
\&     key  => "ZX1jVJl7c58GT/sc7Q3ucA==",
\&     name => "test_key"
\& );
\& #Adding a TSIG key to the allow_transfer list of a zone
\& #Retrieving the list
\& my $allow_transfer_ref= $zone\->allow_transfer();
\& push @$allow_transfer_ref, $tsig_key;
\& #Modifying the object;
\& my $response = $zone\->allow_transfer($allow_transfer_ref);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::DNS\->allow_update( )"
.IX Subsection "Infoblox::Grid::DNS->allow_update( )"
.RS 4
Use this function to specify a TSIGKey for a grid \s-1DNS\s0 object. This key is used during dynamic \s-1DNS\s0 updates.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\&  ## Construct the object
\& my $tsig_key = Infoblox::DNS::TSIGKey\->new(
\&     key  => "ZX1jVJl7C58gT/sc7Q3ucA==",
\&     name => "test_key"
\& );
\& #Adding a TSIG key to the allow_update list of the Grid DNS object
\& #Retrieving the list
\& my $allow_update_ref= $Grid_DNS\->allow_update();
\& push @$allow_update_ref, $tsig_key;
\& #Modifying the object;
\& my $response = $Grid_DNS\->allow_update($allow_transfer_ref);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member::DNS\->allow_update( )"
.IX Subsection "Infoblox::Grid::Member::DNS->allow_update( )"
.RS 4
Use this function to specify a TSIGKey for a grid member object. This key is used during dynamic \s-1DNS\s0 updates.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\& ## Construct the object
\& my $tsig_key = Infoblox::DNS::TSIGKey\->new(
\&     key  => "ZX1jVJl7C58Gt/sc7Q3ucA==",
\&     name => "test_key"
\& );
\& # Configure a TSIG key for a Grid Member DNS object
\& #Retrieving the list
\& my $allow_update_ref= $Grid_Member_DNS\->allow_update();
\& push @$allow_update_ref, $tsig_key;
\& #Modifying the object;
\& my $response = $Grid_Member_DNS\->allow_update($allow_transfer_ref);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DNS::Zone\->allow_update( )"
.IX Subsection "Infoblox::DNS::Zone->allow_update( )"
.RS 4
Use this function to specify a TSIGKey for a Zone object. This key is used during dynamic \s-1DNS\s0 updates.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\&  ## Construct the object
\& my $tsig_key = Infoblox::DNS::TSIGKey\->new(
\&     key  => "ZX1jVJl7C58GT/sc7q3ucA==",
\&     name => "test_key"
\& );
\& # Configure TSIGKey on a Zone
\& #Retrieving the list
\& my $allow_update_ref= $zone\->allow_update();
\& push @$allow_update_ref, $tsig_key;
\& #Modifying the object;
\& my $response = $zone\->allow_update($allow_transfer_ref);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::DNS\->recursive_query_list( )"
.IX Subsection "Infoblox::Grid::DNS->recursive_query_list( )"
.RS 4
Use this function to specify a \s-1TSIG\s0 key for a Grid \s-1DNS\s0 object. This key is used to authenticate clients from which the grid is allowed to receive recursive queries.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\&  ## Construct the object
\& my $tsig_key = Infoblox::DNS::TSIGKey\->new(
\&     key  => "ZX1jVJl7C58gT/sc7Q3ucA==",
\&     name => "test_key"
\& );
\& #Adding a TSIG key to the recursive_query_list list of the Grid DNS object
\& #Retrieving the list
\& my $recursive_query_list_ref= $Grid_DNS\->recursive_query_list();
\& push @$recursive_query_list_ref, $tsig_key;
\& #Modifying the object;
\& my $response = $Grid_DNS\->recursive_query_list($allow_transfer_ref);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member::DNS\->recursive_query_list( )"
.IX Subsection "Infoblox::Grid::Member::DNS->recursive_query_list( )"
.RS 4
Use this function to specify a \s-1TSIG\s0 key for a Grid Member \s-1DNS\s0 object. This key is used to authenticate clients from which recursive queries are allowed.
.IP "\fBExample\fR" 4
.IX Item "Example"
.RS 4
.PD 0
.IP "\fBExample\fR" 4
.IX Item "Example"
.PD
.Vb 5
\& ## Construct the object
\& my $tsig_key = Infoblox::DNS::TSIGKey\->new(
\&     key  => "ZX1jVJl7C58Gt/sc7Q3ucA==",
\&     name => "test_key"
\& );
\&
\& # Configure a TSIG key for a Grid Member DNS object
\& #Retrieving the list
\& my $recursive_query_list_ref= $Grid_Member_DNS\->recursive_query_list();
\& push @$recursive_query_list_ref, $tsig_key;
\& #Modifying the object;
\& my $response = $Grid_Member_DNS\->recursive_query_list($allow_transfer_ref);
.Ve
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a TSIGKey object.
.SS "algorithm( )"
.IX Subsection "algorithm( )"
.RS 4
Use this method to set or retrieve the algorithm of the \s-1TSIG\s0 key you want to use.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired algorithm of the \s-1TSIG\s0 key. Valid values are \*(L"\s-1HMAC\-SHA256\*(R"\s0 and \*(L"\s-1HMAC\-MD5\*(R",\s0 which is the default.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting Algorithm
\& my $alg = $algorithmserver\->algorithm();
\& # Modifying algorithm
\& $tsig_key\->algorithm("HMAC\-SHA256");
.Ve
.RE
.RS 4
.RE
.SS "key( )"
.IX Subsection "key( )"
.RS 4
Use this method to add or retrieve a TSIGKey.
To use an existing \s-1TSIG\s0 key, type or paste the key in the Key field. The \s-1TSIG\s0 key string is a text string with a key generated by an encryption algorithm
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For \s-1TSIG\s0 zone transfers, valid values for a key are \f(CW":2xCOMPAT"\fR or a \s-1TSIG\s0 key string. \f(CW":2xCOMPAT"\fR means you are using Infoblox DNSone 2.x \s-1TSIG.\s0 If the key is \f(CW":2xCOMPAT"\fR, the name can only be \f(CW"tsig_xfer"\fR. For \s-1TSIG\s0 dynamic updates, the valid value a for key is a \s-1TSIG\s0 key string.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting key
\& my $key = $tsig_key\->key();
\& # Modifying key
\& $tsig_key\->key("ZX1jVJl7C58GT/sc7Q3ucB==");
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name of the TSIGKey.
.Sp
Enter a meaningful name for the key, such as a zone name or the name of the remote
name server with which the local server authenticates zone transfer requests and replies. This
name must match the name of the \s-1TSIG\s0 key on the other name server that use it to authenticate
zone transfers with the local server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Text with the \s-1TSIG\s0 key name.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting name
\& my $name = $tsig_key\->name();
\& # Modifying name
\& $tsig_key\->name("tsig_key1");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add and  modify. This sample also includes error handling for the operations.
.PP
\&\fB##Preparation prior to a \s-1DNS\s0 TSIGKey object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox device
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a TSIGKey object\fR
.PP
.Vb 4
\&  my $tsig_key = Infoblox::DNS::TSIGKey\->new(
\&     key  => "ZX1jVJl7C58GT/sc7Q3ucA==",
\&     name => "test_key"
\& );
\&
\& unless($tsig_key) {
\&      die("Construct TSIGKey failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "TSIGKey object created successfully\en";
\&
\& #Get the member DNS object and add a TSIGKey object to it
\&
\& my @result_array = $session\->get(
\&     object => "Infoblox::Grid::Member::DNS",
\&     name   => "infoblox.localdomain"
\& );
\&
\& unless (scalar(@result_array) == 0) {
\&     my $memberdns = $result_array[0];
\&     if ($memberdns) {
\&
\&        #Add a TSIG key to the Grid Member DNS object allow_transfer list.
\&        my $allow_transfer_ref=$memberdns\->allow_transfer();
\&        push @$allow_transfer_ref, $tsig_key;
\&        $memberdns\->allow_transfer($allow_transfer_ref)
\&             or die("modify member failed: ",
\&                    Infoblox::status_code() . ":" . Infoblox::status_detail());
\&         print "TSIGKey added to Member DNS object successfully\en";
\&
\&     #Update the Grid Member DNS object through the Infoblox session.
\&         $session\->modify($memberdns)
\&             or die("modify session failed: ",
\&                    $session\->status_code() . ":" . $session\->status_detail());
\&         print "Member DNS object with TSIGKey updated to Infoblox device successfully\en";
\&
\&         #Modify existing TSIGKey object
\&         #Modifying the value of the specified object.
\&
\&         $tsig_key\->name("another_test_key");
\&         print "Modify TSIG name value\en";
\&
\&         #Replace the key in the allow_transfer list
\&         my $allow_transfer_ref2=$memberdns\->allow_transfer();
\&
\&         if(ref($allow_transfer_ref2) eq \*(AqARRAY\*(Aq){
\&             map { if((ref($_) eq \*(AqInfoblox::DNS::TSIGKey\*(Aq)&&($_\->name() eq \*(Aqtest_key\*(Aq)){ $_=$tsig_key;} } @$allow_transfer_ref2;
\&         }
\&
\&         $memberdns\->allow_transfer($allow_transfer_ref2)
\&             or die("modify member failed: ",
\&                    Infoblox::status_code() . ":" . Infoblox::status_detail());
\&         print "TSIG name updated to Member DNS object successfully\en";
\&
\&        #Update the Grid Member DNS object through the Infoblox session.
\&         $session\->modify($memberdns)
\&             or die("modify session failed: ",
\&                 $session\->status_code() . ":" . $session\->status_detail());
\&                 print "Member DNS object with TSIG name updated to Infoblox device successfully\en";
\&              }
\&          } else {
\&              print "No member found with the specified name.";
\&          }
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR,Infoblox::Grid::Member::DNS, Infoblox::DNS::Zone, Infoblox::Grid::DNS
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
