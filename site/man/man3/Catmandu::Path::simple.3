.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catmandu::Path::simple 3"
.TH Catmandu::Path::simple 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catmandu::Path::simple \- The default Catmandu path syntax
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $data = {foo => {bar => [\*(Aqfirst_bar\*(Aq, \*(Aqsecond_bar\*(Aq]}};
\&
\&    my $path = Catmandu::Path::simple\->new("foo.bar.0");
\&
\&    my $getter = $path\->getter;
\&    my $first_bar = $getter\->($data);
\&
\&    my $updater = $path\->updater(sub { my $str = $_[0]; uc $str });
\&    $updater\->($data);
\&    # => {foo => {bar => [\*(AqFIRST_BAR\*(Aq, \*(Aqsecond_bar\*(Aq]}}
\&
\&    # safer version with a type check
\&    my $updater = $path\->updater(if_string => sub { my $str = $_[0]; uc $str });
.Ve
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.IP "path" 4
.IX Item "path"
The string version of the path. Required.
.SH "METHODS"
.IX Header "METHODS"
.SS "getter"
.IX Subsection "getter"
Returns a coderef that can get the values for the path.
The coderef takes the data as argument and returns the matching values as an
arrayref.
.PP
.Vb 4
\&    my $path = Catmandu::Path::Simple\->new(path => \*(Aq$.foo\*(Aq);
\&    my $data = {foo => \*(Aqfoo\*(Aq, bar => \*(Aqbar\*(Aq};
\&    $path\->getter\->($data);
\&    # => [\*(Aqfoo\*(Aq]
.Ve
.SS "setter"
.IX Subsection "setter"
Returns a coderef that can create the final part of the  path and set it's
value. In contrast to \f(CW\*(C`creator\*(C'\fR this will only set the value if the
intermediate path exists.  The coderef takes the data as argument and also
returns the data.
.PP
.Vb 5
\&    my $path = Catmandu::Path::Simple\->new(path => \*(Aq$.foo.$append\*(Aq);
\&    $path\->creator(value => \*(Aqfoo\*(Aq)\->({});
\&    # => {foo => [\*(Aqfoo\*(Aq]}
\&    $path\->creator(value => sub { my ($val, $data) = @_; $val // \*(Aqfoo\*(Aq })\->({});
\&    # => {foo => [\*(Aqfoo\*(Aq]}
\&
\&    # calling creator with no value creates a sub that takes the value as an
\&    # extra argument
\&    $path\->creator\->({}, \*(Aqfoo\*(Aq);
\&    $path\->creator\->({}, sub { my ($val, $data) = @_; $val // \*(Aqfoo\*(Aq });
\&    # => {foo => [\*(Aqfoo\*(Aq]}
.Ve
.SS "setter(\e&callback|$value)"
.IX Subsection "setter(&callback|$value)"
This is a shortcut for \f(CW\*(C`setter(value =\*(C'\fR \e&callback|$value)>.
.SS "updater(value => \e&callback)"
.IX Subsection "updater(value => &callback)"
Returns a coderef that can update the value of an existing path.
.SS "updater(if_* => [\e&callback])"
.IX Subsection "updater(if_* => [&callback])"
\&\s-1TODO\s0
.SS "updater(if => [\e&callback])"
.IX Subsection "updater(if => [&callback])"
\&\s-1TODO\s0
.SS "updater(if_* => \e&callback)"
.IX Subsection "updater(if_* => &callback)"
\&\s-1TODO\s0
.SS "updater(if => \e&callback)"
.IX Subsection "updater(if => &callback)"
\&\s-1TODO\s0
.SS "updater(\e&callback)"
.IX Subsection "updater(&callback)"
This is a shortcut for \f(CW\*(C`updater(value =\*(C'\fR \e&callback|$value)>.
.SS "creator(value => \e&callback|$value)"
.IX Subsection "creator(value => &callback|$value)"
Returns a coderef that can create the path and set it's value. In contrast to
\&\f(CW\*(C`setter\*(C'\fR this also creates the intermediate path if necessary.
The coderef takes the data as argument and also returns the data.
.PP
.Vb 5
\&    my $path = Catmandu::Path::Simple\->new(path => \*(Aq$.foo.$append\*(Aq);
\&    $path\->creator(value => \*(Aqfoo\*(Aq)\->({});
\&    # => {foo => [\*(Aqfoo\*(Aq]}
\&    $path\->creator(value => sub { my ($val, $data) = @_; $val // \*(Aqfoo\*(Aq })\->({});
\&    # => {foo => [\*(Aqfoo\*(Aq]}
\&
\&    # calling creator with no value creates a sub that takes the value as an
\&    # extra argument
\&    $path\->creator\->({}, \*(Aqfoo\*(Aq);
\&    $path\->creator\->({}, sub { my ($val, $data) = @_; $val // \*(Aqfoo\*(Aq });
\&    # => {foo => [\*(Aqfoo\*(Aq]}
.Ve
.SS "creator(\e&callback|$value)"
.IX Subsection "creator(&callback|$value)"
This is a shortcut for \f(CW\*(C`creator(value =\*(C'\fR \e&callback|$value)>.
.SS "deleter"
.IX Subsection "deleter"
Returns a coderef that can delete the path.
The coderef takes the data as argument and also returns the data.
.PP
.Vb 3
\&    my $path = Catmandu::Path::Simple\->new(path => \*(Aq$.foo\*(Aq);
\&    $path\->deleter\->({foo => \*(Aqfoo\*(Aq, bar => \*(Aqbar\*(Aq});
\&    # => {bar => \*(Aqbar\*(Aq}
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catmandu::Path.
