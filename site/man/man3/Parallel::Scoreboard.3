.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Parallel::Scoreboard 3"
.TH Parallel::Scoreboard 3 "2016-12-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parallel::Scoreboard \- a scoreboard for monitoring status of many workers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Parallel::Scoreboard;
\&
\&  my $scoreboard = Parallel::Scoreboard\->new(
\&      base_dir => \*(Aq/tmp/my_scoreboard\*(Aq
\&  ...
\&
\&  # in each worker process
\&  $scoreboard\->update(\*(Aqthis is my current status\*(Aq);
\&
\&  # to read status of all worker processes
\&  my $stats = $scoreboard\->read_all();
\&  for my $pid (sort { $a <=> $b } keys %$stats) {
\&      print "status for pid:$pid is: ", $stats\->{$pid}, "\en";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Parallel::Scoreboard is a pure-perl implementation of a process scoreboard.  By using the module it is easy to create a monitor for many worker process, like the status module of the Apache \s-1HTTP\s0 server.
.PP
Unlike other similar modules, Parallel::Scoreboard is easy to use and has no limitation on the format or the length of the statuses to be stored.  Any arbitrary data (like \s-1JSON\s0 or frozen perl object) can be saved by the worker processes as their status and read from the manager process.
.SH "METHODS"
.IX Header "METHODS"
.SS "new(%args)"
.IX Subsection "new(%args)"
instantiation.  Recognizes the following paramaters.  The parameters can be read using the read-only accessors with the same name.
.PP
\fIbase_dir => \f(CI$base_dir\fI\fR
.IX Subsection "base_dir => $base_dir"
.PP
the directory name in which the scoreboard files will be stored.  The directory will be created if it does not exist already.  Mandatory parameter.
.PP
\fIworker_id => sub { ... }\fR
.IX Subsection "worker_id => sub { ... }"
.PP
a subref that returns the id of the worker (if omitted, the module uses $$ (process id) to distinguish between the workers)
.SS "update($status)"
.IX Subsection "update($status)"
saves the status of the process
.SS "\fBread_all()\fP"
.IX Subsection "read_all()"
reads the status of all worker processes that are alive and that have called \fBupdate()\fR more than once.  Returned value is a hashref with process ids as keys and the statuses of each processes as corresponding values.
.SS "\fBcleanup()\fP"
.IX Subsection "cleanup()"
remove obsolete status files found in base_dir.  The files are normally removed upon the termination of worker process, however they might be left unremoved if the worker process was killed for some reason.  The detection and removal of the obsolete status files is performed by \fBread_all()\fR as well.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IPC::ScoreBoard
Proc::Scoreboard
.SH "AUTHOR"
.IX Header "AUTHOR"
Kazuho Oku <kazuhooku gmail.com>
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software, you can redistribute it and/or modify it under the same terms as Perl 5.10.
