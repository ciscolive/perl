.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::Mock::Apache2 3"
.TH Test::Mock::Apache2 3 "2012-06-09" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Mock::Apache2 \- Mock mod_perl2 objects when running outside of Apache
.SH "VERSION"
.IX Header "VERSION"
version 0.05
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Test::Mock::Apache2;
\&
\&  my $r = Apache2::RequestUtil\->request();
\&  my $apr_req = APR::Request::Apache2\->handle($r);
\&
\&  ...
\&
\&  # Add configuration data that $r\->dir_config() later can supply
\&
\&  use Test::Mock::Apache2 { MyAppSetting => "foo", MyPort => 1233 };
\&
\&  my $r = Apache2::RequestUtil\->request();
\&  my $port = $r\->dir_config(\*(AqMyPort\*(Aq);    # 1233
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Allows to work with \f(CW\*(C`Apache2::*\*(C'\fR objects without a running modperl server.
.PP
The purpose of this class is to be able to run some minimal unit tests for
a code base that's hopelessly entangled with the Apache internals.
.PP
Current state is, to say the least, \fBvery incomplete\fR. Will be hopefully
expanded as the unit test suite grows.
.SH "METHODS"
.IX Header "METHODS"
.SS "ap2_server"
.IX Subsection "ap2_server"
Return a mock Apache2::ServerRec \fBempty\fR object, with the following
methods: \f(CW\*(C`server_hostname\*(C'\fR.
.PP
To set the hostname, set a \f(CW\*(C`server_hostname\*(C'\fR key in the configuration
block when using the module.
.PP
.Vb 1
\&  use Test::Mock::Apache2 { server_hostname => \*(Aqlocalhost.localdomain\*(Aq };
.Ve
.PP
Default \f(CW\*(C`server_hostname\*(C'\fR is \f(CW\*(C`localhost\*(C'\fR.
.SS "ap2_request"
.IX Subsection "ap2_request"
Return a mock Apache2::RequestRec \fBempty\fR object, with the following
methods: \f(CW\*(C`hostname\*(C'\fR, \f(CW\*(C`dir_config\*(C'\fR, \f(CW\*(C`server\*(C'\fR.
.SS "ap2_request_ap2"
.IX Subsection "ap2_request_ap2"
Return a mock APR::Request::Apache2 \fBempty\fR object with the
following methods: \f(CW\*(C`new\*(C'\fR, \f(CW\*(C`jar\*(C'\fR, \f(CW\*(C`param\*(C'\fR, \f(CW\*(C`handle\*(C'\fR.
.SS "ap2_requestutil"
.IX Subsection "ap2_requestutil"
Mocks the Apache2::RequestUtil> module to fake the \f(CW\*(C`+GlobalRequest\*(C'\fR
option, so you can execute code like:
.PP
.Vb 1
\&  my $r = Apache2::RequestUtil\->request();
.Ve
.PP
and get back an Apache2::RequestRec object.
Uses \*(L"ap2_request\*(R".
Supplies the following methods: \f(CW\*(C`new\*(C'\fR, \f(CW\*(C`request\*(C'\fR, \f(CW\*(C`dir_config\*(C'\fR.
.SS "init_mocked_objects"
.IX Subsection "init_mocked_objects"
Creates the initial instances of the mocked objects
for the various \f(CW\*(C`Apache2::*\*(C'\fR classes.
.SH "AUTHOR"
.IX Header "AUTHOR"
Cosimo Streppone <cosimo@opera.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2012 by Opera Software \s-1ASA.\s0
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The (three\-clause) BSD License
.Ve
