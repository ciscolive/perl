.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::DigestAuth 3"
.TH Mojolicious::Plugin::DigestAuth 3 "2015-05-09" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::DigestAuth \- HTTP Digest Authentication for Mojolicious
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   $self\->plugin(\*(Aqdigest_auth\*(Aq);
\&
\&   # In your action
\&   return unless $self\->digest_auth(allow => { sshaw => \*(Aqpassword\*(Aq });
\&
\&   # Or, in startup()
\&   my $r = $self\->digest_auth(\*(Aq/admin\*(Aq, allow => { sshaw => \*(Aqpassword\*(Aq });
\&   $r\->route(\*(Aq/new\*(Aq)\->to(\*(Aqusers#new\*(Aq);
.Ve
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.SS "\s-1SETUP\s0"
.IX Subsection "SETUP"
Configuration can be done globally when loading the plugin
.PP
.Vb 1
\&    $self\->plugin(\*(Aqdigest_auth\*(Aq, %options)
.Ve
.PP
or locally when calling \f(CW\*(C`digest_auth\*(C'\fR
.PP
.Vb 1
\&    $self\->digest_auth(%options);
.Ve
.PP
Local options override their global counterparts. For example, the following
will apply to all authentication requests
.PP
.Vb 4
\&   # setup()
\&   $self\->plugin(\*(Aqdigest_auth\*(Aq, realm   => \*(AqThangz\*(Aq,
\&                                expires => 120,
\&                                allow   => \*(Aq/path/to/htdigest_file\*(Aq);
\&
\&
\&   # controller
\&   sub show
\&   {
\&       my $self = shift;
\&       return unless $self\->digest_auth;
\&
\&       # ...
\&   }
.Ve
.PP
But can be overridden within an action
.PP
.Vb 8
\&   sub edit
\&   {
\&       my $self = shift;
\&       return unless $self\->digest_auth(realm   => \*(AqRealmX\*(Aq,
\&                                        expires => 24*3600,
\&                                        allow   => { sshaw => \*(AqAy3Br4h_!\*(Aq });
\&       # ...
\&   }
.Ve
.PP
For a full list of options see \*(L"digest_auth\*(R".
.SS "\s-1AUTHENTICATION\s0"
.IX Subsection "AUTHENTICATION"
By default MD5/auth authentication is performed. This is configurable, see \*(L"digest_auth\*(R".
.PP
\fI\s-1DB\s0\fR
.IX Subsection "DB"
.PP
Authentication information is given via the \f(CW\*(C`allow\*(C'\fR option and can be retrieved
from a variety of sources:
.IP "\(bu" 4
A hash reference without a realm
.Sp
.Vb 2
\&    $self\->plugin(\*(Aqdigest_auth\*(Aq, allow => { sshaw => \*(Aqmy_pAzw3rD\*(Aq,
\&                                            admin => \*(Aq\->fofinha!\*(Aq });
.Ve
.Sp
In this case users will either be placed into the realm given by the \f(CW\*(C`realm\*(C'\fR option or
the default realm, \f(CW\*(C`WWW\*(C'\fR.
.Sp
Passwords must be given in plain text.
.IP "\(bu" 4
A hash reference with realm(s)
.Sp
.Vb 2
\&    $self\->plugin(\*(Aqdigest_auth\*(Aq, allow => { \*(AqAdmin Realm\*(Aq => { sshaw => \*(Aqmy_pAzw3rD\*(Aq },
\&                                            \*(AqWWW Users\*(Aq   => { tony  => \*(Aqvrooooooom\*(Aq });
.Ve
.Sp
Passwords must be given in plain text.
.IP "\(bu" 4
An htdigest style file
.Sp
.Vb 1
\&    $self\->plugin(\*(Aqdigest_auth\*(Aq, allow => \*(Aq/home/sshaw/www_users\*(Aq);
.Ve
.IP "\(bu" 4
An object with a \f(CW\*(C`get()\*(C'\fR method that returns \fBhashed\fR passwords
.Sp
.Vb 1
\&    $self\->plugin(\*(Aqdigest_auth\*(Aq, allow => $db);
.Ve
.Sp
Arguments are passed to \f(CW\*(C`get()\*(C'\fR in the following order: \f(CW\*(C`realm, username\*(C'\fR.
.PP
\fI\s-1PERFORMING AUTHENTICATION\s0\fR
.IX Subsection "PERFORMING AUTHENTICATION"
.PP
Authentication can be performed by calling the \f(CW\*(C`digest_auth\*(C'\fR method
from within the action you'd like to protect:
.PP
.Vb 4
\&   sub some_action
\&   {
\&       my $self = shift;
\&       return unless $self\->digest_auth;
\&
\&       # Authenticated users get here
\&   }
.Ve
.PP
If authentication is successful \f(CW\*(C`digest_auth\*(C'\fR returns true, otherwise \f(CW\*(C`undef\*(C'\fR is returned
and a \s-1HTTP 401\s0 status code and the message: \f(CW\*(C`HTTP 401: Unauthorized\*(C'\fR are sent
to the client. Currently this message cannot be changed.
.PP
Authentication can also be performed for a set of routes by calling
\&\f(CW\*(C`digest_auth\*(C'\fR from within your application's startup function. This form performs authentication automatically
for all of the routes defined under the given \s-1URL:\s0
.PP
.Vb 1
\&   package YourWebApp;
\&
\&   use Mojo::Base \*(AqMojolicious\*(Aq;
\&
\&   sub startup
\&   {
\&     my $self = shift;
\&     $self\->plugin(\*(Aqdigest_auth\*(Aq, %options);
\&
\&     # ...
\&
\&     my $admin = $self\->digest_auth(\*(Aq/admin\*(Aq);
\&     $admin\->route(\*(Aq/new\*(Aq)\->to(\*(Aqusers#new\*(Aq);
\&     $admin\->route(\*(Aq/edit/:id\*(Aq)\->to(\*(Aqusers#edit\*(Aq);
\&   }
.Ve
.PP
In this case authentication is performed via a bridge with a callback.
.PP
\fI\s-1WEB SERVERS\s0\fR
.IX Subsection "WEB SERVERS"
.PP
Authentication will fail if your application is sitting behind a web server does not pass the Authorization header
to your application. In Apache this can be achieved with \f(CW\*(C`mod_rewrite\*(C'\fR:
.PP
.Vb 2
\&   RewriteEngine On
\&   RewriteRule ^ \- [E=X\-HTTP_AUTHORIZATION:%{HTTP:Authorization}]
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "plugin"
.IX Subsection "plugin"
.Vb 1
\&     $self\->plugin(\*(Aqdigest_auth\*(Aq, %options)
.Ve
.PP
Loads the plugin and sets up the defaults given by \f(CW%options\fR.
.PP
\fIArguments\fR
.IX Subsection "Arguments"
.PP
\&\f(CW%options\fR
.PP
See \*(L"digest_auth\*(R".
.PP
\fIErrors\fR
.IX Subsection "Errors"
.PP
This method will \f(CW\*(C`croak\*(C'\fR if if any of the options are invalid or if there is an error loading the password database.
.SS "digest_auth"
.IX Subsection "digest_auth"
.Vb 2
\&     $self\->digest_auth(%options)
\&     $routes = $self\->digest_auth($url, %options)
.Ve
.PP
\fIArguments\fR
.IX Subsection "Arguments"
.PP
\&\f(CW$url\fR
.PP
Optional. If provided authentication will be performed for all routes defined under \f(CW$url\fR.
See \*(L"\s-1PERFORMING AUTHENTICATION\*(R"\s0.
.PP
\&\f(CW%options\fR
.IP "\(bu" 4
\&\f(CW\*(C`allow => { user => password }\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`allow => { realm => { user => password }}\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`allow => \*(Aqhtdigest_file\*(Aq\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`allow => $obj\*(C'\fR
.Sp
See \*(L"\s-1DB\*(R"\s0.
.IP "\(bu" 4
\&\f(CW\*(C`algorithm => \*(AqMD5\*(Aq | \*(AqMD5\-sess\*(Aq\*(C'\fR
.Sp
Digest algorithm, either \f(CW\*(AqMD5\*(Aq\fR or \f(CW\*(AqMD5\-sess\*(Aq\fR. Defaults to \f(CW\*(AqMD5\*(Aq\fR, \f(CW\*(AqMD5\-sess\*(Aq\fR requires a \f(CW\*(C`qop\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`domain => \*(Aq/path\*(Aq | \*(Aqyour.domain.com\*(Aq\*(C'\fR
.Sp
Authentication domain. Defaults to \f(CW\*(Aq/\*(Aq\fR.
.IP "\(bu" 4
\&\f(CW\*(C`expires => seconds\*(C'\fR
.Sp
Nonce lifetime. Defaults to \f(CW300\fR seconds (5 minutes).
.IP "\(bu" 4
\&\f(CW\*(C`qop => \*(Aqauth\*(Aq | \*(Aq\*(Aq\*(C'\fR
.Sp
Quality of protection. Defaults to \f(CW\*(Aqauth\*(Aq\fR.  \f(CW\*(C`auth\-int\*(C'\fR is not supported.
.IP "\(bu" 4
\&\f(CW\*(C`realm => \*(AqYour Realm\*(Aq\*(C'\fR
.Sp
Authentication realm. Defaults to \f(CW\*(AqWWW\*(Aq\fR.
.IP "\(bu" 4
\&\f(CW\*(C`secret => \*(Aqa salt value\*(Aq\*(C'\fR
.Sp
Used to create the nonce. Defaults to your application's secret, which means
you must set your application's secret before loading this plugin. If you're using an array the \fBfirst value\fR
in the array will be used.
.Sp
\&\fB\s-1IMPORTANT\s0\fR: Changing this value will cause an \s-1HTTP 400\s0 response to be returned to any clients with cached authentication
credentials.
.IP "\(bu" 4
\&\f(CW\*(C`support_broken_browsers => 1 | 0\*(C'\fR
.Sp
When processing requests from certain browsers skip steps that would otherwise result in a \s-1HTTP 400\s0 response. Defaults to \f(CW1\fR.
.Sp
Currently only applies to \s-1IE 5\s0 and 6. These two browsers fail to append the query string to the \s-1URI\s0 included in the
Authorization header and, after authenticating, fail to include the opaque value.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
Without a \s-1URL\s0 prefix:
.PP
True if authentication was successful, \f(CW\*(C`undef\*(C'\fR otherwise. If unsuccessful a \s-1HTTP 401\s0 status code and message are sent to the client.
.PP
With a \s-1URL\s0 prefix:
.PP
An instance of Mojolicious::Routes. See \*(L"\s-1PERFORMING AUTHENTICATION\*(R"\s0.
.PP
\fIErrors\fR
.IX Subsection "Errors"
.PP
Will \f(CW\*(C`croak\*(C'\fR if any of the options are invalid.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Plugin::BasicAuth, http://en.wikipedia.org/wiki/Digest_access_authentication
.SH "AUTHOR"
.IX Header "AUTHOR"
Skye Shaw (skye.shaw \s-1AT\s0 gmail.com)
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2011 Skye Shaw.
This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
