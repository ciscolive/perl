.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Notifications::HTML 3"
.TH Mojolicious::Plugin::Notifications::HTML 3 "2020-03-31" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Notifications::HTML \- Event Notifications using HTML
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  # Register the engine
\&  plugin Notifications => {
\&    HTML => 1
\&  };
\&
\&  # In the template
\&  %= notifications \*(Aqhtml\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This plugin is a simple notification engine for \s-1HTML.\s0
.PP
If it does not suit your needs, you can easily
write your own engine.
.SH "HELPERS"
.IX Header "HELPERS"
.SS "notify"
.IX Subsection "notify"
See the base notify helper.
.SS "notifications"
.IX Subsection "notifications"
.Vb 2
\&  $c\->notify(warn => \*(Aqwrong\*(Aq);
\&  $c\->notify(success => \*(Aqright\*(Aq);
\&
\&  %= notifications \*(Aqhtml\*(Aq;
\&  # <div class="notify notify\-warn">wrong</div>
\&  # <div class="notify notify\-success">right</div>
.Ve
.PP
Will render each notification using
notify_html.
.SH "EXPORTABLE FUNCTIONS"
.IX Header "EXPORTABLE FUNCTIONS"
.SS "notify_html"
.IX Subsection "notify_html"
.Vb 1
\&  use Mojolicious::Plugin::Notifications::HTML qw/notify_html/;
\&
\&  notify_html(warn => \*(AqThis is a warning\*(Aq)
\&  # <div class="notify notify\-warn">This is a warning</div>
\&
\&  notify_html(announce => {
\&    ok => \*(Aqhttp://example.com/ok\*(Aq,
\&    ok_label => \*(AqOkay!\*(Aq
\&  # }, \*(AqConfirm, please!\*(Aq)
\&  # <div class="notify notify\-announce">
\&  #   Confirm, please!
\&  #   <form action="http://example.com/ok" method="post">
\&  #     <button>Okay!</button>
\&  #   </form>
\&  # </div>
.Ve
.PP
Returns the formatted text in a \f(CW\*(C`<div />\*(C'\fR element
with the class \f(CW\*(C`notify\*(C'\fR and the class \f(CW\*(C`notify\-$type\*(C'\fR, where \f(CW$type\fR is
the notification type you passed.
In case an \f(CW\*(C`ok\*(C'\fR parameter is passed, this will add a \s-1POST\s0 form
for confirmation. In case an \f(CW\*(C`ok_label\*(C'\fR is passed, this will be the label
for the confirmation button.
In case a \f(CW\*(C`cancel\*(C'\fR parameter is passed, this will add a \s-1POST\s0 form
for cancelation. In case a \f(CW\*(C`cancel_label\*(C'\fR is passed, this will be the label
for the cancelation button.
.PP
If the first parameter is a Mojolicious::Controller object,
the button will have a
csrf_token
parameter to validate.
.PP
This is meant to be used by other engines as a fallback.
.PP
\&\fBConfirmation is \s-1EXPERIMENTAL\s0!\fR
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
.Vb 1
\&  https://github.com/Akron/Mojolicious\-Plugin\-Notifications
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2014\-2020, Nils Diewald <http://nils-diewald.de/>.
.PP
This program is free software, you can redistribute it
and/or modify it under the terms of the Artistic License version 2.0.
