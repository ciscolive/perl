.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Getopt::EX::Loader 3"
.TH Getopt::EX::Loader 3 "2020-10-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Getopt::EX::Loader \- RC/Module loader
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Getopt::EX::Loader;
\&
\&  my $loader = Getopt::EX::Loader\->new(
\&      BASECLASS => \*(AqApp::example\*(Aq,
\&      );
\&
\&  $loader\->load_file("$ENV{HOME}/.examplerc");
\&
\&  $loader\->deal_with(\e@ARGV);
\&
\&  my $parser = Getopt::Long::Parser\->new;
\&  $parser\->getoptions( ... , $loader\->builtins )
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the main interface to use Getopt::EX modules.  You can
create loader object, load user defined rc file, load modules
specified by command arguments, substitute user defined option and
insert default options defined in rc file or modules, get module
defined built-in option definition for option parser.
.PP
Most of work is done in \f(CW\*(C`deal_with\*(C'\fR method.  It parses command
arguments and load modules specified by \fB\-M\fR option by default.  Then
it scans options and substitute them according to the definitions in
rc file or modules.  If \s-1RC\s0 and modules defines default options, they
are inserted to the arguments.
.PP
Module can define built-in options which should be handled option
parser.  They can be taken by \f(CW\*(C`builtins\*(C'\fR method, so you should give
them to option parser.
.PP
If \f(CW\*(C`App::example\*(C'\fR is given as a \f(CW\*(C`BASECLASS\*(C'\fR of the loader object, it
is prepended to all module names.  So command line
.PP
.Vb 1
\&    % example \-Mfoo
.Ve
.PP
will load \f(CW\*(C`App::example::foo\*(C'\fR module.
.PP
In this case, if module \f(CW\*(C`App::example::default\*(C'\fR exists, it is loaded
automatically without explicit indication.  Default module can be used
just like a startup \s-1RC\s0 file.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBconfigure\fR \fIname\fR => \fIvalue\fR, ..." 4
.IX Item "configure name => value, ..."
.RS 4
.PD 0
.IP "\s-1RCFILE\s0" 4
.IX Item "RCFILE"
.PD
Define the name of startup file.
.IP "\s-1BASECLASS\s0" 4
.IX Item "BASECLASS"
Define the base class for user defined module.  Use array reference to
specify multiple base classes; they are tried to be loaded in order.
.IP "\s-1MODULE_OPT\s0" 4
.IX Item "MODULE_OPT"
Define the module option string.  String \fB\-M\fR is set by default.
.IP "\s-1DEFAULT\s0" 4
.IX Item "DEFAULT"
Define default module name.  String \fBdefault\fR is set by default.  Set
\&\f(CW\*(C`undef\*(C'\fR if you don't want load any default module.
.IP "\s-1PARSE_MODULE_OPT\s0" 4
.IX Item "PARSE_MODULE_OPT"
Default true, and parse module options given to \f(CW\*(C`deal_with\*(C'\fR method.
When disabled, module option in command line argument is not
processed, but module option given in rc or module files are still
effective.
.IP "\s-1IGNORE_NO_MODULE\s0" 4
.IX Item "IGNORE_NO_MODULE"
Default false, and process dies when given module was not found on the
system.  When set true, program ignores not-existing module and stop
parsing at the point leaving the argument untouched.
.RE
.RS 4
.RE
.IP "\fBbuckets\fR" 4
.IX Item "buckets"
Return loaded Getopt::EX::Module object list.
.IP "\fBload_file\fR" 4
.IX Item "load_file"
Load specified file.
.IP "\fBload_module\fR" 4
.IX Item "load_module"
Load specified module.
