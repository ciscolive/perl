.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Reply::Plugin 3"
.TH Reply::Plugin 3 "2016-08-24" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Reply::Plugin \- base class for Reply plugins
.SH "VERSION"
.IX Header "VERSION"
version 0.42
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  package Reply::Plugin::Foo;
\&  use strict;
\&  use warnings;
\&
\&  use base \*(AqReply::Plugin\*(Aq;
\&
\&  # ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Reply plugin is an object which adds some functionality to a Reply
instance by implementing some specific methods which the Reply object will call
at various points during execution. Plugins may implement as many callback
methods as necessary to implement their functionality (although the more
callbacks a given plugin implements, the more likely it is that the plugin may
be more useful as multiple independent plugins).
.PP
Callback methods have three potential calling conventions:
.IP "wrapped" 4
.IX Item "wrapped"
Wrapped callbacks receive a coderef as their first argument (before any
arguments to the callback itself), and that coderef can be used to call the
next callback in the list (if more than one plugin implements a given
callback). In particular, this allows calling the next plugin multiple times,
or not at all if necessary. Wrapped plugins should always call their coderef in
list context. All plugins listed below are wrapped plugins unless indicated
otherwise.
.IP "chained" 4
.IX Item "chained"
Chained callbacks receive a list of arguments, and return a new list of
arguments which will be passed to the next plugin in the chain. This allows
each plugin a chance to modify a value before it's actually used by the repl.
.IP "concatenate" 4
.IX Item "concatenate"
Concatenate callbacks receive a list of arguments, and return a list of
response values. Each plugin that implements the given callback will be called
with the same arguments, and the results will be concatenated together into a
single list, which will be returned. Callbacks for published messages are of
this type.
.SS "\s-1CALLBACKS\s0"
.IX Subsection "CALLBACKS"
.IP "prompt" 4
.IX Item "prompt"
Called to determine the prompt to use when reading the next line. Takes no
arguments, and returns a single string to use as the prompt. The default
implementation returns \f(CW">"\fR
.IP "read_line" 4
.IX Item "read_line"
Called to actually read a line from the user. Takes no arguments, and returns a
single string. The default implementation uses the \f(CW\*(C`<>\*(C'\fR operator to read a
single line from \f(CW\*(C`STDIN\*(C'\fR.
.ie n .IP "command_$name (chained)" 4
.el .IP "command_\f(CW$name\fR (chained)" 4
.IX Item "command_$name (chained)"
If the line read from the user is of the form \f(CW"#foo args..."\fR, then plugins
will be searched for a callback method named \f(CW\*(C`command_foo\*(C'\fR. This callback
takes a single string containing the provided arguments, and returns a new line
to evaluate instead, if any.
.IP "mangle_line (chained)" 4
.IX Item "mangle_line (chained)"
Modifies the line read from the user before it's evaluated. Takes the line as a
string and returns the modified line.
.IP "compile" 4
.IX Item "compile"
Compiles the string of Perl code into a coderef. Takes the line of code as a
string and a hash of extra parameters, and returns the coderef to be executed.
The default implementation uses Eval::Closure to compile the given string.
.Sp
The hash of extra parameters is passed directly to \f(CW\*(C`eval_closure\*(C'\fR.
.IP "execute" 4
.IX Item "execute"
Executes the coderef which has just been compiled. Takes the coderef and a list
of parameters to pass to it, and returns the list of results returned by
calling the coderef. The default implementation just calls the coderef
directly.
.IP "mangle_error (chained)" 4
.IX Item "mangle_error (chained)"
If the \f(CW\*(C`compile\*(C'\fR or \f(CW\*(C`execute\*(C'\fR callbacks throw an exception, this callback
will be called to modify the exception before it is passed to \f(CW\*(C`print_error\*(C'\fR.
It receives the exception and returns the modified exception.
.IP "print_error" 4
.IX Item "print_error"
If the \f(CW\*(C`compile\*(C'\fR or \f(CW\*(C`execute\*(C'\fR callbacks throw an exception, this callback
will be called to display it to the user. It receives the exception and returns
nothing. The default implementation just uses \f(CW\*(C`print\*(C'\fR to print it to the
screen.
.IP "mangle_result (chained)" 4
.IX Item "mangle_result (chained)"
This callback is used to modify the result of evaluating the line of code
before it is displayed. It receives the list of results and returns a modified
list of results.
.IP "print_result" 4
.IX Item "print_result"
This callback displays to the user the results of evaluating the given line of
code. It receives the list of results, and returns nothing. The default
implementation just uses \f(CW\*(C`print\*(C'\fR to print them to the screen.
.IP "loop (chained)" 4
.IX Item "loop (chained)"
This callback is called at the end of each evaluation. It receives whether the
repl has been requested to terminate so far, and returns whether the repl
should terminate.
.PP
Reply plugins can also communicate among each other via a pub/sub mechanism. By
calling the \f(CW\*(C`publish\*(C'\fR method, all plugins which respond to the given message
(implement a method of the given name) will have that method called with the
given arguments, and all of the responses will be collected and returned. Some
messages used by the default plugins are:
.IP "tab_handler ($line)" 4
.IX Item "tab_handler ($line)"
Plugins can publish this message when they want to attempt tab completion.
Plugins that respond to this message should return a list of potential
completions of the line which is passed in.
.IP "lexical_environment" 4
.IX Item "lexical_environment"
Plugins which wish to modify the lexical environment should do so by
implementing this message, which should return a hashref of variable names
(including sigils) to value references. There can be more than one lexical
environment (each maintained by a different plugin), so plugins that wish to
inspect the lexical environment should do so by calling
\&\f(CW\*(C`$self\->publish(\*(Aqlexical_environment\*(Aq)\*(C'\fR, and then merging together all of
the hashrefs which are returned.
.IP "package" 4
.IX Item "package"
Plugins which wish to modify the currently active package should do so by
implementing this message, which should return the name of the current package.
Then, to access the currently active package, a plugin can call
\&\f(CW\*(C`($self\->publish(\*(Aqpackage\*(Aq))[\-1]\*(C'\fR.
.PP
Your plugins, however, are not limited to these messages \- you can use whatever
messages you want to communicate.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "publish ($name, @args)"
.el .SS "publish ($name, \f(CW@args\fP)"
.IX Subsection "publish ($name, @args)"
Publish a message to other plugins which respond to it. All loaded plugins
which implement a method named \f(CW$name\fR will have it called with \f(CW@args\fR as
the parameters. Returns a list of everything that each plugin responded with.
.SS "commands"
.IX Subsection "commands"
Returns the names of the \f(CW\*(C`#\*(C'\fR commands that this plugin implements. This can
be used in conjunction with \f(CW\*(C`publish\*(C'\fR \- \f(CW\*(C`$plugin\->publish(\*(Aqcommands\*(Aq)\*(C'\fR
will return a list of all commands which are available in the current Reply
session.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jesse Luehrs <doy@tozt.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2016 by Jesse Luehrs.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The MIT (X11) License
.Ve
