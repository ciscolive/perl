.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::App::Meta::Role::Attribute::Option 3"
.TH MooseX::App::Meta::Role::Attribute::Option 3 "2019-05-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::App::Meta::Role::Attribute::Option \- Meta attribute role for options
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This meta attribute role will automatically be applied to all attributes
that should be used as options.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
In your app and command classes you can
use the following attributes in option or parameter definitions.
.PP
.Vb 12
\& option \*(Aqmyoption\*(Aq => (
\&     is                 => \*(Aqrw\*(Aq,
\&     isa                => \*(AqArrayRef[Str]\*(Aq,
\&     documentation      => \*(AqMy special option\*(Aq,
\&     cmd_flag           => \*(Aqmyopt\*(Aq,
\&     cmd_aliases        => [qw(mopt localopt)],
\&     cmd_tags           => [qw(Important!)],
\&     cmd_env            => \*(AqMY_OPTION\*(Aq,
\&     cmd_position       => 1,
\&     cmd_split          => qr/,/,
\&     cmd_negate         => \*(Aqnotoption\*(Aq
\& );
.Ve
.SS "cmd_flag"
.IX Subsection "cmd_flag"
Use this name instead of the attribute name as the option name
.SS "cmd_type"
.IX Subsection "cmd_type"
Option to mark if this attribute should be used as an option or parameter value.
.PP
Allowed values are:
.IP "\(bu" 4
option \- Command line option
.IP "\(bu" 4
proto \- Command line option that should be processed prior to other
options (eg. a config-file option that sets other attribues) Usually only
used for plugin developmemt
.IP "\(bu" 4
parameter \- Positional parameter command line value
.SS "cmd_env"
.IX Subsection "cmd_env"
Environment variable name (only uppercase letters, numeric and underscores
allowed). If variable was not specified otherwise the value will be
taken from \f(CW%ENV\fR.
.SS "cmd_aliases"
.IX Subsection "cmd_aliases"
Arrayref of alternative option names
.SS "cmd_tags"
.IX Subsection "cmd_tags"
Extra option tags displayed in the usage information (in brackets)
.SS "cmd_position"
.IX Subsection "cmd_position"
Override the order of the parameters in the usage message.
.SS "cmd_split"
.IX Subsection "cmd_split"
Splits multiple values at the given separator string or regular expression.
Only works in conjunction with an 'ArrayRef[*]' type constraint.
ie. '\-\-myattr value1,value2' with cmd_split set to ',' would produce an
arrayref with to elements.
.SS "cmd_count"
.IX Subsection "cmd_count"
Similar to the Getopt::Long '+' modifier, cmd_count turns the attribute into
a counter. Every occurrence of the attribute in \f(CW@ARGV\fR (without any value)
would increment the resulting value by one
.SS "cmd_negate"
.IX Subsection "cmd_negate"
Sets names for the negated variant of a boolean field. Only works in conjunction
with a 'Bool' type constraint.
.SH "METHODS"
.IX Header "METHODS"
These methods are only of interest to plugin authors.
.SS "cmd_check"
.IX Subsection "cmd_check"
Runs sanity checks on options and parameters. Will usually only be executed if
either \s-1HARNESS_ACTIVE\s0 or \s-1APP_DEVELOPER\s0 environment are set.
.SS "cmd_name_possible"
.IX Subsection "cmd_name_possible"
.Vb 1
\& my @names = $attribute\->cmd_name_possible();
.Ve
.PP
Returns a list of all possible option names.
.SS "cmd_name_list"
.IX Subsection "cmd_name_list"
.Vb 1
\& my @names = $attribute\->cmd_name_list();
.Ve
.PP
Similar to cmd_name_possible this method returns a list of option names,
except for names set via cmd_negate.
.SS "cmd_name_primary"
.IX Subsection "cmd_name_primary"
.Vb 1
\& my $name = $attribute\->cmd_name_primary();
.Ve
.PP
Returns the primary option name
.SS "cmd_usage_name"
.IX Subsection "cmd_usage_name"
.Vb 1
\& my $name = $attribute\->cmd_usage_name();
.Ve
.PP
Returns the name as used by the usage text
.SS "cmd_usage_description"
.IX Subsection "cmd_usage_description"
.Vb 1
\& my $name = $attribute\->cmd_usage_description();
.Ve
.PP
Returns the description as used by the usage text
.SS "cmd_tags_list"
.IX Subsection "cmd_tags_list"
.Vb 1
\& my @tags = $attribute\->cmd_tags_list();
.Ve
.PP
Returns a list of tags
.SS "cmd_type_constraint_check"
.IX Subsection "cmd_type_constraint_check"
.Vb 1
\& $attribute\->cmd_type_constraint_check($value)
.Ve
.PP
Checks the type constraint. Returns an error message if the check fails
.SS "cmd_type_constraint_description"
.IX Subsection "cmd_type_constraint_description"
.Vb 1
\& $attribute\->cmd_type_constraint_description($type_constraint,$singular)
.Ve
.PP
Creates a description of the selected type constraint.
