.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catmandu::Logger 3"
.TH Catmandu::Logger 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catmandu::Logger \- A role for classes that need logging capabilities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package MyApp::View;
\&    use Moo;
\&
\&    with \*(AqCatmandu::Logger\*(Aq;
\&
\&    sub something {
\&        my ($self) = @_;
\&        $self\->log\->debug("started bar"); # logs with default class catergory "MyApp::View"
\&        $self\->log\->error("started bar");
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A logging role building a very lightweight wrapper to Log::Any.  Connecting
a Log::Any::Adapter should be performed prior to logging the first log message,
otherwise nothing will happen, just like with Log::Any.
.PP
The logger needs to be setup before using the logger, which could happen in the main application:
.PP
.Vb 3
\&    package main;
\&    use Log::Any::Adapter;
\&    use Log::Log4perl;
\&
\&    Log::Any::Adapter\->set(\*(AqLog4perl\*(Aq);
\&    Log::Log4perl::init(\*(Aq./log4perl.conf\*(Aq);
\&
\&    my $app = MyApp::View\->new;
\&    $app\->something();  # will print debug and error messages
.Ve
.PP
with log4perl.conf like:
.PP
.Vb 4
\&    log4perl.rootLogger=DEBUG,OUT
\&    log4perl.appender.OUT=Log::Log4perl::Appender::Screen
\&    log4perl.appender.OUT.stderr=1
\&    log4perl.appender.OUT.utf8=1
\&
\&    log4perl.appender.OUT.layout=PatternLayout
\&    log4perl.appender.OUT.layout.ConversionPattern=%d [%P] \- %p %l time=%r : %m%n
.Ve
.PP
See Log::Log4perl for more configuration options and selecting which messages
to log and which not.
.SH "CATMANDU COMMAND LINE"
.IX Header "CATMANDU COMMAND LINE"
When using the catmandu command line, the logger can be activated using the
\&\-D option on all Catmandu commands:
.PP
.Vb 2
\&     $ catmandu \-D convert JSON to YAML < data.json
\&     $ catmandu \-D export MongoDB \-\-database\-name items \-\-bag
.Ve
.PP
The log4perl configuration for the \f(CW\*(C`catmandu\*(C'\fR command line must be defined in a
\&'catmandu.yml' configuration file:
.PP
.Vb 6
\&     $ cat catmandu.yml
\&     log4perl: |
\&       log4perl.rootLogger=DEBUG,OUT
\&       log4perl.appender.OUT=Log::Log4perl::Appender::Screen
\&       log4perl.appender.OUT.stderr=1
\&       log4perl.appender.OUT.utf8=1
\&
\&       log4perl.appender.OUT.layout=PatternLayout
\&       log4perl.appender.OUT.layout.ConversionPattern=%d [%P] \- %p %l time=%r : %m%n
.Ve
.PP
The \f(CW\*(C`log4perl\*(C'\fR section can point to an inline log4perl configuration or a
filename containing the configuration.
.PP
See Catmandu::Fix::log how to include log messages in the Catmandu::Fix
language.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.SS "log"
.IX Subsection "log"
The \f(CW\*(C`log\*(C'\fR attribute holds the Log::Any::Adapter object that implements all
logging methods for the defined log levels, such as \f(CW\*(C`debug\*(C'\fR or \f(CW\*(C`error\*(C'\fR.
.PP
.Vb 1
\&    package MyApp::View::JSON;
\&
\&    extends \*(AqMyApp::View\*(Aq;
\&    with \*(AqCatmandu::Logger\*(Aq;
\&
\&    sub bar {
\&        $self\->log\->info("Everything fine so far");   # logs a info message
\&        $self\->log\->debug("Something is fishy here"); # logs a debug message
\&    }
.Ve
.PP
Your package automatically has a logging category of MyApp::View::JSON. Use lines like:
.PP
.Vb 1
\&    log4perl.logger.MyApp::View::JSON=DEBUG,STDOUT
.Ve
.PP
or
.PP
.Vb 1
\&    log4perl.logger.MyApp::View=DEBUG,STDOUT
.Ve
.PP
or
.PP
.Vb 1
\&    log4perl.logger.MyApp=DEBUG,STDOUT
.Ve
.PP
for specialized logging for your application.
.SS "log_category"
.IX Subsection "log_category"
Default is the class name.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Log::Any
