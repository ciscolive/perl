.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Rex::Transaction 3"
.TH Rex::Transaction 3 "2020-10-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rex::Transaction \- Transaction support
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
With this module you can define transactions and rollback scenarios on failure.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Rex::Transaction;
\& 
\& task \*(Aqdo\-something\*(Aq, \*(Aqserver01\*(Aq, sub {
\&   transaction {
\&     on_rollback {
\&       rmdir \*(Aq/tmp/mydata\*(Aq;
\&     };
\& 
\&     mkdir \*(Aq/tmp/mydata\*(Aq;
\&     upload \*(Aqfiles/myapp.tar.gz\*(Aq, \*(Aq/tmp/mydata\*(Aq;
\&     run \*(Aqtar xzf myapp.tar.gz \-C /tmp/mydata\*(Aq;
\&     if ( $? != 0 ) { die(\*(AqError extracting myapp.tar.gz\*(Aq); }
\&   };
\& };
.Ve
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.SS "transaction($codeRef)"
.IX Subsection "transaction($codeRef)"
Start a transaction for \f(CW$codeRef\fR. If \f(CW$codeRef\fR dies, Rex will run the on_rollback <https://metacpan.org/pod/Rex::Transaction#on_rollback> code to roll back the transaction.
.PP
.Vb 4
\& task \*(Aqdeploy\*(Aq, group => \*(Aqfrontend\*(Aq, sub {
\&   on_rollback {
\&     rmdir \*(Aq...\*(Aq;
\&   };
\&
\&   deploy \*(Aqmyapp.tar.gz\*(Aq;
\& };
\& 
\& task \*(Aqrestart_server\*(Aq, group => \*(Aqfrontend\*(Aq, sub {
\&   service apache2 => \*(Aqrestart\*(Aq;
\& };
\& 
\& task \*(Aqall\*(Aq, group => \*(Aqfrontend\*(Aq, sub {
\&   transaction {
\&     do_task [qw/deploy restart_server/];
\&   };
\& };
.Ve
.SS "on_rollback($codeRef)"
.IX Subsection "on_rollback($codeRef)"
This will execute \f(CW$codeRef\fR if a step in the transaction <https://metacpan.org/pod/Rex::Transaction#transaction> fails.
