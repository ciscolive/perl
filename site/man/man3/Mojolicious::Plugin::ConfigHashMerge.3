.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::ConfigHashMerge 3"
.TH Mojolicious::Plugin::ConfigHashMerge 3 "2017-05-24" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::ConfigHashMerge \- Perlish Configuration, with merging of deeply\-nested defaults.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  # myapp.conf (it\*(Aqs just Perl returning a hash, with possible nesting)
\&  {
\&    foo         => "bar",
\&    watch_dirs  => {
\&      music => app\->home\->rel_dir(\*(Aqmusic\*(Aq),
\&      ebooks => app\->home\->rel_dir(\*(Aqebooks\*(Aq)
\&    }
\&  };
\&
\&  # Mojolicious
\&  my $config = $self\->plugin(\*(AqConfigHashMerge\*(Aq, { options... } );
\&
\&  # Mojolicious::Lite
\&  plugin ConfigHashMerge =>
\&  {
\&    default =>
\&    {
\&      watch_dirs => {
\&        downloads => app\->home\->rel_dir(\*(Aqdownloads\*(Aq)
\&      }
\&    },
\&    file => \*(Aqmyapp.conf\*(Aq # will be loaded anyway
\&  };
\&  say $_ for (sort keys %{app\->config\->{watch_dirs}});
\&  # will print:
\&  # downloads
\&  # ebooks
\&  # music
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::ConfigHashMerge behaves \fBexactly\fR like the standard plugin
Mojolicious::Plugin::Config, except that it merges the defaults with the contents
of the config file using Hash::Merge::Simple instead of flattening the two hashes
into lists. This allows merging of deeply-nested config options.
.PP
The only change from the standard Config plugin is the replacement of these two lines:
.PP
.Vb 2
\&   $config = {%$config, %{$self\->load($mode, $conf, $app)}} if $mode;
\&   $config = {%{$conf\->{default}}, %$config} if $conf\->{default};
.Ve
.PP
with these:
.PP
.Vb 2
\&   $config = merge($config, $self\->load($mode, $conf, $app)) if $mode;
\&   $config = merge($conf\->{default}, $config) if $conf\->{default};
.Ve
.PP
So that if your defaults look like this:
.PP
.Vb 1
\&  { optA => 42, optB => { victor => 1 }, optC => [2, 7, 8] }
.Ve
.PP
And your config file looks like this:
.PP
.Vb 1
\&  { optB => { alpha => 3 }, optC => 7 }
.Ve
.PP
And your mode-specific config file looks like this:
.PP
.Vb 2
\&  { optB => { test => 1 } }
\&The merged config will look like this:
\&
\&  { optA => 42, optB => { alpha => 3, test => 1, victor => 1 }, optC => 7 }
.Ve
.PP
Instead of like this (with the regular Config plugin):
.PP
.Vb 1
\&  { optA => 42, optB => { test => 1 }, optC => 7 }
.Ve
.PP
See Mojolicious::Plugin::Config for more.
.PP
Note that this plugin also supports the \fBconfig_override\fR option in Mojolicious version 7.29+, which
allow you to override the config in your tests.
.SH "OPTIONS"
.IX Header "OPTIONS"
Mojolicious::Plugin::ConfigHashMerge supports all options supported by
Mojolicious::Plugin::Config.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::ConfigHashMerge inherits all methods from
Mojolicious::Plugin::Config and implements the following new ones.
.SS "register"
.IX Subsection "register"
.Vb 1
\&  $plugin\->register(Mojolicious\->new, { file => \*(Aqfoo.conf\*(Aq, default => { ... } });
.Ve
.PP
Register plugin in Mojolicious application. See Mojolicious::Plugin::Config for available
config options.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>, Mojolicious::Plugin::Config
