.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Model 3"
.TH Mojolicious::Plugin::Model 3 "2017-12-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Model \- Model for Mojolicious applications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Model Users
.PP
.Vb 2
\&  package MyApp::Model::Users;
\&  use Mojo::Base \*(AqMojoX::Model\*(Aq;
\&
\&  sub check {
\&    my ($self, $name, $pass) = @_;
\&
\&    # Constant
\&    return int rand 2;
\&
\&    # Or Mojo::Pg
\&    return $self\->app\->pg\->db\->query(\*(Aq...\*(Aq)\->array\->[0];
\&
\&    # Or HTTP check
\&    return $self\->app\->ua\->post($url => json => {user => $name, pass => $pass})
\&      \->rex\->tx\->json(\*(Aq/result\*(Aq);
\&  }
\&
\&  1;
.Ve
.PP
Model Users-Client
.PP
.Vb 2
\&  package MyApp::Model::Users::Client;
\&  use Mojo::Base \*(AqMyApp::Model::User\*(Aq;
\&
\&  sub do {
\&    my ($self) = @_;
\&  }
\&
\&  1;
.Ve
.PP
Mojolicious::Lite application
.PP
.Vb 2
\&  #!/usr/bin/env perl
\&  use Mojolicious::Lite;
\&
\&  use lib \*(Aqlib\*(Aq;
\&
\&  plugin \*(AqModel\*(Aq;
\&
\&  # /?user=sebastian&pass=secr3t
\&  any \*(Aq/\*(Aq => sub {
\&    my $c = shift;
\&
\&    my $user = $c\->param(\*(Aquser\*(Aq) || \*(Aq\*(Aq;
\&    my $pass = $c\->param(\*(Aqpass\*(Aq) || \*(Aq\*(Aq;
\&
\&    # client model
\&    my $client = $c\->model(\*(Aqusers\-client\*(Aq);
\&    $client\->do();
\&
\&    return $c\->render(text => "Welcome $user.") if $c\->model(\*(Aqusers\*(Aq)\->check($user, $pass);
\&    $c\->render(text => \*(AqWrong username or password.\*(Aq);
\&  };
\&
\&  app\->start;
.Ve
.PP
All available options
.PP
.Vb 2
\&  #!/usr/bin/env perl
\&  use Mojolicious::Lite;
\&
\&  plugin Model => {
\&    namespaces   => [\*(AqMyApp::Model\*(Aq, \*(AqMyApp::CLI::Model\*(Aq],
\&    base_classes => [\*(AqMyApp::Model\*(Aq],
\&    default      => \*(AqMyApp::Model::Pg\*(Aq,
\&    params => {Pg => {uri => \*(Aqpostgresql://user@/mydb\*(Aq}}
\&  };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::Model is a Model (M in \s-1MVC\s0 architecture) for Mojolicious applications. Each
model has an \f(CW\*(C`app\*(C'\fR attribute.
.SH "OPTIONS"
.IX Header "OPTIONS"
Mojolicious::Plugin::Model supports the following options.
.SS "namespaces"
.IX Subsection "namespaces"
.Vb 2
\&  # Mojolicious::Lite
\&  plugin Model => {namespaces => [\*(AqMyApp::Model\*(Aq]};
.Ve
.PP
Namespace to load models from, defaults to \f(CW$moniker::Model\fR.
.SS "base_classes"
.IX Subsection "base_classes"
.Vb 2
\&  # Mojolicious::Lite
\&  plugin Model => {base_classes => [\*(AqMyApp::Model\*(Aq]};
.Ve
.PP
Base classes used to identify models, defaults to MojoX::Model.
.SS "default"
.IX Subsection "default"
.Vb 2
\&  # Mojolicious::Lite
\&  plugin Model => {default => \*(AqMyModel\*(Aq};
\&
\&  any \*(Aq/\*(Aq => sub {
\&    my $c = shift();
\&    $c\->model\->do(); # used model MyModel
\&    # ...
\&  }
.Ve
.PP
The name of the default model to use if the name of the current model not
specified.
.SS "params"
.IX Subsection "params"
.Vb 2
\&  # Mojolicious::Lite
\&  plugin Model => {params => {DBI => {dsn => \*(Aqdbi:mysql:mydb\*(Aq}}};
.Ve
.PP
Parameters to be passed to the class constructor of the model.
.SH "HELPERS"
.IX Header "HELPERS"
Mojolicious::Plugin::Model implements the following helpers.
.SS "model"
.IX Subsection "model"
.Vb 1
\&  my $model = $c\->model($name);
.Ve
.PP
Load, create and cache a model object with given name. Default class for
model \f(CW\*(C`camelize($moniker)::Model\*(C'\fR. Return \f(CW\*(C`undef\*(C'\fR if model not found.
.SS "entity"
.IX Subsection "entity"
.Vb 1
\&  my $disposable_model = $c\->entity($name);
.Ve
.PP
Create a new model object with given name. Default class for
model \f(CW\*(C`camelize($moniker)::Model\*(C'\fR. Return \f(CW\*(C`undef\*(C'\fR if model not found.
Use \f(CW\*(C`entity\*(C'\fR instead of \f(CW\*(C`model\*(C'\fR when you need stateful objects.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::Model inherits all methods from
Mojolicious::Plugin and implements the following new ones.
.SS "register"
.IX Subsection "register"
.Vb 1
\&  $plugin\->register(Mojolicious\->new);
.Ve
.PP
Register plugin in Mojolicious application.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andrey Khozov, \f(CW\*(C`avkhozov@googlemail.com\*(C'\fR.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Alexey Stavrov, \f(CW\*(C`logioniz@ya.ru\*(C'\fR.
.PP
Denis Ibaev, \f(CW\*(C`dionys@gmail.com\*(C'\fR.
.PP
Eugen Konkov, \f(CW\*(C`kes\-kes@yandex.ru\*(C'\fR.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2017, Andrey Khozov.
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
