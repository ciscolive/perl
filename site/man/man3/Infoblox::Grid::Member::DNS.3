.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Member::DNS 3"
.TH Infoblox::Grid::Member::DNS 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Member::DNS \- Grid Member DNS object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You can configure the \s-1DNS\s0 properties of a grid member, including enabling/disabling \s-1DNS\s0 services and other \s-1DNS\s0 service parameters. The service configurations of  a grid are inherited by all members. For this reason, it is recommended that you configure services at the grid level before configuring member services. When you configure \s-1DNS\s0 services at the grid level, all grid members inherit the grid-level configuration settings, unless you specifically override them for selected members.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::Grid::Member::DNS object is automatically generated upon the successful installation of the Infoblox appliance. It does not require manual construction.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a grid member \s-1DNS\s0 object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
Apply the following attributes to get a specific grid member \s-1DNS\s0 object:
.Sp
.Vb 5
\&  name \- Optional.   Host name in string format
\&  ipv4addr \- Optional.   IPv4 address of the member
\&  ipv6addr \- Optional.   IPv6 address of the member
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  my $object   = $session\->get(
\&     object    => "Infoblox::Grid::Member::DNS",
\&     name      => "infoblox.localdomain",
\&      );
\&
\& # get all Grid::Member::DNS objects with a given extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::Member::DNS",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.Sp
If you have applied an access control list to an object, you must restart services after you update the access control list for the changes to take effect. See Infoblox::Session\->\fBrestart()\fR method.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Use this method to modify the enable_dns  property.
\&   $object\->enable_dns("false");
\&   #Submit modification
\&   my $response = $session\->modify( $object );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of the \s-1DNS\s0 properties of  a grid member.
.SS "anonymize_response_logging( )"
.IX Subsection "anonymize_response_logging( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the anonymization of captured \s-1DNS\s0 responses is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable anonymization of captured \s-1DNS\s0 responses or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get anonymize_response_logging value
\& my $anonymize_response_logging = $object\->anonymize_response_logging();
\&
\& #Modify anonymize_response_logging value
\& $object\->anonymize_response_logging(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "additional_ip_list( )"
.IX Subsection "additional_ip_list( )"
.RS 4
Use this method to add or retrieve  a list of additional  \s-1IP\s0 addresses on which \s-1DNS\s0 is enabled for a grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an IPv4 or an IPv6 address added  to the  \s-1IP\s0 configuration  list of a grid member.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get additional_ip_list
\&   $memberdns\->additional_ip_list();
\&   #Modify additional_ip_list
\&   $memberdns\->additional_ip_list( ["10.0.0.10"] );
.Ve
.RE
.RS 4
.RE
.SS "allow_gss_tsig_zone_updates( )"
.IX Subsection "allow_gss_tsig_zone_updates( )"
.RS 4
Use this method to enable/disable GSS-TSIG zone updates for this member. This setting overrides the grid GSS-TSIG zone update settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to allow GSS-TSIG zone updates for this member or \*(L"false\*(R" to disallow them. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get allow_gss_tsig_zone_updates
\&   my $allow_gss_tsig_zone_updates = $memberdns\->allow_gss_tsig_zone_updates( );
\&   #Modify allow_gss_tsig_zone_updates
\&   $memberdns\->allow_gss_tsig_zone_updates("true");
.Ve
.RE
.RS 4
.RE
.SS "allow_query( )"
.IX Subsection "allow_query( )"
.RS 4
Use this method to add or retrieve an allow_query list.
.Sp
Select \*(L"allow query\*(R" to permit queries from the specified IPv4 or IPv6 addresses and networks. The list  specifies \s-1IP\s0 address(es) and/or  network(s) from which queries are allowed or denied. The appliance can also use Transaction Signature (\s-1TSIG\s0) keys to authenticate the queries. This setting overrides the grid query settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::NamedACL object or an array reference  that contains IPv4/IPv6 addresses, networks and/or Infoblox::DNS::TSIGKey object(s).  To deny  queries, add \*(L"!\*(R" as a prefix to address(es) and network(s). Specify \*(L"any\*(R"  to allow queries from any  address. By default, queries are allowed from any address. Undefine the value to use the Grid::DNS level allow_query list.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get allow_query
\&   $memberdns\->allow_query();
\&   #Modify allow_query
\&   $memberdns\->allow_query( ["any"] );
\&
\&   #Specifying TSIG keys
\&   my $tsig_key1 = $session\->gen_tsig_key();
\&   my $query_key = Infoblox::DNS::TSIGKey\->new(
\&     name => "query_key1",
\&     key  => $tsig_key1
\&   );
\&   #Modify allow_query
\&   $memberdns\->allow_query( [ "10.0.0.10" , "20.0.0.0/24" ,"2001::123a","2003::222/64","!"."30.0.0.30" , "!"."40.10.0.0/24","!"."2004::125b","!"."2006::34bc"] );
\&
\&   #Modify allow_query to use Grid level settings
\&   $memberdns\->allow_query(undef);
\&   #Use Infoblox::Grid::NamedACL
\&   $memberdns\->allow_query($nacl);
.Ve
.RE
.RS 4
.RE
.SS "allow_recursive_query( )"
.IX Subsection "allow_recursive_query( )"
.RS 4
Use this method to enable/disable responses to recursive queries.
This setting overrides grid recursive query settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to allow responses to recursive queries or \*(L"false\*(R" to reject recursive queries. The default value is \*(L"false\*(R". Undefine to use the Grid::DNS level allow_recursive_query setting. Note: You should also undefine the recursive_query_list list to use the Grid::DNS level settings.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get allow_recursive_query
\&   my $allow_recursive_query = $memberdns\->allow_recursive_query( );
\&   #Modify allow_recursive_query
\&   $memberdns\->allow_recursive_query("true");
.Ve
.RE
.RS 4
.RE
.SS "allow_transfer( )"
.IX Subsection "allow_transfer( )"
.RS 4
Use this method to allow or reject zone transfers from specified IPv4 or IPv6 addresses and networks or to allow transfers from hosts authenticated by Transaction signature (\s-1TSIG\s0) key. This setting overrides the grid zone transfer settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses, networks and/or  Infoblox::DNS::TSIGKey object(s). To reject zone transfers, add '!' as a prefix to \s-1IP\s0 addresses and networks. Specify \*(L"any\*(R" to allow any transfer, or undefine to use the Grid::DNS level allow_transfer list.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting allow_transfer
\&   my $memberdns = $object\->allow_transfer( );
\&   #Modifying allow_transfer
\&   $memberdns\->allow_transfer(["any"]);
\&
\&   #Specifying TSIG keys
\&   my $tsig_key1 = $session\->gen_tsig_key();
\&   my $key1 = Infoblox::DNS::TSIGKey\->new(
\&     name => "key1",
\&     key  => $tsig_key1
\&   );
\&   my $key2 = Infoblox::DNS::TSIGKey\->new(
\&     name => "tsig_xfer",
\&     key  => ":2xCOMPAT"
\&   );
\&   #Modifying allow_transfer
\&   $memberdns\->allow_transfer(["10.0.0.10", $key1, "20.0.0.0/24", $key2, "2004::325f","2007::876c/64","!"."30.0.0.30", "!"."40.10.0.0/24"]);
\&
\&   #Use Grid::DNS level allow_transfer list
\&   $memberdns\->allow_transfer(undef);
\&
\&   #Use Infoblox::Grid::NamedACL
\&   $memberdns\->allow_transfer($nacl);
.Ve
.RE
.RS 4
.RE
.SS "allow_update( )"
.IX Subsection "allow_update( )"
.RS 4
Use this method to allow or reject dynamic updates from specified IPv4 or IPv6 addresses, networks or from host authenticated by \s-1TSIG\s0 key. This setting overrides grid update settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses, networks and/or Infoblox::DNS::TSIGKey object(s). To reject updates, add '!' as a prefix to \s-1IP\s0 addresses and networks. Specify \*(L"any\*(R" to allow any update, or undefine to use the Grid::DNS level allow_update list.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting allow_update
\&   $memberdns\->allow_update();
\&   #Modifying allow_update
\&   $memberdns\->allow_update(["any"]);
\&
\&   #Creating TSIG Key object.
\&   my $update_key1 = $session\->gen_tsig_key();
\&   my $up_key1 = Infoblox::DNS::TSIGKey\->new(
\&     name => "update_key",
\&     key  => $update_key1
\&     );
\&   #Modifying allow_update
\&   $memberdns\->allow_update([ $up_key1, "10.0.0.10", "20.0.0.0/24","2008::129b","!"."30.0.0.30", "!"."40.10.0.0/24","!"."2004::76bc/64"]);
\&
\&   #Use Grid::DNS level allow_update list
\&   $memberdns\->allow_update(undef);
\&   $memberdns\->update_keys(undef);
\&   #Use Infoblox::Grid::NamedACL
\&   $memberdns\->allow_update($nacl);
.Ve
.RE
.RS 4
.RE
.SS "attack_mitigation( )"
.IX Subsection "attack_mitigation( )"
.RS 4
Use this method to set or retrieve \s-1DNS\s0 attack mitigation settings for the member.
.Sp
Setting this method to a defined value implicitly sets the override_attack_mitigation method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid \s-1DNS\s0 default and automatically resets the override_attack_mitigation method to \*(L"false\*(R".
.Sp
Note that when attack_mitigation is set to a defined value and override_attack_mitigation is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->attack_mitigation($attack_mitigation); \f(CW$object\fR\->override_attack_mitigation(\*(L"false\*(R"); will set override_attack_mitigation to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_attack_mitigation(\*(L"false\*(R"); \f(CW$object\fR\->attack_mitigation($attack_mitigation); will result in override_attack_mitigation=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::AttackMitigation object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get attack_mitigation value
\& my $attack_mitigation = $memberdns\->attack_mitigation();
\& #Modify attack_mitigation
\& $memberdns\->attack_mitigation($attack_mitigation);
.Ve
.RE
.RS 4
.RE
.SS "auto_blackhole( )"
.IX Subsection "auto_blackhole( )"
.RS 4
Use this method to set or retrieve the auto blackhole settings for the member.
.Sp
Setting this method to a defined value implicitly sets the override_auto_blackhole method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid \s-1DNS\s0 default and automatically resets the override_auto_blackhole method to \*(L"false\*(R".
.Sp
Note that when auto_blackhole is set to a defined value and override_auto_blackhole is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->auto_blackhole($auto_blackhole); \f(CW$object\fR\->override_auto_blackhole(\*(L"false\*(R"); will set override_auto_blackhole to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_auto_blackhole(\*(L"false\*(R"); \f(CW$object\fR\->auto_blackhole($auto_blackhole); will result in override_auto_blackhole=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::AutoBlackHole object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get auto_blackhole value
\& my $auto_blackhole = $memberdns\->auto_blackhole();
\& #Modify auto_blackhole
\& $memberdns\->auto_blackhole($auto_blackhole);
.Ve
.RE
.RS 4
.RE
.SS "auto_create_a_and_ptr_for_lan2( )"
.IX Subsection "auto_create_a_and_ptr_for_lan2( )"
.RS 4
Use this method to enable/disable the auto-generation of A and \s-1PTR\s0 records for the \s-1LAN2 IP\s0 address, if \s-1DNS\s0 service is enabled on \s-1LAN2.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the auto-generation of A and \s-1PTR\s0 records for the \s-1LAN2 IP\s0 address or \*(L"false\*(R" to disable it. Default is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting auto_create_a_and_ptr_for_lan2
\&   my $auto_create_a_and_ptr_for_lan2 = $memberdns\->auto_create_a_and_ptr_for_lan2( );
\&   #Modifying auto_create_a_and_ptr_for_lan2
\&   $memberdns\->auto_create_a_and_ptr_for_lan2("true");
.Ve
.RE
.RS 4
.RE
.SS "auto_create_a_and_ipv6ptr_for_lan2( )"
.IX Subsection "auto_create_a_and_ipv6ptr_for_lan2( )"
.RS 4
Use this method to enable/disable the auto-generation of \s-1AAAA\s0 and IPv6 \s-1PTR\s0 records for the \s-1LAN2 IP\s0 address, if \s-1DNS\s0 service is enabled on \s-1LAN2.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the auto-generation of \s-1AAAA\s0 and IPv6 \s-1PTR\s0 records for the \s-1LAN2 IP\s0 address or \*(L"false\*(R" to disable it. Default is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting auto_create_a_and_ipv6ptr_for_lan2
\&   my $auto_create_a_and_ipv6ptr_for_lan2 = $memberdns\->auto_create_a_and_ipv6ptr_for_lan2( );
\&   #Modifying auto_create_a_and_ipv6ptr_for_lan2
\&   $memberdns\->auto_create_a_and_ipv6ptr_for_lan2("true");
.Ve
.RE
.RS 4
.RE
.SS "auto_sort_views( )"
.IX Subsection "auto_sort_views( )"
.RS 4
Use this method to enable/disable  a grid member to automatically sort \s-1DNS\s0 views. The order of the \s-1DNS\s0 views determines the order in which the appliance checks the match lists.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the automatic sorting of \s-1DNS\s0 views or \*(L"false\*(R" to disable it. Default is \*(L"false\*(R"
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting auto_sort_views
\&   $memberdns\->auto_sort_views( );
\&   #Modifying auto_sort_views
\&   $memberdns\->auto_sort_views("true");
.Ve
.RE
.RS 4
.RE
.SS "blackhole_list( )"
.IX Subsection "blackhole_list( )"
.RS 4
Use this method to set or retrieve the list of IPv4 or IPv6 addresses and networks from which \s-1DNS\s0 queries are blocked. This setting overrides the grid blackhole_list.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses and networks. To allow queries, add '!' as the prefix to \s-1IP\s0 addresses and networks. Specify \*(L"any\*(R" to block queries or undefine the usage of Grid::DNS level blackhole_list. Note: You should also undefine the enable_blackhole list to use Grid::DNS level settings.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\&    #Getting blackhole_list
\&    my $blackhole_list = $memberdns\->blackhole_list( );
\&    #Modifying blackhole_list
\&    $memberdns\->blackhole_list(["any"]);
\&    #Modifying blackhole_list
\&    $memberdns\->blackhole_list(["10.0.0.10", "20.0.0.0/24","2010::256/64","!"."2011::23cb/64","!"."30.0.0.30", "!"."40.10.0.0/24"]);
\&    #Use Grid::DNS level blackhole_list
\&    $memberdns\->blackhole_list(undef);
\&    $memberdns\->enable_blackhole(undef);
\&    #Use Infoblox::Grid::NamedACL
\&    $memberdns\->blackhole_list($nacl);
.Ve
.RE
.RS 4
.RE
.SS "blacklist_action( )"
.IX Subsection "blacklist_action( )"
.RS 4
Use this method to specify the action to perform when a domain name matches the pattern defined in a rule that is specified by the blacklist_ruleset method.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1REDIRECT\*(R"\s0 or \*(L"\s-1REFUSE\*(R".\s0 The default value is \*(L"\s-1REFUSE\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 4
\&  #Get blacklist_action
\&  my $blacklist_action = $memberdns\->blacklist_action();
\&  #Modify blacklist_action
\&  $memberdns\->blacklist_action("REDIRECT");
.Ve
.RE
.RS 4
.RE
.SS "blacklist_log_query( )"
.IX Subsection "blacklist_log_query( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether blacklist redirection queries are logged.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable logging, or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get blacklist_log_query
\&   my $blacklist_log_query = $memberdns\->nxdomain_log_query( );
\&   #Modify blacklist_log_query
\&   $memberdns\->blacklist_log_query("true");
.Ve
.RE
.RS 4
.RE
.SS "blacklist_redirect_addresses( )"
.IX Subsection "blacklist_redirect_addresses( )"
.RS 4
Use this method to specify the \s-1IP\s0 addresses the appliance includes in the response it sends in place of a blacklisted \s-1IP\s0 address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of IPv4 addresses. The default value is undefined.
.Sp
Setting this parameter to [\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"] or [], implicitly sets the override_blacklist_redirect attribute to \*(L"true\*(R". Setting this parameter to undefined causes the appliance to use the grid-level blacklist redirection settings and automatically sets the override_blacklist_redirect attribute to \*(L"false\*(R" if \*(L"enable_blacklist_redirect\*(R" is also undefined. But if \*(L"enable_blacklist_redirect\*(R" contains a value, then the override_blacklist_redirect attribute is set to \*(L"true\*(R".
.Sp
Note that when blacklist_redirect_addresses contains a valid array reference and override_blacklist_redirect is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$memberdns\fR\->blacklist_redirect_addresses([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); \f(CW$memberdns\fR\->override_blacklist_redirect(\*(L"false\*(R"); sets override_blacklist_redirect to \*(L"false\*(R", and the sequence \f(CW$memberdns\fR\->override_blacklist_redirect(\*(L"false\*(R"); \f(CW$memberdns\fR\->blacklist_redirect_addresses([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); sets override_blacklist_redirect to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get blacklist_redirect_addresses
\&   my $blacklist_redirect_addresses = $memberdns\->blacklist_redirect_addresses( );
\&   #Modify blacklist_redirect_addresses
\&   $memberdns\->blacklist_redirect_addresses(["10.0.0.10", "10.0.0.20"]);
.Ve
.RE
.RS 4
.RE
.SS "blacklist_redirect_ttl( )"
.IX Subsection "blacklist_redirect_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1TTL\s0 value of the synthetic \s-1DNS\s0 responses that result from blacklist redirection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer, from 0 to 4294967295, that represents the \s-1TTL\s0 in seconds. The default value is 60.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get blacklist_redirect_ttl
\&   my $blacklist_redirect_ttl = $memberdns\->blacklist_redirect_ttl( );
\&   #Modify blacklist_redirect_ttl
\&   $memberdns\->blacklist_redirect_ttl(60);
.Ve
.RE
.RS 4
.RE
.SS "blacklist_rulesets( )"
.IX Subsection "blacklist_rulesets( )"
.RS 4
Use this method to specify or retrieve Infoblox::DNS::Ruleset object names assigned at the grid level for blacklist redirection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains the names of the Infoblox::DNS::Ruleset objects assigned to the grid. The names must be in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get blacklist_rulesets
\&   my $blacklist_rulesets = $memberdns\->blacklist_rulesets();
\&   #Modify blacklist_rulesets
\&   $memberdns\->blacklist_rulesets(["ruleset1", "ruleset2"]);
.Ve
.RE
.RS 4
.RE
.SS "bind_check_names_policy( )"
.IX Subsection "bind_check_names_policy( )"
.RS 4
Use this method to set or retrieve the \s-1BIND\s0 check names policy, which indicates the action the appliance takes when it
encounters host names that do not comply with the Strict Hostname Checking policy. This method applies only if
the host name restriction policy  is set to \*(L"Strict Hostname Checking\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The allowed values of the parameter are \*(L"fail\*(R", \*(L"warn\*(R" or undefined. This indicates the desired \s-1BIND\s0 behavior in the case of
illegal hostnames. The default value is undefined, which means the appliance ignores illegal hostnames.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get bind_check_names_policy value
\& my $names_policy = $memberdns\->bind_check_names_policy();
\& #Modify bind_check_names_policy
\& $memberdns\->bind_check_names_policy("warn");
.Ve
.RE
.RS 4
.RE
.SS "bind_hostname_directive( )"
.IX Subsection "bind_hostname_directive( )"
.RS 4
Use this method to set or retrieve the value of \s-1BIND\s0 'hostname' directive.
.Sp
Setting this method to a defined value implicitly sets the override_bind_hostname_directive method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid \s-1DNS\s0 default and automatically resets the override_bind_hostname_directive method to \*(L"false\*(R".
.Sp
Note that when bind_hostname_directive is set to a defined value and override_bind_hostname_directive is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->bind_hostname_directive(\*(L"\s-1HOSTNAME\*(R"\s0); \f(CW$object\fR\->override_bind_hostname_directive(\*(L"false\*(R"); will set override_bind_hostname_directive to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_bind_hostname_directive(\*(L"false\*(R"); \f(CW$object\fR\->bind_hostname_directive(\*(L"true\*(R"); will result in override_bind_hostname_directive=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are \*(L"\s-1NONE\*(R", \*(L"HOSTNAME\*(R"\s0 and \*(L"\s-1USER_DEFINED\*(R".\s0 The default value is \*(L"\s-1NONE\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get bind_hostname_directive
\&   my $bind_hostname_directive = $memberdns\->bind_hostname_directive();
\&   #Modify bind_hostname_directive
\&   $memberdns\->bind_hostname_directive("HOSTNAME");
.Ve
.RE
.RS 4
.RE
.SS "bind_hostname_directive_fqdn( )"
.IX Subsection "bind_hostname_directive_fqdn( )"
.RS 4
Use this method to set or retrieve the value of \s-1BIND\s0 user-defined hostname for 'hostname' directive.
.Sp
Note that to enable user-defined 'hostname' the bind_hostname_directive should be set to \*(L"\s-1USER_DEFINED\*(R".\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is Fully-Qualified Domain Name (\s-1FQDN\s0) in a string format. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get bind_hostname_directive_fqdn
\&   my $bind_hostname_directive_fqdn = $memberdns\->bind_hostname_directive_fqdn();
\&   #Modify bind_hostname_directive_fqdn
\&   $memberdns\->bind_hostname_directive_fqdn("foo\-bar.com");
.Ve
.RE
.RS 4
.RE
.SS "capture_dns_queries_on_all_domains( )"
.IX Subsection "capture_dns_queries_on_all_domains( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the capturing of \s-1DNS\s0 queries for all domains is enabled or disabled.
.Sp
Setting this method to a defined value implicitly sets the override_capture_dns_queries_on_all_domains method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid \s-1DNS\s0 default and automatically resets the override_capture_dns_queries_on_all_domains method to \*(L"false\*(R".
.Sp
Note that when capture_dns_queries_on_all_domains is set to a defined value and override_capture_dns_queries_on_all_domains is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->capture_dns_queries_on_all_domains(\*(L"true\*(R"); \f(CW$object\fR\->override_capture_dns_queries_on_all_domains(\*(L"false\*(R"); will set override_capture_dns_queries_on_all_domains to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_capture_dns_queries_on_all_domains(\*(L"false\*(R"); \f(CW$object\fR\->capture_dns_queries_on_all_domains(\*(L"true\*(R"); will result in override_capture_dns_queries_on_all_domains=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable capturing of \s-1DNS\s0 queries for all domains or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get capture_dns_queries_on_all_domains value
\& my $capture_dns_queries_on_all_domains = $object\->capture_dns_queries_on_all_domains();
\&
\& #Modify capture_dns_queries_on_all_domains value
\& $object\->capture_dns_queries_on_all_domains(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "copy_xfer_to_notify( )"
.IX Subsection "copy_xfer_to_notify( )"
.RS 4
Use this method to enable/disable copying of the allowed IPs from zone transfer list into also-notify statement in named.conf.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to enable copying of the allowed IPs from zone transfer list into also-notify statement in named.conf. Set the parameter to \*(L"false\*(R" to disable it.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  # Get attribute value
\&  my $value = $memberdns\->copy_xfer_to_notify();
\&  # Modify attribute value
\&  $memberdns\->copy_xfer_to_notify(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "custom_root_name_servers( )"
.IX Subsection "custom_root_name_servers( )"
.RS 4
Use this method to set or retrieve the list of customized root nameserver(s). You can either select and use Internet root name servers or specify custom root name servers by providing a host name and \s-1IP\s0 address to which the Infoblox appliance can send queries.
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::DNS::RootNameServer object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specify a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Get the root nameserver list
\& my $rootNS_list = $memberdns\->custom_root_name_servers();
\& #Modify the root nameserver list
\& #Creating RootNameServer objects.
\& my $rootns1 = Infoblox::DNS::RootNameServer\->new(
\&     ipv4addr  => "4.4.4.4",
\&     host_name => "rns1.test.com",
\&     );
\&
\& my $rootns2 = Infoblox::DNS::RootNameServer\->new(
\&     ipv4addr  => "5.5.5.5",
\&     host_name => "rns2.test.com",
\&     );
\&
\& $memberdns\->custom_root_name_servers([$rootns1, $rootns2]);
.Ve
.RE
.RS 4
.RE
.SS "disable_edns( )"
.IX Subsection "disable_edns( )"
.RS 4
Use this method to disable or enable \s-1EDNS0\s0 support for queries that require recursive resolution on Grid members.
.Sp
Setting this method to a defined value implicitly sets the override_disable_edns method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid \s-1DNS\s0 default and automatically resets the override_disable_edns method to \*(L"false\*(R".
.Sp
Note that when disable_edns is set to a defined value and override_disable_edns is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->disable_edns(\*(L"true\*(R"); \f(CW$object\fR\->override_disable_edns(\*(L"false\*(R"); will set override_disable_edns to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_disable_edns(\*(L"false\*(R"); \f(CW$object\fR\->disable_edns(\*(L"true\*(R"); will result in override_disable_edns=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to disable \s-1EDNS0\s0 or \*(L"false\*(R" to enable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable_edns flag
\& my $disable_edns = $memberdns\->disable_edns();
\& #Modify disable_edns flag
\& $memberdns\->disable_edns("true");
.Ve
.RE
.RS 4
.RE
.SS "dns_cache_acceleration_ttl( )"
.IX Subsection "dns_cache_acceleration_ttl( )"
.RS 4
Use this method to set or retrieve the minimum \s-1TTL\s0 value, in seconds, that a \s-1DNS\s0 record must have in order for it to be cached by the \s-1DNS\s0 Cache Acceleration service.
.Sp
Setting this method to a defined value implicitly sets the override_dns_cache_acceleration_ttl method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid \s-1DNS\s0 default and automatically resets the override_dns_cache_acceleration_ttl method to \*(L"false\*(R".
.Sp
Note that when dns_cache_acceleration_ttl is set to a defined value and override_dns_cache_acceleration_ttl is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->dns_cache_acceleration_ttl(60); \f(CW$object\fR\->override_dns_cache_acceleration_ttl(\*(L"false\*(R"); will set override_dns_cache_acceleration_ttl to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_dns_cache_acceleration_ttl(\*(L"false\*(R"); \f(CW$object\fR\->dns_cache_acceleration_ttl(30); will result in override_dns_cache_acceleration_ttl=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An integer from 1 to 65000 that represents the \s-1TTL\s0 in seconds. The default value is 1.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get dns_cache_acceleration_ttl
\&   my $dns_cache_acceleration_ttl = $member_dns\->dns_cache_acceleration_ttl( );
\&   #Modify dns_cache_acceleration_ttl
\&   $member_dns\->dns_cache_acceleration_ttl(60);
.Ve
.RE
.RS 4
.RE
.SS "dns_cache_acceleration_status( )"
.IX Subsection "dns_cache_acceleration_status( )"
.RS 4
Use this method to retrieve the \s-1DNS\s0 cache acceleration status.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value, which is one of the following: \*(L"Failed\*(R", \*(L"Inactive\*(R", \*(L"Offline\*(R", \*(L"Unknown\*(R", \*(L"Warning\*(R", or \*(L"Working\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&   #Get dns_cache_acceleration_status
\&   my $dns_cache_acceleration_status = $member_dns\->dns_cache_acceleration_status( );
.Ve
.RE
.RS 4
.RE
.SS "dns_health_check_anycast_control( )"
.IX Subsection "dns_health_check_anycast_control( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the anycast failure (\s-1BFD\s0 session down) is enabled on Member failure or not.
.Sp
Setting this parameter to defined value, implicitly sets the override_dns_health_check attribute to \*(L"true\*(R".
Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DNS\s0 health check settings
and automatically sets the override_dns_health_check attribute to \*(L"false\*(R" if following fields are undefined:
.Sp
.Vb 6
\& dns_health_check_domain_list
\& dns_health_check_recursion_flag
\& dns_health_check_interval
\& dns_health_check_retries
\& dns_health_check_timeout
\& enable_dns_health_check
.Ve
.Sp
But if any of the fields above contains a value, then the override_dns_health_check attribute is set to \*(L"true\*(R".
.Sp
Note that when dns_health_check_anycast_control contains a value and override_dns_health_check is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$zone\fR\->dns_health_check_anycast_control(\*(L"true\*(R"); \f(CW$zone\fR\->override_dns_health_check(\*(L"false\*(R"); sets override_dns_health_check to \*(L"false\*(R", and the sequence \f(CW$zone\fR\->override_dns_health_check(\*(L"false\*(R"); \f(CW$zone\fR\->dns_health_check_anycast_control(\*(L"true\*(R"); sets override_dns_health_check to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable anycast failure on Member failure, and 'false' to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_health_check_anycast_control value
\& my $value = $object\->dns_health_check_anycast_control();
\&
\& #Modify dns_health_check_anycast_control value
\& $object\->dns_health_check_anycast_control(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "dns_health_check_domain_list( )"
.IX Subsection "dns_health_check_domain_list( )"
.RS 4
Use this method to set or retrieve the list of domain names for the \s-1DNS\s0 health check.
.Sp
Setting this parameter to defined value, implicitly sets the override_dns_health_check attribute to \*(L"true\*(R".
Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DNS\s0 health check settings
and automatically sets the override_dns_health_check attribute to \*(L"false\*(R" if following fields are undefined:
.Sp
.Vb 6
\& dns_health_check_recursion_flag
\& dns_health_check_anycast_control
\& dns_health_check_interval
\& dns_health_check_retries
\& dns_health_check_timeout
\& enable_dns_health_check
.Ve
.Sp
But if any of the fields above contains a value, then the override_dns_health_check attribute is set to \*(L"true\*(R".
.Sp
Note that when dns_health_check_anycast_control contains a value and override_dns_health_check is set to \*(L"false\*(R", the last operation takes precedence.
Thus the sequence \f(CW$zone\fR\->dns_health_check_domain_list(['domain1.com', 'domain2.com']);
\&\f(CW$zone\fR\->override_dns_health_check(\*(L"false\*(R");
sets override_dns_health_check to \*(L"false\*(R",
and the sequence \f(CW$zone\fR\->override_dns_health_check(\*(L"false\*(R");
\&\f(CW$zone\fR\->dns_health_check_domain_list(['domain1.com', 'domain2.com']);
sets override_dns_health_check to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains desired domain names in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_health_check_domain_list value
\& my $value = $object\->dns_health_check_domain_list();
\&
\& #Modify dns_health_check_domain_list value
\& $object\->dns_health_check_domain_list([\*(Aqfoo.com\*(Aq, \*(Aqbar.net\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "dns_health_check_interval( )"
.IX Subsection "dns_health_check_interval( )"
.RS 4
Use this method to set or retrieve the time interval (in seconds) for \s-1DNS\s0 health check.
.Sp
Setting this parameter to defined value, implicitly sets the override_dns_health_check attribute to \*(L"true\*(R".
Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DNS\s0 health check settings
and automatically sets the override_dns_health_check attribute to \*(L"false\*(R" if following fields are undefined:
.Sp
.Vb 6
\& dns_health_check_domain_list
\& dns_health_check_recursion_flag
\& dns_health_check_anycast_control
\& dns_health_check_retries
\& dns_health_check_timeout
\& enable_dns_health_check
.Ve
.Sp
But if any of the fields above contains a value, then the override_dns_health_check attribute is set to \*(L"true\*(R".
.Sp
Note that when dns_health_check_interval contains a value and override_dns_health_check is set to \*(L"false\*(R", the last operation takes precedence.
Thus the sequence \f(CW$zone\fR\->dns_health_check_interval(\*(L"500\*(R");
\&\f(CW$zone\fR\->override_dns_health_check(\*(L"false\*(R");
sets override_dns_health_check to \*(L"false\*(R",
and the sequence \f(CW$zone\fR\->override_dns_health_check(\*(L"false\*(R");
\&\f(CW$zone\fR\->dns_health_check_interval(\*(L"500\*(R");
sets override_dns_health_check to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 10 and 21600 that represents number of seconds between two health checks.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_health_check_interval value
\& my $value = $object\->dns_health_check_interval();
\&
\& #Modify dns_health_check_interval value
\& $object\->dns_health_check_interval(2000);
.Ve
.RE
.RS 4
.RE
.SS "dns_health_check_recursion_flag( )"
.IX Subsection "dns_health_check_recursion_flag( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the recursive \s-1DNS\s0 health check is enabled or not.
.Sp
Setting this parameter to defined value, implicitly sets the override_dns_health_check attribute to \*(L"true\*(R".
Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DNS\s0 health check settings
and automatically sets the override_dns_health_check attribute to \*(L"false\*(R" if following fields are undefined:
.Sp
.Vb 6
\& dns_health_check_domain_list
\& dns_health_check_anycast_control
\& dns_health_check_interval
\& dns_health_check_retries
\& dns_health_check_timeout
\& enable_dns_health_check
.Ve
.Sp
But if any of the fields above contains a value, then the override_dns_health_check attribute is set to \*(L"true\*(R".
.Sp
Note that when dns_health_check_recursion_flag contains a value and override_dns_health_check is set to \*(L"false\*(R", the last operation takes precedence.
Thus the sequence \f(CW$zone\fR\->dns_health_check_recursion_flag(\*(L"true\*(R");
\&\f(CW$zone\fR\->override_dns_health_check(\*(L"false\*(R");
sets override_dns_health_check to \*(L"false\*(R",
and the sequence \f(CW$zone\fR\->override_dns_health_check(\*(L"false\*(R");
\&\f(CW$zone\fR\->dns_health_check_recursion_flag(\*(L"true\*(R");
sets override_dns_health_check to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable recursive \s-1DNS\s0 health check queries, and 'false' to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_health_check_recursion_flag value
\& my $value = $object\->dns_health_check_recursion_flag();
\&
\& #Modify dns_health_check_recursion_flag value
\& $object\->dns_health_check_recursion_flag(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "dns_health_check_retries( )"
.IX Subsection "dns_health_check_retries( )"
.RS 4
Use this method to set or retrieve the number of \s-1DNS\s0 health check retries.
.Sp
Setting this parameter to defined value, implicitly sets the override_dns_health_check attribute to \*(L"true\*(R".
Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DNS\s0 health check settings
and automatically sets the override_dns_health_check attribute to \*(L"false\*(R" if following fields are undefined:
.Sp
.Vb 6
\& dns_health_check_domain_list
\& dns_health_check_recursion_flag
\& dns_health_check_anycast_control
\& dns_health_check_interval
\& dns_health_check_timeout
\& enable_dns_health_check
.Ve
.Sp
But if any of the fields above contains a value, then the override_dns_health_check attribute is set to \*(L"true\*(R".
.Sp
Note that when dns_health_check_retries contains a value and override_dns_health_check is set to \*(L"false\*(R", the last operation takes precedence.
Thus the sequence \f(CW$zone\fR\->dns_health_check_retries(\*(L"4\*(R");
\&\f(CW$zone\fR\->override_dns_health_check(\*(L"false\*(R");
sets override_dns_health_check to \*(L"false\*(R",
and the sequence \f(CW$zone\fR\->override_dns_health_check(\*(L"false\*(R");
\&\f(CW$zone\fR\->dns_health_check_retries(\*(L"4\*(R");
sets override_dns_health_check to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 10.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_health_check_retries value
\& my $value = $object\->dns_health_check_retries();
\&
\& #Modify dns_health_check_retries value
\& $object\->dns_health_check_retries(2);
.Ve
.RE
.RS 4
.RE
.SS "dns_health_check_timeout( )"
.IX Subsection "dns_health_check_timeout( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 health check timeout interval (in seconds).
.Sp
Setting this parameter to defined value, implicitly sets the override_dns_health_check attribute to \*(L"true\*(R".
Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DNS\s0 health check settings
and automatically sets the override_dns_health_check attribute to \*(L"false\*(R" if following fields are undefined:
.Sp
.Vb 6
\& dns_health_check_domain_list
\& dns_health_check_recursion_flag
\& dns_health_check_anycast_control
\& dns_health_check_interval
\& dns_health_check_retries
\& enable_dns_health_check
.Ve
.Sp
But if any of the fields above contains a value, then the override_dns_health_check attribute is set to \*(L"true\*(R".
.Sp
Note that when dns_health_check_timeout contains a value and override_dns_health_check is set to \*(L"false\*(R", the last operation takes precedence.
Thus the sequence \f(CW$zone\fR\->dns_health_check_timeout(\*(L"4\*(R");
\&\f(CW$zone\fR\->override_dns_health_check(\*(L"false\*(R");
sets override_dns_health_check to \*(L"false\*(R",
and the sequence \f(CW$zone\fR\->override_dns_health_check(\*(L"false\*(R");
\&\f(CW$zone\fR\->dns_health_check_timeout(\*(L"4\*(R");
sets override_dns_health_check to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 10.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_health_check_timeout value
\& my $value = $object\->dns_health_check_timeout();
\&
\& #Modify dns_health_check_timeout value
\& $object\->dns_health_check_timeout(10);
.Ve
.RE
.RS 4
.RE
.SS "dns64_groups( )"
.IX Subsection "dns64_groups( )"
.RS 4
Use this method to set or retrieve the list of \s-1DNS64\s0 synthesis groups associated with this member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_dns64 method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid \s-1DNS\s0 default and automatically resets the override_dns64 method to \*(L"false\*(R".
.Sp
Note that when dns64_groups is set to a defined value and override_dns64_groups is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->dns64_groups([$group1]); \f(CW$object\fR\->override_dns64(\*(L"false\*(R"); will set override_dns64 to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_dns64(\*(L"false\*(R"); \f(CW$object\fR\->dns64_groups([$group1]); will result in override_dns64=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::Grid::DNS::DNS64Group objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get the list of DNS64 synthesis groups
\& my $dns64_groups_list = $memberdns\->dns64_groups();
\&
\& #Modify it
\& my $group = $session\->get(
\&                         object => "Infoblox::Grid::DNS::DNS64Group"),
\&                         name => "groupname",
\&                         prefix => "groupprefix",
\&                       );
\& $memberdns\->dns64_groups([$group]);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_enabled( )"
.IX Subsection "dnssec_enabled( )"
.RS 4
Use this method to enable/disable  the \s-1DNSSEC\s0 feature.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to enable  the \s-1DNSSEC\s0 feature. Set the parameter to \*(L"false\*(R" to disable the feature.
.Sp
Setting  this parameter to  \*(L"true\*(R" or \*(L"false\*(R" implicitly  sets the override_dnssec attribute to \*(L"true\*(R".
Setting the parameter to undefined causes  the appliance to use  the  grid-level \s-1DNSSEC\s0 settings  and  automatically sets the override_dnssec attribute to \*(L"false\*(R".
.Sp
Note that in the case when dnssec_enabled is set to \*(L"true\*(R"/\*(L"false\*(R" and override_dnssec is set to \*(L"false\*(R" simultaneously,
the last operation takes precedence. Thus the sequence \f(CW$grid_member\fR\->dnssec_enabled(\*(L"false\*(R"); \f(CW$grid_member\fR\->override_dnssec(\*(L"false\*(R");
will set override_dnssec to \*(L"false\*(R", and the sequence   \f(CW$grid_member\fR\->override_dnssec(\*(L"false\*(R"); \f(CW$grid_member\fR\->dnssec_enabled(\*(L"false\*(R"); will result in override_dnssec=\*(L"true\*(R".
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get dnssec_enabled
\& my $dnssec_enabled = $memberdns\->dnssec_enabled();
\& #Modify dnssec_enabled
\& $memberdns\->dnssec_enabled("true");
\& #Set the value to undefined to inherit grid level settings.
\& $memberdns\->dnssec_enabled(undef);
.Ve
.RE
.RS 4
.RE
.SS "dnssec_expired_signatures_enabled( )"
.IX Subsection "dnssec_expired_signatures_enabled( )"
.RS 4
Use this method to  control whether the \s-1DNS\s0 member accepts expired signatures.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to accept  expired signatures. Set it to \*(L"false\*(R" to  reject expired signatures.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_expired_signatures_enabled
\& my $dnssec_expired_signatures_enabled = $memberdns\->dnssec_expired_signatures_enabled();
\& #Modify dnssec_expired_signatures_enabled
\& $memberdns\->dnssec_expired_signatures_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_validation_enabled( )"
.IX Subsection "dnssec_validation_enabled( )"
.RS 4
Use this method to  enable  or disable \s-1DNS\s0  security validation.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to enable the validation. Set it to \*(L"false\*(R" to disable the validation.
.Sp
The default value of the parameter is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_validation_enabled
\& my $dnssec_validation_enabled = $memberdns\->dnssec_validation_enabled();
\& #Modify dnssec_validation_enabled
\& $memberdns\->dnssec_validation_enabled("false");
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_blacklist_enabled()\fP"
.IX Subsection "dnssec_blacklist_enabled()"
.RS 4
Use this method to enable and disable blacklist rules for DNSSEC-enabled clients.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to apply blacklist rules for DNSSEC-enabled clients. Set to \*(L"false\*(R" to disable them.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_blacklist_enabled
\& my $dnssec_blacklist_enabled = $memberdns\->dnssec_blacklist_enabled();
\& #Modify dnssec_blacklist_enabled
\& $memberdns\->dnssec_blacklist_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_negative_trust_anchors( )"
.IX Subsection "dnssec_negative_trust_anchors( )"
.RS 4
Use this method to set or retrieve the list of zones for which the appliance does not perform \s-1DNSSEC\s0 validation.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of strings that contains the lsit of zones for which the appliance does not perform \s-1DNSSEC\s0 validation.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_negative_trust_anchors value
\& my $value = $member_dns\->dnssec_negative_trust_anchors();
\& #Modify dnssec_negative_trust_anchors value
\& $member_dns\->dnssec_negative_trust_anchors($zones);
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_dns64_enabled()\fP"
.IX Subsection "dnssec_dns64_enabled()"
.RS 4
Use this method to enable and disable \s-1DNS64\s0 groups for DNSSEC-enabled clients.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to apply \s-1DNS64\s0 groups for DNSSEC-enabled clients. Set to \*(L"false\*(R" to disable them.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_dns64_enabled
\& my $dnssec_dns64_enabled = $member_dns\->dnssec_dns64_enabled();
\& #Modify dnssec_dns64_enabled
\& $member_dns\->dnssec_dns64_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_nxdomain_enabled()\fP"
.IX Subsection "dnssec_nxdomain_enabled()"
.RS 4
Use this method to enable and disable \s-1NXDOMAIN\s0 rules for DNSSEC-enabled clients.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to apply \s-1NXDOMAIN\s0 rules for DNSSEC-enabled clients. Set to \*(L"false\*(R" to disable them.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_nxdomain_enabled
\& my $dnssec_nxdomain_enabled = $memberdns\->dnssec_nxdomain_enabled();
\& #Modify dnssec_nxdomain_enabled
\& $memberdns\->dnssec_nxdomain_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "\fBdnssec_rpz_enabled()\fP"
.IX Subsection "dnssec_rpz_enabled()"
.RS 4
Use this method to enable and disable \s-1RPZ\s0 policies for DNSSEC-enabled clients.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to apply \s-1RPZ\s0 policies for DNSSEC-enabled clients. Set to \*(L"false\*(R" to disable them.
.Sp
The default value of the parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get dnssec_rpz_enabled
\& my $dnssec_rpz_enabled = $memberdns\->dnssec_rpz_enabled();
\& #Modify dnssec_rpz_enabled
\& $memberdns\->dnssec_rpz_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "dnssec_trusted_keys( )"
.IX Subsection "dnssec_trusted_keys( )"
.RS 4
Use this method to specify the list of trusted keys for  the \s-1DNSSEC\s0 feature.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Array reference that contains a list of Infoblox::DNS::DnssecTrustedKey objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns a reference to a list of the trusted keys.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get dnssec_trusted_keys
\& my $dnssec_trusted_keys = $memberdns\->dnssec_trusted_keys();
\& #Modify dnssec_trusted_keys
\& my $key1=Infoblox::DNS::DnssecTrustedKey\->new(
\&    fqdn => "myzone.com",
\&    algorithm => "RSAMD5",
\&    key       => "c2ltcGxlIGtleQo="
\&    );
\& $memberdns\->dnssec_trusted_keys([$key1]);
.Ve
.RE
.RS 4
.RE
.SS "dns_notify_transfer_source_interface( )"
.IX Subsection "dns_notify_transfer_source_interface( )"
.RS 4
Use this method to specify  which \s-1IP\s0 address is used as the source for  \s-1DDNS\s0 notify and transfer operations.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1VIP\*(R", \*(L"MGMT\*(R", \*(L"LAN2\*(R",\s0 \*(L"Any\*(R" or an \s-1IPV4\s0 address. Default is \*(L"\s-1VIP\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting dns_source_interface
\&   my $dns_source_interface = $memberdns\->dns_source_interface( );
\&   #Modifying dns_source_interface
\&   $memberdns\->dns_source_interface("VIP");
.Ve
.RE
.RS 4
.RE
.SS "dns_query_capture_file_time_limit( )"
.IX Subsection "dns_query_capture_file_time_limit( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 query capture file time (in minutes) limit.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is unsigned integer between 1 and 10. The default value is 10.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_query_capture_file_time_limit value
\& my $dns_query_capture_file_time_limit = $object\->dns_query_capture_file_time_limit();
\&
\& #Modify dns_query_capture_file_time_limit value
\& $object\->dns_query_capture_file_time_limit(\*(Aq5\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "dns_query_source_interface( )"
.IX Subsection "dns_query_source_interface( )"
.RS 4
Use this method to specify  which \s-1IP\s0 address is used as the source for  \s-1DDNS\s0 query operations.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1VIP\*(R", \*(L"MGMT\*(R", \*(L"LAN2\*(R",\s0 \*(L"Any\*(R" or an \s-1IPV4\s0 address. Default is \*(L"\s-1VIP\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting dns_source_interface
\&   my $dns_source_interface = $memberdns\->dns_source_interface( );
\&   #Modifying dns_source_interface
\&   $memberdns\->dns_source_interface("VIP");
.Ve
.RE
.RS 4
.RE
.SS "dns_view_address_settings( )"
.IX Subsection "dns_view_address_settings( )"
.RS 4
Use this method to set or retrieve the list of address settings for Grid member views.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of Infoblox::Grid::Member::DNS::ViewAddressSetting objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dns_view_address_settings value
\& my $value = $object\->dns_view_address_settings();
\&
\& #Construct view address setting
\& my $view_address_setting = Infoblox::Grid::Member::DNS::ViewAddressSetting\->new(\*(Aqview_name\*(Aq => \*(Aqview1\*(Aq);
\&
\& #Modify dns_view_address_settings value 
\& $object\->dns_view_address_settings([$view_address_setting]);
.Ve
.RE
.RS 4
.RE
.SS "domains_to_capture_dns_queries( )"
.IX Subsection "domains_to_capture_dns_queries( )"
.RS 4
Use this method to set or retrieve the list of domains to capture \s-1DNS\s0 queries.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains desired domain names in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get domains_to_capture_dns_queries value
\& my $domains_to_capture_dns_queries = $object\->domains_to_capture_dns_queries();
\&
\& #Modify domains_to_capture_dns_queries value
\& $object\->domains_to_capture_dns_queries([\*(Aqdomain1.com\*(Aq, \*(Aqdomain2.com\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "dtc_edns_prefer_client_subnet( )"
.IX Subsection "dtc_edns_prefer_client_subnet( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the use of the edns-client-subnet option for \s-1DTC\s0 is enabled or disabled.
.Sp
Setting this method to a defined value implicitly sets the override_dtc_edns_prefer_client_subnet method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid \s-1DNS\s0 default and automatically resets the override_dtc_edns_prefer_client_subnet method to \*(L"false\*(R".
.Sp
Note that when dtc_edns_prefer_client_subnet is set to a defined value and override_dtc_edns_prefer_client_subnet is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->dtc_edns_prefer_client_subnet(\*(L"true\*(R"); \f(CW$object\fR\->override_dtc_edns_prefer_client_subnet(\*(L"false\*(R"); will set override_dtc_edns_prefer_client_subnet to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_dtc_edns_prefer_client_subnet(\*(L"false\*(R"); \f(CW$object\fR\->dtc_edns_prefer_client_subnet(\*(L"true\*(R"); will result in override_dtc_edns_prefer_client_subnet=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable use of the edns-client-subnet option for \s-1DTC\s0 or 'false' to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get dtc_edns_prefer_client_subnet value
\& my $dtc_edns_prefer_client_subnet = $object\->dtc_edns_prefer_client_subnet();
\&
\& #Modify dtc_edns_prefer_client_subnet value
\& $object\->dtc_edns_prefer_client_subnet(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "dtc_health_source_interface( )"
.IX Subsection "dtc_health_source_interface( )"
.RS 4
Use this method to set or retrieve the source address for the health checks.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is one of the following: \s-1VIP, MGMT, LAN2, ANY\s0 or IPv4 / IPv6 address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting dtc_health_source_interface
\&    my $dtc_source_interface = $memberdns\->dtc_health_source_interface();
\&    #Modifying dtc_health_source_interface
\&    $memberdns\->dtc_health_source_interface(\*(AqVIP\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_blackhole( )"
.IX Subsection "enable_blackhole( )"
.RS 4
Use this method to enable or disable the blocking of \s-1DNS\s0 queries.
This setting overrides the grid enable_blackhole settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to block \s-1DNS\s0 queries or \*(L"false\*(R" to disable blocking \s-1DNS\s0 queries. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get enable_blackhole
\&   my $enable_blackhole = $object\->enable_blackhole( );
\&   #Modify enable_blackhole
\&   $memberdns\->enable_blackhole("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_blacklist( )"
.IX Subsection "enable_blacklist( )"
.RS 4
Use this method to enable or disable a blacklist on the grid member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_blacklist flag or \*(L"false\*(R" to deactivate/unset it. The default is \*(L"false\*(R".
.Sp
Setting this parameter to \*(L"true\*(R" or \*(L"false\*(R" implicitly sets the override_blacklist attribute to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid-level blacklist settings and automatically sets the override_blacklist attribute to \*(L"false\*(R" if \*(L"blacklist_redirect_addresses\*(R" is also undefined.
.Sp
Note that when enable_blacklist is set to \*(L"true\*(R"/\*(L"false\*(R" and override_blacklist is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$memberdns\fR\->enable_blacklist(\*(L"false\*(R"); \f(CW$memberdns\fR\->override_blacklist(\*(L"false\*(R"); sets override_blacklist to \*(L"false\*(R", and the sequence \f(CW$memberdns\fR\->override_blacklist(\*(L"false\*(R"); \f(CW$memberdns\fR\->enable_blacklist(\*(L"false\*(R"); sets override_blacklist to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting enable_blacklist
\&   my $enable_blacklist = $memberdns\->enable_blacklist( );
\&   #Modifying enable_blacklist
\&   $memberdns\->enable_blacklist("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_capture_dns_queries( )"
.IX Subsection "enable_capture_dns_queries( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the capture of \s-1DNS\s0 queries is enabled or disabled.
.Sp
Setting this method to a defined value implicitly sets the override_enable_capture_dns method to \*(L"true\*(R". Setting the parameter to undefined unless enable_capture_dns_responses is defined causes the appliance to use the Grid \s-1DNS\s0 default and automatically resets the override_enable_capture_dns method to \*(L"false\*(R".
.Sp
Note that when enable_capture_dns_queries is set to a defined value and override_enable_capture_dns is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->enable_capture_dns_queries(\*(L"true\*(R"); \f(CW$object\fR\->override_enable_capture_dns(\*(L"false\*(R"); will set override_enable_capture_dns to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_enable_capture_dns(\*(L"false\*(R"); \f(CW$object\fR\->enable_capture_dns_queries(\*(L"true\*(R"); will result in override_enable_capture_dns=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable the capture of \s-1DNS\s0 queries or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_capture_dns_queries value
\& my $enable_capture_dns_queries = $object\->enable_capture_dns_queries();
\&
\& #Modify enable_capture_dns_queries value
\& $object\->enable_capture_dns_queries(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_capture_dns_responses( )"
.IX Subsection "enable_capture_dns_responses( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the capture of \s-1DNS\s0 responses is enabled or disabled.
.Sp
Setting this method to a defined value implicitly sets the override_enable_capture_dns method to \*(L"true\*(R". Setting the parameter to undefined unless enable_capture_dns_queries is defined causes the appliance to use the Grid \s-1DNS\s0 default and automatically resets the override_enable_capture_dns method to \*(L"false\*(R".
.Sp
Note that when enable_capture_dns_responses is set to a defined value and override_enable_capture_dns is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->enable_capture_dns_responses(\*(L"true\*(R"); \f(CW$object\fR\->override_enable_capture_dns(\*(L"false\*(R"); will set override_enable_capture_dns to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_enable_capture_dns(\*(L"false\*(R"); \f(CW$object\fR\->enable_capture_dns_responses(\*(L"true\*(R"); will result in override_enable_capture_dns=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable the capture of \s-1DNS\s0 responses or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_capture_dns_responses value
\& my $enable_capture_dns_responses = $object\->enable_capture_dns_responses();
\&
\& #Modify enable_capture_dns_responses value
\& $object\->enable_capture_dns_responses(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_dns( )"
.IX Subsection "enable_dns( )"
.RS 4
Use this method to enable/disable the \s-1DNS\s0 service of a member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable \s-1DNS\s0 service or \*(L"false\*(R" to disable it. The default value is \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting enable_dns
\&   $memberdns\->enable_dns( );
\&   #Modifying enable_dns
\&   $memberdns\->enable_dns("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_dns_cache_acceleration( )"
.IX Subsection "enable_dns_cache_acceleration( )"
.RS 4
Use this method to enable/disable the \s-1DNS\s0 Cache Acceleration service of a member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the \s-1DNS\s0 Cache Acceleration service or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting enable_dns_cache_acceleration
\&   $memberdns\->enable_dns_cache_acceleration( );
\&   #Modifying enable_dns_cache_acceleration
\&   $memberdns\->enable_dns_cache_acceleration("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_dns_health_check( )"
.IX Subsection "enable_dns_health_check( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the \s-1DNS\s0 health check is enabled or not.
.Sp
Setting this parameter to defined value, implicitly sets the override_dns_health_check attribute to \*(L"true\*(R".
Setting this parameter to undefined causes the appliance to use the Grid-level \s-1DNS\s0 health check settings
and automatically sets the override_dns_health_check attribute to \*(L"false\*(R" if following fields are undefined:
.Sp
.Vb 6
\& dns_health_check_domain_list
\& dns_health_check_recursion_flag
\& dns_health_check_anycast_control
\& dns_health_check_interval
\& dns_health_check_retries
\& dns_health_check_timeout
.Ve
.Sp
But if any of the fields above contains a value, then the override_dns_health_check attribute is set to \*(L"true\*(R".
.Sp
Note that when enable_dns_health_check contains a value and override_dns_health_check is set to \*(L"false\*(R", the last operation takes precedence.
Thus the sequence \f(CW$zone\fR\->enable_dns_health_check(\*(L"true\*(R");
\&\f(CW$zone\fR\->override_dns_health_check(\*(L"false\*(R");
sets override_dns_health_check to \*(L"false\*(R",
and the sequence \f(CW$zone\fR\->override_dns_health_check(\*(L"false\*(R");
\&\f(CW$zone\fR\->enable_dns_health_check(\*(L"true\*(R");
sets override_dns_health_check to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1DNS\s0 health check, and 'false' to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_dns_health_check value
\& my $value = $object\->enable_dns_health_check();
\&
\& #Modify enable_dns_health_check value 
\& $object\->enable_dns_health_check(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_dns64( )"
.IX Subsection "enable_dns64( )"
.RS 4
Use this method to enable/disable \s-1DNS64\s0 support for this member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_dns64 method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid \s-1DNS\s0 default and automatically resets the override_dns64 method to \*(L"false\*(R".
.Sp
Note that when enable_dns64 is set to a defined value and override_enable_dns64 is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->enable_dns64(\*(L"true\*(R"); \f(CW$object\fR\->override_dns64(\*(L"false\*(R"); will set override_dns64 to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_dns64(\*(L"true\*(R"); \f(CW$object\fR\->enable_dns64(\*(L"testdomain\*(R"); will result in override_dns64=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_dns64 flag or \*(L"false\*(R" to deactivate and unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the enable_dns64 flag
\& my $enable_dns64 = $memberdns\->enable_dns64();
\& #Modify the enable_dns64 flag
\& $memberdns\->enable_dns64("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_excluded_domain_names( )"
.IX Subsection "enable_excluded_domain_names( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the excluding domain names captured \s-1DNS\s0 query and response is enabled or disabled..
.Sp
Setting this method to a defined value implicitly sets the override_enable_excluded_domain_names method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid \s-1DNS\s0 default and automatically resets the override_enable_excluded_domain_names method to \*(L"false\*(R".
.Sp
Note that when enable_excluded_domain_names is set to a defined value and override_enable_excluded_domain_names is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->enable_excluded_domain_names(\*(L"true\*(R"); \f(CW$object\fR\->override_enable_excluded_domain_names(\*(L"false\*(R"); will set override_enable_excluded_domain_names to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_enable_excluded_domain_names(\*(L"false\*(R"); \f(CW$object\fR\->enable_excluded_domain_names(\*(L"true\*(R"); will result in override_enable_excluded_domain_names=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable the excluding domain names from captured \s-1DNS\s0 query and response or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enable_excluded_domain_names value
\& my $enable_excluded_domain_names = $object\->enable_excluded_domain_names();
\&
\& #Modify enable_excluded_domain_names value
\& $object\->enable_excluded_domain_names(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_fixed_rrset_order_fqdns( )"
.IX Subsection "enable_fixed_rrset_order_fqdns( )"
.RS 4
Use this method to enable or disable fixed RRset order for specified FQDNs.
.Sp
Setting this method to a defined value implicitly sets the override_fixed_rrset_order_fqdns method to \*(L"true\*(R".
.Sp
Note that when enable_fixed_rrset_order_fqdns is set to a defined value and override_fixed_rrset_order_fqdns is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->enable_fixed_rrset_order_fqdns(\*(L"true\*(R"); \f(CW$object\fR\->override_fixed_rrset_order_fqdns(\*(L"false\*(R"); will set override_fixed_rrset_order_fqdns to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_fixed_rrset_order_fqdns(\*(L"false\*(R"); \f(CW$object\fR\->enable_fixed_rrset_order_fqdns(\*(L"true\*(R"); will result in override_fixed_rrset_order_fqdns=\*(L"true\*(R".
.Sp
The enable_fixed_rrset_order_fqdns attribute can be specified explicitly. It is also set implicitly when fixed_rrset_order_fqdns is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable fixed RRset order for specified FQDNs or \*(L"false\*(R" to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_fixed_rrset_order_fqdns flag
\& my $enable_fixed_rrset_order_fqdns = $member_dns\->enable_fixed_rrset_order_fqdns();
\& #Modify enable_fixed_rrset_order_fqdns flag
\& $member_dns\->enable_fixed_rrset_order_fqdns("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_ftc( )"
.IX Subsection "enable_ftc( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the Fault Tolerant Caching (\s-1FTC\s0) feature is enabled or not.
.Sp
Setting this method to a defined value implicitly sets the override_ftc method to \*(L"true\*(R".
Setting the parameter to undefined if ftc_expired_record_ttl and ftc_expired_record_timeout are also undefined causes the appliance to use the Grid \s-1DNS\s0 default and automatically resets the override_ftc method to \*(L"false\*(R".
.Sp
Note that when enable_ftc is set to a defined value and override_ftc is set to \*(L"false\*(R", the last operation takes precedence.
Thus the sequence \f(CW$object\fR\->enable_ftc(\*(L"true\*(R"); \f(CW$object\fR\->override_ftc(\*(L"false\*(R"); will set override_ftc to \*(L"false\*(R",
and the sequence \f(CW$object\fR\->override_ftc(\*(L"false\*(R"); \f(CW$object\fR\->enable_ftc(\*(L"true\*(R"); will result in override_ftc=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable \s-1FTC\s0 or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get enable_ftc
\&   my $enable_ftc = $memberdns\->enable_ftc();
\&   #Modify enable_ftc
\&   $memberdns\->enable_ftc(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "enable_gss_tsig( )"
.IX Subsection "enable_gss_tsig( )"
.RS 4
Use this method to enable/disable the appliance to receive GSS-TSIG authenticated updates from \s-1DHCP\s0 clients. You must import the keytab file before you enable this feature. See Infoblox::Session\->\fBimport_data()\fR.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the the appliance to receive GSS-TSIG authenticated updates or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\&   #Getting enable_gss_tsig
\&   $my $enable_gss_tsig = $memberdns\->enable_gss_tsig( );
\&   #Modifying enable_gss_tsig
\&   $session\->import_data(
\&        type        => \*(Aqkeytab\*(Aq,
\&        path        => \*(Aq/infoblox/tests/datasets/gss\-tsig\-gs.keytab\*(Aq,
\&        service     => \*(Aqdns\*(Aq,
\&        virtual_ip  => \*(Aq192.168.1.2\*(Aq);
\&   $memberdns\->enable_gss_tsig("true");
.Ve
.RE
.RS 4
.RE
.SS "enable_query_rewrite( )"
.IX Subsection "enable_query_rewrite( )"
.RS 4
Use this method to enable or disable \s-1DNS\s0 query rewrite for this member.
.Sp
Setting this method to a defined value implicitly sets the override_query_rewrite method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid-level enable_query_rewrite value and automatically resets the override_query_rewrite method to \*(L"false\*(R".
.Sp
Note that when enable_query_rewrite is set to a defined value and override_query_rewrite is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->enable_query_rewrite(\*(L"true\*(R"); \f(CW$object\fR\->override_query_rewrite(\*(L"false\*(R"); will set override_query_rewrite to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_query_rewrite(\*(L"true\*(R"); \f(CW$object\fR\->enable_query_rewrite(\*(L"testdomain\*(R"); will result in override_query_rewrite=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
.PD 0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
.PD
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_query_rewrite
\& $memberdns\->enable_query_rewrite( );
\& #Modify enable_query_rewrite
\& $memberdns\->enable_query_rewrite("true");
.Ve
.RE
.RS 4
.RE
.SS "excluded_domain_names( )"
.IX Subsection "excluded_domain_names( )"
.RS 4
Use this method to set or retrieve the list of domains that are excluded from \s-1DNS\s0 response and query capturing.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains desired domain names in a string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get excluded_domain_names value
\& my $excluded_domain_names = $object\->excluded_domain_names();
\&
\& #Modify excluded_domain_names value
\& $object\->excluded_domain_names([\*(Aqdomain1.com\*(Aq, \*(Aqdomain2.com\*(Aq]);
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Grid Member \s-1DNS\s0 object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $memberdns\->extattrs();
\& #Modify extattrs
\& $memberdns\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a Grid Member \s-1DNS\s0 object.
.Sp
This method is read-only. Use the  Infoblox::Grid::Member object to set or modify the grid member extensible attributes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Attempting to modify the extensible attributes produces an error.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get extensible attributes
\& my $ref_extensible_attributes = $memberdns\->extensible_attributes();
.Ve
.RE
.RS 4
.RE
.SS "facility( )"
.IX Subsection "facility( )"
.RS 4
Use this method to specify a syslog facility. This is the location on the syslog server to which you want to sort the \s-1DNS\s0 logging messages. This setting overrides the grid logging facility settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Values are: \f(CW"daemon", "local0", "local1", "local2", "local3", "local4", "local5", "local6", and  "local7"\fR.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get facility
\&   $memberdns\->facility( );
\&   #Modify facility
\&   $memberdns\->facility("local0");
.Ve
.RE
.RS 4
.RE
.SS "file_transfer_setting( )"
.IX Subsection "file_transfer_setting( )"
.RS 4
Use this method to set or retrieve the \s-1DNS\s0 capture file transfer settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::FileTransferSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get file_transfer_setting value
\& my $file_transfer_setting = $object\->file_transfer_setting();
\&
\& #Modify file_transfer_setting value
\& $object\->file_transfer_setting($file_transfer);
.Ve
.RE
.RS 4
.RE
.SS "filter_aaaa( )"
.IX Subsection "filter_aaaa( )"
.RS 4
Use this method to set or retrieve the type of \s-1AAAA\s0 filtering for this member \s-1DNS\s0 object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Specifying values in this parameter, such as \*(L"\s-1YES\*(R",\s0 implicitly sets the override_filter_aaaa attribute to \*(L"true\*(R". Setting this parameter and the \*(L"filter_aaaa\*(R" attribute to undefined causes the appliance to use the grid-level filter_aaaa settings and automatically sets the override_filter_aaaa attribute to \*(L"false\*(R". But if the \*(L"filter_aaaa\*(R" attribute contains a value, then the override_filter_aaaa attribute is set to \*(L"true\*(R".
.Sp
Note that when filter_aaaa contains a valid value and override_filter_aaaa is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$memberdns\fR\->filter_aaaa(\*(L"\s-1YES\*(R"\s0); \f(CW$memberdns\fR\->override_filter_aaaa(\*(L"false\*(R"); sets override_filter_aaaa to \*(L"false\*(R", and the sequence \f(CW$memberdns\fR\->override_filter_aaaa(\*(L"false\*(R"); \f(CW$memberdns\fR\->filter_aaaa(\*(L"true\*(R"); sets override_filter_aaaa to \*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1YES\*(R", \*(L"NO\*(R"\s0 and \*(L"\s-1BREAK_DNSSEC\*(R".\s0 The default value is \*(L"\s-1NO\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the filter aaaa type
\& my $filter_aaaa = $memberdns\->filter_aaaa();
\& #Modify the filtering
\& $memberdns\->filter_aaaa("YES");
.Ve
.RE
.RS 4
.RE
.SS "filter_aaaa_list( )"
.IX Subsection "filter_aaaa_list( )"
.RS 4
Use this method to set or retrieve the list of IPv4 addresses and networks from which queries are received. \s-1AAAA\s0 filtering is applied to these addresses. This setting overrides the grid filter_aaaa_list if override_filter_aaaa is set to \*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Specifying values in this parameter, such as [\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"] or [], implicitly sets the override_filter_aaaa attribute to \*(L"true\*(R". Setting this parameter and the \*(L"filter_aaaa\*(R" attribute to undefined causes the appliance to use the grid-level filter_aaaa settings and automatically sets the override_filter_aaaa attribute to \*(L"false\*(R". But if the \*(L"filter_aaaa\*(R" attribute contains a value, then the override_filter_aaaa attribute is set to \*(L"true\*(R".
.Sp
Note that when filter_aaaa_list contains a valid array reference and override_filter_aaaa is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$memberdns\fR\->filter_aaaa_list([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); \f(CW$memberdns\fR\->override_filter_aaaa(\*(L"false\*(R"); sets override_filter_aaaa to \*(L"false\*(R", and the sequence \f(CW$memberdns\fR\->override_filter_aaaa(\*(L"false\*(R"); \f(CW$memberdns\fR\->filter_aaaa_list([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); sets override_filter_aaaa to \*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4 addresses and networks. To return \s-1AAAA\s0 records for queries received from an IPv4 client, add \*(L"!\*(R" as the prefix to the \s-1IP\s0 addresses and networks. Specify \*(L"any\*(R" to allow \s-1AAAA\s0 records to be returned for any query received by an IPv4 client.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 11
\&    #Getting filter_aaaa_list
\&    my $filter_aaaa_list = $memberdns\->filter_aaaa_list( );
\&    #Modifying filter_aaaa_list
\&    $memberdns\->filter_aaaa_list(["any"]);
\&    #Modifying filter_aaaa_list
\&    $memberdns\->filter_aaaa_list(["10.0.0.10", "20.0.0.0/24", "!"."30.0.0.30", "!"."40.10.0.0/24"]);
\&    #Use Grid::DNS level filter_aaaa_list
\&    $memberdns\->filter_aaaa_list(undef);
\&    $memberdns\->enable_filter_aaaa(undef);
\&    #Use Infoblox::Grid::NamedACL
\&    $memberdns\->filter_aaaa_list($nacl);
.Ve
.RE
.RS 4
.RE
.SS "fixed_rrset_order_fqdns( )"
.IX Subsection "fixed_rrset_order_fqdns( )"
.RS 4
Use this method to set or retrieve configuration for fixed \s-1RRSET\s0 order for specified FQDNs.
.Sp
Setting this method to a defined value implicitly sets the enable_fixed_rrset_order_fqdns and override_fixed_rrset_order_fqdns methods to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to disable fixed RRset order of FQDNs and automatically resets the enable_fixed_rrset_order_fqdns method to \*(L"false\*(R".
.Sp
Note that when fixed_rrset_order_fqdns is set to a defined value and enable_fixed_rrset_order_fqdns is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->fixed_rrset_order_fqdns($fqdns); \f(CW$object\fR\->enable_fixed_rrset_order_fqdns(\*(L"false\*(R"); will set enable_fixed_rrset_order_fqdns to \*(L"false\*(R", and the sequence \f(CW$object\fR\->enable_fixed_rrset_order_fqdns(\*(L"false\*(R"); \f(CW$object\fR\->fixed_rrset_order_fqdns($fqdns); will result in enable_fixed_rrset_order_fqdns=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::Grid::DNS::FixedRRSetOrderFQDN objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get the fixed_rrset_order_fqdns list
\& my $fixed_rrset_order_fqdns = $member_dns\->fixed_rrset_order_fqdns();
\& #Modify the fixed_rrset_order_fqdns list
\& $member_dns\->fixed_rrset_order_fqdns([$fqdn1, $fqdn2]);
.Ve
.RE
.RS 4
.RE
.SS "forwarders( )"
.IX Subsection "forwarders( )"
.RS 4
Use this method to specify forwarders for the member. A forwarder is essentially a name server  to which other name servers first send all of their off-site  queries. The forwarder builds up a cache of information, avoiding the need for the other name servers to send queries off-site. This setting overrides the grid-level setting.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::DNS::Member, Infoblox::DNS::Nameserver object(s), or \s-1IP\s0 addresses.
.Sp
Specifying values in this parameter, such as [\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"] or [], implicitly sets the override_forwarders attribute to \*(L"true\*(R". Setting this parameter and the \*(L"forward_only\*(R" attribute to undefined causes the appliance to use the grid-level forwarders settings and automatically sets the override_forwarders attribute to \*(L"false\*(R". But if the \*(L"forward_only\*(R" attribute contains a value, then the override_forwarders attribute is set to \*(L"true\*(R".
.Sp
Note that when forwarders_redirect_addresses contains a valid array reference and override_forwarders is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$memberdns\fR\->forwarders([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); \f(CW$memberdns\fR\->override_forwarders(\*(L"false\*(R"); sets override_forwarders to \*(L"false\*(R", and the sequence \f(CW$memberdns\fR\->override_forwarders(\*(L"false\*(R"); \f(CW$memberdns\fR\->forwarders([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); sets override_forwarders to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting forwarders
\&   $memberdns\->forwarders( );
\&   #Modifying forwarders
\&   $memberdns\->forwarders( [ "10.0.0.10" ] );
.Ve
.RE
.RS 4
.RE
.SS "forward_only( )"
.IX Subsection "forward_only( )"
.RS 4
Use this method to configure this member to send queries to forwarders only. When the value is \*(L"true\*(R", the member sends queries to forwarders only, and not to other internal or Internet root servers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable forward only or \*(L"false\*(R" to desable it.  Default is \*(L"false\*(R"
.Sp
Setting this parameter to \*(L"true\*(R" or \*(L"false\*(R" implicitly sets the override_forwarders attribute to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid-level forwarders settings and automatically sets the override_forwarders attribute to \*(L"false\*(R", if \*(L"forwarders\*(R" is also undefined.
.Sp
Note that when forward_only is set to \*(L"true\*(R"/\*(L"false\*(R" and override_forwarders is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$memberdns\fR\->forward_only(\*(L"false\*(R"); \f(CW$memberdns\fR\->override_forwarders(\*(L"false\*(R"); sets override_forwarders to \*(L"false\*(R", and the sequence \f(CW$memberdns\fR\->override_forwarders(\*(L"false\*(R"); \f(CW$memberdns\fR\->forward_only(\*(L"false\*(R"); sets override_forwarders to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting forward_only
\&   $memberdns\->forward_only( );
\&   #Modifying forward_only
\&   $memberdns\->forward_only("true");
.Ve
.RE
.RS 4
.RE
.SS "forward_updates( )"
.IX Subsection "forward_updates( )"
.RS 4
Use this method to allow/disallow secondary servers to forward updates to the \s-1DNS\s0 server.
This setting overrides grid update settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable forward updates or \*(L"false\*(R" desable it. Default is \*(L"false\*(R"
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting forward_updates
\&   $memberdns\->forward_updates( );
\&   #Modifying forward_only
\&   $memberdns\->forward_updates("true");
.Ve
.RE
.RS 4
.RE
.SS "ftc_expired_record_ttl( )"
.IX Subsection "ftc_expired_record_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1TTL\s0 value of the expired Fault Tolerant Caching (\s-1FTC\s0) record in the \s-1DNS\s0 responses.
.Sp
Setting this method to a defined value implicitly sets the override_ftc method to \*(L"true\*(R".
Setting the parameter to undefined if enable_ftc and ftc_expired_record_timeout are also undefined causes the appliance to use the Grid \s-1DNS\s0 default and automatically resets the override_ftc method to \*(L"false\*(R".
.Sp
Note that when ftc_expired_record_ttl is set to a defined value and override_ftc is set to \*(L"false\*(R", the last operation takes precedence.
Thus the sequence \f(CW$object\fR\->ftc_expired_record_ttl(\*(L"true\*(R"); \f(CW$object\fR\->override_ftc(\*(L"false\*(R"); will set override_ftc to \*(L"false\*(R",
and the sequence \f(CW$object\fR\->override_ftc(\*(L"false\*(R"); \f(CW$object\fR\->ftc_expired_record_ttl(\*(L"true\*(R"); will result in override_ftc=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer, from 0 to 4294967295, that represents the \s-1TTL\s0 in seconds. The default value is 5.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get ftc_expired_record_ttl
\&   my $ftc_expired_record_ttl = $memberdns\->ftc_expired_record_ttl( );
\&   #Modify ftc_expired_record_ttl
\&   $memberdns\->ftc_expired_record_ttl(60);
.Ve
.RE
.RS 4
.RE
.SS "ftc_expired_record_timeout( )"
.IX Subsection "ftc_expired_record_timeout( )"
.RS 4
Use this method to set or retrieve the timeout value after which the expired Fault Tolerant Caching (\s-1FTC\s0) record becomes stale and is no longer valid.
.Sp
Setting this method to a defined value implicitly sets the override_ftc method to \*(L"true\*(R".
Setting the parameter to undefined if ftc_expired_record_ttl and enable_ftc are also undefined causes the appliance to use the Grid \s-1DNS\s0 default and automatically resets the override_ftc method to \*(L"false\*(R".
.Sp
Note that when ftc_expired_record_timeout is set to a defined value and override_ftc is set to \*(L"false\*(R", the last operation takes precedence.
Thus the sequence \f(CW$object\fR\->ftc_expired_record_timeout(\*(L"true\*(R"); \f(CW$object\fR\->override_ftc(\*(L"false\*(R"); will set override_ftc to \*(L"false\*(R",
and the sequence \f(CW$object\fR\->override_ftc(\*(L"false\*(R"); \f(CW$object\fR\->ftc_expired_record_timeout(\*(L"true\*(R"); will result in override_ftc=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer, from 0 to 4294967295, that represents the timeout in seconds. The default value is 86400.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get ftc_expired_record_timeout
\&   my $ftc_expired_record_timeout = $memberdns\->ftc_expired_record_timeout( );
\&   #Modify ftc_expired_record_timeout
\&   $memberdns\->ftc_expired_record_timeout(3600);
.Ve
.RE
.RS 4
.RE
.SS "glue_record_addresses( )"
.IX Subsection "glue_record_addresses( )"
.RS 4
Use this method to specify which \s-1IP\s0 address the appliance uses when it generates the glue record. It can use the \s-1IP\s0 address of the appliance, the \s-1NAT IP\s0 address, or an \s-1IP\s0 address that you define.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::DNS::GlueRecordAddr object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& my $glue_record_addr1 = Infoblox::DNS::GlueRecordAddr\->new(
\&     view                => "default",  #can only be one of existing views
\&     glue_record_address => "NAT",
\& );
\& $memberdns\->glue_record_addresses([$glue_record_addr1]);
.Ve
.RE
.RS 4
.RE
.SS "gss_tsig_keys( )"
.IX Subsection "gss_tsig_keys( )"
.RS 4
Use this method to set or retrieve the list of GSS-TSIG keys for a member \s-1DNS\s0 object.
.Sp
Setting this method to a defined value implicitly sets the override_gss_tsig_keys method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_gss_tsig_keys method to \*(L"false\*(R".
.Sp
Note that when gss_tsig_keys is set to a defined value and override_gss_tsig_keys is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->gss_tsig_keys($keys); \f(CW$object\fR\->override_gss_tsig_keys(\*(L"false\*(R"); will set override_gss_tsig_keys to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_gss_tsig_keys(\*(L"false\*(R"); \f(CW$object\fR\->gss_tsig_keys($keys); will result in override_gss_tsig_keys=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::Grid::KerberosKey objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #Get the Kerberos keys list
\& my $kerberos_keys_list = $memberdns\->gss_tsig_keys();
\& #Modify the Kerberos keys list
\& my $kerberos_key1 = Infoblox::Cluster::KerberosKey\->new(
\&        principal => \*(Aqhost/appliance.ivan.test1@LADYBUG.LOCAL\*(Aq,
\&        );
\& my $kerberos_key2 = Infoblox::Cluster::KerberosKey\->new(
\&        principal => \*(Aqhost/appliance.ivan.test2@LADYBUG.LOCAL\*(Aq,
\&        );
\& $memberdns\->gss_tsig_keys([$kerberos_key1, $kerberos_key2]);
.Ve
.RE
.RS 4
.RE
.SS "host_name_restriction_policy( )"
.IX Subsection "host_name_restriction_policy( )"
.RS 4
Use this method to set or retrieve the member-level host name restriction policy  that overrides  the grid-level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is the name of record name policy defined at the grid level via Infoblox::Grid::RecordNamePolicy
.Sp
There are three  predefined  policies:
.Sp
Policy Name                     Regex Applied
.Sp
\&\*(L"Allow Any\*(R"                      .+
.Sp
\&\*(L"Allow Underscore\*(R"               ^[\-a\-zA\-Z0\-9_.]+$
.Sp
\&\*(L"Strict Hostname Checking\*(R"       ^[a\-zA\-Z0\-9]$|^[a\-zA\-Z0\-9][\-a\-zA\-Z0\-9.]*[a\-zA\-Z0\-9]$
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Getting host_name_restriction_policy
\& $memberdns\->host_name_restriction_policy( );
\& #Modifying host_name_restriction_policy
\& $memberdns\->host_name_restriction_policy("Allow Any");
\& #Un\-override host_name_restriction_policy
\& $memberdns\->host_name_restriction_policy(undef);
.Ve
.RE
.RS 4
.RE
.SS "ipv6_glue_record_addresses( )"
.IX Subsection "ipv6_glue_record_addresses( )"
.RS 4
Use this method to specify which IPv6 address the appliance uses when it generates the glue record. It can use the IPv6 address of the appliance, the \s-1NAT\s0 IPv6 address, or an IPv6 address that you define.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array of Infoblox::DNS::GlueRecordAddr objects.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my $v6_glue_record_addr1 = Infoblox::DNS::GlueRecordAddr\->new(
\&     view                => "default",  #can only be one of existing views
\&     glue_record_address => "2001:db8::1",
\& );
\&
\& $memberdns\->ipv6_glue_record_addresses([$v6_glue_record_addr1]);
.Ve
.RE
.RS 4
.RE
.SS "is_unbound_capable( )"
.IX Subsection "is_unbound_capable( )"
.RS 4
Use this method to retrieve the flag that indicates whether Member \s-1DNS\s0 supports unbound recursive resolver or not. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get is_unbound_capable
\& my $is_unbound_capable = $memberdns\->is_unbound_capable();
.Ve
.RE
.RS 4
.RE
.SS "lame_ttl( )"
.IX Subsection "lame_ttl( )"
.RS 4
Use this method to set or retrieve the number of seconds to cache lame delegations or lame servers.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The number of seconds to cache lame delegations or lame servers. The default value is 600.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get lame_ttl
\& my $lame_ttl = $memberdns\->lame_ttl();
\& #Modify lame_ttl
\& $memberdns\->lame_ttl(700);
.Ve
.RE
.RS 4
.RE
.SS "logging_categories( )"
.IX Subsection "logging_categories( )"
.RS 4
Use this method to set logging categories for this member.  This setting overrides grid logging category settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains one or more of the following values:
.RS 4
.IP "\(bu" 4
\&\f(CW"general"\fR: Records the \s-1BIND\s0 messages that are not specifically classified.
.IP "\(bu" 4
\&\f(CW"config"\fR: Records the configuration file parsing messages.
.Sp
\&\f(CW"dnssec"\fR: Records the DNSSEC-signed responses.
.Sp
\&\f(CW"network"\fR: Records the network operation messages.
.Sp
\&\f(CW"queries"\fR: Records the query messages.
.Sp
\&\f(CW"responses"\fR: Records the response messages.
.Sp
\&\f(CW"security"\fR: Records the approved and denied requests.
.Sp
\&\f(CW"xfer\-in"\fR: Records zone transfer messages from the remote name servers to the appliance.
.Sp
\&\f(CW"xfer\-out"\fR: Records zone transfer messages from the Infoblox appliance to remote name servers.
.Sp
\&\f(CW"update"\fR: Records the dynamic update instances.
.Sp
\&\f(CW"resolver"\fR: Records the \s-1DNS\s0 resolution instances, including recursive queries from resolvers.
.Sp
\&\f(CW"notify"\fR: Records the asynchronous zone change notification messages.
.Sp
\&\f(CW"lame_servers"\fR: Records bad delegation instances.
.Sp
\&\f(CW"database"\fR: Records \s-1BIND\s0's internal database processes.
.Sp
\&\f(CW"client"\fR: Records client requests.
.Sp
\&\f(CW"rpz"\fR: Records \s-1RPZ\s0 messages.
.Sp
\&\f(CW"dtc_gslb"\fR: Records \s-1DTC GSLB\s0 activity.
.Sp
\&\f(CW"dtc_health"\fR: Records \s-1DTC\s0 health monitoring.
.RE
.RS 4
.RE
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting logging_categories
\&   $memberdns\->logging_categories( );
\&   #Modifying logging_categories
\&   $memberdns\->logging_categories( [ "general", "database" , "queries" ] );
.Ve
.RE
.RS 4
.RE
.SS "max_cache_ttl( )"
.IX Subsection "max_cache_ttl( )"
.RS 4
Use this method to set or retrieve the maximum time (in seconds) for which the server will cache positive answers.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The maximum time is specified in seconds. The default value is 604800.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get max_cache_ttl
\& my $max_cache_ttl = $memberdns\->max_cache_ttl();
\& #Modify max_cache_ttl
\& $memberdns\->max_cache_ttl(400);
.Ve
.RE
.RS 4
.RE
.SS "max_ncache_ttl( )"
.IX Subsection "max_ncache_ttl( )"
.RS 4
Use this method to set or retrieve the maximum time (in seconds) for which the server will cache negative (\s-1NXDOMAIN\s0) responses. This method applies for the defined member configuration.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The maximum time is specified in seconds. The default value is 10800. The maximum allowed value is 604800.
.Sp
Setting this parameter implicitle sets the override_max_ncache_ttl attribute to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid-level settings and automatically sets the override_max_ncache_ttl attribute to \*(L"false\*(R".
.Sp
Note that when max_ncache_ttl is set and override_max_ncache_ttl is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$firstview\fR\->max_ncache_ttl(10800); \f(CW$firstview\fR\->override_max_ncache_ttl(\*(L"false\*(R"); sets override_max_ncache_ttl to \*(L"false\*(R", and the sequence \f(CW$firstview\fR\->override_max_ncache_ttl(\*(L"false\*(R"); \f(CW$firstview\fR\->max_ncache_ttl(30600); sets override_max_ncache_ttl to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get max_ncache_ttl
\& my $max_ncache_ttl = $memberdns\->max_ncache_ttl();
\& #Modify max_ncache_ttl
\& $memberdns\->max_ncache_ttl(400);
.Ve
.RE
.RS 4
.RE
.SS "max_cached_lifetime( )"
.IX Subsection "max_cached_lifetime( )"
.RS 4
Use this method to set or retrieve maximum time in seconds a \s-1DNS\s0 response can be stored in the hardware acceleration cache.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integer between 60 and 86400, inclusive. Default value is 86400.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get max_cached_lifetime
\& my $max_cached_lifetime = $memberdns\->max_cached_lifetime();
\& #Modify max_cached_lifetime
\& $memberdns\->max_cached_lifetime(400);
.Ve
.RE
.RS 4
.RE
.SS "minimal_resp( )"
.IX Subsection "minimal_resp( )"
.RS 4
Use this method to enable/disable the ability to return a minimal amount of data in response to a query. This capability speeds up the \s-1DNS\s0 services provided by the appliance.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable minimal responses or \*(L"false\*(R" to desable it. Default is \*(L"true\*(R"
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 1 when the modification succeeds, and returns other values when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting minimal_resp
\&   $memberdns\->minimal_resp( );
\&   #Modifying minimal_resp
\&   $memberdns\->minimal_resp("true");
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to retrieve the grid name.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name
\& my $name = $memberdns\->name();
.Ve
.RE
.RS 4
.RE
.SS "notify_delay( )"
.IX Subsection "notify_delay( )"
.RS 4
Use this method to specify with how many seconds of delay the notify messages are sent to secondaries.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integer between 5 and 86400, inclusive. Default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting notify_delay
\&   my $notify_delay = $memberdns\->notify_delay( );
\&   #Modifying notify_delay
\&   $memberdns\->notify_delay(5);
.Ve
.RE
.RS 4
.RE
.SS "notify_source_port( )"
.IX Subsection "notify_source_port( )"
.RS 4
Use this method to specify the source port for notify messages.
When requesting zone transfers from the primary server, some secondary \s-1DNS\s0 servers use the source port number (the primary server used to send the notify message) as the destination port number in the zone transfer request.
This setting overrides grid static source port settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Source port number for notify messages. Valid values are between 1 and 63999. The default is picked by \s-1BIND.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting notify_source_port
\&   $memberdns\->notify_source_port( );
\&   #Modifying notify_source_port
\&   $memberdns\->notify_source_port("2");
.Ve
.RE
.RS 4
.RE
.SS "override_attack_mitigation( )"
.IX Subsection "override_attack_mitigation( )"
.RS 4
The override_attack_mitigation attribute controls whether the attack_mitigation method values of the member are used, instead of the Grid default.
.Sp
The override_attack_mitigation attribute can be specified explicitly. It is also set implicitly when attack_mitigation is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for attack_mitigation. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for attack_mitigation.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_attack_mitigation
\&    my $override_attack_mitigation = $memberdns\->override_attack_mitigation( );
\&    #Modifying override_attack_mitigation
\&    $memberdns\->override_attack_mitigation("true");
.Ve
.RE
.RS 4
.RE
.SS "override_auto_blackhole( )"
.IX Subsection "override_auto_blackhole( )"
.RS 4
The override_auto_blackhole attribute controls whether the auto_blackhole method values of the member are used, instead of the Grid default.
.Sp
The override_auto_blackhole attribute can be specified explicitly. It is also set implicitly when auto_blackhole is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for auto_blackhole. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for auto_blackhole.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_auto_blackhole
\&    my $override_auto_blackhole = $memberdns\->override_auto_blackhole( );
\&    #Modifying override_auto_blackhole
\&    $memberdns\->override_auto_blackhole("true");
.Ve
.RE
.RS 4
.RE
.SS "override_bind_hostname_directive( )"
.IX Subsection "override_bind_hostname_directive( )"
.RS 4
The override_bind_hostname_directive attribute controls whether the bind_hostname_directive method values of the member are used, instead of the Grid default.
.Sp
The override_bind_hostname_directive attribute can be specified explicitly. It is also set implicitly when bind_hostname_directive is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for bind_hostname_directive. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for bind_hostname_directive.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_bind_hostname_directive
\&    my $override_bind_hostname_directive = $memberdns\->override_bind_hostname_directive( );
\&    #Modifying override_bind_hostname_directive
\&    $memberdns\->override_bind_hostname_directive("true");
.Ve
.RE
.RS 4
.RE
.SS "override_server_id_directive( )"
.IX Subsection "override_server_id_directive( )"
.RS 4
The override_server_id_directive attribute controls whether the server_id_directive method values of the member are used, instead of the Grid default.
.Sp
The override_server_id_directive attribute can be specified explicitly. It is also set implicitly when server_id_directive is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for server_id_directive. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for server_id_directive.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_server_id_directive
\&    my $override_server_id_directive = $memberdns\->override_server_id_directive( );
\&    #Modifying override_server_id_directive
\&    $memberdns\->override_server_id_directive("true");
.Ve
.RE
.RS 4
.RE
.SS "override_capture_dns_queries_on_all_domains( )"
.IX Subsection "override_capture_dns_queries_on_all_domains( )"
.RS 4
The override_capture_dns_queries_on_all_domains attribute controls whether the capture_dns_queries_on_all_domains method values of the member are used, instead of the Grid default.
.Sp
The override_capture_dns_queries_on_all_domains attribute can be specified explicitly. It is also set implicitly when capture_dns_queries_on_all_domains is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for capture_dns_queries_on_all_domains. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for capture_dns_queries_on_all_domains.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get override_capture_dns_queries_on_all_domains value
\& my $override_capture_dns_queries_on_all_domains = $object\->override_capture_dns_queries_on_all_domains();
\&
\& #Modify override_capture_dns_queries_on_all_domains value
\& $object\->override_capture_dns_queries_on_all_domains("true");
.Ve
.RE
.RS 4
.RE
.SS "override_copy_xfer_to_notify( )"
.IX Subsection "override_copy_xfer_to_notify( )"
.RS 4
The override_copy_xfer_to_notify attribute controls whether the copy_xfer_to_notify method values of the member are used, instead of the grid default.
.Sp
The override_copy_xfer_to_notify attribute can be specified explicitly. It is also set implicitly when copy_xfer_to_notify is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for copy_xfer_to_notify. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for copy_xfer_to_notify.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_copy_xfer_to_notify
\&    my $override_copy_xfer_to_notify = $memberdns\->override_copy_xfer_to_notify( );
\&    #Modifying override_copy_xfer_to_notify
\&    $memberdns\->override_copy_xfer_to_notify("true");
.Ve
.RE
.RS 4
.RE
.SS "override_disable_edns( )"
.IX Subsection "override_disable_edns( )"
.RS 4
The override_disable_edns attribute controls whether the disable_edns method values of the member are used, instead of the Grid default.
.Sp
The override_disable_edns attribute can be specified explicitly. It is also set implicitly when disable_edns is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for disable_edns. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for disable_edns. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_disable_edns
\& my $override_disable_edns = $memberdns\->override_disable_edns();
\& #Modify override_disable_edns
\& $memberdns\->override_disable_edns("true");
.Ve
.RE
.RS 4
.RE
.SS "override_dns64( )"
.IX Subsection "override_dns64( )"
.RS 4
The override_dns64 attribute controls whether the \s-1DNS64\s0 method values of the member are used, instead of the grid default.
.Sp
The override_dns64 attribute can be specified explicitly. It is also set implicitly when enable_dns64 or dns64_groups are set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for enable_dns64 and dns64_groups. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for enable_dns64 and dns64_groups.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_dns64
\&    my $override_dns64=$memberdns\->override_dns64( );
\&    #Modifying override_dns64
\&    $memberdns\->override_dns64("true");
.Ve
.RE
.RS 4
.RE
.SS "override_dns_health_check( )"
.IX Subsection "override_dns_health_check( )"
.RS 4
The override_dns_health_check attribute controls whether the \s-1DNS\s0 health check settings Member are used, instead of the Grid default.
.Sp
The override_dns_health_check attribute can be specified explicitly. It is also set implicitly when following fields are set to a defined value:
.Sp
.Vb 7
\& dns_health_check_domain_list
\& dns_health_check_recursion_flag
\& dns_health_check_anycast_control
\& dns_health_check_interval
\& dns_health_check_retries
\& dns_health_check_timeout
\& enable_dns_health_check
.Ve
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to override the Grid-level \s-1DNS\s0 health check setting or 'false' to inherit the Grid-level \s-1DNS\s0 health check setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get override_dns_health_check value
\& my $value = $object\->override_dns_health_check();
\&
\& #Modify override_dns_health_check value
\& $object\->override_dns_health_check(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_filter_aaaa( )"
.IX Subsection "override_filter_aaaa( )"
.RS 4
The override_filter_aaaa attribute controls whether the \s-1AAAA\s0 filter method values of the member are used, instead of the grid default.
.Sp
The override_filter_aaaa attribute can be specified explicitly. It is also set implicitly when filter_aaaa or filter_aaaa_list are set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for filter_aaaa and filter_aaaa_list. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for filter_aaaa and filter_aaaa_list.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_filter_aaaa
\&    my $override_filter_aaaa=$memberdns\->override_filter_aaaa( );
\&    #Modifying override_filter_aaaa
\&    $memberdns\->override_filter_aaaa("true");
.Ve
.RE
.RS 4
.RE
.SS "override_dns_cache_acceleration_ttl( )"
.IX Subsection "override_dns_cache_acceleration_ttl( )"
.RS 4
The override_dns_cache_acceleration_ttl attribute controls whether the dns_cache_acceleration_ttl method values of the member are used, instead of the grid default.
.Sp
The override_dns_cache_acceleration_ttl attribute can be specified explicitly. It is also set implicitly when dns_cache_acceleration_ttl is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for dns_cache_acceleration_ttl. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for dns_cache_acceleration_ttl.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_dns_cache_acceleration_ttl
\&    my $override_dns_cache_acceleration_ttl=$memberdns\->override_dns_cache_acceleration_ttl( );
\&    #Modifying override_dns_cache_acceleration_ttl
\&    $memberdns\->override_dns_cache_acceleration_ttl("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ftc( )"
.IX Subsection "override_ftc( )"
.RS 4
The override_ftc attribute controls whether the values of the Fault Tolerant Caching (\s-1FTC\s0) feature are used for the member, instead of the Grid default.
.Sp
The override_ftc attribute can be specified explicitly. It is also set implicitly when the following fields are set to a defined value:
.Sp
.Vb 3
\& enable_ftc
\& ftc_expired_record_ttl
\& ftc_expired_record_timeout
.Ve
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for \s-1FTC\s0 feature.
Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for \s-1FTC.\s0 The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_ftc
\& my $override_ftc = $memberdns\->override_ftc();
\& #Modify override_ftc
\& $memberdns\->override_ftc(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_gss_tsig_keys( )"
.IX Subsection "override_gss_tsig_keys( )"
.RS 4
The override_gss_tsig_keys attribute controls whether the gss_tsig_keys method values for the member are used, instead of the Grid default.
.Sp
The override_gss_tsig_keys attribute can be specified explicitly. It is also set implicitly when gss_tsig_keys is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override GSS-TSIG keys. Set the parameter to \*(L"false\*(R" to inherit the grid-level GSS-TSIG keys.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_gss_tsig_keys
\& my $override_gss_tsig_keys = $memberdns\->override_gss_tsig_keys();
\& #Modyfying override_gss_tsig_keys
\& $memberdns\->override_gss_tsig_keys("true");
.Ve
.RE
.RS 4
.RE
.SS "override_enable_capture_dns( )"
.IX Subsection "override_enable_capture_dns( )"
.RS 4
The override_enable_capture_dns attribute controls whether the enable_capture_dns_queries and enable_capture_dns_responses method values of the member are used, instead of the Grid default.
.Sp
The override_enable_capture_dns attribute can be specified explicitly. It is also set implicitly when enable_capture_dns_queries or enable_capture_dns_responses is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for enable_capture_dns_queries and enable_capture_dns_responses. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for enable_capture_dns_queries and enable_capture_dns_responses.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get override_enable_capture_dns value
\& my $override_enable_capture_dns = $object\->override_enable_capture_dns();
\&
\& #Modify override_enable_capture_dns value
\& $object\->override_enable_capture_dns("true");
.Ve
.RE
.RS 4
.RE
.SS "override_enable_excluded_domain_names( )"
.IX Subsection "override_enable_excluded_domain_names( )"
.RS 4
The override_enable_excluded_domain_names attribute controls whether the capture_dns_queries_on_all_domains method values of the member are used, instead of the Grid default.
.Sp
The override_enable_excluded_domain_names attribute can be specified explicitly. It is also set implicitly when capture_dns_queries_on_all_domains is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for capture_dns_queries_on_all_domains. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for capture_dns_queries_on_all_domains.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get override_enable_excluded_domain_names value
\& my $override_enable_excluded_domain_names = $object\->override_enable_excluded_domain_names();
\&
\& #Modify override_enable_excluded_domain_names value
\& $object\->override_enable_excluded_domain_names("true");
.Ve
.RE
.RS 4
.RE
.SS "override_enable_gss_tsig( )"
.IX Subsection "override_enable_gss_tsig( )"
.RS 4
The override_enable_gss_tsig attribute controls whether the enable_gss_tsig method value for the member is used, instead of the Grid default.
.Sp
The override_enable_gss_tsig attribute can be specified explicitly. It is also set implicitly when enable_gss_tsig is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for enable_gss_tsig. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for enable_gss_tsig value.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_enable_gss_tsig
\& my $override_enable_gss_tsig = $memberdns\->override_enable_gss_tsig();
\& #Modyfying override_enable_gss_tsig
\& $memberdns\->override_enable_gss_tsig("true");
.Ve
.RE
.RS 4
.RE
.SS "override_max_cache_ttl( )"
.IX Subsection "override_max_cache_ttl( )"
.RS 4
The override_max_cache_ttl attribute controls whether the max_cache_ttl method values of the member are used, instead of the grid default.
.Sp
The override_max_cache_ttl attribute can be specified explicitly. It is also set implicitly when max_cache_ttl is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for max_cache_ttl. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for max_cache_ttl.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_max_cache_ttl
\&    my $override_max_cache_ttl = $memberdns\->override_max_cache_ttl( );
\&    #Modifying override_max_cache_ttl
\&    $memberdns\->override_max_cache_ttl("true");
.Ve
.RE
.RS 4
.RE
.SS "override_max_ncache_ttl( )"
.IX Subsection "override_max_ncache_ttl( )"
.RS 4
The override_max_ncache_ttl attribute controls whether the max_ncache_ttl method values of the member are used, instead of the Grid default.
.Sp
The override_max_ncache_ttl attribute can be specified explicitly. It is also set implicitly when max_ncache_ttl is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for max_ncache_ttl. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for max_ncache_ttl.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_max_ncache_ttl
\&    my $override_max_ncache_ttl = $memberdns\->override_max_ncache_ttl( );
\&    #Modifying override_max_ncache_ttl
\&    $memberdns\->override_max_ncache_ttl("true");
.Ve
.RE
.RS 4
.RE
.SS "override_max_cached_lifetime( )"
.IX Subsection "override_max_cached_lifetime( )"
.RS 4
The override_max_cached_lifetime attribute controls whether the max_cached_lifetime method values of the member are used, instead of the grid default.
.Sp
The override_max_cached_lifetime attribute can be specified explicitly. It is also set implicitly when max_cached_lifetime is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for max_cached_lifetime. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for max_cached_lifetime.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_max_cached_lifetime
\&    my $override_max_cached_lifetime = $memberdns\->override_max_cached_lifetime( );
\&    #Modifying override_max_cached_lifetime
\&    $memberdns\->override_max_cached_lifetime("true");
.Ve
.RE
.RS 4
.RE
.SS "override_nxdomain_redirect( )"
.IX Subsection "override_nxdomain_redirect( )"
.RS 4
The \*(L"override_nxdomain_redirect\*(R" attribute controls whether the \*(L"nxdomain_redirect\*(R", \*(L"nxdomain_redirect_addresses\*(R", \*(L"nxdomain_redirect_addresses_ipv6\*(R", \*(L"nxdomain_redirect_ttl\*(R", \*(L"nxdomain_log_query\*(R", and \*(L"nxdomain_rulesets\*(R" values for this member are used. Note that these values can be overridden at the \s-1DNS\s0 view level as well.
.Sp
The \*(L"override_nxdomain_redirect\*(R" attribute can be specified explicitly. It is also set implicitly as follows:
\&\*(L"nxdomain_redirect\*(R" => \*(L"true\*(R"|\*(L"false\*(R" or \*(L"nxdomain_redirect_addresses\*(R" => [\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]|[] or \*(L"nxdomain_redirect_addresses\*(R" => [\*(L"2001:db8::1\*(R", \*(L"2002:ffff::1\*(R"]|[] result in \*(L"override_nxdomain_redirect\*(R" => \*(L"true\*(R", \*(L"nxdomain_redirect\*(R" => undef and \*(L"nxdomain_redirect_addresses\*(R" => undef and \*(L"nxdomain_redirect_addresses_ipv6\*(R" => undef result in \*(L"override_nxdomain_redirect\*(R" => \*(L"false\*(R".
If \*(L"override_nxdomain_redirect\*(R" is specified explicitly as \*(L"true\*(R", and \*(L"nxdomain_redirect\*(R" => undef, \*(L"nxdomain_redirect_addresses\*(R" => undef and \*(L"nxdomain_redirect_addresses_ipv6\*(R" => undef, then the explicit value takes precedence; and \*(L"override_nxdomain_redirect\*(R"=>\*(L"true\*(R", \*(L"nxdomain_redirect\*(R", \*(L"nxdomain_redirect_addresses\*(R", and \*(L"nxdomain_redirect_addresses\*(R" remain unchanged in the database.
.Sp
Specifying the \*(L"nxdomain_redirect_ttl\*(R", \*(L"nxdomain_log_query\*(R", or \*(L"nxdomain_rulesets\*(R" attributes does not affect the \*(L"override_nxdomain_redirect\*(R" value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting of the \s-1NXDOMAIN\s0 redirection attributes. Set the parameter to \*(L"false\*(R" to inherit the grid-level settings.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get override_nxdomain_redirect
\&   my $override_nxdomain_redirect=$memberdns\->override_nxdomain_redirect( );
\&   #Modify override_nxdomain_redirect
\&   $memberdns\->override_nxdomain_redirect("true");
.Ve
.RE
.RS 4
.RE
.SS "override_lame_ttl( )"
.IX Subsection "override_lame_ttl( )"
.RS 4
Use this method to set or retrieve the override_lame_ttl attribute that controls whether the lame_ttl method values of the member are used, instead of the Grid default
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for lame_ttl. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for lame_ttl. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_lame_ttl
\& my $override_lame_ttl = $memberdns\->override_lame_ttl();
\& #Modify override_lame_ttl
\& $memberdns\->override_lame_ttl(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_rpz_qname_wait_recurse( )"
.IX Subsection "override_rpz_qname_wait_recurse( )"
.RS 4
The override_rpz_qname_wait_recurse attribute controls whether the rpz_qname_wait_recurse method value for the member is used, instead of the Grid default.
.Sp
The \*(L"override_rpz_qname_wait_recurse\*(R" attribute can be specified explicitly. It is also established implicitly as follows: \*(L"rpz_qname_wait_recurse\*(R" => \*(L"true\*(R"|\*(L"false\*(R" results in \*(L"override_rpz_qname_wait_recurse\*(R" => \*(L"true\*(R"; \*(L"rpz_qname_wait_recurse\*(R" => undef results in \*(L"override_rpz_qname_wait_recurse\*(R" => \*(L"false\*(R"; If \*(L"override_rpz_qname_wait_recurse\*(R" is specified explicitly as \*(L"true\*(R", while \*(L"rpz_qname_wait_recurse\*(R"=>undef, the explicit value takes precedence, and \*(L"override_rpz_qname_wait_recurse\*(R"=>\*(L"true\*(R" while \*(L"rpz_qname_wait_recurse\*(R" remains unchanged in the database.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for rpz_qname_wait_recurse. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for rpz_qname_wait_recurse value.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_rpz_qname_wait_recurse
\& my $override_rpz_qname_wait_recurse = $memberdns\->override_rpz_qname_wait_recurse();
\& #Modyfying override_rpz_qname_wait_recurse
\& $memberdns\->override_rpz_qname_wait_recurse("true");
.Ve
.RE
.RS 4
.RE
.SS "override_transfers_in( )"
.IX Subsection "override_transfers_in( )"
.RS 4
Use this method to set or retrieve the override_transfers_in attribute that controls whether the transfers_in method values of the member are used, instead of the Grid default.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for transfers_in. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for transfers_in. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_transfers_in
\& my $override_transfers_in = $memberdns\->override_transfers_in();
\& #Modify override_transfers_in
\& $memberdns\->override_transfers_in(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_transfers_out( )"
.IX Subsection "override_transfers_out( )"
.RS 4
Use this method to set or retrieve the override_transfers_out attribute that controls whether the transfers_out method values of the member are used, instead of the Grid default.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for transfers_out. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for transfers_out. The default value is '
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_transfers_out
\& my $override_transfers_out = $memberdns\->override_transfers_out();
\& #Modify override_transfers_out
\& $memberdns\->override_transfers_out(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_transfers_per_ns( )"
.IX Subsection "override_transfers_per_ns( )"
.RS 4
Use this method to set or retrieve the transfers_per_ns attribute that controls whether the transfers_per_ns method values of the member are used, instead of the Grid default.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for transfers_per_ns. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for transfers_per_ns. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_transfers_per_ns
\& my $override_transfers_per_ns = $memberdns\->override_transfers_per_ns();
\& #Modify override_transfers_per_ns
\& $memberdns\->override_transfers_per_ns(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_serial_query_rate( )"
.IX Subsection "override_serial_query_rate( )"
.RS 4
Use this method to set or retrieve the override_serial_query_rate attribute that controls whether the serial_query_rate method values of the member are used, instead of the Grid default.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for serial_query_rate. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for serial_query_rate. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_serial_query_rate
\& my $override_serial_query_rate = $memberdns\->override_serial_query_rate();
\& #Modify override_serial_query_rate
\& $memberdns\->override_serial_query_rate(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_query_rewrite( )"
.IX Subsection "override_query_rewrite( )"
.RS 4
Use this method to set or retrieve the override_query_rewrite that controls whether the enable_query_rewrite method values of the member are used, instead of the grid-level enable_query_rewrite value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level \s-1DNS\s0 query rewrite settings. Set the parameter to \*(L"false\*(R" to inherit the grid-level \s-1DNS\s0 query rewrite settings. The default is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_query_rewrite
\& my $override_query_rewrite = $memberdns\->override_query_rewrite();
\& #Modify override_query_rewrite
\& $memberdns\->override_query_rewrite("true");
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_redirect( )"
.IX Subsection "nxdomain_redirect( )"
.RS 4
Use this method to enable or disable \s-1NXDOMAIN\s0 redirection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the nxdomain_redirect flag or \*(L"false\*(R" to deactivate/unset it. The default is \*(L"false\*(R".
.Sp
Setting this parameter to \*(L"true\*(R" or \*(L"false\*(R" implicitly sets the override_nxdomain_redirect attribute to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid-level \s-1NXDOMAIN\s0 redirection settings and automatically sets the override_nxdomain_redirect attribute to \*(L"false\*(R" if nxdomain_redirect_addresses or nxdomain_redirect_addresses_ipv6 is also undefined. But if nxdomain_redirect_addresses or nxdomain_redirect_addresses_ipv6 contains a value, then the override_nxdomain_redirect attribute is set to true.
.Sp
Note that when nxdomain_redirect is set to \*(L"true\*(R"/\*(L"false\*(R" and override_nxdomain_redirect is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$grid_member\fR\->nxdomain_redirect(\*(L"false\*(R"); \f(CW$grid_member\fR\->override_nxdomain_redirect(\*(L"false\*(R"); sets override_nxdomain_redirect to \*(L"false\*(R", and the sequence \f(CW$grid_member\fR\->override_nxdomain_redirect(\*(L"false\*(R"); \f(CW$grid_member\fR\->nxdomain_redirect(\*(L"false\*(R"); sets override_nxdomain_redirect to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting nxdomain_redirect
\&   my $nxdomain_redirect = $grid_member\->nxdomain_redirect( );
\&   #Modifying nxdomain_redirect
\&   $grid_member\->nxdomain_redirect("true");
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_redirect_addresses( )"
.IX Subsection "nxdomain_redirect_addresses( )"
.RS 4
Use this method to set the \s-1NXDOMAIN\s0 redirection addresses.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of IPv4 addresses. The default value is undefined.
.Sp
Setting this parameter to a defined value implicitly sets the override_nxdomain_redirect attribute to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid-level \s-1NXDOMAIN\s0 redirection settings and automatically sets the override_nxdomain_redirect attribute to \*(L"false\*(R" if nxdomain_redirect and nxdomain_redirect_addresses_ipv6 is also undefined. But if nxdomain_redirect or nxdomain_redirect_addresses_ipv6 contains a value, then the override_nxdomain_redirect attribute is set to true.
.Sp
Note that when nxdomain_redirect_addresses contains a valid array reference and override_nxdomain_redirect is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$grid_member\fR\->nxdomain_redirect_addresses([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); \f(CW$grid_member\fR\->override_nxdomain_redirect(\*(L"false\*(R"); sets override_nxdomain_redirect to \*(L"false\*(R", and the sequence \f(CW$grid_member\fR\->override_nxdomain_redirect(\*(L"false\*(R"); \f(CW$grid_member\fR\->nxdomain_redirect_addresses([\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]); sets override_nxdomain_redirect to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_redirect_addresses
\&   my $nxdomain_redirect_addresses = $grid_member\->nxdomain_redirect_addresses( );
\&   #Modify nxdomain_redirect_addresses
\&   $grid_member\->nxdomain_redirect_addresses(["10.0.0.10", "10.0.0.20"]);
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_redirect_addresses_ipv6( )"
.IX Subsection "nxdomain_redirect_addresses_ipv6( )"
.RS 4
Use this method to set the \s-1NXDOMAIN\s0 redirection IPv6 addresses.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of IPv6 addresses. The default value is undefined.
.Sp
Setting this parameter to a defined value implicitly sets the override_nxdomain_redirect attribute to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid-level \s-1NXDOMAIN\s0 redirection settings and automatically sets the override_nxdomain_redirect attribute to \*(L"false\*(R" if nxdomain_redirect and nxdomain_redirect_addresses is also undefined. But if nxdomain_redirect or nxdomain_redirect_addresses contains a value, then the override_nxdomain_redirect attribute is set to true.
.Sp
Note that when nxdomain_redirect_addresses_ipv6 contains a valid array reference and override_nxdomain_redirect is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$grid_member\fR\->nxdomain_redirect_addresses_ipv6([\*(L"2001:db8::1\*(R", \*(L"2002:ffff::1\*(R"]); \f(CW$grid_member\fR\->override_nxdomain_redirect(\*(L"false\*(R"); sets override_nxdomain_redirect to \*(L"false\*(R", and the sequence \f(CW$grid_member\fR\->override_nxdomain_redirect(\*(L"false\*(R"); \f(CW$grid_member\fR\->nxdomain_redirect_addresses_ipv6([\*(L"2001:db8::1\*(R", \*(L"2002:ffff::1\*(R"]); sets override_nxdomain_redirect to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_redirect_addresses_ipv6
\&   my $nxdomain_redirect_addresses_ipv6 = $grid_member\->nxdomain_redirect_addresses_ipv6( );
\&   #Modify nxdomain_redirect_addresses_ipv6
\&   $grid_member\->nxdomain_redirect_addresses_ipv6(["2001:db8::1", "2002:ffff::1"]);
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_redirect_ttl( )"
.IX Subsection "nxdomain_redirect_ttl( )"
.RS 4
Use this method to set or retrieve the \s-1TTL\s0 value of synthetic \s-1DNS\s0 responses that result from \s-1NXDOMAIN\s0 redirection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
A 32\-bit integer, from 0 to 4294967295, that represents the \s-1TTL\s0 in seconds. The default value is 60.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_redirect_ttl
\&   my $nxdomain_redirect_ttl = $grid_member\->nxdomain_redirect_ttl( );
\&   #Modify nxdomain_redirect_ttl
\&   $grid_member\->nxdomain_redirect_ttl(60);
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_log_query( )"
.IX Subsection "nxdomain_log_query( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether \s-1NXDOMAIN\s0 redirection queries are logged.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable logging, or \*(L"false\*(R" to deactivate it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_log_query
\&   my $nxdomain_log_query = $grid_member\->nxdomain_log_query( );
\&   #Modify nxdomain_log_query
\&   $grid_member\->nxdomain_log_query("true");
.Ve
.RE
.RS 4
.RE
.SS "nxdomain_rulesets( )"
.IX Subsection "nxdomain_rulesets( )"
.RS 4
Use this method to specify or retrieve Infoblox::DNS::Ruleset object names assigned at the grid level for \s-1NXDOMAIN\s0 redirection.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains the names of the Infoblox::DNS::Ruleset objects assigned to the grid. The names must be in string format.  The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get nxdomain_rulesets
\&   my $nxdomain_rulesets = $grid_member\->nxdomain_rulesets();
\&   #Modify nxdomain_rulesets
\&   $grid_member\->nxdomain_rulesets(["ruleset1", "ruleset2"]);
.Ve
.RE
.RS 4
.RE
.SS "override_blacklist( )"
.IX Subsection "override_blacklist( )"
.RS 4
The \*(L"override_blacklist\*(R" attribute controls whether the \*(L"enable_blacklist\*(R", \*(L"blacklist_redirect_addresses\*(R", \*(L"blacklist_redirect_ttl\*(R", \*(L"blacklist_log_query\*(R", and \*(L"blacklist_rulesets\*(R" values in the database are used.
.Sp
The \*(L"override_blacklist\*(R" attribute can be specified explicitly. It is also set implicitly as follows: \*(L"enable_blacklist\*(R" => \*(L"true\*(R"|\*(L"false\*(R" or \*(L"blacklist_redirect_addresses\*(R" => [\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]|[] results in \*(L"override_blacklist\*(R" => \*(L"true\*(R"; \*(L"enable_blacklist\*(R" => undef and \*(L"blacklist_redirect_addresses\*(R" => undef result in \*(L"override_blacklist\*(R" => \*(L"false\*(R". If \*(L"override_blacklist\*(R" is specified explicitly as \*(L"true\*(R", and \*(L"enable_blacklist\*(R" => undef or \*(L"blacklist_redirect_addresses\*(R" => undef, then the explicit value takes precedence. Therefore, \*(L"override_blacklist\*(R"=>\*(L"true\*(R", \*(L"enable_blacklist\*(R"=>undef, and \*(L"blacklist_redirect_addresses\*(R"=>undef remain unchanged in the database.
.Sp
Specifying the \*(L"blacklist_redirect_ttl\*(R", \*(L"blacklist_log_query\*(R", or \*(L"blacklist_rulesets\*(R" attributes does not affect the \*(L"override_blacklist\*(R" value. It is implicitly set only by \*(L"enable_blacklist\*(R" and \*(L"blacklist_redirect_addresses\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level settings of the blacklist redirect attributes. Set the parameter to \*(L"false\*(R" to inherit the grid-level settings. The default is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get override_blacklist
\&   my $override_blacklist=$memberdns\->override_blacklist( );
\&   #Modify override_blacklist
\&   $memberdns\->override_blacklist("true");
.Ve
.RE
.RS 4
.RE
.SS "override_dnssec( )"
.IX Subsection "override_dnssec( )"
.RS 4
The \*(L"override_dnssec\*(R" attribute controls whether  the \*(L"dnssec_enabled\*(R", \*(L"dnssec_validation_enabled\*(R",
\&\*(L"dnssec_expired_signatures_enabled\*(R", and \*(L"dnssec_trusted_keys\*(R" values in the
database are used. Note that these values can be  overridden at the \s-1DNS\s0 view  level as well.
.Sp
The \*(L"override_dnssec\*(R" attribute can be specified explicitly. It is also established
implicitly as follows:
    \*(L"dnssec_enabled\*(R" => \*(L"true\*(R"|\*(L"false\*(R" results in \*(L"override_dnssec\*(R" => \*(L"true\*(R"
    \*(L"dnssec_enabled\*(R" => undef results in \*(L"override_dnssec\*(R" => \*(L"false\*(R"
If \*(L"override_dnssec\*(R" is specified explicitly as \*(L"true\*(R", while \*(L"dnssec_enabled\*(R"=>undef,
the explicit  value takes precedence, and \*(L"override_dnssec\*(R"=>\*(L"true\*(R" while
\&\*(L"dnssec_enabled\*(R" remains unchanged in the  database.
.Sp
Supplying the \*(L"dnssec_validation_enabled\*(R", \*(L"dnssec_expired_signatures_enabled\*(R", or
\&\*(L"dnssec_trusted_keys\*(R" attributes does not affect the \*(L"override_dnssec\*(R" value. It is
implicitly affected only by \*(L"dnssec_enabled\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the  grid-level setting of  \s-1DNSSEC\s0 attributes. Set the parameter to \*(L"false\*(R" to inherit the  grid-level settings.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_dnssec
\&    my $override_dnssec=$memberdns\->override_dnssec( );
\&    #Modifying override_dnssec
\&    $memberdns\->override_dnssec("true");
.Ve
.RE
.RS 4
.RE
.SS "override_dtc_edns_prefer_client_subnet( )"
.IX Subsection "override_dtc_edns_prefer_client_subnet( )"
.RS 4
The override_dtc_edns_prefer_client_subnet attribute controls whether the dtc_edns_prefer_client_subnet method values of the member are used, instead of the Grid default.
.Sp
The override_dtc_edns_prefer_client_subnet attribute can be specified explicitly. It is also set implicitly when dtc_edns_prefer_client_subnet is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for dtc_edns_prefer_client_subnet. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for dtc_edns_prefer_client_subnet. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_dtc_edns_prefer_client_subnet
\& my $override_dtc_edns_prefer_client_subnet = $memberdns\->override_dtc_edns_prefer_client_subnet();
\& #Modify override_dtc_edns_prefer_client_subnet
\& $memberdns\->override_dtc_edns_prefer_client_subnet("true");
.Ve
.RE
.RS 4
.RE
.SS "override_forwarders( )"
.IX Subsection "override_forwarders( )"
.RS 4
The \*(L"override_forwarders\*(R" attribute controls whether the \*(L"forward_only\*(R" and \*(L"forwarders\*(R" values in the database are used.
.Sp
The \*(L"override_forwarders\*(R" attribute can be specified explicitly. It is also set implicitly as follows: \*(L"forward_only\*(R" => \*(L"true\*(R"|\*(L"false\*(R" or \*(L"forwarders\*(R" => [\*(L"10.0.0.10\*(R", \*(L"10.0.0.20\*(R"]|[] results in \*(L"override_forwarders\*(R" => \*(L"true\*(R"; \*(L"forward_only\*(R" => undef and \*(L"forwarders\*(R" => undef result in \*(L"override_forwarders\*(R" => \*(L"false\*(R". If \*(L"override_forwarders\*(R" is specified explicitly as \*(L"true\*(R", and \*(L"forward_only\*(R" => undef or \*(L"forwarders\*(R" => undef, then the explicit value takes precedence. Therefore, \*(L"override_forwarders\*(R"=>\*(L"true\*(R", \*(L"forward_only\*(R"=>undef, and \*(L"forwarders\*(R"=>undef remain unchanged in the database.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level settings of the forwarders attributes. Set the parameter to \*(L"false\*(R" to inherit the grid-level settings. The default is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get override_forwarders
\&   my $override_forwarders=$memberdns\->override_forwarders( );
\&   #Modify override_forwarders
\&   $memberdns\->override_forwarders("true");
.Ve
.RE
.RS 4
.RE
.SS "override_fixed_rrset_order_fqdns( )"
.IX Subsection "override_fixed_rrset_order_fqdns( )"
.RS 4
The override_fixed_rrset_order_fqdns controls whether the enable_fixed_rrset_order_fqdns and fixed_rrset_order_fqdns values in the database are used. Note that these values can be overridden at the \s-1DNS\s0 View level as well.
.Sp
The override_fixed_rrset_order_fqdns can be specified explicitly. It is also set implicitly as follows: enable_fixed_rrset_order_fqdns => \*(L"true\*(R" | \*(L"false\*(R" or fixed_rrset_order_fqdns => \f(CW$fqdns\fR results in override_fixed_rrset_order_fqdns => \*(L"true\*(R";
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level fixed RRset order settings. Set the parameter to \*(L"false\*(R" to inherit the Grid-level settings. The default is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
When you specify a parameter and the modification succeeds, the method returns \*(L"true\*(R". When the operation fails, the method returns \*(L"false\*(R".
.Sp
When you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_fixed_rrset_order_fqdns flag
\& my $override_fixed_rrset_order_fqdns = $member_dns\->override_fixed_rrset_order_fqdns();
\& #Modify override_fixed_rrset_order_fqdns flag
\& $member_dns\->override_fixed_rrset_order_fqdns("true");
.Ve
.RE
.RS 4
.RE
.SS "query_source_port( )"
.IX Subsection "query_source_port( )"
.RS 4
Use this method to specify the source port for queries.
Specifying a source port number for recursive queries ensures that a firewall will allow the response.
This setting overrides grid static source port settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Source port number for queries. Valid values are between 1 and 63999. The default is picked by \s-1BIND.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting query_source_port
\&    $memberdns\->query_source_port( );
\&    #Modifying notify_source_port
\&    $memberdns\->query_source_port("2");
.Ve
.RE
.RS 4
.RE
.SS "recursive_client_limit( )"
.IX Subsection "recursive_client_limit( )"
.RS 4
Use this method to set  a limit on the number of concurrent recursive clients.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Maximum number of concurrent recursive clients. Range is from 0 to 4294967295
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting recursive_client_limit
\&   $memberdns\->recursive_client_limit( );
\&   #Modifying recursive_client_limit
\&   $memberdns\->recursive_client_limit("10");
.Ve
.RE
.RS 4
.RE
.SS "recursive_query_list( )"
.IX Subsection "recursive_query_list( )"
.RS 4
Use this method to set or retrieve the list of IPv4 or IPv6 addresses, networks or hosts authenticated by Transaction signature (\s-1TSIG\s0) key from which recursive queries are allowed or denied. This setting overrides grid recursive query list settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::NamedACL object or an array reference that contains IPv4/IPv6 addresses, networks and/or Infoblox::DNS::TSIGKey objects. To deny queries, add '!' as a  prefix to \s-1IP\s0 addresses and networks. Specify \*(L"any\*(R" to allow any recursive query, or undefine to use the Grid::DNS level recursive_query_list list. Note: You should also undefine the allow_recursive_query list to use Grid::DNS level settings.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting recursive_query_list
\&    $memberdns\->recursive_query_list( );
\&    #Modifying recursive_query_list
\&    $memberdns\->recursive_query_list(["any"]);
\&
\&    #Creating TSIG key object
\&    my $tsig_key2 = $session\->gen_tsig_key();
\&    my $key2 = Infoblox::DNS::TSIGKey\->new(
\&       name => "rcl_key",
\&       key  => $tsig_key2
\&    );
\&    #Modifying recursive_query_list
\&    $memberdns\->recursive_query_list(["10.0.0.10", $key2, "20.0.0.0/24","2010::256/64","!"."2011::23cb/64","!"."30.0.0.30", "!"."40.10.0.0/24"]);
\&
\&    #Use Grid::DNS level recursive_query_list
\&    $memberdns\->recursive_query_list(undef);
\&    $memberdns\->allow_recursive_query(undef);
\&
\&    #Use Infoblox::Grid::NamedACL
\&    $memberdns\->recursive_query_list($nacl);
.Ve
.RE
.RS 4
.RE
.SS "resolver_query_timeout( )"
.IX Subsection "resolver_query_timeout( )"
.RS 4
Use this method to set or retrieve recursive query timeout for the member.
.Sp
Setting this method to a defined value implicitly sets the override_resolver_query_timeout method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid \s-1DNS\s0 default and automatically resets the override_resolver_query_timeout method to \*(L"false\*(R".
.Sp
Note that when resolver_query_timeout is set to a defined value and override_resolver_query_timeout is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->resolver_query_timeout(29); \f(CW$object\fR\->override_resolver_query_timeout(\*(L"false\*(R"); will set override_resolver_query_timeout to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_resolver_query_timeout(\*(L"false\*(R"); \f(CW$object\fR\->resolver_query_timeout(29); will result in override_resolver_query_timeout=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer that contains the recursive query time (in seconds) for the resolver.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get resolver_query_timeout
\& my $resolver_query_timeout = $memberdns\->resolver_query_timeout();
\& #Modify resolver_query_timeout
\& $memberdns\->resolver_query_timeout(29);
.Ve
.RE
.RS 4
.RE
.SS "response_rate_limiting( )"
.IX Subsection "response_rate_limiting( )"
.RS 4
Use this method to set or retrieve response rate limiting settings for the member.
.Sp
Setting this method to a defined value implicitly sets the override_response_rate_limiting method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid \s-1DNS\s0 default and automatically resets the override_response_rate_limiting method to \*(L"false\*(R".
.Sp
Note that when response_rate_limiting is set to a defined value and override_response_rate_limiting is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->response_rate_limiting($response_rate_limiting); \f(CW$object\fR\->override_response_rate_limiting(\*(L"false\*(R"); will set override_response_rate_limiting to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_response_rate_limiting(\*(L"false\*(R"); \f(CW$object\fR\->response_rate_limiting($response_rate_limiting); will result in override_response_rate_limiting=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::Grid::DNS::ResponseRateLimiting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get response_rate_limiting
\& my $response_rate_limiting = $memberdns\->response_rate_limiting();
\& #Modify response_rate_limiting
\& $memberdns\->response_rate_limiting($response_rate_limiting);
.Ve
.RE
.RS 4
.RE
.SS "recursive_resolver( )"
.IX Subsection "recursive_resolver( )"
.RS 4
Use this method to set or retrieve the recursive resolver for Member \s-1DNS.\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is '\s-1BIND\s0' or '\s-1UNBOUND\s0'. The default value is '\s-1BIND\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get recursive_resolver
\& my $recursive_resolver = $memberdns\->recursive_resolver();
\&
\& #Modify recursive_resolver
\& $memberdns\->recursive_resolver(\*(AqUNBOUND\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "serial_query_rate( )"
.IX Subsection "serial_query_rate( )"
.RS 4
Use this method to set or retrieve the number of maximum concurrent \s-1SOA\s0 queries per second for the Member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integer between 20 and 1000, inclusive. Default value is 20.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $memberdns\->serial_query_rate();
\& # Modify attribute value
\& $memberdns\->serial_query_rate(30);
.Ve
.RE
.RS 4
.RE
.SS "server_id_directive( )"
.IX Subsection "server_id_directive( )"
.RS 4
Use this method to set or retrieve the value for the \s-1BIND\s0 and \s-1UNBOUND\s0 'server\-id' directive.
.Sp
Setting this method to a defined value implicitly sets the override_server_id_directive method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Grid \s-1DNS\s0 default and automatically resets the override_server_id_directive method to \*(L"false\*(R".
.Sp
Note that when server_id_directive is set to a defined value and override_server_id_directive is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->server_id_directive(\*(L"\s-1HOSTNAME\*(R"\s0); \f(CW$object\fR\->override_server_id_directive(\*(L"false\*(R"); will set override_server_id_directive to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_server_id_directive(\*(L"false\*(R"); \f(CW$object\fR\->server_id_directive(\*(L"true\*(R"); will result in override_server_id_directive=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid values are \*(L"\s-1NONE\*(R", \*(L"HOSTNAME\*(R"\s0 and \*(L"\s-1USER_DEFINED\*(R".\s0 The default value is \*(L"\s-1NONE\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get server_id_directive
\&   my $server_id_directive = $memberdns\->server_id_directive();
\&   #Modify server_id_directive
\&   $memberdns\->server_id_directive("HOSTNAME");
.Ve
.RE
.RS 4
.RE
.SS "server_id_directive_string( )"
.IX Subsection "server_id_directive_string( )"
.RS 4
Use this method to set or retrieve the value for the \s-1BIND\s0 and \s-1UNBOUND\s0 user-defined server \s-1ID\s0 for 'server\-id' directive.
.Sp
Note that to enable user-defined 'server\-id' the server_id_directive should be set to \*(L"\s-1USER_DEFINED\*(R".\s0
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired server \s-1ID\s0 in a string format. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Get server_id_directive_string
\&   my $server_id_directive_string = $memberdns\->server_id_directive_string();
\&   #Modify server_id_directive_string
\&   $memberdns\->server_id_directive_string("test\-server\-id\-1");
.Ve
.RE
.RS 4
.RE
.SS "skip_in_grid_rpz_queries( )"
.IX Subsection "skip_in_grid_rpz_queries( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the \s-1RPZ\s0 rules are applied to queries originating from this
member received by other members of the Grid or not.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to allow other members to recieve \s-1RPZ\s0 queries by other members and 'false' to forbid it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get skip_in_grid_rpz_queries value
\& my $value = $object\->skip_in_grid_rpz_queries();
\&
\& #Modify skip_in_grid_rpz_queries value
\& $memberdns\->skip_in_grid_rpz_queries(\*(Aqfalse\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "sortlist( )"
.IX Subsection "sortlist( )"
.RS 4
Use this method to create a  sort list.
.Sp
A  sort list determines the order of addresses in responses made to \s-1DNS\s0 queries. This setting overrides grid  sort list settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains Infoblox::DNS::Sortlist object(s).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\&   my $sort1 = Infoblox::DNS::Sortlist\->new (
\&                           "source_ipv4addr" => "1.2.3.4",
\&                           "match_list"      => [ "10.20.1.0/24" , "10.20.2.0/24"]
\&                );
\&   $memberdns_object\->sortlist( [ $sort1 ] );
.Ve
.RE
.RS 4
.RE
.SS "store_locally( )"
.IX Subsection "store_locally( )"
.RS 4
Use this method to set or retrieve the flag that indicates whether the storing of query capture reports on the appliance is enabled or disabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable storing of query capture reports on the appliance or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get store_locally value
\& my $store_locally = $object\->store_locally();
\&
\& #Modify store_locally value
\& $object\->store_locally(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "transfer_excluded_servers( )"
.IX Subsection "transfer_excluded_servers( )"
.RS 4
Use this method to exclude specified \s-1DNS\s0 servers during zone transfers.
This setting overrides grid zone transfer settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains \s-1IP\s0 addresses of the \s-1DNS\s0  server.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\&   #This means that it will set zone transfer format to Many answers except these servers.
\&   $memberdns\->transfer_format("many_answers");
\&   $memberdns\->transfer_excluded_servers(["10.0.0.10", "20.0.0.0"]);
.Ve
.RE
.RS 4
.RE
.SS "transfer_format( )"
.IX Subsection "transfer_format( )"
.RS 4
Use this method to set or retrieve the \s-1BIND\s0 format for a zone transfer. This provides tracking capabilities for single or multiple transfers and their associated servers.
This setting overrides grid zone transfer format settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is one of the following values:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`"Many Answers" (Secondaries run BIND 8/9)\*(C'\fR: includes as many records as the packet size allows.
.Sp
\&\f(CW\*(C`"Many Answers" Except for these servers\*(C'\fR: includes as many records as the packet size allows.
.Sp
\&\f(CW\*(C`"One Answer" (Secondaries run BIND 4)\*(C'\fR: includes one record per packet.
.Sp
\&\f(CW\*(C`"One Answer" Except for these servers\*(C'\fR: includes one record per packet.
.Sp
If you specified servers in the transfer_excluded_servers method, the Many Answers or One Answer zone format (depending on transfer_format method setting) will allow zone transfers, except from the specified servers.
.RE
.RS 4
.RE
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting transfer_format
\&    $memberdns\->transfer_format( );
\&    #Modifying transfer_format
\&    $memberdns\->transfer_format("many_answers");
.Ve
.RE
.RS 4
.RE
.SS "transfers_in( )"
.IX Subsection "transfers_in( )"
.RS 4
Use this method to set or retrieve the number of maximum concurrent transfers for the Member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integer between 10 and 100, inclusive. Default value is 10.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $memberdns\->transfers_in();
\& # Modify attribute value
\& $memberdns\->transfers_in(20);
.Ve
.RE
.RS 4
.RE
.SS "transfers_out( )"
.IX Subsection "transfers_out( )"
.RS 4
Use this method to set or retrieve the number of maximum outbound concurrent zone transfers for the member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integers between 1 and 100, inclusive. The default value is 10.
.Sp
Specifying value in this parameter sets the override_transfers_out attribute to \*(L"true\*(R". Setting this parameter attribute to undefined causes a member to use the grid-level transfers_out value and automatically sets the override_transfers_out attribute to \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $memberdns\->transfers_out();
\& # Modify attribute value
\& $memberdns\->transfers_out(20);
.Ve
.RE
.RS 4
.RE
.SS "transfers_per_ns( )"
.IX Subsection "transfers_per_ns( )"
.RS 4
Use this method to set or retrieve the number of maximum concurrent transfers per member for the Member.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are unsigned integer between 2 and 100, inclusive. Default value is 2.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $memberdns\->transfers_per_ns();
\& # Modify attribute value
\& $memberdns\->transfers_per_ns(3);
.Ve
.RE
.RS 4
.RE
.SS "unbound_logging_level( )"
.IX Subsection "unbound_logging_level( )"
.RS 4
Use this method to set or retrieve the logging level for the unbound recursive resolver.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is '\s-1ERRORS_ONLY\s0', '\s-1OPERATIONS\s0', '\s-1DETAILED_OPERATIONS\s0', '\s-1QUERY\s0', '\s-1ALGORITHM\s0' or '\s-1CACHE_MISSES\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get unbound_logging_level 
\& my $unbound_logging_level = $memberdns\->unbound_logging_level();
\&
\& #Modify unbound_logging_level
\& $memberdns\->unbound_logging_level(\*(AqALGORITHM\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "use_lan_ipv6_port( )"
.IX Subsection "use_lan_ipv6_port( )"
.RS 4
Use this method to enable/disable \s-1DNS\s0 service on the IPv6 \s-1LAN\s0 port.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable \s-1DNS\s0 service on the IPv6 \s-1LAN\s0 port or \*(L"false\*(R" to disable it. Default is \*(L"false\*(R"
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting use_lan_ipv6_port
\&   $memberdns\->use_lan_ipv6_port( );
\&   #Modifying use_lan_ipv6_port
\&   $memberdns\->use_lan_ipv6_port("true");
.Ve
.RE
.RS 4
.RE
.SS "use_lan2_port( )"
.IX Subsection "use_lan2_port( )"
.RS 4
Use this method to enable/disable \s-1DNS\s0 service on the \s-1LAN2\s0 port.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable \s-1DNS\s0 service on the \s-1LAN2\s0 port or \*(L"false\*(R" to disable it. Default is \*(L"false\*(R"
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting use_lan2_port
\&   $memberdns\->use_lan2_port( );
\&   #Modifying use_lan2_port
\&   $memberdns\->use_lan2_port("true");
.Ve
.RE
.RS 4
.RE
.SS "use_lan2_ipv6_port( )"
.IX Subsection "use_lan2_ipv6_port( )"
.RS 4
Use this method to enable/disable \s-1DNS\s0 service on the IPv6 \s-1LAN2\s0 port.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable \s-1DNS\s0 service on the IPv6 \s-1LAN2\s0 port or \*(L"false\*(R" to disable it. Default is \*(L"false\*(R"
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting use_lan2_ipv6_port
\&   $memberdns\->use_lan2_ipv6_port( );
\&   #Modifying use_lan2_ipv6_port
\&   $memberdns\->use_lan2_ipv6_port("true");
.Ve
.RE
.RS 4
.RE
.SS "use_mgmt_port( )"
.IX Subsection "use_mgmt_port( )"
.RS 4
Use this method to enable/disable \s-1DNS\s0 services on the \s-1MGMT\s0 port.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable \s-1DNS\s0 services on the \s-1MGMT\s0 port or \*(L"false\*(R" to disable it. Default is \*(L"false\*(R"
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting use_mgmt_port
\&   $memberdns\->use_mgmt_port( );
\&   #Modifying enable_dns
\&   $memberdns\->use_mgmt_port("true");
.Ve
.RE
.RS 4
.RE
.SS "use_mgmt_ipv6_port( )"
.IX Subsection "use_mgmt_ipv6_port( )"
.RS 4
Use this method to enable/disable \s-1DNS\s0 services on the IPv6 \s-1MGMT\s0 port.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable \s-1DNS\s0 services on the IPv6 \s-1MGMT\s0 port or \*(L"false\*(R" to disable it. Default is \*(L"false\*(R"
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting use_mgmt_ipv6_port
\&   $memberdns\->use_mgmt_ipv6_port( );
\&   #Modifying enable_dns
\&   $memberdns\->use_mgmt_ipv6_port("true");
.Ve
.RE
.RS 4
.RE
.SS "use_root_name_servers( )"
.IX Subsection "use_root_name_servers( )"
.RS 4
Use this method to enable/disable custom or Internet root name servers. This setting overrides the grid root name server settings. Specify \*(L"False\*(R" to indicate that the member overrides the grid root server setting and uses Internet root name servers. Specify \*(L"True\*(R" to indicate that the member overrides the grid root server setting and uses custom root name servers. Specify \*(L"undef\*(R" to indicate that the member does not override the grid root server settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to allow custom root name servers. Specify \*(L"false\*(R" to use Internet root name servers. Set it to undef to use the grid root name server settings.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specify a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you do not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&   #Get use_root_name_servers
\&   my $useRootNS = $memberdns\->use_root_name_servers( );
\&   #Modify use_root_name_servers
\&   $memberdns\->use_root_name_servers("false");
\&   #Use grid root server settings
\&   $memberdns\->use_root_name_servers(undef);
.Ve
.RE
.RS 4
.RE
.SS "rpz_disable_nsdname_nsip( )"
.IX Subsection "rpz_disable_nsdname_nsip( )"
.RS 4
Use this method to disable \s-1NSDNAME\s0 and \s-1NSIP\s0 resource records from \s-1RPZ\s0 feeds at member level.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the filter (to filter out \s-1NSDNAME\s0 and \s-1NSIP\s0 resource records). Specify \*(L"false\*(R" to disable the filter. The default value is \*(L"false\*(R".
.Sp
Note that if both rpz_disable_nsdname_nsip and override_rpz_disable_nsdname_nsip are set to some value, the last operation takes precedence.
Thus the sequence
    \f(CW$grid_member\fR\->rpz_disable_nsdname_nsip(\*(L"true\*(R");
    \f(CW$grid_member\fR\->override_rpz_disable_nsdname_nsip(\*(L"false\*(R");
results in inheriting rpz_disable_nsdname_nsip value from the Grid.
And the sequence
    \f(CW$grid_member\fR\->override_rpz_disable_nsdname_nsip(\*(L"false\*(R");
    \f(CW$grid_member\fR\->rpz_disable_nsdname_nsip(\*(L"true\*(R");
sets override_rpz_disable_nsdname_nsip to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&   #Getting rpz_disable_nsdname_nsip
\&   $my $rpz_filter = $memberdns\->rpz_disable_nsdname_nsip( );
\&   #Modifying rpz_disable_nsdname_nsip
\&   $memberdns\->rpz_disable_nsdname_nsip("true");
.Ve
.RE
.RS 4
.RE
.SS "rpz_drop_ip_rule_enabled( )"
.IX Subsection "rpz_drop_ip_rule_enabled( )"
.RS 4
Use this method to set or retreive the flag that indicates whether the \s-1DNS\s0 server ignores RPZ-IP triggers with large prefix lengths or not.
.Sp
Setting this method to a defined value implicitly sets the override_rpz_drop_ip_rule method to \*(L"true\*(R". Setting the parameter to undefined if rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 are undefined causes the appliance to use the Grid default and automatically resets the override_rpz_drop_ip_rule attribute to \*(L"false\*(R".
.Sp
Note that when rpz_drop_ip_rule_enabled is set to a defined value and override_rpz_drop_ip_rule is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->rpz_drop_ip_rule_enabled(\*(L"true\*(R"); \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); will set override_rpz_drop_ip_rule to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); \f(CW$object\fR\->rpz_drop_ip_rule_enabled(\*(L"true\*(R"); will result in override_rpz_drop_ip_rule=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to enable ignoring of RPZ-IP triggers with large prefix lengths or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $memberdns\->rpz_drop_ip_rule_enabled();
\& # Modify attribute value
\& $memberdns\->rpz_drop_ip_rule_enabled("true");
.Ve
.RE
.RS 4
.RE
.SS "rpz_drop_ip_rule_min_prefix_length_ipv4( )"
.IX Subsection "rpz_drop_ip_rule_min_prefix_length_ipv4( )"
.RS 4
Use this method to set or retreive minimum prefix length for IPv4 RPZ-IP triggers.
.Sp
Setting this method to a defined value implicitly sets the override_rpz_drop_ip_rule method to \*(L"true\*(R". Setting the parameter to undefined if rpz_drop_ip_rule_enabled and rpz_drop_ip_rule_min_prefix_length_ipv6 are undefined causes the appliance to use the Grid default and automatically resets the override_rpz_drop_ip_rule attribute to \*(L"false\*(R".
.Sp
Note that when rpz_drop_ip_rule_min_prefix_length_ipv4 is set to a defined value and override_rpz_drop_ip_rule is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->rpz_drop_ip_rule_min_prefix_length_ipv4(\*(L"20\*(R"); \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); will set override_rpz_drop_ip_rule to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); \f(CW$object\fR\->rpz_drop_ip_rule_min_prefix_length_ipv4(\*(L"20\*(R"); will result in override_rpz_drop_ip_rule=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 31 that represents prefix length (in bits) for IPv4 RPZ-IP triggers.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $member_dns\->rpz_drop_ip_rule_min_prefix_length_ipv4();
\& # Modify attribute value
\& $member_dns\->rpz_drop_ip_rule_min_prefix_length_ipv4("16");
.Ve
.RE
.RS 4
.RE
.SS "rpz_drop_ip_rule_min_prefix_length_ipv6( )"
.IX Subsection "rpz_drop_ip_rule_min_prefix_length_ipv6( )"
.RS 4
Use this method to set or retreive minimum prefix length for IPv6 RPZ-IP triggers.
.Sp
Setting this method to a defined value implicitly sets the override_rpz_drop_ip_rule method to \*(L"true\*(R". Setting the parameter to undefined if rpz_drop_ip_rule_enabled and rpz_drop_ip_rule_min_prefix_length_ipv4 are undefined causes the appliance to use the Grid default and automatically resets the override_rpz_drop_ip_rule attribute to \*(L"false\*(R".
.Sp
Note that when rpz_drop_ip_rule_min_prefix_length_ipv6 is set to a defined value and override_rpz_drop_ip_rule is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->rpz_drop_ip_rule_min_prefix_length_ipv6(\*(L"20\*(R"); \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); will set override_rpz_drop_ip_rule to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_rpz_drop_ip_rule(\*(L"false\*(R"); \f(CW$object\fR\->rpz_drop_ip_rule_min_prefix_length_ipv6(\*(L"20\*(R"); will result in override_rpz_drop_ip_rule=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an unsigned integer between 1 and 127 that represents prefix length (in bits) for IPv6 RPZ-IP triggers.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $member_dns\->rpz_drop_ip_rule_min_prefix_length_ipv6();
\& # Modify attribute value
\& $member_dns\->rpz_drop_ip_rule_min_prefix_length_ipv6("120");
.Ve
.RE
.RS 4
.RE
.SS "rpz_qname_wait_recurse( )"
.IX Subsection "rpz_qname_wait_recurse( )"
.RS 4
Use this method to enable or disable recursive \s-1RPZ\s0 lookups.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable recursive \s-1RPZ\s0 lookups or \*(L"false\*(R" to disable them. The default value is \*(L"false\*(R".
.Sp
Note that if both rpz_qname_wait_recurse and override_rpz_qname_wait_recurse are set to some values, the last operation takes precedence. Thus the sequence \f(CW$grid_member\fR\->rpz_qname_wait_recurse(\*(L"true\*(R"); \f(CW$grid_member\fR\->override_rpz_qname_wait_recurse(\*(L"false\*(R"); results in inheriting rpz_qname_wait_recurse value from the Grid. And the sequence \f(CW$grid_member\fR\->override_rpz_qname_wait_recurse(\*(L"false\*(R"); \f(CW$grid_member\fR\->rpz_qname_wait_recurse(\*(L"true\*(R"); sets override_rpz_qname_wait_recurse to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $grid_member\->rpz_qname_wait_recurse();
\& # Modify attribute value
\& $grid_member\->rpz_qname_wait_recurse("true");
.Ve
.RE
.RS 4
.RE
.SS "override_resolver_query_timeout( )"
.IX Subsection "override_resolver_query_timeout( )"
.RS 4
The override_resolver_query_timeout attribute controls whether the resolver_query_timeout method values of the member are used, instead of the Grid default.
.Sp
The override_resolver_query_timeout attribute can be specified explicitly. It is also set implicitly when resolver_query_timeout is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for resolver_query_timeout. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for resolver_query_timeout.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_resolver_query_timeout
\&    my $override_resolver_query_timeout = $memberdns\->override_resolver_query_timeout( );
\&    #Modifying override_resolver_query_timeout
\&    $memberdns\->override_resolver_query_timeout("true");
.Ve
.RE
.RS 4
.RE
.SS "override_response_rate_limiting( )"
.IX Subsection "override_response_rate_limiting( )"
.RS 4
The override_response_rate_limiting attribute controls whether the response_rate_limiting method values of the member are used, instead of the Grid default.
.Sp
The override_response_rate_limiting attribute can be specified explicitly. It is also set implicitly when response_rate_limiting is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for response_rate_limiting. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for response_rate_limiting.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_response_rate_limiting
\&    my $override_response_rate_limiting = $memberdns\->override_response_rate_limiting( );
\&    #Modifying override_response_rate_limiting
\&    $memberdns\->override_response_rate_limiting("true");
.Ve
.RE
.RS 4
.RE
.SS "override_rpz_disable_nsdname_nsip( )"
.IX Subsection "override_rpz_disable_nsdname_nsip( )"
.RS 4
The override_rpz_disable_nsdname_nsip attribute controls whether the rpz_disable_nsdname_nsip method value for the member is used, instead of the Grid default.
.Sp
The \*(L"override_rpz_disable_nsdname_nsip\*(R" attribute can be specified explicitly. It is also established implicitly as follows:
    \*(L"rpz_disable_nsdname_nsip\*(R" => \*(L"true\*(R"|\*(L"false\*(R"
        results in \*(L"override_rpz_disable_nsdname_nsip\*(R" => \*(L"true\*(R"
    \*(L"rpz_disable_nsdname_nsip\*(R" => undef
        results in \*(L"override_rpz_disable_nsdname_nsip\*(R" => \*(L"false\*(R"
If \*(L"override_rpz_disable_nsdname_nsip\*(R" is specified explicitly as \*(L"true\*(R", while \*(L"rpz_disable_nsdname_nsip\*(R"=>undef, the explicit value takes precedence, and \*(L"override_rpz_disable_nsdname_nsip\*(R"=>\*(L"true\*(R" while \*(L"rpz_disable_nsdname_nsip\*(R"
remains unchanged in the database.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for rpz_disable_nsdname_nsip. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for rpz_disable_nsdname_nsip value.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_rpz_disable_nsdname_nsip
\& my $override_rpz_filter = $memberdns\->override_rpz_disable_nsdname_nsip();
\& #Modyfying override_rpz_disable_nsdname_nsip
\& $memberdns\->override_disable_nsdname_nsip("true");
.Ve
.RE
.RS 4
.RE
.SS "override_rpz_drop_ip_rule( )"
.IX Subsection "override_rpz_drop_ip_rule( )"
.RS 4
The override_rpz_drop_ip_rule attribute controls whether the rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 method values of the member are used, instead of the Grid default.
.Sp
The override_rpz_drop_ip_rule attribute can be specified explicitly. It is also set implicitly when one of rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 or rpz_drop_ip_rule_min_prefix_length_ipv6 methods is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 methods. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for rpz_drop_ip_rule_enabled, rpz_drop_ip_rule_min_prefix_length_ipv4 and rpz_drop_ip_rule_min_prefix_length_ipv6 methods.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_rpz_drop_ip_rule
\&    my $override_rpz_drop_ip_rule = $memberdns\->override_rpz_drop_ip_rule( );
\&    #Modifying override_rpz_drop_ip_rule
\&    $memberdns\->override_rpz_drop_ip_rule("true");
.Ve
.RE
.RS 4
.RE
.SS "use_lan_port( )"
.IX Subsection "use_lan_port( )"
.RS 4
Use this method to set or retrieve the status of the use of \s-1DNS\s0 services on the IPv4 \s-1LAN1\s0 port.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify true to enable \s-1DNS\s0 services on the IPv4 \s-1LAN1\s0 port of false to disable it.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting use_lan_port
\& my $use_lan_port = $memberdns\->use_lan_port();
\& #Modyfying use_lan_port
\& $memberdns\->use_lan_port("true");
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to specify or retrieve the view of this member.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
The default value is the \*(L"default\*(R" view, which means the \s-1DNS\s0 member object is located under the default view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains the names of the \s-1DNS\s0 views associated with the member. The names must be in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Get views
\&  my $ref_views = $object\->views();
\&  #Modify DNS views, list of DNS view names in string format
\&  $object\->views(["view1","view2","view3"]);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object,such as modify and get. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to member \s-1DNS\s0  object operations\fR
.PP
.Vb 1
\& #PROGRAM STARTS: Include all the modules that will be used
\&
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& # Get and modify the member DNS property object. Considering the id grid member named infoblox.localdomain was previously created.
\& my $object = $session\->get(
\&     object => "Infoblox::Grid::Member::DNS",
\&     name   => "infoblox.localdomain"
\& );
\&
\&  unless ($object) {
\&       die("get member DNS failed: ",
\&       $session\->status_code() . ":" . $session\->status_detail());
\& }
\&  print "member DNS get  successfull\en";
\&
\& #Modifying the value of the specified object
\& $object\->enable_dns("true");
\& $object\->forward_only("false");
\& $object\->minimal_resp("true");
\& $object\->use_mgmt_port("true");
\& $object\->notify_source_port(53);
\& $object\->query_source_port(53);
\&
\&  #Apply the changes
\&  $session\->modify($object)
\&   or die("modify member DNS failed: ",
\&       $session\->status_code() . ":" . $session\->status_detail());
\&
\& print "DNS member object modified successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DNS::View, 
Infoblox::Session, 
Infoblox::Grid::Member::DNS, 
Infoblox::DNS::DnssecTrustedKey, 
Infoblox::DNS::Ruleset, 
Infoblox::Session\->\fBget()\fR, 
Infoblox::Session\->\fBmodify()\fR, 
Infoblox::Grid::NamedACL, 
Infoblox::Grid::DNS::AutoBlackHole, 
Infoblox::Grid::DNS::AttackMitigation, 
Infoblox::Grid::DNS::ResponseRateLimiting, 
Infoblox::Grid::Member::DNS::ViewAddressSetting,
Infoblox::Grid::DNS::FileTransferSetting
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
