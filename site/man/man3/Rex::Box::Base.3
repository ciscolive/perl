.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Rex::Box::Base 3"
.TH Rex::Box::Base 3 "2020-10-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rex::Box::Base \- Rex/Boxes Base Module
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a Rex/Boxes base module.
.SH "METHODS"
.IX Header "METHODS"
These methods are shared across all other Rex::Box modules.
.SS "info"
.IX Subsection "info"
Returns a hashRef of vm information.
.SS "name($vmname)"
.IX Subsection "name($vmname)"
Sets the name of the virtual machine.
.SS "setup(@tasks)"
.IX Subsection "setup(@tasks)"
Sets the tasks that should be executed as soon as the \s-1VM\s0 is available through \s-1SSH.\s0
.SS "storage('path/to/vm/disk')"
.IX Subsection "storage('path/to/vm/disk')"
Sets the disk path of the virtual machine. Works only on \s-1KVM\s0
.SS "\fBimport_vm()\fP"
.IX Subsection "import_vm()"
This method must be overwritten by the implementing class.
.SS "\fBstop()\fP"
.IX Subsection "stop()"
Stops the \s-1VM.\s0
.SS "\fBdestroy()\fP"
.IX Subsection "destroy()"
Destroy the \s-1VM.\s0
.SS "\fBstart()\fP"
.IX Subsection "start()"
Starts the \s-1VM.\s0
.SS "\fBip()\fP"
.IX Subsection "ip()"
Return the ip:port to which rex will connect to.
.SS "\fBstatus()\fP"
.IX Subsection "status()"
Returns the status of a \s-1VM.\s0
.PP
Valid return values are \*(L"running\*(R" and \*(L"stopped\*(R".
.SS "provision_vm([@tasks])"
.IX Subsection "provision_vm([@tasks])"
Executes the given tasks on the \s-1VM.\s0
.SS "cpus($count)"
.IX Subsection "cpus($count)"
Set the amount of CPUs for the \s-1VM.\s0
.SS "memory($memory_size)"
.IX Subsection "memory($memory_size)"
Sets the memory of a \s-1VM\s0 in megabyte.
.SS "network(%option)"
.IX Subsection "network(%option)"
Configure the network for a \s-1VM.\s0
.PP
Currently it supports 2 modes: \fInat\fR and \fIbridged\fR. Currently it supports only one network card.
.PP
.Vb 5
\& $box\->network(
\&   1 => {
\&     type => "nat",
\&   },
\& }
\& 
\& $box\->network(
\&   1 => {
\&     type => "bridged",
\&     bridge => "eth0",
\&   },
\& );
.Ve
.SS "forward_port(%option)"
.IX Subsection "forward_port(%option)"
Set ports to be forwarded to the \s-1VM.\s0 This is not supported by all Box providers.
.PP
.Vb 5
\& $box\->forward_port(
\&   name => [$from_host_port, $to_vm_port],
\&   name2 => [$from_host_port_2, $to_vm_port_2],
\&   ...
\& );
.Ve
.SS "list_boxes"
.IX Subsection "list_boxes"
List all available boxes.
.SS "url($url)"
.IX Subsection "url($url)"
The \s-1URL\s0 where to download the Base \s-1VM\s0 Image. You can use self-made images or prebuild images from http://box.rexify.org/.
.SS "auth(%option)"
.IX Subsection "auth(%option)"
Configure the authentication to the \s-1VM.\s0
.PP
.Vb 6
\& $box\->auth(
\&   user => $user,
\&   password => $password,
\&   private_key => $private_key,
\&   public_key => $public_key,
\& );
.Ve
.SS "options(%option)"
.IX Subsection "options(%option)"
Addition options for boxes
.PP
.Vb 4
\& $box\->options(
\&   opt1 => $val1,
\&   opt2 => $val2,
\& );
.Ve
