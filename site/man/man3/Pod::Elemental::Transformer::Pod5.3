.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Pod::Elemental::Transformer::Pod5 3"
.TH Pod::Elemental::Transformer::Pod5 3 "2020-01-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Elemental::Transformer::Pod5 \- the default, minimal semantics of Perl5's pod element hierarchy
.SH "VERSION"
.IX Header "VERSION"
version 0.103005
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  Pod::Elemental::Transformer::Pod5\->new\->transform_node($pod_elem_document);
.Ve
.PP
\&...and that's it.
.SH "OVERVIEW"
.IX Header "OVERVIEW"
The Pod5 transformer is meant to be used to convert the result of a \*(L"stock\*(R"
Pod::Elemental::Document into something simpler to work with.  It assumes that
the document conforms more or less to the convetions laid out in perlpod and
perlpodspec.  It is not very strict, and makes very few assumptions,
described here:
.IP "\(bu" 4
=begin/=end and =for enclose or produce regions within the document
.IP "\(bu" 4
regions are associated with format names; format names that begin with a colon enclose more pod-like content
.IP "\(bu" 4
regions nest strictly; all inner regions must end before outer regions
.IP "\(bu" 4
paragraphs in non-pod regions are \*(L"data\*(R" paragraphs
.IP "\(bu" 4
non-data paragraphs that start with spaces are \*(L"verbatim\*(R" paragraphs
.IP "\(bu" 4
groups of data or verbatim paragraphs can be consolidated
.PP
Further, all elements are replaced with equivalent elements that perform the
Pod::Elemental::Autoblank role, so all \*(L"blank\*(R" events can be removed form
the tree and ignored.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
None.  For now, it just does the same thing every time with no configuration or
options.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
