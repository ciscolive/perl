.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::Auto::Subtests 3"
.TH Test::Auto::Subtests 3 "2020-05-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Auto::Subtests
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Testing Automation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package main;
\&
\&  use Test::Auto;
\&  use Test::Auto::Parser;
\&  use Test::Auto::Subtests;
\&
\&  my $test = Test::Auto\->new(
\&    \*(Aqt/Test_Auto_Subtests.t\*(Aq
\&  );
\&
\&  my $parser = Test::Auto::Parser\->new(
\&    source => $test
\&  );
\&
\&  my $subtests = Test::Auto::Subtests\->new(
\&    parser => $parser
\&  );
\&
\&  # execute dynamic subtests
\&
\&  # $subtests\->standard
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package use the Test::Auto::Parser object to execute a set of dynamic
subtests.
.SH "LIBRARIES"
.IX Header "LIBRARIES"
This package uses type constraints from:
.PP
Test::Auto::Types
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
This package has the following attributes:
.SS "parser"
.IX Subsection "parser"
.Vb 1
\&  parser(Parser)
.Ve
.PP
This attribute is read-only, accepts \f(CW\*(C`(Parser)\*(C'\fR values, and is required.
.SH "METHODS"
.IX Header "METHODS"
This package implements the following methods:
.SS "attributes"
.IX Subsection "attributes"
.Vb 1
\&  attributes() : Any
.Ve
.PP
This method registers and executes a subtest which tests the declared
attributes.
.IP "attributes example #1" 4
.IX Item "attributes example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $subtests\->attributes;
.Ve
.SS "document"
.IX Subsection "document"
.Vb 1
\&  document() : Any
.Ve
.PP
This method registers and executes a subtest which tests the test document
structure.
.IP "document example #1" 4
.IX Item "document example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $subtests\->document;
.Ve
.SS "evaluator"
.IX Subsection "evaluator"
.Vb 1
\&  evaluator(Str $context) : Any
.Ve
.PP
This method evaluates (using \f(CW\*(C`eval\*(C'\fR) the context given and returns the result
or raises an exception.
.IP "evaluator example #1" 4
.IX Item "evaluator example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $context = \*(Aq1 + 1\*(Aq;
\&
\&  $subtests\->evaluator($context); # 2
.Ve
.SS "example"
.IX Subsection "example"
.Vb 1
\&  example(Num $number, Str $name, Str $type, CodeRef $callback) : Any
.Ve
.PP
This method finds and evaluates (using \f(CW\*(C`eval\*(C'\fR) the documented example and
returns a \f(CW\*(C`Test::Auto::Try\*(C'\fR object (see Data::Object::Try). The \f(CW\*(C`try\*(C'\fR
object can be used to trap exceptions using the \f(CW\*(C`catch\*(C'\fR method, and/or execute
the code and return the result using the \f(CW\*(C`result\*(C'\fR method.
.IP "example example #1" 4
.IX Item "example example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $subtests\->example(1, \*(Aqevaluator\*(Aq, \*(Aqmethod\*(Aq, sub {
\&    my ($tryable) = @_;
\&
\&    ok my $result = $tryable\->result, \*(Aqresult ok\*(Aq;
\&    is $result, 2, \*(Aqmeta evaluator test ok\*(Aq;
\&
\&    $result;
\&  });
.Ve
.SS "functions"
.IX Subsection "functions"
.Vb 1
\&  functions() : Any
.Ve
.PP
This method registers and executes a subtest which tests the declared
functions.
.IP "functions example #1" 4
.IX Item "functions example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $subtests\->functions;
.Ve
.SS "inherits"
.IX Subsection "inherits"
.Vb 1
\&  inherits() : Any
.Ve
.PP
This method registers and executes a subtest which tests the declared
inheritances.
.IP "inherits example #1" 4
.IX Item "inherits example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $subtests\->inherits;
.Ve
.SS "libraries"
.IX Subsection "libraries"
.Vb 1
\&  libraries() : Any
.Ve
.PP
This method registers and executes a subtest which tests the declared
type libraries.
.IP "libraries example #1" 4
.IX Item "libraries example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $subtests\->libraries;
.Ve
.SS "methods"
.IX Subsection "methods"
.Vb 1
\&  methods() : Any
.Ve
.PP
This method registers and executes a subtest which tests the declared
methods.
.IP "methods example #1" 4
.IX Item "methods example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $subtests\->methods;
.Ve
.SS "package"
.IX Subsection "package"
.Vb 1
\&  package() : Any
.Ve
.PP
This method registers and executes a subtest which tests the declared
package.
.IP "package example #1" 4
.IX Item "package example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $subtests\->package;
.Ve
.SS "plugin"
.IX Subsection "plugin"
.Vb 1
\&  plugin(Str $name) : Object
.Ve
.PP
This method builds, tests, and returns a plugin object based on the name
provided.
.IP "plugin example #1" 4
.IX Item "plugin example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $subtests\->plugin(\*(AqShortDescription\*(Aq);
.Ve
.SS "registry"
.IX Subsection "registry"
.Vb 1
\&  registry() : InstanceOf["Type::Registry"]
.Ve
.PP
This method returns a type registry object comprised of the types declare in
the declared type libraries.
.IP "registry example #1" 4
.IX Item "registry example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $registry = $subtests\->registry;
.Ve
.SS "routines"
.IX Subsection "routines"
.Vb 1
\&  routines() : Any
.Ve
.PP
This method registers and executes a subtest which tests the declared
routines.
.IP "routines example #1" 4
.IX Item "routines example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $subtests\->routines;
.Ve
.SS "scenario"
.IX Subsection "scenario"
.Vb 1
\&  scenario(Str $name, CodeRef $callback) : Any
.Ve
.PP
This method finds and evaluates (using \f(CW\*(C`eval\*(C'\fR) the documented scenario example
and returns a \f(CW\*(C`Test::Auto::Try\*(C'\fR object (see Data::Object::Try). The \f(CW\*(C`try\*(C'\fR
object can be used to trap exceptions using the \f(CW\*(C`catch\*(C'\fR method, and/or execute
the code and return the result using the \f(CW\*(C`result\*(C'\fR method.
.IP "scenario example #1" 4
.IX Item "scenario example #1"
.Vb 1
\&  package main;
\&
\&  use Test::Auto;
\&
\&  my $test = Test::Auto\->new(
\&    \*(Aqt/Test_Auto.t\*(Aq
\&  );
\&
\&  my $subtests = $test\->subtests;
\&
\&  $subtests\->scenario(\*(Aqexports\*(Aq, sub {
\&    my ($tryable) = @_;
\&
\&    ok my $result = $tryable\->result, \*(Aqresult ok\*(Aq;
\&
\&    $result;
\&  });
.Ve
.SS "standard"
.IX Subsection "standard"
.Vb 1
\&  standard() : Subtests
.Ve
.PP
This method is shorthand which registers and executes a series of other
standard subtests.
.IP "standard example #1" 4
.IX Item "standard example #1"
.Vb 1
\&  # given: synopsis
\&
\&  # use:
\&  $subtests\->standard;
\&
\&  # instead of:
\&  # $self\->package;
\&  # $self\->document;
\&  # $self\->libraries;
\&  # $self\->inherits;
\&  # $self\->attributes;
\&  # $self\->methods;
\&  # $self\->routines;
\&  # $self\->functions;
\&  # $self\->types;
.Ve
.SS "synopsis"
.IX Subsection "synopsis"
.Vb 1
\&  synopsis(CodeRef $callback) : Any
.Ve
.PP
This method evaluates (using \f(CW\*(C`eval\*(C'\fR) the documented synopsis and returns a
\&\f(CW\*(C`Test::Auto::Try\*(C'\fR object (see Data::Object::Try). The \f(CW\*(C`try\*(C'\fR object can be
used to trap exceptions using the \f(CW\*(C`catch\*(C'\fR method, and/or execute the code and
return the result using the \f(CW\*(C`result\*(C'\fR method.
.IP "synopsis example #1" 4
.IX Item "synopsis example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $subtests\->synopsis(sub {
\&    my ($tryable) = @_;
\&
\&    ok my $result = $tryable\->result, \*(Aqresult ok\*(Aq;
\&    is ref($result), \*(AqTest::Auto::Subtests\*(Aq, \*(Aqisa ok\*(Aq;
\&
\&    $result;
\&  });
.Ve
.SS "tryable"
.IX Subsection "tryable"
.Vb 1
\&  tryable(Any @arguments) : InstanceOf["Test::Auto::Try"]
.Ve
.PP
This method returns a tryable object which can be used to defer code execution
with a try/catch construct.
.IP "tryable example #1" 4
.IX Item "tryable example #1"
.Vb 1
\&  # given: synopsis
\&
\&  my $tryable = $subtests\->tryable;
\&
\&  $tryable\->call(sub { $_[0] + 1 });
\&
\&  # $tryable\->result(1);
\&  #> 2
.Ve
.IP "tryable example #2" 4
.IX Item "tryable example #2"
.Vb 1
\&  # given: synopsis
\&
\&  my $tryable = $subtests\->tryable(1);
\&
\&  $tryable\->call(sub { $_[0] + $_[1] });
\&
\&  # $tryable\->result(1);
\&  #> 2
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the
\&\*(L"license file\*(R" <https://github.com/iamalnewkirk/test-auto/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/test-auto/wiki>
.PP
Project <https://github.com/iamalnewkirk/test-auto>
.PP
Initiatives <https://github.com/iamalnewkirk/test-auto/projects>
.PP
Milestones <https://github.com/iamalnewkirk/test-auto/milestones>
.PP
Issues <https://github.com/iamalnewkirk/test-auto/issues>
