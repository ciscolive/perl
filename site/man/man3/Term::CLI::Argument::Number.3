.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::CLI::Argument::Number 3"
.TH Term::CLI::Argument::Number 3 "2019-11-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::CLI::Argument::Number \- base class for numerical arguments in Term::CLI
.SH "VERSION"
.IX Header "VERSION"
version 0.051007
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Term::CLI::Argument::Number;
\&
\& my $arg = Term::CLI::Argument::Number\->new(
\&                name => \*(Aqarg1\*(Aq,
\&                min => 1
\&                max => 2
\&                inclusive => 1
\&           );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Base class for numerical arguments in Term::CLI(3p). This class cannot
be used directly, but should be extended by sub-classes.
.SH "CLASS STRUCTURE"
.IX Header "CLASS STRUCTURE"
.SS "Inherits from:"
.IX Subsection "Inherits from:"
Term::CLI::Argument(3p).
.SS "Consumes:"
.IX Subsection "Consumes:"
None.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.IP "\fBnew\fR ( \fBname\fR => \fI\s-1VARNAME\s0\fR, ... )" 4
.IX Xref "new"
.IX Item "new ( name => VARNAME, ... )"
Create a new Term::CLI::Argument::Number object and return a reference
to it.
.Sp
The \fBname\fR attribute is required.
.Sp
Other attributes that are recognised:
.RS 4
.IP "\fBmin\fR => \fI\s-1NUM\s0\fR" 4
.IX Item "min => NUM"
The minimum valid value (by default an \fIinclusive\fR boundary,
but see inclusive below.
.IP "\fBmax\fR => \fI\s-1NUM\s0\fR" 4
.IX Item "max => NUM"
The maximum valid value (by default an \fIinclusive\fR boundary,
but see inclusive below.
.IP "\fBinclusive\fR => \fI\s-1BOOLEAN\s0\fR" 4
.IX Item "inclusive => BOOLEAN"
Default is 1 (true). Indicates whether minimum/maximum boundaries
are inclusive or exclusive.
.RE
.RS 4
.RE
.SH "ACCESSORS"
.IX Header "ACCESSORS"
Inherited from Term::CLI::Argument(3p). Additionally, the
following are defined:
.IP "\fBmin\fR ( \fI\s-1NUMBER\s0\fR )" 4
.IX Item "min ( NUMBER )"
.PD 0
.IP "\fBmax\fR ( \fI\s-1NUMBER\s0\fR )" 4
.IX Item "max ( NUMBER )"
.PD
Lower and upper boundaries, resp.
.IP "\fBinclusive\fR ( \fI\s-1BOOL\s0\fR )" 4
.IX Item "inclusive ( BOOL )"
Boolean indicating whether the boundaries are inclusive.
.IP "\fBhas_min\fR" 4
.IX Item "has_min"
.PD 0
.IP "\fBhas_max\fR" 4
.IX Item "has_max"
.PD
Booleans, indicate whether \f(CW\*(C`min\*(C'\fR and \f(CW\*(C`max\*(C'\fR have been set, resp.
.IP "\fBclear_min\fR" 4
.IX Item "clear_min"
.PD 0
.IP "\fBclear_max\fR" 4
.IX Item "clear_max"
.PD
Clear the \f(CW\*(C`min\*(C'\fR and \f(CW\*(C`max\*(C'\fR limits, resp.
.SH "METHODS"
.IX Header "METHODS"
Inherited from Term::CLI::Argument(3p).
.PP
Additionally:
.IP "\fBvalidate\fR ( \fI\s-1VALUE\s0\fR )" 4
.IX Item "validate ( VALUE )"
The validate method uses the
coerce_value method to convert \fI\s-1VALUE\s0\fR to
a suitable number and then checks any boundaries.
.IP "\fBcoerce_value\fR ( \fI\s-1VALUE\s0\fR )" 4
.IX Item "coerce_value ( VALUE )"
This method \fImust\fR be overridden by sub-classes.
.Sp
It will be called with a single argument (the \fI\s-1VALUE\s0\fR) and is
supposed to return the converted number. If the number is not
valid, it should return \f(CW\*(C`undef\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Term::CLI::Argument(3p),
Term::CLI(3p).
.SH "AUTHOR"
.IX Header "AUTHOR"
Steven Bakker <sbakker@cpan.org>, 2018.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2018 Steven Bakker
.PP
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See \*(L"perldoc perlartistic.\*(R"
.PP
This software is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
