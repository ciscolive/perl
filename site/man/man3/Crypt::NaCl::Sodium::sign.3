.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::NaCl::Sodium::sign 3"
.TH Crypt::NaCl::Sodium::sign 3 "2015-12-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::NaCl::Sodium::sign \- Public\-key signatures (Ed25519)
.SH "VERSION"
.IX Header "VERSION"
version 1.0.8.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Crypt::NaCl::Sodium qw( :utils );
\&
\&    my $crypto_sign = Crypt::NaCl::Sodium\->sign();
\&
\&    my ($a_skey, $a_pkey, $a_key, $b_skey,
\&        $b_pkey, $b_key, $msg, $opened, $sealed);
\&
\&    ## Alice
\&    ########
\&
\&    # Alice generates secret keypair
\&    ($a_pkey, $a_skey) = $crypto_sign\->keypair();
\&
\&    # ... and shares the public key with Bob
\&    send_to( Bob => { public_key => $a_pkey } );
\&
\&    # now Alice can sign her messages
\&    # while Bob can verify that Alice has signed them
\&
\&    # a message to Bob
\&    $msg = "Hi Bob!";
\&
\&    # Alice signs and seals the message using combined mode
\&    $sealed = $crypto_sign\->seal( $msg, $a_skey );
\&
\&    # message is ready for Bob
\&    send_to( Bob => { sealed => $sealed } );
\&
\&    ## Bob
\&    ########
\&
\&    # Bob generates his secret keypair
\&    ($b_pkey, $b_skey) = $crypto_sign\->keypair();
\&
\&    # ... and shares his public key with Alice
\&    send_to( Alice => { public_key => $b_pkey } );
\&
\&    # Bob receives the public key from Alice
\&    $a_key = receive_for( Bob => \*(Aqpublic_key\*(Aq );
\&
\&    # Bob is now ready to receive first message from Alice
\&    $sealed = receive_for( Bob => \*(Aqsealed\*(Aq );
\&
\&    # since Bob already has Alice\*(Aqs public key we have all information required
\&    # to verify and open a message
\&    $opened = $crypto_sign\->open( $sealed, $a_key );
\&
\&    # now it is time to reply
\&    $msg = "Hello Alice!";
\&
\&    # this time we use detached mode
\&    $mac = $crypto_sign\->mac( $msg, $b_skey );
\&
\&    # Alice needs both to verify Bob\*(Aqs message
\&    send_to( Alice => { mac => $mac } );
\&    send_to( Alice => { msg => $msg } );
\&
\&    ## Alice
\&    ########
\&
\&    # Alice receives the public key from Bob
\&    $b_key = receive_for( Alice => \*(Aqpublic_key\*(Aq );
\&
\&    # Bob used the detached mode
\&    $mac = receive_for( Alice => \*(Aqmac\*(Aq );
\&    $msg = receive_for( Alice => \*(Aqmsg\*(Aq );
\&
\&    # since we already have the message, all left to do is to verify that Bob
\&    # indeed has sent it
\&    unless ( $crypto_sign\->verify($mac, $msg, $b_key) ) {
\&        die "Impostor alert!";
\&    }
\&
\&    # NOTE: send_to() and receive_for() and user functions providing transport of
\&    # messages
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`crypto_sign\*(C'\fR system provides the public-key signature scheme for message
signing and verification. It is designed to meet the standard notion of
unforgeability under chosen-message attacks.
.PP
The \f(CW\*(C`crypto_sign\*(C'\fR allows public verifiability (or receiver-assisted public verifiability)
\&\- any holder of the message, \s-1MAC\s0 and the sender's public key can verify its
authenticity.
.SH "METHODS"
.IX Header "METHODS"
.SS "keypair"
.IX Subsection "keypair"
.Vb 1
\&    my ($public_key, $secret_key) = $crypto_sign\->keypair();
\&
\&    # or deterministically derived from a single key seed
\&    my ($public_key, $secret_key) = $crypto_sign\->keypair( $seed );
.Ve
.PP
Helper method to generate a random secret key and corresponding public key
to be used by \f(CW$crypto_sign\fR.
.PP
See \*(L"seed\*(R" for more details when generating key pair using given \f(CW$seed\fR.
.PP
The length of the \f(CW$public_key\fR equals \*(L"\s-1PUBLICKEYBYTES\*(R"\s0.
.PP
The length of the \f(CW$secret_key\fR equals \*(L"\s-1SECRETKEYBYTES\*(R"\s0.
.PP
\&\fB\s-1NOTE:\s0\fR keep the secret key confidential.
.PP
Returns Data::BytesLocker objects.
.SS "public_key"
.IX Subsection "public_key"
.Vb 1
\&    my $public_key = $crypto_sign\->public_key( $secret_key );
.Ve
.PP
Computes the public key for corresponding secret key.
.PP
The length of the \f(CW$public_key\fR equals \*(L"\s-1PUBLICKEYBYTES\*(R"\s0.
.PP
Returns Data::BytesLocker objects.
.SS "seed"
.IX Subsection "seed"
.Vb 1
\&    my $seed = $crypto_sign\->seed();
\&
\&    my ($public_key, $secret_key) = $crypto_sign\->keypair( $seed );
.Ve
.PP
Helper method to generate a random seed, that can be used to deterministically
compute the key pair derived from it.
.PP
The length of the \f(CW$seed\fR equals \*(L"\s-1SEEDBYTES\*(R"\s0.
.PP
Returns Data::BytesLocker objects.
.SS "extract_seed"
.IX Subsection "extract_seed"
.Vb 1
\&    my $seed = $crypto_sign\->extract_seed( $secret_key );
.Ve
.PP
Returns the \f(CW$seed\fR extracted from given \f(CW$secret_key\fR. The seed is either
random one or the one given to \*(L"keypair\*(R" method.
.PP
The length of the \f(CW$seed\fR equals \*(L"\s-1SEEDBYTES\*(R"\s0.
.PP
Returns Data::BytesLocker objects.
.SS "to_curve25519_keypair"
.IX Subsection "to_curve25519_keypair"
.Vb 2
\&    my ($pkey_c25519, $skey_c25519) = $crypto_sign\->to_curve25519_keypair(
\&                                        $public_key, $secret_key );
.Ve
.PP
Ed25519 keys generated by \*(L"keypair\*(R" could be converted to Curve25519 keys,
so that the same key pair can be used both for authenticated encryption
crypto_box and for signatures
crypto_sign.
.PP
The length of the \f(CW$pkey_c25519\fR is equal to
\&\f(CW$crypto_box\fR\->\s-1PUBLICKEYBYTES\s0.
.PP
The length of the \f(CW$skey_c25519\fR is equal to
\&\f(CW$crypto_box\fR\->\s-1SECRETKEYBYTES\s0.
.PP
\&\fB\s-1NOTE:\s0\fR keep the secret key confidential.
.PP
Returns Data::BytesLocker objects.
.SS "seal"
.IX Subsection "seal"
.Vb 2
\&    # combined mode \- MAC and unencrypted message stored together
\&    my $sealed = $crypto_sign\->seal($msg, $secret_key);
.Ve
.PP
Seals the plaintext message using given \f(CW$secret_key\fR.
.PP
The length of the \f(CW$sealed\fR is up to the length of \f(CW$msg\fR + \*(L"\s-1BYTES\*(R"\s0.
.PP
Returns Data::BytesLocker object.
.SS "mac"
.IX Subsection "mac"
.Vb 2
\&    # detached mode \- MAC of the message returned
\&    my $mac = $crypto_sign\->mac($msg, $secret_key);
.Ve
.PP
Returns the \s-1MAC\s0 without attaching a copy of the original message to it.
.PP
The length of the \f(CW$mac\fR is up to the value of \*(L"\s-1BYTES\*(R"\s0.
.PP
Returns Data::BytesLocker object.
.SS "open"
.IX Subsection "open"
.Vb 9
\&    my $msg;
\&    eval {
\&        $msg = $crypto_sign\->open($sealed, $sender_public_key);
\&    };
\&    if ( $@ ) {
\&        warn "Message forged!";
\&    } else {
\&        print "Verified message: $msg\en";
\&    }
.Ve
.PP
Verifies the signature of sealed message \f(CW$sealed\fR and extract the plaintext
message out of it using sender's given \f(CW$sender_public_key\fR.
.PP
Function croaks if the verification fails.
.PP
The length of the \f(CW$msg\fR is equal to the length of \f(CW$sealed\fR \- length of the
prepended signature.
.PP
Returns Data::BytesLocker object.
.SS "verify"
.IX Subsection "verify"
.Vb 3
\&    unless ( $crypto_sign\->verify( $mac, $msg, $sender_public_key ) ) {
\&        die "Impostor alert!";
\&    }
.Ve
.PP
Verifies the integrity and authenticity of the \f(CW$msg\fR using given \f(CW$mac\fR and
\&\f(CW$sender_public_key\fR.
.PP
Method returns true if message has been verified, false otherwise.
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.SS "\s-1SECRETKEYBYTES\s0"
.IX Subsection "SECRETKEYBYTES"
.Vb 1
\&    my $skey_length = $crypto_sign\->SECRETKEYBYTES;
.Ve
.PP
Returns the length of secret key.
.SS "\s-1PUBLICKEYBYTES\s0"
.IX Subsection "PUBLICKEYBYTES"
.Vb 1
\&    my $pkey_length = $crypto_sign\->PUBLICKEYBYTES;
.Ve
.PP
Returns the length of public key.
.SS "\s-1SEEDBYTES\s0"
.IX Subsection "SEEDBYTES"
.Vb 1
\&    my $seed_length = $crypto_sign\->SEEDBYTES;
.Ve
.PP
Returns the length of seed key.
.SS "\s-1BYTES\s0"
.IX Subsection "BYTES"
.Vb 1
\&    my $max_mac_length = $crypto_sign\->BYTES;
.Ve
.PP
Returns the maximum length of the \s-1MAC.\s0
.SH "ALGORITHM DETAILS"
.IX Header "ALGORITHM DETAILS"
\&\f(CW\*(C`crypto_sign\*(C'\fR is implemented using Ed25519, which has several attractive
features: fast signing and verification, high security level comparable to
\&\s-1AES\-128,\s0 small keys and signatures, and is immune to side-channel attacks.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Data::BytesLocker \- guarded data storage
.IP "\(bu" 4
Crypt::Ed25519
.IP "\(bu" 4
Ed25519: high-speed high-security signatures <http://ed25519.cr.yp.to/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex J. G. Burzyński <ajgb@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2015 by Alex J. G. Burzyński <ajgb@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
