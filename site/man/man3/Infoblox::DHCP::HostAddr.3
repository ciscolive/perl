.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::HostAddr 3"
.TH Infoblox::DHCP::HostAddr 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::HostAddr \- DHCP Host Address object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Host Address is an object used to specify addresses in a \s-1DNS\s0 Host object.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $host_addr = Infoblox::DHCP::HostAddr \-> new(
\&       ipv4addr                        => $ipv4addr,                   #Required
\&       bootfile                        => $filename,                   #Optional / Default is undefined
\&       bootserver                      => $ipv4addr | $fqdn,           #Optional / Default is undefined
\&       configure_for_dhcp              => "true" | "false",            #Optional / Default is "false"
\&       deny_bootp                      => "true" | "false",            #Optional / Default is "false"
\&       dhcp_client_identifier          => $string,                     #Optional / Default is empty
\&       enable_pxe_lease_time           => "true" | "false",            #Optional / Default is "false"
\&       ignore_client_requested_options => "true" | "false",            #Optional / Default is "false"
\&       mac                             => $mac_addr,                   #Optional / Default is empty
\&       match_client                    => $string,                     #Optional / Default is "MAC"
\&                                                                       #Possible values are:
\&                                                                       # "MAC","CLIENT_IDENTIFIER","RESERVED",
\&                                                                       # "CIRCUIT_ID", "REMOTE_ID"
\&       nextserver                      => $ipv4addr | $fqdn | undef,   #Optional / Default is undefined
\&       options                         => [$option1, $option2, ...]    #Optional / Default is empty
\&       override_bootfile               => "true" | "false",            #Optional / Default is "false"
\&       override_bootserver             => "true" | "false",            #Optional / Default is "false"
\&       override_deny_bootp             => "true" | "false",            #Optional / Default is "false"
\&       override_ignore_client_requested_options => "true" | "false",   #Optional / Default is "false"
\&       override_nextserver             => "true" | "false",            #Optional / Default is "false"
\&       override_options                => "true" | "false",            #Optional / Default is "false"
\&       override_pxe_lease_time         => "true" | "false",            #Optional / Default is "false"
\&       pxe_lease_time                  => $time,                       #Optional / Default is empty
\&       use_for_ea_inheritance          => "true" | "false",            #Optional / Default is "false"
\&       reserved_interface              => $interface,                  #Optional
\&       logic_filters                   => [ $filter_name | $filter_obj, ...], # Optional / Default is undefined
\&       override_logic_filters          => "true\*(Aq | \*(Aqfalse",                   # Optional / Default value is "false"
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to a \s-1DHCP\s0 Host Address object.
.SS "Infoblox::DNS::Host\->ipv4addrs( )"
.IX Subsection "Infoblox::DNS::Host->ipv4addrs( )"
.RS 4
Use this function to specify the addresses associated with the Host record. See Infoblox::DNS::Host\->\fBipv4addrs()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Construct a Host Address object
\& my $h1 = Infoblox::DHCP::HostAddr\->new(
\&              ipv4addr  => "10.0.0.1"
\& );
\&
\& # Configure an address in the Host record object
\& $host\->ipv4addrs([$h1]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP Host Address object:
\&
\&  ipv4addr                \- Optional. IPV4 address of the host address.
\&  mac                     \- Optional. MAC address of the host address.
\&  host                    \- Optional, the name of the host to which this address belongs.
\&
\&  discovered_mac                        \- Optional. Discovered MAC address.
\&  discovered_name                       \- Optional. Discovered name.
\&  discoverer                            \- Optional. Discoverer name.
\&  first_discovered                      \- Optional. Time of the first discovery.
\&  last_discovered                       \- Optional. Time of the last discovery.
\&  netbios                               \- Optional. Discovered NetBIOS name.
\&  network_component_description         \- Optional. Discovered network component description.
\&  network_component_ip                  \- Optional. Discovered network component IP address.
\&  network_component_name                \- Optional. Discovered network component name.
\&  network_component_port_description    \- Optional. Discovered network component port description.
\&  network_component_port_name           \- Optional. Discovered network component port name.
\&  network_component_port_number         \- Optional. Discovered network component port number.
\&  network_component_type                \- Optional. Discovered network component type.
\&  os                                    \- Optional. Discovered OS.
\&  port_duplex                           \- Optional. Discovered port duplex settings.
\&  port_link_status                      \- Optional. Discovered port link status.
\&  port_speed                            \- Optional. Discovered port speed settings.
\&  port_status                           \- Optional. Discovered port status settings.
\&  port_vlan_description                 \- Optional. Discovered port VLAN description.
\&  port_vlan_name                        \- Optional. Discovered port VLAN name.
\&  port_vlan_number                      \- Optional. Discovered port VLAN number.
\&  v_cluster                             \- Optional. Discovered VMware cluster name.
\&  v_datacenter                          \- Optional. Discovered VMware datacenter name.
\&  v_host                                \- Optional. Discovered VMware server name.
\&  v_name                                \- Optional. Discovered VMware host or virtual machine name.
\&  v_netadapter                          \- Optional. Discovered VMware physical network adapter name.
\&  v_switch                              \- Optional. Discovered VMware virtual switch name.
\&  v_type                                \- Optional. Discovered VMware entity type (possible values: "VirtualMachine", "HostSystem", "VirtualCenter").
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\& #Get DHCP Host Address object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::HostAddr",
\&     mac    => "11:11:11:11:11.11",
\& );
\&
\& # get HostAddr by v_type:
\& my @retrieved_objs = $session\->get(
\&    object    => \*(AqInfoblox::DHCP::HostAddr\*(Aq,
\&    v_type    => \*(AqVirtualMachine\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 Host Address object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the pxe_lease_time
\& $host_address\->pxe_lease_time("1234");
\& #Submit modification
\& my $response = $session\->modify( $host_address );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DHCP\s0 Host Address object. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a specific DHCP Host Address object:
\&
\&  ipv4addr                \- Optional. IPV4 address of the host address (regular expression).
\&  mac                     \- Optional. MAC address of the host address (regular expression).
\&  host                    \- Optional, the name of the host to which this address belongs (regular expression).
\&
\&  discovered_mac                        \- Optional. Discovered MAC address.
\&  discovered_name                       \- Optional. Discovered name (regular expression).
\&  discoverer                            \- Optional. Discoverer name (regular expression).
\&  first_discovered                      \- Optional. Time of the first discovery.
\&  last_discovered                       \- Optional. Time of the last discovery.
\&  netbios                               \- Optional. Discovered NetBIOS name (regular expression).
\&  network_component_description         \- Optional. Discovered network component description (regular expression).
\&  network_component_ip                  \- Optional. Discovered network component IP address (regular expression).
\&  network_component_name                \- Optional. Discovered network component name (regular expression).
\&  network_component_port_description    \- Optional. Discovered network component port description (regular expression).
\&  network_component_port_name           \- Optional. Discovered network component port name (regular expression).
\&  network_component_port_number         \- Optional. Discovered network component port number.
\&  network_component_type                \- Optional. Discovered network component type (regular expression).
\&  os                                    \- Optional. Discovered OS (regular expression).
\&  port_duplex                           \- Optional. Discovered port duplex settings.
\&  port_link_status                      \- Optional. Discovered port link status.
\&  port_speed                            \- Optional. Discovered port speed settings.
\&  port_status                           \- Optional. Discovered port status settings.
\&  port_vlan_description                 \- Optional. Discovered port VLAN description (regular expression).
\&  port_vlan_name                        \- Optional. Discovered port VLAN name (regular expression).
\&  port_vlan_number                      \- Optional. Discovered port VLAN number.
\&  v_cluster                             \- Optional. Discovered VMware cluster name (regular expression).
\&  v_datacenter                          \- Optional. Discovered VMware datacenter name (regular expression).
\&  v_host                                \- Optional. Discovered VMware server name (regular expression).
\&  v_name                                \- Optional. Discovered VMware host or virtual machine name (regular expression).
\&  v_netadapter                          \- Optional. Discovered VMware physical network adapter name (regular expression).
\&  v_switch                              \- Optional. Discovered VMware virtual switch name (regular expression).
\&  v_type                                \- Optional. Discovered VMware entity type (possible values: "VirtualMachine", "HostSystem", "VirtualCenter").
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\& # Search DHCP Host Address object through the session
\& my @retrieved_objs = $session\->search(
\&     object       => "Infoblox::DHCP::HostAddr",
\&     mac          => "11:11:11:11:11.*",
\& );
\&
\& # search HostAddr by v_datacenter:
\& my @retrieved_objs = $session\->search(
\&    object                 => \*(AqInfoblox::DHCP::HostAddr\*(Aq,
\&    v_datacenter => \*(Aqtest.*\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a \s-1DHCP\s0 Host Address object.
.SS "bootfile( )"
.IX Subsection "bootfile( )"
.RS 4
Use this method to set or retrieve the bootfile value of a \s-1DHCP\s0 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note that when bootfile is set to a defined value and override_bootfile is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->bootfile(\*(L"boot_file\*(R"); \f(CW$object\fR\->override_bootfile(\*(L"false\*(R"); will set override_bootfile to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_bootfile(\*(L"false\*(R"); \f(CW$object\fR\->bootfile(\*(L"boot_file\*(R"); will set override_bootfile to \*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The name of the file that the client must download. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get bootfile
\& my $bootfile = $host_addr\->bootfile();
\& #Modify bootfile
\& $host_addr\->bootfile("boot_file");
.Ve
.RE
.RS 4
.RE
.SS "bootserver( )"
.IX Subsection "bootserver( )"
.RS 4
Use this method to set or retrieve the bootserver of a \s-1DHCP\s0 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note that when bootserver is set to a defined value and override_bootserver is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->bootserver(\*(L"bootserver2.com\*(R"); \f(CW$object\fR\->override_bootserver(\*(L"false\*(R"); will set override_bootserver to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_bootserver(\*(L"false\*(R"); \f(CW$object\fR\->bootserver(\*(L"bootserver2.com\*(R"); will set override_bootserver to \*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The boot server \s-1IP\s0 address or \s-1FQDN\s0 (Fully Qualified Domain Name). The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A boot server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get bootserver
\& my $bootserver = $host_addr\->bootserver();
\& #Modify bootserver
\& $host_addr\->bootserver("bootserver2.com");
\& #Un\-override bootserver
\& $host_addr\->bootserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "configure_for_dhcp( )"
.IX Subsection "configure_for_dhcp( )"
.RS 4
Use this method to set or retrieve the configure_for_dhcp flag of a \s-1DHCP\s0 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the configure_for_dhcp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get configure_for_dhcp
\& my $configure_for_dhcp = $host_addr\->configure_for_dhcp();
\& #Modify configure_for_dhcp
\& $host_addr\->configure_for_dhcp("true");
.Ve
.RE
.RS 4
.RE
.SS "deny_bootp( )"
.IX Subsection "deny_bootp( )"
.RS 4
Use this method to set or retrieve the deny_bootp flag of a \s-1DHCP\s0 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note that when deny_bootp is set to a defined value and override_deny_bootp is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->deny_bootp(\*(L"true\*(R"); \f(CW$object\fR\->override_deny_bootp(\*(L"false\*(R"); will set override_deny_bootp to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_deny_bootp(\*(L"false\*(R"); \f(CW$object\fR\->deny_bootp(\*(L"true\*(R"); will result in override_deny_bootp=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the deny_bootp flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined, which indicates that this attribute inherits the upper-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get deny_bootp
\& my $deny_bootp = $host_addr\->deny_bootp();
\& #Modify deny_bootp
\& $host_addr\->deny_bootp("true");
.Ve
.RE
.RS 4
.RE
.SS "discovered_data( )"
.IX Subsection "discovered_data( )"
.RS 4
Use this method to retrieve the discovered data of a \s-1DHCP\s0 Host Address object. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::Discovery::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_data value
\& my $discovered_data = $object\->discovered_data();
.Ve
.RE
.RS 4
.RE
.SS "discovered_mac( )"
.IX Subsection "discovered_mac( )"
.RS 4
Use this method to retrieve the discovered \s-1MAC\s0 address of a \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discovered \s-1MAC\s0 address.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_mac
\& my $discovered_mac = $host_addr\->discovered_mac();
.Ve
.RE
.RS 4
.RE
.SS "discovered_name( )"
.IX Subsection "discovered_name( )"
.RS 4
Use this method to retrieve the discovered name of a \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discovered name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_name
\& my $discovered_name = $host_addr\->discovered_name();
.Ve
.RE
.RS 4
.RE
.SS "discoverer( )"
.IX Subsection "discoverer( )"
.RS 4
Use this method to retrieve the discoverer of a \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discoverer value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discoverer
\& my $discoverer = $host_addr\->discoverer();
.Ve
.RE
.RS 4
.RE
.SS "discover_now_status( )"
.IX Subsection "discover_now_status( )"
.RS 4
Use this method to retrieve the current discovery status. This attribute is read-only.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1COMPLETE\s0', '\s-1FAILED\s0', '\s-1NONE\s0', '\s-1PENDING\s0' or '\s-1RUNNING\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discover_now_status
\& my $discover_now_status = $host_addr\->discover_now_status();
.Ve
.RE
.RS 4
.RE
.SS "enable_pxe_lease_time( )"
.IX Subsection "enable_pxe_lease_time( )"
.RS 4
Use this method to set or retrieve the enable_pxe_lease_time flag of a \s-1DHCP\s0 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_pxe_lease_time flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_pxe_lease_time
\& my $enable_pxe_lease_time = $host_addr\->enable_pxe_lease_time();
\& #Modify enable_pxe_lease_time
\& $host_addr\->enable_pxe_lease_time("true");
.Ve
.RE
.RS 4
.RE
.SS "first_discovered( )"
.IX Subsection "first_discovered( )"
.RS 4
Use this method to retrieve the date and time that the \s-1DHCP\s0 Host Address object was first discovered.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the date and time that the \s-1DHCP\s0 Host Address object was first discovered.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get first_discovered
\& my $first_discovered = $host_addr\->first_discovered();
.Ve
.RE
.RS 4
.RE
.SS "host( )"
.IX Subsection "host( )"
.RS 4
Use this method to retrieve the name of the Host record this address belongs to.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the host value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get host
\& my $host = $host_addr\->host();
.Ve
.RE
.RS 4
.RE
.SS "ignore_client_requested_options( )"
.IX Subsection "ignore_client_requested_options( )"
.RS 4
Use this method to set or retrieve the ignore_client_requested_option flag of a \s-1DHCP\s0 Host address object. If this flag is set to false, all the defined \s-1DHCP\s0 options are returned to the client.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note that when ignore_client_requested_options is set to a defined value and override_ignore_client_requested_options is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->ignore_client_requested_options(\*(L"true\*(R"); \f(CW$object\fR\->override_ignore_client_requested_options(\*(L"false\*(R"); will set override_ignore_client_requested_options to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_ignore_client_requested_options(\*(L"false\*(R"); \f(CW$object\fR\->ignore_client_requested_options(\*(L"true\*(R"); will set override_ignore_client_requested_options to \*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the ignore_client_requested_option flag or \*(L"false\*(R" to deactivate/unset it. The default value is false, which indicates that this attribute inherits the member-level setting.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& # Get ignore_client_requested_option
\& my $ignore_client_requested_option = $host_addr\->ignore_client_requested_options();
\& # Un\-override ignore_client_requested_option
\& $host_addr\->ignore_client_requested_options(undef);
\& # Modify ignore_client_requested_option
\& $host_addr\->ignore_client_requested_options("true");
.Ve
.RE
.RS 4
.RE
.SS "ipv4addr( )"
.IX Subsection "ipv4addr( )"
.RS 4
Use this method to set or retrieve the ipv4addr value of a \s-1DHCP\s0 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv4addr
\& my $ipv4addr = $host_addr\->ipv4addr();
\& #Modify ipv4addr
\& $host_addr\->ipv4addr("10.0.0.5");
.Ve
.RE
.RS 4
.RE
.SS "is_invalid_mac( )"
.IX Subsection "is_invalid_mac( )"
.RS 4
Use this method to retrieve the flag used to indicate whether an invalid \s-1MAC\s0 address is used. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get is_invalid_mac value
\& my $is_invalid_mac = $host_addr\->is_invalid_mac();
.Ve
.RE
.RS 4
.RE
.SS "last_discovered( )"
.IX Subsection "last_discovered( )"
.RS 4
Use this method to retrieve the time this object was last seen by a discovery job.
.Sp
The default value for this field is empty.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_discovered
\& my $last_discovered = $host_addr\->last_discovered();
.Ve
.RE
.RS 4
.RE
.SS "last_queried( )"
.IX Subsection "last_queried( )"
.RS 4
Use this method to retrieve the time when the associated record was last queried. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. The number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_queried
\& my $last_queried = $host_addr\->last_queried();
.Ve
.RE
.RS 4
.RE
.SS "logic_filters( )"
.IX Subsection "logic_filters( )"
.RS 4
Use this method to set or retrieve all the logic (ordered) filters associated with the \s-1DHCP\s0 Host Address.
.Sp
Filters are used to screen address assignments for the \s-1DHCP\s0 Host Address if the addresses are to be assigned to specific hosts.
.Sp
Setting this method to a defined value implicitly sets the override_logic_filters method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_logic_filters attribute to \*(L"false\*(R".
.Sp
Note that when logic_filters is set to a defined value and override_dlogic_filters is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->logic_filters($filters); \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); will set override_logic_filters to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_logic_filters(\*(L"false\*(R"); \f(CW$object\fR\->logic_filters($filters); will result in override_logic_filters=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains either the Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC, Infoblox::DHCP::Filter::Option objects or the names of the corresponding filters. The filters in the list must satisfy the following conditions:
.RS 4
.IP "Filter name must be globally unique." 4
.IX Item "Filter name must be globally unique."
.PD 0
.IP "Filters without expressions must be at the end of the list." 4
.IX Item "Filters without expressions must be at the end of the list."
.IP "The filters should not be disabled." 4
.IX Item "The filters should not be disabled."
.RE
.RS 4
.PD
.Sp
The default value of the parameter is undefined.
.RE
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get logic_filters
\& my $ref_logic_filters = $host_addr\->logic_filters();
\& #Modify logic_filters
\& $host_addr\->logic_filters(["filter_1","filter_2",$exl1]); #$exl1 is an Infoblox::DHCP::Filter::MAC, Infoblox::DHCP::Filter::NAC or Infoblox::DHCP::Filter::Option object.
.Ve
.RE
.RS 4
.RE
.SS "mac( )"
.IX Subsection "mac( )"
.Vb 1
\& Use this method to set or retrieve the MAC address value of a DHCP Host Address object.
.Ve
.Sp
.RS 4
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
\&\s-1MAC\s0 Address of the \s-1DHCP\s0 Host address object. The format for \s-1MAC\s0 addresses and vendor prefixes are hexadecimal strings separated by colons or dashes. The following formats are acceptable: 11:11:11:11:11:11 and 11\-11\-11\-11\-11\-11.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get mac
\& my $mac = $host_addr\->mac();
\& #Modify mac
\& $host_addr\->mac("11::11::11::11::11::12");
.Ve
.RE
.RS 4
.RE
.SS "match_client( )"
.IX Subsection "match_client( )"
.RS 4
Use this method to set or retrieve the match_client value of a \s-1DHCP\s0 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
.Vb 1
\&    match_client "MAC": The fixed IP address is leased to the matching MAC address.
\&
\&    match_client "CLIENT_IDENTIFIER": The fixed IP address is leased to the matching DHCP client identifier
\&
\&    match_client "RESERVED": The fixed IP address is reserved for later use with a MAC address that only has zeros.
\&
\&    match_client "CIRCUIT_ID": The fixed IP address is leased to the DHCP client with a matching circuit ID. Note that
\&                 the "agent_circuit_id" field must be set in this case.
\&
\&    match_client "REMOTE_ID": The fixed IP address is leased to the DHCP client with a matching remote ID. Note that
\&                 the "agent_remote_id" field must be set in this case.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
.Vb 1
\&    If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
\&
\&    If you did not specify a parameter, the method returns the attribute value.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get match_client
\& my $match_client = $host_addr\->match_client();
\& #Modify match_client
\& $host_addr\->match_client("CLIENT_IDENTIFIER");
.Ve
.RE
.RS 4
.RE
.SS "ms_ad_user_data( )"
.IX Subsection "ms_ad_user_data( )"
.RS 4
Use this method to retrieve Microsoft Active Directory users related information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::MSServer::AdUser::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_ad_user_data value
\& my $value = $object\->ms_ad_user_data();
.Ve
.RE
.RS 4
.RE
.SS "netbios( )"
.IX Subsection "netbios( )"
.RS 4
Use this method to retrieve the name in the NetBIOS reply that responded to a NetBIOS query.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get netbios
\& my $netbios = $host_addr\->netbios();
.Ve
.RE
.RS 4
.RE
.SS "network( )"
.IX Subsection "network( )"
.RS 4
Use this method to retrieve the network value of a \s-1DHCP\s0 Host Address object. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network
\& my $network = $host_addr\->network();
.Ve
.RE
.RS 4
.RE
.SS "network_component_description( )"
.IX Subsection "network_component_description( )"
.RS 4
Use this method to retrieve the description of the network device that is connected to the \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device description.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_description
\& my $network_component_description = $host_addr\->network_component_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_ip( )"
.IX Subsection "network_component_ip( )"
.RS 4
Use this method to retrieve the \s-1IP\s0 address of the network device that is connected to the \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1IP\s0 address of the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_ip
\& my $network_component_ip = $host_addr\->network_component_ip();
.Ve
.RE
.RS 4
.RE
.SS "network_component_name( )"
.IX Subsection "network_component_name( )"
.RS 4
Use this method to retrieve the name of the network device that is connected to the \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_name
\& my $network_component_name = $host_addr\->network_component_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_description( )"
.IX Subsection "network_component_port_description( )"
.RS 4
Use this method to retrieve the description of the network device port that is connected to the \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the description of the port on the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_description
\& my $network_component_port_description = $host_addr\->network_component_port_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_name( )"
.IX Subsection "network_component_port_name( )"
.RS 4
Use this method to retrieve the name of the network device port that is connected to the \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the name of the port on the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_name
\& my $network_component_port_name = $host_addr\->network_component_port_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_number( )"
.IX Subsection "network_component_port_number( )"
.RS 4
Use this method to retrieve the number of the network device port that is connected to the \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_number
\& my $network_component_port_number = $host_addr\->network_component_port_number();
.Ve
.RE
.RS 4
.RE
.SS "network_component_type( )"
.IX Subsection "network_component_type( )"
.RS 4
Use this method to retrieve the type of the network device that is connected to \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device type.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_type
\& my $network_component_type = $host_addr\->network_component_type();
.Ve
.RE
.RS 4
.RE
.SS "nextserver( )"
.IX Subsection "nextserver( )"
.RS 4
Use this method to set or retrieve the nextserver value of a \s-1DHCP\s0 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note that when nextserver is set to a defined value and override_nextserver is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->nextserver(\*(L"3.3.3.4\*(R"); \f(CW$object\fR\->override_nextserver(\*(L"false\*(R"); will set override_nextserver to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_nextserver(\*(L"false\*(R"); \f(CW$object\fR\->nextserver(\*(L"3.3.3.4\*(R"); will set override_nextserver to \*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The next server \s-1IP\s0 address or \s-1FQDN\s0 (Fully Qualified Domain Name). The \s-1FQDN\s0 consists of the host name followed by the domain name (example: abc.com). A next server name can have a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Get nextserver
\& my $nextserver = $host_addr\->nextserver();
\& #Modify nextserver
\& $host_addr\->nextserver("3.3.3.4");
\& #Un\-override nextserver
\& $host_addr\->nextserver(undef);
.Ve
.RE
.RS 4
.RE
.SS "options( )"
.IX Subsection "options( )"
.RS 4
Use this method to set or retrieve the options of a \s-1DHCP\s0 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
See Infoblox::DHCP::Option for parameters and methods available for this object.
.Sp
Note that when options is set to a defined value and override_options is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->options([$o1,$o2]); \f(CW$object\fR\->override_options(\*(L"false\*(R"); will set override_options to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_options(\*(L"false\*(R"); \f(CW$object\fR\->options([$o1,$o2]); will set override_options to \*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Options describe network configuration settings and various services available on the network. These options occur as variable-length fields at the end of \s-1DHCP\s0 messages.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get options
\& my $options = $host_addr\->options();
\& #Modify options
\& $host_addr\->options([$option1, $option2]);
.Ve
.RE
.RS 4
.RE
.SS "os( )"
.IX Subsection "os( )"
.RS 4
Use this method to retrieve the operating system associated with this host address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get os
\& my $os = $host_addr\->os();
.Ve
.RE
.RS 4
.RE
.SS "override_bootfile( )"
.IX Subsection "override_bootfile( )"
.RS 4
The override_bootfile attribute controls whether the bootfile value in the member is used, instead of the grid default.
.Sp
The override_bootfile attribute can be specified explicitly. It is also set implicitly when bootfile is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_bootfile flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_bootfile
\& my $override = $host_addr\->override_bootfile();
\& #Modify the override
\& $host_addr\->override_bootfile("true");
.Ve
.RE
.RS 4
.RE
.SS "override_bootserver( )"
.IX Subsection "override_bootserver( )"
.RS 4
The override_bootserver attribute controls whether the bootserver value in the member is used, instead of the grid default.
.Sp
The override_bootserver attribute can be specified explicitly. It is also set implicitly when bootserver is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_bootserver flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_bootserver
\& my $override = $host_addr\->override_bootserver();
\& #Modify the override
\& $host_addr\->override_bootserver("true");
.Ve
.RE
.RS 4
.RE
.SS "override_deny_bootp( )"
.IX Subsection "override_deny_bootp( )"
.RS 4
The override_deny_bootp attribute controls whether the deny_bootp value in the member is used, instead of the grid default.
.Sp
The override_deny_bootp attribute can be specified explicitly. It is also set implicitly when deny_bootp is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_deny_bootp flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_deny_bootp
\& my $override = $host_addr\->override_deny_bootp();
\& #Modify the override
\& $host_addr\->override_deny_bootp("true");
.Ve
.RE
.RS 4
.RE
.SS "override_ignore_client_requested_option( )"
.IX Subsection "override_ignore_client_requested_option( )"
.RS 4
The override_ignore_client_requested_option attribute controls whether the ignore_client_requested_option value in the member is used, instead of the grid default.
.Sp
The override_ignore_client_requested_option attribute can be specified explicitly. It is also set implicitly when ignore_client_requested_option is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_ignore_client_requested_option flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_ignore_client_requested_option
\& my $override = $host_addr\->override_ignore_client_requested_option();
\& #Modify the override
\& $host_addr\->override_ignore_client_requested_option("true");
.Ve
.RE
.RS 4
.RE
.SS "override_logic_filters( )"
.IX Subsection "override_logic_filters( )"
.RS 4
The override_logic_filters attribute controls whether the logic_filters value of the \s-1DHCP\s0 Host Address is used, instead of the Grid default.
.Sp
The override_logic_filters attribute can be specified explicitly. It is also set implicitly when logic_filters is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for logic_filters. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for logic_filters.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting override_logic_filters
\& my $override_logic_filters=$host_addr\->override_logic_filters( );
\& #Modifying override_logic_filters
\& $host_addr\->override_logic_filters("true");
.Ve
.RE
.RS 4
.RE
.SS "override_nextserver( )"
.IX Subsection "override_nextserver( )"
.RS 4
The override_nextserver attribute controls whether the nextserver value in the member is used, instead of the grid default.
.Sp
The override_nextserver attribute can be specified explicitly. It is also set implicitly when nextserver is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_nextserver flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_nextserver
\& my $override = $host_addr\->override_nextserver();
\& #Modify the override
\& $host_addr\->override_nextserver("true");
.Ve
.RE
.RS 4
.RE
.SS "override_options( )"
.IX Subsection "override_options( )"
.RS 4
The override_options attribute controls whether the options value in the member is used, instead of the upper-level default.
.Sp
The override_options attribute can be specified explicitly. It is also set implicitly when options is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_options flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_options
\& my $override = $host_addr\->override_options();
\& #Modify the override
\& $host_addr\->override_options("true");
.Ve
.RE
.RS 4
.RE
.SS "override_pxe_lease_time( )"
.IX Subsection "override_pxe_lease_time( )"
.RS 4
The override_pxe_lease_time attribute controls whether the pxe_lease_time value in the member is used, instead of the grid default.
.Sp
The override_pxe_lease_time attribute can be specified explicitly. It is also set implicitly when pxe_lease_time is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_pxe_lease_time flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_pxe_lease_time
\& my $override = $host_addr\->override_pxe_lease_time();
\& #Modify the override
\& $host_addr\->override_pxe_lease_time("true");
.Ve
.RE
.RS 4
.RE
.SS "port_duplex( )"
.IX Subsection "port_duplex( )"
.RS 4
Use this method to retrieve the duplex setting of the network device port that is connected to the \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the port duplex setting. The returned value, if any, is one of the following:
.Sp
.Vb 2
\&  Full
\&  Half
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_duplex
\& my $port_duplex = $host_addr\->port_duplex();
.Ve
.RE
.RS 4
.RE
.SS "port_link_status( )"
.IX Subsection "port_link_status( )"
.RS 4
Use this method to retrieve the link status of the network device port that is connected to the \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port link status. The returned value, if any, is one of the following:
.Sp
.Vb 3
\&  Connected
\&  Not Connected
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_link_status
\& my $port_link_status = $host_addr\->port_link_status();
.Ve
.RE
.RS 4
.RE
.SS "port_speed( )"
.IX Subsection "port_speed( )"
.RS 4
Use this method to retrieve the speed of the network device port that is connected to the \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port speed. The returned value, if any, is one of the following:
.Sp
.Vb 6
\&  10M
\&  100M
\&  1G
\&  10G
\&  100G
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_speed
\& my $port_speed = $host_addr\->port_speed();
.Ve
.RE
.RS 4
.RE
.SS "port_status( )"
.IX Subsection "port_status( )"
.RS 4
Use this method to retrieve the status of the network device port that is connected to the \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port status. The returned value, if any, is one of the following:
.Sp
.Vb 3
\&  Up
\&  Down
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_status
\& my $port_status = $host_addr\->port_status();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_description( )"
.IX Subsection "port_vlan_description( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 description of the network device port that is connected to the \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1VLAN\s0 description of the network device port.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_description
\& my $port_vlan_description = $host_addr\->port_vlan_description();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_name( )"
.IX Subsection "port_vlan_name( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 name of the network device port that is connected to the \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port \s-1VLAN\s0 name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_name
\& my $port_vlan_name = $host_addr\->port_vlan_name();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_number( )"
.IX Subsection "port_vlan_number( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 number of the network device port that is connected to the \s-1DHCP\s0 Host Address object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the port \s-1VLAN\s0 number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_number
\& my $port_vlan_number = $host_addr\->port_vlan_number();
.Ve
.RE
.RS 4
.RE
.SS "pxe_lease_time( )"
.IX Subsection "pxe_lease_time( )"
.RS 4
Use this method to set or retrieve the pxe_lease_time value of a \s-1DHCP\s0 Host Address object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Note that when pxe_lease_time is set to a defined value and override_pxe_lease_time is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->pxe_lease_time(\*(L"369\*(R"); \f(CW$object\fR\->override_pxe_lease_time(\*(L"false\*(R"); will set override_pxe_lease_time to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_pxe_lease_time(\*(L"false\*(R"); \f(CW$object\fR\->pxe_lease_time(\*(L"369\*(R"); will set override_pxe_lease_time to \*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter appropriate values in the Days, Hours, Mins and Secs fields.
User can specify the duration of time it takes a host to connect to a boot server, such as a \s-1TFTP\s0 server, and download the file it needs to boot.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get pxe_lease_time
\& my $pxe_lease_time = $host_addr\->pxe_lease_time();
\& #Modify pxe_lease_time
\& $host_addr\->pxe_lease_time("369");
.Ve
.RE
.RS 4
.RE
.SS "reserved_interface( )"
.IX Subsection "reserved_interface( )"
.RS 4
Use this method to set or retrieve the reserved discovery interface.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::DeviceInterface object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get reserved_interface
\& my $reserved_interface = $host_addr\->reserved_interface();
\& #Modify reserved_interface
\& $host_addr\->reserved_interface($interface);
.Ve
.RE
.RS 4
.RE
.SS "v_cluster( )"
.IX Subsection "v_cluster( )"
.RS 4
Use this method to retrieve the name of the VMware cluster associated with the \s-1DHCP\s0 Host Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware cluster name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_cluster
\& my $v_cluster = $host_addr\->v_cluster();
.Ve
.RE
.RS 4
.RE
.SS "v_datacenter( )"
.IX Subsection "v_datacenter( )"
.RS 4
Use this method to retrieve the name of the VMware datacenter associated with the \s-1DHCP\s0 Host Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware datacenter name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_datacenter
\& my $v_datacenter = $host_addr\->v_datacenter();
.Ve
.RE
.RS 4
.RE
.SS "v_host( )"
.IX Subsection "v_host( )"
.RS 4
Use this method to retrieve the name of the VMware host associated with the \s-1DHCP\s0 Host Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware host name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_host
\& my $v_host = $host_addr\->v_host();
.Ve
.RE
.RS 4
.RE
.SS "v_name( )"
.IX Subsection "v_name( )"
.RS 4
Use this method to retrieve the name of the VMware entity associated with the \s-1DHCP\s0 Host Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware entity name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_name
\& my $v_name = $host_addr\->v_name();
.Ve
.RE
.RS 4
.RE
.SS "v_netadapter( )"
.IX Subsection "v_netadapter( )"
.RS 4
Use this method to retrieve the name of the physical network adapter through which the VMware entity is connected to the appliance. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the network adapter name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_netadapter
\& my $v_netadapter = $host_addr\->v_netadapter();
.Ve
.RE
.RS 4
.RE
.SS "v_switch( )"
.IX Subsection "v_switch( )"
.RS 4
Use this method to retrieve the name of the virtual switch through which the VMware entity is connected to the appliance. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the virtual switch name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_switch
\& my $v_switch = $host_addr\->v_switch();
.Ve
.RE
.RS 4
.RE
.SS "v_type( )"
.IX Subsection "v_type( )"
.RS 4
Use this method to retrieve the type of VMware entity associated with the \s-1DHCP\s0 Host Address object. This method is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware entity type. The default value is an empty string. The returned value, if any, can be one of the following:
.Sp
.Vb 3
\& VirtualMachine
\& HostSystem
\& VirtualCenter
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_type
\& my $v_type = $host_addr\->v_type();
.Ve
.RE
.RS 4
.RE
.SS "use_for_ea_inheritance( )"
.IX Subsection "use_for_ea_inheritance( )"
.RS 4
Use this method to set or retrieve the flag that indicates if this host address is used for inheritable extensible attributes.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to enable the flag or \*(L"false\*(R" to disable it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get use_for_ea_inheritance
\& my $use_for_ea_inheritance = $host_addr\->use_for_ea_inheritance();
\& #Modify use_for_ea_inheritance
\& $host_addr\->use_for_ea_inheritance("true");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as search and modify. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 IPv4 Host Address object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used, note the hostaddress option
\& use strict;
\& use Infoblox qw (:hostaddress);
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create an IPv4 network object
\& my $network = Infoblox::DHCP::Network\->new(
\&                                            "network" => "10.0.0.0/8",
\&                                           );
\& unless($network) {
\&      die("Construct IPv4 Network object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "IPv4 Network object created successfully\en";
\&
\& $session\->add($network)
\&     or die("Add network failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Network added successfully\en";
\&
\& #Create a zone object
\& my $zone = Infoblox::DNS::Zone\->new(
\&                                     name => "test.com",
\&                                    );
\& unless($zone) {
\&      die("Construct Zone object failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Zone object created successfully\en";
\&
\& $session\->add($zone)
\&     or die("Add zone failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Zone added successfully\en";
\&
\& my $option1 = Infoblox::DHCP::Option\->new(
\&                                           name  => "routers",
\&                                           value => "10.0.0.100,10.0.0.200"
\&                                          );
\&
\& unless($option1) {
\&     die("Construct option1 object failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "option1 object created successfully\en";
\&
\& my $option2 = Infoblox::DHCP::Option\->new(
\&                                           name  => "nameservers",
\&                                           value => "1.1.1.1,2.2.2.2,3.3.3.3"
\&                                          );
\& unless($option2) {
\&     die("Construct option2 object failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "option2 object created successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 IPv4 Host address object\fR
.PP
.Vb 10
\& #Create a DHCP IPv4 Host Address object
\& my $host_addr = Infoblox::DHCP::HostAddr\->new(
\&        "ipv4addr"                => "10.0.0.5",
\&        "mac"                     => "00:00:00:11:11:11",
\&        "pxe_lease_time"          => 1234,
\&        "override_pxe_lease_time" => "true",
\&        "options"                 => [ $option1 , $option2 ],
\&        );
\& unless($host_addr) {
\&      die("Construct IPv4 host address failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP IPv4 Host address object created successfully\en";
\&
\& my $host = Infoblox::DNS::Host\->new(
\&                                     name         => "host.test.com",
\&                                     ipv4addrs    => [$host_addr],
\&                                    );
\&
\& unless($host) {
\&      die("Construct IPv4 host record failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& $session\->add($host)
\&     or die("Add host failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "Host added successfully\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DHCP\s0 IPv4 Host Address object\fR
.PP
.Vb 11
\& #Get DHCP IPv4 Host Address object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::HostAddr",
\&     mac    => "00:00:00:11:11:11",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get IPv4 Host Address object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get IPv4 Host Address object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the obtained IPv4 Host Address object
\& $object\->pxe_lease_time(1235);
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify IPv4 Host Address object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "IPv4 Host Address object modified successfully \en";
\&
\& #Verify that this was changed also when retrieving this via the host record
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::DNS::Host",
\&     name => "host.test.com",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Host record failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get host record object found at least 1 matching entry\en";
\&
\& my $hostaddress = @{$object\->ipv4addrs()}[0];
\&
\& unless ($hostaddress\->pxe_lease_time() == 1235) {
\&     die("The modification of host address has failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "The change to preferred lifetime has succeeded correctly\en";
\&
\& #The host address retrieved this way can also be modified without submitting the full host record
\& $hostaddress\->pxe_lease_time(1111);
\&
\& #Apply the changes
\& $session\->modify($hostaddress)
\&     or die("Modify IPv4 Host Address object failed: ",
\&            $session\->status_code() . ":" . $session\->status_detail());
\& print "IPv4 Host Address object modified successfully \en";
\&
\& #Verify the change was submitted successfully
\& @retrieved_objs = $session\->get(
\&     object => "Infoblox::DHCP::HostAddr",
\&     mac    => "00:00:00:11:11:11",
\& );
\& $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get IPv4 Host Address object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get IPv4 Host Address object found at least 1 matching entry\en";
\&
\& unless ($hostaddress\->pxe_lease_time() == 1111) {
\&     die("The modification of host address has failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& #Submit the Host object for removal
\& $session\->remove($host)
\&     or die("Remove Host object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Host object removed successfully \en";
\&
\& #Submit the Zone object for removal
\& $session\->remove($zone)
\&     or die("Remove Zone object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Zone object removed successfully \en";
\&
\& #Submit the Network object for removal
\& $session\->remove($network)
\&     or die("Remove Network object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object removed successfully \en";
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::DHCP::Network,
Infoblox::DHCP::View,
Infoblox::DHCP::Range,
Infoblox::DHCP::Lease,
Infoblox::Session\->\fBadd()\fR,
Infoblox::Session\->\fBget()\fR,
Infoblox::Session\->\fBmodify()\fR,
Infoblox::Session\->\fBremove()\fR,
Infoblox::Session\->\fBsearch()\fR,
Infoblox::Session,
Infoblox::Grid::MSServer::AdUser::Data,
Infoblox::Grid::Discovery::Data
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
