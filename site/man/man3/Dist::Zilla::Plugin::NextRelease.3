.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::Plugin::NextRelease 3"
.TH Dist::Zilla::Plugin::NextRelease 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::Plugin::NextRelease \- update the next release number in your changelog
.SH "VERSION"
.IX Header "VERSION"
version 6.017
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In your \fIdist.ini\fR:
.PP
.Vb 1
\&  [NextRelease]
.Ve
.PP
In your \fIChanges\fR file:
.PP
.Vb 1
\&  {{$NEXT}}
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Tired of having to update your \fIChanges\fR file by hand with the new
version and release date / time each time you release your distribution?
Well, this plugin is for you.
.PP
Add this plugin to your \fIdist.ini\fR, and the following to your
\&\fIChanges\fR file:
.PP
.Vb 1
\&  {{$NEXT}}
.Ve
.PP
The \f(CW\*(C`NextRelease\*(C'\fR plugin will then do 2 things:
.IP "\(bu" 4
At build time, this special marker will be replaced with the
version and the build date, to form a standard changelog header. This
will be done to the in-memory file \- the original \fIChanges\fR file won't
be updated.
.IP "\(bu" 4
After release (when running \f(CW\*(C`dzil release\*(C'\fR), since the version
and build date are now part of your dist's history, the real \fIChanges\fR
file (not the in-memory one) will be updated with this piece of
information.
.PP
The module accepts the following options in its \fIdist.ini\fR section:
.IP "filename" 4
.IX Item "filename"
the name of your changelog file;  defaults to \fIChanges\fR
.IP "update_filename" 4
.IX Item "update_filename"
the file to which to write an updated changelog to; defaults to the \f(CW\*(C`filename\*(C'\fR
.IP "format" 4
.IX Item "format"
sprintf-like string used to compute the next value of \f(CW\*(C`{{$NEXT}}\*(C'\fR;
defaults to \f(CW\*(C`%\-9v %{yyyy\-MM\-dd HH:mm:ssZZZZZ VVVV}d%{ (TRIAL RELEASE)}T\*(C'\fR
.IP "time_zone" 4
.IX Item "time_zone"
the timezone to use when generating the date;  defaults to \fIlocal\fR
.IP "user_stash" 4
.IX Item "user_stash"
the name of the stash where the user's name and email address can be found;
defaults to \f(CW%User\fR
.PP
The module allows the following sprintf-like format codes in the \f(CW\*(C`format\*(C'\fR:
.ie n .IP "%v" 4
.el .IP "\f(CW%v\fR" 4
.IX Item "%v"
The distribution version
.ie n .IP """%{\-TRIAL}T""" 4
.el .IP "\f(CW%{\-TRIAL}T\fR" 4
.IX Item "%{-TRIAL}T"
Expands to \-TRIAL (or any other supplied string) if this
is a trial release, or the empty string if not.  A bare \f(CW%T\fR means
\&\f(CW\*(C`%{\-TRIAL}T\*(C'\fR.
.ie n .IP """%{\-TRIAL}V""" 4
.el .IP "\f(CW%{\-TRIAL}V\fR" 4
.IX Item "%{-TRIAL}V"
Equivalent to \f(CW\*(C`%v%{\-TRIAL}T\*(C'\fR, to allow for the application of modifiers such
as space padding to the entire version string produced.
.ie n .IP """%{CLDR format}d""" 4
.el .IP "\f(CW%{CLDR format}d\fR" 4
.IX Item "%{CLDR format}d"
The date of the release.  You can use any \s-1CLDR\s0 format supported by
DateTime.  You must specify the format; there is no default.
.ie n .IP "%U" 4
.el .IP "\f(CW%U\fR" 4
.IX Item "%U"
The name of the user making this release (from \f(CW\*(C`user_stash\*(C'\fR).
.ie n .IP "%E" 4
.el .IP "\f(CW%E\fR" 4
.IX Item "%E"
The email address of the user making this release (from \f(CW\*(C`user_stash\*(C'\fR).
.ie n .IP "%P" 4
.el .IP "\f(CW%P\fR" 4
.IX Item "%P"
The \s-1CPAN\s0 (\s-1PAUSE\s0) id of the user making this release (from \-Releaser plugins;
see [UploadToCPAN]).
.ie n .IP "%n" 4
.el .IP "\f(CW%n\fR" 4
.IX Item "%n"
A newline
.ie n .IP "%t" 4
.el .IP "\f(CW%t\fR" 4
.IX Item "%t"
A tab
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Core Dist::Zilla plugins:
AutoVersion,
PkgVersion,
PodVersion.
.PP
Dist::Zilla roles:
AfterRelease,
FileMunger,
TextTemplate.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 üòè <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
