.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mnet 3"
.TH Mnet 3 "2020-08-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mnet \- Testable network automation and reporting
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    # sample script to report Loopback0 ip on cisco devices
\&    #
\&    #   demonstrates typical use of all major Mnet modules
\&    #
\&    #   \-\-help to list all options, or \-\-help <option>
\&    #   \-\-device <address> to connect to device with logging
\&    #   \-\-username and \-\-password should be set if necessary
\&    #   \-\-batch <file.batch> to process multiple \-\-device lines
\&    #   \-\-report csv:<file.csv> to create an output csv file
\&    #   \-\-record <file.test> to create replayable test file
\&    #   \-\-test \-\-replay <file.test> for regression test output
\&    #
\&    #   refer to various Mnet modules\*(Aq perldoc for more info
\&
\&    # load modules
\&    use warnings;
\&    use strict;
\&    use Mnet::Batch;
\&    use Mnet::Expect::Cli::Ios;
\&    use Mnet::Log qw(DEBUG INFO WARN FATAL);
\&    use Mnet::Opts::Cli;
\&    use Mnet::Report::Table;
\&    use Mnet::Stanza;
\&    use Mnet::Test;
\&
\&    # define \-\-device, \-\-username, \-\-password, and \-\-report cli options
\&    #   record, redact, default, and help option attributes are shown
\&    Mnet::Opts::Cli::define({ getopt => "device=s", record => 1 });
\&    Mnet::Opts::Cli::define({ getopt => "username=s" });
\&    Mnet::Opts::Cli::define({ getopt => "password=s", redact  => 1 });
\&    Mnet::Opts::Cli::define({ getopt => "report=s", default => undef,
\&        help_tip    => "specify report output, csv, json, sql, etc",
\&        help_text   => "perldoc Mnet::Report::Table for more info",
\&    });
\&
\&    # create object to access command line options and Mnet env variable
\&    #   export Mnet="\-\-password \*(Aq<secret>\*(Aq" env var from secure file
\&    my $cli = Mnet::Opts::Cli\->new("Mnet");
\&
\&    # define output \-\-report table, will include first of any errors
\&    #   use \-\-report cli opt to output data as csv, json, or sql, etc
\&    my $report = Mnet::Report::Table\->new({
\&        columns => [
\&            device  => "string",
\&            error   => "error",
\&            ip      => "string",
\&        ],
\&        output  => $cli\->report,
\&    });
\&
\&    # recreate cli option object, forking children if in \-\-batch mode
\&    #   process one device or ten thousand devices with the same script
\&    #   exit \-\-batch parent process here when finished forking children
\&    $cli = Mnet::Batch::fork($cli);
\&    exit if not $cli;
\&
\&    # output report row for device error if script dies before finishing
\&    $report\->row_on_error({ device => $cli\->device });
\&
\&    # call logging function, also create log object for current \-\-device
\&    FATAL("missing \-\-device") if not $cli\->device;
\&    my $log = Mnet::Log\->new({ log_id => $cli\->device });
\&    $log\->info("processing device");
\&
\&    # create an expect ssh session to current \-\-device
\&    #   log ssh login/auth prompts as info, instead of default debug
\&    #   password_in set to prompt for password if \-\-password opt not set
\&    #   ssh host/key checks can be skipped, refer to Mnet::Expect::Cli
\&    my $ssh = Mnet::Expect::Cli::Ios\->new({
\&        spawn       => [ "ssh", "$cli\->{username}\e@$cli\->{device}" ],
\&        log_id      => $cli\->{device},
\&        log_login   => "info",
\&        password    => $cli\->password,
\&        password_in => 1,
\&    });
\&
\&    # retrieve ios config using ssh command, warn otherwise
\&    my $config = $ssh\->command("show running\-config");
\&    WARN("unable to read config") if not $config;
\&
\&    # parse interface loopack0 stanza from device config
\&    #   returns int loop0 line and lines indented under int loop0
\&    my $loop = Mnet::Stanza::parse($config, qr/^interface Loopback0$/);
\&
\&    # parse primary ip address from loopback config stanza
\&    my $ip = undef;
\&    $ip = $1 if $loop and $loop =~ /^ ip address (\eS+) \eS+$/m;
\&
\&    # report on parsed loopback0 interface ip addres
\&    $report\->row({ device => $cli\->device, ip => $ip });
\&
\&    # finished
\&    exit;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Mnet modules are for perl programmers who want to create testable
network automation and/or reporting scripts as simply as possible.
.PP
The main features are:
.IP "\(bu" 4
Record and replay connected command line sessions, speeding development
and allow for regression testing of complex automation scripts.
.IP "\(bu" 4
Reliable automation of cisco ios and other command line sessions, including
authentication and command prompt handling.
.IP "\(bu" 4
Automation scripts can run in batch mode to concurrently process a list of
devices, using a simple command line argument and a device list file.
.IP "\(bu" 4
Facilitate easy log, debug, alert and error output from automation scripts,
outputs can be redirected to per-device files
.IP "\(bu" 4
Flexible config settings via command line, environment variable, and/or batch
device list files.
.IP "\(bu" 4
Report data from scripts can be output as csv, json, or sql.
.PP
Most of the Mnet sub-modules can be used independently of each other,
unless otherwise noted.
.PP
Refer to the individual modules listed in the \s-1SEE ALSO\s0 section below
for more detail.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
The Mnet perl modules should work in just about any unix perl environment.
.PP
The latest release can be installed from \s-1CPAN\s0
.PP
.Vb 1
\&    cpan install Mnet
.Ve
.PP
Or download and install from <https://github.com/menzascripting/Mnet>
.PP
.Vb 5
\&    tar \-xzf Mnet\-X.y.tar.gz
\&    cd Mnet\-X.y
\&    perl Makefile.PL  # INSTALL_BASE=/specify/path
\&    make test
\&    make install
.Ve
.PP
Check your \s-1PERL5LIB\s0 environment variable if \s-1INSTALL_BASE\s0 was used, or if you
copied the lib/Mnet directory somewhere instead of using Makefile.PL. Refer
to ExtUtils::MakeMaker for more information
.SH "AUTHOR"
.IX Header "AUTHOR"
The Mnet perl distribution has been created and is maintained by Mike Menza.
Feedback and bug reports are welcome, feel free to contact Mike via email
at <mmenza@cpan.org> with any comments or questions.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2006, 2013\-2020 Michael J. Menza Jr.
.PP
Mnet is free software: you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT ANY
WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A
PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mnet::Batch
.PP
Mnet::Expect::Cli
.PP
Mnet::Expect::Cli::Ios
.PP
Mnet::Log
.PP
Mnet::Opts::Cli
.PP
Mnet::Report::Table
.PP
Mnet::Stanza
.PP
Mnet::Test
