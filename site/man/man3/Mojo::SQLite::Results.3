.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::SQLite::Results 3"
.TH Mojo::SQLite::Results 3 "2020-07-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::SQLite::Results \- Results
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::SQLite::Results;
\&
\&  my $results = Mojo::SQLite::Results\->new(sth => $sth);
\&  $results\->hashes\->map(sub { $_\->{foo} })\->shuffle\->join("\en")\->say;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::SQLite::Results is a container for DBD::SQLite statement handles
used by Mojo::SQLite::Database.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::SQLite::Results implements the following attributes.
.SS "db"
.IX Subsection "db"
.Vb 2
\&  my $db   = $results\->db;
\&  $results = $results\->db(Mojo::SQLite::Database\->new);
.Ve
.PP
Mojo::SQLite::Database object these results belong to.
.SS "sth"
.IX Subsection "sth"
.Vb 2
\&  my $sth  = $results\->sth;
\&  $results = $results\->sth($sth);
.Ve
.PP
DBD::SQLite statement handle results are fetched from.
.SH "METHODS"
.IX Header "METHODS"
Mojo::SQLite::Results inherits all methods from Mojo::Base and implements
the following new ones.
.SS "new"
.IX Subsection "new"
.Vb 3
\&  my $results = Mojo::SQLite::Results\->new;
\&  my $results = Mojo::SQLite::Results\->new(sth => $sth);
\&  my $results = Mojo::SQLite::Results\->new({sth => $sth});
.Ve
.PP
Construct a new Mojo::SQLite::Results object.
.SS "array"
.IX Subsection "array"
.Vb 1
\&  my $array = $results\->array;
.Ve
.PP
Fetch next row from \*(L"sth\*(R" and return it as an array reference. Note that
\&\*(L"finish\*(R" needs to be called if you are not fetching all the possible rows.
.PP
.Vb 4
\&  # Process one row at a time
\&  while (my $next = $results\->array) {
\&    say $next\->[3];
\&  }
.Ve
.SS "arrays"
.IX Subsection "arrays"
.Vb 1
\&  my $collection = $results\->arrays;
.Ve
.PP
Fetch all rows from \*(L"sth\*(R" and return them as a Mojo::Collection object
containing array references.
.PP
.Vb 2
\&  # Process all rows at once
\&  say $results\->arrays\->reduce(sub { $a + $b\->[3] }, 0);
.Ve
.SS "columns"
.IX Subsection "columns"
.Vb 1
\&  my $columns = $results\->columns;
.Ve
.PP
Return column names as an array reference.
.PP
.Vb 2
\&  # Names of all columns
\&  say for @{$results\->columns};
.Ve
.SS "expand"
.IX Subsection "expand"
.Vb 2
\&  $results = $results\->expand(json => \*(Aqsome_json\*(Aq);
\&  $results = $results\->expand(json => [\*(Aqsome_json\*(Aq,\*(Aqother_json\*(Aq]);
.Ve
.PP
Decode specified fields from a particular format to Perl values for all rows.
Currently only the \f(CW\*(C`json\*(C'\fR text format is recognized. The names must exactly
match the column names as returned by \*(L"columns\*(R"; it is recommended to use
explicit aliases in the query for consistent column names.
.PP
.Vb 2
\&  # Expand JSON
\&  $results\->expand(json => \*(Aqjson_field\*(Aq)\->hashes\->map(sub { $_\->{foo}{bar} })\->join("\en")\->say;
.Ve
.SS "finish"
.IX Subsection "finish"
.Vb 1
\&  $results\->finish;
.Ve
.PP
Indicate that you are finished with \*(L"sth\*(R" and will not be fetching all the
remaining rows.
.SS "hash"
.IX Subsection "hash"
.Vb 1
\&  my $hash = $results\->hash;
.Ve
.PP
Fetch next row from \*(L"sth\*(R" and return it as a hash reference. Note that
\&\*(L"finish\*(R" needs to be called if you are not fetching all the possible rows.
.PP
.Vb 4
\&  # Process one row at a time
\&  while (my $next = $results\->hash) {
\&    say $next\->{money};
\&  }
.Ve
.SS "hashes"
.IX Subsection "hashes"
.Vb 1
\&  my $collection = $results\->hashes;
.Ve
.PP
Fetch all rows from \*(L"sth\*(R" and return them as a Mojo::Collection object
containing hash references.
.PP
.Vb 2
\&  # Process all rows at once
\&  say $results\->hashes\->reduce(sub { $a + $b\->{money} }, 0);
.Ve
.SS "last_insert_id"
.IX Subsection "last_insert_id"
.Vb 1
\&  my $id = $results\->last_insert_id;
.Ve
.PP
Returns the rowid <https://www.sqlite.org/c3ref/last_insert_rowid.html> of the
most recent successful \f(CW\*(C`INSERT\*(C'\fR.
.SS "rows"
.IX Subsection "rows"
.Vb 1
\&  my $num = $results\->rows;
.Ve
.PP
Number of rows. Note that for \f(CW\*(C`SELECT\*(C'\fR statements, this count will not be
accurate until all rows have been fetched.
.SS "text"
.IX Subsection "text"
.Vb 1
\&  my $text = $results\->text;
.Ve
.PP
Fetch all rows from \*(L"sth\*(R" and turn them into a table with
\&\*(L"tablify\*(R" in Mojo::Util.
.SH "BUGS"
.IX Header "BUGS"
Report any issues on the public bugtracker.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dan Book, \f(CW\*(C`dbook@cpan.org\*(C'\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2015, Dan Book.
.PP
This library is free software; you may redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojo::SQLite
