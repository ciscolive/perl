.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Record::DHCID 3"
.TH Infoblox::DNS::Record::DHCID 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Record::DHCID \- DNS DHCID record object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1DHCID DNS\s0 resource record (\s-1RR\s0) is used to associate the \s-1DNS\s0 domain names and \s-1DHCP\s0 clients using these domain names.
.PP
Note that insert/update operations are not allowed for this object.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in Infoblox::Session module that you can apply to the object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DNS DHCID object:
\&
\&  name    \- Optional. Host name in string format.
\&  view    \- Optional. The DNS view in which the DHCID record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&  dhcid   \- Optional. Base\-64 encoded string that contains client information.
\&  zone    \- Optional. A zone name in FQDN format.
\&  creator \- Optional. Record creator.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # get all DNS DHCID records in the \*(Aqdomain.com\*(Aq zone of the default view
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DNS::Record::DHCID\*(Aq,
\&     zone   => \*(Aqdomain.com\*(Aq,
\&     view   => \*(Aqdefault\*(Aq );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specifc object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DNS::Record::DHCID\*(Aq,
\&     name   => \*(Aqdhcid.domain.com\*(Aq,
\&     view   => \*(Aqdefault\*(Aq );
\&
\& # find the desired object from the retrieved list.
\& my $desired_object = $retrieved_objs[0];
\&
\& # Submit for removal
\& my $response = $session\->remove($desired_object);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DNS DHCID record object:
\&
\&  name    \- Optional. A name in FQDN (Fully Qualified Domain Name) format (regular expression).
\&  view    \- Optional. The DNS view in which the DHCID record is located. By default, all DNS views are searched. But if you omit this attribute and specify a zone, the appliance searches the \*(Aqdefault\*(Aq view only.
\&  dhcid   \- Optional. Base\-64 encoded string that contains client information (regexp).
\&  zone    \- Optional. A zone name in FQDN format.
\&  creator \- Optional. Record creator.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # search for all DNS DHCID objects that match \*(Aqdomain.com\*(Aq in the default DNS view
\& my @retrieved_objs = $session\->search(
\&     object => \*(AqInfoblox::DNS::Record::DHCID\*(Aq,
\&     name   => \*(Aqdomain\e.com\*(Aq,
\&     view   => \*(Aqdefault\*(Aq );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a \s-1DHCID\s0 record.
.PP
Note that this is a read-only object.
.SS "creator( )"
.IX Subsection "creator( )"
.RS 4
Use this method to retrieve the record creator. This is a read-only attribute.
.IP "\fBParamter\fR" 4
.IX Item "Paramter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Valid return values are '\s-1STATIC\s0', '\s-1DYNAMIC\s0', and '\s-1SYSTEM\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get creator value
\& my $value = $object\->creator();
.Ve
.RE
.RS 4
.RE
.SS "creation_time( )"
.IX Subsection "creation_time( )"
.RS 4
Use this method to retrieve the creation time for the record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Valid return value is the number of seconds that has elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get creation_time value
\& my $value = $object\->creation_time();
.Ve
.RE
.RS 4
.RE
.SS "dhcid( )"
.IX Subsection "dhcid( )"
.RS 4
Use this method to retrieve the Base64 encoded \s-1DHCP\s0 client information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get dhcid value
\& my $value = $object\->dhcid();
.Ve
.RE
.RS 4
.RE
.SS "dns_name( )"
.IX Subsection "dns_name( )"
.RS 4
Use this method to retrieve the name in punycode format. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get dns_name value
\& my $value = $object\->dns_name();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to retrieve the name. This is a read-only attribute.
.Sp
The attribute value can be in unicode format.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get name value
\& my $value = $object\->name();
.Ve
.RE
.RS 4
.RE
.SS "ttl( )"
.IX Subsection "ttl( )"
.RS 4
Use this method to retrieve the Time to Live (\s-1TTL\s0) value. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value, a 32\-bit integer (range from 0 to 4294967295).
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ttl value
\& my $value = $object\->ttl();
.Ve
.RE
.RS 4
.RE
.SS "views( )"
.IX Subsection "views( )"
.RS 4
Use this method to retrieve the view of a \s-1DHCID\s0 record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value: the one-element array that contains Infoblox::DNS::View object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get views value
\& my $value = $object\->views();
\&
\& #Modify views values
\& $object\->views([$view1]);
.Ve
.RE
.RS 4
.RE
.SS "zone( )"
.IX Subsection "zone( )"
.RS 4
Use this method to retrieve the zone name of a \s-1DNS DHCID\s0 record. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get zone value
\& my $zone = $object\->zone();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session\->\fBget()\fR,
Infoblox::Session\->\fBremove()\fR,
Infoblox::Session\->\fBsearch()\fR,
Infoblox::Session,
Infoblox::DNS::View,
Infoblox::DNS::Zone
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
