.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Async::WebSocket::Protocol 3"
.TH Net::Async::WebSocket::Protocol 3 "2020-08-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"Net::Async::WebSocket::Protocol" \- send and receive WebSocket frames
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This subclass of IO::Async::Stream implements an established WebSocket
connection, that has already completed its setup handshaking and is ready to
pass frames.
.PP
Objects of this type would not normally be constructed directly. For WebSocket
clients, see Net::Async::WebSocket::Client, which is a subclass of this.
For WebSocket servers, see Net::Async::WebSocket::Server, which constructs
objects in this class when it accepts a new connection and passes it to its
event handler.
.SH "EVENTS"
.IX Header "EVENTS"
The following events are invoked, either using subclass methods or \s-1CODE\s0
references in parameters:
.SS "on_text_frame"
.IX Subsection "on_text_frame"
.Vb 2
\&   $self\->on_text_frame( $text )
\&   $on_text_frame\->( $self, $text )
.Ve
.PP
Invoked when a text frame is received. It is passed a Unicode character string
formed by decoding the received \s-1UTF\-8\s0 bytes.
.SS "on_frame"
.IX Subsection "on_frame"
.Vb 2
\&   $self\->on_frame( $text )
\&   $on_frame\->( $self, $text )
.Ve
.PP
A synonym for \f(CW\*(C`on_text_frame\*(C'\fR, provided for backward compatibility.
.PP
This may be removed in a later version.
.SS "on_binary_frame, on_ping_frame, on_pong_frame, on_close_frame"
.IX Subsection "on_binary_frame, on_ping_frame, on_pong_frame, on_close_frame"
.Vb 2
\&   $self\->on_..._frame( $bytes )
\&   $on_..._frame\->( $self, $bytes )
.Ve
.PP
Invoked when other types of frame are received. These will be passed plain
byte strings.
.SS "on_raw_frame"
.IX Subsection "on_raw_frame"
.Vb 2
\&   $self\->on_raw_frame( $frame, $bytes )
\&   $on_raw_frame\->( $self, $frame, $bytes )
.Ve
.PP
Invoked when a frame is received that does not have a specific handler defined
of one of the above types. \f(CW$frame\fR will be an instance of
Protocol::WebSocket::Frame.
.SH "PARAMETERS"
.IX Header "PARAMETERS"
The following named parameters may be passed to \f(CW\*(C`new\*(C'\fR or \f(CW\*(C`configure\*(C'\fR:
.IP "on_frame => \s-1CODE\s0" 8
.IX Item "on_frame => CODE"
.PD 0
.IP "on_text_frame => \s-1CODE\s0" 8
.IX Item "on_text_frame => CODE"
.IP "on_binary_frame, on_ping_frame, on_pong_frame, on_close_frame => \s-1CODE\s0" 8
.IX Item "on_binary_frame, on_ping_frame, on_pong_frame, on_close_frame => CODE"
.IP "on_raw_frame => \s-1CODE\s0" 8
.IX Item "on_raw_frame => CODE"
.PD
\&\s-1CODE\s0 references for event handlers.
.IP "masked => \s-1BOOL\s0" 8
.IX Item "masked => BOOL"
Whether frames constructed and sent by this instance will be masked.
.SH "METHODS"
.IX Header "METHODS"
The following methods documented with a trailing call to \f(CW\*(C`\->get\*(C'\fR return
Future instances.
.SS "send_frame"
.IX Subsection "send_frame"
.Vb 1
\&   $self\->send_frame( @args )\->get
.Ve
.PP
Sends a frame to the peer containing containing the given string. The
arguments are passed to Protocol::WebSocket::Frame's \f(CW\*(C`new\*(C'\fR method.
.PP
This method is discouraged in favour of the more specific ones listed below,
and is only provided for back-compatibility or for sending new frame types not
recognised by the specific methods.
.SS "send_text_frame"
.IX Subsection "send_text_frame"
.Vb 1
\&   $self\->send_text_frame( $text, %params )\->get
.Ve
.PP
Sends a text frame to the peer. The given string will be treated as a Unicode
character string, and sent as \s-1UTF\-8\s0 encoded bytes.
.PP
Any additional arguments will be passed as parameters to the underlying
\&\*(L"write\*(R" in IO::Async::Stream call.
.SS "send_\fI\s-1TYPE\s0\fP_frame"
.IX Subsection "send_TYPE_frame"
.Vb 1
\&   $self\->send_binary_frame( $bytes, %params )\->get
\&
\&   $self\->send_ping_frame( $bytes, %params )\->get
\&
\&   $self\->send_pong_frame( $bytes, %params )\->get
\&
\&   $self\->send_close_frame( $bytes, %params )\->get
.Ve
.PP
Sends a frame of the given type to the peer.
.PP
Any additional arguments will be passed as parameters to the underlying
\&\*(L"write\*(R" in IO::Async::Stream call.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Evans <leonerd@leonerd.org.uk>
