.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catmandu::Store::DBI::Bag 3"
.TH Catmandu::Store::DBI::Bag 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catmandu::Store::DBI::Bag \- implementation of a Catmandu::Bag for DBI
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    my $store = Catmandu::Store::DBI\->new(
\&        data_source => "dbi:SQLite:dbname=/tmp/test.db",
\&        bags => {
\&            data => {
\&                mapping => {
\&                    _id => {
\&                        column => \*(Aqid\*(Aq,
\&                        type => \*(Aqstring\*(Aq,
\&                        index => 1,
\&                        unique => 1
\&                    },
\&                    author => {
\&                        type => \*(Aqstring\*(Aq
\&                    },
\&                    subject => {
\&                        type => \*(Aqstring\*(Aq,
\&                    },
\&                    _data => {
\&                        column => \*(Aqdata\*(Aq,
\&                        type => \*(Aqbinary\*(Aq,
\&                        serialize => \*(Aqall\*(Aq
\&                    }
\&                }
\&            }
\&        }
\&    );
\&
\&    my $bag = $store\->bag(\*(Aqdata\*(Aq);
\&
\&    #SELECT
\&    {
\&        #SELECT * FROM DATA WHERE author = \*(AqNicolas\*(Aq
\&        my $iterator = $bag\->select( author => \*(AqNicolas\*(Aq );
\&    }
\&    #CHAINED SELECT
\&    {
\&        #SELECT * FROM DATA WHERE author = \*(AqNicolas\*(Aq AND subject = \*(AqICT\*(Aq
\&        my $iterator = $bag\->select( author => \*(AqNicolas\*(Aq )\->select( subject => \*(AqICT\*(Aq );
\&    }
\&    #COUNT
\&    {
\&        #SELECT * FROM DATA WHERE author = \*(AqNicolas\*(Aq
\&        my $iterator = $bag\->select( author => \*(AqNicolas\*(Aq );
\&
\&        #SELECT COUNT(*) FROM ( SELECT * FROM DATA WHERE author = \*(AqNicolas\*(Aq )
\&        my $count = $iterator\->count();
\&    }
\&    #DETECT
\&    {
\&        #SELECT * FROM DATA WHERE author = \*(AqNicolas\*(Aq AND subject = \*(AqICT\*(Aq LIMIT 1
\&        my $record = $bag\->select( author => \*(AqNicolas\*(Aq )\->detect( subject => \*(AqICT\*(Aq );
\&    }
\&
\&    #NOTES
\&    {
\&
\&        #This creates an iterator with a specialized SQL query:
\&
\&        #SELECT * FROM DATA WHERE author = \*(AqNicolas\*(Aq
\&        my $iterator = $bag\->select( author => \*(AqNicolas\*(Aq );
\&
\&        #But this does not
\&        my $iterator2 = $iterator\->select( title => "Hello world" );
\&
\&        #\*(Aqtitle\*(Aq does not have a corresponding table column, so it falls back to the default implementation,
\&        #and loops over every record.
\&
\&    }
\&    {
\&
\&        #this is faster..
\&        my $iterator = $bag\->select( author => \*(AqNicolas\*(Aq )\->select( title => \*(AqHello world\*(Aq);
\&
\&        #..than
\&        my $iterator2 = $bag\->select( title => \*(AqHello world\*(Aq )\->select( author => \*(AqNicolas\*(Aq );
\&
\&        #reason:
\&
\&        #   the select statement of $iterator creates a specialized query, and so reduces the amount of records to loop over.
\&        #   $iterator is a L<Catmandu::Store::DBI::Iterator>.
\&
\&        #   the select statement of $iterator2 does not have a specialized query, so it\*(Aqs a generic L<Catmandu::Iterator>.
\&        #   the second select statement of $iterator2 receives this generic object as its source, and can only loop over its records.
\&
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Catmandu::Store::DBI::Bag provides some method overrides specific for \s-1DBI\s0 interfaces,
to make querying more efficient.
.SH "METHODS"
.IX Header "METHODS"
.SS "store_with_table"
.IX Subsection "store_with_table"
Equivalent to the \f(CW\*(C`store\*(C'\fR accessor, but ensures that the table for this bag exists.
.ie n .SS "select($key => $val)"
.el .SS "select($key => \f(CW$val\fP)"
.IX Subsection "select($key => $val)"
Overrides equivalent method in Catmandu::Bag.
.PP
Either returns a generic Catmandu::Iterator or a more efficient Catmandu::Store::DBI::Iterator.
.PP
Expect the following behaviour:
.IP "\(bu" 4
the key has a corresponding table column configured
.Sp
a \s-1SQL\s0 where clause is created in the background:
.Sp
\&.. \s-1WHERE\s0 \f(CW$key\fR = \f(CW$val\fR
.Sp
Chained select statements with existing table columns result in a combined where clause:
.Sp
.Vb 1
\&    .. WHERE $key1 = $val1 AND $key2 = $val2 ..
.Ve
.Sp
The returned object is a Catmandu::Store::DBI::Iterator, instead of the generic Catmandu::Iterator.
.IP "\(bu" 4
the key does not have a corresponding table column configured
.Sp
The returned object is a generic Catmandu::Iterator.
.Sp
This iterator can only loop over the records provided by the previous Catmandu::Iterable.
.PP
A few important notes:
.IP "\(bu" 4
A select statement only results in a Catmandu::Store::DBI::Iterator, when it has a mapped key,
and the previous iterator is either a Catmandu::Store::DBI::Bag or a Catmandu::Store::DBI::Iterator.
.IP "\(bu" 4
As soon as the returned object is a generic Catmandu::Iterator, any following select statement
with mapped columns will not make a more efficient Catmandu::Store::DBI::Iterator.
.PP
In order to make your chained statements efficient, do the following:
.IP "\(bu" 4
create indexes on the table columns
.IP "\(bu" 4
put select statements with mapped keys in front, and those with non mapped keys at the end.
.PP
To configure table columns, see Catmandu::Store::DBI.
.ie n .SS "detect($key => $val)"
.el .SS "detect($key => \f(CW$val\fP)"
.IX Subsection "detect($key => $val)"
Overrides equivalent method in Catmandu::Bag.
.PP
Also returns first record where \f(CW$key\fR matches \f(CW$val\fR.
.PP
Works like the select method above, but adds the \s-1SQL\s0 statement '\s-1LIMIT 1\s0' to the current \s-1SQL\s0 query in the background.
.SS "\fBfirst()\fP"
.IX Subsection "first()"
Overrides equivalent method in Catmandu::Bag.
.PP
Also returns first record using the current iterator.
.PP
The parent method uses a generator, but fetches only one record.
.PP
This method adds the \s-1SQL\s0 statement '\s-1LIMIT 1\s0' to the current \s-1SQL\s0 query.
.SS "\fBcount()\fP"
.IX Subsection "count()"
Overrides equivalent method in Catmandu::Bag.
.PP
When the source is a Catmandu::Store::DBI::Bag, or a Catmandu::Store::DBI::Iterator,
a specialized \s-1SQL\s0 query is created:
.PP
.Vb 1
\&    SELECT COUNT(*) FROM TABLE WHERE (..)
.Ve
.PP
The select statement of the source is between the parenthesises.
