.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DNS::Nameserver 3"
.TH Infoblox::DNS::Nameserver 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DNS::Nameserver \- DNS Nameserver object
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Manipulates a Nameserver object that contains information about the domain name space.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 12
\& my $nameserver = Infoblox::DNS::Nameserver\->new(
\&     ipv4addr  => $ipv4addr,            #Required if $ipv6addr is not present
\&     ipv6addr  => $ipv6addr,            #Required if $ipv4addr is not present
\&     name      => $fqdn,                #Required if this name server is not used to represent an external DDNS server
\&     ddns_zone => $string,              #Required if this name server is used to represent an external DDNS server
\&     gss_tsig_domain  => $string,       #Optional / Default is undefined
\&     gss_tsig_dns_principal => $string, #Optional / Default is undefined
\&     stealth   => "true" | "false",     #Optional / Default is "false"
\&     TSIGkey   => $string | ":2xCOMPAT" #Optional / Default is undefined
\&     TSIGname  => $string,              #Optional / Default is undefined
\&     TSIGalgorithm => "HMAC\-MD5" | "HMAC\-SHA256" ,  #Optional / Default is "HMAC\-MD5"
\& );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to apply to a nameserver object.
.SS "Infoblox::DHCP::View\->external_ddns_primaries( )"
.IX Subsection "Infoblox::DHCP::View->external_ddns_primaries( )"
.RS 4
Use this function to specify a nameserver to send \s-1DDNS\s0 updates to at the network view level.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 7
\& #Construct an object
\&   my $nameserver = Infoblox::DNS::Nameserver\->new(
\&     ipv4addr  => "1.2.3.4",
\&     TSIGname  => "tsig_name",
\&     TSIGkey   => "ZX1jVJl7C58GT/sc7Q3uca==",
\&     ddns_zone => "zone1"
\& );
\&
\& #Construct an object
\&   my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&     ipv4addr  => "1.2.3.5",
\&     TSIGname  => "tsig_name",
\&     TSIGkey   => "ZX1jVJl7C58GT/sc7Q3uca==",
\&     ddns_zone => "zone2"
\& );
\&
\& # Configure Nameserver
\& my $response = $View\->external_ddns_primaries([$nameserver,$nameserver1]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DNS::Zone\->delegate_to( )"
.IX Subsection "Infoblox::DNS::Zone->delegate_to( )"
.RS 4
Use this function to specify a nameserver at the zone level.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct an object
\&   my $nameserver = Infoblox::DNS::Nameserver\->new(
\&     name      => "ns1.test.com",
\&     ipv4addr  => "4.4.7.7",
\& );
\&
\& # Configure Nameserver
\& my $response = $Zone\->delegate_to([$nameserver]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DNS::Zone\->forward_to( )"
.IX Subsection "Infoblox::DNS::Zone->forward_to( )"
.RS 4
Use this function to specify a nameserver at the zone level.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& #Construct an object
\&   my $nameserver = Infoblox::DNS::Nameserver\->new(
\&     name      => "ns2.test.com",
\&     ipv4addr  => "4.4.6.6",
\& );
\&
\& # Configure Nameserver
\& my $response = $Zone\->forward_to([$nameserver]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DNS::Zone\->secondaries( )"
.IX Subsection "Infoblox::DNS::Zone->secondaries( )"
.RS 4
Use this function to specify a nameserver at the zone level.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Construct an object
\&   my $nameserver = Infoblox::DNS::Nameserver\->new(
\&     name      => "ns3.test.com",
\&     ipv4addr  => "4.5.6.4",
\&     stealth   => "false",
\&     TSIGname  => "tsig_name",
\&     TSIGkey   => "ZX1jVJl7C58GT/sc7Q3uca==",
\& );
\&
\& #Construct an object
\&   my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&     name      => "ns4.test.com",
\&     ipv6addr  => "2009::546",
\&     stealth   => "false",
\&     TSIGname  => "tsig_name",
\&     TSIGkey   => "ZX1jVJl7C58GT/sc7Q3uca==",
\& );
\&
\& # Configure Nameserver
\& my $response = $Zone\->secondaries([$nameserver,$nameserver1]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::DNS::Zone\->multiple_primaries( )"
.IX Subsection "Infoblox::DNS::Zone->multiple_primaries( )"
.RS 4
Use this function to specify nameservers at the zone level.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Construct an object
\&   my $nameserver = Infoblox::DNS::Nameserver\->new(
\&     name      => "ns4.test.com",
\&     ipv4addr  => "4.4.5.6",
\&     stealth   => "false",
\&     TSIGname  => "tsig_name",
\&     TSIGkey   => "ZX1jVJl7C58GT/sc7Q3uca==",
\& );
\&
\& #Construct an object
\&   my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&     name      => "nsv6.test.com",
\&     ipv6addr  => "2004::223",
\&     stealth   => "false",
\&     TSIGname  => "tsig_name",
\&     TSIGkey   => "ZX1jVJl7C58GT/sc7Q3uca==",
\& );
\&
\& # Configure Nameserver
\& my $response = $Zone\->multiple_primaries([$nameserver,$nameserver1]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member\->prefer_resolver( )"
.IX Subsection "Infoblox::Grid::Member->prefer_resolver( )"
.RS 4
Use this function to specify a nameserver at the grid member level.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Construct an object
\&   my $nameserver = Infoblox::DNS::Nameserver\->new(
\&     ipv4addr  => "10.7.5.6",
\& );
\&
\& # Configure Nameserver
\& my $response = $grid_member_object\->prefer_resolver([$nameserver]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member\->alternate_resolver( )"
.IX Subsection "Infoblox::Grid::Member->alternate_resolver( )"
.RS 4
Use this function to specify a nameserver at the grid member level.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Construct an object
\&   my $nameserver = Infoblox::DNS::Nameserver\->new(
\&     ipv4addr  => "10.10.5.6",
\& );
\&
\& # Configure Nameserver
\& my $response = $grid_member_object\->alternate_resolver([$nameserver]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::DNS::Nsgroup\->multiple_primaries( )"
.IX Subsection "Infoblox::Grid::DNS::Nsgroup->multiple_primaries( )"
.RS 4
Use this function to specify nameservers at the grid \s-1DNS\s0 level.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Construct an object
\&   my $nameserver = Infoblox::DNS::Nameserver\->new(
\&     name      => "ns5.test.com",
\&     ipv4addr  => "10.10.5.6",
\&     stealth   => "false",
\&     TSIGname  => "tsig_name",
\&     TSIGkey   => "Zx1JVjl7C58gT/sc7Q3uca==",
\& );
\&
\& # Configure Nameserver
\& my $response = $grid_member_object\->multiple_primaries([$nameserver]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::DNS::Nsgroup\->secondaries( )"
.IX Subsection "Infoblox::Grid::DNS::Nsgroup->secondaries( )"
.RS 4
Use this function to specify a nameserver at the grid \s-1DNS\s0 level.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Construct an object
\&   my $nameserver = Infoblox::DNS::Nameserver\->new(
\&     name      => "ns5.test.com",
\&     ipv4addr  => "10.10.5.6",
\&     stealth   => "false",
\&     TSIGname  => "tsig_name",
\&     TSIGkey   => "Zx1JVjl7C58gT/sc7Q3uca==",
\& );
\&
\& # Configure Nameserver
\& my $response = $grid_member_object\->secondaries([$nameserver]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a Nameserver object.
.SS "ddns_zone( )"
.IX Subsection "ddns_zone( )"
.RS 4
Use this method to set or retrieve the zone name served by the name server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired ddns_zone for the name server in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting ddns_zone
\& my $ddns_zone = $nameserver\->ddns_zone();
\& # Modifying ddns_zone
\& $nameserver\->ddns_zone("zone2");
.Ve
.RE
.RS 4
.RE
.SS "gss_tsig_domain( )"
.IX Subsection "gss_tsig_domain( )"
.RS 4
Use this method to set or retrieve the domain in which GSS-TSIG for dynamic updates is enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired domain name in string format with a maximum of 1023 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting gss_tsig_domain
\& my $gss_tsig_domain = $nameserver\->gss_tsig_domain();
\& # Modifying gss_tsig_domain
\& $nameserver\->gss_tsig_domain("mydomain");
.Ve
.RE
.RS 4
.RE
.SS "gss_tsig_dns_principal( )"
.IX Subsection "gss_tsig_dns_principal( )"
.RS 4
Use this method to set or retrieve the principal name in which GSS-TSIG for dynamic updates is enabled.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired principal name in string format with a maximum of 1023 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting gss_tsig_dns_principal
\& my $gss_tsig_dns_principal = $nameserver\->gss_tsig_dns_principal();
\& # Modifying gss_tsig_dns_principal
\& $nameserver\->gss_tsig_dns_principal("local1/a.localhost@LOCAL");
.Ve
.RE
.RS 4
.RE
.SS "ipv4addr( )"
.IX Subsection "ipv4addr( )"
.RS 4
Use this method to set or retrieve the IPv4 address. Required only when ipv6 is not specified.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv4 address is a 32\-bit number in dotted decimal notation. It consists of four 8\-bit groups of decimal digits separated by decimal points (example: 192.168.1.2).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting ipv4addr
\& my $ipv4addr = $nameserver\->ipv4addr();
\& # Modifying ipv4addr
\& $nameserver\->ipv4addr("10.0.0.3");
.Ve
.RE
.RS 4
.RE
.SS "ipv6addr( )"
.IX Subsection "ipv6addr( )"
.RS 4
Use this method to set or retrieve the IPv6 address. Required only when ipv4 is not specified.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An IPv6 address is a 128\-bit number in colon hexadecimal notation. It consists of eight groups of four hexadecimal digits separated by colons
(example: 12ab:0000:0000:0123:4567:89ab:0000:cdef).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting ipv6addr
\& my $ipv6addr = $nameserver\->ipv6addr();
\& # Modifying ipv6addr
\& $nameserver\->ipv6addr("12ab::345");
.Ve
.RE
.RS 4
.RE
.SS "ms_parent_delegated( )"
.IX Subsection "ms_parent_delegated( )"
.RS 4
Use this method to retrieve the ms_parent_delegated flag. If the zone is a delegation and the primary server of the parent zone is a Microsoft (r) server,  this flag is set to \*(L"true\*(R" if the \s-1FQDN\s0 and \s-1IP\s0 address in the delegation zone's \s-1NS\s0 record matches the \s-1FQDN\s0 and \s-1IP\s0 address of  its authoritative name server.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_parent_delegated
\& my $ms_parent_delegated = $member\->ms_parent_delegated();
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve a resolvable domain name for the server.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired name for the name server in \s-1FQDN\s0 format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting name
\& my $name = $nameserver\->name();
\& # Modifying name
\& $nameserver\->name("ns2.domain.com");
.Ve
.RE
.RS 4
.RE
.SS "stealth( )"
.IX Subsection "stealth( )"
.RS 4
Use this method to make the name server stealth or not. When the attribute stealth is \f(CW"true"\fR, the name server is in stealth mode. This means that its \s-1NS\s0 record is not published among the zone data, and it does not respond to queries from resolvers and other name servers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \f(CW"true"\fR or \f(CW"false"\fR.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting stealth
\& my $stealth = $nameserver\->stealth();
\& # Modifying stealth
\& $nameserver\->stealth("true");
.Ve
.RE
.RS 4
.RE
.SS "TSIGalgorithm( )"
.IX Subsection "TSIGalgorithm( )"
.RS 4
Use this method to set or retrieve the algorithm of the \s-1TSIG\s0 key you want to use.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired algorithm of the \s-1TSIG\s0 key. Valid values are \*(L"\s-1HMAC\-SHA256\*(R"\s0 and \*(L"\s-1HMAC\-MD5\*(R",\s0 which is the default.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting TSIGalgorithm
\& my $TSIGalgorithm = $nameserver\->TSIGalgorithm();
\& # Modifying TSIGalgorithm
\& $nameserver\->TSIGalgorithm("HMAC\-SHA256");
.Ve
.RE
.RS 4
.RE
.SS "TSIGkey( )"
.IX Subsection "TSIGkey( )"
.RS 4
Use this method to set or retrieve the  \s-1TSIG\s0 key. This key must also be present on the external
primary server. You can generate a \s-1TSIG\s0 key, or you can obtain the \s-1TSIG\s0 key name and key from the
external name server either by accessing the appliance yourself or by requesting the appliance
administrator to deliver them to you through some out-of-band mechanism. Then type or
copy-and-paste that name and key into the appropriate fields.
.Sp
\&\s-1OR\s0
.Sp
Use \s-1DNS\s0 One 2.x \s-1TSIG:\s0 If you want to use \s-1TSIG\s0 authentication and the external primary name server
is an Infoblox appliance running \s-1DNS\s0 One 2.x code. The local appliance generates the required \s-1TSIG\s0 key for
authenticating \s-1DNS\s0 messages to and from appliances running \s-1DNS\s0 One 2.x code.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired TSIGkey of the name server in string format. Valid values are \f(CW":2xCOMPAT"\fR or a \s-1TSIG\s0 key string.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting TSIGkey
\& my $TSIGkey = $nameserver\->TSIGkey();
\& # Modifying TSIGname
\& $nameserver\->TSIGkey("ZX1jVJl7C58GT/sc7Q3uc2==");
.Ve
.RE
.RS 4
.RE
.SS "TSIGname( )"
.IX Subsection "TSIGname( )"
.RS 4
Use this method to set or retrieve the name of the \s-1TSIG\s0 key you want to use.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired name of the \s-1TSIG\s0 key in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Getting TSIGname
\& my $TSIGname = $nameserver\->TSIGname();
\& # Modifying TSIGname
\& $nameserver\->TSIGname("tsig2_name");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object such as add, modify. This sample also includes error handling for the operations.
.PP
\&\fB##Preparation prior to a \s-1DNS\s0 nameserver object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create a nameserver object\fR
.PP
.Vb 11
\&  my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns1.domain.com",
\&     ipv4addr => "10.4.5.6",
\&     stealth  => "false",
\&     TSIGname => "tsig_name",
\&     TSIGkey  => "ZX1jVJl7C58GT/sc7Q3ucA==",
\& );
\&  unless ($nameserver1){
\&      die("Construct Nameserver failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\&
\& print "Nameserver object created successfully\en";
.Ve
.PP
\&\fB# Create a zone and use \f(CB$nameserver1\fB\fR
.PP
.Vb 5
\&  #create a zone and use $nameserver1
\&  my $zone = Infoblox::DNS::Zone\->new(
\&     name    => "domain.com",
\&     multiple_primaries => [$nameserver1],
\& );
\&
\& #put zone into session
\& $session\->add($zone)
\&   or die("Zone creation failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\&
\& print " Zone creation successful\en";
.Ve
.PP
\&\fB#Get and modify the name server\fR
.PP
.Vb 5
\& #get Zone object from session
\& my @result = $session\->get(
\&     object => "Infoblox::DNS::Zone",
\&     name   => "domain.com"
\& );
\&
\& unless (scalar(@result) == 0) {
\&     my $zone = $result[0];
\&
\&     if ($zone) {
\&
\&         #modify ipv4addr value
\&         $nameserver1\->ipv4addr("5.5.5.5");
\&         $zone\->multiple_primaries([$nameserver1]);
\&
\&         #update session
\&         $session\->modify($zone)
\&             or die("modify zone domain.com failed: ",
\&                $session\->status_code(), $session\->status_detail());
\&              }
\&          } else {
\&              print "No zone found.";
\&          }
\&####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR,Infoblox::DHCP::View,Infoblox::DNS::Zone, Infoblox::Grid::DHCP, Infoblox::Grid::Member, Infoblox::Grid::DNS::Nsgroup
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
