.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Log::Any 3"
.TH Mojolicious::Plugin::Log::Any 3 "2020-03-31" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Log::Any \- Use other loggers in a Mojolicious application
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package MyApp;
\&  use Mojo::Base \*(AqMojolicious\*(Aq;
\&  
\&  sub startup {
\&    my $self = shift;
\&    
\&    # Log::Any (default)
\&    use Log::Any::Adapter {category => \*(AqMyApp\*(Aq}, \*(AqSyslog\*(Aq;
\&    $self\->plugin(\*(AqLog::Any\*(Aq);
\&    
\&    # Log::Contextual
\&    use Log::Contextual::WarnLogger;
\&    use Log::Contextual \-logger => Log::Contextual::WarnLogger\->new({env_prefix => \*(AqMYAPP\*(Aq});
\&    $self\->plugin(\*(AqLog::Any\*(Aq => {logger => \*(AqLog::Contextual});
\&    
\&    # Log::Dispatch
\&    use Log::Dispatch;
\&    my $logger = Log::Dispatch\->new(outputs => [\*(AqFile::Locked\*(Aq,
\&      min_level => \*(Aqwarning\*(Aq,
\&      filename  => \*(Aq/path/to/file.log\*(Aq,
\&      mode      => \*(Aqappend\*(Aq,
\&      newline   => 1,
\&      callbacks => sub { my %p = @_; \*(Aq[\*(Aq . localtime() . \*(Aq] \*(Aq . $p{message} },
\&    ]);
\&    $self\->plugin(\*(AqLog::Any\*(Aq => {logger => $logger});
\&    
\&    # Log::Dispatchouli
\&    use Log::Dispatchouli;
\&    my $logger = Log::Dispatchouli\->new({ident => \*(AqMyApp\*(Aq, facility => \*(Aqdaemon\*(Aq, to_file => 1});
\&    $self\->plugin(\*(AqLog::Any\*(Aq => {logger => $logger});
\&    
\&    # Log::Log4perl
\&    use Log::Log4perl;
\&    Log::Log4perl\->init($self\->home\->child(\*(Aqlog.conf\*(Aq)\->to_string);
\&    $self\->plugin(\*(AqLog::Any\*(Aq => {logger => \*(AqLog::Log4perl\*(Aq});
\&  }
\&  
\&  # or in a Mojolicious::Lite app
\&  use Mojolicious::Lite;
\&  use Log::Any::Adapter {category => \*(AqMojolicious::Lite\*(Aq}, File => app\->home\->child(\*(Aqmyapp.log\*(Aq), log_level => \*(Aqinfo\*(Aq;
\&  plugin \*(AqLog::Any\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::Log::Any is a Mojolicious plugin that redirects the
application logger to pass its log messages to an external logging framework
using \*(L"attach_logger\*(R" in Mojo::Log::Role::AttachLogger. By default, Log::Any
is used, but a different framework or object may be specified. For Log::Any
or Log::Log4perl, log messages are dispatched with a category of the
application class name, which is \f(CW\*(C`Mojolicious::Lite\*(C'\fR for lite applications.
.PP
The default behavior of the Mojo::Log object to filter messages by level,
keep history, prepend a timestamp, and write log messages to a file or \s-1STDERR\s0
will be suppressed, by setting the application log level to \f(CW\*(C`debug\*(C'\fR (the
lowest level) and removing the default \*(L"message\*(R" in Mojo::Log handler. It is
expected that the logging framework output handler will be configured to handle
these details as necessary. If you want to customize how the logging framework
is attached, use Mojo::Log::Role::AttachLogger directly.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::Log::Any inherits all methods from
Mojolicious::Plugin and implements the following new ones.
.SS "register"
.IX Subsection "register"
.Vb 2
\&  $plugin\->register(Mojolicious\->new);
\&  $plugin\->register(Mojolicious\->new, {logger => $logger});
.Ve
.PP
Register logger in Mojolicious application. Takes the following options:
.IP "logger" 4
.IX Item "logger"
Logging framework or object to pass log messages to, of a type recognized by
\&\*(L"attach_logger\*(R" in Mojo::Log::Role::AttachLogger. Defaults to \f(CW\*(C`Log::Any\*(C'\fR.
.IP "category" 4
.IX Item "category"
Passed through to \*(L"attach_logger\*(R" in Mojo::Log::Role::AttachLogger. Defaults to
the application name.
.IP "prepend_level" 4
.IX Item "prepend_level"
Passed through to \*(L"attach_logger\*(R" in Mojo::Log::Role::AttachLogger.
.SH "BUGS"
.IX Header "BUGS"
Report any issues on the public bugtracker.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dan Book <dbook@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2017 by Dan Book.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojo::Log, Mojo::Log::Role::AttachLogger
