.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Guacamole 3"
.TH Guacamole 3 "2020-08-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Guacamole \- A parser toolkit for Standard Perl
.SH "VERSION"
.IX Header "VERSION"
version 0.007
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Guacamole;
\&    my ($ast) = Guacamole\->parse($string);
.Ve
.SH "DESCRIPITON"
.IX Header "DESCRIPITON"
\&\fBGuacamole\fR is a Perl parser toolkit.
.PP
It can:
.IP "\(bu" 4
Parse Standard Perl
.Sp
This is explained in this document.
.Sp
For \fBStandard Perl\fR, see the next clause.
.IP "\(bu" 4
Check a file is written in Standard Perl
.Sp
This is done by standard, which is where Standard Perl is described.
.IP "\(bu" 4
Lint your code
.Sp
See Guacamole::Linter.
.IP "\(bu" 4
Deparse your code
.Sp
See Guacamole::Deparse.
.IP "\(bu" 4
Rewrite your code
.Sp
There is a proof-of-concept for this and we hope to provide this as a framework.
.SH "Standard Perl"
.IX Header "Standard Perl"
Guacamole only works on Standard Perl. You can read about it here: standard.
.SH "Parser"
.IX Header "Parser"
.Vb 1
\&    my ($ast) = Guacamole\->parse($string);
.Ve
.PP
To parse a string, call Gaucamole's \f(CW\*(C`parse\*(C'\fR method. (This might turn to an
object-oriented interface in the future.)
.PP
It returns a list of results. If it ever returns more than one, this is a bug that
means it couldn't ambiguously parse something. This will later be enforced in the
interface. The current interface is not official.
.SS "\s-1AST\s0 Nodes"
.IX Subsection "AST Nodes"
Guacamole returns an \s-1AST\s0 with two types of nodes.
.PP
.Vb 1
\&    my ($ast) = Guacamole\->parse(\*(Aq$foo = 1\*(Aq);
.Ve
.PP
The above will generate a larger \s-1AST\s0 than you imagine (which might be pruned
in the future). We'll focus on two types of nodes that will appear above.
.PP
\fIRules\fR
.IX Subsection "Rules"
.PP
Rules are the top level expressions. They include the definitions for rules.
They include information on location in the file, length, line, and column.
.PP
.Vb 9
\&    $rule = {
\&        \*(Aqchildren\*(Aq  => [...],
\&        \*(Aqcolumn\*(Aq    => 2,
\&        \*(Aqlength\*(Aq    => 3,
\&        \*(Aqline\*(Aq      => 1,
\&        \*(Aqname\*(Aq      => \*(AqVarIdentExpr\*(Aq,
\&        \*(Aqstart_pos\*(Aq => 1,
\&        \*(Aqtype\*(Aq      => \*(Aqrule\*(Aq,
\&    },
.Ve
.PP
This rule is a \f(CW\*(C`VarIdentExpr\*(C'\fR which is an expression for a variable identity.
.PP
In the code above, it refers to the \f(CW\*(C`foo\*(C'\fR in \f(CW$foo\fR \- which is the identity
itself.
.PP
It has one child, described below under \f(CW\*(C`Lexemes\*(C'\fR.
.PP
\fILexemes\fR
.IX Subsection "Lexemes"
.PP
The child for the \f(CW\*(C`VarIdentExpr\*(C'\fR rule should be the value of the identity.
.PP
.Vb 5
\&    $lexeme = {
\&        \*(Aqname\*(Aq  => \*(Aq\*(Aq,
\&        \*(Aqtype\*(Aq  => \*(Aqlexeme\*(Aq,
\&        \*(Aqvalue\*(Aq => \*(Aqfoo\*(Aq,
\&    };
.Ve
.PP
The \f(CW\*(C`name\*(C'\fR attribute for all lexemes is empty. This is to make it easy to
write code that checks for the value of a rule without having to check whether
it's a rule first.
.SH "THANKS"
.IX Header "THANKS"
.IP "\(bu" 4
Damian Conway
.Sp
For helping understand what is feasible, what isn't, and why, and for having
infinite patience in explaining these.
.IP "\(bu" 4
Jeffrey Kegler
.Sp
For Marpa and helping understand how to use Marpa better.
.IP "\(bu" 4
Gonzalo Diethelm
.Sp
For continuous feedback and support.
.IP "\(bu" 4
H. Merijn Brand (@Tux)
.Sp
For providing the initial production-level test of Guacamole to
help shake many of the bugs in the \s-1BNF.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
standard
.IP "\(bu" 4
Gaucamole::Linter
.IP "\(bu" 4
Guacamole::Deparse
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Sawyer X
.IP "\(bu" 4
Vickenty Fesunov
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Sawyer X.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The MIT (X11) License
.Ve
