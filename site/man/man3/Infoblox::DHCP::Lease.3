.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::Lease 3"
.TH Infoblox::DHCP::Lease 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::Lease \- DHCP Lease object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1DHCP\s0 lease provides information about the lease of an \s-1IP\s0 address to a \s-1DHCP\s0 client, such as the time when the Infoblox appliance issued or freed an \s-1IP\s0 address, the \s-1MAC\s0 address and host name of the client that received the \s-1IP\s0 address, and the grid member that supplied the lease. It allows the Infoblox appliance to store and correlate \s-1DHCP\s0 lease information over the lifetime of a lease.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
.Vb 1
\& This section describes all the methods in the Infoblox::Session module that can be applied to a DHCP Lease object.
.Ve
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching \s-1DHCP\s0 Lease objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP Lease object:
\&
\& ip_address                            \- Optional. IPv4 or IPv6 address of the DHCP lease. Use this, in place of ipv4addr, even for IPv4 addresses.
\& ipv4addr                              \- Optional. IPv4 address (32 bits) of the DHCP lease. This attribute is being deprecated in favor of the ip_address attribute.
\& ipv6_duid                             \- Optional. IPv6 DUID of the DHCP lease. (For IPv6 leases only)
\& protocol                              \- Optional. Specify whether to get IPv4, IPv6, or both leases. Allowed values are: \*(AqIPV4\*(Aq, \*(AqIPV6\*(Aq, and \*(AqBOTH\*(Aq.
\& start_addr                            \- Optional. Start IPv4 or IPv6 address of the DHCP range.
\& end_addr                              \- Optional. End IPv4 or IPv6 address of the DHCP range.
\& network_view                          \- Optional. Name of the network view that contains the lease.
\& mac                                   \- Optional. MAC address of the DHCP lease. (For IPv4 leases only)
\& username                              \- Optional. User name associated with the DHCP lease.
\& client_hostname                       \- Optional. Client hostname of a DHCP lease.
\& fingerprint                           \- Optional. DHCP fingerprint description.
\& remote_id                             \- Optional. Relay agent remote ID, a sub\-option of DHCP option 82. (For IPv4 leases only)
\&
\& discovered_duid                       \- Optional. Discovered DHCPv6 UID.
\& discovered_name                       \- Optional. Discovered name.
\& discoverer                            \- Optional. Discoverer name.
\& first_discovered                      \- Optional. Time of the first discovery.
\& last_discovered                       \- Optional. Time of the last discovery.
\& netbios                               \- Optional. Discovered NetBIOS name.
\& network_component_description         \- Optional. Discovered network component description.
\& network_component_ip                  \- Optional. Discovered network component IP address.
\& network_component_name                \- Optional. Discovered network component name.
\& network_component_port_description    \- Optional. Discovered network component port description.
\& network_component_port_name           \- Optional. Discovered network component port name.
\& network_component_port_number         \- Optional. Discovered network component port number.
\& network_component_type                \- Optional. Discovered network component type.
\& os                                    \- Optional. Discovered OS.
\& port_duplex                           \- Optional. Discovered port duplex settings.
\& port_link_status                      \- Optional. Discovered port link status.
\& port_speed                            \- Optional. Discovered port speed settings.
\& port_status                           \- Optional. Discovered port status settings.
\& port_vlan_description                 \- Optional. Discovered port VLAN description.
\& port_vlan_name                        \- Optional. Discovered port VLAN name.
\& port_vlan_number                      \- Optional. Discovered port VLAN number.
\& v_cluster                             \- Optional. Discovered VMware cluster name. (For IPv4 leases only)
\& v_datacenter                          \- Optional. Discovered VMware datacenter name. (For IPv4 leases only)
\& v_host                                \- Optional. Discovered VMware server name. (For IPv4 leases only)
\& v_name                                \- Optional. Discovered VMware host or virtual machine name. (For IPv4 leases only)
\& v_netadapter                          \- Optional. Discovered VMware physical network adapter name. (For IPv4 leases only)
\& v_switch                              \- Optional. Discovered VMware virtual switch name. (For IPv4 leases only)
\& v_type                                \- Optional. Discovered VMware entity type (possible values: "VirtualMachine", "HostSystem", "VirtualCenter").
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 12
\& #Get a DHCP lease by IP address.
\& my @retrieved_objs = $session\->get(
\&                           object   => "Infoblox::DHCP::Lease",
\&                           ip_address => "10.0.0.10"
\&                           mac      => "22:22:22:22:22:22",
\&                           username => "johndoe"
\&                           );
\& my @retrieved_objs = $session\->get(
\&                           object   => "Infoblox::DHCP::Lease",
\&                           ip_address => "2001::1"
\&                           username => "johndoe"
\&                           );
\&
\& #Get DHCP leases in a DHCP range.
\& my @retrieved_objs = $session\->get(
\&                           object     => "Infoblox::DHCP::Lease" ,
\&                           start_addr => "10.0.0.1",
\&                           end_addr   => "10.0.0.10"
\&                           );
\& my @retrieved_objs = $session\->get(
\&                           object     => "Infoblox::DHCP::Lease" ,
\&                           start_addr => "2001::1",
\&                           end_addr   => "2001::5"
\&                           );
\&
\& #Get DHCP leases by v_type:
\& my @retrieved_objs = $session\->get(
\&   object    => \*(AqInfoblox::DHCP::Lease\*(Aq,
\&   v_type    => \*(AqVirtualMachine\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1DHCP\s0 Lease object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& #Remove a DHCP IPv4 Lease object.
\& my $object = $session\->get(
\&     object   => "Infoblox::DHCP::Lease",
\&     ip_address => "10.0.0.10"
\&     mac      => "22:22:22:22:22:22",
\&     username => "johndoe"
\& );
\& my $response = $session\->remove($object);
\&
\& #Remove a DHCP IPv6 Lease object.
\& my $object = $session\->get(
\&     object   => "Infoblox::DHCP::Lease",
\&     ip_address => "2001::1"
\&     username => "johndoe"
\& );
\& my $response = $session\->remove($object);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DHCP\s0 Lease objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\&  Apply the following attributes to search for a DHCP Lease object:
\&
\&  ip_address                            \- Optional. IPv4 or IPv6 address of the DHCP lease. Use this, in place of ipv4addr, even for IPv4 addresses (regular expression).
\&  ipv4addr                              \- Optional. IPv4 address (32 bits) of the DHCP lease. This attribute is being deprecated in favor of the ip_address attribute (regular exression).
\&  ipv6_duid                             \- Optional. IPv6 DUID of the DHCP lease (regular expression). (For IPv6 leases only)
\&  protocol                              \- Optional. Specify whether to get IPv4, IPv6, or both leases. Allowed values are: \*(AqIPV4\*(Aq, \*(AqIPV6\*(Aq, and \*(AqBOTH\*(Aq.
\&  mac                                   \- Optional. MAC address of the DHCP lease (regular expression). (For IPv4 leases only)
\&  network_view                          \- Optional. Name of the network view that contains the lease.
\&  username                              \- Optional. User name associated with the DHCP lease (regular expression).
\&  start_addr                            \- Optional. Start IPv4 or IPv6 address of the DHCP range.
\&  end_addr                              \- Optional. End IPv4 or IPv6 address of the DHCP range.
\&  client_hostname                       \- Optional. Client hostname of a DHCP lease (regular expression).
\&  fingerprint                           \- Optional. DHCP fingerprint description (regular expression).
\&  remote_id                             \- Optional. Relay agent remote ID, a sub\-option of DHCP option 82 (regular expression).
\&
\&  discovered_duid                       \- Optional. Discovered DHCPv6 UID (exact search only).
\&  discovered_name                       \- Optional. Discovered name(regex).
\&  discoverer                            \- Optional. Discoverer name(regex).
\&  first_discovered                      \- Optional. Time of the first discovery (in ISO format, exact search only).
\&  last_discovered                       \- Optional. Time of the last discovery (in ISO format, exact search only).
\&  netbios                               \- Optional. Discovered NetBIOS name(regex).
\&  network_component_description         \- Optional. Discovered network component description(regex).
\&  network_component_ip                  \- Optional. Discovered network component IP address(regex).
\&  network_component_name                \- Optional. Discovered network component name(regex).
\&  network_component_port_description    \- Optional. Discovered network component port description(regex).
\&  network_component_port_name           \- Optional. Discovered network component port name(regex).
\&  network_component_port_number         \- Optional. Discovered network component port number (exact search only).
\&  network_component_type                \- Optional. Discovered network component type(regex).
\&  os                                    \- Optional. Discovered OS (regex).
\&  port_duplex                           \- Optional. Discovered port duplex settings (exact search only).
\&  port_link_status                      \- Optional. Discovered port link status (exact search only).
\&  port_speed                            \- Optional. Discovered port speed settings (exact search only).
\&  port_status                           \- Optional. Discovered port status settings (exact search only).
\&  port_vlan_description                 \- Optional. Discovered port VLAN description(regex).
\&  port_vlan_name                        \- Optional. Discovered port VLAN name(regex).
\&  port_vlan_number                      \- Optional. Discovered port VLAN number(exact search only).
\&  v_cluster                             \- Optional. Discovered VMware cluster name (regular expression). (For IPv4 leases only)
\&  v_datacenter                          \- Optional. Discovered VMware datacenter name (regular expression). (For IPv4 leases only)
\&  v_host                                \- Optional. Discovered VMware server name (regular expression). (For IPv4 leases only)
\&  v_name                                \- Optional. Discovered VMware host or virtual machine name (regular expression). (For IPv4 leases only)
\&  v_netadapter                          \- Optional. Discovered VMware physical network adapter name (regular expression). (For IPv4 leases only)
\&  v_switch                              \- Optional. Discovered VMware virtual switch name (regular expression). (For IPv4 leases only)
\&  v_type                                \- Optional. Discovered VMware entity type (possible values: "VirtualMachine", "HostSystem", "VirtualCenter"). (For IPv4 leases only)
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 12
\& #Search a DHCP lease.
\& my @result_array = $session\->search(
\&                     object   => "Infoblox::DHCP::Lease",
\&                     ip_address => "^10\e.*",
\&                     mac      => "22:.*",
\&                     username => "john.*"
\&                     );
\& my @result_array = $session\->search(
\&                     object   => "Infoblox::DHCP::Lease",
\&                     ip_address => "^ff::.*",
\&                     username => "john.*"
\&                     );
\&
\& # search a DHCP lease by v_datacenter:
\& my @retrieved_objs = $session\->search(
\&    object       => \*(AqInfoblox::DHCP::Lease\*(Aq,
\&    v_datacenter => \*(Aqtest.*\*(Aq);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to configure and retrieve the attribute value of a \s-1DHCP\s0 Lease object.
.SS "billing_class( )"
.IX Subsection "billing_class( )"
.RS 4
Use this method to retrieve the billing_class of a \s-1DHCP\s0 Lease object. This method specifies the class to which this lease is currently billed. This method is for IPv4 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get billing_class
\& my $billing_class = $lease\->billing_class();
.Ve
.RE
.RS 4
.RE
.SS "binding_state( )"
.IX Subsection "binding_state( )"
.RS 4
Use this method to retrieve the binding state for the current lease. The lease state can be one of the following:
.Sp
.Vb 5
\& Free     : The lease is available for clients to use.
\& Active   : The lease is currently in use by a DHCP client.
\& Expired  : The lease was in use, but the DHCP client never renewed it, so it is no longer valid.
\& Released : The DHCP client returned the lease to the appliance.
\& Abandoned: The Infoblox appliance cannot lease this IP address because the appliance received a response when it pinged the address.
.Ve
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get binding_state
\& my $binding_state = $lease\->binding_state();
.Ve
.RE
.RS 4
.RE
.SS "client_hostname( )"
.IX Subsection "client_hostname( )"
.RS 4
Use this method to retrieve the client_hostname of a \s-1DHCP\s0 Lease object. This method specifies the host name that the \s-1DHCP\s0 client sends to the Infoblox appliance using \s-1DHCP\s0 option 12.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get client_hostname
\& my $client_hostname = $lease\->client_hostname();
.Ve
.RE
.RS 4
.RE
.SS "cltt( )"
.IX Subsection "cltt( )"
.RS 4
Use this method to retrieve the \s-1CLTT\s0 (Client Last Transaction Time) value of a \s-1DHCP\s0 Lease object. This method specifies the time of the last transaction with the \s-1DHCP\s0 client for this lease.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get cltt
\& my $cltt = $lease\->cltt();
.Ve
.RE
.RS 4
.RE
.SS "discovered_data( )"
.IX Subsection "discovered_data( )"
.RS 4
Use this method to retrieve the discovered data of a \s-1DHCP\s0 Lease object. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::Discovery::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_data value
\& my $discovered_data = $object\->discovered_data();
.Ve
.RE
.RS 4
.RE
.SS "discovered_duid( )"
.IX Subsection "discovered_duid( )"
.RS 4
Use this method to retrieve the discovered DHCPv6 \s-1UID\s0 (\s-1DUID\s0) of a \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discovered name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_duid
\& my $discovered_duid = $bindptr\->discovered_duid();
.Ve
.RE
.RS 4
.RE
.SS "discovered_name( )"
.IX Subsection "discovered_name( )"
.RS 4
Use this method to retrieve the discovered name of a \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discovered name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discovered_name
\& my $discovered_name = $lease\->discovered_name();
.Ve
.RE
.RS 4
.RE
.SS "discoverer( )"
.IX Subsection "discoverer( )"
.RS 4
Use this method to retrieve the discoverer of a \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the discoverer value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discoverer
\& my $discoverer = $lease\->discoverer();
.Ve
.RE
.RS 4
.RE
.SS "ends( )"
.IX Subsection "ends( )"
.RS 4
Use this method to retrieve the end time value of a \s-1DHCP\s0 Lease object. This method specifies the day, date, and time that a lease ended.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ends
\& my $ends = $lease\->ends();
.Ve
.RE
.RS 4
.RE
.SS "fingerprint( )"
.IX Subsection "fingerprint( )"
.RS 4
Use this method to retrieve the descripiton of the \s-1DHCP\s0 fingerprint of a \s-1DHCP\s0 Lease object. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get fingerprint
\& my $fingerprint = $lease\->fingerprint();
.Ve
.RE
.RS 4
.RE
.SS "first_discovered( )"
.IX Subsection "first_discovered( )"
.RS 4
Use this method to retrieve the date and time when the \s-1DHCP\s0 Lease object was first discovered.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the date and time when the \s-1DHCP\s0 Lease object was first discovered.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get first_discovered
\& my $first_discovered = $lease\->first_discovered();
.Ve
.RE
.RS 4
.RE
.SS "hardware( )"
.IX Subsection "hardware( )"
.RS 4
Use this method to retrieve the hardware type of a \s-1DHCP\s0 Lease object. This method specifies the \s-1MAC\s0 address of the network interface on which the lease will be used. This method is for IPv4 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get hardware
\& my $hardware = $lease\->hardware();
.Ve
.RE
.RS 4
.RE
.SS "ip_address( )"
.IX Subsection "ip_address( )"
.RS 4
Use this method to retrieve the IPv4 or IPv6 address that the Infoblox appliance leased to the \s-1DHCP\s0 client. Use this method, in place of the \fBipv4addr()\fR method, even for IPv4 addresses.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ip_address
\& my $ip_address = $lease\->ip_address();
.Ve
.RE
.RS 4
.RE
.SS "ipv4addr( )"
.IX Subsection "ipv4addr( )"
.RS 4
Use this method to retrieve the \s-1IP\s0 address that the Infoblox appliance leased to the \s-1DHCP\s0 client. This method is being deprecated in favor of the \fBip_address()\fR method. This method is for IPv4 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ipv4addr
\& my $ipv4addr = $lease\->ipv4addr();
.Ve
.RE
.RS 4
.RE
.SS "ipv6_duid( )"
.IX Subsection "ipv6_duid( )"
.RS 4
Use this method to retrieve the \s-1DUID\s0 value of an IPv6 address that the Infoblox appliance leased to the \s-1DHCP\s0 client. This method is for IPv6 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ipv6_duid
\& my $ipv6_duid = $lease\->ipv6_duid();
.Ve
.RE
.RS 4
.RE
.SS "ipv6_iaid( )"
.IX Subsection "ipv6_iaid( )"
.RS 4
Use this method to retrieve the Interface \s-1ID\s0 value of an IPv6 address that the Infoblox appliance leased to the \s-1DHCP\s0 client. This method is for IPv6 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ipv6_iaid
\& my $ipv6_iaid = $lease\->ipv6_iaid();
.Ve
.RE
.RS 4
.RE
.SS "ipv6_preferred_lifetime( )"
.IX Subsection "ipv6_preferred_lifetime( )"
.RS 4
Use this method to retrieve the preferred lifetime value of an IPv6 address that the Infoblox appliance leased to the \s-1DHCP\s0 client. This method is for IPv6 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ipv6_preferred_lifetime
\& my $ipv6_preferred_lifetime = $lease\->ipv6_preferred_lifetime();
.Ve
.RE
.RS 4
.RE
.SS "ipv6_prefix_bits( )"
.IX Subsection "ipv6_prefix_bits( )"
.RS 4
Use this method to retrieve the prefix bits value of an IPv6 address that the Infoblox appliance leased to the \s-1DHCP\s0 client. This method is for IPv6 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ipv6_prefix_bits
\& my $ipv6_prefix_bits = $lease\->ipv6_prefix_bits();
.Ve
.RE
.RS 4
.RE
.SS "is_invalid_mac( )"
.IX Subsection "is_invalid_mac( )"
.RS 4
Use this method to retrieve the flag used to indicate whether an invalid \s-1MAC\s0 address is used. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get is_invalid_mac value
\& my $is_invalid_mac = $lease\->is_invalid_mac();
.Ve
.RE
.RS 4
.RE
.SS "last_discovered( )"
.IX Subsection "last_discovered( )"
.RS 4
Use this method to retrieve the time when this object was last discovered.
.Sp
The default value for this field is empty.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_discovered
\& my $last_discovered = $lease\->last_discovered();
.Ve
.RE
.RS 4
.RE
.SS "mac( )"
.IX Subsection "mac( )"
.RS 4
Use this method to retrieve the \s-1MAC\s0 address of the \s-1DHCP\s0 client that leased the \s-1IP\s0 address. This method is for IPv4 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get mac
\& my $mac = $lease\->mac();
.Ve
.RE
.RS 4
.RE
.SS "ms_ad_user_data( )"
.IX Subsection "ms_ad_user_data( )"
.RS 4
Use this method to retrieve Microsoft Active Directory users related information. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::MSServer::AdUser::Data object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ms_ad_user_data
\& my $ms_ad_user_data = $lease\->ms_ad_user_data();
.Ve
.RE
.RS 4
.RE
.SS "network( )"
.IX Subsection "network( )"
.RS 4
Use this method to find the network associated with this lease. This property is read-only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network associated with the lease in the string of the form \*(L"network/netmask\*(R".
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network property of the lease
\& my $network = $lease\->network();
.Ve
.RE
.RS 4
.RE
.SS "network_component_description( )"
.IX Subsection "network_component_description( )"
.RS 4
Use this method to retrieve the description of the network device that is connected to the \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device description.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_description
\& my $network_component_description = $lease\->network_component_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_ip( )"
.IX Subsection "network_component_ip( )"
.RS 4
Use this method to retrieve the \s-1IP\s0 address of the network device that is connected to the \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device \s-1IP\s0 address.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_ip
\& my $network_component_ip = $lease\->network_component_ip();
.Ve
.RE
.RS 4
.RE
.SS "network_component_name( )"
.IX Subsection "network_component_name( )"
.RS 4
Use this method to retrieve the name of the network device that is connected to the \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device name.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_name
\& my $network_component_name = $lease\->network_component_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_description( )"
.IX Subsection "network_component_port_description( )"
.RS 4
Use this method to retrieve the description of the network device port that is connected to the \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the description of the network device port.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_description
\& my $network_component_port_description = $lease\->network_component_port_description();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_name( )"
.IX Subsection "network_component_port_name( )"
.RS 4
Use this method to retrieve the name of the network device port that is connected to the \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the name of the port on the network device.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_name
\& my $network_component_port_name = $lease\->network_component_port_name();
.Ve
.RE
.RS 4
.RE
.SS "network_component_port_number( )"
.IX Subsection "network_component_port_number( )"
.RS 4
Use this method to retrieve the number of the network device port that is connected to the \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device port number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_port_number
\& my $network_component_port_number = $lease\->network_component_port_number();
.Ve
.RE
.RS 4
.RE
.SS "network_component_type( )"
.IX Subsection "network_component_type( )"
.RS 4
Use this method to retrieve the type of the network device that is connected to the \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the network device type.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network_component_type
\& my $network_component_type = $lease\->network_component_type();
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to retrieve the network view of the \s-1DHCP\s0 lease.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns the network view of the \s-1DHCP\s0 lease as Infoblox::DHCP::View object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network view
\& my $nview = $lease\->network_view();
.Ve
.RE
.RS 4
.RE
.SS "netbios( )"
.IX Subsection "netbios( )"
.RS 4
Use this method to retrieve the name in the NetBIOS reply that responded to a NetBIOS query.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get netbios
\& my $netbios = $lease\->netbios();
.Ve
.RE
.RS 4
.RE
.SS "next_binding_state( )"
.IX Subsection "next_binding_state( )"
.RS 4
Use this method to retrieve the subsequent binding state when the current lease expires. This method is for IPv4 leases only.
.Sp
.Vb 5
\& Free     : The lease is available for clients to use.
\& Active   : The lease is currently in use by a DHCP client.
\& Expired  : The lease was in use, but the DHCP client never renewed it, so it is no longer valid.
\& Released : The DHCP client returned the lease to the appliance.
\& Abandoned: The Infoblox appliance cannot lease this IP address because the appliance received a response when it pinged the address.
.Ve
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get next_binding_state
\& my $next_binding_state = $lease\->next_binding_state();
.Ve
.RE
.RS 4
.RE
.SS "on_commit( )"
.IX Subsection "on_commit( )"
.RS 4
Use this method to retrieve the list of commands to be executed upon the granting of the lease.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get on_commit
\& my $on_commit = $lease\->on_commit();
.Ve
.RE
.RS 4
.RE
.SS "on_expiry( )"
.IX Subsection "on_expiry( )"
.RS 4
Use this method to retrieve the list of commands to be executed upon the expiration of the lease.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get on_expiry
\& my $on_expiry = $lease\->on_expiry();
.Ve
.RE
.RS 4
.RE
.SS "on_release( )"
.IX Subsection "on_release( )"
.RS 4
Use this method to retrieve the list of commands to be executed upon the release of the lease.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get on_release
\& my $on_release = $lease\->on_release();
.Ve
.RE
.RS 4
.RE
.SS "option( )"
.IX Subsection "option( )"
.RS 4
Use this method to retrieve the option value of a \s-1DHCP\s0 Lease object. This method specifies the agent circuit \s-1ID\s0 and remote \s-1ID\s0 sent by a \s-1DHCP\s0 relay agent in \s-1DHCP\s0 option 82. This method is for IPv4 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get option
\& my $option = $lease\->option();
.Ve
.RE
.RS 4
.RE
.SS "os( )"
.IX Subsection "os( )"
.RS 4
Use this method to retrieve the operating system associated with this \s-1DHCP\s0 lease.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get os
\& my $os = $lease\->os();
.Ve
.RE
.RS 4
.RE
.SS "port_duplex( )"
.IX Subsection "port_duplex( )"
.RS 4
Use this method to retrieve the duplex setting of the network device port that is connected to the \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the duplex setting of the network device port. The returend value, if any, is one of the following:
.Sp
.Vb 2
\&  Full
\&  Half
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_duplex
\& my $port_duplex = $lease\->port_duplex();
.Ve
.RE
.RS 4
.RE
.SS "port_link_status( )"
.IX Subsection "port_link_status( )"
.RS 4
The method returns the link status of the network device port. The returned value, if any, is one of the following:
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the port link status. Returned values, if any, are one of the following:
.Sp
.Vb 3
\&  Connected
\&  Not Connected
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_link_status
\& my $port_link_status = $lease\->port_link_status();
.Ve
.RE
.RS 4
.RE
.SS "port_speed( )"
.IX Subsection "port_speed( )"
.RS 4
Use this method to retrieve the speed of the network device port that is connected to the \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the speed value of the network device port. The returned value, if any, is one of the following:
.Sp
.Vb 6
\&  10M
\&  100M
\&  1G
\&  10G
\&  100G
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_speed
\& my $port_speed = $lease\->port_speed();
.Ve
.RE
.RS 4
.RE
.SS "port_status( )"
.IX Subsection "port_status( )"
.RS 4
Use this method to retrieve the status of the network device port that is connected to the \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the status of the network device port. The returned value, if any, is one of the following:
.Sp
.Vb 3
\&  Up
\&  Down
\&  Unknown
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_status
\& my $port_status = $lease\->port_status();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_description( )"
.IX Subsection "port_vlan_description( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 description of the network device port that is connected to the \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1VLAN\s0 description of the network device port.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_description
\& my $port_vlan_description = $lease\->port_vlan_description();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_name( )"
.IX Subsection "port_vlan_name( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 name of the network device port that is connected to the \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1VLAN\s0 name of the network device port.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_name
\& my $port_vlan_name = $lease\->port_vlan_name();
.Ve
.RE
.RS 4
.RE
.SS "port_vlan_number( )"
.IX Subsection "port_vlan_number( )"
.RS 4
Use this method to retrieve the \s-1VLAN\s0 number of the network device port that is connected to the \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the \s-1VLAN\s0 number of the network device port.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get port_vlan_number
\& my $port_vlan_number = $lease\->port_vlan_number();
.Ve
.RE
.RS 4
.RE
.SS "protocol( )"
.IX Subsection "protocol( )"
.RS 4
Use this method to determine whether the \s-1IP\s0 address the Infoblox appliance leased an IPv4 or IPv6 address to the client.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value ('\s-1IPV4\s0' or '\s-1IPV6\s0').
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get protocol
\& my $protocol = $lease\->protocol();
.Ve
.RE
.RS 4
.RE
.SS "remote_id( )"
.IX Subsection "remote_id( )"
.RS 4
Use this method to retrieve an agent remote \s-1ID\s0 (option 82 sub-option). This is a read-only attribute.
.Sp
Remote \s-1ID\s0 can be presented either in the \s-1ASCII\s0 form (e.g. \*(L"abcd\*(R") or in the form of colon separated \s-1HEX\s0 values (e.g. 1:2:ab:cd). \s-1HEX\s0 representation is only used when sub-option value contains unprintable characters. If a remode \s-1ID\s0 sub-option value is an \s-1ASCII\s0 string, it's always enclosed in quotes to prevent ambiguous values (e.g. \*(L"10:20\*(R" \- \s-1ASCII 5\s0 byte string; 10:20 \- \s-1HEX 2\s0 byte value).
Remote \s-1ID\s0 can be in \s-1ASCII\s0 form (e.g. "\*(L"abcd\*(R"\*(L") or in colon-separated \s-1HEX\s0 form (e.g. \*(R"1:2:ab:cd").
.Sp
.Vb 6
\& ASCII: ASCII representation is used if the remote ID sub\-option contains only printable ASCII charaters (ASCII characters in range "x20\-0x7E").
\&        \- The backslash symbol (\e) is used as an escape symbol to escape the quote symbol (") in an ASCII string.
\&        \- Double backslashes (\e\e) are used to represent the backslash symbol (\e) in an ASCII string.
\& HEX  : HEX representation is used only when the remote ID sub\-option value contains unprintable characters and is normalized as follows:
\&        \- starting zero is removed from digits: 1, a \- Valid, 01, 0a \- Invalid;
\&        \- lowercase characters are used for symbols: fa \- Valid, FA \- Invalid.
.Ve
.Sp
\&\s-1NIOS\s0 does not support the convertion between \s-1HEX\s0 and \s-1ASCII\s0 formats. Searches are performed using the exact same format and value as the sub-option is represented.
.Sp
Query examples assume the following leases are stored in the database:
.Sp
.Vb 8
\& Number  : option field                                                     : extracted remote_id field
\& Lease01 : agent.remote\-id="00152654358700" agent.circuit\-id="BX1\-PORT\-003" : "00152654358700"
\& Lease02 : agent.remote\-id="Dhcp Relay 10" agent.circuit\-id="Port008"       : "Dhcp Relay 10"
\& Lease03 : agent.remote\-id="00:01:02"                                       : "00:01:02"
\& Lease04 : agent.remote\-id=0:1:2                                            : 0:1:2
\& Lease05 : agent.remote\-id=02:03                                            : 2:3
\& Lease06 : agent.remote\-id=10:20                                            : 10:20
\& Lease07 : agent.circuit\-id="no\-remote\-id"                                  :
.Ve
.Sp
Expected results:
.Sp
.Vb 10
\& Query                     : Returned leases                                      : Comments
\& remote_id=01:02           : None                                                 : EXACT query. No results are expected
\& remote_id="Dhcp Relay 10" : Lease02                                              : EXACT query for an ASCII value.
\& remote_id=0:1:2           : Lease04                                              : EXACT query for a HEX value.
\& remote_id=00:01:02        : None                                                 : EXACT query for a HEX value. No results are expected as the search value is not normalized to the same format used in the database.
\& remote_id~=10             : Lease02, Lease06                                     : REGEX query.
\& remote_id~=^".*1          : Lease01, Lease02, Lease03                            : REGEX query. Only ASCII values are expected due to the starting quote (") in the search value.
\& remote_id~=^[^"]*2        : Lease04, Lease05, Lease06                            : REGEX query. Only HEX values are expected as the starting quote (") is excluded from the search value.
\& remote_id=""              : None                                                 : EXACT query. No results are expected as no leases that contain an empty remote ID value exist in the database.
\& remote_id~=""             : Lease01, Lease02, Lease03, Lease04, Lease05, Lease06 : REGEX query. This query is expected to match any lease that contains remote ID set to any value.
.Ve
.Sp
\&\s-1NOTE: EXACT\s0 queries (without the ~ symbol) are perfomed using the get method. \s-1REGEX\s0 queries (with the ~ symbol) are perfomed using the search method.
.Sp
\&\s-1NOTE:\s0 Lease07 is not expected to be returned when searching for the remote \s-1ID\s0 sub-option.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get remote_id
\& my $remote_id = $lease\->remote_id();
.Ve
.RE
.RS 4
.RE
.SS "starts( )"
.IX Subsection "starts( )"
.RS 4
Use this method to retrieve the start time value of a \s-1DHCP\s0 Lease object. This method specifies the day, date, and time that the lease started.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get starts
\& my $starts = $lease\->starts();
.Ve
.RE
.RS 4
.RE
.SS "tsfp( )"
.IX Subsection "tsfp( )"
.RS 4
Use this method to retrieve the \s-1TSFP\s0 (Time Sent From Partner) value of a \s-1DHCP\s0 Lease object. This method specifies the time that the current lease state ends, from the point of view of a remote \s-1DHCP\s0 failover peer. This method is for IPv4 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get tsfp
\& my $tsfp = $lease\->tsfp();
.Ve
.RE
.RS 4
.RE
.SS "tstp( )"
.IX Subsection "tstp( )"
.RS 4
Use this method to retrieve the \s-1TSTP\s0 (Time Sent To Partner) value of a \s-1DHCP\s0 Lease object. This method specifies the time that the current lease state ends, from the point of view of a local \s-1DHCP\s0 failover peer. This method is for IPv4 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get tstp
\& my $tstp = $lease\->tstp();
.Ve
.RE
.RS 4
.RE
.SS "uid( )"
.IX Subsection "uid( )"
.RS 4
Use this method to retrieve the \s-1UID\s0 (User \s-1ID\s0) value of a \s-1DHCP\s0 Lease object. This method specifies the client identifier that the \s-1DHCP\s0 client sends the Infoblox appliance (in \s-1DHCP\s0 option 61) when it acquires the lease. Not all \s-1DHCP\s0 clients send a \s-1UID.\s0 This method is for IPv4 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get uid
\& my $uid = $lease\->uid();
.Ve
.RE
.RS 4
.RE
.SS "username( )"
.IX Subsection "username( )"
.RS 4
Use this method to retrieve the user name that the server has associated with a \s-1DHCP\s0 Lease object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get username
\& my $username = $lease\->username();
.Ve
.RE
.RS 4
.RE
.SS "served_by( )"
.IX Subsection "served_by( )"
.RS 4
Use this method to retrieve the \s-1IP\s0 address of the server that hands out an active lease to a client.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get served_by
\& my $served_by = $lease\->served_by();
.Ve
.RE
.RS 4
.RE
.SS "variable( )"
.IX Subsection "variable( )"
.RS 4
Use this method to retrieve the variable value of a \s-1DHCP\s0 Lease object. This method keeps all variables related to the \s-1DDNS\s0 update of the \s-1DHCP\s0 lease. The variables can be one of the following:
.Sp
.Vb 2
\& ddns\-text        : The ddns\-text variable is used to record the value of the client\*(Aqs TXT identification record when the
\&                    interim DDNS update style has been used to update the DNS service for a particular lease.
\&
\& ddns\-fwd\-name    : The ddns\-fwd\-name variable records the value of the name used when the client\*(Aqs A record was updated, if a DDNS
\&                    update was successfully completed by the server. The server may have used this name when it updated the
\&                    client\*(Aqs PTR record as well.
\&
\& ddns\-client\-fqdn : If the server is configured to use the interim DDNS update style, and is also configured to allow clients
\&                    to update their own FQDNs, and the client did in fact update its own FQDN, then the ddns\-client\-fqdn
\&                    variable records the name that the client indicated it used. This is also the name that the server
\&                    used to update the client\*(Aqs PTR record in this case.
\&
\& ddns\-rev\-name    : If the server successfully updates the client\*(Aqs PTR record, this variable will record the name that the
\&                    DHCP server used for the PTR record. The name to which the PTR record points will be either the
\&                    ddns\-fwd\-name or the ddns\-client\-fqdn.
.Ve
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
N/A
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get variable
\& my $variable = $lease\->variable();
.Ve
.RE
.RS 4
.RE
.SS "v_cluster( )"
.IX Subsection "v_cluster( )"
.RS 4
Use this method to retrieve the name of the VMware cluster associated with the \s-1DHCP\s0 Lease object. This method is read-only. This method is for IPv4 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware cluster name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_cluster
\& my $v_cluster = $lease\->v_cluster();
.Ve
.RE
.RS 4
.RE
.SS "v_datacenter( )"
.IX Subsection "v_datacenter( )"
.RS 4
Use this method to retrieve the name of the VMware datacenter associated with the \s-1DHCP\s0 Lease object. This method is read-only. This method is for IPv4 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware datacenter name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_datacenter
\& my $v_datacenter = $lease\->v_datacenter();
.Ve
.RE
.RS 4
.RE
.SS "v_host( )"
.IX Subsection "v_host( )"
.RS 4
Use this method to retrieve the name of the VMware host associated with the \s-1DHCP\s0 Lease object. This method is read-only. This method is for IPv4 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware host name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_host
\& my $v_host = $lease\->v_host();
.Ve
.RE
.RS 4
.RE
.SS "v_name( )"
.IX Subsection "v_name( )"
.RS 4
Use this method to retrieve the name of the VMware entity associated with the \s-1DHCP\s0 Lease object. This method is read-only. This method is for IPv4 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware entity name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_name
\& my $v_name = $lease\->v_name();
.Ve
.RE
.RS 4
.RE
.SS "v_netadapter( )"
.IX Subsection "v_netadapter( )"
.RS 4
Use this method to retrieve the name of the physical network adapter through which the VMware entity is connected to the appliance. This method is read-only. This method is for IPv4 leases ohly.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the network adapter name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_netadapter
\& my $v_netadapter = $lease\->v_netadapter();
.Ve
.RE
.RS 4
.RE
.SS "v_switch( )"
.IX Subsection "v_switch( )"
.RS 4
Use this method to retrieve the name of the virtual switch through which the VMware entity is connected to the appliance. This method is read-only. This method is for IPv4 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the virtual switch name. The default value is an empty string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_switch
\& my $v_switch = $lease\->v_switch();
.Ve
.RE
.RS 4
.RE
.SS "v_type( )"
.IX Subsection "v_type( )"
.RS 4
Use this method to retrieve the type of VMware entity associated with the \s-1DHCP\s0 Lease object. This method is read-only. This method is for IPv4 leases only.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns a string that contains the VMware entity name. The default value is an empty string. The returned value, if any, can be one of the following:
.Sp
.Vb 3
\& VirtualMachine
\& HostSystem
\& VirtualCenter
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get v_type
\& my $v_type = $lease\->v_type();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a \s-1DHCP\s0 Lease object, such as get, search, and remove. Also, this sample code includes error handling for the operations.
.PP
\&\fB#Preparation prior to \s-1DHCP\s0 Lease operations\fR
.PP
.Vb 2
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $host_ip   = "192.168.1.2";
\& my $host_name = "infoblox.localdomain";
\& my $session = Infoblox::Session\->new(
\&     master   => $host_ip,       #appliance host ip
\&     username => "admin",        #appliance user login
\&     password => "infoblox"      #appliance password
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully.\en";
\&
\& #Create a member object
\&  my $member = Infoblox::DHCP::Member\->new(
\&     name     => $host_name,
\&     ipv4addr => $host_ip,
\& );
\&
\& unless($member) {
\&      die("Construct member failed: ",
\&            Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Member object created successfully\en";
\&
\& #Create a network object
\& my $network = Infoblox::DHCP::Network\->new(
\&                             network  => "10.0.0.0/8",
\&                             comment  => "add network",
\&                             members  => [$member]
\&                             );
\& unless($network){
\&        die("Construct network object fail: ",
\&                Infoblox::status_code(). ":" .Infoblox::status_detail());
\&        }
\&
\& print"Network object created successfully.\en";
\&
\& #Verify if the network exists
\& my $object = $session\->get(
\&                object  => "Infoblox::DHCP::Network",
\&                network => "10.0.0.0/8"
\&                );
\& unless($object){
\&        print"Network does not exist on server, safe to add the network.\en";
\&        $session\->add($network)
\&                or die("Add network failed: ",
\&                        $session\->status_code(). ":" .$session\->status_detail());
\&        }
\&
\& print"Network added successfully.\en";
\&
\& #Create a dhcp range object
\& my $dhcp_range = Infoblox::DHCP::Range\->new(
\&     network    => "10.0.0.0/8",
\&     start_addr => "10.0.0.1",
\&     end_addr   => "10.0.0.10",
\&     member     => $member,
\& );
\&
\& unless($dhcp_range){
\&        die("Construct dhcp range object failed: ",
\&                Infoblox::status_code(). ":" .Infoblox::status_detail());
\&        }
\&
\& print "dhcp range object created successfully.\en";
\&
\& #Add the dhcp range to the Infoblox appliance
\& $session\->add($dhcp_range)
\&                or die("Add dhcp range failed: ",
\&                        $session\->status_code(). ":" .$session\->status_detail());
\&
\& print "dhcp range added successfully.\en";
\&
\& my $result = $session\->import_data(
\&        "type" => "leases",
\&        "path"=> "./API_unit_test_sample_code/import_dhcpd.lease",
\&        "format" => "ISC",
\&        "lease_precedence" => "replace\-previous"
\&       );
\&
\& unless($result){
\&         die("Import lease failed: ",
\&           $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&
\& print "Import dhcp lease successfull.\en";
.Ve
.PP
\&\fB#Search for a \s-1DHCP\s0 Lease object\fR
.PP
.Vb 9
\& my @retrieved_objs= $session\->search(
\&                     object   => "Infoblox::DHCP::Lease" ,
\&                     ipv4addr => \*(Aq^10\e..*\*(Aq
\&                     );
\& my $desired_lease = $retrieved_objs[0];
\& unless($desired_lease){
\&         die("search lease failed: ",
\&           $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&
\& print "Search dhcp lease object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get a \s-1DHCP\s0 Lease object\fR
.PP
.Vb 10
\& #Get a DHCP lease by IP address.
\& my @retrieved_objs = $session\->get(
\&                          object   => "Infoblox::DHCP::Lease",
\&                          ipv4addr => "10.0.0.10"
\&                          );
\& my $desired_lease = $retrieved_objs[0];
\& unless($desired_lease){
\&         die("get lease failed: ",
\&           $session\->status_code() . ":" . $session\->status_detail());
\&  }
\&
\& print "Get dhcp lease object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Remove a \s-1DHCP\s0 Lease object\fR
.PP
.Vb 5
\& #Submit the object for removal
\& $session\->remove($desired_lease)
\&     or die("Remove dhcp lease failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& print "dhcp lease object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session,
Infoblox::Session\->\fBadd()\fR,
Infoblox::Session\->\fBget()\fR,
Infoblox::Session\->\fBremove()\fR,
Infoblox::Session\->\fBsearch()\fR,
Infoblox::DHCP::Network,
Infoblox::DHCP::View,
Infoblox::DHCP::Range,
Infoblox::DHCP::IPv6Network,
Infoblox::DHCP::IPv6Range,
Infoblox::Grid::MSServer::AdUser::Data,
Infoblox::Grid::Discovery::Data
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
