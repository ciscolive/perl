.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::IPv6Range 3"
.TH Infoblox::DHCP::IPv6Range 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::IPv6Range \- DHCP IPv6 Range object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1DHCP\s0 IPv6 range defines the specified range of \s-1IP\s0 addresses in an IPv6 network. A \s-1DHCP\s0 IPv6 range should be added for an IPv6 network so the Infoblox appliance can assign \s-1IP\s0 addresses within that specified range to \s-1DHCP\s0 clients. If the client is on an IPv6 network that is assigned a \s-1DHCP\s0 IPv6 range, the device distributes an available \s-1IP\s0 address from that range to the \s-1DHCP\s0 client, or to a \s-1DHCP\s0 relay agent if the request came through an agent. The \s-1DHCP\s0 IPv6 range should also be assigned with a device. If devices are in a grid, the particular member serving \s-1DHCP\s0 for the \s-1DHCP\s0 IPv6 range must be specified. If the server is an independent device, this device must be specified as the member that serves the \s-1DHCP\s0 IPv6 range.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 10
\& my $dhcp_ipv6_range = Infoblox::DHCP::IPv6Range\->new(
\&     network                              => $network,                                  #Required
\&     ipv6_end_prefix                      => $ipv6addr,                                 #Optional / See NOTE below
\&     ipv6_prefix_bits                     => $num,                                      #Optional / See NOTE below
\&     ipv6_start_prefix                    => $ipv6addr,                                 #Optional / See NOTE below
\&     end_addr                             => $ipv6addr,                                 #Optional / See NOTE below
\&     start_addr                           => $ipv6addr,                                 #Optional / See NOTE below
\&     address_type                         => "ADDRESS" | "PREFIX" | "BOTH",             #Optional / Default is undefined
\&     comment                              => $string,                                   #Optional / Default is undefined
\&     disable                              => "true" | "false",                          #Optional / Default is "false"
\&     exclude                              => [$ExclusionRange1,$ExclusionRange2,...],   #Optional / Default is empty
\&     extattrs                             => { $string => $extattr, ... },              #Optional / Default is undefined
\&     extensible_attributes                => { $string => $string | $num, $string => [ $string | $num, ... ], ... } #Optional / Default is undefined
\&     member                               => $Member,                                   #Optional / Default is undefined
\&     name                                 => $string,                                   #Optional / Default is undefined
\&     network_view                         => $NetworkView,                              #Optional / Default is system\-defined default network view
\&     override_recycle_leases              => "true" | "false"                           #Optional / Default is "false"
\&     recycle_leases                       => "true" | "false",                          #Optional / Default is "true"
\&     server_association_type              => "NONE" | "MEMBER"                          #Optional / Default is undefined
\&     template                             => $string,                                   #Optional / Default is undefined
\&     discovery_blackout_setting           => $blackout,                                 #Optional
\&     port_control_blackout_setting        => $blackout,                                 #Optional
\&     override_blackout_setting            => "true" | "false",                          #Optional / Default value is "false"
\&     same_port_control_discovery_blackout => "true" | "false",                          #Optional / Default value is "false"
\&     subscribe_settings                   => $subscribe_settings,                       #Optional / Default is undefined
\&     override_subscribe_settings          => \*(Aqtrue\*(Aq | \*(Aqfalse\*(Aq,                          #Optional / Default is \*(Aqfalse\*(Aq
\& );
.Ve
.PP
\&\s-1NOTE:\s0 one or both of the start_addr/end_addr and ipv6_start_prefix/ipv6_end_prefix/ipv6_prefix_bits parameter sets is required.
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a \s-1DHCP\s0 IPv6 range object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add a \s-1DHCP\s0 IPv6 range object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Construct an object
\& my $dhcp_ipv6range = Infoblox::DHCP::IPv6Range\->new(
\&                                                start_addr => "2001:db8:0:c000:0001::",
\&                                                end_addr   => "2001:db8:0:c000:0021::",
\&                                                network    => "2001:db8:0:c000::/51",
\& );
\&
\& # Submit for addition
\& my $response = $session\->add( $dhcp_ipv6range );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific DHCP IPv6 range object:
\&
\&  start_addr             \- Optional. Starting IP address of the DHCP IPv6 range within the network.
\&  end_addr               \- Optional. Ending IP address of the DHCP IPv6 range within the network.
\&  ipv6_start_prefix      \- Optional. Starting prefix of the DHCP IPv6 range.
\&  ipv6_end_prefix        \- Optional. Ending prefix of the DHCP IPv6.
\&  network_view           \- Optional. Network view in which the DHCP IPv6 range is located. By default, all network views are searched.
\&  extattrs               \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes  \- Optional. A hash reference containing extensible attributes.
\&  member                 \- Optional. The member serving the range. The valid value is an Infoblox::DHCP::Member object.
\&  name                   \- Optional. The name of the DHCP IPv6 Range.
\&  network                \- Optional. The IPv6 Network the range resides in.
\&  comment                \- Optional. The descriptive comment.
\&  server_association_type \- Optional. The server association type for the range.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&                       object     => "Infoblox::DHCP::IPv6Range",
\&                       start_addr => "2001:db8:0:c000:0001::" );
\&
\& my @retrieved_objs = $session\->get(
\&                       object       => "Infoblox::DHCP::IPv6Range",
\&                       start_addr   => "2001:db8:0:c000:0001::",
\&                       network_view => "default" );
\&
\& my @retrieved_objs = $session\->get(
\&                       object                => "Infoblox::DHCP::IPv6Range",
\&                       extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify a \s-1DHCP\s0 IPv6 range object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use method to modify the comment.
\& $dhcp_ipv6range\->comment("this is a modified comment");
\& # Submit modification
\& my $response = $session\->modify( $dhcp_ipv6range );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a \s-1DHCP\s0 IPv6 range object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific \s-1DHCP\s0 IPv6 range object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& # Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object       => "Infoblox::DHCP::IPv6Range",
\&     start_addr   => "2001:db8:0:c000:0001::",
\&     newtork_view => "default" );
\& # Find the desired object from the retrieved list.
\& my $desired_dhcp_range = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_dhcp_range );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for \s-1DHCP\s0 IPv6 range objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a DHCP IPv6 range object:
\&
\&  start_addr             \- Optional. Starting IP address of the DHCP IPv6 range within the network (regular expression).
\&  end_addr               \- Optional. Ending IP address of the DHCP IPv6 range within the network (regular expression).
\&  ipv6_start_prefix      \- Optional. Starting prefix of the DHCP IPv6 range (regular expression).
\&  ipv6_end_prefix        \- Optional. Ending prefix of the DHCP IPv6 (regular expression).
\&  network_view           \- Optional. Network view in which the DHCP IPv6 range is located. By default, all network views are searched.
\&  extattrs               \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes  \- Optional. A hash reference containing extensible attributes.
\&  member                 \- Optional. The member serving the range. The valid value is an Infoblox::DHCP::Member object.
\&  name                   \- Optional. The name of the DHCP IPv6 Range (regular expression).
\&  network                \- Optional. The IPv6 Network the range resides in (regular expression).
\&  comment                \- Optional. The descriptive comment (regular expression).
\&  server_association_type \- Optional. The server association type for the range.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 7
\& # search for DHCP IPv6 range object with start address having last octet as 1
\& my @retrieved_objs = $session\->search(
\&     object     => "Infoblox::DHCP::IPv6Range",
\&     network       => "2001:db8:0:c000::/51",
\&     network_view  => "default",
\&     start_addr    => "0021",
\&     comment       => ".*comment" );
\&
\& # search for DHCP IPv6 range objects defining "Santa Clara" for "Site" extensible attribute
\& my @retrieved_objs = $session\->search(
\&     object                => "Infoblox::DHCP::IPv6Range",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of a \s-1DHCP\s0 IPv6 range.
.SS "address_type( )"
.IX Subsection "address_type( )"
.RS 4
Use this method to set or retrieve the address type of a \s-1DHCP\s0 IPv6 Range object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1ADDRESS\*(R", \*(L"PREFIX\*(R",\s0 or \*(L"\s-1BOTH\*(R".\s0 When the address type is \*(L"\s-1ADDRESS\*(R",\s0 values for the 'start_addr' and 'end_addr' members are required. When the address type is \*(L"\s-1PREFIX\*(R",\s0 values for 'ipv6_start_prefix', 'ipv6_end_prefix', and 'ipv6_prefix_bits' are required. When the address type is \*(L"\s-1BOTH\*(R",\s0 values for 'start_addr', 'end_addr', 'ipv6_start_prefix', 'ipv6_end_prefix', and 'ipv6_prefix_bits' are all required.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get address_type
\& my $address_type = $dhcp_ipv6range\->address_type();
\& #Modify address_type
\& $dhcp_ipv6range\->address_type("PREFIX");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve a descriptive comment.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired comment in string format with a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get comment
\& my $comment = $dhcp_ipv6range\->comment();
\& #Modify comment
\& $dhcp_ipv6range\->comment("Modifying the DHCP IPv6 range comment");
.Ve
.RE
.RS 4
.RE
.SS "cloud_info( )"
.IX Subsection "cloud_info( )"
.RS 4
Use this method to set or retrieve cloud \s-1API\s0 related information for the Infoblox::DHCP::IPv6Range object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a Infoblox::Grid::CloudAPI::Info object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get cloud_info
\& my $cloud_info = $dhcp_ipv6range\->cloud_info();
\& # Modify cloud_info
\& $dhcp_ipv6range\->cloud_info($cloud_info_object);
.Ve
.RE
.RS 4
.RE
.SS "disable( )"
.IX Subsection "disable( )"
.RS 4
Use this method to set or retrieve the disable flag of a \s-1DHCP\s0 IPv6 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the disable flag or \*(L"false\*(R" to deactivate/unset it. The default value for this field is false.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get disable
\& my $disable = $dhcp_ipv6range\->disable();
\& #Modify disable
\& $dhcp_ipv6range\->disable("false");
.Ve
.RE
.RS 4
.RE
.SS "discovery_basic_poll_setting( )"
.IX Subsection "discovery_basic_poll_setting( )"
.RS 4
Use this method to set or retrieve the discovery_basic_poll_setting value of a \s-1DHCP\s0 IPv6 range.
.Sp
Include the specified parameter to set the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is object of Infoblox::Grid::Discovery::BasicPollSettings.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get discovery_basic_poll_setting
\& my $discovery_basic_poll_setting = $dhcp_ipv6range\->discovery_basic_poll_setting();
\& #Modify discovery_basic_poll_setting
\& $dhcp_ipv6range\->discovery_basic_poll_setting($poll_setting);
.Ve
.RE
.RS 4
.RE
.SS "discovery_member( )"
.IX Subsection "discovery_member( )"
.RS 4
Use this method to set or retrieve the discovery_member value of a \s-1DHCP\s0 IPv6 range.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The discovery member name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get discovery_member
\& my $discovery_member = $dhcp_ipv6range\->discovery_member();
\& #Modify discovery_member
\& $dhcp_ipv6range\->discovery_member("test.localdomain");
.Ve
.RE
.RS 4
.RE
.SS "discover_now_status( )"
.IX Subsection "discover_now_status( )"
.RS 4
Use this method to retrieve the current discovery status. This attribute is read-only.
.Sp
\&'discover_now_status' will not be returned by default, use 'return_methods' to request it if needed.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1COMPLETE\s0', '\s-1FAILED\s0', '\s-1NONE\s0', '\s-1PENDING\s0' or '\s-1RUNNING\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get discover_now_status
\& my $discover_now_status = $dhcp_ipv6range\->discover_now_status();
.Ve
.RE
.RS 4
.RE
.SS "discovery_blackout_setting( )"
.IX Subsection "discovery_blackout_setting( )"
.RS 4
Use this method to set or retrieve the discovery blackout setting.
.Sp
Setting this method to a defined value implicitly sets the override_blackout_setting method to \*(L"true\*(R". If port_control_blackout_setting is undefined, setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_blackout_setting attribute to \*(L"false\*(R".
.Sp
Note that when discovery_blackout_setting is set to a defined value and override_blackout_setting is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$network\fR\->discovery_blackout_setting($blackout); \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); will set override_blackout_setting to \*(L"false\*(R", and the sequence \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); \f(CW$network\fR\->discovery_blackout_setting($blackout); will result in override_blackout_setting=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::Properties::BlackoutSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get discovery_blackout_setting
\& my $discovery_blackout_setting = $dhcp_ipv6range\->discovery_blackout_setting();
\& #Modify discovery_blackout_setting
\& $dhcp_ipv6range\->discovery_blackout_setting($blackout);
.Ve
.RE
.RS 4
.RE
.SS "enable_discovery( )"
.IX Subsection "enable_discovery( )"
.RS 4
Use this method to set or retrieve the enable_discovery value of a \s-1DHCP\s0 IPv6 range.  This setting overrides the member level settings.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
Setting this method to a defined value implicitly sets the override_enable_discovery method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the default from the upper level and automatically resets the override_enable_discovery attribute to \*(L"false\*(R".
.Sp
Enable this flag if you want to set discovery for this object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_discovery flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_discovery
\& my $enable_discovery = $dhcp_ipv6range\->enable_discovery();
\& #Modify enable_discovery
\& $dhcp_ipv6range\->enable_discovery("false");
.Ve
.RE
.RS 4
.RE
.SS "enable_immediate_discovery( )"
.IX Subsection "enable_immediate_discovery( )"
.RS 4
Use this method to set or retrieve enable_immediate_discovery value of a \s-1DHCP\s0 IPv6 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the enable_immediate_discovery flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get enable_immediate_discovery
\& my $enable_immediate_discovery = $dhcp_ipv6range\->enable_immediate_discovery();
\& #Modify enable_immediate_discovery
\& $dhcp_ipv6range\->enable_immediate_discovery("false");
.Ve
.RE
.RS 4
.RE
.SS "end_addr( )"
.IX Subsection "end_addr( )"
.RS 4
Use this method to set or retrieve the end address of the \s-1DHCP\s0 IPv6 range.
.Sp
An end address is the last \s-1IP\s0 address in the \s-1DHCP\s0 IPv6 range available for the clients.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the end address of the \s-1DHCP\s0 IPv6 range in lowercase.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get end_addr
\& my $end_addr = $dhcp_ipv6range\->end_addr();
\& #Modify end_addr
\& $dhcp_ipv6range\->end_addr("2001:db8:0:c000:0021::");
.Ve
.RE
.RS 4
.RE
.SS "endpoint_sources( )"
.IX Subsection "endpoint_sources( )"
.RS 4
Use this method to retrieve the list of endpoints that provide object data. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an array of Infoblox::CiscoISE::Endpoint objects.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get endpoint_sources value
\& my $endpoint_sources = $object\->endpoint_sources();
.Ve
.RE
.RS 4
.RE
.SS "exclude( )"
.IX Subsection "exclude( )"
.RS 4
Use this method to set or retrieve the exclusion range of \s-1IP\s0 addresses in the \s-1DHCP\s0 IPv6 range which should not be assigned to clients.
.Sp
If static addresses in the middle of a \s-1DHCP\s0 IPv6 range are assigned to certain hosts, those addresses can be excluded from the \s-1DHCP\s0 IPv6 range using this method.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an array reference that contains defined Infoblox::DHCP::ExclusionRange objects. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get exclude
\& my $ref_exclude = $dhcp_ipv6range\->exclude();
\& #Modify exclude
\& $dhcp_ipv6range\->exclude([$exl1]); #$exl1 is an Infoblox::DHCP::ExclusionRange object
.Ve
.RE
.RS 4
.RE
.SS "extattrs( )"
.IX Subsection "extattrs( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 IPv6 range object.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a hash reference containing the names of extensible attributes and their associated values ( Infoblox::Grid::Extattr objects ).
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extattrs
\& my $ref_extattrs = $dhcp_ipv6range\->extattrs();
\& #Modify extattrs
\& $dhcp_ipv6range\->extattrs({ \*(AqSite\*(Aq => $extattr1, \*(AqAdministrator\*(Aq => $extattr2 });
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with a \s-1DHCP\s0 IPv6 range object
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $dhcp_ipv6range\->extensible_attributes();
\& #Modify extensible attributes
\& $dhcp_ipv6range\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "ipv6_end_prefix( )"
.IX Subsection "ipv6_end_prefix( )"
.RS 4
Use this method to set or retrieve the end prefix of the \s-1DHCP\s0 IPv6 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the end prefix of the \s-1DHCP\s0 IPv6 range in lowercase.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6_end_prefix
\& my $ipv6_end_prefix = $dhcp_ipv6range\->ipv6_end_prefix();
\& #Modify ipv6_end_prefix
\& $dhcp_ipv6range\->ipv6_end_prefix("2001:db8:0:c000:0021::");
.Ve
.RE
.RS 4
.RE
.SS "ipv6_prefix_bits( )"
.IX Subsection "ipv6_prefix_bits( )"
.RS 4
Use this method to set or retrieve the prefix bits for the \s-1DHCP\s0 IPv6 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
An unsigned integer between 2 and 128.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6_prefix_bits
\& my $ipv6_prefix_bits = $dhcp_ipv6range\->ipv6_prefix_bits();
\& #Modify ipv6_prefix_bits
\& $dhcp_ipv6range\->ipv6_prefix_bits(32);
.Ve
.RE
.RS 4
.RE
.SS "ipv6_start_prefix( )"
.IX Subsection "ipv6_start_prefix( )"
.RS 4
Use this method to set or retrieve the start prefix of the \s-1DHCP\s0 IPv6 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the start prefix of the \s-1DHCP\s0 IPv6 range in lowercase.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get ipv6_start_prefix
\& my $ipv6_start_prefix = $dhcp_ipv6range\->ipv6_start_prefix();
\& #Modify ipv6_start_prefix
\& $dhcp_ipv6range\->ipv6_start_prefix("2001:db8:0:c000:0011::");
.Ve
.RE
.RS 4
.RE
.SS "member( )"
.IX Subsection "member( )"
.RS 4
Use this method to set or retrieve the member that serves \s-1DHCP\s0 for this \s-1IP\s0 address range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
If the attribute is set, the server_association_type attribute will also be set: to \*(L"\s-1MEMBER\*(R"\s0 if setting member to a defined value, to \*(L"\s-1NONE\*(R"\s0 otherwise.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a defined Infoblox::DHCP::Member object. The default value is empty.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get member
\& my $ref_member = $dhcp_ipv6range\->member();
\& #Modify member
\& $dhcp_ipv6range\->member($member1); #$member is an Infoblox::DHCP::Member object
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve a descriptive name for the \s-1DHCP\s0 IPv6 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The desired name in string format with a maximum of 256 bytes. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $dhcp_ipv6range\->name();
\& #Modify name
\& $dhcp_ipv6range\->name("external");
.Ve
.RE
.RS 4
.RE
.SS "network( )"
.IX Subsection "network( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 IPv6 network of the address range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The \s-1DHCP\s0 IPv6 Network.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network
\& my $network = $dhcp_ipv6range\->network();
\& #Set the network
\& $dhcp_ipv6range\->network("2001:db8:0:c000::/51");
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the network view of the \s-1DHCP\s0 IPv6 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The default value is the \*(L"default\*(R" network view, which means the \s-1DHCP\s0 IPv6 range is in the default network view.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is a defined Infoblox::DHCP::View object. The default network view value is the system-defined default network view object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network view
\& my $nview = $dhcp_ipv6range\->network_view();
\& #Modify network view, with an Infoblox::DHCP::View object
\& $dhcp_ipv6range\->network_view($nview);
.Ve
.RE
.RS 4
.RE
.SS "next_available_ip( )"
.IX Subsection "next_available_ip( )"
.RS 4
Use this method to get the next available IPv6 address(es) in the \s-1DHCP\s0 IPv6 range object. Note that to use this method, the object \s-1MUST\s0 be retrieved via a get or search call, or created with an add call.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The method accepts the following optional parameters:
.Sp
.Vb 2
\&  requested_num \- The number of IP addresses requested. It must be a value between 1 and 20, inclusive.
\&  excluded \- A reference to an array of addresses to be excluded from the results.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns the next available IPv6 address(es) in the range. If requested_num is not specified, a string with the next available address will be returned; otherwise, the method will return a reference to an array of addresses.
.Sp
Within a \s-1DHCP\s0 Range object, the next available \s-1IP\s0 address(es) are the first addresses in this range that match all of the following rules:
.Sp
.Vb 5
\&   * Are not part of the passed \*(Aqexcluded\*(Aq parameter (if specified).
\&   * There is no fixed address or host address record with this IP address
\&   * There is no unmanaged record with this IP address
\&   * The IP address is not in any excluded range of this IPv6 DHCP range
\&   * There is no active lease with this IP address (Deleted leases in the recycle bin are not considered.)
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& # Retrieve a particular range
\& my @retrieved_objs = $session\->get(
\&                           object     => "Infoblox::DHCP::IPv6Range",
\&                           start_addr => "10:9::"
\& );
\&
\& $range = $retrieved_objs[0];
\&
\& # Print the next available IPv6 address in the range
\& print $range\->next_available_ip() . "\en";
\&
\& # This will retrieve the next 10 available addresses and print the first one.
\& my $addressesref = $range\->next_available_ip(requested_num => 10);
\& print @$addressesref[0] . "\en";
\&
\& # This will retrieve the next 10 available addresses and exclude two.
\& my $addressesref = $range\->next_available_ip(requested_num => 10, excluded => ["10:9::2", "10:9::3"]);
.Ve
.RE
.RS 4
.RE
.SS "override_blackout_setting( )"
.IX Subsection "override_blackout_setting( )"
.RS 4
The override_blackout_setting attribute controls whether the discovery_blackout_setting and port_control_blackout_setting values in the object are used, instead of the grid default.
.Sp
The override_blackout_setting attribute can be specified explicitly. It is also set implicitly when discovery_blackout_setting or port_control_blackout_setting is set to a defined value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the override_blackout_setting flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $dhcp_range\->override_blackout_setting();
\& # Modify attribute value
\& $dhcp_range\->override_blackout_setting(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "override_recycle_leases( )"
.IX Subsection "override_recycle_leases( )"
.RS 4
The override_recycle_leases attribute controls whether the recycle_leases value in the \s-1DHCP\s0 IPv6 Range is used, instead of the grid default.
.Sp
The override_recycle_leases attribute can be specified explicitly. It is also set implicitly when recycle_leases is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the grid-level setting for recycle_leases. Set the parameter to \*(L"false\*(R" to inherit the grid-level setting for recycle_leases.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&    #Getting override_recycle_leases
\&    my $override_recycle_leases=$dhcp_ipv6range\->override_recycle_leases( );
\&    #Modifying override_recycle_leases
\&    $dhcp_ipv6range\->override_recycle_leases("true");
.Ve
.RE
.RS 4
.RE
.SS "override_subscribe_settings( )"
.IX Subsection "override_subscribe_settings( )"
.RS 4
The override_subscribe_settings attribute controls whether the subscribe_settings method values of the member are used, instead of the Grid default.
.Sp
The override_subscribe_settings attribute can be specified explicitly. It is also set implicitly when subscribe_settings is set to a defined value.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Set the parameter to \*(L"true\*(R" to override the Grid-level setting for subscribe_settings. Set the parameter to \*(L"false\*(R" to inherit the Grid-level setting for subscribe_settings.
.Sp
The default value of this parameter is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get override_subscribe_settings value
\& my $override_subscribe_settings = $object\->override_subscribe_settings( );
\& #Modify override_subscribe_settings value
\& $object\->override_subscribe_settings("true");
.Ve
.RE
.RS 4
.RE
.SS "port_control_blackout_setting"
.IX Subsection "port_control_blackout_setting"
.RS 4
Use this method to set or retrieve the port control blackout setting.
.Sp
Setting this method to a defined value implicitly sets the override_blackout_setting method to \*(L"true\*(R". If discovery_blackout_setting is undefined, setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_blackout_setting attribute to \*(L"false\*(R".
.Sp
Note that when port_control_blackout_setting is set to a defined value and override_blackout_setting is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$network\fR\->port_control_blackout_setting($blackout); \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); will set override_blackout_setting to \*(L"false\*(R", and the sequence \f(CW$network\fR\->override_blackout_setting(\*(L"false\*(R"); \f(CW$network\fR\->port_control_blackout_setting($blackout); will result in override_blackout_setting=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid value is an Infoblox::Grid::Discovery::Properties::BlackoutSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get port_control_blackout_setting
\& my $port_control_blackout_setting = $dhcp_ipv6range\->port_control_blackout_setting();
\& #Modify port_control_blackout_setting
\& $dhcp_ipv6range\->port_control_blackout_setting($blackout);
.Ve
.RE
.RS 4
.RE
.SS "restart_if_needed( )"
.IX Subsection "restart_if_needed( )"
.RS 4
Use this method to set the flag that indicates whether \s-1DHCP\s0 service should be restarted on a member that is serving \s-1DHCP\s0 for the changed object referenced in a cloud \s-1API\s0 request.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify true to restart the \s-1DHCP\s0 service.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
None
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Modify
\& $network\->restart_if_needed(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "recycle_leases( )"
.IX Subsection "recycle_leases( )"
.RS 4
Use this method to set or retrieve the recycle_leases flag of the \s-1DHCP\s0 IPv6 range.
.Sp
If the flag is enabled, the leases are kept in recycle bin until one week after expiration. When the flag is disabled, the leases are irrecoverably deleted.
.Sp
Setting this method to a defined value implicitly sets the override_recycle_leases method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the grid default and automatically resets the override_recycle_leases attribute to \*(L"false\*(R".
.Sp
Note that when recycle_leases is set to a defined value and override_recycle_leases is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->recycle_leases(\*(L"true\*(R"); \f(CW$object\fR\->override_recycle_leases(\*(L"false\*(R"); will set override_recycle_leases to \*(L"false\*(R", and the sequence \f(CW$objct\fR\->override_recycle_leases(\*(L"false\*(R"); \f(CW$object\fR\->recycle_leases(\*(L"true\*(R"); will result in override_recycle_leases=\*(L"true\*(R".
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the recycle_leases flag or \*(L"false\*(R" to deactivate/unset it. The default value is undefined.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get recycle_leases
\& my $recycle_leases = $dhcp_ipv6range\->recycle_leases();
\& #Modify recycle_leases
\& $dhcp_ipv6range\->recycle_leases("false");
.Ve
.RE
.RS 4
.RE
.SS "same_port_control_discovery_blackout( )"
.IX Subsection "same_port_control_discovery_blackout( )"
.RS 4
Use this method to set or retrieve the flag that enables using the same discovery blackout for port control blackout.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify 'true' to use same discovery blackout for port control blackout or 'false' to disable it. The default value is 'false'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get attribute value
\& my $value = $dhcp_ipv6range\->same_port_control_discovery_blackout();
\& # Modify attribute value
\& $dhcp_ipv6range\->same_port_control_discovery_blackout(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "server_association_type( )"
.IX Subsection "server_association_type( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 IPv6 range server association type.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.Sp
The server_association_type attribute can be specified explicitly. It is also set implicitly when member is set.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are \*(L"\s-1NONE\*(R"\s0 and \*(L"\s-1MEMBER\*(R".\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get server_association_type
\& my $server_association_type = $dhcp_ipv6range\->server_association_type();
\& #Modify server_association_type
\& $dhcp_ipv6range\->server_association_type("MEMBER");
.Ve
.RE
.RS 4
.RE
.SS "start_addr( )"
.IX Subsection "start_addr( )"
.RS 4
Use this method to set or retrieve the start address of the \s-1DHCP\s0 IPv6 range.
.Sp
A start address is the first \s-1IP\s0 address in the \s-1DHCP\s0 IPv6 range available for the clients.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify the start address of the \s-1DHCP\s0 IPv6 range in lowercase.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get start_addr
\& my $start_addr = $dhcp_ipv6range\->start_addr();
\& #Modify start_addr
\& $dhcp_ipv6range\->start_addr("2001:db8:0:c000:0001::");
.Ve
.RE
.RS 4
.RE
.SS "subscribe_settings( )"
.IX Subsection "subscribe_settings( )"
.RS 4
Use this method to set or retrieve the Cisco \s-1ISE\s0 subscribe settings.
.Sp
Setting this method to a defined value implicitly sets the override_subscribe_settings method to \*(L"true\*(R". Setting the parameter to undefined causes the appliance to use the Cisco \s-1ISE\s0 endpoint default and automatically resets the override_subscribe_settings method to \*(L"false\*(R".
.Sp
Note that when subscribe_settings is set to a defined value and override_subscribe_settings is set to \*(L"false\*(R", the last operation takes precedence. Thus the sequence \f(CW$object\fR\->subscribe_settings($value); \f(CW$object\fR\->override_subscribe_settings(\*(L"false\*(R"); will set override_subscribe_settings to \*(L"false\*(R", and the sequence \f(CW$object\fR\->override_subscribe_settings(\*(L"false\*(R"); \f(CW$object\fR\->subscribe_settings($value); will result in override_subscribe_settings=\*(L"true\*(R".
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an Infoblox::CiscoISE::SubscribeSetting object.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get subscribe_settings value
\& my $subscribe_settings = $object\->subscribe_settings();
\& #Modify subscribe_settings value
\& $object\->subscribe_settings($settings);
.Ve
.RE
.RS 4
.RE
.SS "template( )"
.IX Subsection "template( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 IPv6 range template name for a \s-1DHCP\s0 IPv6 Range object.
.Sp
Template is the name of a \s-1DHCP\s0 IPv6 range template which will be used to create the \s-1DHCP\s0 IPv6 range.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
The template parameter can be used to only add a new \s-1DHCP\s0 IPv6 range and cannot be used during object modify or returned during object get.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get template
\& my $template = $dhcp_ipv6range\->template();
\& #Modify template
\& $dhcp_ipv6range\->template("Template_Name");
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to a \s-1DHCP\s0 IPv6 range object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a \s-1DHCP\s0 IPv6 Range object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\& );
\& unless ($session) {
\&        die("Construct session failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& #Create a DHCP Member object
\& my $memberdhcp = Infoblox::DHCP::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => "192.168.1.2"
\& );
\& unless($memberdhcp) {
\&        die("Construct member failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP Member object created successfully\en";
\&
\& #Create the Network object with the member
\& my $network = Infoblox::DHCP::IPv6Network\->new(
\&     network => "2001:db8:0:a000::/51",
\&     comment => "add network",
\&     members => [ $memberdhcp ]
\& );
\& unless($network) {
\&        die("Construct Network object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network object created successfully\en";
\&
\& #Add the Network object into the Infoblox appliance through a session
\& $session\->add($network)
\&     or die("Add Network object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object added to Infoblox appliance successfully\en";
\&
\& #Construct exclusion range object
\& my $exclusion_range = Infoblox::DHCP::ExclusionRange\->new(
\&     start_address => "2001:db8:0:a000:0001::1a",
\&     end_address   => "2001:db8:0:a000:0001::fa",
\&     comment       => "Excluded range"
\& );
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 IPv6 Range object\fR
.PP
.Vb 10
\& my $dhcp_range = Infoblox::DHCP::IPv6Range\->new(
\&                                               start_addr => \*(Aq2001:db8:0:a000:0001::\*(Aq,
\&                                               end_addr   => \*(Aq2001:db8:0:a000:0021::\*(Aq,
\&                                               network    => \*(Aq2001:db8:0:a000::/51\*(Aq,
\&                                               comment    => \*(AqRandom comment\*(Aq,
\&                                               disable    => \*(Aqtrue\*(Aq,
\&                                               exclude => [$exclusion_range],
\&                                               ipv6_start_prefix       => \*(Aq2001:db8:0:c001:0001::\*(Aq,
\&                                               ipv6_end_prefix         => \*(Aq2001:db8:0:c001:0021::\*(Aq,
\&                                               ipv6_prefix_bits        => 12,
\&                                               member                  => $memberdhcp,
\&                                               name                    => \*(Aqrandomrange\*(Aq,
\&                                               override_recycle_leases => \*(Aqtrue\*(Aq,
\&                                               recycle_leases          => \*(Aqfalse\*(Aq,
\&                                               server_association_type => \*(AqMEMBER\*(Aq,
\& );
\& unless($dhcp_range) {
\&        die("Construct DHCP IPv6 Range object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP IPv6 Range object created successfully\en";
\&
\& #Add the DHCP IPv6 Range object into the Infoblox appliance through a session
\& $session\->add($dhcp_range)
\&     or die("Add DHCP IPv6 Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP IPv6 Range object added to the network successfully\en";
.Ve
.PP
\&\fB#Create a \s-1DHCP\s0 IPv6 Range object using a template\fR
.PP
.Vb 10
\& my $dhcp_range_template = Infoblox::DHCP::IPv6RangeTemplate\->new(
\&         name                    => "custom_range_template",
\&         offset                  => "10",
\&         number_of_addresses     => "90",
\& );
\& unless($dhcp_range_template) {
\&        die("Construct DHCP IPv6 Range template object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP IPv6 Range template object created successfully\en";
\&
\& #Add the DHCP IPv6 Range template object into the Infoblox appliance through a session
\& $session\->add($dhcp_range_template)
\&     or die("Add DHCP IPv6 Range template object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP IPv6 Range template object added to the network successfully\en";
\&
\& my $dhcp_range = Infoblox::DHCP::IPv6Range\->new(
\&         start_addr              => "2001:db8:0:a000:0100::",
\&         end_addr                => "2001:db8:0:a000:0200::",
\&         network                 => "2001:db8:0:a000::/51",
\&         template                => "custom_range_template"
\& );
\& unless($dhcp_range) {
\&        die("Construct DHCP IPv6 Range object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "DHCP IPv6 Range object created successfully\en";
\&
\& #Add the DHCP IPv6 Range object into the Infoblox appliance through a session
\& $session\->add($dhcp_range)
\&     or die("Add DHCP IPv6 Range object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP IPv6 Range object added to the network successfully\en";
.Ve
.PP
\&\fB#Get and modify a \s-1DHCP\s0 IPv6 Range\fR
.PP
.Vb 11
\& #Get a DHCP IPv6 Range through the session
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DHCP::IPv6Range",
\&     start_addr => "2001:db8:0:a000:0001::",
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP IPv6 Range failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP IPv6 Range object found at least 1 matching entry\en";
\&
\& #Modify one of the attributes of the specified DHCP IPv6 Range
\& $object\->comment ("modified comment");
\&
\& #Apply the changes
\& $session\->modify($object)
\&     or die("Modify DHCP IPv6 Range failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP IPv6 Range object modified successfully \en";
.Ve
.PP
\&\fB#Search a \s-1DHCP\s0 IPv6 Range\fR
.PP
.Vb 6
\& # search for DHCP IPv6 range object with start address having last octet as 1
\& my @retrieved_objs = $session\->search(
\&     object     => "Infoblox::DHCP::IPv6Range",
\&     network    => "2001:db8:0:a000::/51",
\&     comment    => "Modified.*"
\&);
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Search DHCP IPv6 range failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search DHCP IPv6 range object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Remove a \s-1DHCP\s0 IPv6 Range\fR
.PP
.Vb 5
\& #Get a DHCP IPv6 Range through the session
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DHCP::IPv6Range",
\&     start_addr => "2001:db8:0:a000:0001::",
\& );
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP IPv6 Range failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP IPv6 Range object found at least 1 matching entry\en";
\&
\& #submit the object for removal
\& $session\->remove($object)
\&     or die("Remove DHCP IPv6 Range failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP IPv6 Range object removed successfully \en";
\&
\& #submit the Range Template object for removal
\& $session\->remove($dhcp_range_template)
\&     or die("Remove DHCP IPv6 Range Tempate failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP IPv6 Range Templateobject removed successfully \en";
\&
\& #Get a DHCP IPv6 Range through the session
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DHCP::IPv6Range",
\&     start_addr => "2001:db8:0:a000:0100::",
\& );
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP IPv6 Range failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP IPv6 Range object found at least 1 matching entry\en";
\&
\& #submit the object for removal
\& $session\->remove($object)
\&     or die("Remove DHCP IPv6 Range failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP IPv6 Range object removed successfully \en";
\&
\& #Remove network
\&
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::DHCP::IPv6Network",
\&     network    => "2001:db8:0:a000::/51",
\& );
\&
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&        die("Get DHCP IPv6 Network failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get DHCP IPv6 Network object found at least 1 matching entry\en";
\&
\& #submit the object for removal
\& $session\->remove($object)
\&     or die("Remove DHCP IPv6 Network failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& print "DHCP IPv6 Network object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR,Infoblox::DHCP::View, Infoblox::DHCP::ExclusionRange, Infoblox::DHCP::Member, Infoblox::DHCP::Option, Infoblox::DHCP::IPv6RangeTemplate
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
