.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Class::Factory 3"
.TH Class::Factory 3 "2007-11-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Class::Factory \- Base class for dynamic factory classes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package My::Factory;
\&  use base qw( Class::Factory );
\& 
\&  # Add our default types
\& 
\&  # This type is loaded when the statement is run
\& 
\&  _\|_PACKAGE_\|_\->add_factory_type( perl => \*(AqMy::Factory::Perl\*(Aq );
\&
\&  # This type is loaded on the first request for type \*(Aqblech\*(Aq
\& 
\&  _\|_PACKAGE_\|_\->register_factory_type( blech => \*(AqMy::Factory::Blech\*(Aq );
\& 
\&  1;
\&
\&  # Adding a new factory type in code \-\- \*(AqOther::Custom::Class\*(Aq is
\&  # brought in via \*(Aqrequire\*(Aq immediately
\& 
\&  My::Factory\->add_factory_type( custom => \*(AqOther::Custom::Class\*(Aq );
\&  my $custom_object = My::Factory\->new( \*(Aqcustom\*(Aq, { this => \*(Aqthat\*(Aq } );
\& 
\&  # Registering a new factory type in code; \*(AqOther::Custom::ClassTwo\*(Aq
\&  # isn\*(Aqt brought in yet...
\& 
\&  My::Factory\->register_factory_type( custom_two => \*(AqOther::Custom::ClassTwo\*(Aq );
\& 
\&  # ...it\*(Aqs only \*(Aqrequire\*(Aqd when the first instance of the type is
\&  # created
\& 
\&  my $custom_object = My::Factory\->new( \*(Aqcustom_two\*(Aq, { this => \*(Aqthat\*(Aq } );
\&
\&  # Get all the loaded and registered classes and types
\& 
\&  my @loaded_classes     = My::Factory\->get_loaded_classes;
\&  my @loaded_types       = My::Factory\->get_loaded_types;
\&  my @registered_classes = My::Factory\->get_registered_classes;
\&  my @registered_types   = My::Factory\->get_registered_types;
\&
\&  # Get a registered class by it\*(Aqs factory type
\&  
\&  my $registered_class = My::Factory\->get_registered_class( \*(Aqtype\*(Aq );
\&
\&  # Ask the object created by the factory: Where did I come from?
\& 
\&  my $custom_object = My::Factory\->new( \*(Aqcustom\*(Aq );
\&  print "Object was created by factory: ",
\&       $custom_object\->get_my_factory, " ",
\&       "and is of type: ",
\&       $custom_object\->get_my_factory_type;
\&
\&  # Remove a factory type
\&
\&  My::Factory\->remove_factory_type(\*(Aqperl\*(Aq);
\&
\&  # Unregister a factory type
\&
\&  My::Factory\->unregister_factory_type(\*(Aqblech\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple module that factory classes can use to generate new
types of objects on the fly, providing a consistent interface to
common groups of objects.
.PP
Factory classes are used when you have different implementations for
the same set of tasks but may not know in advance what implementations
you will be using. Configuration files are a good example of
this. There are four basic operations you would want to do with any
configuration: read the file in, lookup a value, set a value, write
the file out. There are also many different types of configuration
files, and you may want users to be able to provide an implementation
for their own home-grown configuration format.
.PP
With a factory class this is easy. To create the factory class, just
subclass \f(CW\*(C`Class::Factory\*(C'\fR and create an interface for your
configuration serializer. \f(CW\*(C`Class::Factory\*(C'\fR even provides a simple
constructor for you. Here's a sample interface and our two built-in
configuration types:
.PP
.Vb 1
\& package My::ConfigFactory;
\& 
\& use strict;
\& use base qw( Class::Factory );
\& 
\& sub read  { die "Define read() in implementation" }
\& sub write { die "Define write() in implementation" }
\& sub get   { die "Define get() in implementation" }
\& sub set   { die "Define set() in implementation" }
\& 
\& _\|_PACKAGE_\|_\->add_factory_type( ini  => \*(AqMy::IniReader\*(Aq );
\& _\|_PACKAGE_\|_\->add_factory_type( perl => \*(AqMy::PerlReader\*(Aq );
\& 
\& 1;
.Ve
.PP
And then users can add their own subclasses:
.PP
.Vb 1
\& package My::CustomConfig;
\& 
\& use strict;
\& use base qw( My::ConfigFactory );
\& 
\& sub init {
\&     my ( $self, $filename, $params ) = @_;
\&     if ( $params\->{base_url} ) {
\&         $self\->read_from_web( join( \*(Aq/\*(Aq, $params\->{base_url}, $filename ) );
\&     }
\&     else {
\&         $self\->read( $filename );
\&     }
\&     return $self;
\& }
\& 
\& sub read  { ... implementation to read a file ... }
\& sub write { ... implementation to write a file ...  }
\& sub get   { ... implementation to get a value ... }
\& sub set   { ... implementation to set a value ... }
\& 
\& sub read_from_web { ... implementation to read via http ... }
\& 
\& # Now register my type with the factory
\& 
\& My::ConfigFactory\->add_factory_type( \*(Aqmytype\*(Aq => _\|_PACKAGE_\|_ );
\& 
\& 1;
.Ve
.PP
(You may not wish to make your factory the same as your interface, but
this is an abbreviated example.)
.PP
So now users can use the custom configuration with something like:
.PP
.Vb 1
\& #!/usr/bin/perl
\& 
\& use strict;
\& use My::ConfigFactory;
\& use My::CustomConfig;   # this adds the factory type \*(Aqcustom\*(Aq...
\& 
\& my $config = My::ConfigFactory\->new( \*(Aqcustom\*(Aq, \*(Aqmyconf.dat\*(Aq );
\& print "Configuration is a: ", ref( $config ), "\en";
.Ve
.PP
Which prints:
.PP
.Vb 1
\& Configuration is a My::CustomConfig
.Ve
.PP
And they can even add their own:
.PP
.Vb 1
\& My::ConfigFactory\->register_factory_type( \*(Aqnewtype\*(Aq => \*(AqMy::New::ConfigReader\*(Aq );
.Ve
.PP
This might not seem like a very big win, and for small standalone
applications probably isn't. But when you develop large applications
the \f(CW\*(C`(add|register)_factory_type()\*(C'\fR step will almost certainly be
done at application initialization time, hidden away from the eyes of
the application developer. That developer will only know that she can
access the different object types as if they are part of the system.
.PP
As you see in the example above implementation for subclasses is very
simple \*(-- just add \f(CW\*(C`Class::Factory\*(C'\fR to your inheritance tree and you
are done.
.SS "Gotchas"
.IX Subsection "Gotchas"
All type-to-class mapping information is stored under the original
subclass name. So the following will not do what you expect:
.PP
.Vb 3
\& package My::Factory;
\& use base qw( Class::Factory );
\& ...
\&
\& package My::Implementation;
\& use base qw( My::Factory );
\& ...
\& My::Implementation\->register_factory_type( impl => \*(AqMy::Implementation\*(Aq );
.Ve
.PP
This does not register 'My::Implementation' under 'My::Factory' as you
would like, it registers the type under 'My::Implementation' because
that's the class we used to invoke the 'register_factory_type'
method. Make all \f(CW\*(C`add_factory_type()\*(C'\fR and \f(CW\*(C`register_factory_type()\*(C'\fR
invocations with the original factory class name and you'll be golden.
.SS "Registering Factory Types"
.IX Subsection "Registering Factory Types"
As an additional feature, you can have your class accept registered
types that get brought in only when requested. This lazy loading
feature can be very useful when your factory offers many choices and
users will only need one or two of them at a time, or when some
classes the factory generates use libraries that some users may not
have installed.
.PP
For example, say I have a factory that generates an object which
parses \s-1GET/POST\s0 parameters. One type uses the ubiquitous \s-1CGI\s0
module, the other uses the faster but rarer
Apache::Request. Many systems do not have
Apache::Request installed so we do not want to
\&'use' the module whenever we create the factory.
.PP
Instead, we will register these types with the factory and only when
that type is requested will we bring that implementation in. To extend
our configuration example above we'll change the configuration factory
to use \f(CW\*(C`register_factory_type()\*(C'\fR instead of \f(CW\*(C`add_factory_type()\*(C'\fR:
.PP
.Vb 1
\& package My::ConfigFactory;
\& 
\& use strict;
\& use base qw( Class::Factory );
\& 
\& sub read  { die "Define read() in implementation" }
\& sub write { die "Define write() in implementation" }
\& sub get   { die "Define get() in implementation" }
\& sub set   { die "Define set() in implementation" }
\& 
\& _\|_PACKAGE_\|_\->register_factory_type( ini  => \*(AqMy::IniReader\*(Aq );
\& _\|_PACKAGE_\|_\->register_factory_type( perl => \*(AqMy::PerlReader\*(Aq );
\& 
\& 1;
.Ve
.PP
This way you can leave the actual inclusion of the module for people
who would actually use it. For our configuration example we might
have:
.PP
.Vb 1
\& My::ConfigFactory\->register_factory_type( SOAP => \*(AqMy::Config::SOAP\*(Aq );
.Ve
.PP
So the \f(CW\*(C`My::Config::SOAP\*(C'\fR class will only get included at the first
request for a configuration object of that type:
.PP
.Vb 2
\& my $config = My::ConfigFactory\->new( \*(AqSOAP\*(Aq, \*(Aqhttp://myco.com/\*(Aq,
\&                                              { port => 8080, ... } );
.Ve
.SS "Subclassing"
.IX Subsection "Subclassing"
Piece of cake:
.PP
.Vb 2
\& package My::Factory;
\& use base qw( Class::Factory );
.Ve
.PP
or the old-school:
.PP
.Vb 3
\& package My::Factory;
\& use Class::Factory;
\& @My::Factory::ISA = qw( Class::Factory );
.Ve
.PP
You can also override two methods for logging/error handling. There
are a few instances where \f(CW\*(C`Class::Factory\*(C'\fR may generate a warning
message, or even a fatal error.  Internally, these are handled using
\&\f(CW\*(C`warn\*(C'\fR and \f(CW\*(C`die\*(C'\fR, respectively.
.PP
This may not always be what you want though.  Maybe you have a
different logging facility you wish to use.  Perhaps you have a more
sophisticated method of handling errors (like
Log::Log4perl.  If this is the case, you are welcome
to override either of these methods.
.PP
Currently, these two methods are implemented like the following:
.PP
.Vb 2
\& sub factory_log   { shift; warn @_, "\en" }
\& sub factory_error { shift; die @_, "\en" }
.Ve
.PP
Assume that instead of using \f(CW\*(C`warn\*(C'\fR, you wish to use
Log::Log4perl.  So, in your subclass, you might
override \f(CW\*(C`factory_log\*(C'\fR like so:
.PP
.Vb 5
\& sub factory_log {
\&     shift;
\&     my $logger = get_logger;
\&     $logger\->warn( @_ );
\& }
.Ve
.SS "Common Usage Pattern: Initializing from the constructor"
.IX Subsection "Common Usage Pattern: Initializing from the constructor"
This is a very common pattern: Subclasses create an \f(CW\*(C`init()\*(C'\fR method
that gets called when the object is created:
.PP
.Vb 1
\& package My::Factory;
\& 
\& use strict;
\& use base qw( Class::Factory );
\& 
\& 1;
.Ve
.PP
And here is what a subclass might look like \*(-- note that it doesn't
have to subclass \f(CW\*(C`My::Factory\*(C'\fR as our earlier examples did:
.PP
.Vb 1
\& package My::Subclass;
\& 
\& use strict;
\& use base qw( Class::Accessor );
\& 
\& my @CONFIG_FIELDS = qw( status created_on created_by updated_on updated_by );
\& my @FIELDS = ( \*(Aqfilename\*(Aq, @CONFIG_FIELDS );
\& My::Subclass\->mk_accessors( @FIELDS );
\& 
\& # Note: we have taken the flattened C<@params> passed in and assigned
\& # the first element as C<$filename> and the other element as a
\& # hashref C<$params>
\&
\& sub init {
\&     my ( $self, $filename, $params ) = @_;
\&     unless ( \-f $filename ) {
\&         die "Filename [$filename] does not exist. Object cannot be created";
\&     }
\&     $self\->filename( filename );
\&     $self\->read_file_contents;
\&     foreach my $field ( @CONFIG_FIELDS ) {
\&         $self\->{ $field } = $params\->{ $field } if ( $params\->{ $field } );
\&     }
\&     return $self;
\& }
.Ve
.PP
The parent class (\f(CW\*(C`My::Factory\*(C'\fR) has made as part of its definition
that the only parameters to be passed to the \f(CW\*(C`init()\*(C'\fR method are
\&\f(CW$filename\fR and \f(CW$params\fR, in that order. It could just as easily
have specified a single hashref parameter.
.PP
These sorts of specifications are informal and not enforced by this
\&\f(CW\*(C`Class::Factory\*(C'\fR.
.SS "Registering Common Types by Default"
.IX Subsection "Registering Common Types by Default"
Many times you will want the parent class to automatically register
the types it knows about:
.PP
.Vb 1
\& package My::Factory;
\& 
\& use strict;
\& use base qw( Class::Factory );
\& 
\& My::Factory\->register_factory_type( type1 => \*(AqMy::Impl::Type1\*(Aq );
\& My::Factory\->register_factory_type( type2 => \*(AqMy::Impl::Type2\*(Aq );
\& 
\& 1;
.Ve
.PP
This allows the default types to be registered when the factory is
initialized. So you can use the default implementations without any
more registering/adding:
.PP
.Vb 1
\& #!/usr/bin/perl
\&
\& use strict;
\& use My::Factory;
\& 
\& my $impl1 = My::Factory\->new( \*(Aqtype1\*(Aq );
\& my $impl2 = My::Factory\->new( \*(Aqtype2\*(Aq );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "Factory Methods"
.IX Subsection "Factory Methods"
\&\fBnew( \f(CB$type\fB, \f(CB@params\fB )\fR
.PP
This is a default constructor you can use. It is quite simple:
.PP
.Vb 7
\& sub new {
\&     my ( $pkg, $type, @params ) = @_;
\&     my $class = $pkg\->get_factory_class( $type );
\&     return undef unless ( $class );
\&     my $self = bless( {}, $class );
\&     return $self\->init( @params );
\& }
.Ve
.PP
We just create a new object as a blessed hashref of the class
associated (from an earlier call to \f(CW\*(C`add_factory_type()\*(C'\fR or
\&\f(CW\*(C`register_factory_type()\*(C'\fR) with \f(CW$type\fR and then call the \f(CW\*(C`init()\*(C'\fR
method of that object. The \f(CW\*(C`init()\*(C'\fR method should return the object,
or die on error.
.PP
If we do not get a class name from \f(CW\*(C`get_factory_class()\*(C'\fR we issue a
\&\f(CW\*(C`factory_error()\*(C'\fR message which typically means we throw a
\&\f(CW\*(C`die\*(C'\fR. However, if you've overridden \f(CW\*(C`factory_error()\*(C'\fR and do not
die, this factory call will return \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBget_factory_class( \f(CB$object_type\fB )\fR
.PP
Usually called from a constructor when you want to lookup a class by a
type and create a new object of \f(CW$object_type\fR. If \f(CW$object_type\fR is
associated with a class and that class has already been included, the
class is returned. If \f(CW$object_type\fR is registered with a class (not
yet included), then we try to \f(CW\*(C`require\*(C'\fR the class. Any errors on the
\&\f(CW\*(C`require\*(C'\fR bubble up to the caller. If there are no errors, the class
is returned.
.PP
Returns: name of class. If a class matching \f(CW$object_type\fR is not
found or cannot be \f(CW\*(C`require\*(C'\fRd, then a \f(CW\*(C`die()\*(C'\fR (or more specifically,
a \f(CW\*(C`factory_error()\*(C'\fR) is thrown.
.PP
\&\fBadd_factory_type( \f(CB$object_type\fB, \f(CB$object_class\fB )\fR
.PP
Tells the factory to dynamically add a new type to its stable and
brings in the class implementing that type using \f(CW\*(C`require\*(C'\fR. After
running this the factory class will be able to create new objects of
type \f(CW$object_type\fR.
.PP
Returns: name of class added if successful. If the proper parameters
are not given or if we cannot find \f(CW$object_class\fR in \f(CW@INC\fR, then we
call \f(CW\*(C`factory_error()\*(C'\fR. A \f(CW\*(C`factory_log()\*(C'\fR message is issued if the
type has already been added.
.PP
\&\fBregister_factory_type( \f(CB$object_type\fB, \f(CB$object_class\fB )\fR
.PP
Tells the factory to register a new factory type. This type will be
dynamically included (using \f(CW\*(C`add_factory_type()\*(C'\fR at the first request
for an instance of that type.
.PP
Returns: name of class registered if successful. If the proper
parameters are not given then we call \f(CW\*(C`factory_error()\*(C'\fR. A
\&\f(CW\*(C`factory_log()\*(C'\fR message is issued if the type has already been
registered.
.PP
\&\fBremove_factory_type( \f(CB@object_types\fB )\fR
.PP
Removes a factory type from the factory. This is the opposite of
\&\f(CW\*(C`add_factory_type()\*(C'\fR. No return value.
.PP
Removing a factory type is useful if a subclass of the factory wants to
redefine the mapping for the factory type. \f(CW\*(C`add_factory_type()\*(C'\fR doesn't allow
overriding a factory type, so you have to remove it first.
.PP
\&\fBunregister_factory_type( \f(CB@object_types\fB )\fR
.PP
Unregisters a factory type from the factory. This is the opposite of
\&\f(CW\*(C`register_factory_type()\*(C'\fR. No return value.
.PP
Unregistering a factory type is useful if a subclass of the factory wants to
redefine the mapping for the factory type. \f(CW\*(C`register_factory_type()\*(C'\fR doesn't
allow overriding a factory type, so you have to unregister it first.
.PP
\&\fBget_factory_type_for( \f(CB$class\fB )\fR
.PP
Takes an object or a class name string and returns the factory type that is
used to construct that class. Returns undef if there is no such factory type.
.PP
\&\fB\fBget_loaded_classes()\fB\fR
.PP
Returns a sorted list of the currently loaded classes. If no classes
have been loaded yet, returns an empty list.
.PP
\&\fB\fBget_loaded_types()\fB\fR
.PP
Returns a sorted list of the currently loaded types. If no classes
have been loaded yet, returns an empty list.
.PP
\&\fB\fBget_registered_classes()\fB\fR
.PP
Returns a sorted list of the classes that were ever registered. If no
classes have been registered yet, returns an empty list.
.PP
Note that a class can be both registered and loaded since we do not
clear out the registration once a registered class has been loaded on
demand.
.PP
\&\fBget_registered_class( \f(CB$factory_type\fB )\fR
.PP
Returns a registered class given a factory type.
If no class of type \f(CW$factory_type\fR is registered, returns undef.
If no classes have been registered yet, returns undef.
.PP
\&\fB\fBget_registered_types()\fB\fR
.PP
Returns a sorted list of the types that were ever registered. If no
types have been registered yet, returns an empty list.
.PP
Note that a type can be both registered and loaded since we do not
clear out the registration once a registered type has been loaded on
demand.
.PP
\&\fBfactory_log( \f(CB@message\fB )\fR
.PP
Used internally instead of \f(CW\*(C`warn\*(C'\fR so subclasses can override. Default
implementation just uses \f(CW\*(C`warn\*(C'\fR.
.PP
\&\fBfactory_error( \f(CB@message\fB )\fR
.PP
Used internally instead of \f(CW\*(C`die\*(C'\fR so subclasses can override. Default
implementation just uses \f(CW\*(C`die\*(C'\fR.
.SS "Implementation Methods"
.IX Subsection "Implementation Methods"
If your implementations \*(-- objects the factory creates \*(-- also inherit
from the factory they can do a little introspection and tell you where
they came from. (Inheriting from the factory is a common usage: the
\&\s-1SYNOPSIS\s0 example does it.)
.PP
All methods here can be called on either a class or an object.
.PP
\&\fB\fBget_my_factory()\fB\fR
.PP
Returns the factory class used to create this object or instances of
this class. If this class (or object class) hasn't been registered
with the factory it returns undef.
.PP
So with our \s-1SYNOPSIS\s0 example we could do:
.PP
.Vb 3
\& my $custom_object = My::Factory\->new( \*(Aqcustom\*(Aq );
\& print "Object was created by factory ",
\&       "\*(Aq", $custom_object\->get_my_factory, "\*(Aq;
.Ve
.PP
which would print:
.PP
.Vb 1
\& Object was created by factory \*(AqMy::Factory\*(Aq
.Ve
.PP
\&\fB\fBget_my_factory_type()\fB\fR
.PP
Returns the type used to by the factory create this object or
instances of this class. If this class (or object class) hasn't been
registered with the factory it returns undef.
.PP
So with our \s-1SYNOPSIS\s0 example we could do:
.PP
.Vb 3
\& my $custom_object = My::Factory\->new( \*(Aqcustom\*(Aq );
\& print "Object is of type ",
\&       "\*(Aq", $custom_object\->get_my_factory_type, "\*(Aq";
.Ve
.PP
which would print:
.PP
.Vb 1
\& Object is of type \*(Aqcustom\*(Aq
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2007 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\*(L"Design Patterns\*(R", by Erich Gamma, Richard Helm, Ralph Johnson and
John Vlissides. Addison Wesley Longman, 1995. Specifically, the
\&'Factory Method' pattern, pp. 107\-116.
.SH "AUTHORS"
.IX Header "AUTHORS"
Fred Moyer <fred@redhotpenguin.com> is the current maintainer.
.PP
Chris Winters <chris@cwinters.com>
.PP
Eric Andreychek <eric@openthought.net> implemented overridable
log/error capability and prodded the module into a simpler design.
.PP
Srdjan Jankovic <srdjan@catalyst.net.nz> contributed the idea
for '\fBget_my_factory()\fR' and '\fBget_my_factory_type()\fR'
.PP
Sebastian Knapp <giftnuss@netscape.net> contributed the idea for
\&'\fBget_registered_class()\fR'
.PP
Marcel Gruenauer <marcel@cpan.org> contributed the methods
\&\fBremove_factory_type()\fR and \fBunregister_factory_type()\fR.
