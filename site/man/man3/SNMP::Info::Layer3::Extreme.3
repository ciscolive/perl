.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::Layer3::Extreme 3"
.TH SNMP::Info::Layer3::Extreme 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::Layer3::Extreme \- Perl5 Interface to Extreme Network Devices
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Miller, Bill Fenner
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& # Let SNMP::Info determine the correct subclass for you.
\& my $extreme = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class      = $extreme\->class();
\&
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides abstraction to the configuration information obtainable from an
Extreme device through \s-1SNMP.\s0
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.IP "SNMP::Info::Layer3" 4
.IX Item "SNMP::Info::Layer3"
.PD 0
.IP "SNMP::Info::MAU" 4
.IX Item "SNMP::Info::MAU"
.IP "SNMP::Info::EDP" 4
.IX Item "SNMP::Info::EDP"
.PD
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fIEXTREME-BASE-MIB\fR" 4
.IX Item "EXTREME-BASE-MIB"
.PD 0
.IP "\fIEXTREME-SYSTEM-MIB\fR" 4
.IX Item "EXTREME-SYSTEM-MIB"
.IP "\fIEXTREME-FDB-MIB\fR" 4
.IX Item "EXTREME-FDB-MIB"
.IP "\fIEXTREME-VLAN-MIB\fR" 4
.IX Item "EXTREME-VLAN-MIB"
.IP "\fIEXTREME-POE-MIB\fR" 4
.IX Item "EXTREME-POE-MIB"
.IP "\fIEXTREME-STP-EXTENSIONS-MIB\fR" 4
.IX Item "EXTREME-STP-EXTENSIONS-MIB"
.IP "Inherited Classes' MIBs" 4
.IX Item "Inherited Classes' MIBs"
.PD
See classes listed above for their required MIBs.
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP\s0
.ie n .IP "$extreme\->\fBmodel()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBmodel()\fR" 4
.IX Item "$extreme->model()"
Returns model type.  Checks \f(CW$extreme\fR\->\fBid()\fR against the \fIEXTREME-BASE-MIB\fR.
.ie n .IP "$extreme\->\fBvendor()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBvendor()\fR" 4
.IX Item "$extreme->vendor()"
Returns \f(CW\*(C`extreme\*(C'\fR
.ie n .IP "$extreme\->\fBos()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBos()\fR" 4
.IX Item "$extreme->os()"
Returns \f(CW\*(C`xos\*(C'\fR or \f(CW\*(C`extremeware\*(C'\fR depending on \fBdescription()\fR
.ie n .IP "$extreme\->\fBos_ver()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBos_ver()\fR" 4
.IX Item "$extreme->os_ver()"
Parses device operating system version from \fBdescription()\fR
.ie n .IP "$extreme\->\fBserial()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBserial()\fR" 4
.IX Item "$extreme->serial()"
Returns serial number
.Sp
(\f(CW\*(C`extremeSystemID\*(C'\fR)
.ie n .IP "$extreme\->\fBtemp()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBtemp()\fR" 4
.IX Item "$extreme->temp()"
Returns system temperature
.Sp
(\f(CW\*(C`extremeCurrentTemperature\*(C'\fR)
.ie n .IP "$extreme\->\fBps1_status()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBps1_status()\fR" 4
.IX Item "$extreme->ps1_status()"
Returns status of power supply 1
.Sp
(\f(CW\*(C`extremePowerSupplyStatus.1\*(C'\fR)
.ie n .IP "$extreme\->\fBps2_status()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBps2_status()\fR" 4
.IX Item "$extreme->ps2_status()"
Returns status of power supply 2
.Sp
(\f(CW\*(C`extremePowerSupplyStatus.2\*(C'\fR)
.ie n .IP "$extreme\->\fBfan()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBfan()\fR" 4
.IX Item "$extreme->fan()"
Returns fan status
.Sp
(\f(CW\*(C`extremeFanOperational.1\*(C'\fR)
.ie n .IP "$extreme\->\fBmac()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBmac()\fR" 4
.IX Item "$extreme->mac()"
Returns base mac
.Sp
(\f(CW\*(C`dot1dBaseBridgeAddress\*(C'\fR)
.SS "Globals imported from SNMP::Info::Layer3"
.IX Subsection "Globals imported from SNMP::Info::Layer3"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::Layer3 for details.
.SS "Globals imported from SNMP::Info::MAU"
.IX Subsection "Globals imported from SNMP::Info::MAU"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::MAU for details.
.SS "Globals imported from SNMP::Info::EDP"
.IX Subsection "Globals imported from SNMP::Info::EDP"
See documentation in \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::EDP for details.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$extreme\->\fBinterfaces()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBinterfaces()\fR" 4
.IX Item "$extreme->interfaces()"
Returns a mapping between the Interface Table Index (iid) and the physical
port name.
.ie n .IP "$extreme\->\fBi_duplex()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBi_duplex()\fR" 4
.IX Item "$extreme->i_duplex()"
Parses mau_index and mau_link to return the duplex information for
interfaces.
.ie n .IP "$extreme\->\fBi_duplex_admin()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBi_duplex_admin()\fR" 4
.IX Item "$extreme->i_duplex_admin()"
Parses \f(CW\*(C`mac_index\*(C'\fR,\f(CW\*(C`mau_autostat\*(C'\fR,\f(CW\*(C`mau_type_admin\*(C'\fR in
order to find the admin duplex setting for all the interfaces.
.Sp
Returns either (auto,full,half).
.ie n .IP "$extreme\->\fBi_ignore()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBi_ignore()\fR" 4
.IX Item "$extreme->i_ignore()"
Returns reference to hash.  Increments value of \s-1IID\s0 if port is to be ignored.
.Sp
Ignores \s-1VLAN\s0 meta interfaces and loopback
.ie n .IP "$extreme\->\fBfw_mac()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBfw_mac()\fR" 4
.IX Item "$extreme->fw_mac()"
(\f(CW\*(C`extremeFdbMacFdbMacAddress\*(C'\fR)
.ie n .IP "$extreme\->\fBfw_port()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBfw_port()\fR" 4
.IX Item "$extreme->fw_port()"
(\f(CW\*(C`extremeFdbMacFdbPortIfIndex\*(C'\fR)
.ie n .IP "$extreme\->\fBfw_status()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBfw_status()\fR" 4
.IX Item "$extreme->fw_status()"
(\f(CW\*(C`extremeFdbMacFdbStatus\*(C'\fR)
.ie n .IP "$extreme\->\fBlldp_if()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBlldp_if()\fR" 4
.IX Item "$extreme->lldp_if()"
Returns the mapping to the \s-1SNMP\s0 Interface Table. Extreme \s-1LLDP\s0 uses the
bridge index rather than ifIndex.
.ie n .IP "$extreme\->\fBi_vlan()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBi_vlan()\fR" 4
.IX Item "$extreme->i_vlan()"
Returns a mapping between \f(CW\*(C`ifIndex\*(C'\fR and the \s-1VLAN.\s0
.ie n .IP "$extreme\->\fBi_vlan_membership()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBi_vlan_membership()\fR" 4
.IX Item "$extreme->i_vlan_membership()"
Returns reference to hash of arrays: key = \f(CW\*(C`ifIndex\*(C'\fR, value = array of \s-1VLAN\s0
IDs.  These are the VLANs which are members of the egress list for the port.
.Sp
.Vb 3
\&  Example:
\&  my $interfaces = $extreme\->interfaces();
\&  my $vlans      = $extreme\->i_vlan_membership();
\&
\&  foreach my $iid (sort keys %$interfaces) {
\&    my $port = $interfaces\->{$iid};
\&    my $vlan = join(\*(Aq,\*(Aq, sort(@{$vlans\->{$iid}}));
\&    print "Port: $port VLAN: $vlan\en";
\&  }
.Ve
.ie n .IP "$extreme\->\fBi_vlan_membership_untagged()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBi_vlan_membership_untagged()\fR" 4
.IX Item "$extreme->i_vlan_membership_untagged()"
Returns reference to hash of arrays: key = \f(CW\*(C`ifIndex\*(C'\fR, value = array of \s-1VLAN\s0
IDs.  These are the VLANs which are members of the untagged egress list for
the port.
.ie n .IP "$extreme\->\fBv_index()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBv_index()\fR" 4
.IX Item "$extreme->v_index()"
Returns \s-1VLAN\s0 IDs
.ie n .IP "$extreme\->\fBv_name()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBv_name()\fR" 4
.IX Item "$extreme->v_name()"
Returns \s-1VLAN\s0 names
.Sp
(\f(CW\*(C`extremeVlanIfDescr\*(C'\fR)
.ie n .IP "$extreme\->\fBbp_index()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBbp_index()\fR" 4
.IX Item "$extreme->bp_index()"
Returns reference to hash of bridge port table entries map back to interface
identifier (iid)
.Sp
Returns (\f(CW\*(C`ifIndex\*(C'\fR) for both key and value since we're using
\&\fIEXTREME-FDB-MIB\fR rather than \fIBRIDGE-MIB\fR.
.ie n .IP "$extreme\->\fBpeth_port_power()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBpeth_port_power()\fR" 4
.IX Item "$extreme->peth_port_power()"
Power supplied by PoE ports, in milliwatts
.Sp
(\f(CW\*(C`extremePethPortMeasuredPower\*(C'\fR)
.ie n .IP "$extreme\->\fBpeth_power_watts()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBpeth_power_watts()\fR" 4
.IX Item "$extreme->peth_power_watts()"
The configured maximum amount of in-line power available to the slot.
.Sp
(\f(CW\*(C`extremePethSlotPowerLimit\*(C'\fR)
.SS "Spanning Tree Instance Globals"
.IX Subsection "Spanning Tree Instance Globals"
.ie n .IP "$extreme\->\fBstp_i_mac()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_i_mac()\fR" 4
.IX Item "$extreme->stp_i_mac()"
Returns the \s-1MAC\s0 extracted from (\f(CW\*(C`extremeStpDomainBridgeId\*(C'\fR).
.ie n .IP "$extreme\->\fBstp_i_id()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_i_id()\fR" 4
.IX Item "$extreme->stp_i_id()"
Returns the unique identifier of the \s-1STP\s0 domain.
.Sp
(\f(CW\*(C`extremeStpDomainStpdInstance\*(C'\fR)
.ie n .IP "$extreme\->\fBstp_i_time()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_i_time()\fR" 4
.IX Item "$extreme->stp_i_time()"
Returns time since last topology change detected. (100ths/second)
.Sp
(\f(CW\*(C`extremeStpDomainTimeSinceTopologyChange\*(C'\fR)
.ie n .IP "$extreme\->\fBstp_i_time()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_i_time()\fR" 4
.IX Item "$extreme->stp_i_time()"
Returns time since last topology change detected. (100ths/second)
.Sp
(\f(CW\*(C`extremeStpDomainTimeSinceTopologyChange\*(C'\fR)
.ie n .IP "$extreme\->\fBstp_i_time()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_i_time()\fR" 4
.IX Item "$extreme->stp_i_time()"
Returns the total number of topology changes detected.
.Sp
(\f(CW\*(C`extremeStpDomainTopChanges\*(C'\fR)
.ie n .IP "$extreme\->\fBstp_i_root()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_i_root()\fR" 4
.IX Item "$extreme->stp_i_root()"
Returns root of \s-1STP.\s0
.Sp
(\f(CW\*(C`extremeStpDomainDesignatedRoot\*(C'\fR)
.ie n .IP "$extreme\->\fBstp_i_root_port()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_i_root_port()\fR" 4
.IX Item "$extreme->stp_i_root_port()"
Returns the port number of the port that offers the lowest cost path
to the root bridge.
.Sp
(\f(CW\*(C`extremeStpDomainRootPortIfIndex\*(C'\fR)
.ie n .IP "$extreme\->\fBstp_i_priority()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_i_priority()\fR" 4
.IX Item "$extreme->stp_i_priority()"
Returns the port number of the port that offers the lowest cost path
to the root bridge.
.Sp
(\f(CW\*(C`extremeStpDomainBridgePriority\*(C'\fR)
.SS "Spanning Tree Protocol Port Table"
.IX Subsection "Spanning Tree Protocol Port Table"
.ie n .IP "$extreme\->\fBstp_p_id()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_p_id()\fR" 4
.IX Item "$extreme->stp_p_id()"
(\f(CW\*(C`extremeStpPortPortIfIndex\*(C'\fR)
.ie n .IP "$extreme\->\fBstp_p_stg_id()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_p_stg_id()\fR" 4
.IX Item "$extreme->stp_p_stg_id()"
(\f(CW\*(C`extremeStpDomainStpdInstance\*(C'\fR)
.ie n .IP "$extreme\->\fBstp_p_priority()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_p_priority()\fR" 4
.IX Item "$extreme->stp_p_priority()"
(\f(CW\*(C`extremeStpPortPortPriority\*(C'\fR)
.ie n .IP "$extreme\->\fBstp_p_state()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_p_state()\fR" 4
.IX Item "$extreme->stp_p_state()"
(\f(CW\*(C`extremeStpPortPortState\*(C'\fR)
.ie n .IP "$extreme\->\fBstp_p_cost()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_p_cost()\fR" 4
.IX Item "$extreme->stp_p_cost()"
(\f(CW\*(C`extremeStpPortPathCost\*(C'\fR)
.ie n .IP "$extreme\->\fBstp_p_root()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_p_root()\fR" 4
.IX Item "$extreme->stp_p_root()"
(\f(CW\*(C`extremeStpPortDesignatedRoot\*(C'\fR)
.ie n .IP "$extreme\->\fBstp_p_bridge()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_p_bridge()\fR" 4
.IX Item "$extreme->stp_p_bridge()"
(\f(CW\*(C`extremeStpPortDesignatedBridge\*(C'\fR)
.ie n .IP "$extreme\->\fBstp_p_port()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBstp_p_port()\fR" 4
.IX Item "$extreme->stp_p_port()"
(\f(CW\*(C`extremeStpPortDesignatedPort\*(C'\fR)
.SS "Table Methods imported from SNMP::Info::Layer3"
.IX Subsection "Table Methods imported from SNMP::Info::Layer3"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::Layer3 for details.
.SS "Table Methods imported from SNMP::Info::MAU"
.IX Subsection "Table Methods imported from SNMP::Info::MAU"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::MAU for details.
.SS "Table Methods imported from SNMP::Info::EDP"
.IX Subsection "Table Methods imported from SNMP::Info::EDP"
See documentation in \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::EDP for details.
.SH "SET METHODS"
.IX Header "SET METHODS"
These are methods that provide \s-1SNMP\s0 set functionality for overridden methods
or provide a simpler interface to complex set operations.  See
\&\*(L"\s-1SETTING DATA VIA SNMP\*(R"\s0 in SNMP::Info for general information on set
operations.
.ie n .IP "$extreme\->set_i_vlan ( vlan, ifIndex )" 4
.el .IP "\f(CW$extreme\fR\->set_i_vlan ( vlan, ifIndex )" 4
.IX Item "$extreme->set_i_vlan ( vlan, ifIndex )"
Changes an access (untagged) port \s-1VLAN,\s0 must be supplied with the numeric
\&\s-1VLAN ID\s0 and port \f(CW\*(C`ifIndex\*(C'\fR.  This method should only be used on end station
(non-trunk) ports.
.Sp
.Vb 4
\&  Example:
\&  my %if_map = reverse %{$extreme\->interfaces()};
\&  $extreme\->set_i_vlan(\*(Aq2\*(Aq, $if_map{\*(AqFastEthernet0/1\*(Aq})
\&    or die "Couldn\*(Aqt change port VLAN. ",$extreme\->error(1);
.Ve
.ie n .IP "$extreme\->set_i_pvid ( pvid, ifIndex )" 4
.el .IP "\f(CW$extreme\fR\->set_i_pvid ( pvid, ifIndex )" 4
.IX Item "$extreme->set_i_pvid ( pvid, ifIndex )"
Sets port default \s-1VLAN,\s0 must be supplied with the numeric \s-1VLAN ID\s0 and
port \f(CW\*(C`ifIndex\*(C'\fR.  This method should only be used on trunk ports.
.Sp
.Vb 4
\&  Example:
\&  my %if_map = reverse %{$extreme\->interfaces()};
\&  $extreme\->set_i_pvid(\*(Aq2\*(Aq, $if_map{\*(AqFastEthernet0/1\*(Aq})
\&    or die "Couldn\*(Aqt change port default VLAN. ",$extreme\->error(1);
.Ve
.ie n .IP "$extreme\->set_add_i_vlan_tagged ( vlan, ifIndex )" 4
.el .IP "\f(CW$extreme\fR\->set_add_i_vlan_tagged ( vlan, ifIndex )" 4
.IX Item "$extreme->set_add_i_vlan_tagged ( vlan, ifIndex )"
Adds the \s-1VLAN\s0 to the enabled VLANs list of the port, must be supplied with the
numeric \s-1VLAN ID\s0 and port \f(CW\*(C`ifIndex\*(C'\fR.
.Sp
.Vb 4
\&  Example:
\&  my %if_map = reverse %{$extreme\->interfaces()};
\&  $extreme\->set_add_i_vlan_tagged(\*(Aq2\*(Aq, $if_map{\*(AqFastEthernet0/1\*(Aq})
\&    or die "Couldn\*(Aqt add port to egress list. ",$extreme\->error(1);
.Ve
.ie n .IP "$extreme\->set_remove_i_vlan_tagged ( vlan, ifIndex )" 4
.el .IP "\f(CW$extreme\fR\->set_remove_i_vlan_tagged ( vlan, ifIndex )" 4
.IX Item "$extreme->set_remove_i_vlan_tagged ( vlan, ifIndex )"
Removes the \s-1VLAN\s0 from the enabled VLANs list of the port, must be supplied
with the numeric \s-1VLAN ID\s0 and port \f(CW\*(C`ifIndex\*(C'\fR.
.Sp
.Vb 4
\&  Example:
\&  my %if_map = reverse %{$extreme\->interfaces()};
\&  $extreme\->set_remove_i_vlan_tagged(\*(Aq2\*(Aq, $if_map{\*(AqFastEthernet0/1\*(Aq})
\&    or die "Couldn\*(Aqt add port to egress list. ",$extreme\->error(1);
.Ve
.SH "Data Munging Callback Subroutines"
.IX Header "Data Munging Callback Subroutines"
.ie n .IP "$extreme\->\fBmunge_power_stat()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBmunge_power_stat()\fR" 4
.IX Item "$extreme->munge_power_stat()"
Removes 'present' and changes 'not' to 'Not' in the front of a string.
.ie n .IP "$extreme\->\fBmunge_true_ok()\fR" 4
.el .IP "\f(CW$extreme\fR\->\fBmunge_true_ok()\fR" 4
.IX Item "$extreme->munge_true_ok()"
Replaces 'true' with \*(L"\s-1OK\*(R"\s0 and 'false' with \*(L"Not \s-1OK\*(R".\s0
