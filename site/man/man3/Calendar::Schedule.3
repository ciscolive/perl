.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Schedule 3"
.TH Schedule 3 "2020-07-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Calendar::Schedule \- manage calendar schedules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Calendar::Schedule qw/:all/;
\&
\&    my $TTable = Calendar::Schedule\->new();
\&
\&    # manually adding an entry
\&    $TTable\->add_entry(\*(Aq2003\-09\-09 Tue 18\-20 Some meeting\*(Aq);
\&                              
\&    # reading entries from a file
\&    $TTable\->add_entries_from("$ENV{\*(AqHOME\*(Aq}/.calendar");
\&
\&    # producing entries in HTML tables, one table per week
\&    $TTable\->set_first_week(\*(Aqnow\*(Aq);
\&    print "<p>\en" . $TTable\->generate_table();
\&    print "<p>\en" . $TTable\->generate_table();
\&    print "<p>\en" . $TTable\->generate_table();
\&
\&    # for more examples, see EXAMPLES section
.Ve
.PP
The file .calendar may look like this:
.PP
.Vb 3
\&  # comments can start with #
\&  * lines starting with * are treated as general todo entries ...
\&  # empty lines are acceptable and ignored:
\&
\&  Mon 9:00\-10:00 this is a weekly entry
\&  Mon 13\-14 a biweekly entry :biweekly :start Mar 8, 2004
\&  Mon,Wed,Fri 15:30\-16:30 several\-days\-a\-week entry
\&  Wed :biweekly garbage collection
\&
\&  2004\-03\-06 Sat 14\-16 fixed entry. The week day is redundant, but may\e
\&        help to detect errors (error will be reported if a wrong\e
\&        weekday is entered).  BTW, an entry can go for several lines as\e
\&        long as there is a backslash at the end of each line.
\&
\&  May   6      birthday (yearly entry)
\&
\&  # more examples in "Example entries" section
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module is created with a purpose to provide functionality for handling a
personal calendar schedule in a transparent and simple way.  The calendar
data is assumed to be kept in a plain file in a format easy to edit and
understand.  It was inspired by the \f(CW\*(C`calendar\*(C'\fR program on older Unix-like
systems, which used \f(CW\*(C`~/.calendar\*(C'\fR file to produce entries for each day
and send them in the morning by email.
.PP
Inspired by the \f(CW\*(C`~/.calendar\*(C'\fR file, the format for recording scheduled
events is very simple, mostly contained in one line of text.
.PP
The module currently supports generation of \s-1HTML\s0 weekly tables with visual
representation of scheduled events.  The generated table is generated in
a simple \s-1HTML\s0 table, with a use of \f(CW\*(C`colspan\*(C'\fR and \f(CW\*(C`rolspan\*(C'\fR attributes to
represent overlapping events in parallel in the table.
.SS "Planned Future Work"
.IX Subsection "Planned Future Work"
In the development of the recording format for the event, there is an attempt
to model the data representation of the iCalendar standard (\s-1RFC2445\s0).
Examples of the iCalendar fields are: \s-1DTSTART, DTEND, SUMMARY,
RRULE\s0 (e.g. RRULE:FREQ=WEEKLY, RRULE:FREQ=WEEKLY;INTERVAL=2 for
biweekly, RRULE:FREQ=WEEKLY;UNTIL=20040408 ) etc.
More examples:
.PP
.Vb 1
\&  RRULE:FREQ=MONTHLY;BYDAY=TU;BYSETPOS=3
.Ve
.PP
Every third Tuesday in a month.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
First example:
.PP
.Vb 1
\&    use Calendar::Schedule qw/:all/;
\&
\&    my $TTable = Calendar::Schedule\->new();
\&
\&    # manually adding an entry
\&    $TTable\->add_entry(\*(Aq2003\-09\-09 Tue 18\-20 Some meeting\*(Aq);
\&                              
\&    # reading entries from a file
\&    $TTable\->add_entries_from("$ENV{\*(AqHOME\*(Aq}/.calendar");
\&
\&    # producing entries in HTML tables
\&    $TTable\->set_first_week(\*(Aq2003\-12\-15\*(Aq);
\&    print "<p>\en" . $TTable\->generate_table();
\&    print "<p>\en" . $TTable\->generate_table();
\&    print "<p>\en" . $TTable\->generate_table();
.Ve
.PP
Example with generating a weekly schedule (example2):
.PP
.Vb 10
\&    use Calendar::Schedule;
\&    $TTable = Calendar::Schedule\->new();
\&    $TTable\->{\*(AqColLabel\*(Aq} = "%A";
\&    $TTable\->add_entries(<<EOT
\&    Mon 15:30\-16:30 Teaching (CSCI 3136)
\&    Tue 10\-11:30 Teaching (ECMM 6014)
\&    Wed 13:30\-14:30 DNLP
\&    Wed 15:30\-16:30 Teaching (CSCI 3136) :until Apr 8, 2005
\&    Thu 10\-11:30 Teaching (ECMM 6014)
\&    Thu 16\-17 WIFL
\&    Fri 14:30\-15:30 MALNIS
\&    Fri 15:30\-16:30 Teaching (CSCI 3136)
\&    EOT
\&    );
\&    print "<p>\en" . $TTable\->generate_table();
.Ve
.PP
This will produce the following \s-1HTML\s0 code (if run before Apr 8, 2005):
.SS "Conflicts"
.IX Subsection "Conflicts"
Time conflicts are handled by producing several columns in a table for
the same day.  For example, the following code (example3):
.PP
.Vb 4
\&    use Calendar::Schedule;
\&    $TTable = Calendar::Schedule\->new();
\&    $TTable\->{\*(AqColLabel\*(Aq} = "%A";
\&    $TTable\->add_entries(<<EOT
\&
\&    Mon 15:30\-16:30 Teaching (CSCI 3136)
\&    Tue 10\-11:30 Teaching (ECMM 6014)
\&    Wed 13:30\-14:30 DNLP
\&    Wed 15:30\-16:30 Teaching (CSCI 3136) :until Apr 8, 2005
\&    Thu 10\-11:30 Teaching (ECMM 6014)
\&    Thu 16\-17 WIFL
\&    Fri 14:30\-15:30 MALNIS
\&    Fri 15:30\-16:30 Teaching (CSCI 3136)
\&    Wed 15\-16 meeting
\&    Wed 15:30\-18 another meeting
\&
\&    EOT
\&    );
\&    print "<p>\en" . $TTable\->generate_table();
.Ve
.PP
will produce the following table (if run before Apr 8, 2005):
.SS "Example entries"
.IX Subsection "Example entries"
These are some example of simple entries that are accepted by the
\&\f(CW\*(C`add_entry\*(C'\fR function or \f(CW\*(C`add_entries_from\*(C'\fR for reading from a file.
Each entry is on a line by itself, but it can be continued in the the
following lines by using \e (backslash) at the end of the current line.
The time specificantions are generally at the beginning of an entry.
Examples:
.PP
.Vb 2
\&  # comments can start with #
\&  # empty lines are acceptable and ignored:
\&
\&  Mon 9:00\-10:00 this is a weekly entry
\&  Mon 13\-14 a biweekly entry :biweekly :start Mar 8, 2004
\&  Mon,Wed,Fri 15:30\-16:30 several\-days\-a\-week entry
\&  Wed :biweekly garbage collection
\&
\&  2004\-03\-06 Sat 14\-16 fixed entry. The week day is redundant, but may\e
\&        help to detect errors (error will be reported if a wrong\e
\&        weekday is entered).  BTW, an entry can go for several lines as\e
\&        long as there is a backslash at the end of each line.
\&
\&  May 6  an example birthday (yearly entry)
\&
\&  Wed 13:30\-14:30 DNLP
\&  Wed 15:30\-16:30 Teaching (CSCI 3136) :until Apr 8, 2005
\&  Wed 3\-4:30pm meeting
\&  Mon,Wed,Fri 10:30\-11:30 meeting (product team)
\&  Mon 13\-14 seminar :biweekly :start Mar 8, 2004
\&  Tue,Thu 10\-11:30 Class (ECMM 6014) Location: MCCAIN ARTS&SS 2022 :until Apr 8, 2004
\&  1st,3rd Tue 10\-11 meeting
\&  1st,last Mon,Fri 4\-5 meeting (4 meetings every month)
\&  4th Thu 11:30\-13 meeting (fcm)
.Ve
.SH "STATE VARIABLES"
.IX Header "STATE VARIABLES"
.IP "StartTime" 4
.IX Item "StartTime"
Used as \f(CW\*(C`$obj\->{StartTime}\*(C'\fR. Start time for various uses.
Usually it is the the beginning of the first interesting week.
.IP "DefaultRowLabels" 4
.IX Item "DefaultRowLabels"
Used as \f(CW\*(C`$obj\->{DefaultRowLabels}\*(C'\fR.  Includes pre-defined labels
for rows of the generated \s-1HTML\s0 schedule tables.  The pre-defined value
is:
.Sp
.Vb 1
\&    $self\->{DefaultRowLabels} = [qw( 08:00 12:00 17:00 )];
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBnew()\fR" 4
.IX Item "new()"
Creates a new \f(CW\*(C`Calendar::Schedule\*(C'\fR object and returns it.
.IP "set_first_week(time)" 4
.IX Item "set_first_week(time)"
sets start time at the last Monday before given date.  It is used in generate_table.
Examples:
.Sp
.Vb 3
\& $TTable = Calendar::Schedule\->new();
\& $TTable\->set_first_week(\*(Aqnow\*(Aq);
\& $TTable\->set_first_week(\*(Aq2016\-02\-19\*(Aq);
.Ve
.Sp
See parse_time for examples for specifying time.
.IP "set_ColLabel(pattern)" 4
.IX Item "set_ColLabel(pattern)"
sets \f(CW\*(C`strftime\*(C'\fR pattern for column (day) labels.  The default pattern
is "\f(CW\*(C`%A<br>%Y\-%m\-%d\*(C'\fR", which produces labels like:
.Sp
.Vb 2
\&  Friday
\&  2003\-12\-19
.Ve
.Sp
In order to have just a weekday name, use "\f(CW%A\fR".
.IP "parse_time(time_specification[,prefix])" 4
.IX Item "parse_time(time_specification[,prefix])"
Parses time specification and returns the calendar time (see mktime in
Perl).  The functions dies if the time cannot be completely recognized.
If prefix is set to true (1), then only a prefix of the string can be
a time specification.  If prefix is set to 1, then in an array context
it will return a 2\-element list: the calendar time and the
remainder of the string.  Format examples:
.Sp
.Vb 4
\&  2004\-03\-17
\&  now
\&  Mar 8, 2004
\&  1\-Jul\-2005
.Ve
.IP "add_entries_from(file_name)" 4
.IX Item "add_entries_from(file_name)"
Adds entries from a file.  See method add_entries and add_entry for format explanation.
.IP "add_entries(list_of_entries)" 4
.IX Item "add_entries(list_of_entries)"
Adds more entries.  Each entry may contain several entries separated
by a new-line, except if the line ends with \e.
Empty lines and lines that start with \es*# are ignored.
See add_entry for further explanation of format.
.IP "add_entry(list_of_entries)" 4
.IX Item "add_entry(list_of_entries)"
Adds more entries.  It is different from add_entries because this
method does not break entries on new-lines, although it does accept a
list of entries as arguments.
.Sp
Examples:
.Sp
.Vb 2
\&  $TTable\->add_entry(\*(AqMon 8\-17\*(Aq, \*(AqLabour Day\*(Aq);
\&  $TTable\->add_entry(\*(Aq2003\-09\-09 Tue 18\-20 Some meeting\*(Aq);
.Ve
.Sp
More format examples:
.Sp
.Vb 6
\&  Wed 3\-4:30pm meeting
\&  Mon,Wed,Fri 15:30\-16:30 meeting (product team)
\&  Mon 13\-14 seminar :biweekly :start Mar 8, 2004
\&  Tue,Thu 10\-11:30 Class (ECMM 6014) Location: MCCAIN ARTS&SS 2022 :until Apr 8, 2004
\&  1st,3rd Tue 10\-11 meeting
\&  1st,last Mon,Fri 4\-5 meeting (4 meetings every month)
.Ve
.Sp
More examples can be found in section \*(L"Example entries\*(R".
.IP "find_next_time(time_spec[,start_time])" 4
.IX Item "find_next_time(time_spec[,start_time])"
Finds next time starting from start_time according to time_spec
specification and returns it.  If the start_time is not given, the
variable StartTime is used.
.Sp
Examples:
.Sp
.Vb 1
\&    $t = $schedule\->find_next_time("23:59", $t);
.Ve
.IP "\fBgenerate_table()\fR" 4
.IX Item "generate_table()"
Returns a weekly table in \s-1HTML.\s0  Starts with NextTableTime (or
StartTime if NextTableTime does not exist), and updates NextTableTime
so that consecutive call produces the table for the following week.
.Sp
The table column headers can be can be changed by setting the field
\&\f(CW$obj\fR\->{ColLabel} to a format as used by the standard function
strftime.  The default format is: ColLabel => \*(L"%A<>%Y\-%m\-%d\*(R", which
looks something like:
.Sp
.Vb 2
\&   Monday
\& 2008\-09\-01
.Ve
.Sp
The format \*(L"%A\*(R" would produce just the weekday name.
.Sp
Use \f(CW$obj\fR\->{ShowDays} = 'workdays'; to display only work-days; i.e.,
Monday to Friday.
.Sp
The table rows include time labeles which are start times and end
times of the events that happend to fall in the table time range, with
additional labels from the variable \f(CW\*(C`$obj\->{DefaultRowLabels}\*(C'\fR.
The default value of the variable DefaulRowLabels is defined as:
.Sp
.Vb 1
\&    $self\->{DefaultRowLabels} = [qw( 08:00 12:00 17:00 )];
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "weekday_to_digits"
.IX Subsection "weekday_to_digits"
For example, changes all words \*(L"\s-1SUNDAY\*(R",\s0 \*(L"Sunday\*(R", \*(L"\s-1SUN\*(R",\s0 or \*(L"Sun\*(R" to \*(L"00\*(R", etc.
.SH "THANKS"
.IX Header "THANKS"
I would like to thank Stefan Goebel for his report and detailed
analysis of a bug and suggestions, Mike Vasiljevs for his
suggestions and patches for \s-1ISO8601\s0 format, and Mohammad S Anwar for
correction regarding missing license field.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright 2002\-2020 Vlado Keselj, vlado@dnlp.ca, http://web.cs.dal.ca/~vlado
.PP
This script is provided \*(L"as is\*(R" without expressed or implied warranty.
This is free software; you can redistribute it, modify it, or both under
the same terms as Perl itself.
.PP
The latest version can be found at
<http://web.cs.dal.ca/~vlado/srcperl/Calendar\-Schedule/>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There are some Perl modules for different types of calendar, and
likely may more in other programming languages.  I could not find any
existing calendars including the particular features that I needed, so
this module was created.  Below are some modules with similar
functionality:
.IP "[HTML::CalendarMonthSimple] \- Perl Module for Generating \s-1HTML\s0 Calendars" 4
.IX Item "[HTML::CalendarMonthSimple] - Perl Module for Generating HTML Calendars"
The module is written as a simplifed version of HTML::CalendarMonth.
The intention for this, Calendar::Schedule module, is not to tie it essentially
for \s-1HTML.\s0  The events specification is described in a simple textual format.
.IP "[HTML::CalendarMonth] \- Generate and manipulate \s-1HTML\s0 calendar months" 4
.IX Item "[HTML::CalendarMonth] - Generate and manipulate HTML calendar months"
The module HTML::CalendarMonth is a subclass of HTML::ElementTable,
which makes it a part of larger project\*(--the Date-Time Perl project at
\&\fIhttp://datetime.perl.org\fR.
