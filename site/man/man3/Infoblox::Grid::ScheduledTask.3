.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::ScheduledTask 3"
.TH Infoblox::Grid::ScheduledTask 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::ScheduledTask \- scheduled task object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A scheduled task object is used to retrieve information about scheduled tasks. Scheduled tasks are commands that are scheduled by the Infoblox::Session methods, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBmodify()\fR and Infoblox::Session\->\fBremove()\fR, and are called with the scheduled_at parameter.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The Infoblox::Grid::ScheduledTask object is automatically generated after the Infoblox::Session methods, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBmodify()\fR and Infoblox::Session\->\fBremove()\fR, are called with the scheduled_at parameter. It does not require manual construction.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a scheduled task object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
Apply the following attributes to get a specific scheduled task object:
.Sp
member               \- The Grid member name.
.Sp
scheduled_time       \- The time when the task is scheduled to occur.
.Sp
submit_time          \- The time when the scheduled task was submitted.
.Sp
submitter            \- The name of the user who submitted the task (regular expression).
.Sp
task_id              \- The identifier of a scheduled task.
.Sp
action               \- The type of action performed. When used, the search returns ScheduledTask objects that have ScheduledTask::ChangedObject objects in the changed_objects list with matching 'action' attributes. Possible values are:
.Sp
.Vb 5
\&                       Add
\&                       Modify
\&                       Delete
\&                       Network Discovery
\&                       Restart Services
.Ve
.Sp
object_name          \- The name of the changed object (regular expression). When used, the search returns ScheduledTask objects that have ScheduledTask::ChangedObject objects in the changed_objects list with matching 'object_name' attirbutes.
.Sp
object_type          \- The type of the changed object (regular expression). When used, the search returns ScheduledTask objects that have ScheduledTask::ChangedObject objects in the changed_objects list with matching 'object_type' attributes. Possible values are:
.Sp
.Vb 10
\&                       A Record
\&                       AAAA Record
\&                       Authoritative Zone
\&                       Bulk Host
\&                       CNAME Record
\&                       Delegated Zone
\&                       DHCP Range
\&                       DNAME Record
\&                       DNS View
\&                       Fixed Address
\&                       Forward Zone
\&                       Host Record
\&                       IPv4 Network
\&                       IPv4 Network Container
\&                       IPv6 Network
\&                       IPv6 Network Container
\&                       MX Record
\&                       NS Record
\&                       PTR Record
\&                       Reservation
\&                       Roaming Host
\&                       Shared A Record
\&                       Shared AAAA Record
\&                       Shared MX Record
\&                       Shared Network
\&                       Shared Record Group
\&                       Shared SRV Record
\&                       Shared TXT Record
\&                       SRV Record
\&                       Stub Zone
\&                       TXT Record
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::Grid::ScheduledTask",
\&     task_id    => "34" );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Use this method to modify the object.
\& $task\->scheduled_time( "2008\-10\-21T10:56:33Z" );
\& # Submit modification
\& my $response = $session\->modify( $task );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, use \fBget()\fR or \fBsearch()\fR to retrieve the specific object first, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Get the ScheduledTask objects
\& my @retrieved_objs = $session\->get(
\&     object     => "Infoblox::Grid::ScheduledTask",
\&     submitter  => "admin" );
\& # find the desired object from the retrieved list.
\& my $task = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $task );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for scheduled task objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
The search can be performed on any combination of the following attributes:
.Sp
member               \- The Grid member name.
.Sp
scheduled_time       \- The time when the task is scheduled to occur. This method supports searching with limit parameters  (see below).
.Sp
submit_time          \- The time when the scheduled task was submitted. This method supports searching with limit parameters  (see below).
.Sp
submitter            \- The name of the user who submitted the task (regular expression).
.Sp
task_id              \- The identifier of a scheduled task.
.Sp
action               \- The type of action performed. When used, the search returns ScheduledTask objects that have ScheduledTask::ChangedObject objects in the changed_objects list with matching 'action' attributes. Possible values are:
.Sp
.Vb 5
\&                       Add
\&                       Modify
\&                       Delete
\&                       Network Discovery
\&                       Restart Services
.Ve
.Sp
object_name          \- The name of the changed object (regular expression). When used, the search returns ScheduledTask objects that have ScheduledTask::ChangedObject objects in the changed_objects list with matching 'object_name' attirbutes.
.Sp
object_type          \- The type of the changed object (regular expression). When used, the search returns ScheduledTask objects that have ScheduledTask::ChangedObject objects in the changed_objects list with matching 'object_type' attributes. Possible values are:
.Sp
.Vb 10
\&                       A Record
\&                       AAAA Record
\&                       Authoritative Zone
\&                       Bulk Host
\&                       CNAME Record
\&                       Delegated Zone
\&                       DHCP Range
\&                       DNAME Record
\&                       DNS View
\&                       Fixed Address
\&                       Forward Zone
\&                       Host Record
\&                       IPv4 Network
\&                       IPv4 Network Container
\&                       IPv6 Network
\&                       IPv6 Network Container
\&                       MX Record
\&                       NS Record
\&                       PTR Record
\&                       Reservation
\&                       Roaming Host
\&                       Shared A Record
\&                       Shared AAAA Record
\&                       Shared MX Record
\&                       Shared Network
\&                       Shared Record Group
\&                       Shared SRV Record
\&                       Shared TXT Record
\&                       SRV Record
\&                       Stub Zone
\&                       TXT Record
.Ve
.Sp
See Infoblox::Session/search with limit parameters for more information on this functionality.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # search for all ScheduledTask objects
\& my @retrieved_objs = $session\->search(
\&     object  => "Infoblox::Grid::ScheduledTask",
\&     scheduled_time => ">=< 2008\-10\-21T10:56:33Z,2008\-11\-21T10:56:33Z");
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set and retrieve the attribute values of a ScheduledTask object.
.SS "approval_status( )"
.IX Subsection "approval_status( )"
.RS 4
Use this method to set or retrieve the approval status if approvals are required for this task.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Valid values are '\s-1NONE\s0', '\s-1APPROVED\s0', '\s-1PENDING\s0' and '\s-1REJECTED\s0'.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get approval_status value
\& my $approval_status = $task\->approval_status();
\&
\& #Modify approval_status value
\& $task\->approval_status(\*(AqAPPROVED\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "approver( )"
.IX Subsection "approver( )"
.RS 4
Use this method to retrieve the username of the approver. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get approver value
\& my $approver = $task\->approver();
.Ve
.RE
.RS 4
.RE
.SS "approver_comment( )"
.IX Subsection "approver_comment( )"
.RS 4
Use this method to set or retrieve the approver comment.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The approver comment in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get approver_comment value
\& my $approver_comment = $task\->approver_comment();
\&
\& #Modify approver_comment value
\& $task\->approver_comment(\*(Aqok\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "changed_objects( )"
.IX Subsection "changed_objects( )"
.RS 4
Use this method to retrieve information about the objects that are scheduled to be changed.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a reference to an array of Infoblox::Grid::ScheduledTask::ChangedObject objects.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& #Get changed_objects
\& my $changed_objects = $task\->changed_objects();
\& my $obj = $changed_objects\->[0];
.Ve
.RE
.RS 4
.RE
.SS "dependent_tasks( )"
.IX Subsection "dependent_tasks( )"
.RS 4
Use this method to retrieve an array of of tasks dependent on this one. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns a reference to an array of Infoblox::Grid::ScheduledTask objects.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get array of ScheduledTask objects
\& my @dependent_tasks = $task\->dependent_tasks();
.Ve
.RE
.RS 4
.RE
.SS "execution_details( )"
.IX Subsection "execution_details( )"
.RS 4
Use this method to retrieve the list of details generated by the execution. This is a read-only field.
.IP "\fBParameters\fR" 4
.IX Item "Parameters"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the array of strings that contains details generated by the execution.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get execution_details value
\& my $details = $task\->execution_details();
.Ve
.RE
.RS 4
.RE
.SS "execution_details_type( )"
.IX Subsection "execution_details_type( )"
.RS 4
Use this method to retrieve the type of details generated by the execution after the task has been completed. This is a read-only field.
.IP "\fBParameters\fR" 4
.IX Item "Parameters"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1NONE\s0' or '\s-1WARNING\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get execution_details_type value
\& my $details = $task\->execution_details_type();
.Ve
.RE
.RS 4
.RE
.SS "execution_status( )"
.IX Subsection "execution_status( )"
.RS 4
Use this method to retrieve the status of the task. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value that can be '\s-1COMPLETED\s0', '\s-1FAILED\s0' or '\s-1PENDING\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get execution_status
\& my $execution_status = $task\->execution_status();
.Ve
.RE
.RS 4
.RE
.SS "execution_time( )"
.IX Subsection "execution_time( )"
.RS 4
Use this method to retrieve the execution time. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get execution_time
\& my $execution_time = $task\->execution_time();
.Ve
.RE
.RS 4
.RE
.SS "member( )"
.IX Subsection "member( )"
.RS 4
Use this method to retrieve the Grid member that has created this task. This is a read-only attribute.
.Sp
\&\fBParameter\fR
.Sp
None
.Sp
\&\fBReturns\fR
.Sp
The method returns the attribute value.
.Sp
\&\fBExample\fR
.Sp
.Vb 2
\& #Get member
\& my $member = $task\->member();
.Ve
.RE
.SS "is_network_insight_task( )"
.IX Subsection "is_network_insight_task( )"
.RS 4
Use this method to retrieve the flag that indicates if this task is related to network insight. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
This method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get value
\& $value = $task\->is_network_insight_task();
.Ve
.RE
.RS 4
.RE
.SS "re_execute_task( )"
.IX Subsection "re_execute_task( )"
.RS 4
Use this method to set failed discovery task to be re-executed.
.Sp
If this flag is set to 'true' a failed Network Insight discovery task will be re-executed, a new task will be created cloned from this one and restarted.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Boolean to set failed netmri task to be re-executed. Only \*(L"true\*(R" value makes sense.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # Get value
\& $value = $task\->re_execute_task();
\&
\& # Set value
\& $task\->re_execute_task(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "scheduled_time( )"
.IX Subsection "scheduled_time( )"
.RS 4
Use this method to set or retrieve the date and time the task is scheduled to occur.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Scheduled date and time in \s-1ISO 8601\s0 extended format (e.g., 2008\-10\-21T10:56:33Z or 2008\-10\-21T10:56:33.001Z).
.Sp
Use case insensitive value \*(L"now\*(R" to execute a scheduled task immediately.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get scheduled_time value
\& my $scheduled_time = $task\->scheduled_time();
\&
\& #Modify scheduled_time value
\& $task\->scheduled_time("2008\-10\-21T10:56:33Z");
\& # Submit modification
\& $session\->modify($task);
\&
\& # Do it now
\& $task\->scheduled_time("Now");
\& # Submit modification
\& $session\->modify($task);
.Ve
.RE
.RS 4
.RE
.SS "submit_time( )"
.IX Subsection "submit_time( )"
.RS 4
Use this method to retrieve the time the scheduled task was submitted (when appropriate Session method was called with parameter scheduled_time).
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the submitted date and time in \s-1ISO 8601\s0 extended format (e.g., 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z).
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get submit_time
\& my $submit_time = $task\->submit_time();
.Ve
.RE
.RS 4
.RE
.SS "submitter_comment( )"
.IX Subsection "submitter_comment( )"
.RS 4
Use this method to set or retrieve the submitter comment.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The submitter comment in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get submitter_comment value
\& my $submitter_comment = $task\->submitter_comment();
\&
\& #Modify submitter_comment value
\& $task\->submitter_comment(\*(Aqok\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "submitter( )"
.IX Subsection "submitter( )"
.RS 4
Use this method to retrieve the name of the user who submitted the task.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the user name in string format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get submitter
\& my $submitter = $task\->submitter();
.Ve
.RE
.RS 4
.RE
.SS "task_id( )"
.IX Subsection "task_id( )"
.RS 4
Use this method to retrieve the identifier of a scheduled task.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the identifier in numeric format.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get task_id
\& my $task_id = $task\->task_id();
.Ve
.RE
.RS 4
.RE
.SS "ticket_number( )"
.IX Subsection "ticket_number( )"
.RS 4
Use this method to set or retrieve the ticket number.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The ticket number in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get ticket_number value
\& my $ticket_number = $task\->ticket_number();
\&
\& #Modify ticket_number value
\& $task\->ticket_number(\*(Aqok\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "task_type( )"
.IX Subsection "task_type( )"
.RS 4
Use this method to retrieve the scheduled task type. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. Valid return value is \*(L"\s-1OBJECT_CHANGE\*(R"\s0 and \*(L"\s-1PORT_CONTROL\*(R".\s0
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get task_type value
\& my $task_type = $task\->task_type();
.Ve
.RE
.RS 4
.RE
.SS "time_zone( )"
.IX Subsection "time_zone( )"
.RS 4
Use this method to set or retrieve the time zone.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The \s-1UTC\s0 string that represents the time zone. For example \*(L"(\s-1UTC\s0 \- 6:00) Central Time (\s-1US\s0 and Canada)\*(R". The default value is \*(L"(\s-1UTC\s0) Coordinated Universal Time\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get attribute value
\& my $value = $schedule_setting\->time_zone();
\&
\& #Modify attribute value
\& $schedule_setting\->time_zone("(UTC \- 6:00) Central Time (US and Canada)");
.Ve
.RE
.RS 4
.RE
.SS "predecessor_task( )"
.IX Subsection "predecessor_task( )"
.RS 4
Use this method to retrieve the predecessor task. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
none
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns an Infoblox::Grid::ScheduledTask object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get predecessor_task value
\& my $predecessor_task = $task\->predecessor_task();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as add, search, modify, and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to a ScheduledTask object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox appliance
\&
\& my $session = Infoblox::Session\->new(
\&                master   => "192.168.1.2", #appliance host ip
\&                username => "admin",       #appliance user login
\&                password => "infoblox"     #appliance password
\&                );
\&
\& unless ($session) {
\&        die("Construct session failed: ",
\&                Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
\&
\& # Add a network
\& my $network = Infoblox::DHCP::Network\->new(
\&     network => "10.0.0.0/24",
\& );
\& unless ($network) {
\&     die("Construct Network failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Network created successfully\en";
\&
\& $session\->add($network)
\&     or die("Add Network object failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object added to server successfully\en";
.Ve
.PP
\&\fB#Create a ScheduledTask object\fR
.PP
.Vb 10
\& # Create a fixed address
\& my $fixed_addr = Infoblox::DHCP::FixedAddr\->new(
\&     ipv4addr    => \*(Aq10.0.0.3\*(Aq,
\&     mac         => \*(Aq11:22:33:44:55:66\*(Aq
\& );
\& unless ($fixed_addr) {
\&     die("Construct FixedAddr failed: ",
\&         Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "FixedAddr created successfully\en";
\&
\& # Schedule the addition of a fixed address
\& $session\->add($fixed_addr, scheduled_at => "2020\-01\-01T14:52:00Z")
\&     or die("Schedule fixed address add failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "Fixed address add scheduled successfully\en";
.Ve
.PP
\&\fB#Search for a ScheduledTask object\fR
.PP
.Vb 5
\& my @retrieved_objs = $session\->search(
\&     object    => "Infoblox::Grid::ScheduledTask",
\&     submitter => "admin"
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Search for a ScheduledTask object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Search for a ScheduledTask object found at least 1 matching entry\en";
.Ve
.PP
\&\fB#Get and modify a ScheduledTask object\fR
.PP
.Vb 6
\& #Get the ScheduledTask object from Infoblox appliance through a session
\& my @retrieved_objs = $session\->get(
\&     object         => "Infoblox::Grid::ScheduledTask",
\&     scheduled_time => "2020\-01\-01T14:52:33Z"
\& );
\& my $object = $retrieved_objs[0];
\&
\& unless ($object) {
\&     die("Get ScheduledTask object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get ScheduledTask object found at least 1 matching entry\en";
\&
\& #Modify the ScheduledTask object
\& $object\->scheduled_time("2020\-02\-01T14:52:33Z");
\&
\& #Apply the changes.
\& $session\->modify($object)
\&     or die("Modify ScheduledTask object failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "ScheduledTask object modified successfully \en";
.Ve
.PP
\&\fB#Remove a ScheduledTask object\fR
.PP
.Vb 11
\& #Get the ScheduledTask object through the session
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::ScheduledTask",
\&     action => "Add"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get ScheduledTask object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get ScheduledTask object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove ScheduledTask object failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "ScheduledTask object removed successfully \en";
.Ve
.PP
\&\fB#Cleanup\fR
.PP
.Vb 11
\& #Get the Network object through the session
\& my @retrieved_objs = $session\->get(
\&     object  => "Infoblox::DHCP::Network",
\&     network => "10.0.0.0/24"
\& );
\& my $object = $retrieved_objs[0];
\& unless ($object) {
\&     die("Get Network object failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get Network object found at least 1 matching entry\en";
\&
\& #Submit the object for removal
\& $session\->remove($object)
\&     or die("Remove Network object failed: ",
\&     $session\->status_code() . ":" . $session\->status_detail());
\& print "Network object removed successfully \en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "SCHEDULED DATE AND TIME FORMAT"
.IX Header "SCHEDULED DATE AND TIME FORMAT"
Scheduled date and time are represented in \s-1ISO 8601\s0 extended format (e.g., 2008\-10\-21T10:56:00Z or 2008\-10\-21T10:56:00.001Z) with some restrictions:
.IP "\(bu" 4
Maximal value for year field is 2037.
.PP
When the scheduling parameter is used, changes to objects do not occur immediately. Instead, the Infoblox::Grid::ScheduledTask object is created, and then executed at the time specified in this parameter.
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::ScheduledTask, Infoblox::Grid::ScheduledTask::ChangedObject, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR,Infoblox::Session
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 459:" 4
.IX Item "Around line 459:"
You can't have =items (as at line 463) unless the first thing after the =over is an =item
.IP "Around line 478:" 4
.IX Item "Around line 478:"
=back without =over
