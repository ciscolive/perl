.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Connector::Iterator 3"
.TH Connector::Iterator 3 "2016-09-23" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
Connector::Iterator
.SH "Description"
.IX Header "Description"
Helper to perform a \fIset\fR operation over a list of connector endpoints
while handing errors individually for each connector. The return value
is a hashref with the processed target names as key and an empty value
if no errors occured and the exception message if the target failed. You
must set \fIskip_on_error\fR to enable handling of expcetions, otherwise 
they just bubble up and terminate execution of the loop.
.PP
Intended use case: write the same data to multiple targets by using 
multiple connectors. Failed write attemps can be skipped or queued
and redone
.SS "Supported methods"
.IX Subsection "Supported methods"
set
.SH "Configuration Example"
.IX Header "Configuration Example"
.Vb 4
\&    my $target = OpenXPKI::Connector::Iterator\->new({
\&        BASECONNECTOR => $config,
\&        PREFIX => $prefix
\&    });
\&
\&    $target\->set( [ $data\->{issuer}{CN}[0] ], $data );
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\s-1BASECONNECTOR\s0" 4
.IX Item "BASECONNECTOR"
Reference to the connector for the underlying config.
.IP "\s-1PREFIX\s0" 4
.IX Item "PREFIX"
The full path to the node above the targets.
.IP "target" 4
.IX Item "target"
List of targets to iterate thru, must be single path elements!
.IP "skip_on_error" 4
.IX Item "skip_on_error"
By default, exceptions from the called connectors bubble up, the loop
over the targets terminate. If set, all connectors are processed and 
any exceptions are returned in the result.
