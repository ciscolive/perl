.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Object::Vars 3"
.TH Data::Object::Vars 3 "2020-03-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Object::Vars
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Env Vars Class for Perl 5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package main;
\&
\&  use Data::Object::Vars;
\&
\&  local %ENV = (USER => \*(Aqubuntu\*(Aq, HOME => \*(Aq/home/ubuntu\*(Aq);
\&
\&  my $vars = Data::Object::Vars\->new(
\&    named => { iam => \*(AqUSER\*(Aq, root => \*(AqHOME\*(Aq }
\&  );
\&
\&  # $vars\->root; # $ENV{HOME}
\&  # $vars\->home; # $ENV{HOME}
\&  # $vars\->get(\*(Aqhome\*(Aq); # $ENV{HOME}
\&  # $vars\->get(\*(AqHOME\*(Aq); # $ENV{HOME}
\&
\&  # $vars\->iam; # $ENV{USER}
\&  # $vars\->user; # $ENV{USER}
\&  # $vars\->get(\*(Aquser\*(Aq); # $ENV{USER}
\&  # $vars\->get(\*(AqUSER\*(Aq); # $ENV{USER}
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides methods for accessing \f(CW%ENV\fR items.
.SH "INTEGRATES"
.IX Header "INTEGRATES"
This package integrates behaviors from:
.PP
Data::Object::Role::Buildable
.PP
Data::Object::Role::Proxyable
.PP
Data::Object::Role::Stashable
.SH "LIBRARIES"
.IX Header "LIBRARIES"
This package uses type constraints from:
.PP
Types::Standard
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
This package has the following attributes:
.SS "named"
.IX Subsection "named"
.Vb 1
\&  named(HashRef)
.Ve
.PP
This attribute is read-only, accepts \f(CW\*(C`(HashRef)\*(C'\fR values, and is optional.
.SH "METHODS"
.IX Header "METHODS"
This package implements the following methods:
.SS "exists"
.IX Subsection "exists"
.Vb 1
\&  exists(Str $key) : Any
.Ve
.PP
The exists method takes a name or index and returns truthy if an associated
value exists.
.IP "exists example #1" 4
.IX Item "exists example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->exists(\*(Aqiam\*(Aq); # truthy
.Ve
.IP "exists example #2" 4
.IX Item "exists example #2"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->exists(\*(AqUSER\*(Aq); # truthy
.Ve
.IP "exists example #3" 4
.IX Item "exists example #3"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->exists(\*(AqPATH\*(Aq); # falsy
.Ve
.IP "exists example #4" 4
.IX Item "exists example #4"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->exists(\*(Aquser\*(Aq); # truthy
.Ve
.SS "get"
.IX Subsection "get"
.Vb 1
\&  get(Str $key) : Any
.Ve
.PP
The get method takes a name or index and returns the associated value.
.IP "get example #1" 4
.IX Item "get example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->get(\*(Aqiam\*(Aq); # ubuntu
.Ve
.IP "get example #2" 4
.IX Item "get example #2"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->get(\*(AqUSER\*(Aq); # ubuntu
.Ve
.IP "get example #3" 4
.IX Item "get example #3"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->get(\*(AqPATH\*(Aq); # undef
.Ve
.IP "get example #4" 4
.IX Item "get example #4"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->get(\*(Aquser\*(Aq); # ubuntu
.Ve
.SS "name"
.IX Subsection "name"
.Vb 1
\&  name(Str $key) : Any
.Ve
.PP
The name method takes a name or index and returns index if the the associated
value exists.
.IP "name example #1" 4
.IX Item "name example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->name(\*(Aqiam\*(Aq); # USER
.Ve
.IP "name example #2" 4
.IX Item "name example #2"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->name(\*(AqUSER\*(Aq); # USER
.Ve
.IP "name example #3" 4
.IX Item "name example #3"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->name(\*(AqPATH\*(Aq); # undef
.Ve
.IP "name example #4" 4
.IX Item "name example #4"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->name(\*(Aquser\*(Aq); # USER
.Ve
.SS "set"
.IX Subsection "set"
.Vb 1
\&  set(Str $key, Maybe[Any] $value) : Any
.Ve
.PP
The set method takes a name or index and sets the value provided if the
associated argument exists.
.IP "set example #1" 4
.IX Item "set example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->set(\*(Aqiam\*(Aq, \*(Aqroot\*(Aq); # root
.Ve
.IP "set example #2" 4
.IX Item "set example #2"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->set(\*(AqUSER\*(Aq, \*(Aqroot\*(Aq); # root
.Ve
.IP "set example #3" 4
.IX Item "set example #3"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->set(\*(AqPATH\*(Aq, \*(Aq/tmp\*(Aq); # undef
\&
\&  # is not set
.Ve
.IP "set example #4" 4
.IX Item "set example #4"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->set(\*(Aquser\*(Aq, \*(Aqroot\*(Aq); # root
.Ve
.SS "stashed"
.IX Subsection "stashed"
.Vb 1
\&  stashed() : HashRef
.Ve
.PP
The stashed method returns the stashed data associated with the object.
.IP "stashed example #1" 4
.IX Item "stashed example #1"
.Vb 1
\&  # given: synopsis
\&
\&  $vars\->stashed
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Al Newkirk, \f(CW\*(C`awncorp@cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2011\-2019, Al Newkirk, et al.
.PP
This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the \*(L"license
file\*(R" <https://github.com/iamalnewkirk/data-object-vars/blob/master/LICENSE>.
.SH "PROJECT"
.IX Header "PROJECT"
Wiki <https://github.com/iamalnewkirk/data-object-vars/wiki>
.PP
Project <https://github.com/iamalnewkirk/data-object-vars>
.PP
Initiatives <https://github.com/iamalnewkirk/data-object-vars/projects>
.PP
Milestones <https://github.com/iamalnewkirk/data-object-vars/milestones>
.PP
Contributing <https://github.com/iamalnewkirk/data-object-vars/blob/master/CONTRIBUTE.md>
.PP
Issues <https://github.com/iamalnewkirk/data-object-vars/issues>
