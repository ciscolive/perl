.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Cursor 3"
.TH Infoblox::Cursor 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Cursor \- Manages paged searches.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class enables users to conduct database searches returning large datasets in an object-by-object manner.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 6
\& my $cursor=$session\->new_cursor(
\&                                fetch_size     => 200,
\&                                object         => "Infoblox::DNS::AllRecords",
\&                                return_methods => [\*(Aqname\*(Aq],
\&                                name           => ".*"
\&                               );
.Ve
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use when creating a cursor used for paged searches.
.SS "fetch_size( )"
.IX Subsection "fetch_size( )"
.RS 4
This method is used to set the amount of records returned from the back-end to the client for every request. Larger values
will cause less requests to be sent to the back-end and more memory used on the client-side; smaller values will cause
more requests.
.Sp
The default value is 100.
.RE
.SS "other parameters"
.IX Subsection "other parameters"
.RS 4
Other parameters for this constructor are any valid search parameters as described in Infoblox::Session\->\fBsearch()\fR
.RE
.SS "Supported object types"
.IX Subsection "Supported object types"
.RS 4
Paged search is supported for the following object types:
.IP "Infoblox::DNS::AllRecords" 4
.IX Item "Infoblox::DNS::AllRecords"
.PD 0
.IP "Infoblox::DNS::Zone" 4
.IX Item "Infoblox::DNS::Zone"
.IP "Infoblox::DHCP::FixedAddr" 4
.IX Item "Infoblox::DHCP::FixedAddr"
.IP "Infoblox::DHCP::Network" 4
.IX Item "Infoblox::DHCP::Network"
.IP "Infoblox::DNS::Host" 4
.IX Item "Infoblox::DNS::Host"
.IP "Infoblox::DNS::Record::A" 4
.IX Item "Infoblox::DNS::Record::A"
.IP "Infoblox::DNS::Record::AAAA" 4
.IX Item "Infoblox::DNS::Record::AAAA"
.IP "Infoblox::DNS::Record::PTR" 4
.IX Item "Infoblox::DNS::Record::PTR"
.IP "Infoblox::DNS::Record::TXT" 4
.IX Item "Infoblox::DNS::Record::TXT"
.IP "Infoblox::DNS::Record::MX" 4
.IX Item "Infoblox::DNS::Record::MX"
.IP "Infoblox::DNS::Record::SRV" 4
.IX Item "Infoblox::DNS::Record::SRV"
.IP "Infoblox::DNS::Record::CNAME" 4
.IX Item "Infoblox::DNS::Record::CNAME"
.IP "Infoblox::DNS::Record::DNAME" 4
.IX Item "Infoblox::DNS::Record::DNAME"
.RE
.RS 4
.RE
.PD
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates how to execute a paged search.
.PP
.Vb 6
\& #PROGRAM STARTS: Include all the modules that will be used
\&    $cursor=$session\->new_cursor(
\&                                 fetch_size => 100,
\&                                 object => "Infoblox::DNS::AllRecords",
\&                                 name   => \*(Aq.*\*(Aq,
\&                                );
\&
\&    while ($current_record = $cursor\->fetch()) {
\&        # $current_record will contain a matching record object
\&    }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBsearch()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
