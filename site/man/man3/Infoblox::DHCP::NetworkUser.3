.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::DHCP::NetworkUser 3"
.TH Infoblox::DHCP::NetworkUser 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::DHCP::NetworkUser \- a DHCP Network User object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1DHCP\s0 Network User provides information about Active Directory users such as user's session at a specific \s-1IP\s0 address, domain, logon and logoff timestamps.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 11
\& my $network_user = Infoblox::DHCP::NetworkUser\->new(
\&    address           => $ipaddr,    # Required
\&    domainame         => $str,       # Required
\&    first_seen_time   => $epoch,     # Required
\&    name              => $str,       # Required
\&    network_view      => $view_name, # Required
\&    logon_id          => $str,       # Required
\&    guid              => $str,       # Required
\&    logout_time       => $epoch,     # Optional
\&    last_seen_time    => $epoch,     # Optional
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in a Session module that you can apply to a \s-1DHCP\s0 Network User object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 10
\& #construct an object
\& my $network_user = Infoblox::DHCP::NetworkUser\->new(
\&    address      => \*(Aq10.1.1.1\*(Aq,
\&    domainame    => \*(AqAD\-7\*(Aq,
\&    first_seen_time   => 1234567,
\&    name         => \*(Aquser1\*(Aq,
\&    network_view => $dhcp_view,
\&    logon_id     => \*(Aq10\*(Aq,
\&    guid         => \*(Aq15\*(Aq,
\& );
\&
\& #submit for addition
\& my $response = $session\->add($network_user);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attribute to get a specific object:
\&
\&  address      \- Optional. A DHCP Network User address.
\&  domainname   \- Optional. A DHCP Network User domain name.
\&  guid         \- Optional. A DHCP Network User group identifier.
\&  logon_id     \- Optional. A DHCP Network User logon identifier.
\&  name         \- Optional. A DHCP Network User name.
\&  network_view \- Optional. A DHCP View object or a string which contains a DHCP View name.
\&  parent       \- Optional. A DHCP or DNS object associated with the network user. Note that object should be retrieved from the server.
\&  user_status  \- Optional. A DHCP Network User status.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DHCP::NetworkUser\*(Aq,
\&     name   => \*(Aquser.*\*(Aq,
\& );
\&
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DHCP::NetworkUser\*(Aq,
\&     parent => $dhcp_range,
\& );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use method to modify the comment
\& $network_user\->name(\*(Aquser2\*(Aq);
\& #Submit modification
\& my $response = $session\->modify($network_user);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => \*(AqInfoblox::DHCP::NetworkUser\*(Aq,
\&     name   => \*(Aquser1\*(Aq,
\& );
\& #Find the desired object from the retrieved list.
\& my $desired_user = $retrieved_objs[0];
\& #Submit for removal
\& my $response = $session\->remove($desired_user);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey Reference\fR" 4
.IX Item "Key Reference"
.Vb 1
\& Apply the following attribute to get a specific object:
\&
\&  address      \- Optional. A DHCP Network User address.
\&  domainname   \- Optional. A DHCP Network User domain name.
\&  guid         \- Optional. A DHCP Network User group identifier.
\&  logon_id     \- Optional. A DHCP Network User logon identifier.
\&  name         \- Optional. A DHCP Network User name.
\&  network_view \- Optional. A DHCP View object or a string which contains a DHCP View name.
\&  parent       \- Optional. A DHCP or DNS object associated with the network user. Note that object should be retrieved from the server.
\&  user_status  \- Optional. A DHCP Network User status.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& my @retrieved_objs = $session\->search(
\&     object => \*(AqInfoblox::DHCP::NetworkUser\*(Aq,
\&     name   => \*(Aquser.*\*(Aq,
\& );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.SS "address( )"
.IX Subsection "address( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 Network User address.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an IPv4 or IPv6 address.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get address
\& my $address = $network_user\->address();
\& #Modify address
\& $network_user\->address(\*(Aq10.10.10.10\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "address_object( )"
.IX Subsection "address_object( )"
.RS 4
Use this method to retrieve the \s-1DHCP\s0 Network User address \s-1IPAM\s0 object. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::IPAM::Address object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get address_object
\& my $address_object = $network_user\->address_object();
.Ve
.RE
.RS 4
.RE
.SS "data_source( )"
.IX Subsection "data_source( )"
.RS 4
Use this method to retrieve the \s-1DHCP\s0 Network User data source. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value. The valid return values are '\s-1API\s0', '\s-1MS_SERVER\s0' and '\s-1CISCO_ISE\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get data_source
\& my $data_source = $network_user\->data_source();
.Ve
.RE
.RS 4
.RE
.SS "data_source_ip( )"
.IX Subsection "data_source_ip( )"
.RS 4
Use this method to retrieve the \s-1DHCP\s0 Network User endpoint data source \s-1IP\s0 address or \s-1FQDN.\s0 This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get data_source_ip
\& my $data_source_ip = $network_user\->data_source_ip();
.Ve
.RE
.RS 4
.RE
.SS "domainname( )"
.IX Subsection "domainname( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 Network User domain name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired domain name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get domainname
\& my $domainname = $network_user\->domainname();
\& #Modify domainname
\& $network_user\->domainname(\*(AqDOMAIN\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "guid( )"
.IX Subsection "guid( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 Network User group identifier.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired group identifier in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get guid
\& my $guid = $network_user\->guid();
\& #Modify guid
\& $network_user\->guid(\*(Aq10\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "last_seen_time( )"
.IX Subsection "last_seen_time( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 Network User last active timestamp.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is the number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get last_seen_time
\& my $last_seen_time = $network_user\->last_seen_time();
\& #Modify last_seen_time
\& $network_user\->last_seen_time(1234567);
.Ve
.RE
.RS 4
.RE
.SS "last_updated_time( )"
.IX Subsection "last_updated_time( )"
.RS 4
Use this method to retrieve the \s-1DHCP\s0 Network User last updated timestamp. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get last_updated_time
\& my $last_updated_time = $network_user\->last_updated_time();
.Ve
.RE
.RS 4
.RE
.SS "first_seen_time( )"
.IX Subsection "first_seen_time( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 Network User first seen timestamp.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is the number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get first_seen_time
\& my $first_seen_time = $network_user\->first_seen_time();
\& #Modify first_seen_time
\& $network_user\->first_seen_time(1234567);
.Ve
.RE
.RS 4
.RE
.SS "logon_id( )"
.IX Subsection "logon_id( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 Network User logon identifier.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired logon identifier in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get logon_id
\& my $logon_id = $network_user\->logon_id();
\& #Modify logon_id
\& $network_user\->logon_id(\*(Aq10\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "logout_time( )"
.IX Subsection "logout_time( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 Network User logout timestamp.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is the number of seconds that have elapsed since January 1st, 1970 \s-1UTC.\s0
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get logout_time
\& my $logout_time = $network_user\->logout_time();
\& #Modify logout_time
\& $network_user\->logout_time(1234567);
.Ve
.RE
.RS 4
.RE
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 Network User name.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get name
\& my $name = $network_user\->name();
\& #Modify name
\& $network_user\->name(\*(Aquser1\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "network( )"
.IX Subsection "network( )"
.RS 4
Use this method to retrieve the \s-1DHCP\s0 Network User associated with the \s-1DHCP\s0 Network object. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return values are Infoblox::DHCP::Network and Infoblox::DHCP::IPv6Network objects.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get network
\& my $network = $network_user\->network();
.Ve
.RE
.RS 4
.RE
.SS "network_view( )"
.IX Subsection "network_view( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 Network User associated with the \s-1DHCP\s0 View object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is a desired \s-1DHCP\s0 View name in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get network_view
\& my $network_view = $network_user\->network_view();
\& #Modify network_view
\& $network_user\->network_view(\*(Aqinternal\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "user_status( )"
.IX Subsection "user_status( )"
.RS 4
Use this method to set or retrieve the \s-1DHCP\s0 Network User status. This is a read-only attribute.
.Sp
Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return values are '\s-1ACTIVE\s0', '\s-1LOGOUT\s0' and '\s-1TIMEOUT\s0'.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get user_status
\& my $user_status = $network_user\->user_status();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBadd()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR, Infoblox::Session\->\fBremove()\fR, Infoblox::Session\->\fBsearch()\fR, Infoblox::IPAM::Address, Infoblox::DHCP::Network, Infoblox::DHCP::IPv6Network, Infoblox::DHCP::View
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
