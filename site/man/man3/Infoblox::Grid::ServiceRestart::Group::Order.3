.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::ServiceRestart::Group::Order 3"
.TH Infoblox::Grid::ServiceRestart::Group::Order 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::ServiceRestart::Group::Order \- A Grid Service Restart Group Order object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Grid Service Restart Group Order object controls the restart order of the Service Restart Group for a particular service ('\s-1DHCP\s0' or '\s-1DNS\s0'). To specify a restart order, gather all the groups you want to restart for a particular service and then place the Restart Service Groups in the desired order.
.PP
Note that the default groups should be placed at the end of the list.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 3
\& my $group_order = Infoblox::Grid::ServiceRestart::Group::Order\->new(
\&     groups => [$group1, $group2, ..., $default_group], #Required
\& );
.Ve
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in a Session module that you can apply to a Grid Service Restart Group object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Construct an object
\& my $svcrst_group_order = Infoblox::Grid::ServiceRestart::Group::Order\->new(
\&    groups => [$group1, $group2, $default_group],
\& );
\&
\& #Submit for addition
\& my $response = $session\->add($svcrst_group_order);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to set or retrieve the attribute values of the object.
.SS "groups( )"
.IX Subsection "groups( )"
.RS 4
Use this method to set or retrieve the ordered list for Grid Service Restart Groups.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array of Infoblox::Grid::ServiceRestart::Group objects.
.Sp
Note that all groups for the specified service ('\s-1DHCP\s0' or '\s-1DNS\s0') are required. Default groups should be placed at the end of the list.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns 'true' when the modification succeeds, and returns 'false' when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get groups
\& my $groups = $svcrst_gr_order\->groups();
\& #Modify groups
\& $svcrst_gr_order\->groups([$group1, $group2, $group3]);
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBadd()\fR, Infoblox::Grid::ServiceRestart::Group.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
