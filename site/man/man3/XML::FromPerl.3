.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::FromPerl 3"
.TH XML::FromPerl 3 "2017-11-01" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::FromPerl \- Generate XML from simple Perl data structures
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use XML::FromPerl qw(xml_from_perl);
\&
\&  my $doc = xml_from_perl
\&    [ Foo => { attr1 => val1, attr2 => val2},
\&      [ Bar => { attr3 => val3, ... },
\&      [ Bar => { ... },
\&      "Some Text here",
\&      [Doz => { ... },
\&        [ Bar => { ... }, [ ... ] ] ];
\&
\&  $doc\->toFile("foo.xml");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is able to generate \s-1XML\s0 described using simple Perl data
structures.
.PP
\&\s-1XML\s0 nodes are declared as arrays where the first slot is the tag name,
the second is a \s-1HASH\s0 containing tag attributes and the rest are its
children. Perl scalars are used for text sections.
.SS "\s-1EXPORTABLE FUNCTIONS\s0"
.IX Subsection "EXPORTABLE FUNCTIONS"
.ie n .IP "xml_from_perl $data" 4
.el .IP "xml_from_perl \f(CW$data\fR" 4
.IX Item "xml_from_perl $data"
Converts the given perl data structure into a XML::LibXML::Document
object.
.ie n .IP "xml_node_from_perl $doc, $data" 4
.el .IP "xml_node_from_perl \f(CW$doc\fR, \f(CW$data\fR" 4
.IX Item "xml_node_from_perl $doc, $data"
Converts the given perl data structure into a XML::LibXML::Node
object linked to the document passed.
.SS "\s-1NOTES\s0"
.IX Subsection "NOTES"
\fINamespaces\fR
.IX Subsection "Namespaces"
.PP
I have not made my mind yet about how to handle \s-1XML\s0 namespaces other
than stating them explicitly in the names or setting the \f(CW\*(C`xmlns\*(C'\fR
attribute.
.PP
\fIAttribute order\fR
.IX Subsection "Attribute order"
.PP
If attribute order is important to you, declare then using
Tie::IxHash:
.PP
For instance:
.PP
.Vb 6
\&  use Tie::IxHash;
\&  sub attrs {
\&    my @attrs = @_;
\&    tie my(%attrs), \*(AqTie::Hash\*(Aq, @attrs;
\&    \e%attrs
\&  }
\&
\&  my $doc = xml_from_perl [ Foo => attrs(attr1 => val1, attrs2 => val2), ...];
.Ve
.PP
Otherwise attributes are sorted in lexicographical order.
.PP
\fIMemory usage\fR
.IX Subsection "Memory usage"
.PP
This module is not very memory efficient. At some point it is going to
keep in memory both the original perl data structure and the
XML::LibXML one.
.PP
Anyway, nowadays that shouldn't be a problem unless your data is
really huge.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
XML::LibXML, XML::LibXML::Document, XML::LibXML::Node.
.PP
Other modules for generating \s-1XML\s0 are XML::Writer and
XML::Generator. Check also XML::Compile.
.PP
A related PerlMonks discussion:
<http://www.perlmonks.org/?node_id=1195009>.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2017 by Salvador Fandi√±o <sfandino@yahoo.com>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.24.1 or,
at your option, any later version of Perl 5 you may have available.
