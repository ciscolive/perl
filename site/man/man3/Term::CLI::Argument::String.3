.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::CLI::Argument::String 3"
.TH Term::CLI::Argument::String 3 "2019-11-18" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::CLI::Argument::String \- class for basic string arguments in Term::CLI
.SH "VERSION"
.IX Header "VERSION"
version 0.051007
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Term::CLI::Argument::String;
\&
\& my $arg1 = Term::CLI::Argument::String\->new(
\&    name => \*(Aqarg1\*(Aq
\& );
\&
\& $arg1\->validate(\*(Aq\*(Aq);      # returns \*(Aq\*(Aq
\& $arg1\->validate(\*(Aqa\*(Aq);     # returns \*(Aqa\*(Aq
\& $arg1\->validate(\*(Aqabcde\*(Aq); # returns \*(Aqabcde\*(Aq
\&
\& my $arg2 = Term::CLI::Argument::String\->new(
\&    name => \*(Aqarg2\*(Aq
\&    min_length => 1,
\&    max_length => 4,
\& );
\&
\& $arg2\->validate(\*(Aq\*(Aq);      # returns undef, sets error
\& $arg2\->validate(\*(Aqa\*(Aq);     # returns \*(Aqa\*(Aq
\& $arg2\->validate(\*(Aqabcde\*(Aq); # returns undef, sets error
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Simple class for string arguments in Term::CLI(3p). This is basically
the Term::CLI::Argument(3p) class, but also allowing empty strings.
.SH "CLASS STRUCTURE"
.IX Header "CLASS STRUCTURE"
.SS "Inherits from:"
.IX Subsection "Inherits from:"
Term::CLI::Argument(3p).
.SS "Consumes:"
.IX Subsection "Consumes:"
None.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
See Term::CLI::Argument(3p). Additional attributes are:
.IP "\fBmin_len\fR => \fI\s-1NUM\s0\fR" 4
.IX Item "min_len => NUM"
The minimum required length for any value.
.IP "\fBmax_len\fR => \fI\s-1NUM\s0\fR" 4
.IX Item "max_len => NUM"
The maximum lenght allowed for any value.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
Inherited from Term::CLI::Argument(3p). Additionally, the
following are defined:
.IP "\fBmin_len\fR ( \fI\s-1NUMBER\s0\fR )" 4
.IX Item "min_len ( NUMBER )"
.PD 0
.IP "\fBmax_len\fR ( \fI\s-1NUMBER\s0\fR )" 4
.IX Item "max_len ( NUMBER )"
.PD
Minimum and maximum length for the string, resp.
.IP "\fBhas_min_len\fR" 4
.IX Item "has_min_len"
.PD 0
.IP "\fBhas_max_len\fR" 4
.IX Item "has_max_len"
.PD
Booleans, indicate whether \f(CW\*(C`min_len\*(C'\fR and \f(CW\*(C`max_len\*(C'\fR have been set,
resp.
.IP "\fBclear_min_len\fR" 4
.IX Item "clear_min_len"
.PD 0
.IP "\fBclear_max_len\fR" 4
.IX Item "clear_max_len"
.PD
Clear the \f(CW\*(C`min_len\*(C'\fR and \f(CW\*(C`max_len\*(C'\fR limits, resp.
.PP
See Term::CLI::Argument(3p).
.SH "METHODS"
.IX Header "METHODS"
See Term::CLI::Argument(3p).
.IP "\fBvalidate\fR ( \fIStr\fR )" 4
.IX Item "validate ( Str )"
Overloaded from Term::CLI::Argument.
.Sp
Requires the \fIStr\fR value to be defined, and have a length
that is between \f(CW\*(C`min_len\*(C'\fR and \f(CW\*(C`max_len\*(C'\fR (if defined).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Term::CLI::Argument(3p),
Term::CLI(3p).
.SH "AUTHOR"
.IX Header "AUTHOR"
Steven Bakker <sbakker@cpan.org>, 2018.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2018 Steven Bakker
.PP
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See \*(L"perldoc perlartistic.\*(R"
.PP
This software is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
