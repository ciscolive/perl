.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Admin::CreateTable 3"
.TH DBIx::Admin::CreateTable 3 "2020-09-28" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Admin::CreateTable \- Create and drop tables, primary indexes, and sequences
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&        #!/usr/bin/env perl
\&
\&        use strict;
\&        use warnings;
\&
\&        use DBI;
\&        use DBIx::Admin::CreateTable;
\&
\&        # \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&        my($dbh)        = DBI \-> connect(...);
\&        my($creator)    = DBIx::Admin::CreateTable \-> new(dbh => $dbh, verbose => 1);
\&        my($table_name) = \*(Aqtest\*(Aq;
\&
\&        $creator \-> drop_table($table_name);
\&
\&        my($primary_key) = $creator \-> generate_primary_key_sql($table_name);
\&
\&        $creator \-> create_table(<<SQL);
\&        create table $table_name
\&        (
\&                id $primary_key,
\&                data varchar(255)
\&        )
\&        SQL
.Ve
.PP
See also xt/author/fk.t in DBIx::Admin::TableInfo.
.SH "Description"
.IX Header "Description"
\&\f(CW\*(C`DBIx::Admin::CreateTable\*(C'\fR is a pure Perl module.
.PP
Database vendors supported: MySQL, Oracle, Postgres, SQLite.
.PP
Assumptions:
.IP "Every table has a primary key" 4
.IX Item "Every table has a primary key"
.PD 0
.IP "The primary key is a unique, non-null, integer" 4
.IX Item "The primary key is a unique, non-null, integer"
.IP "The primary key is a single column" 4
.IX Item "The primary key is a single column"
.IP "The primary key column is called 'id'" 4
.IX Item "The primary key column is called 'id'"
.IP "If a primary key has a corresponding auto-created index, the index is called 't_pkey'" 4
.IX Item "If a primary key has a corresponding auto-created index, the index is called 't_pkey'"
.PD
This is true for Postgres, where declaring a column as a primary key automatically results in the creation
of an associated index for that column. The index is named after the table, not after the column.
.IP "If a table 't' (with primary key 'id') has an associated sequence, the sequence is called 't_id_seq'" 4
.IX Item "If a table 't' (with primary key 'id') has an associated sequence, the sequence is called 't_id_seq'"
This is true for both Oracle and Postgres, which use sequences to populate primary key columns. The sequences
are named after both the table and the column.
.SH "Constructor and initialization"
.IX Header "Constructor and initialization"
new(...) returns an object of type \f(CW\*(C`DBIx::Admin::CreateTable\*(C'\fR.
.PP
This is the class contructor.
.PP
Usage: DBIx::Admin::CreateTable \-> \fBnew()\fR.
.PP
This method takes a set of parameters. Only the dbh parameter is mandatory.
.PP
For each parameter you wish to use, call new as new(param_1 => value_1, ...).
.IP "dbh" 4
.IX Item "dbh"
This is a database handle, returned from the \s-1DBI\s0 \fBconnect()\fR call.
.Sp
This parameter is mandatory.
.Sp
There is no default.
.IP "verbose" 4
.IX Item "verbose"
This is 0 or 1, to turn off or on printing of progress statements to \s-1STDERR.\s0
.Sp
This parameter is optional.
.Sp
The default is 0.
.ie n .SH "Method: create_table($sql, $arg)"
.el .SH "Method: create_table($sql, \f(CW$arg\fP)"
.IX Header "Method: create_table($sql, $arg)"
Returns '' (empty string) if successful and \s-1DBI\s0 \fBerrstr()\fR if there is an error.
.PP
\&\f(CW$sql\fR is the \s-1SQL\s0 to create the table.
.PP
\&\f(CW$arg\fR is an optional hash ref of options per table.
.PP
The keys are table names. The only sub-key at the moment is...
.IP "no_sequence" 4
.IX Item "no_sequence"
.Vb 1
\&        $arg = {$table_name_1 => {no_sequence => 1}, $table_name_2 => {no_sequence => 1} };
.Ve
.Sp
can be used to tell create_table not to create a sequence for the given table.
.Sp
You would use this on a CGI::Session\-type table called 'sessions', for example,
when using Oracle or Postgres. With MySQL there would be no sequence anyway.
.Sp
You would also normally use this on a table called 'log'.
.Sp
The reason for this syntax is so you can use the same hash ref in a call to reset_all_sequences.
.PP
Usage with CGI::Session:
.PP
.Vb 3
\&        my($creator)    = DBIx::Admin::CreateTable \-> new(dbh => $dbh, verbose => 1);
\&        my($table_name) = \*(Aqsessions\*(Aq;
\&        my($type)       = $creator \-> db_vendor() eq \*(AqORACLE\*(Aq ? \*(Aqlong\*(Aq : \*(Aqtext\*(Aq;
\&
\&        $creator \-> drop_table($table_name);
\&        $creator \-> create_table(<<SQL, {$table_name => {no_sequence => 1} });
\&        create table $table_name
\&        (
\&                id char(32) primary key,
\&                a_session $type not null
\&        )
\&        SQL
.Ve
.PP
Typical usage:
.PP
.Vb 3
\&        my($creator)     = DBIx::Admin::CreateTable \-> new(dbh => $dbh, verbose => 1);
\&        my($table_name)  = \*(Aqtest\*(Aq;
\&        my($primary_key) = $creator \-> generate_primary_key_sql($table_name);
\&
\&        $creator \-> drop_table($table_name);
\&        $creator \-> create_table(<<SQL);
\&        create table $table_name
\&        (
\&                id $primary_key,
\&                data varchar(255)
\&        )
\&        SQL
.Ve
.PP
The \s-1SQL\s0 generated by this call to \fBcreate_table()\fR is spelled-out in the (\s-1SQL\s0) table below.
.PP
Action:
.PP
.Vb 10
\&        Method:   create_table($table_name, $arg).
\&        Comment:  Creation of tables and sequences.
\&        Sequence: See generate_primary_sequence_name($table_name).
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |          |            Action for $$arg{$table_name}          |
\&        |  Vendor  |      {no_sequence => 0}      | {no_sequence => 1} |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  MySQL   |        Create table          |    Create table    |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Oracle  | Create sequence before table |    Create table    |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        | Postgres | Create sequence before table |    Create table    |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  SQLite  |        Create table          |    Create table    |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.PP
\&\s-1SQL:\s0
.PP
.Vb 10
\&        Method:   create_table($table_name, $arg).
\&        Comment:  SQL generated.
\&        Sequence: See generate_primary_sequence_name($table_name).
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |          |                            SQL for $$arg{$table_name}                               |
\&        |  Vendor  |              {no_sequence => 0}          |            {no_sequence => 1}            |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  MySQL   |         create table $table_name         |         create table $table_name         |
\&        |          |        (id integer primary key           |        (id integer auto_increment        |
\&        |          |              auto_increment,             |              primary key,                |
\&        |          |           data varchar(255) )            |           data varchar(255) )            |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Oracle  |  create sequence ${table_name}_id_seq &  |                                          |
\&        |          |        create table $table_name          |        create table $table_name          |
\&        |          |        (id integer primary key,          |        (id integer primary key,          |
\&        |          |           data varchar(255) )            |           data varchar(255) )            |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        | Postgres |  create sequence ${table_name}_id_seq &  |                                          |
\&        |          |         create table $table_name         |         create table $table_name         |
\&        |          |         (id integer primary key          |         (id integer primary key          |
\&        |          | default nextval("${table_name}_id_seq"), | default nextval("${table_name}_id_seq"), |
\&        |          |            data varchar(255) )           |            data varchar(255) )           |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  SQLite  |         create table $table_name         |         create table $table_name         |
\&        |          |        (id integer primary key           |        (id integer autoincrement         |
\&        |          |              autoincrement,              |              primary key,                |
\&        |          |           data varchar(255) )            |           data varchar(255) )            |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.SH "Method: \fBdb_vendor()\fP"
.IX Header "Method: db_vendor()"
Returns an upper-case string identifying the database vendor.
.PP
Return string:
.PP
.Vb 10
\&        Method:   db_vendor(db_vendor).
\&        Comment:  Value returned.
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Vendor  |   String   |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  MySQL   |   MYSQL    |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Oracle  |   ORACLE   |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-+
\&        | Postgres | POSTGRESQL |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  SQLite  |   SQLITE   |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.ie n .SH "Method: drop_table($table_name, $arg)"
.el .SH "Method: drop_table($table_name, \f(CW$arg\fP)"
.IX Header "Method: drop_table($table_name, $arg)"
Returns '' (empty string).
.PP
\&\f(CW$table_name\fR is the name of the table to drop.
.PP
\&\f(CW$arg\fR is an optional hash ref of options, the same as for \f(CW\*(C`create_table()\*(C'\fR.
.PP
Action:
.PP
.Vb 10
\&        Method:  drop_table($table_name, $arg).
\&        Comment: Deletion of tables and sequences.
\&        Sequence: See generate_primary_sequence_name($table_name).
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |          |          Action for $$arg{$table_name}          |
\&        |  Vendor  |    {no_sequence => 0}      | {no_sequence => 1} |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  MySQL   |         Drop table         |     Drop table     |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Oracle  | Drop sequence before table |     Drop table     |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        | Postgres | Drop sequence after table  |     Drop table     |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  SQLite  |         Drop table         |     Drop table     |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.PP
\&\s-1SQL:\s0
.PP
.Vb 10
\&        Method:   drop_table($table_name, $arg).
\&        Comment:  SQL generated.
\&        Sequence: See generate_primary_sequence_name($table_name).
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |          |                        SQL for $$arg{$table_name}             |
\&        |  Vendor  |          {no_sequence => 0}          |   {no_sequence => 1}   |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  MySQL   |        drop table $table_name        | drop table $table_name |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Oracle  | drop sequence ${table_name}_id_seq & |                        |
\&        |          |        drop table $table_name        | drop table $table_name |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        | Postgres |       drop table $table_name &       | drop table $table_name |
\&        |          |  drop sequence ${table_name}_id_seq  |                        |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  SQLite  |        drop table $table_name        | drop table $table_name |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.PP
Note: \fBdrop_table()\fR turns off RaiseError so we do not error if the sequence and table being deleted do not exist.
This is new in V 2.00.
.SH "Method: generate_primary_index_name($table_name)"
.IX Header "Method: generate_primary_index_name($table_name)"
Returns the name of the index corresponding to the primary key for the given table.
.PP
The module does not call this method.
.PP
\&\s-1SQL:\s0
.PP
.Vb 10
\&        Method:  generate_primary_index_name($table_name).
\&        Comment: Generation of name of the index for the primary key.
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Vendor  |        SQL         |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  MySQL   |                    |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Oracle  |                    |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        | Postgres | ${table_name}_pkey |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  SQLite  |                    |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.SH "Method: generate_primary_key_sql($table_name)"
.IX Header "Method: generate_primary_key_sql($table_name)"
Returns partial \s-1SQL\s0 for declaring the primary key for the given table.
.PP
See the Synopsis for how to use this method.
.PP
\&\s-1SQL:\s0
.PP
.Vb 10
\&        Method:   generate_primary_key_sql($table_name).
\&        Comment:  Generation of partial SQL for primary key.
\&        Sequence: See generate_primary_sequence_name($table_name).
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Vendor  |                       SQL                           |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  MySQL   |         integer primary key auto_increment          |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Oracle  |               integer primary key                   |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        | Postgres | integer primary key default nextval($sequence_name) |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  SQLite  |         integer primary key autoincrement          |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.SH "Method: generate_primary_sequence_name($table_name)"
.IX Header "Method: generate_primary_sequence_name($table_name)"
Returns the name of the sequence used to populate the primary key of the given table.
.PP
\&\s-1SQL:\s0
.PP
.Vb 10
\&        Method:  generate_primary_sequence_name($table_name).
\&        Comment: Generation of name for sequence.
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Vendor  |         SQL          |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  MySQL   |                      |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Oracle  | ${table_name}_id_seq |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        | Postgres | ${table_name}_id_seq |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  SQLite  |                      |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.SH "Method: reset_all_sequences($arg)"
.IX Header "Method: reset_all_sequences($arg)"
Returns nothing.
.PP
Resets the primary key sequence for all tables, except those marked by \f(CW$arg\fR as not having a sequence.
.PP
Note: This method only works if called against an object which knows the names of all tables and sequences.
This means you must have called at least one of these, for each table:
.IP "create_table" 4
.IX Item "create_table"
.PD 0
.IP "drop_table" 4
.IX Item "drop_table"
.IP "generate_primary_key_sql" 4
.IX Item "generate_primary_key_sql"
.IP "generate_primary_sequence_name" 4
.IX Item "generate_primary_sequence_name"
.PD
.PP
\&\f(CW$arg\fR is an optional hash ref of options, the same as for \f(CW\*(C`create_table()\*(C'\fR.
.PP
Summary:
.PP
.Vb 10
\&        Method:  reset_all_sequences($arg).
\&        Comment: Reset all sequences.
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Vendor  |                      Action                           |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  MySQL   |                    Do nothing                         |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Oracle  | Call reset_sequence($table_name, $arg) for all tables |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        | Postgres | Call reset_sequence($table_name, $arg) for all tables |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  SQLite  |                    Do nothing                         |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.ie n .SH "Method: reset_sequence($table_name, $arg)"
.el .SH "Method: reset_sequence($table_name, \f(CW$arg\fP)"
.IX Header "Method: reset_sequence($table_name, $arg)"
Returns nothing.
.PP
Resets the primary key sequence for the given table, except if it is marked by \f(CW$arg\fR as not having a sequence.
.PP
\&\f(CW$arg\fR is an optional hash ref of options, the same as for \f(CW\*(C`create_table()\*(C'\fR.
.PP
Summary:
.PP
.Vb 10
\&        Method:   reset_sequence($table_name, $arg).
\&        Comment:  Reset one sequence.
\&        Sequence: The value of the sequence is set to the number of records in the table.
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |          |      Action for $$arg{$table_name}      |
\&        |  Vendor  | {no_sequence => 0} | {no_sequence => 1} |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  MySQL   |    Do nothing      |     Do nothing     |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Oracle  | Set sequence value |     Do nothing     |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        | Postgres | Set sequence value |     Do nothing     |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  SQLite  |    Do nothing      |     Do nothing     |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.SH "FAQ"
.IX Header "FAQ"
.SS "Which versions of the servers did you test?"
.IX Subsection "Which versions of the servers did you test?"
.Vb 12
\&        Versions as at 2014\-03\-07
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Vendor  |     V      |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  MariaDB |   5.5.36   |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Oracle  | 10.2.0.1.0 | (Not tested for years)
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-+
\&        | Postgres |   9.1.12   |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  SQLite  |   3.7.17   |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.SS "Do all database servers accept the same 'create table' commands?"
.IX Subsection "Do all database servers accept the same 'create table' commands?"
No. You have been warned.
.PP
References for 'Create table':
MySQL <https://dev.mysql.com/doc/refman/5.7/en/create-table.html>.
Postgres <http://www.postgresql.org/docs/9.3/interactive/sql-createtable.html>.
SQLite <https://sqlite.org/lang_createtable.html>.
.PP
Consider these:
.PP
.Vb 5
\&        create table one
\&        (
\&                id   integer primary key autoincrement,
\&                data varchar(255)
\&        ) $engine
\&
\&        create table two
\&        (
\&                id      integer primary key autoincrement,
\&                one_id  integer not null,
\&                data    varchar(255),
\&                foreign key(one_id) references one(id)
\&        ) $engine
.Ve
.PP
Putting the 'foreign key' clause at the end makes it a table constraint. Some database servers, e.g. MySQL and Postgres,
allow you to attach it to a particular column, as explained next.
.IP "o MySQL" 4
.IX Item "o MySQL"
The creates work as given, where \f(CW$engine\fR eq 'engine = innodb'.
.Sp
Further, you can re-order the clauses in the 2nd create:
.Sp
.Vb 7
\&        create table two
\&        (
\&                id      integer primary key autoincrement,
\&                one_id  integer not null,
\&                foreign key(one_id) references one(id),
\&                data    varchar(255)
\&        ) $engine
.Ve
.Sp
This also works, where \f(CW$engine\fR eq 'engine = innodb'.
.Sp
However, if you use:
.Sp
.Vb 6
\&        create table two
\&        (
\&                id      integer primary key autoincrement,
\&                one_id  integer not null references one(id),
\&                data    varchar(255)
\&        ) $engine
.Ve
.Sp
Then the 'references' (foreign key) clause is parsed but discarded, even with 'engine = innodb'.
.IP "o Postgres" 4
.IX Item "o Postgres"
The creates work as given, where \f(CW$engine\fR = ''.
.Sp
And you can re-order the clauses, as in the first example for MySQL.
.IP "o SQLite" 4
.IX Item "o SQLite"
The creates work as given, where \f(CW$engine\fR = ''.
.Sp
But if you re-order the clauses:
.Sp
.Vb 7
\&        create table two
\&        (
\&                id      integer primary key autoincrement,
\&                one_id  integer not null,
\&                foreign key(one_id) references one(id),
\&                data    varchar(255)
\&        ) $engine
.Ve
.Sp
Then you get a syntax error.
.Sp
However, if you use:
.Sp
.Vb 6
\&        create table two
\&        (
\&                id      integer primary key autoincrement,
\&                one_id  integer not null references one(id),
\&                data    varchar(255)
\&        ) $engine
.Ve
.Sp
Then the 'references' (foreign key) clause is parsed, and it does create a foreign key relationship.
.PP
Do not forget this when using SQLite:
.PP
.Vb 1
\&        $dbh \-> do(\*(Aqpragma foreign_keys = on\*(Aq) if ($dsn =~ /SQLite/i);
.Ve
.SS "Do I include the name of an auto-populated column in an insert statement?"
.IX Subsection "Do I include the name of an auto-populated column in an insert statement?"
Depends on the server. Some databases, e.g. Postgres, do \fInot\fR want the name of the primary key
in the insert statement if the server is to generate a value for a column.
.PP
\&\s-1SQL\s0 for insert:
.PP
.Vb 10
\&        Comment: SQL for insertion of rows containing auto\-populated values.
\&        Sequence: See generate_primary_sequence_name($table_name).
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Vendor  |                                   SQL                                 |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  MySQL   |               insert into $table_name (data) values (?)               |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Oracle  | insert into $table_name (id, data) values ($sequence_name.nextval, ?) |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        | Postgres |               insert into $table_name (data) values (?)               |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  SQLite  |          insert into $table_name (id, data) values (undef, ?)         |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.SS "Do I have to use a sequence to populate a primary key?"
.IX Subsection "Do I have to use a sequence to populate a primary key?"
Well, no, actually. See next question.
.SS "How to I override the auto-populated value for a primary key column?"
.IX Subsection "How to I override the auto-populated value for a primary key column?"
By including the name and the value in the insert statement.
.PP
\&\s-1SQL\s0 for insert:
.PP
.Vb 12
\&        Comment: SQL for insertion of rows overriding auto\-populated values.
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Vendor  |                     SQL                          |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  MySQL   | insert into $table_name (id, data) values (?, ?) |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  Oracle  | insert into $table_name (id, data) values (?, ?) |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        | Postgres | insert into $table_name (id, data) values (?, ?) |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&        |  SQLite  | insert into $table_name (id, data) values (?, ?) |
\&        +\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.SS "Are primary keys always not null and unique?"
.IX Subsection "Are primary keys always not null and unique?"
Yes. All servers document primary key as meaning both non null and unique.
.SS "See Also"
.IX Subsection "See Also"
DBIx::Admin::DSNManager.
.PP
DBIx::Admin::TableInfo.
.SH "Version Numbers"
.IX Header "Version Numbers"
Version numbers < 1.00 represent development versions. From 1.00 up, they are production versions.
.SH "Support"
.IX Header "Support"
Log a bug on \s-1RT:\s0 <https://rt.cpan.org/Public/Dist/Display.html?Name=DBIx\-Admin\-CreateTable>.
.SH "Author"
.IX Header "Author"
\&\f(CW\*(C`DBIx::Admin::CreateTable\*(C'\fR was written by Ron Savage \fI<ron@savage.net.au>\fR in 2006.
.PP
Home page: http://savage.net.au/index.html
.SH "Copyright"
.IX Header "Copyright"
.Vb 5
\&        Australian copyright (c) 2006,  Ron Savage.
\&        All Programs of mine are \*(AqOSI Certified Open Source Software\*(Aq;
\&        you can redistribute them and/or modify them under the terms of
\&        the Artistic or the GPL licences, copies of which is available at:
\&        http://www.opensource.org/licenses/index.html
.Ve
