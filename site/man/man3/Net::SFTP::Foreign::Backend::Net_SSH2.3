.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SFTP::Foreign::Backend::Net_SSH2 3"
.TH Net::SFTP::Foreign::Backend::Net_SSH2 3 "2020-08-30" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SFTP::Foreign::Backend::Net_SSH2 \- Run Net::SFTP::Foreign on top of Net::SSH2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::SFTP::Foreign;
\&
\&  my $sftp = Net::SFTP::Foreign\->new($host,
\&                                     backend => \*(AqNet_SSH2\*(Aq,
\&                                     username => $user,
\&                                     password => $pass);
\&  $sftp\->error and
\&    die "Unable to stablish SFTP connection: ". $sftp\->error;
\&
\&
\&  # or...
\&
\&  use Net::SSH2;
\&
\&  my $ssh2 = Net::SSH2\->new();
\&  $ssh2\->connect($host)
\&    or die "connect failed";
\&  $ssh2\->auth_password($user, $pass)
\&    or die "password auth failed";
\&  my $sftp = Net::SFTP::Foreign\->new(ssh2 => $ssh2,
\&                                     backend => \*(AqNet_SSH2\*(Aq);
\&  $sftp\->error and
\&    die "Unable to stablish SFTP connection: ". $sftp\->error;
\&
\&  $sftp\->get("foo", "foo") or die "get failed: " . $sftp\->error;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements a Net::SFTP::Foreign backend that uses
Net::SSH2 as the \s-1SSH\s0 transport layer.
.PP
To use it, include the argument \f(CW\*(C`backend => \*(AqNet_SSH2\*(Aq\*(C'\fR when
calling Net::SFTP::Foreign constructor.
.PP
The constructor will them accept the following options:
.ie n .IP "ssh2 => $ssh2" 4
.el .IP "ssh2 => \f(CW$ssh2\fR" 4
.IX Item "ssh2 => $ssh2"
A Net::SSH2 object already connected to the remote host and
authenticated.
.ie n .IP "host => $host" 4
.el .IP "host => \f(CW$host\fR" 4
.IX Item "host => $host"
.PD 0
.ie n .IP "hostname => $host" 4
.el .IP "hostname => \f(CW$host\fR" 4
.IX Item "hostname => $host"
.ie n .IP "port => $port" 4
.el .IP "port => \f(CW$port\fR" 4
.IX Item "port => $port"
.ie n .IP "user => $user" 4
.el .IP "user => \f(CW$user\fR" 4
.IX Item "user => $user"
.ie n .IP "username => $username" 4
.el .IP "username => \f(CW$username\fR" 4
.IX Item "username => $username"
.ie n .IP "rank => $rank" 4
.el .IP "rank => \f(CW$rank\fR" 4
.IX Item "rank => $rank"
.ie n .IP "password => $password" 4
.el .IP "password => \f(CW$password\fR" 4
.IX Item "password => $password"
.ie n .IP "publickey => $publickey_path" 4
.el .IP "publickey => \f(CW$publickey_path\fR" 4
.IX Item "publickey => $publickey_path"
.ie n .IP "key_path => $privatekey_path" 4
.el .IP "key_path => \f(CW$privatekey_path\fR" 4
.IX Item "key_path => $privatekey_path"
.ie n .IP "privatekey => $privatekey_path" 4
.el .IP "privatekey => \f(CW$privatekey_path\fR" 4
.IX Item "privatekey => $privatekey_path"
.ie n .IP "passphrase => $passphrase" 4
.el .IP "passphrase => \f(CW$passphrase\fR" 4
.IX Item "passphrase => $passphrase"
.ie n .IP "local_username => $local_username" 4
.el .IP "local_username => \f(CW$local_username\fR" 4
.IX Item "local_username => $local_username"
.ie n .IP "interact => $interact" 4
.el .IP "interact => \f(CW$interact\fR" 4
.IX Item "interact => $interact"
.ie n .IP "cb_keyboard => $cb_keyboard" 4
.el .IP "cb_keyboard => \f(CW$cb_keyboard\fR" 4
.IX Item "cb_keyboard => $cb_keyboard"
.ie n .IP "cb_password => $cb_password" 4
.el .IP "cb_password => \f(CW$cb_password\fR" 4
.IX Item "cb_password => $cb_password"
.PD
These options are passed to Net::SSH2 \f(CW\*(C`connect\*(C'\fR and \f(CW\*(C`auth\*(C'\fR
methods in order to stablish an \s-1SSH\s0 authenticated connection with the
remote host.
.SH "SUPPORT"
.IX Header "SUPPORT"
This backend is completely experimental!
.PP
To report bugs, send me and email or use the \s-1CPAN\s0 bug tracking system
at <http://rt.cpan.org>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::SFTP::Foreign and Net::SSH2 documentation.
.PP
Net::SSH2 contains its own \s-1SFTP\s0 client, Net::SSH2::SFTP, but it
is rather limited and its performance very poor.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2009\-2012, 2019\-2020 by Salvador Fandi√±o (sfandino@yahoo.com).
.PP
All rights reserved. This program is free software; you can
redistribute it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the \s-1LICENSE\s0 file included
as part of this package.
