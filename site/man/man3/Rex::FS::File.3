.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Rex::FS::File 3"
.TH Rex::FS::File 3 "2020-10-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rex::FS::File \- File Class
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the File Class used by \fIfile_write\fR and \fIfile_read\fR.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Rex::Interface::File;
\& my $fh = Rex::Interface::File\->create(\*(AqLocal\*(Aq);
\& $fh\->open( \*(Aq<\*(Aq, \*(Aqfilename\*(Aq );
\&
\& my $file = Rex::FS::File\->new(fh => $fh);
\& $file\->read($len);
\& $file\->read_all;
\& $file\->write($buf);
\& $file\->close;
.Ve
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "new"
.IX Subsection "new"
This is the constructor. You need to set the filehandle which the object should work on
or pass a filename. If you pass a filehandle, it has to be a \f(CW\*(C`Rex::Interface::File::*\*(C'\fR
object
.PP
.Vb 2
\& my $fh = Rex::Interface::File\->create(\*(AqLocal\*(Aq);
\& $fh\->open( \*(Aq<\*(Aq, \*(Aqfilename\*(Aq );
\& 
\& my $file = Rex::FS::File\->new(fh => $fh);
.Ve
.PP
Create a \f(CW\*(C`Rex::FS::File\*(C'\fR object with a filename
.PP
.Vb 6
\& # open a local file in read mode
\& my $file = Rex::FS::File\->new(
\&   filename => \*(Aqfilename\*(Aq,
\&   mode     => \*(Aqr\*(Aq, # or \*(Aq<\*(Aq
\&   type     => \*(AqLocal\*(Aq,
\& );
\& 
\& # or shorter
\& my $file = Rex::FS::File\->new( filename => \*(Aqfilename\*(Aq );
\& 
\& # open a local file in write mode
\& my $file = Rex::FS::File\->new(
\&   filename => \*(Aqfilename\*(Aq,
\&   mode     => \*(Aqw\*(Aq, # or \*(Aq>\*(Aq
\& );
.Ve
.PP
Allowed modes:
.PP
.Vb 6
\& <  read
\& r  read
\& >  write
\& w  write
\& >> append
\& a  append
.Ve
.PP
For allowed \f(CW\*(C`types\*(C'\fR see documentation of Rex::Interface::File.
.SS "write($buf)"
.IX Subsection "write($buf)"
Write \f(CW$buf\fR into the filehandle.
.PP
.Vb 1
\& $file\->write("Hello World");
.Ve
.SS "seek($offset)"
.IX Subsection "seek($offset)"
Seek to the file position \f(CW$offset\fR.
.PP
Set the file pointer to the 5th byte.
.PP
.Vb 1
\& $file\->seek(5);
.Ve
.SS "read($len)"
.IX Subsection "read($len)"
Read \f(CW$len\fR bytes out of the filehandle.
.PP
.Vb 1
\& my $content = $file\->read(1024);
.Ve
.SS "read_all"
.IX Subsection "read_all"
Read everything out of the filehandle.
.PP
.Vb 1
\& my $content = $file\->read_all;
.Ve
.SS "close"
.IX Subsection "close"
Close the file.
.PP
.Vb 1
\& $file\->close;
.Ve
