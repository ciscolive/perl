.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Search::Elasticsearch::CxnPool::Sniff 3"
.TH Search::Elasticsearch::CxnPool::Sniff 3 "2020-09-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Search::Elasticsearch::CxnPool::Sniff \- A CxnPool for connecting to a local cluster with a dynamic node list
.SH "VERSION"
.IX Header "VERSION"
version 7.30
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    $e = Search::Elasticsearch\->new(
\&        cxn_pool => \*(AqSniff\*(Aq,
\&        nodes    => [
\&            \*(Aqsearch1:9200\*(Aq,
\&            \*(Aqsearch2:9200\*(Aq
\&        ],
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Sniff connection pool should be used
when you \fBdo\fR have direct access to the Elasticsearch cluster, eg when
your web servers and Elasticsearch servers are on the same network.
The nodes that you specify are used to \fIdiscover\fR the cluster, which is
then \fIsniffed\fR to find the current list of live nodes that the cluster
knows about.
.PP
This sniff process is repeated regularly, or whenever a node fails,
to update the list of healthy nodes.  So if you add more nodes to your
cluster, they will be auto-discovered during a sniff.
.PP
If all sniffed nodes fail, then it falls back to sniffing the original
\&\fIseed\fR nodes that you specified in \f(CW\*(C`new()\*(C'\fR.
.PP
For \s-1HTTP\s0 Cxn classes, this module
will also dynamically detect the \f(CW\*(C`max_content_length\*(C'\fR which the nodes
in the cluster will accept.
.PP
This class does Search::Elasticsearch::Role::CxnPool::Sniff and
Search::Elasticsearch::Role::Is_Sync.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.ie n .SS """nodes"""
.el .SS "\f(CWnodes\fP"
.IX Subsection "nodes"
The list of nodes to use to discover the cluster.  Can accept a single node,
multiple nodes, and defaults to \f(CW\*(C`localhost:9200\*(C'\fR if no \f(CW\*(C`nodes\*(C'\fR are
specified. See \*(L"node\*(R" in Search::Elasticsearch::Role::Cxn for details of the node
specification.
.SS "See also"
.IX Subsection "See also"
.IP "\(bu" 4
\&\*(L"request_timeout\*(R" in Search::Elasticsearch::Role::Cxn
.IP "\(bu" 4
\&\*(L"sniff_timeout\*(R" in Search::Elasticsearch::Role::Cxn
.IP "\(bu" 4
\&\*(L"sniff_request_timeout\*(R" in Search::Elasticsearch::Role::Cxn
.SS "Inherited configuration"
.IX Subsection "Inherited configuration"
From Search::Elasticsearch::Role::CxnPool::Sniff
.IP "\(bu" 4
sniff_interval
.IP "\(bu" 4
sniff_max_content_length
.PP
From Search::Elasticsearch::Role::CxnPool
.IP "\(bu" 4
randomize_cxns
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """next_cxn()"""
.el .SS "\f(CWnext_cxn()\fP"
.IX Subsection "next_cxn()"
.Vb 1
\&    $cxn = $cxn_pool\->next_cxn
.Ve
.PP
Returns the next available live node (in round robin fashion), or
throws a \f(CW\*(C`NoNodes\*(C'\fR error if no nodes can be sniffed from the cluster.
.ie n .SS """schedule_check()"""
.el .SS "\f(CWschedule_check()\fP"
.IX Subsection "schedule_check()"
.Vb 1
\&    $cxn_pool\->schedule_check
.Ve
.PP
Forces a sniff before the next Cxn is returned, to updated the list of healthy
nodes in the cluster.
.ie n .SS """sniff()"""
.el .SS "\f(CWsniff()\fP"
.IX Subsection "sniff()"
.Vb 1
\&    $bool = $cxn_pool\->sniff
.Ve
.PP
Sniffs the cluster and returns \f(CW\*(C`true\*(C'\fR if the sniff was successful.
.SS "Inherited methods"
.IX Subsection "Inherited methods"
From Search::Elasticsearch::Role::CxnPool::Sniff
.IP "\(bu" 4
\&\fBschedule_check()\fR
.IP "\(bu" 4
\&\fBparse_sniff()\fR
.IP "\(bu" 4
\&\fBshould_accept_node()\fR
.PP
From Search::Elasticsearch::Role::CxnPool
.IP "\(bu" 4
\&\fBcxn_factory()\fR
.IP "\(bu" 4
\&\fBlogger()\fR
.IP "\(bu" 4
\&\fBserializer()\fR
.IP "\(bu" 4
\&\fBcurrent_cxn_num()\fR
.IP "\(bu" 4
\&\fBcxns()\fR
.IP "\(bu" 4
\&\fBseed_nodes()\fR
.IP "\(bu" 4
\&\fBnext_cxn_num()\fR
.IP "\(bu" 4
\&\fBset_cxns()\fR
.IP "\(bu" 4
\&\fBrequest_ok()\fR
.IP "\(bu" 4
\&\fBrequest_failed()\fR
.IP "\(bu" 4
\&\fBshould_retry()\fR
.IP "\(bu" 4
\&\fBshould_mark_dead()\fR
.IP "\(bu" 4
\&\fBcxns_str()\fR
.IP "\(bu" 4
\&\fBcxns_seeds_str()\fR
.IP "\(bu" 4
\&\fBretries()\fR
.IP "\(bu" 4
\&\fBreset_retries()\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Enrico Zimuel <enrico.zimuel@elastic.co>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Elasticsearch \s-1BV.\s0
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
