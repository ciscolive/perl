.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::KerberosKey 3"
.TH Infoblox::Grid::KerberosKey 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::KerberosKey \- Grid kerberos key object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object is used to manage kerberos keys for GSS-TSIG.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 6
\& #Constructor for an Grid KerberosKey object
\&  my $key = Infoblox::Grid::KerberosKey\->new(
\&     principal => $string,  #Required.
\&     domain    => $string,  #Optional / Default is undefined
\&     version   => $num,     #Optional / Default is undefined
\&   );
.Ve
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
The following functions are available to be applied to an KerberosKey object.
.SS "Infoblox::Grid::DNS\->gss_tsig_keys( )"
.IX Subsection "Infoblox::Grid::DNS->gss_tsig_keys( )"
.RS 4
Use this function to specify a Kerberos key at the grid level on the Infoblox appliance. See Infoblox::Grid::DNS\->\fBgss_tsig_keys()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Create a Kerberos object.
\& my $key = Infoblox::Grid::KerberosKey\->new(
\&                  principal => \*(Aqhost/appliance.ivan.test@LADYBUG.LOCAL\*(Aq,
\&                  domain => \*(AqJACKIE.LOCAL\*(Aq,
\&                  version => \*(Aq3\*(Aq,
\& );
\&
\& #Configure kerberos key on the Infoblox grid object
\& my $response = $grid\->gss_tsig_keys([$key]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::DHCP\->gss_tsig_keys( )"
.IX Subsection "Infoblox::Grid::DHCP->gss_tsig_keys( )"
.RS 4
Use this function to specify a Kerberos key at the grid level on the Infoblox appliance. See Infoblox::Grid::DHCP\->\fBgss_tsig_keys()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Create a Kerberos object.
\& my $key = Infoblox::Grid::KerberosKey\->new(
\&                  principal => \*(Aqhost/appliance.ivan.test@LADYBUG.LOCAL\*(Aq,
\&                  domain => \*(AqJACKIE.LOCAL\*(Aq,
\&                  version => \*(Aq3\*(Aq,
\&                );
\&
\& #Configure kerberos key on the Infoblox grid object
\& my $response = $grid\->gss_tsig_keys([$key]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member::DNS\->gss_tsig_keys( )"
.IX Subsection "Infoblox::Grid::Member::DNS->gss_tsig_keys( )"
.RS 4
Use this function to specify a Kerberos key at the member level on the Infoblox appliance. See Infoblox::Grid::Member::DNS\->\fBgss_tsig_keys()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Create a KerberosKey object.
\& my $key = Infoblox::Grid::KerberosKey\->new(
\&                  principal => \*(Aqhost/appliance.ivan.test@LADYBUG.LOCAL\*(Aq,
\&                  domain => \*(AqJACKIE.LOCAL\*(Aq,
\&                  version => \*(Aq3\*(Aq,
\& );
\&
\& #Configure KerberosKey on the Infoblox member object
\& my $response = $member\->gss_tsig_keys([$key]);
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member::DHCP\->gss_tsig_keys( )"
.IX Subsection "Infoblox::Grid::Member::DHCP->gss_tsig_keys( )"
.RS 4
Use this function to specify a Kerberos key at the member level on the Infoblox appliance. See Infoblox::Grid::Member::DHCP\->\fBgss_tsig_keys()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\&  #Create a KerberosKey object.
\& my $key = Infoblox::Grid::KerberosKey\->new(
\&                  principal => \*(Aqhost/appliance.ivan.test@LADYBUG.LOCAL\*(Aq,
\&                  domain => \*(AqJACKIE.LOCAL\*(Aq,
\&                  version => \*(Aq3\*(Aq,
\&                );
\&
\& #Configure KerberosKey on the Infoblox member object
\& my $response = $member\->gss_tsig_keys([$key]);
.Ve
.RE
.RS 4
.RE
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in an Infoblox::Session module that you can apply to a Kerberos key object.
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific Kerberos key object:
\&
\&  principal \- Required. The principal of the Kerberos key object you want to retrieve.
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 3
\& my @retrieved_objs = $session\->get(
\&     object    => "Infoblox::Grid::KerberosKey",
\&     principal => "my\-principal");
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove a Kerberos key object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific Kerberos key object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 8
\& # Get the objects with the same principal 
\& my @retrieved_objs = $session\->get(
\&     object    => "Infoblox::Grid::KerberosKey",
\&     principal => "my\-principal");
\& # Find the desired object from the retrieved list.
\& my $desired_kerberos_key = $retrieved_objs[0];
\& # Submit for removal
\& my $response = $session\->remove( $desired_kerberos_key );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for Kerberos key objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a Kerberos key object:
\&
\&  principal \- Required. The principal of the Kerberos key object you want to retrieve (regular expression is supported).
.Ve
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # search for all grid member objects
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::KerberosKey",
\&     principal => ".*");
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can used to configure and retrieve the attribute value of a KerberosKey object.
.SS "enctype( )"
.IX Subsection "enctype( )"
.RS 4
Use this method to retrieve the encryption type for the KerberosKey object. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get enctype value
\& my $enctype = $key\->enctype();
.Ve
.RE
.RS 4
.RE
.SS "domain( )"
.IX Subsection "domain( )"
.RS 4
Use this method to set or retrieve the domain of the KerberosKey object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired domain in string format with a maximum of 1023 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get domain
\& my $domain = $key\->domain();
\& #Modify domain
\& $key\->domain("my\-domain");
.Ve
.RE
.RS 4
.RE
.SS "in_use( )"
.IX Subsection "in_use( )"
.RS 4
Use this method to retrieve the flag used to indicate whether the key has been assigned to a member. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The return value is \*(L"true\*(R" if KerberosKey object has been assigned to a member and \*(L"false\*(R" if it hasn't.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get in_use value
\& my $in_use = $key\->in_use();
.Ve
.RE
.RS 4
.RE
.SS "principal( )"
.IX Subsection "principal( )"
.RS 4
Use this method to set or retrieve the principal string of the KerberosKey object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Desired principal in string format with a maximum of 1023 bytes.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get principal
\& my $string = $key\->principal();
\& #Modify principal
\& $key\->principal("my\-principal");
.Ve
.RE
.RS 4
.RE
.SS "version( )"
.IX Subsection "version( )"
.RS 4
Use this method to set or retrieve the version number of the KerberosKey object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Enter an unsigned integer between 0 and 4294967295.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get version
\& my $version = $key\->version();
\& #Modify version
\& $key\->version("5");
.Ve
.RE
.RS 4
.RE
.SS "upload_timestamp( )"
.IX Subsection "upload_timestamp( )"
.RS 4
Use this method to retrieve the timestamp when the KerberosKey object was uploaded. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The return value is the date and time in the \s-1ISO 8601\s0 extended format (e.g. 2008\-10\-21T10:56:33Z or 2008\-10\-21T10:56:33.001Z).
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& #Get upload_timestamp value
\& my $upload_timestamp = $key\->upload_timestamp();
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates different operations that can be applied to an object such as create, get, and remove an object. Also this sample code also includes error handling for the operations.
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\&  use strict;
\&  use Infoblox;
\&
\&  #Create a session to the Infoblox appliance
\&  my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\&  );
\&  unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\&  }
\&  print "Session created successfully\en";
.Ve
.PP
\&\fB#import kerberos key object\fR
.PP
.Vb 5
\& my $result = $session\->import_data(
\&     type       => "keytab",
\&     path       => "/infoblox/tests/datasets/dnsone.keytab",
\&     service => \*(Aqdhcp\*(Aq,
\&    );
\&
\& unless($result) {
\&        die("import kerberos key object failed: ",
\&             Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "import kerberos key object successfully\en";
.Ve
.PP
\&\fB#retrieve kerberos key object\fR
.PP
.Vb 4
\& my @keys = $session\->get(
\&    object    => "Infoblox::Grid::KerberosKey",
\&    principal => \*(Aqhost/appliance.ivan.test@LADYBUG.LOCAL\*(Aq,
\&  );
\&
\&  unless ($key) {
\&        die("Get KerberosKey object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\& print "Get KerberosKey object found at least 1 matching entry\en";
\&
\& my $grid_dhcp = $session\->get(
\&    object  => \*(AqInfoblox::Grid::DHCP\*(Aq,
\&    cluster => \*(AqInfoblox\*(Aq,
\&    );
\& unless ($grid_dhcp) {
\&        die("Get Grid DHCP object failed: ",
\&             $session\->status_code() . ":" . $session\->status_detail());
\& }
\&
\& $grid_dhcp\->gss_tsig_keys([$key]);
\& $grid_dhcp\->kdc_server(\*(Aqtest.com\*(Aq);
\&
\& #Applying the changes to appliance through session.
\& $session\->modify($grid_dhcp)
\&      or die("modify Grid DHCP properties failed:" ,
\&       $session\->status_code(), $session\->status_detail());
\& print "Grid DHCP properties modified successfully for assigning KerberosKey object\en";
.Ve
.PP
\&\fB#Removing an KerberosKey object\fR
.PP
.Vb 3
\& # remove the reference to kerberos key
\& $grid_dhcp\->gss_tsig_keys(undef);
\& $grid_dhcp\->kdc_server(undef);
\&
\& #Applying the changes to appliance through session.
\& $session\->modify($grid_dhcp)
\&      or die("modify Grid DHCP properties failed:" ,
\&       $session\->status_code(), $session\->status_detail());
\& print "Grid DHCP properties modified successfully for unassigning KerberosKey object\en";
\&
\& $session\->remove(object => \*(AqInfoblox::Grid::KerberosKey\*(Aq,
\&                  principal => \*(Aqhost/appliance.ivan.test@LADYBUG.LOCAL\*(Aq)
\&      or die("remove KerberosKey object failed:" ,
\&       $session\->status_code(), $session\->status_detail());
\& print "remove KerberosKey object successfully\en";
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Grid::DNS, Infoblox::Grid::DHCP, Infoblox::Grid::Member::DNS, Infoblox::Grid::Member::DHCP, Infoblox::Grid::DNS\->\fBgss_tsig_keys()\fR, Infoblox::Grid::DHCP\->\fBgss_tsig_keys()\fR, Infoblox::Grid::Member::DNS\->\fBgss_tsig_keys()\fR, Infoblox::Grid::Member::DHCP\->\fBgss_tsig_keys()\fR, Infoblox::Session\->\fBget()\fR, Infoblox::Session\->\fBmodify()\fR,Infoblox::Session\->\fBremove()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
