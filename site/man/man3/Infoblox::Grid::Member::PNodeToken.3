.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Member::PNodeToken 3"
.TH Infoblox::Grid::Member::PNodeToken 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Member::PNodeToken \- Physical Node Token object.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object is used as a permission token for a pre-provisioned member to automatically join the Grid.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
This object actually have no constructor, it is only returned by create_token and read_token function calls of Infoblox::Grid::Member class.
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to a License object.
.SS "Infoblox::Grid::Member\->physical_oid( )"
.IX Subsection "Infoblox::Grid::Member->physical_oid( )"
.RS 4
Use this method to retrieve the \s-1OID\s0 of the physical node for which the token is created.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value, which is an integer number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # get the physical_oid value for the token
\& $pnode_token_obj\->physical_oid()
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member\->token_exp_date( )"
.IX Subsection "Infoblox::Grid::Member->token_exp_date( )"
.RS 4
Use this method to retrieve the date and time when the token will expire. The value is presented as a Unix timestamp.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value, which is an integer number.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # get the token_exp_date value for the token
\& $pnode_token_obj\->token_exp_date()
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Grid::Member\->token( )"
.IX Subsection "Infoblox::Grid::Member->token( )"
.RS 4
Use this method to retrieve the value (in text string) of the physical node token.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value, which is a string.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\& # get the token value itself
\& $pnode_token_obj\->token()
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates how to create a token for the newly created pre-provisioned member.
.PP
.Vb 1
\&  #!/usr/bin/perl
\&
\&  use strict;
\&  use Infoblox;
\&
\&  # get session for all subsequent operations
\&  my $session = Infoblox::Session\->new(master => \*(Aqlocalhost\*(Aq, username => \*(Aqadmin\*(Aq, password => \*(Aqinfoblox\*(Aq);
\&
\&  # create an object for the Grid member
\&  my $grid_member = Infoblox::Grid::Member\->new(
\&       name                    => "hostname.com",
\&       ipv4addr                => "3.0.0.2",
\&       mask                    => "255.0.0.0",
\&       gateway                 => "3.0.0.1",
\&       platform                => "VNIOS",
\&  );
\&  # add member
\&  $session\->add($grid_member);
\&
\&  # create pre\-provisioning info objects
\&  my $hw = Infoblox::Grid::Member::PreProvisioning::Hardware\->new(
\&      hwtype          => \*(AqIB\-VNIOS\*(Aq,
\&      hwmodel         => \*(AqCP\-V1400\*(Aq,
\&  );
\&  my $pp = Infoblox::Grid::Member::PreProvisioning\->new(
\&      hardware_info   => [$hw],
\&      licenses        => [\*(Aqdns\*(Aq, \*(Aqdhcp\*(Aq],
\&  );
\&  $grid_member\->pre_provisioning($pp);
\&  # ...and add pre\-provisioning info to the Grid member
\&  $session\->modify($grid_member);
\&
\&  # Create tokens for the Grid member
\&  # (actually the only token, as the member is not a HA\-pair)
\&  my $tokens_ref = $grid_member\->create_token();
\&
\&  # Read all tokens for the grid member.
\&  # Actually, we can skip the read_token call,
\&  # as we already have tokens from previous
\&  # create_token call in this example
\&  # $tokens_ref = $grid_member\->read_token();
\&
\&  if (defined $tokens_ref) {
\&     my @tokens = @$tokens_ref;
\&     # Iterate through all tokens in the array and
\&     # print their values.
\&     for (my $i = 0; $i < scalar @tokens; $i++) {
\&        print "Token $i:\en";
\&        print "physical_oid: " . $tokens[$i]\->physical_oid(). "\en";
\&        print "token_exp_date: " . $tokens[$i]\->token_exp_date() . "\en";
\&        print "token: " . $tokens[$i]\->token() . "\en";
\&     }
\&  }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::Member
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
