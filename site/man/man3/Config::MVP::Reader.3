.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Config::MVP::Reader 3"
.TH Config::MVP::Reader 3 "2018-04-21" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Config::MVP::Reader \- object to read config from storage into an assembler
.SH "VERSION"
.IX Header "VERSION"
version 2.200011
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Config::MVP::Reader::YAML; # this doesn\*(Aqt really exist
\&
\&  my $reader   = Config::MVP::Reader::YAML\->new;
\&
\&  my $sequence = $reader\->read_config(\*(Aq/etc/foobar.yml\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Config::MVP::Reader exists to read configuration data from storage (like a
file) and convert that data into instructions to a Config::MVP::Assembler,
which will in turn convert them into a Config::MVP::Sequence, the final
product.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "add_cwd_to_lib"
.IX Subsection "add_cwd_to_lib"
If true (which it is by default) then the current working directly will be
locally added to \f(CW@INC\fR during config loading.  This helps deal with changes
made in Perl v5.26.1.
.SH "METHODS"
.IX Header "METHODS"
.SS "read_config"
.IX Subsection "read_config"
.Vb 1
\&  my $sequence = $reader\->read_config($location, \e%arg);
.Ve
.PP
This method is passed a location, which has no set meaning, but should be the
mechanism by which the Reader is told how to locate configuration.  It might be
a file name, a hashref of parameters, a \s-1DBH,\s0 or anything else, depending on the
needs of the specific Reader subclass.
.PP
It is also passed a hashref of arguments, of which there is only one valid
argument:
.PP
.Vb 1
\& assembler \- the Assembler object into which to read the config
.Ve
.PP
If no assembler argument is passed, one will be constructed by calling the
Reader's \f(CW\*(C`build_assembler\*(C'\fR method.
.PP
Subclasses should generally not override \f(CW\*(C`read_config\*(C'\fR, but should instead
implement a \f(CW\*(C`read_into_assembler\*(C'\fR method, described below.  If a subclass
\&\fIdoes\fR override \f(CW\*(C`read_config\*(C'\fR it should take care to respect the
\&\f(CW\*(C`add_cwd_to_lib\*(C'\fR attribute, above.
.SS "read_into_assembler"
.IX Subsection "read_into_assembler"
This method should not be called directly.  It is called by \f(CW\*(C`read_config\*(C'\fR with
the following parameters:
.PP
.Vb 1
\&  my $sequence = $reader\->read_into_assembler( $location, $assembler );
.Ve
.PP
The method should read the configuration found at \f(CW$location\fR and use it to
instruct the \f(CW$assembler\fR (a Config::MVP::Assembler) what configuration to
perform.
.PP
The default implementation of this method will throw an exception complaining
that it should have been implemented by a subclass.
.SS "build_assembler"
.IX Subsection "build_assembler"
If no Assembler is provided to \f(CW\*(C`read_config\*(C'\fR's \f(CW\*(C`assembler\*(C'\fR parameter, this
method will be called on the Reader to construct one.
.PP
It must return a Config::MVP::Assembler object, and by default will return an
entirely generic one.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo Signes <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2018 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
