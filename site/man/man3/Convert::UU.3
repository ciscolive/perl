.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Convert::UU 3"
.TH Convert::UU 3 "2008-03-02" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Convert::UU, uuencode, uudecode \- Perl module for uuencode and uudecode
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use Convert::UU qw(uudecode uuencode);
\&  $encoded_string = uuencode($string,[$filename],[$mode]);
\&  ($string,$filename,$mode) = uudecode($string);
\&  $string = uudecode($string); # in scalar context
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.IP "\(bu" 4
uuencode
.Sp
\&\fBuuencode()\fR takes as the first argument a string that is to be
uuencoded. Note, that it is the string that is encoded, not a
filename. Alternatively a filehandle may be passed that must be opened
for reading. It returns the uuencoded string including \f(CW\*(C`begin\*(C'\fR and
\&\f(CW\*(C`end\*(C'\fR. Second and third argument are optional and specify filename and
mode. If unspecified these default to \*(L"uuencode.uu\*(R" and 644.
.IP "\(bu" 4
uudecode
.Sp
\&\fBuudecode()\fR takes a string as argument which will be uudecoded. If the
argument is a filehandle this handle will be read instead. If it is a
reference to an \s-1ARRAY,\s0 the elements are treated like lines that form a
string. Leading and trailing garbage will be ignored. The function
returns the uudecoded string for the first begin/end pair. In array
context it returns an array whose first element is the uudecoded
string, the second is the filename and the third is the mode.
.SH "EXPORT"
.IX Header "EXPORT"
Both uudecode and uuencode are in \f(CW@EXPORT_OK\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andreas Koenig \f(CW\*(C`ANDK@cpan.org\*(C'\fR. With code integrated
that was posted to \s-1USENET\s0 from Hans Mulder and Randal L. Schwartz.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBpuuencode\fR\|(1), \fBpuudecode\fR\|(1) for examples of how to use this module.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1996\-2003 Andreas Koenig.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Based on code posted to comp.lang.perl by Hans Mulder and Randal L.
Schwartz.
