.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Workflow::Persister::DBI::ExtraData 3"
.TH Workflow::Persister::DBI::ExtraData 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Workflow::Persister::DBI::ExtraData \- Fetch extra data with each workflow and put it into the context
.SH "VERSION"
.IX Header "VERSION"
This documentation describes version 1.05 of this package
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\& <persister name="MyPersister"
\&            class="Workflow::Persister::DBI::ExtraData"
\&            dsn="DBI:mysql:database=workflows"
\&            user="wf"
\&            password="mypass"
\&            extra_table="workflow_ticket"
\&            extra_data_field="ticket_id"
\&            extra_context_key="ticket_id"/>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Overview"
.IX Subsection "Overview"
Simple subclass of Workflow::Persister::DBI to allow you to declare
an extra table and data field(s) from which to fetch data whenever you
fetch a workflow. There is a simple restriction: the table must have a
field 'workflow_id' of the same datatype as the 'workflow_id' field in
the 'workflow' table.
.SS "Examples"
.IX Subsection "Examples"
.Vb 2
\& # Specify a single field \*(Aqticket_id\*(Aq from the table \*(Aqworkflow_ticket\*(Aq
\& # and store it in the context using the same key:
\&
\& <persister
\&     ...
\&     extra_table="workflow_ticket"
\&     extra_data_field="ticket_id"
\&     ...
\&
\& # How you would use this:
\& my $wf = FACTORY\->fetch_workflow( \*(AqTicket\*(Aq, 55 );
\& print "Workflow is associated with ticket: ",
\&       $wf\->context\->param( \*(Aqticket_id\*(Aq );
\&
\& # Specify a single field \*(Aqticket_id\*(Aq from the table \*(Aqworkflow_ticket\*(Aq
\& # and store it in the context using a different key
\&
\& <persister
\&     ...
\&     extra_table="workflow_ticket"
\&     extra_data_field="ticket_id"
\&     extra_context_key="THE_TICKET_ID"
\&     ...
\&
\& # How you would use this:
\& my $wf = FACTORY\->fetch_workflow( \*(AqTicket\*(Aq, 55 );
\& print "Workflow is associated with ticket: ",
\&       $wf\->context\->param( \*(AqTHE_TICKET_ID\*(Aq );
\&
\& # Specify multiple fields (\*(Aqticket_id\*(Aq, \*(Aqlast_viewer\*(Aq,
\& # \*(Aqlast_view_date\*(Aq) to pull from the \*(Aqworkflow_ticket\*(Aq table:
\&
\& <persister
\&     ...
\&     extra_table="workflow_ticket"
\&     extra_data_field="ticket_id,last_viewer,last_view_date"
\&     ...
\&
\& # How you would use this:
\& my $wf = FACTORY\->fetch_workflow( \*(AqTicket\*(Aq, 55 );
\& print "Workflow is associated with ticket: ",
\&       $wf\->context\->param( \*(Aqticket_id\*(Aq ), " ",
\&       "which was last viewed by ",
\&       $wf\->context\->param( \*(Aqlast_viewer\*(Aq ), " on ",
\&       $wf\->context\->param( \*(Aqlast_view_date\*(Aq );
.Ve
.SS "Configuration"
.IX Subsection "Configuration"
\&\fBextra_table\fR (required)
.PP
Table where the extra data are kept.
.PP
\&\fBextra_data_field\fR (required)
.PP
Can be a single field or a comma-separated list of fields, all in the
same table. If a single field specified you have the option of
declaring a different \f(CW\*(C`extra_context_key\*(C'\fR under which the value
should be stored in the workflow context. Otherwise the values are
stored by the field names in the workflow context.
.PP
\&\fBextra_context_key\fR (optional)
.PP
Key under which to save the data from \f(CW\*(C`extra_data_field\*(C'\fR in the
workflow context.
.PP
Note: this is ignored when you specify multiple fields in
\&\f(CW\*(C`extra_data_field\*(C'\fR; we just use the fieldnames for the context keys
in that case. And if you specify a single data field and do not
specify a context key we also use the data field name.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
\fIinit ( \e%params )\fR
.IX Subsection "init ( %params )"
.PP
Initializes persister for extra workflow data.
.PP
Throws Workflow::Exception if initialization is not successful.
.PP
\fIfetch_extra_workflow_data ( \f(CI$wf\fI )\fR
.IX Subsection "fetch_extra_workflow_data ( $wf )"
.PP
Fetches extra data from database and feeds this to context of given workflow.
.PP
Takes a single parameter, a workflow object to which extra data are feed if
retrieved successfully.
.PP
Throws Workflow::Exception if retrieval is not successful.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2007 Chris Winters. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonas B. Nielsen (jonasbn) <jonasbn@cpan.org> is the current maintainer.
.PP
Chris Winters <chris@cwinters.com>, original author.
