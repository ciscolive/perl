.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::Filename 3"
.TH Test::Filename 3 "2013-01-31" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Filename \- Portable filename comparison
.SH "VERSION"
.IX Header "VERSION"
version 0.03
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Test::Filename tests => 2;
\&  
\&  filename_is  ( "some\epath", "some/path", "should pass" );
\&  filename_isnt( "some\epath", "some/path", "should fail" );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Many cross-platform test failures \*(-- particularly on Win32 \*(-- are due to
hard-coded file paths being used in comparison tests.
.PP
.Vb 2
\&  my $file = get_file();     # returns "foo\ebar.t";
\&  is( $file, "foo/bar.t" );  # fails on Win32
.Ve
.PP
This simple module provides some handy functions to convert all those
path separators automatically so filename tests will just \s-1DWIM.\s0
.PP
The alternative is to write your own utility subroutine and use it everywhere
or just keep on littering your test code with calls to File::Spec \*(-- yuck!
.PP
.Vb 1
\&  is( $file, File::Spec\->canonpath("some/path"), "should pass" );
.Ve
.PP
Since this module is so simple, you might not think it worth including as a
dependency.  After all, it's not \fIthat\fR hard to always remember to use
File::Spec, Path::Tiny or some other file utility, right? But odds are
that, at some point, you'll be so busy writing tests that you'll forget and
hard-code a path in your haste to show what a clever programmer you are.
.PP
So just use this module and stop worrying about it.  You'll be happier
and so will anyone trying to install your modules on Win32.
.SH "USAGE"
.IX Header "USAGE"
Just like Test::More, you have the option of providing a test plan
as arguments when you use this module. The following functions are 
imported by default.
.SS "filename_is =head2 filename_isnt"
.IX Subsection "filename_is =head2 filename_isnt"
.Vb 2
\&    filename_is  ( $got, $expected, $label );
\&    filename_isnt( $got, $expected, $label );
.Ve
.PP
These functions work just like \f(CW\*(C`is()\*(C'\fR and \f(CW\*(C`isnt()\*(C'\fR from Test::More, but
the first two argument will be cleaned up and normalized to Unix-style
paths using Path::Tiny.  This means that \f(CW\*(C`.\efoo.txt\*(C'\fR will get normalized
to \f(CW\*(C`foo.txt\*(C'\fR and so on.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
perlport
.IP "\(bu" 4
File::Spec
.IP "\(bu" 4
Path::Tiny
.IP "\(bu" 4
Test::More
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker
at <https://github.com/dagolden/test\-filename/issues>.
You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software.  The code repository is available for
public review and contribution under the terms of the license.
.PP
<https://github.com/dagolden/test\-filename>
.PP
.Vb 1
\&  git clone git://github.com/dagolden/test\-filename.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
David A. Golden <dagolden@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2007 by David A. Golden.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
