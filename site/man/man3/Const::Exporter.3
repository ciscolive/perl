.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Const::Exporter 3"
.TH Const::Exporter 3 "2020-09-10" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Const::Exporter \- Declare constants for export.
.SH "VERSION"
.IX Header "VERSION"
version v0.4.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Define a constants module:
.PP
.Vb 1
\&  package MyApp::Constants;
\&
\&  our $zoo => 1234;
\&
\&  use Const::Exporter
\&
\&     tag_a => [                  # use MyApp::Constants /:tag_a/;
\&        \*(Aqfoo\*(Aq  => 1,             # exports "foo"
\&        \*(Aq$bar\*(Aq => 2,             # exports "$bar"
\&        \*(Aq@baz\*(Aq => [qw/ a b c /], # exports "@baz"
\&        \*(Aq%bo\*(Aq  => { a => 1 },    # exports "%bo"
\&     ],
\&
\&     tag_b => [                  # use MyApp::Constants /:tag_b/;
\&        \*(Aqfoo\*(Aq,                   # exports "foo" (same as from ":tag_a")
\&        \*(Aq$zoo\*(Aq,                  # exports "$zoo" (as defined above)
\&     ];
\&
\&  # \`use Const::Exporter\` can be specified multiple times
\&
\&  use Const::Exporter
\&
\&     tag_b => [                 # we can add symbols to ":tab_b"
\&        \*(Aqmoo\*(Aq => $bar,          # exports "moo" (same value as "$bar")
\&     ],
\&
\&     enums => [
\&
\&       [qw/ goo gab gub /] => 0, # exports enumerated symbols, from 0..2
\&
\&     ],
\&
\&     default => [qw/ foo $bar /]; # exported by default
.Ve
.PP
and use that module:
.PP
.Vb 1
\&  package MyApp;
\&
\&  use MyApp::Constants qw/ $zoo :tag_a /;
\&
\&  ...
.Ve
.SS "Dynamically Creating Constants"
.IX Subsection "Dynamically Creating Constants"
You may also import a predefined hash of constants for exporting dynamically:
.PP
.Vb 1
\& use Const::Exporter;
\&
\& my %myconstants = (
\&        \*(Aqfoo\*(Aq  => 1,
\&        \*(Aq$bar\*(Aq => 2,
\&        \*(Aq@baz\*(Aq => [qw/ a b c /],
\&        \*(Aq%bo\*(Aq  => { a => 1 },
\& );
\&
\& # ... do stuff
\&
\& Const::Exporter\->import(
\&      constants => [%myconstants],        # define constants for exporting
\&      default   => [ keys %myconstants ], # export everything in %myconstants by default
\& );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module allows you to declare constants that can be exported to
other modules.
.PP
To declare constants, simply group then into export tags:
.PP
.Vb 1
\&  package MyApp::Constants;
\&
\&  use Const::Exporter
\&
\&    tag_a => [
\&       \*(Aqfoo\*(Aq => 1,
\&       \*(Aqbar\*(Aq => 2,
\&    ],
\&
\&    tag_b => [
\&       \*(Aqbaz\*(Aq => 3,
\&       \*(Aqbar\*(Aq,
\&    ],
\&
\&    default => [
\&       \*(Aqfoo\*(Aq,
\&    ];
.Ve
.PP
Constants in the \f(CW\*(C`default\*(C'\fR tag are exported by default (that is, they
are added to the \f(CW@EXPORTS\fR array).
.PP
When a constant is already defined in a previous tag, then no value is
specified for it. (For example, \f(CW\*(C`bar\*(C'\fR in \f(CW\*(C`tab_b\*(C'\fR above.)  If you do
give a value, Const::Exporter will assume it's another symbol.
.PP
Your module can include multiple calls to \f(CW\*(C`use Const::Exporter\*(C'\fR, so
that you can reference constants in other expressions, e.g.
.PP
.Vb 1
\&  use Const::Exporter
\&
\&    tag => [
\&        \*(Aq$zero\*(Aq => 0,
\&    ];
\&
\&  use Const::Exporter
\&
\&    tag => [
\&        \*(Aq$one\*(Aq => 1 + $zero,
\&    ];
.Ve
.PP
or even something more complex:
.PP
.Vb 1
\&  use Const::Exporter
\&
\&     http_ports => [
\&        \*(AqHTTP\*(Aq     => 80,
\&        \*(AqHTTP_ALT\*(Aq => 8080,
\&        \*(AqHTTPS\*(Aq    => 443,
\&     ];
\&
\&  use Const::Exporter
\&
\&     http_ports => [
\&        \*(Aq@HTTP_PORTS\*(Aq => [ HTTP, HTTP_ALT, HTTPS ],
\&     ];
.Ve
.PP
Constants can include traditional constant symbols, as well as
scalars, arrays or hashes.
.PP
Constants can include values defined elsewhere in the code, e.g.
.PP
.Vb 1
\&  our $foo;
\&
\&  BEGIN {
\&     $foo = calculate_value_for_constant();
\&  }
\&
\&  use Const::Exporter
\&
\&    tag => [ \*(Aq$foo\*(Aq ];
.Ve
.PP
Note that this will make the symbol read-only. You don't need to
explicitly declare it as such.
.PP
Enumerated constants are also supported:
.PP
.Vb 1
\&  use Const::Exporter
\&
\&    tag => [
\&
\&      [qw/ foo bar baz /] => 1,
\&
\&    ];
.Ve
.PP
will define the symbols \f(CW\*(C`foo\*(C'\fR (1), \f(CW\*(C`bar\*(C'\fR (2) and \f(CW\*(C`baz\*(C'\fR (3).
.PP
You can also specify a list of numbers, if you want to skip values:
.PP
.Vb 1
\&  use Const::Exporter
\&
\&    tag => [
\&
\&      [qw/ foo bar baz /] => [1, 4],
\&
\&    ];
.Ve
.PP
will define the symbols \f(CW\*(C`foo\*(C'\fR (1), \f(CW\*(C`bar\*(C'\fR (4) and \f(CW\*(C`baz\*(C'\fR (5).
.PP
You can even specify string values:
.PP
.Vb 1
\&  use Const::Exporter
\&
\&    tag => [
\&
\&      [qw/ foo bar baz /] => [qw/ feh meh neh /],
\&
\&    ];
.Ve
.PP
however, this is equivalent to
.PP
.Vb 1
\&  use Const::Exporter
\&
\&    tag => [
\&      \*(Aqfoo\*(Aq => \*(Aqfeh\*(Aq,
\&      \*(Aqbar\*(Aq => \*(Aqmeh\*(Aq,
\&      \*(Aqbaz\*(Aq => \*(Aqneh\*(Aq,
\&    ];
.Ve
.PP
Objects are also supported,
.PP
.Vb 1
\&   use Const::Exporter
\&
\&    tag => [
\&      \*(Aq$foo\*(Aq => Something\->new( 123 ),
\&    ];
.Ve
.SS "Mixing \s-1POD\s0 with Tags"
.IX Subsection "Mixing POD with Tags"
The following code is a syntax error, at least with some versions of
Perl:
.PP
.Vb 1
\&  use Const::Exporter
\&
\&  =head2 a
\&
\&  =cut
\&
\&    a => [ foo => 1 ],
\&
\&  =head2 b
\&
\&  =cut
\&
\&    b => [ bar => 2 ];
.Ve
.PP
If you want to mix \s-1POD\s0 with your declarations, use multiple use lines,
e.g.
.PP
.Vb 1
\&  =head2 a
\&
\&  =cut
\&
\&  use Const::Exporter
\&    a => [ foo => 1 ];
\&
\&  =head2 b
\&
\&  =cut
\&
\&  use Const::Exporter
\&    b => [ bar => 2 ];
.Ve
.SS "Export Tags"
.IX Subsection "Export Tags"
By default, all symbols are exportable (in \f(CW@EXPORT_OK\fR.)
.PP
The \f(CW\*(C`:default\*(C'\fR tag is the same as not specifying any exports.
.PP
The \f(CW\*(C`:all\*(C'\fR tag exports all symbols.
.SH "KNOWN ISSUES"
.IX Header "KNOWN ISSUES"
.SS "Support for older Perl versions"
.IX Subsection "Support for older Perl versions"
This module requires Perl v5.10 or newer.
.PP
Pull requests to support older versions of Perl are welcome. See
\&\*(L"\s-1SOURCE\*(R"\s0.
.SS "Exporting Functions"
.IX Subsection "Exporting Functions"
Const::Exporter is not intended for use with modules that also
export functions.
.PP
There are workarounds that you can use, such as getting
Const::Exporter to export your functions, or munging \f(CW@EXPORT\fR
etc. separately, but these are not supported and changes in the
future my break our code.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See Exporter for a discussion of export tags.
.SS "Similar Modules"
.IX Subsection "Similar Modules"
.IP "Exporter::Constants" 4
.IX Item "Exporter::Constants"
This module only allows you to declare function symbol constants, akin
to the constant module, without tags.
.IP "Constant::Exporter" 4
.IX Item "Constant::Exporter"
This module only allows you to declare function symbol constants, akin
to the constant module, although you can specify tags.
.IP "Constant::Export::Lazy" 4
.IX Item "Constant::Export::Lazy"
This module only allows you to declare function symbol constants, akin
to the constant module by defining functions that are only called
as needed.  The interface is rather complex.
.IP "Const::Fast::Exporter" 4
.IX Item "Const::Fast::Exporter"
This module will export all constants declared in the package's
namespace.
.SH "SOURCE"
.IX Header "SOURCE"
The development version is on github at <https://github.com/robrwo/Const\-Exporter>
and may be cloned from <git://github.com/robrwo/Const\-Exporter.git>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
<https://github.com/robrwo/Const\-Exporter/issues>
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert Rothenberg <rrwo@cpan.org>
.SH "CONTRIBUTOR"
.IX Header "CONTRIBUTOR"
B. Estrade <estrabd@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2014\-2020 by Robert Rothenberg.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
