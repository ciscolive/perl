.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Selenium::PhantomJS 3"
.TH Selenium::PhantomJS 3 "2020-10-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Selenium::PhantomJS \- Use GhostDriver without a Selenium server
.SH "VERSION"
.IX Header "VERSION"
version 1.38
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    my $driver = Selenium::PhantomJS\->new;
\&    # when you\*(Aqre done
\&    $driver\->shutdown_binary;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class allows you to use PhantomJS via Ghostdriver without needing
the \s-1JRE\s0 or a selenium server running. When you refrain from passing
the \f(CW\*(C`remote_server_addr\*(C'\fR and \f(CW\*(C`port\*(C'\fR arguments, we will search for
the phantomjs executable binary in your \f(CW$PATH\fR. We'll try to start the
binary connect to it, shutting it down at the end of the test.
.PP
If the binary is not found, we'll fall back to the default
Selenium::Remote::Driver behavior of assuming defaults of
127.0.0.1:4444 after waiting a few seconds.
.PP
If you specify a remote server address, or a port, we'll assume you
know what you're doing and take no additional behavior.
.PP
If you're curious whether your Selenium::PhantomJS instance is using a
separate PhantomJS binary, or through the selenium server, you can check
the \f(CW\*(C`binary_mode\*(C'\fR attr after instantiation.
.PP
.Vb 2
\&    my $driver = Selenium::PhantomJS\->new;
\&    print $driver\->binary_mode;
.Ve
.PP
N.B. \- if you're using Windows and you installed \f(CW\*(C`phantomjs\*(C'\fR via
\&\f(CW\*(C`npm install \-g phantomjs\*(C'\fR, there is a very high probability that we
will _not_ close down your phantomjs binary correctly after your
test. You will be able to tell if we leave around empty command
windows that you didn't start yourself. The easiest way to fix this is
to download PhantomJS manually from their
website <http://phantomjs.org/download.html> and put it in your
\&\f(CW\*(C`%PATH%\*(C'\fR. If this is a blocking issue for you, let us know in
Github <https://github.com/gempesaw/Selenium-Remote-Driver>; thanks!
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "binary"
.IX Subsection "binary"
Optional: specify the path to your binary. If you don't specify
anything, we'll try to find it on our own via \*(L"which\*(R" in File::Which.
.SS "binary_port"
.IX Subsection "binary_port"
Optional: specify the port that we should bind to. If you don't
specify anything, we'll default to the driver's default port. Since
there's no a priori guarantee that this will be an open port, this is
_not_ necessarily the port that we end up using \- if the port here is
already bound, we'll search above it until we find an open one.
.PP
See \*(L"port\*(R" in Selenium::CanStartBinary for more details, and
\&\*(L"port\*(R" in Selenium::Remote::Driver after instantiation to see what the
actual port turned out to be.
.SS "custom_args"
.IX Subsection "custom_args"
Optional: specify any additional command line arguments you'd like
invoked during the binary startup. See
\&\*(L"custom_args\*(R" in Selenium::CanStartBinary for more information.
.SS "startup_timeout"
.IX Subsection "startup_timeout"
Optional: specify how long to wait for the binary to start itself and
listen on its port. The default duration is arbitrarily 10 seconds. It
accepts an integer number of seconds to wait: the following will wait
up to 20 seconds:
.PP
.Vb 1
\&    Selenium::PhantomJS\->new( startup_timeout => 20 );
.Ve
.PP
See \*(L"startup_timeout\*(R" in Selenium::CanStartBinary for more information.
.SH "METHODS"
.IX Header "METHODS"
.SS "shutdown_binary"
.IX Subsection "shutdown_binary"
Call this method instead of \*(L"quit\*(R" in Selenium::Remote::Driver to ensure
that the binary executable is also closed, instead of simply closing
the browser itself. If the browser is still around, it will call
\&\f(CW\*(C`quit\*(C'\fR for you. After that, it will try to shutdown the browser
binary by making a \s-1GET\s0 to /shutdown and on Windows, it will attempt to
do a \f(CW\*(C`taskkill\*(C'\fR on the binary \s-1CMD\s0 window.
.PP
.Vb 1
\&    $self\->shutdown_binary;
.Ve
.PP
It doesn't take any arguments, and it doesn't return anything.
.PP
We do our best to call this when the \f(CW$driver\fR option goes out of
scope, but if that happens during global destruction, there's nothing
we can do.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see those modules/websites for more information related to this module.
.IP "\(bu" 4
Selenium::Remote::Driver
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
<https://github.com/teodesian/Selenium\-Remote\-Driver/issues>
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH "AUTHORS"
.IX Header "AUTHORS"
Current Maintainers:
.IP "\(bu" 4
Daniel Gempesaw <gempesaw@gmail.com>
.IP "\(bu" 4
Emmanuel Peroumalna√Øk <peroumalnaik.emmanuel@gmail.com>
.PP
Previous maintainers:
.IP "\(bu" 4
Luke Closs <cpan@5thplane.com>
.IP "\(bu" 4
Mark Stosberg <mark@stosberg.com>
.PP
Original authors:
.IP "\(bu" 4
Aditya Ivaturi <ivaturi@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2010\-2011 Aditya Ivaturi, Gordon Child
.PP
Copyright (c) 2014\-2017 Daniel Gempesaw
.PP
Licensed under the Apache License, Version 2.0 (the \*(L"License\*(R");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
.PP
http://www.apache.org/licenses/LICENSE\-2.0
.PP
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \*(L"\s-1AS IS\*(R" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\s0 either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
