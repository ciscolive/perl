.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::DNS::Nsgroup 3"
.TH Infoblox::Grid::DNS::Nsgroup 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::DNS::Nsgroup \- Creates a name server group.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A name server group is a collection of one and more primary \s-1DNS\s0 servers and one or more secondary \s-1DNS\s0 servers. Grouping a commonly used set of primary and secondary \s-1DNS\s0 servers together simplifies zone creation, allowing you to specify a single name server group instead of specifying multiple name servers individually.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 9
\& my $nsg1 = Infoblox::Grid::DNS::Nsgroup\->new(
\&     name        => $string,                                                                      #Required
\&     comment     => $string,                                                                      #Optional
\&     extattrs              => { $string => $extattr, ... },                                       #Optional / Default is undefined
\&     extensible_attributes => { $string => $string|$num, $string => [ $string|$num, ...], ... },  #Optional / Default is undefined
\&     is_multimaster      => "true" | "false",                                                     #Optional / Default is "false"
\&     multiple_primaries  => [$Member1, ...] | [$Nameserver1, ...] | [$MSServer1, ...],            #Optional / Default is undefined
\&     secondaries         => [$Member1, $Member2, $Nameserver1, $Nameserver2, ...]                 #Optional / List of Infoblox::DNS::Member object(s) and/or Infoblox::DNS::Nameserver object(s).
\& );
.Ve
.PP
You cannot set both extattrs and extensible_attributes attributes at the same time.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
This section describes all the methods in the Infoblox::Session module that you can apply to an Nsgroup object.
.SS "Infoblox::Session\->add( )"
.IX Subsection "Infoblox::Session->add( )"
.RS 4
Use this method to add an object to the Infoblox appliance. See Infoblox::Session\->\fBadd()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 6
\& #Creating Member objects.
\& my $member1 = Infoblox::DNS::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => "192.168.1.2",
\&     stealth  => "false"
\&     );
\&
\& my $member2 = Infoblox::DNS::Member\->new(
\&     name     => "member2.test.com",
\&     ipv4addr => "2.2.2.2",
\&     stealth  => "false"
\&     );
\&
\& #Creating a nameserver object.
\& my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns1.test.extra",
\&     ipv4addr => "4.4.4.4",
\&     stealth  => "false",
\&     TSIGname => "tsig_name",
\&     TSIGkey  => "ZX1jVJl7C58GT/sc7Q3ucA=="
\&     );
\&
\& #Creating a nameserver object.
\& my $nameserver2 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns2.test.extra",
\&     ipv4addr => "5.5.5.5",
\&     stealth  => "false",
\&     TSIGname => "tsig_name2",
\&     TSIGkey  => "qwqwqwqwqwqwqwqwqwqwqA=="
\&     );
\&
\& #Creating a nameserver object.
\& my $nameserver3 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns3.test.extra",
\&     ipv6addr => "12ab::34a",
\&     stealth  => "false",
\&     TSIGname => "tsig_name2",
\&     TSIGkey  => "qwqwqwqwqwqwqwqwqwqwqA=="
\&     );
\&
\& #Construct an object
\& my $nsg1 = Infoblox::Grid::DNS::Nsgroup\->new(
\&     name        => "ns_group_A",
\&     multiple_primaries => [$member1],
\&     secondaries => [$member2, $nameserver1, $nameserver2, $nameserver3]
\&     );
\&
\& #Submit for addition
\& my $response = $session\->add( $nsg1 );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->get( )"
.IX Subsection "Infoblox::Session->get( )"
.RS 4
Use this method to retrieve all the matching objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to get a specific Nsgroup object:
\&
\&  name \- Required. A name server group name in string format.
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 4
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::DNS::Nsgroup",
\&     name   => "ns_group_A",
\&     );
\&
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::DNS::Nsgroup",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->modify( )"
.IX Subsection "Infoblox::Session->modify( )"
.RS 4
Use this method to modify an object in the Infoblox appliance. See Infoblox::Session\->\fBmodify()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Use this method to modify the comment.
\& $nsg1\->comment("this is a modified comment");
\& #Submit modification
\& my $response = $session\->modify( $nsg1 );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->remove( )"
.IX Subsection "Infoblox::Session->remove( )"
.RS 4
Use this method to remove an object from the Infoblox appliance. See Infoblox::Session\->\fBremove()\fR for parameters and return values.
.Sp
To remove a specific object, first use \fBget()\fR or \fBsearch()\fR to retrieve the specific object, and then submit this object for removal.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 9
\& #Get the objects with the same name
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::DNS::Nsgroup",
\&     name   => "ns_group_A",
\&      );
\& #Find the desired object from the retrieved list.
\& my $desired_nsgroup= $retrieved_objs[0];
\& #Submit for removal
\& my $response = $session\->remove( $desired_nsgroup );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->search( )"
.IX Subsection "Infoblox::Session->search( )"
.RS 4
Use this method to search for Nsgroup objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for an Nsgroup object:
\&
\&  name \- Required. A host name in string format (regular expression).
\&  extattrs     \- Optional. A hash reference containing extensible attributes.
\&  extensible_attributes \- Optional. A hash reference containing extensible attributes.
.Ve
.Sp
For more information about searching extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Searching Extensible Attributes.
.IP "\fBExamples\fR" 4
.IX Item "Examples"
.Vb 5
\& # Search for all Nsgroup objects
\& my @retrieved_objs = $session\->search(
\&     object => "Infoblox::Grid::DNS::Nsgroup",
\&     name   => ".*",
\&     );
\&
\& # search for all Nsgroup objects with "Santa Clara" as the value for the "Site" extensible attribute
\& my @retrieved_objs = $session\->get(
\&     object => "Infoblox::Grid::DNS::Nsgroup",
\&     extensible_attributes => { \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq });
.Ve
.RE
.RS 4
.RE
.SH "MODULE METHODS"
.IX Header "MODULE METHODS"
This section describes all the methods that you can appy to an Nsgroup object.
.SS "Infoblox::Grid::DNS\->nsgroups( )"
.IX Subsection "Infoblox::Grid::DNS->nsgroups( )"
.RS 4
Use this function to specify a name server group at the grid level on the Infoblox appliance. See Infoblox::Grid::DNS\->\fBnsgroups()\fR for parameters and return values.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& #Creating Member objects.
\&
\& my $member1 = Infoblox::DNS::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => "192.168.1.2",
\&     stealth  => "false"
\&     );
\&
\& my $member2 = Infoblox::DNS::Member\->new(
\&     name     => "member2.test.com",
\&     ipv4addr => "2.2.2.2",
\&     stealth  => "false"
\&     );
\&
\& #Creating a nameserver object.
\& my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns1.test.extra",
\&     ipv4addr => "4.4.4.4",
\&     stealth  => "false",
\&     TSIGname => "tsig_name",
\&     TSIGkey  => "ZX1jVJl7C58GT/sc7Q3ucA=="
\&     );
\&
\& #Creating a nameserver object.
\& my $nameserver2 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns2.test.extra",
\&     ipv4addr => "5.5.5.5",
\&     stealth  => "false",
\&     TSIGname => "tsig_name2",
\&     TSIGkey  => "qwqwqwqwqwqwqwqwqwqwqA=="
\&     );
\&
\& #Creating a nameserver object.
\& my $nameserver3 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns3.test.extra",
\&     ipv6addr => "12ab::34a",
\&     stealth  => "false",
\&     TSIGname => "tsig_name2",
\&     TSIGkey  => "qwqwqwqwqwqwqwqwqwqwqA=="
\&     );
\&
\& my $nsg1 = Infoblox::Grid::DNS::Nsgroup\->new(
\&     name        => "ns_group_A",
\&     multiple_primaries => [$member1],
\&     secondaries => [$member2, $nameserver1, $nameserver2,$nameserver3]
\&     );
\&
\& my @result_array = $session\->get( "object" => "Infoblox::Grid::DNS" ,  "grid" => "Infoblox" );
\&
\&  my $dns = $result_array[0];
\&  $dns\->nsgroups([$nsg1]);
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that you can use to configure and retrieve the attribute values of an Nsgroup object
.SS "name( )"
.IX Subsection "name( )"
.RS 4
Use this method to set or retrieve the name server group, providing a meaningful reference for the set of servers.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Name of the nameserver group in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\&  #Getting name
\& my $name = $nsg1\->name();
\& #Modifying name
\& $nsg1\->name("ns_group_2");
.Ve
.RE
.RS 4
.RE
.SS "comment( )"
.IX Subsection "comment( )"
.RS 4
Use this method to set or retrieve the comment field of the Nsgroup object. You can enter additional information
about the \s-1NS\s0 group in this field.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Comment of the nameserver group in string format.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Getting comment
\& my $comment = $nsg1\->comment();
\& #Modifying comment
\& $nsg1\->comment("Some comment");
.Ve
.RE
.RS 4
.RE
.SS "extensible_attributes( )"
.IX Subsection "extensible_attributes( )"
.RS 4
Use this method to set or retrieve the extensible attributes associated with an Nsgroup object.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
For valid values for extensible attributes, see Infoblox::Grid::ExtensibleAttributeDef/Extensible Attribute Values.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& #Get extensible attributes
\& my $ref_extensible_attributes = $nsg1\->extensible_attributes();
\& #Modify extensible attributes
\& $nsg1\->extensible_attributes({ \*(AqSite\*(Aq => \*(AqSanta Clara\*(Aq, \*(AqAdministrator\*(Aq => [ \*(AqPeter\*(Aq, \*(AqTom\*(Aq ] });
.Ve
.RE
.RS 4
.RE
.SS "is_multimaster( )"
.IX Subsection "is_multimaster( )"
.RS 4
Use this method to set or retrieve the is_multimaster flag.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
Specify \*(L"true\*(R" to set the is_multimaster flag or \*(L"false\*(R" to deactivate/unset it. The default value is \*(L"false\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 4
\& # Get the attribute value
\& my $attr = $nsg1\->is_multimaster();
\& # Modify the attribute value
\& $nsg1\->is_multimaster(\*(Aqtrue\*(Aq);
.Ve
.RE
.RS 4
.RE
.SS "multiple_primaries( )"
.IX Subsection "multiple_primaries( )"
.RS 4
Use this method to set or retrieve Grid primary servers or external primary servers of the name server group.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DNS::Member objects for Grid primary servers or Infoblox::DNS::Nameserver objects for external primary servers.
.Sp
To set two and more Infoblox::DNS::Member objects you should set the is_multimaster flag to \*(L"true\*(R".
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
.Sp
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 1
\& #For grid primary:
\&
\& my $member1 = Infoblox::DNS::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => "192.168.1.2",
\&     stealth  => "true"
\& );
\&
\& $nsg1\->multiple_primaries([$member1]);
\&
\& #For external primary:
\&
\& my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns1.domain.extra",
\&     ipv4addr => "5.5.5.5",
\&     stealth  => "false",
\&     TSIGname => "tsig_name",
\&     TSIGkey  => "ZX1jVJl7C58GT/sc7Q3ucA=="
\& );
\&
\& my $nameserver2 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns2.domain.extra",
\&     ipv4addr => "6.6.6.6",
\&     stealth  => "false",
\&     TSIGname => "tsig_name2",
\&     TSIGkey  => "qwqwqwqwqwqwqwqwqwqwqA=="
\& );
\&
\& #Creating a nameserver object.
\& my $nameserver3 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns3.test.extra",
\&     ipv6addr => "12ab::34a",
\&     stealth  => "false",
\&     TSIGname => "tsig_name2",
\&     TSIGkey  => "qwqwqwqwqwqwqwqwqwqwqA=="
\&     );
\&
\& $nsg1\->multiple_primaries([$nameserver1, $nameserver2,$nameserver3]);
.Ve
.RE
.RS 4
.RE
.SS "secondaries( )"
.IX Subsection "secondaries( )"
.RS 4
Use this method to set or retrieve the grid secondary server or external secondary servers of the nameserver group.
.Sp
Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
The valid value is an array reference that contains Infoblox::DNS::Member objects for grid secondary servers and Infoblox::DNS::Nameserver objects for external secondary servers.
.IP "\fBReturns\fR" 4
.IX Item "Returns"
If you specified a parameter, the method returns true when the modification succeeds, and returns false when the operation fails.
If you did not specify a parameter, the method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\& my $member2 = Infoblox::DNS::Member\->new(
\&     name     => "member2.domain.com",
\&     ipv4addr => "2.2.2.2",
\&     stealth  => "false"
\& );
\&
\& my $nameserver1 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns1.domain.extra",
\&     ipv4addr => "4.4.4.4",
\&     stealth  => "false",
\&     TSIGname => "tsig_name",
\&     TSIGkey  => "ZX1jVJl7C58GT/sc7Q3ucA=="
\& );
\&
\& my $nameserver2 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns2.domain.extra",
\&     ipv4addr => "5.5.5.5",
\&     stealth  => "false",
\&     TSIGname => "tsig_name2",
\&     TSIGkey  => "qwqwqwqwqwqwqwqwqwqwqA=="
\& );
\&
\& #Creating a nameserver object.
\& my $nameserver3 = Infoblox::DNS::Nameserver\->new(
\&     name     => "ns3.test.extra",
\&     ipv6addr => "12ab::34a",
\&     stealth  => "false",
\&     TSIGname => "tsig_name2",
\&     TSIGkey  => "qwqwqwqwqwqwqwqwqwqwqA=="
\&     );
\&
\& $nsg1\->secondaries([$member2, $nameserver1, $nameserver2,$nameserver3]);
.Ve
.RE
.RS 4
.RE
.SH "SAMPLE CODE"
.IX Header "SAMPLE CODE"
The following sample code demonstrates the different functions that can be applied to an object, such as modify and remove. This sample also includes error handling for the operations.
.PP
\&\fB#Preparation prior to an Nsgroup object insertion\fR
.PP
.Vb 3
\& #PROGRAM STARTS: Include all the modules that will be used
\& use strict;
\& use Infoblox;
\&
\& #Create a session to the Infoblox device
\& my $session = Infoblox::Session\->new(
\&     master   => "192.168.1.2",
\&     username => "admin",
\&     password => "infoblox"
\& );
\& unless ($session) {
\&    die("Construct session failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Session created successfully\en";
.Ve
.PP
\&\fB#Create an Nsgroup object\fR
.PP
.Vb 6
\& #Creating a member object.
\& my $member1 = Infoblox::DNS::Member\->new(
\&     name     => "infoblox.localdomain",
\&     ipv4addr => "192.168.1.2",
\&     stealth  => "false"
\& );
\&
\& #Creating a nsgroup object.
\& my $nsg1 = Infoblox::Grid::DNS::Nsgroup\->new(
\&     name    => "ns_group_1",
\&     multiple_primaries => [$member1]
\& );
\&
\& my $nsg1_A = Infoblox::Grid::DNS::Nsgroup\->new(
\&     name    => "ns_group_A",
\&     multiple_primaries => [$member1]
\& );
\&
\& unless ($nsg1) {
\&    die("Construct Nsgroup failed: ",
\&        Infoblox::status_code() . ":" . Infoblox::status_detail());
\& }
\& print "Nsgroup object created successfully\en";
.Ve
.PP
\&\fB#Get and add the Nsgroup object\fR
.PP
.Vb 1
\& my @result_array = $session\->get( "object" => "Infoblox::Grid::DNS" ,  "grid" => "Infoblox" );
\&
\& if( defined @result_array  and scalar( @result_array ) > 0 )
\& {
\&        my $object = $result_array[0];
\&        if( ref( $object ) eq "Infoblox::Grid::DNS" )
\&        {
\&
\&                $object\->nsgroups( [ $nsg1 ,$nsg1_A] );
\&
\&                my $response = $session\->modify( $object );
\&                print "Add Nsgroup to grid dns properties success.\en" if ( $response );
\&         }
\&
\&  unless ($object) {
\&     die("Add Nsgroup to grid dns properties failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&  }
\& }
.Ve
.PP
\&\fB#Modify the Nsgroup object\fR
.PP
.Vb 1
\& my @result_array = $session\->get( "object" => "Infoblox::Grid::DNS" ,  "grid" => "Infoblox" );
\&
\& if( defined @result_array  and scalar( @result_array ) > 0 )
\& {
\&        my $object = $result_array[0];
\&        if( ref( $object ) eq "Infoblox::Grid::DNS" )
\&        {
\&
\&           $nsg1_A\->name("ns_group_modified");
\&
\&          $object\->nsgroups( [ $nsg1 ,$nsg1_A] );
\&
\&                my $response = $session\->modify( $object );
\&                print "Modify Nsgroup success.\en" if ( $response );
\&         }
\&
\&  unless ($object) {
\&     die("Modify NSgroup failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&  }
\& }
.Ve
.PP
\&\fB#Remove a Nsgroup object\fR
.PP
.Vb 1
\& my @result_array = $session\->get( "object" => "Infoblox::Grid::DNS" ,  "grid" => "Infoblox" );
\&
\& if( defined @result_array  and scalar( @result_array ) > 0 )
\& {
\&        my $object = $result_array[0];
\&        if( ref( $object ) eq "Infoblox::Grid::DNS" )
\&        {
\&
\&                $object\->nsgroups( [ ] );
\&
\&                my $response = $session\->modify( $object );
\&                print "Remove Nsgroup success.\en" if ( $response );
\&         }
\&
\&  unless ($object) {
\&     die("Remove Nsgroup failed: ",
\&         $session\->status_code() . ":" . $session\->status_detail());
\&  }
\& }
\&
\& ####PROGRAM ENDS####
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Session, Infoblox::Session\->\fBget()\fR,Infoblox::Session\->\fBmodify()\fR,Infoblox::Grid::DNS, Infoblox::DNS::Member,Infoblox::DNS::Nameserver
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
