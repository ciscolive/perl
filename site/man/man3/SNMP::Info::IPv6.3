.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::IPv6 3"
.TH SNMP::Info::IPv6 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::IPv6 \- SNMP Interface for obtaining IPv6 addresses and IPv6
address mappings
.SH "AUTHOR"
.IX Header "AUTHOR"
Jeroen van Ingen and Carlos Vicente
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& # Let SNMP::Info determine the correct subclass for you.
\& my $info = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class      = $info\->class();
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The SNMP::Info::IPv6 class implements functions to for mapping IPv6 addresses
to \s-1MAC\s0 addresses, interfaces and more. It will use data from the \fIIP-MIB\fR,
\&\fI\s-1IPV6\-MIB\s0\fR, or the \fICISCO-IETF-IP-MIB\fR, whichever is supported by the
device.
.PP
This class is inherited by Info::Layer3 to provide IPv6 node tracking across
device classes.
.PP
For debugging purposes you can call this class directly as you would
SNMP::Info
.PP
.Vb 1
\& my $info = new SNMP::Info::IPv6 (...);
.Ve
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
none.
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.IP "\fIIP-MIB\fR" 4
.IX Item "IP-MIB"
.PD 0
.IP "\fI\s-1IPV6\-MIB\s0\fR" 4
.IX Item "IPV6-MIB"
.IP "\fICISCO-IETF-IP-MIB\fR" 4
.IX Item "CISCO-IETF-IP-MIB"
.PD
.SH "GLOBALS"
.IX Header "GLOBALS"
none.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.SS "Internet Address Table"
.IX Subsection "Internet Address Table"
.ie n .IP "$info\->\fBipv6_n2p_addr()\fR" 4
.el .IP "\f(CW$info\fR\->\fBipv6_n2p_addr()\fR" 4
.IX Item "$info->ipv6_n2p_addr()"
.PD 0
.ie n .IP "$info\->\fBipv6_n2p_if()\fR" 4
.el .IP "\f(CW$info\fR\->\fBipv6_n2p_if()\fR" 4
.IX Item "$info->ipv6_n2p_if()"
.ie n .IP "$info\->\fBipv6_n2p_mac()\fR" 4
.el .IP "\f(CW$info\fR\->\fBipv6_n2p_mac()\fR" 4
.IX Item "$info->ipv6_n2p_mac()"
.ie n .IP "$info\->\fBipv6_n2p_state()\fR" 4
.el .IP "\f(CW$info\fR\->\fBipv6_n2p_state()\fR" 4
.IX Item "$info->ipv6_n2p_state()"
.ie n .IP "$info\->\fBipv6_n2p_type()\fR" 4
.el .IP "\f(CW$info\fR\->\fBipv6_n2p_type()\fR" 4
.IX Item "$info->ipv6_n2p_type()"
.ie n .IP "$info\->\fBipv6_index()\fR" 4
.el .IP "\f(CW$info\fR\->\fBipv6_index()\fR" 4
.IX Item "$info->ipv6_index()"
.PD
Maps an IPv6 address to an interface \f(CW\*(C`ifIndex\*(C'\fR
.ie n .IP "$info\->\fBipv6_type()\fR" 4
.el .IP "\f(CW$info\fR\->\fBipv6_type()\fR" 4
.IX Item "$info->ipv6_type()"
Maps an IPv6 address to its type (unicast, anycast, etc.)
.ie n .IP "$info\->\fBipv6_pfx_origin()\fR" 4
.el .IP "\f(CW$info\fR\->\fBipv6_pfx_origin()\fR" 4
.IX Item "$info->ipv6_pfx_origin()"
Maps an IPv6 prefix with its origin (manual, well-known, dhcp, etc.)
.ie n .IP "$info\->\fBipv6_addr_prefix()\fR" 4
.el .IP "\f(CW$info\fR\->\fBipv6_addr_prefix()\fR" 4
.IX Item "$info->ipv6_addr_prefix()"
Maps IPv6 addresses with their prefixes
.ie n .IP "$info\->\fBipv6_addr_prefixlength()\fR" 4
.el .IP "\f(CW$info\fR\->\fBipv6_addr_prefixlength()\fR" 4
.IX Item "$info->ipv6_addr_prefixlength()"
Maps IPv6 addresses with their prefix length
.ie n .IP "$info\->\fBipv6_addr()\fR" 4
.el .IP "\f(CW$info\fR\->\fBipv6_addr()\fR" 4
.IX Item "$info->ipv6_addr()"
Maps a table instance to an IPv6 address
.SS "Internet Address Translation Table"
.IX Subsection "Internet Address Translation Table"
.ie n .IP "$info\->\fBc_inet_phys_address()\fR" 4
.el .IP "\f(CW$info\fR\->\fBc_inet_phys_address()\fR" 4
.IX Item "$info->c_inet_phys_address()"
Maps an address of type \f(CW\*(C`cInetNetToMediaNetAddressType\*(C'\fR on interface \f(CW\*(C`ifIndex\*(C'\fR to a physical address.
.SH "MUNGES"
.IX Header "MUNGES"
.IP "\fBmunge_physaddr()\fR" 4
.IX Item "munge_physaddr()"
Takes an octet stream (HEX-STRING) and returns a colon separated \s-1ASCII\s0 hex
string.
