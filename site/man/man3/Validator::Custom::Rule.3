.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Validator::Custom::Rule 3"
.TH Validator::Custom::Rule 3 "2015-12-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Validator::Custom::Rule \- Rule object
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 2
\&  use Validator::Custom;
\&  my $vc = Validator::Custom\->new;
\&  
\&  # Create rule object
\&  my $rule = $vc\->create_rule;
\&  $rule\->require(\*(Aqid\*(Aq)\->check(
\&    \*(Aqascii\*(Aq
\&  );
\&  $rule\->optional(\*(Aqname\*(Aq)\->check(
\&   \*(Aqnot_blank\*(Aq
\&  );
\&  
\&  # Validate
\&  my $data = {id => \*(Aq001\*(Aq, name => \*(Aqkimoto\*(Aq};
\&  my $result = $vc\->validate($data, $rule);
\&  
\&  # Option
\&  $rule\->require(\*(Aqid\*(Aq)\->default(4)\->copy(0)\->message(\*(AqError\*(Aq)\->check(
\&    \*(Aqnot_blank\*(Aq
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Validator::Custom::Rule is the class to parse rule and store it as object.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "rule"
.IX Subsection "rule"
.Vb 2
\&  my $content = $rule_obj\->rule;
\&  $rule_obj = $rule\->rule($content);
.Ve
.PP
Content of rule object.
.SH "METHODS"
.IX Header "METHODS"
.SS "each"
.IX Subsection "each"
.Vb 1
\&  $rule\->each(1);
.Ve
.PP
Tell checke each element.
.SS "check"
.IX Subsection "check"
.Vb 1
\&  $rule\->check(\*(Aqnot_blank\*(Aq)\->check(\*(Aqascii\*(Aq);
.Ve
.PP
Add constraints to current topic.
.SS "check_or"
.IX Subsection "check_or"
.Vb 1
\&  $rule\->check_or(\*(Aqnot_blank\*(Aq, \*(Aqascii\*(Aq);
.Ve
.PP
Add \*(L"or\*(R" condition constraints to current topic.
.SS "copy"
.IX Subsection "copy"
.Vb 1
\&  $rule\->copy(0);
.Ve
.PP
Set copy option
.SS "default"
.IX Subsection "default"
.Vb 1
\&  $rule\->default(0);
.Ve
.PP
Set default option
.SS "filter"
.IX Subsection "filter"
.Vb 1
\&  $rule\->filter(\*(Aqtrim\*(Aq);
.Ve
.PP
This is \f(CW\*(C`check\*(C'\fR method alias for readability.
.SS "message"
.IX Subsection "message"
.Vb 3
\&  $rule\->require(\*(Aqname\*(Aq)
\&    \->check(\*(Aqnot_blank\*(Aq)\->message(\*(Aqshould be not blank\*(Aq)
\&    \->check(\*(Aqint\*(Aq)\->message(\*(Aqshould be int\*(Aq);
.Ve
.PP
Set message for each check.
.PP
Message is fallback to before check
so you can write the following way.
.PP
.Vb 3
\&  $rule\->require(\*(Aqname\*(Aq)
\&    \->check(\*(Aqnot_blank\*(Aq)
\&    \->check(\*(Aqint\*(Aq)\->message(\*(Aqshould be not blank and int\*(Aq);
.Ve
.SS "name"
.IX Subsection "name"
.Vb 1
\&  $rule\->name(\*(Aqkey1\*(Aq);
.Ve
.PP
Set result key name
.SS "optional"
.IX Subsection "optional"
.Vb 1
\&  $rule\->optional(\*(Aqid\*(Aq);
.Ve
.PP
Set key and set require option to 0.
.SS "require"
.IX Subsection "require"
.Vb 2
\&  $rule\->require(\*(Aqid\*(Aq);
\&  $rule\->require([\*(Aqid1\*(Aq, \*(Aqid2\*(Aq]);
.Ve
.PP
Set key.
.SS "parse"
.IX Subsection "parse"
.Vb 1
\&  $rule_obj = $rule_obj\->parse($rule);
.Ve
.PP
Parse rule and store it to \f(CW\*(C`rule\*(C'\fR attribute.
