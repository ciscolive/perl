.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Log::Shiras::TapPrint 3"
.TH Log::Shiras::TapPrint 3 "2016-10-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Shiras::TapPrint \- Reroute print to Log::Shiras::Switchboard
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        use Modern::Perl;
\&        #~ use Log::Shiras::Unhide qw( :InternalTaPPrinT );
\&        $ENV{hide_warn} = 0;
\&        use Log::Shiras::Switchboard;
\&        use Log::Shiras::TapPrint \*(Aqre_route_print\*(Aq;
\&        my      $ella_peterson = Log::Shiras::Switchboard\->get_operator(
\&                        name_space_bounds =>{
\&                                UNBLOCK =>{
\&                                        log_file => \*(Aqdebug\*(Aq,
\&                                },
\&                                main =>{
\&                                        27 =>{
\&                                                UNBLOCK =>{
\&                                                        log_file => \*(Aqinfo\*(Aq,
\&                                                },
\&                                        },
\&                                },
\&                        },
\&                        reports =>{ log_file =>[ Print::Log\->new ] },
\&                );
\&        re_route_print(
\&                fail_over => 0,
\&                level => \*(Aqdebug\*(Aq,
\&                report => \*(Aqlog_file\*(Aq,
\&        );
\&        print "Hello World 1\en";
\&        print "Hello World 2\en";
\&    print STDOUT "Hello World 3\en";
\&    restore_print;
\&    print "Hello World 4\en";
\&
\&        package Print::Log;
\&        use Data::Dumper;
\&        sub new{
\&                bless {}, shift;
\&        }
\&        sub add_line{
\&                shift;
\&                my @input = ( ref $_[0]\->{message} eq \*(AqARRAY\*(Aq ) ?
\&                                                @{$_[0]\->{message}} : $_[0]\->{message};
\&                my ( @print_list, @initial_list );
\&                no warnings \*(Aquninitialized\*(Aq;
\&                for my $value ( @input ){
\&                        push @initial_list, (( ref $value ) ? Dumper( $value ) : $value );
\&                }
\&                for my $line ( @initial_list ){
\&                        $line =~ s/\en$//;
\&                        $line =~ s/\en/\en\et\et/g;
\&                        push @print_list, $line;
\&                }
\&                my $output = sprintf( "| level \- %\-6s | name_space \- %\-s\en| line  \- %04d   | file_name  \- %\-s\en\et:(\et%s ):\en",
\&                                        $_[0]\->{level}, $_[0]\->{name_space},
\&                                        $_[0]\->{line}, $_[0]\->{filename},
\&                                        join( "\en\et\et", @print_list )   );
\&                print STDOUT $output;
\&                use warnings \*(Aquninitialized\*(Aq;
\&        }
\&
\&        1;
\&
\&        #######################################################################################
\&        # Synopsis Screen Output
\&        # 01: Re\-routing print statements at ../lib/Log/Shiras/TapPrint.pm line 22, <DATA> line 1.
\&        # 02: | level \- debug  | name_space \- main::26
\&        # 03: | line  \- 0026   | file_name  \- log_shiras_tapprint.pl
\&        # 04:   :(      Hello World 1 ):
\&        # 05: Hello World 3
\&        # 06: Hello World 4
\&        #######################################################################################
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package allows Log::Shiras to be used for code previously written with print statement
outputs.  It will re-direct the print statements using the select
 <http://perldoc.perl.org/functions/select.html> command with IO::Callback.  Using this
mechanisim means that a call to;
.PP
.Vb 1
\&    print STDOUT "Print some line\en";
.Ve
.PP
Will still do as expected but;
.PP
.Vb 1
\&    print "Capture this line\en";
.Ve
.PP
Will be routed to Log::Shiras::Switchboard.
.PP
This class is used to import functions into the script.  These are not object methods and
there is no reason to call \->new.  Uncomment line 2 of the \s-1SYNOPSIS\s0 to watch the inner
workings.
.SS "Output Explanation"
.IX Subsection "Output Explanation"
\&\fB01:\fR The method re_route_print will throw a warning statement whenever
\&\f(CW$ENV\fR{hide_warn} is not set and the method is called.
.PP
\&\fB02\-04:\fR Line 26 of the code has been captured (meta data appended) and then sent to the
Print::Log class for reporting.
.PP
\&\fB05:\fR Line 27 of the script did not print since that line requires a different urgency than
the urgency provided by the re_route_print call in the \s-1SYNOPSIS.\s0
Line 28 is not re-routed and does print normally since it is explicitly sent to \s-1STDOUT.\s0
.PP
\&\fB06:\fR Line 29 of the script turns off re-routing so Line 30 of the script prints normally
with no shenanigans.
.SS "Functions"
.IX Subsection "Functions"
These functions are used to change the routing of general print statements.
.ie n .SS "re_route_print( %args )"
.el .SS "re_route_print( \f(CW%args\fP )"
.IX Subsection "re_route_print( %args )"
This is the function used to re_route generic print statements to
Log::Shiras::Switchboard for processing.  There are several settings adjustments that
affect the routing of these statements.  Since print statments are intended to be captured
in-place, with no modification, all these settings must be fixed when the re-routing is
implemented.  Fine grained control of which print statements are used is done by line
number (See the \s-1SYNOPSIS\s0 for an example).  This function accepts all of the possible
settings, minimally scrubs the data as needed, builds the needed anonymous subroutine,
and then redirects generic print statements to that subroutine.  Each set of content from
generic print statements will then be packaged by the anonymous subroutine and sent to
\&\*(L"master_talk( \f(CW$args_ref\fR )\*(R" in Log::Shiras::Switchboard. Since print statements are generally
scattered throughout pre-existing code the name-space is either 'main::line_number' for
scripts or the subroutine block name within which the print statement occurs with the line
number.  For example the name_space 'main::my_sub::32' would be applied to a print
statement executed on line 32 within the sub block named 'my_sub' in the 'main' script.
.Sp
.RS 4
\&\fBAccepts:\fR
.Sp
The following keys in a hash or hashref which are passed directly to
\&\*(L"master_talk( \f(CW$args_ref\fR )\*(R" in Log::Shiras::Switchboard \- see the documentation there to
understand how they are used by the switchboard.  All values that are passed remain in force
until a new re_route_print call is made or the restore_print call is made.
.Sp
.RS 4
report \- \fIdefault = 'log_file'\fR
.Sp
level \- \fIdefault = 2 (info)\fR
.Sp
fail_over \- \fIdefault = 0\fR
.Sp
carp_stack \- \fIdefault = 0\fR
.RE
.RE
.RS 4
.Sp
\&\fBReturns:\fR 1
.RE
.SS "restore_print"
.IX Subsection "restore_print"
This sends all generic print statements to \s-1STDOUT\s0 using select
 <http://perldoc.perl.org/functions/select.html>.
.Sp
.RS 4
\&\fBAccepts:\fR Nothing
.Sp
\&\fBReturns:\fR 1
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Log\-Shiras/issues <https://github.com/jandrew/Log-Shiras/issues>
.RE
.SH "GLOBAL VARIABLES"
.IX Header "GLOBAL VARIABLES"
.IP "\fB\f(CB$ENV\fB{hide_warn}\fR" 4
.IX Item "$ENV{hide_warn}"
The module will warn when re-routing print statements are turned on.  It
will also warn when internal debug lines are 'Unhide'n.  In
the case where the you don't want these warnings then set this
environmental variable to true.
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing currently
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Jed Lund" 4
.IX Item "Jed Lund"
.PD 0
.IP "jandrew@cpan.org" 4
.IX Item "jandrew@cpan.org"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "DEPENDANCIES"
.IX Header "DEPENDANCIES"
.RS 4
version
.Sp
5.010 <http://perldoc.perl.org/perl5100delta.html> (for use of
defined or <http://perldoc.perl.org/perlop.html#Logical-Defined-Or> //)
.Sp
utf8
.Sp
Moose::Exporter
.Sp
MooseX::Types::Moose
.Sp
Carp \- longmess
.Sp
IO::Callback
.Sp
Log::Shiras::Switchboard
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Capture::Tiny \- capture_stdout
.RE
