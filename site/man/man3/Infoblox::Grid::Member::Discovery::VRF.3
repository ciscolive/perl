.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Infoblox::Grid::Member::Discovery::VRF 3"
.TH Infoblox::Grid::Member::Discovery::VRF 3 "2018-06-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Infoblox::Grid::Member::Discovery::VRF \- Object represents the relation between network view and the virtual network membership.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object is used to represents relation between network view and the virtual network membership. Object is read-only.
.SH "SESSION METHODS"
.IX Header "SESSION METHODS"
.SS "Infoblox::Session\->\fBget()\fP"
.IX Subsection "Infoblox::Session->get()"
.RS 4
Use this method to retrieve all the matching virtual network objects from the Infoblox appliance. See Infoblox::Session\->\fBget()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
Apply the following attributes to get a specific virtual network objects:
.Sp
.Vb 4
\&  name                  \- Optional. A name in string format.
\&  description           \- Optional. A description in string format.
\&  route_distinguisher   \- Optional. Route distinguisher associated with the VRF in sting format.
\&  network_view          \- Optional. Name of the network view associated with the VRF in sting format.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns Virtual network membership object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\&  #Get VRF object with the name \*(AqVRF1\*(Aq
\&  my $vrf_obj = $session\->get(
\&      object  => "Infoblox::Grid::Member::Discovery::VRF" ,
\&      name    => \*(AqVRF1\*(Aq
\&  );
.Ve
.RE
.RS 4
.RE
.SS "Infoblox::Session\->\fBsearch()\fP"
.IX Subsection "Infoblox::Session->search()"
.RS 4
Use this method to search for a virtual network objects in the Infoblox appliance. See Infoblox::Session\->\fBsearch()\fR for parameters and return values.
.IP "\fBKey References\fR" 4
.IX Item "Key References"
.Vb 1
\& Apply the following attributes to search for a virtual network object:
\&
\&  name                  \- Optional. A name in string format (regular expression).
\&  description           \- Optional. A description in string format (regular expression).
\&  route_distinguisher   \- Optional. Route distinguisher associated with the VRF in sting format.
\&  network_view          \- Optional. Name of the network view associated with the VRF in sting format.
.Ve
.IP "\fBReturns\fR" 4
.IX Item "Returns"
Returns Virtual network membership object(s).
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 5
\&  # Get all VRFs
\&  my @all_vrfs = $session\->search(
\&        object => \*(AqInfoblox::Grid::Member::Discovery::VRF\*(Aq,
\&        name => \*(Aq^.*$\*(Aq
\&  );
\&  
\&  # Get vrf by Route distinguisher
\&  my $vrf = $session\->search(
\&        object => \*(AqInfoblox::Grid::Member::Discovery::VRF\*(Aq,
\&        route_distinguisher => \*(Aq123:500\*(Aq
\&  );
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This section describes all the methods that can be used to retrieve values from \s-1VRF\s0 object.
.SS "\fBname()\fP"
.IX Subsection "name()"
.RS 4
Use this method to retrieve name associated with the \s-1VRF.\s0 This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&  #Get VRF name
\&  my $vrf_name = $vrf\->name();
.Ve
.RE
.RS 4
.RE
.SS "\fBnetwork_view()\fP"
.IX Subsection "network_view()"
.RS 4
Use this method to retrieve name of network view associated with the \s-1VRF.\s0 This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The returned string contains name network view. This is a read-only attribute.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&  #Get VRF network view name
\&  my $vrf_nv = $vrf\->network_view();
.Ve
.RE
.RS 4
.RE
.SS "\fBroute_distinguisher()\fP"
.IX Subsection "route_distinguisher()"
.RS 4
Use this method to retrieve route distinguisher associated with the \s-1VRF.\s0 This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&  #Get VRF route distinguisher
\&  my $vrf_rd = $vrf\->route_distinguisher();
.Ve
.RE
.RS 4
.RE
.SS "\fBdescription()\fP"
.IX Subsection "description()"
.RS 4
Use this method to retrieve description associated with the \s-1VRF.\s0 This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The method returns the attribute value.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&  #Get VRF description
\&  my $vrf_desc = $vrf\->description();
.Ve
.RE
.RS 4
.RE
.SS "\fBdevice()\fP"
.IX Subsection "device()"
.RS 4
Use this method to retrieve Infoblox::Grid::Discovery::Device object from which this \s-1VRF\s0 membership configuration was collected. This is a read-only attribute.
.IP "\fBParameter\fR" 4
.IX Item "Parameter"
None
.IP "\fBReturns\fR" 4
.IX Item "Returns"
The valid return value is an Infoblox::Grid::Discovery::Device partial object.
.IP "\fBExample\fR" 4
.IX Item "Example"
.Vb 2
\&  #Get VRF device
\&  my $vrf_device = $vrf\->device();
.Ve
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Infoblox Inc. <http://www.infoblox.com/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Infoblox::Grid::Discovery::Device
Infoblox::Session,
Infoblox::Session\->\fBget()\fR,
Infoblox::Session\->\fBsearch()\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2017 Infoblox Inc.
