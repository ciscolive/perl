.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNMP::Info::Layer2::Aerohive 3"
.TH SNMP::Info::Layer2::Aerohive 3 "2020-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SNMP::Info::Layer2::Aerohive \- SNMP Interface to Aerohive Access Points
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Miller
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& # Let SNMP::Info determine the correct subclass for you.
\& my $aerohive = new SNMP::Info(
\&                          AutoSpecify => 1,
\&                          Debug       => 1,
\&                          DestHost    => \*(Aqmyswitch\*(Aq,
\&                          Community   => \*(Aqpublic\*(Aq,
\&                          Version     => 2
\&                        )
\&    or die "Can\*(Aqt connect to DestHost.\en";
\&
\& my $class = $aerohive\->class();
\& print "SNMP::Info determined this device to fall under subclass : $class\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides abstraction to the configuration information obtainable from an
Aerohive wireless Access Point through \s-1SNMP.\s0
.SS "Inherited Classes"
.IX Subsection "Inherited Classes"
.IP "SNMP::Info::Layer2" 4
.IX Item "SNMP::Info::Layer2"
.SS "Required MIBs"
.IX Subsection "Required MIBs"
.PD 0
.IP "\fIAH-SYSTEM-MIB\fR" 4
.IX Item "AH-SYSTEM-MIB"
.IP "\fIAH-INTERFACE-MIB\fR" 4
.IX Item "AH-INTERFACE-MIB"
.PD
.SS "Inherited MIBs"
.IX Subsection "Inherited MIBs"
See \*(L"Required MIBs\*(R" in SNMP::Info::Layer2 for its \s-1MIB\s0 requirements.
.SH "GLOBALS"
.IX Header "GLOBALS"
These are methods that return scalar value from \s-1SNMP.\s0
.ie n .IP "$aerohive\->\fBvendor()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBvendor()\fR" 4
.IX Item "$aerohive->vendor()"
Returns 'aerohive'.
.ie n .IP "$aerohive\->\fBos()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBos()\fR" 4
.IX Item "$aerohive->os()"
Returns 'hiveos'.
.ie n .IP "$aerohive\->\fBserial()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBserial()\fR" 4
.IX Item "$aerohive->serial()"
Returns the serial number extracted from \f(CW\*(C`ahSystemSerial\*(C'\fR.
.ie n .IP "$aerohive\->\fBos_ver()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBos_ver()\fR" 4
.IX Item "$aerohive->os_ver()"
Returns the \s-1OS\s0 version extracted from \f(CW\*(C`sysDescr\*(C'\fR.
.ie n .IP "$aerohive\->\fBos_bin()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBos_bin()\fR" 4
.IX Item "$aerohive->os_bin()"
Returns the firmware version extracted from \f(CW\*(C`ahFirmwareVersion\*(C'\fR.
.ie n .IP "$aerohive\->\fBmac()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBmac()\fR" 4
.IX Item "$aerohive->mac()"
Returns the base mac address of the aerohive unit from an undocumented
snmp oid. if this oid is not available it will walk all interfaces and
return the lowest numbered mac address.
.ie n .IP "$aerohive\->\fBmodel()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBmodel()\fR" 4
.IX Item "$aerohive->model()"
Returns the model extracted from \f(CW\*(C`sysDescr\*(C'\fR.
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$aerohive\->\fBlayers()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBlayers()\fR" 4
.IX Item "$aerohive->layers()"
Returns 00000111. Layer 2 and Layer 3 functionality through proprietary MIBs.
.SS "Global Methods imported from SNMP::Info::Layer2"
.IX Subsection "Global Methods imported from SNMP::Info::Layer2"
See \*(L"\s-1GLOBALS\*(R"\s0 in SNMP::Info::Layer2 for details.
.SH "TABLE METHODS"
.IX Header "TABLE METHODS"
These are methods that return tables of information in the form of a reference
to a hash.
.ie n .IP "$aerohive\->\fBi_ssidlist()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBi_ssidlist()\fR" 4
.IX Item "$aerohive->i_ssidlist()"
Returns reference to hash. \s-1SSID\s0's recognized by the radio interface.
.ie n .IP "$aerohive\->\fBi_ssidmac()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBi_ssidmac()\fR" 4
.IX Item "$aerohive->i_ssidmac()"
With the same keys as i_ssidlist, returns the Basic service set
identification (\s-1BSSID\s0), \s-1MAC\s0 address, the \s-1AP\s0 is using for the \s-1SSID.\s0
.ie n .IP "$aerohive\->\fBi_80211channel()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBi_80211channel()\fR" 4
.IX Item "$aerohive->i_80211channel()"
Returns reference to hash.  Current operating frequency channel of the radio
interface.
.Sp
\&\f(CW\*(C`ahRadioChannel\*(C'\fR
.ie n .IP "$aerohive\->\fBdot11_cur_tx_pwr_mw()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBdot11_cur_tx_pwr_mw()\fR" 4
.IX Item "$aerohive->dot11_cur_tx_pwr_mw()"
Returns reference to hash.  Current transmit power, in milliwatts, of the
radio interface.
.Sp
\&\f(CW\*(C`ahRadioTxPower\*(C'\fR
.ie n .IP "$aironet\->\fBcd11_port()\fR" 4
.el .IP "\f(CW$aironet\fR\->\fBcd11_port()\fR" 4
.IX Item "$aironet->cd11_port()"
Returns radio interfaces.
.ie n .IP "$aironet\->\fBcd11_mac()\fR" 4
.el .IP "\f(CW$aironet\fR\->\fBcd11_mac()\fR" 4
.IX Item "$aironet->cd11_mac()"
Returns client radio interface \s-1MAC\s0 addresses.
.SS "Overrides"
.IX Subsection "Overrides"
.ie n .IP "$aerohive\->\fBbp_index()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBbp_index()\fR" 4
.IX Item "$aerohive->bp_index()"
Simulates bridge \s-1MIB\s0 by returning reference to a hash mapping \fBi_index()\fR to
the interface iid.
.ie n .IP "$aerohive\->\fBqb_fw_port()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBqb_fw_port()\fR" 4
.IX Item "$aerohive->qb_fw_port()"
Returns reference to hash of forwarding table entries port interface
identifier (iid).
.ie n .IP "$aerohive\->\fBqb_fw_mac()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBqb_fw_mac()\fR" 4
.IX Item "$aerohive->qb_fw_mac()"
Returns reference to hash of forwarding table \s-1MAC\s0 Addresses.
.Sp
\&\f(CW\*(C`ahClientMac\*(C'\fR
.ie n .IP "$aerohive\->\fBqb_fw_vlan()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBqb_fw_vlan()\fR" 4
.IX Item "$aerohive->qb_fw_vlan()"
Returns reference to hash of forwarding table entries \s-1VLAN ID.\s0
.Sp
\&\f(CW\*(C`ahClientVLAN\*(C'\fR
.SS "Arp Cache Table Augmentation"
.IX Subsection "Arp Cache Table Augmentation"
The \s-1AP\s0 has knowledge of \s-1MAC\-\s0>\s-1IP\s0 mappings for wireless clients.
Augmenting the arp cache data with these \s-1MAC\-\s0>\s-1IP\s0 mappings enables visibility
for stations that only communicate locally.
.ie n .IP "$aerohive\->\fBat_paddr()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBat_paddr()\fR" 4
.IX Item "$aerohive->at_paddr()"
\&\f(CW\*(C`ahClientMac\*(C'\fR
.ie n .IP "$aerohive\->\fBat_netaddr()\fR" 4
.el .IP "\f(CW$aerohive\fR\->\fBat_netaddr()\fR" 4
.IX Item "$aerohive->at_netaddr()"
\&\f(CW\*(C`ahClientIP\*(C'\fR
.SS "Table Methods imported from SNMP::Info::Layer2"
.IX Subsection "Table Methods imported from SNMP::Info::Layer2"
See \*(L"\s-1TABLE METHODS\*(R"\s0 in SNMP::Info::Layer2 for details.
