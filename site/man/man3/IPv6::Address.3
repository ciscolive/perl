.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IPv6::Address 3"
.TH IPv6::Address 3 "2020-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IPv6::Address \- IPv6 Address Manipulation Library
.SH "VERSION"
.IX Header "VERSION"
version 0.208
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use IPv6::Address;
\&
\& my $ipv6 = IPv6::Address\->new(\*(Aq2001:648:2000::/48\*(Aq);
\&
\& $ipv6\->contains(\*(Aq2001:648:2000::/64\*(Aq); #true
\&
\& say $ipv6\->to_string;
\& say $ipv6\->string; # Same as previous
\& say $ipv6; # Same as previous
\&
\& say $ipv6\->string(nocompress=>1); # do not compress using the :: notation
\& say $ipv6\->string(ipv4=>1); #print the last 32 bits as an IPv4 address
\& 
\& $ipv6\->addr_string; # Returns \*(Aq2001:648:2000::\*(Aq
\& 
\& $ipv6\->split(4); # Split the prefix into 2^4 smaller prefixes. Returns a list.  
\&
\& $ipv6\->apply_mask; # Apply the mask to the address. All bits beyond the mask length become 0.
\&
\& $ipv6\->first_address;
\&
\& $ipv6\->last_address;
\&
\& $a\->enumerate_with_offset( 5 , 64 ); #returns 2001:648:2000:4::/64
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A pure Perl IPv6 address manipulation library. Emphasis on manipulation of
prefixes and addresses. Very easy to understand and modify. The internal
representation of an IPv6::Address is a blessed hash with two keys, a prefix
length (0\-128 obviously) and a 128\-bit string. A multitude of methods to do
various tasks is provided.
.SS "Methods"
.IX Subsection "Methods"
.ie n .IP """new( ipv6_string )""" 12
.el .IP "\f(CWnew( ipv6_string )\fR" 12
.IX Item "new( ipv6_string )"
Takes a string representation of an IPv6 address and creates a corresponding
IPv6::Address object.
.ie n .IP """raw_new( bitstr, length )""" 12
.el .IP "\f(CWraw_new( bitstr, length )\fR" 12
.IX Item "raw_new( bitstr, length )"
Creates a new IPv6::Address out of a bitstring and a prefix length. The
bitstring must be binary, please do not use a '0' or '1' character string.
.ie n .IP """get_bitstr""" 12
.el .IP "\f(CWget_bitstr\fR" 12
.IX Item "get_bitstr"
Returns the bitstr of the object.
.ie n .IP """get_prefixlen""" 12
.el .IP "\f(CWget_prefixlen\fR" 12
.IX Item "get_prefixlen"
Returns the prefix length of the address.
.ie n .IP """get_mask_bitstr(length)""" 12
.el .IP "\f(CWget_mask_bitstr(length)\fR" 12
.IX Item "get_mask_bitstr(length)"
Returns a 128\-bit string with the first prefix-length bits equal
to 1, rest equal to 0. Essentially takes the prefix length of the object and
returns a corresponding bit mask.
.ie n .IP """get_masked_address_bitstr""" 12
.el .IP "\f(CWget_masked_address_bitstr\fR" 12
.IX Item "get_masked_address_bitstr"
Returns the bitstring, after zeroing out all the bits after the prefix length.
Essentially applies the prefix mask to the address.
.ie n .IP """generate_bitstr( number )""" 12
.el .IP "\f(CWgenerate_bitstr( number )\fR" 12
.IX Item "generate_bitstr( number )"
Not a method, returns 128\-bit string, first n\-items are 1, rest is 0.
.ie n .IP """bitstr_and( bitstr1 , bitstr2 )""" 12
.el .IP "\f(CWbitstr_and( bitstr1 , bitstr2 )\fR" 12
.IX Item "bitstr_and( bitstr1 , bitstr2 )"
Not a method, \s-1AND\s0's two bitstrings, returns result.
.ie n .IP """bitstr_or( bitstr1 , bitstr2)""" 12
.el .IP "\f(CWbitstr_or( bitstr1 , bitstr2)\fR" 12
.IX Item "bitstr_or( bitstr1 , bitstr2)"
Not a method, \s-1OR\s0's two bitstrings, returns result.
.ie n .IP """bitstr_not( bitstr )""" 12
.el .IP "\f(CWbitstr_not( bitstr )\fR" 12
.IX Item "bitstr_not( bitstr )"
Not a method, inverts a bitstring.
.ie n .IP """from_str( string_bitstring )""" 12
.el .IP "\f(CWfrom_str( string_bitstring )\fR" 12
.IX Item "from_str( string_bitstring )"
Not a method, takes a string of characters 0 or 1, returns corresponding binary
bitstring.  Please do not use more than 128 characters, rest will be ignored.
.ie n .IP """to_str( bitstring )""" 12
.el .IP "\f(CWto_str( bitstring )\fR" 12
.IX Item "to_str( bitstring )"
Not a method, takes a binary bitstring, returns a string composed of 0's and
1's. Please supply bitstrings of max. 128 bits, rest of the bits will be
ignored.
.ie n .IP """contains( other_address )""" 12
.el .IP "\f(CWcontains( other_address )\fR" 12
.IX Item "contains( other_address )"
This method takes an argument which is either an IPv6::Address or a plain string
that can be promoted to a valid IPv6::Address, and tests whether the object
contains it. Obviously returns true or false.
.ie n .IP """addr_string""" 12
.el .IP "\f(CWaddr_string\fR" 12
.IX Item "addr_string"
Returns the address part of the IPv6::Address. Using the option ipv4=>1 like
.Sp
.Vb 1
\& $a\->addr_string(ipv4=>1)
.Ve
.Sp
will make the last 32\-bits appear as an IPv4 address. Also, using nocompress=>1
like
.Sp
.Vb 1
\& $a\->addr_string( nocompress => 1 )
.Ve
.Sp
will prevent the string from containing a '::' part. So it will be 8 parts
separated by ':' colons.
.ie n .IP """string""" 12
.el .IP "\f(CWstring\fR" 12
.IX Item "string"
Returns the full IPv6 address, with the prefix in its end.
.ie n .IP """to_string""" 12
.el .IP "\f(CWto_string\fR" 12
.IX Item "to_string"
Used internally by the overload module.
.ie n .IP """split( exponent , target_length )""" 12
.el .IP "\f(CWsplit( exponent , target_length )\fR" 12
.IX Item "split( exponent , target_length )"
Splits the address to the order of two of the number given as first argument.
Example: if argument is 3, 2^3=8, address is split into 8 parts. The final parts
have prefix length equal to the target_length specified in the second argument.
.ie n .IP """apply_mask""" 12
.el .IP "\f(CWapply_mask\fR" 12
.IX Item "apply_mask"
Applies the prefix length mask to the address. Does not return anything. Works on \f(CW$self\fR. 
\&\fB\s-1WARNING:\s0\fRThis will alter the object.
.ie n .IP """first_address""" 12
.el .IP "\f(CWfirst_address\fR" 12
.IX Item "first_address"
Returns the first address of the prefix that is represented by the object. E.g.
consider 2001:648:2000::1234/64. First address will be 2001:648:2000::/64.
.ie n .IP """last_address""" 12
.el .IP "\f(CWlast_address\fR" 12
.IX Item "last_address"
Returns the last address of the prefix that is represented by the object. E.g.
consider 2001:648:2000::1234/64. Last address will be
2001:648:2000::ffff:ffff:ffff:ffff/64.
.ie n .IP """is_unspecified"" , ""is_loopback"" , ""is_multicast""" 12
.el .IP "\f(CWis_unspecified\fR , \f(CWis_loopback\fR , \f(CWis_multicast\fR" 12
.IX Item "is_unspecified , is_loopback , is_multicast"
Returns true or false depending on whether the address falls into the
corresponding category stated by the method name. E.g.
.Sp
.Vb 1
\& IPv6::Address\->new(\*(Aq::1\*(Aq)\->is_loopback # returns true
.Ve
.ie n .IP """ipv4_to_binarray""" 12
.el .IP "\f(CWipv4_to_binarray\fR" 12
.IX Item "ipv4_to_binarray"
Not a method, takes an IPv4 address, returns a character string consisting of 32
characters that are 0 or 1. Used internally, not too useful for the end user.
.ie n .IP """enumerate_with_IPv4( ipv4, mask )""" 12
.el .IP "\f(CWenumerate_with_IPv4( ipv4, mask )\fR" 12
.IX Item "enumerate_with_IPv4( ipv4, mask )"
Takes an IPv4 address and uses a part of it to enumerate inside the Ipv6 prefix
of the object. E.g.
.Sp
.Vb 1
\& IPv6::Address\->new(\*(Aq2001:648:2001::/48\*(Aq)\->enumerate_with_IPv4(\*(Aq0.0.0.1\*(Aq,0x0000ffff) #will yield 2001:648::2001:0001::/64
.Ve
.Sp
The return value will be a new IPv6::Address object, so the original object
remains intact. The part that will be used as an offset is extracted from the
ipv4 by using the mask.
.ie n .IP """enumerate_with_offset( offset, desired_length )""" 12
.el .IP "\f(CWenumerate_with_offset( offset, desired_length )\fR" 12
.IX Item "enumerate_with_offset( offset, desired_length )"
Takes a non-negative integer offset and returns a prefix whose relative position
inside the object is defined by the offset. The prefix length of the result is
defined by the second argument. E.g.
.Sp
.Vb 1
\& IPv6::Address\->new(\*(Aq2001:648:2000::/48\*(Aq)\->enumerate_with_offset( 5 , 64 ) #2001:648:2000:4::/64
.Ve
.ie n .IP """increment( offset )""" 12
.el .IP "\f(CWincrement( offset )\fR" 12
.IX Item "increment( offset )"
Increments the IPv6::Address object by offset. Offsets larger than 2^32\-1 are
not acceptable. This method is probably not too useful, but is provided for
completeness.
.ie n .IP """nxx_parts(unpack_format)""" 12
.el .IP "\f(CWnxx_parts(unpack_format)\fR" 12
.IX Item "nxx_parts(unpack_format)"
Takes the bitstring of the address and unpacks it using the first argument.
Internal use mostly.
.ie n .IP """n16_parts""" 12
.el .IP "\f(CWn16_parts\fR" 12
.IX Item "n16_parts"
Splits the address into an 8\-item array of unsigned short integers. Network byte
order is implied, a short integer is 16\-bits long.
.ie n .IP """n16_parts""" 12
.el .IP "\f(CWn16_parts\fR" 12
.IX Item "n16_parts"
Splits the address into an 4\-item array of unsigned long integers. Network byte
order is implied, a long integer is 32\-bits long.
.ie n .IP """n_cmp( a , b )""" 12
.el .IP "\f(CWn_cmp( a , b )\fR" 12
.IX Item "n_cmp( a , b )"
Takes two 128\-bit bitstr arguments, compares them and returns the result as \-1,
0 or 1. The semantics are the same as that of the spaceship operator <=>.
.Sp
This method will overload the <=> operator for IPv6::Address objects, so
comparing IPv6::Address objects like they were integers produces the correct
results.
.ie n .IP """n_sort( array )""" 12
.el .IP "\f(CWn_sort( array )\fR" 12
.IX Item "n_sort( array )"
Sorts an array of bitstrs using the n_cmp function.
.ie n .IP """radius_string""" 12
.el .IP "\f(CWradius_string\fR" 12
.IX Item "radius_string"
Returns a string suitable to be returned as an IPv6 Radius AV-pair. See \s-1RFC 3162\s0
for an explanation of the format.
.SH "AUTHOR"
.IX Header "AUTHOR"
Athanasios Douitsis \f(CW\*(C`<aduitsis@cpan.org>\*(C'\fR
.SH "SUPPORT"
.IX Header "SUPPORT"
Please open a ticket at <https://github.com/aduitsis/IPv6\-Address>.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008\-2015 Athanasios Douitsis, all rights reserved.
.PP
This program is free software; you can use it
under the terms of Artistic License 2.0 which can be found at 
http://www.perlfoundation.org/artistic_license_2_0
