.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::Reader::ExcelXML::SharedStrings 3"
.TH Spreadsheet::Reader::ExcelXML::SharedStrings 3 "2017-04-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::Reader::ExcelXML::SharedStrings \- The sharedStrings interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&        #!/usr/bin/env perl
\&        $|=1;
\&        use Data::Dumper;
\&        use MooseX::ShortCut::BuildInstance qw( build_instance );
\&        use Spreadsheet::Reader::ExcelXML::Workbook;
\&        use Spreadsheet::Reader::ExcelXML::XMLReader;
\&        use Spreadsheet::Reader::ExcelXML::SharedStrings;
\&        use Spreadsheet::Reader::ExcelXML::XMLReader::PositionSharedStrings;
\&
\&        # This whole thing is performed under the hood of
\&        #  Spreadsheet::Reader::ExcelXML
\&        my $file_instance = build_instance(
\&                        package      => \*(AqSharedStringsInstance\*(Aq,
\&                        file         => \*(AqsharedStrings.xml\*(Aq,
\&                        workbook_inst => Spreadsheet::Reader::ExcelXML::Workbook\->new,
\&                        superclasses =>[
\&                                \*(AqSpreadsheet::Reader::ExcelXML::XMLReader\*(Aq
\&                        ],
\&                        add_roles_in_sequence =>[
\&                                \*(AqSpreadsheet::Reader::ExcelXML::XMLReader::PositionSharedStrings\*(Aq,
\&                                \*(AqSpreadsheet::Reader::ExcelXML::SharedStrings\*(Aq,
\&                        ],
\&                );
\&
\&        # Demonstrate output
\&        print Dumper( $file_instance\->get_shared_string( 3 ) );
\&        print Dumper( $file_instance\->get_shared_string( 12 ) );
\&
\&        #######################################
\&        # SYNOPSIS Screen Output
\&        # 01: $VAR1 = {
\&        # 02:     \*(Aqraw_text\*(Aq => \*(Aq \*(Aq
\&        # 03: };
\&        # 04: $VAR1 = {
\&        # 05:     \*(Aqraw_text\*(Aq => \*(AqSuperbowl Audibles\*(Aq
\&        # 06: };
\&        #######################################
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation is written to explain ways to use this module when writing your
own excel parser or extending this package.  To use the general package for excel
parsing out of the box please review the documentation for Workbooks
, Worksheets
, and
Cells.
.PP
This class is the interface for reading the sharedStrings file in a standard
xml based Excel file.  The \s-1SYNOPSIS\s0 provides an example with a role added to
implement that type of reading ~PositionSharedStrings.  The other role written
for this interface is Spreadsheet::Reader::ExcelXML::NamedSharedStrings.  It
does not provide connection to other file types or even the elements from other
files that are related to this file.  This \s-1POD\s0 documents all functionaliy required
by this interface independant of where it is provided.
.SS "Methods"
.IX Subsection "Methods"
These are the primary ways to use this class.  For additional SharedStrings
options see the Attributes section.
.PP
\fIget_shared_string( \f(CI$positive_int\fI|$name )\fR
.IX Subsection "get_shared_string( $positive_int|$name )"
.Sp
.RS 4
\&\fBDefinition:\fR This returns the data in the shared strings file identified
by either the \f(CW$positive_int\fR position for position based sharedStrings files
or \f(CW$name\fR in name based sharedStrings files.  The position implementation is
Spreadsheet::Reader::ExcelXML::PositionSharedStrings.  The named
retrieval is implemented in Spreadsheet::Reader::ExcelXML::NamedSharedStrings.
.Sp
\&\fBAccepts:\fR \f(CW$positive_int\fR ( a positive integer ) or \f(CW$name\fR depending on the
associated role
.Sp
\&\fBReturns:\fR a hash ref with the key 'raw_text' and all coallated text for that
xml node as the value.  If there is associated rich text in the node and
\&\*(L"group_return_type\*(R" in Spreadsheet::Reader::ExcelXML is set to 'instance'
then it will also have a 'rich_text' key with the value set as an arrayref of
pairs (not sub array refs) with the first value being the position of the
raw_text from zero that the formatting is applied and the second position as
the settings for that format.  Ex.
.Sp
.Vb 10
\&        {
\&                raw_text => \*(AqHello World\*(Aq,
\&                rich_text =>[
\&                        2,# Starting with the letter \*(Aql\*(Aq apply the format
\&                        {
\&                                \*(Aqcolor\*(Aq => {
\&                                        \*(Aqrgb\*(Aq => \*(AqFFFF0000\*(Aq
\&                                },
\&                                \*(Aqsz\*(Aq => \*(Aq11\*(Aq,
\&                                \*(Aqb\*(Aq => undef,
\&                                \*(Aqscheme\*(Aq => \*(Aqminor\*(Aq,
\&                                \*(AqrFont\*(Aq => \*(AqCalibri\*(Aq,
\&                                \*(Aqfamily\*(Aq => \*(Aq2\*(Aq
\&                        },
\&                        6,# Starting with the letter \*(AqW\*(Aq apply the format
\&                        {
\&                                \*(Aqcolor\*(Aq => {
\&                                        \*(Aqrgb\*(Aq => \*(AqFF0070C0\*(Aq
\&                                },
\&                                \*(Aqsz\*(Aq => \*(Aq20\*(Aq,
\&                                \*(Aqb\*(Aq => undef,
\&                                \*(Aqscheme\*(Aq => \*(Aqminor\*(Aq,
\&                                \*(AqrFont\*(Aq => \*(AqCalibri\*(Aq,
\&                                \*(Aqfamily\*(Aq => \*(Aq2\*(Aq
\&                        }
\&                ]
\&        }
.Ve
.RE
.PP
\fIloaded_correctly\fR
.IX Subsection "loaded_correctly"
.Sp
.RS 4
\&\fBDefinition:\fR This interface will check the sharedStrings file for a
global scope of the number of shared strings and store it when the file
is opened.  If the process was succesful then this will return 1.
.Sp
\&\fBAccepts:\fR nothing
.Sp
\&\fBReturns:\fR (1|0) depending on if file opened as a shared strings file
.RE
.SS "Attributes"
.IX Subsection "Attributes"
Data passed to new when creating an instance with this interface. For
modification of this(ese) attribute(s) see the listed 'attribute
methods'.  For more information on attributes see
Moose::Manual::Attributes.  The easiest way to modify this(ese)
attribute(s) is during instance creation before it is passed to the
workbook or parser.
.PP
\fIfile\fR
.IX Subsection "file"
.Sp
.RS 4
\&\fBDefinition:\fR This attribute holds the file handle for the file being read.  If
the full file name and path is passed to the attribute the class will coerce that
into an IO::File file handle.
.Sp
\&\fBDefault:\fR no default \- this must be provided to read a file
.Sp
\&\fBRequired:\fR yes
.Sp
\&\fBRange:\fR any unencrypted sharedStrings.xml file name and path or IO::File file
handle with that content.
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
\&\fBset_file\fR
.Sp
.RS 4
\&\fBDefinition:\fR change the file value in the attribute (this will reboot
the file instance and lock the file)
.RE
.RE
.RS 4
.Sp
\&\fBget_file\fR
.Sp
.RS 4
\&\fBDefinition:\fR Returns the file handle of the file even if a file name
was passed
.RE
.RE
.RS 4
.Sp
\&\fBhas_file\fR
.Sp
.RS 4
\&\fBDefinition:\fR this is used to see if the file loaded correctly.
.RE
.RE
.RS 4
.Sp
\&\fBclear_file\fR
.Sp
.RS 4
\&\fBDefinition:\fR this clears (and unlocks) the file handle
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
\fIcache_positions\fR
.IX Subsection "cache_positions"
.Sp
.RS 4
\&\fBDefinition:\fR Especially for sheets with lots of stored text the
parser can slow way down when accessing each postion.  This is
because the text is not always stored sequentially and the reader
is a \s-1JIT\s0 linear parser.  To go back it must restart and index
through each position till it gets to the right place.  This is
especially true for excel sheets that have experienced any
significant level of manual intervention prior to being read.
This attribute turns (default) on caching for shared strings so
the parser only has to read through the shared strings once.  When
the read is complete all the way to the end it will also release
the shared strings file in order to free up some space.
(a small win in exchange for the space taken by the cache).  The
trade off here is that all intermediate shared strings are
fully read
before reading the target string.  This means early reads will be
slower.  For sheets that only have numbers stored or at least have
very few strings this will likely not be a initial hit (or speed
improvement).  In order to minimize the physical size of the cache,
if there is only a text string stored in the shared strings position
then only the string will be stored (not as a value to a raw_text
hash key).  It will then reconstitue into a hashref when requested.
.Sp
\&\fBDefault:\fR 1 = caching is on
.Sp
\&\fBRange:\fR 1|0
.Sp
\&\fBAttribute required:\fR yes
.Sp
\&\fBattribute methods\fR Methods provided to adjust this attribute
.Sp
.RS 4
none \- (will be autoset by \*(L"cache_positions\*(R" in Spreadsheet::Reader::ExcelXML)
.RE
.RE
.RS 4
.RE
.SH "SUPPORT"
.IX Header "SUPPORT"
.RS 4
github Spreadsheet::Reader::ExcelXML/issues
 <https://github.com/jandrew/p5-spreadsheet-reader-excelxml/issues>
.RE
.SH "TODO"
.IX Header "TODO"
.RS 4
\&\fB1.\fR Nothing yet
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
.RS 4
Jed Lund
.Sp
jandrew@cpan.org
.RE
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.PP
This software is copyrighted (c) 2016 by Jed Lund
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.RS 4
Spreadsheet::Reader::ExcelXML \- the package
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.RS 4
Spreadsheet::Read \- generic Spreadsheet reader
.Sp
Spreadsheet::ParseExcel \- Excel binary version 2003 and earlier (.xls files)
.Sp
Spreadsheet::XLSX \- Excel version 2007 and later
.Sp
Spreadsheet::ParseXLSX \- Excel version 2007 and later
.Sp
Log::Shiras <https://github.com/jandrew/Log-Shiras>
.Sp
.RS 4
All lines in this package that use Log::Shiras are commented out
.RE
.RE
.RS 4
.RE
