.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Validator::Custom::Validation 3"
.TH Validator::Custom::Validation 3 "2015-12-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Validator::Custom::Validation \- a result of validation
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 1
\&  my $validation = $vc\->validation;
\&  
\&  $validation\->add_failed(title => \*(Aqtitle is invalid\*(Aq);
\&  $validation\->add_failed(name => \*(Aqname is invalid\*(Aq);
\&  
\&  # Is valid
\&  my $is_valid = $validation\->is_valid;
\&  my $title_is_valid = $validation\->is_valid(\*(Aqtitle\*(Aq);
\&  
\&  # Get all failed parameter names
\&  my $failed = $validation\->failed;
\&  
\&  # Message
\&  my $messages = $validation\->messages;
\&  my $title_message = $validation\->message(\*(Aqtitle\*(Aq);
\&  my $messages_h = $validation\->messages_to_hash;
.Ve
.SH "METHODS"
.IX Header "METHODS"
Validator::Custom::Validation inherits all methods from Object::Simple
and implements the following new ones.
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $validation = Validator::Custom::Validation\->new;
.Ve
.PP
Create a Validator::Custom::Validation object.
.PP
Generally this method is not used. You should use \f(CW\*(C`validation\*(C'\fR method of Validator::Custom.
.PP
.Vb 1
\&  my $validation = $vc\->validation;
.Ve
.SS "is_valid"
.IX Subsection "is_valid"
.Vb 2
\&  my $is_valid = $validation\->is_valid;
\&  my $is_valid = $validation\->is_valid(\*(Aqtitle\*(Aq);
.Ve
.PP
Check if the result of validation is valid.
If name is specified, check if the parameter corresponding to the name is valid.
.SS "add_failed"
.IX Subsection "add_failed"
.Vb 2
\&  $validation\->add_failed(\*(Aqtitle\*(Aq => \*(Aqtitle is invalid value\*(Aq);
\&  $validation\->add_failed(\*(Aqtitle\*(Aq);
.Ve
.PP
Add a failed parameter name and message.
If message is omitted, default message is set automatically.
.SS "failed"
.IX Subsection "failed"
.Vb 1
\&  my $failed = $validation\->failed;
.Ve
.PP
Get all failed parameter names.
.SS "message"
.IX Subsection "message"
.Vb 1
\&  my $message = $validation\->message(\*(Aqtitle\*(Aq);
.Ve
.PP
Get a failed message corresponding to the name.
.SS "messages"
.IX Subsection "messages"
.Vb 1
\&  my $messgaes = $validation\->messages;
.Ve
.PP
Get all failed messages.
.SS "messages_to_hash"
.IX Subsection "messages_to_hash"
.Vb 1
\&  my $messages_h = $validation\->messages_to_hash;
.Ve
.PP
Get all failed parameter names and messages as hash reference.
