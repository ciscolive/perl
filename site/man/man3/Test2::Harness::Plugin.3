.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Harness::Plugin 3"
.TH Test2::Harness::Plugin 3 "2020-11-03" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Harness::Plugin \- Base class for Test2::Harness plugins.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class holds the methods specific to Test2::Harness which
is the backend. Most of the time you actually want to subclass
App::Yath::Plugin which subclasses this class, and holds additional methods
that apply to yath (the \s-1UI\s0 layer).
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
You probably want to subclass App::Yath::Plugin instead. This class here
mainly exists to separate concerns, but is not something you should use
directly.
.PP
.Vb 1
\&    package Test2::Harness::Plugin::MyPlugin;
\&
\&    use parent \*(AqTest2::Harness::Plugin\*(Aq;
\&
\&    # ... Define methods
\&
\&    1;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$plugin\->munge_search($input, $default_search, $settings)" 4
.el .IP "\f(CW$plugin\fR\->munge_search($input, \f(CW$default_search\fR, \f(CW$settings\fR)" 4
.IX Item "$plugin->munge_search($input, $default_search, $settings)"
\&\f(CW$input\fR is an arrayref of files and/or directories provided at the command
line.
.Sp
\&\f(CW$default_search\fR is an arrayref with the default files/directories pulled in
when nothing is specified at the command ine.
.Sp
\&\f(CW$settings\fR is an instance of Test2::Harness::Settings
.ie n .IP "$undef_or_inst = $plugin\->claim_file($path, $settings)" 4
.el .IP "\f(CW$undef_or_inst\fR = \f(CW$plugin\fR\->claim_file($path, \f(CW$settings\fR)" 4
.IX Item "$undef_or_inst = $plugin->claim_file($path, $settings)"
This is a chance for a plugin to claim a test file early, before Test2::Harness
takes care of it. If your plugin does not want to claim the file just return
undef. To claim the file return an instance of Test2::Harness::TestFile
created with \f(CW$path\fR.
.ie n .IP "$plugin\->munge_files(\e@tests, $settings)" 4
.el .IP "\f(CW$plugin\fR\->munge_files(\e@tests, \f(CW$settings\fR)" 4
.IX Item "$plugin->munge_files(@tests, $settings)"
This is an opportunity for your plugin to modify the data for any test file
that will be run. The first argument is an arrayref of
Test2::Harness::TestFile objects.
.ie n .IP "$plugin\->inject_run_data(meta => $meta, fields => $fields, run => $run)" 4
.el .IP "\f(CW$plugin\fR\->inject_run_data(meta => \f(CW$meta\fR, fields => \f(CW$fields\fR, run => \f(CW$run\fR)" 4
.IX Item "$plugin->inject_run_data(meta => $meta, fields => $fields, run => $run)"
This is a callback that lets your plugin add meta-data or custom fields to the
run event. The meta-data and fields are available in the event log, and are
particularily useful to App::Yath::UI.
.Sp
.Vb 3
\&    sub inject_run_data {
\&        my $class  = shift;
\&        my %params = @_;
\&
\&        my $meta   = $params{meta};
\&        my $fields = $params{fields};
\&
\&        # Meta\-data is a hash, each plugin should define its own key, and put
\&        # data under that key
\&        $meta\->{MyPlugin}\->{stuff} = "Stuff!";
\&
\&        # Fields is an array of fields that a UI might want to display when showing the run.
\&        push @$fields => {name => \*(AqMyPlugin\*(Aq, details => "Human Friendly Stuff", raw => "Less human friendly stuff", data => $all_the_stuff};
\&
\&        return;
\&    }
.Ve
.ie n .IP "$plugin\->setup($settings)" 4
.el .IP "\f(CW$plugin\fR\->setup($settings)" 4
.IX Item "$plugin->setup($settings)"
This is a callback that lets you run setup logic when the runner starts. Note
that in a persistent runner this is run once on startup, it is not run for each
\&\f(CW\*(C`run\*(C'\fR command against the persistent runner.
.ie n .IP "$plugin\->teardown($settings)" 4
.el .IP "\f(CW$plugin\fR\->teardown($settings)" 4
.IX Item "$plugin->teardown($settings)"
This is a callback that lets you run teardown logic when the runner stops. Note
that in a persistent runner this is run once on termination, it is not run for
each \f(CW\*(C`run\*(C'\fR command against the persistent runner.
.ie n .IP "@files = $plugin\->changed_files($settings)" 4
.el .IP "\f(CW@files\fR = \f(CW$plugin\fR\->changed_files($settings)" 4
.IX Item "@files = $plugin->changed_files($settings)"
Get a list of files that have changed. Plugins are free to define what
\&\*(L"changed\*(R" means. This may be used by the finder to determine what tests to run
based on coverage data collected in previous runs.
.ie n .IP "$exit = $plugin\->shellcall($settings, $name, $cmd)" 4
.el .IP "\f(CW$exit\fR = \f(CW$plugin\fR\->shellcall($settings, \f(CW$name\fR, \f(CW$cmd\fR)" 4
.IX Item "$exit = $plugin->shellcall($settings, $name, $cmd)"
.PD 0
.ie n .IP "$exit = $plugin\->shellcall($settings, $name, @cmd)" 4
.el .IP "\f(CW$exit\fR = \f(CW$plugin\fR\->shellcall($settings, \f(CW$name\fR, \f(CW@cmd\fR)" 4
.IX Item "$exit = $plugin->shellcall($settings, $name, @cmd)"
.PD
This is essentially the same as \f(CW\*(C`system()\*(C'\fR except that \s-1STDERR\s0 and \s-1STDOUT\s0 are
redirected to files that the yath collector will pick up so that any output
from the command will be seen as events and will be part of the yath log. If no
workspace is available this will not redirect \s-1IO\s0 and it will be identical to
calling \f(CW\*(C`system()\*(C'\fR.
.Sp
This is particularily useful in \f(CW\*(C`setup()\*(C'\fR and \f(CW\*(C`teardown()\*(C'\fR when running
external commands, specially any that daemonize and continue to produce output
after the setup/teardown method has completed.
.Sp
\&\f(CW$name\fR is required because it will be used for filenames, and will be used as
the output tag (best to limit it to 8 characters).
.ie n .IP "$plugin\->redirect_io($settings, $name)" 4
.el .IP "\f(CW$plugin\fR\->redirect_io($settings, \f(CW$name\fR)" 4
.IX Item "$plugin->redirect_io($settings, $name)"
\&\fB\s-1WARNING:\s0\fR This must \s-1NEVER\s0 be called in a primary yath process. Only use this
in forked processes that you control. If this is used in a main process it
could hide \s-1ALL\s0 output.
.Sp
This will redirect \s-1STDERR\s0 and \s-1STDOUT\s0 to files that will be picked up by the
yath collector so that any output appears as proper yath events and will be
included in the yath log.
.Sp
\&\f(CW$name\fR is required because it will be used for filenames, and will be used as
the output tag (best to limit it to 8 characters).
.ie n .IP "$plugin\->\s-1TO_JSON\s0" 4
.el .IP "\f(CW$plugin\fR\->\s-1TO_JSON\s0" 4
.IX Item "$plugin->TO_JSON"
This is here as a bare minimum serialization method. It returns the plugin
class name.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
