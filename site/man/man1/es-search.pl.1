.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ES-SEARCH 1"
.TH ES-SEARCH 1 "2020-09-16" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
es\-search.pl \- Provides a CLI for quick searches of data in ElasticSearch daily indexes
.SH "VERSION"
.IX Header "VERSION"
version 7.8
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
es\-search.pl [search string]
.PP
Options:
.PP
.Vb 10
\&    \-\-help              print help
\&    \-\-manual            print full manual
\&    \-\-filter            Force filter context for all query elements
\&    \-\-show              Comma separated list of fields to display, default is ALL, switches to tab output
\&    \-\-tail              Continue the query until CTRL+C is sent
\&    \-\-top               Perform an aggregation on the fields, by a comma separated list of up to 2 items
\&    \-\-by                Perform an aggregation using the result of this, example: \-\-by cardinality:src_ip
\&    \-\-with              Perform a sub aggregation on the query
\&    \-\-bg\-filter         Only used if \-\-top aggregation is significant_terms, applies a background filter
\&    \-\-match\-all         Enables the ElasticSearch match_all operator
\&    \-\-interval          When running aggregations, wrap the aggreation in a date_histogram with this interval
\&    \-\-prefix            Takes "field:string" and enables the Lucene prefix query for that field
\&    \-\-exists            Field which must be present in the document
\&    \-\-missing           Field which must not be present in the document
\&    \-\-size              Result size, default is 20, aliased to \-n and \-\-limit
\&    \-\-max\-batch\-size    When making requests to ES, retrieve this many docs in a single request, defaults to 50
\&    \-\-all               Don\*(Aqt consider result size, just give me *everything*
\&    \-\-asc               Sort by ascending timestamp
\&    \-\-desc              Sort by descending timestamp (Default)
\&    \-\-sort              List of fields for custom sorting
\&    \-\-format            When \-\-show isn\*(Aqt used, use this method for outputting the record, supported: json, jsonpretty, yaml
\&                        json assumes \-\-no\-decorator as we assume you\*(Aqre piping through jq
\&    \-\-pretty            Where possible, use JSON\->pretty
\&    \-\-precision         For floating point values, use this many digits of precision, defaults to 3
\&    \-\-no\-decorators     Do not show the header with field names in the query results
\&    \-\-no\-header         Same as above
\&    \-\-no\-implications   Don\*(Aqt attempt to imply filters from statistical aggregations
\&    \-\-fields            Display the field list for this index!
\&    \-\-bases             Display the index base list for this cluster.
\&    \-\-timestamp         Field to use as the date object, default: @timestamp
.Ve
.PP
From App::ElasticSearch::Utilities:
.PP
.Vb 10
\&    \-\-local         Use localhost as the elasticsearch host
\&    \-\-host          ElasticSearch host to connect to
\&    \-\-port          HTTP port for your cluster
\&    \-\-proto         Defaults to \*(Aqhttp\*(Aq, can also be \*(Aqhttps\*(Aq
\&    \-\-http\-username HTTP Basic Auth username
\&    \-\-http\-password HTTP Basic Auth password (if not specified, and \-\-http\-user is, you will be prompted)
\&    \-\-password\-exec Script to run to get the users password
\&    \-\-noop          Any operations other than GET are disabled, can be negated with \-\-no\-noop
\&    \-\-timeout       Timeout to ElasticSearch, default 30
\&    \-\-keep\-proxy    Do not remove any proxy settings from %ENV
\&    \-\-index         Index to run commands against
\&    \-\-base          For daily indexes, reference only those starting with "logstash"
\&                     (same as \-\-pattern logstash\-* or logstash\-DATE)
\&    \-\-datesep       Date separator, default \*(Aq.\*(Aq also (\-\-date\-separator)
\&    \-\-pattern       Use a pattern to operate on the indexes
\&    \-\-days          If using a pattern or base, how many days back to go, default: 1
.Ve
.PP
See also the \*(L"\s-1CONNECTION ARGUMENTS\*(R"\s0 and \*(L"\s-1INDEX SELECTION ARGUMENTS\*(R"\s0 sections from App::ElasticSearch::Utilities.
.PP
From CLI::Helpers:
.PP
.Vb 10
\&    \-\-data\-file         Path to a file to write lines tagged with \*(Aqdata => 1\*(Aq
\&    \-\-tags              A comma separated list of tags to display
\&    \-\-color             Boolean, enable/disable color, default use git settings
\&    \-\-verbose           Incremental, increase verbosity (Alias is \-v)
\&    \-\-debug             Show developer output
\&    \-\-debug\-class       Show debug messages originating from a specific package, default: main
\&    \-\-quiet             Show no output (for cron)
\&    \-\-syslog            Generate messages to syslog as well
\&    \-\-syslog\-facility   Default "local0"
\&    \-\-syslog\-tag        The program name, default is the script name
\&    \-\-syslog\-debug      Enable debug messages to syslog if in use, default false
\&    \-\-nopaste           Use App::Nopaste to paste output to configured paste service
\&    \-\-nopaste\-public    Defaults to false, specify to use public paste services
\&    \-\-nopaste\-service   Comma\-separated App::Nopaste service, defaults to Shadowcat
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This tool takes a search string parameter to search the cluster.  It is in the format of the Lucene
query string <http://lucene.apache.org/core/2_9_4/queryparsersyntax.html>
.PP
Examples might include:
.PP
.Vb 2
\&    # Search for past 10 days vhost admin.example.com and client IP 1.2.3.4
\&    es\-search.pl \-\-days=10 \-\-size=100 dst:"admin.example.com" AND src_ip:"1.2.3.4"
\&
\&    # Search for all apache logs past with status 500
\&    es\-search.pl program:"apache" AND crit:500
\&
\&    # Search for all apache logs with status 500 show only file and out_bytes
\&    es\-search.pl program:"apache" AND crit:500 \-\-show file,out_bytes
\&
\&    # Search for ip subnet client IP 1.2.3.0 to 1.2.3.255 or 1.2.0.0 to 1.2.255.255
\&    es\-search.pl \-\-size=100 dst:"admin.example.com" AND src_ip:"1.2.3.0/24"
\&    es\-search.pl \-\-size=100 dst:"admin.example.com" AND src_ip:"1.2.0/16"
\&
\&    # Show the top src_ip for \*(Aqwww.example.com\*(Aq
\&    es\-search.pl \-\-base access dst:www.example.com \-\-top src_ip
\&
\&    # Tail the access log for www.example.com 404\*(Aqs
\&    es\-search.pl \-\-base access \-\-tail \-\-show src_ip,file,referer_domain dst:www.example.com AND crit:404
.Ve
.SH "NAME"
es\-search.pl \- Search a logging cluster for information
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fBhelp\fR" 8
.IX Item "help"
Print this message and exit
.IP "\fBmanual\fR" 8
.IX Item "manual"
Print detailed help with examples
.IP "\fBfilter\fR" 8
.IX Item "filter"
Forces filter context for all query parameters, the default is using query context.
.IP "\fBshow\fR" 8
.IX Item "show"
Comma separated list of fields to display in the dump of the data
.Sp
.Vb 1
\&    \-\-show src_ip,crit,file,out_bytes
.Ve
.IP "\fBsort\fR" 8
.IX Item "sort"
Use this option to sort your documents on fields other than the timestamp. Fields are given as a comma separated list:
.Sp
.Vb 1
\&    \-\-sort field1,field2
.Ve
.Sp
To specify per-field sort direction use:
.Sp
.Vb 1
\&    \-\-sort field1:asc,field2:desc
.Ve
.Sp
Using this option together with \f(CW\*(C`\-\-asc\*(C'\fR, \f(CW\*(C`\-\-desc\*(C'\fR or \f(CW\*(C`\-\-tail\*(C'\fR is not possible.
.IP "\fBformat\fR" 8
.IX Item "format"
Output format to use when the full record is dumped.  The default is 'yaml', but 'json' is also supported.
.Sp
.Vb 1
\&    \-\-format json
.Ve
.IP "\fBprecision\fR" 8
.IX Item "precision"
For output involving floating point numbers, use this many places to the right of the decimal point.  The default is 3.
.IP "\fBtail\fR" 8
.IX Item "tail"
Repeats the query every second until \s-1CTRL+C\s0 is hit, displaying new results.  Due to the implementation,
this mode enforces that only the most recent indices are searched.  Also, given the output is continuous, you must
specify \-\-show with this option.
.IP "\fBtop\fR" 8
.IX Item "top"
Perform an aggregation returning the top field.  Limited to a single field at this time.
This option is not available when using \-\-tail.
.Sp
.Vb 1
\&    \-\-top src_ip
.Ve
.Sp
You can override the default of the \f(CW\*(C`terms\*(C'\fR bucket aggregation by prefixing
the parameter with the required bucket aggregation, i.e.:
.Sp
.Vb 1
\&    \-\-top significant_terms:src_ip
.Ve
.IP "\fBby\fR" 8
.IX Item "by"
Perform a sub aggregation on the top terms aggregation and order by the result of this aggregation.
Aggregation syntax is as follows:
.Sp
.Vb 1
\&    \-\-by <type>:<field>
.Ve
.Sp
A full example might look like this:
.Sp
.Vb 1
\&    $ es\-search.pl \-\-base access dst:www.example.com \-\-top src_ip \-\-by cardinality:acct
.Ve
.Sp
This will show the top source \s-1IP\s0's ordered by the cardinality (count of the distinct values) of accounts logging
in as each source \s-1IP,\s0 instead of the source \s-1IP\s0 with the most records.
.Sp
Supported sub agggregations and formats:
.Sp
.Vb 5
\&    cardinality:<field>
\&    min:<field>
\&    max:<field>
\&    avg:<field>
\&    sum:<field>
.Ve
.IP "\fBwith\fR" 8
.IX Item "with"
Perform a subaggregation on the top terms and report that sub aggregation details in the output.  The format is:
.Sp
.Vb 1
\&    \-\-with <aggregation>:<field>:<size>
.Ve
.Sp
The default \fBsize\fR is 3.
The default \fBaggregation\fR is 'terms'.
.Sp
\&\fBfield\fR is the only required element.
.Sp
e.g.
.Sp
.Vb 1
\&    $ es\-search.pl \-\-base logstash error \-\-top program \-\-size 2 \-\-by cardinality:host \-\-with host:5
.Ve
.Sp
This will show the top 2 programs with log messages containing the word error by the cardinality (count
distinct host) of hosts showing the top 5 hosts
.Sp
Without the \-\-with, the results might look like this:
.Sp
.Vb 2
\&    112314 0.151 sshd
\&    21224  0.151 ntp
.Ve
.Sp
The \fB\-\-with\fR option would expand that output to look like this:
.Sp
.Vb 7
\&    112314   0.151 host   bastion\-804   12431  0.111 sshd
\&    112314   0.151 host   bastion\-803   10009  0.089 sshd
\&    112314   0.151 host   bastion\-805   9768   0.087 sshd
\&    112314   0.151 host   bastion\-801   8789   0.078 sshd
\&    112314   0.151 host   bastion\-802   4121   0.037 sshd
\&    21224    0.016 host   webapp\-324    21223  0.999 ntp
\&    21224    0.016 host   mail\-42       1      0.000 ntp
.Ve
.Sp
This may be specified multiple times, the result is more \fIrows\fR, not more \fIcolumns\fR, e.g.
.Sp
.Vb 1
\&    $ es\-search.pl \-\-base logstash error \-\-top program \-\-size 2 \-\-by cardinality:host \-\-with host:5 \-\-with dc:2
.Ve
.Sp
Produces:
.Sp
.Vb 10
\&    112314 0.151  dc     arlington     112314 1.000 sshd
\&    112314 0.151  host   bastion\-804   12431  0.111 sshd
\&    112314 0.151  host   bastion\-803   10009  0.089 sshd
\&    112314 0.151  host   bastion\-805   9768   0.087 sshd
\&    112314 0.151  host   bastion\-801   8789   0.078 sshd
\&    112314 0.151  host   bastion\-802   4121   0.037 sshd
\&    21224  0.016  dc     amsterdam     21223  0.999 ntp
\&    21224  0.016  dc     la            1      0.000 ntp
\&    21224  0.016  host   webapp\-324    21223  0.999 ntp
\&    21224  0.016  host   mail\-42       1      0.000 ntp
.Ve
.Sp
You may sub aggregate using any bucket agggregation <https://www.elastic.co/guide/en/elasticsearch/reference/master/search-aggregations-bucket.html>
as long as the aggregation provides a \fBkey\fR element.  Additionally, doc_count, score, and bg_count will be reported in the output.
.Sp
Other examples:
.Sp
.Vb 11
\&    \-\-with significant_terms:crime
\&    \-\-with cardinality:accts
\&    \-\-with min:out_bytes
\&    \-\-with max:out_bytes
\&    \-\-with avg:out_bytes
\&    \-\-with sum:out_bytes
\&    \-\-with stats:out_bytes
\&    \-\-with extended_stats:out_bytes
\&    \-\-with percentiles:out_bytes
\&    \-\-with percentiles:out_bytes:50,95,99
\&    \-\-with histogram:out_bytes:1024
.Ve
.IP "\fBbg-filter\fR" 8
.IX Item "bg-filter"
Only used if the \f(CW\*(C`\-\-top\*(C'\fR aggregation is \f(CW\*(C`significant_terms\*(C'\fR.  Sets the
background filter for the \f(CW\*(C`significant_terms\*(C'\fR aggregation.
.Sp
.Vb 1
\&    es\-search.pl \-\-top significant_terms:src_ip method:POST file:\e/get\e/sensitive_data \-\-bg\-filter method:POST
.Ve
.IP "\fBinterval\fR" 8
.IX Item "interval"
When performing aggregations, wrap those aggregations in a date_histogram of this interval.  This
helps flush out \*(L"what changed in the last hour.\*(R"
.IP "\fBmatch-all\fR" 8
.IX Item "match-all"
Apply the ElasticSearch \*(L"match_all\*(R" search operator to query on all documents
in the index.  This is the default with no search parameters.
.IP "\fBprefix\fR" 8
.IX Item "prefix"
Takes a \*(L"field:string\*(R" combination and you can use multiple \-\-prefix options will be \*(L"\s-1AND\*(R"\s0'd
.Sp
Example:
.Sp
.Vb 1
\&    \-\-prefix useragent:\*(AqGo \*(Aq
.Ve
.Sp
Will search for documents where the useragent field matches a prefix search on the string 'Go '
.Sp
\&\s-1JSON\s0 Equivalent is:
.Sp
.Vb 1
\&    { "prefix": { "useragent": "Go " } }
.Ve
.IP "\fBexists\fR" 8
.IX Item "exists"
Filter results to those containing a valid, not null field
.Sp
.Vb 1
\&    \-\-exists referer
.Ve
.Sp
Only show records with a referer field in the document.
.IP "\fBmissing\fR" 8
.IX Item "missing"
Filter results to those not containing a valid, not null field
.Sp
.Vb 1
\&    \-\-missing referer
.Ve
.Sp
Only show records without a referer field in the document.
.IP "\fBbases\fR" 8
.IX Item "bases"
Display a list of bases that can be used with the \-\-base option.
.Sp
Use with \-\-verbose to show age information on the indexes in each base.
.IP "\fBfields\fR" 8
.IX Item "fields"
Display a list of searchable fields
.IP "\fBindex\fR" 8
.IX Item "index"
Search only this index for data, may also be a comma separated list
.IP "\fBdays\fR" 8
.IX Item "days"
The number of days back to search, the default is 5
.IP "\fBbase\fR" 8
.IX Item "base"
Index base name, will be expanded using the days back parameter.  The default
is 'logstash' which will expand to 'logstash\-YYYY.MM.DD'
.IP "\fBtimestamp\fR" 8
.IX Item "timestamp"
The field in your documents that we'll treat as a \*(L"date\*(R" type in our queries.
.Sp
May also be specified in the \f(CW\*(C`~/.es\-utils.yaml\*(C'\fR file per index, or index base:
.Sp
.Vb 8
\&    \-\-\-
\&    host: es\-readonly\-01
\&    port: 9200
\&    meta:
\&      bro:
\&        timestamp: \*(Aqrecord_ts\*(Aq
\&      mayans\-2012.12.21:
\&        timestamp: \*(Aqend_of_the_world\*(Aq
.Ve
.Sp
Then running:
.Sp
.Vb 2
\&    # timestamp is set to \*(Aq@timestamp\*(Aq, the default
\&    es\-search.pl \-\-base logstash \-\-match\-all
\&
\&    # timestamp is set to \*(Aqrecord_ts\*(Aq, from ~/.es\-utils.yaml
\&    es\-search.pl \-\-base bro \-\-match\-all
\&
\&    # timestamp is set to \*(Aq@timestamp\*(Aq, the default
\&    es\-search.pl \-\-base mayans \-\-match\-all
\&
\&    # timestamp is set to \*(Aqend_of_the_world\*(Aq, from ~/.es\-utils.yaml
\&    es\-search.pl \-\-index mayans\-2012.12.21 \-\-match\-all
.Ve
.IP "\fBsize\fR" 8
.IX Item "size"
The number of results to show, default is 20.
.IP "\fBmax-batch-size\fR" 8
.IX Item "max-batch-size"
When building result sets, this tool uses scroll searches.  This parameter
controls how many docs are in each scroll.  It defaults to 50, but will be
scaled down lower if \f(CW\*(C`size\*(C'\fR is smaller.
.IP "\fBall\fR" 8
.IX Item "all"
If specified, ignore the \-\-size parameter and show me everything within the date range I specified.
In the case of \-\-top, this limits the result set to 1,000,000 results.
.SH "Extended Syntax"
.IX Header "Extended Syntax"
The search string is pre-analyzed before being sent to ElasticSearch.  The following plugins
work to manipulate the query string and provide richer, more complete syntax for \s-1CLI\s0 applications.
.SS "App::ElasticSearch::Utilities::QueryString::AutoEscape"
.IX Subsection "App::ElasticSearch::Utilities::QueryString::AutoEscape"
Provide an '=' prefix to a query string parameter to promote that parameter to a \f(CW\*(C`term\*(C'\fR filter.
.PP
This allows for exact matches of a field without worrying about escaping Lucene special character filters.
.PP
E.g.:
.PP
.Vb 1
\&    user_agent:"Mozilla/5.0 (iPhone; CPU iPhone OS 12_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1"
.Ve
.PP
Is evaluated into a weird query that doesn't do what you want.   However:
.PP
.Vb 1
\&    =user_agent:"Mozilla/5.0 (iPhone; CPU iPhone OS 12_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1"
.Ve
.PP
Is translated into:
.PP
.Vb 1
\&    { term => { user_agent => "Mozilla/5.0 (iPhone; CPU iPhone OS 12_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1" } }
.Ve
.PP
Which provides an exact match to the term in the query.
.SS "App::ElasticSearch::Utilities::QueryString::Barewords"
.IX Subsection "App::ElasticSearch::Utilities::QueryString::Barewords"
The following barewords are transformed:
.PP
.Vb 3
\&    or => OR
\&    and => AND
\&    not => NOT
.Ve
.SS "App::ElasticSearch::Utilities::QueryString::IP"
.IX Subsection "App::ElasticSearch::Utilities::QueryString::IP"
If a field is an \s-1IP\s0 address uses \s-1CIDR\s0 Notation, it's expanded to a range query.
.PP
.Vb 1
\&    src_ip:10.0/8 => src_ip:[10.0.0.0 TO 10.255.255.255]
.Ve
.SS "App::ElasticSearch::Utilities::QueryString::Ranges"
.IX Subsection "App::ElasticSearch::Utilities::QueryString::Ranges"
This plugin translates some special comparison operators so you don't need to
remember them anymore.
.PP
Example:
.PP
.Vb 1
\&    price:<100
.Ve
.PP
Will translate into a:
.PP
.Vb 1
\&    { range: { price: { lt: 100 } } }
.Ve
.PP
And:
.PP
.Vb 1
\&    price:>50,<100
.Ve
.PP
Will translate to:
.PP
.Vb 1
\&    { range: { price: { gt: 50, lt: 100 } } }
.Ve
.PP
\fISupported Operators\fR
.IX Subsection "Supported Operators"
.PP
\&\fBgt\fR via >, \fBgte\fR via >=, \fBlt\fR via <, \fBlte\fR via <=
.SS "App::ElasticSearch::Utilities::QueryString::Underscored"
.IX Subsection "App::ElasticSearch::Utilities::QueryString::Underscored"
This plugin translates some special underscore surrounded tokens into
the Elasticsearch Query \s-1DSL.\s0
.PP
Implemented:
.PP
\fI_prefix_\fR
.IX Subsection "_prefix_"
.PP
Example query string:
.PP
.Vb 1
\&    _prefix_:useragent:\*(AqGo \*(Aq
.Ve
.PP
Translates into:
.PP
.Vb 1
\&    { prefix => { useragent => \*(AqGo \*(Aq } }
.Ve
.SS "App::ElasticSearch::Utilities::QueryString::FileExpansion"
.IX Subsection "App::ElasticSearch::Utilities::QueryString::FileExpansion"
If the match ends in .dat, .txt, .csv, or .json then we attempt to read a file with that name and \s-1OR\s0 the condition:
.PP
.Vb 5
\&    $ cat test.dat
\&    50  1.2.3.4
\&    40  1.2.3.5
\&    30  1.2.3.6
\&    20  1.2.3.7
.Ve
.PP
Or
.PP
.Vb 5
\&    $ cat test.csv
\&    50,1.2.3.4
\&    40,1.2.3.5
\&    30,1.2.3.6
\&    20,1.2.3.7
.Ve
.PP
Or
.PP
.Vb 5
\&    $ cat test.txt
\&    1.2.3.4
\&    1.2.3.5
\&    1.2.3.6
\&    1.2.3.7
.Ve
.PP
Or
.PP
.Vb 5
\&    $ cat test.json
\&    { "ip": "1.2.3.4" }
\&    { "ip": "1.2.3.5" }
\&    { "ip": "1.2.3.6" }
\&    { "ip": "1.2.3.7" }
.Ve
.PP
We can source that file:
.PP
.Vb 2
\&    src_ip:test.dat      => src_ip:(1.2.3.4 1.2.3.5 1.2.3.6 1.2.3.7)
\&    src_ip:test.json[ip] => src_ip:(1.2.3.4 1.2.3.5 1.2.3.6 1.2.3.7)
.Ve
.PP
This make it simple to use the \-\-data\-file output options and build queries
based off previous queries. For .txt and .dat file, the delimiter for columns
in the file must be either a tab or a null.  For files ending in
\&.csv, Text::CSV_XS is used to accurate parsing of the file format.  Files
ending in .json are considered to be newline-delimited \s-1JSON.\s0
.PP
You can also specify the column of the data file to use, the default being the last column or (\-1).  Columns are
\&\fBzero-based\fR indexing. This means the first column is index 0, second is 1, ..  The previous example can be rewritten
as:
.PP
.Vb 1
\&    src_ip:test.dat[1]
.Ve
.PP
or:
    src_ip:test.dat[\-1]
.PP
For newline delimited \s-1JSON\s0 files, you need to specify the key path you want to extract from the file.  If we have a
\&\s-1JSON\s0 source file with:
.PP
.Vb 3
\&    { "first": { "second": { "third": [ "bob", "alice" ] } } }
\&    { "first": { "second": { "third": "ginger" } } }
\&    { "first": { "second": { "nope":  "fred" } } }
.Ve
.PP
We could search using:
.PP
.Vb 1
\&    actor:test.json[first.second.third]
.Ve
.PP
Which would expand to:
.PP
.Vb 1
\&    { "terms": { "actor": [ "alice", "bob", "ginger" ] } }
.Ve
.PP
This option will iterate through the whole file and unique the elements of the list.  They will then be transformed into
an appropriate terms query <http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html>.
.SS "App::ElasticSearch::Utilities::QueryString::Nested"
.IX Subsection "App::ElasticSearch::Utilities::QueryString::Nested"
Implement the proposed nested query syntax early.  Example:
.PP
.Vb 1
\&    nested_path:"field:match AND string"
.Ve
.SH "Meta-Queries"
.IX Header "Meta-Queries"
Helpful in building queries is the \-\-bases and \-\-fields options which lists the index bases and fields:
.PP
.Vb 1
\&    es\-search.pl \-\-bases
\&
\&    es\-search.pl \-\-fields
\&
\&    es\-search.pl \-\-base access \-\-fields
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Brad Lhotsky <brad@divisionbyzero.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by Brad Lhotsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The (three\-clause) BSD License
.Ve
