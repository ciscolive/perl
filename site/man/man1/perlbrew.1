.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLBREW 1"
.TH PERLBREW 1 "2020-10-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlbrew \- Perl environment manager.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
perlbrew command syntax:
.PP
.Vb 1
\&    perlbrew <command> [options] [arguments]
.Ve
.PP
Commands:
.PP
.Vb 2
\&    init           Initialize perlbrew environment.
\&    info           Show useful information about the perlbrew installation
\&
\&    install        Install perl
\&    uninstall      Uninstall the given installation
\&    available      List perls available to install
\&    lib            Manage local::lib directories.
\&    alias          Give perl installations a new name
\&    upgrade\-perl   Upgrade the current perl
\&
\&    list           List perl installations
\&    use            Use the specified perl in current shell
\&    off            Turn off perlbrew in current shell
\&    switch         Permanently use the specified perl as default
\&    switch\-off     Permanently turn off perlbrew (revert to system perl)
\&    exec           exec programs with specified perl environments.
\&    clone\-modules  re\-installs all CPAN modules from one installation to another
\&
\&    self\-install       Install perlbrew itself under PERLBREW_ROOT/bin
\&    self\-upgrade       Upgrade perlbrew itself.
\&
\&    install\-patchperl  Install patchperl
\&    install\-cpanm      Install cpanm, a friendly companion.
\&    install\-multiple   Install multiple versions and flavors of perl
\&
\&    download       Download the specified perl distribution tarball.
\&    clean          Purge tarballs and build directories
\&    version        Display version
\&    help           Read more detailed instructions
.Ve
.PP
Generic command options:
.PP
.Vb 2
\&    \-q \-\-quiet     Be quiet on informative output message.
\&    \-v \-\-verbose   Tell me more about it.
.Ve
.PP
See `perlbrew help` for the full documentation of perlbrew, or
.PP
See `perlbrew help <command>` for detail description of the command.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.IP "\s-1PERLBREW_ROOT\s0" 4
.IX Item "PERLBREW_ROOT"
By default, perlbrew builds and installs perls into
\&\f(CW\*(C`$ENV{HOME}/perl5/perlbrew\*(C'\fR directory. To use a different directory,
set this environment variable in your \f(CW\*(C`bashrc\*(C'\fR to the directory
in your shell \s-1RC\s0 before sourcing perlbrew's \s-1RC.\s0
.Sp
It is possible to share one perlbrew root with multiple user account
on the same machine. Therefore people do not have to install the same
version of perl over an over. Let's say \f(CW\*(C`/opt/perl5\*(C'\fR is the directory
we want to share. All users should be able append this snippet to their
bashrc to make it effective:
.Sp
.Vb 2
\&    export PERLBREW_ROOT=/opt/perl5
\&    source ${PERLBREW_ROOT}/etc/bashrc
.Ve
.Sp
After doing so, everyone's \s-1PATH\s0 should include \f(CW\*(C`/opt/perl5/bin\*(C'\fR and
\&\f(CW\*(C`/opt/perl5/perls/${PERLBREW_PERL}/bin\*(C'\fR. Each user can invoke \f(CW\*(C`perlbrew
switch\*(C'\fR and \f(CW\*(C`perlbrew use\*(C'\fR to independently switch to different perl
environment of their choice. However, only the user with write permission to
\&\f(CW$PERLBREW_ROOT\fR may install \s-1CPAN\s0 modules. This is both good and bad depending
on the working convention of your team.
.Sp
If you wish to install \s-1CPAN\s0 modules only for yourself, you should use the \f(CW\*(C`lib\*(C'\fR
command to construct a personal local::lib environment. local::lib environments
are personal, and are not shared between different users. For more detail, read
\&\f(CW\*(C`perlbrew help lib\*(C'\fR and the documentation of local::lib.
.Sp
If you want even a cooler module isolation and wish to install \s-1CPAN\s0 modules used
for just one project, you should use carton for this purpose.
.Sp
It is also possible to set this variable before installing perlbrew
to make perlbrew install itself under the given \s-1PERLBREW_ROOT:\s0
.Sp
.Vb 2
\&    export PERLBREW_ROOT=/opt/perl5
\&    curl \-L http://install.perlbrew.pl | bash
.Ve
.Sp
After doing this, the perlbrew executable is installed as \f(CW\*(C`/opt/perl5/bin/perlbrew\*(C'\fR
.IP "\s-1PERLBREW_HOME\s0" 4
.IX Item "PERLBREW_HOME"
By default, perlbrew stores per-user setting to \f(CW\*(C`$ENV{HOME}/.perlbrew\*(C'\fR
directory. To use a different directory, set this environment variable
in your shell \s-1RC\s0 before sourcing perlbrew's \s-1RC.\s0
.Sp
In some cases, say, your home directory is on \s-1NFS\s0 and shared across multiple
machines, you may wish to have several different perlbrew setting
per-machine. To do so, you can use the \f(CW\*(C`PERLBREW_HOME\*(C'\fR environment variable to
tell perlbrew where to look for the initialization file. Here's a brief bash
snippet for the given scenario.
.Sp
.Vb 5
\&    if [ "$(hostname)" == "machine\-a" ]; then
\&        export PERLBREW_HOME=~/.perlbrew\-a
\&    elif [ "$(hostname)" == "machine\-b" ]; then
\&        export PERLBREW_HOME=~/.perlbrew\-b
\&    fi
\&
\&    source ~/perl5/perlbrew/etc/bashrc
.Ve
.IP "\s-1PERLBREW_CONFIGURE_FLAGS\s0" 4
.IX Item "PERLBREW_CONFIGURE_FLAGS"
This environment variable specify the list of command like flags to pass through
to 'sh Configure'. By default it is '\-de'.
.IP "\s-1PERLBREW_CPAN_MIRROR\s0" 4
.IX Item "PERLBREW_CPAN_MIRROR"
The \s-1CPAN\s0 mirror url of your choice. The default value is \*(L"http://www.cpan.org\*(R"
.SH "COMMAND: INIT"
.IX Header "COMMAND: INIT"
Usage: perlbrew init
.PP
The \f(CW\*(C`init\*(C'\fR command should be manually invoked whenever you (the perlbrew user)
upgrade or reinstall perlbrew.
.PP
If the upgrade is done with \f(CW\*(C`self\-upgrade\*(C'\fR command, or by running the
one-line installer manually, this command is invoked automatically.
.SH "COMMAND: INFO"
.IX Header "COMMAND: INFO"
.IP "\fBinfo\fR [module]" 4
.IX Item "info [module]"
Usage: perlbrew info [ <module> ]
.Sp
Display useful information about the perlbrew installation.
.Sp
If a module is given the version and location of the module is displayed.
.SH "COMMAND: INSTALL"
.IX Header "COMMAND: INSTALL"
.IP "\fBinstall\fR [options] perl\-<version>" 4
.IX Item "install [options] perl-<version>"
.PD 0
.IP "\fBinstall\fR [options] <version>" 4
.IX Item "install [options] <version>"
.PD
Build and install the given version of perl.
.Sp
Version numbers usually look like \*(L"5.x.xx\*(R", or
\&\*(L"perl\-5.xx.x\-RCx\*(R" for release candidates.
.Sp
The specified perl is downloaded from the official \s-1CPAN\s0 website or from the
mirror site configured before.
.Sp
Add '\-\-mirror \f(CW$URL\fR' to specify the \s-1URL\s0 of mirror site.
.IP "\fBinstall\fR [options] cperl\-<version>" 4
.IX Item "install [options] cperl-<version>"
Install the cperl distribution released from:
.Sp
.Vb 1
\&    https://github.com/perl11/cperl/releases
.Ve
.Sp
See  http://perl11.org/cperl/ for more information about cperl distribution.
.IP "\fBinstall\fR [options]  perl-stable" 4
.IX Item "install [options] perl-stable"
.PD 0
.IP "\fBinstall\fR [options]  stable" 4
.IX Item "install [options] stable"
.PD
A convenient way to install the most recent stable version of Perl, of those
that are available.
.IP "\fBinstall\fR [options]  perl-blead" 4
.IX Item "install [options] perl-blead"
.PD 0
.IP "\fBinstall\fR [options]  blead" 4
.IX Item "install [options] blead"
.PD
A special way to install the blead version of perl, which is downloaded from
this specific \s-1URL\s0 regardless of mirror settings:
.Sp
.Vb 1
\&    http://perl5.git.perl.org/perl.git/snapshot/blead.tar.gz
.Ve
.IP "\fBinstall\fR  [options] /path/to/perl/git/checkout/dir" 4
.IX Item "install [options] /path/to/perl/git/checkout/dir"
Build and install from the given git checkout dir.
.IP "\fBinstall\fR  [options] /path/to/perl\-5.14.0.tar.gz" 4
.IX Item "install [options] /path/to/perl-5.14.0.tar.gz"
Build and install from the given archive file.
.IP "\fBinstall\fR  [options] http://example.com/mirror/perl\-5.12.3.tar.gz" 4
.IX Item "install [options] http://example.com/mirror/perl-5.12.3.tar.gz"
Build and install from the given \s-1URL.\s0 Supported \s-1URL\s0 schemes are \f(CW\*(C`http://\*(C'\fR,
\&\f(CW\*(C`https://\*(C'\fR, \f(CW\*(C`ftp://\*(C'\fR and \f(CW\*(C`file://\*(C'\fR.
.PP
Options for \f(CW\*(C`install\*(C'\fR command:
.PP
.Vb 3
\&    \-f \-\-force     Force installation
\&    \-j $n          Parallel building and testing. ex. C<perlbrew install \-j 5 perl\-5.14.2>
\&    \-n \-\-notest    Skip testing
\&
\&       \-\-switch    Automatically switch to this Perl once successfully
\&                   installed, as if with \`perlbrew switch <version>\`
\&
\&       \-\-as        Install the given version of perl by a name.
\&                   ex. C<perlbrew install perl\-5.6.2 \-\-as legacy\-perl>
\&
\&       \-\-noman     Skip installation of manpages
\&
\&       \-\-thread    Build perl with usethreads enabled
\&       \-\-multi     Build perl with usemultiplicity enabled
\&       \-\-64int     Build perl with use64bitint enabled
\&       \-\-64all     Build perl with use64bitall enabled
\&       \-\-ld        Build perl with uselongdouble enabled
\&       \-\-debug     Build perl with DEBUGGING enabled
\&       \-\-clang     Build perl using the clang compiler
\&       \-\-no\-patchperl
\&                   Skip calling patchperl
\&
\&    \-D,\-U,\-A       Switches passed to perl Configure script.
\&                   ex. C<perlbrew install perl\-5.10.1 \-D usemymalloc \-U versiononly>
\&
\&    \-\-destdir $path
\&                   Install perl as per \*(Aqmake install DESTDIR=$path\*(Aq
\&
\&    \-\-sitecustomize $filename
\&                   Specify a file to be installed as sitecustomize.pl
.Ve
.PP
By default, all installations are configured after their name like this:
.PP
.Vb 1
\&    sh Configure \-de \-Dprefix=$PERLBREW_ROOT/perls/<name>
.Ve
.SH "COMMAND: INSTALL-MULTIPLE"
.IX Header "COMMAND: INSTALL-MULTIPLE"
Usage: perlbrew install-multiple [options] <perl\-version\-1> <perl\-version\-2> ...
.PP
Build and install the given versions of perl.
.PP
\&\f(CW\*(C`install\-multiple\*(C'\fR accepts the same set of options as the command
\&\f(CW\*(C`install\*(C'\fR plus the following ones:
.PP
.Vb 2
\&    \-\-both $flavor       Where $flavor is one of C<thread>, C<multi>, C<ld>,
\&                         C<64int>, C<64all>, C<debug> and C<clang>.
\&
\&                         For every given perl version, install two
\&                         flavors, one with the flag C<\-\-$flavor> set
\&                         and the other with out. C<\-\-both> can be
\&                         passed multiple times with different values
\&                         and in that case, all the possible
\&                         combinations are generated.
\&
\&    \-\-common\-variations  equivalent to C<\-\-both thread \-\-both ld \-\-both 64int>
\&
\&    \-\-all\-variations     generates all the possible flavor combinations
\&
\&    \-\-append $string     Appends the given string to the generated names
.Ve
.PP
For instance:
.PP
.Vb 1
\&    perlbrew install\-multiple 5.18.0 blead \-\-both thread \-\-both debug
.Ve
.PP
Installs the following perls:
.PP
.Vb 8
\&    perl\-blead
\&    perl\-blead\-debug
\&    perl\-blead\-thread\-multi
\&    perl\-blead\-thread\-multi\-debug
\&    perl\-5.18.0
\&    perl\-5.18.0\-debug
\&    perl\-5.18.0\-thread\-multi
\&    perl\-5.18.0\-thread\-multi\-debug
.Ve
.PP
(note that the \f(CW\*(C`multi\*(C'\fR flavor is selected automatically because
\&\f(CW\*(C`thread\*(C'\fR requires it)
.PP
Another example using custom compilation flags:
.PP
.Vb 1
\&    perlbrew install\-multiple 5.18.0 \-\-both thread \-Doptimize=\*(Aq\-O3\*(Aq \-\-append=\*(Aq\-O3\*(Aq
.Ve
.SH "COMMAND: UNINSTALL"
.IX Header "COMMAND: UNINSTALL"
Usage: perlbrew uninstall <name>
.PP
Uninstalls the given perl installation. The name is the installation name as in
the output of `perlbrew list`. This effectively deletes the specified perl installation,
and all libs associated with it.
.SH "COMMAND: USE"
.IX Header "COMMAND: USE"
Usage: perlbrew \fBuse\fR [perl\-<version> | <version> | <name>]
.PP
Use the given version perl in current shell. This will not effect newly opened
shells.
.PP
Without a parameter, shows the version of perl currently in use.
.SH "COMMAND: SWITCH"
.IX Header "COMMAND: SWITCH"
Usage: perlbrew switch [ <name> ]
.PP
Switch to the given version, and makes it the default for this and all
future terminal sessions.
.PP
Without a parameter, shows the version of perl currently selected.
.SH "COMMAND: LIST"
.IX Header "COMMAND: LIST"
Usage: perlbrew list
.PP
List all perl installations inside perlbrew root specified by \f(CW$PERLBREW_ROOT\fR
environment variable. By default, the value is \f(CW\*(C`~/perl5/perlbrew\*(C'\fR.
.PP
If there are libs associated to some perl installations, they will be included
as part of the name. The output items in this list can be the argument in
various other commands.
.SH "COMMAND: AVAILABLE"
.IX Header "COMMAND: AVAILABLE"
Usage: perlbrew available [\-\-all]
.PP
List the recently available versions of perl on \s-1CPAN.\s0
.PP
The list is retrieved from the web page <http://www.cpan.org/src/README.html>,
and is not the list of *all* perl versions ever released in the past.
.PP
To get a list of all perls ever released, use the \f(CW\*(C`\-\-all\*(C'\fR option.
.PP
\&\s-1NOTICE:\s0 This command might be gone in the future and become an option of 'list' command.
.SH "COMMAND: OFF"
.IX Header "COMMAND: OFF"
Usage: perlbrew off
.PP
Temporarily disable perlbrew in the current shell. Effectively re-enables the
default system Perl, whatever that is.
.PP
This command works only if you add the statement of `source \f(CW$PERLBREW_ROOT\fR/etc/bashrc`
in your shell initialization (bashrc / zshrc).
.SH "COMMAND: SWITCH-OFF"
.IX Header "COMMAND: SWITCH-OFF"
Usage: perlbrew switch-off
.PP
Permananently disable perlbrew. Use \f(CW\*(C`switch\*(C'\fR command to re-enable it. Invoke
\&\f(CW\*(C`use\*(C'\fR command to enable it only in the current shell.
.PP
Re-enables the default system Perl, whatever that is.
.SH "COMMAND: ALIAS"
.IX Header "COMMAND: ALIAS"
Usage: perlbrew alias [\-f] create <name> <alias>
.PP
.Vb 1
\&    Create an alias for the installation named <name>.
.Ve
.PP
Usage: perlbrew alias [\-f] rename <old_alias> <new_alias>
.PP
.Vb 1
\&    Rename the alias to a new name.
.Ve
.PP
Usage: perlbrew alias delete <alias>
.PP
.Vb 1
\&    Delete the given alias.
.Ve
.SH "COMMAND: EXEC"
.IX Header "COMMAND: EXEC"
Usage: perlbrew exec [options] <command> <args...>
.PP
Options for \f(CW\*(C`exec\*(C'\fR command:
.PP
.Vb 5
\&    \-\-with perl\-version,... \- only use these versions
\&    \-\-min n.nnnnn           \- minimum perl version
\&                              (format is the same as in \*(Aquse 5.012\*(Aq)
\&    \-\-max n.nnnnn           \- maximum perl version
\&    \-\-halt\-on\-error         \- stop on first nonzero exit status
.Ve
.PP
Execute command for each perl installations, one by one.
.PP
For example, run a Hello program:
.PP
.Vb 1
\&    perlbrew exec perl \-e \*(Aqprint "Hello from $]\en"\*(Aq
.Ve
.PP
The output looks like this:
.PP
.Vb 3
\&    perl\-5.12.2
\&    ==========
\&    Hello word from perl\-5.012002
\&
\&    perl\-5.13.10
\&    ==========
\&    Hello word from perl\-5.013010
\&
\&    perl\-5.14.0
\&    ==========
\&    Hello word from perl\-5.014000
.Ve
.PP
Notice that the command is not executed in parallel.
.PP
When \f(CW\*(C`\-\-with\*(C'\fR argument is provided, the command will be only executed with the
specified perl installations. The following command install Moose module into
perl\-5.12, regardless the current perl:
.PP
.Vb 1
\&    perlbrew exec \-\-with perl\-5.12 cpanm Moose
.Ve
.PP
Multiple installation names can be provided:
.PP
.Vb 1
\&    perlbrew exec \-\-with perl\-5.12,perl\-5.12\-debug,perl\-5.14.2 cpanm Moo
.Ve
.PP
They are split by either spaces or commas. When spaces are used, it is required
to quote the whole specification as one argument, but then commas can be used in
the installation names:
.PP
.Vb 1
\&    perlbrew exec \-\-with \*(Aq5.12 5.12,debug 5.14.2@nobita @shizuka\*(Aq cpanm Moo
.Ve
.PP
As demonstrated above, \*(L"perl\-\*(R" prefix can be omitted, and lib names can be
specified too. Lib names can appear without a perl installation name, in such
cases it is assumed to be \*(L"current perl\*(R".
.PP
At the moment, any specified names that fails to be resolved as a real
installation names are silently ignored in the output. Also, the command exit
status are not populated back.
.SH "COMMAND: ENV"
.IX Header "COMMAND: ENV"
Usage: perlbrew env [ <name> ]
.PP
Low-level command. Invoke this command to see the list of environment
variables that are set by \f(CW\*(C`perlbrew\*(C'\fR itself for shell integration.
.PP
The output is something similar to this (if your shell is bash/zsh):
.PP
.Vb 4
\&    export PERLBREW_ROOT=/Users/gugod/perl5/perlbrew
\&    export PERLBREW_VERSION=0.31
\&    export PERLBREW_PATH=/Users/gugod/perl5/perlbrew/bin:/Users/gugod/perl5/perlbrew/perls/current/bin
\&    export PERLBREW_PERL=perl\-5.14.1
.Ve
.PP
tcsh / csh users should see 'setenv' statements instead of `export`.
.SH "COMMAND: SYMLINK-EXECUTABLES"
.IX Header "COMMAND: SYMLINK-EXECUTABLES"
Usage: perlbrew symlink-executables [ <name> ]
.PP
Low-level command. This command is used to create the \f(CW\*(C`perl\*(C'\fR executable
symbolic link to, say, \f(CW\*(C`perl5.13.6\*(C'\fR. This is only required for
development version of perls.
.PP
You don't need to do this unless you have been using old perlbrew to install
perls, and you find yourself confused because the perl that you just installed
appears to be missing after invoking `use` or `switch`. perlbrew changes its
installation layout since version 0.11, which generates symlinks to executables
in a better way.
.PP
If you just upgraded perlbrew (from 0.11 or earlier versions) and \f(CW\*(C`perlbrew
switch\*(C'\fR failed to work after you switch to a development release of perl, say,
perl\-5.13.6, run this command:
.PP
.Vb 1
\&    perlbrew symlink\-executables perl\-5.13.6
.Ve
.PP
This essentially creates this symlink:
.PP
.Vb 2
\&   ${PERLBREW_ROOT}/perls/perl\-5.13.6/bin/perl
\&   \-> ${PERLBREW_ROOT}/perls/perl\-5.13.6/bin/perl5.13.6
.Ve
.PP
Newly installed perls, whether they are development versions or not, does not
need manually treatment with this command.
.SH "COMMAND: INSTALL-CPANM"
.IX Header "COMMAND: INSTALL-CPANM"
Usage: perlbrew install-cpanm
.PP
Install the \f(CW\*(C`cpanm\*(C'\fR standalone executable in \f(CW\*(C`$PERLBREW_ROOT/bin\*(C'\fR.
.PP
For more rationale about the existence of this command, read
<http://perlbrew.pl/Perlbrew\-and\-Friends.html>
.SH "COMMAND: INSTALL-PATCHPERL"
.IX Header "COMMAND: INSTALL-PATCHPERL"
Usage: perlbrew install-patchperl
.PP
Install the \f(CW\*(C`patchperl\*(C'\fR standalone executable in \f(CW\*(C`$PERLBREW_ROOT/bin\*(C'\fR.  This
is automatically invoked if your perlbrew installation is done with the
installer, but not with cpan.
.PP
For more rationale about the existence of this command, read
<http://perlbrew.pl/Perlbrew\-and\-Friends.html>
.SH "COMMAND: SELF-UPGRADE"
.IX Header "COMMAND: SELF-UPGRADE"
Usage: perlbrew self-upgrade
.PP
This command upgrades Perlbrew to its latest version.
.SH "COMMAND: SELF-INSTALL"
.IX Header "COMMAND: SELF-INSTALL"
Usage: perlbrew self-install
.PP
\&\s-1NOTICE:\s0 You should not need to run this command in your daily routine.
.PP
This command installs perlbrew itself to \f(CW\*(C`$PERLBREW_ROOT/bin\*(C'\fR. It is intended to
be used by the perlbrew installer. However, you could manually do the following
to re-install only the \f(CW\*(C`perlbrew\*(C'\fR executable:
.PP
.Vb 2
\&    curl https://raw.githubusercontent.com/gugod/App\-perlbrew/master/perlbrew \-o perlbrew
\&    perl ./perlbrew self\-install
.Ve
.PP
It is slightly different from running the perlbrew installer because
\&\f(CW\*(C`patchperl\*(C'\fR is not installed in this case.
.SH "COMMAND: CLEAN"
.IX Header "COMMAND: CLEAN"
Usage: perlbrew clean
.PP
Removes all previously downloaded Perl tarballs and build directories.
.SH "COMMAND: VERSION"
.IX Header "COMMAND: VERSION"
Usage: perlbrew version
.PP
Show the version of perlbrew.
.SH "COMMAND: LIB"
.IX Header "COMMAND: LIB"
Usage: perlbrew lib <action> <lib\-name>
.PP
.Vb 3
\&    perlbrew lib list
\&    perlbrew lib create <lib\-name>
\&    perlbrew lib delete <lib\-name>
.Ve
.PP
The `lib` command is used to manipulate local::lib roots inside perl
installations. Effectively it is similar to `perl
\&\-Mlocal::lib=/path/to/lib\-name`, but a little bit more than just that.
.PP
A lib name can be a short name, containing alphanumeric, like 'awesome', or a
full name, prefixed by a perl installation name and a '@' sign, for example,
\&'perl\-5.14.2@awesome'.
.PP
Here are some a brief examples to invoke the `lib` command:
.PP
.Vb 2
\&    # Create lib perl\-5.12.3@shizuka
\&    perlbrew lib create perl\-5.12.3@shizuka
\&
\&    # Create lib perl\-5.14.2@nobita and perl\-5.14.2@shizuka
\&    perlbrew use perl\-5.14.2
\&    perlbrew lib create nobita
\&    perlbrew lib create shizuka
\&
\&    # See the list of use/switch targets
\&    perlbrew list
\&
\&    # Activate a lib in current shell
\&    perlbrew use perl\-5.12.3@shizuka
\&    perlbrew use perl\-5.14.2@nobita
\&    perlbrew use perl\-5.14.2@shizuka
\&
\&    # Activate a lib as default
\&    perlbrew switch perl\-5.12.3@shizuka
\&    perlbrew switch perl\-5.14.2@nobita
\&    perlbrew switch perl\-5.14.2@shizuka
\&
\&    # Delete lib perl\-5.14.2@nobita and perl\-5.14.2@shizuka
\&    perlbrew use perl\-5.14.2
\&    perlbrew lib delete nobita
\&    perlbrew lib delete shizuka
\&
\&    # Delete lib perl\-5.12.3@shizuka
\&    perlbrew lib delete perl\-5.12.3@shizuka
.Ve
.PP
Short lib names are local to current perl. A lib name 'nobita' can refer to
\&'perl\-5.12.3@nobita' or 'perl\-5.14.2@nobita', depending on your current perl.
.PP
When \f(CW\*(C`use\*(C'\fRing or \f(CW\*(C`switch\*(C'\fRing to a lib, always provide the long name. A simple
rule: the argument to \f(CW\*(C`use\*(C'\fR or \f(CW\*(C`switch\*(C'\fR command should appear in the output of
\&\f(CW\*(C`perlbrew list\*(C'\fR.
.SH "COMMAND: UPGRADE-PERL"
.IX Header "COMMAND: UPGRADE-PERL"
Usage: perlbrew upgrade-perl
.PP
Minor Perl releases (ex. 5.x.*) are binary compatible with one another, so this
command offers you the ability to upgrade older perlbrew environments in place.
.PP
It upgrades the currently activated perl to its latest released brothers. If you
have a shell with 5.14.0 activated, it upgrades it to 5.14.2.
.SH "COMMAND: DOWNLOAD"
.IX Header "COMMAND: DOWNLOAD"
Usage:
.PP
.Vb 3
\&    perlbrew download perl\-5.14.2
\&    perlbrew download perl\-5.16.1
\&    perlbrew download perl\-5.17.3
.Ve
.PP
Download the specified version of perl distribution tarball under \f(CW\*(C`$PERLBREW_ROOT/dists/\*(C'\fR directory.
.SH "COMMAND: LIST-MODULES"
.IX Header "COMMAND: LIST-MODULES"
List all installed cpan modules for the current perl.
.PP
This command can be used in conjunction with `perlbrew exec` to migrate
your module installation to different perl. The following command
re-installs all modules under perl\-5.16.0:
.PP
.Vb 1
\&    perlbrew list\-modules | perlbrew exec \-\-with perl\-5.16.0 cpanm
.Ve
.PP
Note that this installs the \fIlatest\fR versions of the Perl modules on the new perl,
which are not necessarily the \fIsame\fR module versions you had installed previously.
.SH "COMMAND: CLONE-MODULES"
.IX Header "COMMAND: CLONE-MODULES"
This command re-installs all \s-1CPAN\s0 modules found from one installation to another.
.PP
Usage:
    perlbrew clone-modules <src_version> <dst_version>
.PP
for example
.PP
.Vb 1
\&    perlbrew clone\-modules 5.26.1 5.27.7
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
App::perlbrew, App::cpanminus, Devel::PatchPerl
