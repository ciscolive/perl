.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "NETSH 1"
.TH NETSH 1 "2020-08-14" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
netsh \- A shell environment for interacting with networking devices
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
netsh [(subset of) snmpcmd arguments] hostname[,hostname...] [command]
.SH "OPTIONAL PERL MODULES"
.IX Header "OPTIONAL PERL MODULES"
There are some optional perl modules which make using the shell nicer
in general.  These modules are:
.PP
.Vb 3
\&  Text::FormatTable
\&  Term::ReadLine::Gnu or Term::ReadLine::Perl
\&  Term::ANSIColor
.Ve
.PP
You can install these by running [as root]:
.PP
.Vb 3
\&  perl \-MCPAN \-e shell
\&  cpan> install Text::FormatTable
\&  ...
.Ve
.PP
It is \fBstrongly\fR recommend you at least install the Text::FormatTable
module, and if you like command line editing one of the two extra
Term::ReadLine modules (Gnu being the better of the two).
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The netsh script provides an interactive, console-like environment
suitable for monitoring and manipulating data within networking
devices.  The environment is highly extensible through command
aliases and easy-to-use SQL-like queries.
.PP
It is implemented on top of the \s-1SNMP\s0 protocol using the net-snmp
package and perl.  See the snmpcmd and snmp.conf manual pages for
details on configuring net-snmp for authentication information for
the networking devices you wish to access.
.SH "ABOUT THE EXAMLPES IN THIS DOCUMENT"
.IX Header "ABOUT THE EXAMLPES IN THIS DOCUMENT"
All the examples in this document are exact cut-n-pastes from the
inside of the netsh shell.  This includes the \*(L"netsh> \*(R" prompt and
possibly other prompts as well.
.SH "COMMANDS"
.IX Header "COMMANDS"
The following is a list of the basic core commands supported by
netsh.  Many default aliases are also supplied, some of which are
listed in the next section.  At the command prompt type \*(L"alias\*(R" for
a full list of all the aliases and their definitions.
.IP "show columns from \s-1TABLE\s0" 4
.IX Item "show columns from TABLE"
.PD 0
.IP "select ..." 4
.IX Item "select ..."
.IP "update ..." 4
.IX Item "update ..."
.IP "insert ..." 4
.IX Item "insert ..."
.IP "delete ..." 4
.IX Item "delete ..."
.PD
netsh supports the standard sql-like language queries of snmp tables.
These are implemented via the SQL::Statement parser, so any form of
expression it accepts netsh will accept as well.
.Sp
Examples:
.Sp
.Vb 12
\&  netsh> show columns from ifTable
\&  +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&  |           Column|
\&  +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&  |          ifIndex|
\&  ...
\&  netsh> select * from ifTable
\&  ... [output not shown]
\&  netsh> select tcpConnState, tcpConnRemotelAddress from tcpConnTable where tcpConnState = established
\&  ... [output not shown]
\&  netsh> update ifTable set ifAdminStatus = up where ifOperStatus = down
\&  ... [output not shown]
.Ve
.IP "\s-1SNMPOBJECT\s0" 4
.IX Item "SNMPOBJECT"
Simple lists of objects may be given which will directly request or
operate on those objects.  See printf below for controlling the
formatting of results
.Sp
Examples:
.Sp
.Vb 3
\&  netsh> sysContact.0, sysLocation.0
\&  hardaker@somewhere.net my location
\&  netsh> sysContact.0 = my new contact information
.Ve
.IP "alias my_command some other command" 4
.IX Item "alias my_command some other command"
or
.PP
alias my_many_commands {
  command1
  command2
  prompt \s-1NUMBER\s0 question
.PP
}
.IP "\(bu" 4
You can create aliases of your frequently used commands by aliasing
them to an easy to remember name.  \eN parameters in the defined
command will be replaced by the positional argument of options passed
to the alias name.
.Sp
For multi-line defined aliases, optional prompts may be given to
request information from the user when the NUMBERth argument is not
given to the alias.  If it is not given, the prompt will be printed
and the user will be asked to input a value for it.  This allows the
easy definition of interactive commands.  The value will be inserted
in alias parts containing \eN substitution requests.
.Sp
.Vb 10
\&  netsh> alias interfaces select ifDescr from ifTable
\&  netsh> interfaces
\&  +\-\-\-\-\-\-\-+
\&  |ifDescr|
\&  +\-\-\-\-\-\-\-+
\&  |     lo|
\&  |   eth0|
\&  +\-\-\-\-\-\-\-+
\&  netsh> alias interface select ifDescr, ifSpeed from ifTable where ifDescr = \*(Aq\e1\*(Aq
\&  netsh> interface eth0
\&  +\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-+
\&  |ifDescr| ifSpeed|
\&  +\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-+
\&  |   eth0|10000000|
\&  +\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-+
.Ve
.IP "\(bu" 4
printf \s-1FORMATSTRING COMMAND\s0
.Sp
Allows \fBcareful\fR formatting of results returned by the commands.
.Sp
Example:
.Sp
.Vb 7
\&  netsh> alias interface {
\&  define interface> printf "interface %s is running at %d Mb/s\en" select ifDescr, ifSpeed from ifTable where ifDescr = \*(Aq\e1\*(Aq
\&  define interface> prompt 1 Enter the interface to describe:
\&  define interface> }
\&  netsh> interface
\&  Enter the interface to describe: eth0
\&  interface eth0 is running at 10000000 Mb/s
.Ve
.Sp
To list the definition of an already defined command, simply exclude
the definition and netsh will report the definition to you:
.Sp
.Vb 5
\&  netsh> alias interface
\&  alias interface {
\&    printf "interface %s is running at %d Mb/s\en" select ifDescr, ifSpeed from ifTable where ifDescr = \*(Aq\e1\*(Aq
\&    prompt 1 Enter the interface to describe:
\&  }
.Ve
.Sp
To list all the aliases defined in the system, just type \*(L"alias\*(R" by itself.
.IP "\(bu" 4
watch [\s-1TIME\s0] \s-1COMMAND\s0
.Sp
Continually watches the results of the \s-1COMMAND\s0 being run, which is run
every \s-1TIME\s0 seconds.  For select statements, it will attempt to mark
the changing values from one screen to the next by surrounding them
with \*(L"*\*(R"s or color (assuming you have the Term::ANSIColor perl module
installed) for easy picking out on the screen.
.IP "\(bu" 4
rehash
.Sp
Re-load the alias definitions files in the common directory, as
well as those files found in \f(CW$HOME\fR/.snmp/netsh.
.IP "\(bu" 4
source \s-1FILE\s0
.Sp
loads definitons and commands from \s-1FILE\s0 into the running environment.
.SH "FILES"
.IX Header "FILES"
By default, netsh will source all the definition files it can find.
It does this by first reading everything in
/usr/local/share/snmp/netsh/* and then reading everything in
\&\f(CW$HOME\fR/.snmp/netsh/*.  Everything contained in these files are
commands, but most frequently they entirely consist of aliases
definitions.
.SH "AUTHOR"
.IX Header "AUTHOR"
bugs, comments, questions to net\-snmp\-users@lists.sourceforge.net
.SH "Copyright"
.IX Header "Copyright"
.Vb 4
\&     Copyright (c) 2002 Networks Associates Technology, Inc. All
\&     rights reserved.  This program is free software; you can
\&     redistribute it and/or modify it under the same terms as Perl
\&     itself.
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 774:" 4
.IX Item "Around line 774:"
Expected '=item *'
.IP "Around line 799:" 4
.IX Item "Around line 799:"
Expected '=item *'
.IP "Around line 807:" 4
.IX Item "Around line 807:"
Expected '=item *'
.IP "Around line 812:" 4
.IX Item "Around line 812:"
Expected '=item *'
