.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PERLDL 1"
.TH PERLDL 1 "2019-12-08" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perldl \- Simple shell for PDL (see also pdl2)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Use \s-1PDL\s0 interactively:
.PP
.Vb 2
\&  bash$ perldl
\&  pdl> $x = sequence(10) # or any other perl or PDL command
\&  
\&  bash$ pdl
\&  pdl> print "Hello, world!\en";
.Ve
.PP
Run a script:
.PP
.Vb 4
\&  bash$ cat > pdlscript
\&  #!/usr/bin/pdl
\&  print "Hello, world!\en";
\&  ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The program \fBperldl\fR is a simple shell (written in perl) for
interactive use of \s-1PDL.\s0  It consists of a command-line interface that
supports immediate interpretation of perl commands and expressions.
Perl expressions, including \s-1PDL\s0 constructs, can be entered directly at
the keyboard and are compiled and executed immediately.  The syntax is
not exactly identical to Perl, in that under most circumstances ending
a line causes immediate execution of the command entered so far (no
trailing ';' is required).
.PP
The synonym \fBpdl\fR is a compiled executable that is useful as a script
interpreter using \s-1UNIX\s0 shebang (\f(CW\*(C`#!\*(C'\fR) syntax.  This is useful for generating
and re-executing command-journal files from \fBperldl\fR.
.PP
The \fBperldl\fR shell runs an initial startup file (\f(CW\*(C`~/.perldlrc\*(C'\fR) that can
be used to pre-load perl modules or configure the global perl environment.  It 
features a path mechanism for autoloading perl subroutines.  There is a
command-history mechanism, and several other useful features such as command 
preprocessing, shortcuts for commonly used commands such as \*(L"print\*(R", 
and the ability to execute arbitrary code whenever a prompt is printed.
.PP
Depending on your configuration settings, \fBperldl\fR can be set to
honor or ignore the ^D (end-of-file) character when sent from a
terminal, or to attempt to do the Right Thing when a block construct
spanning multiple lines is encountered.
.PP
\&\fBperldl\fR and \fBpdl\fR support several command-line options, which are
discussed near the end of this document.
.SS "Reference manual & online help"
.IX Subsection "Reference manual & online help"
The \s-1PDL\s0 reference manual and online help are available from within 
\&\fBperldl\fR, using the \fBhelp\fR and \fBapropos\fR commands (which may also
be abbreviated \fB?\fR and \fB??\fR.)   The \fBhelp\fR command alone prints a summary of
help syntax, and \fBhelp <module\-name>\fR will print \s-1POD\s0 documentation
from the module you mention (\s-1POD\s0 is the Perl format for embedding 
documentation in your perl code; see perlpod for details).
.PP
If you include \s-1POD\s0 documentation in your autoload subroutines (see
\&\fBpath mechanism\fR below), then both \fBhelp\fR and \fBapropos\fR will find it 
and be able to format and display it on demand.
.SS "History mechanism"
.IX Subsection "History mechanism"
If you have the perl modules ReadLines and ReadKeys installed, then
\&\fBperldl\fR supports a history and line-editing mechanism using editing
keys similar to emacs. The last 500 commands are always stored in
the file \fI.perldl_hist\fR in your home directory between sessions.
Set \f(CW$PERLDL::HISTFILESIZE\fR to change the number of lines saved.
The command \f(CW\*(C`l [number]\*(C'\fR shows you the last \f(CW\*(C`number\*(C'\fR commands you
typed where \f(CW\*(C`number\*(C'\fR defaults to 20.
.PP
e.g.:
.PP
.Vb 6
\&   bash$ perldl
\&   ReadLines enabled
\&   pdl> $x = rfits "foo.fits"
\&   BITPIX =  \-32  size = 88504 pixels
\&   Reading  354016 bytes
\&   BSCALE =  &&  BZERO =
\&
\&   pdl> imag log($x+400)
\&   Displaying 299 x 296 image from 4.6939525604248 to 9.67116928100586 ...
.Ve
.SS "Command execution"
.IX Subsection "Command execution"
If you enter a simple command at the \fBperldl\fR command line, it is
immediately executed in a Perl \f(CW\*(C`eval()\*(C'\fR.  The environment is almost
identical to that within a perl script, with some important exceptions:
.IP "\(bu" 3
\&\f(CW$_\fR is not preserved across lines
.Sp
\&\f(CW$_\fR is used to hold the command line for initial processing, so at the
beginning of processing of each command line, \f(CW$_\fR contains the command itself.
Use variables other than \f(CW$_\fR to store values across lines.
.IP "\(bu" 3
Scope is not preserved across lines
.Sp
Each command line is executed in a separate \f(CW\*(C`eval\*(C'\fR block within perl,
so scoping commands such as \f(CW\*(C`my\*(C'\fR and \f(CW\*(C`local\*(C'\fR may not perform exactly
as expected \*(-- in particular, if you declare a variable with \f(CW\*(C`my\*(C'\fR, it
is local to the particular command line on which you typed the \f(CW\*(C`my\*(C'\fR
command, which means that it will evaporate before the next prompt is printed.
(You can use \f(CW\*(C`my\*(C'\fR variables in a multi-line block or to isolate values within 
a single command line, of course).
.Sp
.Vb 1
\&  NOTE: pdl2 preserves lexical scope between lines.
.Ve
.IP "\(bu" 3
Execution is immediate
.Sp
Under most circumstances, as soon as you end a line of input the line
is parsed and executed.  This breaks Perl's normal dependence on
semicolons as command delimiters.  For example, the two-line expression
.Sp
.Vb 2
\&  print "Hello ",
\&     "world";
.Ve
.Sp
prints the phrase \f(CW\*(C`Hello world\*(C'\fR in Perl, but (under most circumstances) 
\&\f(CW\*(C`Hello \*(C'\fR in \fBperldl\fR.
.IP "\(bu" 3
Multi-line execution
.Sp
In multiline mode (which is enabled by default, see \fBShell
variables\fR, below), \fBperldl\fR searches for searches for block-like
constructs with curly braces, parentheses, quotes, and related
delimiters.  If you leave such a construct open, \fBperldl\fR accepts more
lines of input until you close the construct or explicitly end the multi-line
expression with ^D.   Following the example above, the phrase
.Sp
.Vb 2
\&  { print "Hello ",
\&       "world"; }
.Ve
.Sp
will print \*(L"Hello world\*(R" from either Perl or (in multi-line mode)
\&\fBperldl\fR.
.Sp
\&\fBWarning\fR: The multi-line parsing uses Damian Conway's
Text::Balanced module, which contains some flaws \*(-- so it can be
fooled by quote-like operators such as \f(CW\*(C`q/.../\*(C'\fR, included \s-1POD\s0
documentation, multi-line \f(CW\*(C`<<\*(C'\fR quotes, and some
particularly bizarre-but-valid \f(CW\*(C`m/.../\*(C'\fR matches and \f(CW\*(C`s/.../.../\*(C'\fR
substitutions.  In such cases, use ^D to close out the multi-line construct and
force compilation-and-execution.
.PP
If you want to preserve this behavior in a script (for example to replay a command
journal file; see below on how to create one), you can use \fBpdl\fR instead of \fBperl\fR
as the interpreter in the script's initial shebang line.
.ie n .SS "Terminating ""perldl"""
.el .SS "Terminating \f(CWperldl\fP"
.IX Subsection "Terminating perldl"
A \f(CW\*(C`perldl\*(C'\fR session can be terminated with any of the commands
\&\f(CW\*(C`quit\*(C'\fR, \f(CW\*(C`exit\*(C'\fR or the shorthands \f(CW\*(C`x\*(C'\fR or \f(CW\*(C`q\*(C'\fR.  If \s-1EOF\s0 handling is
switched on (the default) you can also type ^D at the command prompt.
.PP
If the command input is \s-1NOT\s0 a terminal (for example if you are running
from a command journal file), then \s-1EOF\s0 will always terminate \fBperldl\fR.
.SS "Terminating commands (Ctrl-C handling)"
.IX Subsection "Terminating commands (Ctrl-C handling)"
Commands executed within \f(CW\*(C`perldl\*(C'\fR can be terminated prematurely
using \f(CW\*(C`Ctrl\-C\*(C'\fR (or whichever key sequence sends an \s-1INT\s0 signal
to the process on your terminal). Provided your \s-1PDL\s0 code does not
ignore \f(CW\*(C`sigint\*(C'\fRs this should throw you back at the \f(CW\*(C`perldl\*(C'\fR
command prompt:
.PP
.Vb 3
\&  pdl> $result = start_lengthy_computation()
\&   <Ctrl\-C>
\& Ctrl\-C detected
\&
\&  pdl>
.Ve
.SS "Shortcuts and aliases"
.IX Subsection "Shortcuts and aliases"
.IP "\(bu" 4
The shell aliases \f(CW\*(C`p\*(C'\fR to be a convenient short form of \f(CW\*(C`print\*(C'\fR, e.g.
.Sp
.Vb 1
\&   pdl> p ones 5,3
\&
\&   [
\&    [1 1 1 1 1]
\&    [1 1 1 1 1]
\&    [1 1 1 1 1]
\&   ]
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`q\*(C'\fR and \f(CW\*(C`x\*(C'\fR are short-hand for \f(CW\*(C`quit\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`l\*(C'\fR lists the history buffer
.Sp
.Vb 1
\&  pdl> l # list last 20 commands
\&
\&  pdl> l 40 # list last 40 commands
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`?\*(C'\fR is an alias for help
.Sp
.Vb 1
\&  pdl> ? pdl2    # get help for new pdl2 shell
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`??\*(C'\fR is an alias for apropos
.Sp
.Vb 1
\&  pdl> ?? PDL::Doc
.Ve
.IP "\(bu" 4
help, apropos,
usage and sig:
all words after these commands are used verbatim and not evaluated
by perl. So you can write, e.g.,
.Sp
.Vb 1
\&  pdl> help help
.Ve
.Sp
instead of
.Sp
.Vb 1
\&  pdl> help \*(Aqhelp\*(Aq
.Ve
.SS "Command-line options"
.IX Subsection "Command-line options"
\&\fBperldl\fR and \fBpdl\fR support several command-line options to adjust the behavior of the
session.  Most of them are equivalent to commands that can be entered at the \fBpdl>\fR
prompt.  They are:
.IP "\-glut" 4
.IX Item "-glut"
Load OpenGL when starting the shell (the perl OpenGL module,
which is available from \s-1CPAN\s0 must be installed).  This enables
readline event loop processing.  Don't use with \-tk.
.IP "\-tk" 4
.IX Item "-tk"
Load Tk when starting the shell (the perl Tk module, which is
available from \s-1CPAN\s0 must be installed).  This enables readline
event loop processing.  Don't use with \-glut.
.IP "\-f file" 4
.IX Item "-f file"
Loads the file before processing any user input. Any errors
during the execution of the file are fatal.
.IP "\-w" 4
.IX Item "-w"
Runs with warning messages (i.e. the normal perl \f(CW\*(C`\-w\*(C'\fR warnings)
turned-on.
.IP "\-M module" 4
.IX Item "-M module"
Loads the module before processing any user input.
Compare corresponding \f(CW\*(C`perl\*(C'\fR switch.
.IP "\-m module" 4
.IX Item "-m module"
Unloads the module before processing any user input.
.IP "\-I directory" 4
.IX Item "-I directory"
Adds directory to the include path. (i.e. the \f(CW@INC\fR array)
Compare corresponding \f(CW\*(C`perl\*(C'\fR switch.
.IP "\-V" 4
.IX Item "-V"
Prints a summary of \s-1PDL\s0 config. This information should
be included with any \s-1PDL\s0 bug report. Compare corresponding
\&\f(CW\*(C`perl\*(C'\fR switch.
.SS "The startup file \fI~/.perldlrc\fP"
.IX Subsection "The startup file ~/.perldlrc"
If the file \fI~/.perldlrc\fR is found it is sourced at start-up to load default
modules, set shell variables, etc. If it is \s-1NOT\s0 found the distribution file
\&\fIPDL/default.perldlrc\fR is read instead. This loads various modules
considered useful by default, and which ensure compatibility with
v1.11. If you don't like this and want a more streamlined set of your
own favourite modules simple create your own \fI~/.perldlrc\fR.  You may
wish to start from the existing \fIPDL/default.perldlrc\fR as a template
since it will not be sourced once you replace it with your own version.
.PP
To set even more local defaults the file  \fIlocal.perldlrc\fR (in the current
directory) is sourced if found. This lets you load modules and define
subroutines for the project in the current directory.
.PP
The name is chosen specifically because it was found hidden files were
\&\s-1NOT\s0 wanted in these circumstances.
.PP
The startup file should normally include \*(L"use PDL::AutoLoader;\*(R", as 
many of the nicer interactive features won't work without it.
.SS "Shell variables"
.IX Subsection "Shell variables"
Shell variables: (\fINote\fR: if you don't like the defaults change
them in \fI~/.perldlrc\fR)
.IP "\(bu" 4
\&\f(CW$PERLDL::ESCAPE\fR  \- default value '#'
.Sp
Any line starting with this character is treated as a shell
escape. The default value is chosen because it escapes the
code from the standard perl interpreter.
.IP "\(bu" 4
\&\f(CW$PERLDL::HISTFILESIZE\fR  \- default value 500
.Sp
This is the number of lines of perldl shell command history
to keep.
.IP "\(bu" 4
\&\f(CW$PERLDL::PAGER\fR \- default value \f(CW\*(C`more\*(C'\fR
.Sp
External program to filter the output of commands.  Using \f(CW\*(C`more\*(C'\fR
prints output one screenful at a time.  On Unix, setting \f(CWpage(1)\fR
and \f(CW$PERLDL::PAGER\fR to \f(CW\*(C`tee \-a outfile\*(C'\fR will keep a record of the
output generated by subsequent perldl commands (without paging).
.IP "\(bu" 4
\&\f(CW$PERLDL::PROMPT\fR \- default value 'pdl> '
.Sp
Enough said  But can also be set to a subroutine reference, e.g.
\&\f(CW$PERLDL::PROMPT\fR = sub {join(':',(gmtime)[2,1,0]).'> '} puts the
current time into the prompt.
.IP "\(bu" 4
\&\f(CW$PERLDL::MULTI\fR \- default value 1
.Sp
If this is set to a true value, then perldl will parse multi-line 
perl blocks: your input will not be executed until you finish a line
with no outstanding group operators (such as quotes, blocks, parenthesis, or 
brackets) still active.  Continuation lines have a different prompt that
shows you what delimiters are still active.
.Sp
Note that this is not (yet!) a complete perl parser.  In particular,
Text::Balanced appears to be able to ignore quoting operatores 
like \f(CW\*(C`q/ ... /\*(C'\fR within a line, but not to be able to extend them across
lines.  Likewise, there is no support for the '<<' operator.
.Sp
Multiline conventional strings and {}, [], and () groupings are well
supported.
.IP "\(bu" 4
\&\f(CW$PERLDL::NO_EOF\fR \- default value 0 / 1 on MSWin32
.Sp
Protects against accidental use of \*(L"^D\*(R" from the terminal.  If this is
set to a true value, then you can't accidentally exit perldl by typing
\&\*(L"^D\*(R".  If you set it to a value larger than 1 (and \s-1PERLDL::MULTI\s0 is
set), then you can't use \*(L"^D\*(R" to exit multiline commands either.  If
you're piping commands in from a file or pipe, this variable has no
effect.
.IP "\(bu" 4
\&\f(CW$HOME\fR
.Sp
The user's home directory
.IP "\(bu" 4
\&\f(CW$PERLDL::TERM\fR
.Sp
This is the Term::ReadLine object associated with the perldl
shell. It can be used by routines called from perldl if your
command is interactive.
.IP "\(bu" 4
\&\f(CW$PDL::toolongtoprint\fR
.Sp
The maximal size pdls to print (defaults to 10,000 elements).
This is not just a \f(CW\*(C`perldl\*(C'\fR or \f(CW\*(C`pdl2\*(C'\fR variable but it is
something that is usually needed in an interactive debugging
session.
.ie n .SS "Executing scripts from the ""perldl"" prompt"
.el .SS "Executing scripts from the \f(CWperldl\fP prompt"
.IX Subsection "Executing scripts from the perldl prompt"
A useful idiom for developing perldl scripts or editing functions
on-line is
.PP
.Vb 2
\&  pdl> # emacs script &
\&    \-\- add perldl code to script and save the file
\&  
\&  pdl> do \*(Aqscript\*(Aq
.Ve
.PP
\&\-\- substitute your favourite window-based editor for 'emacs' (you may
also need to change the '&' on non-Unix systems).
.PP
Running \*(L"do 'script'\*(R" again updates any variables and function
definitions from the current version of 'script'.
.SS "Executing perldl scripts from the command line"
.IX Subsection "Executing perldl scripts from the command line"
\&\s-1PDL\s0 scripts are just perl scripts that happen to use \s-1PDL\s0 (and
possibly PDL::NiceSlice).  But for the truly lazy, perldl can be
invokes as a script interpreter.  Because perldl is itself an interpreted
perl script, most unices won't allow you to say \*(L"#!/usr/bin/perldl\*(R" 
at the top of your script.
.PP
Instead, say \*(L"#!/usr/bin/pdl\*(R" and your script will be executed exactly
as if you typed it, line-by-line, into the perldl shell.
.SS "Command preprocessing"
.IX Subsection "Command preprocessing"
\&\s-1NOTE:\s0 This feature is used by default by PDL::NiceSlice.
See below for more about slicing at the \f(CW\*(C`perldl\*(C'\fR prompt
.PP
In some cases, it is convenient to process commands before they are
sent to perl for execution. For example, this is the case where the
shell is being presented to people unfamiliar with perl but who wish
to take advantage of commands added locally (eg by automatically 
quoting arguments to certain commands).
.PP
*\fI\s-1NOTE\s0\fR*: The preprocessing interface has changed from earlier
versions! The old way using \f(CW$PERLDL::PREPROCESS\fR will still
work but is strongly deprecated and might go away in the future.
.PP
You can enable preprocessing by registering a filter with the
\&\f(CW\*(C`preproc_add\*(C'\fR function. \f(CW\*(C`preproc_add\*(C'\fR takes one argument which
is the filter to be installed. A filter is a Perl code reference (usually
set in a local configuration file) that will be called, with the
current command string as argument, just prior to the string being
executed by the shell. The modified string should be returned. Note
that you can make \f(CW\*(C`perldl\*(C'\fR completely unusable if you fail to
return the modified string; quitting is then your only option.
.PP
Filters can be removed from the preprocessing pipeline by calling
\&\f(CW\*(C`preproc_del\*(C'\fR with the filter to be removed as argument.  To find out
if a filter is currently installed in the preprocessing pipeline use
\&\f(CW\*(C`preproc_registered\*(C'\fR:
.PP
.Vb 1
\&  pdl> preproc_add $myfilter unless preproc_registered $myfilter;
.Ve
.PP
Previous versions of \f(CW\*(C`perldl\*(C'\fR used the variable \f(CW$PERLDL::PREPROCESS\fR.
This will still work but should be avoided. Please change your scripts
to use the \f(CW\*(C`preproc_add\*(C'\fR etc functions.
.PP
The following code would check for a call to function 'mysub'
and bracket arguments with qw.
.PP
.Vb 11
\&  $filter = preproc_add sub {
\&     my $str = shift;
\&     $str =~ s/^\es+//;  # Strip leading space
\&     if ($str =~ /^mysub/) {
\&        my ($command, $arguments) = split(/\es+/,$str, 2);
\&        $str = "$command qw( $arguments )" 
\&        if (defined $arguments && $arguments !~ /^qw/);
\&     };
\&     # Return the input string, modified as required
\&     return $str;
\&   };
.Ve
.PP
This would convert:
.PP
.Vb 1
\&  pdl> mysub arg1 arg2
.Ve
.PP
to
.PP
.Vb 1
\&  pdl> mysub qw( arg1 arg2 )
.Ve
.PP
which Perl will understand as a list.  Obviously, a little more effort
is required to check for cases where the caller has supplied a normal
list (and so does not require automatic quoting) or variable
interpolation is required.
.PP
You can remove this preprocessor using the \f(CW\*(C`preproc_del\*(C'\fR function
which takes one argument (the filter to be removed, it must be the
same coderef that was returned from a previous \f(CW\*(C`preproc_add\*(C'\fR call):
.PP
.Vb 1
\&  pdl> preproc_del $filter;
.Ve
.PP
An example of actual usage can be found in the \f(CW\*(C`perldl\*(C'\fR script. Look
at the function \f(CW\*(C`trans\*(C'\fR to see how the niceslicing preprocessor is
enabled/disabled.
.ie n .SS """perldl"" and PDL::NiceSlice"
.el .SS "\f(CWperldl\fP and PDL::NiceSlice"
.IX Subsection "perldl and PDL::NiceSlice"
PDL::NiceSlice introduces a more convenient
slicing syntax for piddles. In current versions of \f(CW\*(C`perldl\*(C'\fR and
\&\f(CW\*(C`pdl2\*(C'\fR niceslicing is enabled by default (if the required \s-1CPAN\s0
modules are installed on your machine).
.PP
At startup \f(CW\*(C`perldl\*(C'\fR will let you
know if niceslicing is enabled. The startup message will contain
info to this end, something like this:
.PP
.Vb 9
\&   perlDL shell v1.XX
\&    PDL comes with ABSOLUTELY NO WARRANTY. For details, see the file
\&    \*(AqCOPYING\*(Aq in the PDL distribution. This is free software and you
\&    are welcome to redistribute it under certain conditions, see
\&    the same file for details.
\&   ReadLines, NiceSlice  enabled
\&   Reading /home/csoelle/.perldlrc...
\&   Type \*(Aqdemo\*(Aq for online demos
\&   Loaded PDL v2.XX
.Ve
.PP
When you get such a message that indicates \f(CW\*(C`NiceSlice\*(C'\fR is enabled
you can use the enhanced slicing syntax:
.PP
.Vb 2
\&  pdl> $x = sequence 10;
\&  pdl> p $x(3:8:2)
.Ve
.PP
For details consult PDL::NiceSlice.
.PP
PDL::NiceSlice installs a filter in the
preprocessing pipeline (see above) to enable the enhanced slicing
syntax. You can use a few commands in the \f(CW\*(C`perldl\*(C'\fR shell to
switch this preprocessing on or off and also explicitly check
the substitutions that the NiceSlice filter makes.
.PP
You can switch the PDL::NiceSlice filter on and off
by typing
.PP
.Vb 1
\&  pdl> trans # switch niceslicing on
.Ve
.PP
and
.PP
.Vb 1
\&  pdl> notrans # switch niceslicing off
.Ve
.PP
respectively. The filter is on by default.
.PP
To see how your commands are translated
switch reporting on:
.PP
.Vb 4
\&  pdl> report 1;
\&  pdl> p $x(3:8:2)
\&  processed p $x\->nslice([3,8,2])
\&  [3 5 7]
.Ve
.PP
Similarly, switch reporting off as needed
.PP
.Vb 3
\&  pdl> report 0;
\&  pdl>  p $x(3:8:2)
\&  [3 5 7]
.Ve
.PP
Reporting is off by default.
.SS "Automatically execute your own hooks"
.IX Subsection "Automatically execute your own hooks"
The variable \f(CW@PERLDL::AUTO\fR is a simple list of perl code strings
and/or code reference. It is used to define code to be
executed automatically every time the user enters a new line.
.PP
A simple example would be to print the time of each command:
.PP
.Vb 1
\&  pdl> push @PERLDL::AUTO,\*(Aqprint scalar(gmtime),"\en"\*(Aq
\&  
\&  pdl> print zeroes(3,3)
\&  Sun May  3 04:49:05 1998
\&  
\&  [
\&   [0 0 0]
\&   [0 0 0]
\&   [0 0 0]
\&  ]
\&  
\&  pdl> print "Boo"
\&  Sun May  3 04:49:18 1998
\&  Boo
\&  pdl>
.Ve
.PP
Or to make sure any changes in the file 'local.perldlrc' are
always picked up :\-
.PP
.Vb 1
\&  pdl> push @PERLDL::AUTO,"do \*(Aqlocal.perldlrc\*(Aq"
.Ve
.PP
This code can of course be put *in* 'local.perldlrc', but
be careful :\-) [Hint: add \f(CW\*(C`unless ($started++)\*(C'\fR to above
to ensure it only gets done once!]
.PP
Another example application is as a hook for Autoloaders
(e.g. PDL::AutoLoader) to add code too which allows them to
automatically re-scan their files for changes. This is
extremely convenient at the interactive command line. Since
this hook is only in the shell it imposes no inefficiency on
\&\s-1PDL\s0 scripts.
.PP
Finally note this is a very powerful facility \- which means
it should be used with caution!
