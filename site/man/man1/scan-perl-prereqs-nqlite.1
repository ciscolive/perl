.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SCAN-PERL-PREREQS-NQLITE 1"
.TH SCAN-PERL-PREREQS-NQLITE 1 "2019-08-21" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
scan\-perl\-prereqs\-nqlite
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  scan\-perl\-prereqs\-nqlite [DIRS|FILES]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`scan\-perl\-prereqs\-nqlite\*(C'\fR traverses several files and
subdirectories in the current directory with File::Find to
collect all \f(CW\*(C`.pl\*(C'\fR, \f(CW\*(C`.PL\*(C'\fR, \f(CW\*(C`.pm\*(C'\fR, \f(CW\*(C`.t\*(C'\fR, \f(CW\*(C`.psgi\*(C'\fR files (as well
as all the files in \f(CW\*(C`scripts?\*(C'\fR and \f(CW\*(C`bin\*(C'\fR directories), and prints
a single combined list of prerequisites, which should be suitable
for piping to \f(CW\*(C`cpanm\*(C'\fR or similar tools.
.PP
You can also pass files and/or directories to limit files to scan.
In this case, however, \f(CW\*(C`scan\-perl\-prereqs\-nqlite\*(C'\fR may fail to
exclude modules that should belong to the same distribution.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "version" 4
.IX Item "version"
Show the version.
.IP "help" 4
.IX Item "help"
Show this help.
.IP "json" 4
.IX Item "json"
Print prerequisites as a \s-1JSON\s0 if \s-1JSON::PP\s0 is installed.
.IP "cpanfile, save_cpanfile" 4
.IX Item "cpanfile, save_cpanfile"
Print prerequisites as \f(CW\*(C`cpanfile\*(C'\fR if Module::CPANfile is installed. If \f(CW\*(C`safe\-cpanfile\*(C'\fR is set, create or update \f(CW\*(C`cpanfile\*(C'\fR.
.IP "suggests" 4
.IX Item "suggests"
Print suggestions (\f(CW\*(C`use\*(C'\fRd modules in \f(CW\*(C`eval\*(C'\fR) as well.
.IP "develop" 4
.IX Item "develop"
Print requirements/suggestions for developers (\f(CW\*(C`use\*(C'\fRd modules
in \f(CW\*(C`xt\*(C'\fR and \f(CW\*(C`author\*(C'\fR directories) as well.
.IP "perl_minimum_version" 4
.IX Item "perl_minimum_version"
May modify required perl version if new language features are
used without declaring the required perl version explicitly.
.IP "exclude_core" 4
.IX Item "exclude_core"
Ignore prerequisites that are bundled with Perl (of 5.008001
by default). This requires Module::CoreList version 2.99 or
above.
.IP "perl_version" 4
.IX Item "perl_version"
Ignore prerequisites that are bundled with Perl of a specific
version. This implies \f(CW\*(C`exclude\-core\*(C'\fR as well.
.IP "allow_test_pms" 4
.IX Item "allow_test_pms"
Print requirements/suggestions in .pm files that are placed under
t/ directory but are not directly used from .t files, too.
If Test::Class family is used under t/, this option is implicitly set.
.IP "base_dir" 4
.IX Item "base_dir"
Set the base directory from where \f(CW\*(C`scan\-perl\-prereqs\-nqlite\*(C'\fR
starts traversing files and directories.
.IP "ignore" 4
.IX Item "ignore"
Set a list of paths \f(CW\*(C`scan\-perl\-prereqs\-nqlite\*(C'\fR should ignore. This is
useful when your distribution has a set of OS-specific modules, for example.
.IP "ignore_re" 4
.IX Item "ignore_re"
You can also specify a regexp instead of a list of paths. If this is
set, \f(CW\*(C`ignore\*(C'\fR options are ignored.
.IP "private" 4
.IX Item "private"
Set a list of modules \f(CW\*(C`scan\-perl\-prereqs\-nqlite\*(C'\fR should consider
private, that is, that are not uploaded to the \s-1CPAN.\s0 Contrary to
the \f(CW\*(C`ignore\*(C'\fR option, which makes the scanner skip scanning the
file, this option lets the scanner scan files, and excludes matched
prerequisites afterwards.
.IP "private_re" 4
.IX Item "private_re"
You can also specify a regexp instead of a list of modules. If this
is set, \f(CW\*(C`private\*(C'\fR options are ignored.
.IP "scan_also" 4
.IX Item "scan_also"
Set a list of extra paths \f(CW\*(C`scan\-perl\-prereqs\-nqlite\*(C'\fR should also
scan. This is useful when your application/distribution uses an
untraditional file layout.
.IP "feature" 4
.IX Item "feature"
.Vb 3
\&  scan\-perl\-prereqs\-nqlite \e
\&    \-\-feature name:description:lib/My/Plugin/For/SpecificOS \e
\&    \-\-feature name:description:web/lib,web/bin
.Ve
.Sp
Specify a feature name, a description, and matching paths.
.IP "use_index" 4
.IX Item "use_index"
You can specify an index name of CPAN::Common::Index module (such as \*(L"Mirror\*(R" or \*(L"MetaDB\*(R") not to list all the modules of a required distribution.
.IP "blib" 4
.IX Item "blib"
If this is set, \f(CW\*(C`scan\-perl\-prereqs\-nqlite\*(C'\fR will traverse
subdirectories under \f(CW\*(C`blib\*(C'\fR to collect runtime requirements.
It may return better results if some of the files are located in
some uncommon places and/or some of them are listed in \f(CW\*(C`no_index\*(C'\fR.
However, files in \f(CW\*(C`blib\*(C'\fR may be older than the ones under \f(CW\*(C`lib\*(C'\fR
etc, and you need to update them by running a make or a \f(CW\*(C`Build\*(C'\fR
script before you run \f(CW\*(C`scan\-perl\-prereqs\-nqlite\*(C'\fR.
.IP "parser" 4
.IX Item "parser"
Set a list of parsers (or parser tags) \f(CW\*(C`scan\-perl\-prereqs\-nqlite\*(C'\fR
uses. If this option is not set, the scanner uses \f(CW\*(C`:installed\*(C'\fR
parsers by default.
.IP "inc" 4
.IX Item "inc"
Add a list of additional \f(CW@INC\fR path \f(CW\*(C`scan\-perl\-prereqs\-nqlite\*(C'\fR
looks for private parsers.
.IP "verbose" 4
.IX Item "verbose"
Print verbose messages.
.SH "AUTHOR"
.IX Header "AUTHOR"
Kenichi Ishigaki, <ishigaki@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2015 by Kenichi Ishigaki.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
