.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NETDISCO-DO 1"
.TH NETDISCO-DO 1 "2020-11-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
netdisco\-do \- Run any Netdisco job from the command\-line.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& ~/bin/netdisco\-do <action> [\-DISQR] [\-\-enqueue] [\-\-quiet] [\-d <device> [\-p <port>] [\-e <extra>]]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This program allows you to run any Netdisco poller job from the command-line.
.SH "ACTIONS"
.IX Header "ACTIONS"
Note that some jobs (\f(CW\*(C`discoverall\*(C'\fR, \f(CW\*(C`macwalk\*(C'\fR, \f(CW\*(C`arpwalk\*(C'\fR, \f(CW\*(C`nbtwalk\*(C'\fR)
simply add entries to the Netdisco job queue for other jobs, so won't seem
to do much when you trigger them. Everything else happens in real-time.
.PP
However the "\f(CW\*(C`\-\-enqueue\*(C'\fR" option will force the queueing of the job,
regardless of type. This may be useful for cron-driven actions, or for actions
working across large \s-1IP\s0 spaces.
.PP
For any action, if you wish to run one of its individual worker stages, then
pass \f(CW\*(C`action::stage\*(C'\fR as the first argument to \f(CW\*(C`netdisco\-do\*(C'\fR, for example
\&\f(CW\*(C`discover::neighbors\*(C'\fR.
.PP
Any action taking a \f(CW\*(C`device\*(C'\fR parameter can be passed either a hostname or \s-1IP\s0
address of any interface of a known or unknown device, or an \s-1IP\s0 prefix
(subnet) which will cause \f(CW\*(C`netdisco\-do\*(C'\fR to run the action on all addresses in
that range.
.PP
The \f(CW\*(C`device\*(C'\fR parameter may be passed multiple times. In this case, all
addresses (after expanding \s-1IP\s0 Prefixes) will be handled one by one.
.SS "discover"
.IX Subsection "discover"
Run a discover on the device (specified with \f(CW\*(C`\-d\*(C'\fR).
.PP
.Vb 1
\& ~/bin/netdisco\-do discover \-d 192.0.2.1
.Ve
.PP
Run a discover on two different devices (specified with \f(CW\*(C`\-d\*(C'\fR).
.PP
.Vb 1
\& ~/bin/netdisco\-do discover \-d 192.0.2.1 \-d 192.15.2.95
.Ve
.SS "discoverall"
.IX Subsection "discoverall"
Queue a discover for all known devices.
.SS "macsuck"
.IX Subsection "macsuck"
Run a macsuck on the device (specified with \f(CW\*(C`\-d\*(C'\fR).
.PP
.Vb 1
\& ~/bin/netdisco\-do macsuck \-d 192.0.2.1
.Ve
.SS "macwalk"
.IX Subsection "macwalk"
Queue a macsuck for all known devices.
.SS "arpnip"
.IX Subsection "arpnip"
Run an arpnip on the device (specified with \f(CW\*(C`\-d\*(C'\fR).
.PP
.Vb 1
\& ~/bin/netdisco\-do arpnip \-d 192.0.2.1
.Ve
.SS "arpwalk"
.IX Subsection "arpwalk"
Queue an arpnip for all known devices.
.SS "delete"
.IX Subsection "delete"
Delete a device (specified with \f(CW\*(C`\-d\*(C'\fR). Pass a log message for the action in
the \f(CW\*(C`\-e\*(C'\fR parameter. Optionally request for associated nodes to be archived
(rather than deleted) by setting the \f(CW\*(C`\-p\*(C'\fR parameter to "\f(CW\*(C`yes\*(C'\fR" (mnemonic:
\&\fBp\fRreserve).
.PP
.Vb 3
\& ~/bin/netdisco\-do delete \-d 192.0.2.1
\& ~/bin/netdisco\-do delete \-d 192.0.2.1 \-e \*(Aqolder than the sun\*(Aq
\& ~/bin/netdisco\-do delete \-d 192.0.2.1 \-e \*(Aqolder than the sun\*(Aq \-p yes
.Ve
.SS "renumber"
.IX Subsection "renumber"
Change the canonical \s-1IP\s0 address of a device (specified with \f(CW\*(C`\-d\*(C'\fR). Pass the
new \s-1IP\s0 address in the \f(CW\*(C`\-e\*(C'\fR parameter. All related records such as topology,
log and node information will also be updated to refer to the new device.
.PP
Note that \fIno\fR check is made as to whether the new \s-1IP\s0 is reachable for future
polling.
.PP
.Vb 1
\& ~/bin/netdisco\-do renumber \-d 192.0.2.1 \-e 192.0.2.254
.Ve
.SS "nbtstat"
.IX Subsection "nbtstat"
Run an nbtstat on the node (specified with \f(CW\*(C`\-d\*(C'\fR).
.PP
.Vb 1
\& ~/bin/netdisco\-do nbtstat \-d 192.0.2.2
.Ve
.SS "nbtwalk"
.IX Subsection "nbtwalk"
Queue an nbtstat for all known nodes.
.SS "expire"
.IX Subsection "expire"
Run Device and Node expiry actions according to configuration.
.SS "expirenodes"
.IX Subsection "expirenodes"
Archive nodes on the specified device. If you want to delete nodes, set the
\&\f(CW\*(C`\-e\*(C'\fR parameter to "\f(CW\*(C`no\*(C'\fR" (mnemonic: \fBe\fRxpire). If you want to perform the
action on a specific port, set the \f(CW\*(C`\-p\*(C'\fR parameter.
.PP
.Vb 2
\& ~/bin/netdisco\-do expirenodes \-d 192.0.2.1
\& ~/bin/netdisco\-do expirenodes \-d 192.0.2.1 \-p FastEthernet0/1 \-e no
.Ve
.SS "graph"
.IX Subsection "graph"
Generate GraphViz graphs for the largest cluster of devices.
.PP
You'll need to install the Graph::Undirected and GraphViz Perl modules,
and possibly also the \f(CW\*(C`graphviz\*(C'\fR utility for your operating system. Also
create a directory for the output files.
.PP
.Vb 3
\& mkdir ~/graph
\& ~/bin/localenv cpanm Graph::Undirected
\& ~/bin/localenv cpanm GraphViz
.Ve
.SS "show"
.IX Subsection "show"
Dump the content of an \s-1SNMP MIB\s0 leaf, which is useful for diagnostics and
troubleshooting. You should provide the "\f(CW\*(C`\-e\*(C'\fR" option which is the name of
the leaf (such as \f(CW\*(C`interfaces\*(C'\fR or \f(CW\*(C`uptime\*(C'\fR).
.PP
If you wish to test with a device class other than that discovered, prefix the
leaf with the class short name, for example "\f(CW\*(C`Layer3::C3550::interfaces\*(C'\fR\*(L" or
\&\*(R"\f(CW\*(C`Layer2::HP::uptime\*(C'\fR\*(L". Using \*(R"\f(CW\*(C`::\*(C'\fR\*(L" as the start of the prefix will test
against the base \*(R"\f(CW\*(C`SNMP::Info\*(C'\fR" class.
.PP
As well, \s-1SNMP OID\s0 names can be used as an argument for "\f(CW\*(C`\-e\*(C'\fR", so you can
use \f(CW\*(C`ifName\*(C'\fR for example, which will use the netdisco-mibs files for
translations.
.PP
All "\f(CW\*(C`\-e\*(C'\fR" parameters are case sensitive.
.PP
.Vb 4
\& ~/bin/netdisco\-do show \-d 192.0.2.1 \-e interfaces
\& ~/bin/netdisco\-do show \-d 192.0.2.1 \-e Layer2::HP::interfaces
\& ~/bin/netdisco\-do show \-d 192.0.2.1 \-e ::interfaces
\& ~/bin/netdisco\-do show \-d 192.0.2.1 \-e ifName
.Ve
.PP
A parameter may be passed to the \f(CW\*(C`SNMP::Info\*(C'\fR method or \s-1SNMP\s0 object in the
"\f(CW\*(C`\-p\*(C'\fR" parameter:
.PP
.Vb 2
\& ~/bin/netdisco\-do show \-d 192.0.2.1 \-e has_layer \-p 3
\& ~/bin/netdisco\-do show \-d 192.0.2.1 \-e ifName \-p 2
.Ve
.PP
The "\f(CW\*(C`\-e\*(C'\fR" parameter \f(CW\*(C`specify\*(C'\fR will show the used configuration for the
specified device.
.PP
.Vb 1
\& ~/bin/netdisco\-do show \-d 192.0.2.1 \-e specify
.Ve
.SS "psql"
.IX Subsection "psql"
Start an interactive terminal with the Netdisco PostgreSQL database. If you
pass an \s-1SQL\s0 statement in the \f(CW\*(C`\-e\*(C'\fR option then it will be executed.
.PP
.Vb 3
\& ~/bin/netdisco\-do psql
\& ~/bin/netdisco\-do psql \-e \*(AqSELECT ip, dns FROM device\*(Aq
\& ~/bin/netdisco\-do psql \-e \*(AqCOPY (SELECT ip, dns FROM device) TO STDOUT WITH CSV HEADER\*(Aq
.Ve
.SS "stats"
.IX Subsection "stats"
Updates Netdisco's statistics on number of devices, nodes, etc, for today.
.SS "location"
.IX Subsection "location"
Set the \s-1SNMP\s0 location field on the device (specified with \f(CW\*(C`\-d\*(C'\fR). Pass the
location string in the \f(CW\*(C`\-e\*(C'\fR extra parameter.
.PP
.Vb 1
\& ~/bin/netdisco\-do location \-d 192.0.2.1 \-e \*(Aqwiring closet\*(Aq
.Ve
.SS "contact"
.IX Subsection "contact"
Set the \s-1SNMP\s0 contact field on the device (specified with \f(CW\*(C`\-d\*(C'\fR). Pass the
contact name in the \f(CW\*(C`\-e\*(C'\fR extra parameter.
.PP
.Vb 1
\& ~/bin/netdisco\-do contact \-d 192.0.2.1 \-e \*(Aqtel: 555\-2453\*(Aq
.Ve
.SS "portname"
.IX Subsection "portname"
Set the description on a device port. Requires the \f(CW\*(C`\-d\*(C'\fR parameter (device),
\&\f(CW\*(C`\-p\*(C'\fR parameter (port), and \f(CW\*(C`\-e\*(C'\fR parameter (description).
.PP
.Vb 1
\& ~/bin/netdisco\-do portname \-d 192.0.2.1 \-p FastEthernet0/1 \-e \*(AqWeb Server\*(Aq
.Ve
.SS "portcontrol"
.IX Subsection "portcontrol"
Set the up/down status on a device port. Requires the \f(CW\*(C`\-d\*(C'\fR parameter
(device), \f(CW\*(C`\-p\*(C'\fR parameter (port), and \f(CW\*(C`\-e\*(C'\fR parameter (\*(L"up\*(R" or \*(L"down\*(R").
.PP
.Vb 2
\& ~/bin/netdisco\-do portcontrol \-d 192.0.2.1 \-p FastEthernet0/1 \-e up
\& ~/bin/netdisco\-do portcontrol \-d 192.0.2.1 \-p FastEthernet0/1 \-e down
.Ve
.SS "vlan"
.IX Subsection "vlan"
Set the native \s-1VLAN\s0 on a device port. Requires the \f(CW\*(C`\-d\*(C'\fR parameter (device),
\&\f(CW\*(C`\-p\*(C'\fR parameter (port), and \f(CW\*(C`\-e\*(C'\fR parameter (\s-1VLAN\s0 number).
.PP
.Vb 1
\& ~/bin/netdisco\-do vlan \-d 192.0.2.1 \-p FastEthernet0/1 \-e 102
.Ve
.SS "power"
.IX Subsection "power"
Set the PoE on/off status on a device port. Requires the \f(CW\*(C`\-d\*(C'\fR parameter
(device), \f(CW\*(C`\-p\*(C'\fR parameter (port), and \f(CW\*(C`\-e\*(C'\fR parameter (\*(L"on\*(R" or \*(L"off\*(R").
.PP
.Vb 2
\& ~/bin/netdisco\-do power \-d 192.0.2.1 \-p FastEthernet0/1 \-e on
\& ~/bin/netdisco\-do power \-d 192.0.2.1 \-p FastEthernet0/1 \-e off
.Ve
.SS "makerancidconf"
.IX Subsection "makerancidconf"
Generates rancid configuration for known devices. See
App::Netdisco::Worker::Plugin::MakeRancidConf for configuration needs.
.PP
.Vb 1
\& ~/bin/netdisco\-do makerancidconf
.Ve
.SS "getapikey"
.IX Subsection "getapikey"
Generates an \s-1API\s0 key for the supplied username. See the 
\&\s-1API\s0 doc <https://github.com/netdisco/netdisco/wiki/API> for further 
information.
.PP
.Vb 1
\& ~/bin/netdisco\-do getapikey \-e the_username
.Ve
.SS "dumpconfig"
.IX Subsection "dumpconfig"
Will dump the loaded and parsed configuration for the application. Pass a
specific configuration setting name to the \f(CW\*(C`\-e\*(C'\fR parameter to dump only that.
.PP
Some configuration items like device_auth are evaluated against the \s-1ACL\s0 first.
Pass a device in \f(CW\*(C`\-d\*(C'\fR to display them:
.PP
.Vb 1
\& ~/bin/netdisco\-do dumpconfig \-d 192.0.2.1 \-e device_auth
.Ve
.SH "DEBUG OPTIONS"
.IX Header "DEBUG OPTIONS"
The flag "\f(CW\*(C`\-R\*(C'\fR" will cause any changes to the database to be rolled back
at the end of the action.
.PP
The flags "\f(CW\*(C`\-DISQ\*(C'\fR" can be specified, multiple times, and enable the
following items in order:
.ie n .IP """\-D""" 4
.el .IP "\f(CW\-D\fR" 4
.IX Item "-D"
Netdisco debug log level.
.ie n .IP """\-I"" or ""\-II""" 4
.el .IP "\f(CW\-I\fR or \f(CW\-II\fR" 4
.IX Item "-I or -II"
SNMP::Info trace level (1 or 2).
.ie n .IP """\-S"" or ""\-SS"" or ""\-SSS""" 4
.el .IP "\f(CW\-S\fR or \f(CW\-SS\fR or \f(CW\-SSS\fR" 4
.IX Item "-S or -SS or -SSS"
\&\s-1SNMP\s0 (net-snmp) trace level (1, 2 or 3).
.ie n .IP """\-Q""" 4
.el .IP "\f(CW\-Q\fR" 4
.IX Item "-Q"
DBIx::Class trace enabled.
.PP
In case of issues with the colored output, setting the environment variable
\&\f(CW\*(C`ANSI_COLORS_DISABLED\*(C'\fR can be used to suppress it.
