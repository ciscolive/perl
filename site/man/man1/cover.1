.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "COVER 1"
.TH COVER 1 "2020-05-19" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cover \- report coverage statistics
.SH "VERSION"
.IX Header "VERSION"
version 1.36
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& cover \-test
\&
\& cover \-report html_basic
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Report coverage statistics in a variety of formats.
.PP
The summary option produces a short textual summary.  Other reports are
available by using the report option.
.PP
The following reports are currently available:
.PP
.Vb 6
\& html        \- detailed HTML reports  (default)
\& html_basic  \- detailed HTML reports with syntax highlighting
\& text        \- detailed textual summary
\& compilation \- output in a format similar to Perl errors
\& json        \- output in a JSON format
\& vim         \- show coverage information in vim gutter
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
The following command line options are supported:
.PP
.Vb 3
\& \-h \-help              \- show help
\& \-i \-info              \- show documentation
\& \-v \-version           \- show version
\&
\& \-silent               \- don\*(Aqt print informational messages (default off)
\& \-summary              \- give summary report                (default on)
\& \-report report_format \- report format                      (default html)
\& \-outputdir dir        \- directory for output               (default given db)
\& \-launch               \- launch report in viewer (if avail) (default off)
\&
\& \-select filename      \- only report on the file            (default all)
\& \-ignore filename      \- don\*(Aqt report on the file           (default none)
\& \-select_re RE         \- append to REs of files to select   (default none)
\& \-ignore_re RE         \- append to REs of files to ignore   (default none)
\& \-write [db]           \- write the merged database          (default off)
\& \-delete               \- drop database(s)                   (default off)
\& \-dump_db              \- dump database(s) (for debugging)   (default off)
\&
\& \-coverage criterion   \- report on criterion  (default all available)
\&
\& \-test                 \- drop database(s) and run make test (default off)
\& \-gcov                 \- run gcov to cover XS code     (default on if using gcc)
\& \-make make_prog       \- use the given \*(Aqmake\*(Aq program for \*(Aqmake test\*(Aq
\& \-prefer_lib           \- prefer files in lib                (default off)
\&
\& \-add_uncoverable_point    string
\& \-delete_uncoverable_point string
\& \-clean_uncoverable_points
\& \-uncoverable_file         file
\&
\& other options specific to the report format
\&
\& coverage_database [coverage_database ...]
.Ve
.PP
The \f(CW\*(C`\-report\*(C'\fR, \f(CW\*(C`\-select\*(C'\fR, \f(CW\*(C`\-ignore\*(C'\fR, \f(CW\*(C`\-select_re\*(C'\fR, \f(CW\*(C`\-ignore_re\*(C'\fR, and
\&\f(CW\*(C`\-coverage\*(C'\fR options may be specified multiple times.
.SH "REPORT FORMATS"
.IX Header "REPORT FORMATS"
The following \f(CW\*(C`\-report\*(C'\fR options are available in the core module.  Other
reports may be available if they've been installed from external packages.
.IP "html|html_minimal (default)" 4
.IX Item "html|html_minimal (default)"
\&\s-1HTML\s0 reporting. Percentage thresholds are colour-coded and configurable
via \-report_c0 <integer>, \-report_c1 <integer> and \-report_c2 <integer>.:
.Sp
.Vb 4
\&    0%      75%      90%      100%
\&    |   ..   |   ..   |   ..   |
\&       <c0      <c1      <c2   c3
\&       red     yellow   orange green
.Ve
.IP "html_basic" 4
.IX Item "html_basic"
\&\s-1HTML\s0 reporting with syntax highlighting if \s-1PPI::HTML\s0 or Perl::Tidy
module is detected. Like html|html_minimal reporting, percentage thresholds
are colour-coded and configurable.
.IP "text" 4
.IX Item "text"
Plain text reporting.
.IP "compilation" 4
.IX Item "compilation"
A textual report in a format similar to that output by Perl itself such that
the report may be used by your editor or other reporting tools to show where
coverage is missing.
.IP "json" 4
.IX Item "json"
A report in \s-1JSON\s0 format.
.IP "vim" 4
.IX Item "vim"
A report suitable for use with the vim editor to show coverage data in the sign
column.
.SH "DETAILS"
.IX Header "DETAILS"
Any number of coverage databases may be specified on the command line.
These databases will be merged and the reports will be based on the
merged information.  If no databases are specified the default database
(cover_db) will be used.
.PP
The \f(CW\*(C`\-write\*(C'\fR option will write out the merged database.  If no name is
given for the new database, the first database read in will be
overwritten.  When this option is used no reports are generated by
default.
.PP
Specify the \f(CW\*(C`\-select\*(C'\fR, \f(CW\*(C`\-select_re\*(C'\fR, \f(CW\*(C`\-ignore\*(C'\fR, and \f(CW\*(C`\-ignore_re\*(C'\fR options to
report on specific files.  \f(CW\*(C`\-select\*(C'\fR and \f(CW\*(C`\-ignore\*(C'\fR are interpreted as shell
globs; \f(CW\*(C`\-select_re\*(C'\fR and \f(CW\*(C`\-ignore_re\*(C'\fR are interpreted as regular expressions.
.PP
Specify \f(CW\*(C`\-coverage\*(C'\fR options to report on specific criteria.  By default all
available information on all criteria in all files will be reported.
Available coverage options are statement, branch, condition, subroutine, pod,
and default (which equates to all available options).  However, if you know
you only want coverage information for certain criteria it is better to only
collect data for those criteria in the first place by specifying them at that
point.  This will make the data collection and reporting processes faster and
less memory intensive.  See the documentation for Devel::Cover for more
information.
.PP
If you want all *except* some criteria, then you can say something like
\&\f(CW\*(C`\-coverage default,\-pod\*(C'\fR.
.PP
If you specify multiple \f(CW\*(C`\-report\*(C'\fR options, make sure that they do not
conflict.  For example, the different \s-1HTML\s0 reports will overwrite each other's
results.
.PP
The \f(CW\*(C`\-test\*(C'\fR option will delete the databases and run your tests to generate
new coverage data before reporting on it.  Devel::Cover knows how to work
with standard Perl Makefiles as well as Module::Build based distributions.
For detailed instructions see the documentation for ExtUtils::MakeMaker at
<https://metacpan.org/module/ExtUtils::MakeMaker> or for Module::Build at
<https://metacpan.org/module/Module::Build> both of which come as standard
in recent Perl distributions.
.PP
The \f(CW\*(C`\-gcov\*(C'\fR option will try to run gcov on any \s-1XS\s0 code.  This requires that
you are using gcc of course.  If you are using the \f(CW\*(C`\-test\*(C'\fR option will be
turned on by default.
.PP
The \f(CW\*(C`\-prefer_lib\*(C'\fR option tells Devel::Cover to report on files in the lib
directory even if they were used from the blib directory.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
The following exit values are returned:
.PP
0   All operations were completed successfully.
.PP
>0  An error occurred.
.PP
With the \-test option the exit status of the underlying test run is returned.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Devel::Cover
.SH "BUGS"
.IX Header "BUGS"
Did I mention that this is alpha code?
.PP
See the \s-1BUGS\s0 file.
.SH "LICENCE"
.IX Header "LICENCE"
Copyright 2001\-2019, Paul Johnson (paul@pjcj.net)
.PP
This software is free.  It is licensed under the same terms as Perl itself.
.PP
The latest version of this software should be available from my homepage:
http://www.pjcj.net
