.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "TRANSERIALIZE 1"
.TH TRANSERIALIZE 1 "2019-07-12" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
transerialize \- transerialize files from a format to a different one
.SH "VERSION"
.IX Header "VERSION"
version 1.3.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # simple
\&    $ transerialize foo.yaml bar.json
\&
\&    # with options
\&    $ transerialize pretty=1 foo.yaml bar.json
\&
\&    # reading from STDIN
\&    $ cat foo.yaml | transerialize \-.yaml bar.json
\&
\&    # printing to STDOUT
\&    $ transerialize foo.yaml \-.json
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`transerialize\*(C'\fR is a command-line interface to the 
File::Serialize function of the same name.
.PP
The command behaves pretty much like its underlying function, except
for the details below.
.SS "Default options"
.IX Subsection "Default options"
All leading arguments containing an '=' 
will be considered default options. In other words,
.PP
.Vb 1
\&    $ transerialize pretty=1 format=json foo bar
.Ve
.PP
is equivalent to the script
.PP
.Vb 1
\&    use File::Serialize { pretty => 1, format => \*(Aqjson\*(Aq };
\&
\&    transerialize_file \*(Aqfoo\*(Aq => \*(Aqbar\*(Aq;
.Ve
.SS "Code arguments"
.IX Subsection "Code arguments"
Any argument that begin with a '{', '[' or 'sub {' will be
eval'ed (as opposed as being considered filenames).
.SS "\s-1STDIN\s0 and \s-1STDOUT\s0"
.IX Subsection "STDIN and STDOUT"
An input filename which main part is a dash will be
taken to be \s-1STDIN.\s0 For example
.PP
.Vb 1
\&    $ transerialize_file \-.yaml foo.json
.Ve
.PP
will read \s-1STDIN,\s0 consider it to be \s-1YAML,\s0 and then
convert it to \s-1JSON.\s0
.PP
Likewise, an output file which main part is a dash
will be printed on \s-1STDOUT.\s0 For example
.PP
.Vb 1
\&    $ transerialize_file foo.yaml \-.json
.Ve
.PP
will print out the data of \fIfoo.yaml\fR as \s-1JSON.\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Yanick Champoux <yanick@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2019, 2017, 2016, 2015 by Yanick Champoux.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
