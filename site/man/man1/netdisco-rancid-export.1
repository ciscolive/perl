.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.41)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NETDISCO-RANCID-EXPORT 1"
.TH NETDISCO-RANCID-EXPORT 1 "2020-11-05" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
netdisco\-rancid\-export \- DEPRECATED!
.SH "DEPRECATED!"
.IX Header "DEPRECATED!"
Note! This script is now deprecated and no longer maintained. The replacement
is built in to Netdisco core, so can be scheduled in the backend, and also has
more powerful configuration. See
App::Netdisco::Worker::Plugin::MakeRancidConf.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
This script requires some configuration to be added to your Netdisco
"\f(CW\*(C`~/environments/deployment.yml\*(C'\fR" file, for example:
.PP
.Vb 10
\& rancid:
\&   rancid_home:  /var/lib/rancid
\&   down_age:     \*(Aq1 day\*(Aq
\&   delimiter:    \*(Aq:\*(Aq
\&   by_ip:        [ other ]
\&   by_hostname:  [ other2 ]
\&   groups:
\&     switch:     [ \*(Aqname:.*[Ss][Ww].*\*(Aq ]
\&     rtr:        [ \*(Aqname:[rR]tr.*\*(Aq ]
\&     ap:         [ \*(Aqname:[aA][pP].*\*(Aq ]
\&   vendormap:
\&     "dell":      force10
\&     "dell:2024": dellnseries
.Ve
.PP
Note that \f(CW\*(C`netdisco\-rancid\-export\*(C'\fR is not part of the automatic scheduler
built in to Netdisco. You should run this script via \f(CW\*(C`cron\*(C'\fR just after your
periodic \f(CW\*(C`discoverall\*(C'\fR.
.ie n .SS """rancid_home"""
.el .SS "\f(CWrancid_home\fP"
.IX Subsection "rancid_home"
The location to write \s-1RANCID\s0 Group configuration files into. A subdirectory
for each Group will be created.
.PP
Default: "\f(CW\*(C`/var/lib/rancid\*(C'\fR".
.ie n .SS """down_age"""
.el .SS "\f(CWdown_age\fP"
.IX Subsection "down_age"
This should be the same or greater than the interval between regular discover
jobs on your network. Devices which have not been discovered within this time
will be marked as "\f(CW\*(C`down\*(C'\fR" to \s-1RANCID.\s0
.PP
Default: "\f(CW\*(C`1 day\*(C'\fR".
.ie n .SS """delimiter"""
.el .SS "\f(CWdelimiter\fP"
.IX Subsection "delimiter"
\&\s-1RANCID\s0 version 3 uses a semicolon as delimiter. Set this to the delimiter
character if needed to be different from the default.
.PP
Default: "\f(CW\*(C`:\*(C'\fR".
.ie n .SS """vendormap"""
.el .SS "\f(CWvendormap\fP"
.IX Subsection "vendormap"
If the device Vendor in Netdisco is not the same as the \s-1RANCID\s0 vendor script,
configure a mapping here. The left hand side (key) should be the Netdisco
vendor, the right hand side (value) should be the \s-1RANCID\s0 vendor script name.
You can also set the Netdisco vendor to be "\f(CW\*(C`vendor:model\*(C'\fR" for fine-grained
control. See the synopsis for an example.
.ie n .SS """groups"""
.el .SS "\f(CWgroups\fP"
.IX Subsection "groups"
This dictionary maps \s-1RANCID\s0 Group names with configuration which will match
devices in the Netdisco database. The configuration is the same as any of
Netdisco's "\f(CW*_only\fR" settings, and accepts \s-1IP,\s0 prefix, device property.
.ie n .SS """by_ip"""
.el .SS "\f(CWby_ip\fP"
.IX Subsection "by_ip"
List of \s-1RANCID\s0 Groups which will have Device IPs written to the \s-1RANCID\s0
configuration file, instead of \s-1DNS\s0 or \s-1SNMP\s0 host names.
.ie n .SS """by_hostname"""
.el .SS "\f(CWby_hostname\fP"
.IX Subsection "by_hostname"
List of \s-1RANCID\s0 Groups which will have Device Hostname written to the \s-1RANCID\s0
configuration file, instead of \s-1FQDN.\s0 This is done simply by stripping the
\&\f(CW\*(C`domain_suffix\*(C'\fR configuration item from the \s-1FQDN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
App::Netdisco
